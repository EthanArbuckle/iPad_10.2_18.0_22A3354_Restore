void sub_1000033AC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDistributedNotificationCenter defaultCenter](NSDistributedNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "handleMFDNotification:", CFSTR("com.apple.stockholm.se.mfd"), 0);

  v5 = SESDefaultLogObject(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "SESKey registered to receive MFD notifications", v7, 2u);
  }

}

id sub_100003448(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_dumpState");
}

id sub_1000034BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint8_t v6[16];

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Received MFD notification, clearing instance representations", v6, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "setInstanceRepresentations:", 0);
}

id sub_1000036C0(id a1, KeySlot *a2)
{
  return -[KeySlot description](a2, "description");
}

void sub_100003880(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  _QWORD v6[5];
  id v7;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v3 = sub_10004CFC0((uint64_t)SEProxyAdapter, v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  }
  else
  {
    v4 = 0;
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100003948;
  v6[3] = &unk_100302B58;
  v5 = *(void **)(a1 + 40);
  v6[4] = *(_QWORD *)(a1 + 48);
  v7 = *(id *)(a1 + 56);
  sub_1000516E8((uint64_t)SecureElementManager, v4, v5, v6);
  if (v2)

}

void sub_100003948(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "messageQueue"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100003A1C;
  v11[3] = &unk_100302B30;
  v12 = v6;
  v8 = *(id *)(a1 + 40);
  v14 = v5;
  v15 = v8;
  v13 = *(_QWORD *)(a1 + 32);
  v9 = v5;
  v10 = v6;
  dispatch_async(v7, v11);

}

void sub_100003A1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  if (*(_QWORD *)(a1 + 32))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "initializeRAMRepresentation:", *(_QWORD *)(a1 + 48)));
    if (v2)
      v3 = 0;
    else
      v3 = *(_QWORD *)(a1 + 48);
    v4 = (id)v2;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), v3);

  }
}

void sub_100003C50(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  _QWORD v6[5];
  id v7;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v3 = sub_10004CFC0((uint64_t)SEProxyAdapter, v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  }
  else
  {
    v4 = 0;
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100003D18;
  v6[3] = &unk_100302B58;
  v5 = *(void **)(a1 + 40);
  v6[4] = *(_QWORD *)(a1 + 48);
  v7 = *(id *)(a1 + 56);
  sub_1000516E8((uint64_t)SecureElementManager, v4, v5, v6);
  if (v2)

}

void sub_100003D18(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "messageQueue"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100003DEC;
  v11[3] = &unk_100302B30;
  v12 = v6;
  v8 = *(id *)(a1 + 40);
  v14 = v5;
  v15 = v8;
  v13 = *(_QWORD *)(a1 + 32);
  v9 = v5;
  v10 = v6;
  dispatch_async(v7, v11);

}

void sub_100003DEC(uint64_t a1)
{
  id v2;

  if (*(_QWORD *)(a1 + 32))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "initializeRAMRepresentation:", *(_QWORD *)(a1 + 48)));
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

  }
}

void sub_100003F90(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v11 = a1[6];
    v12 = SESEnsureError(v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v12);
    (*(void (**)(uint64_t, _QWORD, _QWORD, void *))(v11 + 16))(v11, 0, 0, v10);
  }
  else
  {
    v8 = (void *)a1[4];
    v9 = a1[5];
    v13 = 0;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "getKeyHandle:key:error:", v5, v9, &v13));
    v7 = v13;
    (*(void (**)(_QWORD, id, void *, id))(a1[6] + 16))(a1[6], v5, v10, v7);
  }

}

id sub_100004324(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "AID"));
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

BOOL sub_100004364(id a1, KeySlot *a2)
{
  return -[KeySlot state](a2, "state") == 1;
}

BOOL sub_100004384(id a1, KeySlot *a2)
{
  KeySlot *v2;
  BOOL v3;

  v2 = a2;
  v3 = -[KeySlot state](v2, "state") == 2 && -[KeySlot designation](v2, "designation") == 0;

  return v3;
}

id sub_100004600(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "AID"));
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

BOOL sub_100004640(id a1, KeySlot *a2)
{
  return -[KeySlot state](a2, "state") == 5;
}

BOOL sub_100004748(id a1, InstanceRepresentation *a2)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[InstanceRepresentation AID](a2, "AID"));
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("A000000704C0000000000002"));

  return v3;
}

NSNumber *__cdecl sub_100004788(id a1, KeySlot *a2)
{
  KeySlot *v2;
  void *v3;

  v2 = a2;
  if (-[KeySlot state](v2, "state") == 6)
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", -[KeySlot number](v2, "number")));
  else
    v3 = 0;

  return (NSNumber *)v3;
}

id sub_100004FB0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "AID"));
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

id sub_100004FF0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "keyIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "keyIdentifier"));
  v5 = objc_msgSend(v3, "isEqualToData:", v4);

  return v5;
}

BOOL sub_100005050(uint64_t a1, void *a2)
{
  unsigned int v3;

  v3 = objc_msgSend(a2, "keyNumber");
  return v3 == objc_msgSend(*(id *)(a1 + 32), "keyNumber");
}

void sub_100005200(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  unsigned int v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  void *v31;
  void *v32;
  unsigned int v33;
  id v34;
  id v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  unsigned int v39;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v15 = a1[8];
    v16 = SESEnsureError(v6);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    (*(void (**)(uint64_t, _QWORD, void *))(v15 + 16))(v15, 0, v17);

  }
  else
  {
    v8 = (void *)a1[4];
    v35 = 0;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "getUsableLegacyKeySlot:outError:", CFSTR("A000000704C0000000000002"), &v35));
    v10 = v35;
    if (v10)
    {
      v7 = v10;
      v12 = a1[8];
      v13 = SESEnsureError(v10);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      (*(void (**)(uint64_t, _QWORD, void *))(v12 + 16))(v12, 0, v14);
    }
    else
    {
      v18 = SESDefaultLogObject(0, v11);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        v20 = objc_msgSend(v9, "number");
        *(_DWORD *)buf = 67109120;
        LODWORD(v37) = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Creating key in slot %u", buf, 8u);
      }

      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
      v22 = (void *)a1[5];
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", objc_msgSend(v9, "number")));
      v24 = (void *)a1[6];
      v25 = (void *)a1[7];
      v34 = 0;
      v26 = sub_10002D0B4(v5, v21, v22, v23, v24, v25, &v34);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v26);
      v7 = v34;

      if (v7)
      {
        (*(void (**)(_QWORD, _QWORD, id))(a1[8] + 16))(a1[8], 0, v7);
      }
      else
      {
        v27 = objc_msgSend(v9, "setState:", 6);
        v29 = SESDefaultLogObject(v27, v28);
        v30 = objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "publicKeyData"));
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "asHexString"));
          v33 = objc_msgSend(v9, "number");
          *(_DWORD *)buf = 138412546;
          v37 = v32;
          v38 = 1024;
          v39 = v33;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Created legacy key %@ in slot %u", buf, 0x12u);

        }
        (*(void (**)(_QWORD, void *, _QWORD))(a1[8] + 16))(a1[8], v14, 0);
      }
    }

  }
}

void sub_1000055D4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  unsigned int v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint8_t buf[4];
  unsigned int v34;
  __int16 v35;
  uint64_t v36;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v16 = *(_QWORD *)(a1 + 48);
    v17 = SESEnsureError(v6);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v18);

LABEL_7:
    goto LABEL_8;
  }
  v8 = objc_msgSend(*(id *)(a1 + 32), "unsignedIntValue");
  if (v8 >= 2)
  {
    v8 = objc_msgSend(*(id *)(a1 + 32), "unsignedIntValue");
    if (v8 < 0x10)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
      v20 = sub_10002EF28(v5, v19, objc_msgSend(*(id *)(a1 + 32), "unsignedShortValue"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(v20);

      if (v7)
      {
        v23 = SESDefaultLogObject(v21, v22);
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          v25 = objc_msgSend(*(id *)(a1 + 32), "unsignedIntValue");
          *(_DWORD *)buf = 67109120;
          v34 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Unable to delete legacy key in slot %u", buf, 8u);
        }
      }
      else
      {
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "instanceRepresentations"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "find:", &stru_100302D40));

        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "keys"));
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectAtIndexedSubscript:", objc_msgSend(*(id *)(a1 + 32), "unsignedIntValue")));
        objc_msgSend(v28, "resetLegacyToAvailable");

        v31 = SESDefaultLogObject(v29, v30);
        v24 = objc_claimAutoreleasedReturnValue(v31);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          v32 = objc_msgSend(*(id *)(a1 + 32), "unsignedIntValue");
          *(_DWORD *)buf = 67109378;
          v34 = v32;
          v35 = 2112;
          v36 = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Deleted legacy key in slot %u with error %@", buf, 0x12u);
        }
      }

      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
      goto LABEL_7;
    }
  }
  v10 = *(_QWORD *)(a1 + 48);
  v11 = SESDefaultLogObject(v8, v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v13 = SESErrorDomain;
  objc_msgSend(*(id *)(a1 + 32), "unsignedIntValue");
  v14 = SESCreateAndLogError(0, v12, v13, 8, CFSTR("Attempted to delete non-legacy key in slot %u in deleteSELegacyKey"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v15);

LABEL_8:
}

BOOL sub_100005884(id a1, InstanceRepresentation *a2)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[InstanceRepresentation AID](a2, "AID"));
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("A000000704C0000000000002"));

  return v3;
}

void sub_100005A5C(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v15 = a1[8];
    v16 = SESEnsureError(v6);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    (*(void (**)(uint64_t, _QWORD, void *))(v15 + 16))(v15, 0, v17);

  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
    v9 = (void *)a1[4];
    v10 = (void *)a1[5];
    v11 = (void *)a1[6];
    v12 = (void *)a1[7];
    v18 = 0;
    v13 = sub_10002D8AC(v5, v8, v9, v10, v11, v12, &v18);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v7 = v18;

    (*(void (**)(void))(a1[8] + 16))();
  }

}

void sub_100005CDC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v15 = *(_QWORD *)(a1 + 64);
    v16 = SESEnsureError(v6);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    (*(void (**)(uint64_t, _QWORD, void *))(v15 + 16))(v15, 0, v17);

  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
    v9 = *(void **)(a1 + 32);
    v10 = *(void **)(a1 + 40);
    v11 = *(void **)(a1 + 48);
    v12 = objc_msgSend(*(id *)(a1 + 56), "unsignedIntValue");
    v18 = 0;
    v13 = sub_10002DE98(v5, v8, v9, v10, v11, v12, &v18);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v7 = v18;

    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }

}

void sub_100005ED8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v4 = a3;
  if (v4)
  {
    v5 = v4;
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v6 = *(void **)(a1 + 32);
    v8 = 0;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "getOccupiedLegacyKeySlots:", &v8));
    v5 = v8;
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
}

void sub_100006054(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v14 = *(_QWORD *)(a1 + 48);
    v15 = SESEnsureError(v6);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v15);
    (*(void (**)(uint64_t, _QWORD, void *))(v14 + 16))(v14, 0, v13);
  }
  else
  {
    v8 = objc_msgSend(*(id *)(a1 + 32), "DERItem");
    v10 = +[KeySlot _acl:containsOperation:](KeySlot, "_acl:containsOperation:", v8, v9, "os");
    v12 = *(_QWORD *)(a1 + 32);
    v11 = *(void **)(a1 + 40);
    if (v10)
    {
      v20 = 0;
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "_createSynchronizableKey:extractedACLs:error:", v5, v12, &v20));
      v7 = v20;
      (*(void (**)(_QWORD, void *, id))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v13, v7);
    }
    else
    {
      v19 = 0;
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "_createKey:acl:error:", v5, v12, &v19));
      v7 = v19;
      v16 = *(_QWORD *)(a1 + 48);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "key"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "keyData"));
      (*(void (**)(uint64_t, void *, id))(v16 + 16))(v16, v18, v7);

    }
  }

}

void sub_1000065F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100006630(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100006640(uint64_t a1)
{

}

void sub_100006648(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id obj;

  v6 = (void *)a1[4];
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
  v8 = (void *)a1[5];
  v9 = (void *)a1[6];
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a2, a3));
  v11 = *(_QWORD *)(a1[8] + 8);
  obj = *(id *)(v11 + 40);
  v12 = sub_100032A2C(v6, v7, v8, v9, v10, &obj);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  objc_storeStrong((id *)(v11 + 40), obj);
  v14 = *(_QWORD *)(a1[7] + 8);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v13;

}

void sub_10000683C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (!v7 || v9)
  {
    v13 = *(_QWORD *)(a1 + 40);
    v14 = SESEnsureError(v9);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v15);

  }
  else
  {
    v11 = *(void **)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
    v16 = 0;
    objc_msgSend(v11, "_deleteLoadedKey:instanceAID:loadedKey:error:", v7, v12, v8, &v16);
    v10 = v16;

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_100006AC8(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint8_t buf[4];
  unsigned int v28;
  __int16 v29;
  unsigned int v30;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v11 = v9;
  if (!v7 || v9)
  {
    v23 = a1[7];
    v24 = SESEnsureError(v9);
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    (*(void (**)(uint64_t, _QWORD, void *))(v23 + 16))(v23, 0, v25);

  }
  else
  {
    v12 = SESDefaultLogObject(0, v10);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "slot"));
      v15 = objc_msgSend(v14, "number");
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "key"));
      *(_DWORD *)buf = 67109376;
      v28 = v15;
      v29 = 1024;
      v30 = objc_msgSend(v16, "keyNumber");
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Sign with slot %u key 0x%x", buf, 0xEu);

    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
    v18 = (void *)a1[4];
    v19 = (void *)a1[5];
    v20 = (void *)a1[6];
    v26 = 0;
    v21 = sub_10002F0C8(v7, v17, v18, v8, v19, v20, &v26);
    v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    v11 = v26;

    (*(void (**)(void))(a1[7] + 16))();
  }

}

void sub_100006E2C(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint8_t buf[4];
  unsigned int v28;
  __int16 v29;
  unsigned int v30;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v11 = v9;
  if (!v7 || v9)
  {
    v23 = a1[7];
    v24 = SESEnsureError(v9);
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    (*(void (**)(uint64_t, _QWORD, void *))(v23 + 16))(v23, 0, v25);

  }
  else
  {
    v12 = SESDefaultLogObject(0, v10);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "slot"));
      v15 = objc_msgSend(v14, "number");
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "key"));
      *(_DWORD *)buf = 67109376;
      v28 = v15;
      v29 = 1024;
      v30 = objc_msgSend(v16, "keyNumber");
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Sign precomputed with slot %u key 0x%x", buf, 0xEu);

    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
    v18 = (void *)a1[4];
    v19 = (void *)a1[5];
    v20 = (void *)a1[6];
    v26 = 0;
    v21 = sub_10002F708(v7, v17, v18, v8, v19, v20, &v26);
    v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    v11 = v26;

    (*(void (**)(void))(a1[7] + 16))();
  }

}

void sub_1000071D0(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint8_t buf[4];
  unsigned int v28;
  __int16 v29;
  unsigned int v30;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v11 = v9;
  if (!v7 || v9)
  {
    v23 = a1[7];
    v24 = SESEnsureError(v9);
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    (*(void (**)(uint64_t, _QWORD, void *))(v23 + 16))(v23, 0, v25);

  }
  else
  {
    v12 = SESDefaultLogObject(0, v10);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "slot"));
      v15 = objc_msgSend(v14, "number");
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "key"));
      *(_DWORD *)buf = 67109376;
      v28 = v15;
      v29 = 1024;
      v30 = objc_msgSend(v16, "keyNumber");
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Sign with slot # %u key 0x%x", buf, 0xEu);

    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
    v18 = (void *)a1[4];
    v19 = (void *)a1[5];
    v20 = (void *)a1[6];
    v26 = 0;
    v21 = sub_10002F8BC(v7, v17, v18, v8, v19, v20, &v26);
    v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    v11 = v26;

    (*(void (**)(void))(a1[7] + 16))();
  }

}

void sub_1000075CC(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint8_t buf[4];
  unsigned int v34;
  __int16 v35;
  unsigned int v36;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v11 = v9;
  if (!v7 || v9)
  {
    v29 = a1[10];
    v30 = SESEnsureError(v9);
    v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    (*(void (**)(uint64_t, _QWORD, _QWORD, void *))(v29 + 16))(v29, 0, 0, v31);

  }
  else
  {
    v12 = SESDefaultLogObject(0, v10);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "slot"));
      v15 = objc_msgSend(v14, "number");
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "key"));
      *(_DWORD *)buf = 67109376;
      v34 = v15;
      v35 = 1024;
      v36 = objc_msgSend(v16, "keyNumber");
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Encrypt with slot # %u key 0x%x", buf, 0xEu);

    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
    v18 = (void *)a1[4];
    v19 = (void *)a1[5];
    v20 = (void *)a1[6];
    v21 = (void *)a1[7];
    v22 = (void *)a1[8];
    v23 = (void *)a1[9];
    v32 = 0;
    v24 = sub_10002FE3C(v7, v17, v18, v8, v19, v20, v21, v22, v23, &v32);
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    v11 = v32;

    v26 = a1[10];
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "cipherText"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "authenticationTag"));
    (*(void (**)(uint64_t, void *, void *, id))(v26 + 16))(v26, v27, v28, v11);

  }
}

void sub_100007A60(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint8_t buf[4];
  unsigned int v32;
  __int16 v33;
  unsigned int v34;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v11 = v9;
  if (!v7 || v9)
  {
    v27 = a1[11];
    v28 = SESEnsureError(v9);
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    (*(void (**)(uint64_t, _QWORD, void *))(v27 + 16))(v27, 0, v29);

  }
  else
  {
    v12 = SESDefaultLogObject(0, v10);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "slot"));
      v15 = objc_msgSend(v14, "number");
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "key"));
      *(_DWORD *)buf = 67109376;
      v32 = v15;
      v33 = 1024;
      v34 = objc_msgSend(v16, "keyNumber");
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Decrypt with slot # %u key 0x%x", buf, 0xEu);

    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
    v18 = (void *)a1[4];
    v19 = (void *)a1[5];
    v20 = (void *)a1[6];
    v21 = (void *)a1[7];
    v22 = (void *)a1[8];
    v23 = (void *)a1[9];
    v24 = (void *)a1[10];
    v30 = 0;
    v25 = sub_100030548(v7, v17, v18, v8, v19, v20, v21, v22, v23, v24, &v30);
    v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    v11 = v30;

    (*(void (**)(void))(a1[11] + 16))();
  }

}

void sub_100007F9C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint8_t buf[4];
  unsigned int v37;
  __int16 v38;
  unsigned int v39;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v11 = v9;
  if (!v7 || v9)
  {
    v32 = *(_QWORD *)(a1 + 120);
    v33 = SESEnsureError(v9);
    v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
    (*(void (**)(uint64_t, _QWORD, _QWORD, void *))(v32 + 16))(v32, 0, 0, v34);

  }
  else
  {
    v12 = SESDefaultLogObject(0, v10);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "slot"));
      v15 = objc_msgSend(v14, "number");
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "key"));
      *(_DWORD *)buf = 67109376;
      v37 = v15;
      v38 = 1024;
      v39 = objc_msgSend(v16, "keyNumber");
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Transcode with slot %u key 0x%x", buf, 0xEu);

    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
    v18 = *(void **)(a1 + 32);
    v19 = *(void **)(a1 + 40);
    v20 = *(void **)(a1 + 48);
    v21 = *(void **)(a1 + 56);
    v22 = *(void **)(a1 + 64);
    v23 = *(_OWORD *)(a1 + 72);
    v24 = *(_OWORD *)(a1 + 88);
    v25 = *(void **)(a1 + 104);
    v26 = *(void **)(a1 + 112);
    v35 = 0;
    v27 = sub_100030C64(v7, v17, v18, v8, v19, v20, v21, v22, (void *)v23, *((void **)&v23 + 1), (void *)v24, *((void **)&v24 + 1), v25, v26, &v35);
    v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
    v11 = v35;

    v29 = *(_QWORD *)(a1 + 120);
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "cipherText"));
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "authenticationTag"));
    (*(void (**)(uint64_t, void *, void *, id))(v29 + 16))(v29, v30, v31, v11);

  }
}

void sub_100008404(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void *i;
  void *v28;
  char *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  char v41;
  char v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint8_t v48[128];
  uint8_t buf[4];
  _BYTE v50[10];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v11 = v9;
  if (!v7 || v9)
  {
    v36 = *(_QWORD *)(a1 + 56);
    v37 = SESEnsureError(v9);
    v22 = (void *)objc_claimAutoreleasedReturnValue(v37);
    (*(void (**)(uint64_t, _QWORD, void *))(v36 + 16))(v36, 0, v22);
  }
  else
  {
    v39 = v7;
    v12 = SESDefaultLogObject(0, v10);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "slot"));
      v15 = objc_msgSend(v14, "number");
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "key"));
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v50 = v15;
      *(_WORD *)&v50[4] = 1024;
      *(_DWORD *)&v50[6] = objc_msgSend(v16, "keyNumber");
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "PT Attest with slot %u key 0x%x", buf, 0xEu);

    }
    v38 = v8;

    v19 = SESDefaultLogObject(v17, v18);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      v21 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v50 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "OIDs %@", buf, 0xCu);
    }

    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v23 = *(id *)(a1 + 32);
    v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v44, v48, 16);
    if (v24)
    {
      v25 = v24;
      v26 = *(_QWORD *)v45;
      do
      {
        for (i = 0; i != v25; i = (char *)i + 1)
        {
          if (*(_QWORD *)v45 != v26)
            objc_enumerationMutation(v23);
          v28 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v28, "isEqualToString:", CFSTR("1.2.840.113635.100.6.65.16")))
          {
            v43 = 16;
            v29 = &v43;
          }
          else if (objc_msgSend(v28, "isEqualToString:", CFSTR("1.2.840.113635.100.6.65.17")))
          {
            v42 = 17;
            v29 = &v42;
          }
          else
          {
            if (!objc_msgSend(v28, "isEqualToString:", CFSTR("1.2.840.113635.100.6.65.19")))
              continue;
            v41 = 19;
            v29 = &v41;
          }
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v29, 1));
          objc_msgSend(v22, "appendData:", v30);

        }
        v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v44, v48, 16);
      }
      while (v25);
    }

    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
    v8 = v38;
    v32 = *(void **)(a1 + 40);
    v33 = *(void **)(a1 + 48);
    v40 = 0;
    v7 = v39;
    v34 = sub_10003181C(v39, v31, v38, v32, v22, v33, &v40);
    v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
    v11 = v40;

    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_100008924(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  void *v5;
  NSData *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;

  if (!a2 || a3)
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = SESEnsureError(a3);
    v16 = (id)objc_claimAutoreleasedReturnValue(v11);
    (*(void (**)(uint64_t))(v10 + 16))(v10);
  }
  else
  {
    v4 = sub_10005066C(a2, (const char *)a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = (NSData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "casdCertificate"));
    v7 = DERDecodeData(v6);
    v16 = (id)objc_claimAutoreleasedReturnValue(v7);

    v9 = *(_QWORD *)(a1 + 32);
    if (v16)
    {
      (*(void (**)(uint64_t))(v9 + 16))(v9);
    }
    else
    {
      v12 = SESDefaultLogObject(v8, 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v14 = SESCreateAndLogError(0, v13, SESErrorDomain, 0, CFSTR("Malformed CASD?"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      (*(void (**)(uint64_t, _QWORD, void *))(v9 + 16))(v9, 0, v15);

    }
  }

}

void sub_100008C14(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;

  v7 = a4;
  v8 = v7;
  if (!a2 || v7)
  {
    v18 = a1[9];
    v19 = SESEnsureError(v7);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v19);
    (*(void (**)(uint64_t, _QWORD, void *))(v18 + 16))(v18, 0, v14);
  }
  else
  {
    v9 = (void *)a1[4];
    v10 = a1[5];
    v11 = a1[6];
    v12 = a1[7];
    v13 = a1[8];
    v20 = 0;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_getBAACertificatesForKey:key:subjectIdentifier:nonce:OIDs:validityInterval:error:", a2, a3, v10, v11, v12, v13, &v20));
    v8 = v20;
    v15 = a1[9];
    v16 = sub_1000117DC((uint64_t)v14);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    (*(void (**)(uint64_t, void *, id))(v15 + 16))(v15, v17, v8);

  }
}

void sub_100009174(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;

  v18 = a2;
  v5 = a3;
  if (!v18 || v5)
  {
    v11 = *(_QWORD *)(a1 + 32);
    v12 = SESEnsureError(v5);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    (*(void (**)(uint64_t, _QWORD, void *))(v11 + 16))(v11, 0, v13);
LABEL_6:

    goto LABEL_12;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
  v7 = sub_10002EB98(v18, v6);

  if ((v7 - 1) < 3)
  {
    v10 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
LABEL_11:
    v10();
    goto LABEL_12;
  }
  if (v7 == 4)
  {
    v10 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
    goto LABEL_11;
  }
  if (!v7)
  {
    v14 = *(_QWORD *)(a1 + 32);
    v15 = SESDefaultLogObject(v8, v9);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v16 = SESCreateAndLogError(0, v13, SESErrorDomain, 0, CFSTR("Failed to get PTC version"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    (*(void (**)(uint64_t, _QWORD, void *))(v14 + 16))(v14, 0, v17);

    goto LABEL_6;
  }
LABEL_12:

}

void sub_1000095C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *i;
  void *v24;
  char v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  id v49;
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  id v55;
  id v56;
  uint8_t buf[4];
  void *v58;
  _BYTE v59[128];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v37 = *(_QWORD *)(a1 + 96);
    v38 = SESEnsureError(v6);
    v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
    (*(void (**)(uint64_t, _QWORD, void *))(v37 + 16))(v37, 0, v39);

  }
  else
  {
    v8 = *(void **)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    v56 = 0;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "getKeyHandle:key:error:", v5, v9, &v56));
    v11 = v56;
    v7 = v11;
    if (v11 || !v10)
    {
      v40 = *(_QWORD *)(a1 + 96);
      v41 = SESDefaultLogObject(v11, v12);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v41);
      v42 = SESCreateAndLogError(0, v15, SESErrorDomain, 0, CFSTR("Failed to load key to be signed"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(v42);
      (*(void (**)(uint64_t, _QWORD, void *))(v40 + 16))(v40, 0, v18);
    }
    else
    {
      v13 = *(void **)(a1 + 32);
      v14 = *(_QWORD *)(a1 + 48);
      v55 = 0;
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "getKeyHandle:key:error:", v5, v14, &v55));
      v16 = v55;
      v7 = v16;
      if (!v16 && v15)
      {
        v47 = v10;
        v48 = v5;
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
        v51 = 0u;
        v52 = 0u;
        v53 = 0u;
        v54 = 0u;
        v46 = a1;
        v19 = *(id *)(a1 + 56);
        v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v51, v59, 16);
        if (!v20)
          goto LABEL_21;
        v21 = v20;
        v22 = *(_QWORD *)v52;
        while (1)
        {
          for (i = 0; i != v21; i = (char *)i + 1)
          {
            if (*(_QWORD *)v52 != v22)
              objc_enumerationMutation(v19);
            v24 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)i);
            v25 = 16;
            v50 = 16;
            if ((objc_msgSend(v24, "isEqualToString:", CFSTR("1.2.840.113635.100.6.65.16")) & 1) != 0)
              goto LABEL_15;
            v26 = objc_msgSend(v24, "isEqualToString:", CFSTR("1.2.840.113635.100.6.65.17"));
            if ((v26 & 1) != 0)
            {
              v25 = 17;
LABEL_15:
              v50 = v25;
              objc_msgSend(v18, "appendBytes:length:", &v50, 1);
              continue;
            }
            v28 = SESDefaultLogObject(v26, v27);
            v29 = objc_claimAutoreleasedReturnValue(v28);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v58 = v24;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Ignoring unknown OID %@", buf, 0xCu);
            }

          }
          v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v51, v59, 16);
          if (!v21)
          {
LABEL_21:

            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
            v31 = *(void **)(a1 + 64);
            v32 = *(void **)(a1 + 72);
            v33 = *(void **)(a1 + 80);
            v34 = *(void **)(a1 + 88);
            v49 = 0;
            v10 = v47;
            v5 = v48;
            v35 = sub_100032238(v48, v30, v31, v47, v15, v32, v33, v18, v34, &v49);
            v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
            v7 = v49;

            (*(void (**)(_QWORD, void *, id))(*(_QWORD *)(v46 + 96) + 16))(*(_QWORD *)(v46 + 96), v36, v7);
            goto LABEL_25;
          }
        }
      }
      v43 = *(_QWORD *)(a1 + 96);
      v44 = SESDefaultLogObject(v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v44);
      v45 = SESCreateAndLogError(0, v18, SESErrorDomain, 0, CFSTR("Failed to load attesting key"));
      v36 = (void *)objc_claimAutoreleasedReturnValue(v45);
      (*(void (**)(uint64_t, _QWORD, void *))(v43 + 16))(v43, 0, v36);
LABEL_25:

    }
  }

}

void sub_100009AE0(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  unsigned int v17;
  void *v18;
  unsigned int v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  void *v29;
  unsigned int v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  uint8_t buf[4];
  unsigned int v41;
  __int16 v42;
  unsigned int v43;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (!v7 || v9)
  {
    v34 = a1[6];
    v35 = SESEnsureError(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v35);
    (*(void (**)(uint64_t, _QWORD, void *))(v34 + 16))(v34, 0, v11);
  }
  else
  {
    v39 = 0;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[SESKeyDesignationStorageCoordinator getAndReturnError:](_TtC10seserviced35SESKeyDesignationStorageCoordinator, "getAndReturnError:", &v39));
    v12 = v39;
    v10 = v12;
    if (v12 || !v11)
    {
      v36 = a1[6];
      v37 = SESEnsureError(v12);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v37);
      (*(void (**)(uint64_t, _QWORD, void *))(v36 + 16))(v36, 0, v24);
    }
    else
    {
      v14 = SESDefaultLogObject(0, v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "slot"));
        v17 = objc_msgSend(v16, "number");
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "key"));
        v19 = objc_msgSend(v18, "keyNumber");
        *(_DWORD *)buf = 67109376;
        v41 = v17;
        v42 = 1024;
        v43 = v19;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Update ACL for Key in slot %u key 0x%x", buf, 0xEu);

      }
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
      v21 = (void *)a1[4];
      v22 = (void *)a1[5];
      v38 = 0;
      v23 = sub_100032E74(v7, v20, v21, v8, v22, &v38);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      v10 = v38;

      v27 = SESDefaultLogObject(v25, v26);
      v28 = objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "slot"));
        v30 = objc_msgSend(v29, "number");
        *(_DWORD *)buf = 67109120;
        v41 = v30;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Settings slot %u to unoccupied due to implicit ptc_UpdateACL", buf, 8u);

      }
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "slot"));
      objc_msgSend(v31, "resetToEmpty");

      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "key"));
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "keyIdentifier"));
      objc_msgSend(v11, "removeDesignationWithKeyIdentifier:", v33);

      (*(void (**)(_QWORD, void *, id))(a1[6] + 16))(a1[6], v24, v10);
    }

  }
}

void sub_100009EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_100009EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  char v5;

  if (a3)
    v4 = a4 == 0;
  else
    v4 = 0;
  v5 = v4;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v5;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10000A0AC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  const char *v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  uint8_t buf[4];
  int v47;
  __int16 v48;
  id v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  void *v53;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (v8 && v7 && !v9)
  {
    v45 = 0;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[SESKeyDesignationStorageCoordinator getAndReturnError:](_TtC10seserviced35SESKeyDesignationStorageCoordinator, "getAndReturnError:", &v45));
    v12 = v45;
    v10 = v12;
    if (v12 || !v11)
    {
      v34 = *(_QWORD *)(a1 + 32);
      v35 = SESEnsureError(v12);
      v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
      (*(void (**)(uint64_t, void *))(v34 + 16))(v34, v36);

    }
    else
    {
      v14 = SESDefaultLogObject(0, v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        v39 = *(_QWORD *)(a1 + 40);
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "key"));
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "publicKey"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "base64"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "key"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "assetACL"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "base64"));
        *(_DWORD *)buf = 67109890;
        v47 = v39;
        v48 = 2112;
        v49 = v8;
        v50 = 2112;
        v51 = v16;
        v52 = 2112;
        v53 = v19;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Setting designation %d for key %@ (%@) (%@)", buf, 0x26u);

      }
      v20 = *(_QWORD *)(a1 + 40);
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "slot"));
      objc_msgSend(v21, "setDesignation:", v20);

      if (*(_QWORD *)(a1 + 40))
      {
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "slot"));
        v37 = objc_msgSend(v40, "number");
        v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "key"));
        v44 = v11;
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "keyIdentifier"));
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "key"));
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "assetACL"));
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "key"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "assetACLAttestation"));
        v28 = sub_10005066C(v7, v27);
        v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
        if ((unint64_t)objc_msgSend(v29, "type") <= 3)
          v30 = 1;
        else
          v30 = 2;
        objc_msgSend(v44, "designateKeyWithAid:slotNumber:keyIdentifier:assetACL:assetACLAttestation:operationApprovalVersion:designation:", v22, v37, v23, v24, v26, v30, *(_QWORD *)(a1 + 40));

        v31 = v40;
        v11 = v44;

      }
      else
      {
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "key"));
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "keyIdentifier"));
        objc_msgSend(v11, "removeDesignationWithKeyIdentifier:", v31);
      }

      objc_msgSend(v11, "commit");
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0);
    }
  }
  else
  {
    v32 = *(_QWORD *)(a1 + 32);
    v33 = SESEnsureError(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v33);
    (*(void (**)(uint64_t, void *))(v32 + 16))(v32, v11);
  }

}

void sub_10000A5B4(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *j;
  void *v20;
  id v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  id v31;
  _BYTE v32[128];
  _BYTE v33[128];

  v31 = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SESKeyDesignationStorageCoordinator getAndReturnError:](_TtC10seserviced35SESKeyDesignationStorageCoordinator, "getAndReturnError:", &v31));
  v3 = v31;
  v4 = v3;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 0;
  if (v5)
  {
    v21 = v3;
    objc_msgSend(v2, "removeWithDesignation:", *(_QWORD *)(a1 + 48));
    v22 = v2;
    objc_msgSend(v2, "commit");
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "instanceRepresentations"));
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v28 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
          v23 = 0u;
          v24 = 0u;
          v25 = 0u;
          v26 = 0u;
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "keys"));
          v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v23, v32, 16);
          if (v16)
          {
            v17 = v16;
            v18 = *(_QWORD *)v24;
            do
            {
              for (j = 0; j != v17; j = (char *)j + 1)
              {
                if (*(_QWORD *)v24 != v18)
                  objc_enumerationMutation(v15);
                v20 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)j);
                if (objc_msgSend(v20, "designation") == *(id *)(a1 + 48))
                  objc_msgSend(v20, "setDesignation:", 0);
              }
              v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v23, v32, 16);
            }
            while (v17);
          }

        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
      }
      while (v11);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v4 = v21;
    v2 = v22;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    v7 = SESEnsureError(v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v8);

  }
}

void sub_10000AAAC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  void *v39;
  unsigned int v40;
  id v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  void *v71;
  unsigned int v72;
  id v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  id *v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  void *v88;
  unsigned int v89;
  id v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  void *v104;
  void *v105;
  id v106;
  id obj;
  _QWORD v108[4];
  id v109;
  id v110;
  id v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t (*v117)(uint64_t, uint64_t);
  void (*v118)(uint64_t);
  id v119;
  _DWORD *v120;
  id v121;
  uint64_t v122;
  id *v123;
  uint64_t v124;
  uint64_t (*v125)(uint64_t, uint64_t);
  void (*v126)(uint64_t);
  id v127;
  uint8_t buf[4];
  unsigned int v129;
  __int16 v130;
  id v131;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v19 = *(void **)(a1 + 32);
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[SEFidoEvents serviceError](_TtC10seserviced12SEFidoEvents, "serviceError"));
    objc_msgSend(v19, "reportCAEvent:", v20);

    v21 = *(_QWORD *)(a1 + 72);
    v22 = SESEnsureError(v7);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    (*(void (**)(uint64_t, _QWORD, void *))(v21 + 16))(v21, 0, v23);

  }
  else
  {
    v122 = 0;
    v123 = (id *)&v122;
    v124 = 0x3032000000;
    v125 = sub_100006630;
    v126 = sub_100006640;
    v127 = 0;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[SEKeySyncManager singleton](_TtC10seserviced16SEKeySyncManager, "singleton"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ptcViewName"));
    v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "getAvailableTLKForViewName:secureElement:", v9, v5));

    if (v105)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_extractedACLForFidoKey"));
      v11 = *(void **)(a1 + 40);
      v12 = v123;
      v121 = v123[5];
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "_createKey:acl:error:", v5, v10, &v121));
      objc_storeStrong(v12 + 5, v121);
      if (v13 && !v123[5])
      {
        v120 = 0;
        if (ACMContextCreate((uint64_t *)&v120) || (v31 = v120) == 0)
        {
          v50 = *(void **)(a1 + 32);
          v51 = (void *)objc_claimAutoreleasedReturnValue(+[SEFidoEvents unspecifiedError](_TtC10seserviced12SEFidoEvents, "unspecifiedError"));
          objc_msgSend(v50, "reportCAEvent:", v51);

          v52 = *(_QWORD *)(a1 + 72);
          v55 = SESDefaultLogObject(v53, v54);
          v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
          v57 = SESCreateAndLogError(0, v56, SESErrorDomain, 0, CFSTR("Failed to get an ACMContext?"));
          v58 = (void *)objc_claimAutoreleasedReturnValue(v57);
          (*(void (**)(uint64_t, _QWORD, void *))(v52 + 16))(v52, 0, v58);

        }
        else
        {
          v114 = 0;
          v115 = &v114;
          v116 = 0x3032000000;
          v117 = sub_100006630;
          v118 = sub_100006640;
          v119 = 0;
          v108[0] = _NSConcreteStackBlock;
          v108[1] = 3221225472;
          v108[2] = sub_10000B408;
          v108[3] = &unk_100302D90;
          v112 = &v114;
          v102 = v5;
          v109 = v102;
          v32 = v13;
          v110 = v32;
          v111 = v105;
          v113 = &v122;
          ACMContextGetExternalForm(v31, (uint64_t)v108);
          ACMContextDelete(v120, 1);
          v120 = 0;
          if (v115[5] && !v123[5])
          {
            v59 = *(void **)(a1 + 32);
            v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
            v61 = *(_QWORD *)(a1 + 48);
            v62 = *(_QWORD *)(a1 + 56);
            v63 = *(_QWORD *)(a1 + 64);
            v64 = v123;
            obj = v123[5];
            v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "createFidoAttestationWithSecureElement:instanceAID:fidoKey:relyingParty:relyingPartyAccountHash:challenge:error:", v102, v60, v32, v61, v62, v63, &obj));
            objc_storeStrong(v64 + 5, obj);

            if (v104 && !v123[5])
            {
              v78 = *(void **)(a1 + 32);
              v97 = *(_QWORD *)(a1 + 56);
              v98 = *(_QWORD *)(a1 + 48);
              v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "key"));
              v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v100, "publicKey"));
              v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "sha256"));
              v80 = v115[5];
              v81 = v123;
              v106 = v123[5];
              LODWORD(v78) = objc_msgSend(v78, "storeKeyWithRelyingParty:relyingPartyAccountHash:fidoKeyHash:keyData:error:", v98, v97, v79, v80, &v106);
              objc_storeStrong(v81 + 5, v106);

              if ((_DWORD)v78 && !v123[5])
              {
                v101 = *(_QWORD *)(a1 + 56);
                v103 = *(_QWORD *)(a1 + 48);
                v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "key"));
                v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v95, "publicKey"));
                v49 = (void *)objc_claimAutoreleasedReturnValue(+[SEFidoKey withRelyingParty:relyingPartyAccountHash:fidoPublicKey:fidoAttestation:](SEFidoKey, "withRelyingParty:relyingPartyAccountHash:fidoPublicKey:fidoAttestation:", v103, v101, v96, v104));

                (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
              }
              else
              {
                v82 = *(void **)(a1 + 32);
                v83 = (void *)objc_claimAutoreleasedReturnValue(+[SEFidoEvents keychainAddError](_TtC10seserviced12SEFidoEvents, "keychainAddError"));
                objc_msgSend(v82, "reportCAEvent:", v83);

                v86 = SESDefaultLogObject(v84, v85);
                v87 = objc_claimAutoreleasedReturnValue(v86);
                if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
                {
                  v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "slot"));
                  v89 = objc_msgSend(v88, "number");
                  v90 = v123[5];
                  *(_DWORD *)buf = 67109378;
                  v129 = v89;
                  v130 = 2112;
                  v131 = v90;
                  _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_ERROR, "Failed to storeKeyWithRelyingParty deleting keys in %d : %@", buf, 0x12u);

                }
                v91 = *(void **)(a1 + 40);
                v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
                objc_msgSend(v91, "_deleteLoadedKey:instanceAID:loadedKey:error:", v102, v92, v32, 0);

                v93 = *(_QWORD *)(a1 + 72);
                v94 = SESEnsureError(v123[5]);
                v49 = (void *)objc_claimAutoreleasedReturnValue(v94);
                (*(void (**)(uint64_t, _QWORD, void *))(v93 + 16))(v93, 0, v49);
              }
            }
            else
            {
              v65 = *(void **)(a1 + 32);
              v66 = (void *)objc_claimAutoreleasedReturnValue(+[SEFidoEvents keyAttestationError](_TtC10seserviced12SEFidoEvents, "keyAttestationError"));
              objc_msgSend(v65, "reportCAEvent:", v66);

              v69 = SESDefaultLogObject(v67, v68);
              v70 = objc_claimAutoreleasedReturnValue(v69);
              if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
              {
                v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "slot"));
                v72 = objc_msgSend(v71, "number");
                v73 = v123[5];
                *(_DWORD *)buf = 67109378;
                v129 = v72;
                v130 = 2112;
                v131 = v73;
                _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "Failed to get createFidoAttestationWithSecureElement deleting keys in %d : %@", buf, 0x12u);

              }
              v74 = *(void **)(a1 + 40);
              v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
              objc_msgSend(v74, "_deleteLoadedKey:instanceAID:loadedKey:error:", v102, v75, v32, 0);

              v76 = *(_QWORD *)(a1 + 72);
              v77 = SESEnsureError(v123[5]);
              v49 = (void *)objc_claimAutoreleasedReturnValue(v77);
              (*(void (**)(uint64_t, _QWORD, void *))(v76 + 16))(v76, 0, v49);
            }
          }
          else
          {
            v33 = *(void **)(a1 + 32);
            v34 = (void *)objc_claimAutoreleasedReturnValue(+[SEFidoEvents keyExportError](_TtC10seserviced12SEFidoEvents, "keyExportError"));
            objc_msgSend(v33, "reportCAEvent:", v34);

            v37 = SESDefaultLogObject(v35, v36);
            v38 = objc_claimAutoreleasedReturnValue(v37);
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "slot"));
              v40 = objc_msgSend(v39, "number");
              v41 = v123[5];
              *(_DWORD *)buf = 67109378;
              v129 = v40;
              v130 = 2112;
              v131 = v41;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Failed to export fidoKey, deleting it from slot %d (%@)", buf, 0x12u);

            }
            v42 = *(void **)(a1 + 40);
            v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
            objc_msgSend(v42, "_deleteLoadedKey:instanceAID:loadedKey:error:", v102, v43, v32, 0);

            v44 = *(_QWORD *)(a1 + 72);
            v47 = SESDefaultLogObject(v45, v46);
            v104 = (void *)objc_claimAutoreleasedReturnValue(v47);
            v48 = SESCreateAndLogError(0, v104, SESErrorDomain, 0, CFSTR("Failed to export FiDOKey"));
            v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
            (*(void (**)(uint64_t, _QWORD, void *))(v44 + 16))(v44, 0, v49);
          }

          _Block_object_dispose(&v114, 8);
        }
      }
      else
      {
        v14 = *(void **)(a1 + 32);
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[SEFidoEvents keyCreationError](_TtC10seserviced12SEFidoEvents, "keyCreationError"));
        objc_msgSend(v14, "reportCAEvent:", v15);

        v16 = *(_QWORD *)(a1 + 72);
        v17 = SESEnsureError(v123[5]);
        v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
        (*(void (**)(uint64_t, _QWORD, void *))(v16 + 16))(v16, 0, v18);

      }
    }
    else
    {
      v24 = *(void **)(a1 + 32);
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[SEFidoEvents viewNotSyncedError](_TtC10seserviced12SEFidoEvents, "viewNotSyncedError"));
      objc_msgSend(v24, "reportCAEvent:", v25);

      v26 = *(_QWORD *)(a1 + 72);
      v29 = SESDefaultLogObject(v27, v28);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v29);
      v30 = SESCreateAndLogError(0, v10, SESErrorDomain, 0, CFSTR("View for SE-PTC is not synced"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(v30);
      (*(void (**)(uint64_t, _QWORD, void *))(v26 + 16))(v26, 0, v13);
    }

    _Block_object_dispose(&v122, 8);
  }

}

void sub_10000B3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_10000B408(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id obj;

  v6 = (void *)a1[4];
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
  v8 = (void *)a1[5];
  v9 = (void *)a1[6];
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a2, a3));
  v11 = *(_QWORD *)(a1[8] + 8);
  obj = *(id *)(v11 + 40);
  v12 = sub_100032A2C(v6, v7, v8, v9, v10, &obj);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  objc_storeStrong((id *)(v11 + 40), obj);
  v14 = *(_QWORD *)(a1[7] + 8);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v13;

}

void sub_10000BD50(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  _BOOL8 v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id obj;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  _BOOL4 v44;
  _BYTE v45[128];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  v35 = v5;
  if (!v5 || v6)
  {
    v27 = *(void **)(a1 + 32);
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[SEFidoEvents serviceError](_TtC10seserviced12SEFidoEvents, "serviceError"));
    objc_msgSend(v27, "reportCAEvent:", v28);

    v29 = *(_QWORD *)(a1 + 48);
    v30 = SESEnsureError(v7);
    v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    (*(void (**)(uint64_t, _QWORD, void *))(v29 + 16))(v29, 0, v31);

  }
  else
  {
    v34 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    obj = *(id *)(a1 + 40);
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
    if (v8)
    {
      v9 = v8;
      v33 = *(_QWORD *)v38;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v38 != v33)
            objc_enumerationMutation(obj);
          v11 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)i);
          v12 = *(void **)(a1 + 32);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "relyingParty"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "relyingPartyAccountHash"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fidoKeyHash"));
          v36 = 0;
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "findKeyForRelyingParty:relyingPartyAccountHash:fidoKeyHash:secureElement:error:", v13, v14, v15, v35, &v36));
          v17 = v36;

          v18 = *(void **)(a1 + 32);
          if (v16)
            v19 = objc_claimAutoreleasedReturnValue(+[SEFidoEvents fidoKeyFound](_TtC10seserviced12SEFidoEvents, "fidoKeyFound"));
          else
            v19 = objc_claimAutoreleasedReturnValue(+[SEFidoEvents fidoKeyNotFound](_TtC10seserviced12SEFidoEvents, "fidoKeyNotFound"));
          v20 = (void *)v19;
          objc_msgSend(v18, "reportCAEvent:", v19);

          v23 = SESDefaultLogObject(v21, v22);
          v24 = objc_claimAutoreleasedReturnValue(v23);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v25 = v16 != 0;
            v42 = v11;
            v43 = 1024;
            v44 = v16 != 0;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Search Params %@ --> %d", buf, 0x12u);
          }
          else
          {
            v25 = v16 != 0;
          }

          v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v25));
          objc_msgSend(v34, "addObject:", v26);

        }
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
      }
      while (v9);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    v7 = 0;
  }

}

void sub_10000C3D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  char *i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  BOOL v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  char *v67;
  id v68;
  void *v69;
  void *v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint8_t buf[4];
  id v76;
  __int16 v77;
  uint64_t v78;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  v69 = v5;
  if (!v5 || v6)
  {
    v55 = *(void **)(a1 + 32);
    v56 = (void *)objc_claimAutoreleasedReturnValue(+[SEFidoEvents serviceError](_TtC10seserviced12SEFidoEvents, "serviceError"));
    objc_msgSend(v55, "reportCAEvent:", v56);

    v57 = *(_QWORD *)(a1 + 80);
    v58 = SESEnsureError(v7);
    v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
    (*(void (**)(uint64_t, _QWORD, void *))(v57 + 16))(v57, 0, v59);

  }
  else
  {
    v68 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
    v67 = (char *)objc_msgSend(*(id *)(a1 + 40), "count");
    if (v67)
    {
      for (i = 0; i != v67; ++i)
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", i));
        v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:", i));
        v10 = *(void **)(a1 + 32);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "relyingParty"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "relyingPartyAccountHash"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "fidoKeyHash"));
        v74 = 0;
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "findKeyForRelyingParty:relyingPartyAccountHash:fidoKeyHash:secureElement:error:", v11, v12, v13, v69, &v74));
        v15 = v74;

        if (v14)
          v16 = v15 == 0;
        else
          v16 = 0;
        if (v16)
        {
          v73 = 0;
          v18 = (void *)objc_claimAutoreleasedReturnValue(+[PTClassicKey withData:error:](PTClassicKey, "withData:error:", v14, &v73));
          v19 = v73;
          v15 = v19;
          if (!v18 || v19)
          {
            v28 = *(void **)(a1 + 32);
            v29 = (void *)objc_claimAutoreleasedReturnValue(+[SEFidoEvents keyDecodeError](_TtC10seserviced12SEFidoEvents, "keyDecodeError"));
            objc_msgSend(v28, "reportCAEvent:", v29);

            v30 = SESEnsureError(v15);
            v21 = (void *)objc_claimAutoreleasedReturnValue(v30);
            objc_msgSend(v68, "addObject:", v21);
          }
          else
          {
            v20 = *(void **)(a1 + 56);
            v72 = 0;
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "getKeyHandle:key:error:", v69, v18, &v72));
            v22 = v72;
            v15 = v22;
            v23 = *(void **)(a1 + 32);
            if (!v21 || v22)
            {
              v31 = (void *)objc_claimAutoreleasedReturnValue(+[SEFidoEvents unspecifiedError](_TtC10seserviced12SEFidoEvents, "unspecifiedError"));
              objc_msgSend(v23, "reportCAEvent:", v31);

              v32 = SESEnsureError(v15);
              v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
              objc_msgSend(v68, "addObject:", v33);
            }
            else
            {
              v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
              v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "relyingParty"));
              v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "relyingPartyAccountHash"));
              v26 = *(_QWORD *)(a1 + 64);
              if (v26)
              {
                v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "objectAtIndexedSubscript:", i));
                v27 = v63;
              }
              else
              {
                v27 = 0;
              }
              v34 = *(_QWORD *)(a1 + 72);
              v71 = 0;
              v64 = (void *)v24;
              v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "performFidoSignatureWithSecureElement:instanceAID:loadedKey:relyingParty:relyingPartyAccountHash:challenge:ptaEndPointIdentifierForExtension:externalizedAuth:error:", v69, v24, v21, v65, v25, v70, v27, v34, &v71));
              v15 = v71;
              if (v26)

              v66 = v33;
              if (!v33 || v15)
              {
                v38 = *(void **)(a1 + 32);
                v39 = (void *)objc_claimAutoreleasedReturnValue(+[SEFidoEvents signatureError](_TtC10seserviced12SEFidoEvents, "signatureError"));
                objc_msgSend(v38, "reportCAEvent:", v39);

                v42 = SESDefaultLogObject(v40, v41);
                v43 = objc_claimAutoreleasedReturnValue(v42);
                if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  v76 = v15;
                  _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Failed to perform signature for assertion %@", buf, 0xCu);
                }

                v44 = SESEnsureError(v15);
                v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
                objc_msgSend(v68, "addObject:", v45);

                v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704C0000000000002"), "hexStringAsData"));
                v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "slot"));
                v48 = sub_10002EF28(v69, v46, objc_msgSend(v47, "number"));
                v49 = objc_claimAutoreleasedReturnValue(v48);

                v37 = (void *)v49;
                v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "slot"));
                objc_msgSend(v50, "resetToEmpty");

                v53 = SESDefaultLogObject(v51, v52);
                v54 = objc_claimAutoreleasedReturnValue(v53);
                if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412546;
                  v76 = v21;
                  v77 = 2112;
                  v78 = v49;
                  _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "Cleaned up failed signature on %@ : %@", buf, 0x16u);
                }

                v33 = v66;
              }
              else
              {
                v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "relyingParty"));
                v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "relyingPartyAccountHash"));
                v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "publicKey"));
                v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "sha256"));
                v36 = objc_claimAutoreleasedReturnValue(+[SEFidoKeySignResult withRelyingParty:relyingPartyAccountHash:fidoKeyHash:fidoAssertion:](SEFidoKeySignResult, "withRelyingParty:relyingPartyAccountHash:fidoKeyHash:fidoAssertion:", v62, v60, v35, v33));

                v37 = (void *)v36;
                objc_msgSend(v68, "addObject:", v36);
              }

            }
          }

        }
        else
        {
          v17 = SESEnsureError(v15);
          v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
          objc_msgSend(v68, "addObject:", v18);
        }

      }
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();

    v7 = 0;
  }

}

void sub_10000CC84(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  uint8_t buf[4];
  int v55;
  __int16 v56;
  id v57;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = *(void **)(a1 + 32);
  if (!v5 || v6)
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[SEFidoEvents serviceError](_TtC10seserviced12SEFidoEvents, "serviceError"));
    objc_msgSend(v8, "reportCAEvent:", v22);

    v23 = *(_QWORD *)(a1 + 56);
    v26 = SESDefaultLogObject(v24, v25);
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    v28 = SESCreateAndLogError(0, v27, SESErrorDomain, 2, CFSTR("Failed to retrieve SE"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    (*(void (**)(uint64_t, _UNKNOWN **, void *))(v23 + 16))(v23, &off_100322DE8, v29);

  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "relyingParty"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "relyingPartyAccountHash"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "fidoKeyHash"));
    v53 = 0;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "findKeyForRelyingParty:relyingPartyAccountHash:fidoKeyHash:secureElement:error:", v9, v10, v11, v5, &v53));
    v7 = v53;

    if (!v12 || v7)
    {
      v30 = *(void **)(a1 + 32);
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[SEFidoEvents fidoKeyNotFound](_TtC10seserviced12SEFidoEvents, "fidoKeyNotFound"));
      objc_msgSend(v30, "reportCAEvent:", v31);

      v32 = *(_QWORD *)(a1 + 56);
      v35 = SESDefaultLogObject(v33, v34);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v35);
      v36 = SESCreateAndLogError(0, v13, SESErrorDomain, 4, CFSTR("Failed to retrieve key from Keychain"));
      v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
      (*(void (**)(uint64_t, _UNKNOWN **, void *))(v32 + 16))(v32, &off_100322DE8, v37);
    }
    else
    {
      v52 = 0;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[PTClassicKey withData:error:](PTClassicKey, "withData:error:", v12, &v52));
      v14 = v52;
      v7 = v14;
      v15 = *(void **)(a1 + 32);
      if (!v13 || v14)
      {
        v38 = (void *)objc_claimAutoreleasedReturnValue(+[SEFidoEvents keyDecodeError](_TtC10seserviced12SEFidoEvents, "keyDecodeError"));
        objc_msgSend(v15, "reportCAEvent:", v38);

        v39 = *(_QWORD *)(a1 + 56);
        v42 = SESDefaultLogObject(v40, v41);
        v37 = (void *)objc_claimAutoreleasedReturnValue(v42);
        v43 = SESCreateAndLogError(0, v37, SESErrorDomain, 0, CFSTR("Failed to parse key"));
        v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
        (*(void (**)(uint64_t, _UNKNOWN **, void *))(v39 + 16))(v39, &off_100322DE8, v44);

      }
      else
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "publicKey"));
        v17 = *(_QWORD *)(a1 + 48);
        v51 = 0;
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "performFidoVerificationWithPublicKey:signedChallenge:error:", v16, v17, &v51));
        v7 = v51;
        v19 = objc_msgSend(v18, "BOOLValue");

        v20 = *(void **)(a1 + 32);
        if ((v19 & 1) != 0)
          v21 = objc_claimAutoreleasedReturnValue(+[SEFidoEvents fidoVerificationSucceeded](_TtC10seserviced12SEFidoEvents, "fidoVerificationSucceeded"));
        else
          v21 = objc_claimAutoreleasedReturnValue(+[SEFidoEvents fidoVerificationFailed](_TtC10seserviced12SEFidoEvents, "fidoVerificationFailed"));
        v45 = (void *)v21;
        objc_msgSend(v20, "reportCAEvent:", v21);

        v48 = SESDefaultLogObject(v46, v47);
        v49 = objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109378;
          v55 = (int)v19;
          v56 = 2112;
          v57 = v7;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "FIDO verification successful %d error %@", buf, 0x12u);
        }

        v50 = *(_QWORD *)(a1 + 56);
        v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v19));
        (*(void (**)(uint64_t, void *, id))(v50 + 16))(v50, v37, v7);
      }
    }

  }
}

void sub_10000D250(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _TtC10seserviced16SEFidoKeyManager *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v16 = *(_QWORD *)(a1 + 40);
    v17 = SESEnsureError(v6);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v18);

  }
  else
  {
    v8 = objc_opt_new(_TtC10seserviced16SEFidoKeyManager);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "relyingParty"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "relyingPartyAccountHash"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fidoKeyHash"));
    v23 = 0;
    v12 = (void *)objc_claimAutoreleasedReturnValue(-[SEFidoKeyManager findKeyForRelyingParty:relyingPartyAccountHash:fidoKeyHash:secureElement:error:](v8, "findKeyForRelyingParty:relyingPartyAccountHash:fidoKeyHash:secureElement:error:", v9, v10, v11, v5, &v23));
    v7 = v23;

    if (v7 || !v12)
    {
      v19 = *(_QWORD *)(a1 + 40);
      v20 = SESEnsureError(v7);
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      (*(void (**)(uint64_t, void *))(v19 + 16))(v19, v21);

    }
    else
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "relyingParty"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "relyingPartyAccountHash"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fidoKeyHash"));
      v22 = 0;
      -[SEFidoKeyManager deleteKeyWithRelyingParty:relyingPartyAccountHash:fidoKeyHash:error:](v8, "deleteKeyWithRelyingParty:relyingPartyAccountHash:fidoKeyHash:error:", v13, v14, v15, &v22);
      v7 = v22;

      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }

  }
}

void sub_10000DC00(id a1)
{
  SESKeychainWrapper *v1;
  void *v2;

  v1 = objc_opt_new(SESKeychainWrapper);
  v2 = (void *)qword_10034BAC8;
  qword_10034BAC8 = (uint64_t)v1;

}

id sub_10000DD90(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dumpState");
}

void sub_10000DE14(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  void (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore defaultStore](ACAccountStore, "defaultStore"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "aa_primaryAppleAccount"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "aa_altDSID"));

  if (v6)
  {
    v9 = objc_alloc_init((Class)OTConfigurationContext);
    objc_msgSend(v9, "setContext:", OTDefaultContext);
    objc_msgSend(v9, "setAltDSID:", v6);
    v10 = (void *)objc_opt_new(OTOperationConfiguration);
    objc_msgSend(v10, "setUseCachedAccountStatus:", 1);
    v11 = *(void **)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "asAsciiData"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "otCliqueForAltDSID:", v12));
    v28 = 0;
    v14 = (char *)objc_msgSend(v13, "fetchCliqueStatus:error:", v10, &v28);
    v15 = v28;

    if (v15 || v14 == (char *)-1)
    {
      v22 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
    }
    else
    {
      if ((unint64_t)(v14 - 3) >= 2 && v14 != (char *)1)
      {
        if (v14)
        {
          v23 = *(_QWORD *)(a1 + 40);
          v24 = SESDefaultLogObject(v16, v17);
          v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
          v26 = SESCreateAndLogError(0, v25, SESErrorDomain, 1, CFSTR("fetchCliqueStatus %d"));
          v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
          (*(void (**)(uint64_t, _QWORD, _QWORD, void *))(v23 + 16))(v23, 0, 0, v27);

        }
        else
        {
          objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 16), v6);
          v18 = *(_QWORD *)(a1 + 40);
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "asAsciiData"));
          (*(void (**)(uint64_t, uint64_t, void *, _QWORD))(v18 + 16))(v18, 1, v19, 0);

        }
        goto LABEL_14;
      }
      v22 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
    }
    v22();
LABEL_14:

    goto LABEL_15;
  }
  v20 = SESDefaultLogObject(v7, v8);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "No aa_primaryAppletAccount", buf, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_15:

}

void sub_10000E140(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint8_t buf[4];
  _BYTE v39[10];
  __int16 v40;
  unsigned int v41;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = 0;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "otCliqueForAltDSID:", *(_QWORD *)(a1 + 40)));
  v37 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "fetchTrustedSecureElementIdentities:", &v37));
  v8 = v37;

  if (v8 || !v7)
  {
    v34 = *(_QWORD *)(a1 + 48);
    v35 = SESDefaultLogObject(v9, v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v35);
    v36 = SESCreateAndLogError(0, v13, SESErrorDomain, 2, CFSTR("Failed to fetchTrustedSEIdentities : %@"));
    v30 = (id)objc_claimAutoreleasedReturnValue(v36);
    (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v34 + 16))(v34, 0, 0, v30);
  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localPeerIdentity"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "peerIdentifier"));

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "trustedPeerSecureElementIdentities"));
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "ses_map:", &stru_1003030B8));
    v15 = (void *)v14;
    v16 = &__NSArray0__struct;
    if (v14)
      v16 = (void *)v14;
    v17 = v16;

    v20 = SESDefaultLogObject(v18, v19);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v39 = v12;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Got local peer identity %@", buf, 0xCu);
    }

    v24 = SESDefaultLogObject(v22, v23);
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      v26 = objc_msgSend(v13, "count");
      v27 = objc_msgSend(v17, "count");
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)v39 = v13 != 0;
      *(_WORD *)&v39[4] = 1024;
      *(_DWORD *)&v39[6] = v26;
      v40 = 1024;
      v41 = v27;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Got %d/%d/%d trusted peers", buf, 0x14u);
    }

    v28 = *(_QWORD *)(a1 + 32);
    v29 = *(void **)(v28 + 32);
    *(_QWORD *)(v28 + 32) = v12;
    v30 = v12;

    v31 = *(_QWORD *)(a1 + 32);
    v32 = *(void **)(v31 + 40);
    *(_QWORD *)(v31 + 40) = v17;
    v33 = v17;

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

SESPeerIdentity *__cdecl sub_10000E3F4(id a1, OTSecureElementPeerIdentity *a2)
{
  return (SESPeerIdentity *)+[SESPeerIdentity withOTPeerIdentity:](SESPeerIdentity, "withOTPeerIdentity:", a2);
}

void sub_10000E4CC(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "otCliqueForAltDSID:", *(_QWORD *)(a1 + 40)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "asOTPeerIdentity"));
  v9 = 0;
  v4 = objc_msgSend(v2, "setLocalSecureElementIdentity:error:", v3, &v9);
  v5 = v9;

  v6 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    (*(void (**)(uint64_t, _QWORD))(v6 + 16))(v6, 0);
  }
  else
  {
    v7 = SESEnsureError(v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v8);

  }
}

void sub_10000E65C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned int v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "otCliqueForAltDSID:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(a1 + 48);
  v9 = 0;
  v4 = objc_msgSend(v2, "removeLocalSecureElementIdentityPeerID:error:", v3, &v9);
  v5 = v9;

  v6 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    (*(void (**)(uint64_t, _QWORD))(v6 + 16))(v6, 0);
  }
  else
  {
    v7 = SESEnsureError(v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v8);

  }
}

void sub_10000E7B0(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;

  v20 = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSControl CKKSControlObject:error:](CKKSControl, "CKKSControlObject:error:", 0, &v20));
  v3 = v20;
  v5 = v3;
  if (v2)
    v6 = v3 == 0;
  else
    v6 = 0;
  if (v6)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10000E900;
    v15[3] = &unk_100303188;
    v12 = *(_QWORD *)(a1 + 40);
    v19 = *(id *)(a1 + 48);
    v13 = *(id *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 32);
    v16 = v13;
    v17 = v14;
    v18 = v2;
    objc_msgSend(v18, "fetchSEViewKeyHierarchy:forceFetch:reply:", v12, 0, v15);

    v9 = v19;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 48);
    v8 = SESDefaultLogObject(v3, v4);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = SESCreateAndLogError(0, v9, SESErrorDomain, 2, CFSTR("While getting CKKSControlObject"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    (*(void (**)(uint64_t, _QWORD, void *))(v7 + 16))(v7, 0, v11);

  }
}

void sub_10000E900(_QWORD *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  void *v30;
  int v31;
  void *v32;
  __int16 v33;
  void *v34;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v14 = v12;
  if (v12)
  {
    v15 = SESDefaultLogObject(v12, v13);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v31 = 138412290;
      v32 = v14;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Error from fetchSEViewKeyHierarchy -- %@", (uint8_t *)&v31, 0xCu);
    }

    (*(void (**)(void))(a1[7] + 16))();
  }
  else
  {
    if (v9)
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLKRecord withCKKSExternalKey:](SESTLKRecord, "withCKKSExternalKey:", v9));
    else
      v17 = 0;
    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "filterMap:", &stru_100303120));
    v19 = (void *)v18;
    if (v18)
      v20 = (void *)v18;
    else
      v20 = &__NSArray0__struct;
    v21 = v20;

    v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "filterMap:", &stru_100303160));
    v23 = (void *)v22;
    if (v22)
      v24 = (void *)v22;
    else
      v24 = &__NSArray0__struct;
    v25 = v24;

    v26 = (void *)objc_claimAutoreleasedReturnValue(+[SESViewInformation withViewName:currentTLK:tlkShares:previousTLKs:](SESViewInformation, "withViewName:currentTLK:tlkShares:previousTLKs:", a1[4], v17, v25, v21));
    v28 = SESDefaultLogObject(v26, v27);
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      v30 = (void *)a1[4];
      v31 = 138412546;
      v32 = v30;
      v33 = 2112;
      v34 = v26;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "View %@ has cached content %@", (uint8_t *)&v31, 0x16u);
    }

    objc_msgSend(*(id *)(a1[5] + 24), "setObject:forKeyedSubscript:", v26, a1[4]);
    (*(void (**)(void))(a1[7] + 16))();

  }
}

SESTLKRecord *__cdecl sub_10000EB54(id a1, CKKSExternalKey *a2)
{
  return (SESTLKRecord *)+[SESTLKRecord withCKKSExternalKey:](SESTLKRecord, "withCKKSExternalKey:", a2);
}

SESTLKShare *__cdecl sub_10000EB64(id a1, CKKSExternalTLKShare *a2)
{
  return (SESTLKShare *)+[SESTLKShare withCKKSExternalShare:](SESTLKShare, "withCKKSExternalShare:", a2);
}

void sub_10000EC68(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;

  v16 = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSControl CKKSControlObject:error:](CKKSControl, "CKKSControlObject:error:", 0, &v16));
  v3 = v16;
  v5 = v3;
  if (v2)
    v6 = v3 == 0;
  else
    v6 = 0;
  if (v6)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ses_map:", &stru_1003031F0));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ses_map:", &stru_100303210));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10000EDD8;
    v13[3] = &unk_100303238;
    v12 = *(_QWORD *)(a1 + 48);
    v15 = *(id *)(a1 + 56);
    v14 = v2;
    objc_msgSend(v14, "modifyTLKSharesForSEView:adding:deleting:reply:", v12, v9, v11, v13);

  }
  else
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = SESDefaultLogObject(v3, v4);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = SESCreateAndLogError(0, v9, SESErrorDomain, 2, CFSTR("While getting CKKSControlObject"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v11);
  }

}

CKKSExternalTLKShare *__cdecl sub_10000EDC8(id a1, SESTLKShare *a2)
{
  return (CKKSExternalTLKShare *)-[SESTLKShare asCKKSExternalShare](a2, "asCKKSExternalShare");
}

CKKSExternalTLKShare *__cdecl sub_10000EDD0(id a1, SESTLKShare *a2)
{
  return (CKKSExternalTLKShare *)-[SESTLKShare asCKKSExternalShare](a2, "asCKKSExternalShare");
}

uint64_t sub_10000EDD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10000EED8(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  void *v20;

  v19 = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSControl CKKSControlObject:error:](CKKSControl, "CKKSControlObject:error:", 0, &v19));
  v3 = v19;
  v5 = v3;
  if (v2)
    v6 = v3 == 0;
  else
    v6 = 0;
  if (v6)
  {
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "asCKKSExternalKey"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "asCKKSExternalShare"));
    v20 = v14;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v20, 1));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10000F088;
    v16[3] = &unk_100303238;
    v18 = *(id *)(a1 + 56);
    v17 = v2;
    objc_msgSend(v17, "proposeTLKForSEView:proposedTLK:wrappedOldTLK:tlkShares:reply:", v12, v13, 0, v15, v16);

    v9 = v18;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = SESDefaultLogObject(v3, v4);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = SESCreateAndLogError(0, v9, SESErrorDomain, 2, CFSTR("While getting CKKSControlObject"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v11);

  }
}

uint64_t sub_10000F088(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10000F13C(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  id v17;

  v17 = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSControl CKKSControlObject:error:](CKKSControl, "CKKSControlObject:error:", 0, &v17));
  v3 = v17;
  v5 = v3;
  if (v2)
    v6 = v3 == 0;
  else
    v6 = 0;
  if (v6)
  {
    v12 = *(void **)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10000F27C;
    v13[3] = &unk_100303288;
    v14 = v12;
    v16 = *(id *)(a1 + 40);
    v15 = v2;
    objc_msgSend(v15, "fetchSEViewKeyHierarchy:forceFetch:reply:", v14, 1, v13);

    v9 = v14;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = SESDefaultLogObject(v3, v4);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = SESCreateAndLogError(0, v9, SESErrorDomain, 2, CFSTR("While getting CKKSControlObject"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v11);

  }
}

void sub_10000F27C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  id v13;

  v6 = a5;
  v7 = SESDefaultLogObject();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = 138412546;
    v11 = v9;
    v12 = 2112;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Sync of view %@ completed with error %@", (uint8_t *)&v10, 0x16u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10000F474(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;

  v18 = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSControl CKKSControlObject:error:](CKKSControl, "CKKSControlObject:error:", 0, &v18));
  v3 = v18;
  v5 = v3;
  if (v2)
    v6 = v3 == 0;
  else
    v6 = 0;
  if (v6)
  {
    v12 = *(void **)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10000F5B8;
    v13[3] = &unk_1003032D8;
    v14 = v12;
    v15 = 0;
    v17 = *(id *)(a1 + 40);
    v16 = v2;
    objc_msgSend(v16, "deleteSEView:reply:", v14, v13);

    v9 = v14;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = SESDefaultLogObject(v3, v4);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = SESCreateAndLogError(0, v9, SESErrorDomain, 2, CFSTR("While getting CKKSControlObject"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v11);

  }
}

void sub_10000F5B8(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v3 = a2;
  v4 = SESDefaultLogObject();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = a1[4];
    v7 = a1[5];
    v8 = 138412546;
    v9 = v6;
    v10 = 2112;
    v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Deletion of SE view %@ completed with error %@", (uint8_t *)&v8, 0x16u);
  }

  (*(void (**)(void))(a1[7] + 16))();
}

void sub_10000F708(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = SESDefaultLogObject();
  v5 = (id)objc_claimAutoreleasedReturnValue(v2);
  v3 = SESCreateAndLogError(0, v5, SESErrorDomain, 2, CFSTR("Not implemented"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v4);

}

void sub_10000FD04(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v2 = objc_msgSend(*(id *)(a1 + 32), "addItem:", *(_QWORD *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 48);
  if ((_DWORD)v2)
  {
    v5 = SESDefaultLogObject(v2, v3);
    v8 = (id)objc_claimAutoreleasedReturnValue(v5);
    v6 = SESCreateAndLogError(0, v8, SESErrorDomain, 0, CFSTR("addItem failed w/ %d"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v7);

  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(v4 + 16))(v4, 0);
  }
}

void sub_10000FE60(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v6 = 0;
  v7 = 0;
  objc_msgSend(v2, "copyItemData:outData:updateToApplePayView:error:", v3, &v7, *(unsigned __int8 *)(a1 + 56), &v6);
  v4 = v7;
  v5 = v6;
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_10000FF84(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v2 = (void *)a1[4];
  v3 = a1[5];
  v6 = 0;
  v7 = 0;
  objc_msgSend(v2, "copyMultipleItemData:outDatas:error:", v3, &v7, &v6);
  v4 = v7;
  v5 = v6;
  (*(void (**)(void))(a1[6] + 16))();

}

void sub_1000100A4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v2 = objc_msgSend(*(id *)(a1 + 32), "deleteItem:", *(_QWORD *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 48);
  if ((_DWORD)v2)
  {
    v5 = SESDefaultLogObject(v2, v3);
    v8 = (id)objc_claimAutoreleasedReturnValue(v5);
    v6 = SESCreateAndLogError(0, v8, SESErrorDomain, 0, CFSTR("deleteKeychainItem failed w/ %d"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v7);

  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(v4 + 16))(v4, 0);
  }
}

void sub_1000101F8(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;

  v2 = (void *)a1[4];
  v3 = a1[5];
  v5 = 0;
  objc_msgSend(v2, "updateToApplePayView:error:", v3, &v5);
  v4 = v5;
  (*(void (**)(void))(a1[6] + 16))();

}

id sub_1000103F4(id a1, SESPeerIdentity *a2)
{
  return -[SESPeerIdentity dumpState](a2, "dumpState");
}

id sub_1000103FC(id a1, SESViewInformation *a2)
{
  return -[SESViewInformation dumpState](a2, "dumpState");
}

void sub_1000105D0(id a1)
{
  SEABAAManager *v1;
  void *v2;

  v1 = objc_opt_new(SEABAAManager);
  v2 = (void *)qword_10034BAD8;
  qword_10034BAD8 = (uint64_t)v1;

}

void sub_10001099C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000109E0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000109F0(uint64_t a1)
{

}

void sub_1000109F8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v13 = a2;
  v7 = a3;
  v8 = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32));
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a4);
    if (v7 && v13 && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
    {
      v9 = sub_100010AF4((uint64_t)SEABAAResponse, v13, v7);
      v10 = objc_claimAutoreleasedReturnValue(v9);
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v12 = *(void **)(v11 + 40);
      *(_QWORD *)(v11 + 40) = v10;

    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32));
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

id *sub_100010AF4(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  SEABAAResponse *v8;
  id *p_isa;

  v6 = a2;
  v7 = a3;
  objc_opt_self(a1);
  v8 = objc_opt_new(SEABAAResponse);
  p_isa = (id *)&v8->super.isa;
  if (v8)
  {
    objc_storeStrong((id *)&v8->_authorityCert, a2);
    objc_storeStrong(p_isa + 2, a3);
  }

  return p_isa;
}

void sub_100010B78(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  id v22;
  __CFString *v23;
  uint64_t v24;
  __CFString *v25;
  id v26;
  uint64_t v27;
  NSObject *v28;
  void *v29;
  uint64_t v30;
  char v31;
  void *v32;
  unsigned __int8 v33;
  void *v34;
  unsigned int v35;
  void *v36;
  NSMutableDictionary *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  id v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  double v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  NSObject *v64;
  void *v65;
  id v66;
  void *v67;
  id v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  id v73;
  id v74;
  __CFString *v75;
  id v76;
  void (**v77)(_QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD v78[5];
  id v79;
  void (**v80)(_QWORD, _QWORD, _QWORD, _QWORD);
  id v81;
  id v82;
  id v83;
  _QWORD v84[2];
  _QWORD v85[2];
  id v86;
  _BYTE buf[24];
  _QWORD v88[7];

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v76 = a6;
  v17 = a7;
  v77 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))v17;
  if (a1)
  {
    v72 = a1;
    v19 = SESDefaultLogObject(v17, v18);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "", buf, 2u);
    }

    v88[0] = CFSTR("1.2.840.113635.100.10.1");
    v88[1] = CFSTR("1.2.840.113635.100.8.2");
    v88[2] = CFSTR("1.2.840.113635.100.8.3");
    v88[3] = CFSTR("1.2.840.113635.100.8.4");
    v88[4] = CFSTR("1.2.840.113635.100.8.7");
    v88[5] = CFSTR("1.2.840.113635.100.8.5");
    v88[6] = CFSTR("1.2.840.113635.100.10.1");
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v88, 7));
    if (SESInternalVariant(v21))
    {
      v22 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
      v23 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKey:", CFSTR("SEABAASServerURL")));
      v25 = v23;
      v26 = v14;
      if (v23)
      {
        v23 = v23;
        v75 = v23;
      }
      else
      {
        v75 = CFSTR("https://humb.apple.com/humbug/seabaas");
      }
      v27 = SESDefaultLogObject(v23, v24);
      v28 = objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v75;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "SEABAASServerURL : '%@'", buf, 0xCu);
      }

    }
    else
    {
      v26 = v14;
      v75 = CFSTR("https://humb.apple.com/humbug/seabaas");
    }
    v74 = v15;
    v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    if (objc_msgSend(v16, "count"))
    {
      v30 = 0;
      v31 = 0;
      while (1)
      {
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectAtIndex:", v30));
        v33 = objc_msgSend(CFSTR("1.2.840.113635.100.8.2"), "isEqualToString:", v32);

        if ((v33 & 1) != 0)
          goto LABEL_17;
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectAtIndex:", v30));
        v35 = objc_msgSend(v21, "containsObject:", v34);

        if (v35)
          break;
LABEL_18:
        if ((unint64_t)objc_msgSend(v16, "count") <= ++v30)
          goto LABEL_21;
      }
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectAtIndex:", v30));
      objc_msgSend(v29, "addObject:", v36);

LABEL_17:
      v31 = 1;
      goto LABEL_18;
    }
    v31 = 0;
LABEL_21:
    v37 = objc_opt_new(NSMutableDictionary);
    v14 = v26;
    -[NSMutableDictionary setObject:forKeyedSubscript:](v37, "setObject:forKeyedSubscript:", v26, CFSTR("CASDCertificate"));
    v86 = v13;
    v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v86, 1));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v37, "setObject:forKeyedSubscript:", v38, CFSTR("SEAttestations"));

    v73 = v13;
    if ((v31 & 1) != 0)
    {
      v41 = SESDefaultLogObject(v39, v40);
      v42 = objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Certificate require BAA request", buf, 2u);
      }

      *(_QWORD *)buf = 0;
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      v44 = v43;
      v15 = v74;
      if (v74)
      {
        objc_msgSend(v43, "setObject:forKeyedSubscript:", v74, kMAOptionsBAANonce);
        objc_msgSend(v29, "addObject:", kMAOptionsBAAOIDNonce);
      }
      if (objc_msgSend(v29, "count"))
        objc_msgSend(v44, "setObject:forKeyedSubscript:", v29, kMAOptionsBAAOIDSToInclude);
      objc_msgSend(v44, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, kMAOptionsBAASCRTAttestation, v26);
      v83 = 0;
      v45 = DeviceIdentityCreateClientCertificateRequest(buf, v44, &v83);
      v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
      v47 = v83;
      v49 = v47;
      if (v47 || (v47 = *(id *)buf) == 0)
      {
        v52 = SESDefaultLogObject(v47, v48);
        v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
        v54 = SESCreateAndLogError(0, v53, SESErrorDomain, 0, CFSTR("Could not get BAA request"));
        v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
        ((void (**)(_QWORD, _QWORD, _QWORD, void *))v77)[2](v77, 0, 0, v55);

        v14 = v71;
        goto LABEL_45;
      }
      CFRelease(*(CFTypeRef *)buf);
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "HTTPBody"));
      v82 = 0;
      v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v50, 0, 0, &v82));
      v49 = v82;

      if (v49)
      {
        ((void (**)(_QWORD, _QWORD, _QWORD, id))v77)[2](v77, 0, 0, v49);

        v14 = v71;
        v15 = v74;
LABEL_45:

        v13 = v73;
        goto LABEL_46;
      }
      -[NSMutableDictionary setObject:forKeyedSubscript:](v37, "setObject:forKeyedSubscript:", v51, CFSTR("BAARequest"));

      v14 = v71;
    }
    if (v76)
    {
      objc_msgSend(v76, "doubleValue");
      v57 = (v56 / 60.0);
    }
    else
    {
      v57 = 10000;
    }
    v84[0] = CFSTR("Validity");
    v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v57));
    v84[1] = CFSTR("IssuerDNs");
    v85[0] = v58;
    v85[1] = &off_100322A78;
    v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v85, v84, 2));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v37, "setObject:forKeyedSubscript:", v59, CFSTR("Properties"));

    v81 = 0;
    v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v37, 100, 0, &v81));
    v49 = v81;
    v62 = SESDefaultLogObject(v49, v61);
    v63 = objc_claimAutoreleasedReturnValue(v62);
    v64 = v63;
    if (!v60 || v49)
    {
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v49;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "Could not serialize SEABAAS request : %@", buf, 0xCu);
      }
    }
    else
    {
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
      {
        v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "asHexString"));
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v65;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "SEABAAS request : %@", buf, 0xCu);

      }
      v66 = objc_alloc((Class)NSMutableURLRequest);
      v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v75));
      v68 = objc_msgSend(v66, "initWithURL:", v67);

      objc_msgSend(v68, "setHTTPMethod:", CFSTR("POST"));
      objc_msgSend(v68, "setHTTPBody:", v60);
      objc_msgSend(v68, "setValue:forHTTPHeaderField:", CFSTR("application/json; charset=utf-8"), CFSTR("Content-Type"));
      objc_msgSend(v68, "setValue:forHTTPHeaderField:", CFSTR("iOS (18.0) - SecureElementService-50.38"), CFSTR("User-Agent"));
      objc_msgSend(v68, "setTimeoutInterval:", 60.0);
      v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLSession sharedSession](NSURLSession, "sharedSession"));
      v78[0] = _NSConcreteStackBlock;
      v78[1] = 3221225472;
      v78[2] = sub_1000113E8;
      v78[3] = &unk_100303418;
      v78[4] = v72;
      v79 = v68;
      v80 = v77;
      v64 = v68;
      v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "dataTaskWithRequest:completionHandler:", v64, v78));
      objc_msgSend(v70, "resume");

    }
    v15 = v74;

    goto LABEL_45;
  }
LABEL_46:

}

void sub_1000113E8(uint64_t a1, void *a2, void *a3, void *a4)
{
  sub_100011408(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), a2, a3, a4, 0, *(void **)(a1 + 48));
}

void sub_100011408(uint64_t a1, void *a2, void *a3, void *a4, void *a5, unsigned int a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  _QWORD v41[5];
  id v42;
  id v43;
  unsigned int v44;
  uint8_t buf[4];
  unsigned int v46;
  __int16 v47;
  int v48;

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a7;
  if (a1)
  {
    v18 = v15;
    v19 = objc_msgSend(v18, "statusCode");
    if (v19 == (id)429)
    {
      v21 = SESDefaultLogObject(429, v20);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v23 = SESCreateAndLogError(0, v22, SESErrorDomain, 2, CFSTR("Server overload error : %@"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      (*((void (**)(id, _QWORD, _QWORD, void *))v17 + 2))(v17, 0, 0, v24);

    }
    if (v16)
    {
      if (a6 < 3)
      {
        v32 = SESDefaultLogObject(v19, v20);
        v33 = objc_claimAutoreleasedReturnValue(v32);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109376;
          v46 = a6;
          v47 = 1024;
          v48 = 3;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "Retrying connection error (%u/%u)", buf, 0xEu);
        }

        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLSession sharedSession](NSURLSession, "sharedSession"));
        v41[0] = _NSConcreteStackBlock;
        v41[1] = 3221225472;
        v41[2] = sub_1000117AC;
        v41[3] = &unk_100303440;
        v41[4] = a1;
        v42 = v13;
        v44 = a6;
        v43 = v17;
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "dataTaskWithRequest:completionHandler:", v42, v41));
        objc_msgSend(v35, "resume");

      }
      else
      {
        (*((void (**)(id, _QWORD, _QWORD, id))v17 + 2))(v17, 0, 0, v16);
      }
      goto LABEL_18;
    }
    v40 = 0;
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v14, 0, 0, &v40));
    v26 = v40;
    v27 = objc_msgSend(v18, "statusCode");
    if (v27 == (id)200)
    {
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", CFSTR("SEABAASCertificate")));
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", CFSTR("SEABAASGENERATEDX509Certificates")));
      if (v29)
      {
        v31 = objc_opt_class(NSArray);
        if ((objc_opt_isKindOfClass(v30, v31) & 1) != 0)
        {
          if (objc_msgSend(v30, "count"))
          {
            v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectAtIndexedSubscript:", 0));
            (*((void (**)(id, void *, void *, _QWORD))v17 + 2))(v17, v29, v39, 0);

LABEL_17:
LABEL_18:

            goto LABEL_19;
          }
        }
      }

    }
    v36 = SESDefaultLogObject(v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue(v36);
    v37 = SESErrorDomain;
    objc_msgSend(v18, "statusCode");
    v38 = SESCreateAndLogError(0, v29, v37, 0, CFSTR("Could not retrieve SEABAAS certificate from server (%ld) : %@"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(v38);
    (*((void (**)(id, _QWORD, _QWORD, void *))v17 + 2))(v17, 0, 0, v30);
    goto LABEL_17;
  }
LABEL_19:

}

uint64_t sub_1000117AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100011408(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2, a3, a4, (*(_DWORD *)(a1 + 56) + 1), *(_QWORD *)(a1 + 48));
}

uint64_t sub_1000117D0(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_1000117DC(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t sub_100011CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint8_t v6[16];

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESSession endSession", v6, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "endSessionInternal:", 0);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

id sub_100011DAC(void *a1, uint64_t a2)
{
  id v2;

  if (a1)
  {
    v2 = sub_100011DCC(a1, a2, 0);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v2);
  }
  return a1;
}

id sub_100011DCC(id a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  _QWORD v8[5];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v5 = a3;
  v6 = v5;
  if (a1)
  {
    v12 = 0;
    v13 = &v12;
    v14 = 0x3032000000;
    v15 = sub_100011ECC;
    v16 = sub_100011EDC;
    v17 = 0;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100011EE4;
    v8[3] = &unk_100303468;
    v10 = &v12;
    v8[4] = a1;
    v9 = v5;
    v11 = a2;
    objc_msgSend(a1, "sync:", v8);
    a1 = (id)v13[5];

    _Block_object_dispose(&v12, 8);
  }

  return a1;
}

void sub_100011EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100011ECC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100011EDC(uint64_t a1)
{

}

void sub_100011EE4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id obj;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000151435253"), "hexStringAsData"));
  v4 = sub_10004FBA0(v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    v8 = *(void **)(a1 + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("80F00100024F00"), "hexStringAsData"));
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    obj = *(id *)(v10 + 40);
    v11 = sub_10004F6A8(v8, v9, &obj);
    objc_storeStrong((id *)(v10 + 40), obj);

    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
    {
      v12 = *(_QWORD *)(a1 + 40);
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 56)));
      if (v12)
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[SLAMObjC PerformScriptWithName:sefwPath:seHandle:logSink:](SLAMObjC, "PerformScriptWithName:sefwPath:seHandle:logSink:", v13, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 32)));
      else
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[SLAMObjC PerformScriptWithName:seHandle:logSink:](SLAMObjC, "PerformScriptWithName:seHandle:logSink:", v13, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 32)));
      v15 = v14;
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v14);

      sub_1000500A8(*(id *)(a1 + 32));
    }
  }
}

id sub_100012044(void *a1, uint64_t a2, _BYTE *a3, void *a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  SLAMInfo *v10;
  SLAMInfo *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  SLAMInfo *v17;
  SLAMInfo *v18;
  SLAMInfo *v19;
  SLAMInfo *v20;
  SLAMInfo *v21;
  SLAMInfo *v22;
  SLAMInfo *v23;
  SLAMInfo *v24;
  SLAMInfo *v25;
  SLAMInfo *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  _BOOL4 v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  uint64_t v76;
  id v77;
  void *v78;
  void *v79;
  BOOL v80;
  id v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  void *v92;
  SLAMInfo *v93;
  void *v94;
  id v95;
  _QWORD v96[6];
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  char v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint8_t v105[4];
  uint64_t v106;
  _BYTE buf[24];
  uint64_t (*v108)(uint64_t, uint64_t);
  void (*v109)(uint64_t);
  id v110;
  _BYTE v111[128];

  v95 = a4;
  if (!a1)
    goto LABEL_13;
  *a3 = 0;
  v8 = sub_1000129BC(a1, v7);
  if ((v8 & 1) == 0)
  {
    v13 = SESDefaultLogObject(v8, v9);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v15 = SESCreateAndLogError(0, v14, SESErrorDomain, 4, CFSTR("SLAM is not supported"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

    goto LABEL_90;
  }
  if (!a2)
  {
LABEL_13:
    v16 = 0;
    goto LABEL_90;
  }
  v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 3));
  v10 = objc_opt_new(SLAMInfo);
  v11 = v10;
  if (v10)
  {
    v10->_type = 1;
    sub_100012A68((uint64_t)v10, CFSTR("A000000704D011500000000001000000"));
    v11->_devInstallScript = "SLAMLoadCopernicus_2_2_8";
    v11->_prodInstallScript = "SLAMLoadCopernicus_2_2_8";
  }
  else
  {
    sub_100012A68(0, CFSTR("A000000704D011500000000001000000"));
  }
  v12 = v94;
  v93 = v11;
  objc_msgSend(v94, "addObject:", v11);
  if ((a2 & 8) != 0)
  {
    v17 = objc_opt_new(SLAMInfo);
    v18 = v17;
    if (v17)
    {
      v17->_type = 0;
      sub_100012A68((uint64_t)v17, CFSTR("A000000809434343444B417631"));
      v18->_devInstallScript = "SLAMInstallCopernicus_CCC_2_2_8";
      v18->_prodInstallScript = "SLAMInstallCopernicus_CCC_2_2_8";
    }
    else
    {
      sub_100012A68(0, CFSTR("A000000809434343444B417631"));
    }
    objc_msgSend(v94, "addObject:", v18);

    if ((a2 & 2) == 0)
    {
LABEL_8:
      if ((a2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((a2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v19 = objc_opt_new(SLAMInfo);
  v20 = v19;
  if (v19)
  {
    v19->_type = 0;
    sub_100012A68((uint64_t)v19, CFSTR("A00000085801010100000001"));
    v20->_devInstallScript = "SLAMInstallCopernicus_Home_2_2_8";
    v20->_prodInstallScript = "SLAMInstallCopernicus_Home_2_2_8";
  }
  else
  {
    sub_100012A68(0, CFSTR("A00000085801010100000001"));
  }
  objc_msgSend(v94, "addObject:", v20);

  if ((a2 & 4) == 0)
  {
LABEL_9:
    if ((a2 & 0x10) == 0)
      goto LABEL_10;
LABEL_23:
    v23 = objc_opt_new(SLAMInfo);
    v24 = v23;
    if (v23)
    {
      v23->_type = 0;
      sub_100012A68((uint64_t)v23, CFSTR("A000000909ACCE5501"));
      v24->_devInstallScript = "SLAMInstallCopernicus_Lyon_2_2_8";
      v24->_prodInstallScript = "SLAMInstallCopernicus_Lyon_2_2_8";
    }
    else
    {
      sub_100012A68(0, CFSTR("A000000909ACCE5501"));
    }
    objc_msgSend(v94, "addObject:", v24);

    if ((a2 & 1) == 0)
      goto LABEL_29;
    goto LABEL_26;
  }
LABEL_20:
  v21 = objc_opt_new(SLAMInfo);
  v22 = v21;
  if (v21)
  {
    v21->_type = 0;
    sub_100012A68((uint64_t)v21, CFSTR("A00000085802010100000001"));
    v22->_devInstallScript = "SLAMInstallCopernicus_Hydra_2_2_8";
    v22->_prodInstallScript = "SLAMInstallCopernicus_Hydra_2_2_8";
  }
  else
  {
    sub_100012A68(0, CFSTR("A00000085802010100000001"));
  }
  objc_msgSend(v94, "addObject:", v22);

  if ((a2 & 0x10) != 0)
    goto LABEL_23;
LABEL_10:
  if ((a2 & 1) != 0)
  {
LABEL_26:
    v25 = objc_opt_new(SLAMInfo);
    v26 = v25;
    if (v25)
    {
      v25->_type = 0;
      sub_100012A68((uint64_t)v25, CFSTR("A000000704E000000000"));
      v26->_devInstallScript = "SLAMLoadAndInstallSunsprite_2_1_7";
      v26->_prodInstallScript = "SLAMLoadAndInstallSunsprite_2_1_7";
    }
    else
    {
      sub_100012A68(0, CFSTR("A000000704E000000000"));
    }
    objc_msgSend(v94, "addObject:", v26);

  }
LABEL_29:
  if (sub_100012A78(a1))
  {
    v27 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
    v28 = SESInternalVariant(v27);
    if (!(_DWORD)v28
      || (v28 = (uint64_t)objc_msgSend(v27, "BOOLForKey:", CFSTR("debug.skip.applet.downgrade.check")), (v28 & 1) == 0))
    {
      v30 = SESDefaultLogObject(v28, v29);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "PTA is newer than iOS -- deleting applets", buf, 2u);
      }

      v32 = sub_100011DAC(a1, (uint64_t)"SLAMDeleteCopernicusAndSunsprite");
      v33 = objc_claimAutoreleasedReturnValue(v32);
      v35 = (void *)v33;
      if (v33)
      {
        v36 = SESDefaultLogObject(v33, v34);
        v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
        v38 = SESCreateAndLogError(0, v37, SESErrorDomain, 0, CFSTR("Failed to delete previous applet"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(v38);

        goto LABEL_89;
      }
    }

    v12 = v94;
  }
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v39 = v12;
  v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v101, v111, 16);
  v42 = v40;
  if (v40)
  {
    v43 = *(_QWORD *)v102;
LABEL_39:
    v44 = 0;
    while (1)
    {
      if (*(_QWORD *)v102 != v43)
        objc_enumerationMutation(v39);
      v45 = *(_QWORD *)(*((_QWORD *)&v101 + 1) + 8 * v44);
      if (v45)
      {
        v46 = *(_QWORD *)(v45 + 8);
        if (v46 == 1)
        {
          v97 = 0;
          v98 = &v97;
          v99 = 0x2020000000;
          v100 = 0;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x3032000000;
          v108 = sub_100011ECC;
          v109 = sub_100011EDC;
          v55 = *(id *)(v45 + 16);
          v110 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "hexStringAsData"));

          v96[0] = _NSConcreteStackBlock;
          v96[1] = 3221225472;
          v96[2] = sub_100012C70;
          v96[3] = &unk_100303490;
          v96[4] = buf;
          v96[5] = &v97;
          v56 = sub_100012CD4(a1, v96);
          v57 = objc_claimAutoreleasedReturnValue(v56);
          v59 = (void *)v57;
          if (v57)
          {
            v82 = SESDefaultLogObject(v57, v58);
            v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
            v84 = SESCreateAndLogError(0, v83, SESErrorDomain, 0, CFSTR("Failed to retrieve list of loaded modules"));
            v16 = (void *)objc_claimAutoreleasedReturnValue(v84);

            _Block_object_dispose(buf, 8);
            _Block_object_dispose(&v97, 8);

            goto LABEL_89;
          }
          if (*((_BYTE *)v98 + 24))
          {
            v60 = SESDefaultLogObject(0, v58);
            v61 = objc_claimAutoreleasedReturnValue(v60);
            if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
            {
              v62 = *(_QWORD *)(v45 + 16);
              *(_DWORD *)v105 = 138412290;
              v106 = v62;
              _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_INFO, "Module %@ already present", v105, 0xCu);
            }

            _Block_object_dispose(buf, 8);
            _Block_object_dispose(&v97, 8);
            goto LABEL_74;
          }
          _Block_object_dispose(buf, 8);

          _Block_object_dispose(&v97, 8);
          goto LABEL_61;
        }
        if (v46)
        {
          v63 = SESDefaultLogObject(v40, v41);
          v64 = objc_claimAutoreleasedReturnValue(v63);
          if (os_log_type_enabled(v64, OS_LOG_TYPE_FAULT))
          {
            v65 = *(_QWORD *)(v45 + 8);
            v66 = *(_QWORD *)(v45 + 16);
            *(_DWORD *)buf = 134218242;
            *(_QWORD *)&buf[4] = v65;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v66;
            _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_FAULT, "SLAMInfo unsupported type %lu for %@", buf, 0x16u);
          }

          goto LABEL_61;
        }
        v47 = *(void **)(v45 + 16);
      }
      else
      {
        v47 = 0;
      }
      v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "hexStringAsData"));
      v49 = sub_1000500FC(a1, v48);

      if (v49)
      {
        v52 = SESDefaultLogObject(v50, v51);
        v53 = objc_claimAutoreleasedReturnValue(v52);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
        {
          if (v45)
            v54 = *(_QWORD *)(v45 + 16);
          else
            v54 = 0;
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v54;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "Applet %@ already present", buf, 0xCu);
        }

        goto LABEL_74;
      }
LABEL_61:
      v67 = sub_10005066C(a1, v51);
      v68 = (void *)objc_claimAutoreleasedReturnValue(v67);
      v69 = objc_msgSend(v68, "isProd");
      if (v45)
      {
        v70 = 24;
        if (v69)
          v70 = 32;
        v71 = *(_QWORD *)(v45 + v70);
      }
      else
      {
        v71 = 0;
      }

      v74 = SESDefaultLogObject(v72, v73);
      v75 = objc_claimAutoreleasedReturnValue(v74);
      if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
      {
        if (v45)
          v76 = *(_QWORD *)(v45 + 16);
        else
          v76 = 0;
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v76;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v71;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_INFO, "Installing %@ using script %s", buf, 0x16u);
      }

      *a3 = 1;
      v77 = sub_100011DAC(a1, v71);
      v40 = (id)objc_claimAutoreleasedReturnValue(v77);
      v16 = v40;
      if (v40)
      {

        goto LABEL_89;
      }
      if (v45)
      {
        if (*(_QWORD *)(v45 + 8))
          goto LABEL_74;
        v78 = *(void **)(v45 + 16);
      }
      else
      {
        v78 = 0;
      }
      v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "hexStringAsData"));
      v80 = sub_1000500FC(a1, v79);

      if (!v80)
      {
        v85 = SESDefaultLogObject(v40, v41);
        v86 = (void *)objc_claimAutoreleasedReturnValue(v85);
        if (v45)
          v87 = *(void **)(v45 + 16);
        else
          v87 = 0;
        v88 = SESErrorDomain;
        v89 = v87;
        v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "hexStringAsData"));
        v90 = SESCreateAndLogError(0, v86, v88, 0, CFSTR("Failed to install %@"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(v90);

        if (!v16)
          goto LABEL_83;
        goto LABEL_89;
      }
LABEL_74:
      if (v42 == (id)++v44)
      {
        v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v101, v111, 16);
        v42 = v40;
        if (v40)
          goto LABEL_39;
        break;
      }
    }
  }

LABEL_83:
  v81 = sub_10001313C(a1, v95);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v81);
LABEL_89:

LABEL_90:
  return v16;
}

void sub_100012980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000129BC(void *a1, const char *a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  const char *v6;
  id v7;
  void *v8;
  BOOL v9;
  id v10;

  v2 = (uint64_t)a1;
  if (a1)
  {
    v3 = sub_10005066C(a1, a2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = objc_msgSend(v4, "type");

    if (v5 == (id)1)
    {
      return 0;
    }
    else
    {
      if (v5 == (id)3)
      {
        v10 = sub_10005066C((id)v2, v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue(v10);
        v9 = (unint64_t)objc_msgSend(v8, "csn") > 0x648;
      }
      else
      {
        if (v5 != (id)2)
          return 1;
        v7 = sub_10005066C((id)v2, v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
        v9 = (unint64_t)objc_msgSend(v8, "csn") > 0x50E;
      }
      v2 = v9;

    }
  }
  return v2;
}

void sub_100012A68(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 16), a2);
}

BOOL sub_100012A78(void *a1)
{
  id v1;
  void *v2;
  id v3;
  const char *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL8 v8;
  id v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  id v14;
  void *v15;
  id v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  unsigned int v25;

  if (!a1)
    return 0;
  v21 = 0;
  v1 = sub_100013D38(a1, &v21);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = v21;
  v5 = v3;
  if (v3)
  {
    v6 = SESDefaultLogObject(v3, v4);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412290;
      v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Failed to get PTA package: %@", buf, 0xCu);
    }
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v10 = objc_msgSend(objc_getProperty(v2, v4, 8, 1), "length");
    if ((unint64_t)v10 > 0xE)
    {
      v16 = objc_msgSend(objc_getProperty(v2, v11, 8, 1), "u16BE:", 13);
      v17 = v16;
      v19 = SESDefaultLogObject(v16, v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        v23 = v2;
        v24 = 1024;
        v25 = v17;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "PTA Package %@ Raw Version 0x%X", buf, 0x12u);
      }

      v8 = v17 > 0x202;
      goto LABEL_7;
    }
    v12 = SESDefaultLogObject(v10, v11);
    v7 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v14 = objc_msgSend(objc_getProperty(v2, v13, 8, 1), "asHexString");
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      *(_DWORD *)buf = 138412290;
      v23 = v15;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "PTA Package AID %@ too short?", buf, 0xCu);

    }
  }

LABEL_6:
  v8 = 0;
LABEL_7:

  return v8;
}

void sub_100012C70(uint64_t a1, void *a2)
{
  id Property;
  const char *v4;
  id v5;

  Property = a2;
  v5 = Property;
  if (Property)
    Property = objc_getProperty(Property, v4, 16, 1);
  if (objc_msgSend(Property, "containsObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40)))*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;

}

id sub_100012CD4(void *a1, void *a2)
{
  void (**v3)(_QWORD, void *);
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id *v11;
  _UNKNOWN **v12;
  int *v13;
  _UNKNOWN **v14;
  void *v15;
  id *v16;
  id v17;
  id v18;
  void *v19;
  id *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  const char *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  const char *v36;
  const char *v37;
  void *v38;
  id Property;
  id v40;
  id v41;
  id v42;
  int v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  id *v47;
  void *v48;
  uint64_t v49;
  void *v51;
  uint64_t v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  void (**v57)(_QWORD, void *);
  void *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  id v67;
  _BYTE v68[128];
  _BYTE v69[128];

  v3 = a2;
  if (a1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000151000000"), "hexStringAsData"));
    v5 = sub_10004FBA0(a1, v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

    if (v6)
    {
      v7 = v6;
      v8 = v7;
    }
    else
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("80AF10020000064F005C024F840000"), "hexStringAsData"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("80AF10030000064F005C024F840000"), "hexStringAsData"));
      v11 = 0;
      v12 = &_ss018_bridgeAnyObjectToB0yypyXlSgF_ptr;
      v13 = &OBJC_IVAR___KmlDataExchangeManager__bleOOBMasterKey;
      v14 = &_ss018_bridgeAnyObjectToB0yypyXlSgF_ptr;
      v54 = v9;
      v15 = v54;
      while (1)
      {
        v16 = v11;
        v67 = 0;
        v58 = v15;
        v17 = sub_10004F6A8(a1, v15, &v67);
        v11 = (id *)objc_claimAutoreleasedReturnValue(v17);
        v18 = v67;

        if (v18)
          break;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v19 = v12[390];
        v20 = sub_10005582C(v11);
        v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "TLVsWithData:", v21));

        v55 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v63, v69, 16);
        if (v55)
        {
          v23 = *(_QWORD *)v64;
          v56 = v22;
          v57 = v3;
          v52 = *(_QWORD *)v64;
          v53 = v10;
          do
          {
            v24 = 0;
            do
            {
              if (*(_QWORD *)v64 != v23)
                objc_enumerationMutation(v22);
              v25 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * (_QWORD)v24);
              v26 = (void *)objc_opt_new(v13 + 650);
              v28 = (void *)objc_opt_new(v14[317]);
              if (v26)
                objc_setProperty_atomic(v26, v27, v28, 16);

              v61 = 0u;
              v62 = 0u;
              v59 = 0u;
              v60 = 0u;
              v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "children"));
              v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v59, v68, 16);
              if (v30)
              {
                v31 = v30;
                v32 = *(_QWORD *)v60;
                do
                {
                  v33 = 0;
                  do
                  {
                    if (*(_QWORD *)v60 != v32)
                      objc_enumerationMutation(v29);
                    v34 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * (_QWORD)v33);
                    v35 = objc_msgSend(v34, "tag");
                    if ((_DWORD)v35 == 132)
                    {
                      if (v26)
                        Property = objc_getProperty(v26, v36, 16, 1);
                      else
                        Property = 0;
                      v40 = Property;
                      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "value"));
                      objc_msgSend(v40, "addObject:", v38);

                    }
                    else
                    {
                      if ((_DWORD)v35 != 79)
                      {
                        v44 = SESDefaultLogObject(v35, v36);
                        v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
                        v46 = SESErrorDomain;
                        objc_msgSend(v34, "tag");
                        v47 = sub_10005582C(v11);
                        v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
                        v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "asHexString"));
                        v49 = SESCreateAndLogError(0, v45, v46, 0, CFSTR("Get Status returned unexpected tag 0x%X payload %@"));
                        v8 = (void *)objc_claimAutoreleasedReturnValue(v49);

                        v7 = 0;
                        v3 = v57;
                        v10 = v53;
                        goto LABEL_34;
                      }
                      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "value"));
                      if (v26)
                        objc_setProperty_atomic(v26, v37, v38, 8);
                    }

                    v33 = (char *)v33 + 1;
                  }
                  while (v31 != v33);
                  v41 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v59, v68, 16);
                  v31 = v41;
                }
                while (v41);
              }

              v3 = v57;
              v57[2](v57, v26);

              v24 = (char *)v24 + 1;
              v22 = v56;
              v13 = &OBJC_IVAR___KmlDataExchangeManager__bleOOBMasterKey;
              v14 = &_ss018_bridgeAnyObjectToB0yypyXlSgF_ptr;
              v23 = v52;
            }
            while (v24 != v55);
            v10 = v53;
            v55 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v63, v69, 16);
          }
          while (v55);
        }

        v42 = v10;
        v43 = sub_100055868((uint64_t)v11);
        v15 = v42;
        v12 = &_ss018_bridgeAnyObjectToB0yypyXlSgF_ptr;
        if (v43 != 25360)
        {
          v7 = 0;
          v8 = 0;
          v58 = v42;
          goto LABEL_34;
        }
      }
      v7 = v18;
      v8 = v7;
LABEL_34:

    }
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

id sub_10001313C(void *a1, void *a2)
{
  const char *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  SLAMPersonalizationInfo *v17;
  void *v18;
  SLAMPersonalizationInfo *v19;
  void *v20;
  SLAMPersonalizationInfo *v21;
  void *v22;
  SLAMPersonalizationInfo *v23;
  void *v24;
  uint64_t v25;
  SLAMPersonalizationInfo *v26;
  void *v27;
  const char *v28;
  const char *v29;
  int v30;
  const char *v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  BOOL v37;
  uint64_t v38;
  NSObject *v39;
  id v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  id v58;
  unsigned int v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  __CFString *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  id v85;
  void *v86;
  void *v87;
  id v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const __CFString *v98;
  uint64_t v99;
  void *v101;
  id v102;
  id v103;
  BOOL v104;
  NSObject *v105;
  unsigned __int8 v106;
  uint64_t v107;
  id v108;
  id v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint8_t buf[4];
  _BYTE v115[10];
  NSObject *v116;
  _BYTE v117[128];

  v4 = a2;
  if (!a1)
  {
    v12 = 0;
    goto LABEL_109;
  }
  v5 = sub_1000129BC(a1, v3);
  if ((v5 & 1) == 0)
  {
    v13 = SESDefaultLogObject(v5, v6);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v15 = SESCreateAndLogError(0, v14, SESErrorDomain, 4, CFSTR("SLAM is not supported"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v15);

    goto LABEL_109;
  }
  v7 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
  if (SESInternalVariant(v7))
  {
    v8 = objc_msgSend(v7, "BOOLForKey:", CFSTR("debug.skip.applet.personalization"));
    if ((_DWORD)v8)
    {
      v10 = SESDefaultLogObject(v8, v9);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Skipping applet personalization due to debug setting", buf, 2u);
      }
      v12 = 0;
      goto LABEL_108;
    }
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 4));
  v17 = objc_opt_new(SLAMPersonalizationInfo);
  sub_100013B00((uint64_t)v17, CFSTR("A000000809434343444B417631"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("80CA00EF"), "hexStringAsData"));
  sub_100013B10((uint64_t)v17, v18);

  if (v17)
  {
    *(_QWORD *)&v17->_devPersonalizationID = 0x380000003;
    v17->_devPersonalizationScript = "SLAMPersonalizeCCC";
    v17->_prodPersonalizationScript = "SLAMPersonalizeCCC";
  }
  objc_msgSend(v16, "addObject:", v17);

  v19 = objc_opt_new(SLAMPersonalizationInfo);
  sub_100013B00((uint64_t)v19, CFSTR("A00000085801010100000001"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("80CA00EF"), "hexStringAsData"));
  sub_100013B10((uint64_t)v19, v20);

  if (v19)
  {
    *(_QWORD *)&v19->_devPersonalizationID = 0x280000002;
    v19->_devPersonalizationScript = "SLAMPersonalizeHome";
    v19->_prodPersonalizationScript = "SLAMPersonalizeHome";
  }
  objc_msgSend(v16, "addObject:", v19);

  v21 = objc_opt_new(SLAMPersonalizationInfo);
  sub_100013B00((uint64_t)v21, CFSTR("A00000085802010100000001"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("80CA00EF"), "hexStringAsData"));
  sub_100013B10((uint64_t)v21, v22);

  if (v21)
  {
    *(_QWORD *)&v21->_devPersonalizationID = 0x480000004;
    v21->_devPersonalizationScript = "SLAMPersonalizeHydra";
    v21->_prodPersonalizationScript = "SLAMPersonalizeHydra";
  }
  objc_msgSend(v16, "addObject:", v21);

  v23 = objc_opt_new(SLAMPersonalizationInfo);
  sub_100013B00((uint64_t)v23, CFSTR("A000000909ACCE5501"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("80CA00EF"), "hexStringAsData"));
  sub_100013B10((uint64_t)v23, v24);

  if (v23)
  {
    *(_QWORD *)&v23->_devPersonalizationID = 0x180000001;
    v23->_devPersonalizationScript = "SLAMPersonalizeLyon";
    v23->_prodPersonalizationScript = "SLAMPersonalizeLyon";
  }
  objc_msgSend(v16, "addObject:", v23);

  v25 = sub_100015574(a1, 0);
  v26 = objc_opt_new(SLAMPersonalizationInfo);
  sub_100013B00((uint64_t)v26, CFSTR("A000000704E000000000"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("80CA00EC"), "hexStringAsData"));
  sub_100013B10((uint64_t)v26, v27);

  if (v26)
  {
    v28 = "SLAMPersonalizeSunsprite_1_X_Internal";
    if (v25 == 2)
      v28 = "SLAMPersonalizeSunsprite_Internal";
    *(int8x8_t *)&v26->_devPersonalizationID = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v25 == 2), 0x1FuLL)), (int8x8_t)0x6C0000006, (int8x8_t)0x4C0000003);
    v29 = "SLAMPersonalizeSunsprite";
    if (v25 != 2)
      v29 = "SLAMPersonalizeSunsprite_1_X";
    v26->_devPersonalizationScript = v29;
    v26->_prodPersonalizationScript = v29;
    if (v25 == 2)
      v30 = -2147483642;
    else
      v30 = -2147483644;
    v26->_prodInternalPersonalizationID = v30;
    v26->_prodInternalPersonalizationScript = v28;
  }
  objc_msgSend(v16, "addObject:", v26);

  v32 = sub_10005066C(a1, v31);
  v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
  v106 = objc_msgSend(v33, "isProd");

  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "getInformation"));
  v36 = v34;
  v102 = v7;
  v103 = v4;
  if (v34)
  {
    v37 = objc_msgSend(v34, "prodMode") != 0;
  }
  else
  {
    v38 = SESDefaultLogObject(0, v35);
    v39 = objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Failed to retrieve proximity chip information; defaulting to production",
        buf,
        2u);
    }

    v37 = 1;
  }
  v104 = v37;
  v112 = 0u;
  v113 = 0u;
  v110 = 0u;
  v111 = 0u;
  v11 = v16;
  v40 = -[NSObject countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v110, v117, 16);
  if (!v40)
  {
    v12 = 0;
    goto LABEL_107;
  }
  v42 = v40;
  v101 = v36;
  v43 = *(_QWORD *)v111;
  v105 = v11;
  v107 = *(_QWORD *)v111;
LABEL_33:
  v44 = 0;
  while (1)
  {
    if (*(_QWORD *)v111 != v43)
      objc_enumerationMutation(v11);
    v45 = *(_QWORD *)(*((_QWORD *)&v110 + 1) + 8 * v44);
    v46 = SESDefaultLogObject(v40, v41);
    v47 = objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
    {
      if (v45)
        v48 = *(_QWORD *)(v45 + 24);
      else
        v48 = 0;
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v115 = v48;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "Personalizing %@", buf, 0xCu);
    }

    v49 = v45 ? *(void **)(v45 + 24) : 0;
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "hexStringAsData"));
    v51 = sub_1000500FC(a1, v50);

    if (v51)
      break;
    v66 = SESDefaultLogObject(v52, v53);
    v60 = objc_claimAutoreleasedReturnValue(v66);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
    {
      if (v45)
        v67 = *(_QWORD *)(v45 + 24);
      else
        v67 = 0;
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v115 = v67;
      v68 = v60;
      v69 = "%@ not present; skipping personalization";
LABEL_57:
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_INFO, v69, buf, 0xCu);
    }
LABEL_88:

    if (v42 == (id)++v44)
    {
      v40 = -[NSObject countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v110, v117, 16);
      v42 = v40;
      if (!v40)
      {
        v12 = 0;
        v7 = v102;
        v4 = v103;
        v36 = v101;
        goto LABEL_107;
      }
      goto LABEL_33;
    }
  }
  if (v45)
    v54 = *(void **)(v45 + 24);
  else
    v54 = 0;
  v55 = v54;
  v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "hexStringAsData"));
  if (v45)
    v57 = *(void **)(v45 + 32);
  else
    v57 = 0;
  v109 = 0;
  v58 = v57;
  v59 = sub_100013B20(a1, v56, v58, &v109);
  v60 = v109;

  if (v60)
  {
    v63 = SESDefaultLogObject(v61, v62);
    v64 = objc_claimAutoreleasedReturnValue(v63);
    v43 = v107;
    if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    {
      if (v45)
        v65 = *(_QWORD *)(v45 + 24);
      else
        v65 = 0;
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)v115 = v65;
      *(_WORD *)&v115[8] = 2112;
      v116 = v60;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "Failed to retrieve perso ID for %@ %@", buf, 0x16u);
    }

    goto LABEL_88;
  }
  if ((v106 & 1) != 0)
  {
    if (v104)
    {
      if (!v45)
        goto LABEL_96;
LABEL_67:
      v70 = 12;
      v71 = 48;
      goto LABEL_68;
    }
    if (v45)
    {
      v72 = *(_DWORD *)(v45 + 16);
      if (v72)
      {
        v71 = 56;
        v73 = CFSTR("/usr/local/SLAM/SLAMInternal.sefw");
LABEL_69:
        v74 = *(_QWORD *)(v45 + v71);
        goto LABEL_70;
      }
      goto LABEL_67;
    }
  }
  else if (v45)
  {
    v70 = 8;
    v71 = 40;
LABEL_68:
    v73 = 0;
    v72 = *(_DWORD *)(v45 + v70);
    goto LABEL_69;
  }
LABEL_96:
  v74 = 0;
  v72 = 0;
  v73 = 0;
LABEL_70:
  v75 = SESDefaultLogObject(v61, v62);
  v76 = objc_claimAutoreleasedReturnValue(v75);
  if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v115 = v59;
    *(_WORD *)&v115[4] = 1024;
    *(_DWORD *)&v115[6] = v72;
    _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_INFO, "Current perso ID 0x%08X target perso ID 0x%08X", buf, 0xEu);
  }

  if (v59 == v72)
  {
    v79 = SESDefaultLogObject(v77, v78);
    v60 = objc_claimAutoreleasedReturnValue(v79);
    v11 = v105;
    v43 = v107;
    if (!os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
      goto LABEL_88;
    if (v45)
      v80 = *(_QWORD *)(v45 + 24);
    else
      v80 = 0;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v115 = v80;
    v68 = v60;
    v69 = "%@ configuration is up-to-date";
    goto LABEL_57;
  }
  v81 = sub_100011DCC(a1, v74, v73);
  v82 = objc_claimAutoreleasedReturnValue(v81);
  if (v82)
  {
    v60 = v82;
    v96 = SESDefaultLogObject(v82, v83);
    v94 = objc_claimAutoreleasedReturnValue(v96);
    v97 = SESErrorDomain;
    v98 = CFSTR("Failed while executing SLAM script %s %@");
    goto LABEL_106;
  }
  if (v45)
    v84 = *(void **)(v45 + 24);
  else
    v84 = 0;
  v85 = v84;
  v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "hexStringAsData"));
  if (v45)
    v87 = *(void **)(v45 + 32);
  else
    v87 = 0;
  v108 = 0;
  v88 = v87;
  v89 = sub_100013B20(a1, v86, v88, &v108);
  v60 = v108;

  v92 = SESDefaultLogObject(v90, v91);
  v93 = objc_claimAutoreleasedReturnValue(v92);
  v94 = v93;
  if (v89 == v72)
  {
    v43 = v107;
    if (os_log_type_enabled(v93, OS_LOG_TYPE_INFO))
    {
      if (v45)
        v95 = *(_QWORD *)(v45 + 24);
      else
        v95 = 0;
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)v115 = v95;
      *(_WORD *)&v115[8] = 1024;
      LODWORD(v116) = v72;
      _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_INFO, "%@ configuration updated to ID 0x%08X", buf, 0x12u);
    }

    v11 = v105;
    goto LABEL_88;
  }
  v97 = SESErrorDomain;
  v98 = CFSTR("Perso ID mismatch after SLAM current 0x%08X target 0x%08X");
LABEL_106:
  v99 = SESCreateAndLogError(0, v94, v97, 0, v98);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v99);

  v7 = v102;
  v4 = v103;
  v36 = v101;
  v11 = v105;
LABEL_107:

LABEL_108:
LABEL_109:

  return v12;
}

void sub_100013B00(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 24), a2);
}

void sub_100013B10(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 32), a2);
}

id sub_100013B20(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  id *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id *v29;
  void *v30;
  uint64_t v31;
  id *v32;
  void *v33;
  void *v35;
  id v36;

  v7 = a2;
  v8 = a3;
  v10 = v8;
  if (a1)
  {
    if (v7 && v8)
    {
      v11 = sub_10004FBA0(a1, v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      if (v12)
      {
        v13 = v12;
        if (a4)
        {
          v13 = objc_retainAutorelease(v12);
          v14 = 0;
          *a4 = v13;
        }
        else
        {
          v14 = 0;
        }
        goto LABEL_20;
      }
      v36 = 0;
      v18 = sub_10004F6A8(a1, v10, &v36);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      v20 = v36;
      v13 = v20;
      if (v20)
      {
        if (a4)
        {
          v14 = 0;
          *a4 = objc_retainAutorelease(v20);
LABEL_19:

LABEL_20:
          goto LABEL_21;
        }
      }
      else
      {
        v21 = sub_10005582C((id *)v19);
        v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
        v23 = objc_msgSend(v22, "length");

        if ((unint64_t)v23 > 3)
        {
          v32 = sub_10005582C((id *)v19);
          v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
          v14 = objc_msgSend(v33, "u32BE:", 0);

          goto LABEL_19;
        }
        if (a4)
        {
          v26 = SESDefaultLogObject(v24, v25);
          v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
          v28 = SESErrorDomain;
          v29 = sub_10005582C((id *)v19);
          v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "asHexString"));
          v31 = SESCreateAndLogError(0, v27, v28, 0, CFSTR("Invalid response for get data %@"));
          *a4 = (id)objc_claimAutoreleasedReturnValue(v31);

        }
      }
      v14 = 0;
      goto LABEL_19;
    }
    if (a4)
    {
      v15 = SESDefaultLogObject(v8, v9);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      v17 = SESCreateAndLogError(0, v16, SESErrorDomain, 0, CFSTR("Invalid parameter instanceAID %d getPersonalizationIDCommand %d"));
      *a4 = (id)objc_claimAutoreleasedReturnValue(v17);

    }
  }
  v14 = 0;
LABEL_21:

  return v14;
}

id sub_100013D38(id a1, _QWORD *a2)
{
  id v2;
  id v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD v9[4];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v2 = a1;
  if (a1)
  {
    v12 = 0;
    v13 = &v12;
    v14 = 0x3032000000;
    v15 = sub_100011ECC;
    v16 = sub_100011EDC;
    v17 = 0;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100013E68;
    v9[3] = &unk_1003034B8;
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704D011500000000001000000"), "hexStringAsData"));
    v10 = v4;
    v11 = &v12;
    v5 = sub_100012CD4(v2, v9);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = v6;
    if (v6)
    {
      v2 = 0;
      if (a2)
        *a2 = objc_retainAutorelease(v6);
    }
    else
    {
      v2 = (id)v13[5];
    }

    _Block_object_dispose(&v12, 8);
  }
  return v2;
}

void sub_100013E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100013E68(uint64_t a1, void *a2)
{
  id Property;
  const char *v5;
  id v6;

  Property = a2;
  v6 = Property;
  if (Property)
    Property = objc_getProperty(Property, v5, 16, 1);
  if (objc_msgSend(Property, "containsObject:", *(_QWORD *)(a1 + 32)))
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);

}

id sub_100013F8C(id a1, NSData *a2)
{
  return -[NSData asHexString](a2, "asHexString");
}

id sub_100013FC4(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  _QWORD v33[4];

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = objc_msgSend(v6, "length");
  if (v8 == (id)4
    && (v8 = objc_msgSend(v7, "length")) != 0
    && (v8 = objc_msgSend(v7, "length"), (unint64_t)v8 < 0xF1))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704E000000000"), "hexStringAsData"));
    v17 = sub_10004FBA0(v5, v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);

    if (v18)
    {
      v19 = v18;
      v14 = v19;
    }
    else
    {
      v33[0] = objc_msgSend(v6, "DERItem");
      v33[1] = v20;
      v33[2] = objc_msgSend(v7, "DERItem");
      v33[3] = v21;
      v22 = encodeSequenceSpec(v33, &off_100304DF0);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v22);
      if (v24)
      {
        v32 = 0;
        v25 = sub_10004F8D8(v5, 128, 65, 0, 0, v24, 0, &v32);
        v19 = v32;
        v14 = v19;
      }
      else
      {
        v26 = SESDefaultLogObject(0, v23);
        v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        v28 = SESErrorDomain;
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "asHexString"));
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "asHexString"));
        v29 = SESCreateAndLogError(0, v27, v28, 0, CFSTR("Failed to encode payload key %@ value %@"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(v29);

        v19 = 0;
      }

    }
  }
  else
  {
    v10 = SESDefaultLogObject(v8, v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = SESErrorDomain;
    objc_msgSend(v6, "length");
    objc_msgSend(v7, "length");
    v13 = SESCreateAndLogError(0, v11, v12, 0, CFSTR("Wrong length for parameters key %lu value %lu"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

  }
  return v14;
}

id sub_1000141E8(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  id *v23;
  id v24;
  id *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v30;
  id v31;
  _QWORD v32[2];

  v5 = a1;
  v6 = a2;
  v7 = objc_msgSend(v6, "length");
  if (v7 == (id)4)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704E000000000"), "hexStringAsData"));
    v10 = sub_10004FBA0(v5, v9);
    v11 = (id)objc_claimAutoreleasedReturnValue(v10);

    if (v11)
    {
      if (a3)
      {
        v11 = objc_retainAutorelease(v11);
        v12 = 0;
        *a3 = v11;
      }
      else
      {
        v12 = 0;
      }
      goto LABEL_17;
    }
    v32[0] = objc_msgSend(v6, "DERItem");
    v32[1] = v17;
    v18 = encodeSequenceSpec(v32, &off_100304E00);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v21 = v19;
    if (v19)
    {
      v31 = 0;
      v22 = sub_10004F8D8(v5, 128, 64, 0, 0, v19, 0, &v31);
      v23 = (id *)objc_claimAutoreleasedReturnValue(v22);
      v24 = v31;
      v11 = v24;
      if (a3)
        *a3 = objc_retainAutorelease(v24);
      v25 = sub_10005582C(v23);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v25);
    }
    else
    {
      if (!a3)
      {
        v11 = 0;
        v12 = 0;
        goto LABEL_16;
      }
      v26 = SESDefaultLogObject(0, v20);
      v23 = (id *)objc_claimAutoreleasedReturnValue(v26);
      v27 = SESErrorDomain;
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "asHexString"));
      v28 = SESCreateAndLogError(0, v23, v27, 0, CFSTR("Failed to encode payload key %@"));
      *a3 = (id)objc_claimAutoreleasedReturnValue(v28);

      v11 = 0;
      v12 = 0;
    }

LABEL_16:
LABEL_17:

    goto LABEL_18;
  }
  if (a3)
  {
    v13 = SESDefaultLogObject(v7, v8);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v15 = SESErrorDomain;
    objc_msgSend(v6, "length");
    v16 = SESCreateAndLogError(0, v14, v15, 0, CFSTR("Wrong length for parameter key %lu"));
    *a3 = (id)objc_claimAutoreleasedReturnValue(v16);

  }
  v12 = 0;
LABEL_18:

  return v12;
}

id sub_100014404(void *a1, char a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  id v35;
  __CFData *v36;
  id v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  const __CFString *v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  const __CFData *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  const char *v64;
  id v65;
  const __CFData *v66;
  void *v67;
  const __CFData *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  void *v82;
  id v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  NSObject *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  _DWORD *v105;
  uint64_t v106;
  int v107;
  int v108;
  unsigned int v109;
  _DWORD *v110;
  uint64_t v111;
  id v112;
  __CFData *v113;
  id v114;
  _QWORD *v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  _QWORD *v121;
  void *v122;
  id v123;
  id v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  NSObject *v128;
  uint64_t v130;
  void *v131;
  const __CFData *v132;
  id v133;
  void *v134;
  void *v135;
  __CFData *v136;
  __CFData *v137;
  id v138;
  id v139;
  id v140;
  id v141;
  _QWORD v142[2];
  id v143;
  id v144;
  id v145;
  uint8_t v146[4];
  id v147;
  unsigned __int8 md[16];
  __int128 v149;
  uint8_t buf[16];
  __int128 v151;

  v5 = a1;
  v6 = a3;
  if ((a2 & 1) == 0)
  {
    v7 = +[SESBootUUID isFirstLaunchAfterBootForKey:](SESBootUUID, "isFirstLaunchAfterBootForKey:", CFSTR("sunsprite.sepdata.last.check.uuid"));
    if ((v7 & 1) == 0)
    {
      v24 = SESDefaultLogObject(v7, v8);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Sunsprite provisioning already checked for this boot", buf, 2u);
      }

      goto LABEL_15;
    }
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704E000000000"), "hexStringAsData"));
  v10 = sub_1000500FC(v5, v9);

  if (!v10)
  {
    v22 = SESDefaultLogObject(v11, v12);
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Sunsprite not present; skipping provisioning",
        buf,
        2u);
    }

    +[SESBootUUID setFirstLaunchAfterBootDoneForKey:](SESBootUUID, "setFirstLaunchAfterBootDoneForKey:", CFSTR("sunsprite.sepdata.last.check.uuid"));
LABEL_15:
    v26 = 0;
    goto LABEL_80;
  }
  v13 = objc_msgSend(v6, "getType");
  if (v13)
  {
    v15 = v13;
    v145 = 0;
    v16 = sub_100014DD4((uint64_t)CFSTR("rcrt"), &v145);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v18 = v145;
    v20 = v18;
    if (!v17 || v18)
    {
      v30 = SESDefaultLogObject(v18, v19);
      v21 = (void *)objc_claimAutoreleasedReturnValue(v30);
      v31 = SESCreateAndLogError(0, v21, SESErrorDomain, 0, CFSTR("While fetching RCRT"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(v31);
LABEL_79:

      goto LABEL_80;
    }
    if (v15 == (id)1)
    {
      v144 = 0;
      v32 = sub_100014DD4((uint64_t)CFSTR("rMCl"), &v144);
      v21 = (void *)objc_claimAutoreleasedReturnValue(v32);
      v33 = v144;
      v20 = v33;
      if (!v21 || v33)
      {
        v95 = SESDefaultLogObject(v33, v34);
        v36 = (__CFData *)objc_claimAutoreleasedReturnValue(v95);
        v96 = SESCreateAndLogError(0, v36, SESErrorDomain, 0, CFSTR("While fetching rMCl"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(v96);
LABEL_78:

        goto LABEL_79;
      }
      v143 = 0;
      v35 = sub_100014DD4((uint64_t)CFSTR("rSCl"), &v143);
      v36 = (__CFData *)objc_claimAutoreleasedReturnValue(v35);
      v37 = v143;
      v20 = v37;
      if (!v36 || v37)
      {
        v100 = SESDefaultLogObject(v37, v38);
        v60 = (const __CFData *)objc_claimAutoreleasedReturnValue(v100);
        v101 = SESCreateAndLogError(0, v60, SESErrorDomain, 0, CFSTR("While fetching rSCl"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(v101);
LABEL_77:

        goto LABEL_78;
      }
      v136 = v36;
    }
    else
    {
      v136 = 0;
      v21 = 0;
    }
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[MSUDataAccessor sharedDataAccessor](MSUDataAccessor, "sharedDataAccessor"));
    *(_QWORD *)md = 0;
    v40 = objc_msgSend(v39, "copyPathForPersonalizedData:error:", 0, md);
    v41 = *(id *)md;

    if (v41 || !v40)
    {
      v61 = SESDefaultLogObject(v42, v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue(v61);
      v62 = SESCreateAndLogError(v41, v44, SESErrorDomain, 4, CFSTR("Failed to get personalized data path from MSU?"));
      v59 = (id)objc_claimAutoreleasedReturnValue(v62);
      v60 = 0;
      goto LABEL_33;
    }
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "stringByAppendingString:", CFSTR("/Rose/ftab.bin")));
    v46 = SESDefaultLogObject(v44, v45);
    v47 = objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v44;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "Resolved rose firmware path %@\n", buf, 0xCu);
    }

    *(_QWORD *)buf = 0;
    v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:options:error:](NSData, "dataWithContentsOfFile:options:error:", v44, 1, buf));
    v49 = *(id *)buf;
    v41 = v49;
    v134 = v48;
    if (v49 || (v49 = objc_msgSend(v48, "length"), (unint64_t)v49 <= 0x17))
    {
      v51 = SESDefaultLogObject(v49, v50);
      v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
      v53 = SESErrorDomain;
      v54 = CFSTR("Couldn't read FTAB header");
      v55 = v41;
      v56 = v52;
      v57 = 0;
    }
    else
    {
      v133 = objc_retainAutorelease(v48);
      v105 = objc_msgSend(v133, "bytes");
      v107 = v105[4];
      v108 = v105[5];
      v109 = v107 + v108;
      if (!__CFADD__(v107, v108))
      {
        v110 = v105;
        v105 = objc_msgSend(v133, "length");
        if ((unint64_t)v105 >= v109)
        {
          v60 = (const __CFData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "subdataWithRange:", v110[4], v110[5]));
          v59 = 0;
          goto LABEL_31;
        }
      }
      v111 = SESDefaultLogObject(v105, v106);
      v52 = (void *)objc_claimAutoreleasedReturnValue(v111);
      v53 = SESErrorDomain;
      v54 = CFSTR("Bogus FTAB");
      v55 = 0;
      v56 = v52;
      v57 = 1;
    }
    v58 = SESCreateAndLogError(v55, v56, v53, v57, v54);
    v59 = (id)objc_claimAutoreleasedReturnValue(v58);

    v60 = 0;
LABEL_31:

LABEL_33:
    v63 = v59;
    v20 = v63;
    if (!v60 || v63)
    {
      v93 = SESDefaultLogObject(v63, v64);
      v71 = (void *)objc_claimAutoreleasedReturnValue(v93);
      v94 = SESCreateAndLogError(0, v71, SESErrorDomain, 0, CFSTR("While fetching R1 manifest"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(v94);
      v36 = v136;
    }
    else
    {
      v65 = sub_10005066C(v5, v64);
      v66 = v60;
      v67 = (void *)objc_claimAutoreleasedReturnValue(v65);
      v68 = (const __CFData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "seid"));
      *(_QWORD *)buf = 0;
      v132 = v66;
      v135 = v21;
      v36 = v136;
      v69 = SSEGetRosePairingInfo(v68, (const __CFData *)v17, (const __CFData *)v21, v136, v66, (const __CFData **)buf);
      v71 = *(void **)buf;
      if (!*(_QWORD *)buf)
      {
        v72 = v69;
        v73 = SESDefaultLogObject(v69, v70);
        v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
        v130 = v72;
        v75 = SESCreateAndLogError(0, v74, SESErrorDomain, 0, CFSTR("Failed to get RosePairing info from SSE %d"));
        v20 = (id)objc_claimAutoreleasedReturnValue(v75);

        v36 = v136;
      }
      v20 = v20;

      if (!v71 || v20)
      {
        v97 = SESDefaultLogObject(v76, v77);
        v98 = (void *)objc_claimAutoreleasedReturnValue(v97);
        v99 = SESCreateAndLogError(0, v98, SESErrorDomain, 0, CFSTR("While getting RosePairingData"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(v99);

      }
      else
      {
        *(_OWORD *)buf = 0u;
        v151 = 0u;
        v142[0] = objc_msgSend(v71, "DERItem");
        v142[1] = v78;
        v79 = DERParseSequenceSpec(0xE00000000000000ALL, v142, &off_100304E10, buf, 32);
        if (!(_DWORD)v79)
        {
          v80 = *(_QWORD *)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            *(_OWORD *)md = 0u;
            v149 = 0u;
            CC_SHA256(*(const void **)buf, *(CC_LONG *)&buf[8], md);
            v141 = 0;
            v81 = sub_100014EC0(v5, &v141);
            v82 = (void *)objc_claimAutoreleasedReturnValue(v81);
            v83 = v141;
            v85 = v83;
            if (!v82 || v83)
            {
              v86 = v71;
              v87 = SESDefaultLogObject(v83, v84);
              v88 = objc_claimAutoreleasedReturnValue(v87);
              if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v146 = 138412290;
                v147 = v85;
                _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "Couldn't get config hash, proceeding anyway: %@", v146, 0xCu);
              }

              v71 = v86;
            }
            v89 = objc_msgSend(v82, "isEqualToBytes:length:", md, 32, v130);
            v21 = v135;
            if ((_DWORD)v89)
            {
              v91 = SESDefaultLogObject(v89, v90);
              v92 = objc_claimAutoreleasedReturnValue(v91);
              if (os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)v146 = 0;
                _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_INFO, "Sunsprite provisioning data is up-to-date", v146, 2u);
              }

              +[SESBootUUID setFirstLaunchAfterBootDoneForKey:](SESBootUUID, "setFirstLaunchAfterBootDoneForKey:", CFSTR("sunsprite.sepdata.last.check.uuid"));
              v20 = 0;
              v26 = 0;
              v60 = v132;
            }
            else
            {
              v140 = 0;
              v112 = sub_100014FB4(v17, &v140);
              v113 = (__CFData *)objc_claimAutoreleasedReturnValue(v112);
              v114 = v140;
              v20 = v114;
              v137 = v113;
              if (v113)
              {
                v139 = v114;
                v115 = sub_10001519C(v113, &v139);
                v131 = (void *)objc_claimAutoreleasedReturnValue(v115);
                v116 = v139;

                if (v116)
                {
                  v20 = v116;
                }
                else
                {
                  v119 = SESDefaultLogObject(v117, v118);
                  v120 = objc_claimAutoreleasedReturnValue(v119);
                  if (os_log_type_enabled(v120, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)v146 = 138412290;
                    v147 = v131;
                    _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_INFO, "Using rcrt intermediate %@", v146, 0xCu);
                  }

                  v138 = 0;
                  v121 = sub_10001526C(v131, &v138);
                  v122 = (void *)objc_claimAutoreleasedReturnValue(v121);
                  v123 = v138;
                  if (!v123)
                  {
                    v124 = sub_100015358(v5, v137, v122, v71, v15 != (id)1);
                    v125 = (id)objc_claimAutoreleasedReturnValue(v124);
                    v123 = v125;
                    if (!v125)
                      v125 = +[SESBootUUID setFirstLaunchAfterBootDoneForKey:](SESBootUUID, "setFirstLaunchAfterBootDoneForKey:", CFSTR("sunsprite.sepdata.last.check.uuid"));
                    v127 = SESDefaultLogObject(v125, v126);
                    v128 = objc_claimAutoreleasedReturnValue(v127);
                    if (os_log_type_enabled(v128, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)v146 = 138412290;
                      v147 = v123;
                      _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_INFO, "Sunsprite provisioned with error %@", v146, 0xCu);
                    }

                  }
                  v20 = v123;

                }
                v26 = v20;
              }
              else
              {
                v26 = 0;
              }
              v60 = v132;

            }
            goto LABEL_76;
          }
        }
        v102 = SESDefaultLogObject(v79, v80);
        v103 = (void *)objc_claimAutoreleasedReturnValue(v102);
        v104 = SESCreateAndLogError(0, v103, SESErrorDomain, 1, CFSTR("Couldn't parse SEP output?"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(v104);

        v20 = 0;
      }
      v60 = v132;
      v21 = v135;
    }
LABEL_76:

    goto LABEL_77;
  }
  v27 = SESDefaultLogObject(0, v14);
  v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
  v29 = SESCreateAndLogError(0, v28, SESErrorDomain, 0, CFSTR("Unknown chip type from PRGetChipType!"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(v29);

LABEL_80:
  return v26;
}

id sub_100014DD4(uint64_t a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  id v8;
  _QWORD v9[3];
  _QWORD v10[3];

  v8 = 0;
  v9[0] = CFSTR("VerifyData");
  v9[1] = CFSTR("StripImg4");
  v10[0] = &__kCFBooleanFalse;
  v10[1] = &__kCFBooleanFalse;
  v9[2] = CFSTR("GetCombined");
  v10[2] = &__kCFBooleanTrue;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 3));
  v5 = (void *)AMFDRSealingMapCopyLocalDataForClass(a1, v4, &v8);
  v6 = v8;
  if (a2)
    *a2 = objc_retainAutorelease(v8);

  return v5;
}

id sub_100014EC0(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id *v10;
  id *v11;
  int v13;
  char v14;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704E000000000"), "hexStringAsData"));
  v5 = sub_10004FBA0(v3, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  if (v6)
  {
    v7 = 0;
    if (a2)
      *a2 = objc_retainAutorelease(v6);
  }
  else
  {
    v14 = 0;
    v13 = -352269696;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytesNoCopy:length:freeWhenDone:](NSData, "dataWithBytesNoCopy:length:freeWhenDone:", &v13, 5, 0));
    v9 = sub_10004F6A8(v3, v8, a2);
    v10 = (id *)objc_claimAutoreleasedReturnValue(v9);
    v11 = sub_10005582C(v10);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v11);

  }
  return v7;
}

id sub_100014FB4(void *a1, _QWORD *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t Payload;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _OWORD v26[28];
  uint64_t v27;

  v25 = 0;
  v24 = 0;
  v23 = 0;
  v22 = 0;
  v3 = objc_retainAutorelease(a1);
  v4 = objc_msgSend(v3, "bytes");
  v5 = objc_msgSend(v3, "length");

  v6 = AMFDRDecodeCombined(v4, v5, &v25, &v24, &v23, &v22);
  if (!v6 && (v6 = v23) != 0 && (v7 = v22) != 0)
  {
    v27 = 0;
    memset(v26, 0, sizeof(v26));
    v8 = Img4DecodeInit();
    if ((_DWORD)v8)
    {
      if (a2)
      {
        v10 = SESDefaultLogObject(v8, v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        v12 = SESErrorDomain;
        v13 = CFSTR("Img4DecodeInit %d");
LABEL_9:
        v15 = SESCreateAndLogError(0, v11, v12, 0, v13);
        *a2 = (id)objc_claimAutoreleasedReturnValue(v15);

      }
    }
    else
    {
      v21[0] = 0;
      v21[1] = 0;
      Payload = Img4DecodeGetPayload(v26, v21);
      if (!(_DWORD)Payload)
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithDERItem:](NSData, "dataWithDERItem:", v21));
        return v16;
      }
      if (a2)
      {
        v20 = SESDefaultLogObject(Payload, v19);
        v11 = (void *)objc_claimAutoreleasedReturnValue(v20);
        v12 = SESErrorDomain;
        v13 = CFSTR("Img4DecodeGetPayload %d");
        goto LABEL_9;
      }
    }
  }
  else if (a2)
  {
    v14 = SESDefaultLogObject(v6, v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v12 = SESErrorDomain;
    v13 = CFSTR("Failed to decode FDR object 0x%llx");
    goto LABEL_9;
  }
  v16 = 0;
  return v16;
}

_QWORD *sub_10001519C(void *a1, _QWORD *a2)
{
  const __CFData *v3;
  SecCertificateRef v4;
  uint64_t v5;
  SecCertificateRef v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;

  v3 = a1;
  v4 = SecCertificateCreateWithData(0, v3);
  v6 = v4;
  if (v4)
  {
    a2 = (_QWORD *)SecCertificateCopyIssuerSummary(v4);
  }
  else if (a2)
  {
    v7 = SESDefaultLogObject(0, v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = SESErrorDomain;
    v12 = (void *)objc_claimAutoreleasedReturnValue(-[__CFData base64](v3, "base64"));
    v10 = SESCreateAndLogError(0, v8, v9, 0, CFSTR("Could not create certificate with data %@"));
    *a2 = (id)objc_claimAutoreleasedReturnValue(v10);

    a2 = 0;
  }

  return a2;
}

_QWORD *sub_10001526C(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v3 = a1;
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("SEP-CA-E1")))
  {
    v4 = &unk_1002869A0;
    v5 = 534;
LABEL_5:
    a2 = (_QWORD *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytesNoCopy:length:freeWhenDone:](NSData, "dataWithBytesNoCopy:length:freeWhenDone:", v4, v5, 0));
    goto LABEL_6;
  }
  v6 = objc_msgSend(v3, "isEqualToString:", CFSTR("SEP-CA-E2"));
  if ((_DWORD)v6)
  {
    v4 = &unk_100286BB6;
    v5 = 571;
    goto LABEL_5;
  }
  if (a2)
  {
    v9 = SESDefaultLogObject(v6, v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = SESCreateAndLogError(0, v10, SESErrorDomain, 1, CFSTR("Missing intermediate certificate for %@"));
    *a2 = (id)objc_claimAutoreleasedReturnValue(v11);

    a2 = 0;
  }
LABEL_6:

  return a2;
}

id sub_100015358(void *a1, void *a2, void *a3, void *a4, char a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  id v38;
  _QWORD v39[6];

  v9 = a1;
  v10 = a2;
  v11 = a4;
  v39[0] = objc_msgSend(a3, "DERItem");
  v39[1] = v12;
  v39[2] = objc_msgSend(v10, "DERItem");
  v39[3] = v13;
  v39[4] = objc_msgSend(v11, "DERItem");
  v39[5] = v14;
  v15 = encodeSequenceContentSpec(v39, &off_100304E20);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  v18 = v16;
  if (!v16)
  {
    v30 = SESDefaultLogObject(0, v17);
    v25 = (id)objc_claimAutoreleasedReturnValue(v30);
    v31 = SESCreateAndLogError(0, v25, SESErrorDomain, 0, CFSTR("Failed to encode cert chain"));
    v29 = (id)objc_claimAutoreleasedReturnValue(v31);
    goto LABEL_11;
  }
  if (!objc_msgSend(v16, "length"))
  {
LABEL_9:
    v37 = 0;
    v28 = sub_10004F8D8(v9, 128, 33, 0, a5, 0, 0, &v37);
    v29 = v37;
    v25 = v29;
LABEL_11:
    v32 = v29;
    goto LABEL_12;
  }
  v19 = 0;
  v20 = 0;
  while (1)
  {
    v21 = (char *)objc_msgSend(v18, "length");
    v22 = (unint64_t)&v21[-v19] >= 0xFA ? 250 : (uint64_t)&v21[-v19];
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "subdataWithRange:", v19, v22));
    v38 = 0;
    v24 = sub_10004F8D8(v9, 128, 32, SBYTE1(v20), v20, v23, 0, &v38);
    v25 = v38;

    if (v25)
      break;
    v20 += v22;
    v19 = v20;
    if (objc_msgSend(v18, "length") == (id)v20)
      goto LABEL_9;
  }
  v34 = SESDefaultLogObject(v26, v27);
  v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
  v36 = SESCreateAndLogError(0, v35, SESErrorDomain, 0, CFSTR("while calling WriteChain"));
  v32 = (void *)objc_claimAutoreleasedReturnValue(v36);

LABEL_12:
  return v32;
}

uint64_t sub_100015574(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  id *v9;
  id *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id *v18;
  void *v19;
  uint64_t v20;
  id *v21;
  void *v22;
  unsigned int v23;
  void *v25;
  id v26;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704E000000000"), "hexStringAsData"));
  v5 = sub_10004FBA0(v3, v4);
  v6 = (id)objc_claimAutoreleasedReturnValue(v5);

  if (v6)
  {
    if (a2)
    {
      v6 = objc_retainAutorelease(v6);
      v7 = 0;
      *a2 = v6;
    }
    else
    {
      v7 = 0;
    }
  }
  else
  {
    v26 = 0;
    v8 = sub_10004F8D8(v3, 128, 202, 0, 234, 0, 0, &v26);
    v9 = (id *)objc_claimAutoreleasedReturnValue(v8);
    v6 = v26;
    v10 = sub_10005582C(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = objc_msgSend(v11, "length");

    if ((unint64_t)v12 > 1)
    {
      v21 = sub_10005582C(v9);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v23 = objc_msgSend(v22, "u16BE:", 0);

      if (v23 <= 0x1FF)
        v7 = 1;
      else
        v7 = 2;
    }
    else
    {
      if (a2)
      {
        v15 = SESDefaultLogObject(v13, v14);
        v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        v17 = SESErrorDomain;
        v18 = sub_10005582C(v9);
        v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "asHexString"));
        v20 = SESCreateAndLogError(v6, v16, v17, 0, CFSTR("Failed to query Sunsprite version %@ %@"));
        *a2 = (id)objc_claimAutoreleasedReturnValue(v20);

      }
      v7 = 0;
    }

  }
  return v7;
}

_DWORD *sub_100015734(uint64_t a1, uint64_t a2)
{
  void *v3;
  _DWORD *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", a2, 200, 0, 0));
  v4 = malloc_type_calloc(1uLL, (size_t)objc_msgSend(v3, "length") + 200, 0x374DEA9AuLL);
  *v4 = 1;
  v4[1] = objc_msgSend(v3, "length");
  __strlcpy_chk(v4 + 34, a1, 64, 64);
  v5 = objc_retainAutorelease(v3);
  memcpy(v4 + 50, objc_msgSend(v5, "bytes"), (size_t)objc_msgSend(v5, "length"));

  return v4;
}

id *sub_1000157F8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;

  v5 = a3;
  v6 = a2;
  objc_opt_self(a1);
  v7 = sub_100015860((id *)[SESDatabase alloc], v6, v5);

  return v7;
}

id *sub_100015860(id *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  __int16 v20;
  _QWORD v21[4];
  id v22;
  id buf[2];
  objc_super v24;

  v6 = a2;
  v7 = a3;
  if (a1)
  {
    v24.receiver = a1;
    v24.super_class = (Class)SESDatabase;
    v8 = (id *)objc_msgSendSuper2(&v24, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 4, a3);
      *(_WORD *)((char *)a1 + 25) = 0;
      objc_storeStrong(a1 + 1, a2);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDistributedNotificationCenter defaultCenter](NSDistributedNotificationCenter, "defaultCenter"));
      objc_msgSend(v9, "addObserver:selector:name:object:", a1, "handleMFDNotification:", CFSTR("com.apple.stockholm.se.mfd"), 0);

      v12 = SESDefaultLogObject(v10, v11);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "SESDatabase registered to receive MFD notifications", (uint8_t *)buf, 2u);
      }

      objc_initWeak(buf, a1);
      v14 = a1[4];
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_100015A40;
      v21[3] = &unk_100303590;
      objc_copyWeak(&v22, buf);
      v15 = os_state_add_handler(v14, v21);
      v17 = SESDefaultLogObject(v15, v16);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "SESDatabase registered to receive os_state_handle notifications", (uint8_t *)&v20, 2u);
      }

      objc_destroyWeak(&v22);
      objc_destroyWeak(buf);
    }
  }

  return a1;
}

void sub_100015A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

_DWORD *sub_100015A40(uint64_t a1)
{
  id WeakRetained;
  _DWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = sub_100015A74((uint64_t)WeakRetained);

  return v2;
}

_DWORD *sub_100015A74(uint64_t a1)
{
  _DWORD *v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  __CFString *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  __CFString *v31;
  id v32;
  void *v33;
  id v35;
  id obj;
  NSMutableDictionary *obja;
  NSMutableDictionary *v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  id v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[2];
  _QWORD v50[2];
  _BYTE v51[128];
  _BYTE v52[128];

  v1 = (_DWORD *)a1;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
    if (*((_BYTE *)v1 + 25))
    {
      v38 = objc_opt_new(NSMutableDictionary);
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      v2 = sub_10003A9E0((uint64_t)v1, 0);
      obj = (id)objc_claimAutoreleasedReturnValue(v2);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v52, 16);
      if (!v3)
      {
        v5 = 0;
        goto LABEL_23;
      }
      v4 = v3;
      v5 = 0;
      v6 = 0;
      v7 = *(_QWORD *)v46;
      while (1)
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v46 != v7)
            objc_enumerationMutation(obj);
          v9 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)v8);
          v44 = v5;
          v10 = sub_10003ADE0((uint64_t)v1, v9, &v44);
          v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
          v12 = v44;

          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
          if (v13)
          {
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
          }
          else
          {
            v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<revoked in consolidation>-%u"), v6));
            v6 = (v6 + 1);
          }
          v5 = v12;

          if (v11)
          {
            v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "dumpState"));
LABEL_15:
            v16 = (__CFString *)v15;
            goto LABEL_16;
          }
          if (v12)
          {
            v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "description"));
            goto LABEL_15;
          }
          v16 = CFSTR("Unknown error");
LABEL_16:
          -[NSMutableDictionary setObject:forKeyedSubscript:](v38, "setObject:forKeyedSubscript:", v16, v14);

          v8 = (char *)v8 + 1;
        }
        while (v4 != v8);
        v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v52, 16);
        v4 = v17;
        if (!v17)
        {
LABEL_23:

          obja = objc_opt_new(NSMutableDictionary);
          v40 = 0u;
          v41 = 0u;
          v42 = 0u;
          v43 = 0u;
          v18 = sub_1000402BC((uint64_t)v1, 0);
          v35 = (id)objc_claimAutoreleasedReturnValue(v18);
          v19 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v40, v51, 16);
          if (!v19)
            goto LABEL_40;
          v20 = v19;
          v21 = 0;
          v22 = *(_QWORD *)v41;
          while (1)
          {
            v23 = 0;
            do
            {
              if (*(_QWORD *)v41 != v22)
                objc_enumerationMutation(v35);
              v24 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)v23);
              v39 = v5;
              v25 = sub_100040628((uint64_t)v1, v24, &v39);
              v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
              v27 = v39;

              v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "identifier"));
              if (v28)
              {
                v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "identifier"));
              }
              else
              {
                v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<revoked in consolidation>-%u"), v21));
                v21 = (v21 + 1);
              }
              v5 = v27;

              if (v26)
              {
                v30 = objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "dumpState"));
LABEL_35:
                v31 = (__CFString *)v30;
                goto LABEL_36;
              }
              if (v27)
              {
                v30 = objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "description"));
                goto LABEL_35;
              }
              v31 = CFSTR("Unknown error");
LABEL_36:
              -[NSMutableDictionary setObject:forKeyedSubscript:](obja, "setObject:forKeyedSubscript:", v31, v29);

              v23 = (char *)v23 + 1;
            }
            while (v20 != v23);
            v32 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v40, v51, 16);
            v20 = v32;
            if (!v32)
            {
LABEL_40:

              v49[0] = CFSTR("EndPoints");
              v49[1] = CFSTR("EndPointCAs");
              v50[0] = v38;
              v50[1] = obja;
              v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v50, v49, 2));
              v1 = sub_100015734((uint64_t)"database.state", (uint64_t)v33);

              return v1;
            }
          }
        }
      }
    }
    return 0;
  }
  return v1;
}

id sub_100015E70(uint64_t a1)
{
  void *v2;
  id *v3;
  void *v4;
  id v5;

  if (a1 && (dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32)), !*(_BYTE *)(a1 + 25)))
  {
    v3 = sub_100015ED4((dispatch_queue_t *)a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v2 = v4;
    if (v4)
      v5 = v4;
    else
      *(_BYTE *)(a1 + 25) = 1;

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id *sub_100015ED4(dispatch_queue_t *a1)
{
  id *v1;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  unsigned int v19;
  void *v20;
  unsigned int v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;
  id v43;
  _QWORD v44[2];
  _QWORD v45[2];
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  unsigned int v49;
  __int16 v50;
  unsigned int v51;
  __int16 v52;
  unsigned int v53;
  __int16 v54;
  int v55;

  v1 = (id *)a1;
  if (a1)
  {
    dispatch_assert_queue_V2(a1[4]);
    if (v1[2])
      return (id *)0;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("/System/Library/SESStorage/SESModel.momd")));
    v5 = objc_msgSend(objc_alloc((Class)NSManagedObjectModel), "initWithContentsOfURL:", v3);
    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
      v7 = v1[1];
      v43 = 0;
      objc_msgSend(v6, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v7, 1, 0, &v43);
      v8 = v43;

      if (v8)
      {
        v11 = SESDefaultLogObject(v9, v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        v13 = SESCreateAndLogError(0, v12, SESErrorDomain, 0, CFSTR("Creating storage directory at path %@"));
        v1 = (id *)objc_claimAutoreleasedReturnValue(v13);
      }
      else
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[1], "stringByAppendingPathComponent:", CFSTR("SESStorageV001.sqlite")));
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v12));
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
        v19 = objc_msgSend(v18, "fileExistsAtPath:", v12);

        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
        v21 = objc_msgSend(v20, "isReadableFileAtPath:", v12);

        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
        v23 = objc_msgSend(v22, "isWritableFileAtPath:", v12);

        v24 = MKBDeviceUnlockedSinceBoot();
        v25 = v24;
        v27 = SESDefaultLogObject(v24, v26);
        v28 = objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138413314;
          v47 = v17;
          v48 = 1024;
          v49 = v19;
          v50 = 1024;
          v51 = v21;
          v52 = 1024;
          v53 = v23;
          v54 = 1024;
          v55 = v25;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "SESStorage URL: %@ exists %d R_OK %d W_OK %d USB %d", buf, 0x24u);
        }

        v30 = objc_msgSend(objc_alloc((Class)NSPersistentStoreCoordinator), "initWithManagedObjectModel:", v5);
        if (v30)
        {
          v44[0] = NSMigratePersistentStoresAutomaticallyOption;
          v44[1] = NSInferMappingModelAutomaticallyOption;
          v45[0] = &__kCFBooleanTrue;
          v45[1] = &__kCFBooleanTrue;
          v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v45, v44, 2));
          v42 = 0;
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "addPersistentStoreWithType:configuration:URL:options:error:", NSSQLiteStoreType, 0, v17, v31, &v42));
          v33 = v42;
          v8 = v33;
          if (!v32 || v33)
          {
            v39 = SESDefaultLogObject(v33, v34);
            v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
            v41 = SESCreateAndLogError(0, v40, SESErrorDomain, 0, CFSTR("Adding SQLite store %@"));
            v1 = (id *)objc_claimAutoreleasedReturnValue(v41);

          }
          else
          {
            v35 = objc_msgSend(objc_alloc((Class)NSManagedObjectContext), "initWithConcurrencyType:", 1);
            v36 = v1[2];
            v1[2] = v35;

            objc_msgSend(v1[2], "setPersistentStoreCoordinator:", v30);
            v1 = 0;
          }

        }
        else
        {
          v37 = SESDefaultLogObject(0, v29);
          v31 = (void *)objc_claimAutoreleasedReturnValue(v37);
          v38 = SESCreateAndLogError(0, v31, SESErrorDomain, 0, CFSTR("Creating coordinator with %@"));
          v1 = (id *)objc_claimAutoreleasedReturnValue(v38);
          v8 = 0;
        }

      }
    }
    else
    {
      v14 = SESDefaultLogObject(0, v4);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      v16 = SESCreateAndLogError(0, v15, SESErrorDomain, 0, CFSTR("Failed to get create model at %@"));
      v1 = (id *)objc_claimAutoreleasedReturnValue(v16);

    }
  }
  return v1;
}

id sub_1000162EC(uint64_t a1, void *a2, int a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _DWORD v17[2];

  v5 = a2;
  if (!a1)
    goto LABEL_5;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  if (!a3)
  {
    if (!*(_BYTE *)(a1 + 26))
      goto LABEL_6;
LABEL_5:
    v8 = 0;
    goto LABEL_13;
  }
  *(_BYTE *)(a1 + 26) = 0;
LABEL_6:
  v9 = SESDefaultLogObject(v6, v7);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v17[0] = 67109120;
    v17[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Begin initializing DB (forced %d)", (uint8_t *)v17, 8u);
  }

  v11 = sub_100015E70(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v11);
  if (!v8)
  {
    v12 = sub_100055FF4((void *)a1, (void *)a1, v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if (!v8)
    {
      v14 = SESDefaultLogObject(0, v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        LOWORD(v17[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "DB successfully reconciled", (uint8_t *)v17, 2u);
      }

      v8 = 0;
      *(_BYTE *)(a1 + 26) = 1;
    }
  }
LABEL_13:

  return v8;
}

void sub_1000164F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  NSObject *v21;
  uint64_t v22;
  id v23;
  uint8_t buf[4];
  void *v25;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Processing MFD notification", buf, 2u);
  }

  v5 = sub_100015ED4(*(dispatch_queue_t **)(a1 + 32));
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    v8 = (void *)v6;
    v9 = SESDefaultLogObject(v6, v7);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v25 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to initialize the DB context %@", buf, 0xCu);
    }
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 32);
    v23 = 0;
    v12 = sub_1000402BC(v11, &v23);
    v10 = objc_claimAutoreleasedReturnValue(v12);
    v13 = v23;
    v8 = v13;
    if (v13)
    {
      v15 = SESDefaultLogObject(v13, v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v25 = v8;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to list CA entities %@", buf, 0xCu);
      }

    }
    else
    {
      v17 = -[NSObject count](v10, "count");
      v18 = *(_QWORD *)(a1 + 32);
      if (v17)
      {
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_1000166E8;
        v20[3] = &unk_1003035B8;
        v10 = v10;
        v19 = *(_QWORD *)(a1 + 32);
        v21 = v10;
        v22 = v19;
        sub_1000168E4(v18, v20);
        *(_BYTE *)(*(_QWORD *)(a1 + 32) + 26) = 0;

      }
      else
      {
        *(_BYTE *)(v18 + 26) = 0;
      }
    }
  }

}

void sub_1000166E8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  id *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t buf[4];
  void *v25;
  _BYTE v26[128];

  v19 = a2;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v26, 16);
  if (v4)
  {
    v6 = v4;
    v7 = *(_QWORD *)v21;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v21 != v7)
          objc_enumerationMutation(v3);
        v9 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v8);
        v10 = SESDefaultLogObject(v4, v5);
        v11 = objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
          *(_DWORD *)buf = 138412290;
          v25 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Deleting CA %@", buf, 0xCu);

        }
        v4 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "deleteObject:", v9);
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v26, 16);
      v6 = v4;
    }
    while (v4);
  }

  v13 = sub_10002BA94((uint64_t)v19);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  v16 = (void *)v14;
  if (v14)
  {
    v17 = SESDefaultLogObject(v14, v15);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v25 = v16;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to commit changes %@", buf, 0xCu);
    }

    sub_10002BB14(v19);
  }

}

void sub_1000168E4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  _QWORD v5[5];
  id v6;

  v4 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
    *(_BYTE *)(a1 + 24) = 1;
    v3 = *(void **)(a1 + 16);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000169B4;
    v5[3] = &unk_1003032B0;
    v5[4] = a1;
    v6 = v4;
    objc_msgSend(v3, "performBlockAndWait:", v5);
    *(_BYTE *)(a1 + 24) = 0;

  }
}

dispatch_queue_t *sub_10001697C(dispatch_queue_t *result)
{
  uint64_t v1;

  if (result)
  {
    v1 = (uint64_t)result;
    dispatch_assert_queue_V2(result[4]);
    return (dispatch_queue_t *)sub_100015E70(v1);
  }
  return result;
}

void sub_1000169B4(uint64_t a1)
{
  uint64_t v1;
  SESDatabaseTransaction *v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = sub_10002B934((uint64_t)SESDatabaseTransaction, *(void **)(a1 + 32), *(void **)(*(_QWORD *)(a1 + 32) + 16));
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v3);

}

void sub_100016A08(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  _QWORD v5[5];
  id v6;

  v4 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
    v3 = *(void **)(a1 + 16);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100016A94;
    v5[3] = &unk_1003032B0;
    v5[4] = a1;
    v6 = v4;
    objc_msgSend(v3, "performBlockAndWait:", v5);

  }
}

uint64_t sub_100016A94(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
}

uint64_t sub_100016AA8(uint64_t result)
{
  if (result)
    return *(_BYTE *)(result + 25) & 1;
  return result;
}

uint64_t sub_100016AB8(uint64_t result)
{
  if (result)
    return *(_BYTE *)(result + 26) & 1;
  return result;
}

uint64_t sub_100016AC8(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 32);
  return result;
}

void sub_100016B64(id a1)
{
  SESProximityChip *v1;
  void *v2;

  v1 = objc_opt_new(SESProximityChip);
  v2 = (void *)qword_10034BAE8;
  qword_10034BAE8 = (uint64_t)v1;

}

void sub_100016CE8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100016CFC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "cacheProximityChipData");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100016E84(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id sub_100016FB4(uint64_t a1, _QWORD *a2)
{
  id v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  if (!a1)
    return 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = sub_1000170D0;
  v16 = sub_1000170E0;
  v17 = 0;
  v6 = 0;
  v7 = &v6;
  v8 = 0x3032000000;
  v9 = sub_1000170D0;
  v10 = sub_1000170E0;
  v11 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000170E8;
  v5[3] = &unk_100303600;
  v5[4] = &v6;
  v5[5] = &v12;
  sub_100016A08(a1, v5);
  if (a2)
    *a2 = objc_retainAutorelease((id)v13[5]);
  v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);

  _Block_object_dispose(&v12, 8);
  return v3;
}

void sub_1000170AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000170D0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000170E0(uint64_t a1)
{

}

void sub_1000170E8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id obj;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[Invitation fetchRequest](Invitation, "fetchRequest"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v5 + 40);
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &obj));

  objc_storeStrong((id *)(v5 + 40), obj);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

id sub_10001718C(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];
  id v14;

  v5 = a2;
  if (a1)
  {
    v6 = sub_100016FB4(a1, a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    if (*a3)
    {
      v8 = 0;
    }
    else
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_100017270;
      v13[3] = &unk_100303628;
      v14 = v5;
      v9 = Filter(v7, v13);
      v10 = objc_claimAutoreleasedReturnValue(v9);

      v11 = Transform(v10, &stru_100303668);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v11);

      v7 = (void *)v10;
    }

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

id sub_100017270(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "clientName"));
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

id sub_1000172B0(id a1, Invitation *a2)
{
  return -[Invitation data](a2, "data");
}

id sub_1000172B8(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void **v16;
  uint64_t v17;
  id (*v18)(uint64_t, void *);
  void *v19;
  id v20;
  id v21;

  v7 = a2;
  v8 = a3;
  if (a1)
  {
    v9 = sub_100016FB4(a1, a4);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if (*a4)
    {
      v11 = 0;
    }
    else
    {
      v16 = _NSConcreteStackBlock;
      v17 = 3221225472;
      v18 = sub_1000173C4;
      v19 = &unk_100303690;
      v20 = v8;
      v21 = v7;
      v12 = Find(v10, &v16);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v14 = v13;
      if (v13)
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "data", v16, v17, v18, v19, v20));
      else
        v11 = 0;

    }
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

id sub_1000173C4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "clientName"));
  if (objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32)))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
    v6 = objc_msgSend(v5, "isEqualToString:", *(_QWORD *)(a1 + 40));

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

id sub_10001743C(id a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD v23[4];
  id v24;
  id v25;
  _QWORD v26[5];
  id v27;
  id v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t);
  id v34;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    v29 = 0;
    v30 = &v29;
    v31 = 0x3032000000;
    v32 = sub_1000170D0;
    v33 = sub_1000170E0;
    v34 = 0;
    v28 = 0;
    v10 = sub_100016FB4((uint64_t)a1, &v28);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    objc_storeStrong(&v34, v28);
    v12 = (void *)v30[5];
    if (v12)
    {
      a1 = v12;
    }
    else
    {
      v26[0] = 0;
      v26[1] = v26;
      v26[2] = 0x3032000000;
      v26[3] = sub_1000170D0;
      v26[4] = sub_1000170E0;
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_10001766C;
      v23[3] = &unk_100303690;
      v13 = v9;
      v24 = v13;
      v14 = v7;
      v25 = v14;
      v15 = Find(v11, v23);
      v27 = (id)objc_claimAutoreleasedReturnValue(v15);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_1000176E4;
      v17[3] = &unk_1003036B8;
      v21 = v26;
      v18 = v14;
      v19 = v8;
      v20 = v13;
      v22 = &v29;
      sub_1000168E4((uint64_t)a1, v17);
      a1 = (id)v30[5];

      _Block_object_dispose(v26, 8);
    }

    _Block_object_dispose(&v29, 8);
  }

  return a1;
}

void sub_10001763C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 144), 8);
  _Unwind_Resume(a1);
}

id sub_10001766C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "clientName"));
  if (objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32)))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
    v6 = objc_msgSend(v5, "isEqualToString:", *(_QWORD *)(a1 + 40));

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1000176E4(_QWORD *a1, void *a2)
{
  id *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id obj;

  v3 = a2;
  v4 = *(void **)(*(_QWORD *)(a1[7] + 8) + 40);
  if (v4)
  {
    objc_msgSend(v4, "setData:", a1[5]);
  }
  else
  {
    v5 = sub_10002BA88((uint64_t)v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v7 = objc_claimAutoreleasedReturnValue(+[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:](NSEntityDescription, "insertNewObjectForEntityForName:inManagedObjectContext:", CFSTR("Invitation"), v6));
    v8 = *(_QWORD *)(a1[7] + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

    objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "setIdentifier:", a1[4]);
    objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "setData:", a1[5]);
    objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "setClientName:", a1[6]);
    v10 = *(void **)(*(_QWORD *)(a1[7] + 8) + 40);
    v11 = *(_QWORD *)(a1[8] + 8);
    obj = *(id *)(v11 + 40);
    LOBYTE(v6) = objc_msgSend(v10, "validateForInsert:", &obj);
    objc_storeStrong((id *)(v11 + 40), obj);
    if ((v6 & 1) == 0)
    {
      sub_10002BB14(v3);
      goto LABEL_6;
    }
  }
  v12 = sub_10002BA94((uint64_t)v3);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  v14 = *(_QWORD *)(a1[8] + 8);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v13;

LABEL_6:
}

id sub_100017818(id a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD v14[4];
  id v15;
  uint64_t *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id obj;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v21 = 0;
    v22 = &v21;
    v23 = 0x3032000000;
    v24 = sub_1000170D0;
    v25 = sub_1000170E0;
    v26 = 0;
    obj = 0;
    v7 = sub_100016FB4((uint64_t)a1, &obj);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    objc_storeStrong(&v26, obj);
    v9 = (void *)v22[5];
    if (v9)
    {
      a1 = v9;
    }
    else
    {
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_1000179D0;
      v17[3] = &unk_100303690;
      v18 = v6;
      v19 = v5;
      v10 = Find(v8, v17);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v12 = v11;
      if (v11)
      {
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_100017A48;
        v14[3] = &unk_1003036E0;
        v15 = v11;
        v16 = &v21;
        sub_1000168E4((uint64_t)a1, v14);
        a1 = (id)v22[5];

      }
      else
      {
        a1 = 0;
      }

    }
    _Block_object_dispose(&v21, 8);

  }
  return a1;
}

void sub_1000179B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000179D0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "clientName"));
  if (objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32)))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
    v6 = objc_msgSend(v5, "isEqualToString:", *(_QWORD *)(a1 + 40));

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_100017A48(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = a2;
  v4 = sub_10002BA88((uint64_t)v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v5, "deleteObject:", *(_QWORD *)(a1 + 32));

  v6 = sub_10002BA94((uint64_t)v3);
  v7 = objc_claimAutoreleasedReturnValue(v6);

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_100017BD8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "messageQueue"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100017CAC;
  v11[3] = &unk_100302B30;
  v12 = v6;
  v8 = *(id *)(a1 + 40);
  v14 = v5;
  v15 = v8;
  v13 = *(_QWORD *)(a1 + 32);
  v9 = v5;
  v10 = v6;
  dispatch_async(v7, v11);

}

void sub_100017CAC(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  if (*(_QWORD *)(a1 + 32))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "database"));
    v3 = sub_1000162EC((uint64_t)v2, *(void **)(a1 + 48), 0);
    v7 = (id)objc_claimAutoreleasedReturnValue(v3);

    v4 = *(_QWORD *)(a1 + 56);
    if (v7)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 16))(*(_QWORD *)(a1 + 56), 0, 0);
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 48);
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "database"));
      (*(void (**)(uint64_t, uint64_t, void *, _QWORD))(v4 + 16))(v4, v5, v6, 0);

    }
  }
}

void sub_100017ED8(uint64_t a1)
{
  void *v2;
  char v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "database"));
  v3 = sub_100016AA8((uint64_t)v2);

  if ((v3 & 1) != 0
    || (v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "database")),
        v5 = sub_100015E70((uint64_t)v4),
        v7 = (id)objc_claimAutoreleasedReturnValue(v5),
        v4,
        !v7))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "database"));
    (*(void (**)(uint64_t, id, _QWORD))(v6 + 16))(v6, v7, 0);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, id))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, v7);
  }

}

void sub_100017F88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  uint8_t buf[4];
  int v16;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "database"));
    *(_DWORD *)buf = 67109120;
    v16 = sub_100016AB8((uint64_t)v5);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%d", buf, 8u);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "database"));
  v7 = sub_100016AB8((uint64_t)v6);

  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 56);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "database"));
    (*(void (**)(uint64_t, void *, _QWORD))(v8 + 16))(v8, v9, 0);
  }
  else
  {
    v10 = *(void **)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000180EC;
    v13[3] = &unk_100303708;
    v12 = *(_QWORD *)(a1 + 48);
    v14 = *(id *)(a1 + 56);
    objc_msgSend(v10, "endPointServiceAvailableWithProxy:reason:reply:", v11, v12, v13);
    v9 = v14;
  }

}

uint64_t sub_1000180EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000181E4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "messageQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000182B0;
  block[3] = &unk_100303730;
  v12 = v6;
  v8 = *(id *)(a1 + 40);
  v13 = v5;
  v14 = v8;
  v9 = v5;
  v10 = v6;
  dispatch_async(v7, block);

}

void sub_1000182B0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = a1[6];
  if (a1[4])
  {
    v4 = SESDefaultLogObject(a1, a2, a3);
    v7 = (id)objc_claimAutoreleasedReturnValue(v4);
    v5 = SESCreateAndLogError(0, v7, SESErrorDomain, 2, CFSTR("Failed to get SE"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, _QWORD, void *))(v3 + 16))(v3, 0, v6);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v3 + 16))(a1[6], a1[5], 0);
  }
}

void sub_1000184DC(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    v10 = v9;
    (*(void (**)(void))(a1[7] + 16))();
  }
  else
  {
    v11 = (void *)a1[4];
    v12 = a1[5];
    v13 = a1[6];
    v16 = 0;
    v17 = 0;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "_getEndPointAndValidateAccess:identifier:clientInfo:outEndPointEntity:outEndPoint:", v8, v12, v13, &v17, &v16));
    v14 = v17;
    v15 = v16;
    (*(void (**)(void))(a1[7] + 16))();

  }
}

void sub_100018728(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = v6;
    (*(void (**)(void))(a1[7] + 16))();
  }
  else
  {
    v8 = (void *)a1[4];
    v9 = a1[5];
    v10 = a1[6];
    v13 = 0;
    v14 = 0;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_getEndPointAndValidateAccess:identifier:clientInfo:outEndPointEntity:outEndPoint:", v5, v9, v10, &v14, &v13));
    v11 = v14;
    v12 = v13;
    (*(void (**)(void))(a1[7] + 16))();

  }
}

uint64_t sub_100018A10(uint64_t *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  id v8;
  void *v9;
  unsigned __int8 v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  id v17;
  void *v18;

  v3 = a2;
  v4 = sub_10003ADE0(a1[4], v3, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  v7 = a1 + 5;
  v8 = objc_msgSend(v6, "isEqualToString:", a1[5]);

  if ((_DWORD)v8 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
    sub_100277518(a1 + 5, (uint64_t)a1);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  v10 = objc_msgSend(v9, "isEqualToString:", *v7);
  if ((v10 & 1) == 0)
  {
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "publicKeyIdentifier"));
    v7 = (_QWORD *)objc_claimAutoreleasedReturnValue(+[NSData dataWithHexString:](NSData, "dataWithHexString:", *v7));
    if ((objc_msgSend(v8, "isEqualToData:", v7) & 1) != 0)
    {
      v14 = a1[6];
      v11 = (id *)(a1 + 6);
      if ((sub_1000340B0(v14) & 1) == 0)
      {
LABEL_10:
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "clientName"));
        v17 = sub_10003407C(*v11, v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
        v13 = (uint64_t)objc_msgSend(v15, "isEqualToString:", v18);

        if ((v10 & 1) != 0)
          goto LABEL_14;
        goto LABEL_13;
      }
      v13 = 1;
    }
    else
    {
      v13 = 0;
    }
LABEL_13:

    goto LABEL_14;
  }
  v12 = a1[6];
  v11 = (id *)(a1 + 6);
  if ((sub_1000340B0(v12) & 1) == 0)
    goto LABEL_10;
  v13 = 1;
LABEL_14:

  return v13;
}

void sub_100018D3C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[SESServer(SEEndPointXPC) preWarm:reply:]_block_invoke"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100018E24;
  v9[3] = &unk_1003037F0;
  v14 = *(id *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(a1 + 40);
  v10 = v3;
  v11 = v6;
  v12 = v7;
  v13 = *(id *)(a1 + 48);
  v8 = v3;
  objc_msgSend(v4, "endPointServiceAvailable:reply:", v5, v9);

}

void sub_100018E24(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  id v20;
  uint64_t v21;
  void (*v22)(void);
  void *v23;
  id v24;
  id v25;
  const char *v26;
  id v27;
  NSObject *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint8_t buf[4];
  unsigned int v36;

  v6 = a2;
  v7 = a4;
  if (!v7)
  {
    v15 = objc_msgSend(*(id *)(a1 + 32), "isSupported");
    v16 = v15;
    v18 = SESDefaultLogObject(v15, v17);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      v36 = v16;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Sunsprite is to be SLAM'd %d", buf, 8u);
    }

    buf[0] = 0;
    v20 = sub_100012044(v6, v16 | 8, buf, *(void **)(a1 + 32));
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (!v21)
    {
      if (buf[0])
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "database"));
        v24 = sub_1000162EC((uint64_t)v23, v6, 1);
        v9 = (id)objc_claimAutoreleasedReturnValue(v24);

        if (v9)
          goto LABEL_7;
      }
      v25 = sub_10004C020(v6);
      v21 = objc_claimAutoreleasedReturnValue(v25);
      if (!v21)
      {
        if (!v16)
        {
LABEL_16:
          v9 = *(id *)(a1 + 48);
          if (!v9)
          {
            v22 = *(void (**)(void))(*(_QWORD *)(a1 + 64) + 16);
            goto LABEL_8;
          }
          v29 = *(void **)(a1 + 40);
          v30 = sub_10003407C(*(id *)(a1 + 56), v26);
          v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "database"));
          v34 = 0;
          v33 = objc_msgSend(v29, "_ensureCAExistsAndValid:clientName:secureElement:database:forEndPointType:error:", v9, v31, v6, v32, 1, &v34);
          v9 = v34;

LABEL_7:
          v22 = *(void (**)(void))(*(_QWORD *)(a1 + 64) + 16);
LABEL_8:
          v22();
          goto LABEL_9;
        }
        v27 = sub_100014404(v6, 1, *(void **)(a1 + 32));
        v21 = objc_claimAutoreleasedReturnValue(v27);
        if (!v21)
        {
          v28 = objc_claimAutoreleasedReturnValue(+[DSK queue](_TtC10seserviced3DSK, "queue"));
          dispatch_async(v28, &stru_1003037C8);

          goto LABEL_16;
        }
      }
    }
    v9 = (id)v21;
    goto LABEL_7;
  }
  v9 = v7;
  v10 = *(_QWORD *)(a1 + 64);
  v11 = SESDefaultLogObject(v7, v8);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v13 = SESCreateAndLogError(0, v12, SESErrorDomain, objc_msgSend(v9, "code"), CFSTR("While prewarming"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v14);

LABEL_9:
}

void sub_1000190A0(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[DSK shared](_TtC10seserviced3DSK, "shared"));
  objc_msgSend(v1, "startWithModule:", 0);

}

void sub_100019280(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = v6;
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v18 = 0;
    v8 = sub_1000402BC((uint64_t)v5, &v18);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v7 = v18;
    if (v7)
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }
    else
    {
      if ((sub_1000340B0(*(_QWORD *)(a1 + 32)) & 1) == 0)
      {
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        v16[2] = sub_1000193FC;
        v16[3] = &unk_100303840;
        v17 = *(id *)(a1 + 32);
        v10 = Filter(v9, v16);
        v11 = objc_claimAutoreleasedReturnValue(v10);

        v9 = (void *)v11;
      }
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_10001945C;
      v14[3] = &unk_100303868;
      v15 = v5;
      v12 = TransformIf(v9, v14);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

    }
  }

}

id sub_1000193FC(uint64_t a1, void *a2)
{
  void *v3;
  const char *v4;
  id v5;
  void *v6;
  id v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "clientName"));
  v5 = sub_10003407C(*(id *)(a1 + 32), v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = objc_msgSend(v3, "isEqualToString:", v6);

  return v7;
}

id sub_10001945C(uint64_t a1, void *a2)
{
  return sub_100040628(*(_QWORD *)(a1 + 32), a2, 0);
}

void sub_100019A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100019AD0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100019AE0(uint64_t a1)
{

}

void sub_100019AE8(uint64_t a1, void *a2)
{
  id *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  const char *v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id obj;
  _QWORD v62[2];
  void *v63;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = *(void **)(a1 + 48);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  obj = *(id *)(v7 + 40);
  v8 = sub_100040A34((uint64_t)v3, v4, v5, v6, &obj);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  objc_storeStrong((id *)(v7 + 40), obj);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40))
    goto LABEL_3;
  v12 = *(void **)(a1 + 56);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "instance"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "identifier"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "hexStringAsData"));
  v16 = *(void **)(a1 + 32);
  v17 = *(void **)(a1 + 64);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v60 = *(id *)(v18 + 40);
  v19 = sub_100042DEC(v12, v15, v16, v17, &v60);
  v20 = objc_claimAutoreleasedReturnValue(v19);
  objc_storeStrong((id *)(v18 + 40), v60);
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  v22 = *(void **)(v21 + 40);
  *(_QWORD *)(v21 + 40) = v20;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40))
    goto LABEL_3;
  if ((unint64_t)(*(_QWORD *)(a1 + 96) - 3) > 1)
  {
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[SEABAAManager sharedManager](SEABAAManager, "sharedManager"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "secureElementAttestation"));
    v30 = sub_10005066C(*(id *)(a1 + 56), v29);
    v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "casdCertificate"));
    v33 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v58 = *(id *)(v33 + 40);
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "PerformSEABAAWithAttestation:casdCertificate:nonce:OIDs:validityInterval:error:", v28, v32, 0, 0, 0, &v58));
    objc_storeStrong((id *)(v33 + 40), v58);

    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40))
    {
      v37 = *(_QWORD *)(a1 + 96);
      if (v37 == 5 || v37 == 2)
      {
        v41 = sub_1000117D0((uint64_t)v34);
        v39 = (void *)objc_claimAutoreleasedReturnValue(v41);
        v62[0] = v39;
        v42 = sub_1000117DC((uint64_t)v34);
        v40 = (void *)objc_claimAutoreleasedReturnValue(v42);
        v62[1] = v40;
        v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v62, 2));
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "setCertificates:", v43);

      }
      else
      {
        if (v37 != 1)
        {
          v51 = SESDefaultLogObject(v35, v36);
          v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
          v53 = SESCreateAndLogError(0, v52, SESErrorDomain, 0, CFSTR("Impossible (%d)"));
          v54 = objc_claimAutoreleasedReturnValue(v53);
          v55 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
          v56 = *(void **)(v55 + 40);
          *(_QWORD *)(v55 + 40) = v54;

          goto LABEL_17;
        }
        v38 = sub_1000117DC((uint64_t)v34);
        v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
        v63 = v39;
        v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v63, 1));
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "setCertificates:", v40);
      }

      v44 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
      v45 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      v57 = *(id *)(v45 + 40);
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "encodeWithError:", &v57));
      objc_storeStrong((id *)(v45 + 40), v57);
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "setEndPointCAData:", v46);

      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40))
      {
        v47 = sub_10002BA94((uint64_t)v3);
        v48 = objc_claimAutoreleasedReturnValue(v47);
        v49 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
        v50 = *(void **)(v49 + 40);
        *(_QWORD *)(v49 + 40) = v48;

LABEL_18:
        goto LABEL_4;
      }
    }
LABEL_17:
    sub_10002BB14(v3);
    goto LABEL_18;
  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "setCertificates:", &__NSArray0__struct);
  v23 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v59 = *(id *)(v24 + 40);
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "encodeWithError:", &v59));
  objc_storeStrong((id *)(v24 + 40), v59);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "setEndPointCAData:", v25);

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40))
  {
    v26 = sub_10002BA94((uint64_t)v3);
    goto LABEL_4;
  }
LABEL_3:
  sub_10002BB14(v3);
LABEL_4:

}

void sub_10001A16C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  const char *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  id v22;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    v11 = v9;
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    v12 = *(void **)(a1 + 32);
    v13 = sub_10003407C(*(id *)(a1 + 40), v10);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v15 = *(_QWORD *)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    v22 = 0;
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_createEndPointCA:database:clientName:identifier:subjectIdentifier:forEndPointType:error:", v7, v8, v14, v15, v16, 1, &v22));
    v11 = v22;

    if (v11)
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    }
    else
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "database"));
      v21 = 0;
      v19 = sub_100040628((uint64_t)v18, v17, &v21);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      v11 = v21;

      (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    }

  }
}

void sub_10001A4B4(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void (**v18)(id, void *);
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  id v28;
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  id v34[2];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    v10 = v9;
    (*((void (**)(void))a1[6] + 2))();
  }
  else
  {
    v34[0] = 0;
    v11 = sub_1000402BC((uint64_t)v8, v34);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v10 = v34[0];
    if (v10)
    {
      (*((void (**)(void))a1[6] + 2))();
    }
    else
    {
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472;
      v31[2] = sub_10001A6D4;
      v31[3] = &unk_1003038E0;
      v32 = a1[4];
      v33 = a1[5];
      v13 = Find(v12, v31);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      v16 = v14;
      if (v14)
      {
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_10001A780;
        v26[3] = &unk_100303908;
        v27 = v14;
        v30 = a1[6];
        v28 = v7;
        v29 = a1[4];
        sub_1000168E4((uint64_t)v8, v26);

        v17 = v27;
      }
      else
      {
        v18 = (void (**)(id, void *))a1[6];
        v19 = SESDefaultLogObject(0, v15);
        v17 = (void *)objc_claimAutoreleasedReturnValue(v19);
        v20 = SESErrorDomain;
        v22 = sub_10003407C(a1[5], v21);
        v25 = (void *)objc_claimAutoreleasedReturnValue(v22);
        v23 = SESCreateAndLogError(0, v17, v20, 4, CFSTR("Could not find CA with identifier %@ for client %@"));
        v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        v18[2](v18, v24);

      }
    }

  }
}

uint64_t sub_10001A6D4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  id v8;
  void *v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  if (objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32)))
  {
    if ((sub_1000340B0(*(_QWORD *)(a1 + 40)) & 1) != 0)
    {
      v5 = 1;
    }
    else
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "clientName"));
      v8 = sub_10003407C(*(id *)(a1 + 40), v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v5 = (uint64_t)objc_msgSend(v6, "isEqualToString:", v9);

    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_10001A780(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id *v20;

  v20 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "endPoints"));
  v4 = objc_msgSend(v3, "count");

  if (v4)
  {
    v5 = sub_10002BB14(v20);
    v6 = *(_QWORD *)(a1 + 56);
    v8 = SESDefaultLogObject(v5, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = SESCreateAndLogError(0, v9, SESErrorDomain, 6, CFSTR("Cannot delete a CA with dangling EndPoints"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v11);

  }
  else
  {
    v12 = sub_10002BA88((uint64_t)v20);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    objc_msgSend(v13, "deleteObject:", *(_QWORD *)(a1 + 32));

    v14 = *(void **)(a1 + 40);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "instance"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "identifier"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "hexStringAsData"));
    v18 = sub_1000432D0(v14, v17, *(void **)(a1 + 48));
    v9 = (void *)objc_claimAutoreleasedReturnValue(v18);

    if (v9)
    {
      sub_10002BB14(v20);
    }
    else
    {
      v19 = sub_10002BA94((uint64_t)v20);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v19);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_10001AA54(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD v20[4];
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;
  uint8_t buf[4];
  unsigned int v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  unsigned int v30;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = v6;
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v24 = 0;
    v8 = sub_10003A9E0((uint64_t)v5, &v24);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v7 = v24;
    if (v7)
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }
    else
    {
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_10001AC7C;
      v22[3] = &unk_100303958;
      v23 = *(id *)(a1 + 32);
      v10 = Filter(v9, v22);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_10001ACFC;
      v20[3] = &unk_100303980;
      v21 = v5;
      v12 = TransformIf(v11, v20);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v15 = SESDefaultLogObject(v13, v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        v17 = objc_msgSend(v9, "count");
        v18 = objc_msgSend(v11, "count");
        v19 = objc_msgSend(v13, "count");
        *(_DWORD *)buf = 67109632;
        v26 = v17;
        v27 = 1024;
        v28 = v18;
        v29 = 1024;
        v30 = v19;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Got %d entities, %d filtered, %d transformed", buf, 0x14u);
      }

      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }

  }
}

uint64_t sub_10001AC7C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  id v7;
  void *v8;

  v3 = a2;
  if ((sub_1000340B0(*(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "clientName"));
    v7 = sub_10003407C(*(id *)(a1 + 32), v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v4 = (uint64_t)objc_msgSend(v5, "isEqualToString:", v8);

  }
  return v4;
}

id sub_10001ACFC(uint64_t a1, void *a2)
{
  return sub_10003ADE0(*(_QWORD *)(a1 + 32), a2, 0);
}

void sub_10001AE6C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  _BOOL4 v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  uint8_t buf[4];
  id v33;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    v10 = v9;
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v31 = 0;
    v11 = sub_10003A9E0((uint64_t)v8, &v31);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v13 = v31;
    v10 = v13;
    if (v13 || !v12)
    {
      v20 = *(_QWORD *)(a1 + 32);
      v21 = SESEnsureError(v13);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      (*(void (**)(uint64_t, void *))(v20 + 16))(v20, v22);

    }
    else
    {
      v14 = objc_msgSend(v12, "count");
      v16 = SESDefaultLogObject(v14, v15);
      v17 = objc_claimAutoreleasedReturnValue(v16);
      v18 = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
      if (v14)
      {
        if (v18)
        {
          v19 = objc_msgSend(v12, "count");
          *(_DWORD *)buf = 134217984;
          v33 = v19;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%lu endpoints found, skipping cleanup", buf, 0xCu);
        }

        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
        v10 = 0;
      }
      else
      {
        if (v18)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "No endpoints found, deleting unused Applets", buf, 2u);
        }

        v23 = sub_100011DAC(v7, (uint64_t)"SLAMDeleteCopernicusAndSunsprite");
        v24 = objc_claimAutoreleasedReturnValue(v23);
        v10 = (void *)v24;
        if (v24)
        {
          v26 = SESDefaultLogObject(v24, v25);
          v27 = objc_claimAutoreleasedReturnValue(v26);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v33 = v10;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Failed to delete applets %@", buf, 0xCu);
          }

        }
        v28 = sub_1000162EC((uint64_t)v8, v7, 1);
        v29 = sub_10005B394((uint64_t)SESDebugServer);
        v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
        sub_10005C280(v30, v7);

        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      }
    }

  }
}

void sub_10001BAC8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  const char *v28;
  id v29;
  void *v30;
  _BOOL4 v31;
  const char *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  id v39;
  void *v40;
  char *v41;
  uint64_t v42;
  NSObject *v43;
  const char *v44;
  id v45;
  void *v46;
  void *v47;
  const char *v48;
  id v49;
  void *v50;
  id *v51;
  uint64_t v52;
  uint64_t v53;
  id *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  SESConfigDCK *v58;
  id v59;
  void *v60;
  _BOOL4 v61;
  const char *v62;
  id v63;
  void *v64;
  id v65;
  id *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  id v73;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  SESConfigDCK *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  void *v96;
  void *v97;
  void *v98;
  id v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  void *v110;
  uint64_t v111;
  void *v112;
  void *v113;
  uint64_t v114;
  void *v115;
  void *v116;
  SESConfigDCK *v117;
  id v118;
  _QWORD v119[4];
  id v120;
  id v121;
  id v122;
  SESConfigDCK *v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  id v138;
  uint64_t *v139;
  _BYTE *v140;
  id v141;
  id v142;
  id v143;
  id v144;
  id obj;
  uint64_t v146;
  id *v147;
  uint64_t v148;
  uint64_t (*v149)(uint64_t, uint64_t);
  void (*v150)(uint64_t);
  id v151;
  uint8_t v152[4];
  void *v153;
  _BYTE buf[24];
  uint64_t (*v155)(uint64_t, uint64_t);
  void (*v156)(uint64_t);
  id v157;
  _QWORD v158[2];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!v9)
  {
    v146 = 0;
    v147 = (id *)&v146;
    v148 = 0x3032000000;
    v149 = sub_100019AD0;
    v150 = sub_100019AE0;
    v151 = 0;
    obj = 0;
    v10 = sub_100055A58((uint64_t)v8, CFSTR("A000000809434343444B417631"), &obj);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    objc_storeStrong(&v151, obj);
    v14 = v147 + 5;
    if (v147[5])
      v15 = 1;
    else
      v15 = v11 == 0;
    if (v15)
    {
      v16 = *(_QWORD *)(a1 + 160);
      v17 = SESDefaultLogObject(v12, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v18 = SESCreateAndLogError(0, v14, SESErrorDomain, 0, CFSTR("Couldn't get AirInstanceEntity %@"));
      v19 = (id)objc_claimAutoreleasedReturnValue(v18);
      (*(void (**)(uint64_t, _QWORD, id))(v16 + 16))(v16, 0, v19);
LABEL_51:

LABEL_52:
      _Block_object_dispose(&v146, 8);

      goto LABEL_53;
    }
    v20 = *(void **)(a1 + 32);
    v21 = *(_QWORD *)(a1 + 40);
    v22 = *(_QWORD *)(a1 + 48);
    v144 = 0;
    v23 = objc_msgSend(v20, "_existsDuplicateInDatabase:airInstanceEntity:withIdentifier:orReaderIdentifier:outError:", v8, v11, v21, v22, &v144);
    objc_storeStrong((id *)v14, v144);
    v26 = v147[5];
    if (v26 || v23)
    {
      v34 = *(_QWORD *)(a1 + 160);
      v19 = v147[5];
      if (!v26)
      {
        v35 = SESDefaultLogObject(v24, v25);
        v14 = (void *)objc_claimAutoreleasedReturnValue(v35);
        v36 = SESCreateAndLogError(0, v14, SESErrorDomain, 3, CFSTR("EndPoint for this identifier or readerIdentifier already exists"));
        v19 = (id)objc_claimAutoreleasedReturnValue(v36);
      }
      (*(void (**)(uint64_t, _QWORD, id))(v34 + 16))(v34, 0, v19);
      if (v26)
        goto LABEL_52;
      goto LABEL_51;
    }
    v27 = *(id *)(a1 + 56);
    v14 = v27;
    if (!v27)
    {
      v29 = sub_10003407C(*(id *)(a1 + 64), v28);
      v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      v31 = (unint64_t)objc_msgSend(v30, "length") < 0x1F;

      v33 = sub_10003407C(*(id *)(a1 + 64), v32);
      if (v31)
      {
        v27 = (id)objc_claimAutoreleasedReturnValue(v33);
        v14 = v27;
      }
      else
      {
        v37 = (void *)objc_claimAutoreleasedReturnValue(v33);
        v39 = sub_10003407C(*(id *)(a1 + 64), v38);
        v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
        v41 = (char *)objc_msgSend(v40, "length");

        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "substringFromIndex:", v41 - 30));
      }
    }
    v42 = SESDefaultLogObject(v27, v28);
    v43 = objc_claimAutoreleasedReturnValue(v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      v45 = sub_10003407C(*(id *)(a1 + 64), v44);
      v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v46;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "Resolved authorityIdentifier %@ for client %@", buf, 0x16u);

    }
    v47 = *(void **)(a1 + 32);
    v49 = sub_10003407C(*(id *)(a1 + 64), v48);
    v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
    v51 = v147;
    v143 = v147[5];
    v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "_ensureCAExistsAndValid:clientName:secureElement:database:forEndPointType:error:", v14, v50, v7, v8, 1, &v143));
    objc_storeStrong(v51 + 5, v143);

    v54 = v147 + 5;
    if (v147[5])
    {
      v55 = *(_QWORD *)(a1 + 160);
      v56 = SESDefaultLogObject(v52, v53);
      v118 = (id)objc_claimAutoreleasedReturnValue(v56);
      v57 = SESCreateAndLogError(0, v118, SESErrorDomain, 0, CFSTR("While ensuring CA %@"));
      v58 = (SESConfigDCK *)objc_claimAutoreleasedReturnValue(v57);
      (*(void (**)(uint64_t, _QWORD, SESConfigDCK *))(v55 + 16))(v55, 0, v58);
LABEL_49:

      goto LABEL_50;
    }
    v142 = 0;
    v59 = sub_100040628((uint64_t)v8, v19, &v142);
    v118 = (id)objc_claimAutoreleasedReturnValue(v59);
    objc_storeStrong(v54, v142);
    if (!v118 || v147[5])
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 160) + 16))();
LABEL_50:

      goto LABEL_51;
    }
    v117 = objc_opt_new(SESConfigDCK);
    v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v118, "certificates"));
    v61 = objc_msgSend(v60, "count") == (id)1;

    if (v61)
    {
      v114 = *(_QWORD *)(a1 + 72);
      v63 = sub_10005066C(v7, v62);
      v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
      v65 = objc_msgSend(v64, "isProd");
      v66 = v147;
      v141 = v147[5];
      v115 = (void *)objc_claimAutoreleasedReturnValue(-[SESConfigDCK getExternalCACertificateFor:environment:prodSE:error:](v117, "getExternalCACertificateFor:environment:prodSE:error:", v14, v114, v65, &v141));
      objc_storeStrong(v66 + 5, v141);

      if (v147[5])
      {
        v69 = *(_QWORD *)(a1 + 160);
        v70 = SESDefaultLogObject(v67, v68);
        v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
        v111 = SESErrorDomain;
        v73 = sub_10005066C(v7, v72);
        v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
        objc_msgSend(v74, "isProd");
        v75 = SESCreateAndLogError(0, v71, v111, 0, CFSTR("Missing ExternalCA for brand %@ environment %@ productionDevice %d"));
        v76 = (void *)objc_claimAutoreleasedReturnValue(v75);
        (*(void (**)(uint64_t, _QWORD, void *))(v69 + 16))(v69, 0, v76);

LABEL_48:
        v58 = v117;
        goto LABEL_49;
      }
      v158[0] = v115;
      v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v118, "certificates"));
      v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "objectAtIndexedSubscript:", 0));
      v158[1] = v77;
      v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v158, 2));
      objc_msgSend(v118, "setCertificates:", v78);

      v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "database"));
      v80 = sub_1000406EC(v79, v19, v118);
      v113 = (void *)objc_claimAutoreleasedReturnValue(v80);

      if (v113)
      {
        v83 = *(_QWORD *)(a1 + 160);
        v84 = SESDefaultLogObject(v81, v82);
        v85 = (void *)objc_claimAutoreleasedReturnValue(v84);
        v86 = SESCreateAndLogError(0, v85, SESErrorDomain, 0, CFSTR("Failed to add ExternalCA to EndPointCA"));
        v87 = (void *)objc_claimAutoreleasedReturnValue(v86);
        (*(void (**)(uint64_t, _QWORD, void *))(v83 + 16))(v83, 0, v87);

        goto LABEL_48;
      }

    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v155 = sub_100019AD0;
    v156 = sub_100019AE0;
    v157 = 0;
    v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "database"));
    v119[0] = _NSConcreteStackBlock;
    v119[1] = 3221225472;
    v119[2] = sub_10001C5AC;
    v119[3] = &unk_1003039A8;
    v120 = *(id *)(a1 + 40);
    v121 = v19;
    v122 = *(id *)(a1 + 64);
    v139 = &v146;
    v89 = v117;
    v123 = v89;
    v124 = v14;
    v125 = *(id *)(a1 + 72);
    v126 = *(id *)(a1 + 80);
    v140 = buf;
    v90 = v7;
    v127 = v90;
    v118 = v118;
    v128 = v118;
    v129 = *(id *)(a1 + 88);
    v130 = *(id *)(a1 + 96);
    v131 = *(id *)(a1 + 48);
    v132 = *(id *)(a1 + 104);
    v133 = *(id *)(a1 + 112);
    v134 = *(id *)(a1 + 120);
    v135 = *(id *)(a1 + 128);
    v136 = *(id *)(a1 + 136);
    v137 = *(id *)(a1 + 144);
    v138 = *(id *)(a1 + 152);
    sub_1000168E4((uint64_t)v88, v119);
    v117 = v89;

    v93 = *(_QWORD *)&buf[8];
    if (!v147[5])
      goto LABEL_56;
    if (*(_QWORD *)(*(_QWORD *)&buf[8] + 40))
    {
      v94 = SESDefaultLogObject(v91, v92);
      v95 = objc_claimAutoreleasedReturnValue(v94);
      if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v152 = 0;
        _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_INFO, "Failure after creating EP on SE, cleaning it up", v152, 2u);
      }

      v96 = v90;
      v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "identifier"));
      v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v116, "hexStringAsData"));
      v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)&buf[8] + 40), "publicKeyIdentifier"));
      v99 = sub_100042AB0(v96, v97, v98);
      v100 = (void *)objc_claimAutoreleasedReturnValue(v99);

      if (v100)
      {
        v103 = SESDefaultLogObject(v101, v102);
        v104 = objc_claimAutoreleasedReturnValue(v103);
        if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v152 = 138412290;
          v153 = v100;
          _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_ERROR, "Failed to clean up EP   : %@", v152, 0xCu);
        }

      }
      v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)&buf[8] + 40), "deleteEndPointLongTermPrivacyKey"));

      if (v105)
      {
        v108 = SESDefaultLogObject(v106, v107);
        v109 = objc_claimAutoreleasedReturnValue(v108);
        if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v152 = 138412290;
          v153 = v105;
          _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_ERROR, "Failed to delete long term privacy key %@", v152, 0xCu);
        }

      }
      v110 = *(void **)(*(_QWORD *)&buf[8] + 40);
      *(_QWORD *)(*(_QWORD *)&buf[8] + 40) = 0;

      v93 = *(_QWORD *)&buf[8];
      if (!v147[5])
      {
LABEL_56:
        if (*(_QWORD *)(v93 + 40))
          +[EndpointStore insertWithEndpoint:](_TtC10seserviced13EndpointStore, "insertWithEndpoint:");
      }
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 160) + 16))();

    _Block_object_dispose(buf, 8);
    goto LABEL_48;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 160) + 16))();
LABEL_53:

}

void sub_10001C540(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Unwind_Resume(a1);
}

void sub_10001C5AC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  const char *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t CertificatePublicKey;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned __int8 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void *v67;
  void *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  void *v81;
  id v82;
  void *v83;
  uint64_t v84;
  id v85;
  void *v86;
  void *v87;
  unsigned __int8 v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  void *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  id v113;
  id v114;
  id v115;
  id v116[2];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "instance"));
  v8 = sub_10003407C(*(id *)(a1 + 48), v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8);
  v116[0] = *(id *)(v10 + 40);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stageEndPointEntityWithIdentifier:endPointCAEntity:airInstanceEntity:clientName:error:", v4, v5, v6, v9, v116));
  objc_storeStrong((id *)(v10 + 40), v116[0]);

  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8);
  v14 = *(_QWORD *)(v12 + 40);
  v13 = (id *)(v12 + 40);
  if (!v14)
  {
    v15 = *(void **)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 64);
    v17 = *(_QWORD *)(a1 + 72);
    v18 = *(_QWORD *)(a1 + 80);
    v115 = 0;
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "getEncryptionCertificateFor:environment:region:error:", v16, v17, v18, &v115));
    objc_storeStrong(v13, v115);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 40))
    {
      v22 = SESDefaultLogObject(v20, v21);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      v24 = SESCreateAndLogError(0, v23, SESErrorDomain, 4, CFSTR("Missing privacy encryption certificate for brand %@ environment %@ region %@"));
      v25 = objc_claimAutoreleasedReturnValue(v24);
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8);
      v27 = *(void **)(v26 + 40);
      *(_QWORD *)(v26 + 40) = v25;

LABEL_5:
      sub_10002BB14((id *)v3);
LABEL_12:

      goto LABEL_13;
    }
    CertificatePublicKey = getCertificatePublicKey(v19);
    v29 = (void *)objc_claimAutoreleasedReturnValue(CertificatePublicKey);
    objc_msgSend(v11, "setPrivacyEncryptionPK:", v29);

    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "privacyEncryptionPK"));
    if (!v30)
    {
      v47 = SESDefaultLogObject(v31, v32);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v47);
      v48 = SESErrorDomain;
      v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "base64"));
      v49 = SESCreateAndLogError(0, v23, v48, 0, CFSTR("Failed to extract PK from encryption cert %@"));
      v50 = objc_claimAutoreleasedReturnValue(v49);
      v51 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8);
      v52 = *(void **)(v51 + 40);
      *(_QWORD *)(v51 + 40) = v50;

      goto LABEL_5;
    }
    v33 = *(void **)(a1 + 56);
    v34 = *(_QWORD *)(a1 + 64);
    v35 = *(_QWORD *)(a1 + 72);
    v36 = *(_QWORD *)(a1 + 80);
    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8);
    v114 = *(id *)(v37 + 40);
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "getSignatureCertificateFor:environment:region:error:", v34, v35, v36, &v114));
    objc_storeStrong((id *)(v37 + 40), v114);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 40))
    {
      v41 = SESDefaultLogObject(v39, v40);
      v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
      v43 = SESCreateAndLogError(0, v42, SESErrorDomain, 4, CFSTR("Missing signature verification certificate for brand %@ environment %@ region %@"));
      v44 = objc_claimAutoreleasedReturnValue(v43);
      v45 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8);
      v46 = *(void **)(v45 + 40);
      *(_QWORD *)(v45 + 40) = v44;

    }
    else
    {
      v53 = getCertificatePublicKey(v38);
      v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
      objc_msgSend(v11, "setSignatureVerificationPK:", v54);

      v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "signatureVerificationPK"));
      if (v55)
      {
        v108 = v38;
        v110 = *(void **)(a1 + 88);
        v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "instance"));
        v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "identifier"));
        v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v111, "hexStringAsData"));
        v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 96), "subjectIdentifier"));
        v109 = *(void **)(a1 + 32);
        v60 = *(void **)(a1 + 104);
        v61 = objc_msgSend(*(id *)(a1 + 112), "opt1");
        v62 = objc_msgSend(*(id *)(a1 + 112), "opt2");
        v63 = objc_msgSend(*(id *)(a1 + 112), "optA");
        v64 = *(_OWORD *)(a1 + 120);
        v65 = *(_OWORD *)(a1 + 136);
        v66 = *(_OWORD *)(a1 + 152);
        v67 = *(void **)(a1 + 168);
        v68 = *(void **)(a1 + 176);
        v69 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8);
        v113 = *(id *)(v69 + 40);
        v70 = sub_100040CC8(v110, 1, v58, v59, v109, v60, v61, v62, v63, (void *)v64, *((void **)&v64 + 1), (void *)v65, *((void **)&v65 + 1), (void *)v66, *((void **)&v66 + 1), v67, v68, 0, 0,
                0,
                0,
                0,
                &v113);
        v71 = objc_claimAutoreleasedReturnValue(v70);
        objc_storeStrong((id *)(v69 + 40), v113);
        v72 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8);
        v73 = *(void **)(v72 + 40);
        *(_QWORD *)(v72 + 40) = v71;

        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 40)
          || !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 40))
        {
          sub_10002BB14((id *)v3);
          v38 = v108;
          goto LABEL_11;
        }
        v80 = objc_msgSend(*(id *)(a1 + 112), "nfcExpressOnlyInLPM");
        v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8)
                                                                           + 40), "configuration"));
        objc_msgSend(v81, "setNfcExpressOnlyInLPM:", v80);

        v82 = objc_msgSend(*(id *)(a1 + 112), "terminationNotPersisted");
        v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8)
                                                                           + 40), "configuration"));
        objc_msgSend(v83, "setTerminationNotPersisted:", v82);

        if (SESInternalVariant(v84))
        {
          v85 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
          v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "objectForKey:", CFSTR("debug.ursk.ttl.override")));
          v87 = v86;
          if (v86)
            v88 = objc_msgSend(v86, "unsignedIntValue");
          else
            v88 = 11;
          v38 = v108;

        }
        else
        {
          v88 = 11;
          v38 = v108;
        }
        v89 = *(void **)(a1 + 88);
        v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000809434343444B417631"), "hexStringAsData"));
        v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8)
                                                                           + 40), "publicKeyIdentifier"));
        v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v88));
        v93 = sub_100043C0C(v89, v90, v91, 0, 0, 0, 0, 0, 0, 0, 0, v92, 0);
        v94 = objc_claimAutoreleasedReturnValue(v93);
        v95 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8);
        v96 = *(void **)(v95 + 40);
        *(_QWORD *)(v95 + 40) = v94;

        if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 40))
        {
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 40), "setEnvironment:", *(_QWORD *)(a1 + 72));
          v97 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 40);
          v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 96), "certificates"));
          objc_msgSend(v97, "prependCertificateChain:", v98);

          v99 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stageEndPointEntityUpdates:fromEndPoint:", v11, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 40)));
          v100 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8);
          v101 = *(void **)(v100 + 40);
          *(_QWORD *)(v100 + 40) = v99;

          if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 40))
          {
            v102 = sub_10002BA94((uint64_t)v3);
            v103 = objc_claimAutoreleasedReturnValue(v102);
            v104 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8);
            v105 = *(void **)(v104 + 40);
            *(_QWORD *)(v104 + 40) = v103;

            goto LABEL_11;
          }
        }
LABEL_10:
        sub_10002BB14((id *)v3);
LABEL_11:

        goto LABEL_12;
      }
      v74 = SESDefaultLogObject(v56, v57);
      v42 = (void *)objc_claimAutoreleasedReturnValue(v74);
      v75 = SESErrorDomain;
      v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "base64"));
      v76 = SESCreateAndLogError(0, v42, v75, 0, CFSTR("Failed to extract PK from signature cert %@"));
      v77 = objc_claimAutoreleasedReturnValue(v76);
      v78 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8);
      v79 = *(void **)(v78 + 40);
      *(_QWORD *)(v78 + 40) = v77;

    }
    goto LABEL_10;
  }
  sub_10002BB14((id *)v3);
LABEL_13:

}

void sub_10001D3B8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  id v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  __int128 v25;
  uint64_t v26;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[SESServer(SEEndPointXPC) createHydraEndpointWithProxy:serverParams:reply:]_block_invoke"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10001D558;
  v12[3] = &unk_100303A20;
  v24 = *(id *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 32);
  v13 = v3;
  v14 = v7;
  v15 = *(id *)(a1 + 48);
  v16 = *(id *)(a1 + 56);
  v17 = *(id *)(a1 + 64);
  v18 = *(id *)(a1 + 72);
  v19 = *(id *)(a1 + 80);
  v20 = *(id *)(a1 + 88);
  v21 = *(id *)(a1 + 96);
  v22 = *(id *)(a1 + 104);
  v11 = *(_QWORD *)(a1 + 128);
  v23 = *(id *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)&v9 = v11;
  *((_QWORD *)&v9 + 1) = *(_QWORD *)(a1 + 136);
  v25 = v9;
  v26 = v8;
  v10 = v3;
  objc_msgSend(v4, "endPointServiceAvailableWithProxy:reason:reply:", v5, v6, v12);

}

void sub_10001D558(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  id *v15;
  id v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  uint64_t v20;
  id v21;
  void *v22;
  id *v23;
  id v24;
  id v25;
  id *v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _QWORD v39[4];
  id v40;
  id v41;
  id v42;
  id v43;
  __CFString *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t *v53;
  _QWORD *v54;
  __int128 v55;
  uint64_t v56;
  _QWORD v57[5];
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  id *v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t);
  void (*v66)(uint64_t);
  id v67;
  char v68[9];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 120) + 16))();
  }
  else
  {
    v68[0] = 0;
    v62 = 0;
    v63 = (id *)&v62;
    v64 = 0x3032000000;
    v65 = sub_100019AD0;
    v66 = sub_100019AE0;
    v10 = sub_100012044(v7, 4, v68, *(void **)(a1 + 32));
    v67 = (id)objc_claimAutoreleasedReturnValue(v10);
    if (v63[5]
      || v68[0]
      && (v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "database")),
          v12 = sub_1000162EC((uint64_t)v11, v7, 1),
          v13 = objc_claimAutoreleasedReturnValue(v12),
          v14 = v63[5],
          v63[5] = (id)v13,
          v14,
          v11,
          v63[5]))
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 120) + 16))();
    }
    else
    {
      v15 = v63;
      v61 = v63[5];
      v16 = sub_100055A58((uint64_t)v8, CFSTR("A00000085802010100000001"), &v61);
      v38 = (void *)objc_claimAutoreleasedReturnValue(v16);
      objc_storeStrong(v15 + 5, v61);
      if (v63[5] || !v38)
      {
        v32 = *(_QWORD *)(a1 + 120);
        v33 = SESDefaultLogObject(v17, v18);
        v24 = (id)objc_claimAutoreleasedReturnValue(v33);
        v34 = SESCreateAndLogError(0, v24, SESErrorDomain, 0, CFSTR("Couldn't get AirInstanceEntity %@"));
        v28 = (id)objc_claimAutoreleasedReturnValue(v34);
        (*(void (**)(uint64_t, _QWORD, id))(v32 + 16))(v32, 0, v28);
      }
      else
      {
        v19 = *(void **)(a1 + 40);
        v20 = *(_QWORD *)(a1 + 48);
        v21 = sub_10003407C(*(id *)(a1 + 56), v18);
        v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
        v23 = v63;
        v60 = v63[5];
        v24 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "_ensureCAExistsAndValid:clientName:secureElement:database:forEndPointType:error:", v20, v22, v7, v8, 2, &v60));
        objc_storeStrong(v23 + 5, v60);

        v26 = v63 + 5;
        v25 = v63[5];
        if (!v24 || v25)
        {
          v35 = *(_QWORD *)(a1 + 120);
          v36 = SESEnsureError(v25);
          v28 = (id)objc_claimAutoreleasedReturnValue(v36);
          (*(void (**)(uint64_t, _QWORD, id))(v35 + 16))(v35, 0, v28);
        }
        else
        {
          v59 = 0;
          v27 = sub_100040628((uint64_t)v8, v24, &v59);
          v28 = (id)objc_claimAutoreleasedReturnValue(v27);
          objc_storeStrong(v26, v59);
          if (!v28 || v63[5])
          {
            (*(void (**)(void))(*(_QWORD *)(a1 + 120) + 16))();
          }
          else
          {
            v57[0] = 0;
            v57[1] = v57;
            v57[2] = 0x3032000000;
            v57[3] = sub_100019AD0;
            v57[4] = sub_100019AE0;
            v58 = 0;
            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "database"));
            v39[0] = _NSConcreteStackBlock;
            v39[1] = 3221225472;
            v39[2] = sub_10001DA28;
            v39[3] = &unk_1003039F8;
            v40 = *(id *)(a1 + 64);
            v24 = v24;
            v41 = v24;
            v42 = *(id *)(a1 + 56);
            v53 = &v62;
            v54 = v57;
            v43 = v7;
            v44 = CFSTR("A00000085802010100000001");
            v45 = *(id *)(a1 + 48);
            v46 = *(id *)(a1 + 72);
            v47 = *(id *)(a1 + 80);
            v48 = *(id *)(a1 + 88);
            v49 = *(id *)(a1 + 96);
            v50 = *(id *)(a1 + 104);
            v37 = *(_QWORD *)(a1 + 128);
            v51 = *(id *)(a1 + 112);
            v30 = *(_QWORD *)(a1 + 144);
            *(_QWORD *)&v31 = v37;
            *((_QWORD *)&v31 + 1) = *(_QWORD *)(a1 + 136);
            v55 = v31;
            v56 = v30;
            v28 = v28;
            v52 = v28;
            sub_1000168E4((uint64_t)v29, v39);

            (*(void (**)(void))(*(_QWORD *)(a1 + 120) + 16))();
            _Block_object_dispose(v57, 8);

          }
        }
      }

    }
    _Block_object_dispose(&v62, 8);

  }
}

void sub_10001D9F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_10001DA28(uint64_t a1, void *a2)
{
  id *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  const char *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  int v29;
  int v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  int v36;
  int v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  const char *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  void *v75;
  void *v76;
  void *v77;
  id v78;
  void *v79;
  void *v80;
  unsigned __int8 v81;
  unsigned int v82;
  unsigned int v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  id *v88;
  void *v89;
  void *v90;
  uint8_t buf[2];
  _BYTE v92[3];
  _BYTE v93[3];
  id v94;
  id v95[2];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "instance"));
  v8 = sub_10003407C(*(id *)(a1 + 48), v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
  v95[0] = *(id *)(v10 + 40);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stageEndPointEntityWithIdentifier:endPointCAEntity:airInstanceEntity:clientName:error:", v4, v5, v6, v9, v95));
  objc_storeStrong((id *)(v10 + 40), v95[0]);

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40))
  {
    v86 = *(void **)(a1 + 56);
    v87 = v11;
    v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "hexStringAsData"));
    v84 = *(void **)(a1 + 72);
    v85 = *(void **)(a1 + 32);
    v83 = objc_msgSend(*(id *)(a1 + 80), "opt1");
    v82 = objc_msgSend(*(id *)(a1 + 80), "opt2");
    v81 = objc_msgSend(*(id *)(a1 + 80), "optA");
    v79 = *(void **)(a1 + 96);
    v80 = *(void **)(a1 + 88);
    v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 104)), "UTF8String"), objc_msgSend(*(id *)(a1 + 104), "length")));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 112)), "UTF8String"), objc_msgSend(*(id *)(a1 + 112), "length")));
    v13 = *(_DWORD *)(a1 + 152);
    if (v13)
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 152)));
    else
      v14 = 0;
    v15 = *(unsigned int *)(a1 + 156);
    v88 = v3;
    if ((_DWORD)v15)
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15));
    else
      v16 = 0;
    v17 = *(void **)(a1 + 120);
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 239));
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 239));
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
    v94 = *(id *)(v20 + 40);
    v21 = sub_100040CC8(v86, 2, v90, v84, v85, v85, v83, v82, v81, v80, v79, v89, v12, 0, 0, v14, v16, v17, v18,
            v19,
            1,
            0x10u,
            &v94);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    objc_storeStrong((id *)(v20 + 40), v94);
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8);
    v24 = *(void **)(v23 + 40);
    *(_QWORD *)(v23 + 40) = v22;

    if ((_DWORD)v15)
    v3 = v88;
    if (v13)

    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40)
      || !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 40))
    {
      sub_10002BB14(v88);
      v11 = v87;
      goto LABEL_31;
    }
    v25 = objc_msgSend(*(id *)(a1 + 80), "nfcExpressOnlyInLPM");
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 40), "configuration"));
    objc_msgSend(v26, "setNfcExpressOnlyInLPM:", v25);

    v27 = objc_msgSend(*(id *)(a1 + 80), "terminationNotPersisted");
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 40), "configuration"));
    objc_msgSend(v28, "setTerminationNotPersisted:", v27);

    v29 = *(_DWORD *)(a1 + 160);
    v11 = v87;
    if (v29)
    {
      v30 = *(_DWORD *)(a1 + 164);
      v93[0] = BYTE1(v30);
      v93[1] = v30;
      v93[2] = v29;
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v93, 3));
      v32 = *(unsigned __int16 *)(a1 + 160);
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8)
                                                                         + 40), "configuration"));
      objc_msgSend(v33, "setLengthPrivateMailBox:", v32);

      v34 = *(unsigned __int16 *)(a1 + 164);
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8)
                                                                         + 40), "configuration"));
      objc_msgSend(v35, "setOffsetPrivateMailBox:", v34);

    }
    else
    {
      v31 = 0;
    }
    v36 = *(_DWORD *)(a1 + 168);
    if (v36)
    {
      v37 = *(_DWORD *)(a1 + 172);
      v92[0] = BYTE1(v37);
      v92[1] = v37;
      v92[2] = v36;
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v92, 3));
      v39 = *(unsigned __int16 *)(a1 + 168);
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8)
                                                                         + 40), "configuration"));
      objc_msgSend(v40, "setLengthConfidentialMailBox:", v39);

      v41 = *(unsigned __int16 *)(a1 + 172);
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8)
                                                                         + 40), "configuration"));
      objc_msgSend(v42, "setOffsetConfidentialMailBox:", v41);

    }
    else
    {
      v38 = 0;
    }
    v43 = *(void **)(a1 + 56);
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "hexStringAsData"));
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 40), "publicKeyIdentifier"));
    v46 = sub_100043C0C(v43, v44, v45, v31, v38, 0, 0, 0, 0, 0, 0, 0, 0);
    v47 = objc_claimAutoreleasedReturnValue(v46);
    v48 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
    v49 = *(void **)(v48 + 40);
    *(_QWORD *)(v48 + 40) = v47;

    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40))
    {
      v52 = SESDefaultLogObject(v50, v51);
      v53 = objc_claimAutoreleasedReturnValue(v52);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        v54 = "Failed to set auth1 mailbox configuration on endpoint, cleanup endpoint from SE";
LABEL_28:
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, v54, buf, 2u);
      }
    }
    else
    {
      v55 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 40);
      v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 128), "certificates"));
      objc_msgSend(v55, "prependCertificateChain:", v56);

      v57 = objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "stageEndPointEntityUpdates:fromEndPoint:", v87, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 40)));
      v58 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
      v59 = *(void **)(v58 + 40);
      *(_QWORD *)(v58 + 40) = v57;

      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40))
      {
        v67 = sub_10002BA94((uint64_t)v88);
        v68 = objc_claimAutoreleasedReturnValue(v67);
        v69 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
        v70 = *(void **)(v69 + 40);
        *(_QWORD *)(v69 + 40) = v68;

        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40))
        {
          v73 = SESDefaultLogObject(v71, v72);
          v74 = objc_claimAutoreleasedReturnValue(v73);
          if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_INFO, "Failed to commit new endpoint in database, cleanup endpoint on SE", buf, 2u);
          }

          v75 = *(void **)(a1 + 56);
          v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "hexStringAsData"));
          v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8)
                                                                             + 40), "publicKeyIdentifier"));
          v78 = sub_100042AB0(v75, v76, v77);

        }
        goto LABEL_30;
      }
      v62 = SESDefaultLogObject(v60, v61);
      v53 = objc_claimAutoreleasedReturnValue(v62);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        v54 = "Failed to update endpoint in database, cleanup endpoint on SE";
        goto LABEL_28;
      }
    }

    v63 = *(void **)(a1 + 56);
    v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "hexStringAsData"));
    v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 40), "publicKeyIdentifier"));
    v66 = sub_100042AB0(v63, v64, v65);

    sub_10002BB14(v88);
LABEL_30:

    goto LABEL_31;
  }
  sub_10002BB14(v3);
LABEL_31:

}

void sub_10001E40C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[SESServer(SEEndPointXPC) createLocalEndpointWithProxy:readerIdentifier:readerPublicKey:reply:]_block_invoke"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10001E57C;
  v9[3] = &unk_100303A98;
  v20 = *(id *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 32);
  v10 = v3;
  v11 = v7;
  v12 = *(id *)(a1 + 48);
  v13 = *(id *)(a1 + 56);
  v14 = *(id *)(a1 + 64);
  v15 = *(id *)(a1 + 72);
  v16 = *(id *)(a1 + 80);
  v17 = *(id *)(a1 + 88);
  v18 = *(id *)(a1 + 96);
  v19 = *(id *)(a1 + 104);
  v8 = v3;
  objc_msgSend(v4, "endPointServiceAvailableWithProxy:reason:reply:", v5, v6, v9);

}

void sub_10001E57C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  id *v15;
  id v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  id *v24;
  id v25;
  id v26;
  id *v27;
  id v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];
  id v37;
  id v38;
  id v39;
  id v40;
  __CFString *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD v51[5];
  id v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  id *v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t);
  void (*v60)(uint64_t);
  id v61;
  char v62[9];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 112) + 16))();
  }
  else
  {
    v62[0] = 0;
    v56 = 0;
    v57 = (id *)&v56;
    v58 = 0x3032000000;
    v59 = sub_100019AD0;
    v60 = sub_100019AE0;
    v10 = sub_100012044(v7, 2, v62, *(void **)(a1 + 32));
    v61 = (id)objc_claimAutoreleasedReturnValue(v10);
    if (v57[5]
      || v62[0]
      && (v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "database")),
          v12 = sub_1000162EC((uint64_t)v11, v7, 1),
          v13 = objc_claimAutoreleasedReturnValue(v12),
          v14 = v57[5],
          v57[5] = (id)v13,
          v14,
          v11,
          v57[5]))
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 112) + 16))();
    }
    else
    {
      v15 = v57;
      v55 = v57[5];
      v16 = sub_100055A58((uint64_t)v8, CFSTR("A00000085801010100000001"), &v55);
      v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      objc_storeStrong(v15 + 5, v55);
      if (v57[5] || !v17)
      {
        v31 = *(_QWORD *)(a1 + 112);
        v32 = SESDefaultLogObject(v18, v19);
        v25 = (id)objc_claimAutoreleasedReturnValue(v32);
        v33 = SESCreateAndLogError(0, v25, SESErrorDomain, 0, CFSTR("Couldn't get AirInstanceEntity %@"));
        v29 = (void *)objc_claimAutoreleasedReturnValue(v33);
        (*(void (**)(uint64_t, _QWORD, void *))(v31 + 16))(v31, 0, v29);
      }
      else
      {
        v20 = *(void **)(a1 + 40);
        v21 = *(_QWORD *)(a1 + 48);
        v22 = sub_10003407C(*(id *)(a1 + 56), v19);
        v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        v24 = v57;
        v54 = v57[5];
        v25 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "_ensureCAExistsAndValid:clientName:secureElement:database:forEndPointType:error:", v21, v23, v7, v8, 3, &v54));
        objc_storeStrong(v24 + 5, v54);

        v27 = v57 + 5;
        v26 = v57[5];
        if (!v25 || v26)
        {
          v34 = *(_QWORD *)(a1 + 112);
          v35 = SESEnsureError(v26);
          v29 = (void *)objc_claimAutoreleasedReturnValue(v35);
          (*(void (**)(uint64_t, _QWORD, void *))(v34 + 16))(v34, 0, v29);
        }
        else
        {
          v53 = 0;
          v28 = sub_100040628((uint64_t)v8, v25, &v53);
          v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
          objc_storeStrong(v27, v53);
          if (!v29 || v57[5])
          {
            (*(void (**)(void))(*(_QWORD *)(a1 + 112) + 16))();
          }
          else
          {
            v51[0] = 0;
            v51[1] = v51;
            v51[2] = 0x3032000000;
            v51[3] = sub_100019AD0;
            v51[4] = sub_100019AE0;
            v52 = 0;
            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "database"));
            v36[0] = _NSConcreteStackBlock;
            v36[1] = 3221225472;
            v36[2] = sub_10001EA14;
            v36[3] = &unk_100303A70;
            v37 = *(id *)(a1 + 64);
            v25 = v25;
            v38 = v25;
            v39 = *(id *)(a1 + 56);
            v48 = &v56;
            v49 = v51;
            v50 = 3;
            v40 = v7;
            v41 = CFSTR("A00000085801010100000001");
            v42 = *(id *)(a1 + 48);
            v43 = *(id *)(a1 + 72);
            v44 = *(id *)(a1 + 80);
            v45 = *(id *)(a1 + 88);
            v46 = *(id *)(a1 + 96);
            v47 = *(id *)(a1 + 104);
            sub_1000168E4((uint64_t)v30, v36);

            (*(void (**)(void))(*(_QWORD *)(a1 + 112) + 16))();
            _Block_object_dispose(v51, 8);

          }
        }
      }

    }
    _Block_object_dispose(&v56, 8);

  }
}

void sub_10001E9DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_10001EA14(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  const char *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned __int8 v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  unsigned int v51;
  unsigned int v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint8_t buf[8];
  id v58;
  id v59[2];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "instance"));
  v8 = sub_10003407C(*(id *)(a1 + 48), v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8);
  v59[0] = *(id *)(v10 + 40);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stageEndPointEntityWithIdentifier:endPointCAEntity:airInstanceEntity:clientName:error:", v4, v5, v6, v9, v59));
  objc_storeStrong((id *)(v10 + 40), v59[0]);

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40))
  {
LABEL_2:
    sub_10002BB14((id *)v3);
    goto LABEL_5;
  }
  v55 = *(_QWORD *)(a1 + 136);
  v56 = v11;
  v54 = *(void **)(a1 + 56);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "hexStringAsData"));
  v13 = *(void **)(a1 + 32);
  v53 = *(void **)(a1 + 72);
  v52 = objc_msgSend(*(id *)(a1 + 80), "opt1");
  v51 = objc_msgSend(*(id *)(a1 + 80), "opt2");
  v14 = objc_msgSend(*(id *)(a1 + 80), "optA");
  v15 = *(void **)(a1 + 88);
  v16 = *(void **)(a1 + 96);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 104)), "UTF8String"), objc_msgSend(*(id *)(a1 + 104), "length")));
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 112)), "UTF8String"), objc_msgSend(*(id *)(a1 + 112), "length")));
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8);
  v58 = *(id *)(v19 + 40);
  v20 = sub_100040CC8(v54, v55, v12, v53, v13, v13, v52, v51, v14, v15, v16, v17, v18, 0, 0, 0, 0, 0, 0,
          0,
          0,
          0x10u,
          &v58);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  objc_storeStrong((id *)(v19 + 40), v58);
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
  v23 = *(void **)(v22 + 40);
  *(_QWORD *)(v22 + 40) = v21;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40)
    || !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 40))
  {
    sub_10002BB14((id *)v3);
    v11 = v56;
    goto LABEL_5;
  }
  v24 = objc_msgSend(*(id *)(a1 + 80), "nfcExpressOnlyInLPM");
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 40), "configuration"));
  objc_msgSend(v25, "setNfcExpressOnlyInLPM:", v24);

  v26 = objc_msgSend(*(id *)(a1 + 80), "terminationNotPersisted");
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 40), "configuration"));
  objc_msgSend(v27, "setTerminationNotPersisted:", v26);

  v11 = v56;
  v28 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stageEndPointEntityUpdates:fromEndPoint:", v56, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 40)));
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8);
  v30 = *(void **)(v29 + 40);
  *(_QWORD *)(v29 + 40) = v28;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40))
  {
    v33 = SESDefaultLogObject(v31, v32);
    v34 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Failed to update endpoint in database, cleanup endpoint on SE", buf, 2u);
    }

    v35 = *(void **)(a1 + 56);
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "hexStringAsData"));
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 40), "publicKeyIdentifier"));
    v38 = sub_100042AB0(v35, v36, v37);

    goto LABEL_2;
  }
  v39 = sub_10002BA94((uint64_t)v3);
  v40 = objc_claimAutoreleasedReturnValue(v39);
  v41 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8);
  v42 = *(void **)(v41 + 40);
  *(_QWORD *)(v41 + 40) = v40;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40))
  {
    v45 = SESDefaultLogObject(v43, v44);
    v46 = objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "Failed to commit endpoint in database, cleanup endpoint on SE", buf, 2u);
    }

    v47 = *(void **)(a1 + 56);
    v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "hexStringAsData"));
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 40), "publicKeyIdentifier"));
    v50 = sub_100042AB0(v47, v48, v49);

  }
LABEL_5:

}

void sub_10001F198(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[SESServer(SEEndPointXPC) createLyonEndpointWithProxy:readerGroupIdentifier:readerPublicKey:homeUUID:privateMailboxSize:reply:]_block_invoke"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10001F330;
  v9[3] = &unk_100303B30;
  v22 = *(id *)(a1 + 128);
  v7 = *(_QWORD *)(a1 + 32);
  v10 = v3;
  v11 = v7;
  v12 = *(id *)(a1 + 48);
  v13 = *(id *)(a1 + 56);
  v14 = *(id *)(a1 + 64);
  v15 = *(id *)(a1 + 72);
  v16 = *(id *)(a1 + 80);
  v17 = *(id *)(a1 + 88);
  v18 = *(id *)(a1 + 96);
  v19 = *(id *)(a1 + 104);
  v20 = *(id *)(a1 + 112);
  v21 = *(id *)(a1 + 120);
  v8 = v3;
  objc_msgSend(v4, "endPointServiceAvailableWithProxy:reason:reply:", v5, v6, v9);

}

void sub_10001F330(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  uint8_t *v24;
  id v25;
  uint64_t v26;
  const char *v27;
  void *v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint8_t *v32;
  id v33;
  uint64_t v34;
  id *v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  _QWORD v67[4];
  id v68;
  id v69;
  id v70;
  id v71;
  __CFString *v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  uint8_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t, uint64_t);
  void (*v88)(uint64_t);
  id v89;
  id v90;
  id v91;
  id v92;
  char v93;
  uint8_t v94[4];
  void *v95;
  uint8_t buf[8];
  uint8_t *v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, uint64_t);
  void (*v100)(uint64_t);
  id v101;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!v9)
  {
    v10 = objc_msgSend(*(id *)(a1 + 32), "isSupported");
    v11 = v10;
    v13 = SESDefaultLogObject(v10, v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Sunsprite is to be SLAM'd %d", buf, 8u);
    }

    v93 = 0;
    *(_QWORD *)buf = 0;
    v97 = buf;
    v98 = 0x3032000000;
    v99 = sub_100019AD0;
    v100 = sub_100019AE0;
    v15 = sub_100012044(v7, v11 | 0x10, &v93, *(void **)(a1 + 32));
    v101 = (id)objc_claimAutoreleasedReturnValue(v15);
    if (!*((_QWORD *)v97 + 5))
    {
      if (!v93
        || (v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "database")),
            v17 = sub_1000162EC((uint64_t)v16, v7, 1),
            v18 = objc_claimAutoreleasedReturnValue(v17),
            v19 = (void *)*((_QWORD *)v97 + 5),
            *((_QWORD *)v97 + 5) = v18,
            v19,
            v16,
            !*((_QWORD *)v97 + 5)))
      {
        if (!v11)
          goto LABEL_14;
        v20 = sub_100014404(v7, 1, *(void **)(a1 + 32));
        v21 = objc_claimAutoreleasedReturnValue(v20);
        v22 = (void *)*((_QWORD *)v97 + 5);
        *((_QWORD *)v97 + 5) = v21;

        if (!*((_QWORD *)v97 + 5))
        {
          v23 = objc_claimAutoreleasedReturnValue(+[DSK queue](_TtC10seserviced3DSK, "queue"));
          dispatch_async(v23, &stru_100303AE0);

LABEL_14:
          v24 = v97;
          v92 = (id)*((_QWORD *)v97 + 5);
          v25 = sub_100055A58((uint64_t)v8, CFSTR("A000000909ACCE5501"), &v92);
          v66 = (void *)objc_claimAutoreleasedReturnValue(v25);
          objc_storeStrong((id *)v24 + 5, v92);
          if (*((_QWORD *)v97 + 5) || !v66)
          {
            v60 = *(_QWORD *)(a1 + 128);
            v61 = SESDefaultLogObject(v26, v27);
            v33 = (id)objc_claimAutoreleasedReturnValue(v61);
            v62 = SESCreateAndLogError(0, v33, SESErrorDomain, 0, CFSTR("Couldn't get AirInstanceEntity %@"));
            v37 = (void *)objc_claimAutoreleasedReturnValue(v62);
            (*(void (**)(uint64_t, _QWORD, void *))(v60 + 16))(v60, 0, v37);
          }
          else
          {
            v28 = *(void **)(a1 + 40);
            v29 = *(_QWORD *)(a1 + 48);
            v30 = sub_10003407C(*(id *)(a1 + 56), v27);
            v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
            v32 = v97;
            v91 = (id)*((_QWORD *)v97 + 5);
            v33 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "_ensureCAExistsAndValid:clientName:secureElement:database:forEndPointType:error:", v29, v31, v7, v8, 4, &v91));
            objc_storeStrong((id *)v32 + 5, v91);

            v35 = (id *)(v97 + 40);
            v34 = *((_QWORD *)v97 + 5);
            if (!v33 || v34)
            {
              v63 = *(_QWORD *)(a1 + 128);
              v64 = SESEnsureError(v34);
              v37 = (void *)objc_claimAutoreleasedReturnValue(v64);
              (*(void (**)(uint64_t, _QWORD, void *))(v63 + 16))(v63, 0, v37);
            }
            else
            {
              v90 = 0;
              v36 = sub_100040628((uint64_t)v8, v33, &v90);
              v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
              objc_storeStrong(v35, v90);
              if (!v37 || *((_QWORD *)v97 + 5))
              {
                (*(void (**)(void))(*(_QWORD *)(a1 + 128) + 16))();
              }
              else
              {
                v84 = 0;
                v85 = &v84;
                v86 = 0x3032000000;
                v87 = sub_100019AD0;
                v88 = sub_100019AE0;
                v89 = 0;
                v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "database"));
                v67[0] = _NSConcreteStackBlock;
                v67[1] = 3221225472;
                v67[2] = sub_10001FB00;
                v67[3] = &unk_100303B08;
                v68 = *(id *)(a1 + 64);
                v33 = v33;
                v69 = v33;
                v70 = *(id *)(a1 + 56);
                v81 = buf;
                v82 = &v84;
                v39 = v7;
                v83 = 4;
                v71 = v39;
                v72 = CFSTR("A000000909ACCE5501");
                v73 = *(id *)(a1 + 48);
                v74 = *(id *)(a1 + 72);
                v75 = *(id *)(a1 + 80);
                v76 = *(id *)(a1 + 88);
                v77 = *(id *)(a1 + 96);
                v78 = *(id *)(a1 + 104);
                v79 = *(id *)(a1 + 112);
                v80 = *(id *)(a1 + 120);
                sub_1000168E4((uint64_t)v38, v67);

                v42 = v85;
                if (!*((_QWORD *)v97 + 5))
                  goto LABEL_42;
                if (v85[5])
                {
                  v43 = SESDefaultLogObject(v40, v41);
                  v44 = objc_claimAutoreleasedReturnValue(v43);
                  if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
                  {
                    *(_WORD *)v94 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "Failure after creating EP on SE, cleaning it up", v94, 2u);
                  }

                  v45 = v39;
                  v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "identifier"));
                  v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "hexStringAsData"));
                  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v85[5], "publicKeyIdentifier"));
                  v49 = sub_100042AB0(v45, v47, v48);
                  v65 = (void *)objc_claimAutoreleasedReturnValue(v49);

                  if (v65)
                  {
                    v52 = SESDefaultLogObject(v50, v51);
                    v53 = objc_claimAutoreleasedReturnValue(v52);
                    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v94 = 138412290;
                      v95 = v65;
                      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "Failed to clean up EP   : %@", v94, 0xCu);
                    }

                  }
                  v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v85[5], "deleteEndPointLongTermPrivacyKey"));

                  if (v54)
                  {
                    v57 = SESDefaultLogObject(v55, v56);
                    v58 = objc_claimAutoreleasedReturnValue(v57);
                    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v94 = 138412290;
                      v95 = v54;
                      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "Failed to delete long term privacy key %@", v94, 0xCu);
                    }

                  }
                  v59 = (void *)v85[5];
                  v85[5] = 0;

                  v42 = v85;
                  if (!*((_QWORD *)v97 + 5))
                  {
LABEL_42:
                    if (v42[5])
                      +[EndpointStore insertWithEndpoint:](_TtC10seserviced13EndpointStore, "insertWithEndpoint:");
                  }
                }
                (*(void (**)(void))(*(_QWORD *)(a1 + 128) + 16))();

                _Block_object_dispose(&v84, 8);
              }
            }
          }

          goto LABEL_7;
        }
      }
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 128) + 16))();
LABEL_7:
    _Block_object_dispose(buf, 8);

    goto LABEL_8;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 128) + 16))();
LABEL_8:

}

void sub_10001FA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10001FAC8(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[DSK shared](_TtC10seserviced3DSK, "shared"));
  objc_msgSend(v1, "startWithModule:", 1);

}

void sub_10001FB00(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  const char *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned __int8 v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  void *v44;
  unsigned __int8 v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint8_t buf[8];
  id v65;
  id v66[2];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "instance"));
  v8 = sub_10003407C(*(id *)(a1 + 48), v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
  v66[0] = *(id *)(v10 + 40);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stageEndPointEntityWithIdentifier:endPointCAEntity:airInstanceEntity:clientName:error:", v4, v5, v6, v9, v66));
  objc_storeStrong((id *)(v10 + 40), v66[0]);

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40))
  {
    v60 = v11;
    v63 = *(_QWORD *)(a1 + 152);
    v62 = *(void **)(a1 + 56);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "hexStringAsData"));
    v13 = *(void **)(a1 + 32);
    v61 = *(void **)(a1 + 72);
    v14 = objc_msgSend(*(id *)(a1 + 80), "optA");
    v15 = *(void **)(a1 + 88);
    v16 = *(void **)(a1 + 96);
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 104)), "UTF8String"), objc_msgSend(*(id *)(a1 + 104), "length")));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 112)), "UTF8String"), objc_msgSend(*(id *)(a1 + 112), "length")));
    v19 = *(void **)(a1 + 120);
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
    v65 = *(id *)(v20 + 40);
    v21 = sub_100040CC8(v62, v63, v12, v61, v13, v13, 0, 0, v14, v15, v16, v17, v18, 0, 0, 0, v19, &off_100322E18, 0,
            0,
            0,
            0x10u,
            &v65);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    objc_storeStrong((id *)(v20 + 40), v65);
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8);
    v24 = *(void **)(v23 + 40);
    *(_QWORD *)(v23 + 40) = v22;

    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40)
      || !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 40))
    {
      sub_10002BB14((id *)v3);
      v11 = v60;
      goto LABEL_5;
    }
    v25 = objc_msgSend(*(id *)(a1 + 80), "nfcExpressOnlyInLPM");
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 40), "configuration"));
    objc_msgSend(v26, "setNfcExpressOnlyInLPM:", v25);

    v27 = objc_msgSend(*(id *)(a1 + 80), "terminationNotPersisted");
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 40), "configuration"));
    objc_msgSend(v28, "setTerminationNotPersisted:", v27);

    v29 = *(void **)(a1 + 128);
    if (v29)
    {
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "UUIDString"));
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 40), "setHomeUUIDString:", v30);

    }
    v11 = v60;
    v31 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stageEndPointEntityUpdates:fromEndPoint:", v60, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 40)));
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
    v33 = *(void **)(v32 + 40);
    *(_QWORD *)(v32 + 40) = v31;

    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40))
    {
      v36 = SESDefaultLogObject(v34, v35);
      v37 = objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Failed to update endpoint in database, cleanup endpoint on SE", buf, 2u);
      }

      v38 = *(void **)(a1 + 56);
      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "hexStringAsData"));
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8)
                                                                         + 40), "publicKeyIdentifier"));
      v41 = sub_100042AB0(v38, v39, v40);

    }
    else
    {
      if (SESInternalVariant(v34))
      {
        v42 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "objectForKey:", CFSTR("debug.ursk.ttl.override")));
        v44 = v43;
        if (v43)
          v45 = objc_msgSend(v43, "unsignedIntValue");
        else
          v45 = 12;

      }
      else
      {
        v45 = 12;
      }
      v46 = *(void **)(a1 + 56);
      v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "hexStringAsData"));
      v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8)
                                                                         + 40), "publicKeyIdentifier"));
      v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 80), "enabledOnContactless")));
      v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 80), "enabledOnWire")));
      v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v45));
      v52 = sub_100043C0C(v46, v47, v48, 0, 0, v49, 0, v50, 0, 0, 0, v51, &off_100322E30);
      v53 = objc_claimAutoreleasedReturnValue(v52);
      v54 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
      v55 = *(void **)(v54 + 40);
      *(_QWORD *)(v54 + 40) = v53;

      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40))
      {
        v56 = sub_10002BA94((uint64_t)v3);
        v57 = objc_claimAutoreleasedReturnValue(v56);
        v58 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
        v59 = *(void **)(v58 + 40);
        *(_QWORD *)(v58 + 40) = v57;

        goto LABEL_5;
      }
    }
  }
  sub_10002BB14((id *)v3);
LABEL_5:

}

void sub_10002064C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  int v22;
  uint64_t v23;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[SESServer(SEEndPointXPC) createLyonHydraEndpointWithProxy:serverParams:reply:]_block_invoke"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000207E0;
  v9[3] = &unk_100303BC8;
  v21 = *(id *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 32);
  v10 = v3;
  v11 = v7;
  v12 = *(id *)(a1 + 48);
  v13 = *(id *)(a1 + 56);
  v14 = *(id *)(a1 + 64);
  v15 = *(id *)(a1 + 72);
  v16 = *(id *)(a1 + 80);
  v17 = *(id *)(a1 + 88);
  v18 = *(id *)(a1 + 96);
  v19 = *(id *)(a1 + 104);
  v22 = *(_DWORD *)(a1 + 128);
  v20 = *(id *)(a1 + 112);
  v23 = *(_QWORD *)(a1 + 132);
  v8 = v3;
  objc_msgSend(v4, "endPointServiceAvailableWithProxy:reason:reply:", v5, v6, v9);

}

void sub_1000207E0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  uint8_t *v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  id v25;
  void *v26;
  uint64_t v27;
  const char *v28;
  void *v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint8_t *v33;
  id v34;
  uint64_t v35;
  id *v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[4];
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint8_t *v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  _QWORD v62[5];
  id v63;
  id v64;
  id v65;
  id v66;
  char v67;
  uint8_t buf[8];
  uint8_t *v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  void (*v72)(uint64_t);
  id v73;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!v9)
  {
    v10 = objc_msgSend(*(id *)(a1 + 32), "isSupported");
    v11 = v10;
    v13 = SESDefaultLogObject(v10, v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Sunsprite is to be SLAM'd %d", buf, 8u);
    }

    v67 = 0;
    *(_QWORD *)buf = 0;
    v69 = buf;
    v70 = 0x3032000000;
    v71 = sub_100019AD0;
    v72 = sub_100019AE0;
    v15 = sub_100012044(v7, v11 | 0x10, &v67, *(void **)(a1 + 32));
    v73 = (id)objc_claimAutoreleasedReturnValue(v15);
    v16 = v69;
    if (!*((_QWORD *)v69 + 5))
    {
      if (!v67)
        goto LABEL_11;
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "database"));
      v18 = sub_1000162EC((uint64_t)v17, v7, 1);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      v20 = (void *)*((_QWORD *)v69 + 5);
      *((_QWORD *)v69 + 5) = v19;

      v16 = v69;
      if (!*((_QWORD *)v69 + 5))
      {
LABEL_11:
        if (!v11)
          goto LABEL_14;
        v21 = sub_100014404(v7, 1, *(void **)(a1 + 32));
        v22 = objc_claimAutoreleasedReturnValue(v21);
        v23 = (void *)*((_QWORD *)v69 + 5);
        *((_QWORD *)v69 + 5) = v22;

        if (!*((_QWORD *)v69 + 5))
        {
          v24 = objc_claimAutoreleasedReturnValue(+[DSK queue](_TtC10seserviced3DSK, "queue"));
          dispatch_async(v24, &stru_100303B78);

          v16 = v69;
LABEL_14:
          v66 = (id)*((_QWORD *)v16 + 5);
          v25 = sub_100055A58((uint64_t)v8, CFSTR("A000000909ACCE5501"), &v66);
          v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
          objc_storeStrong((id *)v16 + 5, v66);
          if (*((_QWORD *)v69 + 5) || !v26)
          {
            v40 = *(_QWORD *)(a1 + 120);
            v41 = SESDefaultLogObject(v27, v28);
            v34 = (id)objc_claimAutoreleasedReturnValue(v41);
            v42 = SESCreateAndLogError(0, v34, SESErrorDomain, 0, CFSTR("Couldn't get AirInstanceEntity %@"));
            v38 = (id)objc_claimAutoreleasedReturnValue(v42);
            (*(void (**)(uint64_t, _QWORD, id))(v40 + 16))(v40, 0, v38);
          }
          else
          {
            v29 = *(void **)(a1 + 40);
            v30 = *(_QWORD *)(a1 + 48);
            v31 = sub_10003407C(*(id *)(a1 + 56), v28);
            v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
            v33 = v69;
            v65 = (id)*((_QWORD *)v69 + 5);
            v34 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "_ensureCAExistsAndValid:clientName:secureElement:database:forEndPointType:error:", v30, v32, v7, v8, 5, &v65));
            objc_storeStrong((id *)v33 + 5, v65);

            v36 = (id *)(v69 + 40);
            v35 = *((_QWORD *)v69 + 5);
            if (!v34 || v35)
            {
              v43 = *(_QWORD *)(a1 + 120);
              v44 = SESEnsureError(v35);
              v38 = (id)objc_claimAutoreleasedReturnValue(v44);
              (*(void (**)(uint64_t, _QWORD, id))(v43 + 16))(v43, 0, v38);
            }
            else
            {
              v64 = 0;
              v37 = sub_100040628((uint64_t)v8, v34, &v64);
              v38 = (id)objc_claimAutoreleasedReturnValue(v37);
              objc_storeStrong(v36, v64);
              if (!v38 || *((_QWORD *)v69 + 5))
              {
                (*(void (**)(void))(*(_QWORD *)(a1 + 120) + 16))();
              }
              else
              {
                v62[0] = 0;
                v62[1] = v62;
                v62[2] = 0x3032000000;
                v62[3] = sub_100019AD0;
                v62[4] = sub_100019AE0;
                v63 = 0;
                v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "database"));
                v45[0] = _NSConcreteStackBlock;
                v45[1] = 3221225472;
                v45[2] = sub_100020DCC;
                v45[3] = &unk_100303BA0;
                v46 = *(id *)(a1 + 64);
                v34 = v34;
                v47 = v34;
                v48 = *(id *)(a1 + 56);
                v58 = buf;
                v59 = v62;
                v49 = v7;
                v50 = *(id *)(a1 + 48);
                v51 = *(id *)(a1 + 72);
                v52 = *(id *)(a1 + 80);
                v53 = *(id *)(a1 + 88);
                v54 = *(id *)(a1 + 96);
                v55 = *(id *)(a1 + 104);
                v60 = *(_DWORD *)(a1 + 128);
                v56 = *(id *)(a1 + 112);
                v61 = *(_QWORD *)(a1 + 132);
                v38 = v38;
                v57 = v38;
                sub_1000168E4((uint64_t)v39, v45);

                (*(void (**)(void))(*(_QWORD *)(a1 + 120) + 16))();
                _Block_object_dispose(v62, 8);

              }
            }
          }

          goto LABEL_7;
        }
      }
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 120) + 16))();
LABEL_7:
    _Block_object_dispose(buf, 8);

    goto LABEL_8;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 120) + 16))();
LABEL_8:

}

void sub_100020D54(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100020D94(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[DSK shared](_TtC10seserviced3DSK, "shared"));
  objc_msgSend(v1, "startWithModule:", 1);

}

void sub_100020DCC(uint64_t a1, void *a2)
{
  id *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  const char *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  int v30;
  int v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  const char *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  void *v71;
  void *v72;
  void *v73;
  id v74;
  void *v75;
  unsigned __int8 v76;
  void *v77;
  void *v78;
  id *v79;
  uint8_t buf[5];
  _BYTE v81[3];
  id v82;
  id v83[2];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "instance"));
  v8 = sub_10003407C(*(id *)(a1 + 48), v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
  v83[0] = *(id *)(v10 + 40);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stageEndPointEntityWithIdentifier:endPointCAEntity:airInstanceEntity:clientName:error:", v4, v5, v6, v9, v83));
  objc_storeStrong((id *)(v10 + 40), v83[0]);

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 40))
  {
    v75 = v11;
    v78 = *(void **)(a1 + 56);
    v79 = v3;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000909ACCE5501"), "hexStringAsData"));
    v13 = *(void **)(a1 + 32);
    v77 = *(void **)(a1 + 64);
    v76 = objc_msgSend(*(id *)(a1 + 72), "optA");
    v14 = *(void **)(a1 + 80);
    v15 = *(void **)(a1 + 88);
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 96)), "UTF8String"), objc_msgSend(*(id *)(a1 + 96), "length")));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 104)), "UTF8String"), objc_msgSend(*(id *)(a1 + 104), "length")));
    v18 = *(_DWORD *)(a1 + 144);
    if (v18)
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 144)));
    else
      v19 = 0;
    v20 = *(void **)(a1 + 112);
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
    v82 = *(id *)(v21 + 40);
    v22 = sub_100040CC8(v78, 5, v12, v77, v13, v13, 0, 0, v76, v14, v15, v16, v17, 0, 0, 0, v19, v20, 0,
            0,
            0,
            0x10u,
            &v82);
    v23 = objc_claimAutoreleasedReturnValue(v22);
    objc_storeStrong((id *)(v21 + 40), v82);
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
    v25 = *(void **)(v24 + 40);
    *(_QWORD *)(v24 + 40) = v23;

    if (v18)
    v3 = v79;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 40)
      || !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40))
    {
      sub_10002BB14(v79);
      v11 = v75;
      goto LABEL_23;
    }
    v26 = objc_msgSend(*(id *)(a1 + 72), "nfcExpressOnlyInLPM");
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40), "configuration"));
    objc_msgSend(v27, "setNfcExpressOnlyInLPM:", v26);

    v28 = objc_msgSend(*(id *)(a1 + 72), "terminationNotPersisted");
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40), "configuration"));
    objc_msgSend(v29, "setTerminationNotPersisted:", v28);

    v30 = *(_DWORD *)(a1 + 148);
    if (v30)
    {
      v31 = *(_DWORD *)(a1 + 152);
      v81[0] = BYTE1(v31);
      v81[1] = v31;
      v81[2] = v30;
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v81, 3));
      v33 = *(unsigned __int16 *)(a1 + 148);
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8)
                                                                         + 40), "configuration"));
      objc_msgSend(v34, "setLengthPrivateMailBox:", v33);

      v35 = *(unsigned __int16 *)(a1 + 152);
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8)
                                                                         + 40), "configuration"));
      objc_msgSend(v36, "setOffsetPrivateMailBox:", v35);

    }
    else
    {
      v32 = 0;
    }
    v11 = v75;
    v37 = *(void **)(a1 + 56);
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000909ACCE5501"), "hexStringAsData"));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40), "publicKeyIdentifier"));
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 72), "enabledOnContactless")));
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 72), "enabledOnWire")));
    v42 = sub_100043C0C(v37, v38, v39, v32, 0, v40, 0, v41, 0, 0, 0, 0, 0);
    v43 = objc_claimAutoreleasedReturnValue(v42);
    v44 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
    v45 = *(void **)(v44 + 40);
    *(_QWORD *)(v44 + 40) = v43;

    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 40))
    {
      v48 = SESDefaultLogObject(v46, v47);
      v49 = objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        v50 = "Failed to set auth1 mailbox configuration on endpoint, cleanup endpoint from SE";
LABEL_20:
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, v50, buf, 2u);
      }
    }
    else
    {
      v51 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40);
      v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 120), "certificates"));
      objc_msgSend(v51, "prependCertificateChain:", v52);

      v53 = objc_claimAutoreleasedReturnValue(objc_msgSend(v79, "stageEndPointEntityUpdates:fromEndPoint:", v75, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40)));
      v54 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
      v55 = *(void **)(v54 + 40);
      *(_QWORD *)(v54 + 40) = v53;

      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 40))
      {
        v63 = sub_10002BA94((uint64_t)v79);
        v64 = objc_claimAutoreleasedReturnValue(v63);
        v65 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
        v66 = *(void **)(v65 + 40);
        *(_QWORD *)(v65 + 40) = v64;

        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 40))
        {
          v69 = SESDefaultLogObject(v67, v68);
          v70 = objc_claimAutoreleasedReturnValue(v69);
          if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_INFO, "Failed to commit new endpoint in database, cleanup endpoint on SE", buf, 2u);
          }

          v71 = *(void **)(a1 + 56);
          v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000909ACCE5501"), "hexStringAsData"));
          v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8)
                                                                             + 40), "publicKeyIdentifier"));
          v74 = sub_100042AB0(v71, v72, v73);

        }
        goto LABEL_22;
      }
      v58 = SESDefaultLogObject(v56, v57);
      v49 = objc_claimAutoreleasedReturnValue(v58);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        v50 = "Failed to update endpoint in database, cleanup endpoint on SE";
        goto LABEL_20;
      }
    }

    v59 = *(void **)(a1 + 56);
    v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000909ACCE5501"), "hexStringAsData"));
    v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40), "publicKeyIdentifier"));
    v62 = sub_100042AB0(v59, v60, v61);

    sub_10002BB14(v79);
LABEL_22:

    goto LABEL_23;
  }
  sub_10002BB14(v3);
LABEL_23:

}

uint64_t sub_1000215F4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v3 = a2;
  v4 = sub_10003ADE0(*(_QWORD *)(a1 + 32), v3, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "revocationAttestation"));
  if (v6)
  {
    v7 = 0;
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "instance"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
    if (objc_msgSend(v9, "isEqualToString:", v10))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
      if ((objc_msgSend(v11, "isEqualToString:", *(_QWORD *)(a1 + 48)) & 1) != 0)
      {
        v7 = 1;
      }
      else
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "readerIdentifier"));
        v7 = (uint64_t)objc_msgSend(v12, "isEqualToData:", *(_QWORD *)(a1 + 56));

      }
    }
    else
    {
      v7 = 0;
    }

  }
  return v7;
}

void sub_100021C38(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;

  v27 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  if (v14)
  {
LABEL_2:
    v16 = v14;
    goto LABEL_3;
  }
  if (!v27 || !v12 || !v13)
  {
    v22 = *(_QWORD *)(a1 + 96);
    v23 = SESDefaultLogObject(v27, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v23);
    v24 = SESCreateAndLogError(0, v16, SESErrorDomain, 0, CFSTR("Got nil from endPointAction secureElement %d endPointEntity %d endPoint %d"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    (*(void (**)(uint64_t, void *))(v22 + 16))(v22, v25);

    goto LABEL_4;
  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "instance"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "identifier"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "hexStringAsData"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "publicKeyIdentifier"));
  v21 = sub_100043C0C(v27, v19, v20, *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56), *(void **)(a1 + 64), *(void **)(a1 + 72), *(void **)(a1 + 80), *(void **)(a1 + 88), 0, 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v21);

  if (!v16)
  {
    if (*(_QWORD *)(a1 + 32)
      || *(_OWORD *)(a1 + 40) != 0
      || *(_QWORD *)(a1 + 64)
      || (v16 = 0, *(_QWORD *)(a1 + 88)))
    {
      v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "configurePrivateData:confidentialData:contactlessPersistentVisibility:wiredPersistentVisibility:nfcExpressOnlyInLPM:"));
      if (!v14)
      {
        v26 = sub_10003B1F0(v11, v12, v13);
        v14 = (id)objc_claimAutoreleasedReturnValue(v26);
      }
      goto LABEL_2;
    }
  }
LABEL_3:
  (*(void (**)(void))(*(_QWORD *)(a1 + 96) + 16))();
LABEL_4:

}

void sub_10002280C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v24;
  int v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;

  v7 = a2;
  v8 = a4;
  if (v8)
  {
    v9 = v8;
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v31 = 0;
    v10 = sub_100055A58(a3, CFSTR("A000000909ACCE5501"), &v31);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = v31;
    if (v12)
      v14 = 1;
    else
      v14 = v11 == 0;
    if (v14)
    {
      v9 = v12;
      v15 = *(_QWORD *)(a1 + 40);
      v16 = SESDefaultLogObject(v12, v13);
      v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      v18 = SESCreateAndLogError(0, v17, SESErrorDomain, 0, CFSTR("Couldn't get AirInstanceEntity %@"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v19);

    }
    else
    {
      v20 = *(unsigned __int8 *)(a1 + 48) | (2 * *(unsigned __int8 *)(a1 + 49)) | 4u;
      v21 = SESDefaultLogObject(v12, v13);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        v24 = *(_QWORD *)(a1 + 32);
        v25 = *(unsigned __int8 *)(a1 + 48);
        v26 = *(unsigned __int8 *)(a1 + 49);
        *(_DWORD *)buf = 138413058;
        v33 = v24;
        v34 = 1024;
        v35 = v20;
        v36 = 1024;
        v37 = v25;
        v38 = 1024;
        v39 = v26;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Configuring identifier %@ with bitmap %d, accessDocumentPresent %d, revocationDocumentPresent %d ", buf, 0x1Eu);
      }

      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000909ACCE5501"), "hexStringAsData"));
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "hexStringAsData"));
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v20));
      v30 = sub_100043C0C(v7, v27, v28, 0, 0, 0, 0, 0, 0, 0, 0, 0, v29);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v30);

      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }

  }
}

void sub_100022C28(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  NSObject *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  void *v58;
  id v59;
  void *v60;
  id v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  id v71;
  uint8_t buf[4];
  void *v73;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = v15;
  if (!v11 || v15)
  {
    v27 = *(_QWORD *)(a1 + 56);
    v28 = SESEnsureError(v15);
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    (*(void (**)(uint64_t, _QWORD, void *))(v27 + 16))(v27, 0, v29);

  }
  else
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "revocationAttestation"));

    if (v17)
    {
      v20 = *(_QWORD *)(a1 + 56);
      v21 = SESDefaultLogObject(v18, v19);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v23 = SESErrorDomain;
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "publicKeyIdentifier"));
      v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "asHexString"));
      v25 = SESCreateAndLogError(0, v22, v23, 6, CFSTR("Endpoint %@ is already revoked"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      (*(void (**)(uint64_t, _QWORD, void *))(v20 + 16))(v20, 0, v26);

    }
    else
    {
      v70 = v12;
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getEncryptedCarOEMProprietaryData:withEndpointEntity:withSecureElement:", v14, v13, v11));
      objc_msgSend(v14, "setCarOEMProprietaryData:", v30);

      v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "readerInfo"));
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "bleAddress"));
      v32 = 3;
      if (!v31)
        v32 = 1;
      v68 = v32;

      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "instance"));
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "identifier"));
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "hexStringAsData"));
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "publicKeyIdentifier"));
      v37 = *(void **)(a1 + 40);
      v38 = *(void **)(a1 + 48);
      v71 = 0;
      v39 = sub_1000464A0(v11, v35, v36, v37, v38, &v71);
      v40 = objc_claimAutoreleasedReturnValue(v39);
      v41 = v71;

      v42 = (void *)v40;
      if (v41 || !v40)
      {
        v54 = *(_QWORD *)(a1 + 56);
        v55 = SESDefaultLogObject(v43, v44);
        v67 = (void *)objc_claimAutoreleasedReturnValue(v55);
        v66 = SESErrorDomain;
        v56 = objc_msgSend(v41, "code");
        v57 = v41;
        v58 = v42;
        v59 = v56;
        v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "publicKeyIdentifier"));
        v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "asHexString"));
        v61 = v59;
        v42 = v58;
        v48 = v57;
        v62 = SESCreateAndLogError(0, v67, v66, v61, CFSTR("While revoking %@"));
        v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
        (*(void (**)(uint64_t, _QWORD, void *))(v54 + 16))(v54, 0, v63);

        v51 = v69;
        sub_100049548((uint64_t)SESDAnalyticsLogger, 1, v69, v68, 3);
        v12 = v70;
      }
      else
      {
        objc_msgSend(v14, "setRevocationAttestation:", v40);
        v12 = v70;
        v45 = sub_10003B1F0(v70, v13, v14);
        v46 = objc_claimAutoreleasedReturnValue(v45);
        v48 = (void *)v46;
        if (v46)
        {
          v49 = SESDefaultLogObject(v46, v47);
          v50 = objc_claimAutoreleasedReturnValue(v49);
          v52 = v68;
          v51 = v69;
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v73 = v48;
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "EndPoint revoked but could not update database : %@", buf, 0xCu);
          }

          v53 = 4;
        }
        else
        {
          v53 = 0;
          v52 = v68;
          v51 = v69;
        }
        +[EndpointStore removeWithEndpoint:](_TtC10seserviced13EndpointStore, "removeWithEndpoint:", v14);
        sub_100049548((uint64_t)SESDAnalyticsLogger, 1, v51, v52, v53);
        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
      }

    }
  }

}

void sub_100023224(_QWORD *a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;

  v10 = a2;
  v11 = a5;
  v12 = a6;
  v13 = v12;
  if (!v10 || v12)
  {
    v25 = a1[7];
    v26 = SESEnsureError(v12);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v26);
    (*(void (**)(uint64_t, _QWORD, void *))(v25 + 16))(v25, 0, v21);
  }
  else
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a4, "instance"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "identifier"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "hexStringAsData"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "publicKeyIdentifier"));
    v18 = (void *)a1[4];
    v19 = (void *)a1[5];
    v31 = 0;
    v20 = sub_100045614(v10, v16, v17, v18, v19, &v31);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    v13 = v31;

    v24 = a1[7];
    if (v13 || !v21)
    {
      v27 = SESDefaultLogObject(v22, v23);
      v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      v29 = SESCreateAndLogError(0, v28, SESErrorDomain, objc_msgSend(v13, "code"), CFSTR("Couldn't sign with identifier %@"));
      v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      (*(void (**)(uint64_t, _QWORD, void *))(v24 + 16))(v24, 0, v30);

    }
    else
    {
      (*(void (**)(_QWORD, void *, _QWORD))(v24 + 16))(a1[7], v21, 0);
    }
  }

}

void sub_100023588(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;

  v10 = a2;
  v11 = a5;
  v12 = a6;
  v13 = v12;
  if (!v10 || v12)
  {
    v24 = *(_QWORD *)(a1 + 48);
    v25 = SESEnsureError(v12);
    v20 = (void *)objc_claimAutoreleasedReturnValue(v25);
    (*(void (**)(uint64_t, _QWORD, void *))(v24 + 16))(v24, 0, v20);
  }
  else
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a4, "instance"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "identifier"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "hexStringAsData"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "publicKeyIdentifier"));
    v18 = *(void **)(a1 + 32);
    v30 = 0;
    v19 = sub_100045F48(v10, v16, v17, v18, &v30);
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    v13 = v30;

    v23 = *(_QWORD *)(a1 + 48);
    if (v13 || !v20)
    {
      v26 = SESDefaultLogObject(v21, v22);
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      v28 = SESCreateAndLogError(0, v27, SESErrorDomain, objc_msgSend(v13, "code"), CFSTR("Couldn't sign with identifier %@"));
      v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      (*(void (**)(uint64_t, _QWORD, void *))(v23 + 16))(v23, 0, v29);

    }
    else
    {
      (*(void (**)(_QWORD, void *, _QWORD))(v23 + 16))(*(_QWORD *)(a1 + 48), v20, 0);
    }
  }

}

void sub_1000238F4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  id v38;

  v38 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  if (v14)
  {
    v16 = v14;
  }
  else
  {
    if (!v38 || !v12 || !v13)
    {
      v28 = *(_QWORD *)(a1 + 40);
      v29 = SESDefaultLogObject(v38, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v29);
      v30 = SESCreateAndLogError(0, v16, SESErrorDomain, 0, CFSTR("Got nil from endPointAction secureElement %d endPointEntity %d endPoint %d"));
      v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      (*(void (**)(uint64_t, void *))(v28 + 16))(v28, v31);

      goto LABEL_10;
    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "privateMailBoxSize"));
    v18 = (char *)objc_msgSend(v17, "unsignedIntegerValue");
    v19 = *(unsigned __int16 *)(a1 + 48);
    v20 = (char *)objc_msgSend(*(id *)(a1 + 32), "length") + v19;

    if (v18 < v20)
    {
      v23 = *(_QWORD *)(a1 + 40);
      v24 = SESDefaultLogObject(v21, v22);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v24);
      v25 = SESErrorDomain;
      objc_msgSend(*(id *)(a1 + 32), "length");
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "privateMailBoxSize"));
      v26 = SESCreateAndLogError(0, v16, v25, 1, CFSTR("Can't write at offset %u length %u into mailbox of size %@"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      (*(void (**)(uint64_t, void *))(v23 + 16))(v23, v27);

      goto LABEL_10;
    }
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "instance"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "identifier"));
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "hexStringAsData"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "publicKeyIdentifier"));
    v36 = sub_1000438A0(v38, v34, v35, *(void **)(a1 + 32), *(_WORD *)(a1 + 48));
    v16 = (void *)objc_claimAutoreleasedReturnValue(v36);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_10:

}

void sub_100023D1C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _DWORD v21[2];
  __int16 v22;
  _BOOL4 v23;
  __int16 v24;
  _BOOL4 v25;
  __int16 v26;
  void *v27;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v14 = v12;
  if (v11 && v9 && v10 && !v12)
  {
    v15 = sub_10003B1F0(v9, v10, *(void **)(a1 + 32));
    v14 = (void *)objc_claimAutoreleasedReturnValue(v15);
    if (!v14 && *(_QWORD *)(a1 + 32))
      +[EndpointStore updateWithEndpoint:](_TtC10seserviced13EndpointStore, "updateWithEndpoint:");
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v16 = SESDefaultLogObject(v12, v13);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v21[0] = 67109890;
      v21[1] = v9 != 0;
      v22 = 1024;
      v23 = v10 != 0;
      v24 = 1024;
      v25 = v11 != 0;
      v26 = 2112;
      v27 = v14;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "updateEndpoint database %d endpointEntity %d endpoint %d error %@", (uint8_t *)v21, 0x1Eu);
    }

    v18 = *(_QWORD *)(a1 + 40);
    v19 = SESEnsureError(v14);
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    (*(void (**)(uint64_t, void *))(v18 + 16))(v18, v20);

  }
}

void sub_100024064(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  objc_class *v15;
  uint64_t v16;
  Class v17;
  void *v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  int v37;
  NSMutableData *v38;
  void *v39;
  void *v40;
  void *v41;
  NSMutableData v42;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  if (v15)
  {
    v17 = v15;
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
LABEL_10:

    goto LABEL_11;
  }
  if (!v11 || !v13 || !v14)
  {
    v29 = *(_QWORD *)(a1 + 32);
    v30 = SESDefaultLogObject(0, v16);
    v17 = (Class)objc_claimAutoreleasedReturnValue(v30);
    v31 = SESCreateAndLogError(0, v17, SESErrorDomain, 0, CFSTR("Got nil from endPointAction secureElement %d endPointEntity %d endPoint %d"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
    (*(void (**)(uint64_t, _QWORD, void *))(v29 + 16))(v29, 0, v32);

    goto LABEL_10;
  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "privateMailBoxSize"));
  v19 = objc_msgSend(v18, "unsignedIntegerValue");
  v20 = *(unsigned __int16 *)(a1 + 42) + (unint64_t)*(unsigned __int16 *)(a1 + 40);

  if ((unint64_t)v19 >= v20)
  {
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "instance"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "identifier"));
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "hexStringAsData"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "publicKeyIdentifier"));
    v36 = *(unsigned __int16 *)(a1 + 40);
    v37 = *(unsigned __int16 *)(a1 + 42);
    v42.super.super.isa = 0;
    v38 = sub_1000435AC(v11, v34, v35, v36, v37, &v42);
    v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
    v17 = v42.super.super.isa;

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    goto LABEL_10;
  }
  v23 = *(_QWORD *)(a1 + 32);
  v24 = SESDefaultLogObject(v21, v22);
  v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  v26 = SESErrorDomain;
  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "privateMailBoxSize"));
  v27 = SESCreateAndLogError(0, v25, v26, 1, CFSTR("Cannot read data of length %u at offset %u into mailbox of size %@"));
  v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
  (*(void (**)(uint64_t, _QWORD, void *))(v23 + 16))(v23, 0, v28);

LABEL_11:
}

void sub_100024470(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;

  v10 = a2;
  v11 = a5;
  v12 = a6;
  v13 = v12;
  if (!v10 || v12)
  {
    v20 = *(_QWORD *)(a1 + 32);
    v21 = SESEnsureError(v12);
    v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    (*(void (**)(uint64_t, _QWORD, void *))(v20 + 16))(v20, 0, v22);

  }
  else
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a4, "instance"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "identifier"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "hexStringAsData"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "publicKeyIdentifier"));
    v23 = 0;
    v18 = sub_1000442D8(v10, v16, v17, &v23);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v13 = v23;

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_100024708(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;

  v27 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  v15 = a6;
  if (v15)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 48);
    if (v27 && v12 && v13)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "instance"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "identifier"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "hexStringAsData"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "publicKeyIdentifier"));
      v21 = sub_10004448C(v27, v19, v20, *(void **)(a1 + 32), *(void **)(a1 + 40), *(_WORD *)(a1 + 56));
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v22);

    }
    else
    {
      v23 = SESDefaultLogObject(v27, v14);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      v25 = SESCreateAndLogError(0, v24, SESErrorDomain, 0, CFSTR("Got nil from endPointAction secureElement %d endPointEntity %d endPoint %d"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v26);

    }
  }

}

void sub_100024A48(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  _QWORD v54[5];
  id v55;
  id v56;
  id v57;
  __int128 *p_buf;
  _QWORD v59[2];
  uint8_t v60[4];
  void *v61;
  __int128 buf;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  void (*v65)(uint64_t);
  id v66;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v16 = a6;
  if (v16)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    goto LABEL_23;
  }
  if (!v11 || !v13 || !v14)
  {
    v25 = *(_QWORD *)(a1 + 56);
    v26 = SESDefaultLogObject(0, v15);
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    v28 = SESCreateAndLogError(0, v27, SESErrorDomain, 0, CFSTR("Got nil from endPointAction secureElement %d endPointEntity %d endPoint %d"));
    v29 = objc_claimAutoreleasedReturnValue(v28);
LABEL_12:
    v33 = (void *)v29;
    (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v25, v29);

    goto LABEL_23;
  }
  v17 = objc_msgSend(v14, "endPointType");
  if (v17 != (id)2)
  {
    v25 = *(_QWORD *)(a1 + 56);
    v30 = SESDefaultLogObject(v17, v18);
    v27 = (void *)objc_claimAutoreleasedReturnValue(v30);
    v31 = SESErrorDomain;
    objc_msgSend(v14, "endPointType");
    v32 = SESCreateAndLogError(0, v27, v31, 0, CFSTR("Endpoint type %ld"));
    v29 = objc_claimAutoreleasedReturnValue(v32);
    goto LABEL_12;
  }
  v19 = objc_msgSend(objc_alloc((Class)NSData), "initWithBase64EncodedData:options:", *(_QWORD *)(a1 + 32), 0);
  v21 = v19;
  if (v19)
  {
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v63 = 0x3032000000;
    v64 = sub_100019AD0;
    v65 = sub_100019AE0;
    v66 = 0;
    v59[0] = objc_msgSend(v19, "DERItem");
    v59[1] = v22;
    v54[0] = _NSConcreteStackBlock;
    v54[1] = 3221225472;
    v54[2] = sub_100024EC8;
    v54[3] = &unk_100303DA8;
    v23 = *(_QWORD *)(a1 + 40);
    p_buf = &buf;
    v54[4] = v23;
    v55 = v11;
    v56 = v13;
    v57 = *(id *)(a1 + 48);
    v24 = DERDecodeSequenceWithBlock((uint64_t)v59, (uint64_t)v54);
    if (*(_QWORD *)(*((_QWORD *)&buf + 1) + 40) || !(_DWORD)v24)
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    }
    else
    {
      v44 = SESDefaultLogObject(v24, 0);
      v45 = objc_claimAutoreleasedReturnValue(v44);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "asHexString"));
        *(_DWORD *)v60 = 138412290;
        v61 = v46;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "Invalid content was %@", v60, 0xCu);

      }
      v47 = *(_QWORD *)(a1 + 56);
      v50 = SESDefaultLogObject(v48, v49);
      v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
      v52 = SESCreateAndLogError(0, v51, SESErrorDomain, 1, CFSTR("Mailbox decoding failed %d"));
      v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
      (*(void (**)(uint64_t, void *))(v47 + 16))(v47, v53);

    }
    _Block_object_dispose(&buf, 8);

  }
  else
  {
    v34 = SESDefaultLogObject(0, v20);
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(0, "asHexString"));
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "Failed to base64 decode %@", (uint8_t *)&buf, 0xCu);

    }
    v37 = *(_QWORD *)(a1 + 56);
    v40 = SESDefaultLogObject(v38, v39);
    v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
    v42 = SESCreateAndLogError(0, v41, SESErrorDomain, 1, CFSTR("Failed to base64 decode input data!"));
    v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
    (*(void (**)(uint64_t, void *))(v37 + 16))(v37, v43);

  }
LABEL_23:

}

void sub_100024E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100024EC8(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*a2 == 0xE000000000000002)
  {
    v11 = a2 + 1;
    v12 = *(void **)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 40);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "instance"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_applyConfidentialMailboxContents:secureElement:instanceAID:keyIdentifier:", v11, v13, v9, *(_QWORD *)(a1 + 56)));
    goto LABEL_5;
  }
  if (*a2 == 0xE000000000000001)
  {
    v5 = a2 + 1;
    v6 = *(void **)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "instance"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_applyPrivateMailboxContents:secureElement:instanceAID:keyIdentifier:", v5, v7, v9, *(_QWORD *)(a1 + 56)));
LABEL_5:
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v15 = *(void **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v10;

    goto LABEL_7;
  }
  v16 = SESDefaultLogObject(a1, a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v16);
  v17 = SESCreateAndLogError(0, v8, SESErrorDomain, 1, CFSTR("Unknown tag in MailboxContents 0x%llX"));
  v18 = objc_claimAutoreleasedReturnValue(v17);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v9 = *(void **)(v19 + 40);
  *(_QWORD *)(v19 + 40) = v18;
LABEL_7:

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
    return 0;
  *a3 = 1;
  return 0xFFFFFFFFLL;
}

void sub_10002552C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  unint64_t v61;
  unsigned __int16 *v62;
  uint64_t v63;
  _QWORD v64[2];
  id v65;
  _QWORD v66[8];
  uint8_t buf[4];
  void *v68;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = v15;
  if (!v11 || v15)
  {
    v42 = *(_QWORD *)(a1 + 40);
    v43 = SESEnsureError(v15);
    v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
    (*(void (**)(uint64_t, _QWORD, void *))(v42 + 16))(v42, 0, v44);

  }
  else
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSData randomData:](NSData, "randomData:", 16));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &unk_100286E2D, 1));
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &unk_100286E2E, 1));
    v59 = v18;
    v66[0] = objc_msgSend(v18, "DERItem");
    v66[1] = v20;
    v60 = v17;
    v66[2] = objc_msgSend(v17, "DERItem");
    v66[3] = v21;
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "publicKeyIdentifier"));
    v66[4] = objc_msgSend(v22, "DERItem");
    v66[5] = v23;
    v58 = v19;
    v66[6] = objc_msgSend(v19, "DERItem");
    v66[7] = v24;

    v25 = encodeSequence(v66, 4, &unk_100286E30);
    v27 = (void *)objc_claimAutoreleasedReturnValue(v25);
    if (v27)
    {
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "appletIdentifier"));
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "asHexString"));
      v30 = *(void **)(a1 + 32);
      v65 = 0;
      v31 = sub_10005422C(v11, v29, v27, v30, &v65);
      v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      v16 = v65;

      if (!v32 || v16)
      {
        v49 = *(_QWORD *)(a1 + 40);
        v50 = SESDefaultLogObject(v33, v34);
        v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
        v52 = SESCreateAndLogError(0, v51, SESErrorDomain, 0, CFSTR("Failed to sendOpaque"));
        v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
        (*(void (**)(uint64_t, _QWORD, void *))(v49 + 16))(v49, 0, v53);

      }
      else
      {
        v64[0] = objc_msgSend(v32, "DERItem");
        v64[1] = v35;
        v61 = 0;
        v62 = 0;
        v63 = 0;
        v36 = DERDecodeItem((uint64_t)v64, &v61);
        if (!(_DWORD)v36 && v61 == 0xE00000000000000ALL && v63 == 4)
        {
          v38 = (void *)objc_claimAutoreleasedReturnValue(+[SEEndPointCreateAuthorizationIDResponse withAuthorizationID:authorizationInterval:authorizationCount:](SEEndPointCreateAuthorizationIDResponse, "withAuthorizationID:authorizationInterval:authorizationCount:", v60, 1, (double)(bswap32(v62[1]) >> 16) + (double)(bswap32(*v62) >> 16) * 3600.0));
          v40 = SESDefaultLogObject(v38, v39);
          v41 = objc_claimAutoreleasedReturnValue(v40);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v68 = v38;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
          }

          (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
        }
        else
        {
          v54 = *(_QWORD *)(a1 + 40);
          v55 = SESDefaultLogObject(v36, v37);
          v38 = (void *)objc_claimAutoreleasedReturnValue(v55);
          v56 = SESCreateAndLogError(0, v38, SESErrorDomain, 0, CFSTR("Missing or bad 0xEA from opaque %@ (%d)"));
          v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
          (*(void (**)(uint64_t, _QWORD, void *))(v54 + 16))(v54, 0, v57);

        }
      }
    }
    else
    {
      v45 = *(_QWORD *)(a1 + 40);
      v46 = SESDefaultLogObject(0, v26);
      v32 = (void *)objc_claimAutoreleasedReturnValue(v46);
      v47 = SESCreateAndLogError(0, v32, SESErrorDomain, 0, CFSTR("Failed to encode opaque payload sequence"));
      v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
      (*(void (**)(uint64_t, _QWORD, void *))(v45 + 16))(v45, 0, v48);

      v16 = 0;
    }

  }
}

void sub_100025A50(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000809434343444B417631"), "hexStringAsData"));
    v11 = 0;
    v9 = sub_100047670(v5, v8, &v11);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v7 = v11;

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_100025C5C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (v8 && !v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000809434343444B417631"), "hexStringAsData"));
    v7 = sub_100047CB4(v8, v6, *(void **)(a1 + 32));
    v5 = (id)objc_claimAutoreleasedReturnValue(v7);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100025ED0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  v16 = a2;
  v9 = a6;
  if (a5 && v16 && !v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a5, "appletIdentifier"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "hexStringAsData"));
    v12 = sub_1000447AC(v16, v10, v11, *(void **)(a1 + 40));
    v9 = (id)objc_claimAutoreleasedReturnValue(v12);

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 48);
    v14 = SESEnsureError(v9);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v15);

  }
}

void sub_1000262D4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  unint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  void (*v59)(void);
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  uint8_t buf[4];
  id v74;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = v15;
  if (v11 && !v15)
  {
    if (*(_WORD *)(a1 + 104))
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "confidentialMailBoxSize"));
      v18 = objc_msgSend(v17, "unsignedIntegerValue");
      v19 = *(unsigned __int16 *)(a1 + 106) + (unint64_t)*(unsigned __int16 *)(a1 + 104);

      if ((unint64_t)v18 < v19)
      {
        v22 = *(_QWORD *)(a1 + 96);
        v23 = SESDefaultLogObject(v20, v21);
        v24 = (id)objc_claimAutoreleasedReturnValue(v23);
        v25 = SESErrorDomain;
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "confidentialMailBoxSize"));
        v27 = SESCreateAndLogError(0, v24, v25, 1, CFSTR("Cannot write data of length %u at offset %u into mailbox of size %@"));
        v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
        (*(void (**)(uint64_t, _QWORD, void *))(v22 + 16))(v22, 0, v28);

LABEL_19:
LABEL_20:

        goto LABEL_21;
      }
    }
    v32 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "validateAuthorizedEndpointConfig:", *(_QWORD *)(a1 + 32)));
    if (v32)
    {
      v16 = (void *)v32;
      (*(void (**)(void))(*(_QWORD *)(a1 + 96) + 16))();
      goto LABEL_9;
    }
    v33 = *(_QWORD *)(a1 + 40);
    if (v33 && *(_QWORD *)(a1 + 48))
    {
      v72 = 0;
      v34 = sub_100047DE8(v33, &v72);
      v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
      v36 = v72;
      v24 = v36;
      if (!v35 || v36)
      {
        v60 = *(_QWORD *)(a1 + 96);
        v61 = SESEnsureError(v36);
        v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
        (*(void (**)(uint64_t, _QWORD, void *))(v60 + 16))(v60, 0, v62);
      }
      else
      {
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "sha256"));
        v38 = objc_msgSend(v37, "isEqualToData:", v35);

        if ((v38 & 1) != 0)
        {

          goto LABEL_16;
        }
        v63 = *(_QWORD *)(a1 + 96);
        v64 = SESDefaultLogObject(v39, v40);
        v62 = (void *)objc_claimAutoreleasedReturnValue(v64);
        v69 = SESErrorDomain;
        v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "asHexString"));
        v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "asHexString"));
        v65 = SESCreateAndLogError(0, v62, v69, 8, CFSTR("Invalid binding attestation token KML : %@, BA : %@"));
        v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
        (*(void (**)(uint64_t, _QWORD, void *))(v63 + 16))(v63, 0, v66);

      }
      goto LABEL_20;
    }
LABEL_16:
    v41 = *(unsigned __int8 *)(a1 + 108);
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "instance"));
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "identifier"));
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "hexStringAsData"));
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "publicKeyIdentifier"));
    v46 = *(void **)(a1 + 56);
    v47 = *(void **)(a1 + 64);
    v48 = *(void **)(a1 + 32);
    v49 = *(void **)(a1 + 40);
    HIDWORD(v50) = *(_DWORD *)(a1 + 104);
    LODWORD(v50) = HIDWORD(v50);
    v51 = *(void **)(a1 + 72);
    v52 = *(void **)(a1 + 80);
    v53 = *(void **)(a1 + 88);
    v71 = 0;
    v54 = sub_1000449A0(v11, v41, v44, v45, v46, v47, v48, v51, v49, SBYTE6(v50), SHIBYTE(v50), (v50 >> 16) >> 16, v52, v53, &v71);
    v70 = objc_claimAutoreleasedReturnValue(v54);
    v24 = v71;

    v57 = SESDefaultLogObject(v55, v56);
    v58 = objc_claimAutoreleasedReturnValue(v57);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v74 = v24;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "Endpoint authorize error %@", buf, 0xCu);
    }

    v59 = *(void (**)(void))(*(_QWORD *)(a1 + 96) + 16);
    v26 = (void *)v70;
    v59();
    goto LABEL_19;
  }
  v29 = *(_QWORD *)(a1 + 96);
  v30 = SESEnsureError(v15);
  v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
  (*(void (**)(uint64_t, _QWORD, void *))(v29 + 16))(v29, 0, v31);

LABEL_9:
LABEL_21:

}

void sub_1000268B0(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  CFTypeID TypeID;
  uint64_t v15;
  void *v16;
  CFTypeID v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  CFTypeRef result;
  _QWORD v31[4];
  _QWORD v32[4];

  v7 = a4;
  v8 = a5;
  if (v8)
  {
    v9 = v8;
    (*(void (**)(void))(a1[6] + 16))();
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "privacyKeyIdentifier"));

    if (v10)
    {
      v32[0] = kSecClassKey;
      v31[0] = kSecClass;
      v31[1] = kSecAttrApplicationTag;
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "privacyKeyIdentifier"));
      v32[1] = v13;
      v32[2] = &__kCFBooleanTrue;
      v31[2] = kSecUseDataProtectionKeychain;
      v31[3] = kSecReturnRef;
      v32[3] = &__kCFBooleanTrue;
      v9 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v32, v31, 4));

      result = 0;
      TypeID = SecItemCopyMatching(v9, &result);
      v16 = (void *)result;
      if (!(_DWORD)TypeID && result && (v17 = CFGetTypeID(result), TypeID = SecKeyGetTypeID(), v17 == TypeID))
      {
        v18 = a1[4];
        v19 = a1[5];
        v29 = 0;
        v20 = decryptPrivacyData(v16, v18, v19, &v29);
        v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
        v22 = v29;
        (*(void (**)(_QWORD, id, void *))(a1[6] + 16))(a1[6], v22, v21);
      }
      else
      {
        v23 = a1[6];
        v24 = SESDefaultLogObject(TypeID, v15);
        v21 = (void *)objc_claimAutoreleasedReturnValue(v24);
        v25 = SESCreateAndLogError(0, v21, SESErrorDomain, 0, CFSTR("Could not retrieve endPoint long term privacy key %d"));
        v22 = (id)objc_claimAutoreleasedReturnValue(v25);
        (*(void (**)(uint64_t, _QWORD, id))(v23 + 16))(v23, 0, v22);
      }

    }
    else
    {
      v26 = a1[6];
      v27 = SESDefaultLogObject(v11, v12);
      v9 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(v27);
      v28 = SESCreateAndLogError(0, v9, SESErrorDomain, 0, CFSTR("Could not decrypt privacy data, endPoint privacyKey isn't set"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(v28);
      (*(void (**)(uint64_t, _QWORD, void *))(v26 + 16))(v26, 0, v16);
    }

  }
}

void sub_100026FD0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;

  v7 = a5;
  if (v7)
  {
    v8 = v7;
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "privacyEncryptionPK"));
    if (v10)
    {
      v11 = *(_QWORD *)(a1 + 40);
      v23 = 0;
      v24 = 0;
      v12 = encryptPrivacyData(v11, v10, &v24, &v23);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v13 = v24;
      v14 = v23;
      v15 = *(_QWORD *)(a1 + 48);
      if (v8)
      {
        (*(void (**)(uint64_t, _QWORD, void *))(v15 + 16))(v15, 0, v8);
      }
      else
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "sha256"));
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[SEEndPointPrivacyEncryptResponse responseWithCipherText:ephemeralPublicKeyData:receiverPublicKeyHash:](SEEndPointPrivacyEncryptResponse, "responseWithCipherText:ephemeralPublicKeyData:receiverPublicKeyHash:", v14, v13, v21));
        (*(void (**)(uint64_t, void *, _QWORD))(v15 + 16))(v15, v22, 0);

      }
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 48);
      v17 = SESDefaultLogObject(0, v9);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v19 = SESCreateAndLogError(0, v18, SESErrorDomain, 0, CFSTR("No privacy encryption PK for endpoint %@"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      (*(void (**)(uint64_t, _QWORD, void *))(v16 + 16))(v16, 0, v20);

      v8 = 0;
    }

  }
}

void sub_1000277E8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  const char *v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[4];
  id v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  void (*v57)(uint64_t);
  id v58;
  uint8_t buf[4];
  uint64_t v60;
  __int16 v61;
  void *v62;
  __int16 v63;
  uint64_t v64;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v17 = v15;
  if (!v11 || v15)
  {
    v27 = *(_QWORD *)(a1 + 48);
    v33 = SESDefaultLogObject(v15, v16);
    v30 = (void *)objc_claimAutoreleasedReturnValue(v33);
    v34 = SESCreateAndLogError(0, v30, SESErrorDomain, objc_msgSend(v17, "code"), CFSTR("While deleting key"));
    v32 = objc_claimAutoreleasedReturnValue(v34);
    goto LABEL_8;
  }
  if (*(_BYTE *)(a1 + 56))
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "revocationAttestation"));

    if (!v18)
    {
      v47 = *(_QWORD *)(a1 + 48);
      v48 = SESDefaultLogObject(v19, v20);
      v17 = (void *)objc_claimAutoreleasedReturnValue(v48);
      v49 = SESCreateAndLogError(0, v17, SESErrorDomain, 8, CFSTR("Refusing to delete key %@ not in terminated state!"));
      v30 = (void *)objc_claimAutoreleasedReturnValue(v49);
      (*(void (**)(uint64_t, void *))(v47 + 16))(v47, v30);
      goto LABEL_9;
    }
  }
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "instance"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "identifier"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "hexStringAsData"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "publicKeyIdentifier"));
  v25 = sub_100042AB0(v11, v23, v24);
  v17 = (void *)objc_claimAutoreleasedReturnValue(v25);

  if (v17)
  {
    v26 = sub_1000162EC((uint64_t)v12, v11, 1);
    v27 = *(_QWORD *)(a1 + 48);
    v29 = SESDefaultLogObject(v26, v28);
    v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    v31 = SESCreateAndLogError(0, v30, SESErrorDomain, objc_msgSend(v17, "code"), CFSTR("While deleting key from the SE"));
    v32 = objc_claimAutoreleasedReturnValue(v31);
LABEL_8:
    v35 = (void *)v32;
    (*(void (**)(uint64_t, uint64_t))(v27 + 16))(v27, v32);

LABEL_9:
    goto LABEL_10;
  }
  v36 = objc_msgSend(v14, "deleteEndPointLongTermPrivacyKey");
  v53 = 0;
  v54 = &v53;
  v55 = 0x3032000000;
  v56 = sub_100019AD0;
  v57 = sub_100019AE0;
  v58 = 0;
  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3221225472;
  v50[2] = sub_100027BD0;
  v50[3] = &unk_1003036E0;
  v51 = v13;
  v52 = &v53;
  sub_1000168E4((uint64_t)v12, v50);
  v39 = SESDefaultLogObject(v37, v38);
  v40 = objc_claimAutoreleasedReturnValue(v39);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
  {
    v42 = *(_QWORD *)(a1 + 32);
    v43 = sub_10003407C(*(id *)(a1 + 40), v41);
    v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
    v45 = v54[5];
    *(_DWORD *)buf = 138412802;
    v60 = v42;
    v61 = 2112;
    v62 = v44;
    v63 = 2112;
    v64 = v45;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "Removed key %@ client %@ error %@", buf, 0x20u);

  }
  v46 = sub_1000162EC((uint64_t)v12, v11, 1);
  +[EndpointStore removeWithEndpoint:](_TtC10seserviced13EndpointStore, "removeWithEndpoint:", v14);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  _Block_object_dispose(&v53, 8);
LABEL_10:

}

void sub_100027BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100027BD0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = a2;
  v4 = sub_10002BA88((uint64_t)v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v5, "deleteObject:", *(_QWORD *)(a1 + 32));

  v6 = sub_10002BA94((uint64_t)v3);
  v7 = objc_claimAutoreleasedReturnValue(v6);

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_100027E80(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSMutableArray *v29;
  void *v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  NSMutableArray *v68;
  void *v69;
  void *v70;
  id v71;
  id v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  id v77;
  uint8_t v78[128];
  uint8_t buf[4];
  void *v80;

  v11 = a2;
  v71 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  v16 = v14;
  if (!v14)
  {
    if (!v11 || !v71 || !v12 || !v13)
    {
      v25 = *(_QWORD *)(a1 + 72);
      v26 = SESDefaultLogObject(0, v15);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v26);
      v27 = SESCreateAndLogError(0, v24, SESErrorDomain, 0, CFSTR("Got nil from endPointAction secureElement %d database %d endPointEntity %d endPoint %d"));
      v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      (*(void (**)(uint64_t, _QWORD, void *))(v25 + 16))(v25, 0, v28);

      goto LABEL_10;
    }
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "revocationAttestation"));

    if (v22)
    {
      v23 = *(_QWORD *)(a1 + 72);
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "revocationAttestation"));
      (*(void (**)(uint64_t, void *, _QWORD))(v23 + 16))(v23, v24, 0);
LABEL_10:

      goto LABEL_11;
    }
    v70 = v13;
    v29 = objc_opt_new(NSMutableArray);
    v30 = *(void **)(a1 + 40);
    v69 = v12;
    if (v30)
    {
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "signatureVerificationPK"));
      v77 = 0;
      v32 = sub_100046EA4(v30, v31, &v77);
      v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      v34 = v77;

      if (!v33 || v34)
      {
        v40 = v34;
        v52 = SESDefaultLogObject(v40, v51);
        v53 = objc_claimAutoreleasedReturnValue(v52);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "Failed to verify remote termination request!", buf, 2u);
        }
        v36 = v11;

        v56 = SESDefaultLogObject(v54, v55);
        v57 = objc_claimAutoreleasedReturnValue(v56);
        if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
        {
          v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "base64EncodedStringWithOptions:", 0));
          *(_DWORD *)buf = 138412290;
          v80 = v58;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "RTR %@", buf, 0xCu);

        }
        v61 = SESDefaultLogObject(v59, v60);
        v62 = objc_claimAutoreleasedReturnValue(v61);
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
        {
          v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "signatureVerificationPK"));
          v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "asHexString"));
          *(_DWORD *)buf = 138412290;
          v80 = v64;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "PK %@", buf, 0xCu);

        }
        (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
        v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "readerInfo"));
        v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "bleAddress"));
        if (v66)
          v67 = 3;
        else
          v67 = 1;
        sub_100049548((uint64_t)SESDAnalyticsLogger, 2, v65, v67, 1);

        v41 = 0;
        goto LABEL_39;
      }
      -[NSMutableArray addObjectsFromArray:](v29, "addObjectsFromArray:", v33);

    }
    else
    {
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "hexStringAsData"));
      -[NSMutableArray addObject:](v29, "addObject:", v35);

    }
    v36 = v11;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v68 = v29;
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v29));
    v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v73, v78, 16);
    if (v38)
    {
      v39 = v38;
      v40 = 0;
      v41 = 0;
      v42 = *(_QWORD *)v74;
      do
      {
        v43 = 0;
        v44 = v41;
        do
        {
          if (*(_QWORD *)v74 != v42)
            objc_enumerationMutation(v37);
          v45 = *(_QWORD *)(*((_QWORD *)&v73 + 1) + 8 * (_QWORD)v43);
          v46 = *(void **)(a1 + 48);
          v47 = *(_QWORD *)(a1 + 56);
          v48 = *(_QWORD *)(a1 + 64);
          v72 = 0;
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "revokeRemoteTerminationRequestEndPoints:sesDatabase:identifier:taskID:clientInfo:outError:", v36, v71, v45, v47, v48, &v72));
          v49 = v72;

          if (v49)
          {
            v50 = v49;

            v40 = v50;
          }

          v43 = (char *)v43 + 1;
          v44 = v41;
        }
        while (v39 != v43);
        v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v73, v78, 16);
      }
      while (v39);
    }
    else
    {
      v40 = 0;
      v41 = 0;
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
    v29 = v68;
LABEL_39:

    v11 = v36;
    v12 = v69;
    v13 = v70;
    v16 = 0;
    goto LABEL_11;
  }
  v17 = *(_QWORD *)(a1 + 72);
  v18 = SESDefaultLogObject(v14, v15);
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  v20 = SESCreateAndLogError(0, v19, SESErrorDomain, objc_msgSend(v16, "code"), CFSTR("While revoking %@"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  (*(void (**)(uint64_t, _QWORD, void *))(v17 + 16))(v17, 0, v21);

LABEL_11:
}

void sub_100028A90(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 40);
    v10 = SESDefaultLogObject(v6, v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = SESCreateAndLogError(0, v11, SESErrorDomain, 0, CFSTR("Failed to get database service"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    (*(void (**)(uint64_t, _QWORD, void *))(v9 + 16))(v9, 0, v13);

  }
  else
  {
    v14 = sub_10003407C(*(id *)(a1 + 32), v7);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v25 = 0;
    v16 = sub_10001718C((uint64_t)v5, v15, &v25);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v8 = v25;

    v20 = *(_QWORD *)(a1 + 40);
    if (v8)
    {
      v21 = SESDefaultLogObject(v18, v19);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v23 = SESCreateAndLogError(0, v22, SESErrorDomain, 0, CFSTR("Failed to get invitations"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      (*(void (**)(uint64_t, _QWORD, void *))(v20 + 16))(v20, 0, v24);

    }
    else
    {
      (*(void (**)(uint64_t, void *, _QWORD))(v20 + 16))(v20, v17, 0);
    }

  }
}

void sub_100028D74(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 48);
    v10 = SESDefaultLogObject(v6, v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = SESCreateAndLogError(0, v11, SESErrorDomain, 0, CFSTR("Failed to get database service"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    (*(void (**)(uint64_t, _QWORD, void *))(v9 + 16))(v9, 0, v13);

  }
  else
  {
    v14 = *(void **)(a1 + 32);
    v15 = sub_10003407C(*(id *)(a1 + 40), v7);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v26 = 0;
    v17 = sub_1000172B8((uint64_t)v5, v14, v16, &v26);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v8 = v26;

    v21 = *(_QWORD *)(a1 + 48);
    if (v8)
    {
      v22 = SESDefaultLogObject(v19, v20);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      v24 = SESCreateAndLogError(0, v23, SESErrorDomain, 0, CFSTR("Failed to get invitation with identifier %@"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      (*(void (**)(uint64_t, _QWORD, void *))(v21 + 16))(v21, 0, v25);

    }
    else
    {
      (*(void (**)(_QWORD, void *, _QWORD))(v21 + 16))(*(_QWORD *)(a1 + 48), v18, 0);
    }

  }
}

void sub_100029080(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  id v18;

  v18 = a2;
  v5 = a3;
  if (v5)
  {
    v7 = v5;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = SESDefaultLogObject(v5, v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = SESCreateAndLogError(0, v10, SESErrorDomain, 0, CFSTR("Failed to get database service"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v12);

  }
  else
  {
    v13 = *(void **)(a1 + 32);
    v14 = *(void **)(a1 + 40);
    v15 = sub_10003407C(*(id *)(a1 + 48), v6);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v17 = sub_10001743C(v18, v13, v14, v16);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v17);

    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_1000292E4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (v5)
  {
    v7 = v5;
    v8 = *(_QWORD *)(a1 + 48);
    v9 = SESDefaultLogObject(v5, v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = SESCreateAndLogError(0, v10, SESErrorDomain, 0, CFSTR("Failed to get database service"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v12);

  }
  else
  {
    v13 = *(void **)(a1 + 32);
    v14 = sub_10003407C(*(id *)(a1 + 40), v6);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = sub_100017818(v17, v13, v15);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v16);

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_100029544(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 48);
    v10 = SESDefaultLogObject(v6, v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = SESCreateAndLogError(0, v11, SESErrorDomain, 0, CFSTR("Failed to get database service"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    (*(void (**)(uint64_t, _QWORD, void *))(v9 + 16))(v9, 0, v13);

  }
  else
  {
    v14 = *(void **)(a1 + 32);
    v15 = sub_10003407C(*(id *)(a1 + 40), v7);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v26 = 0;
    v17 = sub_10004B984((uint64_t)v5, v14, v16, &v26);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v8 = v26;

    v21 = *(_QWORD *)(a1 + 48);
    if (v8)
    {
      v22 = SESDefaultLogObject(v19, v20);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      v24 = SESCreateAndLogError(0, v23, SESErrorDomain, 0, CFSTR("Failed to get endpointId"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      (*(void (**)(uint64_t, _QWORD, void *))(v21 + 16))(v21, 0, v25);

    }
    else
    {
      (*(void (**)(uint64_t, void *, _QWORD))(v21 + 16))(v21, v18, 0);
    }

  }
}

void sub_100029848(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  id v18;

  v18 = a2;
  v5 = a3;
  if (v5)
  {
    v7 = v5;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = SESDefaultLogObject(v5, v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = SESCreateAndLogError(0, v10, SESErrorDomain, 0, CFSTR("Failed to get database service"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v12);

  }
  else
  {
    v13 = *(void **)(a1 + 32);
    v14 = *(void **)(a1 + 40);
    v15 = sub_10003407C(*(id *)(a1 + 48), v6);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v17 = sub_10004BAF8(v18, v13, v14, v16);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v17);

    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_100029AAC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (v5)
  {
    v7 = v5;
    v8 = *(_QWORD *)(a1 + 48);
    v9 = SESDefaultLogObject(v5, v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = SESCreateAndLogError(0, v10, SESErrorDomain, 0, CFSTR("Failed to get database service"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v12);

  }
  else
  {
    v13 = *(void **)(a1 + 32);
    v14 = sub_10003407C(*(id *)(a1 + 40), v6);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = sub_10004BD88(v17, v13, v15);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v16);

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_100029D98(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  const char *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  NSData *v37;
  uint64_t v38;
  const char *v39;
  id v40;
  void *v41;
  NSData *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  id v46;
  id v47;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v11 = v9;
  if (v8 && v7 && !v9)
  {
    v12 = *(void **)(a1 + 32);
    v13 = sub_10003407C(*(id *)(a1 + 40), v10);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v47 = 0;
    v15 = sub_100040494((uint64_t)v8, v12, v14, &v47);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v11 = v47;

    if (v11)
    {
      v19 = *(_QWORD *)(a1 + 56);
      v20 = SESDefaultLogObject(v17, v18);
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      v22 = SESCreateAndLogError(0, v21, SESErrorDomain, 0, CFSTR("Failed to retrieve CA entity for %@"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      (*(void (**)(uint64_t, _QWORD, void *))(v19 + 16))(v19, 0, v23);
    }
    else
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "database"));
      v46 = 0;
      v28 = sub_100040628((uint64_t)v27, v16, &v46);
      v21 = (void *)objc_claimAutoreleasedReturnValue(v28);
      v11 = v46;

      if (v11)
      {
        v31 = *(_QWORD *)(a1 + 56);
        v32 = SESDefaultLogObject(v29, v30);
        v23 = (void *)objc_claimAutoreleasedReturnValue(v32);
        v33 = SESCreateAndLogError(0, v23, SESErrorDomain, 0, CFSTR("Failed to retrieve endpoint CA for %@ from entity"));
        v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
        (*(void (**)(uint64_t, _QWORD, void *))(v31 + 16))(v31, 0, v34);
      }
      else
      {
        v35 = sub_10005066C(v7, v30);
        v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
        v37 = (NSData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "casdCertificate"));
        v38 = DERDecodeData(v37);
        v23 = (void *)objc_claimAutoreleasedReturnValue(v38);

        v40 = sub_10005066C(v7, v39);
        v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
        v42 = (NSData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "casdCertificateRSA"));
        v43 = DERDecodeData(v42);
        v34 = (void *)objc_claimAutoreleasedReturnValue(v43);

        v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "secureElementAttestation"));
        v45 = (void *)objc_claimAutoreleasedReturnValue(+[SEEndPointBindingAttestationRequestItems withSubCAAttestation:casdECDSACertificate:casdRSACertificate:](SEEndPointBindingAttestationRequestItems, "withSubCAAttestation:casdECDSACertificate:casdRSACertificate:", v44, v23, v34));

        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
      }

    }
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 56);
    v25 = SESEnsureError(v9);
    v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    (*(void (**)(uint64_t, _QWORD, void *))(v24 + 16))(v24, 0, v26);

  }
}

void sub_10002A1E4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  void *v19;
  void *v20;
  _BOOL8 v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  id v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  void *v44;
  _BYTE v45[128];

  v7 = a2;
  v8 = a4;
  if (v8)
  {
    v9 = v8;
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v40 = 0;
    v10 = sub_100055880(a3, &v40);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = v40;
    v9 = v12;
    if (!v11 || v12)
    {
      v30 = *(_QWORD *)(a1 + 32);
      v31 = SESEnsureError(v12);
      v13 = (id)objc_claimAutoreleasedReturnValue(v31);
      (*(void (**)(uint64_t, _QWORD, id))(v30 + 16))(v30, 0, v13);
    }
    else
    {
      v34 = a1;
      v13 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v11, "count"));
      v36 = 0u;
      v37 = 0u;
      v38 = 0u;
      v39 = 0u;
      v14 = v11;
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v36, v45, 16);
      if (v15)
      {
        v16 = v15;
        v17 = *(_QWORD *)v37;
        while (2)
        {
          for (i = 0; i != v16; i = (char *)i + 1)
          {
            if (*(_QWORD *)v37 != v17)
              objc_enumerationMutation(v14);
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i), "identifier"));
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "hexStringAsData"));

            v35 = 0;
            v21 = sub_100047EFC(v7, v20, &v35);
            v22 = v35;
            if (v22)
            {
              v9 = v22;
              v32 = SESDefaultLogObject(v22, v23);
              v33 = objc_claimAutoreleasedReturnValue(v32);
              if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                v42 = v20;
                v43 = 2112;
                v44 = v9;
                _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Error querying %@ is suspended : %@", buf, 0x16u);
              }

              (*(void (**)(void))(*(_QWORD *)(v34 + 32) + 16))();
              goto LABEL_20;
            }
            v24 = (void *)objc_claimAutoreleasedReturnValue(+[SESEndPointContainerInfo withAppletAID:isSuspended:](SESEndPointContainerInfo, "withAppletAID:isSuspended:", v20, v21));
            objc_msgSend(v13, "addObject:", v24);

          }
          v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v36, v45, 16);
          if (v16)
            continue;
          break;
        }
      }

      v27 = SESDefaultLogObject(v25, v26);
      v28 = objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        v29 = objc_msgSend(v13, "count");
        *(_DWORD *)buf = 67109120;
        LODWORD(v42) = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Returning %d containers", buf, 8u);
      }

      (*(void (**)(void))(*(_QWORD *)(v34 + 32) + 16))();
      v9 = 0;
    }
LABEL_20:

  }
}

void sub_10002A8DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  void *v5;
  const __CFString *v6;
  void *v7;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    (*(void (**)(_QWORD, _QWORD))(v3 + 16))(*(_QWORD *)(a1 + 32), 0);
  }
  else
  {
    v6 = CFSTR("weeksSinceInitialMADownloadAttempt");
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", +[SESMobileAssetClient getWeeksTryingToDownload](SESMobileAssetClient, "getWeeksTryingToDownload")));
    v7 = v4;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));
    (*(void (**)(uint64_t, void *, _QWORD))(v3 + 16))(v3, v5, 0);

  }
}

void sub_10002AC94(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t CertificatePublicKey;
  void *v45;
  void *v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  SecCertificateRef v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _OWORD v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  id v84[2];

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = v15;
  if (v14 && v13 && v12 && v11 && !v15)
  {
    v17 = objc_msgSend(v14, "endPointType");
    if (v17 == (id)1)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "certificates"));
      v20 = objc_msgSend(v19, "count");

      if (v20 == (id)3)
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "appletIdentifier"));
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "hexStringAsData"));
        v25 = *(void **)(a1 + 40);
        v84[0] = 0;
        v26 = sub_100048090(v11, v23, v24, v25, 1u, v84);
        v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        v28 = v84[0];

        if (v28)
        {
          (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
LABEL_22:

          goto LABEL_23;
        }
        CertificatePublicKey = getCertificatePublicKey(v27);
        v45 = (void *)objc_claimAutoreleasedReturnValue(CertificatePublicKey);
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "publicKey"));
        v47 = objc_msgSend(v45, "isEqual:", v46);

        if ((v47 & 1) != 0)
        {
          v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "certificates"));
          v51 = objc_msgSend(v50, "mutableCopy");

          objc_msgSend(v51, "setObject:atIndexedSubscript:", v27, 2);
          objc_msgSend(v14, "setCertificates:", v51);
          v53 = SecCertificateCreateWithData(0, (CFDataRef)v27);
          if (v53)
          {
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v74 = 0u;
            v75 = 0u;
            v72 = 0u;
            v73 = 0u;
            v71 = 0u;
            memset(v70, 0, sizeof(v70));
            v28 = (id)objc_claimAutoreleasedReturnValue(+[SEEndPoint parsePTAExtension:certificate:specification:output:](SEEndPoint, "parsePTAExtension:certificate:specification:output:", CFSTR("1.3.6.1.4.1.41577.5.4"), v53, &off_100303EE0, v70));
            if (v28)
            {
              (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
            }
            else
            {
              v68 = (void *)objc_claimAutoreleasedReturnValue(+[SEEndPointConfiguration configurationWithOpt1:opt2:](SEEndPointConfiguration, "configurationWithOpt1:opt2:", *(unsigned __int8 *)v71, *(unsigned __int8 *)v72));
              objc_msgSend(v14, "setConfiguration:", v68);

              v69 = *(_QWORD *)(a1 + 48);
              v62 = sub_10003B1F0(v12, v13, v14);
              v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
              (*(void (**)(uint64_t, void *))(v69 + 16))(v69, v63);

            }
            goto LABEL_21;
          }
          v67 = *(_QWORD *)(a1 + 48);
          v59 = SESDefaultLogObject(0, v52);
          v66 = (void *)objc_claimAutoreleasedReturnValue(v59);
          v65 = SESErrorDomain;
          v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "base64"));
          v60 = SESCreateAndLogError(0, v66, v65, 0, CFSTR("New certificate not valid %@"));
          v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
          (*(void (**)(uint64_t, void *))(v67 + 16))(v67, v61);

        }
        else
        {
          v54 = *(_QWORD *)(a1 + 48);
          v55 = SESDefaultLogObject(v48, v49);
          v51 = (id)objc_claimAutoreleasedReturnValue(v55);
          v56 = SESErrorDomain;
          v53 = (SecCertificateRef)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "base64"));
          v57 = SESCreateAndLogError(0, v51, v56, 0, CFSTR("New certificate not valid or wrong PK %@"));
          v58 = (void *)objc_claimAutoreleasedReturnValue(v57);
          (*(void (**)(uint64_t, void *))(v54 + 16))(v54, v58);

        }
        v28 = 0;
LABEL_21:

        goto LABEL_22;
      }
      v38 = *(_QWORD *)(a1 + 48);
      v39 = SESDefaultLogObject(v21, v22);
      v34 = (void *)objc_claimAutoreleasedReturnValue(v39);
      v40 = SESErrorDomain;
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "certificates"));
      objc_msgSend(v41, "count");
      v42 = SESCreateAndLogError(0, v34, v40, 0, CFSTR("Unexpected number of endpoint certificates %lu"));
      v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
      (*(void (**)(uint64_t, void *))(v38 + 16))(v38, v43);

    }
    else
    {
      v32 = *(_QWORD *)(a1 + 48);
      v33 = SESDefaultLogObject(v17, v18);
      v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
      v35 = SESErrorDomain;
      objc_msgSend(v14, "endPointType");
      v36 = SESCreateAndLogError(0, v34, v35, 1, CFSTR("Invalid endpoint type %ld"));
      v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
      (*(void (**)(uint64_t, void *))(v32 + 16))(v32, v37);

    }
  }
  else
  {
    v29 = *(_QWORD *)(a1 + 48);
    v30 = SESEnsureError(v15);
    v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    (*(void (**)(uint64_t, void *))(v29 + 16))(v29, v31);

  }
LABEL_23:

}

SESDatabaseTransaction *sub_10002B934(uint64_t a1, void *a2, void *a3)
{
  SESDatabase *v5;
  NSManagedObjectContext *v6;
  SESDatabaseTransaction *v7;
  SESDatabase *database;
  SESDatabase *v9;
  NSManagedObjectContext *managedObjectContext;

  v5 = a2;
  v6 = a3;
  objc_opt_self(a1);
  v7 = objc_opt_new(SESDatabaseTransaction);
  database = v7->_database;
  v7->_database = v5;
  v9 = v5;

  managedObjectContext = v7->_managedObjectContext;
  v7->_managedObjectContext = v6;

  v7->_state = 1;
  return v7;
}

uint64_t sub_10002BA88(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

id sub_10002BA94(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v6;

  if (!a1)
    return 0;
  if (objc_msgSend(*(id *)(a1 + 24), "hasChanges"))
  {
    v2 = *(void **)(a1 + 24);
    v6 = 0;
    v3 = v2;
    objc_msgSend(v3, "save:", &v6);
    v4 = v6;

  }
  else
  {
    v4 = 0;
  }
  *(_DWORD *)(a1 + 8) = 2;
  return v4;
}

id *sub_10002BB14(id *result)
{
  id *v1;

  if (result)
  {
    v1 = result;
    result = (id *)objc_msgSend(result[3], "hasChanges");
    if ((_DWORD)result)
      result = (id *)objc_msgSend(v1[3], "rollback");
    *((_DWORD *)v1 + 2) = 3;
  }
  return result;
}

void sub_10002BBC0(id a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSSet *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;

  v1 = objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___SESSessionManagerInterface));
  v2 = (void *)qword_10034BAF8;
  qword_10034BAF8 = v1;

  v3 = (void *)qword_10034BAF8;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___SESACWGSessionCallbackInterface));
  objc_msgSend(v3, "setInterface:forSelector:argumentIndex:ofReply:", v4, "startSESACWGSession:completion:", 0, 0);

  v5 = (void *)qword_10034BAF8;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[SESACWGSessionInterface interface](SESACWGSessionInterface, "interface"));
  objc_msgSend(v5, "setInterface:forSelector:argumentIndex:ofReply:", v6, "startSESACWGSession:completion:", 0, 1);

  v7 = (void *)qword_10034BAF8;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___SESDCKSessionCallbackInterface));
  objc_msgSend(v7, "setInterface:forSelector:argumentIndex:ofReply:", v8, "startSESDCKSession:completion:", 0, 0);

  v9 = (void *)qword_10034BAF8;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[SESDCKSessionInterface interface](SESDCKSessionInterface, "interface"));
  objc_msgSend(v9, "setInterface:forSelector:argumentIndex:ofReply:", v10, "startSESDCKSession:completion:", 0, 1);

  v11 = (void *)qword_10034BAF8;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___SESRKESessionCallbackInterface));
  objc_msgSend(v11, "setInterface:forSelector:argumentIndex:ofReply:", v12, "startSESRKESession:options:completion:", 0, 0);

  v13 = (void *)qword_10034BAF8;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[SESRKESessionInterface interface](SESRKESessionInterface, "interface"));
  objc_msgSend(v13, "setInterface:forSelector:argumentIndex:ofReply:", v14, "startSESRKESession:options:completion:", 0, 1);

  v15 = (void *)qword_10034BAF8;
  v16 = objc_opt_class(SESVehicleReport);
  v17 = objc_opt_class(NSDictionary);
  v18 = objc_opt_class(NSArray);
  v19 = objc_opt_class(NSNumber);
  v20 = objc_opt_class(NSString);
  v21 = objc_opt_class(NSError);
  v22 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v16, v17, v18, v19, v20, v21, objc_opt_class(NSData), 0);
  v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
  objc_msgSend(v15, "setClasses:forSelector:argumentIndex:ofReply:", v23, "getVehicleReports:", 0, 1);

  v24 = (void *)qword_10034BAF8;
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___SESAssertionCallbackInterface));
  objc_msgSend(v24, "setInterface:forSelector:argumentIndex:ofReply:", v25, "startSESAssertion:withKeyIdentifier:withAppletIdentifier:withOptions:completion:", 0, 0);

  v26 = (void *)qword_10034BAF8;
  v27 = (id)objc_claimAutoreleasedReturnValue(+[SESAssertionInterface interface](SESAssertionInterface, "interface"));
  objc_msgSend(v26, "setInterface:forSelector:argumentIndex:ofReply:", v27, "startSESAssertion:withKeyIdentifier:withAppletIdentifier:withOptions:completion:", 0, 1);

}

void sub_10002BEF4(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___SESSessionManagerCallbackInterface));
  v2 = (void *)qword_10034BB08;
  qword_10034BB08 = v1;

}

BOOL sub_10002BF28(uint64_t a1, id *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  void *v41;
  char v42;
  unint64_t v43[2];
  _QWORD v44[2];
  _OWORD v45[2];
  __int128 v46;
  uint8_t v47[4];
  void *v48;
  uint8_t buf[16];
  __int128 v50;

  objc_opt_self(a1);
  v46 = 0u;
  memset(v45, 0, sizeof(v45));
  v44[0] = objc_msgSend(*a2, "DERItem");
  v44[1] = v3;
  v4 = DERParseSequence((uint64_t)v44, (unsigned __int16)DERNumSignedCertCrlItemSpecs, (uint64_t)&DERSignedCertCrlItemSpecs, (unint64_t)v45, 0x30uLL);
  if ((_DWORD)v4)
  {
    v6 = v4;
    v7 = SESDefaultLogObject(v4, v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v6;
      v9 = "Failed to decode certificate? %d";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, v9, buf, 8u);
    }
  }
  else
  {
    v43[0] = 0;
    v43[1] = 0;
    v42 = 0;
    v10 = DERParseBitString((uint64_t)&v46, v43, &v42);
    if (!(_DWORD)v10)
    {
      *(_OWORD *)buf = 0u;
      v50 = 0u;
      v16 = *((unsigned __int16 *)&ECDSASigValueSpec + 4);
      v17 = ECDSASigValueSpec;
      v18 = DERParseSequence((uint64_t)v43, *((unsigned __int16 *)&ECDSASigValueSpec + 4), ECDSASigValueSpec, (unint64_t)buf, 0x20uLL);
      if ((_DWORD)v18)
      {
        v20 = v18;
        v21 = SESDefaultLogObject(v18, v19);
        v22 = objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v47 = 67109120;
          LODWORD(v48) = v20;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to parse ECDSASigValue? %d", v47, 8u);
        }
        v14 = 0;
      }
      else
      {
        if (!sub_10002C320((uint64_t)SESSignatureFixer, (unint64_t *)buf))
          return 0;
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 1));
        v24 = encodeSequence(buf, v16, v17);
        v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
        objc_msgSend(v23, "appendData:", v25);

        v22 = objc_retainAutorelease(v23);
        *(_QWORD *)&v46 = -[NSObject mutableBytes](v22, "mutableBytes");
        *((_QWORD *)&v46 + 1) = -[NSObject length](v22, "length");
        v26 = encodeSequence(v45, (unsigned __int16)DERNumSignedCertCrlItemSpecs, &unk_100287CA0);
        v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        v14 = v27 != 0;
        v29 = SESDefaultLogObject(v27, v28);
        v30 = objc_claimAutoreleasedReturnValue(v29);
        v31 = v30;
        if (v27)
        {
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v47 = 0;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Fixed incorrect DER encoding on attestation!", v47, 2u);
          }

          v34 = SESDefaultLogObject(v32, v33);
          v35 = objc_claimAutoreleasedReturnValue(v34);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a2, "base64EncodedStringWithOptions:", 0));
            *(_DWORD *)v47 = 138412290;
            v48 = v36;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "%@", v47, 0xCu);

          }
          v39 = SESDefaultLogObject(v37, v38);
          v40 = objc_claimAutoreleasedReturnValue(v39);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
          {
            v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "base64EncodedStringWithOptions:", 0));
            *(_DWORD *)v47 = 138412290;
            v48 = v41;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "%@", v47, 0xCu);

          }
          *a2 = objc_retainAutorelease(v27);
        }
        else
        {
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v47 = 0;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Failed to encode SignedCert?", v47, 2u);
          }

        }
      }

      return v14;
    }
    v12 = v10;
    v13 = SESDefaultLogObject(v10, v11);
    v8 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v12;
      v9 = "Failed to DERParseBitString? %d";
      goto LABEL_7;
    }
  }

  return 0;
}

uint64_t sub_10002C320(uint64_t a1, unint64_t *a2)
{
  int v3;

  objc_opt_self(a1);
  v3 = sub_10002C5C8((uint64_t)SESSignatureFixer, a2);
  return v3 | sub_10002C5C8((uint64_t)SESSignatureFixer, a2 + 2);
}

BOOL sub_10002C36C(uint64_t a1, id *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  void *v27;
  _OWORD v29[2];
  _QWORD v30[2];
  uint8_t buf[4];
  void *v32;

  v3 = objc_opt_self(a1);
  v30[0] = objc_msgSend(*a2, "DERItem");
  v30[1] = v4;
  memset(v29, 0, sizeof(v29));
  v5 = *((unsigned __int16 *)&ECDSASigValueSpec + 4);
  v6 = ECDSASigValueSpec;
  v7 = DERParseSequence((uint64_t)v30, *((unsigned __int16 *)&ECDSASigValueSpec + 4), ECDSASigValueSpec, (unint64_t)v29, 0x20uLL);
  v9 = (_DWORD)v7 == 0;
  if ((_DWORD)v7)
  {
    v10 = v7;
    v11 = SESDefaultLogObject(v7, v8);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v32) = v10;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to parse ECDSASigValue? %d", buf, 8u);
    }
  }
  else
  {
    if (!sub_10002C320(v3, (unint64_t *)v29))
      return 0;
    v13 = encodeSequence(v29, v5, v6);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v16 = SESDefaultLogObject(v14, v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Fixed incorrect DER encoding on signature!", buf, 2u);
    }

    v20 = SESDefaultLogObject(v18, v19);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a2, "base64EncodedStringWithOptions:", 0));
      *(_DWORD *)buf = 138412290;
      v32 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);

    }
    v25 = SESDefaultLogObject(v23, v24);
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "base64EncodedStringWithOptions:", 0));
      *(_DWORD *)buf = 138412290;
      v32 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);

    }
    v12 = objc_retainAutorelease(v14);
    *a2 = v12;
  }

  return v9;
}

uint64_t sub_10002C5C8(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  char v4;
  unint64_t v6;
  unsigned __int8 *v7;
  int v9;

  objc_opt_self(a1);
  v3 = a2[1];
  if (v3 < 2 || (v4 = *(_BYTE *)*a2) != 0)
  {
    v4 = 0;
  }
  else
  {
    v6 = v3 - 1;
    v7 = (unsigned __int8 *)(*a2 + 1);
    while (((char)*v7 & 0x80000000) == 0)
    {
      *a2 = (unint64_t)v7;
      a2[1] = v6;
      if (v6-- <= 1)
      {
        v4 = 1;
        return v4 & 1;
      }
      v9 = *v7++;
      v4 = 1;
      if (v9)
        return v4 & 1;
    }
  }
  return v4 & 1;
}

void sub_10002C67C(id a1)
{
  dispatch_queue_attr_t v1;
  NSObject *v2;
  dispatch_queue_attr_t v3;
  SESDarwinNotificationMonitor *v4;
  dispatch_queue_t v5;
  SESDarwinNotificationMonitor *v6;
  void *v7;
  NSObject *attr;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_USER_INITIATED, 0);
  attr = objc_claimAutoreleasedReturnValue(v3);

  v4 = [SESDarwinNotificationMonitor alloc];
  v5 = dispatch_queue_create("com.apple.seserviced.sesdarwinnotification", attr);
  v6 = -[SESDarwinNotificationMonitor initWithQueue:](v4, "initWithQueue:", v5);
  v7 = (void *)qword_10034BB18;
  qword_10034BB18 = (uint64_t)v6;

}

id sub_10002C808(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleEvent:", a2);
}

void sub_10002CB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10002CB98(_QWORD *a1)
{
  id result;

  objc_msgSend(*(id *)(a1[4] + 16), "setObject:forKey:", a1[5], a1[6]);
  result = objc_msgSend(*(id *)(a1[4] + 24), "containsObject:", a1[6]);
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)(a1[4] + 24), "removeObject:", a1[6]);
    *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 1;
  }
  return result;
}

CFDataRef sub_10002CC34(uint64_t a1, void *a2, _QWORD *a3)
{
  const __CFData *v5;
  int v6;
  CFDataRef v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  CFDataRef v13;

  v5 = a2;
  objc_opt_self(a1);
  v13 = 0;
  v6 = SSEGetSignedDeviceData(v5, &v13);

  if (v6 || (v7 = v13) == 0)
  {
    if (a3)
    {
      v9 = SESDefaultLogObject(v7, v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      v11 = SESCreateAndLogError(0, v10, SESErrorDomain, v6, CFSTR("Failed to get deviceData from SSE %d"));
      *a3 = (id)objc_claimAutoreleasedReturnValue(v11);

    }
    v7 = 0;
  }
  return v7;
}

_QWORD *sub_10002CCE4(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  const __CFString *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v37;
  _QWORD v38[5];
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  void (*v43)(uint64_t);
  NSMutableArray *v44;
  __int128 v45;
  __int128 v46;
  _QWORD v47[2];
  id v48;

  v5 = a1;
  v6 = a2;
  v7 = sub_10002CFE8(0x1002u, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v10 = v8;
  if (v8)
  {
    v48 = 0;
    v11 = sub_1000336E0(v5, v6, v8, 1, &v48);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v13 = v48;
    v15 = v13;
    if (v13)
    {
      if (a3)
      {
        v16 = SESDefaultLogObject(v13, v14);
        v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        v18 = SESErrorDomain;
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "asHexString"));
        v20 = CFSTR("While listing keys: %@");
        v21 = v15;
LABEL_10:
        v29 = SESCreateAndLogError(v21, v17, v18, 0, v20);
        *a3 = (id)objc_claimAutoreleasedReturnValue(v29);

        a3 = 0;
      }
    }
    else
    {
      v47[0] = objc_msgSend(v12, "DERItem");
      v47[1] = v25;
      v45 = 0u;
      v46 = 0u;
      v26 = DERParseSequenceSpec(v47, &off_100303F00, &v45, 32);
      if (!(_DWORD)v26)
      {
        v39 = 0;
        v40 = &v39;
        v41 = 0x3032000000;
        v42 = sub_10002D04C;
        v43 = sub_10002D05C;
        v44 = objc_opt_new(NSMutableArray);
        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3221225472;
        v38[2] = sub_10002D064;
        v38[3] = &unk_1003041E0;
        v38[4] = &v39;
        v30 = DERDecodeSequenceWithBlock((uint64_t)&v46, (uint64_t)v38);
        if ((_DWORD)v30)
        {
          if (a3)
          {
            v32 = SESDefaultLogObject(v30, v31);
            v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
            v34 = SESErrorDomain;
            v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "asHexString"));
            v35 = SESCreateAndLogError(0, v33, v34, 0, CFSTR("Invalid listKeys output %@"));
            *a3 = (id)objc_claimAutoreleasedReturnValue(v35);

            a3 = 0;
          }
        }
        else
        {
          a3 = (id)v40[5];
        }
        _Block_object_dispose(&v39, 8);

        goto LABEL_16;
      }
      if (a3)
      {
        v28 = SESDefaultLogObject(v26, v27);
        v17 = (void *)objc_claimAutoreleasedReturnValue(v28);
        v18 = SESErrorDomain;
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "asHexString"));
        v20 = CFSTR("Invalid listKeys output %@");
        v21 = 0;
        goto LABEL_10;
      }
    }
LABEL_16:

    goto LABEL_17;
  }
  if (a3)
  {
    v22 = SESDefaultLogObject(0, v9);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    v24 = SESCreateAndLogError(0, v23, SESErrorDomain, 7, CFSTR("Could not create listKeysCommandData"));
    *a3 = (id)objc_claimAutoreleasedReturnValue(v24);

    a3 = 0;
  }
LABEL_17:

  return a3;
}

void sub_10002CFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10002CFE8(unsigned int a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;

  v4 = 0;
  if (a2 && a3 && (v5 = encodeSequenceSpec(a2, a3), (v4 = (void *)objc_claimAutoreleasedReturnValue(v5)) == 0))
  {
    v7 = 0;
  }
  else
  {
    v6 = sub_1000317C0(a1, v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  }

  return v7;
}

uint64_t sub_10002D04C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002D05C(uint64_t a1)
{

}

uint64_t sub_10002D064(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithDERItem:](NSData, "dataWithDERItem:", a2 + 8));
  objc_msgSend(v2, "addObject:", v3);

  return 0;
}

id sub_10002D0B4(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, _QWORD *a7)
{
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  void *i;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  char v47;
  void *v48;
  void *v49;
  id v50;
  id *v51;
  id *v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  void *v58;
  id v59;
  id v60;
  uint64_t v61;
  void *j;
  void *v63;
  int v64;
  uint64_t v65;
  void *v66;
  id v67;
  id v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  id v75;
  void *v76;
  void *v77;
  id v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  id *v85;
  uint64_t v86;
  id v88;
  id v89;
  _QWORD *v90;
  id v91;
  id v92;
  id v93;
  void *v94;
  id *v95;
  void *v96;
  void *v97;
  id v98;
  id v99;
  id v100;
  id obj;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  id v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  void *v111;
  _BYTE v112[128];
  _BYTE v113[128];
  _QWORD v114[3];

  v98 = a1;
  v13 = a2;
  v14 = a3;
  v99 = a4;
  v15 = a5;
  v100 = a6;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "dataUsingEncoding:", 4));
  v17 = objc_msgSend(v16, "length");
  if (v17)
  {
    v17 = objc_msgSend(v16, "length");
    if (a7 && (unint64_t)v17 > 0x20)
      goto LABEL_4;
  }
  else if (a7)
  {
LABEL_4:
    v19 = SESDefaultLogObject(v17, v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    v21 = SESErrorDomain;
    v88 = v14;
    v89 = objc_msgSend(v16, "length");
    v22 = SESCreateAndLogError(0, v20, v21, 1, CFSTR("subjectIdentifier: %@ does not meet length requirement (1 <= %lu <= 32) after encoding"));
    *a7 = (id)objc_claimAutoreleasedReturnValue(v22);

  }
  v97 = v16;
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 24352, v16, v88, v89));
  v114[0] = v23;
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedShort:](SESTLV, "TLVWithTag:unsignedShort:", 81, 256));
  v114[1] = v24;
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedShort:](SESTLV, "TLVWithTag:unsignedShort:", 82, 257));
  v114[2] = v25;
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v114, 3));
  v27 = objc_msgSend(v26, "mutableCopy");

  v28 = v27;
  if (objc_msgSend(v15, "length"))
  {
    v29 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 83, v15));
    objc_msgSend(v27, "addObject:", v29);

  }
  v30 = v100;
  if (v100)
  {
    v31 = a7;
    v32 = v27;
    v33 = v15;
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", objc_msgSend(v100, "count")));
    v107 = 0u;
    v108 = 0u;
    v109 = 0u;
    v110 = 0u;
    v35 = v100;
    v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v107, v113, 16);
    if (v36)
    {
      v37 = v36;
      v38 = *(_QWORD *)v108;
      do
      {
        for (i = 0; i != v37; i = (char *)i + 1)
        {
          if (*(_QWORD *)v108 != v38)
            objc_enumerationMutation(v35);
          objc_msgSend(v34, "appendU8:", objc_msgSend(*(id *)(*((_QWORD *)&v107 + 1) + 8 * (_QWORD)i), "unsignedCharValue"));
        }
        v37 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v107, v113, 16);
      }
      while (v37);
    }

    v40 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 85, v34));
    v28 = v32;
    objc_msgSend(v32, "addObject:", v40);

    v15 = v33;
    v30 = v100;
    a7 = v31;
  }
  v41 = v98;
  v42 = v13;
  v43 = sub_10004FBA0(v98, v13);
  v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
  if (!v44)
  {
    v47 = objc_msgSend(v99, "unsignedCharValue");
    v96 = v28;
    v48 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:children:](SESTLV, "TLVWithTag:children:", 32551, v28));
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "asData"));
    v106 = 0;
    v50 = sub_10004F8D8(v98, 128, 193, 0, v47, v49, 0, &v106);
    v51 = (id *)objc_claimAutoreleasedReturnValue(v50);
    v45 = v106;

    v95 = v51;
    if (v45 || !v51)
    {
      v70 = v97;
      v46 = 0;
      if (a7)
        *a7 = objc_retainAutorelease(v45);
      v28 = v96;
      v41 = v98;
      goto LABEL_56;
    }
    v92 = v15;
    v90 = a7;
    v93 = v14;
    v94 = v42;
    v52 = sub_10005582C(v51);
    v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
    v54 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVsWithData:](SESTLV, "TLVsWithData:", v53));

    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    obj = v54;
    v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v102, v112, 16);
    if (v55)
    {
      v56 = v55;
      v57 = 0;
      v58 = 0;
      v59 = 0;
      v60 = 0;
      v61 = *(_QWORD *)v103;
      while (1)
      {
        for (j = 0; j != v56; j = (char *)j + 1)
        {
          if (*(_QWORD *)v103 != v61)
            objc_enumerationMutation(obj);
          v63 = *(void **)(*((_QWORD *)&v102 + 1) + 8 * (_QWORD)j);
          v64 = objc_msgSend(v63, "tag");
          if (v64 > 24374)
          {
            if (v64 == 24375)
            {
              v69 = objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "value"));
              v66 = v58;
              v58 = (void *)v69;
            }
            else
            {
              if (v64 != 32585)
                continue;
              v67 = v63;
              v66 = v59;
              v59 = v67;
            }
          }
          else if (v64 == 67)
          {
            v68 = v63;
            v66 = v60;
            v60 = v68;
          }
          else
          {
            if (v64 != 89)
              continue;
            v65 = objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "value"));
            v66 = v57;
            v57 = (void *)v65;
          }

        }
        v56 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v102, v112, 16);
        if (!v56)
          goto LABEL_47;
      }
    }
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v60 = 0;
LABEL_47:

    if (v60 && v59 && v57 && v58)
    {
      v73 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 65, 1));
      v111 = v73;
      v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v111, 1));
      v75 = objc_msgSend(v74, "mutableCopy");

      objc_msgSend(v75, "addObject:", v60);
      objc_msgSend(v75, "addObjectsFromArray:", v96);
      objc_msgSend(v75, "addObject:", v59);
      v76 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:children:](SESTLV, "TLVWithTag:children:", 0, v75));
      v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "value"));
      v78 = objc_msgSend(v77, "mutableCopy");

      objc_msgSend(v78, "appendData:", v57);
      v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithHexString:](NSData, "dataWithHexString:", CFSTR("526CB83FB5C615FF3BA8EFE9671A35C4")));
      objc_msgSend(v78, "appendData:", v79);

      v91 = v59;
      v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "value"));
      v81 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithData:](SESTLV, "TLVWithData:"));
      v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v81, "value"));
      v46 = (void *)objc_claimAutoreleasedReturnValue(+[SESLegacyKeyCreateResponse withPublicKeyData:CASDSignature:keySlot:legacyKeyAttestation:](SESLegacyKeyCreateResponse, "withPublicKeyData:CASDSignature:keySlot:legacyKeyAttestation:", v82, v58, v99, v78));

      v41 = v98;
      v14 = v93;
      v42 = v94;
    }
    else
    {
      v14 = v93;
      v42 = v94;
      if (!v90)
      {
        v46 = 0;
        v41 = v98;
        goto LABEL_55;
      }
      v91 = v59;
      v83 = SESDefaultLogObject(v71, v72);
      v75 = (id)objc_claimAutoreleasedReturnValue(v83);
      v84 = SESErrorDomain;
      v85 = sub_10005582C(v95);
      v78 = (id)objc_claimAutoreleasedReturnValue(v85);
      v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "base64"));
      v86 = SESCreateAndLogError(0, v75, v84, 1, CFSTR("Response TLV missing mandatory elements : %@"));
      v46 = 0;
      *v90 = (id)objc_claimAutoreleasedReturnValue(v86);
      v41 = v98;
    }

    v59 = v91;
    v45 = 0;
LABEL_55:

    v15 = v92;
    v30 = v100;
    v28 = v96;
    v70 = v97;
LABEL_56:

    goto LABEL_57;
  }
  v45 = v44;
  if (a7)
  {
    v45 = objc_retainAutorelease(v44);
    v46 = 0;
    *a7 = v45;
  }
  else
  {
    v46 = 0;
  }
  v70 = v97;
LABEL_57:

  return v46;
}

id sub_10002D8AC(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, _QWORD *a7)
{
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *i;
  void *v43;
  unsigned int v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  id v74;
  id v75;
  void *v76;
  id v78;
  id v79;
  id v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  id v85;
  _BYTE v86[128];
  _QWORD v87[3];
  _QWORD v88[3];

  v80 = a1;
  v79 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v78 = a6;
  v75 = v12;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 196, objc_msgSend(v12, "unsignedCharValue")));
  v88[0] = v15;
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 197, 0));
  v88[1] = v16;
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 144, 0));
  v87[0] = v17;
  v74 = v13;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 145, v13));
  v87[1] = v18;
  v73 = v14;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 148, v14));
  v87[2] = v19;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v87, 3));
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:children:](SESTLV, "TLVWithTag:children:", 32525, v20));
  v88[2] = v21;
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v88, 3));

  v23 = v80;
  v24 = v78;

  v25 = v79;
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v79, "asHexString"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:children:](SESTLV, "TLVWithTag:children:", 0, v22));
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "value"));
  v85 = 0;
  v29 = sub_10005422C(v80, v26, v28, v78, &v85);
  v30 = objc_claimAutoreleasedReturnValue(v29);
  v31 = v85;

  v32 = v31;
  v76 = (void *)v30;
  if (v31)
  {
    v33 = 0;
    if (a7)
      *a7 = objc_retainAutorelease(v31);
    v55 = v74;
    v54 = v75;
    v56 = v73;
    goto LABEL_35;
  }
  v72 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVsWithData:](SESTLV, "TLVsWithData:", v30));
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "find:", &stru_100304220));
  if (!v34)
  {
    v55 = v74;
    v54 = v75;
    v56 = v73;
    v40 = a7;
    if (a7)
    {
      v58 = SESDefaultLogObject(0, v35);
      v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
      v60 = SESCreateAndLogError(0, v59, SESErrorDomain, 0, CFSTR("Opaque Data missing EA Tag"));
      *a7 = (id)objc_claimAutoreleasedReturnValue(v60);

      v34 = 0;
      v39 = 0;
      v40 = 0;
    }
    else
    {
      v39 = 0;
    }
    v33 = 0;
    goto LABEL_34;
  }
  v70 = v34;
  v71 = v22;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "children"));
  v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v81, v86, 16);
  if (!v37)
  {

    v40 = 0;
    v39 = 0;
    v55 = v74;
    v54 = v75;
    v56 = v73;
    v57 = a7;
LABEL_28:
    if (v57)
    {
LABEL_29:
      v64 = SESDefaultLogObject(v52, v53);
      v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
      v66 = SESErrorDomain;
      v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "base64"));
      v67 = SESCreateAndLogError(0, v65, v66, 1, CFSTR("Missing mandatory TLV in opaqueResponse %@"));
      *a7 = (id)objc_claimAutoreleasedReturnValue(v67);

      v23 = v80;
    }
    goto LABEL_30;
  }
  v38 = v37;
  v39 = 0;
  v40 = 0;
  v41 = *(_QWORD *)v82;
  while (2)
  {
    for (i = 0; i != v38; i = (char *)i + 1)
    {
      if (*(_QWORD *)v82 != v41)
        objc_enumerationMutation(v36);
      v43 = *(void **)(*((_QWORD *)&v81 + 1) + 8 * (_QWORD)i);
      v44 = objc_msgSend(v43, "tag");
      if (v44 == 24375)
      {
        v51 = objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "value"));
        v49 = v40;
        v40 = (void *)v51;
      }
      else
      {
        if (v44 != 151)
          continue;
        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "value"));
        v46 = objc_msgSend(v45, "length");

        if (v46 != (id)1)
        {
          if (a7)
          {
            v61 = SESDefaultLogObject(v47, v48);
            v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
            v63 = SESCreateAndLogError(0, v62, SESErrorDomain, 0, CFSTR("Unexpected length for tag 0x97"));
            *a7 = (id)objc_claimAutoreleasedReturnValue(v63);

          }
          v33 = 0;
          v25 = v79;
          v23 = v80;
          v55 = v74;
          v54 = v75;
          v56 = v73;
          v24 = v78;
          goto LABEL_31;
        }
        v49 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "value")));
        v50 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)objc_msgSend(v49, "bytes")));

        v39 = (void *)v50;
      }

    }
    v38 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v81, v86, 16);
    if (v38)
      continue;
    break;
  }

  if (!v40)
  {
    v25 = v79;
    v23 = v80;
    v55 = v74;
    v54 = v75;
    v56 = v73;
    v24 = v78;
    if (a7)
      goto LABEL_29;
LABEL_30:
    v33 = 0;
    goto LABEL_31;
  }
  v25 = v79;
  v23 = v80;
  v55 = v74;
  v54 = v75;
  v56 = v73;
  v57 = a7;
  v24 = v78;
  if (!v39)
    goto LABEL_28;
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[SESLegacyKeySignResponse withSignature:localValidationVerified:](SESLegacyKeySignResponse, "withSignature:localValidationVerified:", v40, v39));
LABEL_31:
  v34 = v70;
  v22 = v71;
LABEL_34:

  v32 = 0;
LABEL_35:

  return v33;
}

BOOL sub_10002DE78(id a1, SESTLV *a2)
{
  return -[SESTLV tag](a2, "tag") == 234;
}

id sub_10002DE98(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, _QWORD *a7)
{
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *i;
  void *v41;
  unsigned int v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v65;
  void *v66;
  void *v67;
  id v69;
  id v70;
  void *v71;
  void *v72;
  id v74;
  id v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  id v80;
  _BYTE v81[128];
  _QWORD v82[3];
  _QWORD v83[3];

  v11 = a1;
  v75 = a2;
  v12 = a3;
  v13 = a4;
  v74 = a5;
  v70 = v12;
  v71 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 196, objc_msgSend(v12, "unsignedCharValue")));
  v83[0] = v71;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 197, 1));
  v83[1] = v14;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 144, 0));
  v82[0] = v15;
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSData randomData:](NSData, "randomData:", 8));
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 145, v16));
  v82[1] = v17;
  v69 = v13;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 148, v13));
  v82[2] = v18;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v82, 3));
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:children:](SESTLV, "TLVWithTag:children:", 32525, v19));
  v83[2] = v20;
  v21 = v11;
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v83, 3));

  v24 = v74;
  v23 = v75;

  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "asHexString"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:children:](SESTLV, "TLVWithTag:children:", 0, v22));
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "value"));
  v80 = 0;
  v28 = sub_100054238(v21, v25, v27, v74, a6, &v80);
  v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  v30 = v80;

  if (v30)
  {
    v31 = 0;
    if (a7)
      *a7 = objc_retainAutorelease(v30);
    v54 = v69;
    v53 = v70;
    goto LABEL_35;
  }
  v72 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVsWithData:](SESTLV, "TLVsWithData:", v29));
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "find:", &stru_100304240));
  if (!v32)
  {
    v31 = a7;
    v54 = v69;
    if (a7)
    {
      v55 = SESDefaultLogObject(0, v33);
      v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
      v57 = SESCreateAndLogError(0, v56, SESErrorDomain, 0, CFSTR("Opaque Data missing EA Tag"));
      *a7 = (id)objc_claimAutoreleasedReturnValue(v57);

      v32 = 0;
      v37 = 0;
      v38 = 0;
      v31 = 0;
    }
    else
    {
      v37 = 0;
      v38 = 0;
    }
    v53 = v70;
    goto LABEL_34;
  }
  v66 = v32;
  v67 = v29;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "children"));
  v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v76, v81, 16);
  if (!v35)
  {

    v38 = 0;
    v37 = 0;
    v54 = v69;
    v53 = v70;
    v52 = a7;
LABEL_28:
    if (v52)
    {
LABEL_29:
      v61 = SESDefaultLogObject(v50, v51);
      v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
      v63 = SESCreateAndLogError(0, v62, SESErrorDomain, 0, CFSTR("Missing mandatory TLV: signature %d, localValidationVerified %d"));
      *v52 = (id)objc_claimAutoreleasedReturnValue(v63);

    }
    goto LABEL_30;
  }
  v36 = v35;
  v65 = v22;
  v37 = 0;
  v38 = 0;
  v39 = *(_QWORD *)v77;
  while (2)
  {
    for (i = 0; i != v36; i = (char *)i + 1)
    {
      if (*(_QWORD *)v77 != v39)
        objc_enumerationMutation(v34);
      v41 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * (_QWORD)i);
      v42 = objc_msgSend(v41, "tag");
      if (v42 == 24375)
      {
        v49 = objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "value"));
        v47 = v38;
        v38 = (void *)v49;
      }
      else
      {
        if (v42 != 151)
          continue;
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "value"));
        v44 = objc_msgSend(v43, "length");

        if (v44 != (id)1)
        {
          if (a7)
          {
            v58 = SESDefaultLogObject(v45, v46);
            v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
            v60 = SESCreateAndLogError(0, v59, SESErrorDomain, 0, CFSTR("Unexpected length for tag 0x97"));
            *a7 = (id)objc_claimAutoreleasedReturnValue(v60);

          }
          v31 = 0;
          v22 = v65;
          v24 = v74;
          v23 = v75;
          v54 = v69;
          v53 = v70;
          goto LABEL_31;
        }
        v47 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "value")));
        v48 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)objc_msgSend(v47, "bytes")));

        v37 = (void *)v48;
      }

    }
    v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v76, v81, 16);
    if (v36)
      continue;
    break;
  }

  v52 = a7;
  if (!v38)
  {
    v22 = v65;
    v24 = v74;
    v23 = v75;
    v54 = v69;
    v53 = v70;
    if (a7)
      goto LABEL_29;
LABEL_30:
    v31 = 0;
    goto LABEL_31;
  }
  v22 = v65;
  v24 = v74;
  v23 = v75;
  v54 = v69;
  v53 = v70;
  if (!v37)
    goto LABEL_28;
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[SESLegacyKeySignResponse withSignature:localValidationVerified:](SESLegacyKeySignResponse, "withSignature:localValidationVerified:", v38, v37));
LABEL_31:
  v32 = v66;
  v29 = v67;
LABEL_34:

  v30 = 0;
LABEL_35:

  return v31;
}

BOOL sub_10002E450(id a1, SESTLV *a2)
{
  return -[SESTLV tag](a2, "tag") == 234;
}

id sub_10002E470(void *a1, void *a2, uint64_t a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  const __CFData *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  const __CFData *v19;
  id v20;
  const char *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  const __CFData *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __CFData *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  NSObject *v83;
  id v84;
  void *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  __CFData *v92;
  id v93;
  __int16 v94;
  char v95;
  _QWORD v96[4];
  __int16 v97;
  __CFData *v98;
  __CFData *v99;
  id v100;
  uint8_t v101[4];
  void *v102;
  __int128 buf;
  __int16 *v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  id v110;
  uint64_t v111;

  v9 = a1;
  v10 = a2;
  v11 = a4;
  v13 = SESDefaultLogObject(v11, v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = a3;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "ptc_createKey %hx", (uint8_t *)&buf, 8u);
  }

  v15 = sub_10002EB98(v9, v10);
  if ((_DWORD)v15)
  {
    v17 = v15;
    v100 = 0;
    v18 = sub_10002EC90(v9, v10, &v100);
    v19 = (const __CFData *)objc_claimAutoreleasedReturnValue(v18);
    v20 = v100;
    if (v20)
    {
      v22 = v20;
      if (a5)
      {
        v23 = SESDefaultLogObject(v20, v21);
        v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        v25 = SESCreateAndLogError(v22, v24, SESErrorDomain, 0, CFSTR("Could not get Nonce : %@"));
        *a5 = (id)objc_claimAutoreleasedReturnValue(v25);

      }
      goto LABEL_7;
    }
    v98 = 0;
    v99 = 0;
    v29 = sub_10005066C(v9, v21);
    v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    v31 = (const __CFData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "seid"));
    v32 = SSECreateSecureElementACLRequest(-1, v31, v11, v19, &v99, &v98);

    if (v32)
    {
      if (!a5)
      {
        v22 = 0;
LABEL_7:
        v26 = 0;
LABEL_46:

        goto LABEL_47;
      }
      v35 = SESDefaultLogObject(v33, v34);
      v36 = (__CFData *)objc_claimAutoreleasedReturnValue(v35);
      v37 = SESCreateAndLogError(0, v36, SESErrorDomain, 0, CFSTR("SSECreateSecureElementACLRequest : %d"));
      v22 = 0;
      v26 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue(v37);
LABEL_45:

      goto LABEL_46;
    }
    v36 = v99;
    v92 = v98;
    v38 = SESDefaultLogObject(v33, v34);
    v39 = objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
    {
      v40 = (void *)objc_claimAutoreleasedReturnValue(-[__CFData asHexString](v36, "asHexString"));
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "AssetACLRequest : %@", (uint8_t *)&buf, 0xCu);

    }
    v43 = SESDefaultLogObject(v41, v42);
    v44 = objc_claimAutoreleasedReturnValue(v43);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      v45 = (void *)objc_claimAutoreleasedReturnValue(-[__CFData asHexString](v92, "asHexString"));
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v45;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "assetACLRequestAttestation : %@", (uint8_t *)&buf, 0xCu);

    }
    v97 = 256;
    v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v97, 2));
    v96[0] = objc_msgSend(v91, "DERItem");
    v96[1] = v46;
    v96[2] = 0;
    v96[3] = 0;
    v47 = encodeSequenceSpec(v96, &off_100303F40);
    v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
    v50 = v48;
    if (!v48)
    {
      if (a5)
      {
        v70 = SESDefaultLogObject(0, v49);
        v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
        v72 = SESCreateAndLogError(0, v71, SESErrorDomain, 0, CFSTR("Could not encode keyRequest"));
        *a5 = (id)objc_claimAutoreleasedReturnValue(v72);

      }
      v22 = 0;
      v26 = 0;
      v73 = v91;
      goto LABEL_44;
    }
    v95 = 1;
    v94 = __rev16(a3);
    *(_QWORD *)&buf = &v95;
    *((_QWORD *)&buf + 1) = 1;
    v104 = &v94;
    v105 = 2;
    v106 = objc_msgSend(v48, "DERItem");
    v107 = v51;
    v108 = -[__CFData DERItem](v36, "DERItem");
    v109 = v52;
    v110 = -[__CFData DERItem](v92, "DERItem");
    v111 = v53;
    v54 = sub_10002CFE8(0xA000u, (uint64_t)&buf, (uint64_t)&off_100303F30);
    v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
    v57 = v55;
    if (v55)
    {
      v88 = v50;
      v93 = 0;
      v90 = v55;
      v58 = sub_1000336E0(v9, v10, v55, 1, &v93);
      v59 = objc_claimAutoreleasedReturnValue(v58);
      v60 = v93;
      v22 = v60;
      v89 = (void *)v59;
      if (v60 || !v59)
      {
        if (a5)
        {
          v77 = SESDefaultLogObject(v60, v61);
          v78 = (void *)objc_claimAutoreleasedReturnValue(v77);
          v79 = SESErrorDomain;
          v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "asHexString"));
          v80 = SESCreateAndLogError(v22, v78, v79, 0, CFSTR("KeyCommand failed: %@"));
          *a5 = (id)objc_claimAutoreleasedReturnValue(v80);

        }
        v26 = 0;
        v73 = v91;
        v50 = v88;
        v75 = v89;
        goto LABEL_42;
      }
      v62 = SESDefaultLogObject(0, v61);
      v63 = objc_claimAutoreleasedReturnValue(v62);
      if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
      {
        v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "asHexString"));
        *(_DWORD *)v101 = 138412290;
        v102 = v64;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_INFO, "KeyCommand Success: %@", v101, 0xCu);

      }
      v50 = v88;
      if (v17 <= 2)
      {
        v65 = sub_10002EDD4(v89);
        if (!v65)
        {
          v82 = SESDefaultLogObject(0, v66);
          v83 = objc_claimAutoreleasedReturnValue(v82);
          if (os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v101 = 0;
            _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_INFO, "Key is invalid! Delete & recreating!", v101, 2u);
          }

          v84 = sub_10002EF28(v9, v10, a3);
          v85 = (void *)objc_claimAutoreleasedReturnValue(v84);
          v22 = v85;
          if (!v85)
          {
            v86 = sub_10002E470(v9, v10, a3, v11, a5);
            v26 = (void *)objc_claimAutoreleasedReturnValue(v86);
            goto LABEL_56;
          }
          if (a5)
          {
            v22 = objc_retainAutorelease(v85);
            v26 = 0;
            *a5 = v22;
            goto LABEL_56;
          }
LABEL_30:
          v26 = 0;
LABEL_56:
          v73 = v91;
          v75 = v89;
          goto LABEL_42;
        }
        if (v65 == 4279897)
        {
          if (a5)
          {
            v67 = SESDefaultLogObject(4279897, v66);
            v68 = (void *)objc_claimAutoreleasedReturnValue(v67);
            v69 = SESCreateAndLogError(0, v68, SESErrorDomain, 0, CFSTR("Can't validate key? Really?"));
            *a5 = (id)objc_claimAutoreleasedReturnValue(v69);

          }
          v22 = 0;
          goto LABEL_30;
        }
      }
      v75 = v89;
      v22 = 0;
      v26 = v75;
    }
    else
    {
      if (!a5)
      {
        v22 = 0;
        v26 = 0;
        v73 = v91;
        goto LABEL_43;
      }
      v90 = 0;
      v74 = SESDefaultLogObject(0, v56);
      v75 = (id)objc_claimAutoreleasedReturnValue(v74);
      v76 = SESCreateAndLogError(0, v75, SESErrorDomain, 0, CFSTR("Could not create createKeyCommandData"));
      v22 = 0;
      v26 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue(v76);
    }
    v73 = v91;
LABEL_42:

    v57 = v90;
LABEL_43:

LABEL_44:
    goto LABEL_45;
  }
  if (a5)
  {
    v27 = SESDefaultLogObject(v15, v16);
    v22 = (id)objc_claimAutoreleasedReturnValue(v27);
    v28 = SESCreateAndLogError(0, v22, SESErrorDomain, 0, CFSTR("Could not get version"));
    v26 = 0;
    *a5 = (id)objc_claimAutoreleasedReturnValue(v28);
LABEL_47:

    goto LABEL_48;
  }
  v26 = 0;
LABEL_48:

  return v26;
}

uint64_t sub_10002EB98(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id *v11;
  id v12;
  id *v13;
  void *v14;
  unint64_t v15;
  unint64_t v17[2];
  id v18;

  v3 = a1;
  v4 = v3;
  v5 = dword_10034BB2C;
  if (!dword_10034BB2C)
  {
    v6 = sub_10004FBA0(v3, a2);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (v7)
    {
      v8 = (void *)v7;
      v5 = dword_10034BB2C;
    }
    else
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("80A0800000000B30090201010202000104000000"), "hexStringAsData"));
      v18 = 0;
      v10 = sub_10004F6A8(v4, v9, &v18);
      v11 = (id *)objc_claimAutoreleasedReturnValue(v10);
      v12 = v18;
      v8 = v12;
      if (v11 && !v12)
      {
        dword_10034BB2C = 1;
        v13 = sub_10005582C(v11);
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        v17[0] = (unint64_t)objc_msgSend(v14, "DERItem");
        v17[1] = v15;

        DERDecodeSequenceContentWithBlock(v17, (uint64_t)&stru_100304280);
      }
      v5 = dword_10034BB2C;

    }
  }

  return v5;
}

_QWORD *sub_10002EC90(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v21;
  uint8_t buf[16];

  v5 = a2;
  v6 = a1;
  v8 = SESDefaultLogObject(v6, v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  v10 = sub_10002CFE8(0x2000u, 0, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v21 = 0;
  v12 = sub_1000336E0(v6, v5, v11, 1, &v21);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

  v14 = v21;
  v16 = v14;
  if (v14)
  {
    if (a3)
    {
      v17 = SESDefaultLogObject(v14, v15);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v19 = SESCreateAndLogError(v16, v18, SESErrorDomain, 0, CFSTR("While getting nonce"));
      *a3 = (id)objc_claimAutoreleasedReturnValue(v19);

      a3 = 0;
    }
  }
  else
  {
    a3 = v13;
  }

  return a3;
}

uint64_t sub_10002EDD4(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  _OWORD v11[3];
  CC_LONG len[4];
  __int128 v13;
  uint8_t buf[40];

  v1 = a1;
  *(_OWORD *)len = 0u;
  v13 = 0u;
  memset(v11, 0, sizeof(v11));
  v2 = DERParseSequenceSpec(v1, &off_100303F50, v11, 80);
  if ((_DWORD)v2)
  {
    v4 = v2;
    v5 = SESDefaultLogObject(v2, v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "asHexString"));
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 2112;
      *(_QWORD *)&buf[10] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Failed to decode PTC Key output %d %@", buf, 0x12u);

    }
    v8 = 4279897;
  }
  else
  {
    memset(buf, 0, 32);
    CC_SHA256(*(const void **)len, len[2], buf);
    v8 = (buf[0] + 94) <= 0xFDu && (buf[0] != 255 || buf[1] - 162 < 0xFFFFFFFE);
  }

  return v8;
}

id sub_10002EF28(void *a1, void *a2, unsigned int a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v24;
  uint8_t buf[8];
  uint64_t v26;
  __int16 *v27;
  uint64_t v28;
  char v29;
  __int16 v30;

  v5 = a1;
  v6 = a2;
  v8 = SESDefaultLogObject(v6, v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  v29 = 1;
  v30 = __rev16(a3);
  *(_QWORD *)buf = &v29;
  v26 = 1;
  v27 = &v30;
  v28 = 2;
  v10 = sub_10002CFE8(0xA001u, (uint64_t)buf, (uint64_t)&off_100303F80);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v10);
  if (v12)
  {
    v24 = 0;
    v13 = sub_1000336E0(v5, v6, v12, 1, &v24);
    v14 = v24;
    v16 = v14;
    if (v14)
    {
      v17 = SESDefaultLogObject(v14, v15);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v19 = SESCreateAndLogError(0, v18, SESErrorDomain, 0, CFSTR("While deleting key slot 0x%x"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);

    }
    else
    {
      v20 = 0;
    }
  }
  else
  {
    v21 = SESDefaultLogObject(0, v11);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v21);
    v22 = SESCreateAndLogError(0, v16, SESErrorDomain, 0, CFSTR("Could not create deleteKeyCommandData"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(v22);
  }

  return v20;
}

id sub_10002F0C8(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, _QWORD *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = objc_msgSend(v18, "isEqualToString:", kSecKeyAlgorithmECDSASignatureMessageX962SHA256);
  if ((_DWORD)v19)
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("0001"), "hexStringAsData"));
    v22 = sub_10002F214(v13, v14, v15, v16, v17, v21, a7);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
  }
  else
  {
    if (!a7)
    {
      v23 = 0;
      goto LABEL_7;
    }
    v24 = SESDefaultLogObject(v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v24);
    v25 = SESCreateAndLogError(0, v21, SESErrorDomain, 1, CFSTR("Unsupported algorithm: %@"));
    v23 = 0;
    *a7 = (id)objc_claimAutoreleasedReturnValue(v25);
  }

LABEL_7:
  return v23;
}

id sub_10002F214(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, _QWORD *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  id v65;
  void *v66;
  void *v67;
  void *v68;
  id v69;
  _QWORD v70[2];
  id v71;
  uint8_t buf[8];
  uint64_t v73;
  __int16 *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  __int16 v84;
  char v85;
  id v86;
  id v87;
  __int128 v88;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v20 = SESDefaultLogObject(v18, v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  if (v14 && v15 && v16 && v17 && v18)
  {
    v68 = v18;
    v86 = 0;
    v87 = 0;
    v24 = sub_10002FDF8(v13, v14, v16, v15, CFSTR("osgn"), &v87, &v86);
    v25 = (id)objc_claimAutoreleasedReturnValue(v24);
    v26 = v87;
    v27 = v86;
    if (v25)
    {
      if (a7)
      {
        v25 = objc_retainAutorelease(v25);
        v28 = 0;
        *a7 = v25;
      }
      else
      {
        v28 = 0;
      }
      goto LABEL_33;
    }
    v66 = v13;
    v85 = 1;
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "slot"));
    v32 = __rev16(objc_msgSend(v31, "number"));

    v84 = v32;
    *(_QWORD *)buf = &v85;
    v73 = 1;
    v74 = &v84;
    v75 = 2;
    v76 = objc_msgSend(v17, "DERItem");
    v77 = v33;
    v78 = objc_msgSend(v68, "DERItem");
    v79 = v34;
    v80 = objc_msgSend(v26, "DERItem");
    v81 = v35;
    v65 = v27;
    v82 = objc_msgSend(v27, "DERItem");
    v83 = v36;
    v37 = sub_10002CFE8(0xC000u, (uint64_t)buf, (uint64_t)&off_100303F90);
    v38 = objc_claimAutoreleasedReturnValue(v37);
    v67 = (void *)v38;
    if (v38)
    {
      v40 = (void *)v38;
      v41 = SESDefaultLogObject(v38, v39);
      v42 = objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
      {
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "asHexString"));
        LODWORD(v88) = 138412290;
        *(_QWORD *)((char *)&v88 + 4) = v43;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "signCommandData : %@", (uint8_t *)&v88, 0xCu);

      }
      v71 = 0;
      v13 = v66;
      v44 = sub_1000336E0(v66, v14, v40, 1, &v71);
      v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
      v46 = v71;
      v25 = v46;
      v64 = v45;
      if (v46 || !v45)
      {
        if (a7)
        {
          v56 = SESDefaultLogObject(v46, v47);
          v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
          v63 = SESErrorDomain;
          v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "slot"));
          objc_msgSend(v58, "number");
          v59 = SESCreateAndLogError(v25, v57, v63, 0, CFSTR("Performing sign on slot 0x%x"));
          *a7 = (id)objc_claimAutoreleasedReturnValue(v59);

        }
      }
      else
      {
        v88 = 0uLL;
        v70[0] = objc_msgSend(v45, "DERItem");
        v70[1] = v48;
        v49 = DERParseSequenceSpec(v70, &off_100303FA0, &v88, 16);
        if (!(_DWORD)v49)
        {
          v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithDERItem:](NSData, "dataWithDERItem:", &v88));
          v69 = v52;
          sub_10002C36C((uint64_t)SESSignatureFixer, &v69);
          v28 = v69;
          goto LABEL_30;
        }
        if (a7)
        {
          v51 = SESDefaultLogObject(v49, v50);
          v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
          v62 = SESErrorDomain;
          v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "asHexString"));
          v53 = SESCreateAndLogError(0, v52, v62, 0, CFSTR("Failed (%d) to parse signOutput %@"));
          *a7 = (id)objc_claimAutoreleasedReturnValue(v53);

          v28 = 0;
LABEL_30:

          goto LABEL_31;
        }
      }
      v28 = 0;
    }
    else
    {
      if (!a7)
      {
        v25 = 0;
        v28 = 0;
        v13 = v66;
LABEL_32:

LABEL_33:
        v18 = v68;
        goto LABEL_34;
      }
      v54 = SESDefaultLogObject(0, v39);
      v64 = (void *)objc_claimAutoreleasedReturnValue(v54);
      v55 = SESCreateAndLogError(0, v64, SESErrorDomain, 0, CFSTR("Could not encode signCommandData"));
      v25 = 0;
      v28 = 0;
      *a7 = (id)objc_claimAutoreleasedReturnValue(v55);
      v13 = v66;
    }
LABEL_31:
    v27 = v65;

    goto LABEL_32;
  }
  if (a7)
  {
    v29 = SESDefaultLogObject(v22, v23);
    v26 = (id)objc_claimAutoreleasedReturnValue(v29);
    v30 = SESCreateAndLogError(0, v26, SESErrorDomain, 1, CFSTR("Nil passed to ptc_SignInternal"));
    v28 = 0;
    *a7 = (id)objc_claimAutoreleasedReturnValue(v30);
LABEL_34:

    goto LABEL_35;
  }
  v28 = 0;
LABEL_35:

  return v28;
}

id sub_10002F708(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, _QWORD *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  const __CFString *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  if ((objc_msgSend(v18, "isEqualToString:", kSecKeyAlgorithmECDSASignatureMessageX962SHA256) & 1) == 0)
  {
    v19 = objc_msgSend(v18, "isEqualToString:", kSecKeyAlgorithmECDSASignatureDigestX962SHA256);
    if (!(_DWORD)v19)
    {
      if (a7)
      {
        v31 = SESDefaultLogObject(v19, v20);
        v23 = (void *)objc_claimAutoreleasedReturnValue(v31);
        v30 = SESErrorDomain;
        v28 = CFSTR("Unsupported algorithm: %@");
        v29 = v23;
        goto LABEL_9;
      }
LABEL_11:
      v25 = 0;
      goto LABEL_12;
    }
  }
  v21 = objc_msgSend(v17, "length");
  if (v21 != (id)32)
  {
    if (a7)
    {
      v26 = SESDefaultLogObject(v21, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v26);
      v27 = SESErrorDomain;
      objc_msgSend(v17, "length");
      v28 = CFSTR("ECDSASignatureMessageX962SHA256 requires digest len 32 not %u");
      v29 = v23;
      v30 = v27;
LABEL_9:
      v32 = SESCreateAndLogError(0, v29, v30, 1, v28);
      v25 = 0;
      *a7 = (id)objc_claimAutoreleasedReturnValue(v32);
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("0002"), "hexStringAsData"));
  v24 = sub_10002F214(v13, v14, v15, v16, v17, v23, a7);
  v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
LABEL_10:

LABEL_12:
  return v25;
}

id sub_10002F8BC(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, _QWORD *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const __CFString *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  _QWORD v78[2];
  id v79;
  uint8_t buf[8];
  uint64_t v81;
  __int16 *v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  __int16 v90;
  char v91;
  id v92;
  id v93;
  __int128 v94;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v20 = SESDefaultLogObject(v18, v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  if (v14)
  {
    if (v15)
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "key"));

      if (v18)
      {
        if (v17 && v24)
        {
          v92 = 0;
          v93 = 0;
          v25 = sub_10002FDF8(v13, v14, v16, v15, CFSTR("ock"), &v93, &v92);
          v26 = (id)objc_claimAutoreleasedReturnValue(v25);
          v27 = v93;
          v28 = v92;
          v77 = v28;
          if (v26)
          {
            if (a7)
            {
              v26 = objc_retainAutorelease(v26);
              v29 = 0;
              *a7 = v26;
            }
            else
            {
              v29 = 0;
            }
            goto LABEL_35;
          }
          v76 = v13;
          v91 = 1;
          v32 = v28;
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "slot"));
          v34 = __rev16(objc_msgSend(v33, "number"));

          v90 = v34;
          *(_QWORD *)buf = &v91;
          v81 = 1;
          v82 = &v90;
          v83 = 2;
          v84 = objc_msgSend(v17, "DERItem");
          v85 = v35;
          v86 = objc_msgSend(v27, "DERItem");
          v87 = v36;
          v88 = objc_msgSend(v32, "DERItem");
          v89 = v37;
          v38 = objc_msgSend(v18, "isEqualToString:", kSecKeyAlgorithmECDHKeyExchangeStandard);
          if ((v38 & 1) == 0)
          {
            if (!a7)
            {
              v26 = 0;
              v29 = 0;
              v13 = v76;
LABEL_35:

              goto LABEL_36;
            }
            v57 = SESDefaultLogObject(v38, v39);
            v58 = objc_claimAutoreleasedReturnValue(v57);
            v59 = SESCreateAndLogError(0, v58, SESErrorDomain, 1, CFSTR("Unsupported algorithm: %@"));
            v26 = 0;
            v29 = 0;
            *a7 = (id)objc_claimAutoreleasedReturnValue(v59);
            v60 = (void *)v58;
            v13 = v76;
LABEL_34:

            goto LABEL_35;
          }
          v40 = sub_10002CFE8(0xC004u, (uint64_t)buf, (uint64_t)&off_100303FB0);
          v41 = objc_claimAutoreleasedReturnValue(v40);
          v75 = (void *)v41;
          if (!v41)
          {
            v13 = v76;
            if (a7)
            {
              v61 = SESDefaultLogObject(0, v42);
              v74 = (void *)objc_claimAutoreleasedReturnValue(v61);
              v62 = SESCreateAndLogError(0, v74, SESErrorDomain, 0, CFSTR("Could not encode echangeCommandData"));
              v26 = 0;
              v29 = 0;
              *a7 = (id)objc_claimAutoreleasedReturnValue(v62);

            }
            else
            {
              v26 = 0;
              v29 = 0;
            }
            goto LABEL_33;
          }
          v43 = (void *)v41;
          v44 = SESDefaultLogObject(v41, v42);
          v45 = objc_claimAutoreleasedReturnValue(v44);
          v13 = v76;
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
          {
            v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "asHexString"));
            LODWORD(v94) = 138412290;
            *(_QWORD *)((char *)&v94 + 4) = v46;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "echangeCommandData : %@", (uint8_t *)&v94, 0xCu);

            v43 = v75;
          }

          v79 = 0;
          v47 = sub_1000336E0(v76, v14, v43, 1, &v79);
          v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
          v49 = v79;
          v26 = v49;
          v73 = v48;
          if (v49)
          {
            if (a7)
            {
              v51 = SESDefaultLogObject(v49, v50);
              v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
              v70 = SESErrorDomain;
              v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "slot"));
              objc_msgSend(v72, "number");
              v53 = CFSTR("Performing exchange on slot 0x%x");
              v54 = v26;
              v55 = (uint64_t)v52;
              v56 = v70;
LABEL_30:
              v67 = SESCreateAndLogError(v54, v55, v56, 0, v53);
              *a7 = (id)objc_claimAutoreleasedReturnValue(v67);

            }
          }
          else
          {
            v94 = 0uLL;
            v78[0] = objc_msgSend(v48, "DERItem");
            v78[1] = v63;
            v64 = DERParseSequenceSpec(v78, &off_100303FA0, &v94, 16);
            if (!(_DWORD)v64)
            {
              v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithDERItem:](NSData, "dataWithDERItem:", &v94));
              goto LABEL_32;
            }
            if (a7)
            {
              v66 = SESDefaultLogObject(v64, v65);
              v71 = objc_claimAutoreleasedReturnValue(v66);
              v69 = SESErrorDomain;
              v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "asHexString"));
              v53 = CFSTR("Failed (%d) to parse exchangeOutput %@");
              v54 = 0;
              v56 = v69;
              v52 = (void *)v71;
              v55 = v71;
              goto LABEL_30;
            }
          }
          v29 = 0;
LABEL_32:

LABEL_33:
          v60 = v75;
          goto LABEL_34;
        }
      }
    }
  }
  if (a7)
  {
    v30 = SESDefaultLogObject(v22, v23);
    v27 = (id)objc_claimAutoreleasedReturnValue(v30);
    v31 = SESCreateAndLogError(0, v27, SESErrorDomain, 1, CFSTR("Nil passed to ptc_encryptAsync"));
    v29 = 0;
    *a7 = (id)objc_claimAutoreleasedReturnValue(v31);
LABEL_36:

    goto LABEL_37;
  }
  v29 = 0;
LABEL_37:

  return v29;
}

id sub_10002FDF8(void *a1, void *a2, void *a3, void *a4, void *a5, _QWORD *a6, _QWORD *a7)
{
  id v7;
  void *v8;
  const __CFData *v10;

  v10 = 0;
  v7 = sub_1000333E0(a1, a2, a3, a4, a5, a6, a7, &v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  return v8;
}

id sub_10002FE3C(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, _QWORD *a10)
{
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  __CFString *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  void *v43;
  void *v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  NSObject *v59;
  void *v60;
  id v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  id v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  id v95;
  void *v96;
  void *v97;
  id v98;
  _QWORD v99[2];
  id v100;
  __int16 v101;
  char v102;
  id v103;
  id v104;
  uint8_t v105[16];
  __int128 v106;
  __int128 buf;
  __int16 *v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  id v122;
  uint64_t v123;

  v17 = a1;
  v18 = a2;
  v19 = a3;
  v20 = a4;
  v21 = a5;
  v22 = a6;
  v98 = a7;
  v23 = a8;
  v24 = a9;
  v26 = SESDefaultLogObject(v24, v25);
  v27 = objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "", (uint8_t *)&buf, 2u);
  }

  v97 = v24;
  if (v18 && v19 && v20 && v21 && v22 && v23)
  {
    v103 = 0;
    v104 = 0;
    v96 = v17;
    v30 = sub_10002FDF8(v17, v18, v20, v19, CFSTR("oe"), &v104, &v103);
    v31 = (id)objc_claimAutoreleasedReturnValue(v30);
    v32 = v104;
    v95 = v103;
    if (v31)
    {
      if (a10)
      {
        v31 = objc_retainAutorelease(v31);
        v33 = 0;
        *a10 = v31;
      }
      else
      {
        v33 = 0;
      }
      goto LABEL_52;
    }
    if ((objc_msgSend(v23, "isEqualToString:", CFSTR("kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESCBC")) & 1) != 0)
    {
      v36 = CFSTR("0001");
    }
    else
    {
      v37 = objc_msgSend(v23, "isEqualToString:", kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM);
      if ((v37 & 1) == 0)
      {
        if (a10)
        {
          v72 = SESDefaultLogObject(v37, v38);
          v73 = (void *)objc_claimAutoreleasedReturnValue(v72);
          v74 = SESCreateAndLogError(0, v73, SESErrorDomain, 1, CFSTR("Unsupported algorithm: %@"));
          *a10 = (id)objc_claimAutoreleasedReturnValue(v74);

        }
        v31 = 0;
        v33 = 0;

        goto LABEL_52;
      }
      v36 = CFSTR("1001");
    }
    v92 = v32;
    v39 = objc_claimAutoreleasedReturnValue(-[__CFString hexStringAsData](v36, "hexStringAsData"));
    v41 = SESDefaultLogObject(v39, v40);
    v42 = objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v39;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "algorithmData : %@", (uint8_t *)&buf, 0xCu);
    }

    v102 = 1;
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "slot"));
    v44 = (void *)v39;
    v45 = __rev16(objc_msgSend(v43, "number"));

    v101 = v45;
    *(_QWORD *)&buf = &v102;
    *((_QWORD *)&buf + 1) = 1;
    v108 = &v101;
    v109 = 2;
    v110 = objc_msgSend(v21, "DERItem");
    v111 = v46;
    v112 = objc_msgSend(v22, "DERItem");
    v113 = v47;
    v114 = objc_msgSend(v98, "DERItem");
    v115 = v48;
    v94 = v44;
    v116 = objc_msgSend(v44, "DERItem");
    v117 = v49;
    v32 = v92;
    v118 = objc_msgSend(v92, "DERItem");
    v119 = v50;
    v120 = objc_msgSend(v95, "DERItem");
    v121 = v51;
    v122 = 0;
    v123 = 0;
    if (v97)
    {
      v52 = encodeItem(4, objc_msgSend(v97, "length"), objc_msgSend(objc_retainAutorelease(v97), "bytes"));
      v91 = (void *)objc_claimAutoreleasedReturnValue(v52);
      v122 = objc_msgSend(v91, "DERItem");
      v123 = v53;
    }
    else
    {
      v91 = 0;
    }
    v54 = sub_10002CFE8(0xC001u, (uint64_t)&buf, (uint64_t)&off_100304000);
    v55 = objc_claimAutoreleasedReturnValue(v54);
    v93 = (void *)v55;
    if (v55)
    {
      v57 = (void *)v55;
      v90 = v22;
      v58 = SESDefaultLogObject(v55, v56);
      v59 = objc_claimAutoreleasedReturnValue(v58);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "asHexString"));
        *(_DWORD *)v105 = 138412290;
        *(_QWORD *)&v105[4] = v60;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "encryptCommandData : %@", v105, 0xCu);

        v57 = v93;
      }

      v100 = 0;
      v61 = sub_1000336E0(v96, v18, v57, 1, &v100);
      v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
      v63 = v100;
      v31 = v63;
      if (!v63 && v62)
      {
        *(_OWORD *)v105 = 0u;
        v106 = 0u;
        v88 = v62;
        v99[0] = objc_msgSend(v62, "DERItem");
        v99[1] = v65;
        v66 = DERParseSequenceSpec(v99, &off_100304010, v105, 32);
        if ((_DWORD)v66 || !*(_QWORD *)&v105[8])
        {
          if (!a10)
          {
            v33 = 0;
            v79 = v91;
            goto LABEL_49;
          }
          v80 = SESDefaultLogObject(v66, v67);
          v87 = (void *)objc_claimAutoreleasedReturnValue(v80);
          v85 = SESErrorDomain;
          v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "asHexString"));
          v82 = SESCreateAndLogError(0, v87, v85, 0, CFSTR("Failed (%d) to parse encryptOutput %@"));
          v33 = 0;
          *a10 = (id)objc_claimAutoreleasedReturnValue(v82);
          v79 = v91;
        }
        else
        {
          v68 = objc_claimAutoreleasedReturnValue(+[NSData dataWithDERItem:](NSData, "dataWithDERItem:", v105));
          if (*((_QWORD *)&v106 + 1))
            v69 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", (_QWORD)v106 + 2, *((_QWORD *)&v106 + 1) - 2));
          else
            v69 = 0;
          v79 = v91;
          v83 = v68;
          v87 = (void *)v68;
          v81 = (void *)v69;
          v33 = (void *)objc_claimAutoreleasedReturnValue(+[AuthenticatedEncryptionResult withCipherText:authenticationTag:](AuthenticatedEncryptionResult, "withCipherText:authenticationTag:", v83, v69));
        }

LABEL_49:
        v62 = v88;
        goto LABEL_50;
      }
      if (a10)
      {
        v89 = v62;
        v75 = SESDefaultLogObject(v63, v64);
        v76 = (void *)objc_claimAutoreleasedReturnValue(v75);
        v86 = SESErrorDomain;
        v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "slot"));
        objc_msgSend(v77, "number");
        v78 = SESCreateAndLogError(v31, v76, v86, 0, CFSTR("Performing encrypt on slot 0x%x"));
        *a10 = (id)objc_claimAutoreleasedReturnValue(v78);

        v62 = v89;
      }
      v33 = 0;
    }
    else
    {
      if (!a10)
      {
        v31 = 0;
        v33 = 0;
        v79 = v91;
LABEL_51:

LABEL_52:
        goto LABEL_53;
      }
      v90 = v22;
      v70 = SESDefaultLogObject(0, v56);
      v62 = (void *)objc_claimAutoreleasedReturnValue(v70);
      v71 = SESCreateAndLogError(0, v62, SESErrorDomain, 0, CFSTR("Could not encode encryptCommandData"));
      v31 = 0;
      v33 = 0;
      *a10 = (id)objc_claimAutoreleasedReturnValue(v71);
    }
    v79 = v91;
LABEL_50:

    v22 = v90;
    goto LABEL_51;
  }
  if (a10)
  {
    v96 = v17;
    v34 = SESDefaultLogObject(v28, v29);
    v32 = (id)objc_claimAutoreleasedReturnValue(v34);
    v35 = SESCreateAndLogError(0, v32, SESErrorDomain, 1, CFSTR("Nil passed to ptc_Encrypt"));
    v33 = 0;
    *a10 = (id)objc_claimAutoreleasedReturnValue(v35);
LABEL_53:

    v17 = v96;
    goto LABEL_54;
  }
  v33 = 0;
LABEL_54:

  return v33;
}

id sub_100030548(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, _QWORD *a11)
{
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  __CFString *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  __CFString *v38;
  CFComparisonResult v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  void *v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  NSObject *v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  id v92;
  void *v93;
  id v94;
  void *v95;
  id v96;
  id v97;
  id v98;
  _QWORD v99[2];
  id v100;
  __int16 v101;
  char v102;
  id v103;
  id v104;
  __int128 v105;
  __int128 buf;
  __int16 *v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;

  v18 = a1;
  v19 = a2;
  v20 = a3;
  v21 = a4;
  v22 = a5;
  v23 = a6;
  v98 = a7;
  v24 = a8;
  v97 = a9;
  v25 = a10;
  v27 = SESDefaultLogObject(v25, v26);
  v28 = objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "", (uint8_t *)&buf, 2u);
  }

  if (v19 && v20 && v21 && v22 && v23 && v24)
  {
    v95 = v25;
    v103 = 0;
    v104 = 0;
    v31 = v18;
    v32 = sub_10002FDF8(v18, v19, v21, v20, CFSTR("od"), &v104, &v103);
    v33 = (id)objc_claimAutoreleasedReturnValue(v32);
    v92 = v104;
    v94 = v103;
    v96 = v23;
    if (v33)
    {
      if (a11)
      {
        v33 = objc_retainAutorelease(v33);
        v34 = 0;
        *a11 = v33;
      }
      else
      {
        v34 = 0;
      }
      v36 = v92;
      goto LABEL_50;
    }
    if ((objc_msgSend(CFSTR("kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESCBC"), "isEqualToString:", v24) & 1) != 0)
    {
      v38 = CFSTR("0001");
    }
    else
    {
      v39 = CFStringCompare(kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM, v24, 0);
      if (v39)
      {
        if (a11)
        {
          v41 = SESDefaultLogObject(v39, v40);
          v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
          v43 = SESCreateAndLogError(0, v42, SESErrorDomain, 1, CFSTR("Unsupported algorithm: %@"));
          *a11 = (id)objc_claimAutoreleasedReturnValue(v43);

        }
        v33 = 0;
        v34 = 0;
        v36 = v92;

        goto LABEL_50;
      }
      v38 = CFSTR("1001");
    }
    v44 = objc_claimAutoreleasedReturnValue(-[__CFString hexStringAsData](v38, "hexStringAsData"));
    v46 = SESDefaultLogObject(v44, v45);
    v47 = objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v44;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "algorithmData : %@", (uint8_t *)&buf, 0xCu);
    }

    v91 = (void *)v44;
    v102 = 1;
    v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "slot"));
    v49 = __rev16(objc_msgSend(v48, "number"));

    v101 = v49;
    *(_QWORD *)&buf = &v102;
    *((_QWORD *)&buf + 1) = 1;
    v107 = &v101;
    v108 = 2;
    v109 = objc_msgSend(v22, "DERItem");
    v110 = v50;
    v111 = objc_msgSend(v23, "DERItem");
    v112 = v51;
    v113 = objc_msgSend(v98, "DERItem");
    v114 = v52;
    v115 = objc_msgSend(v91, "DERItem");
    v116 = v53;
    v117 = objc_msgSend(v92, "DERItem");
    v118 = v54;
    v119 = objc_msgSend(v94, "DERItem");
    v120 = v55;
    v121 = 0u;
    v122 = 0u;
    if (v97)
    {
      v56 = encodeItem(4, objc_msgSend(v97, "length"), objc_msgSend(objc_retainAutorelease(v97), "bytes"));
      v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
      *(_QWORD *)&v121 = objc_msgSend(v57, "DERItem");
      *((_QWORD *)&v121 + 1) = v58;
    }
    else
    {
      v57 = 0;
    }
    v31 = v18;
    v90 = v57;
    if (v95)
    {
      v59 = encodeItem(4, objc_msgSend(v95, "length"), objc_msgSend(objc_retainAutorelease(v95), "bytes"));
      v89 = (void *)objc_claimAutoreleasedReturnValue(v59);
      *(_QWORD *)&v122 = objc_msgSend(v89, "DERItem");
      *((_QWORD *)&v122 + 1) = v60;
    }
    else
    {
      v89 = 0;
    }
    v36 = v92;
    v61 = sub_10002CFE8(0xC002u, (uint64_t)&buf, (uint64_t)&off_100304020);
    v62 = objc_claimAutoreleasedReturnValue(v61);
    v93 = (void *)v62;
    if (!v62)
    {
      if (a11)
      {
        v76 = SESDefaultLogObject(0, v63);
        v88 = (void *)objc_claimAutoreleasedReturnValue(v76);
        v77 = SESCreateAndLogError(0, v88, SESErrorDomain, 0, CFSTR("Could not encode decryptCommandData"));
        v33 = 0;
        v34 = 0;
        *a11 = (id)objc_claimAutoreleasedReturnValue(v77);

      }
      else
      {
        v33 = 0;
        v34 = 0;
      }
      goto LABEL_49;
    }
    v64 = (void *)v62;
    v65 = SESDefaultLogObject(v62, v63);
    v66 = objc_claimAutoreleasedReturnValue(v65);
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
    {
      v67 = v64;
      v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "asHexString"));
      LODWORD(v105) = 138412290;
      *(_QWORD *)((char *)&v105 + 4) = v68;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "decryptCommandData : %@", (uint8_t *)&v105, 0xCu);

      v64 = v67;
    }

    v100 = 0;
    v69 = sub_1000336E0(v31, v19, v64, 1, &v100);
    v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
    v71 = v100;
    v33 = v71;
    v87 = v70;
    if (v71 || !v70)
    {
      v34 = a11;
      if (!a11)
        goto LABEL_48;
      v78 = SESDefaultLogObject(v71, v72);
      v79 = (void *)objc_claimAutoreleasedReturnValue(v78);
      v84 = SESErrorDomain;
      v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "slot"));
      objc_msgSend(v86, "number");
      v80 = SESCreateAndLogError(v33, v79, v84, 0, CFSTR("Performing decrypt on slot 0x%x"));
      *a11 = (id)objc_claimAutoreleasedReturnValue(v80);
    }
    else
    {
      v105 = 0uLL;
      v99[0] = objc_msgSend(v70, "DERItem");
      v99[1] = v73;
      v74 = DERParseSequenceSpec(v99, &off_100304030, &v105, 16);
      if (!(_DWORD)v74 && *((_QWORD *)&v105 + 1))
      {
        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithDERItem:](NSData, "dataWithDERItem:", &v105));
LABEL_48:

LABEL_49:
LABEL_50:

        v25 = v95;
        goto LABEL_51;
      }
      if (!a11)
      {
LABEL_47:
        v34 = 0;
        goto LABEL_48;
      }
      v81 = SESDefaultLogObject(v74, v75);
      v79 = (void *)objc_claimAutoreleasedReturnValue(v81);
      v85 = SESErrorDomain;
      v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "asHexString"));
      v82 = SESCreateAndLogError(0, v79, v85, 0, CFSTR("Failed (%d) to parse encryptOutput %@"));
      *a11 = (id)objc_claimAutoreleasedReturnValue(v82);
    }

    goto LABEL_47;
  }
  v31 = v18;
  if (a11)
  {
    v96 = v23;
    v35 = SESDefaultLogObject(v29, v30);
    v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    v37 = SESCreateAndLogError(0, v36, SESErrorDomain, 1, CFSTR("Nil passed to ptc_Decrypt"));
    v34 = 0;
    *a11 = (id)objc_claimAutoreleasedReturnValue(v37);
LABEL_51:

    v23 = v96;
    goto LABEL_52;
  }
  v34 = 0;
LABEL_52:

  return v34;
}

id sub_100030C64(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, _QWORD *a15)
{
  id v22;
  id v23;
  id v24;
  id v25;
  __CFString *v26;
  id v27;
  __CFString *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  __CFString *v42;
  CFComparisonResult v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __CFString *v48;
  CFComparisonResult v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  NSObject *v77;
  void *v78;
  id v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  void *v102;
  void *v103;
  __CFString *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  void *v110;
  void *v111;
  id v112;
  id v113;
  id v114;
  id v115;
  void *v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  _QWORD v122[2];
  id v123;
  uint8_t buf[8];
  uint64_t v125;
  __int16 *v126;
  uint64_t v127;
  id v128;
  uint64_t v129;
  id v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  id v136;
  uint64_t v137;
  id v138;
  uint64_t v139;
  id v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  id v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int16 v149;
  char v150;
  id v151;
  id v152;
  __int128 v153;
  __int128 v154;

  v114 = a1;
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v121 = a5;
  v25 = a6;
  v120 = a7;
  v119 = a8;
  v118 = a9;
  v26 = a10;
  v117 = a11;
  v27 = a12;
  v28 = a13;
  v115 = a14;
  v30 = SESDefaultLogObject(v115, v29);
  v31 = objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  v34 = v25;
  v116 = v27;
  if (v22 && v23 && v24 && v121 && v25 && v26 && v28)
  {
    v151 = 0;
    v152 = 0;
    v35 = v114;
    v36 = sub_10002FDF8(v114, v22, v24, v23, CFSTR("oect"), &v152, &v151);
    v37 = (id)objc_claimAutoreleasedReturnValue(v36);
    v112 = v152;
    v113 = v151;
    if (v37)
    {
      if (a15)
      {
        v37 = objc_retainAutorelease(v37);
        v38 = 0;
        *a15 = v37;
      }
      else
      {
        v38 = 0;
      }
      v40 = v112;
      goto LABEL_67;
    }
    if ((objc_msgSend(CFSTR("kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESCBC"), "isEqualToString:", v26) & 1) != 0)
    {
      v42 = CFSTR("0001");
    }
    else
    {
      v43 = CFStringCompare(kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM, v26, 0);
      if (v43)
      {
        if (!a15)
        {
          v37 = 0;
          v38 = 0;
          v40 = v112;

LABEL_67:
          goto LABEL_68;
        }
        v45 = SESDefaultLogObject(v43, v44);
        v109 = objc_claimAutoreleasedReturnValue(v45);
        v46 = SESCreateAndLogError(0, v109, SESErrorDomain, 1, CFSTR("Unsupported algorithm: %@"));
        v111 = 0;
        v37 = 0;
        v38 = 0;
        *a15 = (id)objc_claimAutoreleasedReturnValue(v46);
        v47 = (void *)v109;
        goto LABEL_30;
      }
      v42 = CFSTR("1001");
    }
    v111 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString hexStringAsData](v42, "hexStringAsData"));
    if ((objc_msgSend(CFSTR("kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESCBC"), "isEqualToString:", v28) & 1) != 0)
    {
      v48 = CFSTR("0001");
      goto LABEL_32;
    }
    v49 = CFStringCompare(kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM, v28, 0);
    if (v49 == kCFCompareEqualTo)
    {
      v48 = CFSTR("1001");
LABEL_32:
      v54 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString hexStringAsData](v48, "hexStringAsData"));
      v150 = 1;
      v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "slot"));
      v56 = __rev16(objc_msgSend(v55, "number"));

      v149 = v56;
      *(_QWORD *)buf = &v150;
      v125 = 1;
      v126 = &v149;
      v127 = 2;
      v128 = objc_msgSend(v121, "DERItem");
      v129 = v57;
      v34 = v25;
      v130 = objc_msgSend(v25, "DERItem");
      v131 = v58;
      v132 = objc_msgSend(v120, "DERItem");
      v133 = v59;
      v134 = objc_msgSend(v111, "DERItem");
      v135 = v60;
      v136 = objc_msgSend(v117, "DERItem");
      v137 = v61;
      v110 = v54;
      v138 = objc_msgSend(v54, "DERItem");
      v139 = v62;
      v140 = objc_msgSend(v115, "DERItem");
      v141 = v63;
      v142 = objc_msgSend(v112, "DERItem");
      v143 = v64;
      v144 = objc_msgSend(v113, "DERItem");
      v145 = v65;
      v146 = 0u;
      v147 = 0u;
      v148 = 0u;
      if (v119)
      {
        v66 = encodeItem(4, objc_msgSend(v119, "length"), objc_msgSend(objc_retainAutorelease(v119), "bytes"));
        v107 = (void *)objc_claimAutoreleasedReturnValue(v66);
        *(_QWORD *)&v146 = objc_msgSend(v107, "DERItem");
        *((_QWORD *)&v146 + 1) = v67;
      }
      else
      {
        v107 = 0;
      }
      v35 = v114;
      if (v118)
      {
        v68 = encodeItem(4, objc_msgSend(v118, "length"), objc_msgSend(objc_retainAutorelease(v118), "bytes"));
        v106 = (void *)objc_claimAutoreleasedReturnValue(v68);
        *(_QWORD *)&v147 = objc_msgSend(v106, "DERItem");
        *((_QWORD *)&v147 + 1) = v69;
      }
      else
      {
        v106 = 0;
      }
      if (v116)
      {
        v70 = encodeItem(4, objc_msgSend(v116, "length"), objc_msgSend(objc_retainAutorelease(v116), "bytes"));
        v105 = (void *)objc_claimAutoreleasedReturnValue(v70);
        *(_QWORD *)&v148 = objc_msgSend(v105, "DERItem");
        *((_QWORD *)&v148 + 1) = v71;
      }
      else
      {
        v105 = 0;
      }
      v72 = sub_10002CFE8(0xC003u, (uint64_t)buf, (uint64_t)&off_100304040);
      v73 = objc_claimAutoreleasedReturnValue(v72);
      v108 = (void *)v73;
      if (v73)
      {
        v75 = (void *)v73;
        v104 = v28;
        v76 = SESDefaultLogObject(v73, v74);
        v77 = objc_claimAutoreleasedReturnValue(v76);
        if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
        {
          v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "asHexString"));
          LODWORD(v153) = 138412290;
          *(_QWORD *)((char *)&v153 + 4) = v78;
          _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "transcodeCommandData : %@", (uint8_t *)&v153, 0xCu);

          v75 = v108;
        }

        v123 = 0;
        v79 = sub_1000336E0(v114, v22, v75, 1, &v123);
        v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
        v81 = v123;
        v37 = v81;
        if (!v81 && v80)
        {
          v153 = 0u;
          v154 = 0u;
          v102 = v80;
          v122[0] = objc_msgSend(v80, "DERItem");
          v122[1] = v83;
          v84 = DERParseSequenceSpec(v122, &off_100304050, &v153, 32);
          if ((_DWORD)v84)
          {
            v40 = v112;
            if (!a15)
            {
              v38 = 0;
LABEL_63:
              v80 = v102;
              goto LABEL_64;
            }
            v86 = SESDefaultLogObject(v84, v85);
            v87 = objc_claimAutoreleasedReturnValue(v86);
            v98 = SESErrorDomain;
            v99 = (void *)v87;
            v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "asHexString"));
            v88 = SESCreateAndLogError(0, v87, v98, 0, CFSTR("Failed (%d) to parse transcodeOutput %@"));
            v38 = 0;
            *a15 = (id)objc_claimAutoreleasedReturnValue(v88);
          }
          else
          {
            v95 = objc_claimAutoreleasedReturnValue(+[NSData dataWithDERItem:](NSData, "dataWithDERItem:", &v153));
            if ((_QWORD)v154)
              v96 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", (_QWORD)v154 + 2, *((_QWORD *)&v154 + 1) - 2));
            else
              v96 = 0;
            v34 = v25;
            v99 = (void *)v95;
            v100 = (void *)v96;
            v38 = (void *)objc_claimAutoreleasedReturnValue(+[AuthenticatedEncryptionResult withCipherText:authenticationTag:](AuthenticatedEncryptionResult, "withCipherText:authenticationTag:", v95, v96));
            v40 = v112;
          }

          goto LABEL_63;
        }
        if (a15)
        {
          v103 = v80;
          v91 = SESDefaultLogObject(v81, v82);
          v92 = (void *)objc_claimAutoreleasedReturnValue(v91);
          v101 = SESErrorDomain;
          v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "slot"));
          objc_msgSend(v93, "number");
          v94 = SESCreateAndLogError(v37, v92, v101, 0, CFSTR("Performing transcode on slot 0x%x"));
          *a15 = (id)objc_claimAutoreleasedReturnValue(v94);

          v80 = v103;
        }
        v38 = 0;
      }
      else
      {
        if (!a15)
        {
          v37 = 0;
          v38 = 0;
          v40 = v112;
LABEL_65:

          v47 = v110;
          goto LABEL_66;
        }
        v104 = v28;
        v89 = SESDefaultLogObject(0, v74);
        v80 = (void *)objc_claimAutoreleasedReturnValue(v89);
        v90 = SESCreateAndLogError(0, v80, SESErrorDomain, 0, CFSTR("Could not encode transcodeCommandData"));
        v37 = 0;
        v38 = 0;
        *a15 = (id)objc_claimAutoreleasedReturnValue(v90);
      }
      v40 = v112;
LABEL_64:

      v28 = v104;
      goto LABEL_65;
    }
    if (a15)
    {
      v51 = SESDefaultLogObject(v49, v50);
      v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
      v53 = SESCreateAndLogError(0, v52, SESErrorDomain, 1, CFSTR("Unsupported algorithm: %@"));
      *a15 = (id)objc_claimAutoreleasedReturnValue(v53);

    }
    v47 = 0;
    v37 = 0;
    v38 = 0;
LABEL_30:
    v40 = v112;
LABEL_66:

    goto LABEL_67;
  }
  v35 = v114;
  if (a15)
  {
    v39 = SESDefaultLogObject(v32, v33);
    v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
    v41 = SESCreateAndLogError(0, v40, SESErrorDomain, 1, CFSTR("Nil passed to ptc_Transcode"));
    v38 = 0;
    *a15 = (id)objc_claimAutoreleasedReturnValue(v41);
LABEL_68:

    goto LABEL_69;
  }
  v38 = 0;
LABEL_69:

  return v38;
}

id sub_100031564(void *a1, void *a2)
{
  id v3;
  const char *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  const char *v9;
  void *v10;
  id v11;
  void *v12;
  const __CFData *v13;
  int v14;
  NSData *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;
  uint64_t v33;
  NSData *v34;
  uint8_t buf[4];
  void *v36;

  v3 = a1;
  v5 = a2;
  if ((byte_10034BB28 & 1) != 0
    || (v6 = sub_10005066C(v3, v4),
        v7 = (void *)objc_claimAutoreleasedReturnValue(v6),
        v8 = objc_msgSend(v7, "type"),
        v7,
        (unint64_t)v8 < 4))
  {
    v10 = 0;
  }
  else
  {
    v34 = 0;
    v11 = sub_10005066C(v3, v9);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v13 = (const __CFData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "seid"));
    v14 = SSEGetSignedDeviceData(v13, (CFDataRef *)&v34);

    v15 = v34;
    v18 = SESDefaultLogObject(v16, v17);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    v20 = v19;
    if (v14 || !v15)
    {
      v27 = SESCreateAndLogError(0, v19, SESErrorDomain, 0, CFSTR("Failed to get SignedDeviceData %d"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(v27);
    }
    else
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(-[NSData asHexString](v15, "asHexString"));
        *(_DWORD *)buf = 138412290;
        v36 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "SSE Returned -- %@", buf, 0xCu);

      }
      v22 = DERDecodeData(v15, 0xC000000000000019);
      v20 = objc_claimAutoreleasedReturnValue(v22);
      if (v20)
      {
        v24 = sub_1000317C0(3u, v20);
        v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
        v33 = 0;
        v26 = sub_1000336E0(v3, v5, v25, 1, &v33);
        v10 = 0;
        byte_10034BB28 = 1;
      }
      else
      {
        v28 = SESDefaultLogObject(0, v23);
        v25 = (void *)objc_claimAutoreleasedReturnValue(v28);
        v29 = SESErrorDomain;
        v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSData asHexString](v15, "asHexString"));
        v30 = SESCreateAndLogError(0, v25, v29, 0, CFSTR("Failed to parse SignedDeviceData %@"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(v30);

      }
    }

  }
  return v10;
}

id sub_1000317C0(unsigned int a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];
  char v6;
  __int16 v7;

  v6 = 1;
  v7 = __rev16(a1);
  v5[0] = &v6;
  v5[1] = 1;
  v5[2] = &v7;
  v5[3] = 2;
  v5[4] = objc_msgSend(a2, "DERItem");
  v5[5] = v2;
  v3 = encodeSequenceSpec(v5, &off_100303EF0);
  return (id)objc_claimAutoreleasedReturnValue(v3);
}

id sub_10003181C(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, _QWORD *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  __int16 v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  id v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  __int128 v80;
  __int128 v81;
  _QWORD v82[2];
  id v83;
  uint8_t buf[8];
  uint64_t v85;
  __int16 *v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  id v98;
  id v99;
  __int16 v100;
  char v101;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v20 = SESDefaultLogObject(v18, v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  v22 = sub_100031564(v13, v14);
  v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
  if (!v23)
  {
    v101 = 1;
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "slot"));
    v27 = __rev16(objc_msgSend(v26, "number"));

    v100 = v27;
    v98 = 0;
    v99 = 0;
    v28 = sub_100031D58(v13, v14, v15, &v99, &v98);
    v24 = (id)objc_claimAutoreleasedReturnValue(v28);
    v29 = v99;
    v30 = v98;
    v79 = v30;
    if (v24 || !v29 || (v31 = v30) == 0)
    {
      if (a7)
      {
        v45 = SESEnsureError(v24);
        v25 = 0;
        *a7 = (id)objc_claimAutoreleasedReturnValue(v45);
      }
      else
      {
        v25 = 0;
      }
      goto LABEL_42;
    }
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "dataUsingEncoding:", 4));
    *(_QWORD *)buf = &v101;
    v85 = 1;
    v86 = &v100;
    v87 = 2;
    v78 = v32;
    v88 = objc_msgSend(v32, "DERItem");
    v89 = v33;
    v90 = 0;
    v91 = 0;
    v92 = objc_msgSend(v29, "DERItem");
    v93 = v34;
    v94 = objc_msgSend(v31, "DERItem");
    v95 = v35;
    v96 = 0;
    v97 = 0;
    if (v17)
    {
      v90 = objc_msgSend(v17, "DERItem");
      v91 = v36;
    }
    if (objc_msgSend(v18, "length"))
    {
      v37 = objc_msgSend(v18, "length");
      if ((unint64_t)v37 >= 0x21)
      {
        if (!a7)
        {
          v67 = 0;
          v24 = 0;
          v25 = 0;
          v62 = v78;
LABEL_41:

LABEL_42:
          goto LABEL_43;
        }
        v39 = SESDefaultLogObject(v37, v38);
        v40 = objc_claimAutoreleasedReturnValue(v39);
        v41 = SESErrorDomain;
        objc_msgSend(v18, "length");
        v42 = SESCreateAndLogError(0, v40, v41, 1, CFSTR("Cannot SEAttest with a nonce length %u"));
        v43 = (id)objc_claimAutoreleasedReturnValue(v42);
        v44 = (void *)v40;
        v77 = 0;
        v24 = 0;
        v25 = 0;
        *a7 = v43;
        goto LABEL_34;
      }
      v46 = encodeItem(4, objc_msgSend(v18, "length"), objc_msgSend(objc_retainAutorelease(v18), "bytes"));
      v77 = (void *)objc_claimAutoreleasedReturnValue(v46);
      v96 = objc_msgSend(v77, "DERItem");
      v97 = v47;
    }
    else
    {
      v77 = 0;
    }
    v48 = sub_10002CFE8(0xB000u, (uint64_t)buf, (uint64_t)&off_100303FC0);
    v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
    v44 = v49;
    if (!v49)
    {
      if (!a7)
      {
        v24 = 0;
        v25 = 0;
LABEL_34:
        v62 = v78;
LABEL_40:

        v67 = v77;
        goto LABEL_41;
      }
      v76 = 0;
      v60 = SESDefaultLogObject(0, v50);
      v73 = objc_claimAutoreleasedReturnValue(v60);
      v61 = SESCreateAndLogError(0, v73, SESErrorDomain, 0, CFSTR("Could not encode SEAttestKeyCommandData"));
      v24 = 0;
      v25 = 0;
      *a7 = (id)objc_claimAutoreleasedReturnValue(v61);
      v54 = (void *)v73;
      v62 = v78;
LABEL_39:

      v44 = v76;
      goto LABEL_40;
    }
    v75 = v29;
    v76 = v49;
    v83 = 0;
    v51 = sub_1000336E0(v13, v14, v49, 1, &v83);
    v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
    v24 = v83;
    v54 = v52;
    if (!v24 && v52)
    {
      v82[0] = objc_msgSend(v52, "DERItem");
      v82[1] = v55;
      v80 = 0u;
      v81 = 0u;
      v56 = DERParseSequenceSpec(v82, &off_100303FD0, &v80, 32);
      if ((_DWORD)v56)
      {
        if (a7)
        {
          v58 = SESDefaultLogObject(v56, v57);
          v71 = (void *)objc_claimAutoreleasedReturnValue(v58);
          v70 = SESErrorDomain;
          v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "asHexString"));
          v59 = SESCreateAndLogError(0, v71, v70, 0, CFSTR("Failed (%d) to parse encryptOutput %@"));
          *a7 = (id)objc_claimAutoreleasedReturnValue(v59);

          v54 = v52;
LABEL_31:
          v25 = 0;
          v62 = v78;
LABEL_38:
          v29 = v75;
          goto LABEL_39;
        }
        v25 = 0;
      }
      else
      {
        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithDERItem:](NSData, "dataWithDERItem:", &v81));
      }
      v62 = v78;
      v54 = v52;
      goto LABEL_38;
    }
    if (a7)
    {
      v74 = v52;
      v63 = SESDefaultLogObject(v52, v53);
      v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
      v72 = SESErrorDomain;
      v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "slot"));
      objc_msgSend(v65, "number");
      v66 = SESCreateAndLogError(v24, v64, v72, 0, CFSTR("Performing attest on slot 0x%x"));
      *a7 = (id)objc_claimAutoreleasedReturnValue(v66);

      v54 = v74;
    }
    goto LABEL_31;
  }
  v24 = v23;
  if (a7)
  {
    v24 = objc_retainAutorelease(v23);
    v25 = 0;
    *a7 = v24;
  }
  else
  {
    v25 = 0;
  }
LABEL_43:

  return v25;
}

id sub_100031D58(void *a1, void *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned int v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  const __CFString *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD v65[2];
  __int128 v66;
  __int128 v67;
  id v68;
  _QWORD v69[4];
  __int16 v70;
  char v71;
  uint8_t buf[32];
  __int128 v73;
  __int128 v74;
  __int128 v75;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = sub_10002EB98(v9, v10);
  v13 = v12;
  v15 = SESDefaultLogObject(v12, v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "key"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "slot"));
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v17;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%@ %@", buf, 0x16u);

  }
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "slot"));
  v20 = objc_msgSend(v19, "synchronizable");

  if (!v20 || v13 <= 1)
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "key"));
    *a4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "assetACL"));

    v23 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "key"));
    v24 = 0;
    *a5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "assetACLAttestation"));
    goto LABEL_19;
  }
  v21 = sub_10004FBA0(v9, v10);
  v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  if (!v22)
  {
    v71 = 1;
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "slot"));
    v27 = __rev16(objc_msgSend(v26, "number"));

    v70 = v27;
    v69[0] = &v71;
    v69[1] = 1;
    v69[2] = &v70;
    v69[3] = 2;
    v28 = sub_10002CFE8(0x1001u, (uint64_t)v69, (uint64_t)&off_100304090);
    v30 = (void *)objc_claimAutoreleasedReturnValue(v28);
    if (v30)
    {
      v68 = 0;
      v31 = sub_1000336E0(v9, v10, v30, 1, &v68);
      v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      v33 = v68;
      v23 = v33;
      if (!v32 || v33)
      {
        v43 = SESEnsureError(v33);
        v24 = (void *)objc_claimAutoreleasedReturnValue(v43);
      }
      else
      {
        v66 = 0u;
        v67 = 0u;
        v34 = DERParseSequenceSpec(v32, &off_1003040A0, &v66, 32);
        if ((_DWORD)v34)
        {
          v36 = SESDefaultLogObject(v34, v35);
          v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
          v38 = SESErrorDomain;
          v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "base64"));
          v40 = CFSTR("Failed to parse PTCCommandGetKeyOutput %d - %@");
        }
        else
        {
          v74 = 0u;
          v75 = 0u;
          v73 = 0u;
          memset(buf, 0, sizeof(buf));
          v44 = DERParseSequenceSpecContent(&v67, &off_1003040B0, buf, 80);
          if (!(_DWORD)v44)
          {
            v64 = 0;
            v65[0] = 0;
            v65[1] = 0;
            v49 = DERDecodeItem((uint64_t)&v75, &v64);
            if ((_DWORD)v49)
            {
              v51 = SESDefaultLogObject(v49, v50);
              v52 = objc_claimAutoreleasedReturnValue(v51);
              v53 = SESErrorDomain;
              v54 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "base64"));
              v55 = (id)v52;
              v56 = SESCreateAndLogError(0, v52, v53, 0, CFSTR("Failed to decode assetACLAndAttestation %d - %@"));
              v24 = (void *)objc_claimAutoreleasedReturnValue(v56);
            }
            else
            {
              v57 = DERDecodeAdvance(v65, 0x2000000000000010, 1);
              v55 = (id)objc_claimAutoreleasedReturnValue(v57);
              v58 = DERDecodeAdvance(v65, 4, 0);
              v59 = objc_claimAutoreleasedReturnValue(v58);
              v54 = (id)v59;
              if (v55 && v59)
              {
                v55 = objc_retainAutorelease(v55);
                *a4 = v55;
                v54 = objc_retainAutorelease(v54);
                v24 = 0;
                *a5 = v54;
              }
              else
              {
                v61 = SESDefaultLogObject(v59, v60);
                v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
                v63 = SESCreateAndLogError(0, v62, SESErrorDomain, 0, CFSTR("Failed to decode assetACLAndAttestation?"));
                v24 = (void *)objc_claimAutoreleasedReturnValue(v63);

              }
            }

            goto LABEL_18;
          }
          v46 = SESDefaultLogObject(v44, v45);
          v37 = (void *)objc_claimAutoreleasedReturnValue(v46);
          v38 = SESErrorDomain;
          v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "base64"));
          v40 = CFSTR("Failed to parse PTCKeyInVirtualSlot %d - %@");
        }
        v47 = SESCreateAndLogError(0, v37, v38, 0, v40);
        v24 = (void *)objc_claimAutoreleasedReturnValue(v47);

      }
    }
    else
    {
      v41 = SESDefaultLogObject(0, v29);
      v32 = (void *)objc_claimAutoreleasedReturnValue(v41);
      v42 = SESCreateAndLogError(0, v32, SESErrorDomain, 0, CFSTR("Failed to encode?"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(v42);
      v23 = 0;
    }
LABEL_18:

    goto LABEL_19;
  }
  v23 = v22;
  v24 = v23;
LABEL_19:

  return v24;
}

id sub_100032238(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, _QWORD *a10)
{
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  NSObject *v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  id v84;
  id v85;
  id v86;
  _QWORD v87[2];
  id v88;
  __int16 v89;
  __int16 v90;
  char v91;
  id v92;
  id v93;
  uint8_t v94[16];
  __int128 v95;
  _BYTE buf[24];
  uint64_t v97;
  __int16 *v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  id v114;
  uint64_t v115;

  v17 = a1;
  v18 = a2;
  v19 = a4;
  v20 = a5;
  v86 = a6;
  v21 = a7;
  v85 = a8;
  v22 = a9;
  v23 = a3;
  v25 = SESDefaultLogObject(v23, v24);
  v26 = objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v19;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v20;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "ptc_KeyAttestKey %@ %@", buf, 0x16u);
  }

  v92 = 0;
  v93 = 0;
  v27 = sub_10002FDF8(v17, v18, v20, v23, CFSTR("oa"), &v93, &v92);
  v28 = (id)objc_claimAutoreleasedReturnValue(v27);

  v29 = v93;
  v84 = v92;
  if (!v28)
  {
    v31 = v22;
    v91 = 1;
    v32 = v29;
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "slot"));
    v83 = v21;
    v34 = __rev16(objc_msgSend(v33, "number"));

    v90 = v34;
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "slot"));
    v36 = __rev16(objc_msgSend(v35, "number"));

    v89 = v36;
    v21 = v83;
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "dataUsingEncoding:", 4));
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "dataUsingEncoding:", 4));
    *(_QWORD *)buf = &v91;
    *(_QWORD *)&buf[8] = 1;
    *(_QWORD *)&buf[16] = &v90;
    v97 = 2;
    v98 = &v89;
    v99 = 2;
    v79 = v37;
    v100 = objc_msgSend(v37, "DERItem");
    v101 = v39;
    v81 = v38;
    v102 = objc_msgSend(v38, "DERItem");
    v103 = v40;
    v104 = 0;
    v105 = 0;
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "key"));
    v106 = objc_msgSend(v41, "assetACLItem");
    v107 = v42;
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "key"));
    v108 = objc_msgSend(v43, "assetACLAttestationItem");
    v109 = v44;
    v82 = v32;
    v110 = objc_msgSend(v32, "DERItem");
    v111 = v45;
    v112 = objc_msgSend(v84, "DERItem");
    v113 = v46;
    v114 = 0;
    v115 = 0;

    if (v85)
    {
      v104 = objc_msgSend(v85, "DERItem");
      v105 = v47;
    }
    v22 = v31;
    if (v31)
    {
      v48 = encodeItem(4, objc_msgSend(v31, "length"), objc_msgSend(objc_retainAutorelease(v31), "bytes"));
      v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
      v114 = objc_msgSend(v49, "DERItem");
      v115 = v50;
    }
    else
    {
      v49 = 0;
    }
    v51 = sub_10002CFE8(0xB001u, (uint64_t)buf, (uint64_t)&off_100303FE0);
    v52 = objc_claimAutoreleasedReturnValue(v51);
    v54 = (void *)v52;
    v80 = v49;
    if (v52)
    {
      v55 = SESDefaultLogObject(v52, v53);
      v56 = objc_claimAutoreleasedReturnValue(v55);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
      {
        v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "asHexString"));
        *(_DWORD *)v94 = 138412290;
        *(_QWORD *)&v94[4] = v57;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "KeyAttestKeyCommandData : %@", v94, 0xCu);

      }
      v88 = 0;
      v58 = sub_1000336E0(v17, v18, v54, 1, &v88);
      v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
      v60 = v88;
      v28 = v60;
      if (v60 || !v59)
      {
        if (a10)
        {
          v69 = SESDefaultLogObject(v60, v61);
          v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
          v78 = SESErrorDomain;
          v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "slot"));
          objc_msgSend(v71, "number");
          v72 = SESCreateAndLogError(v28, v70, v78, 0, CFSTR("Performing keyAttestKey on slot 0x%x"));
          *a10 = (id)objc_claimAutoreleasedReturnValue(v72);

        }
      }
      else
      {
        v87[0] = objc_msgSend(v59, "DERItem");
        v87[1] = v62;
        *(_OWORD *)v94 = 0u;
        v95 = 0u;
        v63 = DERParseSequenceSpec(v87, &off_100303FF0, v94, 32);
        if (!(_DWORD)v63)
        {
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithDERItem:](NSData, "dataWithDERItem:", &v95));
          goto LABEL_25;
        }
        if (a10)
        {
          v65 = SESDefaultLogObject(v63, v64);
          v77 = (void *)objc_claimAutoreleasedReturnValue(v65);
          v76 = SESErrorDomain;
          v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "asHexString"));
          v66 = SESCreateAndLogError(0, v77, v76, 0, CFSTR("Failed (%d) to parse KeyAttestKeyOutput %@"));
          *a10 = (id)objc_claimAutoreleasedReturnValue(v66);

        }
      }
      v30 = 0;
    }
    else
    {
      if (!a10)
      {
        v28 = 0;
        v30 = 0;
        v73 = v79;
        goto LABEL_26;
      }
      v67 = SESDefaultLogObject(0, v53);
      v59 = (void *)objc_claimAutoreleasedReturnValue(v67);
      v68 = SESCreateAndLogError(0, v59, SESErrorDomain, 0, CFSTR("Could not encode KeyAttestKeyInputData"));
      v28 = 0;
      v30 = 0;
      *a10 = (id)objc_claimAutoreleasedReturnValue(v68);
    }
LABEL_25:
    v73 = v79;

    v21 = v83;
LABEL_26:

    v29 = v82;
    goto LABEL_27;
  }
  if (a10)
  {
    v28 = objc_retainAutorelease(v28);
    v30 = 0;
    *a10 = v28;
  }
  else
  {
    v30 = 0;
  }
LABEL_27:

  return v30;
}

id sub_10003280C(void *a1, void *a2, void *a3, unsigned int a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v31;
  __int16 v32;
  char v33;
  __int128 buf;
  __int16 *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  id v43;
  uint64_t v44;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v11 = SESDefaultLogObject(v9, v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v9;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "ptc_LoadKey %@", (uint8_t *)&buf, 0xCu);
  }

  v33 = 1;
  v32 = __rev16(a4);
  *(_QWORD *)&buf = &v33;
  *((_QWORD *)&buf + 1) = 1;
  v35 = &v32;
  v36 = 2;
  v37 = objc_msgSend(v9, "keyBlobItem");
  v38 = v13;
  v39 = objc_msgSend(v9, "encryptedWrappedKeyBlobItem");
  v40 = v14;
  v41 = objc_msgSend(v9, "assetACLItem");
  v42 = v15;
  v43 = objc_msgSend(v9, "assetACLAttestationItem");
  v44 = v16;
  v17 = sub_10002CFE8(0x1000u, (uint64_t)&buf, (uint64_t)&off_100303F20);
  v19 = (void *)objc_claimAutoreleasedReturnValue(v17);
  if (v19)
  {
    v31 = 0;
    v20 = sub_1000336E0(v7, v8, v19, 1, &v31);
    v21 = v31;
    v23 = v21;
    if (v21)
    {
      v24 = SESDefaultLogObject(v21, v22);
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      v26 = SESCreateAndLogError(0, v25, SESErrorDomain, 0, CFSTR("While loading into slot 0x%x"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);

    }
    else
    {
      v27 = 0;
    }
  }
  else
  {
    v28 = SESDefaultLogObject(0, v18);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v28);
    v29 = SESCreateAndLogError(0, v23, SESErrorDomain, 0, CFSTR("Could not create LoadKeyInputCommandData"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(v29);
  }

  return v27;
}

id sub_100032A2C(void *a1, void *a2, void *a3, void *a4, void *a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  __int16 v40;
  id v41;
  id v42;
  _BYTE buf[24];
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  uint64_t v48;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v17 = SESDefaultLogObject(v15, v16);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "key"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "slot"));
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v19;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Exporting key %@ slot %@", buf, 0x16u);

  }
  v41 = 0;
  v42 = 0;
  v21 = sub_10002FDF8(v11, v12, v13, v15, CFSTR("os"), &v42, &v41);
  v22 = (void *)objc_claimAutoreleasedReturnValue(v21);

  v23 = v42;
  v24 = v41;
  if (v22)
  {
    v25 = 0;
    if (a6)
      *a6 = objc_retainAutorelease(v22);
  }
  else
  {
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "slot"));
    v27 = __rev16(objc_msgSend(v26, "number"));

    v40 = v27;
    *(_QWORD *)buf = &v40;
    *(_QWORD *)&buf[8] = 2;
    *(_QWORD *)&buf[16] = objc_msgSend(v14, "DERItem");
    v44 = v28;
    v45 = objc_msgSend(v23, "DERItem");
    v46 = v29;
    v47 = objc_msgSend(v24, "DERItem");
    v48 = v30;
    v31 = sub_10002CFE8(0xD001u, (uint64_t)buf, (uint64_t)&off_100304060);
    v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
    v34 = v32;
    if (v32)
    {
      v35 = sub_1000336E0(v11, v12, v32, 1, a6);
      v25 = (void *)objc_claimAutoreleasedReturnValue(v35);
    }
    else
    {
      if (a6)
      {
        v36 = SESDefaultLogObject(0, v33);
        v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
        v38 = SESCreateAndLogError(0, v37, SESErrorDomain, 0, CFSTR("Could not encode PTExportKeyInput"));
        *a6 = (id)objc_claimAutoreleasedReturnValue(v38);

      }
      v25 = 0;
    }

  }
  return v25;
}

BOOL sub_100032CC8(void *a1, void *a2, unsigned int a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v28;
  uint8_t buf[8];
  uint64_t v30;
  id v31;
  uint64_t v32;

  v9 = a1;
  v10 = a2;
  v11 = a4;
  v13 = SESDefaultLogObject(v11, v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "into slot 0x%x", buf, 8u);
  }

  v28 = __rev16(a3);
  *(_QWORD *)buf = &v28;
  v30 = 2;
  v15 = objc_msgSend(v11, "DERItem");
  v17 = v16;

  v31 = v15;
  v32 = v17;
  v18 = sub_10002CFE8(0xD002u, (uint64_t)buf, (uint64_t)&off_100304070);
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  v21 = v19;
  if (v19)
  {
    v22 = sub_1000336E0(v9, v10, v19, 1, a5);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    v24 = v23 != 0;
  }
  else
  {
    if (!a5)
    {
      v24 = 0;
      goto LABEL_8;
    }
    v25 = SESDefaultLogObject(0, v20);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v25);
    v26 = SESCreateAndLogError(0, v23, SESErrorDomain, 0, CFSTR("Could not encode PTCImportKeyInput"));
    v24 = 0;
    *a5 = (id)objc_claimAutoreleasedReturnValue(v26);
  }

LABEL_8:
  return v24;
}

id sub_100032E74(void *a1, void *a2, void *a3, void *a4, void *a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  const __CFData *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  const __CFData *v25;
  const char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  const __CFData *v30;
  id v31;
  void *v32;
  const __CFData *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __CFData *v37;
  uint64_t v38;
  __CFData *v39;
  uint64_t v40;
  NSObject *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  void *v47;
  void *v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  void *v72;
  __CFData *v73;
  __CFData *v74;
  id v75;
  void *v76;
  const __CFData *v77;
  id v78;
  __int16 v79;
  char v80;
  __CFData *v81;
  __CFData *v82;
  const __CFData *v83;
  id v84;
  id v85;
  __int128 buf;
  __int16 *v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  id v95;
  uint64_t v96;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v17 = SESDefaultLogObject(v15, v16);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "", (uint8_t *)&buf, 2u);
  }

  if (v12 && v13 && v14 && v15)
  {
    v84 = 0;
    v85 = 0;
    v83 = 0;
    v21 = sub_1000333E0(v11, v12, v14, v13, CFSTR("oacl"), &v85, &v84, &v83);
    v22 = (id)objc_claimAutoreleasedReturnValue(v21);
    v23 = v85;
    v24 = v84;
    v25 = v83;
    v77 = v25;
    if (v22)
    {
      if (a6)
      {
        v22 = objc_retainAutorelease(v22);
        v27 = 0;
        *a6 = v22;
      }
      else
      {
        v27 = 0;
      }
      goto LABEL_36;
    }
    v30 = v25;
    v76 = v24;
    v81 = 0;
    v82 = 0;
    v31 = sub_10005066C(v11, v26);
    v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
    v33 = (const __CFData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "seid"));
    LODWORD(v30) = SSECreateSecureElementACLRequest(-1, v33, v15, v30, &v82, &v81);

    if ((_DWORD)v30)
    {
      if (!a6)
      {
        v22 = 0;
        v27 = 0;
        v24 = v76;
LABEL_36:

        goto LABEL_37;
      }
      v75 = v23;
      v36 = SESDefaultLogObject(v34, v35);
      v37 = (__CFData *)objc_claimAutoreleasedReturnValue(v36);
      v38 = SESCreateAndLogError(0, v37, SESErrorDomain, 0, CFSTR("SSECreateSecureElementACLRequest : %d"));
      v22 = 0;
      v27 = 0;
      *a6 = (id)objc_claimAutoreleasedReturnValue(v38);
      v24 = v76;
LABEL_35:

      v23 = v75;
      goto LABEL_36;
    }
    v39 = v82;
    v74 = v81;
    v75 = v23;
    v40 = SESDefaultLogObject(v34, v35);
    v41 = objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      v42 = (void *)objc_claimAutoreleasedReturnValue(-[__CFData asHexString](v39, "asHexString"));
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v42;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "AssetACLRequest : %@", (uint8_t *)&buf, 0xCu);

    }
    v73 = v39;

    v45 = SESDefaultLogObject(v43, v44);
    v46 = objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
    {
      v47 = (void *)objc_claimAutoreleasedReturnValue(-[__CFData asHexString](v74, "asHexString"));
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v47;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "assetACLRequestAttestation : %@", (uint8_t *)&buf, 0xCu);

    }
    v80 = 1;
    v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "slot"));
    v49 = __rev16(objc_msgSend(v48, "number"));

    v79 = v49;
    *(_QWORD *)&buf = &v80;
    *((_QWORD *)&buf + 1) = 1;
    v87 = &v79;
    v88 = 2;
    v89 = -[__CFData DERItem](v73, "DERItem");
    v90 = v50;
    v91 = -[__CFData DERItem](v74, "DERItem");
    v92 = v51;
    v93 = objc_msgSend(v23, "DERItem");
    v94 = v52;
    v24 = v76;
    v95 = objc_msgSend(v76, "DERItem");
    v96 = v53;
    v54 = sub_10002CFE8(0xD003u, (uint64_t)&buf, (uint64_t)&off_100304080);
    v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
    v57 = v55;
    if (v55)
    {
      v78 = 0;
      v58 = sub_1000336E0(v11, v12, v55, 0, &v78);
      v59 = objc_claimAutoreleasedReturnValue(v58);
      v22 = v78;
      v61 = (id)v59;
      if (v22 || !v59)
      {
        if (a6)
        {
          v72 = (void *)v59;
          v65 = SESDefaultLogObject(v59, v60);
          v70 = (void *)objc_claimAutoreleasedReturnValue(v65);
          v69 = SESErrorDomain;
          v62 = v57;
          v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "asHexString"));
          v24 = v76;
          v66 = SESCreateAndLogError(v22, v70, v69, 0, CFSTR("KeyCommand failed: %@"));
          *a6 = (id)objc_claimAutoreleasedReturnValue(v66);

          v61 = v72;
        }
        else
        {
          v62 = v57;
        }
        v27 = 0;
      }
      else
      {
        v62 = v57;
        v61 = v61;
        v27 = v61;
      }
    }
    else
    {
      v62 = 0;
      if (!a6)
      {
        v22 = 0;
        v27 = 0;
LABEL_34:

        v37 = v73;
        goto LABEL_35;
      }
      v63 = SESDefaultLogObject(0, v56);
      v71 = objc_claimAutoreleasedReturnValue(v63);
      v64 = SESCreateAndLogError(0, v71, SESErrorDomain, 0, CFSTR("Could not create updateACLCommandData"));
      v22 = 0;
      v27 = 0;
      *a6 = (id)objc_claimAutoreleasedReturnValue(v64);
      v61 = (id)v71;
    }

    goto LABEL_34;
  }
  if (a6)
  {
    v28 = SESDefaultLogObject(v19, v20);
    v23 = (id)objc_claimAutoreleasedReturnValue(v28);
    v29 = SESCreateAndLogError(0, v23, SESErrorDomain, 1, CFSTR("Nil passed to ptc_UpdateACL"));
    v27 = 0;
    *a6 = (id)objc_claimAutoreleasedReturnValue(v29);
LABEL_37:

    goto LABEL_38;
  }
  v27 = 0;
LABEL_38:

  return v27;
}

id sub_1000333E0(void *a1, void *a2, void *a3, void *a4, void *a5, _QWORD *a6, _QWORD *a7, const __CFData **a8)
{
  id v15;
  id v16;
  const __CFData *v17;
  __CFString *v18;
  id v19;
  void *v20;
  const __CFData *v21;
  const __CFData *v22;
  const __CFData *v23;
  unsigned int v24;
  const char *v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  id v38;
  const __CFData *v39;
  const char *v40;
  id v41;
  void *v42;
  id v43;
  const char *v44;
  id v45;
  void *v46;
  const __CFData *v47;
  unsigned int v48;
  int v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v58;
  void *v59;
  void *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;

  v15 = a1;
  v16 = a2;
  v17 = a4;
  v18 = a5;
  v67 = 0;
  v68 = 0;
  v19 = sub_100031D58(v15, v16, a3, &v68, &v67);
  v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  v21 = (const __CFData *)v68;
  v22 = (const __CFData *)v67;
  v23 = v22;
  if (v20 || !v21 || !v22)
  {
    v35 = SESEnsureError(v20);
    v34 = (void *)objc_claimAutoreleasedReturnValue(v35);
LABEL_19:

    goto LABEL_20;
  }
  v61 = a6;
  v62 = a7;
  v24 = sub_10002EB98(v15, v16);
  v26 = sub_10005066C(v15, v25);
  v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  v28 = objc_msgSend(v27, "type");

  if (v28 != (id)4 || v24 > 2)
  {
    v66 = 0;
    v36 = sub_10002EC90(v15, v16, &v66);
    v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
    v38 = v66;
    v20 = v38;
    if (v38 || !v37)
    {
      v56 = SESEnsureError(v38);
      v34 = (void *)objc_claimAutoreleasedReturnValue(v56);
    }
    else
    {
      v60 = v37;
      v39 = objc_retainAutorelease(v37);
      *a8 = v39;
      v41 = sub_10005066C(v15, v40);
      v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
      v43 = objc_msgSend(v42, "type");

      v64 = 0;
      v65 = 0;
      v45 = sub_10005066C(v15, v44);
      v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
      v47 = (const __CFData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "seid"));
      if ((unint64_t)v43 <= 3)
        v48 = 1;
      else
        v48 = 2;
      v49 = SSEEvaluateSecureElementACL(v17, -1, v47, v21, v23, v18, v39, v48, (const __CFData **)&v65, (const __CFData **)&v64);

      *v61 = v65;
      v50 = v64;
      *v62 = v50;
      if (v49)
      {
        v52 = SESDefaultLogObject(v50, v51);
        v53 = objc_claimAutoreleasedReturnValue(v52);
        v63 = SESErrorDomain;
        v58 = (void *)objc_claimAutoreleasedReturnValue(-[__CFData asHexString](v21, "asHexString"));
        v59 = (void *)objc_claimAutoreleasedReturnValue(-[__CFData asHexString](v23, "asHexString"));
        v54 = (void *)v53;
        v55 = SESCreateAndLogError(0, v53, v63, 0, CFSTR("Failed (%d) to evaluate ACL %@ with attestation %@"));
        v34 = (void *)objc_claimAutoreleasedReturnValue(v55);

      }
      else
      {
        v34 = 0;
      }
      v20 = 0;
      v37 = v60;
    }

    goto LABEL_19;
  }
  v31 = SESDefaultLogObject(v29, v30);
  v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
  v33 = SESCreateAndLogError(0, v32, SESErrorDomain, -1200, CFSTR("Cannot have SE type EOS but ptcVersion %d"));
  v34 = (void *)objc_claimAutoreleasedReturnValue(v33);

LABEL_20:
  return v34;
}

id sub_1000336E0(void *a1, void *a2, void *a3, int a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  unint64_t v18;
  id v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  void *v25;
  id *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  id *v41;
  id *v42;
  void *v43;
  id v44;
  int i;
  id *v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  id *v52;
  void *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  id v68;
  id v69;
  id v70;
  _QWORD *v71;
  id v72;
  uint64_t v73;
  id v74;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = sub_10004FBA0(v9, v10);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  if (!v13)
  {
    v70 = v10;
    v71 = a5;
    sub_10002EB98(v9, v10);
    v68 = v9;
    v72 = v9;
    v69 = v11;
    v16 = v11;
    v17 = v16;
    if (a4)
      v18 = 700;
    else
      v18 = 255;
    v19 = objc_msgSend(v16, "length");
    if (v19)
    {
      v20 = (unint64_t)v19;
      v21 = 0;
      v22 = 0;
      while (1)
      {
        v23 = v20 >= v18 ? v18 : v20;
        v24 = v22 || (id)v23 != objc_msgSend(v17, "length")
            ? (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "subdataWithRange:", v22, v23))
            : v17;
        v25 = v24;
        if (a4)
        {
          v74 = 0;
          v26 = &v74;
          v27 = sub_10004FA80(v72, 128, 160, (v20 < 0x2BD) << 7, 0, v24, 0, &v74);
        }
        else
        {
          v73 = 0;
          v26 = (id *)&v73;
          v27 = sub_10004F8D8(v72, 128, 160, (v20 < 0x100) << 7, 0, v24, 0, &v73);
        }
        v28 = (id)objc_claimAutoreleasedReturnValue(v27);
        v29 = *v26;

        if (v29 || v28 == 0)
          break;
        v22 += v23;
        v20 -= v23;

        v21 = v28;
        if (!v20)
          goto LABEL_27;
      }
      v35 = SESDefaultLogObject(v30, v31);
      v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
      v37 = SESCreateAndLogError(v29, v36, SESErrorDomain, 0, CFSTR("Failed to write at offset 0x%x"));
      v33 = (id)objc_claimAutoreleasedReturnValue(v37);

      v34 = 0;
    }
    else
    {
      v28 = 0;
LABEL_27:
      v28 = v28;
      v33 = 0;
      v34 = v28;
    }

    v38 = v33;
    v14 = v38;
    if (v38 || !v34)
    {
      v9 = v68;
      if (!v71)
      {
        v15 = 0;
        v11 = v69;
        v10 = v70;
LABEL_53:

        goto LABEL_54;
      }
      v54 = SESDefaultLogObject(v38, v39);
      v55 = (id)objc_claimAutoreleasedReturnValue(v54);
      v56 = SESCreateAndLogError(v14, v55, SESErrorDomain, 0, CFSTR("While writing command"));
      v15 = 0;
      *v71 = (id)objc_claimAutoreleasedReturnValue(v56);
    }
    else
    {
      v40 = v72;
      v41 = v34;
      v42 = sub_10005582C(v41);
      v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
      v44 = objc_msgSend(v43, "mutableCopy");

      for (i = sub_100055868((uint64_t)v41) & 0xFF00; ; i = sub_100055868((uint64_t)v41) & 0xFF00)
      {
        if (i != 25344)
        {
          v55 = v44;
          v57 = 0;
          goto LABEL_43;
        }
        v46 = v41;
        v74 = 0;
        v47 = sub_10004FA80(v40, 128, 176, 0, 0, 0, 0, &v74);
        v41 = (id *)objc_claimAutoreleasedReturnValue(v47);
        v48 = v74;

        if (v48 || v41 == 0)
          break;
        v52 = sub_10005582C(v41);
        v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
        objc_msgSend(v44, "appendData:", v53);

      }
      v58 = SESDefaultLogObject(v49, v50);
      v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
      v60 = SESCreateAndLogError(v48, v59, SESErrorDomain, 0, CFSTR("Failed to read response"));
      v57 = (id)objc_claimAutoreleasedReturnValue(v60);

      v55 = 0;
LABEL_43:
      v9 = v68;

      v61 = v57;
      v14 = v61;
      if (v61)
        v63 = 1;
      else
        v63 = v55 == 0;
      if (v63)
      {
        v11 = v69;
        v10 = v70;
        if (v71)
        {
          v64 = SESDefaultLogObject(v61, v62);
          v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
          v66 = SESCreateAndLogError(v14, v65, SESErrorDomain, 0, CFSTR("While reading response for command"));
          *v71 = (id)objc_claimAutoreleasedReturnValue(v66);

        }
        v15 = 0;
        goto LABEL_52;
      }
      v55 = v55;
      v15 = v55;
    }
    v11 = v69;
    v10 = v70;
LABEL_52:

    goto LABEL_53;
  }
  v14 = v13;
  if (a5)
  {
    v14 = objc_retainAutorelease(v13);
    v15 = 0;
    *a5 = v14;
  }
  else
  {
    v15 = 0;
  }
LABEL_54:

  return v15;
}

uint64_t sub_100033B5C(void *a1, void *a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  BOOL v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  id v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  id v26;
  __int16 v27;
  void *v28;

  v7 = a2;
  v8 = a1;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", a3));
  v22 = 0;
  v10 = sub_10002D0B4(v8, v7, CFSTR("ForceTransitionToPersonalized"), v9, 0, 0, &v22);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = v22;

  if (v11)
    v13 = v12 == 0;
  else
    v13 = 0;
  v14 = v13;
  v15 = sub_10002EF28(v8, v7, a3);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

  v19 = SESDefaultLogObject(v17, v18);
  v20 = objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109634;
    v24 = v14;
    v25 = 2112;
    v26 = v12;
    v27 = 2112;
    v28 = v16;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "result %d creationError %@ cleanupError %@", buf, 0x1Cu);
  }

  if (a4)
    *a4 = objc_retainAutorelease(v12);

  return v14;
}

int sub_100033CE8(id a1, $82BA0F2068700BDE7EB192079FA08E63 *a2, BOOL *a3)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  _DWORD v10[2];

  if (a2->var0 == 0xA00000000000000ALL && a2->var1.var1 >= 4)
  {
    v4 = *(_DWORD *)a2->var1.var0;
    v5 = bswap32(v4);
    v6 = SESDefaultLogObject(a1, a2, a3);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v10[0] = 67109120;
      v10[1] = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Got raw PTC Applet Version 0x%X", (uint8_t *)v10, 8u);
    }

    if (v4 == 0x4000000)
      v8 = 3;
    else
      v8 = 4;
    if (v4 == 50331648)
      v8 = 2;
    if (v5 < 3)
      v8 = 1;
    dword_10034BB2C = v8;
    *a3 = 1;
  }
  return 0;
}

SESClientInfo *sub_100033EAC(uint64_t a1, void *a2)
{
  id v3;
  SESClientInfo *v4;
  void *v5;
  void *v6;
  NSString *v7;
  NSString *clientName;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v3 = a2;
  objc_opt_self(a1);
  v4 = objc_opt_new(SESClientInfo);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userInfo"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", &off_100322E60));
  v7 = (NSString *)objc_msgSend(v6, "copy");
  clientName = v4->_clientName;
  v4->_clientName = v7;

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForEntitlement:", CFSTR("com.apple.seserviced.seendpoints")));
  v4->_epEntitlement = v9 != 0;

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForEntitlement:", CFSTR("com.apple.seserviced.seendpoints.certificateauthorities")));
  v4->_caEntitlement = v10 != 0;

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForEntitlement:", CFSTR("com.apple.seserviced.key")));
  v4->_keyEntitlement = v11 != 0;

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForEntitlement:", CFSTR("com.apple.seserviced.key.legacykey")));
  v4->_sesLegacyKeyEntitlement = v12 != 0;

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForEntitlement:", CFSTR("com.apple.internal.seserviced.all.endpoints.and.cas")));
  v4->_allEPAndCAEntitlement = v13 != 0;

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForEntitlement:", CFSTR("com.apple.seserviced.key")));
  v4->_sesKeyEntitlement = v14 != 0;

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForEntitlement:", CFSTR("com.apple.internal.seserviced.ptattestation")));
  v4->_sesKeyPTAttestationEntitlement = v15 != 0;

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForEntitlement:", CFSTR("com.apple.internal.seserviced.fido")));
  v4->_sesFidoKeyEntitlement = v16 != 0;

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForEntitlement:", CFSTR("com.apple.private.seserviced.sesprivacykey")));
  v4->_privacyKeyEntitlement = v17 != 0;

  return v4;
}

id sub_10003407C(id result, const char *a2)
{
  if (result)
    return objc_getProperty(result, a2, 24, 1);
  return result;
}

uint64_t sub_100034090(uint64_t result)
{
  if (result)
    return *(_BYTE *)(result + 9) & 1;
  return result;
}

uint64_t sub_1000340A0(uint64_t result)
{
  if (result)
    return *(_BYTE *)(result + 10) & 1;
  return result;
}

uint64_t sub_1000340B0(uint64_t result)
{
  if (result)
    return *(_BYTE *)(result + 11) & 1;
  return result;
}

uint64_t sub_1000340C0(uint64_t result)
{
  if (result)
    return *(_BYTE *)(result + 12) & 1;
  return result;
}

uint64_t sub_1000340D0(uint64_t result)
{
  if (result)
    return *(_BYTE *)(result + 13) & 1;
  return result;
}

uint64_t sub_1000340E0(uint64_t result)
{
  if (result)
    return *(_BYTE *)(result + 14) & 1;
  return result;
}

uint64_t sub_1000340F0(uint64_t result)
{
  if (result)
    return *(_BYTE *)(result + 15) & 1;
  return result;
}

uint64_t sub_100034100(uint64_t result)
{
  if (result)
    return *(_BYTE *)(result + 16) & 1;
  return result;
}

_QWORD *sub_10003414C(void *a1, uint64_t a2, void *a3)
{
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  dispatch_queue_attr_t v8;
  NSObject *v9;
  dispatch_queue_attr_t v10;
  NSObject *v11;
  dispatch_queue_t v12;
  void *v13;
  void *v14;
  id *v15;
  uint64_t v16;
  void *v17;
  objc_super v19;

  v5 = a3;
  if (a1)
  {
    v19.receiver = a1;
    v19.super_class = (Class)SESServer;
    v6 = objc_msgSendSuper2(&v19, "initWithMachServiceName:", a2);
    v7 = v6;
    if (v6)
    {
      objc_msgSend(v6, "setDelegate:", v6);
      v8 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      v10 = dispatch_queue_attr_make_with_qos_class(v9, QOS_CLASS_DEFAULT, 0);
      v11 = objc_claimAutoreleasedReturnValue(v10);

      v12 = dispatch_queue_create("com.apple.seserviced.messagequeue", v11);
      v13 = (void *)v7[2];
      v7[2] = v12;

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "messageQueue"));
      v15 = sub_1000157F8((uint64_t)SESDatabase, v5, v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      v17 = (void *)v7[3];
      v7[3] = v16;

    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_100034B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;

  v4 = SESDefaultLogObject(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = *(_DWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 32);
    v8[0] = 67109378;
    v8[1] = v6;
    v9 = 2112;
    v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Connection to PID %d (%@) has been invalidated", (uint8_t *)v8, 0x12u);
  }

}

void sub_100034C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;

  v4 = SESDefaultLogObject(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = *(_DWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 32);
    v8[0] = 67109378;
    v8[1] = v6;
    v9 = 2112;
    v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Connection to PID %d (%@) has been interrupted", (uint8_t *)v8, 0x12u);
  }

}

void sub_100034E14(uint64_t a1)
{
  dispatch_queue_t *v2;
  void *v3;
  NSMutableSet *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[16];
  id v22;
  _BYTE v23[128];

  v2 = (dispatch_queue_t *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "database"));
  sub_10001697C(v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "database"));
  v22 = 0;
  v4 = sub_10003AEA4((uint64_t)v3, &v22);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = v22;

  if (v6)
  {
    v9 = SESDefaultLogObject(v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to retrieve endpoints", buf, 2u);
    }

  }
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v11 = v5;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v18;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v18 != v14)
          objc_enumerationMutation(v11);
        +[EndpointStore insertWithEndpoint:](_TtC10seserviced13EndpointStore, "insertWithEndpoint:", *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v15), (_QWORD)v17);
        v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
    }
    while (v13);
  }

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "messageQueue"));
  sub_10003657C((uint64_t)SESAppletLockStateMonitor, v16, *(void **)(*(_QWORD *)(a1 + 32) + 8));

  sub_10005B400((uint64_t)SESDebugServer);
  sub_100034FF4(*(uint64_t **)(a1 + 32));

}

void sub_100034FF4(uint64_t *a1)
{
  NSObject *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  id *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  SESConfigDCK *v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  _QWORD v29[4];
  id v30;
  uint64_t *v31;
  NSObject *v32;
  uint8_t *v33;
  id obj;
  uint8_t buf[8];
  uint8_t *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t);
  id v40;
  uint8_t v41[4];
  uint64_t v42;

  if (a1)
  {
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "messageQueue"));
    dispatch_assert_queue_V2(v2);

    v3 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
    v4 = objc_msgSend(v3, "BOOLForKey:", CFSTR("SignatureCertificatePKsHaveBeenFixed"));
    if ((v4 & 1) == 0)
    {
      v6 = SESDefaultLogObject(v4, v5);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Fixing signature certificate PKs", buf, 2u);
      }

      *(_QWORD *)buf = 0;
      v36 = buf;
      v37 = 0x3032000000;
      v38 = sub_1000357B4;
      v39 = sub_1000357C4;
      v8 = sub_100015E70(a1[3]);
      v40 = (id)objc_claimAutoreleasedReturnValue(v8);
      v9 = (id *)(v36 + 40);
      if (!*((_QWORD *)v36 + 5))
      {
        v10 = a1[3];
        obj = 0;
        v11 = sub_100055A58(v10, CFSTR("A000000809434343444B417631"), &obj);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        objc_storeStrong(v9, obj);
        if (*((_QWORD *)v36 + 5))
        {
          v15 = SESDefaultLogObject(v13, v14);
          v16 = objc_claimAutoreleasedReturnValue(v15);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            v17 = *((_QWORD *)v36 + 5);
            *(_DWORD *)v41 = 138412290;
            v42 = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to get instance entity %@", v41, 0xCu);
          }
        }
        else
        {
          v18 = objc_opt_new(SESConfigDCK);
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "endPoints"));
          v20 = a1[3];
          v29[0] = _NSConcreteStackBlock;
          v29[1] = 3221225472;
          v29[2] = sub_1000357CC;
          v29[3] = &unk_1003043E8;
          v21 = v19;
          v30 = v21;
          v31 = a1;
          v16 = v18;
          v32 = v16;
          v33 = buf;
          sub_1000168E4(v20, v29);
          if (*((_QWORD *)v36 + 5))
          {
            v24 = SESDefaultLogObject(v22, v23);
            v25 = objc_claimAutoreleasedReturnValue(v24);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              v26 = *((_QWORD *)v36 + 5);
              *(_DWORD *)v41 = 138412290;
              v42 = v26;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Failed to fix signature certificate PKs %@", v41, 0xCu);
            }

          }
          else
          {
            v27 = SESDefaultLogObject(v22, v23);
            v28 = objc_claimAutoreleasedReturnValue(v27);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)v41 = 0;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Signature certificate PKs have been fixed", v41, 2u);
            }

            objc_msgSend(v3, "setBool:forKey:", 1, CFSTR("SignatureCertificatePKsHaveBeenFixed"));
          }

        }
      }
      _Block_object_dispose(buf, 8);

    }
  }
}

void sub_100035330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100035364(id a1)
{
  +[DSK mandatoryInit](_TtC10seserviced3DSK, "mandatoryInit");
}

void sub_100035370(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[SESServer onFirstUnlock]_block_invoke_2"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100035424;
  v6[3] = &unk_100304398;
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v5 = v3;
  sub_100051680((uint64_t)SecureElementManager, v4, v6);

}

void sub_100035424(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v5 = a2;
  if (!a3)
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "messageQueue"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1000354D4;
    v7[3] = &unk_100304370;
    v8 = v5;
    v9 = *(id *)(a1 + 40);
    dispatch_async(v6, v7);

  }
}

void sub_1000354D4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned int v19;
  char v20;
  _QWORD block[4];
  unsigned __int8 v22;
  char v23;
  uint8_t buf[4];
  NSObject *v25;

  v2 = sub_10001313C(*(void **)(a1 + 32), *(void **)(a1 + 40));
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (v3)
  {
    v5 = v3;
    v6 = SESDefaultLogObject(v3, v4);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
LABEL_5:

LABEL_6:
      return;
    }
    *(_DWORD *)buf = 138412290;
    v25 = v5;
    v8 = "Not starting DSK due to failed applet personalization %@";
LABEL_4:
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v8, buf, 0xCu);
    goto LABEL_5;
  }
  v9 = *(void **)(a1 + 32);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704E000000000"), "hexStringAsData"));
  LOBYTE(v9) = sub_1000500FC(v9, v10);

  if ((v9 & 1) == 0)
  {
    v17 = SESDefaultLogObject(v11, v12);
    v5 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Not starting DSK due to missing Sunsprite", buf, 2u);
    }
    goto LABEL_6;
  }
  v13 = sub_100014404(*(void **)(a1 + 32), 0, *(void **)(a1 + 40));
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (v14)
  {
    v5 = v14;
    v16 = SESDefaultLogObject(v14, v15);
    v7 = objc_claimAutoreleasedReturnValue(v16);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_5;
    *(_DWORD *)buf = 138412290;
    v25 = v5;
    v8 = "Not starting DSK due to failed Sunsprite provisioning %@";
    goto LABEL_4;
  }
  v18 = +[EndpointStore containsWithFilter:](_TtC10seserviced13EndpointStore, "containsWithFilter:", &stru_100304308);
  v19 = +[EndpointStore containsWithFilter:](_TtC10seserviced13EndpointStore, "containsWithFilter:", &stru_100304328);
  v20 = v19;
  if ((v18 & 1) != 0 || v19)
  {
    v5 = objc_claimAutoreleasedReturnValue(+[DSK queue](_TtC10seserviced3DSK, "queue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100035728;
    block[3] = &unk_100304348;
    v22 = v18;
    v23 = v20;
    dispatch_async(v5, block);
    goto LABEL_6;
  }
}

BOOL sub_1000356E8(id a1, SEEndPoint *a2)
{
  return -[SEEndPoint endPointType](a2, "endPointType") == (id)1;
}

BOOL sub_100035708(id a1, SEEndPoint *a2)
{
  return -[SEEndPoint endPointType](a2, "endPointType") == (id)4;
}

void sub_100035728(uint64_t a1)
{
  void *v2;
  id v3;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[DSK shared](_TtC10seserviced3DSK, "shared"));
    objc_msgSend(v2, "startWithModule:", 0);

  }
  if (*(_BYTE *)(a1 + 33))
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[DSK shared](_TtC10seserviced3DSK, "shared"));
    objc_msgSend(v3, "startWithModule:", 1);

  }
}

uint64_t sub_1000357B4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000357C4(uint64_t a1)
{

}

void sub_1000357CC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  char **v5;
  void *i;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t CertificatePublicKey;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  void *v43;
  void *v44;
  NSObject *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint8_t buf[4];
  id v69;
  __int16 v70;
  id v71;
  _BYTE v72[128];

  v56 = a2;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v3 = *(id *)(a1 + 32);
  v61 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v64, v72, 16);
  if (v61)
  {
    v4 = *(_QWORD *)v65;
    v5 = &selRef_setMonitor_;
    v57 = a1;
    v58 = *(_QWORD *)v65;
    v59 = v3;
    do
    {
      for (i = 0; i != v61; i = (char *)i + 1)
      {
        if (*(_QWORD *)v65 != v4)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * (_QWORD)i);
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + *((int *)v5 + 836));
        v63 = 0;
        v9 = sub_10003ADE0(v8, v7, &v63);
        v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        v11 = v63;
        v13 = SESDefaultLogObject(v11, v12);
        v14 = objc_claimAutoreleasedReturnValue(v13);
        v15 = v14;
        if (!v11)
        {
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "publicKeyIdentifier"));
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "asHexString"));
            *(_DWORD *)buf = 138412290;
            v69 = v19;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Fixing endpoint %@", buf, 0xCu);

          }
          v20 = objc_alloc((Class)KmlRoutingInformation);
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "readerInfo"));
          v15 = objc_msgSend(v20, "initWithReaderInformation:", v21);

          v22 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject regionString](v15, "regionString"));
          v23 = objc_msgSend(v22, "length");
          if (v23 != (id)3)
          {
            v34 = SESDefaultLogObject(v23, v24);
            v25 = objc_claimAutoreleasedReturnValue(v34);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v69 = v22;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Invalid region %@", buf, 0xCu);
            }
            v11 = 0;
            goto LABEL_31;
          }
          v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "substringWithRange:", 2, 1));
          v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "substringToIndex:", 2));

          v27 = *(void **)(a1 + 48);
          v28 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject manufacturer](v15, "manufacturer"));
          v62 = 0;
          v29 = objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "getSignatureCertificateFor:environment:region:error:", v28, v25, v26, &v62));
          v11 = v62;

          v60 = (void *)v29;
          if (v11)
          {
            v32 = SESDefaultLogObject(v30, v31);
            v33 = objc_claimAutoreleasedReturnValue(v32);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v69 = v11;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Failed to retrieve signature certificate %@", buf, 0xCu);
            }
            v3 = v59;
LABEL_30:

            v22 = (void *)v26;
            v4 = v58;
LABEL_31:

            v5 = &selRef_setMonitor_;
            goto LABEL_32;
          }
          CertificatePublicKey = getCertificatePublicKey(v29);
          v33 = objc_claimAutoreleasedReturnValue(CertificatePublicKey);
          if (v33)
          {
            v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "signatureVerificationPK"));
            v38 = -[NSObject isEqualToData:](v33, "isEqualToData:", v37);

            if (v38)
            {
              v41 = SESDefaultLogObject(v39, v40);
              v42 = objc_claimAutoreleasedReturnValue(v41);
              if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
              {
                v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "publicKeyIdentifier"));
                v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "asHexString"));
                *(_DWORD *)buf = 138412290;
                v69 = v44;
                v45 = v42;
                v46 = "Nothing to fix for %@";
                goto LABEL_27;
              }
            }
            else
            {
              v49 = objc_msgSend(v7, "setSignatureVerificationPK:", v33);
              v51 = SESDefaultLogObject(v49, v50);
              v42 = objc_claimAutoreleasedReturnValue(v51);
              if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
              {
                v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "publicKeyIdentifier"));
                v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "asHexString"));
                *(_DWORD *)buf = 138412290;
                v69 = v44;
                v45 = v42;
                v46 = "Fixed signature certificate PK for %@";
LABEL_27:
                _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, v46, buf, 0xCu);

              }
            }
            a1 = v57;
          }
          else
          {
            v47 = SESDefaultLogObject(0, v36);
            v42 = objc_claimAutoreleasedReturnValue(v47);
            if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
            {
              v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "base64"));
              *(_DWORD *)buf = 138412290;
              v69 = v48;
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Failed to retrieve PK %@", buf, 0xCu);

            }
          }
          v3 = v59;

          goto LABEL_30;
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "publicKeyIdentifier"));
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "asHexString"));
          *(_DWORD *)buf = 138412546;
          v69 = v17;
          v70 = 2112;
          v71 = v11;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to get endpoint %@ %@", buf, 0x16u);

        }
LABEL_32:

      }
      v61 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v64, v72, 16);
    }
    while (v61);
  }

  v52 = sub_10002BA94((uint64_t)v56);
  v53 = objc_claimAutoreleasedReturnValue(v52);
  v54 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v55 = *(void **)(v54 + 40);
  *(_QWORD *)(v54 + 40) = v53;

}

void sub_100035EF0(uint64_t a1)
{
  if (MKBDeviceUnlockedSinceBoot())
    -[FirstUnlockHandler onDarwinNotification:]_0(*(_QWORD *)(a1 + 32));
}

void sub_100035F24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  dispatch_queue_global_t global_queue;
  NSObject *v10;
  id v11;
  uint8_t buf[4];
  void *v13;

  v2 = SESDefaultLogObject(a1, a2);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Kicking off first unlock actions", buf, 2u);
  }

  objc_msgSend((id)qword_10034BB38, "onFirstUnlock");
  +[SEKeySyncManager kickOff](_TtC10seserviced16SEKeySyncManager, "kickOff");
  v11 = 0;
  +[SESAssetManager kickOffAndReturnError:](_TtC10seserviced15SESAssetManager, "kickOffAndReturnError:", &v11);
  v4 = v11;
  v6 = v4;
  if (v4)
  {
    v7 = SESDefaultLogObject(v4, v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to start asset manager %@", buf, 0xCu);
    }

  }
  objc_msgSend((id)qword_10034BB30, "handleFirstUnlock");
  objc_msgSend((id)qword_10034BB40, "start");
  PLLogRegisteredEvent(117, CFSTR("DaemonLaunch"), &off_100322D70, 0);
  if (SESInternalVariant(+[SECNotificationListener kickOff](_TtC10seserviced23SECNotificationListener, "kickOff")))
  {
    *(_DWORD *)buf = 0;
    global_queue = dispatch_get_global_queue(21, 0);
    v10 = objc_claimAutoreleasedReturnValue(global_queue);
    notify_register_dispatch("seserviced.debug.request.ttr", (int *)buf, v10, &stru_100304428);

  }
  +[SecureElementVersionTTR kickoff](_TtC10seserviced23SecureElementVersionTTR, "kickoff");

}

uint64_t start()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t i;
  uintptr_t v5;
  dispatch_source_t v6;
  dispatch_source_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  _TtC10seserviced9SERServer *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  FirstUnlockHandler *v19;
  void *v20;
  id v21;
  double v22;
  double v23;
  SESTimer *v24;
  void *v25;
  NSObject **v26;
  void *v27;
  _QWORD v29[6];

  v0 = objc_autoreleasePoolPush();
  v2 = SESDefaultLogObject(v0, v1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    LOWORD(v29[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Starting ... ", (uint8_t *)v29, 2u);
  }

  for (i = 0; i != 4; ++i)
  {
    v5 = dword_100287CF0[i];
    signal(dword_100287CF0[i], (void (__cdecl *)(int))1);
    v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, v5, 0, 0);
    v7 = qword_10034BB60[i];
    qword_10034BB60[i] = v6;

    dispatch_set_context(qword_10034BB60[i], (void *)v5);
    dispatch_source_set_event_handler_f(qword_10034BB60[i], (dispatch_function_t)sub_1000363CC);
    dispatch_resume(qword_10034BB60[i]);
  }
  +[SESDarwinNotificationMonitor kickoff](SESDarwinNotificationMonitor, "kickoff");
  +[SESAlarm kickoff](SESAlarm, "kickoff");
  +[SESXPCEventListener kickoff](SESXPCEventListener, "kickoff");
  +[SESDarwinNotificationMonitor kickoff](SESDarwinNotificationMonitor, "kickoff");
  +[JPKIXPCServer kickOff](_TtC10seserviced13JPKIXPCServer, "kickOff");
  v8 = objc_claimAutoreleasedReturnValue(+[SESServer server](SESServer, "server"));
  v9 = (void *)qword_10034BB38;
  qword_10034BB38 = v8;

  v10 = objc_claimAutoreleasedReturnValue(+[_SESSessionManager sessionManager](_SESSessionManager, "sessionManager"));
  v11 = (void *)qword_10034BB40;
  qword_10034BB40 = v10;

  v12 = objc_claimAutoreleasedReturnValue(+[KeyManagementLibrary sharedLibrary](KeyManagementLibrary, "sharedLibrary"));
  v13 = (void *)qword_10034BB30;
  qword_10034BB30 = v12;

  objc_msgSend((id)qword_10034BB38, "setSESServerDelegate:", qword_10034BB30);
  objc_msgSend((id)qword_10034BB38, "start");
  objc_msgSend((id)qword_10034BB30, "startService");
  v14 = objc_opt_new(_TtC10seserviced9SERServer);
  v15 = (void *)qword_10034BB48;
  qword_10034BB48 = (uint64_t)v14;

  v16 = MKBDeviceUnlockedSinceBoot(objc_msgSend((id)qword_10034BB48, "resume"));
  if ((_DWORD)v16)
  {
    sub_100035F24(v16, v17);
  }
  else
  {
    v19 = objc_opt_new(FirstUnlockHandler);
    v20 = (void *)qword_10034BB58;
    qword_10034BB58 = (uint64_t)v19;

  }
  if (SESInternalVariant(v18))
  {
    v21 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
    objc_msgSend(v21, "doubleForKey:", CFSTR("debug.boost.log.interval.sec"));
    if (v22 > 0.0)
    {
      v23 = v22;
      v24 = [SESTimer alloc];
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_10034BB38, "messageQueue"));
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_100036480;
      v29[3] = &unk_100304448;
      *(double *)&v29[4] = v23;
      v26 = sub_10004C264((NSObject **)v24, v25, v29);
      v27 = (void *)qword_10034BB50;
      qword_10034BB50 = (uint64_t)v26;

      sub_10004C410(qword_10034BB50, v23);
    }

  }
  objc_autoreleasePoolPop(v0);
  CFRunLoopRun();
  return 0;
}

void sub_1000363B4(id a1, int a2)
{
  +[SESTapToRadar requestTapToRadar:client:](SESTapToRadar, "requestTapToRadar:client:", CFSTR("test"), CFSTR("test"));
}

void sub_1000363CC(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  __CFRunLoop *Main;
  _DWORD v6[2];

  v2 = a1;
  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Received signal: %d", (uint8_t *)v6, 8u);
  }

  objc_msgSend((id)qword_10034BB30, "stopService");
  Main = CFRunLoopGetMain();
  CFRunLoopStop(Main);
}

void sub_100036480(uint64_t a1)
{
  pid_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  _DWORD v9[4];
  _OWORD buffer[8];
  uint64_t v11;

  v11 = 0;
  memset(buffer, 0, sizeof(buffer));
  v2 = getpid();
  v3 = proc_pidinfo(v2, 3, 0, buffer, 136);
  v4 = v3;
  v6 = SESDefaultLogObject(v3, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v8 = (LODWORD(buffer[0]) >> 21) & 1;
    if (v4 <= 0x87)
      v8 = -1;
    v9[0] = 67109120;
    v9[1] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Boosted %d", (uint8_t *)v9, 8u);
  }

  sub_10004C410(qword_10034BB50, *(double *)(a1 + 32));
}

void sub_10003657C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  objc_opt_self(a1);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100036640;
  block[3] = &unk_100304370;
  v11 = v5;
  v12 = v6;
  v7 = qword_10034BB88;
  v8 = v6;
  v9 = v5;
  if (v7 != -1)
    dispatch_once(&qword_10034BB88, block);

}

void sub_100036640(uint64_t a1)
{
  SESAppletLockStateMonitor *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = objc_opt_new(SESAppletLockStateMonitor);
  v3 = (void *)qword_10034BB80;
  qword_10034BB80 = (uint64_t)v2;

  objc_storeStrong((id *)(qword_10034BB80 + 8), *(id *)(a1 + 32));
  objc_storeStrong((id *)(qword_10034BB80 + 16), *(id *)(a1 + 40));
  *(_QWORD *)(qword_10034BB80 + 24) = 4279897;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000809434343444B417631"), "hexStringAsData"));
  v5 = *(void **)(qword_10034BB80 + 32);
  *(_QWORD *)(qword_10034BB80 + 32) = v4;

  v6 = +[SESXPCEventListener registerOnStream:forEvent:handler:](SESXPCEventListener, "registerOnStream:forEvent:handler:", CFSTR("com.apple.seld.xpc.events"), CFSTR("appletChanged"), qword_10034BB80);
  dispatch_async(*(dispatch_queue_t *)(a1 + 32), &stru_100304468);
}

void sub_1000366FC(id a1)
{
  sub_100036708(qword_10034BB80);
}

void sub_100036708(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD v6[5];
  uint8_t buf[16];

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    v4 = SESDefaultLogObject(v2, v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "", buf, 2u);
    }

    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000367C4;
    v6[3] = &unk_1003044B8;
    v6[4] = a1;
    sub_100051680((uint64_t)SecureElementManager, CFSTR("Check PTA lock state"), v6);
  }
}

void sub_1000367C4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  uint64_t v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(NSObject **)(v7 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100036874;
  block[3] = &unk_100304490;
  v12 = v6;
  v13 = v7;
  v14 = v5;
  v9 = v5;
  v10 = v6;
  dispatch_async(v8, block);

}

void sub_100036874(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 32))
  {
    v3 = SESDefaultLogObject(a1, a2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138412290;
      v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Couldn't get SE to check lock state, %@", (uint8_t *)&v6, 0xCu);
    }

    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) = 4279897;
  }
  else
  {
    sub_10003695C(*(_QWORD *)(a1 + 40), *(void **)(a1 + 48));
  }
}

void sub_10003695C(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  _BOOL8 v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint8_t buf[4];
  _BYTE v16[10];
  __int16 v17;
  uint64_t v18;

  if (a1)
  {
    v3 = *(NSObject **)(a1 + 8);
    v4 = a2;
    dispatch_assert_queue_V2(v3);
    v5 = *(void **)(a1 + 32);
    v14 = 0;
    v6 = sub_100047EFC(v4, v5, &v14);

    v7 = v14;
    v9 = SESDefaultLogObject(v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    v11 = v10;
    if (v7)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v16 = v7;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to get PTA suspend status : %@", buf, 0xCu);
      }

      *(_QWORD *)(a1 + 24) = 4279897;
    }
    else
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v13 = *(_QWORD *)(a1 + 16);
        v12 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)v16 = v6;
        *(_WORD *)&v16[4] = 1024;
        *(_DWORD *)&v16[6] = v12;
        v17 = 2112;
        v18 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "New %d last %x delegate %@", buf, 0x18u);
      }

      if (*(_QWORD *)(a1 + 24) != v6)
      {
        *(_QWORD *)(a1 + 24) = v6;
        objc_msgSend(*(id *)(a1 + 16), "appletLockStateDidChange:", v6);
      }
    }

  }
}

void sub_100036B90(uint64_t a1)
{
  id v2;
  uint64_t v3;
  const char *string;
  uint64_t v5;
  const char *v6;
  const char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  const char *v17;

  v2 = objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("com.apple.seld.xpc.events"));
  if ((v2 & 1) != 0)
  {
    string = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 40), _xpc_event_key_name);
    v6 = string;
    if (string)
    {
      string = (const char *)strcmp(string, "appletChanged");
      if (!(_DWORD)string)
      {
        v7 = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 40), "appletChanged");
        v8 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 32), "isEqualToHexCString:", v7);
        if ((v8 & 1) == 0)
        {
          v15 = SESDefaultLogObject(v8, v9);
          v11 = objc_claimAutoreleasedReturnValue(v15);
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
            goto LABEL_11;
          v16 = 136315138;
          v17 = v7;
          v12 = "Don't care about AID %s";
          goto LABEL_10;
        }
        sub_100036708(*(_QWORD *)(a1 + 48));
      }
    }
    v10 = SESDefaultLogObject(string, v5);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v16 = 136315138;
      v17 = v6;
      v12 = "Ignoring eventName %s";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, v12, (uint8_t *)&v16, 0xCu);
    }
  }
  else
  {
    v13 = SESDefaultLogObject(v2, v3);
    v11 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v14 = *(const char **)(a1 + 32);
      v16 = 138412290;
      v17 = v14;
      v12 = "Ignoring stream %@";
      goto LABEL_10;
    }
  }
LABEL_11:

}

void sub_100036E18(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = -[_SESSessionManager init:]([_SESSessionManager alloc], "init:", *(_QWORD *)(a1 + 32));
  v2 = (void *)qword_10034BB90;
  qword_10034BB90 = (uint64_t)v1;

}

id sub_100036FC8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dumpState");
}

void sub_1000373A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000373C8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000373D8(uint64_t a1)
{

}

id sub_1000373E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint8_t v6[16];

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Connection invalidated", v6, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "didCloseConnection:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

id sub_100037458(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint8_t v6[16];

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Connection interrupted", v6, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "didCloseConnection:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_100037554(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  uint8_t v44[128];
  uint8_t buf[4];
  _BYTE v46[24];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", &off_100322EC0));

  v6 = SESDefaultLogObject(v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v8 = objc_msgSend(*(id *)(a1 + 32), "processIdentifier");
    v9 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)v46 = v8;
    *(_WORD *)&v46[4] = 2112;
    *(_QWORD *)&v46[6] = v3;
    *(_WORD *)&v46[14] = 2112;
    *(_QWORD *)&v46[16] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Connection closed PID %d (%@) %@", buf, 0x1Cu);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "unregisterForAppStateChanges:", *(_QWORD *)(a1 + 32));
  v33 = a1;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", &off_100322ED8));

  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v32 = v11;
  v12 = objc_msgSend(v11, "copy");
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
  if (v13)
  {
    v15 = v13;
    v16 = *(_QWORD *)v40;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v40 != v16)
          objc_enumerationMutation(v12);
        v18 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)v17);
        v19 = SESDefaultLogObject(v13, v14);
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)v46 = v18;
          *(_WORD *)&v46[8] = 2112;
          *(_QWORD *)&v46[10] = v3;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Removing session %@ for %@", buf, 0x16u);
        }

        v13 = objc_msgSend(v18, "endSessionInternal:", 0);
        v17 = (char *)v17 + 1;
      }
      while (v15 != v17);
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
      v15 = v13;
    }
    while (v13);
  }

  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v33 + 32), "userInfo"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", &off_100322EF0));

  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v34 = v22;
  v23 = objc_msgSend(v22, "copy");
  v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
  if (v24)
  {
    v26 = v24;
    v27 = *(_QWORD *)v36;
    do
    {
      v28 = 0;
      do
      {
        if (*(_QWORD *)v36 != v27)
          objc_enumerationMutation(v23);
        v29 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)v28);
        v30 = SESDefaultLogObject(v24, v25);
        v31 = objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)v46 = v29;
          *(_WORD *)&v46[8] = 2112;
          *(_QWORD *)&v46[10] = v3;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Removing assertion %@ for %@", buf, 0x16u);
        }

        v24 = objc_msgSend(v29, "invalidateInternal");
        v28 = (char *)v28 + 1;
      }
      while (v26 != v28);
      v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
      v26 = v24;
    }
    while (v24);
  }

}

void sub_100037D48(uint64_t a1)
{
  _SESACWGSession *v2;
  uint64_t v3;
  _SESACWGSession *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[5];
  uint8_t buf[4];
  _SESACWGSession *v16;

  v2 = -[_SESACWGSession initWithRemoteObject:queue:]([_SESACWGSession alloc], "initWithRemoteObject:queue:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  v4 = v2;
  if (v2)
  {
    -[_SESSession setConnection:](v2, "setConnection:", *(_QWORD *)(a1 + 48));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100037EEC;
    v14[3] = &unk_100304508;
    v14[4] = *(_QWORD *)(a1 + 40);
    -[_SESACWGSession setDidEndCallback:](v4, "setDidEndCallback:", v14);
    v5 = objc_msgSend(*(id *)(a1 + 40), "addSession:forConnection:", v4, *(_QWORD *)(a1 + 48));
    v7 = SESDefaultLogObject(v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Starting SESACWGSession %@", buf, 0xCu);
    }

    -[_SESACWGSession start](v4, "start");
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 56);
    v10 = SESDefaultLogObject(0, v3);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = SESCreateAndLogError(0, v11, SESErrorDomain, 0, CFSTR("ACWG session creation failed"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    (*(void (**)(uint64_t, _QWORD, void *))(v9 + 16))(v9, 0, v13);

  }
}

void sub_100037EEC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(NSObject **)(v4 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100037F74;
  v7[3] = &unk_100304370;
  v7[4] = v4;
  v8 = v3;
  v6 = v3;
  dispatch_async(v5, v7);

}

id sub_100037F74(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "removeSession:", *(_QWORD *)(a1 + 40));
}

void sub_1000380D8(uint64_t a1)
{
  _SESDCKSession *v2;
  uint64_t v3;
  _SESDCKSession *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[5];
  uint8_t buf[4];
  _SESDCKSession *v16;

  v2 = -[_SESDCKSession initWithRemoteObject:queue:]([_SESDCKSession alloc], "initWithRemoteObject:queue:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  v4 = v2;
  if (v2)
  {
    -[_SESSession setConnection:](v2, "setConnection:", *(_QWORD *)(a1 + 48));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10003827C;
    v14[3] = &unk_100304508;
    v14[4] = *(_QWORD *)(a1 + 40);
    -[_SESDCKSession setDidEndCallback:](v4, "setDidEndCallback:", v14);
    v5 = objc_msgSend(*(id *)(a1 + 40), "addSession:forConnection:", v4, *(_QWORD *)(a1 + 48));
    v7 = SESDefaultLogObject(v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Starting SESDCKSession %@", buf, 0xCu);
    }

    -[_SESDCKSession start](v4, "start");
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 56);
    v10 = SESDefaultLogObject(0, v3);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = SESCreateAndLogError(0, v11, SESErrorDomain, 0, CFSTR("DCK session creation failed"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    (*(void (**)(uint64_t, _QWORD, void *))(v9 + 16))(v9, 0, v13);

  }
}

void sub_10003827C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(NSObject **)(v4 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100038304;
  v7[3] = &unk_100304370;
  v7[4] = v4;
  v8 = v3;
  v6 = v3;
  dispatch_async(v5, v7);

}

id sub_100038304(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "removeSession:", *(_QWORD *)(a1 + 40));
}

void sub_1000384D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000384E8(uint64_t a1)
{
  void *v2;
  void *v3;
  _SESRKESession *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  const __CFString *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[5];
  id obj;
  _OWORD v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint8_t buf[4];
  _SESRKESession *v50;
  _BYTE v51[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", &off_100322EC0));

  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v41 = a1;
  v4 = (_SESRKESession *)*(id *)(*(_QWORD *)(a1 + 40) + 48);
  v5 = -[_SESRKESession countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v45, v51, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v46;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v46 != v7)
          objc_enumerationMutation(v4);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)i), "connection"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "userInfo"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", &off_100322EC0));
        v12 = objc_msgSend(v3, "isEqualToString:", v11);

        if (v12)
        {
          v22 = *(_QWORD *)(v41 + 64);
          v23 = SESDefaultLogObject(v13, v14);
          v24 = (id)objc_claimAutoreleasedReturnValue(v23);
          v25 = SESErrorDomain;
          v26 = CFSTR("RKE session already active for client %@");
          v27 = v24;
          v28 = 3;
          goto LABEL_15;
        }
      }
      v6 = -[_SESRKESession countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v45, v51, 16);
      if (v6)
        continue;
      break;
    }
  }

  objc_msgSend(*(id *)(*(_QWORD *)(v41 + 40) + 40), "registerForAppStateChanges:", *(_QWORD *)(v41 + 32));
  v15 = *(void **)(v41 + 48);
  if (v15)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("rangeStart")));
    v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v41 + 48), "objectForKeyedSubscript:", CFSTR("rangeEnd")));
    v18 = (void *)v17;
    v19 = 0xFFFFLL;
    v20 = 0xFFFFLL;
    if (v16 && v17)
    {
      v20 = (uint64_t)objc_msgSend(v16, "unsignedIntegerValue");
      v21 = objc_msgSend(v18, "unsignedIntegerValue");
      v19 = v21 - (_BYTE *)objc_msgSend(v16, "unsignedIntegerValue");
    }

  }
  else
  {
    v19 = 0xFFFFLL;
    v20 = 0xFFFFLL;
  }
  v4 = -[_SESRKESession initWithRemoteObject:subscriptionRange:queue:]([_SESRKESession alloc], "initWithRemoteObject:subscriptionRange:queue:", *(_QWORD *)(v41 + 56), v20, v19, *(_QWORD *)(*(_QWORD *)(v41 + 40) + 16));
  if (v4)
  {
    v24 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "stringForKey:", CFSTR("debug.rke.session.bundleid")));
    if (v30)
    {
      -[_SESRKESession setClientBundleIdentifier:](v4, "setClientBundleIdentifier:", v30);
    }
    else
    {
      v37 = *(void **)(v41 + 32);
      if (v37)
        objc_msgSend(v37, "auditToken");
      else
        memset(v44, 0, sizeof(v44));
      v38 = *(_QWORD *)(*(_QWORD *)(v41 + 72) + 8);
      obj = *(id *)(v38 + 40);
      v39 = (void *)objc_claimAutoreleasedReturnValue(+[LSBundleRecord bundleRecordForAuditToken:error:](LSBundleRecord, "bundleRecordForAuditToken:error:", v44, &obj));
      objc_storeStrong((id *)(v38 + 40), obj);
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 72) + 8) + 40))
      {
        (*(void (**)(void))(*(_QWORD *)(v41 + 64) + 16))();

        goto LABEL_16;
      }
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "bundleIdentifier"));
      -[_SESRKESession setClientBundleIdentifier:](v4, "setClientBundleIdentifier:", v40);

    }
    -[_SESSession setConnection:](v4, "setConnection:", *(_QWORD *)(v41 + 32));
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_100038978;
    v42[3] = &unk_100304508;
    v42[4] = *(_QWORD *)(v41 + 40);
    -[_SESRKESession setDidEndCallback:](v4, "setDidEndCallback:", v42);
    v32 = objc_msgSend(*(id *)(v41 + 40), "addSession:forConnection:", v4, *(_QWORD *)(v41 + 32));
    v34 = SESDefaultLogObject(v32, v33);
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v50 = v4;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "Starting SESRKESession %@", buf, 0xCu);
    }

    -[_SESRKESession start](v4, "start");
    (*(void (**)(_QWORD, _SESRKESession *, _QWORD))(*(_QWORD *)(v41 + 64) + 16))(*(_QWORD *)(v41 + 64), v4, 0);
  }
  else
  {
    v22 = *(_QWORD *)(v41 + 64);
    v36 = SESDefaultLogObject(0, v31);
    v24 = (id)objc_claimAutoreleasedReturnValue(v36);
    v25 = SESErrorDomain;
    v26 = CFSTR("RKE session creation failed");
    v27 = v24;
    v28 = 0;
LABEL_15:
    v29 = SESCreateAndLogError(0, v27, v25, v28, v26);
    v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    (*(void (**)(uint64_t, _QWORD, void *))(v22 + 16))(v22, 0, v30);
  }
LABEL_16:

}

void sub_100038978(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(NSObject **)(v4 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100038A00;
  v7[3] = &unk_100304370;
  v7[4] = v4;
  v8 = v3;
  v6 = v3;
  dispatch_async(v5, v7);

}

id sub_100038A00(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "removeSession:", *(_QWORD *)(a1 + 40));
}

void sub_100038ABC(_QWORD *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 8));
  v2 = objc_msgSend(*(id *)(a1[4] + 48), "copy");
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[4] + 8));
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v7);
        v9 = objc_opt_class(_SESDCKSession);
        if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0
          || (v10 = objc_opt_class(_SESRKESession), (objc_opt_isKindOfClass(v8, v10) & 1) != 0)
          || (v11 = objc_opt_class(_SESACWGSession), (objc_opt_isKindOfClass(v8, v11) & 1) != 0))
        {
          objc_msgSend(v8, "sendEvent:keyIdentifier:", a1[5], a1[6], (_QWORD)v12);
        }
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

}

BOOL sub_100038CBC(id a1, _SESSession *a2)
{
  _SESSession *v2;
  uint64_t v3;
  char isKindOfClass;

  v2 = a2;
  if (-[_SESSession isActive](v2, "isActive"))
  {
    v3 = objc_opt_class(_SESDCKSession);
    isKindOfClass = objc_opt_isKindOfClass(v2, v3);
  }
  else
  {
    isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

BOOL sub_100038D80(id a1, _SESSession *a2)
{
  _SESSession *v2;
  uint64_t v3;
  char isKindOfClass;

  v2 = a2;
  if (-[_SESSession isActive](v2, "isActive"))
  {
    v3 = objc_opt_class(_SESRKESession);
    isKindOfClass = objc_opt_isKindOfClass(v2, v3);
  }
  else
  {
    isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

BOOL sub_100038E44(id a1, _SESSession *a2)
{
  _SESSession *v2;
  uint64_t v3;
  char isKindOfClass;

  v2 = a2;
  if (-[_SESSession isActive](v2, "isActive"))
  {
    v3 = objc_opt_class(_SESACWGSession);
    isKindOfClass = objc_opt_isKindOfClass(v2, v3);
  }
  else
  {
    isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

void sub_100038F1C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "copy");
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v3 = v2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v7);
        v9 = objc_opt_class(_SESRKESession);
        if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0)
          objc_msgSend(v8, "didCreateKey:", *(_QWORD *)(a1 + 40), (_QWORD)v10);
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

}

void sub_10003911C(_QWORD *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 8));
  v2 = objc_msgSend(*(id *)(a1[4] + 48), "copy");
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[4] + 8));
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = v2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v7);
        v9 = objc_opt_class(_SESDCKSession);
        if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0
          || (v10 = objc_opt_class(_SESRKESession), (objc_opt_isKindOfClass(v8, v10) & 1) != 0))
        {
          objc_msgSend(v8, "didReceivePassthroughMessage:keyIdentifier:", a1[5], a1[6], (_QWORD)v11);
        }
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

}

void sub_1000393B0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "getReportsWithIsInternalClient:", 1));

  v6 = SESDefaultLogObject(v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allValues"));
    v9 = 138412290;
    v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Vehicle report %@", (uint8_t *)&v9, 0xCu);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1000396C8(uint64_t a1)
{
  _SESAssertion *v2;
  uint64_t v3;
  _SESAssertion *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  _QWORD v15[5];
  uint8_t buf[4];
  _SESAssertion *v17;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "invalidateInternal");
  v2 = -[_SESAssertion initWithRemoteObject:keyIdentifier:appletIdentifier:options:queue:]([_SESAssertion alloc], "initWithRemoteObject:keyIdentifier:appletIdentifier:options:queue:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  v4 = v2;
  if (!v2)
  {
    v6 = *(_QWORD *)(a1 + 80);
    v7 = SESDefaultLogObject(0, v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v8 = SESCreateAndLogError(0, v5, SESErrorDomain, 0, CFSTR("Assertion creation failed"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    (*(void (**)(uint64_t, _QWORD, void *))(v6 + 16))(v6, 0, v9);
LABEL_8:

    goto LABEL_9;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[_SESAssertion start](v2, "start"));
  if (!v5)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1000398E8;
    v15[3] = &unk_100304600;
    v15[4] = *(_QWORD *)(a1 + 32);
    -[_SESAssertion setDidEndCallback:](v4, "setDidEndCallback:", v15);
    -[_SESAssertion setConnection:](v4, "setConnection:", *(_QWORD *)(a1 + 72));
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 56), v4);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "userInfo"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", &off_100322EF0));

    v11 = objc_msgSend(v9, "addObject:", v4);
    v13 = SESDefaultLogObject(v11, v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v17 = v4;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Started SESAssertion %@", buf, 0xCu);
    }

    (*(void (**)(_QWORD, _SESAssertion *, _QWORD))(*(_QWORD *)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v4, 0);
    goto LABEL_8;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
LABEL_9:

}

void sub_1000398E8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  id v13;

  v3 = a2;
  v5 = SESDefaultLogObject(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v12 = 138412290;
    v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Removing assertion %@", (uint8_t *)&v12, 0xCu);
  }

  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 56);
  *(_QWORD *)(v7 + 56) = 0;

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "connection"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "userInfo"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", &off_100322EF0));

  objc_msgSend(v11, "removeObject:", v3);
}

void sub_100039C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100039C50(uint64_t a1)
{
  id v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id obj;

  v2 = objc_msgSend(*(id *)(a1 + 32), "doubleValue");
  if (v4 >= 1.0)
  {
    v11 = objc_msgSend(*(id *)(a1 + 40), "isEqual:", CFSTR("A000000909ACCE5501"));
    if ((_DWORD)v11)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[LyonExternal shared](_TtC10seserviced12LyonExternal, "shared"));
      v14 = *(_QWORD *)(a1 + 48);
      objc_msgSend(*(id *)(a1 + 32), "doubleValue");
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      obj = *(id *)(v15 + 40);
      objc_msgSend(v13, "blockRangingForReaderIdentifierWithReaderIdentifier:timeout:error:", v14, &obj);
      objc_storeStrong((id *)(v15 + 40), obj);

      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
      return;
    }
    v5 = *(_QWORD *)(a1 + 56);
    v16 = SESDefaultLogObject(v11, v12);
    v9 = objc_claimAutoreleasedReturnValue(v16);
    v19 = (id)v9;
    v10 = SESErrorDomain;
    v8 = CFSTR("Function not implemented for %@");
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 56);
    v6 = SESDefaultLogObject(v2, v3);
    v19 = (id)objc_claimAutoreleasedReturnValue(v6);
    v7 = SESErrorDomain;
    objc_msgSend(*(id *)(a1 + 32), "doubleValue");
    v8 = CFSTR("Invalid duration %f < 1 sec");
    v9 = (uint64_t)v19;
    v10 = v7;
  }
  v17 = SESCreateAndLogError(0, v9, v10, 1, v8);
  v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v18);

}

void sub_100039FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100039FCC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id obj;

  v2 = objc_msgSend(*(id *)(a1 + 32), "isEqual:", CFSTR("A000000909ACCE5501"));
  if ((_DWORD)v2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[LyonExternal shared](_TtC10seserviced12LyonExternal, "shared"));
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    obj = *(id *)(v6 + 40);
    objc_msgSend(v4, "unblockRangingForReaderIdentifierWithReaderIdentifier:error:", v5, &obj);
    objc_storeStrong((id *)(v6 + 40), obj);

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 48);
    v8 = SESDefaultLogObject(v2, v3);
    v11 = (id)objc_claimAutoreleasedReturnValue(v8);
    v9 = SESCreateAndLogError(0, v11, SESErrorDomain, 1, CFSTR("Function not implemented for %@"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v10);

  }
}

id sub_10003A9E0(uint64_t a1, _QWORD *a2)
{
  id v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  if (!a1)
    return 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = sub_10003AAFC;
  v16 = sub_10003AB0C;
  v17 = 0;
  v6 = 0;
  v7 = &v6;
  v8 = 0x3032000000;
  v9 = sub_10003AAFC;
  v10 = sub_10003AB0C;
  v11 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10003AB14;
  v5[3] = &unk_100303600;
  v5[4] = &v6;
  v5[5] = &v12;
  sub_100016A08(a1, v5);
  if (a2)
    *a2 = objc_retainAutorelease((id)v13[5]);
  v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);

  _Block_object_dispose(&v12, 8);
  return v3;
}

void sub_10003AAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003AAFC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10003AB0C(uint64_t a1)
{

}

void sub_10003AB14(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id obj;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[SEEndPointEntity fetchRequest](SEEndPointEntity, "fetchRequest"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v5 + 40);
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &obj));

  objc_storeStrong((id *)(v5 + 40), obj);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

id sub_10003ABB8(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;

  if (a1)
  {
    v5 = a2;
    v6 = sub_10003A9E0(a1, a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = Filter(v7, v5);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  }
  else
  {
    v9 = 0;
  }
  return v9;
}

_QWORD *sub_10003AC24(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void **v18;
  uint64_t v19;
  id (*v20)(uint64_t, void *);
  void *v21;
  id v22;
  id v23;

  v7 = a2;
  v8 = a3;
  v10 = v8;
  if (!a1)
    goto LABEL_9;
  if (!v7 || !v8 || !a4)
  {
    if (!a4)
      goto LABEL_13;
    v14 = SESDefaultLogObject(v8, v9);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = SESCreateAndLogError(0, v15, SESErrorDomain, 1, CFSTR("Nil passed to getEndPointEntitiesWithIdentifier"));
    *a4 = (id)objc_claimAutoreleasedReturnValue(v16);

LABEL_9:
    a4 = 0;
    goto LABEL_13;
  }
  v18 = _NSConcreteStackBlock;
  v19 = 3221225472;
  v20 = sub_10003AD68;
  v21 = &unk_1003046A0;
  v22 = v7;
  v23 = v10;
  v11 = sub_10003ABB8(a1, &v18, a4);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v13 = v12;
  if (*a4 || !objc_msgSend(v12, "count", v18, v19, v20, v21, v22))
    a4 = 0;
  else
    a4 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectAtIndexedSubscript:", 0));

LABEL_13:
  return a4;
}

id sub_10003AD68(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  if (objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32)))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "clientName"));
    v6 = objc_msgSend(v5, "isEqualToString:", *(_QWORD *)(a1 + 40));

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

id sub_10003ADE0(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a2;
  v7 = v5;
  if (!a1)
    goto LABEL_8;
  if (!v5)
  {
    if (a3)
    {
      v10 = SESDefaultLogObject(0, v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v11 = SESCreateAndLogError(0, v8, SESErrorDomain, 1, CFSTR("Nil passed to getEndPointEntitiesWithIdentifier"));
      v9 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue(v11);
      goto LABEL_6;
    }
LABEL_8:
    v9 = 0;
    goto LABEL_7;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "endPointData"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[SEEndPoint decodeWithData:error:](SEEndPoint, "decodeWithData:error:", v8, a3));
LABEL_6:

LABEL_7:
  return v9;
}

NSMutableSet *sub_10003AEA4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  void *i;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v36;
  void *v37;
  id obj;
  uint64_t v39;
  id v40;
  uint64_t v41;
  NSMutableSet *v42;
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  id v52;
  _BYTE v53[128];
  _BYTE v54[128];

  if (!a1)
    return (NSMutableSet *)0;
  v4 = sub_100016AC8(a1);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  dispatch_assert_queue_V2(v5);

  v6 = sub_100015E70(a1);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (v7)
  {
    v9 = (id)v7;
    if (a2)
    {
      v10 = SESDefaultLogObject(v7, v8);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v12 = SESCreateAndLogError(v9, v11, SESErrorDomain, 0, CFSTR("Database not initialized"));
      *a2 = (id)objc_claimAutoreleasedReturnValue(v12);

    }
    v42 = 0;
    goto LABEL_33;
  }
  v52 = 0;
  v13 = sub_100055880(a1, &v52);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v15 = v52;
  if (!v15)
  {
    v42 = objc_opt_new(NSMutableSet);
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    obj = v14;
    v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v54, 16);
    if (v40)
    {
      v37 = v14;
      v9 = 0;
      v39 = *(_QWORD *)v49;
      do
      {
        v20 = 0;
        do
        {
          if (*(_QWORD *)v49 != v39)
            objc_enumerationMutation(obj);
          v41 = v20;
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v48 + 1) + 8 * v20), "endPoints", v36));
          v44 = 0u;
          v45 = 0u;
          v46 = 0u;
          v47 = 0u;
          v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
          if (v22)
          {
            v23 = v22;
            v24 = *(_QWORD *)v45;
            do
            {
              for (i = 0; i != v23; i = (char *)i + 1)
              {
                v26 = v9;
                if (*(_QWORD *)v45 != v24)
                  objc_enumerationMutation(v21);
                v27 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i);
                v43 = v9;
                v28 = sub_10003ADE0(a1, v27, &v43);
                v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
                v9 = v43;

                if (v9)
                {
                  if (a2)
                  {
                    v32 = SESDefaultLogObject(v30, v31);
                    v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
                    v36 = v27;
                    v34 = SESCreateAndLogError(v9, v33, SESErrorDomain, 0, CFSTR("Failed to get endpoint from entity %@"));
                    *a2 = (id)objc_claimAutoreleasedReturnValue(v34);

                  }
                }
                else
                {
                  -[NSMutableSet addObject:](v42, "addObject:", v29);
                }

              }
              v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
            }
            while (v23);
          }

          v20 = v41 + 1;
        }
        while ((id)(v41 + 1) != v40);
        v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v54, 16);
      }
      while (v40);
      v14 = v37;
    }
    else
    {
      v9 = 0;
    }
    v18 = obj;
    goto LABEL_31;
  }
  v9 = v15;
  if (a2)
  {
    v17 = SESDefaultLogObject(v15, v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v19 = SESCreateAndLogError(v9, v18, SESErrorDomain, 0, CFSTR("Failed to get instance entities"));
    v42 = 0;
    *a2 = (id)objc_claimAutoreleasedReturnValue(v19);
LABEL_31:

    goto LABEL_32;
  }
  v42 = 0;
LABEL_32:

LABEL_33:
  return v42;
}

id sub_10003B1F0(id a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v13[4];
  id v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;

  v5 = a2;
  v6 = a3;
  v8 = v6;
  if (a1)
  {
    if (v5 && v6)
    {
      v17 = 0;
      v18 = &v17;
      v19 = 0x3032000000;
      v20 = sub_10003AAFC;
      v21 = sub_10003AB0C;
      v22 = 0;
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_10003B34C;
      v13[3] = &unk_1003046C8;
      v14 = v6;
      v16 = &v17;
      v15 = v5;
      sub_1000168E4((uint64_t)a1, v13);
      a1 = (id)v18[5];

      _Block_object_dispose(&v17, 8);
    }
    else
    {
      v9 = SESDefaultLogObject(v6, v7);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      v11 = SESCreateAndLogError(0, v10, SESErrorDomain, 1, CFSTR("Nil passed to updateEndPoint"));
      a1 = (id)objc_claimAutoreleasedReturnValue(v11);

    }
  }

  return a1;
}

void sub_10003B334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003B34C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id obj;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  obj = *(id *)(v5 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "encodeWithError:", &obj));
  objc_storeStrong((id *)(v5 + 40), obj);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
    v9 = 1;
  else
    v9 = v6 == 0;
  if (v9)
  {
    v10 = SESDefaultLogObject(v7, v8);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v11 = SESCreateAndLogError(0, v18, SESErrorDomain, 0, CFSTR("Encoding endpoint %@"));
    v12 = objc_claimAutoreleasedReturnValue(v11);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "setEndPointData:", v6);
    v15 = sub_10002BA94((uint64_t)v3);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;
  }

}

id sub_10003BD0C(id a1, SEEndPoint *a2)
{
  SEEndPoint *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[SEEndPoint bleUUID](v2, "bleUUID"));
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(-[SEEndPoint revocationAttestation](v2, "revocationAttestation"));
    if (v4)
      v5 = 0;
    else
      v5 = (void *)objc_claimAutoreleasedReturnValue(-[SEEndPoint readerIdentifier](v2, "readerIdentifier"));

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id sub_10003C1BC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uniqueID"));
  LODWORD(v4) = objc_msgSend(v4, "containsObject:", v5);

  if ((_DWORD)v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "secureElementPass"));
    if (objc_msgSend(v6, "isCarKeyPass"))
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "secureElementPass"));
    else
      v7 = 0;

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id sub_10003C7B4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "keyIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "publicKeyIdentifier"));
  v5 = objc_msgSend(v3, "isEqualToData:", v4);

  return v5;
}

uint64_t sub_10003C8AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v7;
  uint64_t v8;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESRKESession endSession %@", (uint8_t *)&v7, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "endSessionInternal:", 0);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10003CA24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v26 = v5;
    v27 = 2112;
    v28 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESRKESession %@ isPassiveEntryAvailable readerIdentifier %@", buf, 0x16u);
  }

  v7 = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((v7 & 1) != 0)
  {
    v9 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "hexStringAsData"));
    LOBYTE(v9) = objc_msgSend(v9, "containsObject:", v10);

    if ((v9 & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "hexStringAsData"));
      objc_msgSend(v13, "isPassiveEntryAvailableFor:", v14);

      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 48);
      v21 = SESDefaultLogObject(v11, v12);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v23 = SESCreateAndLogError(0, v22, SESErrorDomain, 19, CFSTR("Vehicle identifier %@ is not allowlisted"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      (*(void (**)(uint64_t, _QWORD, void *))(v20 + 16))(v20, 0, v24);

    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 48);
    v16 = SESDefaultLogObject(v7, v8);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v18 = SESCreateAndLogError(0, v17, SESErrorDomain, 12, CFSTR("Session is not active"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    (*(void (**)(uint64_t, _QWORD, void *))(v15 + 16))(v15, 0, v19);

  }
}

void sub_10003CD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  int v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void ***v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void ***v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void **v47;
  uint64_t v48;
  void (*v49)(uint64_t, void *, void *, void *, void *);
  void *v50;
  id v51;
  uint8_t buf[4];
  uint64_t v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  _BOOL4 v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 64);
    v6 = *(_QWORD *)(a1 + 72);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48) != 0;
    v10 = *(unsigned __int8 *)(a1 + 80);
    v11 = *(unsigned __int8 *)(a1 + 81);
    *(_DWORD *)buf = 138413826;
    v53 = v7;
    v54 = 1024;
    v55 = v5;
    v56 = 1024;
    v57 = v6;
    v58 = 2112;
    v59 = v8;
    v60 = 1024;
    v61 = v9;
    v62 = 1024;
    v63 = v10;
    v64 = 1024;
    v65 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESRKESession %@ sendRKEFunction 0x%X action 0x%X readerIdentifier %@ authorization %d isEnduring %d isHandlingExternal %d", buf, 0x34u);
  }

  v12 = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((v12 & 1) == 0)
  {
    v31 = *(_QWORD *)(a1 + 56);
    v32 = SESDefaultLogObject(v12, v13);
    v20 = (void *)objc_claimAutoreleasedReturnValue(v32);
    v33 = SESCreateAndLogError(0, v20, SESErrorDomain, 12, CFSTR("Session is not active"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(v33);
    (*(void (**)(uint64_t, _QWORD, void *))(v31 + 16))(v31, 0, v25);
    goto LABEL_24;
  }
  v14 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "hexStringAsData"));
  LOBYTE(v14) = objc_msgSend(v14, "containsObject:", v15);

  if ((v14 & 1) == 0)
  {
    v34 = *(_QWORD *)(a1 + 56);
    v35 = SESDefaultLogObject(v16, v17);
    v20 = (void *)objc_claimAutoreleasedReturnValue(v35);
    v36 = SESCreateAndLogError(0, v20, SESErrorDomain, 19, CFSTR("Vehicle identifier %@ is not allowlisted"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(v36);
    (*(void (**)(uint64_t, _QWORD, void *))(v34 + 16))(v34, 0, v25);
    goto LABEL_24;
  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "hexStringAsData"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "getEndpointWithReaderIdentifier:", v19));

  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "bleUUID"));
  LODWORD(v18) = v21 == 0;

  if ((_DWORD)v18)
  {
    v43 = *(_QWORD *)(a1 + 56);
    v44 = SESDefaultLogObject(v22, v23);
    v25 = (void *)objc_claimAutoreleasedReturnValue(v44);
    v45 = SESCreateAndLogError(0, v25, SESErrorDomain, 19, CFSTR("No endpoint with reader identifier %@"));
    v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
    (*(void (**)(uint64_t, _QWORD, void *))(v43 + 16))(v43, 0, v46);

    goto LABEL_24;
  }
  v24 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "bleUUID"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID ses_withUUIDString:](NSUUID, "ses_withUUIDString:", v24));

  v26 = *(_QWORD *)(a1 + 32);
  v27 = *(void **)(v26 + 72);
  if (v27)
  {
    if ((objc_msgSend(v27, "isEqual:", v25) & 1) != 0)
      goto LABEL_11;
    v26 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v26 + 72))
    {
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
      objc_msgSend(v28, "removeHighPriorityRequestFor:client:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80));

      v26 = *(_QWORD *)(a1 + 32);
    }
  }
  objc_storeStrong((id *)(v26 + 72), v25);
  v24 = (id *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
  objc_msgSend(v24, "addHighPriorityRequestFor:client:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80));

LABEL_11:
  objc_initWeak((id *)buf, *(id *)(a1 + 32));
  if (*(_BYTE *)(a1 + 80) && *(_BYTE *)(a1 + 81))
  {
    v47 = _NSConcreteStackBlock;
    v48 = 3221225472;
    v49 = sub_10003D1EC;
    v50 = &unk_1003047B8;
    v24 = &v51;
    objc_copyWeak(&v51, (id *)buf);
    v29 = &v47;
    v30 = 1;
  }
  else
  {
    v30 = 0;
    v29 = 0;
  }
  v37 = objc_retainBlock(v29);
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
  v40 = *(_QWORD *)(a1 + 64);
  v39 = *(_QWORD *)(a1 + 72);
  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "publicKeyIdentifier"));
  if (*(_BYTE *)(a1 + 80))
    v42 = 2;
  else
    v42 = 1;
  objc_msgSend(v38, "sendRKERequestWithFunctionIdentifier:actionIdentifier:keyIdentifier:requestType:enduringRequestHandler:authorization:completion:", (unsigned __int16)v40, v39, v41, v42, v37, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v47, v48, v49, v50);

  if (v30)
    objc_destroyWeak(v24);
  objc_destroyWeak((id *)buf);
LABEL_24:

}

void sub_10003D1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;
  int v16;

  if (v16)
    objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10003D1EC(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id WeakRetained;
  NSObject *v14;
  _QWORD block[4];
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (objc_msgSend(WeakRetained, "isActive"))
  {
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "queue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10003D310;
    block[3] = &unk_100304790;
    v16 = WeakRetained;
    v17 = v9;
    v18 = v10;
    v19 = v11;
    v20 = v12;
    dispatch_async(v14, block);

  }
}

id sub_10003D310(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didReceiveContinuationRequestFor:actionIdentifier:arbitraryData:keyIdentifier:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void sub_10003D3EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint8_t buf[4];
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412802;
    v35 = v6;
    v36 = 1024;
    v37 = v5;
    v38 = 2112;
    v39 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESRKESession %@ cancelRKEFunction 0x%X for readerIdentifier %@", buf, 0x1Cu);
  }

  v8 = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((v8 & 1) != 0)
  {
    v10 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "hexStringAsData"));
    LOBYTE(v10) = objc_msgSend(v10, "containsObject:", v11);

    if ((v10 & 1) != 0)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "hexStringAsData"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "getEndpointWithReaderIdentifier:", v15));

      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "bleUUID"));
      if (v17)
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
        v21 = *(unsigned __int16 *)(a1 + 56);
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "publicKeyIdentifier"));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "cancelRKERequestWithFunctionIdentifier:keyIdentifier:", v21, v22));

        (*(void (**)(_QWORD, void *))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v23);
      }
      else
      {
        v30 = *(_QWORD *)(a1 + 48);
        v31 = SESDefaultLogObject(v18, v19);
        v23 = (void *)objc_claimAutoreleasedReturnValue(v31);
        v32 = SESCreateAndLogError(0, v23, SESErrorDomain, 19, CFSTR("No endpoint with reader identifier %@"));
        v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
        (*(void (**)(uint64_t, void *))(v30 + 16))(v30, v33);

      }
    }
    else
    {
      v27 = *(_QWORD *)(a1 + 48);
      v28 = SESDefaultLogObject(v12, v13);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v28);
      v29 = SESCreateAndLogError(0, v16, SESErrorDomain, 19, CFSTR("Vehicle identifier %@ is not allowlisted"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(v29);
      (*(void (**)(uint64_t, void *))(v27 + 16))(v27, v23);
    }
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 48);
    v25 = SESDefaultLogObject(v8, v9);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v25);
    v26 = SESCreateAndLogError(0, v16, SESErrorDomain, 12, CFSTR("Session is not active"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(v26);
    (*(void (**)(uint64_t, void *))(v24 + 16))(v24, v23);
  }

}

void sub_10003D79C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  const __CFString *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  _BOOL4 v53;
  __int16 v54;
  uint64_t v55;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 64);
    v6 = *(_QWORD *)(a1 + 72);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40) != 0;
    v9 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138413314;
    v47 = v7;
    v48 = 1024;
    v49 = v5;
    v50 = 1024;
    v51 = v6;
    v52 = 1024;
    v53 = v8;
    v54 = 2112;
    v55 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESRKESession %@ continueExecutingFunction 0x%X action 0x%X arbitraryData %d readerIdentifier %@", buf, 0x28u);
  }

  v10 = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((v10 & 1) != 0)
  {
    v12 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "hexStringAsData"));
    LOBYTE(v12) = objc_msgSend(v12, "containsObject:", v13);

    if ((v12 & 1) == 0)
    {
      v18 = *(_QWORD *)(a1 + 56);
      v30 = SESDefaultLogObject(v14, v15);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v30);
      v24 = SESErrorDomain;
      v22 = CFSTR("Vehicle identifier %@ is not allowlisted");
      v23 = v20;
      v25 = 19;
      goto LABEL_9;
    }
    v16 = objc_msgSend(*(id *)(a1 + 40), "length");
    if ((unint64_t)v16 >= 0x41)
    {
      v18 = *(_QWORD *)(a1 + 56);
      v19 = SESDefaultLogObject(v16, v17);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      v21 = SESErrorDomain;
      objc_msgSend(*(id *)(a1 + 40), "length");
      v22 = CFSTR("Arbitrary data length %lu > max 64");
      v23 = v20;
      v24 = v21;
      v25 = 1;
LABEL_9:
      v31 = SESCreateAndLogError(0, v23, v24, v25, v22);
      v29 = (void *)objc_claimAutoreleasedReturnValue(v31);
      (*(void (**)(uint64_t, void *))(v18 + 16))(v18, v29);
      goto LABEL_10;
    }
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "hexStringAsData"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "getEndpointWithReaderIdentifier:", v33));

    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "bleUUID"));
    if (v34)
    {
      v37 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
      v38 = *(unsigned __int16 *)(a1 + 64);
      v39 = *(unsigned __int8 *)(a1 + 72);
      v40 = *(_QWORD *)(a1 + 40);
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "publicKeyIdentifier"));
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "continueExecutingRKERequestWithFunctionIdentifier:actionIdentifier:arbitraryData:keyIdentifier:", v38, v39, v40, v41));

      (*(void (**)(_QWORD, void *))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), v29);
    }
    else
    {
      v42 = *(_QWORD *)(a1 + 56);
      v43 = SESDefaultLogObject(v35, v36);
      v29 = (void *)objc_claimAutoreleasedReturnValue(v43);
      v44 = SESCreateAndLogError(0, v29, SESErrorDomain, 19, CFSTR("No endpoint with reader identifier %@"));
      v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
      (*(void (**)(uint64_t, void *))(v42 + 16))(v42, v45);

    }
  }
  else
  {
    v26 = *(_QWORD *)(a1 + 56);
    v27 = SESDefaultLogObject(v10, v11);
    v20 = (void *)objc_claimAutoreleasedReturnValue(v27);
    v28 = SESCreateAndLogError(0, v20, SESErrorDomain, 12, CFSTR("Session is not active"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    (*(void (**)(uint64_t, void *))(v26 + 16))(v26, v29);
  }
LABEL_10:

}

void sub_10003DBC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  __CFString *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  uint8_t buf[4];
  uint64_t v42;
  __int16 v43;
  uint64_t v44;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v42 = v5;
    v43 = 2112;
    v44 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESRKESession %@ sendPassthroughMessage readerIdentifier %@", buf, 0x16u);
  }

  v7 = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((v7 & 1) != 0)
  {
    v9 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "hexStringAsData"));
    LOBYTE(v9) = objc_msgSend(v9, "containsObject:", v10);

    if ((v9 & 1) == 0)
    {
      v30 = *(_QWORD *)(a1 + 56);
      v31 = SESDefaultLogObject(v11, v12);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v31);
      v32 = SESCreateAndLogError(0, v15, SESErrorDomain, 19, CFSTR("vehicle identifier %@ is not allowlisted"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(v32);
      (*(void (**)(uint64_t, void *))(v30 + 16))(v30, v20);
      goto LABEL_24;
    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "hexStringAsData"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "getEndpointWithReaderIdentifier:", v14));

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "bleUUID"));
    if (!v16)
    {
      v33 = *(_QWORD *)(a1 + 56);
      v34 = SESDefaultLogObject(v17, v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v34);
      v35 = SESCreateAndLogError(0, v20, SESErrorDomain, 19, CFSTR("No endpoint with reader identifier %@"));
      v36 = (id)objc_claimAutoreleasedReturnValue(v35);
      (*(void (**)(uint64_t, id))(v33 + 16))(v33, v36);
LABEL_23:

      goto LABEL_24;
    }
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "bleUUID"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID ses_withUUIDString:](NSUUID, "ses_withUUIDString:", v19));

    v21 = *(_QWORD *)(a1 + 32);
    v22 = *(void **)(v21 + 72);
    if (v22)
    {
      if ((objc_msgSend(v22, "isEqual:", v20) & 1) != 0)
        goto LABEL_11;
      v21 = *(_QWORD *)(a1 + 32);
      if (*(_QWORD *)(v21 + 72))
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
        objc_msgSend(v23, "removeHighPriorityRequestFor:client:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80));

        v21 = *(_QWORD *)(a1 + 32);
      }
    }
    objc_storeStrong((id *)(v21 + 72), v20);
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
    objc_msgSend(v24, "addHighPriorityRequestFor:client:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80));

LABEL_11:
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 64))
    {
LABEL_22:
      v37 = objc_alloc((Class)NSUUID);
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "bleUUID"));
      v36 = objc_msgSend(v37, "initWithUUIDString:", v38);

      v39 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "sendPassthroughWithMessage:clientUUID:", *(_QWORD *)(a1 + 48), v36));

      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
      goto LABEL_23;
    }
    v25 = objc_msgSend(v15, "getEndpointUser");
    if (v25)
    {
      if (v25 != (id)1)
      {
LABEL_21:
        *(_BYTE *)(*(_QWORD *)(a1 + 32) + 64) = 1;
        goto LABEL_22;
      }
      v26 = CFSTR("friendPassthroughCount");
    }
    else
    {
      v26 = CFSTR("ownerPassthroughCount");
    }
    sub_100049C94((uint64_t)SESDAnalyticsLogger, v26);
    goto LABEL_21;
  }
  v27 = *(_QWORD *)(a1 + 56);
  v28 = SESDefaultLogObject(v7, v8);
  v15 = (void *)objc_claimAutoreleasedReturnValue(v28);
  v29 = SESCreateAndLogError(0, v15, SESErrorDomain, 12, CFSTR("Session is not active"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(v29);
  (*(void (**)(uint64_t, void *))(v27 + 16))(v27, v20);
LABEL_24:

}

void sub_10003E044(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void (*v22)(uint64_t, void *, void *);
  void *v23;
  uint64_t v24;
  id v25;
  uint8_t buf[4];
  void *v27;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v27 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESRKESession %@ getVehicleReports", buf, 0xCu);
  }

  v6 = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((v6 & 1) != 0)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "getReportsWithIsInternalClient:", 0));

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", objc_msgSend(v9, "count")));
    v20 = _NSConcreteStackBlock;
    v21 = 3221225472;
    v22 = sub_10003E274;
    v23 = &unk_100304858;
    v24 = *(_QWORD *)(a1 + 32);
    v11 = v10;
    v25 = v11;
    v12 = objc_msgSend(v9, "enumerateKeysAndObjectsUsingBlock:", &v20);
    v14 = SESDefaultLogObject(v12, v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "allValues", v20, v21, v22, v23, v24));
      *(_DWORD *)buf = 138412290;
      v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Vehicle report %@", buf, 0xCu);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
  else
  {
    v17 = *(_QWORD *)(a1 + 40);
    v18 = SESDefaultLogObject(v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v19 = SESCreateAndLogError(0, v9, SESErrorDomain, 12, CFSTR("Session is not active"));
    v11 = (id)objc_claimAutoreleasedReturnValue(v19);
    (*(void (**)(uint64_t, _QWORD, id))(v17 + 16))(v17, 0, v11);
  }

}

void sub_10003E274(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "readerIdentifier"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "hexStringAsData"));
  LODWORD(v6) = objc_msgSend(v6, "containsObject:", v8);

  if ((_DWORD)v6)
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v5, v9);

}

void sub_10003E3FC(id *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void (**v10)(id, _QWORD, void *);
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void (**v15)(id, _QWORD, void *);
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void (**v37)(id, _QWORD, void *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void (**v42)(id, _QWORD, void *);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void (**v47)(id, _QWORD, void *);
  uint64_t v48;
  uint64_t v49;
  void (**v50)(id, _QWORD, void *);
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void (**v54)(id, _QWORD, void *);
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  _QWORD v59[4];
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id location;
  __int128 buf;
  id v67;
  uint64_t v68;
  id v69;
  uint64_t v70;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = a1[4];
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESRKESession %@ sign", (uint8_t *)&buf, 0xCu);
  }

  v6 = objc_msgSend(a1[4], "isActive");
  if ((v6 & 1) != 0)
  {
    v8 = objc_msgSend(a1[4], "isBackgrounded");
    if ((_DWORD)v8)
    {
      v10 = (void (**)(id, _QWORD, void *))a1[7];
      v11 = SESDefaultLogObject(v8, v9);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v13 = SESCreateAndLogError(0, v12, SESErrorDomain, 17, CFSTR("Not allowed while backgrounded"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      v10[2](v10, 0, v14);
    }
    else
    {
      v18 = objc_msgSend(*((id *)a1[4] + 7), "containsObject:", a1[5]);
      if ((v18 & 1) != 0)
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "getEndpointWithReaderIdentifier:", a1[5]));

        if (v12)
        {
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "clientBundleIdentifier"));
          v24 = v23 == 0;

          if (v24)
          {
            v47 = (void (**)(id, _QWORD, void *))a1[7];
            v48 = SESDefaultLogObject(v25, v26);
            v14 = (void *)objc_claimAutoreleasedReturnValue(v48);
            v49 = SESCreateAndLogError(0, v14, SESErrorDomain, 0, CFSTR("Missing bundle ID"));
            v30 = (void *)objc_claimAutoreleasedReturnValue(v49);
            v47[2](v47, 0, v30);
          }
          else
          {
            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "clientBundleIdentifier"));
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "dataUsingEncoding:", 4));

            if (v14)
            {
              v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSData randomData:](NSData, "randomData:", 8));
              *(_QWORD *)&buf = objc_msgSend(v14, "DERItem");
              *((_QWORD *)&buf + 1) = v31;
              v67 = objc_msgSend(a1[6], "DERItem");
              v68 = v32;
              v69 = objc_msgSend(v30, "DERItem");
              v70 = v33;
              v34 = encodeSequenceContentSpec(&buf, &off_1003046E8);
              v36 = (void *)objc_claimAutoreleasedReturnValue(v34);
              if (v36)
              {
                objc_initWeak(&location, a1[4]);
                v59[0] = _NSConcreteStackBlock;
                v59[1] = 3221225472;
                v59[2] = sub_10003E964;
                v59[3] = &unk_1003048A8;
                v63 = a1[7];
                objc_copyWeak(&v64, &location);
                v60 = v12;
                v61 = v36;
                v62 = v30;
                sub_1000516E8((uint64_t)SecureElementManager, 0, CFSTR("Sign OEM App Data"), v59);

                objc_destroyWeak(&v64);
                objc_destroyWeak(&location);
              }
              else
              {
                v54 = (void (**)(id, _QWORD, void *))a1[7];
                v55 = SESDefaultLogObject(0, v35);
                v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
                v57 = SESCreateAndLogError(0, v56, SESErrorDomain, 0, CFSTR("Failure while encoding sequence contents"));
                v58 = (void *)objc_claimAutoreleasedReturnValue(v57);
                v54[2](v54, 0, v58);

              }
            }
            else
            {
              v50 = (void (**)(id, _QWORD, void *))a1[7];
              v51 = SESDefaultLogObject(v28, v29);
              v30 = (void *)objc_claimAutoreleasedReturnValue(v51);
              v52 = SESCreateAndLogError(0, v30, SESErrorDomain, 0, CFSTR("Invalid bundle ID"));
              v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
              v50[2](v50, 0, v53);

            }
          }
        }
        else
        {
          v42 = (void (**)(id, _QWORD, void *))a1[7];
          v43 = SESDefaultLogObject(v21, v22);
          v14 = (void *)objc_claimAutoreleasedReturnValue(v43);
          v44 = SESErrorDomain;
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "asHexString"));
          v45 = SESCreateAndLogError(0, v14, v44, 19, CFSTR("Endpoint not found %@"));
          v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
          v42[2](v42, 0, v46);

        }
      }
      else
      {
        v37 = (void (**)(id, _QWORD, void *))a1[7];
        v38 = SESDefaultLogObject(v18, v19);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v38);
        v39 = SESErrorDomain;
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "asHexString"));
        v40 = SESCreateAndLogError(0, v12, v39, 19, CFSTR("Vehicle identifier %@ is not allowlisted"));
        v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
        v37[2](v37, 0, v41);

      }
    }
  }
  else
  {
    v15 = (void (**)(id, _QWORD, void *))a1[7];
    v16 = SESDefaultLogObject(v6, v7);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v17 = SESCreateAndLogError(0, v12, SESErrorDomain, 12, CFSTR("Session is not active"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v15[2](v15, 0, v14);
  }

}

void sub_10003E940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10003E964(id *a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  void (**v10)(id, _QWORD, void *);
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;

  v5 = a2;
  if (a3)
  {
    (*((void (**)(void))a1[7] + 2))();
  }
  else
  {
    WeakRetained = objc_loadWeakRetained(a1 + 8);
    v8 = WeakRetained;
    if (WeakRetained)
    {
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "queue"));
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_10003EAE4;
      v15[3] = &unk_100304880;
      v16 = v5;
      v17 = a1[4];
      v18 = a1[5];
      v21 = a1[7];
      v19 = v8;
      v20 = a1[6];
      dispatch_async(v9, v15);

    }
    else
    {
      v10 = (void (**)(id, _QWORD, void *))a1[7];
      v11 = SESDefaultLogObject(0, v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v13 = SESCreateAndLogError(0, v12, SESErrorDomain, 0, CFSTR("Invalid session"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      v10[2](v10, 0, v14);

    }
  }

}

void sub_10003EAE4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "appletIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "publicKeyIdentifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "sha256"));
  v24 = 0;
  v6 = sub_100045614(v2, v3, v4, v5, 0, &v24);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = v24;

  if (v8)
  {
    v11 = *(_QWORD *)(a1 + 72);
    v12 = SESDefaultLogObject(v9, v10);
    v13 = (id)objc_claimAutoreleasedReturnValue(v12);
    v14 = SESCreateAndLogError(0, v13, SESErrorDomain, 0, CFSTR("Signature failure"));
    v15 = objc_claimAutoreleasedReturnValue(v14);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 16))(v11, 0, v15);

    v8 = (id)v15;
  }
  else
  {
    v16 = objc_alloc((Class)SESDataAttestation);
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "clientBundleIdentifier"));
    v17 = objc_msgSend(v23, "copy");
    v18 = objc_msgSend(*(id *)(a1 + 64), "copy");
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "signedData"));
    v20 = objc_msgSend(v19, "copy");
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "signature"));
    v22 = objc_msgSend(v21, "copy");
    v13 = objc_msgSend(v16, "initWithAppBundleID:nonce:signedData:signature:", v17, v18, v20, v22);

    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }

}

void sub_10003EDEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10003F52C(id a1)
{
  void *v1;

  v1 = (void *)qword_10034BBA0;
  qword_10034BBA0 = (uint64_t)&off_100322AC0;

}

void sub_10003FC00(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10003FCC0;
  block[3] = &unk_100304490;
  v11 = v6;
  v12 = v5;
  v13 = *(_QWORD *)(a1 + 32);
  v8 = v5;
  v9 = v6;
  dispatch_async(v7, block);

}

void sub_10003FCC0(id *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  SESTimer *v23;
  void *v24;
  NSObject **v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  _QWORD v30[4];
  id v31;
  id v32;
  void *v33;
  uint8_t buf[4];
  id v35;
  __int16 v36;
  void *v37;

  if (a1[4] || !a1[5])
  {
    v3 = SESDefaultLogObject(a1, a2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "clientBundleIdentifier"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "localizedDescription"));
      *(_DWORD *)buf = 138412546;
      v35 = v5;
      v36 = 2112;
      v37 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to wake up client with bundleID %@ %@", buf, 0x16u);

    }
  }
  else
  {
    v7 = a1[6];
    if (v7[11])
    {
      sub_10004C548(v7[12]);
      sub_10004C410(*((_QWORD *)a1[6] + 12), 1.0);
    }
    else
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[RBSDomainAttribute attributeWithDomain:name:](RBSDomainAttribute, "attributeWithDomain:name:", CFSTR("com.apple.seserviced"), CFSTR("RKESessionBackground")));
      v9 = objc_alloc((Class)RBSAssertion);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "clientBundleIdentifier"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("RKESession background assertion for %@"), v10));
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[RBSTarget targetWithPid:](RBSTarget, "targetWithPid:", objc_msgSend(a1[5], "pid")));
      v33 = v8;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v33, 1));
      v14 = objc_msgSend(v9, "initWithExplanation:target:attributes:", v11, v12, v13);
      v15 = (void *)*((_QWORD *)a1[6] + 11);
      *((_QWORD *)a1[6] + 11) = v14;

      v16 = (void *)*((_QWORD *)a1[6] + 11);
      v32 = 0;
      LOBYTE(v9) = objc_msgSend(v16, "acquireWithError:", &v32);
      v17 = v32;
      v19 = SESDefaultLogObject(v17, v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      v21 = v20;
      if ((v9 & 1) != 0)
      {
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "clientBundleIdentifier"));
          *(_DWORD *)buf = 138412290;
          v35 = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Acquired RBSAssertion for %@", buf, 0xCu);

        }
        objc_initWeak((id *)buf, a1[6]);
        v23 = [SESTimer alloc];
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "queue"));
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472;
        v30[2] = sub_1000400F4;
        v30[3] = &unk_1003048F0;
        objc_copyWeak(&v31, (id *)buf);
        v25 = sub_10004C264((NSObject **)v23, v24, v30);
        v26 = a1[6];
        v27 = (void *)v26[12];
        v26[12] = v25;

        sub_10004C410(*((_QWORD *)a1[6] + 12), 1.0);
        objc_destroyWeak(&v31);
        objc_destroyWeak((id *)buf);
      }
      else
      {
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v35 = v17;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to acquire RBSAssertion %@", buf, 0xCu);
        }

        v28 = a1[6];
        v29 = (void *)v28[11];
        v28[11] = 0;

      }
    }
  }
}

void sub_1000400B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000400F4(uint64_t a1)
{
  id WeakRetained;
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(*((id *)WeakRetained + 11), "invalidate");
    v3 = (void *)v2[11];
    v2[11] = 0;

    v4 = (void *)v2[12];
    v2[12] = 0;

    v7 = SESDefaultLogObject(v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = v2[13];
      v10 = 138412290;
      v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Invalidated RBSAssertion for %@", (uint8_t *)&v10, 0xCu);
    }

  }
}

id sub_1000402BC(uint64_t a1, _QWORD *a2)
{
  id v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  if (!a1)
    return 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = sub_1000403D8;
  v16 = sub_1000403E8;
  v17 = 0;
  v6 = 0;
  v7 = &v6;
  v8 = 0x3032000000;
  v9 = sub_1000403D8;
  v10 = sub_1000403E8;
  v11 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000403F0;
  v5[3] = &unk_100303600;
  v5[4] = &v6;
  v5[5] = &v12;
  sub_100016A08(a1, v5);
  if (a2)
    *a2 = objc_retainAutorelease((id)v13[5]);
  v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);

  _Block_object_dispose(&v12, 8);
  return v3;
}

void sub_1000403B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000403D8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000403E8(uint64_t a1)
{

}

void sub_1000403F0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id obj;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[SEEndPointCAEntity fetchRequest](SEEndPointCAEntity, "fetchRequest"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v5 + 40);
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &obj));

  objc_storeStrong((id *)(v5 + 40), obj);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

id sub_100040494(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v21[4];
  id v22;
  id v23;

  v7 = a2;
  v8 = a3;
  v10 = v8;
  if (!a1)
  {
LABEL_9:
    v16 = 0;
    goto LABEL_13;
  }
  if (!v7 || !v8)
  {
    if (a4)
    {
      v17 = SESDefaultLogObject(v8, v9);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v19 = SESCreateAndLogError(0, v18, SESErrorDomain, 1, CFSTR("Nil input to getEndPointCAEntityWithClientName"));
      *a4 = (id)objc_claimAutoreleasedReturnValue(v19);

    }
    goto LABEL_9;
  }
  v23 = 0;
  v11 = sub_1000402BC(a1, &v23);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v13 = v23;
  v14 = v13;
  if (!v12 || v13)
  {
    v16 = 0;
    if (a4)
      *a4 = objc_retainAutorelease(v13);
  }
  else
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1000405E8;
    v21[3] = &unk_100303840;
    v22 = v7;
    v15 = Find(v12, v21);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

  }
LABEL_13:

  return v16;
}

id sub_1000405E8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

id sub_100040628(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a2;
  v7 = v5;
  if (!a1)
    goto LABEL_8;
  if (!v5)
  {
    if (a3)
    {
      v10 = SESDefaultLogObject(0, v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v11 = SESCreateAndLogError(0, v8, SESErrorDomain, 1, CFSTR("Nil input to endPointCAEntityGetendPointCA"));
      v9 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue(v11);
      goto LABEL_6;
    }
LABEL_8:
    v9 = 0;
    goto LABEL_7;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "endPointCAData"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[SEEndPointCA decodeWithData:error:](SEEndPointCA, "decodeWithData:error:", v8, a3));
LABEL_6:

LABEL_7:
  return v9;
}

id sub_1000406EC(id a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD v8[4];
  id v9;
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v12 = 0;
    v13 = &v12;
    v14 = 0x3032000000;
    v15 = sub_1000403D8;
    v16 = sub_1000403E8;
    v17 = 0;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000407FC;
    v8[3] = &unk_100304940;
    v9 = v5;
    v10 = v6;
    v11 = &v12;
    sub_1000168E4((uint64_t)a1, v8);
    a1 = (id)v13[5];

    _Block_object_dispose(&v12, 8);
  }

  return a1;
}

void sub_1000407E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000407FC(uint64_t a1, void *a2)
{
  id *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id obj;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  obj = *(id *)(v5 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "encodeWithError:", &obj));
  objc_storeStrong((id *)(v5 + 40), obj);
  objc_msgSend(*(id *)(a1 + 32), "setEndPointCAData:", v6);

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40)
    || (v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "endPointCAData")),
        v15,
        !v15))
  {
    v9 = SESDefaultLogObject(v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = SESCreateAndLogError(0, v10, SESErrorDomain, 0, CFSTR("Encoding endPointCAData failed"));
    v12 = objc_claimAutoreleasedReturnValue(v11);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;

    sub_10002BB14(v3);
  }
  else
  {
    v16 = sub_10002BA94((uint64_t)v3);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v19 = *(void **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = v17;

  }
}

_QWORD *sub_100040910(uint64_t a1, void *a2, _QWORD *a3)
{
  _QWORD *IsValid;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  const __CFData *v8;
  SecCertificateRef v9;
  uint64_t v10;
  SecCertificateRef v11;
  CFAbsoluteTime Current;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;

  if (!a1)
    return 0;
  IsValid = a3;
  v4 = sub_100040628(a1, a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "certificates"));
    v8 = (const __CFData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "lastObject"));

    v9 = SecCertificateCreateWithData(0, v8);
    if (v9)
    {
      v11 = v9;
      Current = CFAbsoluteTimeGetCurrent();
      IsValid = (_QWORD *)SecCertificateIsValid(v11, Current + 172800.0);
      CFRelease(v11);
    }
    else if (IsValid)
    {
      v13 = SESDefaultLogObject(0, v10);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      v15 = SESErrorDomain;
      v18 = (void *)objc_claimAutoreleasedReturnValue(-[__CFData asHexString](v8, "asHexString"));
      v16 = SESCreateAndLogError(0, v14, v15, 0, CFSTR("Failed to get SecCertificateRef: %@"));
      *IsValid = (id)objc_claimAutoreleasedReturnValue(v16);

      IsValid = 0;
    }

  }
  else
  {
    IsValid = 0;
  }

  return IsValid;
}

id sub_100040A34(uint64_t a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v13 = v11;
  if (!a1)
    goto LABEL_12;
  if (v10 && v9 && v11)
  {
    v14 = sub_10002BA88(a1);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = (id)objc_claimAutoreleasedReturnValue(+[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:](NSEntityDescription, "insertNewObjectForEntityForName:inManagedObjectContext:", CFSTR("SEEndPointCAEntity"), v15));

    objc_msgSend(v16, "setIdentifier:", v9);
    objc_msgSend(v16, "setClientName:", v13);
    objc_msgSend(v16, "setInstance:", v10);
    if (objc_msgSend(v16, "validateForInsert:", a5))
    {
      v16 = v16;
      v17 = v16;
    }
    else
    {
      v17 = 0;
    }
    goto LABEL_10;
  }
  if (!a5)
  {
LABEL_12:
    v17 = 0;
    goto LABEL_11;
  }
  v18 = SESDefaultLogObject(v11, v12);
  v16 = (id)objc_claimAutoreleasedReturnValue(v18);
  v19 = SESCreateAndLogError(0, v16, SESErrorDomain, 1, CFSTR("Nil input to addEndPointCAEntityWithIdentifier"));
  v17 = 0;
  *a5 = (id)objc_claimAutoreleasedReturnValue(v19);
LABEL_10:

LABEL_11:
  return v17;
}

__CFString *sub_100040B80(void *a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const __CFString *v11;
  void *v12;
  uint64_t v13;
  __CFString *v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a1;
  v7 = v5;
  if (a2 >= 6)
  {
    if (a3)
    {
      v8 = SESDefaultLogObject(v5, v6);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = SESErrorDomain;
      v11 = CFSTR("Unknown SEEndPointType %ld");
      v12 = v9;
      v13 = 1;
LABEL_15:
      v18 = SESCreateAndLogError(0, v12, v10, v13, v11);
      *a3 = (id)objc_claimAutoreleasedReturnValue(v18);

      goto LABEL_16;
    }
    goto LABEL_16;
  }
  switch(a2)
  {
    case 3:
      v14 = CFSTR("A00000085801010100000001");
      break;
    case 2:
      v14 = CFSTR("A00000085802010100000001");
      break;
    case 1:
      v14 = CFSTR("A000000809434343444B417631");
      break;
    default:
      if ((a2 & 0xFFFFFFFFFFFFFFFELL) != 4)
        goto LABEL_13;
      v14 = CFSTR("A000000909ACCE5501");
      break;
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString hexStringAsData](v14, "hexStringAsData"));
  v16 = sub_1000500FC(v7, v15);

  if (!v16)
  {
LABEL_13:
    if (a3)
    {
      v17 = SESDefaultLogObject(v5, v6);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v10 = SESErrorDomain;
      v11 = CFSTR("Applet does not exist");
      v12 = v9;
      v13 = 0;
      goto LABEL_15;
    }
LABEL_16:
    v14 = 0;
  }

  return v14;
}

id sub_100040CC8(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, unsigned int a7, unsigned int a8, unsigned __int8 a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,char a21,unsigned __int8 a22,_QWORD *a23)
{
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  id v41;
  uint64_t v42;
  void *v43;
  unsigned int v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void *v110;
  NSMutableData *v111;
  id v112;
  id v113;
  uint64_t v114;
  void *i;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  unint64_t v120;
  id v121;
  uint64_t v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  uint64_t v131;
  void *v132;
  id v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  NSObject *v138;
  void *v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  const __CFString *v149;
  void *v150;
  id v151;
  uint64_t CertificatePublicKey;
  void *v153;
  id v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  NSObject *v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  id v163;
  uint64_t v164;
  uint64_t v165;
  NSObject *v166;
  uint64_t v167;
  void *v168;
  id v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  NSObject *v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v195;
  void *v196;
  id v198;
  void *v199;
  void *v200;
  void *v201;
  id v202;
  id v203;
  id v204;
  id v205;
  id v206;
  id v207;
  id v208;
  id v209;
  id v210;
  id v211;
  id v212;
  id v213;
  id v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  _BYTE v219[128];
  _QWORD v220[9];
  _QWORD v221[8];
  uint8_t buf[4];
  id v223;
  __int16 v224;
  id v225;
  __int16 v226;
  id v227;

  v27 = a1;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v31 = a6;
  v32 = a10;
  v33 = v32;
  v211 = a11;
  v210 = a12;
  v208 = a13;
  v202 = a14;
  v203 = a15;
  v204 = a16;
  v205 = a17;
  v209 = a18;
  v207 = a19;
  v206 = a20;
  v35 = SESDefaultLogObject(v206, v34);
  v36 = objc_claimAutoreleasedReturnValue(v35);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412802;
    v223 = v28;
    v224 = 2112;
    v225 = v30;
    v226 = 2112;
    v227 = v31;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "%@ %@ %@", buf, 0x20u);
  }

  v39 = SESDefaultLogObject(v37, v38);
  v40 = objc_claimAutoreleasedReturnValue(v39);
  if (os_signpost_enabled(v40))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v40, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "PTA_CREATE_ENDPOINT", "", buf, 2u);
  }

  if (!v29 || !v27 || !v30)
  {
    if (a23)
    {
      v50 = SESDefaultLogObject(v41, v42);
      v46 = (void *)objc_claimAutoreleasedReturnValue(v50);
      v51 = SESCreateAndLogError(0, v46, SESErrorDomain, 1, CFSTR("Nil passed to EndPointCreate"));
      v49 = (id)objc_claimAutoreleasedReturnValue(v51);
      goto LABEL_14;
    }
    goto LABEL_24;
  }
  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000909ACCE5501"), "hexStringAsData"));
  v44 = objc_msgSend(v28, "isEqualToData:", v43);

  if (!v44)
  {
    v41 = objc_msgSend(v32, "length");
    if (v41 == (id)8)
      goto LABEL_16;
    if (a23)
    {
      v58 = SESDefaultLogObject(v41, v42);
      v46 = (void *)objc_claimAutoreleasedReturnValue(v58);
      v59 = SESErrorDomain;
      objc_msgSend(v32, "length");
      v60 = SESCreateAndLogError(0, v46, v59, 1, CFSTR("endPoint readerIdentifier length %u is incorrect"));
      v49 = (id)objc_claimAutoreleasedReturnValue(v60);
      goto LABEL_14;
    }
LABEL_24:
    v52 = 0;
    goto LABEL_27;
  }
  v41 = objc_msgSend(v32, "length");
  if (v41 == (id)16)
  {
LABEL_16:
    v53 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "asAsciiData"));
    v46 = v53;
    if (!v53
      || (v53 = objc_msgSend(v53, "length")) == 0
      || (v53 = objc_msgSend(v46, "length"), (unint64_t)v53 >= 0x1F))
    {
      if (!a23)
      {
        v52 = 0;
        goto LABEL_26;
      }
      v55 = SESDefaultLogObject(v53, v54);
      v188 = (void *)objc_claimAutoreleasedReturnValue(v55);
      v56 = SESErrorDomain;
      objc_msgSend(v31, "length");
      v57 = SESCreateAndLogError(0, v188, v56, 1, CFSTR("endPoint subjectIdentifier %@ is non-ASCII or length %u is incorrect"));
      v52 = 0;
      *a23 = (id)objc_claimAutoreleasedReturnValue(v57);
      goto LABEL_21;
    }
    v64 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "asAsciiData"));
    v188 = v64;
    if (!v64
      || (v64 = objc_msgSend(v64, "length")) == 0
      || (v64 = objc_msgSend(v188, "length"), (unint64_t)v64 >= 0x1F))
    {
      if (a23)
      {
        v66 = SESDefaultLogObject(v64, v65);
        v67 = objc_claimAutoreleasedReturnValue(v66);
        v68 = SESErrorDomain;
        objc_msgSend(v29, "length");
        v69 = SESCreateAndLogError(0, v67, v68, 1, CFSTR("endPoint caIdentifierASCII %@ is non-ASCII or length %u is incorrect"));
        v198 = (id)v67;
        v70 = (id)objc_claimAutoreleasedReturnValue(v69);
LABEL_35:
        v52 = 0;
        *a23 = v70;
LABEL_36:

LABEL_21:
        goto LABEL_26;
      }
      goto LABEL_71;
    }
    v71 = objc_msgSend(v211, "length");
    if (v71 != (id)65)
    {
      if (a23)
      {
        v81 = SESDefaultLogObject(v71, v72);
        v82 = objc_claimAutoreleasedReturnValue(v81);
        v83 = SESErrorDomain;
        objc_msgSend(v211, "length");
        v84 = SESCreateAndLogError(0, v82, v83, 1, CFSTR("endPoint readerPublicKey length %u is incorrect"));
        v198 = (id)v82;
        v70 = (id)objc_claimAutoreleasedReturnValue(v84);
        goto LABEL_35;
      }
      goto LABEL_71;
    }
    if (objc_msgSend(v210, "length") != (id)15)
    {
      v73 = objc_msgSend(v210, "length");
      if (v73 != (id)13)
      {
        if (a23)
        {
          v89 = SESDefaultLogObject(v73, v74);
          v90 = objc_claimAutoreleasedReturnValue(v89);
          v91 = SESErrorDomain;
          objc_msgSend(v210, "length");
          v92 = SESCreateAndLogError(0, v90, v91, 1, CFSTR("endPoint startDate length %u is incorrect"));
          v198 = (id)v90;
          v70 = (id)objc_claimAutoreleasedReturnValue(v92);
          goto LABEL_35;
        }
        goto LABEL_71;
      }
    }
    v75 = objc_msgSend(v208, "length");
    if (v75 != (id)15)
    {
      v75 = objc_msgSend(v208, "length");
      if (v75 != (id)13)
      {
        if (a23)
        {
          v93 = SESDefaultLogObject(v75, v76);
          v94 = objc_claimAutoreleasedReturnValue(v93);
          v95 = SESErrorDomain;
          objc_msgSend(v208, "length");
          v96 = SESCreateAndLogError(0, v94, v95, 1, CFSTR("endPoint endData length %u is incorrect"));
          v198 = (id)v94;
          v70 = (id)objc_claimAutoreleasedReturnValue(v96);
          goto LABEL_35;
        }
        goto LABEL_71;
      }
    }
    if (v209)
    {
      v75 = objc_msgSend(v209, "intValue");
      if ((v75 & 0x80000000) != 0 || (v75 = objc_msgSend(v209, "intValue"), (int)v75 >= 2))
      {
        if (a23)
        {
          v77 = SESDefaultLogObject(v75, v76);
          v78 = objc_claimAutoreleasedReturnValue(v77);
          v79 = SESErrorDomain;
          objc_msgSend(v209, "intValue");
          v80 = SESCreateAndLogError(0, v78, v79, 1, CFSTR("endPoint maxPathLength value %u is not supported"));
          v198 = (id)v78;
          v70 = (id)objc_claimAutoreleasedReturnValue(v80);
          goto LABEL_35;
        }
LABEL_71:
        v52 = 0;
        goto LABEL_21;
      }
    }
    if (v207)
    {
      v75 = objc_msgSend(v207, "intValue");
      if ((v75 & 0x80000000) != 0 || (v75 = objc_msgSend(v207, "intValue"), (int)v75 >= 256))
      {
        if (a23)
        {
          v85 = SESDefaultLogObject(v75, v76);
          v86 = objc_claimAutoreleasedReturnValue(v85);
          v87 = SESErrorDomain;
          objc_msgSend(v207, "intValue");
          v88 = SESCreateAndLogError(0, v86, v87, 1, CFSTR("endPoint permanentTransactionCodeCless value %u is not supported"));
          v198 = (id)v86;
          v70 = (id)objc_claimAutoreleasedReturnValue(v88);
          goto LABEL_35;
        }
        goto LABEL_71;
      }
    }
    if (v206)
    {
      v75 = objc_msgSend(v206, "intValue");
      if ((v75 & 0x80000000) != 0 || (v75 = objc_msgSend(v206, "intValue"), (int)v75 >= 256))
      {
        if (a23)
        {
          v97 = SESDefaultLogObject(v75, v76);
          v98 = objc_claimAutoreleasedReturnValue(v97);
          v99 = SESErrorDomain;
          objc_msgSend(v206, "intValue");
          v100 = SESCreateAndLogError(0, v98, v99, 1, CFSTR("endPoint permanentTransactionCodeWired value %u is not supported"));
          v198 = (id)v98;
          v70 = (id)objc_claimAutoreleasedReturnValue(v100);
          goto LABEL_35;
        }
        goto LABEL_71;
      }
    }
    if (a22 >= 0x11u)
    {
      if (a23)
      {
        v101 = SESDefaultLogObject(v75, v76);
        v102 = objc_claimAutoreleasedReturnValue(v101);
        v103 = SESCreateAndLogError(0, v102, SESErrorDomain, 1, CFSTR("endPoint groupSubIdentifierCacheSize value %u is not supported"));
        v198 = (id)v102;
        v70 = (id)objc_claimAutoreleasedReturnValue(v103);
        goto LABEL_35;
      }
      goto LABEL_71;
    }
    if (a9 >= 4u)
    {
      if (a23)
      {
        v106 = SESDefaultLogObject(v75, v76);
        v107 = objc_claimAutoreleasedReturnValue(v106);
        v108 = SESCreateAndLogError(0, v107, SESErrorDomain, 1, CFSTR("endPoint optionGroupA value %u is not supported"));
        v198 = (id)v107;
        v70 = (id)objc_claimAutoreleasedReturnValue(v108);
        goto LABEL_35;
      }
      goto LABEL_71;
    }
    v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000909ACCE5501"), "hexStringAsData"));
    v105 = objc_msgSend(v28, "isEqualToData:", v104);

    v186 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 77, v33));
    if (v105)
    {
      v221[0] = v186;
      v184 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 24352, v46));
      v221[1] = v184;
      v183 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 66, v188));
      v221[2] = v183;
      v195 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 70, a7));
      v221[3] = v195;
      v182 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 71, a8));
      v221[4] = v182;
      v181 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 91, v211));
      v221[5] = v181;
      v180 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 81, v210));
      v221[6] = v180;
      v179 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 82, v208));
      v221[7] = v179;
      v178 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v221, 8));
      v198 = objc_msgSend(v178, "mutableCopy");
    }
    else
    {
      v220[0] = v186;
      v184 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 24352, v46));
      v220[1] = v184;
      v183 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 66, v188));
      v220[2] = v183;
      v195 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 70, a7));
      v220[3] = v195;
      v182 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 71, a8));
      v220[4] = v182;
      v181 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("0100"), "hexStringAsData"));
      v180 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 92, v181));
      v220[5] = v180;
      v179 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 91, v211));
      v220[6] = v179;
      v178 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 81, v210));
      v220[7] = v178;
      v109 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 82, v208));
      v220[8] = v109;
      v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v220, 9));
      v198 = objc_msgSend(v110, "mutableCopy");

    }
    v196 = v27;
    v187 = v33;
    if (objc_msgSend(v203, "count"))
    {
      v111 = objc_opt_new(NSMutableData);
      v217 = 0u;
      v218 = 0u;
      v215 = 0u;
      v216 = 0u;
      v112 = v203;
      v113 = objc_msgSend(v112, "countByEnumeratingWithState:objects:count:", &v215, v219, 16);
      if (v113)
      {
        v114 = *(_QWORD *)v216;
        do
        {
          for (i = 0; i != v113; i = (char *)i + 1)
          {
            if (*(_QWORD *)v216 != v114)
              objc_enumerationMutation(v112);
            -[NSMutableData appendData:](v111, "appendData:", *(_QWORD *)(*((_QWORD *)&v215 + 1) + 8 * (_QWORD)i));
          }
          v113 = objc_msgSend(v112, "countByEnumeratingWithState:objects:count:", &v215, v219, 16);
        }
        while (v113);
      }

      v27 = v196;
      v33 = v187;
      v116 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 73, v111));
      objc_msgSend(v198, "addObject:", v116);

    }
    if (objc_msgSend(v204, "unsignedShortValue"))
    {
      v117 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedShort:](SESTLV, "TLVWithTag:unsignedShort:", 74, __rev16(objc_msgSend(v204, "unsignedShortValue"))));
      objc_msgSend(v198, "addObject:", v117);

    }
    if (objc_msgSend(v205, "unsignedShortValue"))
    {
      v118 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedShort:](SESTLV, "TLVWithTag:unsignedShort:", 75, __rev16(objc_msgSend(v205, "unsignedShortValue"))));
      objc_msgSend(v198, "addObject:", v118);

    }
    if (objc_msgSend(v202, "length"))
    {
      v119 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 78, v202));
      objc_msgSend(v198, "addObject:", v119);

    }
    v214 = 0;
    v120 = sub_100042234(v27, v28, &v214);
    v121 = v214;
    v123 = v121;
    if (v120 <= 1)
    {
      if (a23)
      {
        v145 = SESDefaultLogObject(v121, v122);
        v201 = (void *)objc_claimAutoreleasedReturnValue(v145);
        v146 = SESCreateAndLogError(v123, v201, SESErrorDomain, 0, CFSTR("Couldn't determine SkyFeature"));
        v52 = 0;
        *a23 = (id)objc_claimAutoreleasedReturnValue(v146);

      }
      else
      {
        v52 = 0;
      }
      goto LABEL_143;
    }
    if (v209)
    {
      v124 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 90, objc_msgSend(v209, "unsignedIntValue")));
      objc_msgSend(v198, "addObject:", v124);

    }
    if (v207)
    {
      v125 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 134, objc_msgSend(v207, "unsignedIntValue")));
      objc_msgSend(v198, "addObject:", v125);

    }
    if (v206)
    {
      v126 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 135, objc_msgSend(v206, "unsignedIntValue")));
      objc_msgSend(v198, "addObject:", v126);

    }
    if (a21)
    {
      v127 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 136, 0));
      objc_msgSend(v198, "addObject:", v127);

    }
    if (a22)
    {
      v128 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 137, a22));
      objc_msgSend(v198, "addObject:", v128);

    }
    if (a9)
    {
      v129 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 202, a9));
      objc_msgSend(v198, "addObject:", v129);

    }
    v130 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:children:](SESTLV, "TLVWithTag:children:", 32551, v198));
    v200 = v130;
    if (!v130)
    {
      if (!a23)
      {
        v52 = 0;
        v27 = v196;
        v33 = v187;
LABEL_142:

LABEL_143:
        goto LABEL_36;
      }
      v147 = SESDefaultLogObject(0, v131);
      v199 = (void *)objc_claimAutoreleasedReturnValue(v147);
      v148 = SESCreateAndLogError(0, v199, SESErrorDomain, 0, CFSTR("Could not construct TLV for endPoint creation"));
      v52 = 0;
      *a23 = (id)objc_claimAutoreleasedReturnValue(v148);
LABEL_141:

      v27 = v196;
      v33 = v187;
      goto LABEL_142;
    }
    v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v130, "asData"));
    v213 = v123;
    v133 = sub_1000423DC(v196, v28, v132, 112, 0, 0, 0, &v213);
    v199 = (void *)objc_claimAutoreleasedReturnValue(v133);
    v134 = v213;

    if (v134)
    {
      v137 = SESDefaultLogObject(v135, v136);
      v138 = objc_claimAutoreleasedReturnValue(v137);
      if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
      {
        v139 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v200, "asData"));
        v140 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "base64"));
        *(_DWORD *)buf = 138412290;
        v223 = v140;
        _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_ERROR, "CreateEndPoint buffer %@", buf, 0xCu);

      }
      if (a23)
      {
        v143 = SESDefaultLogObject(v141, v142);
        v192 = (void *)objc_claimAutoreleasedReturnValue(v143);
        v144 = SESCreateAndLogError(v134, v192, SESErrorDomain, 0, CFSTR("While creating endpoint"));
        v52 = 0;
        *a23 = (id)objc_claimAutoreleasedReturnValue(v144);

      }
      else
      {
        v52 = 0;
      }
      goto LABEL_140;
    }
    if (a2 == 1)
    {
      v149 = CFSTR("0100");
    }
    else
    {
      if (a2 == 4)
        goto LABEL_127;
      v149 = CFSTR("02000100");
    }
    v193 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithHexString:](NSData, "dataWithHexString:", v149));
    v185 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 148, v193));
    v150 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v185, "asData"));
    v151 = sub_100042934(v196, v28, v150);
    v134 = (id)objc_claimAutoreleasedReturnValue(v151);

    if (v134)
    {
      CertificatePublicKey = getCertificatePublicKey(v199);
      v190 = (void *)objc_claimAutoreleasedReturnValue(CertificatePublicKey);
      v153 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v190, "sha1"));
      v154 = sub_100042AB0(v196, v28, v153);
      v155 = (void *)objc_claimAutoreleasedReturnValue(v154);

      if (v155)
      {
        v158 = SESDefaultLogObject(v156, v157);
        v159 = objc_claimAutoreleasedReturnValue(v158);
        if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v223 = v155;
          _os_log_impl((void *)&_mh_execute_header, v159, OS_LOG_TYPE_ERROR, "During cleanup: %@", buf, 0xCu);
        }

      }
      if (a23)
      {
        v160 = SESDefaultLogObject(v156, v157);
        v161 = (void *)objc_claimAutoreleasedReturnValue(v160);
        v162 = SESCreateAndLogError(v134, v161, SESErrorDomain, 0, CFSTR("While setting the protocol version"));
        *a23 = (id)objc_claimAutoreleasedReturnValue(v162);

      }
      goto LABEL_137;
    }

LABEL_127:
    v212 = 0;
    v193 = (void *)objc_claimAutoreleasedReturnValue(+[SEEndPoint endPointWithType:appletIdentifier:identifier:certificateData:error:](SEEndPoint, "endPointWithType:appletIdentifier:identifier:certificateData:error:", a2, v28, v30, v199, &v212));
    v163 = v212;
    v134 = v163;
    if (!v163)
    {
      v52 = v193;
      v193 = v52;
      goto LABEL_139;
    }
    v165 = SESDefaultLogObject(v163, v164);
    v166 = objc_claimAutoreleasedReturnValue(v165);
    if (os_log_type_enabled(v166, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v166, OS_LOG_TYPE_INFO, "After creating endPoint, couldn't create SEEndPoint object, cleaning up before returning", buf, 2u);
    }

    v167 = getCertificatePublicKey(v199);
    v191 = (void *)objc_claimAutoreleasedReturnValue(v167);
    v168 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v191, "sha1"));
    v169 = sub_100042AB0(v196, v28, v168);
    v170 = (void *)objc_claimAutoreleasedReturnValue(v169);

    if (v170)
    {
      v173 = SESDefaultLogObject(v171, v172);
      v174 = objc_claimAutoreleasedReturnValue(v173);
      if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v223 = v170;
        _os_log_impl((void *)&_mh_execute_header, v174, OS_LOG_TYPE_ERROR, "During cleanup: %@", buf, 0xCu);
      }

    }
    if (a23)
    {
      v175 = SESDefaultLogObject(v171, v172);
      v176 = (void *)objc_claimAutoreleasedReturnValue(v175);
      v177 = SESCreateAndLogError(v134, v176, SESErrorDomain, 0, CFSTR("Failed to build endpoint object for %@"));
      *a23 = (id)objc_claimAutoreleasedReturnValue(v177);

    }
LABEL_137:
    v52 = 0;
LABEL_139:

LABEL_140:
    v123 = v134;
    goto LABEL_141;
  }
  if (!a23)
    goto LABEL_24;
  v45 = SESDefaultLogObject(v41, v42);
  v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
  v47 = SESErrorDomain;
  objc_msgSend(v32, "length");
  v48 = SESCreateAndLogError(0, v46, v47, 1, CFSTR("endPoint readerIdentifier length %u is incorrect for Lyon"));
  v49 = (id)objc_claimAutoreleasedReturnValue(v48);
LABEL_14:
  v52 = 0;
  *a23 = v49;
LABEL_26:

LABEL_27:
  v61 = SESDefaultLogObject(v41, v42);
  v62 = objc_claimAutoreleasedReturnValue(v61);
  if (os_signpost_enabled(v62))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v62, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "PTA_CREATE_ENDPOINT", "", buf, 2u);
  }

  return v52;
}

void sub_1000421A4(_Unwind_Exception *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  sub_1002775C0(v4);

  _Unwind_Resume(a1);
}

uint64_t sub_100042234(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  id *v11;
  id *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id *v20;
  void *v21;
  uint64_t v22;
  id *v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  void *v29;
  id v30;

  v5 = a1;
  v6 = sub_10004FBA0(v5, a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v7)
  {
    v8 = v7;
    if (a3)
    {
      v8 = objc_retainAutorelease(v7);
      v9 = 0;
      *a3 = v8;
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v30 = 0;
    v10 = sub_10004F8D8(v5, 128, 202, 0, 0, 0, 0, &v30);
    v11 = (id *)objc_claimAutoreleasedReturnValue(v10);
    v8 = v30;
    v12 = sub_10005582C(v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v14 = objc_msgSend(v13, "length");

    if ((unint64_t)v14 > 1)
    {
      v23 = sub_10005582C(v11);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      v25 = objc_msgSend(v24, "u16BE:", 0);

      v26 = 3;
      v27 = 1;
      if (v25 == 261)
        v27 = 2;
      if (v25 <= 0x105)
        v26 = v27;
      if (v25 <= 0x200)
        v9 = v26;
      else
        v9 = 4;
    }
    else
    {
      if (a3)
      {
        v17 = SESDefaultLogObject(v15, v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
        v19 = SESErrorDomain;
        v20 = sub_10005582C(v11);
        v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "asHexString"));
        v22 = SESCreateAndLogError(v8, v18, v19, 0, CFSTR("Failed to query version data %@ %@"));
        *a3 = (id)objc_claimAutoreleasedReturnValue(v22);

      }
      v9 = 0;
    }

  }
  return v9;
}

id sub_1000423DC(void *a1, void *a2, void *a3, char a4, char a5, char a6, void *a7, _QWORD *a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  const __CFString *v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  id v56;
  uint64_t v57;
  id *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id *v66;
  void *v67;
  id *v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  id *v73;
  id v74;
  unsigned int v75;
  NSMutableData *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  id *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  id v87;
  char v88;
  char v89;
  id v90;
  id v91;
  id v92;
  id v93;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a7;
  v20 = v18;
  if (v15 && v16)
  {
    v89 = a5;
    v21 = sub_10004FBA0(v15, v16);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (v22)
    {
      v24 = (id)v22;
      if (!a8)
      {
LABEL_7:
        v30 = 0;
LABEL_8:
        v31 = 0;
LABEL_9:

        goto LABEL_13;
      }
      v25 = SESDefaultLogObject(v22, v23);
      v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      v27 = SESErrorDomain;
      v28 = CFSTR("While ExecuteCommand 0x%x 0x%X 0x%x");
LABEL_6:
      v29 = SESCreateAndLogError(v24, v26, v27, 0, v28);
      *a8 = (id)objc_claimAutoreleasedReturnValue(v29);

      goto LABEL_7;
    }
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000909ACCE5501"), "hexStringAsData"));
    v37 = objc_msgSend(v16, "isEqualToData:", v36);

    if (v37)
    {
      if (v17 && v20)
      {
        if (a8)
        {
          v40 = SESDefaultLogObject(v38, v39);
          v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
          v42 = SESCreateAndLogError(0, v41, SESErrorDomain, 1, CFSTR("data and buffer should not be used together for Lyon"));
          *a8 = (id)objc_claimAutoreleasedReturnValue(v42);

        }
        v30 = 0;
LABEL_20:
        v24 = 0;
        goto LABEL_8;
      }
      if (v20)
        v54 = v20;
      else
        v54 = v17;
      v92 = 0;
      v55 = sub_10004FA80(v15, 128, a4, a5, a6, v54, 0, &v92);
      v30 = (void *)objc_claimAutoreleasedReturnValue(v55);
      v56 = v92;
      v24 = v56;
      if (!v56 && v30)
      {
        v58 = sub_10005582C((id *)v30);
        v31 = (id)objc_claimAutoreleasedReturnValue(v58);
        goto LABEL_9;
      }
    }
    else
    {
      if (v17)
      {
        v88 = a4;
        v43 = v15;
        v44 = v17;
        if (objc_msgSend(v44, "length"))
        {
          v86 = v20;
          v87 = v17;
          v45 = 0;
          v46 = 0;
          while (1)
          {
            v47 = (char *)objc_msgSend(v44, "length");
            v48 = (unint64_t)&v47[-v45] >= 0xFA ? 250 : (uint64_t)&v47[-v45];
            v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "subdataWithRange:", v45, v48));
            v93 = 0;
            v50 = sub_10004F8D8(v43, 128, 208, SBYTE1(v46), v46, v49, 0, &v93);
            v51 = v93;

            if (v51)
              break;
            v46 += v48;
            v45 = v46;
            if (objc_msgSend(v44, "length") == (id)v46)
            {
              v24 = 0;
              goto LABEL_38;
            }
          }
          v59 = SESDefaultLogObject(v52, v53);
          v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
          v61 = SESCreateAndLogError(0, v60, SESErrorDomain, 0, CFSTR("while calling WriteInternalBuffer"));
          v24 = (id)objc_claimAutoreleasedReturnValue(v61);

LABEL_38:
          v20 = v86;
          v17 = v87;
        }
        else
        {
          v24 = 0;
        }

        a4 = v88;
        if (v24)
        {
          if (!a8)
            goto LABEL_7;
          v64 = SESDefaultLogObject(v62, v63);
          v26 = (void *)objc_claimAutoreleasedReturnValue(v64);
          v27 = SESErrorDomain;
          v28 = CFSTR("While writing buffer for cmd 0x%x 0x%X 0x%x");
          goto LABEL_6;
        }
      }
      v91 = 0;
      v65 = sub_10004F8D8(v15, 128, a4, v89, a6, v20, 0, &v91);
      v30 = (void *)objc_claimAutoreleasedReturnValue(v65);
      v56 = v91;
      v24 = v56;
      if (!v56 && v30)
      {
        v66 = sub_10005582C((id *)v30);
        v67 = (void *)objc_claimAutoreleasedReturnValue(v66);
        v31 = objc_msgSend(v67, "length");

        if (!v31)
        {
          v24 = 0;
          goto LABEL_9;
        }
        v68 = sub_10005582C((id *)v30);
        v69 = (void *)objc_claimAutoreleasedReturnValue(v68);
        v70 = objc_msgSend(v69, "length");

        if (v70 == (id)2)
        {
          v73 = sub_10005582C((id *)v30);
          v74 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v73));
          v75 = bswap32(*(unsigned __int16 *)objc_msgSend(v74, "bytes")) >> 16;
          v90 = 0;
          v76 = sub_1000487E8(v15, v75, &v90);
          v31 = (id)objc_claimAutoreleasedReturnValue(v76);
          v24 = v90;

          goto LABEL_9;
        }
        if (a8)
        {
          v80 = SESDefaultLogObject(v71, v72);
          v81 = (void *)objc_claimAutoreleasedReturnValue(v80);
          v82 = SESErrorDomain;
          v83 = sub_10005582C((id *)v30);
          v85 = (void *)objc_claimAutoreleasedReturnValue(v83);
          v84 = SESCreateAndLogError(0, v81, v82, 0, CFSTR("Not expecting command result %@"));
          *a8 = (id)objc_claimAutoreleasedReturnValue(v84);

        }
        goto LABEL_20;
      }
    }
    if (a8)
    {
      v77 = SESDefaultLogObject(v56, v57);
      v78 = (void *)objc_claimAutoreleasedReturnValue(v77);
      v79 = SESCreateAndLogError(v24, v78, SESErrorDomain, 0, CFSTR("While ExecuteCommand 0x%x 0x%X 0x%x"));
      *a8 = (id)objc_claimAutoreleasedReturnValue(v79);

    }
    goto LABEL_8;
  }
  if (a8)
  {
    v32 = SESDefaultLogObject(v18, v19);
    v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    v34 = SESCreateAndLogError(0, v33, SESErrorDomain, 1, CFSTR("Nil input to ExecuteCommand"));
    *a8 = (id)objc_claimAutoreleasedReturnValue(v34);

  }
  v31 = 0;
LABEL_13:

  return v31;
}

id sub_100042934(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v22;
  uint8_t buf[4];
  id v24;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v9 = SESDefaultLogObject(v7, v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
  }

  if (v5 && v6 && v7)
  {
    v13 = sub_10004FBA0(v5, v6);
    v14 = (id)objc_claimAutoreleasedReturnValue(v13);
    if (!v14)
    {
      v22 = 0;
      v15 = sub_10004F8D8(v5, 128, 52, 0, 0, v7, 0, &v22);
      v14 = v22;
    }
    v16 = v14;
    v17 = v16;
  }
  else
  {
    v18 = SESDefaultLogObject(v11, v12);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v19 = SESCreateAndLogError(0, v17, SESErrorDomain, 1, CFSTR("Nil input to SetupEndPoint"));
    v16 = (id)objc_claimAutoreleasedReturnValue(v19);
  }
  v20 = v16;

  return v20;
}

id sub_100042AB0(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  void *v39;
  id v40;
  uint8_t buf[4];
  void *v42;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v9 = SESDefaultLogObject(v7, v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "asHexString"));
    *(_DWORD *)buf = 138412290;
    v42 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);

  }
  v14 = SESDefaultLogObject(v12, v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_signpost_enabled(v15))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "PTA_DELETE_ENDPOINT", "", buf, 2u);
  }

  if (v5 && v6 && v7)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 146, v7));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "asData"));
    v20 = sub_100042934(v5, v6, v19);

    v21 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 80, v7));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "asData"));
    v40 = 0;
    v23 = sub_1000423DC(v5, v6, 0, 116, 0, 0, v22, &v40);
    v24 = v40;

    if (v24)
    {
      v27 = SESDefaultLogObject(v25, v26);
      v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      v29 = SESErrorDomain;
      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "asHexString"));
      v30 = SESCreateAndLogError(0, v28, v29, 0, CFSTR("While deleting %@"));
      v31 = (void *)objc_claimAutoreleasedReturnValue(v30);

    }
    else
    {
      v31 = 0;
    }

  }
  else
  {
    v32 = SESDefaultLogObject(v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v32);
    v33 = SESCreateAndLogError(0, v18, SESErrorDomain, 1, CFSTR("Nil passed to EndPointCreate"));
    v31 = (void *)objc_claimAutoreleasedReturnValue(v33);
  }

  v36 = SESDefaultLogObject(v34, v35);
  v37 = objc_claimAutoreleasedReturnValue(v36);
  if (os_signpost_enabled(v37))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v37, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "PTA_DELETE_ENDPOINT", "", buf, 2u);
  }

  return v31;
}

void sub_100042DB0(_Unwind_Exception *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  sub_100277600(v4);

  _Unwind_Resume(a1);
}

id sub_100042DEC(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  const __CFData *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  id v21;
  void *v22;
  const __CFData *v23;
  int v24;
  CFDataRef v25;
  uint64_t v26;
  NSObject *v27;
  NSMutableData *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  void *v51;
  uint64_t v52;
  id v53;
  id v54;
  CFDataRef v55;
  uint8_t buf[4];
  CFDataRef v57;
  __int16 v58;
  id v59;
  __int16 v60;
  id v61;

  v9 = a1;
  v10 = a2;
  v53 = a3;
  v11 = a4;
  v13 = SESDefaultLogObject(v11, v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412802;
    v57 = v10;
    v58 = 2112;
    v59 = v53;
    v60 = 2112;
    v61 = v11;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%@ %@ %@", buf, 0x20u);
  }

  v17 = SESDefaultLogObject(v15, v16);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_signpost_enabled(v18))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "PTA_CREATE_ENDPOINTCA", "", buf, 2u);
  }

  if (!v9 || !v10 || !v11)
  {
    if (a5)
    {
      v40 = SESDefaultLogObject(v19, v20);
      v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
      v42 = SESCreateAndLogError(0, v41, SESErrorDomain, 1, CFSTR("Nil parameter to CreateEPCA %d %d %d"));
      *a5 = (id)objc_claimAutoreleasedReturnValue(v42);

    }
    goto LABEL_19;
  }
  v55 = 0;
  v21 = sub_10005066C(v9, v20);
  v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  v23 = (const __CFData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "seid"));
  v24 = SSEGetSignedDeviceData(v23, &v55);

  if (!v24)
  {
    v25 = v55;
    if (v55)
    {
      v26 = SESDefaultLogObject(v19, v20);
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v57 = v25;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Retrieved SEPData : %@", buf, 0xCu);
      }

      v28 = objc_opt_new(NSMutableData);
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "asAsciiData"));
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 24352, v29));
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "asData"));
      -[NSMutableData appendData:](v28, "appendData:", v31);

      v32 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 32560, v25));
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "asData"));
      -[NSMutableData appendData:](v28, "appendData:", v33);

      v54 = 0;
      v34 = sub_1000423DC(v9, v10, 0, 56, 0, 0, v28, &v54);
      v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
      v36 = v54;
      v38 = v36;
      if (v36 || !v35)
      {
        if (a5)
        {
          v45 = SESDefaultLogObject(v36, v37);
          v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
          v52 = SESErrorDomain;
          v51 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableData asHexString](v28, "asHexString"));
          v47 = SESCreateAndLogError(v38, v46, v52, 0, CFSTR("While creating CA %@ with payload %@"));
          *a5 = (id)objc_claimAutoreleasedReturnValue(v47);

        }
        v39 = 0;
      }
      else
      {
        v39 = (void *)objc_claimAutoreleasedReturnValue(+[SEEndPointCA endPointCAWithIdentifier:subjectIdentifier:instanceAID:secureElementAttestation:error:](SEEndPointCA, "endPointCAWithIdentifier:subjectIdentifier:instanceAID:secureElementAttestation:error:", v53, v11, v10, v35, a5));
      }

      goto LABEL_24;
    }
  }
  if (!a5)
  {
LABEL_19:
    v39 = 0;
    goto LABEL_25;
  }
  v43 = SESDefaultLogObject(v19, v20);
  v25 = (CFDataRef)objc_claimAutoreleasedReturnValue(v43);
  v44 = SESCreateAndLogError(0, v25, SESErrorDomain, 1, CFSTR("SSEGetSignedDeviceData %d"));
  v39 = 0;
  *a5 = (id)objc_claimAutoreleasedReturnValue(v44);
LABEL_24:

LABEL_25:
  v48 = SESDefaultLogObject(v19, v20);
  v49 = objc_claimAutoreleasedReturnValue(v48);
  if (os_signpost_enabled(v49))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v49, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "PTA_CREATE_ENDPOINTCA", "", buf, 2u);
  }

  return v39;
}

void sub_10004328C(_Unwind_Exception *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  sub_100277640(v4);

  _Unwind_Resume(a1);
}

id sub_1000432D0(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  id v35;
  uint8_t buf[4];
  id v37;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v9 = SESDefaultLogObject(v7, v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v37 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
  }

  v13 = SESDefaultLogObject(v11, v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_signpost_enabled(v14))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "PTA_DELETE_ENDPOINTCA", "", buf, 2u);
  }

  v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "asAsciiData"));
  v17 = (void *)v15;
  if (v5 && v6 && v15)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 24352, v15));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "asData"));
    v35 = 0;
    v20 = sub_1000423DC(v5, v6, 0, 58, 0, 0, v19, &v35);
    v21 = v35;

    if (v21)
    {
      v24 = SESDefaultLogObject(v22, v23);
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      v26 = SESCreateAndLogError(0, v25, SESErrorDomain, 0, CFSTR("While deleting endPointCA %@"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);

    }
    else
    {
      v27 = 0;
    }
  }
  else
  {
    v28 = SESDefaultLogObject(v15, v16);
    v21 = (id)objc_claimAutoreleasedReturnValue(v28);
    v29 = SESCreateAndLogError(0, v21, SESErrorDomain, 1, CFSTR("nil or invalid passed to DeleteEndPointCA"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(v29);
  }

  v32 = SESDefaultLogObject(v30, v31);
  v33 = objc_claimAutoreleasedReturnValue(v32);
  if (os_signpost_enabled(v33))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "PTA_DELETE_ENDPOINTCA", "", buf, 2u);
  }

  return v27;
}

void sub_100043574(_Unwind_Exception *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  sub_100277680(v4);

  _Unwind_Resume(a1);
}

NSMutableData *sub_1000435AC(void *a1, void *a2, void *a3, int a4, int a5, NSMutableData *a6)
{
  uint64_t v7;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  void *v28;
  void *v29;
  NSMutableData *v30;
  __int16 v31;
  char v32;
  id v33;
  id *v34;
  id v35;
  uint64_t v36;
  id *v38;
  void *v39;
  id *v40;
  id *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v47;
  id v48;
  uint8_t buf[16];

  LODWORD(v7) = a5;
  v11 = a1;
  v12 = a2;
  v13 = a3;
  v15 = v13;
  if (v11 && v12 && v13)
  {
    v16 = sub_10004FBA0(v11, v12);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (v17)
    {
      v19 = (void *)v17;
      if (a6)
      {
        v20 = SESDefaultLogObject(v17, v18);
        v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
        v22 = SESCreateAndLogError(v19, v21, SESErrorDomain, 0, CFSTR("While getting private endpoint data"));
        a6->super.super.isa = (Class)(id)objc_claimAutoreleasedReturnValue(v22);

        a6 = 0;
      }
    }
    else
    {
      v26 = SESDefaultLogObject(0, v18);
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "", buf, 2u);
      }

      v47 = v15;
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 80, v15));
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "asData"));

      v30 = objc_opt_new(NSMutableData);
      if ((_DWORD)v7)
      {
        while (1)
        {
          v31 = v7;
          v32 = (unsigned __int16)v7 >= 0xFAu ? -6 : v7;
          v48 = 0;
          v33 = sub_10004F8D8(v11, 128, 120, SBYTE1(a4), a4, v29, v32, &v48);
          v34 = (id *)objc_claimAutoreleasedReturnValue(v33);
          v35 = v48;
          if (v35 || v34 == 0)
            break;
          v38 = sub_10005582C(v34);
          v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
          -[NSMutableData appendData:](v30, "appendData:", v39);

          v40 = sub_10005582C(v34);
          v7 = objc_claimAutoreleasedReturnValue(v40);
          a4 += objc_msgSend((id)v7, "length");

          v41 = sub_10005582C(v34);
          v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
          LOWORD(v7) = v31 - (unsigned __int16)objc_msgSend(v42, "length");

          if (!(_WORD)v7)
            goto LABEL_20;
        }
        v19 = v35;
        if (a6)
        {
          v43 = SESDefaultLogObject(v35, v36);
          v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
          v45 = SESCreateAndLogError(v19, v44, SESErrorDomain, 0, CFSTR("While reading private data at offset %u/%u"));
          a6->super.super.isa = (Class)(id)objc_claimAutoreleasedReturnValue(v45);

        }
        a6 = 0;
      }
      else
      {
LABEL_20:
        a6 = v30;
        v19 = 0;
      }
      v15 = v47;

    }
  }
  else if (a6)
  {
    v23 = SESDefaultLogObject(v13, v14);
    v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    v25 = SESCreateAndLogError(0, v24, SESErrorDomain, 1, CFSTR("Nil input to EndPointGetPrivateData"));
    a6->super.super.isa = (Class)(id)objc_claimAutoreleasedReturnValue(v25);

    a6 = 0;
  }

  return a6;
}

id sub_1000438A0(void *a1, void *a2, void *a3, void *a4, __int16 a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  uint8_t buf[4];
  void *v49;
  __int16 v50;
  unsigned int v51;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v14 = SESDefaultLogObject(v12, v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "asHexString"));
    *(_DWORD *)buf = 138412546;
    v49 = v16;
    v50 = 1024;
    v51 = objc_msgSend(v12, "length");
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%@ --> %u bytes", buf, 0x12u);

  }
  if (v9 && v10 && v11 && v12)
  {
    v19 = sub_10004FBA0(v9, v10);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    v22 = (void *)v20;
    if (v20)
    {
      v23 = SESDefaultLogObject(v20, v21);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      v25 = SESCreateAndLogError(0, v24, SESErrorDomain, 0, CFSTR("While setting private data"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    }
    else
    {
      if (!objc_msgSend(v12, "length"))
      {
        v26 = 0;
        goto LABEL_11;
      }
      v46 = v10;
      v30 = 0;
      while (1)
      {
        v31 = objc_msgSend(v12, "length");
        v32 = (unint64_t)(v31 - v30) >= 0xDB ? 219 : v31 - v30;
        v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", 256));
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 80, v11));
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "asData"));
        objc_msgSend(v24, "appendData:", v34);

        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "subdataWithRange:", v30, v32));
        v36 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 75, v35));
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "asData"));
        objc_msgSend(v24, "appendData:", v37);

        v47 = 0;
        v38 = sub_10004F8D8(v9, 128, 122, SHIBYTE(a5), a5, v24, 0, &v47);
        v39 = v47;
        if (v39)
          break;
        v30 += v32;
        a5 += v32;

        if (v30 == objc_msgSend(v12, "length"))
        {
          v26 = 0;
          v22 = 0;
          v10 = v46;
          goto LABEL_11;
        }
      }
      v41 = v39;
      v42 = SESDefaultLogObject(v39, v40);
      v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
      v44 = SESErrorDomain;
      objc_msgSend(v12, "length");
      v45 = SESCreateAndLogError(0, v43, v44, 0, CFSTR("While writing at position %lu/%u"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(v45);

      v22 = 0;
      v10 = v46;
    }

  }
  else
  {
    v27 = SESDefaultLogObject(v17, v18);
    v22 = (void *)objc_claimAutoreleasedReturnValue(v27);
    v28 = SESCreateAndLogError(0, v22, SESErrorDomain, 1, CFSTR("Nil input to EndPointSetPrivateData"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(v28);
  }
LABEL_11:

  return v26;
}

id sub_100043C0C(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  id v68;
  void *v69;
  id v70;
  id v71;
  void *v72;
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v82;
  void *v83;
  id v84;
  id v85;
  id v86;
  void *v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  _BYTE buf[12];

  v85 = a1;
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v23 = a5;
  v24 = a6;
  v89 = a7;
  v88 = a8;
  v91 = a9;
  v90 = a10;
  v92 = a11;
  v25 = a12;
  v86 = a13;
  v27 = SESDefaultLogObject(v86, v26);
  v28 = objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "asHexString"));
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v29;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Configure Endpoint %@", buf, 0xCu);

  }
  v87 = v25;
  if (!v85 || !v20 || !v21)
  {
    v48 = SESDefaultLogObject(v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue(v48);
    v49 = SESCreateAndLogError(0, v32, SESErrorDomain, 1, CFSTR("Nil input to EndPointConfigure"));
    v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
    v34 = v22;
LABEL_30:
    v65 = v88;
    v64 = v89;
    goto LABEL_40;
  }
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 8));
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 80, v21));
  objc_msgSend(v32, "addObject:", v33);

  v34 = v22;
  if (v23)
  {
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 74, v23));
    objc_msgSend(v32, "addObject:", v35);

  }
  if (v22)
  {
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 75, v22));
    objc_msgSend(v32, "addObject:", v36);

  }
  if (v89)
  {
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 131, objc_msgSend(v89, "BOOLValue")));
    objc_msgSend(v32, "addObject:", v37);

  }
  if (v24)
  {
    v38 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 130, objc_msgSend(v24, "BOOLValue")));
    objc_msgSend(v32, "addObject:", v38);

  }
  if (v91)
  {
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 156, objc_msgSend(v91, "BOOLValue")));
    objc_msgSend(v32, "addObject:", v39);

  }
  if (v88)
  {
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 155, objc_msgSend(v88, "BOOLValue")));
    objc_msgSend(v32, "addObject:", v40);

  }
  if (v90)
  {
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 78, v90));
    objc_msgSend(v32, "addObject:", v41);

  }
  v84 = v24;
  if (v92)
  {
    *(_QWORD *)buf = 0;
    v42 = sub_1000423DC(v85, v20, 0, 118, 202, 0, v21, buf);
    v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
    v44 = *(id *)buf;
    v45 = v44;
    v46 = v23;
    if (v44)
    {
      v47 = objc_retainAutorelease(v44);
    }
    else
    {
      v51 = objc_msgSend(v43, "length");
      if (v51 == (id)1)
      {
        v47 = 0;
        v53 = *(_BYTE *)objc_msgSend(objc_retainAutorelease(v43), "bytes") & 0xFE;
LABEL_28:

        v58 = v47;
        if (v58)
        {
          v60 = v58;
          v61 = SESDefaultLogObject(v58, v59);
          v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
          v63 = SESCreateAndLogError(0, v62, SESErrorDomain, 0, CFSTR("While retrieving Option Group A"));
          v50 = (void *)objc_claimAutoreleasedReturnValue(v63);

          v23 = v46;
          v24 = v84;
          goto LABEL_30;
        }
        v66 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 202, (v53 | objc_msgSend(v92, "BOOLValue"))));
        objc_msgSend(v32, "addObject:", v66);

        v23 = v46;
        goto LABEL_32;
      }
      v54 = SESDefaultLogObject(v51, v52);
      v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
      v56 = SESErrorDomain;
      v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "asHexString"));
      v57 = SESCreateAndLogError(0, v55, v56, 0, CFSTR("Unexpected response %@"));
      v47 = (id)objc_claimAutoreleasedReturnValue(v57);

    }
    v53 = 0;
    goto LABEL_28;
  }
LABEL_32:
  if (v87)
  {
    v67 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 154, objc_msgSend(v87, "unsignedCharValue")));
    objc_msgSend(v32, "addObject:", v67);

  }
  v68 = v23;
  if (v86)
  {
    v69 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedShort:](SESTLV, "TLVWithTag:unsignedShort:", 94, bswap32(objc_msgSend(v86, "shortValue")) >> 16));
    objc_msgSend(v32, "addObject:", v69);

  }
  v70 = v85;
  v71 = v20;
  v72 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV dataWithTLVs:](SESTLV, "dataWithTLVs:", v32));
  *(_QWORD *)buf = 0;
  v73 = sub_1000423DC(v70, v71, 0, 126, 0, 0, v72, buf);
  v74 = *(id *)buf;

  if (v74)
  {
    v77 = SESDefaultLogObject(v75, v76);
    v78 = (void *)objc_claimAutoreleasedReturnValue(v77);
    v79 = SESErrorDomain;
    v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "asHexString"));
    v80 = SESCreateAndLogError(0, v78, v79, 0, CFSTR("While writing config to %@"));
    v50 = (void *)objc_claimAutoreleasedReturnValue(v80);

  }
  else
  {
    v50 = 0;
  }
  v23 = v68;
  v65 = v88;
  v64 = v89;

  v24 = v84;
LABEL_40:

  return v50;
}

id sub_1000442D8(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  void *v24;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v11 = SESDefaultLogObject(v9, v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "asHexString"));
    v23 = 138412290;
    v24 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%@", (uint8_t *)&v23, 0xCu);

  }
  if (v7 && v8 && v9)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 80, v9));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "asData"));
    v18 = sub_1000423DC(v7, v8, 0, 138, 0, 0, v17, a4);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

  }
  else
  {
    if (!a4)
    {
      v19 = 0;
      goto LABEL_10;
    }
    v20 = SESDefaultLogObject(v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v20);
    v21 = SESCreateAndLogError(0, v16, SESErrorDomain, 1, CFSTR("Nil input to EndPointConfigure"));
    v19 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue(v21);
  }

LABEL_10:
  return v19;
}

id sub_10004448C(void *a1, void *a2, void *a3, void *a4, void *a5, __int16 a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  const __CFString *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v48;
  id v49;
  uint8_t buf[4];
  void *v51;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v17 = SESDefaultLogObject(v15, v16);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "asHexString"));
    *(_DWORD *)buf = 138412290;
    v51 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);

  }
  if (!v11 || !v12 || !v13 || !v14 || !v15)
  {
    v40 = SESDefaultLogObject(v20, v21);
    v24 = (void *)objc_claimAutoreleasedReturnValue(v40);
    v41 = SESErrorDomain;
    v42 = CFSTR("Nil input to EndPointSetConfidentialData");
    v43 = v24;
LABEL_13:
    v46 = SESCreateAndLogError(0, v43, v41, 1, v42);
    v39 = (void *)objc_claimAutoreleasedReturnValue(v46);
    goto LABEL_16;
  }
  v22 = objc_msgSend(v14, "length");
  if (v22 != (id)65)
  {
    v44 = SESDefaultLogObject(v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue(v44);
    v45 = SESErrorDomain;
    objc_msgSend(v14, "length");
    v42 = CFSTR("Sender ePK is wrong length 0x%x");
    v43 = v24;
    v41 = v45;
    goto LABEL_13;
  }
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 151, v14));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "asData"));
  objc_msgSend(v24, "appendData:", v26);

  v27 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 74, v15));
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "asData"));
  objc_msgSend(v24, "appendData:", v28);

  v29 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 80, v13));
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "asData"));
  v49 = 0;
  v31 = sub_1000423DC(v11, v12, v24, 124, SHIBYTE(a6), a6, v30, &v49);
  v32 = v49;

  if (v32)
  {
    v35 = SESDefaultLogObject(v33, v34);
    v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    v37 = SESErrorDomain;
    v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "asHexString"));
    v38 = SESCreateAndLogError(0, v36, v37, 0, CFSTR("While writing to confidential mailbox of %@"));
    v39 = (void *)objc_claimAutoreleasedReturnValue(v38);

  }
  else
  {
    v39 = 0;
  }

LABEL_16:
  return v39;
}

id sub_1000447AC(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v26;
  uint8_t buf[4];
  void *v28;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v12 = SESDefaultLogObject(v10, v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "asHexString"));
    *(_DWORD *)buf = 138412290;
    v28 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);

  }
  if (v7 && v8 && v9 && v10)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 32555, v10));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "asData"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 80, v9));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "asData"));
    v26 = 0;
    v21 = sub_1000423DC(v7, v8, v18, 50, 1, 0, v20, &v26);
    v22 = v26;

  }
  else
  {
    v23 = SESDefaultLogObject(v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v23);
    v24 = SESCreateAndLogError(0, v17, SESErrorDomain, 1, CFSTR("Nil input to pta_EndpointPreAuthorize"));
    v22 = (id)objc_claimAutoreleasedReturnValue(v24);
  }

  return v22;
}

id sub_1000449A0(void *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, char a10, char a11, __int16 a12, void *a13, void *a14, _QWORD *a15)
{
  id v21;
  id v22;
  id v23;
  id v24;
  const __CFData *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  id v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  const __CFString *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  SecCertificateRef v56;
  uint64_t v57;
  SecCertificateRef v58;
  const void *v59;
  SecKeyRef v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSMutableArray *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  id v72;
  NSMutableArray *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  char v79;
  void *v80;
  void *v81;
  id v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  _QWORD *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  const __CFString *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  NSMutableArray *v106;
  uint64_t v107;
  void *v108;
  void *v109;
  id v110;
  id v111;
  void *i;
  void *v113;
  id v114;
  uint64_t v115;
  id v116;
  id v117;
  void *v118;
  void *v119;
  id v120;
  id v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  uint64_t v135;
  void *v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v144;
  void *v145;
  void *v146;
  NSMutableArray *v147;
  NSMutableArray *v148;
  void *v149;
  void *v150;
  id v151;
  void *v152;
  void *v153;
  uint64_t v154;
  NSMutableArray *v155;
  void *v156;
  void *v157;
  uint64_t v158;
  id v159;
  void *v160;
  void *v162;
  id v163;
  id v164;
  void *v165;
  id v166;
  id v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  id v172;
  _BYTE v173[4];
  char v174;
  id v175;
  _BYTE v176[128];
  _BYTE buf[12];
  __int16 v178;
  id v179;
  __int16 v180;
  _BOOL4 v181;

  v21 = a1;
  v22 = a3;
  v23 = a4;
  v163 = a5;
  v24 = a6;
  v25 = a7;
  v164 = a8;
  v167 = a9;
  v166 = a13;
  v26 = a14;
  v28 = SESDefaultLogObject(v26, v27);
  v29 = objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    v30 = v24;
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "asHexString"));
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v31;
    v178 = 2112;
    v179 = v26;
    v180 = 1024;
    v181 = v167 != 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "%@ %@ - have BA %d", buf, 0x1Cu);

    v24 = v30;
  }
  v165 = v26;

  v34 = v21;
  if (!v21 || !v22 || !v23 || !v25)
  {
    v35 = v163;
    if (a15)
    {
      v49 = SESDefaultLogObject(v32, v33);
      v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
      v51 = SESCreateAndLogError(0, v50, SESErrorDomain, 1, CFSTR("Nil input to EndPointAuthorize"));
      *a15 = (id)objc_claimAutoreleasedReturnValue(v51);

    }
    goto LABEL_18;
  }
  v35 = v163;
  if (a2 >= 2)
  {
    v175 = 0;
    v36 = sub_100042234(v21, v22, &v175);
    v37 = v175;
    v39 = v37;
    if (v37)
    {
      v40 = a15;
      if (a15)
      {
        v41 = v24;
        v42 = SESDefaultLogObject(v37, v38);
        v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
        v44 = SESErrorDomain;
        v45 = CFSTR("Failed to retrieve applet version");
        v46 = v39;
        v47 = v43;
        v48 = 0;
LABEL_16:
        v53 = SESCreateAndLogError(v46, v47, v44, v48, v45);
        *v40 = (id)objc_claimAutoreleasedReturnValue(v53);

        v24 = v41;
        goto LABEL_17;
      }
      goto LABEL_17;
    }
    if (v36 <= 3)
    {
      v40 = a15;
      if (a15)
      {
        v41 = v24;
        v52 = SESDefaultLogObject(0, v38);
        v43 = (void *)objc_claimAutoreleasedReturnValue(v52);
        v44 = SESErrorDomain;
        v45 = CFSTR("Unsupported version %d on applet %lu");
        v46 = 0;
        v47 = v43;
        v48 = 1;
        goto LABEL_16;
      }
LABEL_17:

LABEL_18:
      v54 = 0;
      v55 = v164;
      goto LABEL_91;
    }
  }
  v56 = SecCertificateCreateWithData(0, v25);
  if (!v56)
  {
    v55 = v164;
    v92 = a15;
    if (!a15)
      goto LABEL_48;
    v93 = SESDefaultLogObject(0, v57);
    v94 = (void *)objc_claimAutoreleasedReturnValue(v93);
    v95 = SESErrorDomain;
    v96 = CFSTR("Couldn't SecCertificateCreateWithData?");
LABEL_47:
    v100 = SESCreateAndLogError(0, v94, v95, 1, v96);
    *v92 = (id)objc_claimAutoreleasedReturnValue(v100);

    goto LABEL_48;
  }
  v58 = v56;
  v174 = 0;
  v59 = (const void *)SecCertificateCopyExtensionValue(v56, CFSTR("1.3.6.1.4.1.41577.5.4"), &v174);
  v55 = v164;
  if (!v59)
  {
    CFRelease(v58);
    v92 = a15;
    if (!a15)
      goto LABEL_48;
    v99 = SESDefaultLogObject(v97, v98);
    v94 = (void *)objc_claimAutoreleasedReturnValue(v99);
    v95 = SESErrorDomain;
    v96 = CFSTR("Expecting endPoint certificate with OID '1.3.6.1.4.1.41577.5.4'");
    goto LABEL_47;
  }
  v151 = v24;
  CFRelease(v59);
  v60 = SecCertificateCopyKey(v58);
  CFRelease(v58);
  if (v60)
  {
    *(_QWORD *)buf = 0;
    SecKeyCopyPublicBytes(v60, buf);
    CFRelease(v60);
    v156 = *(void **)buf;
    if (*(_QWORD *)buf)
    {
      v65 = objc_opt_new(NSMutableArray);
      if (v163)
      {
        v66 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 32544, v163));
        -[NSMutableArray addObject:](v65, "addObject:", v66);

      }
      if (v151)
      {
        v67 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 32546, v151));
        -[NSMutableArray addObject:](v65, "addObject:", v67);

      }
      v68 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 32548, v25));
      -[NSMutableArray addObject:](v65, "addObject:", v68);

      if (v167)
      {
        v69 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 32554));
        -[NSMutableArray addObject:](v65, "addObject:", v69);

      }
      v148 = v65;
      v70 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:children:](SESTLV, "TLVWithTag:children:", 0, v65));
      v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "value"));
      v72 = objc_msgSend(v71, "mutableCopy");

      if (v164)
        objc_msgSend(v72, "appendData:", v164);
      v73 = objc_opt_new(NSMutableArray);
      v74 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 80, v23));
      -[NSMutableArray addObject:](v73, "addObject:", v74);

      if (a12)
      {
        v173[0] = a11;
        v173[1] = a10;
        v173[2] = HIBYTE(a12);
        v173[3] = a12;
        v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v173, 4));
        v76 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 74, v75));
        -[NSMutableArray addObject:](v73, "addObject:", v76);

      }
      if (v166)
      {
        v77 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 88));
        -[NSMutableArray addObject:](v73, "addObject:", v77);

      }
      v150 = v72;
      if (v165)
      {
        v78 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 89));
        -[NSMutableArray addObject:](v73, "addObject:", v78);

      }
      if (a2 <= 1)
        v79 = 0;
      else
        v79 = a2;
      v147 = v73;
      v80 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:children:](SESTLV, "TLVWithTag:children:", 0, v73));
      v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "value"));
      v172 = 0;
      v82 = sub_1000423DC(v34, v22, v72, 50, 0, v79, v81, &v172);
      v83 = objc_claimAutoreleasedReturnValue(v82);
      v84 = v172;

      v149 = v84;
      v146 = (void *)v83;
      if (v84)
      {
        if (!a15)
        {
          v54 = 0;
          v24 = v151;
          v55 = v164;
LABEL_90:

          goto LABEL_91;
        }
        v87 = SESDefaultLogObject(v85, v86);
        v88 = (void *)objc_claimAutoreleasedReturnValue(v87);
        v89 = SESErrorDomain;
        v144 = objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "asHexString"));
        v90 = SESCreateAndLogError(v84, v88, v89, 0, CFSTR("While authorizing on endpointPublicKeyId %@"));
        v54 = 0;
        *a15 = (id)objc_claimAutoreleasedReturnValue(v90);
        v91 = (id)v144;
        v24 = v151;
        v55 = v164;
LABEL_89:

        goto LABEL_90;
      }
      v106 = objc_opt_new(NSMutableArray);
      if (a2 < 2)
        v107 = 1;
      else
        v107 = a2;
      v108 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 65, v107));
      v155 = v106;
      -[NSMutableArray addObject:](v106, "addObject:", v108);

      v170 = 0u;
      v171 = 0u;
      v168 = 0u;
      v169 = 0u;
      v109 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVsWithData:](SESTLV, "TLVsWithData:", v83));
      v159 = objc_msgSend(v109, "countByEnumeratingWithState:objects:count:", &v168, v176, 16);
      if (v159)
      {
        v110 = 0;
        v91 = 0;
        v111 = 0;
        v158 = *(_QWORD *)v169;
        v152 = v109;
        while (2)
        {
          for (i = 0; i != v159; i = (char *)i + 1)
          {
            if (*(_QWORD *)v169 != v158)
              objc_enumerationMutation(v109);
            v113 = *(void **)(*((_QWORD *)&v168 + 1) + 8 * (_QWORD)i);
            v114 = objc_msgSend(v113, "tag");
            if ((int)v114 > 150)
            {
              if ((_DWORD)v114 == 151)
              {
                v122 = v113;
                v118 = v111;
                v111 = v122;
              }
              else
              {
                if ((_DWORD)v114 != 158)
                {
LABEL_81:
                  v160 = v110;
                  if (a15)
                  {
                    v135 = SESDefaultLogObject(v114, v115);
                    v136 = (void *)objc_claimAutoreleasedReturnValue(v135);
                    v137 = v91;
                    v138 = SESErrorDomain;
                    objc_msgSend(v113, "tag");
                    v139 = v138;
                    v91 = v137;
                    v140 = SESCreateAndLogError(0, v136, v139, 0, CFSTR("Unknown TLV %02X in response to authorize"));
                    *a15 = (id)objc_claimAutoreleasedReturnValue(v140);

                  }
                  v54 = 0;
                  v35 = v163;
                  v55 = v164;
                  v24 = v151;
                  v134 = v152;
                  goto LABEL_87;
                }
                v120 = v113;
                v118 = v110;
                v110 = v120;
              }
            }
            else if ((_DWORD)v114 == 74)
            {
              v121 = v113;
              v118 = v91;
              v91 = v121;
            }
            else
            {
              if ((_DWORD)v114 != 146)
                goto LABEL_81;
              -[NSMutableArray addObject:](v155, "addObject:", v113);
              v116 = v110;
              v117 = v91;
              v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithData:](NSData, "dataWithData:", v156));
              v119 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 90, v118));
              -[NSMutableArray addObject:](v155, "addObject:", v119);

              v91 = v117;
              v110 = v116;
              v109 = v152;
            }

          }
          v159 = objc_msgSend(v109, "countByEnumeratingWithState:objects:count:", &v168, v176, 16);
          if (v159)
            continue;
          break;
        }

        v55 = v164;
        v145 = v91;
        if (!v110)
        {
          v35 = v163;
          goto LABEL_85;
        }
        v160 = v110;
        v35 = v163;
        if (v166)
        {
          if (a2 >= 2)
            v125 = 120;
          else
            v125 = 88;
          v126 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", v125));
          -[NSMutableArray addObject:](v155, "addObject:", v126);

        }
        v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("91712C44"), "hexStringAsData"));
        v128 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 147, v127));
        -[NSMutableArray addObject:](v155, "addObject:", v128);

        v129 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
        v130 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:children:](SESTLV, "TLVWithTag:children:", 32549, v155));
        v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v130, "asData"));
        v153 = v129;
        objc_msgSend(v129, "appendData:", v131);

        v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v160, "asData"));
        objc_msgSend(v129, "appendData:", v132);

        v162 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v111, "value"));
        v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "value"));
        v54 = (void *)objc_claimAutoreleasedReturnValue(+[SEEndPointAuthorizeResponse responseWithEndPointAttestationData:encryptionPublicKeyData:encryptedData:](SEEndPointAuthorizeResponse, "responseWithEndPointAttestationData:encryptionPublicKeyData:encryptedData:", v153, v162, v133));

        v134 = v153;
        v91 = v145;
        v24 = v151;
      }
      else
      {

        v111 = 0;
        v145 = 0;
        v55 = v164;
LABEL_85:
        v24 = v151;
        if (!a15)
        {
          v160 = 0;
          v54 = 0;
          v91 = v145;
          goto LABEL_88;
        }
        v141 = SESDefaultLogObject(v123, v124);
        v154 = objc_claimAutoreleasedReturnValue(v141);
        v142 = SESCreateAndLogError(0, v154, SESErrorDomain, 0, CFSTR("Expecting signature in response of authorize"));
        v160 = 0;
        v54 = 0;
        *a15 = (id)objc_claimAutoreleasedReturnValue(v142);
        v134 = (void *)v154;
        v91 = v145;
      }
LABEL_87:

LABEL_88:
      v88 = v160;
      goto LABEL_89;
    }
    v24 = v151;
    if (a15)
    {
      v104 = SESDefaultLogObject(v63, v64);
      v157 = (void *)objc_claimAutoreleasedReturnValue(v104);
      v105 = SESCreateAndLogError(0, v157, SESErrorDomain, 1, CFSTR("Could not retrieve receiver endPoint publicKey from certificate"));
      v54 = 0;
      *a15 = (id)objc_claimAutoreleasedReturnValue(v105);

      goto LABEL_91;
    }
LABEL_48:
    v54 = 0;
    goto LABEL_91;
  }
  if (a15)
  {
    v101 = SESDefaultLogObject(v61, v62);
    v102 = (void *)objc_claimAutoreleasedReturnValue(v101);
    v103 = SESCreateAndLogError(0, v102, SESErrorDomain, 1, CFSTR("Could not retrieve endPoint public key from certificate"));
    *a15 = (id)objc_claimAutoreleasedReturnValue(v103);

  }
  v54 = 0;
  v24 = v151;
LABEL_91:

  return v54;
}

id sub_100045614(void *a1, void *a2, void *a3, void *a4, void *a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  NSMutableData *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  const __CFString *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  id v67;
  id *v68;
  id v69;
  uint64_t v70;
  id *v71;
  void *v72;
  void *v73;
  NSMutableArray *v74;
  id v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  NSMutableData *v87;
  NSMutableArray *v88;
  id v89;
  id v90;
  uint64_t v91;
  void *i;
  void *v93;
  __CFString *v94;
  __CFString *v95;
  void *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v107;
  id v108;
  void *v109;
  id v110;
  id v111;
  NSMutableData *v112;
  NSMutableData *v113;
  id v114;
  void *v115;
  void *v116;
  void *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  id v126;
  id v127;
  __int16 v128;
  BOOL v129;
  char v130;
  _BYTE v131[128];
  uint8_t v132[128];
  __int128 buf;
  id v134;
  uint64_t v135;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v17 = SESDefaultLogObject(v15, v16);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "asHexString"));
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%@", (uint8_t *)&buf, 0xCu);

  }
  if (v11 && v12 && v13 && v14)
  {
    v22 = objc_msgSend(v14, "length");
    if (v22 == (id)32)
    {
      v24 = objc_opt_new(NSMutableData);
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 80, v13));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "asData"));
      -[NSMutableData appendData:](v24, "appendData:", v26);

      v27 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 88, v14));
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "asData"));
      -[NSMutableData appendData:](v24, "appendData:", v28);

      v128 = 12416;
      v129 = v15 == 0;
      v130 = 0;
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithBytes:length:](NSMutableData, "dataWithBytes:length:", &v128, 4));
      objc_msgSend(v29, "appendU8:", -[NSMutableData length](v24, "length"));
      objc_msgSend(v29, "appendData:", v24);
      v114 = v15;
      v115 = v29;
      if (!v15)
      {
        v41 = 0;
LABEL_30:
        v58 = v41;
        objc_msgSend(v29, "appendU8:", 0);
        v59 = sub_10004FBA0(v11, v12);
        v41 = (id)objc_claimAutoreleasedReturnValue(v59);

        if (v41)
        {
          if (a6)
          {
            v62 = SESDefaultLogObject(v60, v61);
            v63 = objc_claimAutoreleasedReturnValue(v62);
            v64 = SESErrorDomain;
            v108 = v13;
            v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "asHexString"));
            v109 = (void *)v63;
            v66 = SESCreateAndLogError(v41, v63, v64, 0, CFSTR("While signing on %@"));
            v52 = 0;
            *a6 = (id)objc_claimAutoreleasedReturnValue(v66);
            v15 = v114;
            goto LABEL_74;
          }
          v52 = 0;
          v15 = v114;
          goto LABEL_76;
        }
        v126 = 0;
        v67 = sub_10004F6A8(v11, v29, &v126);
        v68 = (id *)objc_claimAutoreleasedReturnValue(v67);
        v69 = v126;
        v41 = v69;
        v109 = v68;
        if (!v68 || v69)
        {
          v15 = v114;
          if (a6)
          {
            v108 = v13;
            v98 = SESDefaultLogObject(v69, v70);
            v65 = (void *)objc_claimAutoreleasedReturnValue(v98);
            v99 = SESCreateAndLogError(v41, v65, SESErrorDomain, 0, CFSTR("Failed to sign"));
            v52 = 0;
            *a6 = (id)objc_claimAutoreleasedReturnValue(v99);
            goto LABEL_74;
          }
          v52 = 0;
LABEL_75:

          goto LABEL_76;
        }
        v108 = v13;
        v113 = v24;
        v71 = sub_10005582C(v68);
        v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
        v73 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVsWithData:](SESTLV, "TLVsWithData:", v72));

        v74 = objc_opt_new(NSMutableArray);
        v122 = 0u;
        v123 = 0u;
        v124 = 0u;
        v125 = 0u;
        v75 = v73;
        v76 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v122, v132, 16);
        if (!v76)
        {
          v65 = v75;

          goto LABEL_70;
        }
        v77 = v76;
        v65 = v75;
        v111 = v12;
        v117 = 0;
        v78 = *(_QWORD *)v123;
LABEL_37:
        v79 = 0;
        while (1)
        {
          if (*(_QWORD *)v123 != v78)
            objc_enumerationMutation(v65);
          v80 = *(void **)(*((_QWORD *)&v122 + 1) + 8 * v79);
          v81 = objc_msgSend(v80, "tag");
          if ((int)v81 <= 92)
          {
            if ((_DWORD)v81 != 65 && (_DWORD)v81 != 87)
            {
LABEL_66:
              if (a6)
              {
                v100 = SESDefaultLogObject(v81, v82);
                v101 = (void *)objc_claimAutoreleasedReturnValue(v100);
                v102 = SESErrorDomain;
                objc_msgSend(v80, "tag");
                v103 = SESCreateAndLogError(0, v101, v102, 0, CFSTR("SIGN returned unexpected tag 0x%X"));
                *a6 = (id)objc_claimAutoreleasedReturnValue(v103);

              }
              v52 = 0;
              v12 = v111;
              v15 = v114;
              v97 = v117;
              goto LABEL_72;
            }
          }
          else
          {
            if ((_DWORD)v81 == 93)
            {
              -[NSMutableArray addObject:](v74, "addObject:", v80);
              v84 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 88, v14));
              -[NSMutableArray addObject:](v74, "addObject:", v84);

              goto LABEL_49;
            }
            if ((_DWORD)v81 != 146)
            {
              if ((_DWORD)v81 != 158)
                goto LABEL_66;
              v83 = objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "value"));

              v117 = (void *)v83;
              goto LABEL_49;
            }
          }
          -[NSMutableArray addObject:](v74, "addObject:", v80);
LABEL_49:
          if (v77 == (id)++v79)
          {
            v77 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v122, v132, 16);
            if (v77)
              goto LABEL_37;

            v12 = v111;
            if (v117)
            {
              v107 = v11;
              v87 = objc_opt_new(NSMutableData);
              v118 = 0u;
              v119 = 0u;
              v120 = 0u;
              v121 = 0u;
              v88 = v74;
              v89 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v88, "countByEnumeratingWithState:objects:count:", &v118, v131, 16);
              if (v89)
              {
                v90 = v89;
                v91 = *(_QWORD *)v119;
                do
                {
                  for (i = 0; i != v90; i = (char *)i + 1)
                  {
                    if (*(_QWORD *)v119 != v91)
                      objc_enumerationMutation(v88);
                    v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v118 + 1)
                                                                                       + 8 * (_QWORD)i), "asData"));
                    -[NSMutableData appendData:](v87, "appendData:", v93);

                  }
                  v90 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v88, "countByEnumeratingWithState:objects:count:", &v118, v131, 16);
                }
                while (v90);
              }

              v94 = CFSTR("9304D074DA4F");
              v15 = v114;
              if (!v114)
                v94 = CFSTR("9304FC6F4C17");
              v95 = v94;
              v96 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString hexStringAsData](v95, "hexStringAsData"));
              -[NSMutableData appendData:](v87, "appendData:", v96);

              v97 = v117;
              v52 = (void *)objc_claimAutoreleasedReturnValue(+[SEEndPointSignatureResponse responseWithSignedData:signature:](SEEndPointSignatureResponse, "responseWithSignedData:signature:", v87, v117));

              v11 = v107;
              v12 = v111;
              goto LABEL_72;
            }
LABEL_70:
            if (a6)
            {
              v104 = SESDefaultLogObject(v85, v86);
              v97 = (void *)objc_claimAutoreleasedReturnValue(v104);
              v105 = SESCreateAndLogError(0, v97, SESErrorDomain, 0, CFSTR("Could not find signature in SIGN response"));
              v52 = 0;
              *a6 = (id)objc_claimAutoreleasedReturnValue(v105);
              v15 = v114;
LABEL_72:

            }
            else
            {
              v52 = 0;
              v15 = v114;
            }

            v24 = v113;
LABEL_74:

            v13 = v108;
            goto LABEL_75;
          }
        }
      }
      v112 = v24;
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &unk_100287D20, 1));
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "sha256"));
      *(_QWORD *)&buf = objc_msgSend(v30, "DERItem");
      *((_QWORD *)&buf + 1) = v32;
      v134 = objc_msgSend(v31, "DERItem");
      v135 = v33;
      v34 = encodeSequence(&buf, 2, &unk_100287D28);
      v36 = (void *)objc_claimAutoreleasedReturnValue(v34);
      if (v36)
      {
        v116 = v30;
        v110 = v12;
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "asHexString"));
        v127 = 0;
        v38 = v11;
        v39 = sub_10005422C(v11, v37, v36, v15, &v127);
        v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
        v41 = v127;

        if (!v40 || v41)
        {
          if (a6)
          {
            v55 = SESDefaultLogObject(v42, v43);
            v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
            v57 = SESCreateAndLogError(v41, v56, SESErrorDomain, 0, CFSTR("Failed to sendOpaque"));
            *a6 = (id)objc_claimAutoreleasedReturnValue(v57);

          }
          v44 = 1;
        }
        else
        {
          v44 = 0;
        }
        v30 = v116;
      }
      else
      {
        if (!a6)
        {
          v41 = 0;
          v44 = 1;
          goto LABEL_27;
        }
        v110 = v12;
        v38 = v11;
        v53 = SESDefaultLogObject(0, v35);
        v40 = (void *)objc_claimAutoreleasedReturnValue(v53);
        v54 = SESCreateAndLogError(0, v40, SESErrorDomain, 0, CFSTR("Failed to encode opaque payload sequence"));
        v41 = 0;
        *a6 = (id)objc_claimAutoreleasedReturnValue(v54);
        v44 = 1;
      }

      v11 = v38;
      v12 = v110;
LABEL_27:

      if (v44)
      {
        v52 = 0;
        v24 = v112;
        v15 = v114;
LABEL_76:

        goto LABEL_77;
      }
      v24 = v112;
      v29 = v115;
      goto LABEL_30;
    }
    if (a6)
    {
      v49 = SESDefaultLogObject(v22, v23);
      v41 = (id)objc_claimAutoreleasedReturnValue(v49);
      v50 = SESErrorDomain;
      objc_msgSend(v14, "length");
      v47 = CFSTR("Invalid hash length %lu");
      v48 = v41;
      v46 = v50;
      goto LABEL_17;
    }
  }
  else if (a6)
  {
    v45 = SESDefaultLogObject(v20, v21);
    v41 = (id)objc_claimAutoreleasedReturnValue(v45);
    v46 = SESErrorDomain;
    v47 = CFSTR("Nil passed to EndPointCreate");
    v48 = v41;
LABEL_17:
    v51 = SESCreateAndLogError(0, v48, v46, 1, v47);
    v52 = 0;
    *a6 = (id)objc_claimAutoreleasedReturnValue(v51);
LABEL_77:

    goto LABEL_78;
  }
  v52 = 0;
LABEL_78:

  return v52;
}

id sub_100045F48(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  NSMutableData *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id *v38;
  id v39;
  uint64_t v40;
  id *v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v64;
  id *v65;
  id v66;
  _QWORD *v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  id v73;
  uint8_t v74[128];
  uint8_t buf[4];
  void *v76;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v14 = SESDefaultLogObject(v12, v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "asHexString"));
    *(_DWORD *)buf = 138412290;
    v76 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);

  }
  if (v9 && v10 && v11 && v12)
  {
    v67 = a5;
    v19 = objc_opt_new(NSMutableData);
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 80, v11));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "asData"));
    -[NSMutableData appendData:](v19, "appendData:", v21);

    v68 = v12;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 88, v12));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "asData"));
    -[NSMutableData appendData:](v19, "appendData:", v23);

    *(_DWORD *)buf = 12672;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithBytes:length:](NSMutableData, "dataWithBytes:length:", buf, 4));
    objc_msgSend(v24, "appendU8:", -[NSMutableData length](v19, "length"));
    objc_msgSend(v24, "appendData:", v19);
    objc_msgSend(v24, "appendU8:", 0);
    v25 = sub_10004FBA0(v9, v10);
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (v26)
    {
      v28 = (void *)v26;
      if (!v67)
      {
        v34 = 0;
LABEL_38:

        v12 = v68;
        goto LABEL_39;
      }
      v66 = v10;
      v29 = SESDefaultLogObject(v26, v27);
      v30 = (id *)objc_claimAutoreleasedReturnValue(v29);
      v31 = SESErrorDomain;
      v32 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "asHexString"));
      v33 = SESCreateAndLogError(v28, v30, v31, 0, CFSTR("While signing on %@"));
      v34 = 0;
      *v67 = (id)objc_claimAutoreleasedReturnValue(v33);
      goto LABEL_36;
    }
    v73 = 0;
    v37 = sub_10004F6A8(v9, v24, &v73);
    v38 = (id *)objc_claimAutoreleasedReturnValue(v37);
    v39 = v73;
    v28 = v39;
    v65 = v38;
    if (!v38 || v39)
    {
      if (!v67)
      {
        v34 = 0;
        v30 = v38;
        goto LABEL_37;
      }
      v66 = v10;
      v55 = SESDefaultLogObject(v39, v40);
      v32 = (id)objc_claimAutoreleasedReturnValue(v55);
      v56 = SESCreateAndLogError(v28, v32, SESErrorDomain, 0, CFSTR("Failed to sign"));
      v34 = 0;
      *v67 = (id)objc_claimAutoreleasedReturnValue(v56);
    }
    else
    {
      v66 = v10;
      v41 = sub_10005582C(v38);
      v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVsWithData:](SESTLV, "TLVsWithData:", v42));

      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v32 = v43;
      v44 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v69, v74, 16);
      if (v44)
      {
        v45 = v44;
        v64 = v9;
        v46 = 0;
        v47 = *(_QWORD *)v70;
        while (2)
        {
          v48 = 0;
          v49 = (void *)v46;
          do
          {
            if (*(_QWORD *)v70 != v47)
              objc_enumerationMutation(v32);
            v50 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * (_QWORD)v48);
            v51 = objc_msgSend(v50, "tag");
            if ((_DWORD)v51 != 158)
            {
              if (v67)
              {
                v57 = SESDefaultLogObject(v51, v52);
                v58 = (void *)objc_claimAutoreleasedReturnValue(v57);
                v59 = SESErrorDomain;
                objc_msgSend(v50, "tag");
                v60 = SESCreateAndLogError(0, v58, v59, 0, CFSTR("SIGN returned unexpected tag 0x%X"));
                *v67 = (id)objc_claimAutoreleasedReturnValue(v60);

              }
              v34 = 0;
              v9 = v64;
              goto LABEL_35;
            }
            v46 = objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "value"));

            v48 = (char *)v48 + 1;
            v49 = (void *)v46;
          }
          while (v45 != v48);
          v45 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v69, v74, 16);
          if (v45)
            continue;
          break;
        }

        v9 = v64;
        if (v46)
        {
          v34 = (void *)objc_claimAutoreleasedReturnValue(+[SEEndPointSignatureResponse signature:](SEEndPointSignatureResponse, "signature:", v46));
          v49 = (void *)v46;
          goto LABEL_35;
        }
      }
      else
      {

      }
      if (v67)
      {
        v61 = SESDefaultLogObject(v53, v54);
        v49 = (void *)objc_claimAutoreleasedReturnValue(v61);
        v62 = SESCreateAndLogError(0, v49, SESErrorDomain, 0, CFSTR("Could not find signature in SIGN response"));
        v34 = 0;
        *v67 = (id)objc_claimAutoreleasedReturnValue(v62);
LABEL_35:
        v30 = v65;

        goto LABEL_36;
      }
      v34 = 0;
    }
    v30 = v65;
LABEL_36:

    v10 = v66;
LABEL_37:

    goto LABEL_38;
  }
  if (a5)
  {
    v35 = SESDefaultLogObject(v17, v18);
    v28 = (void *)objc_claimAutoreleasedReturnValue(v35);
    v36 = SESCreateAndLogError(0, v28, SESErrorDomain, 1, CFSTR("Nil passed to EndPointCreate"));
    v34 = 0;
    *a5 = (id)objc_claimAutoreleasedReturnValue(v36);
LABEL_39:

    goto LABEL_40;
  }
  v34 = 0;
LABEL_40:

  return v34;
}

id sub_1000464A0(void *a1, void *a2, void *a3, void *a4, void *a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  NSMutableArray *v27;
  uint64_t v28;
  const __CFString *v29;
  uint64_t v30;
  uint64_t v31;
  NSMutableArray *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  id v49;
  id *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  id *v56;
  void *v57;
  id *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  id *v64;
  id v65;
  uint8_t buf[4];
  void *v67;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v17 = SESDefaultLogObject(v15, v16);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "asHexString"));
    *(_DWORD *)buf = 138412290;
    v67 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);

  }
  if (v11 && v12 && v13 && v14)
  {
    v22 = objc_msgSend(v14, "length");
    if (v22 != (id)16)
    {
      if (a6)
      {
        v33 = SESDefaultLogObject(v22, v23);
        v27 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(v33);
        v28 = SESErrorDomain;
        objc_msgSend(v14, "length");
        v29 = CFSTR("Nonce length %u invalid");
        goto LABEL_15;
      }
LABEL_18:
      v35 = 0;
      goto LABEL_19;
    }
    v24 = objc_msgSend(v15, "length");
    if ((unint64_t)v24 >= 0x33)
    {
      if (a6)
      {
        v26 = SESDefaultLogObject(v24, v25);
        v27 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(v26);
        v28 = SESErrorDomain;
        objc_msgSend(v15, "length");
        v29 = CFSTR("MetaData length %u invalid");
LABEL_15:
        v32 = v27;
        v31 = v28;
        goto LABEL_16;
      }
      goto LABEL_18;
    }
    v27 = objc_opt_new(NSMutableArray);
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 80, v13));
    -[NSMutableArray addObject:](v27, "addObject:", v37);

    v38 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 145, v14));
    -[NSMutableArray addObject:](v27, "addObject:", v38);

    if (v15)
    {
      v39 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 88, v15));
      -[NSMutableArray addObject:](v27, "addObject:", v39);

    }
    v40 = sub_10004FBA0(v11, v12);
    v41 = objc_claimAutoreleasedReturnValue(v40);
    if (v41)
    {
      v43 = (id)v41;
      if (!a6)
      {
        v35 = 0;
LABEL_33:

        goto LABEL_17;
      }
      v44 = SESDefaultLogObject(v41, v42);
      v45 = objc_claimAutoreleasedReturnValue(v44);
      v62 = SESErrorDomain;
      v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "asHexString"));
      v46 = SESCreateAndLogError(v43, v45, v62, 0, CFSTR("While revoking %@"));
      *a6 = (id)objc_claimAutoreleasedReturnValue(v46);
      v47 = (void *)v45;

      v35 = 0;
    }
    else
    {
      v63 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:children:](SESTLV, "TLVWithTag:children:", 32558, v27));
      v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "asData"));
      v65 = 0;
      v49 = sub_10004F8D8(v11, 128, 114, 0, 0, v48, 0, &v65);
      v50 = (id *)objc_claimAutoreleasedReturnValue(v49);
      v43 = v65;

      if (v43
        || (v56 = sub_10005582C(v50), v57 = (void *)objc_claimAutoreleasedReturnValue(v56), v57, !v57))
      {
        v64 = v50;
        if (a6)
        {
          v53 = SESDefaultLogObject(v51, v52);
          v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
          v61 = SESErrorDomain;
          v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "asHexString"));
          v55 = SESCreateAndLogError(v43, v54, v61, 0, CFSTR("While revoking %@"));
          *a6 = (id)objc_claimAutoreleasedReturnValue(v55);

        }
        v35 = 0;
        v47 = v64;
      }
      else
      {
        v58 = sub_10005582C(v50);
        v47 = v50;
        v35 = (void *)objc_claimAutoreleasedReturnValue(v58);
      }
    }

    goto LABEL_33;
  }
  if (!a6)
    goto LABEL_18;
  v30 = SESDefaultLogObject(v20, v21);
  v27 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(v30);
  v31 = SESErrorDomain;
  v29 = CFSTR("Nil input to RevokeEndPoint");
  v32 = v27;
LABEL_16:
  v34 = SESCreateAndLogError(0, v32, v31, 1, v29);
  v35 = 0;
  *a6 = (id)objc_claimAutoreleasedReturnValue(v34);
LABEL_17:

LABEL_19:
  return v35;
}

id sub_1000468EC(void *a1, void *a2, _QWORD *a3)
{
  return sub_1000468F8(a1, a2, 1, a3);
}

id sub_1000468F8(void *a1, void *a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  const __CFString *v19;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  int v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v48;
  id v49;
  uint8_t buf[4];
  id v51;
  __int16 v52;
  int v53;

  v7 = a1;
  v8 = a2;
  v10 = SESDefaultLogObject(v8, v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  if (v7 && v8)
  {
    if (!a3)
    {
      v15 = 0;
      v14 = 3;
      goto LABEL_11;
    }
    if (a3 == 1)
    {
      v14 = -125;
      v15 = 0x80;
LABEL_11:
      v49 = 0;
      v22 = sub_1000423DC(v7, v8, 0, 118, v14, 0, 0, &v49);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      v24 = v49;
      v17 = v24;
      if (v24 || !v23)
      {
        if (!a4)
        {
          v36 = 0;
          goto LABEL_30;
        }
        v39 = SESDefaultLogObject(v24, v25);
        v30 = (void *)objc_claimAutoreleasedReturnValue(v39);
        v40 = SESCreateAndLogError(v17, v30, SESErrorDomain, 1, CFSTR("While counting P1 0x%x"));
        v36 = 0;
        *a4 = (id)objc_claimAutoreleasedReturnValue(v40);
      }
      else
      {
        v26 = SESDefaultLogObject(0, v25);
        v27 = objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          v28 = *(unsigned __int8 *)objc_msgSend(objc_retainAutorelease(v23), "bytes");
          *(_DWORD *)buf = 138412546;
          v51 = v8;
          v52 = 1024;
          v53 = v28;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Instance '%@' reporting %d objects", buf, 0x12u);
        }

        v48 = 0;
        v29 = sub_1000423DC(v7, v8, 0, 118, v15, 0, 0, &v48);
        v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
        v31 = v48;
        v17 = v31;
        if (v31)
        {
          if (a4)
          {
            v33 = SESDefaultLogObject(v31, v32);
            v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
            v35 = SESCreateAndLogError(v17, v34, SESErrorDomain, 1, CFSTR("While listing P1 0x%x"));
            *a4 = (id)objc_claimAutoreleasedReturnValue(v35);

          }
          v36 = 0;
        }
        else
        {
          v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
          if (objc_msgSend(v30, "length"))
          {
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = objc_retainAutorelease(v30);
              v44 = (v42 + 1);
              v45 = *((unsigned __int8 *)objc_msgSend(v43, "bytes") + v41);
              v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "subdataWithRange:", v44, v45));
              objc_msgSend(v36, "addObject:", v46);

              v41 = (v44 + v45);
              v42 = v41;
            }
            while ((unint64_t)objc_msgSend(v43, "length") > v41);
            v30 = v43;
          }
        }
      }

LABEL_30:
      goto LABEL_31;
    }
    if (a4)
    {
      v37 = SESDefaultLogObject(v12, v13);
      v17 = (void *)objc_claimAutoreleasedReturnValue(v37);
      v18 = SESErrorDomain;
      v19 = CFSTR("Unexpected PTA object type 0x%lx");
      v20 = v17;
      v21 = 0;
      goto LABEL_21;
    }
  }
  else if (a4)
  {
    v16 = SESDefaultLogObject(v12, v13);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v18 = SESErrorDomain;
    v19 = CFSTR("Nil input to pta_ListIdentifiers");
    v20 = v17;
    v21 = 1;
LABEL_21:
    v38 = SESCreateAndLogError(0, v20, v18, v21, v19);
    v36 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue(v38);
LABEL_31:

    goto LABEL_32;
  }
  v36 = 0;
LABEL_32:

  return v36;
}

id sub_100046CAC(void *a1, void *a2, _QWORD *a3)
{
  return sub_1000468F8(a1, a2, 0, a3);
}

BOOL sub_100046CB8(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  _BOOL8 v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v26;
  id v27;
  uint8_t buf[4];
  void *v29;

  v7 = a3;
  v8 = a2;
  v9 = a1;
  v11 = SESDefaultLogObject(v9, v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "asHexString"));
    *(_DWORD *)buf = 138412290;
    v29 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);

  }
  v27 = 0;
  v14 = sub_1000423DC(v9, v8, 0, 118, 4, 0, v7, &v27);
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

  v16 = v27;
  v17 = v16;
  if (!v16)
  {
    v19 = objc_msgSend(v15, "length");
    if (v19 == (id)1)
    {
      v18 = *(_BYTE *)objc_msgSend(objc_retainAutorelease(v15), "bytes") != 0;
      goto LABEL_11;
    }
    if (a4)
    {
      v21 = SESDefaultLogObject(v19, v20);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v23 = SESErrorDomain;
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "asHexString"));
      v24 = SESCreateAndLogError(0, v22, v23, 0, CFSTR("Unexpected response %@"));
      *a4 = (id)objc_claimAutoreleasedReturnValue(v24);

    }
LABEL_10:
    v18 = 0;
    goto LABEL_11;
  }
  if (!a4)
    goto LABEL_10;
  v18 = 0;
  *a4 = objc_retainAutorelease(v16);
LABEL_11:

  return v18;
}

_QWORD *sub_100046EA4(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD v62[5];
  char v63;
  __int128 v64;
  unint64_t v65[4];
  __int128 v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD v70[2];
  __int128 v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t);
  void (*v74)(uint64_t);
  id v75;
  _OWORD v76[2];

  v5 = a1;
  v6 = a2;
  if (objc_msgSend(v6, "length"))
  {
    v8 = ccec_cp_256();
    __chkstk_darwin();
    v10 = (uint64_t **)((char *)&v60 - v9);
    v11 = ccec_import_pub(v8, objc_msgSend(v6, "length"), objc_msgSend(objc_retainAutorelease(v6), "bytes"), (char *)&v60 - v9);
    if ((_DWORD)v11)
    {
      if (a3)
      {
        v13 = SESDefaultLogObject(v11, v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        v15 = SESCreateAndLogError(0, v14, SESErrorDomain, 0, CFSTR("Couldn't import RTR pubkey %@"));
        *a3 = (id)objc_claimAutoreleasedReturnValue(v15);

LABEL_14:
        a3 = 0;
      }
    }
    else
    {
      v69 = 0;
      v70[0] = 0;
      v70[1] = 0;
      v67 = 0;
      v68 = 0;
      v67 = objc_msgSend(v5, "DERItem");
      v68 = v19;
      v20 = DERDecodeItem((uint64_t)&v67, &v69);
      if ((_DWORD)v20 || v69 != 0x6000000000000039)
      {
        if (a3)
        {
          v27 = SESDefaultLogObject(v20, v21);
          v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
          v29 = SESCreateAndLogError(0, v28, SESErrorDomain, 0, CFSTR("RTR -- couldn't decode (%d) or bad tag (0x%llX)"));
          *a3 = (id)objc_claimAutoreleasedReturnValue(v29);

          goto LABEL_14;
        }
      }
      else
      {
        v66 = 0u;
        v64 = 0u;
        memset(v65, 0, sizeof(v65));
        v22 = DERParseSequenceSpecContent(v70, &off_100303528, &v64, 64);
        if ((_DWORD)v22)
        {
          if (a3)
          {
            v24 = SESDefaultLogObject(v22, v23);
            v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
            v26 = SESCreateAndLogError(0, v25, SESErrorDomain, 0, CFSTR("RTR -- couldn't decode sequence (%d)"));
            *a3 = (id)objc_claimAutoreleasedReturnValue(v26);

            goto LABEL_14;
          }
        }
        else
        {
          if (*((_QWORD *)&v66 + 1) != 16 * **v10)
          {
            if (!a3)
              goto LABEL_15;
            v50 = SESDefaultLogObject(v22, v23);
            v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
            v52 = SESCreateAndLogError(0, v51, SESErrorDomain, 8, CFSTR("RTR -- sig wrong size 0x%zX"));
            *a3 = (id)objc_claimAutoreleasedReturnValue(v52);

            goto LABEL_14;
          }
          v31 = v65[0] + v65[1];
          if (__CFADD__(v65[0], v65[1]) || (v32 = v70[0], v33 = v31 >= v70[0], v34 = v31 - v70[0], !v33))
          {
            if (!a3)
              goto LABEL_15;
            v53 = SESDefaultLogObject(v22, v23);
            v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
            v55 = SESCreateAndLogError(0, v54, SESErrorDomain, 1, CFSTR("Encountered overflow in key and slot pair list"));
            *a3 = (id)objc_claimAutoreleasedReturnValue(v55);

            goto LABEL_14;
          }
          v61 = v34;
          v35 = SESDefaultLogObject(v22, v23);
          v36 = objc_claimAutoreleasedReturnValue(v35);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytesNoCopy:length:freeWhenDone:](NSData, "dataWithBytesNoCopy:length:freeWhenDone:", v32, v61, 0));
            v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "asHexString"));
            LODWORD(v71) = 138412290;
            *(_QWORD *)((char *)&v71 + 4) = v38;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "RTR TBS: %@", (uint8_t *)&v71, 0xCu);

          }
          memset(v76, 0, sizeof(v76));
          v39 = ccsha256_di();
          ccdigest(v39, v61, v32, v76);
          v40 = **v10;
          v63 = 0;
          v41 = ccec_verify_composite(v10, 32, v76, v66, v66 + 8 * v40, &v63);
          if ((_DWORD)v41 || !v63)
          {
            if (!a3)
              goto LABEL_15;
            v56 = SESDefaultLogObject(v41, v42);
            v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
            v58 = SESCreateAndLogError(0, v57, SESErrorDomain, 8, CFSTR("Invalid RTR signature"));
            *a3 = (id)objc_claimAutoreleasedReturnValue(v58);

            goto LABEL_14;
          }
          *(_QWORD *)&v71 = 0;
          *((_QWORD *)&v71 + 1) = &v71;
          v72 = 0x3032000000;
          v73 = sub_1000474A0;
          v74 = sub_1000474B0;
          v75 = objc_alloc_init((Class)NSMutableArray);
          v62[0] = _NSConcreteStackBlock;
          v62[1] = 3221225472;
          v62[2] = sub_1000474B8;
          v62[3] = &unk_1003041E0;
          v62[4] = &v71;
          v43 = DERDecodeSequenceContentWithBlock(v65, (uint64_t)v62);
          if ((_DWORD)v43)
          {
            if (a3)
            {
              v45 = SESDefaultLogObject(v43, v44);
              v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
              v47 = SESErrorDomain;
              v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithDERItem:](NSData, "dataWithDERItem:", v65));
              v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "asHexString"));
              v49 = SESCreateAndLogError(0, v46, v47, 0, CFSTR("Failed (%d) to parse RTR keyAndSlotPairList sequence %@"));
              *a3 = (id)objc_claimAutoreleasedReturnValue(v49);

              a3 = 0;
            }
          }
          else
          {
            a3 = *(id *)(*((_QWORD *)&v71 + 1) + 40);
          }
          _Block_object_dispose(&v71, 8);

        }
      }
    }
  }
  else if (a3)
  {
    v16 = SESDefaultLogObject(0, v7);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v18 = SESCreateAndLogError(0, v17, SESErrorDomain, 1, CFSTR("Nil/empty public key to verifyRTR"));
    *a3 = (id)objc_claimAutoreleasedReturnValue(v18);

    a3 = 0;
  }
LABEL_15:

  return a3;
}

void sub_100047480(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 + 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000474A0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000474B0(uint64_t a1)
{

}

uint64_t sub_1000474B8(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  _DWORD v17[2];
  __int16 v18;
  void *v19;
  uint8_t buf[16];
  __int128 v21;

  if (*a2 == 0x6000000000000001)
  {
    *(_OWORD *)buf = 0u;
    v21 = 0u;
    v4 = a2 + 1;
    v5 = DERParseSequenceSpecContent(a2 + 1, &off_100303538, buf, 32);
    v7 = v5;
    if ((_DWORD)v5)
    {
      v8 = SESDefaultLogObject(v5, v6);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithDERItem:](NSData, "dataWithDERItem:", v4));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "asHexString"));
        v17[0] = 67109378;
        v17[1] = v7;
        v18 = 2112;
        v19 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed (%d) to parse content of tag 0x61 %@", (uint8_t *)v17, 0x12u);

      }
    }
    else
    {
      v15 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
      v9 = objc_claimAutoreleasedReturnValue(+[NSData dataWithDERItem:](NSData, "dataWithDERItem:", buf));
      objc_msgSend(v15, "addObject:", v9);
    }

  }
  else
  {
    v12 = SESDefaultLogObject(a1, a2);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = *a2;
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Ignoring unknown tag 0x%llX in RTR", buf, 0xCu);
    }

    return 0;
  }
  return v7;
}

id sub_100047670(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id obj;
  _QWORD v55[5];
  id v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  id v61;
  _QWORD v62[5];
  uint8_t buf[8];
  uint8_t *v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t);
  void (*v67)(uint64_t);
  NSMutableArray *v68;
  id v69;
  uint8_t v70[4];
  id v71;
  _BYTE v72[128];

  v5 = a1;
  v6 = a2;
  v8 = SESDefaultLogObject(v6, v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  if (v5 && v6)
  {
    v69 = 0;
    v12 = sub_1000423DC(v5, v6, 0, 118, 135, 0, 0, &v69);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v14 = v69;
    v16 = v14;
    if (v14 || !v13)
    {
      if (a3)
      {
        v26 = SESDefaultLogObject(v14, v15);
        v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        v28 = SESCreateAndLogError(v16, v27, SESErrorDomain, 1, CFSTR("While viewing P1 0x86"));
        *a3 = (id)objc_claimAutoreleasedReturnValue(v28);

      }
      v25 = 0;
      goto LABEL_35;
    }
    *(_QWORD *)buf = 0;
    v64 = buf;
    v65 = 0x3032000000;
    v66 = sub_1000474A0;
    v67 = sub_1000474B0;
    v68 = objc_opt_new(NSMutableArray);
    v62[0] = _NSConcreteStackBlock;
    v62[1] = 3221225472;
    v62[2] = sub_100047C8C;
    v62[3] = &unk_100304968;
    v62[4] = buf;
    v17 = sub_100047BFC(v13, v62);
    if ((_DWORD)v17)
    {
      if (!a3)
      {
        v16 = 0;
        v25 = 0;
LABEL_34:
        _Block_object_dispose(buf, 8);

LABEL_35:
        goto LABEL_36;
      }
      v19 = SESDefaultLogObject(v17, v18);
      v20 = (id)objc_claimAutoreleasedReturnValue(v19);
      v21 = SESErrorDomain;
      v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "base64"));
      v22 = SESCreateAndLogError(0, v20, v21, 0, CFSTR("Failed (%d) to parse authorizations %@"));
      *a3 = (id)objc_claimAutoreleasedReturnValue(v22);

      v16 = 0;
    }
    else
    {
      v61 = 0;
      v29 = sub_1000468F8(v5, v6, 0, &v61);
      v20 = (id)objc_claimAutoreleasedReturnValue(v29);
      v30 = v61;
      v16 = v30;
      if (!v30 && v20)
      {
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v20 = v20;
        v32 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v57, v72, 16);
        if (v32)
        {
          obj = v20;
          v33 = *(_QWORD *)v58;
LABEL_20:
          v34 = 0;
          v35 = v13;
          while (1)
          {
            if (*(_QWORD *)v58 != v33)
              objc_enumerationMutation(obj);
            v36 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * (_QWORD)v34);
            v56 = 0;
            v37 = sub_1000423DC(v5, v6, 0, 118, 136, 0, v36, &v56);
            v13 = (void *)objc_claimAutoreleasedReturnValue(v37);
            v16 = v56;

            if (v16 || !v13)
            {
              v46 = SESDefaultLogObject(v38, v39);
              v47 = objc_claimAutoreleasedReturnValue(v46);
              if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)v70 = 138412290;
                v71 = v16;
                _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "Ignoring error on VIEW (0x88) -- probably not updated PTA: %@", v70, 0xCu);
              }

LABEL_42:
              v20 = obj;
              goto LABEL_43;
            }
            v55[0] = _NSConcreteStackBlock;
            v55[1] = 3221225472;
            v55[2] = sub_100047CA0;
            v55[3] = &unk_100304968;
            v55[4] = buf;
            v40 = sub_100047BFC(v13, v55);
            if ((_DWORD)v40)
              break;
            v34 = (char *)v34 + 1;
            v35 = v13;
            if (v32 == v34)
            {
              v32 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v72, 16);
              if (v32)
                goto LABEL_20;
              v16 = 0;
              goto LABEL_42;
            }
          }
          if (a3)
          {
            v48 = SESDefaultLogObject(v40, v41);
            v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
            v50 = SESErrorDomain;
            v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "base64"));
            v51 = SESCreateAndLogError(0, v49, v50, 0, CFSTR("Failed (%d) to parse authorizations %@"));
            *a3 = (id)objc_claimAutoreleasedReturnValue(v51);

          }
          v16 = 0;
          v25 = 0;
          v20 = obj;
        }
        else
        {
          v16 = 0;
LABEL_43:

          v25 = *((id *)v64 + 5);
        }
        goto LABEL_33;
      }
      if (a3)
      {
        v42 = SESDefaultLogObject(v30, v31);
        v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
        v44 = SESCreateAndLogError(v16, v43, SESErrorDomain, 0, CFSTR("Couldn't list EP identifiers?"));
        *a3 = (id)objc_claimAutoreleasedReturnValue(v44);

      }
    }
    v25 = 0;
LABEL_33:

    goto LABEL_34;
  }
  if (a3)
  {
    v23 = SESDefaultLogObject(v10, v11);
    v16 = (id)objc_claimAutoreleasedReturnValue(v23);
    v24 = SESCreateAndLogError(0, v16, SESErrorDomain, 1, CFSTR("Nil input to pta_ListAuthorizationIDs"));
    v25 = 0;
    *a3 = (id)objc_claimAutoreleasedReturnValue(v24);
LABEL_36:

    goto LABEL_37;
  }
  v25 = 0;
LABEL_37:

  return v25;
}

void sub_100047BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100047BFC(void *a1, void *a2)
{
  id v3;
  unint64_t v4;
  id v5;
  uint64_t v6;
  _QWORD v8[4];
  id v9;
  unint64_t v10[2];

  v3 = a2;
  v10[0] = (unint64_t)objc_msgSend(a1, "DERItem");
  v10[1] = v4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000485CC;
  v8[3] = &unk_100304990;
  v9 = v3;
  v5 = v3;
  v6 = DERDecodeSequenceContentWithBlock(v10, (uint64_t)v8);

  return v6;
}

id sub_100047C8C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", a2);
}

id sub_100047CA0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", a2);
}

id sub_100047CB4(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t v20[16];

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v9 = SESDefaultLogObject(v7, v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "", v20, 2u);
  }

  if (v5 && v6 && v7)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 147, v7));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "asData"));
    v15 = sub_100042934(v5, v6, v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

  }
  else
  {
    v17 = SESDefaultLogObject(v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v18 = SESCreateAndLogError(0, v13, SESErrorDomain, 1, CFSTR("Nil input to pta_DeleteAuthorizationID"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(v18);
  }

  return v16;
}

id sub_100047DE8(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _OWORD v15[3];
  _OWORD v16[2];
  _OWORD v17[4];

  memset(v17, 0, sizeof(v17));
  v3 = DERParseSequenceSpec(a1, &off_100303548, v17, 64);
  if ((_DWORD)v3)
  {
    if (a2)
    {
      v5 = SESDefaultLogObject(v3, v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      v7 = SESErrorDomain;
      v8 = CFSTR("Invalid BA %d");
LABEL_7:
      v12 = SESCreateAndLogError(0, v6, v7, 1, v8);
      *a2 = (id)objc_claimAutoreleasedReturnValue(v12);

    }
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    memset(v15, 0, sizeof(v15));
    v9 = DERParseSequenceSpecContent(v17, &off_100303558, v15, 80);
    if (!(_DWORD)v9)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithDERItem:](NSData, "dataWithDERItem:", v16));
      return v13;
    }
    if (a2)
    {
      v11 = SESDefaultLogObject(v9, v10);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v7 = SESErrorDomain;
      v8 = CFSTR("Invalid BA data %d");
      goto LABEL_7;
    }
  }
  v13 = 0;
  return v13;
}

BOOL sub_100047EFC(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  id v24;

  v5 = a1;
  v6 = a2;
  v8 = v6;
  if (v5 && v6)
  {
    v9 = sub_10004FBA0(v5, v6);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (v10)
    {
      v12 = (id)v10;
      if (a3)
      {
        v13 = SESDefaultLogObject(v10, v11);
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        v15 = SESCreateAndLogError(v12, v14, SESErrorDomain, 0, CFSTR("During pta_isSuspended"));
        *a3 = (id)objc_claimAutoreleasedReturnValue(v15);

      }
      v16 = 0;
    }
    else
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithHexString:](NSData, "dataWithHexString:", CFSTR("80CA000100")));
      v24 = 0;
      v21 = sub_10004F5F4(v5, (uint64_t)v20, &v24);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v12 = v24;

      if (v12)
      {
        v16 = 0;
        if (a3)
          *a3 = objc_retainAutorelease(v12);
      }
      else
      {
        v16 = sub_100055868((uint64_t)v22) == 26880;
      }

    }
  }
  else
  {
    if (a3)
    {
      v17 = SESDefaultLogObject(v6, v7);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v19 = SESCreateAndLogError(0, v18, SESErrorDomain, 1, CFSTR("Nil input to pta_isSuspended"));
      *a3 = (id)objc_claimAutoreleasedReturnValue(v19);

    }
    v16 = 0;
  }

  return v16;
}

id sub_100048090(void *a1, void *a2, void *a3, void *a4, unsigned int a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  BOOL v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unsigned int v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v64;
  id v65;
  id v66;
  _QWORD *v67;
  id v68;
  void *v69;
  id v70;
  void *v71;
  void *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  id v77;
  id v78;
  uint8_t buf[4];
  unsigned int v80;
  _BYTE v81[128];
  _QWORD v82[3];

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v78 = 0;
  v15 = sub_100042234(v11, v12, &v78);
  v16 = v78;
  if (v16)
    v18 = 0;
  else
    v18 = v15 > 3;
  if (v18)
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 80, v13));
    v82[0] = v24;
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 81, v14));
    v82[1] = v25;
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:unsignedShort:](SESTLV, "TLVWithTag:unsignedShort:", 83, __rev16(a5)));
    v82[2] = v26;
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v82, 3));

    v71 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:children:](SESTLV, "TLVWithTag:children:", 32570, v21));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "asData"));
    v77 = 0;
    v28 = sub_1000423DC(v11, v12, 0, 140, 0, 0, v27, &v77);
    v29 = objc_claimAutoreleasedReturnValue(v28);
    v19 = v77;

    v72 = (void *)v29;
    if (v19)
    {
      if (a6)
      {
        v32 = SESDefaultLogObject(v30, v31);
        v33 = a6;
        v34 = (id)objc_claimAutoreleasedReturnValue(v32);
        v35 = SESCreateAndLogError(v19, v34, SESErrorDomain, 0, CFSTR("While converting endpoint"));
        v23 = 0;
        *v33 = (id)objc_claimAutoreleasedReturnValue(v35);
        v36 = v71;
        goto LABEL_39;
      }
      v23 = 0;
      v36 = v71;
LABEL_40:

      goto LABEL_41;
    }
    v67 = a6;
    v68 = v13;
    v69 = v21;
    v70 = v14;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v37 = (id)objc_claimAutoreleasedReturnValue(+[SESTLV TLVsWithData:](SESTLV, "TLVsWithData:", v29));
    v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v73, v81, 16);
    if (!v38)
    {

      v34 = 0;
      goto LABEL_35;
    }
    v39 = v38;
    v65 = v12;
    v66 = v11;
    v34 = 0;
    v40 = 0;
    v41 = *(_QWORD *)v74;
LABEL_13:
    v42 = 0;
    while (1)
    {
      if (*(_QWORD *)v74 != v41)
        objc_enumerationMutation(v37);
      v43 = *(void **)(*((_QWORD *)&v73 + 1) + 8 * v42);
      v44 = objc_msgSend(v43, "tag");
      if (v44 == 32548)
        break;
      if (v44 == 83)
      {
        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "value"));
        v46 = objc_msgSend(v45, "length");

        if (v46 != (id)2)
        {
          if (v67)
          {
            v55 = SESDefaultLogObject(v47, v48);
            v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
            v57 = SESErrorDomain;
            v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "value"));
            v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "asHexString"));
            v59 = SESCreateAndLogError(0, v56, v57, 0, CFSTR("Invalid endpoint conversion counter %@"));
            *v67 = (id)objc_claimAutoreleasedReturnValue(v59);

          }
          v23 = 0;
          goto LABEL_33;
        }
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "value"));
        v40 = objc_msgSend(v49, "u16BE:", 0);
        goto LABEL_21;
      }
LABEL_22:
      if (v39 == (id)++v42)
      {
        v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v73, v81, 16);
        if (v39)
          goto LABEL_13;

        if (v34 && v40)
        {
          v53 = SESDefaultLogObject(v51, v52);
          v54 = objc_claimAutoreleasedReturnValue(v53);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109120;
            v80 = v40;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "Endpoint converted successfully to counter %d", buf, 8u);
          }

          v34 = v34;
          v23 = v34;
LABEL_33:
          v12 = v65;
          v11 = v66;
          goto LABEL_38;
        }
        v12 = v65;
        v11 = v66;
LABEL_35:
        if (v67)
        {
          v60 = SESDefaultLogObject(v51, v52);
          v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
          v62 = SESCreateAndLogError(0, v61, SESErrorDomain, 0, CFSTR("Missing endpoint conversion counter %d endpoint certificate %d"));
          *v67 = (id)objc_claimAutoreleasedReturnValue(v62);

        }
        v23 = 0;
LABEL_38:
        v13 = v68;
        v36 = v71;

        v21 = v69;
        v14 = v70;
LABEL_39:

        goto LABEL_40;
      }
    }
    v50 = objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "value"));
    v49 = v34;
    v34 = (id)v50;
LABEL_21:

    goto LABEL_22;
  }
  v19 = v16;
  if (a6)
  {
    v20 = SESDefaultLogObject(v16, v17);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    v22 = SESCreateAndLogError(v19, v21, SESErrorDomain, 6, CFSTR("Incompatible applet version %lu min %lu error %@"));
    v23 = 0;
    *a6 = (id)objc_claimAutoreleasedReturnValue(v22);
LABEL_41:

    goto LABEL_42;
  }
  v23 = 0;
LABEL_42:

  return v23;
}

uint64_t sub_1000485CC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  result = DERParseSequenceSpecContent(a2 + 8, &off_100303518, &v13, 96);
  if (!(_DWORD)result)
  {
    result = 6;
    if (*((_QWORD *)&v13 + 1) == 1
      && *((_QWORD *)&v14 + 1) == 2
      && *((_QWORD *)&v15 + 1) == 16
      && *((_QWORD *)&v16 + 1) == 20
      && (*((_QWORD *)&v17 + 1) & 0xFFFFFFFFFFFFFFDFLL) == 0
      && (*((_QWORD *)&v18 + 1) == 6 || !*((_QWORD *)&v18 + 1)))
    {
      v4 = *(unsigned __int8 *)v13;
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", bswap32(*(unsigned __int16 *)v14) >> 16));
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithDERItem:](NSData, "dataWithDERItem:", &v15));
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithDERItem:](NSData, "dataWithDERItem:", &v16));
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithDERItem:](NSData, "dataWithDERItem:", &v17));
      v9 = 0;
      if (*((_QWORD *)&v18 + 1) && (_DWORD)v4 == 1)
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)(bswap32(*(unsigned __int16 *)(v18 + 2)) >> 16)+ (double)(bswap32(*(unsigned __int16 *)v18) >> 16) * 3600.0+ (double)(bswap32(*(unsigned __int16 *)(v18 + 4)) >> 16) / 1000.0));
      v10 = *(_QWORD *)(a1 + 32);
      if (objc_msgSend(v8, "isAllZero"))
        v11 = 0;
      else
        v11 = v8;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[SESAuthorizationInfo withState:remaningCount:remainingTime:publicKeyIdentifier:authorizationID:anonymizedDSID:](SESAuthorizationInfo, "withState:remaningCount:remainingTime:publicKeyIdentifier:authorizationID:anonymizedDSID:", v4, v5, v9, v7, v6, v11));
      (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v12);

      return 0;
    }
  }
  return result;
}

NSMutableData *sub_1000487E8(void *a1, int a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSMutableData *v9;
  int v10;
  char v11;
  id v12;
  id *v13;
  id v14;
  uint64_t v15;
  id *v17;
  void *v18;
  id *v19;
  void *v20;
  NSMutableData *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v27;
  uint8_t buf[16];

  v5 = a1;
  v7 = SESDefaultLogObject(v5, v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  v9 = objc_opt_new(NSMutableData);
  if (a2)
  {
    v10 = 0;
    while (1)
    {
      v11 = (a2 - v10) >= 0xFA ? -6 : a2 - v10;
      v27 = 0;
      v12 = sub_10004F8D8(v5, 128, 176, SBYTE1(v10), v10, 0, v11, &v27);
      v13 = (id *)objc_claimAutoreleasedReturnValue(v12);
      v14 = v27;
      if (v14 || v13 == 0)
        break;
      v17 = sub_10005582C(v13);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      -[NSMutableData appendData:](v9, "appendData:", v18);

      v19 = sub_10005582C(v13);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      v10 += objc_msgSend(v20, "length");

      if (v10 == a2)
        goto LABEL_13;
    }
    v22 = v14;
    if (a3)
    {
      v23 = SESDefaultLogObject(v14, v15);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      v25 = SESCreateAndLogError(v22, v24, SESErrorDomain, 0, CFSTR("While reading buffer at offset %u/%u"));
      *a3 = (id)objc_claimAutoreleasedReturnValue(v25);

    }
    v21 = 0;
  }
  else
  {
LABEL_13:
    v21 = v9;
  }

  return v21;
}

void sub_100048994(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_signpost_emit_with_name_impl(a1, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, a5, a6, &a9, 2u);
}

BOOL sub_1000489C0(os_log_t log)
{
  return os_signpost_enabled(log);
}

void sub_100048A08(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 40), a2);
}

id sub_100048A48(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_10034BBB8 != -1)
    dispatch_once(&qword_10034BBB8, &stru_1003049B0);
  return (id)qword_10034BBB0;
}

void sub_100048A8C(id a1)
{
  SESDAnalyticsLogger *v1;
  void *v2;
  NSMutableDictionary *v3;

  v1 = objc_opt_new(SESDAnalyticsLogger);
  v2 = (void *)qword_10034BBB0;
  qword_10034BBB0 = (uint64_t)v1;

  v3 = objc_opt_new(NSMutableDictionary);
  sub_100048AE8(qword_10034BBB0, v3);

}

void sub_100048AE8(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 8), a2);
}

void sub_100048AF8(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  ConnectedPeer *v5;
  ConnectedPeer *v6;
  void *v7;
  id v8;
  id v9;

  v9 = a2;
  objc_opt_self(a1);
  v3 = sub_100048A48((uint64_t)SESDAnalyticsLogger);
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  objc_sync_enter(v4);
  v5 = objc_opt_new(ConnectedPeer);
  v6 = v5;
  if (v5)
    v5->_eventType = 6;
  if (v4)
    v7 = (void *)v4[1];
  else
    v7 = 0;
  v8 = v7;
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v6, v9);

  objc_sync_exit(v4);
}

void sub_100048BAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100048BC0(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  void *v5;
  id v6;
  id v7;

  v7 = a2;
  objc_opt_self(a1);
  v3 = sub_100048A48((uint64_t)SESDAnalyticsLogger);
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  objc_sync_enter(v4);
  if (v4)
    v5 = (void *)v4[1];
  else
    v5 = 0;
  v6 = v5;
  objc_msgSend(v6, "removeObjectForKey:", v7);

  objc_sync_exit(v4);
}

void sub_100048C48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100048C5C(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *v7;
  void *v8;
  id v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint8_t v15[16];

  v5 = a3;
  objc_opt_self(a1);
  v6 = sub_100048A48((uint64_t)SESDAnalyticsLogger);
  v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  objc_sync_enter(v7);
  if (v7)
    v8 = (void *)v7[1];
  else
    v8 = 0;
  v9 = v8;
  v10 = (_DWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v5));

  if (v10)
  {
    if (v10[2] >= a2)
      v10[2] = a2;
  }
  else
  {
    v13 = SESDefaultLogObject(v11, v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Couldn't find peer", v15, 2u);
    }

  }
  objc_sync_exit(v7);

}

void sub_100048D60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100048D78(uint64_t a1, int a2, int a3, void *a4)
{
  id v7;
  id v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint8_t v22[16];

  v7 = a4;
  objc_opt_self(a1);
  v8 = sub_100048A48((uint64_t)SESDAnalyticsLogger);
  v9 = (id)objc_claimAutoreleasedReturnValue(v8);
  objc_sync_enter(v9);
  if (v9)
    v10 = (void *)v9[1];
  else
    v10 = 0;
  v11 = v10;
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v7));

  if (!v12)
  {
    v21 = SESDefaultLogObject(v13, v14);
    v18 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Couldn't find peer", v22, 2u);
    }
    goto LABEL_11;
  }
  if (*(_DWORD *)(v12 + 8) == -1)
  {
    if (a2)
    {
      v15 = *(id *)(v12 + 40);
      v16 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v15, "unsignedIntValue") | 1));
      v17 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v16;

    }
    if (a3)
    {
      v18 = *(id *)(v12 + 40);
      v19 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", -[NSObject unsignedIntValue](v18, "unsignedIntValue") | 2));
      v20 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v19;

LABEL_11:
    }
  }

  objc_sync_exit(v9);
}

void sub_100048EF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100048F08(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  uint8_t v18[16];

  v6 = a2;
  v7 = a3;
  objc_opt_self(a1);
  v8 = sub_100048A48((uint64_t)SESDAnalyticsLogger);
  v9 = (id)objc_claimAutoreleasedReturnValue(v8);
  objc_sync_enter(v9);
  if (v9)
    v10 = (void *)v9[1];
  else
    v10 = 0;
  v11 = v10;
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v7));

  if (v12)
  {
    if (*(_DWORD *)(v12 + 8) == -1)
    {
      v15 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = 0;

      objc_storeStrong((id *)(v12 + 32), a2);
    }
  }
  else
  {
    v16 = SESDefaultLogObject(v13, v14);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Couldn't find peer", v18, 2u);
    }

  }
  objc_sync_exit(v9);

}

void sub_100049030(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100049048(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD *v5;
  void *v6;
  id v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint8_t v15[16];

  v3 = a2;
  objc_opt_self(a1);
  v4 = sub_100048A48((uint64_t)SESDAnalyticsLogger);
  v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  objc_sync_enter(v5);
  if (v5)
    v6 = (void *)v5[1];
  else
    v6 = 0;
  v7 = v6;
  v8 = (unsigned int *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v3));

  if (v8)
  {
    v11 = v8[3];
  }
  else
  {
    v12 = SESDefaultLogObject(v9, v10);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Couldn't find peer", v15, 2u);
    }

    v11 = 0xFFFFFFFFLL;
  }

  objc_sync_exit(v5);
  return v11;
}

void sub_10004913C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100049154(uint64_t a1, int a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *v7;
  void *v8;
  id v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint8_t v15[16];

  v5 = a3;
  objc_opt_self(a1);
  v6 = sub_100048A48((uint64_t)SESDAnalyticsLogger);
  v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  objc_sync_enter(v7);
  if (v7)
    v8 = (void *)v7[1];
  else
    v8 = 0;
  v9 = v8;
  v10 = (_DWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v5));

  if (v10)
  {
    v10[3] = a2;
  }
  else
  {
    v13 = SESDefaultLogObject(v11, v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Couldn't find peer", v15, 2u);
    }

  }
  objc_sync_exit(v7);

}

void sub_10004924C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100049264(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  _BOOL8 v14;
  id v15;
  id v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  _QWORD v29[7];
  _QWORD v30[7];
  uint8_t buf[4];
  uint64_t v32;

  v5 = a2;
  v6 = objc_opt_self(a1);
  v8 = SESDefaultLogObject(v6, v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v32 = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Posting SESD HUP event with result %lu", buf, 0xCu);
  }

  v10 = objc_msgSend(v5, "getEndpointUser");
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "hupData"));
  v13 = v11;
  if (v11)
  {
    v14 = v10 == 0;
    v15 = objc_msgSend(v11, "u8:", 0);
    v28 = objc_msgSend(v13, "u16BE:", 7);
    v16 = objc_alloc((Class)KmlRoutingInformation);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "readerInfo"));
    v18 = objc_msgSend(v16, "initWithReaderInformation:", v17);

    v27 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject manufacturer](v18, "manufacturer"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject brand](v18, "brand"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject regionString](v18, "regionString"));
    v29[0] = CFSTR("bluetoothConfiguration");
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v15));
    v30[0] = v21;
    v30[1] = v19;
    v29[1] = CFSTR("Brand");
    v29[2] = CFSTR("dataCenterCode");
    v30[2] = v20;
    v29[3] = CFSTR("isOwner");
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v14));
    v30[3] = v22;
    v30[4] = v27;
    v29[4] = CFSTR("Manufacturer");
    v29[5] = CFSTR("pairingResult");
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
    v30[5] = v23;
    v29[6] = CFSTR("vehicleCapabilities");
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v28));
    v30[6] = v24;
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v30, v29, 7));

    +[CALogger postCAEventFor:eventInput:](CALogger, "postCAEventFor:eventInput:", CFSTR("com.apple.kml.headUnitPairingEvent"), v25);
  }
  else
  {
    v26 = SESDefaultLogObject(0, v12);
    v18 = objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Could not report CA because hupData is nil", buf, 2u);
    }
  }

}

void sub_100049548(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[6];
  _QWORD v22[6];
  uint8_t buf[4];
  id v24;

  v9 = a3;
  objc_opt_self(a1);
  v10 = objc_msgSend(objc_alloc((Class)KmlRoutingInformation), "initWithReaderInformation:", v9);
  v12 = SESDefaultLogObject(v10, v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v24 = v9;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "readerInfo - %@", buf, 0xCu);
  }

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "manufacturer"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "brand"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "regionString"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2, CFSTR("destination")));
  v22[0] = v17;
  v22[1] = v16;
  v21[1] = CFSTR("dataCenterCode");
  v21[2] = CFSTR("manufacturer");
  v22[2] = v14;
  v22[3] = v15;
  v21[3] = CFSTR("brand");
  v21[4] = CFSTR("transportSupported");
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a4));
  v22[4] = v18;
  v21[5] = CFSTR("status");
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a5));
  v22[5] = v19;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 6));

  +[CALogger postCAEventFor:eventInput:](CALogger, "postCAEventFor:eventInput:", CFSTR("com.apple.kml.keyRevocationEvent"), v20);
}

void sub_100049758(uint64_t a1, int a2, int a3, void *a4, unint64_t a5, void *a6)
{
  id v10;
  id v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  _UNKNOWN **v33;
  __CFString *v34;
  const __CFString *v35;
  __CFString *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  NSObject *v41;
  void *v42;
  id v43;
  id v45;
  _QWORD v46[8];
  _QWORD v47[8];
  uint8_t buf[4];
  id v49;

  v45 = a4;
  v10 = a6;
  objc_opt_self(a1);
  if (a5 <= 1)
  {
    v11 = sub_100048A48((uint64_t)SESDAnalyticsLogger);
    v12 = (id)objc_claimAutoreleasedReturnValue(v11);
    objc_sync_enter(v12);
    if (v12)
      v13 = (void *)v12[1];
    else
      v13 = 0;
    v14 = v13;
    v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v10));

    if (!v15)
    {
      v21 = SESDefaultLogObject(v16, v17);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Couldn't retrieve peer", buf, 2u);
      }
      goto LABEL_38;
    }
    v18 = a3 | (a2 << 16);
    v19 = *(_DWORD *)(v15 + 8);
    switch(v19)
    {
      case 1:
        *(_DWORD *)(v15 + 24) = v18;
        goto LABEL_14;
      case 3:
        v20 = 16;
        break;
      case 2:
        v20 = 20;
        break;
      default:
        goto LABEL_39;
    }
    *(_DWORD *)(v15 + v20) = v18;
    if (a2 == 0x8000)
    {
LABEL_14:
      v41 = objc_msgSend(objc_alloc((Class)KmlRoutingInformation), "initWithReaderInformation:", v45);
      v24 = SESDefaultLogObject(v41, v23);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v49 = v45;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "readerInfo - %@", buf, 0xCu);
      }

      v39 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject manufacturer](v41, "manufacturer"));
      v38 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject brand](v41, "brand"));
      v37 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject regionString](v41, "regionString"));
      v46[0] = CFSTR("eventType");
      v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v15 + 12)));
      v47[0] = v42;
      v47[1] = v37;
      v46[1] = CFSTR("dataCenterCode");
      v46[2] = CFSTR("manufacturer");
      v47[2] = v39;
      v47[3] = v38;
      v46[3] = CFSTR("brand");
      v46[4] = CFSTR("optimalFlowStatus");
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v15 + 20)));
      v47[4] = v40;
      v46[5] = CFSTR("suboptimalFlowStatus");
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v15 + 24)));
      v47[5] = v26;
      v46[6] = CFSTR("recoveryFlowStatus");
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v15 + 16)));
      v47[6] = v27;
      v46[7] = CFSTR("deviceIntent");
      v28 = *(id *)(v15 + 32);
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v28 != 0));
      v47[7] = v29;
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v47, v46, 8));
      v43 = objc_msgSend(v30, "mutableCopy");

      if (*(_QWORD *)(v15 + 32))
      {
        v31 = *(id *)(v15 + 32);
        objc_msgSend(v43, "setObject:forKeyedSubscript:", v31, CFSTR("deviceIntentConfidence"));

      }
      v32 = *(id *)(v15 + 40);
      if (v32)
        v33 = (_UNKNOWN **)*(id *)(v15 + 40);
      else
        v33 = &off_100322F08;
      objc_msgSend(v43, "setObject:forKeyedSubscript:", v33, CFSTR("currentDeviceState"));
      if (v32)

      +[CALogger postCAEventFor:eventInput:](CALogger, "postCAEventFor:eventInput:", CFSTR("com.apple.kml.passiveEntryEvent"), v43);
      if (a2 != 0x8000)
        goto LABEL_37;
      if (a3 == 1 && *(_QWORD *)(v15 + 32))
      {
        v34 = CFSTR("friendPassiveEntryTxCount");
        v35 = CFSTR("ownerPassiveEntryTxCount");
      }
      else if (a3 || *(_QWORD *)(v15 + 32))
      {
        v36 = 0;
        if (a3 != 1 || *(_QWORD *)(v15 + 32))
        {
LABEL_36:

LABEL_37:
          *(_DWORD *)(v15 + 8) = -1;
          sub_100013B10(v15, 0);
          sub_100048A08(v15, 0);
          *(_OWORD *)(v15 + 12) = xmmword_100287D60;

          v22 = v41;
LABEL_38:

          goto LABEL_39;
        }
        v34 = CFSTR("friendNoDIPassiveEntryTxCount");
        v35 = CFSTR("ownerNoDIPassiveEntryTxCount");
      }
      else
      {
        v34 = CFSTR("friendWalkAwayLockCount");
        v35 = CFSTR("ownerWalkAwayLockCount");
      }
      if (!a5)
        v34 = (__CFString *)v35;
      v36 = v34;
      sub_100049C94((uint64_t)SESDAnalyticsLogger, v36);
      goto LABEL_36;
    }
LABEL_39:
    objc_sync_exit(v12);

  }
}

void sub_100049C58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100049C94(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  NSObject *v16;
  const __CFString *v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[4];
  _QWORD v26[6];
  _QWORD v27[6];
  uint8_t buf[4];
  id v29;

  v3 = a2;
  v4 = objc_opt_self(a1);
  v6 = SESDefaultLogObject(v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v29 = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Registering CA General Transaction Statistics event %@", buf, 0xCu);
  }

  v8 = sub_100048A48((uint64_t)SESDAnalyticsLogger);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v27[0] = CFSTR("ownerPassiveEntryTxCount");
  v27[1] = CFSTR("ownerNoDIPassiveEntryTxCount");
  v27[2] = CFSTR("ownerWalkAwayLockCount");
  v27[3] = CFSTR("ownerWalletRKECount");
  v27[4] = CFSTR("owner3rdPartyRKECount");
  v27[5] = CFSTR("ownerPassthroughCount");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v27, 6));
  v26[0] = CFSTR("friendPassiveEntryTxCount");
  v26[1] = CFSTR("friendNoDIPassiveEntryTxCount");
  v26[2] = CFSTR("friendWalkAwayLockCount");
  v26[3] = CFSTR("friendWalletRKECount");
  v26[4] = CFSTR("friend3rdPartyRKECount");
  v26[5] = CFSTR("friendPassthroughCount");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v26, 6));
  v25[0] = CFSTR("unlockNeededForCarActionCount");
  v25[1] = CFSTR("connectionCount");
  v25[2] = CFSTR("disconnectionCount");
  v25[3] = CFSTR("deviceIntentCount");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v25, 4));
  v13 = v9;
  objc_sync_enter(v13);
  v14 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
  if (objc_msgSend(v10, "containsObject:", v3))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "dictionaryForKey:", CFSTR("ca.general.transaction.statistics.owner")));
    v16 = objc_msgSend(v15, "mutableCopy");

    if (!v16)
      v16 = sub_10004A5E4((uint64_t)SESDAnalyticsLogger, v10);
    v17 = CFSTR("ca.general.transaction.statistics.owner");
LABEL_15:
    v22 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v16, "objectForKeyedSubscript:", v3));
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)objc_msgSend(v22, "unsignedIntegerValue") + 1));
    -[NSObject setObject:forKeyedSubscript:](v16, "setObject:forKeyedSubscript:", v23, v3);

    objc_msgSend(v14, "setObject:forKey:", v16, v17);
    goto LABEL_16;
  }
  if (objc_msgSend(v11, "containsObject:", v3))
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "dictionaryForKey:", CFSTR("ca.general.transaction.statistics.friend")));
    v16 = objc_msgSend(v18, "mutableCopy");

    if (!v16)
      v16 = sub_10004A5E4((uint64_t)SESDAnalyticsLogger, v11);
    v17 = CFSTR("ca.general.transaction.statistics.friend");
    goto LABEL_15;
  }
  v19 = objc_msgSend(v12, "containsObject:", v3);
  if ((_DWORD)v19)
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "dictionaryForKey:", CFSTR("ca.general.transaction.statistics")));
    v16 = objc_msgSend(v21, "mutableCopy");

    if (!v16)
      v16 = sub_10004A5E4((uint64_t)SESDAnalyticsLogger, v12);
    v17 = CFSTR("ca.general.transaction.statistics");
    goto LABEL_15;
  }
  v24 = SESDefaultLogObject(v19, v20);
  v16 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v29 = v3;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Unknown key %@", buf, 0xCu);
  }
LABEL_16:

  objc_sync_exit(v13);
}

void sub_10004A05C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004A084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD v28[9];
  _QWORD v29[9];
  uint8_t buf[4];
  id v31;

  v12 = a7;
  objc_opt_self(a1);
  v13 = objc_msgSend(objc_alloc((Class)KmlRoutingInformation), "initWithReaderInformation:", v12);
  v15 = SESDefaultLogObject(v13, v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v31 = v12;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "readerInfo - %@", buf, 0xCu);
  }

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "manufacturer"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "brand"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "regionString"));
  v26 = v12;
  v28[0] = CFSTR("type");
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2));
  v29[0] = v20;
  v28[1] = CFSTR("functionID");
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", a3));
  v29[1] = v21;
  v28[2] = CFSTR("actionID");
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a4));
  v29[2] = v22;
  v28[3] = CFSTR("executionStatus");
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a5));
  v28[4] = CFSTR("dataCenterCode");
  v28[5] = CFSTR("manufacturer");
  v29[3] = v23;
  v29[4] = v19;
  v28[6] = CFSTR("brand");
  v28[7] = CFSTR("status");
  v29[5] = v17;
  v29[6] = v18;
  v29[7] = &off_100322F08;
  v28[8] = CFSTR("subType");
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a6));
  v29[8] = v24;
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v29, v28, 9));
  +[CALogger postCAEventFor:eventInput:](CALogger, "postCAEventFor:eventInput:", CFSTR("com.apple.kml.rkeEvent"), v25);

}

void sub_10004A310(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_opt_self(a1);
  +[CALogger postCAEventFor:eventInput:](CALogger, "postCAEventFor:eventInput:", CFSTR("com.apple.sesd.keySyncEvent"), v3);

}

void sub_10004A360(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_opt_self(a1);
  +[CALogger postCAEventFor:eventInput:](CALogger, "postCAEventFor:eventInput:", CFSTR("com.apple.sesd.fidoEvent"), v3);

}

void sub_10004A3B0(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[4];
  _QWORD v10[4];

  v3 = HIDWORD(a2);
  objc_opt_self(a1);
  v9[0] = CFSTR("preconditionsMet");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2 & 1));
  v10[0] = v4;
  v9[1] = CFSTR("isSynchronized");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (a2 >> 8) & 1));
  v10[1] = v5;
  v9[2] = CFSTR("serverRecoveredTLK");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (a2 >> 16) & 1));
  v10[2] = v6;
  v9[3] = CFSTR("identityAge");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v3));
  v10[3] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 4));

  +[CALogger postCAEventFor:eventInput:](CALogger, "postCAEventFor:eventInput:", CFSTR("com.apple.sesd.keySyncStateStatistics"), v8);
}

void sub_10004A4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[2];
  _QWORD v9[2];

  objc_opt_self(a1);
  v8[0] = CFSTR("assetCompatibilityVersion");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2));
  v8[1] = CFSTR("assetContentVersion");
  v9[0] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
  v9[1] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 2));

  +[CALogger postCAEventFor:eventInput:](CALogger, "postCAEventFor:eventInput:", CFSTR("com.apple.sesd.generalStatistics"), v7);
}

id sub_10004A5E4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v3 = a2;
  objc_opt_self(a1);
  v4 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v3, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v12;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(v4, "setObject:forKey:", &off_100322F08, *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v9), (_QWORD)v11);
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v7);
  }

  return v4;
}

void sub_10004A724(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id obj;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _QWORD v28[20];
  uint8_t buf[4];
  id v30;

  v3 = a2;
  v4 = objc_opt_self(a1);
  v6 = SESDefaultLogObject(v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v30 = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Recording CA Aliro Daily Transaction Statistics events %@", buf, 0xCu);
  }

  v8 = sub_100048A48((uint64_t)SESDAnalyticsLogger);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v28[0] = CFSTR("auxReaderKeyTxCount");
  v28[1] = CFSTR("btConnectionCount");
  v28[2] = CFSTR("btConnectionDuration");
  v28[3] = CFSTR("deviceInitatedRangingCount");
  v28[4] = CFSTR("deviceInitatedSuspendRangingCount");
  v28[5] = CFSTR("fastTxAttemptedCount");
  v28[6] = CFSTR("lockInitiatedSuspendRangingCount");
  v28[7] = CFSTR("lockInitiatedResumeRangingCount");
  v28[8] = CFSTR("primaryReaderKeyTxCount");
  v28[9] = CFSTR("rangingDuration");
  v28[10] = CFSTR("seDuration");
  v28[11] = CFSTR("standardTxAttemptedCount");
  v28[12] = CFSTR("stepUpTxAttemptedCount");
  v28[13] = CFSTR("successfulAliroTxCount");
  v28[14] = CFSTR("successfulFastTxCount");
  v28[15] = CFSTR("successfulStandardTxCount");
  v28[16] = CFSTR("successfulStepUpTxCount");
  v28[17] = CFSTR("suspendedDuration");
  v28[18] = CFSTR("timeSyncProcedure1Count");
  v28[19] = CFSTR("txCountAttempted");
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v28, 20));
  obj = v9;
  objc_sync_enter(obj);
  v21 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "dictionaryForKey:", CFSTR("ca.aliro.daily.transaction.statistics")));
  v11 = objc_msgSend(v10, "mutableCopy");

  if (!v11)
    v11 = sub_10004A5E4((uint64_t)SESDAnalyticsLogger, v20);
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v12 = v3;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v13; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v14)
          objc_enumerationMutation(v12);
        v16 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v16));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v16));
        v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)objc_msgSend(v18, "unsignedIntegerValue")+ (_QWORD)objc_msgSend(v17, "unsignedIntegerValue")));
        objc_msgSend(v11, "setObject:forKeyedSubscript:", v19, v16);

      }
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v13);
  }

  objc_msgSend(v21, "setObject:forKey:", v11, CFSTR("ca.aliro.daily.transaction.statistics"));
  objc_sync_exit(obj);

}

void sub_10004AA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10004AAB4(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  id v16;
  id obj;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  id v23;
  _BYTE v24[128];
  _QWORD v25[20];

  objc_opt_self(a1);
  v25[0] = CFSTR("auxReaderKeyTxCount");
  v25[1] = CFSTR("btConnectionCount");
  v25[2] = CFSTR("btConnectionDuration");
  v25[3] = CFSTR("deviceInitatedRangingCount");
  v25[4] = CFSTR("deviceInitatedSuspendRangingCount");
  v25[5] = CFSTR("fastTxAttemptedCount");
  v25[6] = CFSTR("lockInitiatedSuspendRangingCount");
  v25[7] = CFSTR("lockInitiatedResumeRangingCount");
  v25[8] = CFSTR("primaryReaderKeyTxCount");
  v25[9] = CFSTR("rangingDuration");
  v25[10] = CFSTR("seDuration");
  v25[11] = CFSTR("standardTxAttemptedCount");
  v25[12] = CFSTR("stepUpTxAttemptedCount");
  v25[13] = CFSTR("successfulAliroTxCount");
  v25[14] = CFSTR("successfulFastTxCount");
  v25[15] = CFSTR("successfulStandardTxCount");
  v25[16] = CFSTR("successfulStepUpTxCount");
  v25[17] = CFSTR("suspendedDuration");
  v25[18] = CFSTR("timeSyncProcedure1Count");
  v25[19] = CFSTR("txCountAttempted");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v25, 20));
  v1 = sub_100048A48((uint64_t)SESDAnalyticsLogger);
  obj = (id)objc_claimAutoreleasedReturnValue(v1);
  objc_sync_enter(obj);
  v16 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "dictionaryForKey:", CFSTR("ca.aliro.daily.transaction.statistics")));
  v3 = objc_msgSend(v2, "mutableCopy");
  if (!v2)
    v2 = sub_10004A5E4((uint64_t)SESDAnalyticsLogger, v15);
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v6)
          objc_enumerationMutation(v4);
        v8 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v8));
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", +[SignificantDigits getValueWithSignificantDigits:value:](_TtC10seserviced17SignificantDigits, "getValueWithSignificantDigits:value:", 2, objc_msgSend(v9, "intValue"))));
        objc_msgSend(v3, "setObject:forKeyedSubscript:", v10, v8);

      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
    }
    while (v5);
  }

  v13 = SESDefaultLogObject(v11, v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v23 = v3;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Posting CA Aliro Daily Statistics events %@", buf, 0xCu);
  }

  +[CALogger postCAEventFor:eventInput:](CALogger, "postCAEventFor:eventInput:", CFSTR("com.apple.sesd.dailyAliroTransactionEvent"), v3);
  objc_msgSend(v16, "removeObjectForKey:", CFSTR("ca.aliro.daily.transaction.statistics"));

  objc_sync_exit(obj);
}

void sub_10004AE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10004AE38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[4];
  _QWORD v20[6];
  _QWORD v21[6];

  objc_opt_self(a1);
  if (!(a3 | a2))
    return;
  v7 = sub_100048A48((uint64_t)SESDAnalyticsLogger);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v21[0] = CFSTR("ownerPassiveEntryTxCount");
  v21[1] = CFSTR("ownerNoDIPassiveEntryTxCount");
  v21[2] = CFSTR("ownerWalkAwayLockCount");
  v21[3] = CFSTR("ownerWalletRKECount");
  v21[4] = CFSTR("owner3rdPartyRKECount");
  v21[5] = CFSTR("ownerPassthroughCount");
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v21, 6));
  v20[0] = CFSTR("friendPassiveEntryTxCount");
  v20[1] = CFSTR("friendNoDIPassiveEntryTxCount");
  v20[2] = CFSTR("friendWalkAwayLockCount");
  v20[3] = CFSTR("friendWalletRKECount");
  v20[4] = CFSTR("friend3rdPartyRKECount");
  v20[5] = CFSTR("friendPassthroughCount");
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v20, 6));
  v19[0] = CFSTR("unlockNeededForCarActionCount");
  v19[1] = CFSTR("connectionCount");
  v19[2] = CFSTR("disconnectionCount");
  v19[3] = CFSTR("deviceIntentCount");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v19, 4));
  v10 = v8;
  objc_sync_enter(v10);
  v11 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
  v12 = v11;
  if (a2
    && (a2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "dictionaryForKey:", CFSTR("ca.general.transaction.statistics.owner")))) == 0)
  {
    a2 = (uint64_t)sub_10004A5E4((uint64_t)SESDAnalyticsLogger, v18);
    if (a3)
    {
LABEL_5:
      a3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "dictionaryForKey:", CFSTR("ca.general.transaction.statistics.friend")));
      if (!a3)
        a3 = (uint64_t)sub_10004A5E4((uint64_t)SESDAnalyticsLogger, v17);
    }
  }
  else if (a3)
  {
    goto LABEL_5;
  }
  v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "dictionaryForKey:", CFSTR("ca.general.transaction.statistics")));
  if (!v13)
    v13 = sub_10004A5E4((uint64_t)SESDAnalyticsLogger, v9);
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", (char *)objc_msgSend((id)a2, "count")+ (_QWORD)objc_msgSend((id)a3, "count")+ (unint64_t)objc_msgSend(v13, "count")));
  v15 = v14;
  if (a2)
    objc_msgSend(v14, "addEntriesFromDictionary:", a2);
  if (a3)
    objc_msgSend(v15, "addEntriesFromDictionary:", a3);
  objc_msgSend(v15, "addEntriesFromDictionary:", v13);
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a4));
  objc_msgSend(v15, "setObject:forKeyedSubscript:", v16, CFSTR("production"));

  +[CALogger postCAEventFor:eventInput:](CALogger, "postCAEventFor:eventInput:", CFSTR("com.apple.kml.generalTransactionStatisticsEvent"), v15);
  objc_msgSend(v12, "removeObjectForKey:", CFSTR("ca.general.transaction.statistics"));
  objc_msgSend(v12, "removeObjectForKey:", CFSTR("ca.general.transaction.statistics.friend"));
  objc_msgSend(v12, "removeObjectForKey:", CFSTR("ca.general.transaction.statistics.owner"));

  objc_sync_exit(v10);
}

void sub_10004B194(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004B1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, unsigned int a17)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  _QWORD v41[16];
  _QWORD v42[16];

  objc_opt_self(a1);
  v41[0] = CFSTR("deviceStatus");
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2));
  v42[0] = v40;
  v41[1] = CFSTR("transactionMode");
  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3));
  v42[1] = v39;
  v41[2] = CFSTR("keyType");
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a4));
  v42[2] = v38;
  v41[3] = CFSTR("disconnectReason");
  v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a5));
  v42[3] = v37;
  v41[4] = CFSTR("lockStatus");
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a6));
  v42[4] = v36;
  v41[5] = CFSTR("unlockCount");
  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a7));
  v42[5] = v35;
  v41[6] = CFSTR("unlockFromOtherSourceCount");
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a8));
  v42[6] = v34;
  v41[7] = CFSTR("deviceInitatedRangingAttemptsCount");
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a9));
  v42[7] = v24;
  v41[8] = CFSTR("rangingAttemptsCount");
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a10));
  v42[8] = v25;
  v41[9] = CFSTR("timeSyncProcedure1Count");
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a11));
  v42[9] = v26;
  v41[10] = CFSTR("btTimeExtensionInitiatedByDeviceCount");
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a12));
  v42[10] = v27;
  v41[11] = CFSTR("btTimeExtensionInitiatedByLockCount");
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a13));
  v42[11] = v28;
  v41[12] = CFSTR("btOutOfOrderMessageCount");
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a14));
  v42[12] = v29;
  v41[13] = CFSTR("stepUpDuration");
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a15));
  v42[13] = v30;
  v41[14] = CFSTR("rangingDuration");
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a16));
  v42[14] = v31;
  v41[15] = CFSTR("btConnectionDuration");
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a17));
  v42[15] = v32;
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v42, v41, 16));

  +[CALogger postCAEventFor:eventInput:](CALogger, "postCAEventFor:eventInput:", CFSTR("com.apple.sesd.aliroSessionEvent"), v33);
}

void sub_10004B560(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  _QWORD v26[7];
  _QWORD v27[7];

  objc_opt_self(a1);
  v26[0] = CFSTR("deviceStatus");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2));
  v27[0] = v15;
  v26[1] = CFSTR("lockStatus");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3));
  v27[1] = v16;
  v26[2] = CFSTR("intentFallbackTriggered");
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a5));
  v27[2] = v17;
  v26[3] = CFSTR("rangingExceptionTriggered");
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a6));
  v27[3] = v18;
  v26[4] = CFSTR("deviceInitatedRangingAttemptsCount");
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a8));
  v27[4] = v19;
  v26[5] = CFSTR("rangingAttemptsCount");
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a7));
  v27[5] = v20;
  v26[6] = CFSTR("rangingDuration");
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a9));
  v27[6] = v21;
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 7));
  v23 = objc_msgSend(v22, "mutableCopy");

  if (a4 != 0xFFFF)
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:"));
    objc_msgSend(v23, "setObject:forKeyedSubscript:", v24, CFSTR("unlockFromOtherSource"));

  }
  +[CALogger postCAEventFor:eventInput:](CALogger, "postCAEventFor:eventInput:", CFSTR("com.apple.sesd.aliroTransactionEvent"), v23);

}

id sub_10004B798(uint64_t a1, _QWORD *a2)
{
  void *v3;
  id v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  if (!a1)
    return 0;
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = sub_10004B8C8;
  v17 = sub_10004B8D8;
  v18 = 0;
  v7 = 0;
  v8 = &v7;
  v9 = 0x3032000000;
  v10 = sub_10004B8C8;
  v11 = sub_10004B8D8;
  v12 = 0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10004B8E0;
  v6[3] = &unk_100303600;
  v6[4] = &v7;
  v6[5] = &v13;
  sub_100016A08(a1, v6);
  v3 = (void *)v14[5];
  if (v3)
  {
    v4 = 0;
    if (a2)
      *a2 = objc_retainAutorelease(v3);
  }
  else
  {
    v4 = (id)v8[5];
  }
  _Block_object_dispose(&v7, 8);

  _Block_object_dispose(&v13, 8);
  return v4;
}

void sub_10004B8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004B8C8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10004B8D8(uint64_t a1)
{

}

void sub_10004B8E0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id obj;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UuidToEndpointId fetchRequest](UuidToEndpointId, "fetchRequest"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v5 + 40);
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &obj));

  objc_storeStrong((id *)(v5 + 40), obj);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

id sub_10004B984(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void **v15;
  uint64_t v16;
  id (*v17)(uint64_t, void *);
  void *v18;
  id v19;
  id v20;

  v7 = a2;
  v8 = a3;
  if (a1)
  {
    v9 = sub_10004B798(a1, a4);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if (*a4)
    {
      v11 = 0;
    }
    else
    {
      v15 = _NSConcreteStackBlock;
      v16 = 3221225472;
      v17 = sub_10004BA80;
      v18 = &unk_1003049D8;
      v19 = v8;
      v20 = v7;
      v12 = Find(v10, &v15);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "endpointId", v15, v16, v17, v18));

    }
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

id sub_10004BA80(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "clientName"));
  if (objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32)))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
    v6 = objc_msgSend(v5, "isEqual:", *(_QWORD *)(a1 + 40));

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

id sub_10004BAF8(id a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  _QWORD v11[5];
  id v12;
  id v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    v16 = 0;
    v17 = &v16;
    v18 = 0x3032000000;
    v19 = sub_10004B8C8;
    v20 = sub_10004B8D8;
    v21 = 0;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10004BC38;
    v11[3] = &unk_100304A00;
    v11[4] = a1;
    v12 = v8;
    v13 = v9;
    v15 = &v16;
    v14 = v7;
    sub_1000168E4((uint64_t)a1, v11);
    a1 = (id)v17[5];

    _Block_object_dispose(&v16, 8);
  }

  return a1;
}

void sub_10004BC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004BC38(_QWORD *a1, void *a2)
{
  id *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  unsigned __int8 v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id obj;

  v3 = a2;
  v4 = a1[4];
  v5 = (void *)a1[5];
  v6 = (void *)a1[6];
  v7 = *(_QWORD *)(a1[8] + 8);
  obj = *(id *)(v7 + 40);
  v8 = sub_10004B984(v4, v5, v6, &obj);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  objc_storeStrong((id *)(v7 + 40), obj);
  if (*(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 40) | v9)
  {
    sub_10002BB14(v3);
  }
  else
  {
    v10 = sub_10002BA88((uint64_t)v3);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:](NSEntityDescription, "insertNewObjectForEntityForName:inManagedObjectContext:", CFSTR("UuidToEndpointId"), v11));

    objc_msgSend(v12, "setEndpointId:", a1[7]);
    objc_msgSend(v12, "setUuid:", a1[5]);
    objc_msgSend(v12, "setClientName:", a1[6]);
    v13 = *(_QWORD *)(a1[8] + 8);
    v19 = *(id *)(v13 + 40);
    v14 = objc_msgSend(v12, "validateForInsert:", &v19);
    objc_storeStrong((id *)(v13 + 40), v19);
    if ((v14 & 1) != 0)
    {
      v15 = sub_10002BA94((uint64_t)v3);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      v17 = *(_QWORD *)(a1[8] + 8);
      v18 = *(void **)(v17 + 40);
      *(_QWORD *)(v17 + 40) = v16;

    }
    else
    {
      sub_10002BB14(v3);
    }

  }
}

id sub_10004BD88(id a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD v14[4];
  id v15;
  uint64_t *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id obj;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v21 = 0;
    v22 = &v21;
    v23 = 0x3032000000;
    v24 = sub_10004B8C8;
    v25 = sub_10004B8D8;
    v26 = 0;
    obj = 0;
    v7 = sub_10004B798((uint64_t)a1, &obj);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    objc_storeStrong(&v26, obj);
    v9 = (void *)v22[5];
    if (v9)
    {
      a1 = v9;
    }
    else
    {
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_10004BF40;
      v17[3] = &unk_1003049D8;
      v18 = v6;
      v19 = v5;
      v10 = Find(v8, v17);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v12 = v11;
      if (v11)
      {
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_10004BFB8;
        v14[3] = &unk_1003036E0;
        v15 = v11;
        v16 = &v21;
        sub_1000168E4((uint64_t)a1, v14);
        a1 = (id)v22[5];

      }
      else
      {
        a1 = 0;
      }

    }
    _Block_object_dispose(&v21, 8);

  }
  return a1;
}

void sub_10004BF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10004BF40(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "clientName"));
  if (objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32)))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
    v6 = objc_msgSend(v5, "isEqual:", *(_QWORD *)(a1 + 40));

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_10004BFB8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = a2;
  v4 = sub_10002BA88((uint64_t)v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v5, "deleteObject:", *(_QWORD *)(a1 + 32));

  v6 = sub_10002BA94((uint64_t)v3);
  v7 = objc_claimAutoreleasedReturnValue(v6);

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

id sub_10004C020(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  id *v5;
  id v6;
  id *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned __int8 v17;
  void *v18;
  id v19;
  id v20;
  id v22;
  id v23;
  uint8_t buf[4];
  void *v25;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000809434343444b467631"), "hexStringAsData"));
  v23 = 0;
  v3 = sub_10004FBC0(v1, v2, &v23);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (id *)v23;

  if (v4)
  {
    v6 = v4;
  }
  else
  {
    v7 = sub_10005582C(v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVsWithData:](SESTLV, "TLVsWithData:", v8));

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "find:", &stru_100304A20));
    v12 = SESDefaultLogObject(v10, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "value"));
      *(_DWORD *)buf = 138412290;
      v25 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Got PAKE version: %@", buf, 0xCu);

    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "value"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("0100"), "hexStringAsData"));
    v17 = objc_msgSend(v15, "isEqualToData:", v16);

    if ((v17 & 1) != 0)
    {
      v6 = 0;
    }
    else
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("0100"), "hexStringAsData"));
      v22 = 0;
      v19 = sub_10004F8D8(v1, 128, 54, 0, 0, v18, 0, &v22);
      v20 = v22;

      v6 = v20;
    }

  }
  return v6;
}

BOOL sub_10004C244(id a1, SESTLV *a2)
{
  return -[SESTLV tag](a2, "tag") == 90;
}

NSObject **sub_10004C264(NSObject **a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  dispatch_source_t v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD handler[4];
  id v12;
  objc_super v13;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v13.receiver = a1;
    v13.super_class = (Class)SESTimer;
    a1 = (NSObject **)objc_msgSendSuper2(&v13, "init");
    if (a1)
    {
      v7 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 1uLL, 0, v5);
      v8 = a1[1];
      a1[1] = v7;

      v9 = a1[1];
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_10004C354;
      handler[3] = &unk_100303300;
      v12 = v6;
      dispatch_source_set_event_handler(v9, handler);
      dispatch_activate(a1[1]);
      *((_BYTE *)a1 + 16) = 0;

    }
  }

  return a1;
}

uint64_t sub_10004C354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = SESDefaultLogObject(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Invoking timer CB", v7, 2u);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10004C410(uint64_t a1, double a2)
{
  double v2;
  double v3;

  if (a1)
  {
    v2 = 0.001;
    if (a2 / 10.0 >= 0.001)
      v2 = a2 / 10.0;
    if (a2 / 10.0 <= 60.0)
      v3 = v2;
    else
      v3 = 60.0;
    sub_10004C444(a1, a2, v3);
  }
}

void sub_10004C444(uint64_t a1, double a2, double a3)
{
  NSObject *v4;
  int64_t v5;
  dispatch_time_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  int64_t v13;
  __int16 v14;
  uint64_t v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 16) = 1;
    v4 = *(NSObject **)(a1 + 8);
    v5 = (uint64_t)(a2 * 1000000000.0);
    v6 = dispatch_time(0, v5);
    dispatch_source_set_timer(v4, v6, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)(a3 * 1000000000.0));
    v10 = SESDefaultLogObject(v7, v8, v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = 134218240;
      v13 = v5;
      v14 = 2048;
      v15 = (uint64_t)(a3 * 1000000000.0);
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Timer set for interval %lld -- leeway %llu", (uint8_t *)&v12, 0x16u);
    }

  }
}

void sub_10004C548(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint8_t v6[16];

  if (a1)
  {
    *(_BYTE *)(a1 + 16) = 0;
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v4 = SESDefaultLogObject(v1, v2, v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Timer cancelled", v6, 2u);
    }

  }
}

BOOL sub_10004C5C8(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 16) != 0;
  return result;
}

void sub_10004C628(id a1)
{
  EventPublisher *v1;
  void *v2;
  dispatch_queue_attr_t v3;
  NSObject *v4;
  dispatch_queue_t v5;
  id v6;
  id v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  NSObject *v11;
  NFSecureXPCEventPublisher *v12;
  void *v13;
  NFSecureXPCEventPublisher *v14;
  int v15;
  const __CFString *v16;

  v1 = objc_opt_new(EventPublisher);
  v2 = (void *)qword_10034BBC0;
  qword_10034BBC0 = (uint64_t)v1;

  v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = dispatch_queue_create("com.apple.secureelementservice.event.publisher.queue", v4);
  objc_msgSend((id)qword_10034BBC0, "setEventPublisherQueue:", v5);

  v6 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
  v7 = objc_msgSend(v6, "BOOLForKey:", CFSTR("debug.use.test.event.port"));
  if ((_DWORD)v7)
    v9 = CFSTR("com.apple.secureelementservice.test.events");
  else
    v9 = CFSTR("com.apple.passd.nf-events");
  v10 = SESDefaultLogObject(v7, v8);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    v15 = 138412290;
    v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Posting xpc events to %@", (uint8_t *)&v15, 0xCu);
  }

  v12 = [NFSecureXPCEventPublisher alloc];
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_10034BBC0, "eventPublisherQueue"));
  v14 = -[NFSecureXPCEventPublisher initWithMachPort:queue:](v12, "initWithMachPort:queue:", v9, v13);
  objc_msgSend((id)qword_10034BBC0, "setEventPublisher:", v14);

}

_QWORD *sub_10004CFC0(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;

  v3 = a2;
  objc_opt_self(a1);
  v4 = sub_10004D00C([SEProxyAdapter alloc], v3);

  return v4;
}

_QWORD *sub_10004D00C(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  objc_super v7;

  v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)SEProxyAdapter;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "synchronousRemoteObjectProxyWithErrorHandler:", &stru_100304A80));
      v5 = (void *)a1[1];
      a1[1] = v4;

    }
  }

  return a1;
}

void sub_10004D088(id a1, NSError *a2)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = SESDefaultLogObject(a1, a2);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "failed make proxy synchronous?", v4, 2u);
  }

}

void sub_10004D1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004D21C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10004D22C(uint64_t a1)
{

}

void sub_10004D234(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v11 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;

}

id sub_10004D74C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dumpState");
}

id sub_10004D754(uint64_t a1)
{
  +[SESAlarm registerAlarm:handler:](SESAlarm, "registerAlarm:handler:", CFSTR("com.apple.seserviced.download.catalog"), *(_QWORD *)(a1 + 32));
  +[SESAlarm registerAlarm:handler:](SESAlarm, "registerAlarm:handler:", CFSTR("com.apple.seserviced.download.asset"), *(_QWORD *)(a1 + 32));
  +[SESDarwinNotificationMonitor registerDelegate:forEvent:](SESDarwinNotificationMonitor, "registerDelegate:forEvent:", *(_QWORD *)(a1 + 32), CFSTR("com.apple.MobileAsset.SecureElementServiceAssets.ma.cached-metadata-updated"));
  +[SESDarwinNotificationMonitor registerDelegate:forEvent:](SESDarwinNotificationMonitor, "registerDelegate:forEvent:", *(_QWORD *)(a1 + 32), CFSTR("com.apple.MobileAsset.SecureElementServiceAssets.ma.new-asset-installed"));
  objc_msgSend(*(id *)(a1 + 32), "queryMA");
  return objc_msgSend(*(id *)(a1 + 32), "maybeQueryMetadata");
}

id sub_10004D850(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  id result;
  int v7;
  uint64_t v8;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Handling alarm %@", (uint8_t *)&v7, 0xCu);
  }

  if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("com.apple.seserviced.download.catalog")))
    return objc_msgSend(*(id *)(a1 + 40), "maybeQueryMetadata");
  result = objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("com.apple.seserviced.download.asset"));
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 40), "queryMA");
  return result;
}

id sub_10004D9AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v7;
  uint64_t v8;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Handling notification %@", (uint8_t *)&v7, 0xCu);
  }

  return objc_msgSend(*(id *)(a1 + 40), "queryMA");
}

void sub_10004DF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD v7[6];
  uint8_t buf[4];
  uint64_t v9;

  v4 = SESDefaultLogObject(a1, a2);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "catalog download result %ld", buf, 0xCu);
  }

  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10004E008;
  v7[3] = &unk_100304AD0;
  v7[4] = *(_QWORD *)(a1 + 32);
  v7[5] = a2;
  dispatch_async(v6, v7);

}

void sub_10004E008(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  void *v14;

  v3 = a1 + 32;
  v2 = *(void **)(a1 + 32);
  if (*(_QWORD *)(v3 + 8))
  {
    objc_msgSend(v2, "retryWithBackoff:", CFSTR("com.apple.seserviced.download.catalog"));
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "userDefaults"));
    objc_msgSend(v4, "removeObjectForKey:", CFSTR("catalogDownloadStartedOn"));

    objc_msgSend(*(id *)(a1 + 32), "setErrorCount:", 0);
    v5 = objc_opt_self(*(_QWORD *)(a1 + 32));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    objc_msgSend(v6, "metadataQueryInterval");
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:"));

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userDefaults"));
    objc_msgSend(v8, "setObject:forKey:", v7, CFSTR("nextMetadataCheck"));

    objc_msgSend(*(id *)(a1 + 32), "metadataQueryInterval");
    v9 = +[SESAlarm setAlarm:secondsFromNow:](SESAlarm, "setAlarm:secondsFromNow:", CFSTR("com.apple.seserviced.download.catalog"));
    v11 = SESDefaultLogObject(v9, v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = 138412290;
      v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Metadata downloaded success, next check %@", (uint8_t *)&v13, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "queryMA");
  }
}

void sub_10004E280(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void *v5;
  _QWORD block[5];
  id v7;
  uint64_t v8;

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10004E318;
  block[3] = &unk_100304B20;
  v5 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v8 = a2;
  v7 = v5;
  dispatch_async(v4, block);

}

id sub_10004E318(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handleQueryResult:query:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

void sub_10004E8D8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  void *v6;
  _QWORD block[5];
  id v8;
  uint64_t v9;

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10004E970;
  block[3] = &unk_100304B20;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v9 = a2;
  block[4] = v5;
  v8 = v6;
  dispatch_async(v4, block);

}

id sub_10004E970(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  int v10;
  uint64_t v11;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 48);
    v10 = 134217984;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Download result %ld", (uint8_t *)&v10, 0xCu);
  }

  v6 = *(_QWORD *)(a1 + 48);
  if (v6 != 10 && v6 != 0)
    return objc_msgSend(*(id *)(a1 + 32), "retryWithBackoff:", CFSTR("com.apple.seserviced.download.asset"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userDefaults"));
  objc_msgSend(v8, "removeObjectForKey:", CFSTR("assetDownloadStartedOn"));

  return objc_msgSend(*(id *)(a1 + 32), "handleAvailableAsset:", *(_QWORD *)(a1 + 40));
}

id sub_10004F0B8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint8_t v7[16];

  objc_msgSend(*(id *)(a1 + 32), "setUserInitiated:", 1);
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "removeObjectForKey:", CFSTR("nextMetadataCheck"));
  v4 = SESDefaultLogObject(v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Querying metadata on user initiated trigger", v7, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "queryMetadata");
}

id *sub_10004F2E8(id *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  __int16 v18[8];
  objc_super v19;

  v6 = a2;
  v7 = a3;
  if (a1)
  {
    v19.receiver = a1;
    v19.super_class = (Class)SecureElement;
    v8 = (id *)objc_msgSendSuper2(&v19, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 3, a2);
      *((_BYTE *)a1 + 32) = objc_msgSend(v6, "conformsToProtocol:", &OBJC_PROTOCOL___BackedByNFSession);
      objc_storeStrong(a1 + 6, a3);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[SecureElementManager getInstance](SecureElementManager, "getInstance"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "getNFManager"));
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "secureElementInfo"));
      v12 = a1[5];
      a1[5] = (id)v11;

      if (!a1[5])
      {
        v15 = SESDefaultLogObject(v13, v14);
        v16 = objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          v18[0] = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Refusing to initialize SE because NFManager has no info", (uint8_t *)v18, 2u);
        }

        a1 = 0;
      }
    }
  }

  return a1;
}

void sub_10004F544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004F568(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10004F578(uint64_t a1)
{

}

void sub_10004F580(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id obj;

  v2 = a1[5];
  v3 = *(void **)(a1[4] + 24);
  v4 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v4 + 40);
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "transceive:outError:", v2, &obj));
  objc_storeStrong((id *)(v4 + 40), obj);
  v6 = *(_QWORD *)(a1[6] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

id sub_10004F5F4(void *a1, uint64_t a2, _QWORD *a3)
{
  void *v4;
  id v5;
  void *v6;
  RAPDU *v7;
  void *v8;
  uint64_t v9;
  id v11;

  if (!a1)
    return 0;
  v11 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "transceive:error:", a2, &v11));
  v5 = v11;
  v6 = v5;
  if (!v4 || v5)
  {
    if (a3)
    {
      v9 = SESEnsureError(v5);
      v8 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue(v9);
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v7 = sub_100055730((uint64_t)RAPDU, v4, a3);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  }

  return v8;
}

id sub_10004F6A8(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  RAPDU *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  id v29;

  v5 = a2;
  if (!a1)
  {
    v17 = 0;
    goto LABEL_16;
  }
  v29 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "transceive:error:", v5, &v29));
  v7 = v29;
  v9 = v7;
  if (v6 && !v7)
  {
    v28 = 0;
    v10 = sub_100055730((uint64_t)RAPDU, v6, &v28);
    v11 = (id)objc_claimAutoreleasedReturnValue(v10);
    v12 = v28;
    v9 = v12;
    if (v12)
    {
      if (!a3)
      {
LABEL_8:
        v17 = 0;
        goto LABEL_14;
      }
      v14 = SESDefaultLogObject(v12, v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      v16 = SESCreateAndLogError(v9, v15, SESErrorDomain, 0, CFSTR("Wrapping %@"));
      *a3 = (id)objc_claimAutoreleasedReturnValue(v16);
    }
    else
    {
      if (sub_100055868((uint64_t)v11) == 36864
        || (v20 = sub_100055868((uint64_t)v11), (v20 & 0xFF00) == 0x6300))
      {
        v11 = v11;
        v17 = v11;
        goto LABEL_14;
      }
      if (!a3)
        goto LABEL_8;
      v23 = SESDefaultLogObject(v20, v21);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v23);
      v24 = SESErrorDomain;
      sub_100055868((uint64_t)v11);
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "asHexString"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "asHexString"));
      v25 = SESCreateAndLogError(0, v15, v24, 0, CFSTR("Error status word 0x%x on rsp %@ for cmd %@"));
      *a3 = (id)objc_claimAutoreleasedReturnValue(v25);

    }
    goto LABEL_8;
  }
  if (!a3)
  {
    v17 = 0;
    goto LABEL_15;
  }
  v18 = SESDefaultLogObject(v7, v8);
  v11 = (id)objc_claimAutoreleasedReturnValue(v18);
  v19 = SESCreateAndLogError(v9, v11, SESErrorDomain, 0, CFSTR("Failed to send APDU %@ %@"));
  v17 = 0;
  *a3 = (id)objc_claimAutoreleasedReturnValue(v19);
LABEL_14:

LABEL_15:
LABEL_16:

  return v17;
}

id sub_10004F8D8(void *a1, char a2, char a3, char a4, char a5, void *a6, char a7, _QWORD *a8)
{
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _BYTE *v25;
  id v26;
  id v27;
  char v29;

  v15 = a6;
  v16 = v15;
  if (a1)
  {
    v17 = objc_msgSend(v15, "length");
    if ((unint64_t)v17 < 0x100)
    {
      v29 = a7;
      if (objc_msgSend(v16, "length"))
        v24 = (uint64_t)objc_msgSend(v16, "length") + 6;
      else
        v24 = 5;
      v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", v24)));
      v25 = objc_msgSend(v20, "mutableBytes");
      *v25 = a2;
      v25[1] = a3;
      v25[2] = a4;
      v25[3] = a5;
      if (objc_msgSend(v16, "length"))
      {
        v25[4] = objc_msgSend(v16, "length");
        v26 = objc_retainAutorelease(v16);
        memcpy(v25 + 5, objc_msgSend(v26, "bytes"), (size_t)objc_msgSend(v26, "length"));
      }
      v25[v24 - 1] = v29;
      v27 = sub_10004F6A8(a1, v20, a8);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v27);
      goto LABEL_12;
    }
    if (a8)
    {
      v19 = SESDefaultLogObject(v17, v18);
      v20 = (id)objc_claimAutoreleasedReturnValue(v19);
      v21 = SESErrorDomain;
      objc_msgSend(v16, "length");
      v22 = SESCreateAndLogError(0, v20, v21, 1, CFSTR("Can't regular length transceive %u bytes"));
      v23 = 0;
      *a8 = (id)objc_claimAutoreleasedReturnValue(v22);
LABEL_12:

      goto LABEL_13;
    }
  }
  v23 = 0;
LABEL_13:

  return v23;
}

id sub_10004FA80(void *a1, char a2, char a3, char a4, char a5, void *a6, unsigned int a7, _QWORD *a8)
{
  id v14;
  id v15;
  id v16;
  char *v17;
  id v18;
  id v19;
  void *v20;

  if (a1)
  {
    v14 = a6;
    v15 = objc_msgSend(v14, "length");
    v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", (char *)v15 + 9)));
    v17 = (char *)objc_msgSend(v16, "mutableBytes");
    *v17 = a2;
    v17[1] = a3;
    v17[2] = a4;
    v17[3] = a5;
    *(_WORD *)(v17 + 5) = bswap32(objc_msgSend(v14, "length")) >> 16;
    v18 = objc_retainAutorelease(v14);
    memcpy(v17 + 7, objc_msgSend(v18, "bytes"), (size_t)objc_msgSend(v18, "length"));
    *(_WORD *)&v17[(_QWORD)v15 + 7] = __rev16(a7);

    v19 = sub_10004F6A8(a1, v16, a8);
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);

  }
  else
  {
    v20 = 0;
  }
  return v20;
}

id sub_10004FBA0(void *a1, void *a2)
{
  id v2;

  if (a1)
  {
    v2 = sub_10004FBC0(a1, a2, 0);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v2);
  }
  return a1;
}

id sub_10004FBC0(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD v10[5];
  id v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;

  v5 = a2;
  v6 = v5;
  if (a1)
  {
    v20 = 0;
    v21 = &v20;
    v22 = 0x3032000000;
    v23 = sub_10004F568;
    v24 = sub_10004F578;
    v25 = 0;
    v14 = 0;
    v15 = &v14;
    v16 = 0x3032000000;
    v17 = sub_10004F568;
    v18 = sub_10004F578;
    v19 = 0;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10004FD2C;
    v10[3] = &unk_100304C38;
    v10[4] = a1;
    v11 = v5;
    v12 = &v14;
    v13 = &v20;
    objc_msgSend(a1, "sync:", v10);
    v7 = (void *)v15[5];
    if (!v7 || v21[5])
    {
      v8 = SESEnsureError(v21[5]);
      a1 = (void *)objc_claimAutoreleasedReturnValue(v8);
    }
    else
    {
      a1 = 0;
      if (a3)
        *a3 = objc_retainAutorelease(v7);
    }

    _Block_object_dispose(&v14, 8);
    _Block_object_dispose(&v20, 8);

  }
  return a1;
}

void sub_10004FD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10004FD2C(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id *v12;
  uint64_t v13;
  RAPDU *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  const __CFString *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  id obj;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "isEqualToData:", *(_QWORD *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(id *)(v3 + 16));
    return;
  }
  v4 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 16);
  *(_QWORD *)(v5 + 16) = 0;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithBytes:length:](NSMutableData, "dataWithBytes:length:", &unk_100287DD4, 4));
  objc_msgSend(v7, "appendU8:", objc_msgSend(*(id *)(a1 + 40), "length"));
  objc_msgSend(v7, "appendData:", *(_QWORD *)(a1 + 40));
  v8 = *(void **)(a1 + 32);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v9 + 40);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "transceive:error:", v7, &obj));
  objc_storeStrong((id *)(v9 + 40), obj);
  if (v10)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v13 = *(_QWORD *)(v11 + 40);
    v12 = (id *)(v11 + 40);
    if (!v13)
    {
      v41 = 0;
      v14 = sub_100055730((uint64_t)RAPDU, v10, &v41);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      objc_storeStrong(v12, v41);
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v17 = *(void **)(v16 + 40);
      *(_QWORD *)(v16 + 40) = v15;

      v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      if (v18)
      {
        if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
        {
          v19 = sub_100055868(v18);
          if ((_DWORD)v19 == 27033)
          {
            v21 = SESDefaultLogObject(v19, v20);
            v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
            v23 = SESErrorDomain;
            v24 = CFSTR("Applet %@ locked");
            v25 = v22;
            v26 = 9;
          }
          else
          {
            v27 = sub_100055868(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
            if ((_DWORD)v27 == 27266)
            {
              v29 = SESDefaultLogObject(v27, v28);
              v22 = (void *)objc_claimAutoreleasedReturnValue(v29);
              v23 = SESErrorDomain;
              v24 = CFSTR("Applet %@ not present");
              v25 = v22;
              v26 = 11;
            }
            else
            {
              v30 = sub_100055868(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
              if ((_DWORD)v30 == 36864)
              {
                objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 8), *(id *)(a1 + 40));
                v32 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
                v33 = *(_QWORD *)(a1 + 32);
                v34 = v32;
                v22 = *(void **)(v33 + 16);
                *(_QWORD *)(v33 + 16) = v34;
LABEL_17:

                goto LABEL_5;
              }
              v35 = SESDefaultLogObject(v30, v31);
              v22 = (void *)objc_claimAutoreleasedReturnValue(v35);
              v36 = SESErrorDomain;
              sub_100055868(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
              v24 = CFSTR("Failed to select AID %@ 0x%X");
              v25 = v22;
              v23 = v36;
              v26 = 0;
            }
          }
          v37 = SESCreateAndLogError(0, v25, v23, v26, v24);
          v38 = objc_claimAutoreleasedReturnValue(v37);
          v39 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          v40 = *(void **)(v39 + 40);
          *(_QWORD *)(v39 + 40) = v38;

          goto LABEL_17;
        }
      }
    }
  }
LABEL_5:

}

id sub_10004FFE4(id a1, void *a2, int a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  id v11;
  _QWORD v12[5];

  v7 = a2;
  if (a1)
  {
    if (a3)
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_100050634;
      v12[3] = &unk_100302AA0;
      v12[4] = a1;
      objc_msgSend(a1, "sync:", v12);
    }
    v11 = 0;
    v8 = sub_10004FBC0(a1, v7, &v11);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    a1 = v11;
    if (a4)
      *a4 = objc_retainAutorelease(v9);

  }
  return a1;
}

id sub_1000500A8(id result)
{
  _QWORD v1[5];

  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_100050634;
    v1[3] = &unk_100302AA0;
    v1[4] = result;
    return objc_msgSend(result, "sync:", v1);
  }
  return result;
}

BOOL sub_1000500FC(void *a1, void *a2)
{
  id v2;
  id v3;
  void *v4;
  _BOOL8 v5;
  id v7;

  if (!a1)
    return 0;
  v7 = 0;
  v2 = sub_10004FBC0(a1, a2, &v7);
  v3 = v7;
  v4 = v3;
  if (v3)
    v5 = sub_100055868((uint64_t)v3) != 27266;
  else
    v5 = 0;

  return v5;
}

BOOL sub_100050170(void *a1, _QWORD *a2)
{
  _BOOL8 v3;
  _QWORD v5[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
    return 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 4279897;
  v6 = 0;
  v7 = &v6;
  v8 = 0x3032000000;
  v9 = sub_10004F568;
  v10 = sub_10004F578;
  v11 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000502AC;
  v5[3] = &unk_100304C60;
  v5[4] = a1;
  v5[5] = &v6;
  v5[6] = &v12;
  objc_msgSend(a1, "sync:", v5);
  if (a2)
    *a2 = objc_retainAutorelease((id)v7[5]);
  v3 = v13[3] == 1 && v7[5] == 0;
  _Block_object_dispose(&v6, 8);

  _Block_object_dispose(&v12, 8);
  return v3;
}

void sub_100050288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1000502AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id obj;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3 && (*(_BYTE *)(v3 + 32) & 1) != 0)
  {
    v9 = *(void **)(v3 + 24);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    obj = *(id *)(v10 + 40);
    v11 = objc_msgSend(v9, "validatePairing:", &obj);
    objc_storeStrong((id *)(v10 + 40), obj);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v11;
    sub_1000500A8(*(id *)(a1 + 32));
  }
  else
  {
    v4 = SESDefaultLogObject(a1, a2);
    v12 = (id)objc_claimAutoreleasedReturnValue(v4);
    v5 = SESCreateAndLogError(0, v12, SESErrorDomain, 0, CFSTR("Not backed by a NFSession"));
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

  }
}

id sub_100050388(void *a1, _QWORD *a2)
{
  id v3;
  _QWORD v5[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  if (!a1)
    return 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = sub_10004F568;
  v16 = sub_10004F578;
  v17 = 0;
  v6 = 0;
  v7 = &v6;
  v8 = 0x3032000000;
  v9 = sub_10004F568;
  v10 = sub_10004F578;
  v11 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000504A8;
  v5[3] = &unk_100304C60;
  v5[4] = a1;
  v5[5] = &v6;
  v5[6] = &v12;
  objc_msgSend(a1, "sync:", v5);
  if (a2)
    *a2 = objc_retainAutorelease((id)v7[5]);
  v3 = (id)v13[5];
  _Block_object_dispose(&v6, 8);

  _Block_object_dispose(&v12, 8);
  return v3;
}

void sub_100050484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1000504A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id obj;

  v3 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v3 + 32))
  {
    v4 = *(void **)(v3 + 24);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    obj = *(id *)(v5 + 40);
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "getExpressConfiguration:", &obj));
    objc_storeStrong((id *)(v5 + 40), obj);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

    sub_1000500A8(*(id *)(a1 + 32));
  }
  else
  {
    v9 = SESDefaultLogObject(a1, a2);
    v14 = (id)objc_claimAutoreleasedReturnValue(v9);
    v10 = SESCreateAndLogError(0, v14, SESErrorDomain, 0, CFSTR("Not backed by a NFSession"));
    v11 = objc_claimAutoreleasedReturnValue(v10);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;

  }
}

void sub_100050634(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 16);
  *(_QWORD *)(v4 + 16) = 0;

}

id sub_10005066C(id result, const char *a2)
{
  if (result)
    return objc_getProperty(result, a2, 40, 1);
  return result;
}

uint64_t sub_100050680(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 48);
  return result;
}

void sub_100050BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100050BC8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  unint64_t v7;
  void *__s2;
  size_t __n;

  v7 = 0;
  __s2 = 0;
  __n = 0;
  v5 = DERDecodeItem(a2 + 8, &v7);
  if (!(_DWORD)v5 && v7 == 12 && __n == *(_QWORD *)(a1 + 40) && !memcmp(*(const void **)(a1 + 48), __s2, __n))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  return v5;
}

void sub_100051078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100051098(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  xpc_type_t type;
  uint64_t v6;
  const _xpc_type_s *v7;
  uint64_t v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  xpc_object_t value;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  const char *name;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  type = xpc_get_type(v3);
  if (type != (xpc_type_t)&_xpc_type_error)
  {
    v7 = type;
    v8 = SESDefaultLogObject(type, v6);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v24 = 136315138;
      name = xpc_type_get_name(v7);
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Unexpected typed: %s", (uint8_t *)&v24, 0xCu);
    }
LABEL_15:

    goto LABEL_16;
  }
  v10 = xpc_equal(v3, &_xpc_error_connection_interrupted);
  if (v10)
  {
    v12 = SESDefaultLogObject(v10, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = *(const char **)(a1 + 32);
      v24 = 138412290;
      name = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Service interrupted: %@", (uint8_t *)&v24, 0xCu);
    }

  }
  else
  {
    v15 = xpc_equal(v3, &_xpc_error_connection_invalid);
    if (!v15)
    {
      value = xpc_dictionary_get_value(v3, _xpc_error_key_description);
      v9 = objc_claimAutoreleasedReturnValue(value);
      v22 = SESDefaultLogObject(v9, v21);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = 136315138;
        name = xpc_string_get_string_ptr(v9);
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v24, 0xCu);
      }

      goto LABEL_15;
    }
    v17 = SESDefaultLogObject(v15, v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      v19 = *(const char **)(a1 + 32);
      v24 = 138412290;
      name = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Service not available: %@", (uint8_t *)&v24, 0xCu);
    }

    objc_msgSend(WeakRetained, "setAvailable:", 0);
  }
LABEL_16:

}

void sub_10005150C(id a1)
{
  SecureElementManager *v1;
  void *v2;

  v1 = objc_opt_new(SecureElementManager);
  v2 = (void *)qword_10034BBD0;
  qword_10034BBD0 = (uint64_t)v1;

}

_QWORD *sub_100051628(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;

  v3 = a2;
  objc_opt_self(a1);
  v4 = sub_100052004([NearFieldManager alloc], v3);

  return v4;
}

void sub_100051680(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = a2;
  objc_opt_self(a1);
  sub_1000516E8((uint64_t)SecureElementManager, 0, v6, v5);

}

void sub_1000516E8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  _QWORD *v10;
  id v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  id *v15;
  id *v16;
  id *v17;
  id v18;
  id v19;
  _QWORD *v20;
  NSObject *Property;
  id v22;
  id v23;
  _QWORD *v24;
  _QWORD v25[4];
  _QWORD *v26;
  id v27;
  id v28;
  _QWORD block[4];
  id v30;
  _QWORD *v31;
  id v32;
  id v33;
  uint8_t buf[4];
  _BOOL4 v35;
  __int16 v36;
  id v37;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  objc_opt_self(a1);
  v10 = (_QWORD *)objc_claimAutoreleasedReturnValue(+[SecureElementManager getInstance](SecureElementManager, "getInstance"));
  v11 = sub_100051908();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240450;
    v35 = v7 != 0;
    v36 = 2114;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Queuing SE request with transceiver %{public}d for %{public}@", buf, 0x12u);
  }

  if (v7)
  {
    v14 = v10[2];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100051948;
    block[3] = &unk_100302B80;
    v15 = &v30;
    v16 = (id *)&v31;
    v30 = v7;
    v31 = v10;
    v17 = &v32;
    v32 = v8;
    v33 = v9;
    v18 = v9;
    v19 = v8;
    v20 = v10;
    dispatch_async(v14, block);

  }
  else
  {
    if (v10)
      Property = objc_getProperty(v10, v13, 16, 1);
    else
      Property = 0;
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_100051AF8;
    v25[3] = &unk_100303730;
    v15 = (id *)&v26;
    v16 = &v28;
    v27 = v8;
    v28 = v9;
    v17 = &v27;
    v26 = v10;
    v22 = v9;
    v23 = v8;
    v24 = v10;
    dispatch_async(Property, v25);
  }

}

id sub_100051908()
{
  if (qword_10034BBE0 != -1)
    dispatch_once(&qword_10034BBE0, &stru_100304DD0);
  return (id)qword_10034BBE8;
}

void sub_100051948(_QWORD *a1)
{
  const char *v2;
  SecureElement *v3;
  void *v4;
  void *v5;
  id Property;
  id *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  SecureElement *v13;
  void *v14;
  void *v15;
  id v16;
  id *v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  int v23;
  uint64_t v24;

  v3 = [SecureElement alloc];
  v5 = (void *)a1[4];
  v4 = (void *)a1[5];
  if (v4)
    Property = objc_getProperty(v4, v2, 16, 1);
  else
    Property = 0;
  v7 = sub_10004F2E8((id *)&v3->super.isa, v5, Property);
  if (v7)
  {
    v8 = sub_100051908();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = a1[6];
      v23 = 138412290;
      v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Got SE for %@", (uint8_t *)&v23, 0xCu);
    }

    v11 = a1[7];
    v13 = [SecureElement alloc];
    v15 = (void *)a1[4];
    v14 = (void *)a1[5];
    if (v14)
      v16 = objc_getProperty(v14, v12, 16, 1);
    else
      v16 = 0;
    v17 = sub_10004F2E8((id *)&v13->super.isa, v15, v16);
    (*(void (**)(uint64_t, id *, _QWORD))(v11 + 16))(v11, v17, 0);

  }
  else
  {
    v18 = a1[7];
    v19 = sub_100051908();
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    v21 = SESCreateAndLogError(0, v20, SESErrorDomain, 0, CFSTR("Failed to create SE from transceiver"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    (*(void (**)(uint64_t, _QWORD, void *))(v18 + 16))(v18, 0, v22);

  }
}

void sub_100051AF8(id *a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  id v5;
  void *v6;
  id v7;
  void (**v8)(id, _QWORD, void *);
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  uint8_t buf[4];
  id v18;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "getNFManager"));

  if (v2)
  {
    v3 = sub_100051908();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = a1[5];
      *(_DWORD *)buf = 138543362;
      v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Requesting SE for %{public}@", buf, 0xCu);
    }

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "getNFManager"));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100051CCC;
    v13[3] = &unk_100304CF8;
    v7 = a1[5];
    v16 = a1[6];
    v14 = a1[4];
    v15 = a1[5];
    objc_msgSend(v6, "getSecureElementWithReason:callback:", v7, v13);

  }
  else
  {
    v8 = (void (**)(id, _QWORD, void *))a1[6];
    v9 = sub_100051908();
    v12 = (id)objc_claimAutoreleasedReturnValue(v9);
    v10 = SESCreateAndLogError(0, v12, SESErrorDomain, 2, CFSTR("Cannot establish connection with NF"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v8[2](v8, 0, v11);

  }
}

void sub_100051CCC(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  const char *v6;
  SecureElement *v7;
  void *v8;
  id Property;
  id *v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  SecureElement *v16;
  void *v17;
  id v18;
  id *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  void *v26;
  int v27;
  uint64_t v28;

  v5 = a2;
  if (!v5 || a3)
  {
    v20 = a1[6];
    v21 = SESEnsureError(a3);
    v10 = (id *)objc_claimAutoreleasedReturnValue(v21);
    (*(void (**)(uint64_t, _QWORD, id *))(v20 + 16))(v20, 0, v10);
  }
  else
  {
    v7 = [SecureElement alloc];
    v8 = (void *)a1[4];
    if (v8)
      Property = objc_getProperty(v8, v6, 16, 1);
    else
      Property = 0;
    v10 = sub_10004F2E8((id *)&v7->super.isa, v5, Property);
    if (v10)
    {
      v11 = sub_100051908();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        v13 = a1[5];
        v27 = 138543362;
        v28 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Got SE for %{public}@", (uint8_t *)&v27, 0xCu);
      }

      v14 = a1[6];
      v16 = [SecureElement alloc];
      v17 = (void *)a1[4];
      if (v17)
        v18 = objc_getProperty(v17, v15, 16, 1);
      else
        v18 = 0;
      v19 = sub_10004F2E8((id *)&v16->super.isa, v5, v18);
      (*(void (**)(uint64_t, id *, _QWORD))(v14 + 16))(v14, v19, 0);

    }
    else
    {
      v22 = a1[6];
      v23 = sub_100051908();
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      v25 = SESCreateAndLogError(0, v24, SESErrorDomain, 0, CFSTR("Failed to create SE from transceiver"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      (*(void (**)(uint64_t, _QWORD, void *))(v22 + 16))(v22, 0, v26);

    }
  }

}

void sub_100051EC0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  void *v6;
  NSObject *Property;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;

  v3 = a2;
  objc_opt_self(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[SecureElementManager getInstance](SecureElementManager, "getInstance"));
  v6 = v4;
  if (v4)
    Property = objc_getProperty(v4, v5, 16, 1);
  else
    Property = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100051F94;
  block[3] = &unk_100304370;
  v11 = v6;
  v12 = v3;
  v8 = v3;
  v9 = v6;
  dispatch_sync(Property, block);

}

void sub_100051F94(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getNFManager"));
  objc_msgSend(v2, "setHandoffToken:", *(_QWORD *)(a1 + 40));

}

_QWORD *sub_100052004(_QWORD *a1, void *a2)
{
  id v4;
  id v5;
  NSMutableArray *v6;
  void *v7;
  SESTimer *v8;
  void *v9;
  _QWORD *v10;
  id v11;
  NSObject **v12;
  void *v13;
  uint64_t v14;
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;
  id location;
  _QWORD v21[4];
  id v22;
  objc_super v23;

  v4 = a2;
  if (a1)
  {
    v23.receiver = a1;
    v23.super_class = (Class)NearFieldManager;
    v5 = objc_msgSendSuper2(&v23, "init");
    a1 = v5;
    if (v5)
    {
      objc_storeStrong((id *)v5 + 6, a2);
      a1[3] = 6;
      v6 = objc_opt_new(NSMutableArray);
      v7 = (void *)a1[8];
      a1[8] = v6;

      v8 = [SESTimer alloc];
      v9 = (void *)a1[6];
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_1000521E0;
      v21[3] = &unk_100302AA0;
      v10 = a1;
      v22 = v10;
      v11 = v9;
      v12 = sub_10004C264((NSObject **)v8, v11, v21);
      v13 = (void *)v10[4];
      v10[4] = v12;

      objc_initWeak(&location, v10);
      v14 = a1[6];
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_100052354;
      v18[3] = &unk_100303590;
      objc_copyWeak(&v19, &location);
      os_state_add_handler(v14, v18);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100052474;
      v16[3] = &unk_100304D20;
      a1 = v10;
      v17 = a1;
      +[NFHardwareManager sharedHardwareManager:](NFHardwareManager, "sharedHardwareManager:", v16);

      objc_destroyWeak(&v19);
      objc_destroyWeak(&location);

    }
  }

  return a1;
}

void sub_1000521C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

dispatch_queue_t *sub_1000521E0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = sub_100051908();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "SE Session timer expired", v5, 2u);
  }

  return sub_100052250(*(dispatch_queue_t **)(a1 + 32));
}

dispatch_queue_t *sub_100052250(dispatch_queue_t *result)
{
  dispatch_queue_t *v1;
  id v2;
  NSObject *v3;
  dispatch_queue_t v4;
  dispatch_queue_t v5;
  dispatch_queue_t v6;
  _QWORD v7[5];
  uint8_t buf[4];
  int v9;
  __int16 v10;
  dispatch_queue_t v11;

  if (result)
  {
    v1 = result;
    dispatch_assert_queue_V2(result[6]);
    v2 = sub_100051908();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = v1[3];
      v5 = v1[5];
      *(_DWORD *)buf = 67240448;
      v9 = (int)v4;
      v10 = 2048;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "State %{public}u closing session %p", buf, 0x12u);
    }

    v1[3] = (dispatch_queue_t)5;
    v6 = v1[5];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10005350C;
    v7[3] = &unk_100302AA0;
    v7[4] = v1;
    return (dispatch_queue_t *)-[NSObject endSessionWithCompletion:](v6, "endSessionWithCompletion:", v7);
  }
  return result;
}

id *sub_100052354(uint64_t a1)
{
  id WeakRetained;
  id *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = sub_100052388((uint64_t)WeakRetained);

  return v2;
}

id *sub_100052388(uint64_t a1)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = (id *)a1;
  if (a1)
  {
    v6[0] = CFSTR("state");
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 24)));
    v6[1] = CFSTR("waiters");
    v7[0] = v2;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[8], "ses_map:", &stru_100304D60));
    v7[1] = v3;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 2));

    v1 = (id *)sub_100015734((uint64_t)"nearfieldmanager.state", (uint64_t)v4);
  }
  return v1;
}

void sub_100052474(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  _QWORD block[4];
  _QWORD *v4;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[6];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000524E4;
  block[3] = &unk_100302AA0;
  v4 = v1;
  dispatch_async(v2, block);

}

void sub_1000524E4(uint64_t a1)
{
  sub_1000524EC(*(_QWORD *)(a1 + 32));
}

void sub_1000524EC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  unsigned int v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  NSObject *v11;
  id v12;
  uint8_t buf[4];
  id v14;

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 48));
    v2 = sub_100051908();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = objc_msgSend(*(id *)(a1 + 64), "count");
      *(_DWORD *)buf = 67240192;
      LODWORD(v14) = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Got hardware ready with %{public}u waiters", buf, 8u);
    }

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NFHardwareManager sharedHardwareManager](NFHardwareManager, "sharedHardwareManager"));
    v12 = 0;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "secureElementWithIdentifier:error:", CFSTR("embedded"), &v12));
    v7 = v12;
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "serialNumber"));
    v9 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v8;

    if (!*(_QWORD *)(a1 + 56) || v7)
    {
      v10 = sub_100051908();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to retrieve SEID during init %{public}@", buf, 0xCu);
      }

    }
    *(_QWORD *)(a1 + 24) = 1;
    if (objc_msgSend(*(id *)(a1 + 64), "count"))
      sub_100052C64(a1);

  }
}

id sub_100052680(id a1, SERequest *a2)
{
  return -[SERequest reason](a2, "reason");
}

void sub_100052C64(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  _QWORD v9[5];
  uint8_t buf[16];

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 48));
    v2 = sub_100051908();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Requesting session from NF", buf, 2u);
    }

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NFHardwareManager sharedHardwareManager](NFHardwareManager, "sharedHardwareManager"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100052EE8;
    v9[3] = &unk_100304D88;
    v9[4] = a1;
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "startSecureElementManagerSession:", v9));
    v6 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v5;

    if (*(_QWORD *)(a1 + 72))
    {
      v7 = objc_msgSend(*(id *)(a1 + 80), "activateWithToken:", *(_QWORD *)(a1 + 72));
      *(_BYTE *)(a1 + 16) = 1;
      v8 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;

    }
    *(_QWORD *)(a1 + 24) = 2;
  }
}

id *sub_100052D6C(id *a1, void *a2)
{
  NSObject **v4;
  NSObject **v5;
  NSObject *v6;
  id *v7;
  objc_super v9;

  v4 = a2;
  v5 = v4;
  if (a1)
  {
    if (v4)
      v6 = v4[6];
    else
      v6 = 0;
    dispatch_assert_queue_V2(v6);
    v9.receiver = a1;
    v9.super_class = (Class)NearFieldSessionShim;
    v7 = (id *)objc_msgSendSuper2(&v9, "init");
    a1 = v7;
    if (v7)
      objc_storeStrong(v7 + 2, a2);
  }

  return a1;
}

id sub_100052E7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id result;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v2 = *(_QWORD *)(v2 + 80);
  if (!v2)
    return objc_msgSend(*(id *)(a1 + 32), "setHandoffToken:", *(_QWORD *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = *(void **)(v3 + 80);
  else
    v4 = 0;
  result = objc_msgSend(v4, "activateWithToken:", *(_QWORD *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 16) = 1;
  return result;
}

void sub_100052EE8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    v8 = *(NSObject **)(v7 + 48);
  else
    v8 = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100052FA4;
  block[3] = &unk_100304490;
  block[4] = *(_QWORD *)(a1 + 32);
  v12 = v5;
  v13 = v6;
  v9 = v6;
  v10 = v5;
  dispatch_async(v8, block);

}

void sub_100052FA4(uint64_t a1)
{
  sub_100052FB4(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
}

void sub_100052FB4(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void (**v20)(_QWORD, _QWORD, _QWORD);
  id *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  void (**v27)(_QWORD, _QWORD, _QWORD);
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t v32[128];
  uint8_t buf[4];
  id v34;
  __int16 v35;
  id v36;
  __int16 v37;
  unsigned int v38;

  v6 = a2;
  v7 = a3;
  if (a1)
  {
    v8 = sub_100051908();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = objc_msgSend(*(id *)(a1 + 64), "count");
      *(_DWORD *)buf = 138412802;
      v34 = v6;
      v35 = 2112;
      v36 = v7;
      v37 = 1026;
      v38 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Received open CB from NF: %@ %@ %{public}u", buf, 0x1Cu);
    }

    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 48));
    v11 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;

    if (!v6 || v7)
    {
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v22 = *(id *)(a1 + 64);
      v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
      if (v23)
      {
        v24 = v23;
        v25 = *(_QWORD *)v29;
        do
        {
          v26 = 0;
          do
          {
            if (*(_QWORD *)v29 != v25)
              objc_enumerationMutation(v22);
            v27 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)v26), "callback", (_QWORD)v28));
            ((void (**)(_QWORD, _QWORD, id))v27)[2](v27, 0, v7);

            v26 = (char *)v26 + 1;
          }
          while (v24 != v26);
          v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
        }
        while (v24);
      }

      objc_msgSend(*(id *)(a1 + 64), "removeAllObjects");
      *(_QWORD *)(a1 + 24) = 1;
    }
    else
    {
      if (!*(_QWORD *)(a1 + 88))
      {
        v12 = voucher_copy();
        v13 = *(void **)(a1 + 88);
        *(_QWORD *)(a1 + 88) = v12;

        v14 = sub_100051908();
        v15 = objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          v16 = *(void **)(a1 + 88);
          *(_DWORD *)buf = 138412290;
          v34 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Got voucher (SE) %@", buf, 0xCu);
        }

      }
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "popFirst"));
      *(_QWORD *)(a1 + 24) = 3;
      v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "reason"));
      v19 = *(void **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = v18;

      objc_storeStrong((id *)(a1 + 40), a2);
      v20 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "callback"));
      v21 = sub_100052D6C((id *)[NearFieldSessionShim alloc], (void *)a1);
      ((void (**)(_QWORD, id *, _QWORD))v20)[2](v20, v21, 0);

    }
  }

}

void sub_100053280(uint64_t a1, char a2)
{
  NSObject *v2;
  _QWORD v3[5];
  char v4;

  if (a1)
  {
    v2 = *(NSObject **)(a1 + 48);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000532E0;
    v3[3] = &unk_100304DB0;
    v3[4] = a1;
    v4 = a2;
    dispatch_async(v2, v3);
  }
}

void sub_1000532E0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  dispatch_queue_t *v12;
  void *v13;
  id v14;
  NSObject *v15;
  _BOOL4 v16;
  void (**v17)(_QWORD, _QWORD, _QWORD);
  id *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  unsigned int v29;

  v2 = sub_100051908();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(v4 + 96);
    v6 = *(unsigned __int8 *)(a1 + 40);
    v7 = *(unsigned __int8 *)(v4 + 16);
    v8 = objc_msgSend(*(id *)(v4 + 64), "count");
    v22 = 138544130;
    v23 = v5;
    v24 = 1026;
    v25 = v6;
    v26 = 1026;
    v27 = v7;
    v28 = 1026;
    v29 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Shim dealloced for %{public}@, invalidated %{public}d tokened %{public}d waiters %{public}u", (uint8_t *)&v22, 0x1Eu);
  }

  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(void **)(v9 + 96);
  *(_QWORD *)(v9 + 96) = 0;

  v11 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 40))
  {
    if (!v11)
    {
      v12 = 0;
LABEL_8:
      sub_100052250(v12);
      return;
    }
LABEL_7:
    *(_QWORD *)(v11 + 24) = 4;
    v12 = *(dispatch_queue_t **)(a1 + 32);
    goto LABEL_8;
  }
  if (*(_BYTE *)(v11 + 16))
    goto LABEL_7;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v11 + 64), "popFirst"));
  v14 = sub_100051908();
  v15 = objc_claimAutoreleasedReturnValue(v14);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
  if (v13)
  {
    if (v16)
    {
      LOWORD(v22) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Handing off to next queued waiter", (uint8_t *)&v22, 2u);
    }

    v17 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "callback"));
    v18 = sub_100052D6C((id *)[NearFieldSessionShim alloc], *(void **)(a1 + 32));
    ((void (**)(_QWORD, id *, _QWORD))v17)[2](v17, v18, 0);

  }
  else
  {
    if (v16)
    {
      LOWORD(v22) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "No waiters, queueing close", (uint8_t *)&v22, 2u);
    }

    v19 = *(_QWORD *)(a1 + 32);
    if (v19 && (*(_QWORD *)(v19 + 24) = 4, (v20 = *(_QWORD *)(a1 + 32)) != 0))
      v21 = *(_QWORD *)(v20 + 32);
    else
      v21 = 0;
    sub_10004C410(v21, 0.3);
  }

}

void sub_10005350C(uint64_t a1)
{
  NSObject *isa;
  _QWORD block[5];

  isa = *(NSObject **)(a1 + 32);
  if (isa)
    isa = isa[6].isa;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100053570;
  block[3] = &unk_100302AA0;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(isa, block);
}

void sub_100053570(uint64_t a1)
{
  sub_100053578(*(_QWORD *)(a1 + 32));
}

void sub_100053578(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  _BOOL4 v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 48));
    v2 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;

    *(_BYTE *)(a1 + 16) = 0;
    v3 = objc_msgSend(*(id *)(a1 + 64), "count");
    v4 = sub_100051908();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
    if (v3)
    {
      if (v6)
      {
        LOWORD(v11) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "session closed while we had a waiter, reopening", (uint8_t *)&v11, 2u);
      }

      sub_100052C64(a1);
    }
    else
    {
      if (v6)
      {
        LOWORD(v11) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "session closed kthxbai", (uint8_t *)&v11, 2u);
      }

      *(_QWORD *)(a1 + 24) = 1;
    }
    v7 = sub_100051908();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 88);
      v11 = 138412290;
      v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Releasing voucher (SE) %@", (uint8_t *)&v11, 0xCu);
    }

    v10 = *(void **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;

  }
}

void sub_1000536E4(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 56), a2);
}

void sub_1000541F8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(SESLoggingSubsystem, "secureelement.manager");
  v2 = (void *)qword_10034BBE8;
  qword_10034BBE8 = (uint64_t)v1;

}

id sub_10005422C(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  return sub_100054238(a1, a2, a3, a4, 0, a5);
}

id sub_100054238(void *a1, void *a2, void *a3, void *a4, uint64_t a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  CFDataRef v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  id *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  id *v56;
  void *v57;
  id *v58;
  void *v59;
  const char *v60;
  id v61;
  void *v62;
  __CFData *v63;
  id v64;
  void *v65;
  id v66;
  id *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id *v72;
  uint64_t v73;
  id *v74;
  id v75;
  id *v76;
  uint64_t v77;
  void *v79;
  uint64_t v80;
  void *v81;
  id *v82;
  void *v83;
  void *v84;
  id v85;
  void *v86;
  id *v87;
  void *v88;
  CFDataRef v89;
  id v90;
  id v91;
  void *v92;
  id v93;
  id v94;
  id v95;
  CFDataRef v96;
  _QWORD v97[2];

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v16 = v14;
  if (v11 && v12 && v13 && (v14 || a5 == 2))
  {
    v92 = v14;
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "hexStringAsData"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 79, v21));
    v97[0] = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 239, v13));
    v97[1] = v23;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v97, 2));

    v25 = (void *)objc_claimAutoreleasedReturnValue(+[SESTLV TLVWithTag:children:](SESTLV, "TLVWithTag:children:", 228, v24));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "asData"));

    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithBytes:length:](NSMutableData, "dataWithBytes:length:", &unk_100287E0E, 4));
    objc_msgSend(v27, "appendU8:", objc_msgSend(v26, "length"));
    objc_msgSend(v27, "appendData:", v26);
    objc_msgSend(v27, "appendU8:", 0);
    v28 = SSEIsFeatureSupported(12);
    if ((_DWORD)v28)
    {
      if (a6)
      {
        v30 = SESDefaultLogObject(v28, v29);
        v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
        v32 = SESCreateAndLogError(0, v31, SESErrorDomain, 0, CFSTR("AuthorizeAndSignECommerceBlob feature unsupported"));
        *a6 = (id)objc_claimAutoreleasedReturnValue(v32);

      }
      goto LABEL_12;
    }
    v96 = 0;
    v33 = SSEGetHostChallenge(&v96);
    if ((_DWORD)v33 || !v96)
    {
      if (!a6)
      {
LABEL_12:
        v20 = 0;
        v16 = v92;
LABEL_44:

        goto LABEL_45;
      }
      v46 = SESDefaultLogObject(v33, v34);
      v40 = (CFDataRef)objc_claimAutoreleasedReturnValue(v46);
      v47 = SESCreateAndLogError(0, v40, SESErrorDomain, 0, CFSTR("Failed to retrieve host challenge"));
      v20 = 0;
      *a6 = (id)objc_claimAutoreleasedReturnValue(v47);
      v16 = v92;
LABEL_43:

      goto LABEL_44;
    }
    v89 = v96;
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A00000015143525300"), "hexStringAsData"));
    v36 = sub_10004FBA0(v11, v35);
    v37 = objc_claimAutoreleasedReturnValue(v36);

    v90 = (id)v37;
    if (v37)
    {
      v16 = v92;
      v40 = v89;
      if (!a6)
      {
        v20 = 0;
LABEL_42:

        goto LABEL_43;
      }
      v41 = SESDefaultLogObject(v38, v39);
      v42 = objc_claimAutoreleasedReturnValue(v41);
      v43 = SESCreateAndLogError(v90, v42, SESErrorDomain, 0, CFSTR("While selecting CRS"));
      v44 = (id)objc_claimAutoreleasedReturnValue(v43);
      v45 = (void *)v42;
      v20 = 0;
      *a6 = v44;
LABEL_41:

      goto LABEL_42;
    }
    v95 = 0;
    v40 = v89;
    v48 = sub_10004F8D8(v11, 128, 248, 0, 0, v89, 0, &v95);
    v49 = objc_claimAutoreleasedReturnValue(v48);
    v50 = v95;
    v45 = (void *)v49;
    v16 = v92;
    v90 = v50;
    v87 = (id *)v45;
    if (!v50
      && v45
      && (v52 = sub_10005582C((id *)v45),
          v53 = (void *)objc_claimAutoreleasedReturnValue(v52),
          v85 = objc_msgSend(v53, "length"),
          v53,
          v45 = v87,
          v40 = v89,
          (unint64_t)v85 > 0xF))
    {
      v56 = sub_10005582C(v87);
      v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
      v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "subdataWithRange:", 0, 8));

      v58 = sub_10005582C(v87);
      v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
      v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "subdataWithRange:", 8, 8));

      v61 = sub_10005066C(v11, v60);
      v91 = (id)objc_claimAutoreleasedReturnValue(v61);
      v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91, "seid"));
      v94 = 0;
      v63 = sub_10005488C(a5, v92, v62, v89, v86, v84, v27, &v94);
      v83 = (void *)objc_claimAutoreleasedReturnValue(v63);
      v64 = v94;

      v65 = v83;
      v90 = v64;
      if (v64 || !v83)
      {
        if (a6)
        {
          v75 = objc_retainAutorelease(v64);
          v65 = v83;
          v20 = 0;
          v90 = v75;
          *a6 = v75;
        }
        else
        {
          v20 = 0;
        }
        v40 = v89;
      }
      else
      {
        v93 = 0;
        v66 = sub_10004F6A8(v11, v83, &v93);
        v67 = (id *)objc_claimAutoreleasedReturnValue(v66);
        v68 = v93;

        v90 = v68;
        if (v68)
        {
          if (a6)
          {
            v71 = SESDefaultLogObject(v69, v70);
            v81 = (void *)objc_claimAutoreleasedReturnValue(v71);
            v80 = SESErrorDomain;
            sub_100055868((uint64_t)v67);
            v82 = v67;
            v72 = sub_10005582C(v67);
            v88 = (void *)objc_claimAutoreleasedReturnValue(v72);
            v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "asHexString"));
            v73 = SESCreateAndLogError(v68, v81, v80, 0, CFSTR("Failed (0x%hu) transceive signed APDU %@"));
            *a6 = (id)objc_claimAutoreleasedReturnValue(v73);

            v20 = 0;
            v74 = v82;
          }
          else
          {
            v74 = v67;
            v20 = 0;
          }
        }
        else
        {
          v76 = sub_10005582C(v67);
          v77 = objc_claimAutoreleasedReturnValue(v76);
          v74 = v67;
          v20 = (void *)v77;
          v90 = 0;
        }
        v87 = v74;
        v40 = v89;
        v65 = v83;
      }

    }
    else
    {
      if (!a6)
      {
        v20 = 0;
        goto LABEL_41;
      }
      v54 = SESDefaultLogObject(v50, v51);
      v86 = (void *)objc_claimAutoreleasedReturnValue(v54);
      v55 = SESCreateAndLogError(v90, v86, SESErrorDomain, 0, CFSTR("Failed to initialize Auth"));
      v20 = 0;
      *a6 = (id)objc_claimAutoreleasedReturnValue(v55);
    }

    v45 = v87;
    goto LABEL_41;
  }
  if (a6)
  {
    v17 = SESDefaultLogObject(v14, v15);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v19 = SESCreateAndLogError(0, v18, SESErrorDomain, 1, CFSTR("Nil passed to crs_SendOpaque (type %d)"));
    *a6 = (id)objc_claimAutoreleasedReturnValue(v19);

  }
  v20 = 0;
LABEL_45:

  return v20;
}

__CFData *sub_10005488C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, _QWORD *a8)
{
  const __CFData *v15;
  const __CFData *v16;
  const __CFData *v17;
  const __CFData *v18;
  const __CFData *v19;
  const __CFData *v20;
  uint64_t v21;
  const __CFData *v22;
  uint64_t v23;
  uint64_t v24;
  __CFData *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  __CFData *v33;

  v15 = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v22 = v20;
  v33 = 0;
  if (a1 == 2)
  {
    v23 = SSEAuthorizeAndSignAPDU(8, v15, -1, v16, v17, v18, v19, v20, &v33);
  }
  else if (a1 == 1)
  {
    v23 = SSEAuthorizeAndSignAPDU(7, v15, -1, v16, v17, v18, v19, v20, &v33);
  }
  else
  {
    if (a1)
    {
      if (a8)
      {
        v29 = SESDefaultLogObject(v20, v21);
        v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
        v31 = SESCreateAndLogError(0, v30, SESErrorDomain, 1, CFSTR("Invalid authorization type %ld"));
        *a8 = (id)objc_claimAutoreleasedReturnValue(v31);

      }
      goto LABEL_13;
    }
    v23 = SSEAuthorizeAndSignECommerceBlob(v15, -1, v16, 0, v17, v18, v19, v20, &v33);
  }
  if ((_DWORD)v23 || (v25 = v33) == 0)
  {
    if (a8)
    {
      v26 = SESDefaultLogObject(v23, v24);
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      v28 = SESCreateAndLogError(0, v27, SESErrorDomain, 1, CFSTR("Failed to get signedAPDU %d"));
      *a8 = (id)objc_claimAutoreleasedReturnValue(v28);

    }
LABEL_13:
    v25 = 0;
  }

  return v25;
}

void sub_100055450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100055478(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  if (*(_QWORD *)a2 == 0xC00000000000001CLL)
  {
    *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32) = *(_OWORD *)(a2 + 8);
    *a3 = 1;
  }
  return 0;
}

RAPDU *sub_100055730(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSData *fullRapdu;
  uint64_t v10;
  RAPDU *v11;
  id v12;
  NSData *v13;

  v5 = a2;
  objc_opt_self(a1);
  v6 = objc_msgSend(v5, "length");
  if ((unint64_t)v6 > 1)
  {
    v11 = objc_opt_new(RAPDU);
    v12 = objc_retainAutorelease(v5);
    v11->_sw = bswap32(*(unsigned __int16 *)((char *)objc_msgSend(v12, "bytes") + (_QWORD)objc_msgSend(v12, "length")
                                                                                - 2)) >> 16;
    v13 = (NSData *)v12;
    fullRapdu = v11->_fullRapdu;
    v11->_fullRapdu = v13;
  }
  else
  {
    if (!a3)
    {
      v11 = 0;
      goto LABEL_7;
    }
    v8 = SESDefaultLogObject(v6, v7);
    fullRapdu = (NSData *)objc_claimAutoreleasedReturnValue(v8);
    v10 = SESCreateAndLogError(0, fullRapdu, SESErrorDomain, 0, CFSTR("Rapdu Length %@"));
    v11 = 0;
    *a3 = (id)objc_claimAutoreleasedReturnValue(v10);
  }

LABEL_7:
  return v11;
}

id *sub_10005582C(id *a1)
{
  if (a1)
    a1 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[2], "subdataWithRange:", 0, (char *)objc_msgSend(a1[2], "length") - 2));
  return a1;
}

uint64_t sub_100055868(uint64_t result)
{
  if (result)
    return *(unsigned __int16 *)(result + 8);
  return result;
}

id sub_100055880(uint64_t a1, _QWORD *a2)
{
  id v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  if (!a1)
    return 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = sub_10005599C;
  v16 = sub_1000559AC;
  v17 = 0;
  v6 = 0;
  v7 = &v6;
  v8 = 0x3032000000;
  v9 = sub_10005599C;
  v10 = sub_1000559AC;
  v11 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000559B4;
  v5[3] = &unk_100303600;
  v5[4] = &v6;
  v5[5] = &v12;
  sub_100016A08(a1, v5);
  if (a2)
    *a2 = objc_retainAutorelease((id)v13[5]);
  v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);

  _Block_object_dispose(&v12, 8);
  return v3;
}

void sub_100055978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005599C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000559AC(uint64_t a1)
{

}

void sub_1000559B4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id obj;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[AirInstanceEntity fetchRequest](AirInstanceEntity, "fetchRequest"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v5 + 40);
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &obj));

  objc_storeStrong((id *)(v5 + 40), obj);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

id sub_100055A58(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  BOOL v10;
  uint64_t v11;
  void *v12;
  _QWORD v14[4];
  id v15;
  id v16;

  v5 = a2;
  if (a1)
  {
    v16 = 0;
    v6 = sub_100055880(a1, &v16);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = v16;
    v9 = v8;
    if (v8)
      v10 = 1;
    else
      v10 = v7 == 0;
    if (v10)
    {
      v12 = 0;
      if (a3)
        *a3 = objc_retainAutorelease(v8);
    }
    else
    {
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_100055B54;
      v14[3] = &unk_100304E38;
      v15 = v5;
      v11 = Find(v7, v14);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

    }
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

id sub_100055B54(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

id sub_100055B94(id a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[4];
  id v26;
  uint64_t *v27;
  __int128 *p_buf;
  id obj;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  id v35;
  __int128 buf;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t);
  id v40;

  v5 = a2;
  v7 = v5;
  if (a1)
  {
    if (v5)
    {
      v8 = SESDefaultLogObject(v5, v6);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v7;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Create AirInstanceEntityWithIdentifier : %@", (uint8_t *)&buf, 0xCu);
      }

      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v37 = 0x3032000000;
      v38 = sub_10005599C;
      v39 = sub_1000559AC;
      v40 = 0;
      v30 = 0;
      v31 = &v30;
      v32 = 0x3032000000;
      v33 = sub_10005599C;
      v34 = sub_1000559AC;
      v35 = 0;
      obj = 0;
      v10 = sub_100055A58((uint64_t)a1, v7, &obj);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      objc_storeStrong(&v40, obj);
      v14 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 40);
      if (v14)
      {
        if (a3)
        {
          v15 = SESDefaultLogObject(v12, v13);
          v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
          v17 = SESCreateAndLogError(v14, v16, SESErrorDomain, 0, CFSTR("While checking for existing AirInstanceEntity"));
          v18 = (id)objc_claimAutoreleasedReturnValue(v17);
LABEL_14:
          a1 = 0;
          *a3 = v18;
LABEL_19:

          goto LABEL_20;
        }
      }
      else
      {
        if (!v11)
        {
          v25[0] = _NSConcreteStackBlock;
          v25[1] = 3221225472;
          v25[2] = sub_100055E94;
          v25[3] = &unk_100304E60;
          v27 = &v30;
          v26 = v7;
          p_buf = &buf;
          sub_1000168E4((uint64_t)a1, v25);
          if (a3)
            *a3 = objc_retainAutorelease(*(id *)(*((_QWORD *)&buf + 1) + 40));
          a1 = (id)v31[5];
          v16 = v26;
          goto LABEL_19;
        }
        if (a3)
        {
          v22 = SESDefaultLogObject(v12, v13);
          v16 = (void *)objc_claimAutoreleasedReturnValue(v22);
          v23 = SESCreateAndLogError(0, v16, SESErrorDomain, 3, CFSTR("AirInstanceEntity with identifier '%@', already exists"));
          v18 = (id)objc_claimAutoreleasedReturnValue(v23);
          goto LABEL_14;
        }
      }
      a1 = 0;
LABEL_20:

      _Block_object_dispose(&v30, 8);
      _Block_object_dispose(&buf, 8);

      goto LABEL_21;
    }
    if (a3)
    {
      v19 = SESDefaultLogObject(0, v6);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      v21 = SESCreateAndLogError(0, v20, SESErrorDomain, 1, CFSTR("Nil input to addAirInstanceEntity"));
      *a3 = (id)objc_claimAutoreleasedReturnValue(v21);

    }
    a1 = 0;
  }
LABEL_21:

  return a1;
}

void sub_100055E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100055E94(_QWORD *a1, void *a2)
{
  id *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id obj;

  v3 = a2;
  v4 = sub_10002BA88((uint64_t)v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = objc_claimAutoreleasedReturnValue(+[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:](NSEntityDescription, "insertNewObjectForEntityForName:inManagedObjectContext:", CFSTR("AirInstanceEntity"), v5));
  v7 = *(_QWORD *)(a1[5] + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "setIdentifier:", a1[4]);
  objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "setNumCertificateAuthorityIdentifier:", 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "setNumEndPointIdentifier:", 0);
  v9 = *(void **)(*(_QWORD *)(a1[5] + 8) + 40);
  v10 = *(_QWORD *)(a1[6] + 8);
  obj = *(id *)(v10 + 40);
  LOBYTE(v5) = objc_msgSend(v9, "validateForInsert:", &obj);
  objc_storeStrong((id *)(v10 + 40), obj);
  if ((v5 & 1) != 0)
  {
    v13 = sub_10002BA94((uint64_t)v3);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *(_QWORD *)(a1[6] + 8);
    v16 = *(void **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v14;

  }
  else
  {
    v17 = SESDefaultLogObject(v11, v12);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v19 = SESCreateAndLogError(0, v18, SESErrorDomain, 0, CFSTR("Could not add AirInstanceEntity, object failed validation"));
    v20 = objc_claimAutoreleasedReturnValue(v19);
    v21 = *(_QWORD *)(a1[6] + 8);
    v22 = *(void **)(v21 + 40);
    *(_QWORD *)(v21 + 40) = v20;

    sub_10002BB14(v3);
  }

}

id sub_100055FF4(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  _UNKNOWN **v8;
  void *i;
  void *v10;
  NSData *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  id *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  id *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  unsigned int v49;
  id *v50;
  id v51;
  id v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62;
  void *j;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v71;
  uint64_t v72;
  void *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _QWORD v78[4];
  id v79;
  _UNKNOWN **v80;
  void *v81;
  __int128 *p_buf;
  uint64_t *v83;
  id v84;
  id v85;
  id obj;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t);
  void (*v95)(uint64_t);
  id v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint8_t v101[128];
  __int128 buf;
  uint64_t v103;
  uint64_t (*v104)(uint64_t, uint64_t);
  void (*v105)(uint64_t);
  NSMutableArray *v106;
  _BYTE v107[128];
  _BYTE v108[128];

  v71 = a2;
  v5 = a3;
  if (a1)
  {
    v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(&off_100322AD8, "count")));
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v6 = objc_msgSend(&off_100322AD8, "countByEnumeratingWithState:objects:count:", &v97, v108, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v98;
      v8 = &off_100322AD8;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v98 != v7)
            objc_enumerationMutation(&off_100322AD8);
          v10 = *(void **)(*((_QWORD *)&v97 + 1) + 8 * (_QWORD)i);
          v11 = objc_opt_new(NSData);
          v12 = sub_10004FBA0(v5, v11);

          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "hexStringAsData"));
          v14 = sub_10004FBA0(v5, v13);
          v15 = (id)objc_claimAutoreleasedReturnValue(v14);

          if (v15)
          {
            if (objc_msgSend(v15, "code") != (id)11)
              goto LABEL_47;
          }
          else
          {
            objc_msgSend(v73, "addObject:", v10);
          }

        }
        v6 = objc_msgSend(&off_100322AD8, "countByEnumeratingWithState:objects:count:", &v97, v108, 16);
      }
      while (v6);
    }
    v91 = 0;
    v92 = &v91;
    v93 = 0x3032000000;
    v94 = sub_1000567BC;
    v95 = sub_1000567CC;
    v96 = 0;
    v87 = 0u;
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v8 = v73;
    v16 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v87, v107, 16);
    if (v16)
    {
      v72 = *(_QWORD *)v88;
LABEL_15:
      v17 = 0;
      while (1)
      {
        if (*(_QWORD *)v88 != v72)
          objc_enumerationMutation(v8);
        v18 = *(void **)(*((_QWORD *)&v87 + 1) + 8 * v17);
        v19 = (id *)(v92 + 5);
        obj = (id)v92[5];
        v20 = sub_100055A58((uint64_t)a1, v18, &obj);
        v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
        objc_storeStrong(v19, obj);
        if (v92[5])
          break;
        if (!v21)
        {
          v24 = SESDefaultLogObject(v22, v23);
          v25 = objc_claimAutoreleasedReturnValue(v24);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            LODWORD(buf) = 138412290;
            *(_QWORD *)((char *)&buf + 4) = v18;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Instance %@ not in DB, creating it", (uint8_t *)&buf, 0xCu);
          }

          v26 = (id *)(v92 + 5);
          v85 = (id)v92[5];
          v27 = sub_100055B94(a1, v18, &v85);
          v21 = (void *)objc_claimAutoreleasedReturnValue(v27);
          objc_storeStrong(v26, v85);
          if (v92[5])
          {
            v68 = SESDefaultLogObject(v28, v29);
            v55 = (void *)objc_claimAutoreleasedReturnValue(v68);
            v69 = SESCreateAndLogError(0, v55, SESErrorDomain, 2, CFSTR("while creating entity for %@"));
            v57 = objc_claimAutoreleasedReturnValue(v69);
            goto LABEL_45;
          }
        }
        v30 = sub_1000567D4((uint64_t)a1, v21, v5);
        v31 = objc_claimAutoreleasedReturnValue(v30);
        v32 = (void *)v92[5];
        v92[5] = v31;

        if (v92[5])
        {
          v58 = SESDefaultLogObject(v33, v34);
          v55 = (void *)objc_claimAutoreleasedReturnValue(v58);
          v59 = SESCreateAndLogError(0, v55, SESErrorDomain, 2, CFSTR("while consolidating CAs for %@"));
          v57 = objc_claimAutoreleasedReturnValue(v59);
          goto LABEL_45;
        }
        v35 = sub_100056EC4(a1, v21, v5);
        v36 = objc_claimAutoreleasedReturnValue(v35);
        v37 = (void *)v92[5];
        v92[5] = v36;

        if (v92[5])
        {
          v64 = SESDefaultLogObject(v38, v39);
          v55 = (void *)objc_claimAutoreleasedReturnValue(v64);
          v65 = SESCreateAndLogError(0, v55, SESErrorDomain, 2, CFSTR("while consolidating ep for %@"));
          v57 = objc_claimAutoreleasedReturnValue(v65);
          goto LABEL_45;
        }
        v40 = sub_100057428((uint64_t)a1, v21, v5);
        v41 = objc_claimAutoreleasedReturnValue(v40);
        v42 = (void *)v92[5];
        v92[5] = v41;

        if (v92[5])
        {
          v66 = SESDefaultLogObject(v43, v44);
          v55 = (void *)objc_claimAutoreleasedReturnValue(v66);
          v67 = SESCreateAndLogError(0, v55, SESErrorDomain, 2, CFSTR("While deleting CAs with revoked endpoints for %@"));
          v57 = objc_claimAutoreleasedReturnValue(v67);
          goto LABEL_45;
        }

        if (v16 == (id)++v17)
        {
          v16 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v87, v107, 16);
          if (v16)
            goto LABEL_15;
          goto LABEL_28;
        }
      }
      v54 = SESDefaultLogObject(v22, v23);
      v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
      v56 = SESCreateAndLogError(0, v55, SESErrorDomain, 2, CFSTR("while getting applet %@"));
      v57 = objc_claimAutoreleasedReturnValue(v56);
LABEL_45:
      v15 = (id)v57;

      v52 = v8;
      goto LABEL_46;
    }
LABEL_28:

    v47 = SESDefaultLogObject(v45, v46);
    v48 = objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
    {
      v49 = objc_msgSend(v8, "count");
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v49;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "Finished reconciliation of %u instances", (uint8_t *)&buf, 8u);
    }

    v50 = (id *)(v92 + 5);
    v84 = (id)v92[5];
    v51 = sub_100055880((uint64_t)a1, &v84);
    v52 = (id)objc_claimAutoreleasedReturnValue(v51);
    objc_storeStrong(v50, v84);
    v53 = (void *)v92[5];
    if (v53)
    {
      v15 = v53;
    }
    else
    {
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v103 = 0x3032000000;
      v104 = sub_1000567BC;
      v105 = sub_1000567CC;
      v106 = objc_opt_new(NSMutableArray);
      v78[0] = _NSConcreteStackBlock;
      v78[1] = 3221225472;
      v78[2] = sub_10005787C;
      v78[3] = &unk_100304E88;
      v52 = v52;
      v79 = v52;
      v80 = v8;
      v81 = a1;
      p_buf = &buf;
      v83 = &v91;
      sub_1000168E4((uint64_t)a1, v78);
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v60 = *(id *)(*((_QWORD *)&buf + 1) + 40);
      v61 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v74, v101, 16);
      if (v61)
      {
        v62 = *(_QWORD *)v75;
        do
        {
          for (j = 0; j != v61; j = (char *)j + 1)
          {
            if (*(_QWORD *)v75 != v62)
              objc_enumerationMutation(v60);
            +[EndpointStore removeWithEndpoint:](_TtC10seserviced13EndpointStore, "removeWithEndpoint:", *(_QWORD *)(*((_QWORD *)&v74 + 1) + 8 * (_QWORD)j));
          }
          v61 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v74, v101, 16);
        }
        while (v61);
      }

      v15 = (id)v92[5];
      _Block_object_dispose(&buf, 8);

    }
LABEL_46:

    _Block_object_dispose(&v91, 8);
LABEL_47:

  }
  else
  {
    v15 = 0;
  }

  return v15;
}

void sub_100056758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000567BC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000567CC(uint64_t a1)
{

}

id sub_1000567D4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  unsigned int v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  unsigned int v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  unsigned int v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  unsigned int v50;
  id v51;
  id v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  NSObject *v59;
  void *v60;
  void *v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  void *v69;
  id v70;
  id v71;
  void *v72;
  void *v73;
  void *v74;
  id v75;
  id v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _QWORD v81[4];
  id v82;
  id v83;
  uint64_t v84;
  uint64_t *v85;
  _QWORD v86[5];
  id obj;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t, uint64_t);
  void (*v92)(uint64_t);
  id v93;
  uint8_t v94[128];
  uint8_t buf[4];
  _BYTE v96[14];

  v76 = a2;
  v75 = a3;
  if (a1)
  {
    v5 = sub_100016AC8(a1);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    dispatch_assert_queue_V2(v6);

    v88 = 0;
    v89 = &v88;
    v90 = 0x3032000000;
    v91 = sub_1000567BC;
    v92 = sub_1000567CC;
    v93 = 0;
    v7 = sub_100057C8C(a1);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    v9 = (void *)v89[5];
    v89[5] = v8;

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "identifier"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "hexStringAsData"));
    v12 = (id *)(v89 + 5);
    obj = (id)v89[5];
    v13 = sub_1000468EC(v75, v11, &obj);
    v73 = (void *)objc_claimAutoreleasedReturnValue(v13);
    objc_storeStrong(v12, obj);

    if (v89[5])
    {
      v16 = SESDefaultLogObject(v14, v15);
      v74 = (void *)objc_claimAutoreleasedReturnValue(v16);
      v17 = SESErrorDomain;
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "identifier"));
      v19 = SESCreateAndLogError(0, v74, v17, 0, CFSTR("While listing CA subject ids (SE) in %@"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    }
    else
    {
      v21 = Transform(v73, &stru_100304EA8);
      v74 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v23 = SESDefaultLogObject(v74, v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        v25 = objc_msgSend(v74, "count");
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "identifier"));
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)v96 = v25;
        *(_WORD *)&v96[4] = 2112;
        *(_QWORD *)&v96[6] = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Found %u CAs in SE instance %@", buf, 0x12u);

      }
      v27 = objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "certificateAuthorities"));
      v18 = (void *)v27;
      if (v89[5])
      {
        v29 = SESDefaultLogObject(v27, v28);
        v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
        v31 = SESErrorDomain;
        v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "identifier"));
        v32 = SESCreateAndLogError(0, v30, v31, 0, CFSTR("While listing CA subject ids (DB) in %@"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(v32);

      }
      else
      {
        v86[0] = _NSConcreteStackBlock;
        v86[1] = 3221225472;
        v86[2] = sub_100057E54;
        v86[3] = &unk_100304ED0;
        v86[4] = a1;
        v33 = TransformIf(v27, v86);
        v72 = (void *)objc_claimAutoreleasedReturnValue(v33);
        v35 = SESDefaultLogObject(v72, v34);
        v36 = objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          v37 = objc_msgSend(v72, "count");
          v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "identifier"));
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)v96 = v37;
          *(_WORD *)&v96[4] = 2112;
          *(_QWORD *)&v96[6] = v38;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Found %u CAs in DB instance %@", buf, 0x12u);

        }
        v39 = objc_msgSend(v72, "mutableCopy");
        v40 = objc_msgSend(v39, "removeObjectsInArray:", v74);
        v42 = SESDefaultLogObject(v40, v41);
        v43 = objc_claimAutoreleasedReturnValue(v42);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
        {
          v44 = objc_msgSend(v39, "count");
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v96 = v44;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "Found %u CAs in the DB not present on SE", buf, 8u);
        }

        v81[0] = _NSConcreteStackBlock;
        v81[1] = 3221225472;
        v81[2] = sub_100057E94;
        v81[3] = &unk_1003043E8;
        v71 = v39;
        v82 = v71;
        v70 = v18;
        v83 = v70;
        v84 = a1;
        v85 = &v88;
        sub_1000168E4(a1, v81);
        v45 = objc_msgSend(v74, "mutableCopy");
        v46 = objc_msgSend(v45, "removeObjectsInArray:", v72);
        v48 = SESDefaultLogObject(v46, v47);
        v49 = objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
        {
          v50 = objc_msgSend(v45, "count");
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v96 = v50;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "Found %u CAs in the SE not present on DB", buf, 8u);
        }

        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v51 = v45;
        v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v77, v94, 16);
        v54 = v52;
        if (v52)
        {
          v55 = *(_QWORD *)v78;
          do
          {
            v56 = 0;
            do
            {
              if (*(_QWORD *)v78 != v55)
                objc_enumerationMutation(v51);
              v57 = *(void **)(*((_QWORD *)&v77 + 1) + 8 * (_QWORD)v56);
              v58 = SESDefaultLogObject(v52, v53);
              v59 = objc_claimAutoreleasedReturnValue(v58);
              if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)v96 = v57;
                _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "Removing dangling SE CA %@", buf, 0xCu);
              }

              v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "identifier"));
              v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "hexStringAsData"));
              v62 = sub_1000432D0(v75, v61, v57);
              v63 = (void *)objc_claimAutoreleasedReturnValue(v62);

              if (v63)
              {
                v66 = SESDefaultLogObject(v64, v65);
                v67 = objc_claimAutoreleasedReturnValue(v66);
                if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  *(_QWORD *)v96 = v57;
                  _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "Failed to remove CA entity from SE for subjectCA %@", buf, 0xCu);
                }

              }
              v56 = (char *)v56 + 1;
            }
            while (v54 != v56);
            v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v77, v94, 16);
            v54 = v52;
          }
          while (v52);
        }

        v20 = 0;
        v18 = v70;
      }
    }

    _Block_object_dispose(&v88, 8);
  }
  else
  {
    v20 = 0;
  }

  return v20;
}

void sub_100056E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

id sub_100056EC4(id a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  unsigned int v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  unsigned int v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  unsigned int v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  void *v42;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD v48[4];
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint8_t *v55;
  uint8_t *v56;
  uint64_t *v57;
  _QWORD v58[5];
  id obj;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  void (*v64)(uint64_t);
  id v65;
  uint8_t v66[128];
  uint8_t v67[8];
  __int128 v68;
  uint64_t (*v69)(uint64_t, uint64_t);
  void (*v70)(uint64_t);
  NSMutableArray *v71;
  uint8_t buf[8];
  __int128 v73;
  uint64_t (*v74)(uint64_t, uint64_t);
  void (*v75)(uint64_t);
  id v76;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = sub_100016AC8((uint64_t)a1);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    dispatch_assert_queue_V2(v8);

    v60 = 0;
    v61 = &v60;
    v62 = 0x3032000000;
    v63 = sub_1000567BC;
    v64 = sub_1000567CC;
    v65 = 0;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "hexStringAsData"));
    v11 = (id *)(v61 + 5);
    obj = (id)v61[5];
    v12 = sub_100046CAC(v6, v10, &obj);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    objc_storeStrong(v11, obj);

    v16 = (void *)v61[5];
    if (v16)
    {
      a1 = v16;
    }
    else
    {
      v17 = SESDefaultLogObject(v14, v15);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        v19 = objc_msgSend(v13, "count");
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v19;
        LOWORD(v73) = 2112;
        *(_QWORD *)((char *)&v73 + 2) = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Found %u endpoints in SE instance %@", buf, 0x12u);

      }
      *(_QWORD *)buf = 0;
      *(_QWORD *)&v73 = buf;
      *((_QWORD *)&v73 + 1) = 0x3032000000;
      v74 = sub_1000567BC;
      v75 = sub_1000567CC;
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "endPoints"));
      v76 = objc_msgSend(v21, "mutableCopy");

      v22 = (void *)v61[5];
      if (v22)
      {
        a1 = v22;
      }
      else
      {
        v23 = *(_QWORD *)(v73 + 40);
        v58[0] = _NSConcreteStackBlock;
        v58[1] = 3221225472;
        v58[2] = sub_1000582CC;
        v58[3] = &unk_100303980;
        v58[4] = a1;
        v24 = TransformIf(v23, v58);
        v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
        v27 = SESDefaultLogObject(v25, v26);
        v28 = objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          v29 = objc_msgSend(v25, "count");
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
          *(_DWORD *)v67 = 67109378;
          *(_DWORD *)&v67[4] = v29;
          LOWORD(v68) = 2112;
          *(_QWORD *)((char *)&v68 + 2) = v30;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Found %u endpoints in DB instance %@", v67, 0x12u);

        }
        v31 = objc_msgSend(v25, "mutableCopy");
        v32 = objc_msgSend(v31, "removeObjectsInArray:", v13);
        v34 = SESDefaultLogObject(v32, v33);
        v35 = objc_claimAutoreleasedReturnValue(v34);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
        {
          v36 = objc_msgSend(v31, "count");
          *(_DWORD *)v67 = 67109120;
          *(_DWORD *)&v67[4] = v36;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "Found %u EPs in the DB not present on SE", v67, 8u);
        }

        *(_QWORD *)v67 = 0;
        *(_QWORD *)&v68 = v67;
        *((_QWORD *)&v68 + 1) = 0x3032000000;
        v69 = sub_1000567BC;
        v70 = sub_1000567CC;
        v71 = objc_opt_new(NSMutableArray);
        v48[0] = _NSConcreteStackBlock;
        v48[1] = 3221225472;
        v48[2] = sub_10005830C;
        v48[3] = &unk_100304F48;
        v37 = v31;
        v49 = v37;
        v50 = a1;
        v55 = buf;
        v56 = v67;
        v57 = &v60;
        v51 = v6;
        v52 = v5;
        v53 = v13;
        v38 = v25;
        v54 = v38;
        sub_1000168E4((uint64_t)a1, v48);
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v39 = *(id *)(v68 + 40);
        v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v44, v66, 16);
        if (v40)
        {
          v41 = *(_QWORD *)v45;
          do
          {
            v42 = 0;
            do
            {
              if (*(_QWORD *)v45 != v41)
                objc_enumerationMutation(v39);
              +[EndpointStore removeWithEndpoint:](_TtC10seserviced13EndpointStore, "removeWithEndpoint:", *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)v42), (_QWORD)v44);
              v42 = (char *)v42 + 1;
            }
            while (v40 != v42);
            v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v44, v66, 16);
          }
          while (v40);
        }

        a1 = (id)v61[5];
        _Block_object_dispose(v67, 8);

      }
      _Block_object_dispose(buf, 8);

    }
    _Block_object_dispose(&v60, 8);

  }
  return a1;
}

void sub_1000573B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose((const void *)(v37 - 176), 8);
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

id sub_100057428(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  unsigned int v27;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  id obj;
  uint64_t v35;
  _QWORD v36[4];
  id v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t *v41;
  _QWORD v42[6];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  void (*v51)(uint64_t);
  id v52;
  uint8_t buf[4];
  _BYTE v54[14];
  _BYTE v55[128];

  v31 = a2;
  v29 = a3;
  if (a1)
  {
    v35 = a1;
    v5 = sub_100016AC8(a1);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    dispatch_assert_queue_V2(v6);

    v47 = 0;
    v48 = &v47;
    v49 = 0x3032000000;
    v50 = sub_1000567BC;
    v51 = sub_1000567CC;
    v52 = 0;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "certificateAuthorities"));
    v30 = v7;
    if (v48[5])
    {
      v9 = SESDefaultLogObject(v7, v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      v11 = SESCreateAndLogError(0, v10, SESErrorDomain, 2, CFSTR("Failed to retrieve the CAs in the DB"));
      v12 = (id)objc_claimAutoreleasedReturnValue(v11);

    }
    else
    {
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v7, "count")));
      v45 = 0u;
      v46 = 0u;
      v44 = 0u;
      v43 = 0u;
      obj = v30;
      v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v55, 16);
      if (v13)
      {
        v14 = *(_QWORD *)v44;
        do
        {
          for (i = 0; i != v13; i = (char *)i + 1)
          {
            if (*(_QWORD *)v44 != v14)
              objc_enumerationMutation(obj);
            v16 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i);
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "endPoints"));
            v42[0] = _NSConcreteStackBlock;
            v42[1] = 3221225472;
            v42[2] = sub_1000593E4;
            v42[3] = &unk_100304F70;
            v42[4] = v35;
            v42[5] = &v47;
            v18 = Any(v17, v42);
            v19 = v18;
            v21 = SESDefaultLogObject(v18, v20);
            v22 = objc_claimAutoreleasedReturnValue(v21);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              *(_QWORD *)v54 = v16;
              *(_WORD *)&v54[8] = 1024;
              *(_DWORD *)&v54[10] = v19;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "EndpointEntity %@ has active endpoints? %d", buf, 0x12u);
            }

            if ((v19 & 1) == 0)
              objc_msgSend(v32, "addObject:", v16);

          }
          v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v55, 16);
        }
        while (v13);
      }

      v23 = objc_msgSend(v32, "count");
      if (v23)
      {
        v25 = SESDefaultLogObject(v23, v24);
        v26 = objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          v27 = objc_msgSend(v32, "count");
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)v54 = v27;
          *(_WORD *)&v54[4] = 2112;
          *(_QWORD *)&v54[6] = obj;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Deleting %u endPointCAs with no active endpoints : %@", buf, 0x12u);
        }

        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3221225472;
        v36[2] = sub_1000594F4;
        v36[3] = &unk_100304F98;
        v33 = v32;
        v37 = v33;
        v38 = v35;
        v41 = &v47;
        v39 = v29;
        v40 = v31;
        sub_1000168E4(v35, v36);
        v12 = (id)v48[5];

      }
      else
      {
        v12 = 0;

      }
    }

    _Block_object_dispose(&v47, 8);
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_100057838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void sub_10005787C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  void *i;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  void *j;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  id obj;
  void *v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  id v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[128];
  uint8_t v67[128];
  uint8_t buf[4];
  id v69;
  _BYTE v70[128];

  v3 = a2;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  obj = *(id *)(a1 + 32);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v70, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v63;
    v48 = *(_QWORD *)v63;
    do
    {
      v7 = 0;
      v49 = v5;
      do
      {
        if (*(_QWORD *)v63 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * (_QWORD)v7);
        v9 = *(void **)(a1 + 40);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
        LOBYTE(v9) = objc_msgSend(v9, "containsObject:", v10);

        if ((v9 & 1) == 0)
        {
          v13 = SESDefaultLogObject(v11, v12);
          v14 = objc_claimAutoreleasedReturnValue(v13);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
            *(_DWORD *)buf = 138412290;
            v69 = v15;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Database contains PTA instance %@ but SE does not, cleaning it now!", buf, 0xCu);

          }
          v52 = v7;

          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v51 = v8;
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "endPoints"));
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v58, v67, 16);
          if (v17)
          {
            v18 = v17;
            v19 = *(_QWORD *)v59;
            do
            {
              for (i = 0; i != v18; i = (char *)i + 1)
              {
                if (*(_QWORD *)v59 != v19)
                  objc_enumerationMutation(v16);
                v21 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * (_QWORD)i);
                v22 = *(_QWORD *)(a1 + 48);
                v57 = 0;
                v23 = sub_10003ADE0(v22, v21, &v57);
                v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
                v25 = v57;
                v26 = sub_10002BA88((uint64_t)v3);
                v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
                objc_msgSend(v27, "deleteObject:", v21);

                if (v24)
                {
                  v30 = objc_msgSend(v24, "deleteEndPointLongTermPrivacyKey");
                  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "bleUUID"));

                  if (v31)
                    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "addObject:", v24);
                }
                else
                {
                  v32 = SESDefaultLogObject(v28, v29);
                  v33 = objc_claimAutoreleasedReturnValue(v32);
                  if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 138412290;
                    v69 = v25;
                    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Failed to retrieve endpoint %@", buf, 0xCu);
                  }

                }
              }
              v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v58, v67, 16);
            }
            while (v18);
          }

          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "certificateAuthorities"));
          v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v53, v66, 16);
          if (v35)
          {
            v36 = v35;
            v37 = *(_QWORD *)v54;
            do
            {
              for (j = 0; j != v36; j = (char *)j + 1)
              {
                if (*(_QWORD *)v54 != v37)
                  objc_enumerationMutation(v34);
                v39 = *(_QWORD *)(*((_QWORD *)&v53 + 1) + 8 * (_QWORD)j);
                v40 = sub_10002BA88((uint64_t)v3);
                v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
                objc_msgSend(v41, "deleteObject:", v39);

              }
              v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v53, v66, 16);
            }
            while (v36);
          }

          v42 = sub_10002BA88((uint64_t)v3);
          v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
          objc_msgSend(v43, "deleteObject:", v51);

          v6 = v48;
          v5 = v49;
          v7 = v52;
        }
        v7 = (char *)v7 + 1;
      }
      while (v7 != v5);
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v70, 16);
    }
    while (v5);
  }

  v44 = sub_10002BA94((uint64_t)v3);
  v45 = objc_claimAutoreleasedReturnValue(v44);
  v46 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v47 = *(void **)(v46 + 40);
  *(_QWORD *)(v46 + 40) = v45;

}

id sub_100057C8C(uint64_t a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v14[4];
  id v15;
  id v16;
  _QWORD v17[5];
  id v18;
  _QWORD v19[5];
  id v20;

  v1 = (id)a1;
  if (a1)
  {
    v20 = 0;
    v2 = sub_10003A9E0(a1, &v20);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4 = v20;
    v5 = v4;
    if (!v3 || v4)
    {
      v11 = SESEnsureError(v4);
      v1 = (id)objc_claimAutoreleasedReturnValue(v11);
    }
    else
    {
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_10005978C;
      v19[3] = &unk_100303958;
      v19[4] = v1;
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "filter:", v19));
      v18 = 0;
      v7 = sub_1000402BC((uint64_t)v1, &v18);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = v18;
      v5 = v9;
      if (v9)
      {
        v10 = SESEnsureError(v9);
        v1 = (id)objc_claimAutoreleasedReturnValue(v10);
      }
      else
      {
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        v17[2] = sub_1000597D8;
        v17[3] = &unk_100303840;
        v17[4] = v1;
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "filter:", v17));
        if (objc_msgSend(v6, "count") || objc_msgSend(v12, "count"))
        {
          v14[0] = _NSConcreteStackBlock;
          v14[1] = 3221225472;
          v14[2] = sub_100059824;
          v14[3] = &unk_1003035B8;
          v15 = v6;
          v16 = v12;
          sub_1000168E4((uint64_t)v1, v14);

        }
        v1 = 0;
      }

    }
  }
  return v1;
}

id sub_100057E44(id a1, NSData *a2)
{
  return +[NSString stringWithAsciiData:](NSString, "stringWithAsciiData:", a2);
}

id sub_100057E54(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;

  v2 = sub_100040628(*(_QWORD *)(a1 + 32), a2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "subjectIdentifier"));

  return v4;
}

void sub_100057E94(uint64_t a1, void *a2)
{
  id v3;
  void *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *j;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id obj;
  uint64_t v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD v38[7];
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  void (*v43)(uint64_t);
  id v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint8_t v49[128];
  uint8_t buf[4];
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  _BYTE v54[128];

  v3 = a2;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  obj = *(id *)(a1 + 32);
  v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v54, 16);
  if (v33)
  {
    v32 = *(_QWORD *)v46;
    do
    {
      for (i = 0; i != v33; i = (char *)i + 1)
      {
        if (*(_QWORD *)v46 != v32)
          objc_enumerationMutation(obj);
        v5 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)i);
        v39 = 0;
        v40 = &v39;
        v41 = 0x3032000000;
        v42 = sub_1000567BC;
        v43 = sub_1000567CC;
        v44 = 0;
        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3221225472;
        v38[2] = sub_100058248;
        v38[3] = &unk_100304EF8;
        v6 = *(_QWORD *)(a1 + 40);
        v7 = *(_QWORD *)(a1 + 48);
        v38[5] = v5;
        v38[6] = &v39;
        v38[4] = v7;
        v8 = Find(v6, v38);
        v9 = objc_claimAutoreleasedReturnValue(v8);
        v11 = (void *)v9;
        if (v9)
        {
          v12 = SESDefaultLogObject(v9, v10);
          v13 = objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "endPoints"));
            v15 = objc_msgSend(v14, "count");
            *(_DWORD *)buf = 138412546;
            v51 = v5;
            v52 = 1024;
            LODWORD(v53) = v15;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Removing dangling DB CA %@ with %u endpoints ", buf, 0x12u);

          }
          v36 = 0u;
          v37 = 0u;
          v34 = 0u;
          v35 = 0u;
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "endPoints"));
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v34, v49, 16);
          if (v17)
          {
            v18 = *(_QWORD *)v35;
            do
            {
              for (j = 0; j != v17; j = (char *)j + 1)
              {
                if (*(_QWORD *)v35 != v18)
                  objc_enumerationMutation(v16);
                v20 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)j);
                v21 = sub_10002BA88((uint64_t)v3);
                v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
                objc_msgSend(v22, "deleteObject:", v20);

              }
              v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v34, v49, 16);
            }
            while (v17);
          }

          v23 = sub_10002BA88((uint64_t)v3);
          v24 = objc_claimAutoreleasedReturnValue(v23);
          -[NSObject deleteObject:](v24, "deleteObject:", v11);
        }
        else
        {
          v25 = SESDefaultLogObject(0, v10);
          v24 = objc_claimAutoreleasedReturnValue(v25);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            v26 = v40[5];
            *(_DWORD *)buf = 138412546;
            v51 = v5;
            v52 = 2112;
            v53 = v26;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Couldn't get entity for subjectIdentifier %@ : %@", buf, 0x16u);
          }
        }

        _Block_object_dispose(&v39, 8);
      }
      v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v54, 16);
    }
    while (v33);
  }

  v27 = sub_10002BA94((uint64_t)v3);
  v28 = objc_claimAutoreleasedReturnValue(v27);
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v30 = *(void **)(v29 + 40);
  *(_QWORD *)(v29 + 40) = v28;

}

void sub_100058210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

id sub_100058248(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id obj;

  v3 = a1[4];
  v4 = *(_QWORD *)(a1[6] + 8);
  obj = *(id *)(v4 + 40);
  v5 = sub_100040628(v3, a2, &obj);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  objc_storeStrong((id *)(v4 + 40), obj);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subjectIdentifier"));
  v8 = objc_msgSend(v7, "isEqualToString:", a1[5]);

  return v8;
}

id sub_1000582CC(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;

  v2 = sub_10003ADE0(*(_QWORD *)(a1 + 32), a2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "publicKeyIdentifier"));

  return v4;
}

void sub_10005830C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id *v14;
  id v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  void *v33;
  void *j;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  void *v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  id v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  uint64_t v84;
  id v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  id v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  unsigned int v98;
  void *k;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  unsigned int v105;
  uint64_t v106;
  NSObject *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  void *v120;
  uint64_t v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  uint64_t v126;
  id v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  id *v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  void *v145;
  uint64_t v146;
  unsigned __int8 v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  id v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  void *v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  id v196;
  id v197;
  id v198;
  id *v199;
  id v200;
  id v201;
  id v202;
  id v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  id v208;
  id v209;
  id v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  id obj;
  _QWORD v216[7];
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[128];
  uint8_t v222[128];
  uint8_t buf[4];
  void *v224;
  __int16 v225;
  uint64_t v226;
  _BYTE v227[24];
  uint64_t (*v228)(uint64_t, uint64_t);
  void (*v229)(uint64_t);
  id v230;
  _BYTE v231[128];

  v199 = a2;
  v217 = 0u;
  v218 = 0u;
  v219 = 0u;
  v220 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v217, v231, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v218;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v218 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v217 + 1) + 8 * (_QWORD)i);
        *(_QWORD *)v227 = 0;
        *(_QWORD *)&v227[8] = v227;
        *(_QWORD *)&v227[16] = 0x3032000000;
        v228 = sub_1000567BC;
        v229 = sub_1000567CC;
        v230 = 0;
        v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
        v216[0] = _NSConcreteStackBlock;
        v216[1] = 3221225472;
        v216[2] = sub_100059360;
        v216[3] = &unk_100304F20;
        v9 = *(_QWORD *)(a1 + 40);
        v216[5] = v7;
        v216[6] = v227;
        v216[4] = v9;
        v10 = Find(v8, v216);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v10);
        if (v12)
        {
          v13 = *(_QWORD *)(a1 + 40);
          v14 = (id *)(*(_QWORD *)&v227[8] + 40);
          obj = *(id *)(*(_QWORD *)&v227[8] + 40);
          v15 = sub_10003ADE0(v13, v12, &obj);
          v16 = objc_claimAutoreleasedReturnValue(v15);
          objc_storeStrong(v14, obj);
          v19 = SESDefaultLogObject(v17, v18);
          v20 = objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "asHexString"));
            *(_DWORD *)buf = 138412290;
            v224 = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Removing dangling entity %@", buf, 0xCu);

          }
          v22 = sub_10002BA88((uint64_t)v199);
          v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
          objc_msgSend(v23, "deleteObject:", v12);

          v24 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "removeObject:", v12);
          if (v16)
          {
            v26 = -[NSObject deleteEndPointLongTermPrivacyKey](v16, "deleteEndPointLongTermPrivacyKey");
            v27 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject bleUUID](v16, "bleUUID"));

            if (v27)
              objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "addObject:", v16);
          }
          else
          {
            v31 = SESDefaultLogObject(v24, v25);
            v32 = objc_claimAutoreleasedReturnValue(v31);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              v33 = *(void **)(*(_QWORD *)&v227[8] + 40);
              *(_DWORD *)buf = 138412290;
              v224 = v33;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Failed to retrieve endpoint %@", buf, 0xCu);
            }

          }
        }
        else
        {
          v28 = SESDefaultLogObject(0, v11);
          v16 = objc_claimAutoreleasedReturnValue(v28);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "asHexString"));
            v30 = *(_QWORD *)(*(_QWORD *)&v227[8] + 40);
            *(_DWORD *)buf = 138412546;
            v224 = v29;
            v225 = 2112;
            v226 = v30;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Couldn't get entity for identifier %@ : %@", buf, 0x16u);

          }
        }

        _Block_object_dispose(v227, 8);
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v217, v231, 16);
    }
    while (v4);
  }

  v213 = 0u;
  v214 = 0u;
  v211 = 0u;
  v212 = 0u;
  v198 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
  v196 = objc_msgSend(v198, "countByEnumeratingWithState:objects:count:", &v211, v222, 16);
  if (v196)
  {
    v194 = *(_QWORD *)v212;
    do
    {
      for (j = 0; j != v196; j = (char *)j + 1)
      {
        if (*(_QWORD *)v212 != v194)
          objc_enumerationMutation(v198);
        v35 = *(void **)(*((_QWORD *)&v211 + 1) + 8 * (_QWORD)j);
        v36 = *(_QWORD *)(a1 + 40);
        v37 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
        v210 = *(id *)(v37 + 40);
        v38 = sub_10003ADE0(v36, v35, &v210);
        v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
        objc_storeStrong((id *)(v37 + 40), v210);
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40))
        {
          v166 = SESDefaultLogObject(v40, v41);
          v167 = (void *)objc_claimAutoreleasedReturnValue(v166);
          v168 = SESCreateAndLogError(0, v167, SESErrorDomain, 0, CFSTR("Failed to retrieve endpoint"));
          v169 = objc_claimAutoreleasedReturnValue(v168);
LABEL_78:
          v172 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
          v173 = *(void **)(v172 + 40);
          *(_QWORD *)(v172 + 40) = v169;

          sub_10002BB14(v199);
          goto LABEL_83;
        }
        v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "revocationAttestation"));

        if (!v42)
        {
          v43 = *(void **)(a1 + 48);
          v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "identifier"));
          v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "hexStringAsData"));
          v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "publicKeyIdentifier"));
          v47 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
          v209 = *(id *)(v47 + 40);
          v48 = sub_100046CB8(v43, v45, v46, &v209);
          objc_storeStrong((id *)(v47 + 40), v209);

          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40))
          {
            v170 = SESDefaultLogObject(v49, v50);
            v167 = (void *)objc_claimAutoreleasedReturnValue(v170);
            v171 = SESCreateAndLogError(0, v167, SESErrorDomain, 0, CFSTR("Failed to retrieve endpoint state"));
            v169 = objc_claimAutoreleasedReturnValue(v171);
            goto LABEL_78;
          }
          if (!v48)
          {
            v51 = SESDefaultLogObject(v49, v50);
            v52 = objc_claimAutoreleasedReturnValue(v51);
            if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
            {
              v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "publicKeyIdentifier"));
              v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "asHexString"));
              *(_DWORD *)v227 = 138412290;
              *(_QWORD *)&v227[4] = v54;
              _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "Revoked endpoint %@ is not up-to-date in the DB", v227, 0xCu);

            }
            v55 = objc_msgSend(v39, "endPointType");
            if (v55 == (id)3 || (v55 = objc_msgSend(v39, "endPointType"), v55 == (id)4))
            {
              v57 = SESDefaultLogObject(v55, v56);
              v58 = objc_claimAutoreleasedReturnValue(v57);
              if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
              {
                v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "publicKeyIdentifier"));
                v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "asHexString"));
                *(_DWORD *)v227 = 138412290;
                *(_QWORD *)&v227[4] = v60;
                _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "Deleting the revoked HOME or Lyon endpoint %@ from the DB and the SE", v227, 0xCu);

              }
              v61 = sub_10002BA88((uint64_t)v199);
              v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
              objc_msgSend(v62, "deleteObject:", v35);

              v63 = *(void **)(a1 + 48);
              v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "identifier"));
              v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "hexStringAsData"));
              v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "publicKeyIdentifier"));
              v67 = sub_100042AB0(v63, v65, v66);
              v68 = objc_claimAutoreleasedReturnValue(v67);
              v69 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
              v70 = *(void **)(v69 + 40);
              *(_QWORD *)(v69 + 40) = v68;

              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40))
              {
                v73 = SESDefaultLogObject(v71, v72);
                v74 = objc_claimAutoreleasedReturnValue(v73);
                if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
                {
                  v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "publicKeyIdentifier"));
                  v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "asHexString"));
                  v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
                  *(_DWORD *)v227 = 138412546;
                  *(_QWORD *)&v227[4] = v76;
                  *(_WORD *)&v227[12] = 2112;
                  *(_QWORD *)&v227[14] = v77;
                  _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "Failed to delete endpoint %@ %@", v227, 0x16u);

                }
              }
              v78 = objc_msgSend(v39, "deleteEndPointLongTermPrivacyKey");
              v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "bleUUID"));

              if (v79)
                objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "addObject:", v39);
            }
            else
            {
              v80 = *(void **)(a1 + 48);
              v193 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "identifier"));
              v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v193, "hexStringAsData"));
              v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "publicKeyIdentifier"));
              v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSData randomData:](NSData, "randomData:", 16));
              v84 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
              v208 = *(id *)(v84 + 40);
              v85 = sub_1000464A0(v80, v81, v82, v83, 0, &v208);
              v86 = (void *)objc_claimAutoreleasedReturnValue(v85);
              objc_storeStrong((id *)(v84 + 40), v208);

              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40))
              {
                v186 = SESDefaultLogObject(v87, v88);
                v187 = (void *)objc_claimAutoreleasedReturnValue(v186);
                v188 = SESCreateAndLogError(0, v187, SESErrorDomain, 0, CFSTR("Failed to retrieve endpoint revocation attestation"));
                v189 = objc_claimAutoreleasedReturnValue(v188);
                v190 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
                v191 = *(void **)(v190 + 40);
                *(_QWORD *)(v190 + 40) = v189;

LABEL_85:
                sub_10002BB14(v199);

                goto LABEL_83;
              }
              objc_msgSend(v39, "setRevocationAttestation:", v86);
              v89 = objc_claimAutoreleasedReturnValue(objc_msgSend(v199, "stageEndPointEntityUpdates:fromEndPoint:", v35, v39));
              v90 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
              v91 = *(void **)(v90 + 40);
              *(_QWORD *)(v90 + 40) = v89;

              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40))
                goto LABEL_85;
              v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "bleUUID"));

              if (v92)
                objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "addObject:", v39);

            }
          }
        }

      }
      v196 = objc_msgSend(v198, "countByEnumeratingWithState:objects:count:", &v211, v222, 16);
    }
    while (v196);
  }

  v93 = objc_msgSend(*(id *)(a1 + 64), "mutableCopy");
  v94 = objc_msgSend(v93, "removeObjectsInArray:", *(_QWORD *)(a1 + 72));
  v96 = SESDefaultLogObject(v94, v95);
  v97 = objc_claimAutoreleasedReturnValue(v96);
  if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
  {
    v98 = objc_msgSend(v93, "count");
    *(_DWORD *)v227 = 67109120;
    *(_DWORD *)&v227[4] = v98;
    _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_INFO, "Found %u EPs on the SE not present in DB", v227, 8u);
  }

  v206 = 0u;
  v207 = 0u;
  v204 = 0u;
  v205 = 0u;
  v198 = v93;
  v197 = objc_msgSend(v198, "countByEnumeratingWithState:objects:count:", &v204, v221, 16);
  if (!v197)
    goto LABEL_75;
  v195 = *(_QWORD *)v205;
  while (2)
  {
    for (k = 0; k != v197; k = (char *)k + 1)
    {
      if (*(_QWORD *)v205 != v195)
        objc_enumerationMutation(v198);
      v100 = *(void **)(*((_QWORD *)&v204 + 1) + 8 * (_QWORD)k);
      v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "identifier", v192));
      if (objc_msgSend(CFSTR("A00000085801010100000001"), "isEqualToString:", v101))
      {

LABEL_57:
        v106 = SESDefaultLogObject(v102, v103);
        v107 = objc_claimAutoreleasedReturnValue(v106);
        if (os_log_type_enabled(v107, OS_LOG_TYPE_INFO))
        {
          v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v100, "asHexString"));
          *(_DWORD *)v227 = 138412290;
          *(_QWORD *)&v227[4] = v108;
          _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_INFO, "Deleting the revoked HOME/LYON endpoint %@ from the SE", v227, 0xCu);

        }
        v109 = *(void **)(a1 + 48);
        v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "identifier"));
        v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "hexStringAsData"));
        v112 = sub_100042AB0(v109, v111, v100);
        v113 = objc_claimAutoreleasedReturnValue(v112);
        v114 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
        v115 = *(void **)(v114 + 40);
        *(_QWORD *)(v114 + 40) = v113;

        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40))
        {
          v118 = SESDefaultLogObject(v116, v117);
          v119 = objc_claimAutoreleasedReturnValue(v118);
          if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
          {
            v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v100, "asHexString"));
            v121 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
            *(_DWORD *)v227 = 138412546;
            *(_QWORD *)&v227[4] = v120;
            *(_WORD *)&v227[12] = 2112;
            *(_QWORD *)&v227[14] = v121;
            _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_ERROR, "Failed to delete endpoint %@ %@", v227, 0x16u);

          }
        }
        continue;
      }
      v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "identifier"));
      v105 = objc_msgSend(CFSTR("A000000909ACCE5501"), "isEqualToString:", v104);

      if (v105)
        goto LABEL_57;
      v122 = *(void **)(a1 + 48);
      v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "identifier"));
      v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v123, "hexStringAsData"));
      v125 = (void *)objc_claimAutoreleasedReturnValue(+[NSData randomData:](NSData, "randomData:", 16));
      v126 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
      v203 = *(id *)(v126 + 40);
      v127 = sub_1000464A0(v122, v124, v100, v125, 0, &v203);
      v128 = (void *)objc_claimAutoreleasedReturnValue(v127);
      objc_storeStrong((id *)(v126 + 40), v203);

      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40))
      {
        v174 = SESDefaultLogObject(v129, v130);
        v175 = (void *)objc_claimAutoreleasedReturnValue(v174);
        v176 = SESCreateAndLogError(0, v175, SESErrorDomain, 0, CFSTR("Failed to retrieve endpoint revocation attestation"));
        v177 = objc_claimAutoreleasedReturnValue(v176);
        v178 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
        v179 = *(void **)(v178 + 40);
        *(_QWORD *)(v178 + 40) = v177;

        sub_10002BB14(v199);
LABEL_81:

LABEL_82:
        v39 = v198;
        goto LABEL_83;
      }
      v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "identifier"));
      v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v131, "hexStringAsData"));
      v133 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
      v202 = *(id *)(v133 + 40);
      v134 = (void *)objc_claimAutoreleasedReturnValue(+[SEEndPoint revokedEndpointWithPublicKeyIdentifier:appletIdentifier:revocationAttestation:error:](SEEndPoint, "revokedEndpointWithPublicKeyIdentifier:appletIdentifier:revocationAttestation:error:", v100, v132, v128, &v202));
      objc_storeStrong((id *)(v133 + 40), v202);

      v137 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
      v139 = *(_QWORD *)(v137 + 40);
      v138 = (id *)(v137 + 40);
      if (v139)
      {
        v180 = SESDefaultLogObject(v135, v136);
        v181 = (void *)objc_claimAutoreleasedReturnValue(v180);
        v182 = SESCreateAndLogError(0, v181, SESErrorDomain, 0, CFSTR("Failed to create revoked endpoint"));
        v183 = objc_claimAutoreleasedReturnValue(v182);
        v184 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
        v185 = *(void **)(v184 + 40);
        *(_QWORD *)(v184 + 40) = v183;

        sub_10002BB14(v199);
        goto LABEL_81;
      }
      v201 = 0;
      v140 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v134, "encodeWithError:", &v201));
      objc_storeStrong(v138, v201);
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40) || !v140)
      {
        v151 = SESDefaultLogObject(v141, v142);
        v152 = (void *)objc_claimAutoreleasedReturnValue(v151);
        v192 = v100;
        v153 = SESCreateAndLogError(0, v152, SESErrorDomain, 0, CFSTR("Failed to encode endpoint %@"));
        v154 = objc_claimAutoreleasedReturnValue(v153);
        v155 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
        v156 = *(void **)(v155 + 40);
        *(_QWORD *)(v155 + 40) = v154;

        sub_10002BB14(v199);
        v150 = 1;
      }
      else
      {
        v143 = sub_10002BA88((uint64_t)v199);
        v144 = (void *)objc_claimAutoreleasedReturnValue(v143);
        v145 = (void *)objc_claimAutoreleasedReturnValue(+[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:](NSEntityDescription, "insertNewObjectForEntityForName:inManagedObjectContext:", CFSTR("SEEndPointEntity"), v144));

        objc_msgSend(v145, "setInstance:", *(_QWORD *)(a1 + 56));
        objc_msgSend(v145, "setClientName:", CFSTR("com.apple.seserviced"));
        objc_msgSend(v145, "setEndPointData:", v140);
        v146 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
        v200 = *(id *)(v146 + 40);
        v147 = objc_msgSend(v145, "validateForInsert:", &v200);
        objc_storeStrong((id *)(v146 + 40), v200);
        if ((v147 & 1) != 0)
        {
          v150 = 0;
        }
        else
        {
          v157 = SESDefaultLogObject(v148, v149);
          v158 = (void *)objc_claimAutoreleasedReturnValue(v157);
          v192 = v100;
          v159 = SESCreateAndLogError(0, v158, SESErrorDomain, 0, CFSTR("Failed to create endpoint in DB %@"));
          v160 = objc_claimAutoreleasedReturnValue(v159);
          v161 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
          v162 = *(void **)(v161 + 40);
          *(_QWORD *)(v161 + 40) = v160;

          sub_10002BB14(v199);
          v150 = 1;
        }

      }
      if (v150)
        goto LABEL_82;
    }
    v197 = objc_msgSend(v198, "countByEnumeratingWithState:objects:count:", &v204, v221, 16);
    if (v197)
      continue;
    break;
  }
LABEL_75:

  v163 = sub_10002BA94((uint64_t)v199);
  v164 = objc_claimAutoreleasedReturnValue(v163);
  v165 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
  v39 = *(void **)(v165 + 40);
  *(_QWORD *)(v165 + 40) = v164;
LABEL_83:

}

void sub_100059328(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x2E0], 8);
  _Unwind_Resume(a1);
}

id sub_100059360(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id obj;

  v3 = a1[4];
  v4 = *(_QWORD *)(a1[6] + 8);
  obj = *(id *)(v4 + 40);
  v5 = sub_10003ADE0(v3, a2, &obj);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  objc_storeStrong((id *)(v4 + 40), obj);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "publicKeyIdentifier"));
  v8 = objc_msgSend(v7, "isEqualToData:", a1[5]);

  return v8;
}

BOOL sub_1000593E4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _BOOL8 v17;
  void *v19;
  id obj;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v5 + 40);
  v6 = sub_10003ADE0(v4, v3, &obj);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  objc_storeStrong((id *)(v5 + 40), obj);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v10 = SESDefaultLogObject(v8, v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = SESErrorDomain;
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
    v13 = SESCreateAndLogError(0, v11, v12, 0, CFSTR("Failed to retrieve endpoint data for %@"));
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v16 = *(void **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v14;

    v17 = 1;
  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "revocationAttestation"));
    v17 = v11 == 0;
  }

  return v17;
}

void sub_1000594F4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id obj;
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t buf[4];
  uint64_t v43;
  __int16 v44;
  void *v45;
  _BYTE v46[128];

  v3 = a2;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  obj = *(id *)(a1 + 32);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v39;
    do
    {
      v7 = 0;
      v35 = v5;
      do
      {
        if (*(_QWORD *)v39 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)v7);
        v9 = *(_QWORD *)(a1 + 40);
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
        v37 = *(id *)(v10 + 40);
        v11 = sub_100040628(v9, v8, &v37);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        objc_storeStrong((id *)(v10 + 40), v37);
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
          goto LABEL_8;
        v15 = *(void **)(a1 + 48);
        v16 = v6;
        v17 = v3;
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "identifier"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "hexStringAsData"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "subjectIdentifier"));
        v21 = sub_1000432D0(v15, v19, v20);
        v22 = objc_claimAutoreleasedReturnValue(v21);
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
        v24 = *(void **)(v23 + 40);
        *(_QWORD *)(v23 + 40) = v22;

        v3 = v17;
        v6 = v16;
        v5 = v35;
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
        {
LABEL_8:
          v25 = SESDefaultLogObject(v13, v14);
          v26 = objc_claimAutoreleasedReturnValue(v25);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "subjectIdentifier"));
            *(_DWORD *)buf = 138412546;
            v43 = v27;
            v44 = 2112;
            v45 = v28;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Error %@ while removing CA %@ from SE", buf, 0x16u);

          }
        }
        v29 = sub_10002BA88((uint64_t)v3);
        v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
        objc_msgSend(v30, "deleteObject:", v8);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
    }
    while (v5);
  }

  v31 = sub_10002BA94((uint64_t)v3);
  v32 = objc_claimAutoreleasedReturnValue(v31);
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v34 = *(void **)(v33 + 40);
  *(_QWORD *)(v33 + 40) = v32;

}

uint64_t sub_10005978C(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 32);
  v8 = 0;
  v3 = sub_10003ADE0(v2, a2, &v8);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (v4)
    v5 = v8 == 0;
  else
    v5 = 0;
  v6 = !v5;

  return v6;
}

uint64_t sub_1000597D8(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 32);
  v8 = 0;
  v3 = sub_100040628(v2, a2, &v8);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (v4)
    v5 = v8 == 0;
  else
    v5 = 0;
  v6 = !v5;

  return v6;
}

void sub_100059824(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t v38[128];
  uint8_t buf[4];
  void *v40;
  _BYTE v41[128];

  v3 = a2;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v29 = a1;
  v4 = *(id *)(a1 + 32);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v34, v41, 16);
  if (v5)
  {
    v7 = v5;
    v8 = *(_QWORD *)v35;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v35 != v8)
          objc_enumerationMutation(v4);
        v10 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)v9);
        v11 = SESDefaultLogObject(v5, v6);
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier"));
          *(_DWORD *)buf = 138412290;
          v40 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Deleting unparsable EP Entity %@", buf, 0xCu);

        }
        v14 = sub_10002BA88((uint64_t)v3);
        v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        objc_msgSend(v15, "deleteObject:", v10);

        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v34, v41, 16);
      v7 = v5;
    }
    while (v5);
  }

  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v16 = *(id *)(v29 + 40);
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
  if (v17)
  {
    v19 = v17;
    v20 = *(_QWORD *)v31;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v31 != v20)
          objc_enumerationMutation(v16);
        v22 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)v21);
        v23 = SESDefaultLogObject(v17, v18);
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "identifier"));
          *(_DWORD *)buf = 138412290;
          v40 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Deleting unparsable CA Entity %@", buf, 0xCu);

        }
        v26 = sub_10002BA88((uint64_t)v3);
        v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        objc_msgSend(v27, "deleteObject:", v22);

        v21 = (char *)v21 + 1;
      }
      while (v19 != v21);
      v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
      v19 = v17;
    }
    while (v17);
  }

  v28 = sub_10002BA94((uint64_t)v3);
}

uint64_t sub_100059F04(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v7;
  uint64_t v8;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESACWGSession endSession %@", (uint8_t *)&v7, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "endSessionInternal:", 0);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10005A07C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  id *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  _QWORD v44[4];
  id v45;
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  uint64_t v49;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v47 = v5;
    v48 = 2112;
    v49 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESACWGSession %@ setActiveKey %@", buf, 0x16u);
  }

  v7 = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((v7 & 1) == 0)
  {
    v16 = *(_QWORD *)(a1 + 48);
    v17 = SESDefaultLogObject(v7, v8);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v19 = SESCreateAndLogError(0, v18, SESErrorDomain, 8, CFSTR("Session is not active"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v20);

    return;
  }
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_15;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "publicKeyIdentifier"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "hexStringAsData"));
  v11 = objc_msgSend(v9, "isEqualToData:", v10);

  if (v11)
  {
    v14 = SESDefaultLogObject(v12, v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Key already active", buf, 2u);
    }

    goto LABEL_16;
  }
  v21 = *(void **)(a1 + 40);
  if (!v21)
  {
LABEL_15:
    v34 = *(_QWORD *)(a1 + 32);
    v35 = *(void **)(v34 + 64);
    *(_QWORD *)(v34 + 64) = 0;

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 56) = 0;
LABEL_16:
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    return;
  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "hexStringAsData"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[LyonExternal shared](_TtC10seserviced12LyonExternal, "shared"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "getAllEndpoints"));

  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "allObjects"));
  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472;
  v44[2] = sub_10005A40C;
  v44[3] = &unk_100304FC0;
  v26 = v22;
  v45 = v26;
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "find:", v44));

  v28 = (id *)(*(_QWORD *)(a1 + 32) + 64);
  if (v27)
  {
    objc_storeStrong(v28, v27);
    v31 = SESDefaultLogObject(v29, v30);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      v33 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v47 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Active key set to %@", buf, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v36 = *v28;
    *v28 = 0;

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 56) = 0;
    v37 = *(_QWORD *)(a1 + 48);
    v40 = SESDefaultLogObject(v38, v39);
    v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
    v42 = SESCreateAndLogError(0, v41, SESErrorDomain, 0, CFSTR("Invalid key identifier %@"));
    v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
    (*(void (**)(uint64_t, void *))(v37 + 16))(v37, v43);

  }
}

id sub_10005A40C(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "publicKeyIdentifier"));
  v4 = objc_msgSend(v2, "isEqualToData:", v3);

  return v4;
}

void sub_10005A50C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v13 = 138412290;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESACWGSession %@ setSecureElementToken", (uint8_t *)&v13, 0xCu);
  }

  v6 = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((v6 & 1) != 0)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "isWaitingForSecureElement"))
    {
      objc_msgSend(*(id *)(a1 + 32), "pushSecureElementToken:", *(_QWORD *)(a1 + 40));
      objc_msgSend(*(id *)(a1 + 32), "setIsWaitingForSecureElement:", 0);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "setSeToken:", *(_QWORD *)(a1 + 40));
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 48);
    v9 = SESDefaultLogObject(v6, v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = SESCreateAndLogError(0, v10, SESErrorDomain, 8, CFSTR("Session is not active"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v12);

  }
}

void sub_10005A6F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFString *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  int v28;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)buf = 138412546;
    v26 = v5;
    v27 = 1024;
    v28 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESACWGSession %@ preArmActiveKey %d", buf, 0x12u);
  }

  v7 = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((v7 & 1) == 0)
  {
    v15 = *(_QWORD *)(a1 + 40);
    v16 = SESDefaultLogObject(v7, v8);
    v14 = (id)objc_claimAutoreleasedReturnValue(v16);
    v17 = SESErrorDomain;
    v18 = CFSTR("Session is not active");
    v19 = v14;
    v20 = 8;
LABEL_8:
    v22 = SESCreateAndLogError(0, v19, v17, v20, v18);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v23);

    goto LABEL_9;
  }
  v9 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v9 + 64))
  {
    v15 = *(_QWORD *)(a1 + 40);
    v21 = SESDefaultLogObject(v7, v8);
    v14 = (id)objc_claimAutoreleasedReturnValue(v21);
    v17 = SESErrorDomain;
    v18 = CFSTR("No active key");
    v19 = v14;
    v20 = 2;
    goto LABEL_8;
  }
  *(_BYTE *)(v9 + 56) = *(_BYTE *)(a1 + 48);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[LyonExternal shared](_TtC10seserviced12LyonExternal, "shared"));
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(unsigned __int8 *)(v11 + 56);
  v13 = *(_QWORD *)(v11 + 64);
  v24 = 0;
  objc_msgSend(v10, "updatePreArmState:for:error:", v12, v13, &v24);
  v14 = v24;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_9:

}

void sub_10005A928(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  if ((objc_msgSend(*(id *)(a1 + 32), "isWaitingForSecureElement") & 1) == 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "seToken"));

    v3 = *(void **)(a1 + 32);
    if (v2)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "seToken"));
      objc_msgSend(v3, "pushSecureElementToken:", v4);

      objc_msgSend(*(id *)(a1 + 32), "setSeToken:", 0);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "setIsWaitingForSecureElement:", 1);
      v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "remoteObject"));
      objc_msgSend(v5, "sendEvent:", &off_100322D98);

    }
  }
}

void sub_10005AA88(uint64_t a1)
{
  sub_100051EC0((uint64_t)SecureElementManager, *(void **)(a1 + 32));
}

void sub_10005AC7C(id a1)
{
  void *v1;

  v1 = (void *)qword_10034BBF0;
  qword_10034BBF0 = (uint64_t)&off_100322AF0;

}

void sub_10005AEC4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[AlishaPairingExternal shared](_TtC10seserviced21AlishaPairingExternal, "shared"));
  objc_msgSend(v2, "requestOwnerPairingWithSession:delegate:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));

}

id sub_10005B394(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_10034BC08 != -1)
    dispatch_once(&qword_10034BC08, &stru_100305028);
  return (id)qword_10034BC00;
}

void sub_10005B3D8(id a1)
{
  SESDebugServer *v1;
  void *v2;

  v1 = objc_opt_new(SESDebugServer);
  v2 = (void *)qword_10034BC00;
  qword_10034BC00 = (uint64_t)v1;

}

void sub_10005B400(uint64_t a1)
{
  id v1;
  id v2;

  objc_opt_self(a1);
  v1 = sub_10005B394((uint64_t)SESDebugServer);
  v2 = (id)objc_claimAutoreleasedReturnValue(v1);
  sub_10005B438((uint64_t)v2);

}

void sub_10005B438(uint64_t a1)
{
  id v2;
  NSObject *v3;
  _QWORD block[5];

  if (a1)
  {
    v2 = +[SESXPCEventListener registerOnStream:forEvent:handler:](SESXPCEventListener, "registerOnStream:forEvent:handler:", CFSTR("com.apple.nfcd.xpc.sesd.events"), CFSTR("Payload"), a1);
    v3 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10005B4C4;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v3, block);
  }
}

void sub_10005B4C4(uint64_t a1)
{
  id v2;
  uint64_t v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "addObserver:forKeyPath:options:context:", *(_QWORD *)(a1 + 32), CFSTR("debug.install.logging.applet"), 4, 0);
  v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v3 + 24) == 4279897)
    sub_10005B554((dispatch_queue_t *)v3);
  objc_sync_exit(v2);

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = 1;
  sub_10005B708(*(_QWORD *)(a1 + 32));
}

void sub_10005B540(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10005B554(dispatch_queue_t *a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  id v5;
  dispatch_queue_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  dispatch_queue_t v11;
  _QWORD v12[4];
  NSObject *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t buf[4];
  dispatch_queue_t v20;

  if (a1)
  {
    dispatch_assert_queue_V2(a1[1]);
    v15 = 0;
    v16 = &v15;
    v17 = 0x2020000000;
    v18 = 0;
    v2 = dispatch_group_create();
    dispatch_group_enter(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NFHardwareManager sharedHardwareManager](NFHardwareManager, "sharedHardwareManager"));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10005C10C;
    v12[3] = &unk_1003050A0;
    v4 = v2;
    v13 = v4;
    v14 = &v15;
    v5 = objc_msgSend(v3, "startLPEMConfigSession:", v12);

    dispatch_group_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    v6 = a1;
    objc_sync_enter(v6);
    v6[3] = (dispatch_queue_t)((v16[3] & 6) != 0);
    objc_sync_exit(v6);

    v9 = SESDefaultLogObject(v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = v6[3];
      *(_DWORD *)buf = 134217984;
      v20 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "LPEM enabled value %lu", buf, 0xCu);
    }

    _Block_object_dispose(&v15, 8);
  }
}

void sub_10005B6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10005B708(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  unsigned __int8 v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[5];
  id v12;
  id v13;
  char v14;
  unsigned __int8 v15;
  uint8_t buf[16];

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    v2 = objc_msgSend(*(id *)(a1 + 40), "BOOLForKey:", CFSTR("debug.install.logging.applet"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "stringForKey:", CFSTR("debug.logging.profile.to.install")));
    v4 = +[SESBootUUID isFirstLaunchAfterBootForKey:](SESBootUUID, "isFirstLaunchAfterBootForKey:", CFSTR("debug.logging.last.check.uuid"));
    if ((v4 & 1) != 0)
    {
      +[SESBootUUID setFirstLaunchAfterBootDoneForKey:](SESBootUUID, "setFirstLaunchAfterBootDoneForKey:", CFSTR("debug.logging.last.check.uuid"));
    }
    else
    {
      v5 = (unsigned __int8 *)(id)a1;
      v6 = objc_sync_enter(v5);
      if (v5[17] == v2 && (!*((_QWORD *)v5 + 3) || v5[16]))
      {
        v8 = SESDefaultLogObject(v6, v7);
        v9 = objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Logging profile and/or applet installed correctly, nothing to do", buf, 2u);
        }

        objc_sync_exit(v5);
        goto LABEL_12;
      }
      objc_sync_exit(v5);

    }
    v10 = (void *)os_transaction_create("com.apple.seserviced.debug.install.loggingapplet");
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10005B928;
    v11[3] = &unk_100305078;
    v11[4] = a1;
    v14 = v2;
    v15 = v4;
    v12 = v3;
    v13 = v10;
    v5 = v10;
    sub_100051680((uint64_t)SecureElementManager, CFSTR("Evaluate Conditions for Logging Applet"), v11);

LABEL_12:
  }
}

void sub_10005B8B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10005B920(uint64_t a1)
{
  sub_10005B708(*(_QWORD *)(a1 + 32));
}

void sub_10005B928(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD block[5];
  id v13;
  id v14;
  id v15;
  char v16;
  char v17;
  uint8_t buf[16];

  v5 = a2;
  v7 = v5;
  if (a3)
  {
    v8 = SESDefaultLogObject(v5, v6);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to get SE, logging applet pref dropped on the floor", buf, 2u);
    }

  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(NSObject **)(v10 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10005BA3C;
    block[3] = &unk_100305050;
    block[4] = v10;
    v13 = v5;
    v16 = *(_BYTE *)(a1 + 56);
    v14 = *(id *)(a1 + 40);
    v17 = *(_BYTE *)(a1 + 57);
    v15 = *(id *)(a1 + 48);
    dispatch_async(v11, block);

  }
}

void sub_10005BA3C(uint64_t a1)
{
  sub_10005BA54(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(void **)(a1 + 48), *(unsigned __int8 *)(a1 + 65));
}

void sub_10005BA54(uint64_t a1, void *a2, int a3, void *a4, int a5)
{
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  BOOL v14;
  id *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  id v26;
  uint64_t v27;
  int v28;
  const char *v29;
  uint64_t v30;
  NSObject *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  void *v38;
  _BOOL4 v39;
  void *v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  uint64_t v47;
  void **v48;
  id v49;
  void *v50;
  int v51;
  _QWORD v52[2];

  v9 = a2;
  v10 = a4;
  if (!a1)
    goto LABEL_36;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  if (a5)
  {
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704E000010002"), "hexStringAsData"));
    *(_BYTE *)(a1 + 16) = sub_1000500FC(v9, (void *)v11);

    objc_msgSend(*(id *)(a1 + 40), "setBool:forKey:", *(unsigned __int8 *)(a1 + 16), CFSTR("debug.have.logging.applet"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704E000010000"), "hexStringAsData"));
    LOBYTE(v11) = sub_1000500FC(v9, v12);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704E000010001"), "hexStringAsData"));
    v14 = sub_1000500FC(v9, v13);

    *(_BYTE *)(a1 + 17) = v11 & v14;
    objc_msgSend(*(id *)(a1 + 40), "setBool:forKey:");
  }
  v15 = (id *)(id)a1;
  objc_sync_enter(v15);
  if (!*((_BYTE *)v15 + 16) && (v15[3] || a3))
  {
    v16 = sub_10005BF14((uint64_t)v15, v9);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    v19 = (void *)v17;
    if (v17)
    {
      v20 = SESDefaultLogObject(v17, v18);
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        v51 = 138412290;
        v52[0] = v19;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to SLAM logging applet, dropping logging preference %@", (uint8_t *)&v51, 0xCu);
      }

      objc_sync_exit(v15);
      goto LABEL_36;
    }
    *((_BYTE *)v15 + 16) = 1;
    objc_msgSend(v15[5], "setBool:forKey:", 1, CFSTR("debug.have.logging.applet"));
  }
  objc_sync_exit(v15);

  if (*((unsigned __int8 *)v15 + 17) == a3)
  {
    v24 = SESDefaultLogObject(v22, v23);
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      v51 = 67109120;
      LODWORD(v52[0]) = a3;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Synced (after checking with SE) at %d", (uint8_t *)&v51, 8u);
    }

    goto LABEL_36;
  }
  if (a3)
  {
    v26 = objc_msgSend(v10, "isEqualToString:", CFSTR("Engineering"));
    if ((v26 & 1) != 0)
    {
      v28 = 1;
      v29 = "SLAMInstallLogger_v0_DevelopmentProfile";
      goto LABEL_23;
    }
    v30 = SESDefaultLogObject(v26, v27);
    v31 = objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v51 = 138412290;
      v52[0] = v10;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Can't find install script for profile %@", (uint8_t *)&v51, 0xCu);
    }

    objc_msgSend(v15[5], "setBool:forKey:", 0, CFSTR("debug.install.logging.applet"));
  }
  v28 = 0;
  v29 = "SLAMDeleteSunspriteLoggingApplets";
LABEL_23:
  v32 = sub_100011DAC(v9, (uint64_t)v29);
  v33 = objc_claimAutoreleasedReturnValue(v32);
  v35 = (void *)v33;
  if (v33)
  {
    v36 = SESDefaultLogObject(v33, v34);
    v37 = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      v51 = 138412290;
      v52[0] = v35;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Failed to SLAM logging applet instances, dropping logging preference %@", (uint8_t *)&v51, 0xCu);
    }

  }
  else
  {
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704E000010000"), "hexStringAsData"));
    v39 = sub_1000500FC(v9, v38);

    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704E000010001"), "hexStringAsData"));
    v41 = sub_1000500FC(v9, v40);

    v44 = SESDefaultLogObject(v42, v43);
    v45 = objc_claimAutoreleasedReturnValue(v44);
    v46 = v45;
    v47 = v39 & v41;
    if (v28 != v47)
    {
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        v51 = 67109376;
        LODWORD(v52[0]) = v28;
        WORD2(v52[0]) = 1024;
        *(_DWORD *)((char *)v52 + 6) = v47;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "Failed to set up logging instances shouldInstall %d isAppletInstalled %d; ignoring logging preference",
          (uint8_t *)&v51,
          0xEu);
      }

    }
    else
    {
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        LOWORD(v51) = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "Successfully set up or deleted logging instances", (uint8_t *)&v51, 2u);
      }

      v49 = v15[5];
      v48 = v15 + 5;
      *((_BYTE *)v48 - 23) = v47;
      objc_msgSend(v49, "setBool:forKey:", v47, CFSTR("debug.have.logging.profile"));
      v50 = *v48;
      if ((_DWORD)v47)
        objc_msgSend(v50, "setObject:forKey:", v10, CFSTR("debug.logging.profile.did.install"));
      else
        objc_msgSend(v50, "removeObjectForKey:", CFSTR("debug.logging.profile.did.install"));
    }
  }
LABEL_36:

}

void sub_10005BEF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10005BF14(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  int v25;
  void *v26;

  v3 = a2;
  if (!a1)
  {
    v22 = 0;
    goto LABEL_17;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v6 = SESDefaultLogObject(v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    LOWORD(v25) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Installing Logging Applet", (uint8_t *)&v25, 2u);
  }

  v8 = sub_100011DAC(v3, (uint64_t)"SLAMLoadAndInstallLogger");
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v11 = (void *)v9;
  if (v9)
  {
    v12 = SESDefaultLogObject(v9, v10);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v25 = 138412290;
      v26 = v11;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to SLAM logging applet instances, dropping logging preference %@", (uint8_t *)&v25, 0xCu);
    }

    v14 = v11;
  }
  else
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704E000010002"), "hexStringAsData"));
    v16 = sub_1000500FC(v3, v15);

    v19 = SESDefaultLogObject(v17, v18);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    v21 = v20;
    if (v16)
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        LOWORD(v25) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Logger applet successfully installed", (uint8_t *)&v25, 2u);
      }

      v22 = 0;
      goto LABEL_16;
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v25) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to install Logger applet; ignoring logging preference",
        (uint8_t *)&v25,
        2u);
    }

    v23 = SESEnsureError(0);
    v14 = (id)objc_claimAutoreleasedReturnValue(v23);
  }
  v22 = v14;
LABEL_16:

LABEL_17:
  return v22;
}

void sub_10005C10C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  id v18;
  uint8_t buf[4];
  void *v20;

  v5 = a2;
  v6 = a3;
  v8 = v6;
  if (!v5 || v6)
  {
    v15 = SESDefaultLogObject(v6, v7);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to start LPEM session with error: %@", buf, 0xCu);
    }

    v17 = SESEnsureError(v8);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v17);

  }
  else
  {
    v18 = 0;
    v9 = objc_msgSend(v5, "getLPEMFeaturesWithError:", &v18);
    v10 = v18;
    v12 = v10;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v9;
    if (v10)
    {
      v13 = SESDefaultLogObject(v10, v11);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "getLPEMFeatures failed with error: %@", buf, 0xCu);
      }

    }
    objc_msgSend(v5, "endSession");
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_10005C280(void *a1, void *a2)
{
  id v3;
  void *v4;
  _BOOL4 v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  uint8_t v17[16];
  uint8_t buf[16];

  v3 = a2;
  if (a1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("A000000704E000010002"), "hexStringAsData"));
    v5 = sub_1000500FC(v3, v4);

    if (v5)
    {
      v6 = a1;
      objc_sync_enter(v6);
      if (v6[3] || *((_BYTE *)v6 + 17))
      {
        objc_sync_exit(v6);

      }
      else
      {
        objc_sync_exit(v6);

        v9 = SESDefaultLogObject(v7, v8);
        v10 = objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Deleting unused Logger Applet", buf, 2u);
        }

        v11 = sub_100011DAC(v3, (uint64_t)"SLAMDeleteLogger");
        v12 = objc_claimAutoreleasedReturnValue(v11);
        v14 = (void *)v12;
        if (v12)
        {
          v15 = SESDefaultLogObject(v12, v13);
          v16 = objc_claimAutoreleasedReturnValue(v15);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v17 = 0;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "SLAM Failed, could not delete logging applet!", v17, 2u);
          }

        }
        *((_BYTE *)v6 + 16) = 0;
        objc_msgSend(v6[5], "setBool:forKey:", 0, CFSTR("debug.have.logging.applet"));

      }
    }
  }

}

void sub_10005C494(id *a1)
{
  id v2;
  uint64_t v3;
  const char *string;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  id v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  xpc_object_t value;
  void *v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int64_t v29;

  v2 = objc_msgSend(a1[4], "isEqualToString:", CFSTR("com.apple.nfcd.xpc.sesd.events"));
  if ((v2 & 1) != 0)
  {
    string = xpc_dictionary_get_string(a1[5], _xpc_event_key_name);
    if (string && (v5 = string, v6 = strcmp(string, "Payload"), (_DWORD)v6))
    {
      v8 = SESDefaultLogObject(v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v28 = 136315138;
        v29 = (int64_t)v5;
        v10 = "Ignoring eventName %s";
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v28, 0xCu);
      }
    }
    else
    {
      v13 = xpc_dictionary_get_string(a1[5], "Payload");
      if (v13)
      {
        v14 = v13;
        v15 = strcmp(v13, "com.apple.stockholm.lpem.changed");
        if ((_DWORD)v15)
        {
          v17 = SESDefaultLogObject(v15, v16);
          v9 = objc_claimAutoreleasedReturnValue(v17);
          if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
            goto LABEL_20;
          v28 = 136315138;
          v29 = (int64_t)v14;
          v10 = "Ignoring event %s";
          goto LABEL_8;
        }
      }
      value = xpc_dictionary_get_value(a1[5], "lpemFeatures");
      v19 = (void *)objc_claimAutoreleasedReturnValue(value);
      v20 = xpc_int64_get_value(v19);

      v23 = SESDefaultLogObject(v21, v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        v28 = 134217984;
        v29 = v20;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Received event for LPEM state change value %lu", (uint8_t *)&v28, 0xCu);
      }

      v9 = a1[6];
      objc_sync_enter(v9);
      v25 = a1[6];
      v26 = v25[3];
      v25[3] = (v20 & 6) != 0;
      v27 = (uint64_t)a1[6];
      if (*(_BYTE *)(v27 + 32) && *(_QWORD *)(v27 + 24) && !v26)
        sub_10005B708(v27);
      objc_sync_exit(v9);
    }
  }
  else
  {
    v11 = SESDefaultLogObject(v2, v3);
    v9 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v12 = a1[4];
      v28 = 138412290;
      v29 = (int64_t)v12;
      v10 = "Ignoring stream %@";
      goto LABEL_8;
    }
  }
LABEL_20:

}

void sub_10005C6E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10005CE40(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v7;
  uint64_t v8;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESAssertion invalidate %@", (uint8_t *)&v7, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "stop");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10005D5A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10005D5C8(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  _QWORD v5[5];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "setStateDescriptor:", v3);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10005D64C;
  v5[3] = &unk_1003050C8;
  v5[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend(v4, "setUpdateHandler:", v5);

}

id sub_10005D64C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "applicationStateChanged:stateUpdate:");
}

id sub_10005D654(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "setPredicates:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
}

void sub_10005D8EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10005D910(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "setPredicates:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
}

void sub_10005DCD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10005DCEC(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "processIdentifier") == *(_DWORD *)(a1 + 32);
}

void sub_10005E1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t sub_10005E698(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v7;
  uint64_t v8;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESDCKSession endSession %@", (uint8_t *)&v7, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "endSessionInternal:", 0);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10005E810(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  id *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  unsigned int v37;
  const __CFString *v38;
  id *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  _QWORD v55[4];
  id v56;
  _QWORD v57[3];
  _QWORD v58[3];
  uint8_t buf[4];
  uint64_t v60;
  __int16 v61;
  uint64_t v62;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v60 = v5;
    v61 = 2112;
    v62 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESDCKSession %@ setActiveKey %@", buf, 0x16u);
  }

  v7 = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((v7 & 1) == 0)
  {
    v16 = *(_QWORD *)(a1 + 48);
    v17 = SESDefaultLogObject(v7, v8);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v19 = SESCreateAndLogError(0, v18, SESErrorDomain, 8, CFSTR("Session is not active"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v20);

    return;
  }
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_17;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "publicKeyIdentifier"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "hexStringAsData"));
  v11 = objc_msgSend(v9, "isEqualToData:", v10);

  if (v11)
  {
    v14 = SESDefaultLogObject(v12, v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Key already active", buf, 2u);
    }

    goto LABEL_18;
  }
  v21 = *(void **)(a1 + 40);
  if (!v21)
  {
LABEL_17:
    v45 = *(_QWORD *)(a1 + 32);
    v46 = *(void **)(v45 + 64);
    *(_QWORD *)(v45 + 64) = 0;

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 57) = 0;
LABEL_18:
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    return;
  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "hexStringAsData"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "getAllEndpoints"));

  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "allObjects"));
  v55[0] = _NSConcreteStackBlock;
  v55[1] = 3221225472;
  v55[2] = sub_10005ECBC;
  v55[3] = &unk_100304FC0;
  v26 = v22;
  v56 = v26;
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "find:", v55));

  v28 = (id *)(*(_QWORD *)(a1 + 32) + 64);
  if (v27)
  {
    objc_storeStrong(v28, v27);
    v31 = SESDefaultLogObject(v29, v30);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      v33 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v60 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Active key set to %@", buf, 0xCu);
    }

    v34 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "bleUUID"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID ses_withUUIDString:](NSUUID, "ses_withUUIDString:", v35));
    v37 = objc_msgSend(v34, "isPeerConnectedWithClientUUID:", v36);

    v38 = CFSTR("com.apple.secureelementservice.dck.event.vehicle.did.disconnect");
    v39 = *(id **)(a1 + 32);
    if (v37)
      v38 = CFSTR("com.apple.secureelementservice.dck.event.vehicle.did.connect");
    v58[0] = v38;
    v57[0] = CFSTR("xpcEventName");
    v57[1] = CFSTR("appletIdentifier");
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39[8], "appletIdentifier"));
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "asHexString"));
    v57[2] = CFSTR("keyIdentifier");
    v42 = *(_QWORD *)(a1 + 40);
    v58[1] = v41;
    v58[2] = v42;
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v58, v57, 3));
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "publicKeyIdentifier"));
    objc_msgSend(v39, "sendEvent:keyIdentifier:", v43, v44);

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v47 = *v28;
    *v28 = 0;

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 57) = 0;
    v48 = *(_QWORD *)(a1 + 48);
    v51 = SESDefaultLogObject(v49, v50);
    v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
    v53 = SESCreateAndLogError(0, v52, SESErrorDomain, 0, CFSTR("Invalid key identifier %@"));
    v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
    (*(void (**)(uint64_t, void *))(v48 + 16))(v48, v54);

  }
}

BOOL sub_10005ECBC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  _BOOL8 v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "publicKeyIdentifier"));
  if (objc_msgSend(v4, "isEqualToData:", v5))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bleUUID"));
    v7 = v6 != 0;

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_10005EDF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v13 = 138412290;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESDCKSession %@ setSecureElementToken", (uint8_t *)&v13, 0xCu);
  }

  v6 = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((v6 & 1) != 0)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "isWaitingForSecureElement"))
    {
      objc_msgSend(*(id *)(a1 + 32), "pushSecureElementToken:", *(_QWORD *)(a1 + 40));
      objc_msgSend(*(id *)(a1 + 32), "setIsWaitingForSecureElement:", 0);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "setSeToken:", *(_QWORD *)(a1 + 40));
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 48);
    v9 = SESDefaultLogObject(v6, v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = SESCreateAndLogError(0, v10, SESErrorDomain, 8, CFSTR("Session is not active"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v12);

  }
}

void sub_10005EFD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v13 = 138412290;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESDCKSession %@ setAuthorization", (uint8_t *)&v13, 0xCu);
  }

  v6 = objc_msgSend(*(id *)(a1 + 32), "isActive");
  v8 = *(_QWORD *)(a1 + 40);
  if ((v6 & 1) != 0)
  {
    (*(void (**)(uint64_t, _QWORD))(v8 + 16))(v8, 0);
  }
  else
  {
    v9 = SESDefaultLogObject(v6, v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = SESCreateAndLogError(0, v10, SESErrorDomain, 8, CFSTR("Session is not active"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v12);

  }
}

void sub_10005F194(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  const __CFString *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  int v27;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(unsigned __int8 *)(a1 + 48);
    v24 = 138412546;
    v25 = v5;
    v26 = 1024;
    v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESDCKSession %@ preArmActiveKey %d", (uint8_t *)&v24, 0x12u);
  }

  v7 = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((v7 & 1) == 0)
  {
    v14 = *(_QWORD *)(a1 + 40);
    v15 = SESDefaultLogObject(v7, v8);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v17 = SESErrorDomain;
    v18 = CFSTR("Session is not active");
    v19 = v16;
    v20 = 8;
LABEL_10:
    v22 = SESCreateAndLogError(0, v19, v17, v20, v18);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v23);

    return;
  }
  v9 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v9 + 64))
  {
    v14 = *(_QWORD *)(a1 + 40);
    v21 = SESDefaultLogObject(v7, v8);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v21);
    v17 = SESErrorDomain;
    v18 = CFSTR("No active key");
    v19 = v16;
    v20 = 2;
    goto LABEL_10;
  }
  *(_BYTE *)(v9 + 57) = *(_BYTE *)(a1 + 48);
  if (objc_msgSend(*(id *)(a1 + 32), "isPreArmed"))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
    v11 = objc_alloc((Class)NSUUID);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "bleUUID"));
    v13 = objc_msgSend(v11, "initWithUUIDString:", v12);
    objc_msgSend(v10, "pauseRangingFor:", v13);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10005F458(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFString *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  _BOOL4 v30;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 64);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40) != 0;
    *(_DWORD *)buf = 138413058;
    v24 = v7;
    v25 = 1024;
    v26 = v5;
    v27 = 1024;
    v28 = v6;
    v29 = 1024;
    v30 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESDCKSession %@ sendRKEFunction 0x%X action 0x%X authorization %d", buf, 0x1Eu);
  }

  v9 = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((v9 & 1) == 0)
  {
    v15 = *(_QWORD *)(a1 + 48);
    v16 = SESDefaultLogObject(v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v17 = SESErrorDomain;
    v18 = CFSTR("Session is not active");
    v19 = v11;
    v20 = 8;
LABEL_8:
    v22 = SESCreateAndLogError(0, v19, v17, v20, v18);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v22);
    (*(void (**)(uint64_t, _QWORD, void *))(v15 + 16))(v15, 0, v14);
    goto LABEL_9;
  }
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64))
  {
    v15 = *(_QWORD *)(a1 + 48);
    v21 = SESDefaultLogObject(v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v21);
    v17 = SESErrorDomain;
    v18 = CFSTR("No active key");
    v19 = v11;
    v20 = 2;
    goto LABEL_8;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
  v12 = *(unsigned __int16 *)(a1 + 56);
  v13 = *(unsigned __int8 *)(a1 + 64);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "publicKeyIdentifier"));
  objc_msgSend(v11, "sendRKERequestWithFunctionIdentifier:actionIdentifier:keyIdentifier:requestType:enduringRequestHandler:authorization:completion:", v12, v13, v14, 0, 0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
LABEL_9:

}

void sub_10005F6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFString *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  int v25;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 48);
    v22 = 138412546;
    v23 = v5;
    v24 = 1024;
    v25 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESDCKSession %@ cancelRKEFunction 0x%X", (uint8_t *)&v22, 0x12u);
  }

  v7 = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((v7 & 1) == 0)
  {
    v13 = *(_QWORD *)(a1 + 40);
    v14 = SESDefaultLogObject(v7, v8);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v15 = SESErrorDomain;
    v16 = CFSTR("Session is not active");
    v17 = v12;
    v18 = 8;
LABEL_8:
    v20 = SESCreateAndLogError(0, v17, v15, v18, v16);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v21);

    goto LABEL_9;
  }
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64))
  {
    v13 = *(_QWORD *)(a1 + 40);
    v19 = SESDefaultLogObject(v7, v8);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v19);
    v15 = SESErrorDomain;
    v16 = CFSTR("No active key");
    v17 = v12;
    v18 = 2;
    goto LABEL_8;
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
  v10 = *(unsigned __int16 *)(a1 + 48);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "publicKeyIdentifier"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "cancelRKERequestWithFunctionIdentifier:keyIdentifier:", v10, v11));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_9:

}

void sub_10005F958(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  const __CFString *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  int v25;
  uint64_t v26;

  v3 = SESDefaultLogObject(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v25 = 138412290;
    v26 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SESDCKSession %@ sendPassthroughMessage", (uint8_t *)&v25, 0xCu);
  }

  v6 = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((v6 & 1) != 0)
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 64);
    if (v9)
    {
      if (*(_BYTE *)(v8 + 56))
      {
LABEL_15:
        v22 = objc_alloc((Class)NSUUID);
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "bleUUID"));
        v14 = objc_msgSend(v22, "initWithUUIDString:", v23);

        v24 = (void *)objc_claimAutoreleasedReturnValue(+[AlishaExternal shared](_TtC10seserviced14AlishaExternal, "shared"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "sendPassthroughWithMessage:clientUUID:", *(_QWORD *)(a1 + 40), v14));

        (*(void (**)(_QWORD, void *))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v21);
        goto LABEL_16;
      }
      v10 = objc_msgSend(v9, "getEndpointUser");
      if (v10)
      {
        if (v10 != (id)1)
        {
LABEL_14:
          *(_BYTE *)(*(_QWORD *)(a1 + 32) + 56) = 1;
          goto LABEL_15;
        }
        v11 = CFSTR("friendPassthroughCount");
      }
      else
      {
        v11 = CFSTR("ownerPassthroughCount");
      }
      sub_100049C94((uint64_t)SESDAnalyticsLogger, v11);
      goto LABEL_14;
    }
    v12 = *(_QWORD *)(a1 + 48);
    v19 = SESDefaultLogObject(0, v7);
    v14 = (id)objc_claimAutoreleasedReturnValue(v19);
    v15 = SESErrorDomain;
    v16 = CFSTR("No active key");
    v17 = v14;
    v18 = 2;
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 48);
    v13 = SESDefaultLogObject(v6, v7);
    v14 = (id)objc_claimAutoreleasedReturnValue(v13);
    v15 = SESErrorDomain;
    v16 = CFSTR("Session is not active");
    v17 = v14;
    v18 = 8;
  }
  v20 = SESCreateAndLogError(0, v17, v15, v18, v16);
  v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v21);
LABEL_16:

}

void sub_10005FBD4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  if ((objc_msgSend(*(id *)(a1 + 32), "isWaitingForSecureElement") & 1) == 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "seToken"));

    v3 = *(void **)(a1 + 32);
    if (v2)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "seToken"));
      objc_msgSend(v3, "pushSecureElementToken:", v4);

      objc_msgSend(*(id *)(a1 + 32), "setSeToken:", 0);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "setIsWaitingForSecureElement:", 1);
      v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "remoteObject"));
      objc_msgSend(v5, "sendEvent:", &off_100322DC0);

    }
  }
}

void sub_10005FD34(uint64_t a1)
{
  sub_100051EC0((uint64_t)SecureElementManager, *(void **)(a1 + 32));
}

void sub_10005FF28(id a1)
{
  void *v1;

  v1 = (void *)qword_10034BC10;
  qword_10034BC10 = (uint64_t)&off_100322B08;

}

id sub_1000601F0()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AlishaPairingExternal(0)), "init");
  qword_100354A60 = (uint64_t)result;
  return result;
}

uint64_t sub_100060260(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v24 = qword_100354EE8;
  v15 = (_QWORD *)swift_allocObject(&unk_1003069B8, 40, 7);
  v15[2] = v2;
  v15[3] = a1;
  v15[4] = a2;
  aBlock[4] = sub_100063F0C;
  v27 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_1003069D0;
  v16 = _Block_copy(aBlock);
  v17 = v2;
  v18 = a1;
  v19 = swift_unknownObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v19);
  v25 = _swiftEmptyArrayStorage;
  v20 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_100063D3C((uint64_t *)&unk_100346200);
  v22 = sub_100063D7C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v21, v22, v5, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v9, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return swift_release(v27);
}

uint64_t sub_10006046C(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  _BYTE *v13;

  v6 = Logger.logObject.getter(a1);
  v10 = static os_log_type_t.info.getter(v6, v7, v8, v9);
  if (os_log_type_enabled(v6, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v10, "KML called requestOwnerPairing", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  swift_unknownObjectWeakAssign(&a1[OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_session], a2);
  swift_unknownObjectWeakAssign(&a1[OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_delegate], a3);
  a1[OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning] = 1;
  if (qword_100344578 != -1)
    swift_once(&qword_100344578, sub_10008091C);
  v12 = swift_allocObject(&unk_100306A08, 24, 7);
  *(_QWORD *)(v12 + 16) = a1;
  v13 = a1;
  sub_10007F074((uint64_t)sub_100063F3C, v12);
  return swift_release(v12);
}

void sub_1000605B4(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t Strong;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    swift_once(&qword_100344578, sub_10008091C);
LABEL_16:
    sub_10007F7C0();
    return;
  }
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) != 1)
    return;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_delegate);
  if (!Strong)
  {
LABEL_13:
    v20 = Logger.logObject.getter(Strong);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Missing session or delegate", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    if (qword_100344578 == -1)
      goto LABEL_16;
    goto LABEL_21;
  }
  v11 = (void *)Strong;
  v12 = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_session);
  if (!v12)
  {
    Strong = swift_unknownObjectRelease(v11);
    goto LABEL_13;
  }
  v13 = (void *)v12;
  v14 = Logger.logObject.getter(v12);
  v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
  if (os_log_type_enabled(v14, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v18, "Calling btHceTxnSessionDidStartEmulation", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  if ((objc_msgSend(v11, "respondsToSelector:", "btHceTxnSessionDidStartEmulation:result:") & 1) != 0)
  {
    swift_unknownObjectRetain(v11);
    if (a1)
      a1 = (void *)_convertErrorToNSError(_:)(a1);
    objc_msgSend(v11, "btHceTxnSessionDidStartEmulation:result:", v13, a1);

    swift_unknownObjectRelease_n(v11, 2);
  }
  else
  {

    swift_unknownObjectRelease(v11);
  }
}

void sub_1000608E8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;

  v2 = Logger.logObject.getter(a1);
  v6 = static os_log_type_t.info.getter(v2, v3, v4, v5);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v6, "KML called stopOwnerPairing", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  if (qword_100344578 != -1)
    swift_once(&qword_100344578, sub_10008091C);
  sub_10007F7C0();
  *(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) = 0;
}

void sub_100060A14(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t Strong;
  void *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;

  v2 = Logger.logObject.getter(a1);
  v6 = static os_log_type_t.info.getter(v2, v3, v4, v5);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v6, "KML called startHceEmulation", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) == 1)
  {
    *(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_canReceiveMessages) = 1;
    v8 = OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isFirstStart;
    if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isFirstStart) & 1) != 0)
    {
LABEL_12:
      *(_BYTE *)(a1 + v8) = 0;
      return;
    }
    Strong = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_delegate);
    if (Strong)
    {
      v10 = (void *)Strong;
      v11 = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_session);
      if (v11)
      {
        v12 = (void *)v11;
        v13 = Logger.logObject.getter(v11);
        v17 = static os_log_type_t.info.getter(v13, v14, v15, v16);
        if (os_log_type_enabled(v13, v17))
        {
          v18 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v18 = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, v17, "Calling btHceTxnSessionDidStartEmulation", v18, 2u);
          swift_slowDealloc(v18, -1, -1);
        }

        if ((objc_msgSend(v10, "respondsToSelector:", "btHceTxnSessionDidStartEmulation:result:") & 1) != 0)
          objc_msgSend(v10, "btHceTxnSessionDidStartEmulation:result:", v12, 0);

        swift_unknownObjectRelease(v10);
        goto LABEL_12;
      }
      Strong = swift_unknownObjectRelease(v10);
    }
    v19 = Logger.logObject.getter(Strong);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Missing session or delegate", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    if (qword_100344578 != -1)
      swift_once(&qword_100344578, sub_10008091C);
    sub_10007F7C0();
  }
}

void sub_100060CCC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;

  v2 = Logger.logObject.getter(a1);
  v6 = static os_log_type_t.info.getter(v2, v3, v4, v5);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v6, "KML called stopHceEmulation", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) == 1)
  {
    *(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_canReceiveMessages) = 0;
    Strong = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_delegate);
    if (Strong)
    {
      v9 = (void *)Strong;
      v10 = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_session);
      if (v10)
      {
        v11 = (void *)v10;
        v12 = Logger.logObject.getter(v10);
        v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
        if (os_log_type_enabled(v12, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v17 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, v16, "Calling btHceTxnSessionDidStopEmulation", v17, 2u);
          swift_slowDealloc(v17, -1, -1);
        }

        if ((objc_msgSend(v9, "respondsToSelector:", "btHceTxnSessionDidStopEmulation:result:") & 1) != 0)
          objc_msgSend(v9, "btHceTxnSessionDidStopEmulation:result:", v11, 0);

        swift_unknownObjectRelease(v9);
        return;
      }
      Strong = swift_unknownObjectRelease(v9);
    }
    v18 = Logger.logObject.getter(Strong);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Missing session or delegate", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    if (qword_100344578 != -1)
      swift_once(&qword_100344578, sub_10008091C);
    sub_10007F7C0();
  }
}

void sub_100060F70(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;

  v2 = Logger.logObject.getter(a1);
  v6 = static os_log_type_t.info.getter(v2, v3, v4, v5);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v6, "KML called startTransactionEmulation", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) == 1)
  {
    if (qword_100344578 != -1)
      swift_once(&qword_100344578, sub_10008091C);
    sub_10008F2C8();
    Strong = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_delegate);
    if (Strong)
    {
      v9 = (void *)Strong;
      v10 = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_session);
      if (v10)
      {
        v11 = (void *)v10;
        v12 = Logger.logObject.getter(v10);
        v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
        if (os_log_type_enabled(v12, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v17 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, v16, "Calling btTxnSessionDidStartTransaction", v17, 2u);
          swift_slowDealloc(v17, -1, -1);
        }

        if ((objc_msgSend(v9, "respondsToSelector:", "btTxnSessionDidStartTransaction:result:") & 1) != 0)
          objc_msgSend(v9, "btTxnSessionDidStartTransaction:result:", v11, 0);

        swift_unknownObjectRelease(v9);
        return;
      }
      Strong = swift_unknownObjectRelease(v9);
    }
    v18 = Logger.logObject.getter(Strong);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Missing session or delegate", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    sub_10007F7C0();
  }
}

void sub_1000611E8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;

  v2 = Logger.logObject.getter(a1);
  v6 = static os_log_type_t.info.getter(v2, v3, v4, v5);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v6, "KML called stopTransactionEmulation", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) == 1)
  {
    if (qword_100344578 != -1)
      swift_once(&qword_100344578, sub_10008091C);
    sub_10007F9A0();
    Strong = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_delegate);
    if (Strong)
    {
      v9 = (void *)Strong;
      v10 = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_session);
      if (v10)
      {
        v11 = (void *)v10;
        v12 = Logger.logObject.getter(v10);
        v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
        if (os_log_type_enabled(v12, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v17 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, v16, "Calling btTxnSessionDidEndTransaction", v17, 2u);
          swift_slowDealloc(v17, -1, -1);
        }

        if ((objc_msgSend(v9, "respondsToSelector:", "btTxnSessionDidEndTransaction:result:") & 1) != 0)
          objc_msgSend(v9, "btTxnSessionDidEndTransaction:result:", v11, 0);

        swift_unknownObjectRelease(v9);
        return;
      }
      Strong = swift_unknownObjectRelease(v9);
    }
    v18 = Logger.logObject.getter(Strong);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Missing session or delegate", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    sub_10007F7C0();
  }
}

uint64_t sub_100061494(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = swift_allocObject(&unk_1003067D8, 32, 7);
  *(_QWORD *)(v13 + 16) = v1;
  *(_QWORD *)(v13 + 24) = a1;
  aBlock[4] = sub_100063E74;
  v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_1003067F0;
  v14 = _Block_copy(aBlock);
  v15 = v1;
  v16 = swift_errorRetain(a1);
  static DispatchQoS.unspecified.getter(v16);
  v22 = _swiftEmptyArrayStorage;
  v17 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_100063D3C((uint64_t *)&unk_100346200);
  v19 = sub_100063D7C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return swift_release(v24);
}

void sub_100061690(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;

  v4 = Logger.logObject.getter(a1);
  v8 = static os_log_type_t.info.getter(v4, v5, v6, v7);
  if (os_log_type_enabled(v4, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v8, "KML called pairingEnded", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) == 1)
  {
    if (qword_100344578 != -1)
      swift_once(&qword_100344578, sub_10008091C);
    sub_10007F9B0(a2);
  }
}

uint64_t sub_1000617C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = qword_100354EE8;
  *v9 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.notOnQueue(_:), v5);
  v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) != 0)
  {
    __chkstk_darwin(result, v13);
    *(&v15 - 4) = v2;
    *(&v15 - 3) = a1;
    *(&v15 - 2) = a2;
    v14 = sub_100063D3C(&qword_100344A38);
    OS_dispatch_queue.sync<A>(execute:)(&v16, sub_100063E2C, &v15 - 6, v14);
    return v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100061918@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t result;
  unint64_t v15;
  _BYTE *v16;

  v8 = Logger.logObject.getter(a1);
  v12 = static os_log_type_t.info.getter(v8, v9, v10, v11);
  if (os_log_type_enabled(v8, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v12, "KML called sendAPDU", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) == 1)
  {
    if (qword_100344578 != -1)
      swift_once(&qword_100344578, sub_10008091C);
    result = sub_10007FC7C(a2, a3);
  }
  else
  {
    v15 = sub_100063C48();
    result = swift_allocError(&type metadata for AlishaPairing.PairingError, v15, 0, 0);
    *v16 = 2;
  }
  *a4 = result;
  return result;
}

uint64_t sub_100061AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (uint64_t *)((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v6 = qword_100354EE8;
  *v5 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.notOnQueue(_:), v1);
  v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) != 0)
  {
    __chkstk_darwin(result, v9);
    *(&v11 - 2) = v0;
    v10 = sub_100063D3C(&qword_100344A38);
    OS_dispatch_queue.sync<A>(execute:)(&v12, sub_100063E14, &v11 - 4, v10);
    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100061C28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint8_t *v2;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;
  uint64_t v13;
  void *Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  Class isa;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint8_t *v27;
  unint64_t v28;
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE v31[24];

  v5 = Logger.logObject.getter(a1);
  v9 = static os_log_type_t.info.getter(v5, v6, v7, v8);
  v10 = v9;
  if (os_log_type_enabled(v5, v9))
  {
    v2 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, (os_log_type_t)v10, "KML called readAPDU", v2, 2u);
    swift_slowDealloc(v2, -1, -1);
  }

  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) != 1
    || *(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_canReceiveMessages) != 1)
  {
    v24 = sub_100063C48();
    result = swift_allocError(&type metadata for AlishaPairing.PairingError, v24, 0, 0);
    v23 = result;
    *v25 = 2;
    goto LABEL_14;
  }
  v11 = (uint64_t *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_receivedMessages);
  result = swift_beginAccess(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_receivedMessages, v31, 0, 0);
  if (!*(_QWORD *)(*v11 + 16))
  {
    v23 = 0;
    *(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_readPending) = 1;
    goto LABEL_14;
  }
  swift_beginAccess(v11, v30, 33, 0);
  v13 = *v11;
  if (!*(_QWORD *)(*v11 + 16))
  {
    __break(1u);
LABEL_21:
    swift_once(&qword_100344578, sub_10008091C);
LABEL_19:
    sub_10007F7C0();
    v28 = sub_100063C48();
    v23 = swift_allocError(&type metadata for AlishaPairing.PairingError, v28, 0, 0);
    *v29 = 2;
    result = sub_100063CD0(v10, (unint64_t)v2);
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(v13 + 32);
  v2 = *(uint8_t **)(v13 + 40);
  sub_100063C8C(v10, (unint64_t)v2);
  sub_1001F6590(0, 1);
  swift_endAccess(v30);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_delegate);
  v15 = Logger.logObject.getter(Strong);
  v19 = v15;
  if (!Strong)
  {
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, (os_log_type_t)v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v26, "Missing delegate", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    if (qword_100344578 == -1)
      goto LABEL_19;
    goto LABEL_21;
  }
  v20 = static os_log_type_t.info.getter(v15, v16, v17, v18);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Calling btHceSessionHandleApdu", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  if ((objc_msgSend(Strong, "respondsToSelector:", "btHceSessionHandleApdu:") & 1) != 0)
  {
    sub_100063C8C(v10, (unint64_t)v2);
    swift_unknownObjectRetain(Strong);
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(Strong, "btHceSessionHandleApdu:", isa);
    swift_unknownObjectRelease(Strong);

    sub_100063CD0(v10, (unint64_t)v2);
  }
  swift_unknownObjectRelease(Strong);
  result = sub_100063CD0(v10, (unint64_t)v2);
  v23 = 0;
LABEL_14:
  *a2 = v23;
  return result;
}

uint64_t sub_100061FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v16 = swift_allocObject(a1, 24, 7);
  *(_QWORD *)(v16 + 16) = v3;
  aBlock[4] = a2;
  v25 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = a3;
  v17 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v3);
  v23 = _swiftEmptyArrayStorage;
  v18 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_100063D3C((uint64_t *)&unk_100346200);
  v20 = sub_100063D7C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v7, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v10, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return swift_release(v25);
}

void sub_1000621E8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;

  v2 = Logger.logObject.getter(a1);
  v6 = static os_log_type_t.info.getter(v2, v3, v4, v5);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v6, "KML called endSession", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) == 1)
  {
    if (qword_100344578 != -1)
      swift_once(&qword_100344578, sub_10008091C);
    sub_10007FEE8();
  }
}

uint64_t sub_10006231C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD aBlock[5];
  _QWORD *v32;

  v28 = a5;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v27 = qword_100354EE8;
  v19 = (_QWORD *)swift_allocObject(a3, 40, 7);
  v19[2] = v5;
  v19[3] = a1;
  v19[4] = a2;
  aBlock[4] = a4;
  v32 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = v28;
  v20 = _Block_copy(aBlock);
  v21 = v5;
  v22 = sub_100063C8C(a1, a2);
  static DispatchQoS.unspecified.getter(v22);
  v30 = _swiftEmptyArrayStorage;
  v23 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_100063D3C((uint64_t *)&unk_100346200);
  v25 = sub_100063D7C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v24, v25, v10, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v13, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  return swift_release(v32);
}

void sub_10006252C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;

  v5 = Logger.logObject.getter(a1);
  v9 = static os_log_type_t.info.getter(v5, v6, v7, v8);
  if (os_log_type_enabled(v5, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v9, "KML called startFirstApproach", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  if (qword_100344578 != -1)
    swift_once(&qword_100344578, sub_10008091C);
  sub_100080060(a2, a3);
}

void sub_10006262C(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;

  v11 = a3;
  v15 = a1;
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v14 = v13;

  sub_10006231C(v12, v14, a4, a5, a6);
  sub_100063CD0(v12, v14);

}

void sub_1000626C8(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  void *Strong;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _BYTE v28[24];

  v5 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v6 = *(v5 - 1);
  __chkstk_darwin(v5, v7);
  v9 = &v28[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = qword_100354EE8;
  *v9 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, _QWORD *))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_24:
    v5 = sub_1001C4254(0, v5[2] + 1, 1, v5);
    *v2 = v5;
    goto LABEL_13;
  }
  if (*((_BYTE *)v2 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) != 1)
    return;
  if (*((_BYTE *)v2 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_readPending) == 1
    && *((_BYTE *)v2 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_canReceiveMessages) == 1)
  {
    Strong = (void *)swift_unknownObjectWeakLoadStrong((char *)v2 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_delegate);
    v13 = Logger.logObject.getter(Strong);
    v17 = v13;
    if (Strong)
    {
      v18 = static os_log_type_t.info.getter(v13, v14, v15, v16);
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Calling btHceSessionHandleApdu", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }

      if ((objc_msgSend(Strong, "respondsToSelector:", "btHceSessionHandleApdu:") & 1) != 0)
      {
        swift_unknownObjectRetain(Strong);
        isa = Data._bridgeToObjectiveC()().super.isa;
        objc_msgSend(Strong, "btHceSessionHandleApdu:", isa);
        swift_unknownObjectRelease_n(Strong, 2);

      }
      else
      {
        swift_unknownObjectRelease(Strong);
      }
    }
    else
    {
      v25 = static os_log_type_t.error.getter(v13, v14);
      if (os_log_type_enabled(v17, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v25, "Missing delegate", v26, 2u);
        swift_slowDealloc(v26, -1, -1);
      }

      if (qword_100344578 != -1)
        swift_once(&qword_100344578, sub_10008091C);
      sub_10007F7C0();
    }
    return;
  }
  v2 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_receivedMessages);
  swift_beginAccess(v2, v28, 33, 0);
  v5 = (_QWORD *)*v2;
  sub_100063C8C(a1, a2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
  *v2 = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_24;
LABEL_13:
  v23 = v5[2];
  v22 = v5[3];
  if (v23 >= v22 >> 1)
  {
    v5 = sub_1001C4254((_QWORD *)(v22 > 1), v23 + 1, 1, v5);
    *v2 = v5;
  }
  v5[2] = v23 + 1;
  v24 = &v5[2 * v23];
  v24[4] = a1;
  v24[5] = a2;
  swift_endAccess(v28);
}

void sub_100062A30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  uint64_t Strong;
  void *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = (uint64_t *)((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v5 = qword_100354EE8;
  *v4 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = (id)v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) == 1)
  {
    Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_delegate);
    if (Strong)
    {
      v8 = (void *)Strong;
      v9 = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_session);
      if (v9)
      {
        v10 = (void *)v9;
        v11 = Logger.logObject.getter(v9);
        v12 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v11, v12))
        {
          v13 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "Calling btTxnSessionDidEndTransaction", v13, 2u);
          swift_slowDealloc(v13, -1, -1);
        }

        if ((objc_msgSend(v8, "respondsToSelector:", "btTxnSessionDidEndTransaction:result:") & 1) != 0)
          objc_msgSend(v8, "btTxnSessionDidEndTransaction:result:", v10, 0);

        swift_unknownObjectRelease(v8);
        return;
      }
      Strong = swift_unknownObjectRelease(v8);
    }
    v14 = Logger.logObject.getter(Strong);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Missing session or delegate", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

  }
}

void sub_100062C88(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t Strong;
  void *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *v28;
  uint64_t v29;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (uint64_t *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) == 1)
  {
    Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_delegate);
    if (Strong)
    {
      v10 = (void *)Strong;
      v11 = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_session);
      if (v11)
      {
        v12 = (void *)v11;
        if (a1)
        {
          if (a1 == 4)
          {
            v13 = Logger.logObject.getter(v11);
            v14 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v13, v14))
            {
              v15 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v15 = 0;
              _os_log_impl((void *)&_mh_execute_header, v13, v14, "Calling btHceTxnSessionUwbUnavailable", v15, 2u);
              swift_slowDealloc(v15, -1, -1);
            }

            if ((objc_msgSend(v10, "respondsToSelector:", "btHceTxnSessionUwbUnavailable:") & 1) != 0)
              objc_msgSend(v10, "btHceTxnSessionUwbUnavailable:", v12);
          }
          else
          {
            v22 = Logger.logObject.getter(v11);
            v23 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v22, v23))
            {
              v24 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v24 = 0;
              _os_log_impl((void *)&_mh_execute_header, v22, v23, "Calling btHceTxnSessionDidEndUnexpectedly", v24, 2u);
              swift_slowDealloc(v24, -1, -1);
            }

            if ((objc_msgSend(v10, "respondsToSelector:", "btHceTxnSessionDidEndUnexpectedly:result:") & 1) != 0)
            {
              v25 = sub_100063C48();
              v26 = swift_allocError(&type metadata for AlishaPairing.PairingError, v25, 0, 0);
              *v27 = a1;
              swift_unknownObjectRetain(v10);
              v28 = (void *)_convertErrorToNSError(_:)(v26);
              objc_msgSend(v10, "btHceTxnSessionDidEndUnexpectedly:result:", v12, v28);

              swift_unknownObjectRelease_n(v10, 2);
              swift_errorRelease(v26);
              return;
            }
          }
        }
        else
        {
          v19 = Logger.logObject.getter(v11);
          v20 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v19, v20))
          {
            v21 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v21 = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, v20, "Calling btHceTxnSessionRadioIsDisabled", v21, 2u);
            swift_slowDealloc(v21, -1, -1);
          }

          if ((objc_msgSend(v10, "respondsToSelector:", "btHceTxnSessionRadioIsDisabled:") & 1) != 0)
            objc_msgSend(v10, "btHceTxnSessionRadioIsDisabled:", v12);
        }

        swift_unknownObjectRelease(v10);
        return;
      }
      Strong = swift_unknownObjectRelease(v10);
    }
    v16 = Logger.logObject.getter(Strong);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Missing session or delegate", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

  }
}

uint64_t sub_100063090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  _BYTE v11[24];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v5 = qword_100354EE8;
  *v4 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = (id)v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_canReceiveMessages) = 0;
    *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isFirstStart) = 1;
    *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) = 0;
    *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_readPending) = 0;
    v8 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_receivedMessages);
    swift_beginAccess(v0 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_receivedMessages, v11, 1, 0);
    v9 = *v8;
    *v8 = (uint64_t)_swiftEmptyArrayStorage;
    return swift_bridgeObjectRelease(v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000631D8()
{
  void *v0;
  objc_class *ObjectType;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = SESLoggingSubsystem;
  v3 = v0;
  v4 = String.init(cString:)(v2);
  Logger.init(subsystem:category:)(v4);
  v3[OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_canReceiveMessages] = 0;
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_delegate], 0);
  v3[OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isFirstStart] = 1;
  v3[OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning] = 0;
  v3[OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_readPending] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_receivedMessages] = &_swiftEmptyArrayStorage;
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_session], 0);

  v6.receiver = v3;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "init");
}

id sub_1000632FC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000633A0()
{
  return type metadata accessor for AlishaPairingExternal(0);
}

uint64_t type metadata accessor for AlishaPairingExternal(uint64_t a1)
{
  uint64_t result;

  result = qword_100344868;
  if (!qword_100344868)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AlishaPairingExternal);
  return result;
}

uint64_t sub_1000633E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100287E58;
    v4[2] = &unk_100287E70;
    v4[3] = &unk_100287E58;
    v4[4] = &unk_100287E58;
    v4[5] = &unk_100287E58;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[7] = &unk_100287E70;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void type metadata accessor for NIAcwgSessionTriggerReason(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344940, (uint64_t)&unk_1003065F0);
}

void type metadata accessor for NIAcwgSuspendTriggerReason(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344948, (uint64_t)&unk_100306610);
}

void type metadata accessor for Name(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344950, (uint64_t)&unk_100306630);
}

void type metadata accessor for CaAliroReaderKeyType(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344958, (uint64_t)&unk_100306658);
}

void type metadata accessor for CaAliroIntentFallbackTriggered(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344960, (uint64_t)&unk_100306678);
}

void type metadata accessor for CaAliroTransactionMode(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344968, (uint64_t)&unk_100306698);
}

void type metadata accessor for CaAliroDisconnectionReason(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344970, (uint64_t)&unk_1003066B8);
}

void type metadata accessor for SEEndPointType(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344978, (uint64_t)&unk_1003066D8);
}

void type metadata accessor for SecureElementType(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344980, (uint64_t)&unk_1003066F8);
}

void type metadata accessor for CBManagerState(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344988, (uint64_t)&unk_100306718);
}

_DWORD *sub_100063540@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_100063550(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t sub_10006355C(uint64_t a1, uint64_t a2)
{
  return sub_100063B5C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

_QWORD *sub_10006357C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10006358C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_100063598(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100288830, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_1000635D4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100288830, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_10006361C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  WitnessTable = swift_getWitnessTable(&unk_100288830, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_100063678(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_1000636EC(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100063768@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_1000637A8(uint64_t a1, uint64_t a2)
{
  return sub_100063B5C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000637B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_100288830, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_100063804(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_10006388C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000639EC(&qword_100344AE0, (uint64_t (*)(uint64_t))type metadata accessor for SESPrivacyEncryptionScheme, (uint64_t)&unk_100288694);
  v3 = sub_1000639EC(&qword_100344AE8, (uint64_t (*)(uint64_t))type metadata accessor for SESPrivacyEncryptionScheme, (uint64_t)&unk_10028863C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100063910(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000639EC(&qword_100344A10, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_100288210);
  v3 = sub_1000639EC(&qword_100344A18, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1002881B0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100063994()
{
  return sub_1000639EC(&qword_100344990, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_100288174);
}

uint64_t sub_1000639C0()
{
  return sub_1000639EC(&qword_100344998, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_100288148);
}

uint64_t sub_1000639EC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100063A2C()
{
  return sub_1000639EC(&qword_1003449A0, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1002881E4);
}

BOOL sub_100063A58(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100063A6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100063AB0@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100063AD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000639EC(&qword_100344AF0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_10028854C);
  v3 = sub_1000639EC(&qword_100344AF8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1002884EC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100063B5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100063B98(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100063BD8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  _QWORD v6[9];

  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  v3 = v2;
  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, v1, v3);
  v4 = Hasher._finalize()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

unint64_t sub_100063C48()
{
  unint64_t result;

  result = qword_100344A08;
  if (!qword_100344A08)
  {
    result = swift_getWitnessTable(&unk_100288EFC, &type metadata for AlishaPairing.PairingError);
    atomic_store(result, (unint64_t *)&qword_100344A08);
  }
  return result;
}

uint64_t sub_100063C8C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    ((void (*)(void))swift_retain)();
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100063CD0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    ((void (*)(void))swift_release)();
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_100063D18()
{
  uint64_t v0;

  sub_10006252C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100063D24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100063D34(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100063D3C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100063D7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100344A30;
  if (!qword_100344A30)
  {
    v1 = sub_100063DC8((uint64_t *)&unk_100346200);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100344A30);
  }
  return result;
}

uint64_t sub_100063DC8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void sub_100063E0C()
{
  uint64_t v0;

  sub_1000621E8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100063E14@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100061C28(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100063E2C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_100061918(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_100063E48()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100063E74()
{
  uint64_t v0;

  sub_100061690(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100063E7C()
{
  uint64_t v0;

  sub_1000611E8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100063E88()
{
  uint64_t v0;

  sub_100063CD0(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100063EB4()
{
  uint64_t v0;

  sub_100060F70(*(_QWORD *)(v0 + 16));
}

void sub_100063EC0()
{
  uint64_t v0;

  sub_100060CCC(*(_QWORD *)(v0 + 16));
}

void sub_100063EC8()
{
  uint64_t v0;

  sub_100060A14(*(_QWORD *)(v0 + 16));
}

void sub_100063ED0()
{
  uint64_t v0;

  sub_1000608E8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100063ED8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100063F0C()
{
  uint64_t v0;

  return sub_10006046C(*(_BYTE **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100063F18()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100063F3C(void *a1)
{
  sub_1000605B4(a1);
}

uint64_t sub_100063F5C(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

void type metadata accessor for CBPairingType(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344A40, (uint64_t)&unk_100306A30);
}

void type metadata accessor for CARWirelessPairingIntent(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344A48, (uint64_t)&unk_100306A50);
}

void type metadata accessor for CARWirelessPairingResult(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344A50, (uint64_t)&unk_100306A70);
}

uint64_t initializeBufferWithCopyOfBuffer for DefaultAppInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_100063FF0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t sub_100064034(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 200))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100064054(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 200) = v3;
  return result;
}

void type metadata accessor for os_state_data_s(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344A58, (uint64_t)&unk_100306AE8);
}

void type metadata accessor for CFError(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344A60, (uint64_t)&unk_100306B18);
}

void type metadata accessor for SESPrivacyEncryptionScheme(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344A68, (uint64_t)&unk_100306B48);
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344A70, (uint64_t)&unk_100306B70);
}

__n128 initializeWithTake for WebauthN.AttestationStatement.AppleAttestationFormat(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_10006410C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10006412C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344A78, (uint64_t)&unk_100306BF0);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344A80, (uint64_t)&unk_100306C18);
}

void type metadata accessor for Result(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344A88, (uint64_t)&unk_100306C48);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344A90, (uint64_t)&unk_100306C68);
}

void type metadata accessor for NFWalletDomain(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344A98, (uint64_t)&unk_100306C90);
}

uint64_t sub_1000641B8()
{
  return sub_1000639EC(&qword_100344AA0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1002884B0);
}

uint64_t sub_1000641E4()
{
  return sub_1000639EC(&qword_100344AA8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_100288484);
}

uint64_t sub_100064210()
{
  return sub_1000639EC(&qword_100344AB0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_100288520);
}

uint64_t sub_10006423C()
{
  return sub_1000639EC(&qword_100344AB8, (uint64_t (*)(uint64_t))type metadata accessor for SESPrivacyEncryptionScheme, (uint64_t)&unk_100288604);
}

uint64_t sub_100064268()
{
  return sub_1000639EC(&qword_100344AC0, (uint64_t (*)(uint64_t))type metadata accessor for SESPrivacyEncryptionScheme, (uint64_t)&unk_1002885DC);
}

uint64_t sub_100064294()
{
  return sub_1000639EC(&qword_100344AC8, (uint64_t (*)(uint64_t))type metadata accessor for SESPrivacyEncryptionScheme, (uint64_t)&unk_10028866C);
}

uint64_t sub_1000642C0()
{
  return sub_1000639EC(&qword_100344AD0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100288458);
}

uint64_t sub_1000642EC()
{
  return sub_1000639EC(&qword_100344AD8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1002887EC);
}

__n128 sub_100064318(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t sub_10006433C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10006435C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 128) = v3;
  return result;
}

void type metadata accessor for os_state_data_decoder_s(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344B00, (uint64_t)&unk_100306D08);
}

void type metadata accessor for os_state_data_s.__Unnamed_union___Anonymous_field1(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344B08, (uint64_t)&unk_100306D30);
}

void type metadata accessor for os_state_data_type_t(uint64_t a1)
{
  sub_1000643E4(a1, &qword_100344B10, (uint64_t)&unk_100306D50);
}

void sub_1000643E4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

id sub_10006449C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LyonSE(0)), "init");
  qword_100354A68 = (uint64_t)result;
  return result;
}

id sub_10006450C()
{
  void *v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  _QWORD aBlock[5];
  uint64_t v29;
  objc_super v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int16 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = SESLoggingSubsystem;
  v8 = v0;
  v9 = String.init(cString:)(v7);
  Logger.init(subsystem:category:)(v9);
  *(_OWORD *)&v8[OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData] = xmmword_1002888D0;
  v10 = OBJC_IVAR____TtC10seserviced6LyonSE_urskSlotManager;
  v11 = type metadata accessor for SlotManager();
  v12 = swift_allocObject(v11, 40, 7);
  v13 = sub_10006B604(2uLL);
  *(_QWORD *)&v8[v10] = v12;
  v8[OBJC_IVAR____TtC10seserviced6LyonSE_isRunning] = 0;
  v14 = OBJC_IVAR____TtC10seserviced6LyonSE_seTimeoutInSec;
  v36 = 0xD000000000000014;
  v37 = 0x80000001002BA5B0;
  v38 = 0xD000000000000019;
  v39 = 0x80000001002BA590;
  v40 = 0x4008000000000000;
  v41 = 1;
  sub_100153344(v13);
  *(_QWORD *)&v8[v14] = v15;
  v16 = OBJC_IVAR____TtC10seserviced6LyonSE_updatedSpec;
  v31 = 0xD000000000000014;
  v32 = 0x80000001002BA5B0;
  v33 = 0xD000000000000022;
  v34 = 0x80000001002BA5D0;
  v35 = 0;
  sub_10015348C(v17);
  v8[v16] = v18 & 1;

  v30.receiver = v8;
  v30.super_class = ObjectType;
  v19 = objc_msgSendSuper2(&v30, "init");
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v20 = v19;
  v21 = (void *)static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v22 = swift_allocObject(&unk_100306FF0, 24, 7);
  *(_QWORD *)(v22 + 16) = v20;
  aBlock[4] = sub_10006C294;
  v29 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_100307008;
  v23 = _Block_copy(aBlock);
  v24 = v29;
  v25 = v20;
  swift_release(v24);
  os_state_add_handler(v21, v23);

  _Block_release(v23);
  return v25;
}

_DWORD *sub_1000647B4()
{
  uint64_t v0;
  char v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  char v4;
  uint64_t v5;
  Class isa;
  _DWORD *v7;
  _OWORD v9[2];
  __int128 v10;
  void *v11;

  v1 = *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced6LyonSE_isRunning);
  v11 = &type metadata for Bool;
  LOBYTE(v10) = v1;
  sub_10006C2B4(&v10, v9);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v9, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced6LyonSE_seTimeoutInSec);
  v11 = &type metadata for Double;
  *(_QWORD *)&v10 = v3;
  sub_10006C2B4(&v10, v9);
  v4 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v9, 0x756F656D69546573, 0xEE006365536E4974, v4);
  swift_bridgeObjectRelease(0x8000000000000000);
  v5 = sub_10017D088((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  v7 = sub_100015734((uint64_t)"lyonse.state", (uint64_t)isa);

  return v7;
}

void sub_100064938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    v10 = OBJC_IVAR____TtC10seserviced6LyonSE_isRunning;
    v11 = *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced6LyonSE_isRunning);
    v12 = Logger.logObject.getter(v9);
    v16 = v12;
    if ((v11 & 1) != 0)
    {
      v17 = static os_log_type_t.error.getter(v12, v13);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "LyonSE is already running", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

    }
    else
    {
      v19 = static os_log_type_t.info.getter(v12, v13, v14, v15);
      if (os_log_type_enabled(v16, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v19, "Starting LyonSE", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }

      *(_BYTE *)(v1 + v10) = 1;
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100064B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    v10 = OBJC_IVAR____TtC10seserviced6LyonSE_isRunning;
    v11 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC10seserviced6LyonSE_isRunning);
    v12 = Logger.logObject.getter(v9);
    v16 = v12;
    if (v11 == 1)
    {
      v17 = static os_log_type_t.info.getter(v12, v13, v14, v15);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Stopping LyonSE", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

      *(_BYTE *)(v1 + v10) = 0;
    }
    else
    {
      v19 = static os_log_type_t.error.getter(v12, v13);
      if (os_log_type_enabled(v16, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v19, "LyonSE is not running", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100064CE8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _OWORD v14[2];
  uint64_t v15;

  v1 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  result = __chkstk_darwin(v1, v2);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData + 8] >> 60 == 15)
  {
    if (qword_1003445F0 != -1)
      swift_once(&qword_1003445F0, sub_100128818);
    v6 = type metadata accessor for UUID(0);
    memset(v14, 0, sizeof(v14));
    v15 = 0;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
    v7 = swift_allocObject(&unk_100306FC8, 24, 7);
    *(_QWORD *)(v7 + 16) = v0;
    v8 = type metadata accessor for SERequest(0);
    v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    v10 = (_QWORD *)(v9 + OBJC_IVAR____TtC10seserviced9SERequest_reason);
    *v10 = 0xD000000000000014;
    v10[1] = 0x80000001002BA570;
    *(_BYTE *)(v9 + OBJC_IVAR____TtC10seserviced9SERequest_isBlockSelecting) = 1;
    *(_QWORD *)(v9 + 16) = 0;
    *(_BYTE *)(v9 + 24) = 1;
    sub_10006C218((uint64_t)v14, v9 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken, (uint64_t *)&unk_100347750);
    *(_BYTE *)(v9 + OBJC_IVAR____TtC10seserviced9SERequest_priority) = 2;
    *(_QWORD *)(v9 + OBJC_IVAR____TtC10seserviced9SERequest_peer) = 0;
    v11 = v9 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks;
    *(_QWORD *)v11 = 0;
    *(_BYTE *)(v11 + 8) = 1;
    sub_10006C218((uint64_t)v5, v9 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier, (uint64_t *)&unk_1003465E0);
    v12 = v9 + OBJC_IVAR____TtC10seserviced9SERequest_sequenceNumber;
    *(_QWORD *)v12 = 0;
    *(_BYTE *)(v12 + 8) = 1;
    *(_QWORD *)(v9 + 32) = sub_10006C20C;
    *(_QWORD *)(v9 + 40) = v7;
    v13 = v0;
    sub_100127720(0, v9);
    return swift_release(v9);
  }
  return result;
}

void sub_100064F04(void *a1, char a2, NSObject *a3)
{
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Class isa;
  id v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  unint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  unint64_t v33;
  uint64_t v34;
  id *v35;
  id *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  Class v40;
  void *v41;
  os_log_t v42;
  char **v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  id v54;
  NSObject *v55;
  NSObject *v56;
  uint64_t v57;
  os_log_type_t v58;
  uint8_t *v59;
  os_log_t *v60;
  NSObject *v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  void *v65;
  unint64_t v66;
  id v67;
  void *v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  NSData v73;
  id v74;
  void *v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  id v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  id *v85;
  NSObject *v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t v89;
  os_log_type_t v90;
  uint64_t v91;
  os_log_t *v92;
  NSObject *v93;
  uint64_t v94;
  void *v95;
  void *v96;
  void *v97;
  id *v98;
  os_log_t oslog;
  NSObject *osloga;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;

  v4 = a1;
  if ((a2 & 1) != 0)
  {
    osloga = Logger.logObject.getter(a1);
    v27 = static os_log_type_t.error.getter(osloga, v26);
    if (os_log_type_enabled(osloga, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = (unint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v28 = 138412290;
      v30 = sub_10006B9E4();
      v31 = swift_allocError(&type metadata for SEError, v30, 0, 0);
      *v32 = (_BYTE)v4;
      v33 = _swift_stdlib_bridgeErrorToNSError(v31);
      v102 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v28 + 4, v28 + 12);
      *v29 = v33;
      _os_log_impl((void *)&_mh_execute_header, osloga, v27, "Failed to get secure element with %@", v28, 0xCu);
      v34 = sub_100063D3C((uint64_t *)&unk_100346090);
      swift_arrayDestroy(v29, 1, v34);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {

    }
    return;
  }
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v10 = static os_log_type_t.info.getter(v6, v7, v8, v9);
  oslog = a3;
  if (os_log_type_enabled(v6, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v102 = v12;
    *(_DWORD *)v11 = 136315138;
    v101 = sub_1001C56EC(0xD000000000000012, 0x80000001002BA410, (uint64_t *)&v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v11 + 4, v11 + 12);
    _os_log_impl((void *)&_mh_execute_header, v6, v10, "Selecting %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  v13 = sub_1000E848C(0xD000000000000012, 0x80000001002BA410);
  if (v14 >> 60 == 15)
  {
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v15 = v13;
  v16 = v14;
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006B9B4(v15, v16);
  v102 = 0;
  v18 = sub_10004FBC0(v5, isa, &v102);

  if (v18)
  {
    v19 = (id)v102;

    v21 = Logger.logObject.getter(v20);
    v23 = static os_log_type_t.error.getter(v21, v22);
    if (os_log_type_enabled(v21, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v102 = v25;
      *(_DWORD *)v24 = 136315138;
      v101 = sub_1001C56EC(0xD000000000000012, 0x80000001002BA410, (uint64_t *)&v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v24 + 4, v24 + 12);
      _os_log_impl((void *)&_mh_execute_header, v21, v23, "Failed to select %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    sub_10006BA28(v4, 0);

    return;
  }
  if (!v102)
    goto LABEL_67;
  v35 = (id *)(id)v102;
  v36 = sub_10005582C(v35);
  v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
  v39 = v38;

  v40 = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v37, v39);
  v41 = (void *)objc_opt_self(SESTLV);
  v42 = (os_log_t)objc_msgSend(v41, "TLVWithData:", v40);

  if (!v42)
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  v43 = &selRef_removeObject_;
  if (-[NSObject tag](v42, "tag") == 111)
  {
    v95 = v41;
    v44 = -[NSObject children](v42, "children");
    if (v44)
    {
      v45 = v44;
      v46 = sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
      v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, v46);

      v102 = (unint64_t)_swiftEmptyArrayStorage;
      if ((unint64_t)v47 >> 62)
      {
        if (v47 < 0)
          v64 = v47;
        else
          v64 = v47 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v47);
        v48 = _CocoaArrayWrapper.endIndex.getter(v64);
        swift_bridgeObjectRelease(v47);
        if (v48)
        {
LABEL_18:
          v96 = v4;
          if (v48 < 1)
          {
            __break(1u);
            goto LABEL_62;
          }
          for (i = 0; i != v48; ++i)
          {
            if ((v47 & 0xC000000000000001) != 0)
              v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v47);
            else
              v52 = *(id *)(v47 + 8 * i + 32);
            v53 = v52;
            v54 = objc_msgSend(v52, "tag");
            if ((_DWORD)v54 == 165)
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v54);
              v50 = *(_QWORD *)(v102 + 16);
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v50);
              v51 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v50, v53);
              specialized ContiguousArray._endMutation()(v51);
            }
            else
            {

            }
          }
          swift_bridgeObjectRelease(v47);
          v47 = v102;
          v4 = v96;
          if ((v102 & 0x8000000000000000) != 0)
            goto LABEL_56;
LABEL_38:
          if ((v47 & 0x4000000000000000) == 0)
          {
            v65 = *(void **)(v47 + 16);
            if (v65 != (void *)1)
            {
LABEL_57:
              v85 = v35;
              v86 = v42;
              v87 = swift_retain(v47);
              v88 = Logger.logObject.getter(v87);
              v90 = static os_log_type_t.error.getter(v88, v89);
              if (os_log_type_enabled(v88, v90))
              {
                v91 = swift_slowAlloc(22, -1);
                v97 = v4;
                v92 = (os_log_t *)swift_slowAlloc(8, -1);
                *(_DWORD *)v91 = 134218242;
                swift_release(v47);
                v102 = (unint64_t)v65;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v91 + 4, v91 + 12);
                swift_release(v47);
                *(_WORD *)(v91 + 12) = 2112;
                v102 = (unint64_t)v86;
                v93 = v86;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v91 + 14, v91 + 22);
                *v92 = v42;

                _os_log_impl((void *)&_mh_execute_header, v88, v90, "Select response contains %ld instances of A5 tag %@", (uint8_t *)v91, 0x16u);
                v94 = sub_100063D3C((uint64_t *)&unk_100346090);
                swift_arrayDestroy(v92, 1, v94);
                swift_slowDealloc(v92, -1, -1);
                swift_slowDealloc(v91, -1, -1);

                sub_10006BA28(v97, 0);
              }
              else
              {

                swift_release(v47);
                sub_10006BA28(v4, 0);

                swift_release(v47);
              }

              return;
            }
            goto LABEL_40;
          }
LABEL_56:
          v84 = swift_bridgeObjectRetain(v47);
          v65 = (void *)_CocoaArrayWrapper.endIndex.getter(v84);
          swift_release(v47);
          if (v65 != (void *)1)
            goto LABEL_57;
LABEL_40:
          v43 = (char **)v42;
          v42 = oslog;
          v66 = v47 & 0xC000000000000001;
          if (*((_BYTE *)&oslog->isa + OBJC_IVAR____TtC10seserviced6LyonSE_updatedSpec) != 1)
          {
            if (v66)
            {
              v74 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v47);
            }
            else
            {
              if (!*(_QWORD *)(v47 + 16))
                goto LABEL_65;
              v74 = *(id *)(v47 + 32);
            }
            v75 = v74;
            swift_release(v47);
            v76 = objc_msgSend(v75, "asData");

            if (!v76)
            {
LABEL_54:

              sub_10006BA28(v4, 0);
              v77 = 0;
              v79 = 0xF000000000000000;
              goto LABEL_55;
            }
LABEL_50:
            v77 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v76);
            v79 = v78;

            sub_10006BA28(v4, 0);
LABEL_55:
            v81 = (uint64_t *)((char *)v42 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData);
            v82 = *(uint64_t *)((char *)&v42->isa + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData);
            v83 = *(unint64_t *)((char *)&v42[1].isa
                                      + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData);
            *v81 = v77;
            v81[1] = v79;
            sub_10006B9B4(v82, v83);

            return;
          }
          if (!v66)
          {
            if (*(_QWORD *)(v47 + 16))
            {
              v67 = *(id *)(v47 + 32);
              goto LABEL_44;
            }
            __break(1u);
LABEL_65:
            __break(1u);
          }
LABEL_62:
          v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v47);
LABEL_44:
          v68 = v67;
          swift_release(v47);
          v69 = objc_msgSend(v68, "value");

          if (v69)
          {
            v70 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v69);
            v72 = v71;

            v73.super.isa = Data._bridgeToObjectiveC()().super.isa;
            sub_100063CD0(v70, v72);
          }
          else
          {
            v73.super.isa = 0;
          }
          v80 = objc_msgSend(v95, "TLVWithTag:value:", 0, v73.super.isa);

          if (v80)
          {
            v76 = objc_msgSend(v80, "asData");

            if (!v76)
              goto LABEL_54;
            goto LABEL_50;
          }
LABEL_70:
          __break(1u);
          return;
        }
      }
      else
      {
        v48 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v48)
          goto LABEL_18;
      }
      swift_bridgeObjectRelease(v47);
      v47 = (uint64_t)_swiftEmptyArrayStorage;
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
        goto LABEL_56;
      goto LABEL_38;
    }
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  v55 = v42;
  v56 = Logger.logObject.getter(v55);
  v58 = static os_log_type_t.error.getter(v56, v57);
  if (os_log_type_enabled(v56, v58))
  {
    v98 = v35;
    v59 = (uint8_t *)swift_slowAlloc(12, -1);
    v60 = (os_log_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v59 = 138412290;
    v102 = (unint64_t)v55;
    v61 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v59 + 4, v59 + 12);
    *v60 = v42;

    _os_log_impl((void *)&_mh_execute_header, v56, v58, "Invalid Select Response for Lyon %@", v59, 0xCu);
    v62 = sub_100063D3C((uint64_t *)&unk_100346090);
    swift_arrayDestroy(v60, 1, v62);
    swift_slowDealloc(v60, -1, -1);
    v63 = v59;
    v35 = v98;
    swift_slowDealloc(v63, -1, -1);

    sub_10006BA28(v4, 0);
  }
  else
  {

    sub_10006BA28(v4, 0);
  }

}

void sub_100065A18(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  const __CFString *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Class v24;
  char v25;
  uint64_t v26;
  Class v27;
  uint64_t v28;
  void *v29;

  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) == 1)
  {
    if (qword_100344568 != -1)
      swift_once(&qword_100344568, sub_100073158);
    sub_100071CC4(a1);
    *(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) = 2;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("txCountAttempted"));
    v17 = v16;
    sub_10006C25C(0, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
    isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v29 = &_swiftEmptyDictionarySingleton;
    sub_10018E13C((uint64_t)isa, v15, v17, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(0x8000000000000000);
    if (*(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerKeyType) == 1)
      v20 = CFSTR("primaryReaderKeyTxCount");
    else
      v20 = CFSTR("auxReaderKeyTxCount");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;
    v24 = NSNumber.init(integerLiteral:)(1).super.super.isa;
    v25 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_10018E13C((uint64_t)v24, v21, v23, v25);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(0x8000000000000000);
    v26 = objc_opt_self(SESDAnalyticsLogger);
    v27 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    sub_10004A724(v26, v27);

  }
  else
  {
    v2 = swift_retain_n(a1, 2);
    v3 = Logger.logObject.getter(v2);
    v7 = static os_log_type_t.info.getter(v3, v4, v5, v6);
    if (os_log_type_enabled(v3, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = (void *)swift_slowAlloc(32, -1);
      *(_DWORD *)v8 = 136315138;
      v29 = v9;
      v10 = type metadata accessor for UUID(0);
      v11 = sub_10006B7E0();
      v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
      v14 = v13;
      v28 = sub_1001C56EC(v12, v13, (uint64_t *)&v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v8 + 4, v8 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v3, v7, "peer %s already disconnected, freeing slot", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      swift_release_n(a1, 2);
    }

    sub_10006AD2C(a1);
  }
}

void sub_100065EE0(char a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  NSObject *v45;
  uint64_t v46;
  os_log_type_t v47;
  uint8_t *v48;
  const char *v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int16 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t inited;
  uint64_t v103;
  unint64_t v104;
  Class isa;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  _BYTE *v110;
  Class v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE v117[148];
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128[8];
  __int128 aBlock;
  __int128 v130;
  uint64_t (*v131)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  char v134[8];

  v9 = v7;
  v124 = a7;
  v123 = a6;
  v121 = a5;
  v127 = a4;
  v125 = a3;
  v126 = a2;
  v11 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v11, v12);
  v122 = &v117[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for Date(0);
  v120 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  v17 = &v117[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = type metadata accessor for DispatchPredicate(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = &v117[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v23 = qword_100354EE8;
  *v22 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v19 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v18);
  v24 = (id)v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)(v22);
  v25 = (*(uint64_t (**)(_QWORD *, uint64_t))(v19 + 8))(v22, v18);
  if ((v23 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x100066B04);
  }
  if (v9[OBJC_IVAR____TtC10seserviced6LyonSE_isRunning] != 1)
  {
    v45 = Logger.logObject.getter(v25);
    v47 = static os_log_type_t.error.getter(v45, v46);
    if (!os_log_type_enabled(v45, v47))
    {
LABEL_16:

LABEL_17:
      v59 = sub_10006B828();
      v60 = swift_allocError(&type metadata for DSKError, v59, 0, 0);
      *v61 = 0;
      swift_willThrow(v60);
      return;
    }
    v48 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v48 = 0;
    v49 = "Not running";
    goto LABEL_11;
  }
  v26 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
  v27 = v127;
  if (*(unsigned __int8 *)(v127 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) - 2 > 2)
  {
    v51 = swift_retain_n(v127, 2);
    v45 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.error.getter(v45, v52);
    if (!os_log_type_enabled(v45, v53))
    {
      swift_release_n(v27, 2);
      goto LABEL_16;
    }
    v54 = (uint8_t *)swift_slowAlloc(12, -1);
    v55 = swift_slowAlloc(32, -1);
    *(_DWORD *)v54 = 136315138;
    *(_QWORD *)&aBlock = v55;
    LOBYTE(v133) = *(_BYTE *)(v27 + v26);
    v56 = String.init<A>(describing:)(&v133, &type metadata for LyonSessionState);
    v58 = v57;
    v133 = sub_1001C56EC(v56, v57, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v54 + 4, v54 + 12);
    swift_release_n(v27, 2);
    swift_bridgeObjectRelease(v58);
    _os_log_impl((void *)&_mh_execute_header, v45, v53, "received SE message when peer is in invalid state %s", v54, 0xCu);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    v50 = v54;
    goto LABEL_14;
  }
  if (a1)
  {
    v28 = v126;
    v29 = v125;
    sub_100063C8C(v126, v125);
    v30 = sub_100063C8C(v28, v29);
    v31 = Logger.logObject.getter(v30);
    v33 = static os_log_type_t.error.getter(v31, v32);
    if (os_log_type_enabled(v31, v33))
    {
      v34 = swift_slowAlloc(15, -1);
      v35 = swift_slowAlloc(32, -1);
      *(_QWORD *)&aBlock = v35;
      *(_DWORD *)v34 = 16777730;
      LOBYTE(v133) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, (char *)&v133 + 1, v34 + 4, v34 + 5);
      *(_WORD *)(v34 + 5) = 2080;
      v127 = v34 + 7;
      sub_1001BD2CC(v28, v29);
      v36 = v28;
      v38 = v37;
      v133 = v37;
      v39 = v29;
      v40 = sub_100063D3C((uint64_t *)&unk_100346060);
      v41 = sub_10006B86C();
      v42 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v40, v41);
      v44 = v43;
      swift_bridgeObjectRelease(v38);
      v133 = sub_1001C56EC(v42, v44, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v127, v34 + 15);
      swift_bridgeObjectRelease(v44);
      sub_100063CD0(v36, v39);
      sub_100063CD0(v36, v39);
      _os_log_impl((void *)&_mh_execute_header, v31, v33, "Ignoring unknown message with ID %hhu payload %s", (uint8_t *)v34, 0xFu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

      sub_100063CD0(v28, v29);
      sub_100063CD0(v28, v29);
    }
    goto LABEL_17;
  }
  sub_100067F64(v126, v125);
  if ((v62 & 0x10000) != 0)
  {
    v45 = Logger.logObject.getter(v62);
    v47 = static os_log_type_t.info.getter(v45, v76, v77, v78);
    if (!os_log_type_enabled(v45, v47))
      goto LABEL_16;
    v48 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v48 = 0;
    v49 = "Blocking invalid command";
    goto LABEL_11;
  }
  v63 = v62;
  v119 = v26;
  if (qword_100344568 != -1)
    swift_once(&qword_100344568, sub_100073158);
  sub_1001A37EC(0);
  if (!v8)
  {
    v64 = v27;
    v118 = v63;
    v65 = qword_100354A80;
    v66 = swift_allocObject(&unk_100306E38, 24, 7);
    swift_weakInit(v66 + 16, v27);
    v67 = swift_allocObject(&unk_100306E60, 40, 7);
    *(_QWORD *)(v67 + 16) = v66;
    *(_BYTE *)(v67 + 24) = 1;
    *(_QWORD *)(v67 + 32) = v65;
    swift_retain(v66);
    v68 = v65;
    v69 = v118;
    swift_retain(v68);
    sub_1001A3C14(1, (uint64_t)sub_10006B8E0, v67);
    v70 = v66;
    v71 = v126;
    swift_release(v70);
    v72 = swift_release(v67);
    v73 = *(unsigned __int8 *)(v64 + v119);
    if (v73 == 2)
    {
      v74 = v125;
      sub_100063C8C(v71, v125);
      sub_100072014(v71, v74, 0);
      if ((unsigned __int16)v75 == 32896)
        __asm { BR              X10 }
      v45 = Logger.logObject.getter(v75);
      v47 = static os_log_type_t.error.getter(v45, v116);
      if (!os_log_type_enabled(v45, v47))
        goto LABEL_16;
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      v49 = "Invalid Auth 0 TLVs";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v45, v47, v49, v48, 2u);
      v50 = v48;
LABEL_14:
      swift_slowDealloc(v50, -1, -1);
      goto LABEL_16;
    }
    v79 = 0;
    if (v69 <= 0x10BFu)
    {
      v80 = v119;
      if (v69 != 192 && v69 != 195)
      {
LABEL_35:
        if (qword_1003445F0 != -1)
          swift_once(&qword_1003445F0, sub_100128818);
        v119 = qword_100354C60;
        v120 = *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced6LyonSE_seTimeoutInSec];
        v81 = type metadata accessor for UUID(0);
        aBlock = 0u;
        v130 = 0u;
        v131 = 0;
        v82 = *(_QWORD *)(v81 - 8);
        v83 = (uint64_t)v122;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v82 + 16))(v122, v121, v81);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v82 + 56))(v83, 0, 1, v81);
        v84 = swift_allocObject(&unk_100306E88, 56, 7);
        *(_BYTE *)(v84 + 16) = v79;
        v85 = v127;
        *(_QWORD *)(v84 + 24) = v9;
        *(_QWORD *)(v84 + 32) = v85;
        v86 = v126;
        v87 = v125;
        *(_QWORD *)(v84 + 40) = v126;
        *(_QWORD *)(v84 + 48) = v87;
        v88 = type metadata accessor for SERequest(0);
        swift_allocObject(v88, *(unsigned int *)(v88 + 48), *(unsigned __int16 *)(v88 + 52));
        swift_retain(v85);
        sub_100063C8C(v86, v87);
        swift_retain(v85);
        v89 = v9;
        v90 = sub_10013E1EC(0xD000000000000017, 0x80000001002BA390, v79, v120, 0, (uint64_t)&aBlock, 2, v85, v124, 0, v83, v123, 0, (uint64_t)sub_10006B924, v84);
        if (!v90)
        {
          __break(1u);
          JUMPOUT(0x100067F54);
        }
        v91 = v90;
        sub_100127720(0, (uint64_t)v90);
        swift_release(v91);
        return;
      }
    }
    else
    {
      if (v69 != 4288 && v69 != 4291)
      {
        if (v69 == 32897)
        {
          *(_DWORD *)(v64 + OBJC_IVAR____TtC10seserviced8LyonPeer_transactionMode) = 2;
          v79 = v73 == 2;
        }
        goto LABEL_35;
      }
      v80 = v119;
    }
    if (v73 == 3)
    {
      v92 = v127;
      *(_BYTE *)(v127 + v80) = 4;
      v93 = sub_1001E1440(v72);
      v94 = *(_DWORD *)(v92 + OBJC_IVAR____TtC10seserviced8LyonPeer_transactionMode);
      if (v94 == 3)
        v95 = 6;
      else
        v95 = 5;
      if (v94 == 1)
        v96 = 4;
      else
        v96 = v95;
      *(_DWORD *)(v92 + OBJC_IVAR____TtC10seserviced8LyonPeer_transactionMode) = v96;
      v97 = Date.init()(v93);
      v98 = Date.timeIntervalSince1970.getter(v97);
      (*(void (**)(_BYTE *, uint64_t))(v120 + 8))(v17, v14);
      v99 = v92 + OBJC_IVAR____TtC10seserviced8LyonPeer_startTime;
      *(double *)v99 = v98;
      *(_BYTE *)(v99 + 8) = 0;
      v100 = objc_opt_self(SESDAnalyticsLogger);
      v101 = sub_100063D3C(&qword_100344CD0);
      inited = swift_initStackObject(v101, v128);
      *(_OWORD *)(inited + 16) = xmmword_1002888E0;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("stepUpTxAttemptedCount"));
      *(_QWORD *)(inited + 40) = v103;
      sub_10006C25C(0, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
      *(NSNumber *)(inited + 48) = NSNumber.init(integerLiteral:)(1);
      v104 = sub_10017C4A8(inited);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v104);
      sub_10004A724(v100, isa);

    }
    v106 = v127;
    v107 = *(_QWORD *)(v127 + OBJC_IVAR____TtC10seserviced8LyonPeer_stepUpHelper);
    v108 = swift_allocObject(&unk_100306EB0, 32, 7);
    *(_QWORD *)(v108 + 16) = v106;
    *(_QWORD *)(v108 + 24) = v9;
    v109 = *(void **)(v107 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stsHelper);
    swift_retain(v106);
    v110 = v9;
    v111 = Data._bridgeToObjectiveC()().super.isa;
    v112 = qword_100354EE8;
    v113 = swift_allocObject(&unk_100306ED8, 32, 7);
    *(_QWORD *)(v113 + 16) = sub_10006B964;
    *(_QWORD *)(v113 + 24) = v108;
    v131 = sub_10006B994;
    v132 = v113;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v130 = sub_10006B73C;
    *((_QWORD *)&v130 + 1) = &unk_100306EF0;
    v114 = _Block_copy(&aBlock);
    v115 = v132;
    swift_retain(v108);
    swift_release(v115);
    objc_msgSend(v109, "processUnifiedAccessStepupAPDU:callbackQueue:responseHandler:", v111, v112, v114);
    _Block_release(v114);
    swift_release(v108);

  }
}

void sub_100067F64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) != 0)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1000684C4);
}

uint64_t sub_1000684FC(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint32_t *p_cb;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  _BYTE v53[8];
  uint64_t v54;
  uint64_t v55[2];

  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (uint64_t *)((char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v15 = (void *)qword_100354EE8;
  *v14 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  v16 = v15;
  v17 = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v14, v10);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once(&qword_100344568, sub_100073158);
LABEL_15:
    sub_10007CD7C(a4, 0);
    return swift_errorRelease(v17);
  }
  p_cb = &OBJC_PROTOCOL___SESDarwinNotificationDelegate.cb;
  if ((a3 & 1) != 0)
  {
    LODWORD(v51) = a3;
    sub_10006B9C8(a1, a2, 1);
    sub_10006B9C8(a1, a2, 1);
    swift_retain(a4);
    sub_10006B9C8(a1, a2, 1);
    v19 = swift_retain(a4);
    v20 = Logger.logObject.getter(v19);
    v22 = static os_log_type_t.error.getter(v20, v21);
    if (os_log_type_enabled(v20, v22))
    {
      v23 = swift_slowAlloc(22, -1);
      v49 = swift_slowAlloc(64, -1);
      v55[0] = v49;
      *(_DWORD *)v23 = 136315394;
      v24 = swift_retain(a4);
      v25 = UUID.uuidString.getter(v24);
      v27 = v26;
      swift_release(a4);
      v54 = sub_1001C56EC(v25, v27, v55);
      v50 = a5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v23 + 4, v23 + 12);
      swift_release_n(a4, 2);
      swift_bridgeObjectRelease(v27);
      *(_WORD *)(v23 + 12) = 2080;
      swift_getErrorValue(a1, v53, v52);
      v28 = Error.localizedDescription.getter(v52[1], v52[2]);
      v30 = v29;
      v54 = sub_1001C56EC(v28, v29, v55);
      p_cb = (_DWORD *)(&OBJC_PROTOCOL___SESDarwinNotificationDelegate + 64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v23 + 14, v23 + 22);
      swift_bridgeObjectRelease(v30);
      sub_10006B9D4(a1, a2, 1);
      sub_10006B9D4(a1, a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v20, v22, "Failed to handle stepup command for %s %s", (uint8_t *)v23, 0x16u);
      v31 = v49;
      swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {
      swift_release_n(a4, 2);

      sub_10006B9D4(a1, a2, 1);
      sub_10006B9D4(a1, a2, 1);
    }
    v35 = sub_10006B828();
    v17 = swift_allocError(&type metadata for DSKError, v35, 0, 0);
    *v36 = 0;
    swift_willThrow(v17);
    sub_10006B9D4(a1, a2, v51 & 1);
    v37 = swift_retain_n(a4, 2);
    v38 = Logger.logObject.getter(v37);
    v40 = static os_log_type_t.error.getter(v38, v39);
    if (os_log_type_enabled(v38, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = swift_slowAlloc(32, -1);
      *(_DWORD *)v41 = 136315138;
      v55[0] = v42;
      v43 = swift_retain(a4);
      v44 = UUID.uuidString.getter(v43);
      v46 = v45;
      swift_release(a4);
      v54 = sub_1001C56EC(v44, v46, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v41 + 4, v41 + 12);
      swift_release_n(a4, 2);
      swift_bridgeObjectRelease(v46);
      _os_log_impl((void *)&_mh_execute_header, v38, v40, "Could handle stepup response for %s", v41, 0xCu);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      v47 = v42;
      p_cb = (_DWORD *)(&OBJC_PROTOCOL___SESDarwinNotificationDelegate + 64);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      swift_release_n(a4, 2);
    }

    if (*((_QWORD *)p_cb + 173) == -1)
      goto LABEL_15;
    goto LABEL_17;
  }
  sub_100063C8C(a1, a2);
  if (qword_100344568 != -1)
    swift_once(&qword_100344568, sub_100073158);
  v32 = qword_100354A80;
  sub_10007CAB8(0, 1, a1, a2, a4);
  sub_1001A37EC(1);
  v50 = a5;
  v33 = swift_allocObject(&unk_100306E38, 24, 7);
  swift_weakInit(v33 + 16, a4);
  v34 = swift_allocObject(&unk_100306F28, 40, 7);
  *(_QWORD *)(v34 + 16) = v33;
  *(_BYTE *)(v34 + 24) = 0;
  *(_QWORD *)(v34 + 32) = v32;
  v51 = v33;
  swift_retain(v33);
  swift_retain(v32);
  sub_1001A3C14(0, (uint64_t)sub_10006C2C4, v34);
  swift_release(v51);
  swift_release(v34);
  return sub_10006B9D4(a1, a2, 0);
}

void sub_100068B40(void *a1, char a2, char a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint32_t *p_cb;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  Class isa;
  id v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  NSObject *v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  void *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  Class v59;
  id v60;
  id v61;
  id v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  id v66;
  unint64_t v67;
  id v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint32_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  void *v83;
  void *v84;
  int v85;
  id *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  os_log_type_t v96;
  uint8_t *v97;
  void *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  id v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE v121[16];
  id v122[5];
  __int128 v123;

  v115 = a6;
  v116 = a7;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v17 = (char *)&v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  p_cb = (_DWORD *)(&OBJC_PROTOCOL___SESDarwinNotificationDelegate + 64);
  if ((a2 & 1) != 0)
  {
    v117 = a5;
    v42 = Logger.logObject.getter(v15);
    v44 = static os_log_type_t.error.getter(v42, v43);
    if (os_log_type_enabled(v42, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = (void *)swift_slowAlloc(32, -1);
      v122[0] = v46;
      *(_DWORD *)v45 = 136315138;
      LOBYTE(v120) = (_BYTE)a1;
      v47 = sub_10006B9E4();
      v48 = Error.localizedDescription.getter(&type metadata for SEError, v47);
      v50 = v49;
      v120 = sub_1001C56EC(v48, v49, (uint64_t *)v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v45 + 4, v45 + 12);
      swift_bridgeObjectRelease(v50);
      _os_log_impl((void *)&_mh_execute_header, v42, v44, "Failed to get SE %s", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);
    }

    v51 = sub_10006B9E4();
    v40 = swift_allocError(&type metadata for SEError, v51, 0, 0);
    *v52 = (_BYTE)a1;
    swift_willThrow(v40);
    v38 = v117;
    goto LABEL_27;
  }
  if ((a3 & 1) != 0)
  {
    v117 = a5;
    v114 = a4;
    v113 = a1;
    v19 = Logger.logObject.getter(v113);
    v23 = static os_log_type_t.info.getter(v19, v20, v21, v22);
    if (os_log_type_enabled(v19, v23))
    {
      v112 = a1;
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = (void *)swift_slowAlloc(32, -1);
      v122[0] = v25;
      *(_DWORD *)v24 = 136315138;
      v120 = sub_1001C56EC(0xD000000000000012, 0x80000001002BA410, (uint64_t *)v122);
      a1 = v112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v24 + 4, v24 + 12);
      _os_log_impl((void *)&_mh_execute_header, v19, v23, "Selecting %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    v26 = sub_1000E848C(0xD000000000000012, 0x80000001002BA410);
    if (v27 >> 60 == 15)
    {
      __break(1u);
      goto LABEL_40;
    }
    v28 = v26;
    v29 = v27;
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10006B9B4(v28, v29);
    v31 = sub_10004FBA0(v113, isa);

    if (v31)
    {

      v33 = Logger.logObject.getter(v32);
      v35 = static os_log_type_t.error.getter(v33, v34);
      if (os_log_type_enabled(v33, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        v37 = (void *)swift_slowAlloc(32, -1);
        v122[0] = v37;
        *(_DWORD *)v36 = 136315138;
        v120 = sub_1001C56EC(0xD000000000000012, 0x80000001002BA410, (uint64_t *)v122);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v36 + 4, v36 + 12);
        _os_log_impl((void *)&_mh_execute_header, v33, v35, "Failed to select %s", v36, 0xCu);
        swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v36, -1, -1);
      }

      v38 = v117;
      v39 = sub_10006B828();
      v40 = swift_allocError(&type metadata for DSKError, v39, 0, 0);
      *v41 = 0;
      swift_willThrow(v40);
      sub_10006BA28(a1, 0);
      p_cb = (_DWORD *)(&OBJC_PROTOCOL___SESDarwinNotificationDelegate + 64);
      goto LABEL_27;
    }
    v54 = v117;
    *(_BYTE *)(v117 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) = 3;
    v55 = Date.init()();
    v56 = Date.timeIntervalSince1970.getter(v55);
    v57 = *(void (**)(char *, uint64_t))(v13 + 8);
    v38 = v54;
    v57(v17, v12);
    v58 = v54 + OBJC_IVAR____TtC10seserviced8LyonPeer_seStartTime;
    *(double *)v58 = v56;
    *(_BYTE *)(v58 + 8) = 0;
    p_cb = &OBJC_PROTOCOL___SESDarwinNotificationDelegate.cb;
    a4 = v114;
  }
  else
  {
    v53 = a1;
    v38 = a5;
  }
  v59 = Data._bridgeToObjectiveC()().super.isa;
  v122[0] = 0;
  v60 = sub_10004F5F4(a1, (uint64_t)v59, v122);

  v61 = v122[0];
  if (v60)
  {
    v123 = xmmword_1002888D0;
    v62 = v122[0];
    if (sub_100055868((uint64_t)v60) == 36864)
    {
      v115 = v60;
      v40 = 0;
LABEL_18:
      if (*((_QWORD *)p_cb + 173) != -1)
        swift_once(&qword_100344568, sub_100073158);
      swift_beginAccess(&v123, v122, 0, 0);
      v63 = v123;
      v65 = *((_QWORD *)&v123 + 1);
      v64 = v123;
      if (*((_QWORD *)&v123 + 1) >> 60 == 15)
      {
        v66 = (id)sub_1000117DC((uint64_t)v115);
        v64 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v66);
        v65 = v67;

      }
      sub_10006BA34(v63, *((unint64_t *)&v63 + 1));
      sub_10007CAB8(0, 1, v64, v65, v38);
      if (!v40)
      {
        sub_100063CD0(v64, v65);
        sub_1001A37EC(1);
        v70 = v115;
        v108 = qword_100354A80;
        v109 = swift_allocObject(&unk_100306E38, 24, 7);
        swift_weakInit(v109 + 16, v38);
        v110 = swift_allocObject(&unk_100306F50, 40, 7);
        *(_QWORD *)(v110 + 16) = v109;
        *(_BYTE *)(v110 + 24) = 0;
        *(_QWORD *)(v110 + 32) = v108;
        swift_retain(v109);
        swift_retain(v108);
        sub_1001A3C14(0, (uint64_t)sub_10006C2C4, v110);
        swift_release(v109);
        swift_release(v110);
        sub_10006B9B4(v123, *((unint64_t *)&v123 + 1));

        sub_10006BA28(a1, 0);
        return;
      }
      sub_10006BA28(a1, 0);

      sub_100063CD0(v64, v65);
      sub_10006B9B4(v63, *((unint64_t *)&v63 + 1));
      p_cb = &OBJC_PROTOCOL___SESDarwinNotificationDelegate.cb;
      goto LABEL_27;
    }
    sub_10006977C(a1);
    v40 = 0;
    v83 = v60;
    v84 = a1;
    v85 = sub_100055868((uint64_t)v83);
    v115 = v83;
    if (v85 != 36865)
      goto LABEL_18;
    v117 = v38;
    v86 = sub_10005582C((id *)v83);
    v87 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v86);
    v89 = v88;

    *(_QWORD *)&v123 = v87;
    *((_QWORD *)&v123 + 1) = v89;
    LOWORD(v120) = 144;
    v122[3] = &type metadata for UnsafeRawBufferPointer;
    v122[4] = &protocol witness table for UnsafeRawBufferPointer;
    v122[0] = &v120;
    v122[1] = (char *)&v120 + 2;
    v90 = sub_10006BA78(v122, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)(*v90, v90[1]);
    v91 = sub_10006BA9C(v122);
    v92 = Logger.logObject.getter(v91);
    v96 = static os_log_type_t.info.getter(v92, v93, v94, v95);
    if (!os_log_type_enabled(v92, v96))
    {

      v38 = v117;
      a1 = v84;
      v40 = 0;
      goto LABEL_18;
    }
    v114 = a4;
    v97 = (uint8_t *)swift_slowAlloc(12, -1);
    v98 = (void *)swift_slowAlloc(32, -1);
    v122[0] = v98;
    *(_DWORD *)v97 = 136315138;
    swift_beginAccess(&v123, &v120, 0, 0);
    v99 = *((_QWORD *)&v123 + 1);
    if (*((_QWORD *)&v123 + 1) >> 60 != 15)
    {
      v100 = v123;
      v113 = v97 + 4;
      sub_100063C8C(v123, *((unint64_t *)&v123 + 1));
      sub_1001BD2CC(v100, v99);
      v102 = v101;
      v116 = 0;
      v118 = v101;
      v103 = sub_100063D3C((uint64_t *)&unk_100346060);
      v104 = sub_10006B86C();
      v105 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v103, v104);
      v107 = v106;
      swift_bridgeObjectRelease(v102);
      sub_10006B9B4(v100, v99);
      v118 = sub_1001C56EC(v105, v107, (uint64_t *)v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v113, v97 + 12);
      swift_bridgeObjectRelease(v107);
      _os_log_impl((void *)&_mh_execute_header, v92, v96, "Sending %s", v97, 0xCu);
      swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v98, -1, -1);
      swift_slowDealloc(v97, -1, -1);

      v40 = v116;
      v38 = v117;
      p_cb = (_DWORD *)(&OBJC_PROTOCOL___SESDarwinNotificationDelegate + 64);
      a1 = v84;
      goto LABEL_18;
    }
LABEL_40:
    __break(1u);
    return;
  }
  v68 = v122[0];
  v40 = _convertNSErrorToError(_:)(v61);

  swift_willThrow(v69);
  sub_10006BA28(a1, 0);
LABEL_27:
  v71 = swift_retain_n(v38, 2);
  v72 = Logger.logObject.getter(v71);
  v74 = static os_log_type_t.error.getter(v72, v73);
  if (os_log_type_enabled(v72, v74))
  {
    v75 = (uint8_t *)swift_slowAlloc(12, -1);
    v76 = swift_slowAlloc(32, -1);
    *(_DWORD *)v75 = 136315138;
    *(_QWORD *)&v123 = v76;
    v116 = v40;
    v77 = swift_retain(v38);
    v78 = UUID.uuidString.getter(v77);
    v79 = p_cb;
    v81 = v80;
    swift_release(v38);
    v118 = sub_1001C56EC(v78, v81, (uint64_t *)&v123);
    v40 = v116;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v75 + 4, v75 + 12);
    swift_release_n(v38, 2);
    v82 = v81;
    p_cb = v79;
    swift_bridgeObjectRelease(v82);
    _os_log_impl((void *)&_mh_execute_header, v72, v74, "SERequest failed, disconnecting for %s", v75, 0xCu);
    swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1, -1);
    swift_slowDealloc(v75, -1, -1);
  }
  else
  {
    swift_release_n(v38, 2);
  }

  if (*((_QWORD *)p_cb + 173) != -1)
    swift_once(&qword_100344568, sub_100073158);
  sub_10007CD7C(v38, 0);
  swift_errorRelease(v40);
}

void sub_10006977C(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  id *v5;
  id v6;
  id *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Class isa;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char **v16;
  id v17;
  void *v18;
  BOOL v19;
  unint64_t v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  char **v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  NSObject *v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id *v41;
  uint64_t v42;
  id v43;

  v43 = 0;
  v1 = sub_10004F8D8(a1, 128, 175, 0, 0, 0, 0, &v43);
  v2 = v43;
  if (v1)
  {
    v3 = v1;
    v4 = (void *)objc_opt_self(SESTLV);
    v5 = v3;
    v6 = v2;
    v41 = v5;
    v7 = sub_10005582C(v5);
    v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100063CD0(v8, v10);
    v12 = objc_msgSend(v4, "TLVsWithData:", isa);

    if (!v12)
    {
LABEL_32:
      __break(1u);
      JUMPOUT(0x10006ABE4);
    }
    v42 = sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
    v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v42);

    if ((unint64_t)v13 >> 62)
    {
LABEL_23:
      if (v13 < 0)
        v40 = v13;
      else
        v40 = v13 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v13);
      v14 = _CocoaArrayWrapper.endIndex.getter(v40);
      swift_bridgeObjectRelease(v13);
      if (v14)
        goto LABEL_5;
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v14)
      {
LABEL_5:
        v15 = 0;
        v16 = &selRef_removeObject_;
        do
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v13);
          }
          else
          {
            if (v15 >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_23;
            }
            v17 = *(id *)(v13 + 32 + 8 * v15);
          }
          v18 = v17;
          v19 = __OFADD__(v15, 1);
          v20 = v15 + 1;
          if (v19)
            goto LABEL_32;
          v21 = objc_msgSend(v17, "tag");
          if ((_DWORD)v21 == 130)
          {
            v22 = objc_msgSend(v18, "value");
            if (v22)
            {
              v23 = v22;
              objc_msgSend(v22, v16[328], 0);

              v24 = objc_msgSend(v18, "value");
              if (v24)
              {
                v25 = v16;
                v26 = v24;
                objc_msgSend(v24, v25[328], 1);

                v27 = objc_msgSend(v18, "value");
                if (v27)
                {
                  v28 = v27;
                  static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);

                  v29 = objc_msgSend(v18, "value");
                  if (v29)
                  {
                    v30 = v29;
                    static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
                    v32 = v31;

                    __asm { BR              X9 }
                  }
LABEL_31:
                  __break(1u);
                }
LABEL_30:
                __break(1u);
                goto LABEL_31;
              }
            }
            else
            {
              __break(1u);
            }
            __break(1u);
            goto LABEL_30;
          }
          v33 = v20;
          v34 = Logger.logObject.getter(v21);
          v36 = static os_log_type_t.error.getter(v34, v35);
          if (os_log_type_enabled(v34, v36))
          {
            v37 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v37 = 0;
            _os_log_impl((void *)&_mh_execute_header, v34, v36, "Get event returned unexpected tag", v37, 2u);
            swift_slowDealloc(v37, -1, -1);
          }

          v15 = v33;
          v16 = &selRef_removeObject_;
        }
        while (v33 != v14);
      }
    }

    swift_bridgeObjectRelease(v13);
  }
  else
  {
    v38 = v43;
    _convertNSErrorToError(_:)(v2);

    swift_willThrow(v39);
  }
}

void sub_10006ACF4()
{
  unint64_t v0;
  uint64_t v1;

  sub_100063CD0(v1, v0);
  JUMPOUT(0x10006AD00);
}

uint64_t sub_10006AD24()
{
  return 0;
}

void sub_10006AD2C(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(_QWORD);
  uint64_t v3;
  void (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void (*v45)(_QWORD);
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[3];

  v2 = (void (*)(_QWORD))a1;
  v3 = *(_QWORD *)(v1 + 24);
  if ((unint64_t)v3 >> 62)
  {
LABEL_21:
    if (v3 < 0)
      v30 = v3;
    else
      v30 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v3, 2);
    swift_retain(v2);
    v4 = (void (*)(_QWORD))_CocoaArrayWrapper.endIndex.getter(v30);
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(void (**)(_QWORD))((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(v3, 2);
    swift_retain(v2);
    if (v4)
    {
LABEL_3:
      v5 = 4;
      v6 = a1;
      while (1)
      {
        v7 = v5 - 4;
        if ((v3 & 0xC000000000000001) != 0)
        {
          v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v3);
          v2 = (void (*)(_QWORD))(v5 - 3);
          if (__OFADD__(v7, 1))
            goto LABEL_20;
        }
        else
        {
          v8 = *(_QWORD *)(v3 + 8 * v5);
          swift_retain(v8);
          v2 = (void (*)(_QWORD))(v5 - 3);
          if (__OFADD__(v7, 1))
          {
LABEL_20:
            __break(1u);
            goto LABEL_21;
          }
        }
        v9 = *(_QWORD *)(v8 + 16);
        if (v9)
        {
          v10 = v9 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
          v11 = a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
          swift_retain(a1);
          swift_retain(v9);
          LOBYTE(v10) = static UUID.== infix(_:_:)(v10, v11);
          swift_release(v9);
          swift_release(a1);
          if ((v10 & 1) != 0)
            break;
        }
        swift_release(v8);
        ++v5;
        if (v2 == v4)
          goto LABEL_25;
      }
      swift_release(a1);
      swift_bridgeObjectRelease_n(v3, 2);
      v12 = v46;
      v13 = v46 + 32;
      swift_beginAccess(v46 + 32, v51, 0, 0);
      if (!*(_QWORD *)(*(_QWORD *)(v46 + 32) + 16))
      {
        v29 = *(_QWORD *)(v8 + 16);
        *(_QWORD *)(v8 + 16) = 0;
        swift_release(v8);
        swift_release(v29);
        return;
      }
      swift_beginAccess(v13, &v49, 33, 0);
      v14 = *(_QWORD **)v13;
      if (*(_QWORD *)(*(_QWORD *)v13 + 16))
      {
        v6 = v14[4];
        v4 = (void (*)(_QWORD))v14[5];
        v12 = v14[6];
        swift_retain(v8);
        swift_retain(v6);
        swift_retain(v12);
        sub_1001F69C4(0, 1);
        swift_endAccess(&v49);
        v15 = *(_QWORD *)(v8 + 16);
        *(_QWORD *)(v8 + 16) = v6;
        swift_retain(v6);
        swift_release(v15);
        if (qword_1003447B0 == -1)
        {
LABEL_15:
          v16 = swift_retain_n(a1, 2);
          v17 = Logger.logObject.getter(v16);
          v21 = static os_log_type_t.info.getter(v17, v18, v19, v20);
          if (os_log_type_enabled(v17, v21))
          {
            v45 = v4;
            v22 = (uint8_t *)swift_slowAlloc(12, -1);
            v44 = swift_slowAlloc(32, -1);
            v49 = v44;
            *(_DWORD *)v22 = 136315138;
            v23 = type metadata accessor for UUID(0);
            v24 = sub_10006B7E0();
            v25 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
            v27 = v26;
            v48 = sub_1001C56EC(v25, v26, &v49);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v22 + 4, v22 + 12);
            swift_release_n(a1, 2);
            swift_bridgeObjectRelease(v27);
            _os_log_impl((void *)&_mh_execute_header, v17, v21, "Allocating free slot to next waiter %s", v22, 0xCu);
            swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v44, -1, -1);
            v28 = v22;
            v4 = v45;
            swift_slowDealloc(v28, -1, -1);

          }
          else
          {

            swift_release_n(a1, 2);
          }
          v49 = v6;
          v4(&v49);
          swift_release_n(v8, 2);
          swift_release(v12);
          swift_release(v6);
          return;
        }
      }
      else
      {
        __break(1u);
      }
      swift_once(&qword_1003447B0, sub_1001EEF58);
      goto LABEL_15;
    }
  }
LABEL_25:
  swift_release(a1);
  swift_bridgeObjectRelease_n(v3, 2);
  if (qword_1003447B0 != -1)
    swift_once(&qword_1003447B0, sub_1001EEF58);
  v31 = swift_retain_n(a1, 2);
  v32 = Logger.logObject.getter(v31);
  v36 = static os_log_type_t.info.getter(v32, v33, v34, v35);
  if (os_log_type_enabled(v32, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = swift_slowAlloc(32, -1);
    v51[0] = v38;
    *(_DWORD *)v37 = 136315138;
    v39 = type metadata accessor for UUID(0);
    v40 = sub_10006B7E0();
    v41 = dispatch thunk of CustomStringConvertible.description.getter(v39, v40);
    v43 = v42;
    v49 = sub_1001C56EC(v41, v42, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v37 + 4, v37 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v43);
    _os_log_impl((void *)&_mh_execute_header, v32, v36, "No slot to belongs to %s, doing nothing", v37, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
}

void sub_10006B2B0(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced6LyonSE_isRunning) == 1)
  {
    objc_msgSend(*(id *)(*(_QWORD *)&a1[OBJC_IVAR____TtC10seserviced8LyonPeer_stepUpHelper]+ OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stsHelper), "invalidate");
    if (qword_1003445F0 == -1)
    {
LABEL_6:
      sub_100127D5C(a1);
      sub_10006AD2C((uint64_t)a1);
      return;
    }
LABEL_11:
    swift_once(&qword_1003445F0, sub_100128818);
    goto LABEL_6;
  }
  v12 = Logger.logObject.getter(v11);
  v14 = static os_log_type_t.error.getter(v12, v13);
  if (os_log_type_enabled(v12, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v14, "Not running", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

}

uint64_t sub_10006B500()
{
  return type metadata accessor for LyonSE(0);
}

uint64_t type metadata accessor for LyonSE(uint64_t a1)
{
  uint64_t result;

  result = qword_100344B68;
  if (!qword_100344B68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LyonSE);
  return result;
}

uint64_t sub_10006B544(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100288930;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = &unk_100288948;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = &unk_100288948;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10006B5E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

unint64_t sub_10006B604(unint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[4] = _swiftEmptyArrayStorage;
  v1[2] = result;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    if (result)
    {
      specialized ContiguousArray.reserveCapacity(_:)(result);
      v3 = type metadata accessor for SlotManager.LyonURSKSlot();
      do
      {
        v4 = swift_allocObject(v3, 24, 7);
        *(_QWORD *)(v4 + 16) = 0;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v4);
        v5 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v5);
        v6 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v4);
        specialized ContiguousArray._endMutation()(v6);
        --v2;
      }
      while (v2);
    }
    v1[3] = _swiftEmptyArrayStorage;
    return (unint64_t)v1;
  }
  return result;
}

uint64_t sub_10006B6D0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for SlotManager()
{
  return objc_opt_self(_TtC10seserviced11SlotManager);
}

uint64_t type metadata accessor for SlotManager.LyonURSKSlot()
{
  return objc_opt_self(_TtCC10seserviced11SlotManager12LyonURSKSlot);
}

uint64_t sub_10006B73C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  void (*v8)(void *, unint64_t, void *, uint64_t);
  id v9;
  unint64_t v10;
  unint64_t v11;
  id v12;

  v6 = a2;
  v8 = *(void (**)(void *, unint64_t, void *, uint64_t))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    swift_retain(v7);
    v9 = v6;
    v6 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v11 = v10;

  }
  else
  {
    swift_retain(v7);
    v11 = 0xF000000000000000;
  }
  v12 = a3;
  v8(v6, v11, a3, a4);

  sub_10006B9B4((uint64_t)v6, v11);
  return swift_release(v7);
}

unint64_t sub_10006B7E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100344CC8;
  if (!qword_100344CC8)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_100344CC8);
  }
  return result;
}

unint64_t sub_10006B828()
{
  unint64_t result;

  result = qword_100346120;
  if (!qword_100346120)
  {
    result = swift_getWitnessTable(&unk_10028DC24, &type metadata for DSKError);
    atomic_store(result, (unint64_t *)&qword_100346120);
  }
  return result;
}

unint64_t sub_10006B86C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003477F0;
  if (!qword_1003477F0)
  {
    v1 = sub_100063DC8((uint64_t *)&unk_100346060);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1003477F0);
  }
  return result;
}

uint64_t sub_10006B8B8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006B8E0()
{
  uint64_t v0;

  return sub_100079720(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10006B8F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  sub_100063CD0(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_10006B924(void *a1, char a2)
{
  uint64_t v2;

  sub_100068B40(a1, a2 & 1, *(_BYTE *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_10006B938()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006B964(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;

  return sub_1000684FC(a1, a2, a3 & 1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_10006B970()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006B994(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1001E222C(a1, a2, a3, a4, *(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16));
}

uint64_t sub_10006B99C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10006B9AC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10006B9B4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100063CD0(a1, a2);
  return a1;
}

uint64_t sub_10006B9C8(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRetain(a1);
  else
    return sub_100063C8C(a1, a2);
}

uint64_t sub_10006B9D4(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return sub_100063CD0(a1, a2);
}

unint64_t sub_10006B9E4()
{
  unint64_t result;

  result = qword_100344CE8;
  if (!qword_100344CE8)
  {
    result = swift_getWitnessTable(&unk_10028A270, &type metadata for SEError);
    atomic_store(result, (unint64_t *)&qword_100344CE8);
  }
  return result;
}

void sub_10006BA28(id a1, char a2)
{
  if ((a2 & 1) == 0)

}

uint64_t sub_10006BA34(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100063C8C(a1, a2);
  return a1;
}

uint64_t sub_10006BA4C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

_QWORD *sub_10006BA78(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10006BA9C(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10006BABC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  _BYTE v34[24];

  v6 = swift_allocObject(&unk_100306F78, 24, 7);
  *(_QWORD *)(v6 + 16) = a3;
  v7 = *(_QWORD *)(a2 + 24);
  if ((unint64_t)v7 >> 62)
    goto LABEL_22;
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(*(_QWORD *)(a2 + 24), 2);
  v9 = a3;
  while (v8)
  {
    v10 = 4;
    while (1)
    {
      v11 = v10 - 4;
      if ((v7 & 0xC000000000000001) == 0)
        break;
      v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v7);
      v13 = __OFADD__(v11, 1);
      v14 = v10 - 3;
      if (v13)
        goto LABEL_21;
LABEL_9:
      if (!*(_QWORD *)(v12 + 16))
      {
        swift_bridgeObjectRelease_n(v7, 2);
        v30 = *(_QWORD *)(v12 + 16);
        *(_QWORD *)(v12 + 16) = a1;
        swift_retain(v12);
        swift_release(v30);
        v31 = swift_retain(a1);
        sub_100065A18(v31);
        swift_release(v6);
        return swift_release_n(v12, 2);
      }
      swift_release(v12);
      ++v10;
      if (v14 == v8)
        goto LABEL_11;
    }
    v12 = *(_QWORD *)(v7 + 8 * v10);
    swift_retain(v12);
    v13 = __OFADD__(v11, 1);
    v14 = v10 - 3;
    if (!v13)
      goto LABEL_9;
LABEL_21:
    __break(1u);
LABEL_22:
    if (v7 < 0)
      v32 = v7;
    else
      v32 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v7, 2);
    v33 = a3;
    v8 = _CocoaArrayWrapper.endIndex.getter(v32);
  }
LABEL_11:
  v15 = swift_bridgeObjectRelease_n(v7, 2);
  if (qword_1003447B0 != -1)
    v15 = swift_once(&qword_1003447B0, sub_1001EEF58);
  v16 = Logger.logObject.getter(v15);
  v20 = static os_log_type_t.info.getter(v16, v17, v18, v19);
  if (os_log_type_enabled(v16, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v20, "No free slot available, adding to queue", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = swift_allocObject(&unk_100306FA0, 32, 7);
  *(_QWORD *)(v22 + 16) = sub_10006C1E0;
  *(_QWORD *)(v22 + 24) = v6;
  v23 = (_QWORD *)(a2 + 32);
  swift_beginAccess(a2 + 32, v34, 33, 0);
  v24 = *(_QWORD **)(a2 + 32);
  swift_retain(a1);
  swift_retain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
  *(_QWORD *)(a2 + 32) = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v24 = sub_1001C446C(0, v24[2] + 1, 1, v24);
    *v23 = v24;
  }
  v27 = v24[2];
  v26 = v24[3];
  if (v27 >= v26 >> 1)
  {
    v24 = sub_1001C446C((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
    *v23 = v24;
  }
  v24[2] = v27 + 1;
  v28 = &v24[3 * v27];
  v28[4] = a1;
  v28[5] = sub_10006C1E8;
  v28[6] = v22;
  swift_endAccess(v34);
  return swift_release(v6);
}

void sub_10006BDC4(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  int v8;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Class v32;
  char v33;
  char *v34;
  double v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  Class v40;
  uint64_t v41;
  unint64_t v42;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10017C4A8((uint64_t)_swiftEmptyArrayStorage);
  v8 = *(_DWORD *)&a1[OBJC_IVAR____TtC10seserviced8LyonPeer_transactionMode];
  if (v8 == 4 || v8 == 1)
    v10 = CFSTR("successfulFastTxCount");
  else
    v10 = CFSTR("successfulStandardTxCount");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;
  sub_10006C25C(0, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
  isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
  v42 = v7;
  sub_10018E13C((uint64_t)isa, v11, v13, isUniquelyReferenced_nonNull_native);
  v16 = v42;
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(0x8000000000000000);
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("successfulAliroTxCount"));
  v19 = v18;
  sub_10006C25C(0, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
  v20 = NSNumber.init(integerLiteral:)(1).super.super.isa;
  v21 = swift_isUniquelyReferenced_nonNull_native(v16);
  v42 = v16;
  sub_10018E13C((uint64_t)v20, v17, v19, v21);
  v22 = v42;
  swift_bridgeObjectRelease(v19);
  v23 = swift_bridgeObjectRelease(0x8000000000000000);
  v24 = &a1[OBJC_IVAR____TtC10seserviced8LyonPeer_startTime];
  if ((a1[OBJC_IVAR____TtC10seserviced8LyonPeer_startTime + 8] & 1) == 0)
  {
    v25 = *(double *)v24;
    v26 = Date.init()(v23);
    v27 = Date.timeIntervalSince1970.getter(v26);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v28 = (v27 - v25) * 1000.0;
    if ((~*(_QWORD *)&v28 & 0x7FF0000000000000) != 0)
    {
      if (v28 > -1.0)
      {
        if (v28 < 4294967300.0)
        {
          *(_DWORD *)&a1[OBJC_IVAR____TtC10seserviced8LyonPeer_stepUpDuration] = v28;
          *(_QWORD *)v24 = 0;
          v24[8] = 1;
          v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("successfulStepUpTxCount"));
          v31 = v30;
          v32 = NSNumber.init(integerLiteral:)(1).super.super.isa;
          v33 = swift_isUniquelyReferenced_nonNull_native(v22);
          v42 = v22;
          sub_10018E13C((uint64_t)v32, v29, v31, v33);
          v22 = v42;
          swift_bridgeObjectRelease(v31);
          v23 = swift_bridgeObjectRelease(0x8000000000000000);
          goto LABEL_12;
        }
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_12:
  v34 = &a1[OBJC_IVAR____TtC10seserviced8LyonPeer_seStartTime];
  if ((a1[OBJC_IVAR____TtC10seserviced8LyonPeer_seStartTime + 8] & 1) == 0)
  {
    v35 = *(double *)v34;
    v36 = Date.init()(v23);
    v37 = Date.timeIntervalSince1970.getter(v36);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v38 = v37 - v35;
    if ((~COERCE__INT64(v37 - v35) & 0x7FF0000000000000) != 0)
    {
      if (v38 > -1.0)
      {
        if (v38 < 4294967300.0)
        {
          *(_DWORD *)&a1[OBJC_IVAR____TtC10seserviced8LyonPeer_seDuration] = v38;
          *(_QWORD *)v34 = 0;
          v34[8] = 1;
          goto LABEL_17;
        }
LABEL_25:
        __break(1u);
        return;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_17:
  v39 = objc_opt_self(SESDAnalyticsLogger);
  v40 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v22);
  sub_10004A724(v39, v40);

  objc_msgSend(*(id *)(*(_QWORD *)&a1[OBJC_IVAR____TtC10seserviced8LyonPeer_stepUpHelper]+ OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stsHelper), "invalidate");
  if (qword_1003445F0 != -1)
    swift_once(&qword_1003445F0, sub_100128818);
  sub_100127D5C(a1);
}

uint64_t sub_10006C1BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10006C1E0(uint64_t a1)
{
  sub_100065A18(a1);
}

uint64_t sub_10006C1E8(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

void sub_10006C20C(void *a1, char a2)
{
  uint64_t v2;

  sub_100064F04(a1, a2 & 1, *(NSObject **)(v2 + 16));
}

uint64_t sub_10006C218(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100063D3C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006C25C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

_DWORD *sub_10006C294()
{
  return sub_1000647B4();
}

_OWORD *sub_10006C2B4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10006C2DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = type metadata accessor for AlishaLPEM(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = String.init(cString:)(SESLoggingSubsystem);
  result = Logger.init(subsystem:category:)(v2);
  v4 = v1 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__latency;
  *(_QWORD *)v4 = 0xD000000000000014;
  *(_QWORD *)(v4 + 8) = 0x80000001002BA5B0;
  *(_QWORD *)(v4 + 16) = 0xD000000000000017;
  *(_QWORD *)(v4 + 24) = 0x80000001002BA810;
  *(_WORD *)(v4 + 32) = 261;
  v5 = v1 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__btScanTimer;
  *(_QWORD *)v5 = 0xD000000000000014;
  *(_QWORD *)(v5 + 8) = 0x80000001002BA5B0;
  *(_QWORD *)(v5 + 16) = 0xD00000000000001DLL;
  *(_QWORD *)(v5 + 24) = 0x80000001002BA830;
  *(_WORD *)(v5 + 32) = 262;
  v6 = v1 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__isLoggingEnabled;
  *(_QWORD *)v6 = 0xD000000000000014;
  *(_QWORD *)(v6 + 8) = 0x80000001002BA5B0;
  *(_QWORD *)(v6 + 16) = 0xD00000000000001ALL;
  *(_QWORD *)(v6 + 24) = 0x80000001002BA850;
  *(_WORD *)(v6 + 32) = 0;
  qword_100354A78 = v1;
  return result;
}

void sub_10006C3F8(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  void (*v14)(_QWORD *, _QWORD *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  id v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  char v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  os_log_type_t v68;
  _QWORD *v69;
  uint32_t *p_cb;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  os_log_type_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  __int128 v91;
  uint64_t v92;
  char v93;
  char v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  os_log_type_t v105;
  uint8_t *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  char v114;
  char v115;
  uint64_t v116;
  uint8_t *v117;
  __int128 v118;
  uint64_t v119;
  char v120;
  char v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  char *v126;
  unint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(_QWORD *, _QWORD *);
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  void (*v141)(_QWORD, _QWORD, _QWORD);
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t (*v155)(_QWORD *);
  unint64_t v156;
  uint64_t v157;
  void *v158;
  unint64_t v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  char *v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  void (*v173)(_QWORD *, _QWORD *);
  _QWORD *v174;
  char v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int16 v179;
  _QWORD v180[4];
  char v181;
  char v182;
  __int128 v183;
  __int128 v184;
  __int16 v185;
  _QWORD v186[4];
  char v187;
  char v188;
  _OWORD v189[2];
  __int16 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  unint64_t v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  unint64_t v202;
  void (*v203)(_QWORD, _QWORD, _QWORD);
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  void *v207;

  v2 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v2, v3);
  v162 = (uint64_t)&v156 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v6 = (__int128 *)*(v5 - 1);
  __chkstk_darwin(v5, v7);
  v9 = (unint64_t *)((char *)&v156 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    goto LABEL_65;
  while (1)
  {
    v10 = qword_100354EE8;
    *v9 = qword_100354EE8;
    v11 = enum case for DispatchPredicate.onQueue(_:);
    v12 = (_QWORD *)*((_QWORD *)v6 + 13);
    ((void (*)(_QWORD *, _QWORD, _QWORD *))v12)(v9, enum case for DispatchPredicate.onQueue(_:), v5);
    v13 = (id)v10;
    LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
    v14 = (void (*)(_QWORD *, _QWORD *))*((_QWORD *)v6 + 1);
    v14(v9, v5);
    if ((v10 & 1) != 0)
    {
      if (qword_1003447D0 == -1)
        goto LABEL_4;
    }
    else
    {
      __break(1u);
    }
    swift_once(&qword_1003447D0, sub_1001F8C40);
LABEL_4:
    v173 = v14;
    v174 = v12;
    v15 = swift_allocObject(&unk_100307040, 24, 7);
    *(_QWORD *)(v15 + 16) = a1;
    v16 = qword_1003447A0;
    swift_bridgeObjectRetain(a1);
    if (v16 != -1)
      swift_once(&qword_1003447A0, sub_1001EDCA4);
    v17 = swift_allocObject(&unk_100307068, 32, 7);
    *(_QWORD *)(v17 + 16) = sub_10006E310;
    *(_QWORD *)(v17 + 24) = v15;
    v155 = sub_10006E33C;
    __chkstk_darwin(v17, v18);
    v20 = v19 + 4;
    swift_retain(v15);
    os_unfair_lock_lock(v20);
    v21 = 0;
    sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10006F860, &v205);
    os_unfair_lock_unlock(v20);
    v22 = v205;
    swift_release(v15);
    swift_release(v17);
    v23 = v22 & 0xC000000000000001;
    if ((v22 & 0xC000000000000001) != 0)
    {
      if (v22 < 0)
        v24 = v22;
      else
        v24 = v22 & 0xFFFFFFFFFFFFFF8;
      if (!__CocoaSet.count.getter(v24))
        goto LABEL_14;
      v25 = __CocoaSet.count.getter(v24);
    }
    else
    {
      v25 = *(_QWORD *)(v22 + 16);
      if (!v25)
        goto LABEL_14;
    }
    if (v25 <= 8)
    {
      if (qword_1003445A0 == -1)
        goto LABEL_22;
      goto LABEL_69;
    }
LABEL_14:
    v26 = swift_bridgeObjectRetain(v22);
    v27 = Logger.logObject.getter(v26);
    v21 = static os_log_type_t.info.getter(v27, v28, v29, v30);
    if (os_log_type_enabled(v27, (os_log_type_t)v21))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v31 = 134217984;
      if (v23)
      {
        if (v22 < 0)
          v32 = v22;
        else
          v32 = v22 & 0xFFFFFFFFFFFFFF8;
        v23 = __CocoaSet.count.getter(v32);
      }
      else
      {
        v23 = *(_QWORD *)(v22 + 16);
      }
      swift_bridgeObjectRelease(v22);
      *(_QWORD *)&v205 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v205, (char *)&v205 + 8, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v21, "Disabling LPEM due to %ld peers", v31, 0xCu);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v22, 2);
    }
    v42 = qword_100354EE8;
    *v9 = qword_100354EE8;
    ((void (*)(_QWORD *, uint64_t, _QWORD *))v174)(v9, v11, v5);
    v43 = (id)v42;
    LOBYTE(v42) = _dispatchPreconditionTest(_:)(v9);
    v173(v9, v5);
    if ((v42 & 1) != 0)
    {
      sub_1001F8820(0);
      return;
    }
    __break(1u);
LABEL_69:
    swift_once(&qword_1003445A0, sub_1000B26B0);
LABEL_22:
    sub_1000AC804();
    v34 = v33;
    v36 = v35;
    sub_1000ACAC4(v22, (uint64_t)&v205);
    v9 = v168;
    if (v21)
    {
      swift_errorRelease(v21);
      v37 = swift_bridgeObjectRelease(v22);
      v38 = Logger.logObject.getter(v37);
      v40 = static os_log_type_t.error.getter(v38, v39);
      if (os_log_type_enabled(v38, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v40, "Failed to retrieve pairing information", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }
      sub_100063CD0(v34, v36);

      return;
    }
    v160 = v205;
    v44 = *((_QWORD *)&v206 + 1);
    v161 = v206;
    v45 = v207;
    *(_QWORD *)&v205 = v207;
    swift_bridgeObjectRetain(v207);
    sub_10006E364(&v205);
    v167 = v205;
    v46 = *(_QWORD *)(v205 + 16);
    if (v23)
    {
      if (v22 < 0)
        v47 = v22;
      else
        v47 = v22 & 0xFFFFFFFFFFFFFF8;
      v48 = __CocoaSet.count.getter(v47);
    }
    else
    {
      v48 = *(_QWORD *)(v22 + 16);
    }
    v166 = v46;
    if (v46 != v48)
    {
      swift_bridgeObjectRetain(v22);
      v81 = v167;
      v82 = swift_retain(v167);
      v83 = Logger.logObject.getter(v82);
      v85 = static os_log_type_t.error.getter(v83, v84);
      if (os_log_type_enabled(v83, v85))
      {
        v86 = v44;
        v158 = v45;
        v87 = swift_slowAlloc(22, -1);
        *(_DWORD *)v87 = 134218240;
        if (v23)
        {
          if (v22 < 0)
            v88 = v22;
          else
            v88 = v22 & 0xFFFFFFFFFFFFFF8;
          v89 = __CocoaSet.count.getter(v88);
        }
        else
        {
          v89 = *(_QWORD *)(v22 + 16);
        }
        swift_bridgeObjectRelease(v22);
        *(_QWORD *)&v205 = v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v205, (char *)&v205 + 8, v87 + 4, v87 + 12);
        swift_bridgeObjectRelease(v22);
        *(_WORD *)(v87 + 12) = 2048;
        v154 = v167;
        swift_release(v167);
        *(_QWORD *)&v205 = v166;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v205, (char *)&v205 + 8, v87 + 14, v87 + 22);
        swift_release(v154);
        _os_log_impl((void *)&_mh_execute_header, v83, v85, "Missing pairing information for %ld peers got %ld", (uint8_t *)v87, 0x16u);
        swift_slowDealloc(v87, -1, -1);
        sub_100063CD0(v34, v36);

        sub_100063CD0(v160, *((unint64_t *)&v160 + 1));
        sub_100063CD0(v161, v86);
        swift_bridgeObjectRelease(v158);
      }
      else
      {
        swift_bridgeObjectRelease(v22);
        swift_release(v81);
        sub_100063CD0(v34, v36);

        sub_100063CD0(v160, *((unint64_t *)&v160 + 1));
        sub_100063CD0(v161, v44);
        swift_release(v81);
        swift_bridgeObjectRelease(v22);
        swift_bridgeObjectRelease(v45);
      }
      return;
    }
    v158 = v45;
    swift_bridgeObjectRelease(v22);
    v49 = type metadata accessor for __DataStorage(0);
    v50 = *(unsigned int *)(v49 + 48);
    v51 = *(unsigned __int16 *)(v49 + 52);
    v165 = v49;
    swift_allocObject(v49, v50, v51);
    v52 = __DataStorage.init(capacity:)(60);
    v203 = 0;
    v204 = v52 | 0x4000000000000000;
    LOBYTE(v189[0]) = 1;
    v159 = v36;
    *((_QWORD *)&v206 + 1) = &type metadata for UnsafeRawBufferPointer;
    v207 = &protocol witness table for UnsafeRawBufferPointer;
    *(_QWORD *)&v205 = v189;
    *((_QWORD *)&v205 + 1) = (char *)v189 + 1;
    v53 = sub_10006BA78(&v205, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)(*v53, v53[1]);
    sub_10006BA9C(&v205);
    LODWORD(v189[0]) = 0x1000000;
    *((_QWORD *)&v206 + 1) = &type metadata for UnsafeRawBufferPointer;
    v207 = &protocol witness table for UnsafeRawBufferPointer;
    *(_QWORD *)&v205 = v189;
    *((_QWORD *)&v205 + 1) = (char *)v189 + 4;
    v54 = sub_10006BA78(&v205, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)(*v54, v54[1]);
    sub_10006BA9C(&v205);
    Data.append(_:)(v160, *((_QWORD *)&v160 + 1));
    v156 = v44;
    Data.append(_:)(v161, v44);
    v157 = v34;
    Data.append(_:)(v34, v159);
    v55 = *(_OWORD *)((char *)v9 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__isLoggingEnabled + 16);
    v189[0] = *(_OWORD *)((char *)v9 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__isLoggingEnabled);
    v189[1] = v55;
    v190 = *(_WORD *)((char *)v9 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__isLoggingEnabled + 32);
    v191 = v189[0];
    v192 = v55;
    sub_10006F87C((uint64_t)&v191);
    v56 = sub_10006F87C((uint64_t)&v192);
    sub_10015348C(v56);
    v58 = v57;
    sub_10006F8A4((uint64_t)&v191);
    sub_10006F8A4((uint64_t)&v192);
    LOBYTE(v186[0]) = v58 & 1;
    *((_QWORD *)&v206 + 1) = &type metadata for UnsafeRawBufferPointer;
    v207 = &protocol witness table for UnsafeRawBufferPointer;
    *(_QWORD *)&v205 = v186;
    *((_QWORD *)&v205 + 1) = (char *)v186 + 1;
    v59 = sub_10006BA78(&v205, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)(*v59, v59[1]);
    sub_10006BA9C(&v205);
    v201 = 0;
    v202 = 0;
    LOBYTE(v186[0]) = 1;
    *((_QWORD *)&v206 + 1) = &type metadata for UnsafeRawBufferPointer;
    v207 = &protocol witness table for UnsafeRawBufferPointer;
    *(_QWORD *)&v205 = v186;
    *((_QWORD *)&v205 + 1) = (char *)v186 + 1;
    v60 = sub_10006BA78(&v205, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)(*v60, v60[1]);
    sub_10006BA9C(&v205);
    if (v46 >= 256)
    {
      LOBYTE(v155) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, (_DWORD)v155, 3455, 0);
      __break(1u);
      return;
    }
    LOBYTE(v186[0]) = v46;
    *((_QWORD *)&v206 + 1) = &type metadata for UnsafeRawBufferPointer;
    v207 = &protocol witness table for UnsafeRawBufferPointer;
    *(_QWORD *)&v205 = v186;
    *((_QWORD *)&v205 + 1) = (char *)v186 + 1;
    v61 = sub_10006BA78(&v205, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)(*v61, v61[1]);
    sub_10006BA9C(&v205);
    v62 = (_QWORD *)((char *)v9 + OBJC_IVAR____TtC10seserviced10AlishaLPEM_logger);
    v63 = swift_retain(v9);
    v174 = v62;
    v64 = Logger.logObject.getter(v63);
    v68 = static os_log_type_t.info.getter(v64, v65, v66, v67);
    v69 = v9;
    p_cb = &OBJC_PROTOCOL___SESDarwinNotificationDelegate.cb;
    if (os_log_type_enabled(v64, v68))
    {
      v71 = (uint8_t *)swift_slowAlloc(5, -1);
      *(_DWORD *)v71 = 16777472;
      v9 = v71 + 5;
      v72 = *(_QWORD *)((char *)v69 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__latency + 8);
      v73 = *(_QWORD *)((char *)v69 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__latency + 16);
      v74 = *(_QWORD *)((char *)v69 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__latency + 24);
      v75 = *((_BYTE *)v69 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__latency + 32);
      v76 = *((_BYTE *)v69 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__latency + 33);
      v186[0] = *(_QWORD *)((char *)v69 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__latency);
      v186[1] = v72;
      v186[2] = v73;
      v186[3] = v74;
      v187 = v75;
      v188 = v76;
      swift_bridgeObjectRetain(v72);
      v77 = swift_bridgeObjectRetain(v74);
      sub_1001535D8(v77);
      v79 = v78;
      v80 = v74;
      p_cb = (_DWORD *)(&OBJC_PROTOCOL___SESDarwinNotificationDelegate + 64);
      swift_bridgeObjectRelease(v80);
      swift_bridgeObjectRelease(v72);
      LOBYTE(v205) = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v205, (char *)&v205 + 1, v71 + 4, v71 + 5);
      swift_release(v69);
      _os_log_impl((void *)&_mh_execute_header, v64, v68, "Using car0 latency value %hhu", v71, 5u);
      swift_slowDealloc(v71, -1, -1);
    }
    else
    {
      swift_release(v9);
    }

    v90 = (char *)v69 + *((_QWORD *)p_cb + 415);
    v91 = *((_OWORD *)v90 + 1);
    v183 = *(_OWORD *)v90;
    v184 = v91;
    v185 = *((_WORD *)v90 + 16);
    v193 = v183;
    v194 = v91;
    sub_10006F87C((uint64_t)&v193);
    v92 = sub_10006F87C((uint64_t)&v194);
    sub_1001535D8(v92);
    v94 = v93;
    sub_10006F8A4((uint64_t)&v193);
    sub_10006F8A4((uint64_t)&v194);
    LOBYTE(v180[0]) = v94;
    *((_QWORD *)&v206 + 1) = &type metadata for UnsafeRawBufferPointer;
    v5 = &protocol witness table for UnsafeRawBufferPointer;
    v207 = &protocol witness table for UnsafeRawBufferPointer;
    *(_QWORD *)&v205 = v180;
    *((_QWORD *)&v205 + 1) = (char *)v180 + 1;
    v95 = sub_10006BA78(&v205, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)(*v95, v95[1]);
    sub_10006BA9C(&v205);
    LOBYTE(v180[0]) = 2;
    *((_QWORD *)&v206 + 1) = &type metadata for UnsafeRawBufferPointer;
    v207 = &protocol witness table for UnsafeRawBufferPointer;
    *(_QWORD *)&v205 = v180;
    *((_QWORD *)&v205 + 1) = (char *)v180 + 1;
    v96 = sub_10006BA78(&v205, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)(*v96, v96[1]);
    sub_10006BA9C(&v205);
    LOBYTE(v180[0]) = 3;
    *((_QWORD *)&v206 + 1) = &type metadata for UnsafeRawBufferPointer;
    v207 = &protocol witness table for UnsafeRawBufferPointer;
    *(_QWORD *)&v205 = v180;
    *((_QWORD *)&v205 + 1) = (char *)v180 + 1;
    v97 = sub_10006BA78(&v205, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)(*v97, v97[1]);
    sub_10006BA9C(&v205);
    LOBYTE(v180[0]) = 6;
    *((_QWORD *)&v206 + 1) = &type metadata for UnsafeRawBufferPointer;
    v207 = &protocol witness table for UnsafeRawBufferPointer;
    *(_QWORD *)&v205 = v180;
    *((_QWORD *)&v205 + 1) = (char *)v180 + 1;
    v98 = sub_10006BA78(&v205, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)(*v98, v98[1]);
    sub_10006BA9C(&v205);
    LOBYTE(v180[0]) = 15;
    *((_QWORD *)&v206 + 1) = &type metadata for UnsafeRawBufferPointer;
    v207 = &protocol witness table for UnsafeRawBufferPointer;
    *(_QWORD *)&v205 = v180;
    *((_QWORD *)&v205 + 1) = (char *)v180 + 1;
    v99 = sub_10006BA78(&v205, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)(*v99, v99[1]);
    sub_10006BA9C(&v205);
    v100 = swift_retain(v69);
    v101 = Logger.logObject.getter(v100);
    v105 = static os_log_type_t.info.getter(v101, v102, v103, v104);
    if (os_log_type_enabled(v101, v105))
    {
      v106 = (uint8_t *)swift_slowAlloc(5, -1);
      *(_DWORD *)v106 = 16777472;
      v9 = v106 + 5;
      v107 = (char *)v69 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__btScanTimer;
      v108 = *(_QWORD *)((char *)v69 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__btScanTimer);
      v109 = *(_QWORD *)((char *)v69 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__btScanTimer + 8);
      v110 = *((_QWORD *)v107 + 2);
      v111 = *((_QWORD *)v107 + 3);
      v112 = v107[32];
      LOBYTE(v107) = v107[33];
      v180[0] = v108;
      v180[1] = v109;
      v180[2] = v110;
      v180[3] = v111;
      v181 = v112;
      v182 = (char)v107;
      swift_bridgeObjectRetain(v109);
      v113 = swift_bridgeObjectRetain(v111);
      sub_1001535D8(v113);
      v115 = v114;
      swift_bridgeObjectRelease(v111);
      v116 = v109;
      v69 = v168;
      swift_bridgeObjectRelease(v116);
      LOBYTE(v205) = v115;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v205, (char *)&v205 + 1, v106 + 4, v106 + 5);
      swift_release(v69);
      _os_log_impl((void *)&_mh_execute_header, v101, v105, "Using car0 BT scan timer value %hhu", v106, 5u);
      v117 = v106;
      v5 = &protocol witness table for UnsafeRawBufferPointer;
      swift_slowDealloc(v117, -1, -1);
    }
    else
    {
      swift_release(v69);
    }

    v118 = *(_OWORD *)((char *)v69 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__btScanTimer + 16);
    v177 = *(_OWORD *)((char *)v69 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__btScanTimer);
    v178 = v118;
    v179 = *(_WORD *)((char *)v69 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__btScanTimer + 32);
    v195 = v177;
    v196 = v118;
    sub_10006F87C((uint64_t)&v195);
    v119 = sub_10006F87C((uint64_t)&v196);
    sub_1001535D8(v119);
    v121 = v120;
    sub_10006F8A4((uint64_t)&v195);
    sub_10006F8A4((uint64_t)&v196);
    LOBYTE(v200) = v121;
    v6 = &v200;
    *((_QWORD *)&v206 + 1) = &type metadata for UnsafeRawBufferPointer;
    v207 = &protocol witness table for UnsafeRawBufferPointer;
    *(_QWORD *)&v205 = &v200;
    *((_QWORD *)&v205 + 1) = (char *)&v200 + 1;
    v122 = sub_10006BA78(&v205, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    a1 = (__int128 *)&v201;
    Data._Representation.append(contentsOf:)(*v122, v122[1]);
    sub_10006BA9C(&v205);
    LOWORD(v200) = 12288;
    *((_QWORD *)&v206 + 1) = &type metadata for UnsafeRawBufferPointer;
    v207 = &protocol witness table for UnsafeRawBufferPointer;
    *(_QWORD *)&v205 = &v200;
    *((_QWORD *)&v205 + 1) = (char *)&v200 + 2;
    v123 = sub_10006BA78(&v205, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)(*v123, v123[1]);
    sub_10006BA9C(&v205);
    LOWORD(v200) = 24576;
    *((_QWORD *)&v206 + 1) = &type metadata for UnsafeRawBufferPointer;
    v207 = &protocol witness table for UnsafeRawBufferPointer;
    *(_QWORD *)&v205 = &v200;
    *((_QWORD *)&v205 + 1) = (char *)&v200 + 2;
    v124 = sub_10006BA78(&v205, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)(*v124, v124[1]);
    sub_10006BA9C(&v205);
    v200 = xmmword_1002889A0;
    v199 = xmmword_1002889A0;
    v125 = v167;
    if (!v166)
      break;
    v126 = 0;
    v163 = &v176;
    v164 = v166 & ~(v166 >> 63);
    v127 = (unint64_t *)(v167 + 80);
    while ((char *)v164 != v126)
    {
      v174 = v126;
      v129 = *(v127 - 6);
      v128 = *(v127 - 5);
      v6 = (__int128 *)*(v127 - 4);
      v130 = *(v127 - 3);
      v132 = *(v127 - 2);
      v131 = (void (*)(_QWORD *, _QWORD *))*(v127 - 1);
      v133 = *v127;
      swift_allocObject(v165, *(unsigned int *)(v165 + 48), *(unsigned __int16 *)(v165 + 52));
      swift_retain(v129);
      sub_100063C8C(v128, (unint64_t)v6);
      sub_100063C8C(v130, v132);
      sub_100063C8C((uint64_t)v131, v133);
      v134 = __DataStorage.init(capacity:)(59);
      v197 = 0;
      v198 = v134 | 0x4000000000000000;
      Data.append(_:)(v128, v6);
      Data.append(_:)(v130, v132);
      Data.append(_:)(v131, v133);
      swift_retain(v129);
      sub_100063C8C(v128, (unint64_t)v6);
      sub_100063C8C(v130, v132);
      sub_100063C8C((uint64_t)v131, v133);
      v172 = v133;
      v173 = v131;
      sub_100063CD0((uint64_t)v131, v133);
      v170 = v132;
      v171 = v130;
      sub_100063CD0(v130, v132);
      sub_100063CD0(v128, (unint64_t)v6);
      v136 = *(_QWORD *)(v129 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
      v135 = *(_QWORD *)(v129 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
      sub_10006BA34(v136, v135);
      swift_release(v129);
      if (v135 >> 60 == 15)
        __break(1u);
      v9 = v174;
      v169 = (char *)v174 + 1;
      Data.append(_:)(v136, v135);
      sub_10006B9B4(v136, v135);
      v175 = 0;
      v5 = v186;
      *((_QWORD *)&v206 + 1) = &type metadata for UnsafeRawBufferPointer;
      v207 = &protocol witness table for UnsafeRawBufferPointer;
      *(_QWORD *)&v205 = &v175;
      *((_QWORD *)&v205 + 1) = v163;
      v137 = sub_10006BA78(&v205, (uint64_t)&type metadata for UnsafeRawBufferPointer);
      Data._Representation.append(contentsOf:)(*v137, v137[1]);
      sub_10006BA9C(&v205);
      v138 = v197;
      v139 = v198;
      sub_100063C8C(v197, v198);
      if ((unint64_t)v9 >= 4)
        a1 = &v199;
      else
        a1 = &v200;
      Data.append(_:)(v138, v139);
      sub_100063CD0(v138, v139);
      swift_release(v129);
      sub_100063CD0(v128, (unint64_t)v6);
      sub_100063CD0(v171, v170);
      sub_100063CD0((uint64_t)v173, v172);
      sub_100063CD0(v138, v139);
      v127 += 7;
      v126 = v169;
      v125 = v167;
      if ((char *)v166 == v169)
        goto LABEL_59;
    }
    __break(1u);
LABEL_65:
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  }
LABEL_59:
  swift_release(v125);
  if (qword_1003445F0 != -1)
    swift_once(&qword_1003445F0, sub_100128818);
  v173 = (void (*)(_QWORD *, _QWORD *))qword_100354C60;
  v140 = type metadata accessor for UUID(0);
  v205 = 0u;
  v206 = 0u;
  v207 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v140 - 8) + 56))(v162, 1, 1, v140);
  v141 = v203;
  v142 = v204;
  v174 = v203;
  v143 = v201;
  v144 = v202;
  v145 = v200;
  v172 = v200;
  v146 = v199;
  v147 = swift_allocObject(&unk_100307090, 88, 7);
  *(_QWORD *)(v147 + 16) = v168;
  *(_QWORD *)(v147 + 24) = v141;
  *(_QWORD *)(v147 + 32) = v142;
  *(_QWORD *)(v147 + 40) = v143;
  *(_QWORD *)(v147 + 48) = v144;
  *(_OWORD *)(v147 + 56) = v145;
  *(_OWORD *)(v147 + 72) = v146;
  v148 = type metadata accessor for SERequest(0);
  v149 = swift_allocObject(v148, *(unsigned int *)(v148 + 48), *(unsigned __int16 *)(v148 + 52));
  v150 = (_QWORD *)(v149 + OBJC_IVAR____TtC10seserviced9SERequest_reason);
  *v150 = 0xD000000000000017;
  v150[1] = 0x80000001002BA730;
  *(_BYTE *)(v149 + OBJC_IVAR____TtC10seserviced9SERequest_isBlockSelecting) = 1;
  *(_QWORD *)(v149 + 16) = 0;
  *(_BYTE *)(v149 + 24) = 1;
  sub_10006C218((uint64_t)&v205, v149 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken, (uint64_t *)&unk_100347750);
  *(_BYTE *)(v149 + OBJC_IVAR____TtC10seserviced9SERequest_priority) = 3;
  *(_QWORD *)(v149 + OBJC_IVAR____TtC10seserviced9SERequest_peer) = 0;
  v151 = v149 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks;
  *(_QWORD *)v151 = 0;
  *(_BYTE *)(v151 + 8) = 1;
  sub_10006C218(v162, v149 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier, (uint64_t *)&unk_1003465E0);
  v152 = v149 + OBJC_IVAR____TtC10seserviced9SERequest_sequenceNumber;
  *(_QWORD *)v152 = 0;
  *(_BYTE *)(v152 + 8) = 1;
  *(_QWORD *)(v149 + 32) = sub_10006F910;
  *(_QWORD *)(v149 + 40) = v147;
  swift_retain(v168);
  sub_100063C8C((uint64_t)v174, v142);
  sub_100063C8C(v143, v144);
  v153 = v172;
  sub_100063C8C(v172, *((unint64_t *)&v145 + 1));
  sub_100063C8C(v146, *((unint64_t *)&v146 + 1));
  sub_100127720(0, v149);
  swift_release(v149);
  sub_100063CD0(v157, v159);
  sub_100063CD0(v160, *((unint64_t *)&v160 + 1));
  sub_100063CD0(v161, v156);
  swift_bridgeObjectRelease(v158);
  sub_100063CD0(v146, *((unint64_t *)&v146 + 1));
  sub_100063CD0(v153, *((unint64_t *)&v145 + 1));
  sub_100063CD0(v143, v144);
  sub_100063CD0((uint64_t)v174, v142);
}

uint64_t sub_10006D688(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v6;

  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_type))
    return 0;
  v2 = (uint64_t *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  if (v3 >> 60 == 15)
    return 0;
  v6 = *v2;
  sub_100063C8C(*v2, v3);
  LOBYTE(a2) = sub_10017E358(v6, v3, a2);
  sub_10006B9B4(v6, v3);
  return a2 & 1;
}

void sub_10006D71C(void *a1, char a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;

  v17 = type metadata accessor for DispatchPredicate(0);
  v19 = __chkstk_darwin(v17, v18);
  if ((a2 & 1) == 0)
  {
    v20 = a1;
    sub_10006DB24(v20, 0x30647462uLL, 0xE400000000000000, a4, a5);
    sub_10006DB24(v20, 0x30726163uLL, 0xE400000000000000, a6, a7);
    sub_10006DB24(v20, 0x31726163uLL, 0xE400000000000000, a8, a9);
    __asm { BR              X10 }
  }
  v30 = Logger.logObject.getter(v19);
  v22 = static os_log_type_t.error.getter(v30, v21);
  if (os_log_type_enabled(v30, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v32 = v24;
    *(_DWORD *)v23 = 136315138;
    v25 = sub_10006B9E4();
    v26 = Error.localizedDescription.getter(&type metadata for SEError, v25);
    v28 = v27;
    v31 = sub_1001C56EC(v26, v27, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v30, v22, "Failed to get the SE %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_10006DB24(void *a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  Class isa;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t result;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  Class v52;
  Class v53;
  id v54;
  id v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  os_log_type_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  _QWORD v81[3];
  _BYTE v82[8];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v78 = a4;
  v79 = a5;
  v80 = a1;
  v77 = type metadata accessor for String.Encoding(0);
  v8 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77, v9);
  v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (uint64_t *)((char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v17 = qword_100354EE8;
  *v16 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  v18 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  v19 = (*(uint64_t (**)(_QWORD *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  static String.Encoding.ascii.getter(v19);
  v20 = String.data(using:allowLossyConversion:)(v11, 0, a2, a3);
  v22 = v21;
  v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v24 = v77;
  v23(v11, v77);
  if (v22 >> 60 == 15)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    result = sub_10006B9B4(v74, a2);
    __break(1u);
    return result;
  }
  v75 = v23;
  v76 = a2;
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006B9B4(v20, v22);
  v26 = sub_1000141E8(v80, isa, 0);

  if (v26)
  {
    v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
    a2 = v28;

    v30 = v78;
    v29 = v79;
    sub_100063C8C(v78, v79);
    sub_100063C8C(v27, a2);
    sub_10007C23C(v27, a2);
    v32 = v31;
    sub_100063CD0(v30, v29);
    sub_100063CD0(v27, a2);
    if ((v32 & 1) != 0)
      return sub_100063CD0(v27, a2);
  }
  else
  {
    v35 = v78;
    v34 = v79;
    sub_100063C8C(v78, v79);
    a2 = 0xF000000000000000;
    sub_10006B9B4(0, 0xF000000000000000);
    sub_10006B9B4(v35, v34);
    v27 = 0;
  }
  v36 = v5 + OBJC_IVAR____TtC10seserviced10AlishaLPEM_logger;
  v37 = swift_bridgeObjectRetain_n(a3, 2);
  v38 = Logger.logObject.getter(v37);
  v42 = static os_log_type_t.info.getter(v38, v39, v40, v41);
  v43 = os_log_type_enabled(v38, v42);
  v73 = v36;
  v74 = v27;
  if (v43)
  {
    v72 = a2;
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = swift_slowAlloc(32, -1);
    v85 = v45;
    *(_DWORD *)v44 = 136315138;
    swift_bridgeObjectRetain(a3);
    v46 = v76;
    v83 = sub_1001C56EC(v76, a3, &v85);
    a2 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v44 + 4, v44 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v38, v42, "Updating Sunsprite '%s'", v44, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    v47 = v44;
    v24 = v77;
    swift_slowDealloc(v47, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(a3, 2);

    v46 = v76;
  }
  static String.Encoding.ascii.getter(v48);
  v49 = String.data(using:allowLossyConversion:)(v11, 0, v46, a3);
  v51 = v50;
  v75(v11, v24);
  if (v51 >> 60 == 15)
    goto LABEL_21;
  v52 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006B9B4(v49, v51);
  v53 = Data._bridgeToObjectiveC()().super.isa;
  v54 = sub_100013FC4(v80, v52, v53);

  if (!v54)
    return sub_10006B9B4(v74, a2);
  swift_bridgeObjectRetain_n(a3, 2);
  v55 = v54;
  v56 = Logger.logObject.getter(v55);
  v60 = static os_log_type_t.info.getter(v56, v57, v58, v59);
  if (os_log_type_enabled(v56, v60))
  {
    v61 = swift_slowAlloc(22, -1);
    v62 = a2;
    v63 = swift_slowAlloc(64, -1);
    v85 = v63;
    *(_DWORD *)v61 = 136315394;
    swift_bridgeObjectRetain(a3);
    v83 = sub_1001C56EC(v76, a3, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v61 + 4, v61 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v61 + 12) = 2080;
    swift_getErrorValue(v55, v82, v81);
    v64 = Error.localizedDescription.getter(v81[1], v81[2]);
    v66 = v65;
    v83 = sub_1001C56EC(v64, v65, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v61 + 14, v61 + 22);

    swift_bridgeObjectRelease(v66);
    _os_log_impl((void *)&_mh_execute_header, v56, v60, "Failed to write to Sunsprite '%s' %s", (uint8_t *)v61, 0x16u);
    swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
    v67 = v63;
    a2 = v62;
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v61, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }

  v68 = sub_10006B828();
  v69 = swift_allocError(&type metadata for DSKError, v68, 0, 0);
  *v70 = 0;
  swift_willThrow(v69);

  return sub_10006B9B4(v74, a2);
}

uint64_t sub_10006E158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0 + OBJC_IVAR____TtC10seserviced10AlishaLPEM_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__latency + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__latency + 24));
  swift_bridgeObjectRelease(v3);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__btScanTimer + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__btScanTimer + 24));
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__isLoggingEnabled + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__isLoggingEnabled + 24));
  swift_bridgeObjectRelease(v5);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10006E208()
{
  return type metadata accessor for AlishaLPEM(0);
}

uint64_t type metadata accessor for AlishaLPEM(uint64_t a1)
{
  uint64_t result;

  result = qword_100344D38;
  if (!qword_100344D38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AlishaLPEM);
  return result;
}

uint64_t sub_10006E24C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\"";
    v4[2] = "\"";
    v4[3] = "\"";
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10006E2C4(_QWORD *a1, uint64_t (*a2)(_QWORD))
{
  return a2(*a1) & 1;
}

uint64_t sub_10006E2EC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006E310(uint64_t a1)
{
  uint64_t v1;

  return sub_10006D688(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10006E318()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006E33C(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1) & 1;
}

Swift::Int sub_10006E364(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = (_QWORD *)sub_10006F94C(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_10006E3CC(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_10006E3CC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  Swift::Int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  Swift::Int v53;
  _QWORD *v54;
  Swift::Int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  char v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  Swift::Int v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  Swift::Int v133;
  Swift::Int v134;
  Swift::Int v135;
  _QWORD *v136;
  char *__dst;
  uint64_t v138;
  Swift::Int v139;
  Swift::Int v140;
  Swift::Int v141;
  Swift::Int v142;
  uint64_t v143;
  unint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;

  v2 = v1;
  v4 = a1[1];
  result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_133;
    if (v4)
      return sub_10006EE48(0, v4, 1, a1);
    return result;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_141;
  v128 = result;
  v126 = a1;
  if (v4 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v4 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
      v12 = (char *)_swiftEmptyArrayStorage;
LABEL_99:
      v132 = v9;
      if (v13 >= 2)
      {
        v120 = *v126;
        do
        {
          v121 = v13 - 2;
          if (v13 < 2)
            goto LABEL_128;
          if (!v120)
            goto LABEL_140;
          v122 = *(_QWORD *)&v12[16 * v121 + 32];
          v123 = *(_QWORD *)&v12[16 * v13 + 24];
          sub_10006F070((char *)(v120 + 56 * v122), (char *)(v120 + 56 * *(_QWORD *)&v12[16 * v13 + 16]), v120 + 56 * v123, __dst);
          if (v2)
            break;
          if (v123 < v122)
            goto LABEL_129;
          if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
            v12 = sub_10006F84C((uint64_t)v12);
          if (v121 >= *((_QWORD *)v12 + 2))
            goto LABEL_130;
          v124 = &v12[16 * v121 + 32];
          *(_QWORD *)v124 = v122;
          *((_QWORD *)v124 + 1) = v123;
          v125 = *((_QWORD *)v12 + 2);
          if (v13 > v125)
            goto LABEL_131;
          memmove(&v12[16 * v13 + 16], &v12[16 * v13 + 32], 16 * (v125 - v13));
          *((_QWORD *)v12 + 2) = v125 - 1;
          v13 = v125 - 1;
        }
        while (v125 > 2);
      }
LABEL_110:
      swift_bridgeObjectRelease(v12);
      v132[2] = 0;
      return swift_bridgeObjectRelease(v132);
    }
  }
  else
  {
    v7 = v6 >> 1;
    v8 = sub_100063D3C(&qword_100344DD8);
    v9 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    v9[2] = v7;
    __dst = (char *)(v9 + 4);
  }
  v132 = v9;
  v10 = 0;
  v11 = *a1;
  v127 = *a1 + 80;
  v12 = (char *)_swiftEmptyArrayStorage;
  v134 = v4;
  v138 = *a1;
  while (1)
  {
    v14 = v10;
    v15 = v10 + 1;
    v135 = v10;
    if (v10 + 1 < v4)
    {
      v129 = v12;
      v130 = v2;
      v16 = (uint64_t *)(v11 + 56 * v15);
      v17 = *v16;
      v18 = v16[1];
      v19 = v16[2];
      v20 = v16[3];
      v21 = v16[5];
      v165 = v16[4];
      v162 = v21;
      v22 = v16[6];
      v23 = (uint64_t *)(v11 + 56 * v10);
      v25 = *v23;
      v24 = v23[1];
      v26 = v23[2];
      v27 = v23[4];
      v155 = v23[5];
      v149 = v23[3];
      v152 = v23[6];
      v158 = *v23 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      v161 = v17 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      swift_retain(v17);
      sub_100063C8C(v18, v19);
      sub_100063C8C(v20, v165);
      v28 = v21;
      v29 = v22;
      sub_100063C8C(v28, v22);
      swift_retain(v25);
      sub_100063C8C(v24, v26);
      sub_100063C8C(v149, v27);
      sub_100063C8C(v155, v152);
      v145 = static UUID.< infix(_:_:)(v161, v158);
      swift_release(v25);
      sub_100063CD0(v24, v26);
      v14 = v135;
      sub_100063CD0(v149, v27);
      v4 = v134;
      sub_100063CD0(v155, v152);
      swift_release(v17);
      sub_100063CD0(v18, v19);
      sub_100063CD0(v20, v165);
      sub_100063CD0(v162, v29);
      v15 = v135 + 2;
      if (v135 + 2 < v134)
      {
        v30 = (uint64_t *)(v127 + 56 * v135);
        while (1)
        {
          v139 = v15;
          v32 = v30[4];
          v31 = v30[5];
          v34 = v30[6];
          v33 = v30[7];
          v35 = v30[9];
          v164 = v30[8];
          v166 = v30[10];
          v37 = *(v30 - 3);
          v36 = *(v30 - 2);
          v39 = *(v30 - 1);
          v38 = *v30;
          v153 = v30[1];
          v156 = v37 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
          v159 = v32 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
          v147 = v30[2];
          v150 = v30[3];
          swift_retain(v32);
          sub_100063C8C(v31, v34);
          sub_100063C8C(v33, v164);
          sub_100063C8C(v35, v166);
          swift_retain(v37);
          sub_100063C8C(v36, v39);
          sub_100063C8C(v38, v153);
          sub_100063C8C(v147, v150);
          LODWORD(v159) = static UUID.< infix(_:_:)(v159, v156);
          swift_release(v37);
          sub_100063CD0(v36, v39);
          sub_100063CD0(v38, v153);
          sub_100063CD0(v147, v150);
          swift_release(v32);
          sub_100063CD0(v31, v34);
          sub_100063CD0(v33, v164);
          sub_100063CD0(v35, v166);
          if (((v145 ^ v159) & 1) != 0)
            break;
          v15 = v139 + 1;
          v30 += 7;
          v4 = v134;
          if (v134 == v139 + 1)
          {
            v15 = v134;
            goto LABEL_22;
          }
        }
        v4 = v134;
        v15 = v139;
LABEL_22:
        v14 = v135;
      }
      v12 = v129;
      v2 = v130;
      v11 = v138;
      if ((v145 & 1) != 0)
      {
        if (v15 < v14)
          goto LABEL_134;
        if (v14 < v15)
        {
          v40 = 56 * v15;
          v41 = v15;
          v42 = v14;
          v43 = 56 * v14;
          do
          {
            if (v42 != --v41)
            {
              if (!v138)
                goto LABEL_139;
              v44 = v138 + v43;
              v45 = *(_QWORD *)(v138 + v43);
              v46 = v138 + v40;
              v47 = *(_OWORD *)(v138 + v43 + 8);
              v48 = *(_OWORD *)(v138 + v43 + 24);
              v49 = *(_OWORD *)(v138 + v43 + 40);
              v50 = *(_OWORD *)(v138 + v40 - 40);
              v51 = *(_OWORD *)(v138 + v40 - 24);
              v52 = *(_OWORD *)(v138 + v40 - 56);
              *(_QWORD *)(v44 + 48) = *(_QWORD *)(v138 + v40 - 8);
              *(_OWORD *)(v44 + 16) = v50;
              *(_OWORD *)(v44 + 32) = v51;
              *(_OWORD *)v44 = v52;
              *(_QWORD *)(v46 - 56) = v45;
              *(_OWORD *)(v46 - 48) = v47;
              *(_OWORD *)(v46 - 32) = v48;
              *(_OWORD *)(v46 - 16) = v49;
            }
            ++v42;
            v40 -= 56;
            v43 += 56;
          }
          while (v42 < v41);
        }
      }
    }
    if (v15 < v4)
    {
      if (__OFSUB__(v15, v14))
        goto LABEL_132;
      if (v15 - v14 < v128)
        break;
    }
LABEL_50:
    if (v15 < v14)
      goto LABEL_127;
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_10006F5F0(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v70 = *((_QWORD *)v12 + 2);
    v69 = *((_QWORD *)v12 + 3);
    v13 = v70 + 1;
    v11 = v138;
    v141 = v15;
    if (v70 >= v69 >> 1)
    {
      v119 = sub_10006F5F0((char *)(v69 > 1), v70 + 1, 1, v12);
      v11 = v138;
      v12 = v119;
    }
    *((_QWORD *)v12 + 2) = v13;
    v71 = v12 + 32;
    v72 = &v12[16 * v70 + 32];
    *(_QWORD *)v72 = v14;
    *((_QWORD *)v72 + 1) = v141;
    if (v70)
    {
      while (1)
      {
        v73 = v13 - 1;
        if (v13 >= 4)
        {
          v78 = &v71[16 * v13];
          v79 = *((_QWORD *)v78 - 8);
          v80 = *((_QWORD *)v78 - 7);
          v84 = __OFSUB__(v80, v79);
          v81 = v80 - v79;
          if (v84)
            goto LABEL_116;
          v83 = *((_QWORD *)v78 - 6);
          v82 = *((_QWORD *)v78 - 5);
          v84 = __OFSUB__(v82, v83);
          v76 = v82 - v83;
          v77 = v84;
          if (v84)
            goto LABEL_117;
          v85 = v13 - 2;
          v86 = &v71[16 * v13 - 32];
          v88 = *(_QWORD *)v86;
          v87 = *((_QWORD *)v86 + 1);
          v84 = __OFSUB__(v87, v88);
          v89 = v87 - v88;
          if (v84)
            goto LABEL_119;
          v84 = __OFADD__(v76, v89);
          v90 = v76 + v89;
          if (v84)
            goto LABEL_122;
          if (v90 >= v81)
          {
            v108 = &v71[16 * v73];
            v110 = *(_QWORD *)v108;
            v109 = *((_QWORD *)v108 + 1);
            v84 = __OFSUB__(v109, v110);
            v111 = v109 - v110;
            if (v84)
              goto LABEL_126;
            v101 = v76 < v111;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v102 = *((_QWORD *)v12 + 4);
            v103 = *((_QWORD *)v12 + 5);
            v84 = __OFSUB__(v103, v102);
            v95 = v103 - v102;
            v96 = v84;
            goto LABEL_81;
          }
          v75 = *((_QWORD *)v12 + 4);
          v74 = *((_QWORD *)v12 + 5);
          v84 = __OFSUB__(v74, v75);
          v76 = v74 - v75;
          v77 = v84;
        }
        if ((v77 & 1) != 0)
          goto LABEL_118;
        v85 = v13 - 2;
        v91 = &v71[16 * v13 - 32];
        v93 = *(_QWORD *)v91;
        v92 = *((_QWORD *)v91 + 1);
        v94 = __OFSUB__(v92, v93);
        v95 = v92 - v93;
        v96 = v94;
        if (v94)
          goto LABEL_121;
        v97 = &v71[16 * v73];
        v99 = *(_QWORD *)v97;
        v98 = *((_QWORD *)v97 + 1);
        v84 = __OFSUB__(v98, v99);
        v100 = v98 - v99;
        if (v84)
          goto LABEL_124;
        if (__OFADD__(v95, v100))
          goto LABEL_125;
        if (v95 + v100 >= v76)
        {
          v101 = v76 < v100;
LABEL_87:
          if (v101)
            v73 = v85;
          goto LABEL_89;
        }
LABEL_81:
        if ((v96 & 1) != 0)
          goto LABEL_120;
        v104 = &v71[16 * v73];
        v106 = *(_QWORD *)v104;
        v105 = *((_QWORD *)v104 + 1);
        v84 = __OFSUB__(v105, v106);
        v107 = v105 - v106;
        if (v84)
          goto LABEL_123;
        if (v107 < v95)
          goto LABEL_14;
LABEL_89:
        v112 = v73 - 1;
        if (v73 - 1 >= v13)
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        if (!v11)
          goto LABEL_138;
        v113 = v12;
        v114 = &v71[16 * v112];
        v115 = *(_QWORD *)v114;
        v116 = &v71[16 * v73];
        v117 = *((_QWORD *)v116 + 1);
        sub_10006F070((char *)(v11 + 56 * *(_QWORD *)v114), (char *)(v11 + 56 * *(_QWORD *)v116), v11 + 56 * v117, __dst);
        if (v2)
        {
          v12 = v113;
          goto LABEL_110;
        }
        if (v117 < v115)
          goto LABEL_113;
        if (v73 > *((_QWORD *)v113 + 2))
          goto LABEL_114;
        *(_QWORD *)v114 = v115;
        *(_QWORD *)&v71[16 * v112 + 8] = v117;
        v118 = *((_QWORD *)v113 + 2);
        if (v73 >= v118)
          goto LABEL_115;
        v12 = v113;
        v13 = v118 - 1;
        memmove(&v71[16 * v73], v116 + 16, 16 * (v118 - 1 - v73));
        *((_QWORD *)v12 + 2) = v118 - 1;
        v11 = v138;
        if (v118 <= 2)
          goto LABEL_14;
      }
    }
    v13 = 1;
LABEL_14:
    v4 = v134;
    v10 = v141;
    v9 = v132;
    if (v141 >= v134)
      goto LABEL_99;
  }
  if (__OFADD__(v14, v128))
    goto LABEL_135;
  if (v14 + v128 >= v4)
    v53 = v4;
  else
    v53 = v14 + v128;
  if (v53 >= v14)
  {
    if (v15 != v53)
    {
      v131 = v2;
      v54 = (_QWORD *)(v11 + 56 * v15);
      v133 = v53;
      do
      {
        v56 = (uint64_t *)(v11 + 56 * v15);
        v57 = *v56;
        v58 = v56[1];
        v59 = v56[2];
        v60 = v56[3];
        v61 = v56[4];
        v62 = v56[5];
        v63 = v56[6];
        v136 = v54;
        v140 = v15;
        while (1)
        {
          v64 = *(v54 - 7);
          v142 = v14;
          v143 = *(v54 - 6);
          v65 = *(v54 - 5);
          v144 = *(v54 - 3);
          v146 = *(v54 - 4);
          v151 = *(v54 - 2);
          v148 = *(v54 - 1);
          v154 = v64 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
          v157 = v57 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
          v160 = v57;
          v66 = v59;
          v167 = v59;
          v163 = v63;
          v67 = v63;
          swift_retain(v57);
          sub_100063C8C(v58, v66);
          sub_100063C8C(v60, v61);
          sub_100063C8C(v62, v67);
          swift_retain(v64);
          sub_100063C8C(v143, v65);
          sub_100063C8C(v146, v144);
          sub_100063C8C(v151, v148);
          LOBYTE(v157) = static UUID.< infix(_:_:)(v157, v154);
          swift_release(v64);
          sub_100063CD0(v143, v65);
          sub_100063CD0(v146, v144);
          sub_100063CD0(v151, v148);
          swift_release(v160);
          sub_100063CD0(v58, v167);
          sub_100063CD0(v60, v61);
          sub_100063CD0(v62, v163);
          if ((v157 & 1) == 0)
            break;
          v11 = v138;
          v55 = v140;
          if (!v138)
            goto LABEL_137;
          v57 = *v54;
          v58 = v54[1];
          v59 = v54[2];
          v60 = v54[3];
          v61 = v54[4];
          v62 = v54[5];
          v63 = v54[6];
          v68 = *(_OWORD *)(v54 - 5);
          *(_OWORD *)v54 = *(_OWORD *)(v54 - 7);
          *((_OWORD *)v54 + 1) = v68;
          *((_OWORD *)v54 + 2) = *(_OWORD *)(v54 - 3);
          v54[6] = *(v54 - 1);
          *(v54 - 6) = v58;
          *(v54 - 5) = v59;
          *(v54 - 4) = v60;
          *(v54 - 3) = v61;
          *(v54 - 2) = v62;
          *(v54 - 1) = v63;
          v14 = v142 + 1;
          *(v54 - 7) = v57;
          v54 -= 7;
          if (v140 == v142 + 1)
            goto LABEL_43;
        }
        v11 = v138;
        v55 = v140;
LABEL_43:
        v15 = v55 + 1;
        v14 = v135;
        v54 = v136 + 7;
      }
      while (v15 != v133);
      v15 = v133;
      v2 = v131;
    }
    goto LABEL_50;
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_10006EE48(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v17 = result;
  if (a3 != a2)
  {
    v19 = *a4;
    v4 = (_QWORD *)(*a4 + 56 * a3);
LABEL_5:
    v5 = (uint64_t *)(v19 + 56 * a3);
    v6 = *v5;
    v7 = v5[1];
    v8 = v5[2];
    v9 = v5[3];
    v11 = v5[4];
    v10 = v5[5];
    v12 = v5[6];
    v18 = v4;
    v20 = a3;
    v21 = v17;
    while (1)
    {
      v13 = *(v4 - 7);
      v14 = *(v4 - 5);
      v22 = *(v4 - 6);
      v23 = *(v4 - 3);
      v26 = *(v4 - 2);
      v24 = *(v4 - 4);
      v25 = *(v4 - 1);
      v27 = v13 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      v28 = v6 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      v29 = v6;
      swift_retain(v6);
      sub_100063C8C(v7, v8);
      sub_100063C8C(v9, v11);
      sub_100063C8C(v10, v12);
      swift_retain(v13);
      sub_100063C8C(v22, v14);
      sub_100063C8C(v24, v23);
      sub_100063C8C(v26, v25);
      LOBYTE(v28) = static UUID.< infix(_:_:)(v28, v27);
      swift_release(v13);
      sub_100063CD0(v22, v14);
      sub_100063CD0(v24, v23);
      sub_100063CD0(v26, v25);
      swift_release(v29);
      sub_100063CD0(v7, v8);
      sub_100063CD0(v9, v11);
      result = sub_100063CD0(v10, v12);
      if ((v28 & 1) == 0)
      {
LABEL_4:
        a3 = v20 + 1;
        v4 = v18 + 7;
        if (v20 + 1 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v19)
        break;
      v6 = *v4;
      v7 = v4[1];
      v8 = v4[2];
      v9 = v4[3];
      v11 = v4[4];
      v10 = v4[5];
      v12 = v4[6];
      v15 = *(_OWORD *)(v4 - 5);
      *(_OWORD *)v4 = *(_OWORD *)(v4 - 7);
      *((_OWORD *)v4 + 1) = v15;
      *((_OWORD *)v4 + 2) = *(_OWORD *)(v4 - 3);
      v4[6] = *(v4 - 1);
      *(v4 - 6) = v7;
      *(v4 - 5) = v8;
      *(v4 - 4) = v9;
      *(v4 - 3) = v11;
      *(v4 - 2) = v10;
      *(v4 - 1) = v12;
      *(v4 - 7) = v6;
      v4 -= 7;
      if (v20 == ++v21)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10006F070(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v5;
  char *v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t result;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  const void *v77;
  char *v78;

  v4 = __dst;
  v5 = a2;
  v6 = __src;
  v7 = a2 - __src;
  v8 = (a2 - __src) / 56;
  v9 = a3 - (_QWORD)a2;
  v10 = (uint64_t)(a3 - (_QWORD)a2) / 56;
  v78 = __src;
  v77 = __dst;
  if (v8 >= v10)
  {
    if (v9 < -55)
      goto LABEL_43;
    if (__dst != a2 || &a2[56 * v10] <= __dst)
      memmove(__dst, a2, 56 * v10);
    v29 = &v4[56 * v10];
    v76 = v29;
    v78 = v5;
    if (v6 >= v5 || v9 < 56)
      goto LABEL_42;
    v30 = a3 - 56;
    v31 = v5;
    v70 = v4;
    v68 = v6;
    while (1)
    {
      v65 = v29;
      v75 = v5;
      v32 = *((_QWORD *)v29 - 6);
      v33 = v29 - 56;
      v66 = (char *)(v30 + 56);
      v35 = *((_QWORD *)v29 - 5);
      v34 = *((_QWORD *)v29 - 4);
      v64 = *((_QWORD *)v29 - 7);
      v36 = *((_QWORD *)v29 - 2);
      v73 = *((_QWORD *)v29 - 3);
      v71 = *((_QWORD *)v29 - 1);
      v37 = *((_QWORD *)v31 - 7);
      v38 = *((_QWORD *)v31 - 6);
      v31 -= 56;
      v39 = *((_QWORD *)v31 + 2);
      v53 = *((_QWORD *)v31 + 4);
      v55 = *((_QWORD *)v31 + 3);
      v57 = v37 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      v59 = v64 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      v51 = *((_QWORD *)v31 + 5);
      v52 = *((_QWORD *)v31 + 6);
      swift_retain(v64);
      sub_100063C8C(v32, v35);
      sub_100063C8C(v34, v73);
      sub_100063C8C(v36, v71);
      swift_retain(v37);
      sub_100063C8C(v38, v39);
      sub_100063C8C(v55, v53);
      sub_100063C8C(v51, v52);
      LOBYTE(v59) = static UUID.< infix(_:_:)(v59, v57);
      swift_release(v37);
      sub_100063CD0(v38, v39);
      sub_100063CD0(v55, v53);
      sub_100063CD0(v51, v52);
      swift_release(v64);
      sub_100063CD0(v32, v35);
      sub_100063CD0(v34, v73);
      sub_100063CD0(v36, v71);
      if ((v59 & 1) != 0)
      {
        v29 = v65;
        if (v66 != v75 || v30 >= (unint64_t)v75)
        {
          v40 = *(_OWORD *)v31;
          v41 = *((_OWORD *)v31 + 1);
          v42 = *((_OWORD *)v31 + 2);
          *(_QWORD *)(v30 + 48) = *((_QWORD *)v31 + 6);
          *(_OWORD *)(v30 + 16) = v41;
          *(_OWORD *)(v30 + 32) = v42;
          *(_OWORD *)v30 = v40;
        }
        v78 = v31;
      }
      else
      {
        v76 = v33;
        v31 = v75;
        if (v66 >= v65 && v30 < (unint64_t)v65)
        {
          v43 = v70;
          if (v66 != v65)
          {
            v44 = *(_OWORD *)v33;
            v45 = *((_OWORD *)v33 + 1);
            v46 = *((_OWORD *)v33 + 2);
            *(_QWORD *)(v30 + 48) = *((_QWORD *)v33 + 6);
            *(_OWORD *)(v30 + 16) = v45;
            *(_OWORD *)(v30 + 32) = v46;
            *(_OWORD *)v30 = v44;
          }
          v29 = v33;
          goto LABEL_38;
        }
        v47 = *(_OWORD *)v33;
        v48 = *((_OWORD *)v33 + 1);
        v49 = *((_OWORD *)v33 + 2);
        *(_QWORD *)(v30 + 48) = *((_QWORD *)v33 + 6);
        *(_OWORD *)(v30 + 16) = v48;
        *(_OWORD *)(v30 + 32) = v49;
        *(_OWORD *)v30 = v47;
        v29 = v33;
      }
      v43 = v70;
LABEL_38:
      if (v31 > v68)
      {
        v30 -= 56;
        v5 = v31;
        if (v29 > v43)
          continue;
      }
      goto LABEL_42;
    }
  }
  if (v7 >= -55)
  {
    if (__dst != __src || &__src[56 * v8] <= __dst)
      memmove(__dst, __src, 56 * v8);
    v54 = &v4[56 * v8];
    v76 = v54;
    if ((unint64_t)v5 < a3 && v7 >= 56)
    {
      do
      {
        v74 = v5;
        v12 = *(_QWORD *)v5;
        v11 = *((_QWORD *)v5 + 1);
        v67 = v6;
        v13 = *((_QWORD *)v5 + 2);
        v14 = *((_QWORD *)v5 + 3);
        v15 = *((_QWORD *)v5 + 5);
        v72 = *((_QWORD *)v5 + 4);
        v16 = *((_QWORD *)v5 + 6);
        v18 = *(_QWORD *)v4;
        v17 = *((_QWORD *)v4 + 1);
        v19 = *((_QWORD *)v4 + 2);
        v58 = *((_QWORD *)v4 + 4);
        v60 = *((_QWORD *)v4 + 3);
        v61 = *((_QWORD *)v4 + 5);
        v62 = *(_QWORD *)v4 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        v63 = v12 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        v69 = v4;
        v20 = *((_QWORD *)v4 + 6);
        swift_retain(v12);
        sub_100063C8C(v11, v13);
        sub_100063C8C(v14, v72);
        sub_100063C8C(v15, v16);
        swift_retain(v18);
        sub_100063C8C(v17, v19);
        sub_100063C8C(v60, v58);
        sub_100063C8C(v61, v20);
        LOBYTE(v63) = static UUID.< infix(_:_:)(v63, v62);
        swift_release(v18);
        sub_100063CD0(v17, v19);
        sub_100063CD0(v60, v58);
        sub_100063CD0(v61, v20);
        swift_release(v12);
        sub_100063CD0(v11, v13);
        sub_100063CD0(v14, v72);
        sub_100063CD0(v15, v16);
        if ((v63 & 1) != 0)
        {
          v21 = v74 + 56;
          v22 = v67;
          v4 = v69;
          if (v67 < v74 || v67 >= v21 || v67 != v74)
          {
            v23 = *(_OWORD *)v74;
            v24 = *((_OWORD *)v74 + 1);
            v25 = *((_OWORD *)v74 + 2);
            *((_QWORD *)v67 + 6) = *((_QWORD *)v74 + 6);
            *((_OWORD *)v67 + 1) = v24;
            *((_OWORD *)v67 + 2) = v25;
            *(_OWORD *)v67 = v23;
          }
        }
        else
        {
          v22 = v67;
          if (v67 != v69)
          {
            v26 = *(_OWORD *)v69;
            v27 = *((_OWORD *)v69 + 1);
            v28 = *((_OWORD *)v69 + 2);
            *((_QWORD *)v67 + 6) = *((_QWORD *)v69 + 6);
            *((_OWORD *)v67 + 1) = v27;
            *((_OWORD *)v67 + 2) = v28;
            *(_OWORD *)v67 = v26;
          }
          v4 = v69 + 56;
          v77 = v69 + 56;
          v21 = v74;
        }
        v6 = v22 + 56;
        if (v4 >= v54)
          break;
        v5 = v21;
      }
      while ((unint64_t)v21 < a3);
      v78 = v6;
    }
LABEL_42:
    sub_10006F6E8((void **)&v78, &v77, &v76);
    return 1;
  }
LABEL_43:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_10006F5F0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100063D3C(&qword_100344DE0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10006F6E8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -56)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 56;
    if (result != v3 || result >= &v3[56 * v6])
      return (char *)memmove(result, v3, 56 * v6);
  }
  return result;
}

char *sub_10006F7A8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  else
    v5 = v4 + 1;
  if (v4 <= -2)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 1;
    if (result != v3 || result >= &v3[2 * v7])
      return (char *)memmove(result, v3, 2 * v7);
  }
  return result;
}

char *sub_10006F84C(uint64_t a1)
{
  return sub_10006F5F0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10006F860@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10009B4BC(*(uint64_t (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_10006F87C(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10006F8A4(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10006F8CC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_100063CD0(v0[3], v0[4]);
  sub_100063CD0(v0[5], v0[6]);
  sub_100063CD0(v0[7], v0[8]);
  sub_100063CD0(v0[9], v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

void sub_10006F910(void *a1, char a2)
{
  uint64_t v2;

  sub_10006D71C(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
}

uint64_t sub_10006F94C(_QWORD *a1)
{
  return sub_100192F00(0, a1[2], 0, a1);
}

uint64_t sub_10006F960(uint64_t a1)
{
  return sub_100194180(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void sub_10006F978(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  _QWORD v10[8];
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v12 = a5;
  v10[2] = a4;
  v10[3] = a1;
  v10[4] = a2;
  v10[5] = a3;
  v10[6] = sub_100071AB4;
  v10[7] = &v11;
  sub_100071AEC();
  if (qword_1003447A8 != -1)
    swift_once(&qword_1003447A8, sub_1001EEDF8);
  static OS_dispatch_queue.getSpecific<A>(key:)(&v13, qword_10034A718);
  if ((v14 & 1) != 0 || v13 != 0x534F534543555245)
  {
    v9 = (id)sub_100050680(a4);
    OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100071ACC, v10, &type metadata for () + 1);

  }
  else
  {
    sub_10006FAB4(a4, 1, a1, a2, a3);
  }
}

void sub_10006FAB4(uint64_t a1, char a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  __int16 v11;
  _QWORD v12[5];
  __int16 v13;
  char v14;
  __int16 v15;
  _BYTE v16[11];
  uint64_t v17;

  if (a4 >> 60 != 15)
    __asm { BR              X11 }
  if (__OFADD__(2, 2))
  {
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(a5 + 16);
    v7 = v6 + 4;
    if (!__OFADD__(4, v6))
    {
      if (!__OFADD__(v7, 9))
      {
        *(_QWORD *)&v16[3] = sub_10007C71C(v6 + 13);
        v17 = v8;
        v13 = -20608;
        if ((a2 & 1) != 0)
          v9 = 64;
        else
          v9 = 16;
        v14 = v9;
        v15 = 2;
        Data._Representation.append(contentsOf:)(&v13, v16);
        if ((v7 & 0x8000000000000000) != 0)
        {
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
        }
        else
        {
          if (v7 < 0x10000)
          {
            v11 = bswap32(v7) >> 16;
            v12[3] = &type metadata for UnsafeRawBufferPointer;
            v12[4] = &protocol witness table for UnsafeRawBufferPointer;
            v12[0] = &v11;
            v12[1] = v12;
            v10 = sub_10006BA78(v12, (uint64_t)&type metadata for UnsafeRawBufferPointer);
            Data._Representation.append(contentsOf:)(*v10, v10[1]);
            sub_10006BA9C(v12);
            __asm { BR              X12 }
          }
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
        }
        __break(1u);
        JUMPOUT(0x10007045CLL);
      }
LABEL_14:
      __break(1u);
      JUMPOUT(0x1000703C8);
    }
  }
  __break(1u);
  goto LABEL_14;
}

void sub_100070514(uint64_t a1, char a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  __int16 v11;
  _QWORD v12[5];
  __int16 v13;
  char v14;
  __int16 v15;
  _BYTE v16[11];
  uint64_t v17;

  if (a4 >> 60 != 15)
    __asm { BR              X11 }
  if (__OFADD__(2, 2))
  {
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(a5 + 16);
    v7 = v6 + 4;
    if (!__OFADD__(4, v6))
    {
      if (!__OFADD__(v7, 9))
      {
        *(_QWORD *)&v16[3] = sub_10007C71C(v6 + 13);
        v17 = v8;
        v13 = -20608;
        if ((a2 & 1) != 0)
          v9 = 64;
        else
          v9 = 16;
        v14 = v9;
        v15 = 2;
        Data._Representation.append(contentsOf:)(&v13, v16);
        if ((v7 & 0x8000000000000000) != 0)
        {
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
        }
        else
        {
          if (v7 < 0x10000)
          {
            v11 = bswap32(v7) >> 16;
            v12[3] = &type metadata for UnsafeRawBufferPointer;
            v12[4] = &protocol witness table for UnsafeRawBufferPointer;
            v12[0] = &v11;
            v12[1] = v12;
            v10 = sub_10006BA78(v12, (uint64_t)&type metadata for UnsafeRawBufferPointer);
            Data._Representation.append(contentsOf:)(*v10, v10[1]);
            sub_10006BA9C(v12);
            __asm { BR              X12 }
          }
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
        }
        __break(1u);
        JUMPOUT(0x100070D18);
      }
LABEL_14:
      __break(1u);
      JUMPOUT(0x100070C84);
    }
  }
  __break(1u);
  goto LABEL_14;
}

void sub_100070DB0(uint64_t a1, char a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  __int16 v11;
  _QWORD v12[5];
  __int16 v13;
  char v14;
  __int16 v15;
  _BYTE v16[11];
  uint64_t v17;

  if (a4 >> 60 != 15)
    __asm { BR              X11 }
  if (__OFADD__(2, 2))
  {
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(a5 + 16);
    v7 = v6 + 4;
    if (!__OFADD__(4, v6))
    {
      if (!__OFADD__(v7, 9))
      {
        *(_QWORD *)&v16[3] = sub_10007C71C(v6 + 13);
        v17 = v8;
        v13 = -20608;
        if ((a2 & 1) != 0)
          v9 = 64;
        else
          v9 = 16;
        v14 = v9;
        v15 = 2;
        Data._Representation.append(contentsOf:)(&v13, v16);
        if ((v7 & 0x8000000000000000) != 0)
        {
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
        }
        else
        {
          if (v7 < 0x10000)
          {
            v11 = bswap32(v7) >> 16;
            v12[3] = &type metadata for UnsafeRawBufferPointer;
            v12[4] = &protocol witness table for UnsafeRawBufferPointer;
            v12[0] = &v11;
            v12[1] = v12;
            v10 = sub_10006BA78(v12, (uint64_t)&type metadata for UnsafeRawBufferPointer);
            Data._Representation.append(contentsOf:)(*v10, v10[1]);
            sub_10006BA9C(v12);
            __asm { BR              X12 }
          }
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
        }
        __break(1u);
        JUMPOUT(0x10007159CLL);
      }
LABEL_14:
      __break(1u);
      JUMPOUT(0x100071508);
    }
  }
  __break(1u);
  goto LABEL_14;
}

void sub_100071634(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  id v9;
  _QWORD v10[8];
  uint64_t v11;
  char v12;

  v10[3] = a1;
  v10[4] = a2;
  v10[5] = a3;
  v10[6] = a4;
  v10[7] = a5;
  sub_100071AEC();
  if (qword_1003447A8 != -1)
    swift_once(&qword_1003447A8, sub_1001EEDF8);
  static OS_dispatch_queue.getSpecific<A>(key:)(&v11, qword_10034A718);
  if ((v12 & 1) != 0 || v11 != 0x534F534543555245)
  {
    v9 = (id)sub_100050680(v5);
    OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100071BF8, v10, &type metadata for () + 1);

  }
  else
  {
    sub_100070DB0(v5, 0, a1, a2, a3);
  }
}

BOOL sub_100071768(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10007177C()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000717C0()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000717E8()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unsigned __int8 *sub_100071828@<X0>(unsigned __int8 *result@<X0>, char *a2@<X8>)
{
  int v2;
  char v3;
  BOOL v4;
  BOOL v5;
  char v6;
  BOOL v7;

  v2 = *result;
  if (v2 == 79)
    v3 = 79;
  else
    v3 = 0;
  v4 = v2 != 79;
  v5 = v2 == 132;
  if (v2 == 132)
    v6 = -124;
  else
    v6 = v3;
  v7 = !v5 && v4;
  *a2 = v6;
  a2[1] = v7;
  return result;
}

void sub_100071858(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_100071864(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v7;
  uint64_t result;
  unsigned __int8 *v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = *(_QWORD *)(a3 + 16);
  if (v7)
  {
    v15 = a4;
    v16 = a5;
    result = sub_100192988(0, v7, 0);
    v10 = (unsigned __int8 *)(a3 + 32);
    while (1)
    {
      v12 = *v10++;
      v11 = v12;
      if (v12 != 79 && v11 != 132)
        break;
      v14 = _swiftEmptyArrayStorage[2];
      v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1)
        result = sub_100192988(v13 > 1, v14 + 1, 1);
      _swiftEmptyArrayStorage[2] = v14 + 1;
      *((_BYTE *)&_swiftEmptyArrayStorage[4] + v14) = v11;
      if (!--v7)
      {
        a4 = v15;
        a5 = v16;
        goto LABEL_9;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_9:
    sub_100071634(a1, a2, (uint64_t)_swiftEmptyArrayStorage, a4, a5);
    return swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  }
  return result;
}

uint64_t sub_100071AB4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100152DCC(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_100071ACC()
{
  return sub_100071C18(1, (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100070514);
}

unint64_t sub_100071AEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003461A0;
  if (!qword_1003461A0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1003461A0);
  }
  return result;
}

unint64_t sub_100071B28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100344DF0;
  if (!qword_100344DF0)
  {
    v1 = sub_100063DC8(&qword_100344DE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> CollectionOfOne<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100344DF0);
  }
  return result;
}

unint64_t sub_100071B74()
{
  unint64_t result;

  result = qword_100344DF8;
  if (!qword_100344DF8)
  {
    result = swift_getWitnessTable(&unk_10028A414, &type metadata for ASN1Error);
    atomic_store(result, (unint64_t *)&qword_100344DF8);
  }
  return result;
}

void sub_100071BB8()
{
  uint64_t v0;
  uint64_t v1;
  Class isa;

  v1 = *(_QWORD *)(v0 + 16);
  isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(v1 + 16))(v1, isa);

}

uint64_t sub_100071BF8()
{
  return sub_100071C18(0, (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100070DB0);
}

uint64_t sub_100071C18(uint64_t a1, uint64_t (*a2)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(v2[2], a1, v2[3], v2[4], v2[5], v2[6], v2[7]);
}

ValueMetadata *type metadata accessor for GetStatusModuleTag()
{
  return &type metadata for GetStatusModuleTag;
}

unint64_t sub_100071C54()
{
  unint64_t result;

  result = qword_100344E00;
  if (!qword_100344E00)
  {
    result = swift_getWitnessTable(&unk_100288A7C, &type metadata for GetStatusModuleTag);
    atomic_store(result, (unint64_t *)&qword_100344E00);
  }
  return result;
}

uint64_t sub_100071C98(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void sub_100071CC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;

  v3 = a1;
  if (qword_100344558 != -1)
    a1 = swift_once(&qword_100344558, sub_10006449C);
  v4 = *(_QWORD *)(qword_100354A68 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData + 8);
  if (v4 >> 60 == 15)
  {
    v5 = Logger.logObject.getter(a1);
    v7 = static os_log_type_t.error.getter(v5, v6);
    if (os_log_type_enabled(v5, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v7, "Initiate access protocol data not yet cached", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    sub_10007CD7C(v3, 0);
  }
  else
  {
    v9 = *(_QWORD *)(qword_100354A68 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData);
    v10 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
    if (*(unsigned __int8 *)(v3 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) >= 2u)
    {
      v17 = sub_100063C8C(*(_QWORD *)(qword_100354A68 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData), *(_QWORD *)(qword_100354A68 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData + 8));
      v18 = Logger.logObject.getter(v17);
      v22 = static os_log_type_t.info.getter(v18, v19, v20, v21);
      if (os_log_type_enabled(v18, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v22, "Initiate access protocol already called for this peer; do nothing",
          v23,
          2u);
        swift_slowDealloc(v23, -1, -1);
      }
      sub_10006B9B4(v9, v4);

    }
    else
    {
      sub_100063C8C(*(_QWORD *)(qword_100354A68 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData), *(_QWORD *)(qword_100354A68 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData + 8));
      if (qword_100344568 != -1)
        swift_once(&qword_100344568, sub_100073158);
      sub_10007C8D8(2, 5, v9, v4);
      v12 = v11;
      v14 = v13;
      if (qword_1003445A0 != -1)
        swift_once(&qword_1003445A0, sub_1000B26B0);
      sub_1000ADCAC(v12, v14, v3);
      if (v2)
      {
        sub_100063CD0(v12, v14);
        sub_10006B9B4(v9, v4);
      }
      else
      {
        v24 = v12;
        v15 = swift_allocObject(&unk_100307230, 24, 7);
        swift_weakInit(v15 + 16, v3);
        v25 = v14;
        v16 = swift_allocObject(&unk_1003072A8, 40, 7);
        *(_QWORD *)(v16 + 16) = v15;
        *(_BYTE *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 32) = v1;
        swift_retain(v15);
        swift_retain(v1);
        sub_1001A3C14(0, (uint64_t)sub_10006C2C4, v16);
        swift_release(v15);
        swift_release(v16);
        sub_10006B9B4(v9, v4);
        sub_100063CD0(v24, v25);
        *(_BYTE *)(v3 + v10) = 2;
      }
    }
  }
}

void sub_100072014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!__OFADD__(a3, 2))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x100072394);
}

void sub_1000723E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!__OFADD__(a3, 1))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x100072758);
}

void sub_1000727AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!__OFADD__(a3, 4))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x100072B28);
}

void sub_100072B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!__OFADD__(a3, 1))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x100072E54);
}

uint64_t sub_100072E88@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10007D104(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100072EB0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_secureChannel));

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_timeExtension));
  sub_100063CD0(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_truncatedReaderGroupIdentifier), *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_truncatedReaderGroupIdentifier + 8));
  return sub_10006B9B4(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier), *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier + 8));
}

uint64_t sub_100072F14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  v1 = v0 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  v2 = type metadata accessor for UUID(0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier, v2);
  sub_10006B9B4(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier), *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8));
  sub_10006B9B4(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier), *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8));
  sub_10006B9B4(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_buffer), *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_secureChannel));

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_timeExtension));
  sub_100063CD0(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_truncatedReaderGroupIdentifier), *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_truncatedReaderGroupIdentifier + 8));
  sub_10006B9B4(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier), *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier + 8));
  return v0;
}

uint64_t sub_100073020()
{
  uint64_t v0;

  sub_100072F14();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100073044()
{
  return type metadata accessor for LyonPeer(0);
}

uint64_t type metadata accessor for LyonPeer(uint64_t a1)
{
  return sub_10007BBF0(a1, qword_100344E38, (uint64_t)&nominal type descriptor for LyonPeer);
}

uint64_t sub_100073060(uint64_t a1)
{
  _QWORD v2[35];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.Int8 + 64;
  v2[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[5] = &unk_100288B00;
  v2[6] = &unk_100288B18;
  v2[7] = (char *)&value witness table for Builtin.Int8 + 64;
  v2[8] = (char *)&value witness table for Builtin.Int8 + 64;
  v2[9] = &unk_100288B30;
  v2[10] = &unk_100288B48;
  v2[11] = &unk_100288B60;
  v2[12] = &unk_100288B78;
  v2[13] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[14] = &unk_100288B90;
  v2[15] = &unk_100288B90;
  v2[16] = &unk_100288B90;
  v2[17] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[18] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[19] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[20] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[21] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[22] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[23] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[24] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[25] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[26] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[27] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[28] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[29] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[30] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[31] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[32] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[33] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[34] = (char *)&value witness table for Builtin.Int32 + 64;
  return swift_updateClassMetadata2(a1, 256, 35, v2, a1 + 408);
}

uint64_t sub_100073158()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for Lyon(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_100073200();
  qword_100354A80 = result;
  return result;
}

void sub_100073194()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSBackgroundActivityScheduler);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithIdentifier:", v1);

  qword_100344E08 = (uint64_t)v2;
}

uint64_t sub_100073200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD aBlock[5];
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v0 + 16) = 0;
  v7 = String.init(cString:)(SESLoggingSubsystem);
  Logger.init(subsystem:category:)(v7);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Lyon_maxMessageLength) = 2013;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Lyon_preArmedTruncatedReaderIdentifiers) = _swiftEmptyArrayStorage;
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v8 = (void *)static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  aBlock[4] = sub_10007EEE0;
  v13 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_1003071F8;
  v9 = _Block_copy(aBlock);
  v10 = v13;
  swift_retain(v1);
  swift_release(v10);
  os_state_add_handler(v8, v9);
  _Block_release(v9);

  return v1;
}

_DWORD *sub_10007338C()
{
  uint64_t v0;
  char v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  Class isa;
  _DWORD *v5;
  _OWORD v7[2];
  __int128 v8;
  void *v9;

  v1 = *(_BYTE *)(v0 + 16);
  v9 = &type metadata for Bool;
  LOBYTE(v8) = v1;
  sub_10006C2B4(&v8, v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v7, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v3 = sub_10017D088((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  v5 = sub_100015734((uint64_t)"lyon.state", (uint64_t)isa);

  return v5;
}

void sub_100073474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t *v56;
  id v57;
  NSObject *v58;
  os_log_type_t v59;
  _DWORD *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint8_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  char *v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88[2];
  _QWORD v89[6];

  v1 = v0;
  v2 = (uint64_t *)type metadata accessor for DispatchPredicate(0);
  v3 = *(v2 - 1);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
LABEL_65:
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = (void *)qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t *))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = v7;
  v9 = _dispatchPreconditionTest(_:)(v6);
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t *))(v3 + 8))(v6, v2);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_67:
    v21 = swift_once(&qword_1003445B8, sub_1000EAA4C);
    goto LABEL_10;
  }
  v11 = *(_BYTE *)(v1 + 16);
  v86 = v1 + OBJC_IVAR____TtC10seserviced4Lyon_logger;
  v12 = Logger.logObject.getter(v10);
  v16 = v12;
  if ((v11 & 1) != 0)
  {
    v17 = static os_log_type_t.error.getter(v12, v13);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Lyon is already running", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    return;
  }
  v19 = static os_log_type_t.info.getter(v12, v13, v14, v15);
  if (os_log_type_enabled(v16, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v19, "Starting Lyon", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  v9 = qword_100354EE8;
  if (qword_1003445B8 != -1)
    goto LABEL_67;
LABEL_10:
  __chkstk_darwin(v21, v22);
  *(&v75 - 4) = v23;
  *(&v75 - 3) = v1;
  v25 = v24 + 4;
  *(&v75 - 2) = v9;
  os_unfair_lock_lock(v24 + 4);
  sub_10016B0FC(v26, sub_10007EFA0);
  os_unfair_lock_unlock(v25);
  if (qword_100344558 != -1)
    swift_once(&qword_100344558, sub_10006449C);
  sub_100064938();
  if (qword_100344668 != -1)
    swift_once(&qword_100344668, sub_1001647D0);
  sub_1001624D8();
  if (qword_1003446F0 != -1)
    swift_once(&qword_1003446F0, sub_1001B3B74);
  sub_1001B264C();
  if (qword_100344708 != -1)
    swift_once(&qword_100344708, sub_1001C2AE4);
  sub_1001C0E14();
  sub_10007D4F8();
  __chkstk_darwin(v27, v28);
  v2 = &v75 - 6;
  *(&v75 - 4) = (uint64_t)sub_10007BE84;
  *(&v75 - 3) = 0;
  *(&v75 - 2) = v29;
  v31 = v30 + 4;
  os_unfair_lock_lock(v30 + 4);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10007EFBC, v89);
  os_unfair_lock_unlock(v31);
  v3 = v89[0];
  if ((v89[0] & 0xC000000000000001) != 0)
  {
    if (v89[0] < 0)
      v32 = v89[0];
    else
      v32 = v89[0] & 0xFFFFFFFFFFFFFF8;
    if (__CocoaSet.count.getter(v32))
    {
      v76 = v1;
      sub_100064CE8();
      v2 = (uint64_t *)__CocoaSet.makeIterator()(v32);
      v6 = (_QWORD *)sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
      v33 = sub_10007EFD8();
      v34 = Set.Iterator.init(_cocoa:)(v89, v2, v6, v33);
      v3 = v89[0];
      v36 = v89[1];
      v37 = v89[2];
      v38 = v89[3];
      v39 = v89[4];
LABEL_29:
      v1 = v3 & 0x7FFFFFFFFFFFFFFFLL;
      v77 = v37;
      v85 = (unint64_t)(v37 + 64) >> 6;
      *(_QWORD *)&v35 = 136315138;
      v79 = v35;
      v78 = (char *)&type metadata for Any + 8;
      v84 = (char *)&type metadata for Swift.AnyObject + 8;
      v80 = v36;
      v81 = v3;
      while (1)
      {
        if (v3 < 0)
        {
          v46 = __CocoaSet.Iterator.next()(v34);
          if (!v46)
            goto LABEL_62;
          v47 = v46;
          v87 = v46;
          v48 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
          swift_unknownObjectRetain(v47);
          swift_dynamicCast(v88, &v87, v84, v48, 7);
          v49 = (id)v88[0];
          swift_unknownObjectRelease(v47);
          v45 = v38;
          v2 = (uint64_t *)v39;
          if (!v49)
            goto LABEL_62;
        }
        else
        {
          if (v39)
          {
            v2 = (uint64_t *)((v39 - 1) & v39);
            v44 = __clz(__rbit64(v39)) | (v38 << 6);
            v45 = v38;
          }
          else
          {
            v50 = v38 + 1;
            if (__OFADD__(v38, 1))
            {
              __break(1u);
              goto LABEL_65;
            }
            if (v50 >= v85)
              goto LABEL_62;
            v51 = *(_QWORD *)(v36 + 8 * v50);
            v45 = v38 + 1;
            if (!v51)
            {
              v45 = v38 + 2;
              if (v38 + 2 >= v85)
                goto LABEL_62;
              v51 = *(_QWORD *)(v36 + 8 * v45);
              if (!v51)
              {
                v45 = v38 + 3;
                if (v38 + 3 >= v85)
                  goto LABEL_62;
                v51 = *(_QWORD *)(v36 + 8 * v45);
                if (!v51)
                {
                  v45 = v38 + 4;
                  if (v38 + 4 >= v85)
                    goto LABEL_62;
                  v51 = *(_QWORD *)(v36 + 8 * v45);
                  if (!v51)
                  {
                    v52 = v38 + 5;
                    while (v85 != v52)
                    {
                      v51 = *(_QWORD *)(v36 + 8 * v52++);
                      if (v51)
                      {
                        v45 = v52 - 1;
                        goto LABEL_49;
                      }
                    }
LABEL_62:
                    sub_10007EF58(v3);
                    v1 = v76;
                    goto LABEL_63;
                  }
                }
              }
            }
LABEL_49:
            v2 = (uint64_t *)((v51 - 1) & v51);
            v44 = __clz(__rbit64(v51)) + (v45 << 6);
          }
          v49 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v44);
          if (!v49)
            goto LABEL_62;
        }
        v53 = objc_msgSend(v49, "homeUUIDString");
        if (v53)
        {
          v54 = v53;
          v39 = (unint64_t)v2;
          v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
          v2 = v56;

          if (qword_100344628 != -1)
            swift_once(&qword_100344628, sub_1001539B4);
          v6 = (_QWORD *)qword_100354CF0;
          sub_100154680(v55, (unint64_t)v2);

          v34 = (_QWORD *)swift_bridgeObjectRelease(v2);
          v38 = v45;
        }
        else
        {
          v57 = v49;
          v58 = Logger.logObject.getter(v57);
          v59 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v58, v59))
          {
            v60 = (_DWORD *)swift_slowAlloc(12, -1);
            v82 = v60;
            v83 = swift_slowAlloc(32, -1);
            v88[0] = v83;
            *v60 = v79;
            v61 = objc_msgSend(v57, "publicKeyIdentifier");
            v62 = v1;
            v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v61);
            v65 = v64;

            v66 = Data.description.getter(v63, v65);
            v68 = v67;
            v69 = v63;
            v1 = v62;
            sub_100063CD0(v69, v65);
            v70 = v66;
            v36 = v80;
            v71 = sub_1001C56EC(v70, v68, v88);
            v72 = (uint8_t *)v82;
            *(_QWORD *)(v82 + 1) = v71;

            v73 = v68;
            v3 = v81;
            swift_bridgeObjectRelease(v73);
            _os_log_impl((void *)&_mh_execute_header, v58, v59, "No home uuid found for %s, forcing scan to always be on", v72, 0xCu);
            v74 = v83;
            swift_arrayDestroy(v83, 1, v78);
            swift_slowDealloc(v74, -1, -1);
            swift_slowDealloc(v72, -1, -1);
          }
          else
          {

          }
          if (qword_100344628 != -1)
            swift_once(&qword_100344628, sub_1001539B4);
          v6 = (_QWORD *)qword_100354CF0;
          *(_BYTE *)(qword_100354CF0 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_forceNotOutOfHome) = 1;
          sub_100154234();

          v38 = v45;
          v39 = (unint64_t)v2;
        }
      }
    }
  }
  else if (*(_QWORD *)(v89[0] + 16))
  {
    v76 = v1;
    v6 = (_QWORD *)qword_100354A68;
    v34 = (_QWORD *)sub_100064CE8();
    v38 = 0;
    v40 = -1 << *(_BYTE *)(v3 + 32);
    v36 = v3 + 56;
    v41 = ~v40;
    v42 = -v40;
    if (v42 < 64)
      v43 = ~(-1 << v42);
    else
      v43 = -1;
    v39 = v43 & *(_QWORD *)(v3 + 56);
    v37 = v41;
    goto LABEL_29;
  }
  swift_bridgeObjectRelease(v3);
LABEL_63:
  *(_BYTE *)(v1 + 16) = 1;
}

void sub_100073CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once(&qword_100344668, sub_1001647D0);
LABEL_8:
    sub_1001626A8();
    if (qword_100344558 != -1)
      swift_once(&qword_100344558, sub_10006449C);
    sub_100064B10();
    if (qword_100344598 != -1)
      swift_once(&qword_100344598, sub_10009F9BC);
    sub_10009BF20();
    if (qword_100344570 != -1)
      swift_once(&qword_100344570, sub_100073194);
    objc_msgSend((id)qword_100344E08, "invalidate");
    *(_BYTE *)(v1 + 16) = 0;
    return;
  }
  v10 = *(unsigned __int8 *)(v1 + 16);
  v11 = Logger.logObject.getter(v9);
  v15 = v11;
  if (v10 == 1)
  {
    v16 = static os_log_type_t.info.getter(v11, v12, v13, v14);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Stopping Lyon", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced4Lyon_preArmedTruncatedReaderIdentifiers);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced4Lyon_preArmedTruncatedReaderIdentifiers) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v18);
    if (qword_100344668 == -1)
      goto LABEL_8;
    goto LABEL_19;
  }
  v19 = static os_log_type_t.error.getter(v11, v12);
  if (os_log_type_enabled(v15, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v19, "Lyon is not running", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

}

void sub_100073F84(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  _QWORD v33[5];
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];
  _QWORD v40[3];
  _QWORD v41[2];
  uint64_t v42;
  unint64_t v43;

  v4 = v3;
  v38 = a3;
  v37 = type metadata accessor for UUID(0);
  v36 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37, v7);
  v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (_QWORD *)((char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v15 = qword_100354EE8;
  *v14 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  v17 = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v14, v10);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x100074C1CLL);
  }
  if (*(_BYTE *)(v4 + 16) == 1)
  {
    v34 = v9;
    v18 = v38 + OBJC_IVAR____TtC10seserviced4Peer_buffer;
    v20 = *(_QWORD *)(v38 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
    v42 = *(_QWORD *)(v38 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
    v19 = v42;
    v43 = v20;
    *(_OWORD *)(v38 + OBJC_IVAR____TtC10seserviced4Peer_buffer) = xmmword_1002888D0;
    sub_10006BA34(v19, v20);
    sub_10006B9B4(v19, v20);
    if (v20 >> 60 == 15)
    {
      v21 = a1;
    }
    else
    {
      Data.append(_:)(a1, a2);
      v19 = v42;
      v20 = v43;
      v26 = v42;
      v21 = a1;
      v27 = v43;
      if (v43 >> 60 != 15)
        goto LABEL_12;
    }
    sub_100063C8C(v21, a2);
    v26 = v21;
    v27 = a2;
LABEL_12:
    v41[0] = v26;
    v41[1] = v27;
    v28 = v4 + OBJC_IVAR____TtC10seserviced4Lyon_logger;
    sub_100063C8C(v21, a2);
    sub_100063C8C(v21, a2);
    v29 = sub_10006BA34(v19, v20);
    v33[2] = v28;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.debug.getter();
    v32 = os_log_type_enabled(v30, v31);
    v33[0] = v18;
    v33[1] = a2;
    v33[3] = v21;
    v35 = v4;
    if (v32)
    {
      *(_DWORD *)swift_slowAlloc(22, -1) = 134218240;
      __asm { BR              X9 }
    }
    sub_100063CD0(v21, a2);

    sub_100063CD0(v21, a2);
    v33[4] = OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber;
    v34 = (char *)(v38 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier);
    swift_beginAccess(v38 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier, v40, 0, 0);
    swift_beginAccess(v41, v39, 1, 0);
    __asm { BR              X8 }
  }
  v22 = Logger.logObject.getter(v17);
  v24 = static os_log_type_t.error.getter(v22, v23);
  if (os_log_type_enabled(v22, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v24, "Not running", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

}

uint64_t sub_100074C98(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  v2 = sub_10006BA78(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = sub_10007C4B4(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = sub_10007C574((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = sub_10007C5EC((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_10006BA9C(v8);
  return v6;
}

void sub_100074D50(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[5];

  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_100074DB4
     + *((int *)qword_100074FE8 + (sub_10006BA78(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_100074DC4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_100063C8C(v1, v0);
  sub_10007BECC(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_100063CD0(v1, v0);
  v4 = v12;
  sub_10006BA9C(&v13);
  return v4;
}

void sub_100074FF8(int a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  os_log_type_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  os_log_type_t v98;
  uint64_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint8_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116[2];

  v8 = v7;
  v110 = a5;
  v112 = a4;
  LODWORD(v114) = a1;
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (uint64_t *)((char *)&v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v18 = (void *)qword_100354EE8;
  *v17 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v13);
  v19 = v18;
  v20 = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v17, v13);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_39;
  }
  v21 = v8 + OBJC_IVAR____TtC10seserviced4Lyon_logger;
  v22 = swift_retain_n(a7, 2);
  v111 = v21;
  v23 = Logger.logObject.getter(v22);
  v27 = static os_log_type_t.info.getter(v23, v24, v25, v26);
  v28 = os_log_type_enabled(v23, v27);
  v109 = a6;
  if (v28)
  {
    v29 = swift_slowAlloc(25, -1);
    v30 = swift_slowAlloc(64, -1);
    LODWORD(v113) = a2;
    v31 = v30;
    v116[0] = v30;
    *(_DWORD *)v29 = 136315650;
    v32 = sub_10019A1D0(v114);
    v34 = v33;
    v115 = sub_1001C56EC(v32, v33, v116);
    v108 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease(v34);
    *(_WORD *)(v29 + 12) = 256;
    LOBYTE(v115) = v113;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, (char *)&v115 + 1, v29 + 14, v29 + 15);
    *(_WORD *)(v29 + 15) = 2080;
    v35 = swift_retain(a7);
    v36 = UUID.uuidString.getter(v35);
    v38 = v37;
    swift_release(a7);
    v115 = sub_1001C56EC(v36, v38, v116);
    a3 = v108;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116, v29 + 17, v29 + 25);
    swift_release_n(a7, 2);
    swift_bridgeObjectRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, v23, v27, "Received type %s id %hhu from peer %s", (uint8_t *)v29, 0x19u);
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    v39 = v31;
    a2 = v113;
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    swift_release_n(a7, 2);
  }

  if ((*(_BYTE *)(a7 + OBJC_IVAR____TtC10seserviced8LyonPeer_hasError) & 1) == 0)
  {
    v53 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
    v54 = v114;
    if (*(unsigned __int8 *)(a7 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) >= 5u)
      __asm { BR              X11 }
    LODWORD(v113) = a2;
    v55 = v112;
    sub_100063C8C(a3, v112);
    v56 = a3;
    if (v54 == 2)
    {
      sub_100075E54(v113, a3, v55, a7);
      goto LABEL_25;
    }
    if (v54 != 1)
    {
      if (v54)
      {
        v73 = v112;
        sub_100063C8C(a3, v112);
        v74 = sub_100063C8C(a3, v73);
        v75 = Logger.logObject.getter(v74);
        v79 = a3;
        v80 = static os_log_type_t.info.getter(v75, v76, v77, v78);
        if (os_log_type_enabled(v75, v80))
        {
          v81 = swift_slowAlloc(18, -1);
          v111 = swift_slowAlloc(32, -1);
          v116[0] = v111;
          *(_DWORD *)v81 = 16777986;
          LOBYTE(v115) = v54;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, (char *)&v115 + 1, v81 + 4, v81 + 5);
          *(_WORD *)(v81 + 5) = 256;
          LOBYTE(v115) = v113;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, (char *)&v115 + 1, v81 + 7, v81 + 8);
          *(_WORD *)(v81 + 8) = 2080;
          v82 = v112;
          sub_1001BD2CC(v79, v112);
          v84 = v83;
          v115 = v83;
          v85 = sub_100063D3C((uint64_t *)&unk_100346060);
          v113 = v55;
          v86 = v85;
          v87 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
          v114 = v56;
          v88 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v86, v87);
          v90 = v89;
          swift_bridgeObjectRelease(v84);
          v115 = sub_1001C56EC(v88, v90, v116);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116, v81 + 10, v81 + 18);
          swift_bridgeObjectRelease(v90);
          sub_100063CD0(v79, v82);
          sub_100063CD0(v79, v82);
          _os_log_impl((void *)&_mh_execute_header, v75, v80, "Ignoring unknown message type %hhu id %hhu payload %s", (uint8_t *)v81, 0x12u);
          v91 = v111;
          swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v91, -1, -1);
          swift_slowDealloc(v81, -1, -1);
          sub_100063CD0(v114, v113);

        }
        else
        {
          sub_100063CD0(v56, v55);

          v92 = v112;
          sub_100063CD0(v79, v112);
          sub_100063CD0(v79, v92);
        }
        return;
      }
      if (qword_100344558 != -1)
        swift_once(&qword_100344558, sub_10006449C);
      sub_100065EE0(v113, a3, v55, a7, v110, v109, 3);
LABEL_25:
      sub_100063CD0(a3, v55);
      return;
    }
    if (*(unsigned __int8 *)(a7 + v53) >= 5u)
    {
      if (qword_100344598 != -1)
        swift_once(&qword_100344598, sub_10009F9BC);
      sub_1000A90C4(v113, a3, v55, a7);
      goto LABEL_25;
    }
    v57 = v55;
    v58 = swift_retain_n(a7, 4);
    v59 = Logger.logObject.getter(v58);
    v61 = static os_log_type_t.error.getter(v59, v60);
    if (os_log_type_enabled(v59, v61))
    {
      v62 = swift_slowAlloc(22, -1);
      v63 = swift_slowAlloc(64, -1);
      v114 = a3;
      v64 = v63;
      v116[0] = v63;
      *(_DWORD *)v62 = 136315394;
      LOBYTE(v115) = *(_BYTE *)(a7 + v53);
      v65 = String.init<A>(describing:)(&v115, &type metadata for LyonSessionState);
      v67 = v66;
      v115 = sub_1001C56EC(v65, v66, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116, v62 + 4, v62 + 12);
      swift_release_n(a7, 2);
      swift_bridgeObjectRelease(v67);
      *(_WORD *)(v62 + 12) = 2080;
      v68 = swift_retain(a7);
      v69 = UUID.uuidString.getter(v68);
      v71 = v70;
      swift_release(a7);
      v115 = sub_1001C56EC(v69, v71, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116, v62 + 14, v62 + 22);
      swift_release_n(a7, 2);
      swift_bridgeObjectRelease(v71);
      _os_log_impl((void *)&_mh_execute_header, v59, v61, "Cannot process UWB message in state %s for %s", (uint8_t *)v62, 0x16u);
      swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
      v72 = v64;
      v56 = v114;
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v62, -1, -1);
    }
    else
    {
      swift_release_n(a7, 4);
    }

    v93 = sub_10006B828();
    v20 = swift_allocError(&type metadata for DSKError, v93, 0, 0);
    *v94 = 0;
    swift_willThrow(v20);
    sub_100063CD0(v56, v57);
    v95 = swift_retain_n(a7, 2);
    v96 = Logger.logObject.getter(v95);
    v98 = static os_log_type_t.error.getter(v96, v97);
    if (os_log_type_enabled(v96, v98))
    {
      v99 = v20;
      v100 = (uint8_t *)swift_slowAlloc(12, -1);
      v101 = swift_slowAlloc(32, -1);
      *(_DWORD *)v100 = 136315138;
      v116[0] = v101;
      v102 = swift_retain(a7);
      v103 = UUID.uuidString.getter(v102);
      v105 = v104;
      swift_release(a7);
      v115 = sub_1001C56EC(v103, v105, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116, v100 + 4, v100 + 12);
      swift_release_n(a7, 2);
      swift_bridgeObjectRelease(v105);
      _os_log_impl((void *)&_mh_execute_header, v96, v98, "Could not process message for %s, disconnecting", v100, 0xCu);
      swift_arrayDestroy(v101, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v101, -1, -1);
      v106 = v100;
      v20 = v99;
      swift_slowDealloc(v106, -1, -1);
    }
    else
    {
      swift_release_n(a7, 2);
    }

    if (qword_100344568 == -1)
    {
LABEL_37:
      sub_10007CD7C(a7, 0);
      swift_errorRelease(v20);
      return;
    }
LABEL_39:
    swift_once(&qword_100344568, sub_100073158);
    goto LABEL_37;
  }
  v40 = swift_retain_n(a7, 2);
  v41 = Logger.logObject.getter(v40);
  v43 = static os_log_type_t.error.getter(v41, v42);
  if (os_log_type_enabled(v41, v43))
  {
    v44 = swift_slowAlloc(22, -1);
    v45 = swift_slowAlloc(64, -1);
    v116[0] = v45;
    *(_DWORD *)v44 = 136315394;
    v46 = swift_retain(a7);
    v47 = UUID.uuidString.getter(v46);
    v49 = v48;
    swift_release(a7);
    v115 = sub_1001C56EC(v47, v49, v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116, v44 + 4, v44 + 12);
    swift_release_n(a7, 2);
    swift_bridgeObjectRelease(v49);
    *(_WORD *)(v44 + 12) = 2080;
    v50 = sub_10019A1D0(v114);
    v52 = v51;
    v115 = sub_1001C56EC(v50, v51, v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116, v44 + 14, v44 + 22);
    swift_bridgeObjectRelease(v52);
    _os_log_impl((void *)&_mh_execute_header, v41, v43, "%s already errored out, ignoring %s message", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);
  }
  else
  {
    swift_release_n(a7, 2);
  }

}

void sub_100075CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x100075E20);
}

void sub_100075E54(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  _QWORD v35[2];
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v39 = a1;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (_QWORD *)((char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = (void *)qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = v13;
  v15 = _dispatchPreconditionTest(_:)(v12);
  v16 = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v15 & 1) != 0)
  {
    v17 = v40 + OBJC_IVAR____TtC10seserviced4Lyon_logger;
    v18 = Logger.logObject.getter(v16);
    v22 = static os_log_type_t.info.getter(v18, v19, v20, v21);
    if (os_log_type_enabled(v18, v22))
    {
      v35[1] = v17;
      v23 = swift_slowAlloc(12, -1);
      v38 = v4;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v43 = v25;
      v36 = a3;
      v37 = a2;
      *(_DWORD *)v24 = 136315138;
      v26 = v39;
      v27 = sub_10019A498(v39);
      v29 = v28;
      v41 = sub_1001C56EC(v27, v28, &v43);
      a3 = v36;
      a2 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease(v29);
      _os_log_impl((void *)&_mh_execute_header, v18, v22, "Processing Notification %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

      v26 = v39;
    }
    switch(v26)
    {
      case 0:
        sub_100078760(a2, a3, a4);
        break;
      case 1:
        if (qword_100344598 == -1)
          goto LABEL_13;
        goto LABEL_18;
      case 2:
        sub_1000761DC(a2, a3, a4);
        break;
      case 3:
        sub_1000776B0(a2, a3, a4);
        break;
      default:
        v31 = Logger.logObject.getter(v30);
        v33 = static os_log_type_t.error.getter(v31, v32);
        if (os_log_type_enabled(v31, v33))
        {
          v34 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v34 = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, v33, "Ignoring unknown notification id", v34, 2u);
          swift_slowDealloc(v34, -1, -1);
        }

        break;
    }
  }
  else
  {
    __break(1u);
LABEL_18:
    swift_once(&qword_100344598, sub_10009F9BC);
LABEL_13:
    sub_10009C628(a2, a3, a4);
  }
}

void sub_1000761DC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  Class isa;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  int v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  uint64_t v70;
  os_log_type_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  unint64_t v91;
  NSObject *v92;
  uint64_t v93;
  os_log_type_t v94;
  uint8_t *v95;
  unint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t inited;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  double v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  double v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  double v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  double v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  NSObject *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  os_log_type_t v195;
  uint8_t *v196;
  uint64_t v197;
  int *v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  NSObject *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  os_log_type_t v206;
  uint8_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  NSObject *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  os_log_type_t v215;
  uint8_t *v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void (*v229)(char *, uint64_t);
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  int v236;
  NSObject *v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _BYTE v250[16];

  v242 = a3;
  v240 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v240 - 8);
  __chkstk_darwin(v240, v7);
  v239 = (char *)&v218 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (uint64_t *)((char *)&v218 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v14 = (void *)qword_100354EE8;
  *v13 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  v15 = v14;
  v16 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_61:
    swift_once(&qword_100344598, sub_10009F9BC);
LABEL_50:
    v208 = v242;
    if (qword_100344690 != -1)
      swift_once(&qword_100344690, sub_100182BE4);
    v209 = qword_100354D70;
    swift_retain(v208);
    v210 = sub_1001977B8(v209, v208);
    swift_release(v208);
    v211 = sub_10009F62C(v210);
    v212 = swift_bridgeObjectRelease(v210);
    if (v211)
    {
      v213 = type metadata accessor for UWBLyonSession();
      if (swift_dynamicCastClass(v211, v213))
      {
        sub_1001824B4(*(_BYTE *)(v208 + v238), v16);
LABEL_58:
        v217 = v234;

        sub_1000793D4(v208, v16);
        sub_10006B9B4((uint64_t)v237, v217);
        goto LABEL_59;
      }

    }
    v211 = Logger.logObject.getter(v212);
    v215 = static os_log_type_t.error.getter(v211, v214);
    if (os_log_type_enabled(v211, v215))
    {
      v216 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v216 = 0;
      _os_log_impl((void *)&_mh_execute_header, v211, v215, "Session not available to report lock status", v216, 2u);
      swift_slowDealloc(v216, -1, -1);
    }
    goto LABEL_58;
  }
  v17 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
  v18 = v242;
  if (*(unsigned __int8 *)(v242 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) < 5u)
  {
    v19 = swift_retain_n(v242, 4);
    v20 = Logger.logObject.getter(v19);
    v22 = static os_log_type_t.error.getter(v20, v21);
    if (os_log_type_enabled(v20, v22))
    {
      v23 = swift_slowAlloc(22, -1);
      v241 = swift_slowAlloc(64, -1);
      v246 = v241;
      *(_DWORD *)v23 = 136315394;
      LOBYTE(v249) = *(_BYTE *)(v18 + v17);
      v24 = String.init<A>(describing:)(&v249, &type metadata for LyonSessionState);
      v26 = v25;
      v249 = sub_1001C56EC(v24, v25, &v246);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v23 + 4, v23 + 12);
      swift_release_n(v18, 2);
      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v23 + 12) = 2080;
      v27 = swift_retain(v18);
      v28 = UUID.uuidString.getter(v27);
      v30 = v29;
      swift_release(v18);
      v249 = sub_1001C56EC(v28, v30, &v246);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v23 + 14, v23 + 22);
      swift_release_n(v18, 2);
      swift_bridgeObjectRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v20, v22, "Cannot process status changed message in state %s for %s", (uint8_t *)v23, 0x16u);
      v31 = v241;
      swift_arrayDestroy(v241, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_release_n(v18, 4);
    }

    goto LABEL_18;
  }
  sub_100063C8C(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(a1, a2);
  v13 = objc_msgSend((id)objc_opt_self(SESTLV), "TLVWithData:", isa);

  if (!v13)
  {
    sub_100063C8C(a1, a2);
    swift_retain(v18);
    sub_100063C8C(a1, a2);
    v68 = swift_retain(v18);
    v69 = Logger.logObject.getter(v68);
    v71 = static os_log_type_t.error.getter(v69, v70);
    v72 = v71;
    if (os_log_type_enabled(v69, v71))
    {
      v73 = swift_slowAlloc(22, -1);
      v241 = swift_slowAlloc(64, -1);
      v246 = v241;
      *(_DWORD *)v73 = 136315394;
      v239 = (char *)(v73 + 4);
      sub_1001BD2CC(a1, a2);
      v75 = v74;
      v249 = v74;
      LODWORD(v240) = v72;
      v76 = sub_100063D3C((uint64_t *)&unk_100346060);
      v77 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v78 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v76, v77);
      v80 = v79;
      swift_bridgeObjectRelease(v75);
      v249 = sub_1001C56EC(v78, v80, &v246);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v239, v73 + 12);
      swift_bridgeObjectRelease(v80);
      sub_100063CD0(a1, a2);
      sub_100063CD0(a1, a2);
      *(_WORD *)(v73 + 12) = 2080;
      v81 = v242;
      v82 = type metadata accessor for UUID(0);
      v83 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v84 = dispatch thunk of CustomStringConvertible.description.getter(v82, v83);
      v86 = v85;
      v249 = sub_1001C56EC(v84, v85, &v246);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v73 + 14, v73 + 22);
      swift_release_n(v81, 2);
      swift_bridgeObjectRelease(v86);
      _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v240, "Could not process status changed notification %s from peer %s", (uint8_t *)v73, 0x16u);
      v87 = v241;
      swift_arrayDestroy(v241, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v87, -1, -1);
      swift_slowDealloc(v73, -1, -1);

    }
    else
    {

      sub_100063CD0(a1, a2);
      sub_100063CD0(a1, a2);
      swift_release_n(v18, 2);
    }
LABEL_18:
    v88 = sub_10006B828();
    v89 = swift_allocError(&type metadata for DSKError, v88, 0, 0);
    *v90 = 0;
    swift_willThrow(v89);
    return;
  }
  v33 = objc_msgSend(v13, "value");
  if (!v33)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v34 = v33;
  v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v37 = v36;

  sub_1000723E8(v35, v37, 0);
  if (v3)
  {
LABEL_59:

    return;
  }
  v39 = v38;
  v40 = objc_msgSend(v13, "value");
  if (v40)
  {
    v41 = v40;
    v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v44 = v43;

    sub_1000723E8(v42, v44, 1);
    v45 = v242;
    v46 = OBJC_IVAR____TtC10seserviced8LyonPeer_readerStatus;
    *(_BYTE *)(v242 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerStatus) = v47;
    v48 = v241 + OBJC_IVAR____TtC10seserviced4Lyon_logger;
    v49 = swift_retain_n(v45, 2);
    v235 = v48;
    v50 = Logger.logObject.getter(v49);
    v54 = static os_log_type_t.info.getter(v50, v51, v52, v53);
    v55 = v54;
    v237 = v50;
    v56 = os_log_type_enabled(v50, v54);
    v238 = v46;
    v236 = v39;
    if (v56)
    {
      v57 = swift_slowAlloc(22, -1);
      LODWORD(v234) = v55;
      v58 = v57;
      v233 = swift_slowAlloc(64, -1);
      v246 = v233;
      *(_DWORD *)v58 = 136315394;
      v232 = v58 + 4;
      v59 = sub_10019A73C(*(_BYTE *)(v45 + v46));
      v61 = v60;
      v249 = sub_1001C56EC(v59, v60, &v246);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v232, v58 + 12);
      swift_release_n(v45, 2);
      swift_bridgeObjectRelease(v61);
      *(_WORD *)(v58 + 12) = 2080;
      v62 = sub_10019A85C(v39);
      v64 = v63;
      v249 = sub_1001C56EC(v62, v63, &v246);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v58 + 14, v58 + 22);
      swift_bridgeObjectRelease(v64);
      v65 = v237;
      _os_log_impl((void *)&_mh_execute_header, v237, (os_log_type_t)v234, "Received status update %s from source %s", (uint8_t *)v58, 0x16u);
      v66 = v233;
      swift_arrayDestroy(v233, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v58, -1, -1);

    }
    else
    {
      swift_release_n(v45, 2);

    }
    v91 = *(_QWORD *)(v45 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier + 8);
    if (v91 >> 60 == 15)
    {
      v92 = Logger.logObject.getter(v67);
      v94 = static os_log_type_t.error.getter(v92, v93);
      if (os_log_type_enabled(v92, v94))
      {
        v95 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v95 = 0;
        _os_log_impl((void *)&_mh_execute_header, v92, v94, "Received status changed notification for unknown reader identifier, likely before auth is completed", v95, 2u);
        swift_slowDealloc(v95, -1, -1);
      }

      v96 = sub_10006B828();
      v97 = swift_allocError(&type metadata for DSKError, v96, 0, 0);
      *v98 = 0;
      swift_willThrow(v97);
      goto LABEL_59;
    }
    v237 = *(NSObject **)(v45 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier);
    sub_10006BA34((uint64_t)v237, v91);
    v221 = 0x80000001002BA410;
    v222 = (unint64_t)"fastTxAttemptedCount";
    v99 = sub_1000E848C(0xD000000000000012, 0x80000001002BA410);
    v232 = v100;
    v233 = v99;
    v102 = *(_QWORD *)(v45 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    v230 = *(_QWORD *)(v45 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    v101 = v230;
    v231 = v102;
    v225 = (uint64_t *)(v45 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    v226 = sub_100063D3C((uint64_t *)&unk_100346040);
    inited = swift_initStackObject(v226, &v248);
    *(_OWORD *)(inited + 16) = xmmword_100288AB0;
    v223 = (unint64_t)"aliroGroupResolvingKeys";
    *(_QWORD *)(inited + 32) = 0xD000000000000010;
    *(_QWORD *)(inited + 40) = 0x80000001002B9D40;
    v220 = 0x80000001002B9D40;
    sub_10006BA34(v102, v101);
    v234 = v91;
    sub_1001BD2CC((uint64_t)v237, v91);
    v105 = v104;
    v246 = v104;
    v106 = sub_100063D3C((uint64_t *)&unk_100346060);
    v227 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
    v228 = v106;
    v107 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v106, v227);
    v109 = v108;
    v110 = swift_bridgeObjectRelease(v105);
    *(_QWORD *)(inited + 48) = v107;
    *(_QWORD *)(inited + 56) = v109;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 80) = 0x6D617473656D6974;
    *(_QWORD *)(inited + 88) = 0xE900000000000070;
    v246 = 0;
    v247 = 0xE000000000000000;
    v111 = v239;
    v112 = Date.init()(v110);
    v113 = Date.timeIntervalSince1970.getter(v112);
    v229 = *(void (**)(char *, uint64_t))(v6 + 8);
    v229(v111, v240);
    Double.write<A>(to:)(&v246, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v113);
    v114 = v247;
    *(_QWORD *)(inited + 96) = v246;
    *(_QWORD *)(inited + 104) = v114;
    *(_QWORD *)(inited + 120) = &type metadata for String;
    *(_QWORD *)(inited + 128) = 0x746174536B636F6CLL;
    *(_QWORD *)(inited + 136) = 0xEA00000000007375;
    LOBYTE(v246) = *(_BYTE *)(v45 + v238);
    *(_QWORD *)(inited + 144) = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
    *(_QWORD *)(inited + 152) = v115;
    *(_QWORD *)(inited + 168) = &type metadata for String;
    *(_QWORD *)(inited + 176) = 0xD000000000000013;
    v224 = (unint64_t)"cwg.event.did.status.update";
    v219 = 0x80000001002BADB0;
    *(_QWORD *)(inited + 184) = 0x80000001002BADB0;
    LOBYTE(v246) = v236;
    v116 = v45;
    v117 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
    *(_QWORD *)(inited + 216) = &type metadata for String;
    *(_QWORD *)(inited + 192) = v117;
    *(_QWORD *)(inited + 200) = v118;
    v119 = sub_10017C218(inited);
    v121 = v232;
    v120 = v233;
    v122 = v230;
    v123 = v231;
    sub_1001F119C(0xD00000000000003BLL, 0x80000001002BAD70, v233, v232, v231, v230, v119);
    swift_bridgeObjectRelease(v119);
    sub_10006B9B4(v123, v122);
    sub_10006B9B4(v120, v121);
    v124 = *(unsigned __int8 *)(v116 + v238);
    if (v124 == 2)
    {
      v149 = sub_1000E848C(0xD000000000000012, v221);
      v232 = v150;
      v233 = v149;
      v151 = *v225;
      v230 = v225[1];
      v152 = v230;
      v231 = v151;
      v153 = swift_initStackObject(v226, &v245);
      *(_OWORD *)(v153 + 16) = xmmword_100288AC0;
      v154 = v220;
      *(_QWORD *)(v153 + 32) = 0xD000000000000010;
      *(_QWORD *)(v153 + 40) = v154;
      sub_10006BA34(v151, v152);
      sub_1001BD2CC((uint64_t)v237, v234);
      v156 = v155;
      v246 = v155;
      v157 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v228, v227);
      v159 = v158;
      v160 = swift_bridgeObjectRelease(v156);
      *(_QWORD *)(v153 + 48) = v157;
      *(_QWORD *)(v153 + 56) = v159;
      *(_QWORD *)(v153 + 72) = &type metadata for String;
      *(_QWORD *)(v153 + 80) = 0x6D617473656D6974;
      *(_QWORD *)(v153 + 88) = 0xE900000000000070;
      v246 = 0;
      v247 = 0xE000000000000000;
      v161 = v239;
      v162 = Date.init()(v160);
      v163 = Date.timeIntervalSince1970.getter(v162);
      v229(v161, v240);
      Double.write<A>(to:)(&v246, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v163);
      v164 = v247;
      *(_QWORD *)(v153 + 96) = v246;
      *(_QWORD *)(v153 + 104) = v164;
      *(_QWORD *)(v153 + 120) = &type metadata for String;
      *(_QWORD *)(v153 + 128) = 0xD000000000000013;
      *(_QWORD *)(v153 + 136) = v219;
      v16 = v236;
      LOBYTE(v246) = v236;
      v165 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
      *(_QWORD *)(v153 + 168) = &type metadata for String;
      *(_QWORD *)(v153 + 144) = v165;
      *(_QWORD *)(v153 + 152) = v166;
      v167 = sub_10017C218(v153);
      v145 = v232;
      v144 = v233;
      v169 = v230;
      v168 = v231;
      sub_1001F119C(0xD000000000000031, 0x80000001002BADD0, v233, v232, v231, v230, v167);
      swift_bridgeObjectRelease(v167);
      v147 = v168;
      v148 = v169;
    }
    else if (v124 == 1)
    {
      v170 = sub_1000E848C(0xD000000000000012, v222 | 0x8000000000000000);
      v232 = v171;
      v233 = v170;
      v173 = *v225;
      v231 = v225[1];
      v172 = v231;
      v174 = swift_initStackObject(v226, &v244);
      *(_OWORD *)(v174 + 16) = xmmword_100288AC0;
      v175 = v223 | 0x8000000000000000;
      *(_QWORD *)(v174 + 32) = 0xD000000000000010;
      *(_QWORD *)(v174 + 40) = v175;
      sub_10006BA34(v173, v172);
      sub_1001BD2CC((uint64_t)v237, v234);
      v177 = v176;
      v246 = v176;
      v178 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v228, v227);
      v180 = v179;
      v181 = swift_bridgeObjectRelease(v177);
      *(_QWORD *)(v174 + 48) = v178;
      *(_QWORD *)(v174 + 56) = v180;
      *(_QWORD *)(v174 + 72) = &type metadata for String;
      *(_QWORD *)(v174 + 80) = 0x6D617473656D6974;
      *(_QWORD *)(v174 + 88) = 0xE900000000000070;
      v246 = 0;
      v247 = 0xE000000000000000;
      v182 = v239;
      v183 = Date.init()(v181);
      v184 = Date.timeIntervalSince1970.getter(v183);
      v229(v182, v240);
      Double.write<A>(to:)(&v246, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v184);
      v185 = v247;
      *(_QWORD *)(v174 + 96) = v246;
      *(_QWORD *)(v174 + 104) = v185;
      *(_QWORD *)(v174 + 120) = &type metadata for String;
      *(_QWORD *)(v174 + 128) = 0xD000000000000013;
      *(_QWORD *)(v174 + 136) = v224 | 0x8000000000000000;
      LOWORD(v180) = v236;
      LOBYTE(v246) = v236;
      v186 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
      *(_QWORD *)(v174 + 168) = &type metadata for String;
      *(_QWORD *)(v174 + 144) = v186;
      *(_QWORD *)(v174 + 152) = v187;
      v188 = sub_10017C218(v174);
      v145 = v232;
      v144 = v233;
      v189 = v231;
      sub_1001F119C(0xD000000000000034, 0x80000001002BAE10, v233, v232, v173, v231, v188);
      swift_bridgeObjectRelease(v188);
      v147 = v173;
      v148 = v189;
      v16 = v180;
    }
    else
    {
      if (*(_BYTE *)(v116 + v238))
      {
        v190 = swift_retain(v242);
        v191 = Logger.logObject.getter(v190);
        v195 = static os_log_type_t.info.getter(v191, v192, v193, v194);
        if (os_log_type_enabled(v191, v195))
        {
          v196 = (uint8_t *)swift_slowAlloc(5, -1);
          *(_DWORD *)v196 = 16777472;
          v197 = v242;
          LOBYTE(v246) = *(_BYTE *)(v242 + v238);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, (char *)&v246 + 1, v196 + 4, v196 + 5);
          swift_release(v197);
          _os_log_impl((void *)&_mh_execute_header, v191, v195, "Unknown status %hhu", v196, 5u);
          swift_slowDealloc(v196, -1, -1);
        }
        else
        {
          swift_release(v242);
        }

        v16 = v236;
        goto LABEL_35;
      }
      v125 = sub_1000E848C(0xD000000000000012, v222 | 0x8000000000000000);
      v232 = v126;
      v233 = v125;
      v128 = *v225;
      v231 = v225[1];
      v127 = v231;
      v129 = swift_initStackObject(v226, &v243);
      *(_OWORD *)(v129 + 16) = xmmword_100288AC0;
      v130 = v223 | 0x8000000000000000;
      *(_QWORD *)(v129 + 32) = 0xD000000000000010;
      *(_QWORD *)(v129 + 40) = v130;
      sub_10006BA34(v128, v127);
      sub_1001BD2CC((uint64_t)v237, v234);
      v132 = v131;
      v246 = v131;
      v133 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v228, v227);
      v135 = v134;
      v136 = swift_bridgeObjectRelease(v132);
      *(_QWORD *)(v129 + 48) = v133;
      *(_QWORD *)(v129 + 56) = v135;
      *(_QWORD *)(v129 + 72) = &type metadata for String;
      *(_QWORD *)(v129 + 80) = 0x6D617473656D6974;
      *(_QWORD *)(v129 + 88) = 0xE900000000000070;
      v246 = 0;
      v247 = 0xE000000000000000;
      v137 = v239;
      v138 = Date.init()(v136);
      v139 = Date.timeIntervalSince1970.getter(v138);
      v229(v137, v240);
      Double.write<A>(to:)(&v246, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v139);
      v140 = v247;
      *(_QWORD *)(v129 + 96) = v246;
      *(_QWORD *)(v129 + 104) = v140;
      *(_QWORD *)(v129 + 120) = &type metadata for String;
      *(_QWORD *)(v129 + 128) = 0xD000000000000013;
      *(_QWORD *)(v129 + 136) = v224 | 0x8000000000000000;
      v16 = v236;
      LOBYTE(v246) = v236;
      v141 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
      *(_QWORD *)(v129 + 168) = &type metadata for String;
      *(_QWORD *)(v129 + 144) = v141;
      *(_QWORD *)(v129 + 152) = v142;
      v143 = sub_10017C218(v129);
      v145 = v232;
      v144 = v233;
      v146 = v231;
      sub_1001F119C(0xD000000000000032, 0x80000001002BAE50, v233, v232, v128, v231, v143);
      swift_bridgeObjectRelease(v143);
      v147 = v128;
      v148 = v146;
    }
    sub_10006B9B4(v147, v148);
    sub_10006B9B4(v144, v145);
LABEL_35:
    if (*(_BYTE *)(v242 + v238) != 1)
    {
      if (!*(_BYTE *)(v242 + v238))
      {
        if (qword_100344598 != -1)
          swift_once(&qword_100344598, sub_10009F9BC);
        sub_10009E0A0(v242);
LABEL_49:
        if (qword_100344598 == -1)
          goto LABEL_50;
        goto LABEL_61;
      }
LABEL_45:
      v200 = v242;
      v201 = swift_retain(v242);
      v202 = Logger.logObject.getter(v201);
      v206 = static os_log_type_t.info.getter(v202, v203, v204, v205);
      if (os_log_type_enabled(v202, v206))
      {
        v207 = (uint8_t *)swift_slowAlloc(5, -1);
        *(_DWORD *)v207 = 16777472;
        LOBYTE(v246) = *(_BYTE *)(v200 + v238);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, (char *)&v246 + 1, v207 + 4, v207 + 5);
        swift_release(v200);
        _os_log_impl((void *)&_mh_execute_header, v202, v206, "Received status %hhu, doing nothing", v207, 5u);
        swift_slowDealloc(v207, -1, -1);
      }
      else
      {
        swift_release(v200);
      }

      goto LABEL_49;
    }
    if (v16 == 4)
    {
      v198 = (int *)(v242 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockCount);
      v199 = *(_DWORD *)(v242 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockCount) + 1;
      if (*(_DWORD *)(v242 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockCount) != -1)
      {
LABEL_44:
        *v198 = v199;
        goto LABEL_45;
      }
      __break(1u);
    }
    v198 = (int *)(v242 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockFromOtherSourceCount);
    v199 = *(_DWORD *)(v242 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockFromOtherSourceCount) + 1;
    if (*(_DWORD *)(v242 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockFromOtherSourceCount) != -1)
      goto LABEL_44;
    __break(1u);
    goto LABEL_63;
  }
LABEL_64:
  __break(1u);
}

void sub_1000776B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) != 0)
  {
    if (qword_100344568 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344568, sub_100073158);
LABEL_5:
  sub_1001A37EC(0);
  if (!v3)
  {
    v13 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
    if (*(unsigned __int8 *)(a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) - 3 < 2)
      __asm { BR              X11 }
    v14 = swift_retain_n(a3, 4);
    v15 = Logger.logObject.getter(v14);
    v17 = static os_log_type_t.error.getter(v15, v16);
    if (os_log_type_enabled(v15, v17))
    {
      v18 = swift_slowAlloc(22, -1);
      v19 = swift_slowAlloc(64, -1);
      v33 = v19;
      *(_DWORD *)v18 = 136315394;
      LOBYTE(v31) = *(_BYTE *)(a3 + v13);
      v20 = String.init<A>(describing:)(&v31, &type metadata for LyonSessionState);
      v22 = v21;
      v31 = sub_1001C56EC(v20, v21, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v18 + 4, v18 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v22);
      *(_WORD *)(v18 + 12) = 2080;
      v23 = swift_retain(a3);
      v24 = UUID.uuidString.getter(v23);
      v26 = v25;
      swift_release(a3);
      v31 = sub_1001C56EC(v24, v26, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v18 + 14, v18 + 22);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v15, v17, "Cannot process access protocol completed in state %s for %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      swift_release_n(a3, 4);
    }

    v27 = sub_10006B828();
    v28 = swift_allocError(&type metadata for DSKError, v27, 0, 0);
    *v29 = 0;
    swift_willThrow(v28);
  }
}

void sub_100078760(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  __int16 v16;
  Class isa;
  unsigned int v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  BOOL v81;
  int v82;
  uint64_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  char v87[8];
  uint64_t v88;

  v5 = v3;
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (uint64_t *)((char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v14 = qword_100354EE8;
  *v13 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_31:
    swift_once(&qword_1003445A0, sub_1000B26B0);
LABEL_29:
    sub_1000AD358(a3);

    return;
  }
  sub_100063C8C(a1, a2);
  sub_100072014(a1, a2, 0);
  if (v4)
  {
    swift_errorRelease(v4);
  }
  else if (!v16)
  {
    v52 = swift_retain_n(a3, 2);
    v53 = Logger.logObject.getter(v52);
    v57 = static os_log_type_t.info.getter(v53, v54, v55, v56);
    if (os_log_type_enabled(v53, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      v59 = swift_slowAlloc(32, -1);
      v85 = v59;
      *(_DWORD *)v58 = 136315138;
      v88 = v59;
      v84 = v58 + 4;
      v60 = swift_retain(a3);
      v61 = UUID.uuidString.getter(v60);
      v63 = v62;
      swift_release(a3);
      v86 = sub_1001C56EC(v61, v63, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v84, v58 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v63);
      _os_log_impl((void *)&_mh_execute_header, v53, v57, "Received busy subevent from peer %s", v58, 0xCu);
      v64 = v85;
      swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v58, -1, -1);
    }
    else
    {
      swift_release_n(a3, 2);
    }

    sub_1001A37EC(0);
    v78 = swift_allocObject(&unk_100307230, 24, 7);
    swift_weakInit(v78 + 16, a3);
    v79 = swift_allocObject(&unk_100307280, 40, 7);
    *(_QWORD *)(v79 + 16) = v78;
    *(_BYTE *)(v79 + 24) = 0;
    *(_QWORD *)(v79 + 32) = v5;
    swift_retain(v78);
    swift_retain(v5);
    sub_1001A3C14(0, (uint64_t)sub_10006C2C4, v79);
    swift_release(v78);
    swift_release(v79);
    v80 = *(_DWORD *)(a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_btTimeExtensionInitiatedByLockCount);
    v81 = __CFADD__(v80, 1);
    v82 = v80 + 1;
    if (!v81)
    {
      *(_DWORD *)(a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_btTimeExtensionInitiatedByLockCount) = v82;
      return;
    }
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  sub_100063C8C(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(a1, a2);
  v13 = objc_msgSend((id)objc_opt_self(SESTLV), "TLVWithData:", isa);

  if (v13)
  {
    v18 = objc_msgSend(v13, "tag");
    if (v18 >= 0x100)
    {
LABEL_34:
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
      __break(1u);
      return;
    }
    if (v18 == 1)
    {
      v19 = a3;
      v20 = objc_msgSend(v13, "value");
      if (v20)
      {
        v21 = v20;
        v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v24 = v23;

        sub_1000723E8(v22, v24, 0);
        v65 = v25;
        a3 = v19;
        v66 = swift_retain_n(v19, 2);
        v67 = Logger.logObject.getter(v66);
        v69 = static os_log_type_t.error.getter(v67, v68);
        if (os_log_type_enabled(v67, v69))
        {
          v70 = swift_slowAlloc(15, -1);
          v85 = swift_slowAlloc(32, -1);
          v88 = v85;
          *(_DWORD *)v70 = 136315394;
          v84 = (uint8_t *)(v70 + 4);
          v71 = type metadata accessor for UUID(0);
          v72 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v73 = v71;
          a3 = v19;
          v74 = dispatch thunk of CustomStringConvertible.description.getter(v73, v72);
          v76 = v75;
          v86 = sub_1001C56EC(v74, v75, &v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v84, v70 + 12);
          swift_release_n(v19, 2);
          swift_bridgeObjectRelease(v76);
          *(_WORD *)(v70 + 12) = 256;
          LOBYTE(v86) = v65;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, (char *)&v86 + 1, v70 + 14, v70 + 15);
          _os_log_impl((void *)&_mh_execute_header, v67, v69, "Received general error from peer %s with value %hhu", (uint8_t *)v70, 0xFu);
          v77 = v85;
          swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v77, -1, -1);
          swift_slowDealloc(v70, -1, -1);
        }
        else
        {
          swift_release_n(v19, 2);
        }

        *(_DWORD *)(a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason) = 1;
        *(_BYTE *)(a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_hasError) = 1;
        if (qword_1003445A0 == -1)
          goto LABEL_29;
        goto LABEL_31;
      }
      goto LABEL_33;
    }
    v45 = v13;
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v48 = 67109120;
      LODWORD(v88) = objc_msgSend(v45, "tag");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, (char *)&v88 + 4, v48 + 4, v48 + 8);

      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Unknown/Unsupported event TLV with tag: %u", v48, 8u);
      swift_slowDealloc(v48, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    sub_100063C8C(a1, a2);
    swift_retain(a3);
    sub_100063C8C(a1, a2);
    v26 = swift_retain(a3);
    v27 = Logger.logObject.getter(v26);
    v29 = static os_log_type_t.error.getter(v27, v28);
    if (os_log_type_enabled(v27, v29))
    {
      v30 = swift_slowAlloc(22, -1);
      v85 = swift_slowAlloc(64, -1);
      v88 = v85;
      *(_DWORD *)v30 = 136315394;
      v84 = (uint8_t *)a3;
      sub_1001BD2CC(a1, a2);
      v32 = v31;
      v86 = v31;
      v33 = sub_100063D3C((uint64_t *)&unk_100346060);
      v34 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v35 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v33, v34);
      v37 = v36;
      swift_bridgeObjectRelease(v32);
      v86 = sub_1001C56EC(v35, v37, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease(v37);
      sub_100063CD0(a1, a2);
      sub_100063CD0(a1, a2);
      *(_WORD *)(v30 + 12) = 2080;
      v38 = v84;
      v39 = type metadata accessor for UUID(0);
      v40 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v39, v40);
      v43 = v42;
      v86 = sub_1001C56EC(v41, v42, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v30 + 14, v30 + 22);
      swift_release_n(v38, 2);
      swift_bridgeObjectRelease(v43);
      _os_log_impl((void *)&_mh_execute_header, v27, v29, "Could not process event notification %s from peer %s", (uint8_t *)v30, 0x16u);
      v44 = v85;
      swift_arrayDestroy(v85, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      sub_100063CD0(a1, a2);
      sub_100063CD0(a1, a2);
      swift_release_n(a3, 2);
    }
    v49 = sub_10006B828();
    v50 = swift_allocError(&type metadata for DSKError, v49, 0, 0);
    *v51 = 0;
    swift_willThrow(v50);
  }
}

void sub_1000793D4(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _BYTE v40[24];

  v38 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38, v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (uint64_t *)((char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = sub_10007E3D8(a1);
  if (qword_100344708 != -1)
    swift_once(&qword_100344708, sub_1001C2AE4);
  v14 = qword_100354E20;
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v15 = qword_100354EE8;
  *v13 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  swift_beginAccess(v14 + 32, v40, 0, 0);
  v17 = *(_QWORD *)(v14 + 32);
  v18 = sub_10007A4B0(1, v17);
  if (v18)
  {
    v19 = 3;
  }
  else
  {
    v18 = sub_10007A4B0(0, v17);
    if (v18)
    {
      v19 = 1;
    }
    else
    {
      v18 = sub_10007A4B0(2, v17);
      if (v18)
        v19 = 2;
      else
        v19 = 0;
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced4Lyon_preArmedTruncatedReaderIdentifiers) + 16))
    *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_lastTransactionIntent) = 2;
  if (a2 > 7u)
    v20 = 0xFFFF;
  else
    v20 = dword_100288C88[(char)a2];
  v21 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerStatus);
  v22 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_unsolicitedReaderStatusReportingValue);
  v23 = *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingDuration);
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_startTime + 8) & 1) != 0)
    goto LABEL_23;
  v24 = *(double *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_startTime);
  v25 = Date.init()(v18);
  v26 = Date.timeIntervalSince1970.getter(v25);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v38);
  v27 = v26 - v24;
  if ((~COERCE__INT64(v26 - v24) & 0x7FF0000000000000) == 0)
    goto LABEL_25;
  if (v27 <= -1.0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v27 >= 4294967300.0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v28 = __CFADD__(v23, v27);
  v23 += v27;
  if (!v28)
  {
LABEL_23:
    v29 = v21 | (v22 << 16);
    v30 = objc_opt_self(SESDAnalyticsLogger);
    v31 = *(unsigned int *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_lastTransactionIntent);
    sub_100099908(2u, *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingAttemptsCount));
    v33 = v32;
    sub_100099908(2u, *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedRangingCount));
    v35 = v34;
    sub_100099908(2u, v23);
    sub_10004B560(v30, v39, v29, v20, v31, v19, v33, v35, v36);
    return;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_100079720(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t result;
  uint32_t *p_cb;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38[2];
  _BYTE v39[24];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v38[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    swift_beginAccess(a1 + 16, v39, 0, 0);
    result = swift_weakLoadStrong(a1 + 16);
    if (!result)
      return result;
    v4 = result;
    if (*(_BYTE *)(result + OBJC_IVAR____TtC10seserviced4Peer_isConnected) == 1)
    {
      p_cb = &OBJC_PROTOCOL___SESDarwinNotificationDelegate.cb;
      if ((a2 & 1) == 0)
      {
        v13 = swift_retain_n(result, 2);
        v14 = Logger.logObject.getter(v13);
        v16 = static os_log_type_t.error.getter(v14, v15);
        if (os_log_type_enabled(v14, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc(12, -1);
          v18 = swift_slowAlloc(32, -1);
          *(_DWORD *)v17 = 136315138;
          v38[0] = v18;
          v19 = swift_retain(v4);
          v20 = UUID.uuidString.getter(v19);
          v22 = v21;
          swift_release(v4);
          v37 = sub_1001C56EC(v20, v22, v38);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v17 + 4, v17 + 12);
          swift_release_n(v4, 2);
          swift_bridgeObjectRelease(v22);
          _os_log_impl((void *)&_mh_execute_header, v14, v16, "Timer ended for incoming message for peer %s", v17, 0xCu);
          swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
          v23 = v18;
          p_cb = (_DWORD *)(&OBJC_PROTOCOL___SESDarwinNotificationDelegate + 64);
          swift_slowDealloc(v23, -1, -1);
          swift_slowDealloc(v17, -1, -1);
        }
        else
        {
          swift_release_n(v4, 2);
        }

        v30 = sub_10006B828();
        v8 = (_QWORD *)swift_allocError(&type metadata for DSKError, v30, 0, 0);
        *v31 = 0;
        v32 = swift_willThrow(v8);
        v33 = Logger.logObject.getter(v32);
        v35 = static os_log_type_t.error.getter(v33, v34);
        if (os_log_type_enabled(v33, v35))
        {
          v36 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v36 = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, v35, "Could not send busy subevent outgoing message, disconnecting", v36, 2u);
          swift_slowDealloc(v36, -1, -1);
        }

        if (*((_QWORD *)p_cb + 173) == -1)
          goto LABEL_19;
        goto LABEL_22;
      }
      v24 = Logger.logObject.getter(result);
      v28 = static os_log_type_t.info.getter(v24, v25, v26, v27);
      if (os_log_type_enabled(v24, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v28, "Timer ended for outgoing message, sending busy subevent", v29, 2u);
        swift_slowDealloc(v29, -1, -1);
      }

      if (qword_100344568 != -1)
        swift_once(&qword_100344568, sub_100073158);
      sub_100079B54(v4);
    }
    return swift_release(v4);
  }
  __break(1u);
LABEL_22:
  swift_once(&qword_100344568, sub_100073158);
LABEL_19:
  sub_10007CD7C(v4, 0);
  swift_release(v4);
  return swift_errorRelease(v8);
}

void sub_100079B54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v1;
  if (qword_100344568 != -1)
    swift_once(&qword_100344568, sub_100073158);
  v5 = objc_msgSend((id)objc_opt_self(SESTLV), "TLVWithTag:value:", 0, 0);
  if (!v5)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v6 = v5;
  v7 = objc_msgSend(v5, "asData");

  if (v7)
  {
    v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    sub_10007C8D8(2, 0, v8, v10);
    v12 = v11;
    v14 = v13;
    sub_100063CD0(v8, v10);
    if (qword_1003445A0 != -1)
      swift_once(&qword_1003445A0, sub_1000B26B0);
    sub_1000ADCAC(v12, v14, a1);
    if (v2)
      goto LABEL_10;
    v15 = *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_btTimeExtensionInitiatedByDeviceCount);
    v16 = __CFADD__(v15, 1);
    v17 = v15 + 1;
    if (!v16)
    {
      *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_btTimeExtensionInitiatedByDeviceCount) = v17;
      v18 = swift_allocObject(&unk_100307230, 24, 7);
      swift_weakInit(v18 + 16, a1);
      v19 = swift_allocObject(&unk_100307258, 40, 7);
      *(_QWORD *)(v19 + 16) = v18;
      *(_BYTE *)(v19 + 24) = 1;
      *(_QWORD *)(v19 + 32) = v3;
      swift_retain(v18);
      swift_retain(v3);
      sub_1001A3C14(1, (uint64_t)sub_10006B8E0, v19);
      swift_release(v18);
      swift_release(v19);
LABEL_10:
      sub_100063CD0(v12, v14);
      return;
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
}

void sub_100079D58(char a1, unint64_t a2)
{
  __objc2_class **v2;
  uint64_t v3;
  __objc2_class **v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  id v53;
  NSObject *v54;
  uint64_t v55;
  os_log_type_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  void *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint8_t *v73;
  os_log_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  os_log_t v79;
  int v80;
  uint64_t v81;
  char *v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  __objc2_class **v89;
  char *v90;
  uint64_t v91;
  int64_t v92;
  uint64_t v93;
  _QWORD v94[6];
  __objc2_class **v95;

  v4 = v2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (uint64_t *)((char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) != 0)
  {
    if (qword_1003447A0 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  v14 = swift_once(&qword_1003447A0, sub_1001EDCA4);
LABEL_5:
  __chkstk_darwin(v14, v15);
  *(&v77 - 4) = (uint64_t)sub_10007BEAC;
  *(&v77 - 3) = 0;
  *(&v77 - 2) = v16;
  v18 = v17 + 4;
  os_unfair_lock_lock(v17 + 4);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10006F860, &v95);
  if (v3)
  {
    os_unfair_lock_unlock(v18);
    __break(1u);
  }
  else
  {
    v19 = 0;
    os_unfair_lock_unlock(v18);
    v20 = (uint64_t)v95;
    if ((a1 & 1) != 0)
    {
      if (qword_1003446F0 != -1)
        goto LABEL_56;
      while (1)
      {
        v21 = objc_msgSend((id)a2, "publicKeyIdentifier");
        v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
        v24 = v23;

        v25 = sub_1001B28A8(v22, v24);
        sub_100063CD0(v22, v24);
        if (v19)
        {
          v26 = v20;
          goto LABEL_11;
        }
        v85 = 0;
        v86 = (id)a2;
        v27 = *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC10seserviced4Lyon_preArmedTruncatedReaderIdentifiers);
        v88 = OBJC_IVAR____TtC10seserviced4Lyon_preArmedTruncatedReaderIdentifiers;
        v89 = v4;
        *(__objc2_class **)((char *)v4 + OBJC_IVAR____TtC10seserviced4Lyon_preArmedTruncatedReaderIdentifiers) = (__objc2_class *)v25;
        v28 = (_QWORD *)swift_bridgeObjectRelease(v27);
        if ((v20 & 0xC000000000000001) != 0)
        {
          v30 = v20 < 0 ? v20 : v20 & 0xFFFFFFFFFFFFFF8;
          v31 = __CocoaSet.makeIterator()(v30);
          v32 = type metadata accessor for Peer(0);
          v33 = sub_1000639EC((unint64_t *)&qword_100347720, type metadata accessor for Peer, (uint64_t)&unk_10028BFA8);
          v28 = Set.Iterator.init(_cocoa:)(v94, v31, v32, v33);
          v20 = v94[0];
          v34 = v94[1];
          v35 = v94[2];
          v36 = v94[3];
          a2 = v94[4];
        }
        else
        {
          v36 = 0;
          v37 = -1 << *(_BYTE *)(v20 + 32);
          v34 = v20 + 56;
          v38 = ~v37;
          v39 = -v37;
          v40 = v39 < 64 ? ~(-1 << v39) : -1;
          a2 = v40 & *(_QWORD *)(v20 + 56);
          v35 = v38;
        }
        v84 = v35;
        v91 = v20 & 0x7FFFFFFFFFFFFFFFLL;
        v92 = (unint64_t)(v35 + 64) >> 6;
        *(_QWORD *)&v29 = 136315394;
        v83 = v29;
        v82 = (char *)&type metadata for Any + 8;
        v90 = (char *)&type metadata for Swift.AnyObject + 8;
        v87 = v34;
        while (v20 < 0)
        {
          v43 = __CocoaSet.Iterator.next()(v28);
          if (!v43)
            goto LABEL_52;
          v44 = v43;
          v93 = v43;
          v45 = type metadata accessor for Peer(0);
          swift_unknownObjectRetain(v44);
          swift_dynamicCast(&v95, &v93, v90, v45, 7);
          v4 = v95;
          swift_unknownObjectRelease(v44);
          v19 = v36;
          v41 = a2;
          if (!v4)
            goto LABEL_52;
LABEL_47:
          if (*v4 == _TtC10seserviced8LyonPeer
            && *((_BYTE *)v4 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) == 1)
          {
            v49 = *(uint64_t *)((char *)v89 + v88);
            v50 = *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC10seserviced8LyonPeer_truncatedReaderGroupIdentifier);
            v51 = *(unint64_t *)((char *)v4
                                      + OBJC_IVAR____TtC10seserviced8LyonPeer_truncatedReaderGroupIdentifier
                                      + 8);
            swift_retain(v4);
            swift_bridgeObjectRetain(v49);
            sub_100063C8C(v50, v51);
            v52 = sub_10007A510(v50, v51, v49);
            sub_100063CD0(v50, v51);
            swift_bridgeObjectRelease(v49);
            if ((v52 & 1) != 0)
            {
              *(_DWORD *)((char *)v4 + OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason) = 4;
              swift_retain_n(v4, 2);
              v53 = v86;
              v54 = Logger.logObject.getter(v53);
              v56 = static os_log_type_t.error.getter(v54, v55);
              v57 = v56;
              if (os_log_type_enabled(v54, v56))
              {
                v58 = swift_slowAlloc(22, -1);
                v81 = swift_slowAlloc(64, -1);
                v95 = (__objc2_class **)v81;
                *(_DWORD *)v58 = v83;
                v80 = v57;
                v59 = swift_retain(v4);
                v60 = UUID.uuidString.getter(v59);
                v79 = v54;
                v62 = v61;
                swift_release(v4);
                v63 = sub_1001C56EC(v60, v62, (uint64_t *)&v95);
                v78 = v58;
                *(_QWORD *)(v58 + 4) = v63;
                swift_release_n(v4, 2);
                swift_bridgeObjectRelease(v62);
                *(_WORD *)(v58 + 12) = 2080;
                v64 = objc_msgSend(v53, "publicKeyIdentifier");
                v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v64);
                v66 = v53;
                v68 = v67;

                v69 = Data.description.getter(v65, v68);
                v71 = v70;
                sub_100063CD0(v65, v68);
                v72 = sub_1001C56EC(v69, v71, (uint64_t *)&v95);
                v73 = (uint8_t *)v78;
                *(_QWORD *)(v78 + 14) = v72;

                swift_bridgeObjectRelease(v71);
                v74 = v79;
                v75 = v73;
                _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v80, "Disconnecting %s since %s is pre armed", v73, 0x16u);
                v76 = v81;
                swift_arrayDestroy(v81, 2, v82);
                swift_slowDealloc(v76, -1, -1);
                swift_slowDealloc(v75, -1, -1);

              }
              else
              {

                swift_release_n(v4, 2);
              }
              sub_10007CD7C((uint64_t)v4, 0);
            }
            swift_release(v4);
            v34 = v87;
          }
          v28 = (_QWORD *)swift_release(v4);
          v36 = v19;
          a2 = v41;
        }
        if (a2)
          break;
        v46 = v36 + 1;
        if (!__OFADD__(v36, 1))
        {
          if (v46 >= v92)
            goto LABEL_52;
          v47 = *(_QWORD *)(v34 + 8 * v46);
          v19 = v36 + 1;
          if (!v47)
          {
            v19 = v36 + 2;
            if (v36 + 2 >= v92)
              goto LABEL_52;
            v47 = *(_QWORD *)(v34 + 8 * v19);
            if (!v47)
            {
              v19 = v36 + 3;
              if (v36 + 3 >= v92)
                goto LABEL_52;
              v47 = *(_QWORD *)(v34 + 8 * v19);
              if (!v47)
              {
                v19 = v36 + 4;
                if (v36 + 4 >= v92)
                  goto LABEL_52;
                v47 = *(_QWORD *)(v34 + 8 * v19);
                if (!v47)
                {
                  v48 = v36 + 5;
                  while (v92 != v48)
                  {
                    v47 = *(_QWORD *)(v34 + 8 * v48++);
                    if (v47)
                    {
                      v19 = v48 - 1;
                      goto LABEL_45;
                    }
                  }
LABEL_52:
                  sub_10007EF58(v20);
                  return;
                }
              }
            }
          }
LABEL_45:
          v41 = (v47 - 1) & v47;
          v42 = __clz(__rbit64(v47)) + (v19 << 6);
          goto LABEL_46;
        }
        __break(1u);
LABEL_56:
        swift_once(&qword_1003446F0, sub_1001B3B74);
      }
      v41 = (a2 - 1) & a2;
      v42 = __clz(__rbit64(a2)) | (v36 << 6);
      v19 = v36;
LABEL_46:
      v4 = *(__objc2_class ***)(*(_QWORD *)(v20 + 48) + 8 * v42);
      swift_retain(v4);
      if (!v4)
        goto LABEL_52;
      goto LABEL_47;
    }
    swift_bridgeObjectRelease(v95);
    v26 = *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC10seserviced4Lyon_preArmedTruncatedReaderIdentifiers);
    *(__objc2_class **)((char *)v4 + OBJC_IVAR____TtC10seserviced4Lyon_preArmedTruncatedReaderIdentifiers) = (__objc2_class *)_swiftEmptyArrayStorage;
LABEL_11:
    swift_bridgeObjectRelease(v26);
  }
}

BOOL sub_10007A4B0(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = result;
  if (*(_BYTE *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 33; ; ++i)
  {
    v5 = i - 31;
    if (__OFADD__(i - 32, 1))
      break;
    v6 = *(unsigned __int8 *)(a2 + i);
    result = v6 == v3;
    if (v6 == v3 || v5 == v2)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_10007A510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain(a3);
    __asm { BR              X8 }
  }
  return 0;
}

void sub_10007AE98(NSObject *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  id v10;
  uint64_t (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  unint64_t v23;
  Class isa;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  id v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  uint64_t v49;
  id v50;
  NSObject *v51;
  void (*v52)(_QWORD *, uint64_t, uint64_t);
  _BYTE v53[56];

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (NSObject **)((char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v3 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v10 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8);
  v12 = v11(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_35:
    swift_once(&qword_100344598, sub_10009F9BC);
    goto LABEL_7;
  }
  v13 = Logger.logObject.getter(v12);
  v17 = static os_log_type_t.info.getter(v13, v14, v15, v16);
  if (os_log_type_enabled(v13, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v17, "Lyon onConnection", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = objc_opt_self(SESDAnalyticsLogger);
  v20 = sub_100063D3C(&qword_100344CD0);
  inited = swift_initStackObject(v20, v53);
  *(_OWORD *)(inited + 16) = xmmword_1002888E0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("btConnectionCount"));
  *(_QWORD *)(inited + 40) = v22;
  sub_10006C25C(0, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
  *(NSNumber *)(inited + 48) = NSNumber.init(integerLiteral:)(1);
  v23 = sub_10017C4A8(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v23);
  sub_10004A724(v19, isa);

  if (qword_100344598 != -1)
    goto LABEL_35;
LABEL_7:
  v25 = qword_100354BB0;
  v26 = qword_100354EE8;
  *v6 = qword_100354EE8;
  v9(v6, v8, v2);
  v27 = (id)v26;
  LOBYTE(v26) = _dispatchPreconditionTest(_:)(v6);
  v28 = v11(v6, v2);
  if ((v26 & 1) != 0)
  {
    if (*(_BYTE *)(v25 + 16) == 1)
    {
      if (qword_1003445A0 != -1)
        swift_once(&qword_1003445A0, sub_1000B26B0);
      v29 = qword_100354BC8;
      swift_retain(a1);
      swift_retain(v25);
      sub_1000DC57C((uint64_t)a1, v29, a1, v25);
      swift_release(a1);
      swift_release(v25);
    }
    else
    {
      v30 = Logger.logObject.getter(v28);
      v32 = static os_log_type_t.error.getter(v30, v31);
      if (os_log_type_enabled(v30, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v32, "Not running", v33, 2u);
        swift_slowDealloc(v33, -1, -1);
      }

    }
    v34 = *(unint64_t *)((char *)&a1[1].isa + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    if (v34 >> 60 == 15)
    {
      v2 = 0;
      goto LABEL_17;
    }
    v52 = *(void (**)(_QWORD *, uint64_t, uint64_t))((char *)&a1->isa
                                                            + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    sub_100063C8C((uint64_t)v52, v34);
    if (qword_1003446F0 != -1)
      swift_once(&qword_1003446F0, sub_1001B3B74);
    v35 = qword_100354EE8;
    *v6 = qword_100354EE8;
    v9(v6, v8, v2);
    v36 = (id)v35;
    LOBYTE(v35) = _dispatchPreconditionTest(_:)(v6);
    v11(v6, v2);
    if ((v35 & 1) != 0)
    {
      v51 = a1;
      if (qword_100344608 == -1)
        goto LABEL_24;
    }
    else
    {
      __break(1u);
    }
    swift_once(&qword_100344608, sub_100141A78);
LABEL_24:
    v37 = qword_100354CE0;
    v38 = sub_1000E848C(0xD000000000000012, 0x80000001002BA410);
    if (v39 >> 60 == 15)
    {
      __break(1u);
      return;
    }
    v40 = v38;
    v41 = v39;
    v42 = (void *)qword_100354EE8;
    *v6 = qword_100354EE8;
    v9(v6, v8, v2);
    v43 = v42;
    v44 = _dispatchPreconditionTest(_:)(v6);
    v11(v6, v2);
    if ((v44 & 1) != 0)
    {
      v9 = v52;
      if ((*(_BYTE *)(v37 + OBJC_IVAR____TtC10seserviced10DSKExpress_debugBypassExpress) & 1) != 0)
        goto LABEL_30;
      v45 = *(_QWORD *)(v37 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys);
      sub_10006BA34((uint64_t)v52, v34);
      sub_10006BA34(v40, v41);
      swift_bridgeObjectRetain(v45);
      v2 = 0;
      v47 = sub_10007D82C(v46);
      sub_10006B9B4(v40, v41);
      sub_10006B9B4((uint64_t)v9, v34);
      swift_bridgeObjectRelease(v45);
      if ((v47 & 1) == 0)
      {
LABEL_30:
        sub_10006B9B4(v40, v41);
      }
      else
      {
        v48 = *(unsigned __int8 *)(v37 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState);
        sub_10006B9B4(v40, v41);
        if (v48 == 2)
        {
          sub_10006B9B4((uint64_t)v9, v34);
          a1 = v51;
LABEL_17:
          *((_BYTE *)&a1->isa + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) = 1;
          if (qword_100344708 == -1)
            goto LABEL_18;
          goto LABEL_37;
        }
      }
      v40 = (uint64_t)v51;
      if (qword_100344558 == -1)
      {
LABEL_32:
        v49 = *(_QWORD *)(qword_100354A68 + OBJC_IVAR____TtC10seserviced6LyonSE_urskSlotManager);
        v50 = (id)qword_100354A68;
        sub_10006BABC(v40, v49, v50);

        sub_10006B9B4((uint64_t)v9, v34);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once(&qword_100344558, sub_10006449C);
    goto LABEL_32;
  }
  __break(1u);
LABEL_37:
  swift_once(&qword_100344708, sub_1001C2AE4);
LABEL_18:
  sub_1001C1168((uint64_t)a1);
  if (v2)
  {
    sub_10007CD7C((uint64_t)a1, 0);
    swift_errorRelease(v2);
  }
}

void sub_10007B4D4(uint64_t a1)
{
  if (qword_1003445A0 != -1)
    swift_once(&qword_1003445A0, sub_1000B26B0);
  sub_1000AD358(a1);
}

void sub_10007B528(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    v9 = swift_retain_n(a1, 2);
    v10 = Logger.logObject.getter(v9);
    v14 = static os_log_type_t.info.getter(v10, v11, v12, v13);
    if (os_log_type_enabled(v10, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      *(_DWORD *)v15 = 136315138;
      v22 = v16;
      v17 = swift_retain(a1);
      v18 = UUID.uuidString.getter(v17);
      v20 = v19;
      swift_release(a1);
      v21 = sub_1001C56EC(v18, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v15 + 4, v15 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v10, v14, "Lyon onDisconnection for %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      swift_release_n(a1, 2);
    }

    sub_10007E428((uint64_t)a1);
    if (qword_100344558 == -1)
      goto LABEL_8;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344558, sub_10006449C);
LABEL_8:
  sub_10006B2B0(a1);
  if (qword_100344598 != -1)
    swift_once(&qword_100344598, sub_10009F9BC);
  sub_10009F390((uint64_t)a1);
}

uint64_t sub_10007B7E4(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100344698 != -1)
    swift_once(&qword_100344698, sub_100182C20);
  if (byte_100354D78 == 1)
  {
    if (qword_1003447B8 != -1)
      swift_once(&qword_1003447B8, sub_1001EEFA4);
    v21 = qword_100354EE8;
    v14 = swift_allocObject(&unk_1003072F8, 32, 7);
    *(_QWORD *)(v14 + 16) = a1;
    *(_QWORD *)(v14 + 24) = a2;
    aBlock[4] = sub_10007F054;
    v24 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100071C98;
    aBlock[3] = &unk_100307310;
    v15 = _Block_copy(aBlock);
    v16 = swift_retain(a2);
    static DispatchQoS.unspecified.getter(v16);
    v22 = _swiftEmptyArrayStorage;
    v17 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v18 = sub_100063D3C((uint64_t *)&unk_100346200);
    v19 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v4, v17);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v8, v15);
    _Block_release(v15);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return swift_release(v24);
  }
  else
  {
    if (qword_100344570 != -1)
      swift_once(&qword_100344570, sub_100073194);
    objc_msgSend((id)qword_100344E08, "invalidate");
    return a1(1);
  }
}

uint64_t sub_10007BA7C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;

  v1 = (uint64_t (*)(uint64_t))a1;
  if (qword_1003447B0 != -1)
    a1 = swift_once(&qword_1003447B0, sub_1001EEF58);
  v2 = Logger.logObject.getter(a1);
  v6 = static os_log_type_t.info.getter(v2, v3, v4, v5);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v6, "Posting CA Aliro Daily Transaction Statistics", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = objc_opt_self(SESDAnalyticsLogger);
  sub_10004AAB4(v8);
  return v1(1);
}

uint64_t sub_10007BB74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10seserviced4Lyon_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Lyon_preArmedTruncatedReaderIdentifiers));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10007BBD4()
{
  return type metadata accessor for Lyon(0);
}

uint64_t type metadata accessor for Lyon(uint64_t a1)
{
  return sub_10007BBF0(a1, qword_100345158, (uint64_t)&nominal type descriptor for Lyon);
}

uint64_t sub_10007BBF0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_10007BC24(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100288B30;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for DSKExpress.ExpressState(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for LyonSessionState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LyonSessionState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_10007BDA0 + 4 * byte_100288AE5[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_10007BDD4 + 4 * byte_100288AE0[v4]))();
}

uint64_t sub_10007BDD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007BDDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007BDE4);
  return result;
}

uint64_t sub_10007BDF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10007BDF8);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_10007BDFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007BE04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007BE10(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10007BE1C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for LyonSessionState()
{
  return &type metadata for LyonSessionState;
}

unint64_t sub_10007BE38()
{
  unint64_t result;

  result = qword_1003451F8;
  if (!qword_1003451F8)
  {
    result = swift_getWitnessTable(&unk_100288C4C, &type metadata for LyonSessionState);
    atomic_store(result, (unint64_t *)&qword_1003451F8);
  }
  return result;
}

BOOL sub_10007BE84(id *a1)
{
  return objc_msgSend(*a1, "endPointType") == (id)4;
}

BOOL sub_10007BEAC(_QWORD *a1)
{
  return *(_BYTE *)(*a1 + OBJC_IVAR____TtC10seserviced4Peer_type) == 3;
}

_BYTE *sub_10007BECC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_10007C4B4(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_10007C574((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_10007C5EC((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_10007BF40()
{
  return Data._Representation.append(contentsOf:)();
}

uint64_t sub_10007BF68(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x10007BFC8);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_10007BF80 + dword_10007BFCC[a4 >> 62]))(v5);
}

uint64_t sub_10007BFDC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_10007BFEC + dword_10007C094[a4 >> 62]))();
}

uint64_t sub_10007C000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x10007C08CLL);
  }
  return ((uint64_t (*)(void))((char *)&loc_10007C03C + dword_10007C0A4[a3]))();
}

uint64_t sub_10007C0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_10016A374((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_10007C188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_10016A374(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_10007C23C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_10007C288()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_10007C2BC + dword_10007C494[v0 >> 62]))();
}

uint64_t sub_10007C2CC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_10007C4B4(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;

  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_10007C574(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = type metadata accessor for Data.RangeReference(0);
    result = swift_allocObject(v6, 32, 7);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v3;
  }
  return result;
}

uint64_t sub_10007C5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x80000000) == 0)
    return v3 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10007C66C(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = sub_100063D3C(&qword_100345220);
  v10 = sub_10007EF60((unint64_t *)&qword_100345228, &qword_100345220, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v8[0] = a1;
  v2 = sub_10006BA78(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain(a1);
  sub_10007BECC(v3, v4, &v7);
  v5 = v7;
  sub_10006BA9C(v8);
  return v5;
}

uint64_t sub_10007C71C(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      v2 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(capacity:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        v3 = type metadata accessor for Data.RangeReference(0);
        result = swift_allocObject(v3, 32, 7);
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10007C7B0(char a1, char a2, unsigned int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  __int16 v9;
  __int16 *v10;
  __int16 **v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  LOBYTE(v9) = a1;
  v12 = &type metadata for UnsafeRawBufferPointer;
  v13 = &protocol witness table for UnsafeRawBufferPointer;
  v10 = &v9;
  v11 = (__int16 **)((char *)&v9 + 1);
  v5 = sub_10006BA78(&v10, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v5, v5[1]);
  sub_10006BA9C(&v10);
  LOBYTE(v9) = a2;
  v12 = &type metadata for UnsafeRawBufferPointer;
  v13 = &protocol witness table for UnsafeRawBufferPointer;
  v10 = &v9;
  v11 = (__int16 **)((char *)&v9 + 1);
  v6 = sub_10006BA78(&v10, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v6, v6[1]);
  sub_10006BA9C(&v10);
  v9 = bswap32(a3) >> 16;
  v12 = &type metadata for UnsafeRawBufferPointer;
  v13 = &protocol witness table for UnsafeRawBufferPointer;
  v10 = &v9;
  v11 = &v10;
  v7 = sub_10006BA78(&v10, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v7, v7[1]);
  sub_10006BA9C(&v10);
  return v14;
}

void sub_10007C8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void sub_10007C920()
{
  uint64_t v0;

  if (!__OFADD__(BYTE6(v0), 4))
  {
    sub_10007C71C(BYTE6(v0) + 4);
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x10007CA04);
}

uint64_t sub_10007CAB8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (*(unsigned __int8 *)(a5 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) >= 5u)
    __asm { BR              X10 }
  if (qword_100344568 != -1)
    swift_once(&qword_100344568, sub_100073158);
  sub_100063C8C(a3, a4);
  sub_10006BA34(0, 0xF000000000000000);
  sub_10007C8D8(a1, a2, a3, a4);
  v10 = v9;
  v12 = v11;
  sub_100063CD0(a3, a4);
  if (qword_1003445A0 != -1)
    swift_once(&qword_1003445A0, sub_1000B26B0);
  sub_1000ADCAC(v10, v12, a5);
  sub_10006B9B4(0, 0xF000000000000000);
  return sub_100063CD0(v10, v12);
}

void sub_10007CD7C(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD aBlock[5];
  uint64_t v45;

  v40 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40, v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v41 = *(_QWORD *)(v8 - 8);
  v42 = v8;
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for DispatchTime(0);
  v12 = *(_QWORD *)(v39 - 8);
  v14 = __chkstk_darwin(v39, v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v35 - v18;
  *(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_hasError) = 1;
  v20 = objc_msgSend((id)objc_opt_self(SESTLV), "TLVWithTag:unsignedChar:", 1, a2);
  if (!v20)
  {
    __break(1u);
    goto LABEL_11;
  }
  v21 = v20;
  v22 = objc_msgSend(v20, "asData");

  if (!v22)
  {
LABEL_11:
    __break(1u);
    return;
  }
  v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  if (qword_100344568 != -1)
    swift_once(&qword_100344568, sub_100073158);
  v37 = v23;
  sub_10007CAB8(2, 0, v23, v25, a1);
  if (!*(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason))
    *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason) = 2;
  v36 = v25;
  v38 = v4;
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  static DispatchTime.now()();
  + infix(_:_:)(v16, 0.5);
  v26 = *(void (**)(char *, uint64_t))(v12 + 8);
  v27 = v39;
  v26(v16, v39);
  aBlock[4] = sub_10007EEC0;
  v45 = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_1003071D0;
  v28 = _Block_copy(aBlock);
  v29 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v29);
  v43 = _swiftEmptyArrayStorage;
  v30 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_100063D3C((uint64_t *)&unk_100346200);
  v32 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
  v33 = v31;
  v34 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v33, v32, v40, v30);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v19, v11, v7, v28);
  _Block_release(v28);
  sub_100063CD0(v37, v36);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v34);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v42);
  v26(v19, v27);
  swift_release(v45);
}

uint64_t sub_10007D104(uint64_t result)
{
  if (result >= 0xFu)
    return 15;
  else
    return result;
}

uint64_t sub_10007D118(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __int16 v51;

  v7 = v6;
  v41 = a6;
  v42 = a4;
  v43 = a5;
  v45 = a3;
  v46 = a1;
  v44 = a2;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = OBJC_IVAR____TtC10seserviced8LyonPeer_secureChannel;
  v19 = type metadata accessor for LyonBLESecureChannel();
  v20 = swift_allocObject(v19, 80, 7);
  v47 = 0xD000000000000014;
  v48 = 0x80000001002BA5B0;
  v49 = 0xD000000000000022;
  v50 = 0x80000001002BA5D0;
  v51 = 0;
  v21 = swift_retain(v6);
  sub_10015348C(v21);
  *(_BYTE *)(v20 + 16) = v22 & 1;
  v40 = xmmword_1002888D0;
  *(_OWORD *)(v20 + 24) = xmmword_1002888D0;
  *(_OWORD *)(v20 + 40) = xmmword_1002888D0;
  *(_OWORD *)(v20 + 56) = xmmword_1002888D0;
  *(_QWORD *)(v20 + 72) = 0x100000001;
  *(_QWORD *)(v6 + v18) = v20;
  v23 = OBJC_IVAR____TtC10seserviced8LyonPeer_stepUpHelper;
  *(_QWORD *)(v7 + v23) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LyonStepUpHelper()), "init");
  v24 = OBJC_IVAR____TtC10seserviced8LyonPeer_timeExtension;
  v25 = type metadata accessor for LyonTimeExtension();
  swift_allocObject(v25, 48, 7);
  *(_QWORD *)(v7 + v24) = sub_1001A40C4();
  *(_BYTE *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) = 0;
  *(_BYTE *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerStatus) = 3;
  *(_BYTE *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_unsolicitedReaderStatusReportingValue) = 0;
  *(_BYTE *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_hasError) = 0;
  v26 = v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_selectedProtocolVersion;
  *(_WORD *)v26 = 0;
  *(_BYTE *)(v26 + 2) = 1;
  v27 = v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID;
  *(_DWORD *)v27 = 0;
  *(_BYTE *)(v27 + 4) = 1;
  *(_OWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier) = v40;
  v28 = OBJC_IVAR____TtC10seserviced8LyonPeer_connectionTime;
  v29 = Date.init()();
  v30 = Date.timeIntervalSince1970.getter(v29);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  *(double *)(v7 + v28) = v30;
  v31 = v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_startTime;
  *(_QWORD *)v31 = 0;
  *(_BYTE *)(v31 + 8) = 1;
  v32 = v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_seStartTime;
  *(_QWORD *)v32 = 0;
  *(_BYTE *)(v32 + 8) = 1;
  v33 = v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_firstRangingStart;
  *(_QWORD *)v33 = 0;
  *(_BYTE *)(v33 + 8) = 1;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_stepUpDuration) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingDuration) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_seDuration) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_btTimeExtensionInitiatedByLockCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_btTimeExtensionInitiatedByDeviceCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_timeSyncProcedure1Count) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedRangingCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedRangingCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedSuspendRangingCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedSuspendRangingCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingAttemptsCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockFromOtherSourceCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_transactionMode) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_lastTransactionIntent) = 0;
  *(_BYTE *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_peripheralTXPower) = v41;
  v34 = (uint64_t *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_truncatedReaderGroupIdentifier);
  v35 = v42;
  v36 = v43;
  *v34 = v42;
  v34[1] = v36;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerKeyType) = v44;
  *(_QWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_endpointType) = v45;
  sub_100063C8C(v35, v36);
  swift_release(v7);
  v37 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v46, v8);
  v38 = sub_1001A3188((uint64_t)v12);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v37, v8);
  return v38;
}

void sub_10007D4F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD aBlock[6];

  v0 = type metadata accessor for DispatchPredicate(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (_QWORD *)((char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v5 = qword_100354EE8;
  *v4 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v0);
  v6 = (id)v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v1 + 8))(v4, v0);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (qword_100344570 != -1)
LABEL_7:
    swift_once(&qword_100344570, sub_100073194);
  v7 = (void *)qword_100344E08;
  objc_msgSend((id)qword_100344E08, "setPreregistered:", 1);
  aBlock[4] = sub_10007B7E4;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10016D660;
  aBlock[3] = &unk_1003072C0;
  v8 = _Block_copy(aBlock);
  objc_msgSend(v7, "scheduleWithBlock:", v8);
  _Block_release(v8);
}

uint64_t sub_10007D674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v16;

  v0 = type metadata accessor for DispatchPredicate(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (uint64_t *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v5 = qword_100354EE8;
  *v4 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v0);
  v6 = (id)v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(v1 + 8))(v4, v0);
  if ((v5 & 1) != 0)
  {
    if (qword_100344698 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  v7 = swift_once(&qword_100344698, sub_100182C20);
LABEL_5:
  v8 = byte_100354D78;
  if ((byte_100354D78 & 1) == 0)
  {
    if (qword_1003447B0 != -1)
      v7 = swift_once(&qword_1003447B0, sub_1001EEF58);
    v9 = Logger.logObject.getter(v7);
    v13 = static os_log_type_t.info.getter(v9, v10, v11, v12);
    if (os_log_type_enabled(v9, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v13, "Lyon can't start because UWB is not supported on this device", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

  }
  return v8;
}

uint64_t sub_10007D82C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[5];

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for DSKExpress.ExpressKey();
    v5 = sub_1000639EC(&qword_100345218, (uint64_t (*)(uint64_t))type metadata accessor for DSKExpress.ExpressKey, (uint64_t)&unk_10028ABE0);
    v6 = Set.Iterator.init(_cocoa:)(v28, v3, v4, v5);
    v1 = v28[0];
    v25 = v28[1];
    v7 = v28[2];
    v8 = v28[3];
    v9 = v28[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v25 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v24 = (unint64_t)(v7 + 64) >> 6;
  v13 = v8;
  if ((v1 & 0x8000000000000000) == 0)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9)) | (v8 << 6);
      goto LABEL_27;
    }
    v19 = v8 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      JUMPOUT(0x10007E2C4);
    }
    if (v19 < v24)
    {
      v20 = *(_QWORD *)(v25 + 8 * v19);
      if (v20)
      {
LABEL_26:
        v14 = __clz(__rbit64(v20)) + (v19 << 6);
LABEL_27:
        v18 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v14);
        swift_retain(v18);
        if (v18)
LABEL_28:
          __asm { BR              X10 }
        goto LABEL_35;
      }
      v21 = v13 + 2;
      if (v13 + 2 < v24)
      {
        v20 = *(_QWORD *)(v25 + 8 * v21);
        if (v20)
          goto LABEL_25;
        v21 = v13 + 3;
        if (v13 + 3 >= v24)
          goto LABEL_36;
        v20 = *(_QWORD *)(v25 + 8 * v21);
        if (v20)
        {
LABEL_25:
          v19 = v21;
          goto LABEL_26;
        }
        v21 = v13 + 4;
        if (v13 + 4 < v24)
        {
          v20 = *(_QWORD *)(v25 + 8 * v21);
          if (v20)
            goto LABEL_25;
          v19 = v13 + 5;
          if (v13 + 5 < v24)
          {
            v20 = *(_QWORD *)(v25 + 8 * v19);
            if (!v20)
            {
              v22 = v13 + 6;
              do
              {
                if (v24 == v22)
                  goto LABEL_36;
                v20 = *(_QWORD *)(v25 + 8 * v22++);
              }
              while (!v20);
              v19 = v22 - 1;
            }
            goto LABEL_26;
          }
        }
      }
    }
LABEL_36:
    v16 = 0;
    goto LABEL_37;
  }
  v15 = __CocoaSet.Iterator.next()(v6);
  v16 = v15;
  if (v15)
  {
    v26 = v15;
    v17 = type metadata accessor for DSKExpress.ExpressKey();
    swift_unknownObjectRetain(v16);
    swift_dynamicCast(&v27, &v26, (char *)&type metadata for Swift.AnyObject + 8, v17, 7);
    v18 = v27;
    swift_unknownObjectRelease(v16);
    if (v18)
      goto LABEL_28;
LABEL_35:
    v16 = 0;
  }
LABEL_37:
  sub_10007EF58(v1);
  return v16;
}

uint64_t sub_10007E3D8(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState);
  if (v1 < 0xA && ((0x37Fu >> v1) & 1) != 0)
    return dword_100288CA8[(char)v1];
  if (*(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockCount))
    return 9;
  return 8;
}

void sub_10007E428(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  double v14;
  uint64_t (*v15)(char *, uint64_t);
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  unsigned int v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t inited;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  Class isa;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  _BYTE v69[212];

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10007E3D8(a1);
  v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_endpointType);
  if (v8 == 4)
    v9 = 0x10000;
  else
    v9 = (v8 == 5) << 17;
  v10 = *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerKeyType);
  v11 = v9 + v10;
  if (__CFADD__(v9, v10))
  {
    __break(1u);
    goto LABEL_21;
  }
  v12 = v7;
  v13 = Date.init()(v7);
  v14 = Date.timeIntervalSince1970.getter(v13);
  v15 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  v16 = v15(v6, v2);
  v17 = v14 - *(double *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_connectionTime);
  if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v17 <= -1.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v17 >= 4294967300.0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_firstRangingStart + 8) & 1) != 0)
  {
    v18 = 0;
    goto LABEL_14;
  }
  v19 = *(double *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_firstRangingStart);
  v20 = Date.init()(v16);
  v21 = Date.timeIntervalSince1970.getter(v20);
  v16 = v15(v6, v2);
  v22 = v21 - v19;
  if ((~COERCE__INT64(v21 - v19) & 0x7FF0000000000000) == 0)
    goto LABEL_24;
  if (v22 <= -1.0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v22 >= 4294967300.0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v23 = *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingDuration);
  v18 = v22 - v23;
  if (v22 < v23)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_14:
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_seStartTime + 8) & 1) != 0)
  {
LABEL_19:
    v66 = v17;
    v28 = objc_opt_self(SESDAnalyticsLogger);
    v64 = v28;
    v29 = sub_100063D3C(&qword_100344CD0);
    inited = swift_initStackObject(v29, v69);
    v68 = v11;
    v31 = (_QWORD *)inited;
    *(_OWORD *)(inited + 16) = xmmword_100288AD0;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("timeSyncProcedure1Count"));
    v31[5] = v32;
    v33 = OBJC_IVAR____TtC10seserviced8LyonPeer_timeSyncProcedure1Count;
    v31[6] = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInt:", *(unsigned int *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_timeSyncProcedure1Count));
    v31[7] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("lockInitiatedSuspendRangingCount"));
    v31[8] = v34;
    v31[9] = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInt:", *(unsigned int *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedSuspendRangingCount));
    v31[10] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("deviceInitatedSuspendRangingCount"));
    v31[11] = v35;
    v31[12] = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInt:", *(unsigned int *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedSuspendRangingCount));
    v31[13] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("lockInitiatedResumeRangingCount"));
    v31[14] = v36;
    v31[15] = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInt:", *(unsigned int *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedRangingCount));
    v31[16] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("deviceInitatedRangingCount"));
    v31[17] = v37;
    v67 = v12;
    v38 = OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedRangingCount;
    v31[18] = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInt:", *(unsigned int *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedRangingCount));
    v31[19] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("btConnectionDuration"));
    v31[20] = v39;
    v31[21] = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInt:", v17);
    v31[22] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("rangingDuration"));
    v31[23] = v40;
    v65 = OBJC_IVAR____TtC10seserviced8LyonPeer_rangingDuration;
    v31[24] = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInt:", *(unsigned int *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingDuration));
    v31[25] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("suspendedDuration"));
    v31[26] = v41;
    v31[27] = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInt:", v18);
    v31[28] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("seDuration"));
    v31[29] = v42;
    v31[30] = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInt:", *(unsigned int *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_seDuration));
    v43 = sub_10017C4A8((uint64_t)v31);
    sub_10006C25C(0, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v43);
    sub_10004A724(v28, isa);

    v63 = *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_transactionMode);
    v62 = *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason);
    HIDWORD(v61) = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerStatus);
    sub_100099908(2u, *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockCount));
    v46 = v45;
    sub_100099908(2u, *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockFromOtherSourceCount));
    v48 = v47;
    sub_100099908(2u, *(_DWORD *)(a1 + v38));
    LODWORD(v43) = v49;
    sub_100099908(2u, *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingAttemptsCount));
    LODWORD(isa) = v50;
    sub_100099908(2u, *(_DWORD *)(a1 + v33));
    LODWORD(v33) = v51;
    sub_100099908(2u, *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_btTimeExtensionInitiatedByDeviceCount));
    v53 = v52;
    sub_100099908(2u, *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_btTimeExtensionInitiatedByLockCount));
    LODWORD(v38) = v54;
    sub_100099908(2u, *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount));
    LODWORD(v31) = v55;
    sub_100099908(2u, *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_stepUpDuration));
    v57 = v56;
    sub_100099908(2u, *(_DWORD *)(a1 + v65));
    v59 = v58;
    sub_100099908(2u, v66);
    sub_10004B1BC(v64, v67, v63, v68, v62, HIDWORD(v61), v46, v48, v43, isa, v33, v53, v38, v31, v57, v59, v60);
    return;
  }
  v24 = *(double *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_seStartTime);
  v25 = Date.init()(v16);
  v26 = Date.timeIntervalSince1970.getter(v25);
  v15(v6, v2);
  v27 = v26 - v24;
  if ((~COERCE__INT64(v26 - v24) & 0x7FF0000000000000) == 0)
    goto LABEL_28;
  if (v27 <= -1.0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v27 < 4294967300.0)
  {
    *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_seDuration) = v27;
    goto LABEL_19;
  }
LABEL_30:
  __break(1u);
}

void sub_10007EA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;

  __chkstk_darwin(a1, a1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  v6 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
  if ((swift_dynamicCast(&v23, v4, a2, v6, 6) & 1) != 0)
  {
    v7 = v23;
    v8 = objc_msgSend(v23, "appletIdentifier");
    v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v12 = sub_1000E848C(0xD000000000000012, 0x80000001002BA410);
    v14 = v13;
    if (v13 >> 60 == 15)
    {
      sub_10006B9B4(v9, v11);
      sub_10006B9B4(v12, v14);
LABEL_12:

      return;
    }
    sub_100063C8C(v9, v11);
    sub_10007C23C(v9, v11);
    v16 = v15;
    sub_10006B9B4(v12, v14);
    sub_100063CD0(v9, v11);
    sub_100063CD0(v9, v11);
    if ((v16 & 1) == 0 || objc_msgSend(v7, "endPointType") != (id)4)
      goto LABEL_12;
    if (qword_100344558 != -1)
      swift_once(&qword_100344558, sub_10006449C);
    sub_100064CE8();
    v17 = objc_msgSend(v7, "homeUUIDString");
    if (!v17)
      goto LABEL_12;
    v18 = v17;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;

    if (qword_100344628 != -1)
      swift_once(&qword_100344628, sub_1001539B4);
    sub_100154680(v19, v21);

    swift_bridgeObjectRelease(v21);
  }
}

void sub_10007ECB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;

  __chkstk_darwin(a1, a1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  v6 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
  if ((swift_dynamicCast(&v23, v4, a2, v6, 6) & 1) != 0)
  {
    v7 = v23;
    v8 = objc_msgSend(v23, "appletIdentifier");
    v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v12 = sub_1000E848C(0xD000000000000012, 0x80000001002BA410);
    v14 = v13;
    if (v13 >> 60 == 15)
    {
      sub_10006B9B4(v9, v11);
      sub_10006B9B4(v12, v14);
LABEL_10:

      return;
    }
    sub_100063C8C(v9, v11);
    sub_10007C23C(v9, v11);
    v16 = v15;
    sub_10006B9B4(v12, v14);
    sub_100063CD0(v9, v11);
    sub_100063CD0(v9, v11);
    if ((v16 & 1) == 0)
      goto LABEL_10;
    if (objc_msgSend(v7, "endPointType") != (id)4)
      goto LABEL_10;
    v17 = objc_msgSend(v7, "homeUUIDString");
    if (!v17)
      goto LABEL_10;
    v18 = v17;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;

    if (qword_100344628 != -1)
      swift_once(&qword_100344628, sub_1001539B4);
    sub_100154BAC(v19, v21);

    swift_bridgeObjectRelease(v21);
  }
}

void sub_10007EEC0()
{
  uint64_t v0;

  sub_10007B4D4(v0);
}

uint64_t sub_10007EEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007EED8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10007EEE4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_10007EF0C()
{
  unint64_t result;

  result = qword_100345208;
  if (!qword_100345208)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100345208);
  }
  return result;
}

uint64_t sub_10007EF58(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10007EF60(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100063DC8(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10007EFA0()
{
  uint64_t v0;

  return sub_10016DF3C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10007EFBC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10016B240(*(uint64_t (**)(uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

unint64_t sub_10007EFD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100346160;
  if (!qword_100346160)
  {
    v1 = sub_10006C25C(255, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100346160);
  }
  return result;
}

uint64_t sub_10007F030()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007F054()
{
  uint64_t v0;

  return sub_10007BA7C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10007F074(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  void (*v14)(_QWORD *, _QWORD, uint64_t);
  id v15;
  void (*v16)(_QWORD *, uint64_t);
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  int v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  const char *v66;
  uint64_t v67;
  unsigned int v68;
  void (*v69)(_QWORD *, _QWORD, uint64_t);
  uint64_t v70;
  void (*v71)(_QWORD *, uint64_t);
  _OWORD v72[2];
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;

  v4 = v2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (const char **)((char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = qword_100354EE8;
  *v11 = qword_100354EE8;
  v13 = enum case for DispatchPredicate.onQueue(_:);
  v14 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104);
  v14(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v15 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  v16 = *(void (**)(_QWORD *, uint64_t))(v8 + 8);
  v17 = ((uint64_t (*)(_QWORD *, uint64_t))v16)(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_31:
    v29 = swift_once(&qword_1003445B8, sub_1000EAA4C);
    goto LABEL_13;
  }
  v70 = v7;
  v71 = v16;
  v7 = a2;
  a2 = a1;
  v3 = OBJC_IVAR____TtC10seserviced13AlishaPairing_mode;
  if (*(_BYTE *)(v4 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 1)
    v17 = sub_100081DE8(3);
  a1 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
  v18 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state);
  v19 = Logger.logObject.getter(v17);
  v23 = v19;
  if (v18)
  {
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Already running", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v26 = 2;
    return sub_100081DE8(v26);
  }
  v68 = v13;
  v69 = v14;
  v27 = static os_log_type_t.info.getter(v19, v20, v21, v22);
  if (os_log_type_enabled(v23, (os_log_type_t)v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v27, "Starting Owner Pairing", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

  if (qword_1003445B8 != -1)
    goto LABEL_31;
LABEL_13:
  __chkstk_darwin(v29, v30);
  v32 = v31 + 4;
  os_unfair_lock_lock(v31 + 4);
  sub_10016B0FC(v33, sub_10007EFA0);
  os_unfair_lock_unlock(v32);
  *(_BYTE *)(v4 + v3) = 2;
  sub_100080958(&OBJC_IVAR____TtC10seserviced13AlishaPairing_mode, (uint64_t)&type metadata for AlishaPairing.Mode, "New pairing mode %s", v66);
  *(_BYTE *)(v4 + a1) = 1;
  sub_100080958(&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s", v66);
  v34 = (uint64_t *)(v4 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart);
  v35 = *(_QWORD *)(v4 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart);
  v36 = *(_QWORD *)(v4 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart + 8);
  *v34 = a2;
  v34[1] = v7;
  sub_10008F210(v35, v36);
  v37 = qword_100344698;
  v38 = swift_retain(v7);
  if (v37 != -1)
    v38 = swift_once(&qword_100344698, sub_100182C20);
  if (byte_100354D78 != 1)
  {
    v26 = 4;
    return sub_100081DE8(v26);
  }
  v74 = 0xD000000000000014;
  v75 = 0x80000001002BA5B0;
  v76 = 0xD000000000000016;
  v77 = 0x80000001002BB040;
  v78 = 893797958;
  v79 = 0xE400000000000000;
  v80 = 1;
  sub_1001531F8(v38);
  v66 = v40;
  v67 = v39;
  if (qword_1003445A0 != -1)
    swift_once(&qword_1003445A0, sub_1000B26B0);
  v41 = sub_100063D3C((uint64_t *)&unk_100348920);
  v42 = swift_allocObject(v41, 64, 7);
  *(_OWORD *)(v42 + 16) = xmmword_1002888F0;
  *(_QWORD *)(v42 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataServiceUUIDsKey);
  *(_QWORD *)(v42 + 40) = v43;
  *(_QWORD *)(v42 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataIsConnectable);
  *(_QWORD *)(v42 + 56) = v44;
  v45 = sub_100063D3C(&qword_100345398);
  v46 = type metadata accessor for UUID(0);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(unsigned __int8 *)(v47 + 80);
  v49 = (v48 + 32) & ~v48;
  v50 = swift_allocObject(v45, v49 + *(_QWORD *)(v47 + 72), v48 | 7);
  *(_OWORD *)(v50 + 16) = xmmword_1002888E0;
  if (qword_100344780 != -1)
    swift_once(&qword_100344780, sub_1001E2370);
  v51 = sub_10009673C(v46, (uint64_t)qword_100354EB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v50 + v49, v51, v46);
  if (qword_1003446C0 != -1)
    swift_once(&qword_1003446C0, sub_10019CC14);
  v52 = *(_QWORD *)(qword_100354DA0 + 16);
  v53 = type metadata accessor for DSKBLE.BLEScanRequest();
  swift_allocObject(v53, 224, 7);
  swift_retain_n(v4, 6);
  swift_bridgeObjectRetain(v52);
  *((_QWORD *)&v65 + 1) = sub_100096CAC;
  *((_QWORD *)&v64 + 1) = sub_100096CA8;
  *(_QWORD *)&v65 = v4;
  *((_QWORD *)&v63 + 1) = sub_100096CA4;
  *(_QWORD *)&v64 = v4;
  *((_QWORD *)&v62 + 1) = sub_100096CA0;
  *(_QWORD *)&v63 = v4;
  *((_QWORD *)&v61 + 1) = sub_100096C8C;
  *(_QWORD *)&v62 = v4;
  *((_QWORD *)&v60 + 1) = sub_100096C70;
  *(_QWORD *)&v61 = v4;
  *(_QWORD *)&v60 = 0;
  v54 = sub_1000BB544(v67, (uint64_t)v66, -60, v42, v50, 1, 0, v52, 0, 0, 1, 0, v60, v61, v62, v63, v64, v65, v4,
          0);
  sub_1000AE2DC(v54);
  swift_release(v54);
  if (qword_100344680 != -1)
    swift_once(&qword_100344680, sub_10016E9A8);
  v56 = qword_100354D60;
  v57 = qword_100354EE8;
  *v11 = qword_100354EE8;
  v58 = v70;
  v69(v11, v68, v70);
  v59 = (id)v57;
  LOBYTE(v57) = _dispatchPreconditionTest(_:)(v11);
  v71(v11, v58);
  if ((v57 & 1) == 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  *(_BYTE *)(v56 + OBJC_IVAR____TtC10seserviced6Alisha_isPairingInProgress) = 1;
  if (qword_100344690 != -1)
LABEL_33:
    swift_once(&qword_100344690, sub_100182BE4);
  v73 = 0;
  memset(v72, 0, sizeof(v72));
  sub_10017FAB4(0, (uint64_t)v72);
  return sub_100096700((uint64_t)v72, &qword_100345390);
}

void sub_10007F7C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    v10 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode);
    v11 = Logger.logObject.getter(v9);
    v15 = v11;
    if (v10 == 2)
    {
      v16 = static os_log_type_t.info.getter(v11, v12, v13, v14);
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Stopping", v17, 2u);
        swift_slowDealloc(v17, -1, -1);
      }

      sub_100081DE8(2);
    }
    else
    {
      v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v18, "Not running", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10007F9A0()
{
  sub_10008F2D8("Transaction emulation ended", 0);
}

void sub_10007F9B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2)
    {
      v12 = Logger.logObject.getter(v11);
      v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
      if (os_log_type_enabled(v12, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v16, "pairingEnded", v17, 2u);
        swift_slowDealloc(v17, -1, -1);
      }

      if (a1)
      {
        swift_errorRetain(a1);
        swift_errorRetain(a1);
        v18 = swift_errorRetain(a1);
        v19 = Logger.logObject.getter(v18);
        v20 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v19, v20))
        {
          v21 = (uint8_t *)swift_slowAlloc(12, -1);
          v22 = (uint64_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v21 = 138412290;
          swift_errorRetain(a1);
          v23 = _swift_stdlib_bridgeErrorToNSError(a1);
          v26 = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v21 + 4, v21 + 12);
          *v22 = v23;
          swift_errorRelease(a1);
          swift_errorRelease(a1);
          _os_log_impl((void *)&_mh_execute_header, v19, v20, "Pairing ended with error %@", v21, 0xCu);
          v24 = sub_100063D3C((uint64_t *)&unk_100346090);
          swift_arrayDestroy(v22, 1, v24);
          swift_slowDealloc(v22, -1, -1);
          swift_slowDealloc(v21, -1, -1);

        }
        else
        {

          swift_errorRelease(a1);
          swift_errorRelease(a1);
        }
        sub_100081DE8(2);
        swift_errorRelease(a1);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10007FC7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  unint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) != 0)
  {
    if (*(_BYTE *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2)
    {
      v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer);
      if (v14)
      {
        swift_retain(*(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer));
        if ((sub_100083D18(1430540353, 0xE400000000000000, 0, 12, a1, a2, v14) & 1) != 0)
        {
          swift_release(v14);
          return 0;
        }
        else
        {
          v23 = sub_100063C48();
          v15 = swift_allocError(&type metadata for AlishaPairing.PairingError, v23, 0, 0);
          *v24 = 2;
          swift_release(v14);
        }
      }
      else
      {
        v18 = Logger.logObject.getter(result);
        v19 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v18, v19))
        {
          v20 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v20 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "Missing peer", v20, 2u);
          swift_slowDealloc(v20, -1, -1);
        }

        sub_100081DE8(2);
        v21 = sub_100063C48();
        v15 = swift_allocError(&type metadata for AlishaPairing.PairingError, v21, 0, 0);
        *v22 = 2;
      }
    }
    else
    {
      v16 = sub_100063C48();
      v15 = swift_allocError(&type metadata for AlishaPairing.PairingError, v16, 0, 0);
      *v17 = 2;
    }
    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10007FEE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2)
    {
      v10 = Logger.logObject.getter(result);
      v14 = static os_log_type_t.info.getter(v10, v11, v12, v13);
      if (os_log_type_enabled(v10, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v14, "Session ended", v15, 2u);
        swift_slowDealloc(v15, -1, -1);
      }

      return sub_100081DE8(6);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100080060(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  int v35;
  uint64_t v36;
  uint8_t *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  os_log_t v45;
  uint8_t *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint8_t *v55;
  uint8_t *v56;
  int v57;
  uint64_t v58;
  os_log_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t aBlock[5];
  _QWORD *v66;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v61 = *(_QWORD *)(v9 - 8);
  v62 = v9;
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (uint8_t **)((char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v18 = qword_100354EE8;
  *v17 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v13);
  v19 = (id)v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v17, v13);
  if ((v18 & 1) != 0)
  {
    v60 = v5;
    v13 = swift_allocObject(&unk_100307818, 32, 7);
    *(_QWORD *)(v13 + 16) = a1;
    *(_QWORD *)(v13 + 24) = a2;
    sub_100063C8C(a1, a2);
    if (qword_1003445B8 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003445B8, sub_1000EAA4C);
LABEL_5:
  v20 = (uint8_t *)off_1003463F0;
  v21 = swift_allocObject(&unk_100307840, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_100096BF0;
  *(_QWORD *)(v21 + 24) = v13;
  v23 = __chkstk_darwin(v21, v22);
  *(&v55 - 4) = (uint8_t *)sub_100096F30;
  *(&v55 - 3) = (uint8_t *)v23;
  *(&v55 - 2) = v20;
  v25 = v24 + 4;
  swift_retain(v13);
  os_unfair_lock_lock(v25);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, aBlock);
  os_unfair_lock_unlock(v25);
  v26 = aBlock[0];
  swift_release(v13);
  swift_release(v21);
  v27 = (void *)sub_10009F618(v26);
  swift_bridgeObjectRelease(v26);
  if (v27)
  {
    v28 = objc_msgSend(v27, "blePairingRequest");

    if (v28)
    {

    }
    else
    {
      sub_100063C8C(a1, a2);
      v29 = sub_100063C8C(a1, a2);
      v30 = Logger.logObject.getter(v29);
      v34 = static os_log_type_t.info.getter(v30, v31, v32, v33);
      v35 = v34;
      if (os_log_type_enabled(v30, v34))
      {
        v59 = v30;
        v36 = swift_slowAlloc(12, -1);
        v57 = v35;
        v37 = (uint8_t *)v36;
        v58 = swift_slowAlloc(32, -1);
        aBlock[0] = v58;
        v56 = v37;
        *(_DWORD *)v37 = 136315138;
        v55 = v37 + 4;
        sub_1001BD2CC(a1, a2);
        v39 = v38;
        v64 = v38;
        v40 = sub_100063D3C((uint64_t *)&unk_100346060);
        v41 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
        v42 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v40, v41);
        v44 = v43;
        swift_bridgeObjectRelease(v39);
        v64 = (_QWORD *)sub_1001C56EC(v42, v44, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, aBlock, v55, v37 + 12);
        swift_bridgeObjectRelease(v44);
        sub_100063CD0(a1, a2);
        sub_100063CD0(a1, a2);
        v45 = v59;
        v46 = v56;
        _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v57, "Request to start First Approach for %s", v56, 0xCu);
        v47 = v58;
        swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v46, -1, -1);

      }
      else
      {

        sub_100063CD0(a1, a2);
        sub_100063CD0(a1, a2);
      }
      if (qword_1003447C0 != -1)
        swift_once(&qword_1003447C0, sub_1001EF020);
      v48 = (_QWORD *)swift_allocObject(&unk_100307868, 40, 7);
      v48[2] = a1;
      v48[3] = a2;
      v49 = v63;
      v48[4] = v63;
      aBlock[4] = (uint64_t)sub_100096C24;
      v66 = v48;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100071C98;
      aBlock[3] = (uint64_t)&unk_100307880;
      v50 = _Block_copy(aBlock);
      sub_100063C8C(a1, a2);
      v51 = swift_retain(v49);
      static DispatchQoS.unspecified.getter(v51);
      v64 = _swiftEmptyArrayStorage;
      v52 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v53 = sub_100063D3C((uint64_t *)&unk_100346200);
      v54 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v64, v53, v54, v4, v52);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v50);
      _Block_release(v50);

      (*(void (**)(char *, uint64_t))(v60 + 8))(v8, v4);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v12, v62);
      swift_release(v66);
    }
  }
}

_QWORD *sub_100080660(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  uint64_t v27;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for Peer(0);
    v5 = sub_1000639EC((unint64_t *)&qword_100347720, type metadata accessor for Peer, (uint64_t)&unk_10028BFA8);
    result = Set.Iterator.init(_cocoa:)(v26, v3, v4, v5);
    v1 = v26[0];
    v24 = v26[1];
    v7 = v26[2];
    v8 = v26[3];
    v9 = v26[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v24 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v13 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
LABEL_11:
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
    goto LABEL_32;
  }
  v21 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v21 < v13)
    {
      v22 = *(_QWORD *)(v24 + 8 * v21);
      v16 = v8 + 1;
      if (v22)
        goto LABEL_31;
      v16 = v8 + 2;
      if (v8 + 2 < v13)
      {
        v22 = *(_QWORD *)(v24 + 8 * v16);
        if (v22)
          goto LABEL_31;
        v16 = v8 + 3;
        if (v8 + 3 < v13)
        {
          v22 = *(_QWORD *)(v24 + 8 * v16);
          if (v22)
            goto LABEL_31;
          v16 = v8 + 4;
          if (v8 + 4 < v13)
          {
            v22 = *(_QWORD *)(v24 + 8 * v16);
            if (v22)
              goto LABEL_31;
            v16 = v8 + 5;
            if (v8 + 5 < v13)
            {
              v22 = *(_QWORD *)(v24 + 8 * v16);
              if (!v22)
              {
                v23 = v8 + 6;
                while (v13 != v23)
                {
                  v22 = *(_QWORD *)(v24 + 8 * v23++);
                  if (v22)
                  {
                    v16 = v23 - 1;
                    goto LABEL_31;
                  }
                }
                goto LABEL_36;
              }
LABEL_31:
              v14 = (v22 - 1) & v22;
              v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
              v20 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v15);
              swift_retain(v20);
              for (; v20; v14 = v9)
              {
                if (*(_BYTE *)(v20 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) == 1)
                  break;
                result = (_QWORD *)swift_release(v20);
                v8 = v16;
                v9 = v14;
                if ((v1 & 0x8000000000000000) == 0)
                  goto LABEL_11;
LABEL_13:
                v17 = __CocoaSet.Iterator.next()(result);
                if (!v17)
                  goto LABEL_36;
                v18 = v17;
                v25 = v17;
                v19 = type metadata accessor for Peer(0);
                swift_unknownObjectRetain(v18);
                swift_dynamicCast(&v27, &v25, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
                v20 = v27;
                swift_unknownObjectRelease(v18);
                v16 = v8;
              }
              goto LABEL_37;
            }
          }
        }
      }
    }
LABEL_36:
    v20 = 0;
LABEL_37:
    sub_10007EF58(v1);
    return (_QWORD *)v20;
  }
  __break(1u);
  return result;
}

uint64_t sub_10008091C()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for AlishaPairing(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_100080B00();
  qword_100354BA0 = result;
  return result;
}

void sub_100080958(_QWORD *a1, uint64_t a2, const char *a3, ...)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  NSObject *oslog;
  uint64_t v16;
  uint64_t v17;

  v7 = v3;
  v8 = swift_retain_n(v3, 2);
  oslog = Logger.logObject.getter(v8);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    *(_DWORD *)v10 = 136315138;
    v17 = v11;
    LOBYTE(v16) = *(_BYTE *)(v7 + *a1);
    v12 = String.init<A>(describing:)(&v16, a2);
    v14 = v13;
    v16 = sub_1001C56EC(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v10 + 4, v10 + 12);
    swift_release_n(v7, 2);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, oslog, v9, a3, v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {
    swift_release_n(v3, 2);

  }
}

uint64_t sub_100080B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD aBlock[5];
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = String.init(cString:)(SESLoggingSubsystem);
  Logger.init(subsystem:category:)(v7);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_isSEAccessAllowed) = 0;
  v8 = (_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart);
  *v8 = 0;
  v8[1] = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_activeFirstApproaches) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_requestedFirstApproaches) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) = 0;
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v9 = (void *)static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  aBlock[4] = sub_1000960A8;
  v14 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_100307600;
  v10 = _Block_copy(aBlock);
  v11 = v14;
  swift_retain(v1);
  swift_release(v11);
  os_state_add_handler(v9, v10);
  _Block_release(v10);

  return v1;
}

_DWORD *sub_100080CE4()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  Class isa;
  _DWORD *v49;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  void *v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  __int128 v60;
  ValueMetadata *v61;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint);
  if (v1)
  {
    v2 = objc_msgSend(v1, "publicKeyIdentifier");
    v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v5 = v4;

    sub_1001BD2CC(v3, v5);
    v7 = v6;
    *(_QWORD *)&v60 = v6;
    v8 = sub_100063D3C((uint64_t *)&unk_100346060);
    v9 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
    v10 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v8, v9);
    v12 = v11;
    swift_bridgeObjectRelease(v7);
    sub_100063CD0(v3, v5);
    v61 = (ValueMetadata *)&type metadata for String;
    if (v12)
      goto LABEL_6;
  }
  else
  {
    v61 = (ValueMetadata *)&type metadata for String;
  }
  v12 = 0xE400000000000000;
  v10 = 1701736302;
LABEL_6:
  *(_QWORD *)&v60 = v10;
  *((_QWORD *)&v60 + 1) = v12;
  sub_10006C2B4(&v60, &v57);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v56 = &_swiftEmptyDictionarySingleton;
  sub_10018DEC0(&v57, 0x746E696F70646E65, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v14 = *(_BYTE *)(v51 + OBJC_IVAR____TtC10seserviced13AlishaPairing_isSEAccessAllowed);
  v61 = (ValueMetadata *)&type metadata for Bool;
  LOBYTE(v60) = v14;
  sub_10006C2B4(&v60, &v57);
  v15 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v56 = &_swiftEmptyDictionarySingleton;
  sub_10018DEC0(&v57, 0xD000000000000011, 0x80000001002BAEE0, v15);
  swift_bridgeObjectRelease(0x8000000000000000);
  v16 = *(_BYTE *)(v51 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode);
  v61 = &type metadata for AlishaPairing.Mode;
  LOBYTE(v60) = v16;
  sub_10006C2B4(&v60, &v57);
  v17 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v56 = &_swiftEmptyDictionarySingleton;
  sub_10018DEC0(&v57, 1701080941, 0xE400000000000000, v17);
  swift_bridgeObjectRelease(0x8000000000000000);
  v18 = *(_QWORD *)(v51 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer);
  if (v18)
  {
    v19 = v18 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v20 = type metadata accessor for UUID(0);
    v59 = v20;
    v21 = sub_1000960AC(&v57);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v21, v19, v20);
    sub_10006C2B4(&v57, &v60);
    if (!v61)
    {
      sub_100096700((uint64_t)&v60, (uint64_t *)&unk_100346130);
      sub_10012E704(1919247728, 0xE400000000000000, &v57);
      sub_100096700((uint64_t)&v57, (uint64_t *)&unk_100346130);
      goto LABEL_11;
    }
  }
  else
  {
    v61 = (ValueMetadata *)&type metadata for String;
    *(_QWORD *)&v60 = 1701736302;
    *((_QWORD *)&v60 + 1) = 0xE400000000000000;
  }
  sub_10006C2B4(&v60, &v57);
  v22 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v56 = &_swiftEmptyDictionarySingleton;
  sub_10018DEC0(&v57, 1919247728, 0xE400000000000000, v22);
  swift_bridgeObjectRelease(0x8000000000000000);
LABEL_11:
  v23 = (uint64_t *)(v51 + OBJC_IVAR____TtC10seserviced13AlishaPairing_activeFirstApproaches);
  swift_beginAccess(v51 + OBJC_IVAR____TtC10seserviced13AlishaPairing_activeFirstApproaches, &v56, 0, 0);
  v24 = *v23;
  v52 = *v23 & 0xC000000000000001;
  if (v52)
  {
    if (v24 < 0)
      v25 = *v23;
    else
      v25 = v24 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v24);
    v26 = __CocoaSet.count.getter(v25);
  }
  else
  {
    v26 = *(_QWORD *)(v24 + 16);
    swift_bridgeObjectRetain(v24);
  }
  if (v26)
  {
    v55 = _swiftEmptyArrayStorage;
    sub_100192924(0, v26 & ~(v26 >> 63), 0);
    if (v52)
    {
      if (v24 < 0)
        v27 = v24;
      else
        v27 = v24 & 0xFFFFFFFFFFFFFF8;
      v28 = __CocoaSet.startIndex.getter(v27);
      v30 = 1;
    }
    else
    {
      v28 = sub_100196CE0(v24);
      v30 = v31 & 1;
    }
    *(_QWORD *)&v57 = v28;
    *((_QWORD *)&v57 + 1) = v29;
    v58 = v30;
    if ((v26 & 0x8000000000000000) == 0)
    {
      v32 = *(_QWORD *)(sub_10019671C(v57, *((uint64_t *)&v57 + 1), v58, v24)
                      + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier
                      + 8);
      if (v32 >> 60 != 15)
        __asm { BR              X8 }
      __break(1u);
      goto LABEL_47;
    }
    __break(1u);
    goto LABEL_45;
  }
  swift_bridgeObjectRelease(v24);
  v54 = sub_100063D3C((uint64_t *)&unk_100346060);
  v61 = (ValueMetadata *)v54;
  *(_QWORD *)&v60 = _swiftEmptyArrayStorage;
  sub_10006C2B4(&v60, &v57);
  v33 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v55 = &_swiftEmptyDictionarySingleton;
  sub_10018DEC0(&v57, 0xD000000000000015, 0x80000001002BAF20, v33);
  swift_bridgeObjectRelease(0x8000000000000000);
  v34 = (uint64_t *)(v51 + OBJC_IVAR____TtC10seserviced13AlishaPairing_requestedFirstApproaches);
  swift_beginAccess(v51 + OBJC_IVAR____TtC10seserviced13AlishaPairing_requestedFirstApproaches, &v55, 0, 0);
  v35 = *v34;
  v53 = *v34 & 0xC000000000000001;
  if (v53)
  {
    if (v35 < 0)
      v36 = *v34;
    else
      v36 = v35 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v35);
    v37 = __CocoaSet.count.getter(v36);
    if (v37)
      goto LABEL_33;
  }
  else
  {
    v37 = *(_QWORD *)(v35 + 16);
    swift_bridgeObjectRetain(v35);
    if (v37)
    {
LABEL_33:
      sub_100192924(0, v37 & ~(v37 >> 63), 0);
      if (v53)
      {
        if (v35 < 0)
          v38 = v35;
        else
          v38 = v35 & 0xFFFFFFFFFFFFFF8;
        v39 = __CocoaSet.startIndex.getter(v38);
        v41 = 1;
      }
      else
      {
        v39 = sub_100196CE0(v35);
        v41 = v42 & 1;
      }
      *(_QWORD *)&v57 = v39;
      *((_QWORD *)&v57 + 1) = v40;
      v58 = v41;
      if ((v37 & 0x8000000000000000) == 0)
      {
        v43 = *(_QWORD *)(sub_10019671C(v57, *((uint64_t *)&v57 + 1), v58, v35)
                        + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier
                        + 8);
        if (v43 >> 60 != 15)
          __asm { BR              X8 }
LABEL_47:
        __break(1u);
        JUMPOUT(0x100081DBCLL);
      }
LABEL_45:
      __break(1u);
      JUMPOUT(0x100081DA4);
    }
  }
  swift_bridgeObjectRelease(v35);
  v61 = (ValueMetadata *)v54;
  *(_QWORD *)&v60 = _swiftEmptyArrayStorage;
  sub_10006C2B4(&v60, &v57);
  v44 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(&v57, 0xD000000000000018, 0x80000001002BAF40, v44);
  swift_bridgeObjectRelease(0x8000000000000000);
  v61 = (ValueMetadata *)sub_100063D3C(&qword_100345388);
  *(_QWORD *)&v60 = &_swiftEmptyDictionarySingleton;
  sub_10006C2B4(&v60, &v57);
  v45 = swift_bridgeObjectRetain(&_swiftEmptyDictionarySingleton);
  v46 = swift_isUniquelyReferenced_nonNull_native(v45);
  sub_10018DEC0(&v57, 0x6574617473, 0xE500000000000000, v46);
  swift_bridgeObjectRelease(0x8000000000000000);
  v47 = sub_10017D088((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v47);
  v49 = sub_100015734((uint64_t)"alishapairing.state", (uint64_t)isa);

  return v49;
}

uint64_t sub_100081DE8(uint64_t a1)
{
  const char *v1;
  const char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint32_t *p_cb;
  id v16;
  uint64_t result;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  const char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint8_t *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  os_unfair_lock_s *v54;
  os_unfair_lock_s *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  os_unfair_lock_s *v63;
  os_unfair_lock_s *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  os_unfair_lock_s *v71;
  os_unfair_lock_s *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  _QWORD *v83;
  uint32_t *v84;
  int v85;
  uint64_t (*v86)(_QWORD *, uint64_t);
  unsigned int v87;
  _QWORD v88[4];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (const char **)((char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v14 = qword_100354EE8;
  *v13 = qword_100354EE8;
  p_cb = *(uint32_t **)(v10 + 104);
  v87 = enum case for DispatchPredicate.onQueue(_:);
  ((void (*)(_QWORD *))p_cb)(v13);
  v16 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  v86 = *(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8);
  result = v86(v13, v9);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_63:
    swift_once(&qword_100344680, sub_10016E9A8);
    goto LABEL_40;
  }
  v18 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
  if (!v2[OBJC_IVAR____TtC10seserviced13AlishaPairing_state])
    return result;
  v84 = p_cb;
  v19 = Logger.logObject.getter(result);
  v23 = static os_log_type_t.info.getter(v19, v20, v21, v22);
  if (os_log_type_enabled(v19, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    v83 = v13;
    v25 = v2;
    v26 = v9;
    v27 = a1;
    a1 = (uint64_t)v8;
    v28 = v5;
    v29 = v4;
    v30 = v24;
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v23, "Clean up", v24, 2u);
    v31 = v30;
    v4 = v29;
    v5 = v28;
    v8 = (char *)a1;
    LODWORD(a1) = v27;
    v9 = v26;
    v2 = v25;
    v13 = v83;
    swift_slowDealloc(v31, -1, -1);
  }

  v2[v18] = 0;
  sub_100080958(&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s", v82);
  v32 = &unk_100345000;
  v85 = a1;
  if (a1 != 6)
  {
    v33 = *(_QWORD *)&v2[OBJC_IVAR____TtC10seserviced13AlishaPairing_peer];
    if (v33)
    {
      v83 = (_QWORD *)v4;
      v34 = qword_100344690;
      swift_retain(v33);
      if (v34 != -1)
        swift_once(&qword_100344690, sub_100182BE4);
      v35 = qword_100354D70;
      swift_retain(v33);
      v36 = sub_100196F9C(v35, v33);
      swift_release(v33);
      v37 = (void *)sub_10009F62C(v36);
      swift_bridgeObjectRelease(v36);
      if (v37)
      {
        sub_100184FC8();

      }
      if (qword_1003446C8 != -1)
        swift_once(&qword_1003446C8, sub_1001A0A18);
      v38 = qword_100354DA8;
      v39 = qword_100354EE8;
      *v13 = qword_100354EE8;
      ((void (*)(_QWORD *, _QWORD, uint64_t))v84)(v13, v87, v9);
      v40 = (id)v39;
      LOBYTE(v39) = _dispatchPreconditionTest(_:)(v13);
      v86(v13, v9);
      if ((v39 & 1) != 0)
      {
        v36 = v33 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        swift_beginAccess(v38 + OBJC_IVAR____TtC10seserviced9AlishaUWB_pendingTimeSyncEvents, v88, 33, 0);
        sub_10012E5FC(v36);
        swift_endAccess(v88);
        if (qword_1003445A8 == -1)
        {
LABEL_17:
          sub_1000AE7B0(v33);
          v41 = sub_10007C66C((uint64_t)&off_100305208);
          v43 = v42;
          sub_100083D18(0x5F4C4152454E4547, 0xED0000524F525245, 3u, 17, v41, v42, v33);
          sub_100063CD0(v41, v43);
          v44 = v83;
          (*(void (**)(char *, uint64_t, _QWORD *))(v5 + 16))(v8, v36, v83);
          v45 = type metadata accessor for DSKBLEPairing.BLEUnpairingRequest(0);
          v46 = swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
          (*(void (**)(uint64_t, char *, _QWORD *))(v5 + 32))(v46 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_peerIdentifier, v8, v44);
          v47 = (_QWORD *)(v46 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_tag);
          *v47 = 0xD000000000000011;
          v47[1] = 0x80000001002B9CC0;
          sub_1000AEAA4(v46);
          v32 = (_QWORD *)&unk_100345000;
          swift_release(v46);
          swift_release(v33);
          goto LABEL_18;
        }
      }
      else
      {
        __break(1u);
      }
      swift_once(&qword_1003445A8, sub_1000C35EC);
      goto LABEL_17;
    }
  }
LABEL_18:
  a1 = OBJC_IVAR____TtC10seserviced13AlishaPairing_mode;
  p_cb = &OBJC_PROTOCOL___SESDarwinNotificationDelegate.cb;
  v8 = (_BYTE *)&unk_100345000;
  if (v2[OBJC_IVAR____TtC10seserviced13AlishaPairing_mode])
  {
    if (v2[OBJC_IVAR____TtC10seserviced13AlishaPairing_mode] == 1)
    {
      v4 = (uint64_t)v32;
      v48 = *(_QWORD *)&v2[v32[77]];
      if (v48)
      {
        swift_beginAccess(&v2[OBJC_IVAR____TtC10seserviced13AlishaPairing_activeFirstApproaches], v88, 33, 0);
        v49 = swift_retain(v48);
        v50 = sub_1000D3670(v49);
        swift_endAccess(v88);
        swift_release(v48);
        swift_release(v50);
      }
    }
    else
    {
      v4 = (uint64_t)v32;
      if (v85 == 6)
      {
        if (v2[OBJC_IVAR____TtC10seserviced13AlishaPairing_isSEAccessAllowed] == 1)
        {
          if (qword_100344550 != -1)
            swift_once(&qword_100344550, sub_1000601F0);
          sub_100062A30();
        }
      }
      else
      {
        if (qword_100344550 != -1)
          swift_once(&qword_100344550, sub_1000601F0);
        sub_100062C88(v85);
      }
      if (qword_100344550 != -1)
        swift_once(&qword_100344550, sub_1000601F0);
      sub_100063090();
      if (qword_1003445A0 != -1)
        swift_once(&qword_1003445A0, sub_1000B26B0);
      sub_1000AEF70(893797958, 0xE400000000000000);
      if (qword_1003445B8 != -1)
        v51 = swift_once(&qword_1003445B8, sub_1000EAA4C);
      __chkstk_darwin(v51, v52);
      *(&v82 - 2) = v53;
      *(&v82 - 1) = v2;
      v55 = v54 + 4;
      os_unfair_lock_lock(v54 + 4);
      sub_10016B0FC(v56, sub_10008F220);
      os_unfair_lock_unlock(v55);
    }
    v8 = (char *)&unk_100345000;
  }
  else
  {
    v4 = (uint64_t)v32;
  }
  if (qword_100344680 != -1)
    goto LABEL_63;
LABEL_40:
  v57 = qword_100354D60;
  v58 = qword_100354EE8;
  *v13 = qword_100354EE8;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v84)(v13, v87, v9);
  v59 = (id)v58;
  LOBYTE(v58) = _dispatchPreconditionTest(_:)(v13);
  v60 = v86(v13, v9);
  if ((v58 & 1) == 0)
  {
    __break(1u);
    goto LABEL_65;
  }
  *(_BYTE *)(v57 + OBJC_IVAR____TtC10seserviced6Alisha_isPairingInProgress) = 0;
  if (*((_QWORD *)p_cb + 183) != -1)
LABEL_65:
    v60 = swift_once(&qword_1003445B8, sub_1000EAA4C);
  __chkstk_darwin(v60, v61);
  *(&v82 - 4) = (const char *)sub_10008ECD0;
  *(&v82 - 3) = 0;
  *(&v82 - 2) = v62;
  v64 = v63 + 4;
  os_unfair_lock_lock(v63 + 4);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10007EFBC, v88);
  os_unfair_lock_unlock(v64);
  v65 = v88[0];
  if ((v88[0] & 0xC000000000000001) != 0)
  {
    if (v88[0] < 0)
      v66 = v88[0];
    else
      v66 = v88[0] & 0xFFFFFFFFFFFFFF8;
    v67 = __CocoaSet.count.getter(v66);
  }
  else
  {
    v67 = *(_QWORD *)(v88[0] + 16);
  }
  v68 = swift_bridgeObjectRelease(v65);
  if (!v67)
  {
    __chkstk_darwin(v68, v69);
    *(&v82 - 4) = (const char *)sub_10008ED74;
    *(&v82 - 3) = 0;
    *(&v82 - 2) = v70;
    v72 = v71 + 4;
    os_unfair_lock_lock(v71 + 4);
    sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, v88);
    os_unfair_lock_unlock(v72);
    v73 = v88[0];
    if ((v88[0] & 0xC000000000000001) != 0)
    {
      v74 = v88[0] < 0 ? v88[0] : v88[0] & 0xFFFFFFFFFFFFFF8;
      v75 = __CocoaSet.count.getter(v74);
    }
    else
    {
      v75 = *(_QWORD *)(v88[0] + 16);
    }
    swift_bridgeObjectRelease(v73);
    if (!v75)
    {
      if (qword_100344690 != -1)
        swift_once(&qword_100344690, sub_100182BE4);
      sub_100180268(0);
    }
  }
  v76 = *(void **)&v2[OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint];
  *(_QWORD *)&v2[OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint] = 0;

  v2[*((_QWORD *)v8 + 71)] = 0;
  v2[a1] = 0;
  sub_100080958(&OBJC_IVAR____TtC10seserviced13AlishaPairing_mode, (uint64_t)&type metadata for AlishaPairing.Mode, "New pairing mode %s", v82);
  v77 = &v2[OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart];
  v78 = *(_QWORD *)&v2[OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart];
  v79 = *(_QWORD *)&v2[OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart + 8];
  *(_QWORD *)v77 = 0;
  *((_QWORD *)v77 + 1) = 0;
  sub_10008F210(v78, v79);
  v80 = *(_QWORD *)(v4 + 616);
  v81 = *(_QWORD *)&v2[v80];
  *(_QWORD *)&v2[v80] = 0;
  result = swift_release(v81);
  if (v85 != 3)
    return sub_1000840BC();
  return result;
}

void sub_10008274C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint8_t *v52;
  uint64_t v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v4 = v3;
  v69 = a1;
  v6 = type metadata accessor for UUID(0);
  v70 = *(_QWORD *)(v6 - 8);
  v71 = v6;
  __chkstk_darwin(v6, v7);
  v68 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (uint64_t *)((char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v14 = (void *)qword_100354EE8;
  *v13 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  v15 = v14;
  v16 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_28:
    swift_once(&qword_100344780, sub_1001E2370);
LABEL_13:
    v37 = v71;
    v38 = sub_10009673C(v71, (uint64_t)qword_100354EB8);
    v39 = v70;
    v40 = (uint64_t)v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v68, v38, v37);
    v41 = v69;
    if (*(_QWORD *)(v69 + 16) && (v42 = sub_100187E34(v40), (v43 & 1) != 0))
    {
      v44 = (uint64_t *)(*(_QWORD *)(v41 + 56) + 16 * v42);
      v45 = *v44;
      v46 = v44[1];
      sub_100063C8C(*v44, v46);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v37);
      v47 = v66;
      sub_100072014(v45, v46, 0);
      if (!v47)
        return;
      v48 = swift_errorRelease(v47);
    }
    else
    {
      v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v40, v37);
    }
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v49, v50))
      goto LABEL_24;
    v51 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v51 = 0;
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Failed to read PSM characteristic", v51, 2u);
    v52 = v51;
    goto LABEL_22;
  }
  v17 = OBJC_IVAR____TtC10seserviced13AlishaPairing_mode;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2)
  {
    v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer);
    if (!v18)
      goto LABEL_25;
    v19 = v18 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v20 = a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    swift_retain(a2);
    swift_retain(v18);
    LOBYTE(v20) = static UUID.== infix(_:_:)(v19, v20);
    swift_release(v18);
    swift_release(a2);
    if ((v20 & 1) == 0)
      goto LABEL_25;
  }
  v66 = v4;
  v67 = v2;
  v21 = v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_logger;
  v22 = swift_retain_n(a2, 2);
  v23 = Logger.logObject.getter(v22);
  v27 = static os_log_type_t.info.getter(v23, v24, v25, v26);
  if (os_log_type_enabled(v23, v27))
  {
    v28 = swift_slowAlloc(12, -1);
    v65 = v21;
    v29 = (uint8_t *)v28;
    v30 = swift_slowAlloc(32, -1);
    *(_DWORD *)v29 = 136315138;
    v74 = v30;
    v64 = v29 + 4;
    v31 = swift_retain(a2);
    v32 = UUID.uuidString.getter(v31);
    v34 = v33;
    swift_release(a2);
    v72 = sub_1001C56EC(v32, v34, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v64, v29 + 12);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v23, v27, "Read characteristics %s", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    swift_release_n(a2, 2);
  }

  v35 = v67;
  if (*(_BYTE *)(v67 + v17) != 2
    || (v36 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state,
        *(_BYTE *)(v67 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) == 1))
  {
    if (qword_100344780 == -1)
      goto LABEL_13;
    goto LABEL_28;
  }
  v53 = swift_retain_n(v67, 2);
  v49 = Logger.logObject.getter(v53);
  v54 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v49, v54))
  {
    swift_release_n(v35, 2);
    goto LABEL_24;
  }
  v55 = (uint8_t *)swift_slowAlloc(12, -1);
  v56 = swift_slowAlloc(32, -1);
  *(_DWORD *)v55 = 136315138;
  v74 = v56;
  LOBYTE(v72) = *(_BYTE *)(v35 + v36);
  v57 = String.init<A>(describing:)(&v72, &type metadata for AlishaPairing.State);
  v59 = v58;
  v72 = sub_1001C56EC(v57, v58, &v74);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v55 + 4, v55 + 12);
  swift_release_n(v35, 2);
  swift_bridgeObjectRelease(v59);
  _os_log_impl((void *)&_mh_execute_header, v49, v54, "Wrong state %s", v55, 0xCu);
  swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v56, -1, -1);
  v52 = v55;
LABEL_22:
  swift_slowDealloc(v52, -1, -1);
LABEL_24:

  sub_100081DE8(2);
LABEL_25:
  v60 = sub_100063C48();
  v61 = swift_allocError(&type metadata for AlishaPairing.PairingError, v60, 0, 0);
  *v62 = 2;
  swift_willThrow(v61);
}

void sub_100082D2C(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSString v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  const char *v56;
  _QWORD v57[3];
  _BYTE v58[8];
  uint64_t v59;
  uint64_t v60[2];

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (_QWORD *)((char *)&v57[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (a1)
  {
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    v13 = swift_errorRetain(a1);
    v14 = Logger.logObject.getter(v13);
    v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
    if (os_log_type_enabled(v14, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v60[0] = v20;
      *(_DWORD *)v19 = 136315138;
      swift_getErrorValue(a1, v58, v57);
      v21 = Error.localizedDescription.getter(v57[1], v57[2]);
      v23 = v22;
      v59 = sub_1001C56EC(v21, v22, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v23);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v14, v18, "Failed to open channel %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
    sub_100081DE8(2);
    swift_errorRelease(a1);
    return;
  }
  v24 = (const char *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_logger);
  v25 = swift_retain_n(a2, 2);
  v26 = Logger.logObject.getter(v25);
  v30 = static os_log_type_t.info.getter(v26, v27, v28, v29);
  if (os_log_type_enabled(v26, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    v56 = v24;
    v33 = v32;
    v60[0] = v32;
    *(_DWORD *)v31 = 136315138;
    v34 = swift_retain(a2);
    v35 = UUID.uuidString.getter(v34);
    v37 = v36;
    swift_release(a2);
    v59 = sub_1001C56EC(v35, v37, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v31 + 4, v31 + 12);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v26, v30, "Channel established %s", v31, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    swift_release_n(a2, 2);
  }

  v38 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer);
  if (!v38)
  {
LABEL_18:
    if (qword_100344690 == -1)
    {
LABEL_19:
      swift_retain_n(v3, 6);
      v42 = (void *)sub_100180A00(a2, (uint64_t)sub_100096900, v3, (uint64_t)sub_100096904, v3, (uint64_t)sub_100096908, v3, (uint64_t)sub_10009690C, v3, (uint64_t)sub_100096914, v3, (uint64_t)sub_100096918, v3);
      swift_release_n(v3, 6);

      v43 = objc_opt_self(SESDAnalyticsLogger);
      UUID.uuidString.getter(v43);
      v45 = v44;
      v46 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v45);
      sub_100048AF8(v43, v46);

      return;
    }
LABEL_25:
    swift_once(&qword_100344690, sub_100182BE4);
    goto LABEL_19;
  }
  v39 = v38 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  v40 = (char *)a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  swift_retain(*(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer));
  if ((static UUID.== infix(_:_:)(v39, v40) & 1) == 0
    || *(_BYTE *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) != 2)
  {
LABEL_17:
    swift_release(v38);
    goto LABEL_18;
  }
  v41 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) == 1)
  {
    *(_BYTE *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) = 2;
    sub_100080958(&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s", v56);
    goto LABEL_17;
  }
  v47 = swift_retain_n(v3, 2);
  v48 = Logger.logObject.getter(v47);
  v50 = static os_log_type_t.error.getter(v48, v49);
  if (os_log_type_enabled(v48, v50))
  {
    v51 = (uint8_t *)swift_slowAlloc(12, -1);
    v52 = swift_slowAlloc(32, -1);
    *(_DWORD *)v51 = 136315138;
    v60[0] = v52;
    LOBYTE(v59) = *(_BYTE *)(v3 + v41);
    v53 = String.init<A>(describing:)(&v59, &type metadata for AlishaPairing.State);
    v55 = v54;
    v59 = sub_1001C56EC(v53, v54, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v51 + 4, v51 + 12);
    swift_release_n(v3, 2);
    swift_bridgeObjectRelease(v55);
    _os_log_impl((void *)&_mh_execute_header, v48, v50, "Wrong state %s", v51, 0xCu);
    swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v51, -1, -1);
  }
  else
  {
    swift_release_n(v3, 2);
  }

  sub_100081DE8(2);
  swift_release(v38);
}

uint64_t sub_1000833E0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer);
  if (v7)
  {
    v14 = v7 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v15 = a3 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    swift_retain(*(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer));
    if ((static UUID.== infix(_:_:)(v14, v15) & 1) != 0)
    {
      if (qword_100344680 == -1)
      {
LABEL_7:
        v16 = qword_100354D60;
        swift_retain(v3);
        sub_1001771DC(a1, a2, 1, a3, v16, v3);
        swift_release(v7);
        return swift_release(v3);
      }
LABEL_11:
      swift_once(&qword_100344680, sub_10016E9A8);
      goto LABEL_7;
    }
    swift_release(v7);
  }
  v18 = sub_10007C66C((uint64_t)&off_1003053B8);
  v20 = v19;
  sub_100083D18(0x425F454349564544, 0xEB00000000595355, 3u, 17, v18, v19, a3);
  return sub_100063CD0(v18, v20);
}

void sub_1000835D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD *, _QWORD, uint64_t);
  id v13;
  void (*v14)(_QWORD *, uint64_t);
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSString v46;
  uint64_t v47;
  unsigned int v48;
  void (*v49)(_QWORD *, _QWORD, uint64_t);
  uint64_t v50;
  void (*v51)(_QWORD *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[3];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = &unk_100354000;
  v10 = qword_100354EE8;
  *v8 = qword_100354EE8;
  v11 = enum case for DispatchPredicate.onQueue(_:);
  v12 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104);
  v12(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v13 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v8);
  v14 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v14(v8, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v52 = v1;
  v15 = swift_retain_n(a1, 2);
  v16 = Logger.logObject.getter(v15);
  v20 = static os_log_type_t.info.getter(v16, v17, v18, v19);
  v21 = os_log_type_enabled(v16, v20);
  v51 = v14;
  if (v21)
  {
    v22 = swift_slowAlloc(12, -1);
    v50 = v4;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(32, -1);
    v54[0] = v24;
    v48 = v11;
    *(_DWORD *)v23 = 136315138;
    v49 = v12;
    v25 = swift_retain(a1);
    v26 = UUID.uuidString.getter(v25);
    v28 = v27;
    swift_release(a1);
    v53 = sub_1001C56EC(v26, v28, v54);
    v12 = v49;
    v11 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v23 + 4, v23 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v16, v20, "Disconnected %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v29 = v24;
    v9 = (_QWORD *)&unk_100354000;
    swift_slowDealloc(v29, -1, -1);
    v30 = v23;
    v4 = v50;
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

  v31 = v52;
  swift_beginAccess(v52 + OBJC_IVAR____TtC10seserviced13AlishaPairing_activeFirstApproaches, v54, 33, 0);
  v32 = sub_1000D3670(a1);
  swift_endAccess(v54);
  swift_release(v32);
  v33 = *(_QWORD *)(v31 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer);
  v2 = &OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  if (!v33)
  {
LABEL_11:
    if (qword_100344690 == -1)
      goto LABEL_12;
    goto LABEL_20;
  }
  v34 = v33 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  v35 = a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  swift_retain(v33);
  if ((static UUID.== infix(_:_:)(v34, v35) & 1) == 0)
  {
    swift_release(v33);
    goto LABEL_11;
  }
  sub_100081DE8(2);
  swift_release(v33);
  while (1)
  {
    if (qword_1003446C8 != -1)
LABEL_18:
      swift_once(&qword_1003446C8, sub_1001A0A18);
    v39 = qword_100354DA8;
    v40 = (void *)v9[477];
    *v8 = v40;
    v12(v8, v11, v4);
    v41 = v40;
    LOBYTE(v40) = _dispatchPreconditionTest(_:)(v8);
    v51(v8, v4);
    if ((v40 & 1) != 0)
      break;
    __break(1u);
LABEL_20:
    swift_once(&qword_100344690, sub_100182BE4);
LABEL_12:
    v36 = qword_100354D70;
    swift_retain(a1);
    v37 = sub_100196F9C(v36, a1);
    swift_release(a1);
    v38 = (void *)sub_10009F62C(v37);
    swift_bridgeObjectRelease(v37);
    if (v38)
    {
      sub_100184FC8();

    }
  }
  v42 = a1 + *v2;
  swift_beginAccess(v39 + OBJC_IVAR____TtC10seserviced9AlishaUWB_pendingTimeSyncEvents, v54, 33, 0);
  sub_10012E5FC(v42);
  swift_endAccess(v54);
  v43 = objc_opt_self(SESDAnalyticsLogger);
  UUID.uuidString.getter(v43);
  v45 = v44;
  v46 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v45);
  sub_100048BC0(v43, v46);

}

void sub_100083A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  char v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = a2;
  v27 = a3;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = (void *)qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = v11;
  v13 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once(&qword_1003446C8, sub_1001A0A18);
    goto LABEL_8;
  }
  v14 = swift_retain_n(a4, 2);
  v15 = Logger.logObject.getter(v14);
  v19 = static os_log_type_t.info.getter(v15, v16, v17, v18);
  if (os_log_type_enabled(v15, v19))
  {
    v20 = swift_slowAlloc(42, -1);
    v21 = swift_slowAlloc(32, -1);
    v28 = a1;
    v29 = v21;
    *(_DWORD *)v20 = 134218754;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2048;
    v28 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v20 + 14, v20 + 22);
    *(_WORD *)(v20 + 22) = 2048;
    v28 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v20 + 24, v20 + 32);
    *(_WORD *)(v20 + 32) = 2080;
    v22 = swift_retain(a4);
    v23 = UUID.uuidString.getter(v22);
    v25 = v24;
    swift_release(a4);
    v28 = sub_1001C56EC(v23, v25, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v20 + 34, v20 + 42);
    swift_release_n(a4, 2);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v15, v19, "Time sync event type %ld ticks %llu counter %llu peer %s", (uint8_t *)v20, 0x2Au);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    swift_release_n(a4, 2);
  }

  if (qword_1003446C8 != -1)
    goto LABEL_10;
LABEL_8:
  sub_10019EB9C(a1, v26, v27, a4);
}

uint64_t sub_100083D18(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30[2];

  v13 = swift_bridgeObjectRetain_n(a2, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v27 = a5;
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = a6;
    v18 = a7;
    v19 = swift_slowAlloc(32, -1);
    v30[0] = v19;
    *(_DWORD *)v16 = 136315138;
    swift_bridgeObjectRetain(a2);
    v29 = sub_1001C56EC(a1, a2, v30);
    a4 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Sending %s", v16, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v20 = v19;
    a7 = v18;
    a6 = v17;
    swift_slowDealloc(v20, -1, -1);
    v21 = v16;
    a5 = v27;
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
  }

  if (qword_100344680 != -1)
    swift_once(&qword_100344680, sub_10016E9A8);
  sub_100176C18(a3, a4, a5, a6);
  v23 = v22;
  v25 = v24;
  if (qword_1003445A0 != -1)
    swift_once(&qword_1003445A0, sub_1000B26B0);
  sub_1000ADCAC(v23, v25, a7);
  sub_100063CD0(v23, v25);
  return 1;
}

uint64_t sub_1000840BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  unsigned int v8;
  void (*v9)(_QWORD *, _QWORD, uint64_t);
  id v10;
  uint64_t v11;
  void (*v12)(_QWORD *, uint64_t);
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  unsigned int v24;
  _BOOL4 v25;
  uint8_t *v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  os_unfair_lock_s *v40;
  os_unfair_lock_s *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint8_t *v66;
  uint8_t *v67;
  uint64_t v68;
  void (*v69)(_QWORD *, uint64_t);
  unsigned int v70;
  void (*v71)(_QWORD *, _QWORD, uint64_t);
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[4];
  char v77[24];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (const char **)((char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = (void *)qword_100354EE8;
  *v6 = qword_100354EE8;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v9 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v10 = v7;
  v11 = _dispatchPreconditionTest(_:)(v6);
  v12 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  result = ((uint64_t (*)(_QWORD *, uint64_t))v12)(v6, v3);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_29:
    swift_once(&qword_1003445B8, sub_1000EAA4C);
    goto LABEL_11;
  }
  v1 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state))
    return result;
  v14 = (_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_activeFirstApproaches);
  swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_activeFirstApproaches, v77, 0, 0);
  v73 = v14;
  v15 = *v14;
  v16 = swift_bridgeObjectRetain(*v14);
  v11 = (uint64_t)sub_100080660(v16);
  result = swift_bridgeObjectRelease(v15);
  if (!v11)
    return result;
  v69 = v12;
  v17 = v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_logger;
  v18 = swift_retain_n(v11, 2);
  v72 = v17;
  v19 = Logger.logObject.getter(v18);
  v23 = static os_log_type_t.info.getter(v19, v20, v21, v22);
  v24 = v23;
  v25 = os_log_type_enabled(v19, v23);
  v71 = v9;
  v74 = 0;
  if (v25)
  {
    v70 = v24;
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v68 = v27;
    *(_DWORD *)v26 = 136315138;
    v28 = v26 + 12;
    v76[0] = v27;
    v66 = v26 + 4;
    v67 = v26;
    v29 = type metadata accessor for UUID(0);
    v30 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v31 = dispatch thunk of CustomStringConvertible.description.getter(v29, v30);
    v33 = v32;
    v75 = sub_1001C56EC(v31, v32, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v66, v28);
    swift_release_n(v11, 2);
    swift_bridgeObjectRelease(v33);
    v34 = v67;
    _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v70, "Processing First Approach for %s", v67, 0xCu);
    v35 = v68;
    swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {
    swift_release_n(v11, 2);
  }

  v70 = v8;
  v36 = qword_1003445B8;
  swift_retain(v11);
  if (v36 != -1)
    goto LABEL_29;
LABEL_11:
  v37 = (const char *)off_1003463F0;
  v38 = swift_allocObject(&unk_1003074F8, 32, 7);
  *(_QWORD *)(v38 + 16) = sub_100095FB0;
  *(_QWORD *)(v38 + 24) = v11;
  v39 = (const char *)__chkstk_darwin();
  *(&v65 - 4) = (const char *)sub_100095FDC;
  *(&v65 - 3) = v39;
  *(&v65 - 2) = v37;
  v41 = v40 + 4;
  swift_retain(v11);
  os_unfair_lock_lock(v41);
  v42 = v74;
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, v76);
  os_unfair_lock_unlock(v41);
  v43 = v76[0];
  swift_release(v11);
  swift_release(v38);
  v44 = (void *)sub_10009F618(v43);
  v45 = swift_bridgeObjectRelease(v43);
  if (!v44)
  {
    v58 = Logger.logObject.getter(v45);
    v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Failed to retrieve endpoint", v60, 2u);
      swift_slowDealloc(v60, -1, -1);
    }

    swift_beginAccess(v73, v76, 33, 0);
    v61 = sub_1000D3670(v11);
    swift_endAccess(v76);
    swift_release(v61);
    if (qword_100344690 != -1)
      swift_once(&qword_100344690, sub_100182BE4);
    v62 = qword_100354D70;
    swift_retain(v11);
    v63 = sub_100196F9C(v62, v11);
    swift_release(v11);
    v64 = (void *)sub_10009F62C(v63);
    swift_bridgeObjectRelease(v63);
    if (v64)
    {
      sub_100184FC8();

    }
    return swift_release(v11);
  }
  *(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) = 1;
  sub_100080958(&OBJC_IVAR____TtC10seserviced13AlishaPairing_mode, (uint64_t)&type metadata for AlishaPairing.Mode, "New pairing mode %s", v65);
  *(_BYTE *)(v2 + v1) = 5;
  sub_100080958(&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s", v65);
  v46 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer) = v11;
  swift_retain(v11);
  swift_release(v46);
  v47 = *(void **)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint) = v44;
  v48 = v44;

  if (qword_100344680 != -1)
    swift_once(&qword_100344680, sub_10016E9A8);
  v49 = qword_100354D60;
  v50 = qword_100354EE8;
  *v6 = qword_100354EE8;
  v71(v6, v70, v3);
  v51 = (id)v50;
  LOBYTE(v50) = _dispatchPreconditionTest(_:)(v6);
  v69(v6, v3);
  if ((v50 & 1) != 0)
  {
    *(_BYTE *)(v49 + OBJC_IVAR____TtC10seserviced6Alisha_isPairingInProgress) = 1;
    if (qword_1003445A8 == -1)
      goto LABEL_16;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003445A8, sub_1000C35EC);
LABEL_16:
  v52 = type metadata accessor for DSKBLEPairing.BLEPairingRequest();
  v53 = swift_allocObject(v52, 80, 7);
  *(_OWORD *)(v53 + 16) = xmmword_1002888D0;
  *(_QWORD *)(v53 + 32) = v11;
  *(_QWORD *)(v53 + 40) = &off_1003051C8;
  *(_QWORD *)(v53 + 48) = sub_100096F28;
  *(_QWORD *)(v53 + 56) = v2;
  *(_QWORD *)(v53 + 64) = sub_100096E98;
  *(_QWORD *)(v53 + 72) = v2;
  swift_retain_n(v2, 2);
  swift_retain(v11);
  sub_1000AF360(v53);
  v54 = swift_release(v53);
  if (!v42)
  {

    return swift_release(v11);
  }
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Failed to pair", v57, 2u);
    swift_slowDealloc(v57, -1, -1);
  }

  sub_100081DE8(2);
  swift_release(v11);
  return swift_errorRelease(v42);
}

void sub_1000847F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  const char *v18[3];
  _BYTE v19[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (const char **)((char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (qword_100344550 != -1)
LABEL_7:
    swift_once(&qword_100344550, sub_1000601F0);
  sub_100063090();
  *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_isSEAccessAllowed) = 0;
  v9 = (_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart);
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart);
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart + 8);
  *v9 = 0;
  v9[1] = 0;
  sub_10008F210(v10, v11);
  v12 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_activeFirstApproaches);
  swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_activeFirstApproaches, v19, 1, 0);
  v13 = *v12;
  *v12 = (uint64_t)&_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v13);
  v14 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_requestedFirstApproaches);
  swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_requestedFirstApproaches, v18, 1, 0);
  v15 = *v14;
  *v14 = (uint64_t)&_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v15);
  v16 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint) = 0;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) = 0;
  sub_100080958(&OBJC_IVAR____TtC10seserviced13AlishaPairing_mode, (uint64_t)&type metadata for AlishaPairing.Mode, "New pairing mode %s", v18[0]);
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer) = 0;
  swift_release(v17);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) = 0;
  sub_100080958(&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s", v18[0]);
}

uint64_t sub_100084A08(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v12;
  char v13;

  if (objc_msgSend(a1, "endPointType") != (id)1)
    return 0;
  v4 = objc_msgSend(a1, "publicKeyIdentifier");
  v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  v8 = a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier;
  v9 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  v10 = *(_QWORD *)(v8 + 8);
  if (v10 >> 60 == 15)
  {
    sub_10006B9B4(v5, v7);
    sub_10006B9B4(v9, v10);
    return 0;
  }
  sub_100063C8C(v5, v7);
  sub_10006BA34(v9, v10);
  sub_10007C23C(v5, v7);
  v13 = v12;
  sub_10006B9B4(v9, v10);
  sub_100063CD0(v5, v7);
  sub_100063CD0(v5, v7);
  return v13 & 1;
}

void sub_100084B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD v57[24];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[5];

  v6 = v5;
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (_QWORD *)((char *)v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v17 = qword_100354EE8;
  *v16 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  v18 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x100085328);
  }
  v57[22] = a3;
  v19 = v6 + OBJC_IVAR____TtC10seserviced13AlishaPairing_logger;
  v20 = swift_retain_n(a5, 2);
  v21 = Logger.logObject.getter(v20);
  v25 = static os_log_type_t.info.getter(v21, v22, v23, v24);
  v26 = os_log_type_enabled(v21, v25);
  v57[23] = a4;
  if (v26)
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v59 = a1;
    v29 = v28;
    v63[0] = v28;
    *(_DWORD *)v27 = 136315138;
    v60 = v19;
    v58 = v6;
    v30 = swift_retain(a5);
    v31 = UUID.uuidString.getter(v30);
    v33 = v32;
    swift_release(a5);
    v61 = sub_1001C56EC(v31, v33, v63);
    v6 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v27 + 4, v27 + 12);
    swift_release_n(a5, 2);
    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v21, v25, "Pairing started %s", v27, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    swift_release_n(a5, 2);
  }

  v34 = *(_QWORD *)(v6 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer);
  if (!v34)
    goto LABEL_12;
  v35 = v34 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  v36 = a5 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  swift_retain(*(_QWORD *)(v6 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer));
  if ((static UUID.== infix(_:_:)(v35, v36) & 1) == 0)
  {
    swift_release(v34);
LABEL_12:
    v38 = swift_retain_n(a5, 2);
    v39 = Logger.logObject.getter(v38);
    v41 = static os_log_type_t.error.getter(v39, v40);
    if (os_log_type_enabled(v39, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      v63[0] = v43;
      *(_DWORD *)v42 = 136315138;
      v44 = swift_retain(a5);
      v45 = UUID.uuidString.getter(v44);
      v47 = v46;
      swift_release(a5);
      v61 = sub_1001C56EC(v45, v47, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v42 + 4, v42 + 12);
      swift_release_n(a5, 2);
      swift_bridgeObjectRelease(v47);
      _os_log_impl((void *)&_mh_execute_header, v39, v41, "Wrong peer %s", v42, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {
      swift_release_n(a5, 2);
    }

    return;
  }
  v37 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
  if (*(_BYTE *)(v6 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) == 5)
    __asm { BR              X9 }
  v48 = swift_retain_n(v6, 2);
  v49 = Logger.logObject.getter(v48);
  v51 = static os_log_type_t.error.getter(v49, v50);
  if (os_log_type_enabled(v49, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc(12, -1);
    v53 = swift_slowAlloc(32, -1);
    *(_DWORD *)v52 = 136315138;
    v63[0] = v53;
    LOBYTE(v61) = *(_BYTE *)(v6 + v37);
    v54 = String.init<A>(describing:)(&v61, &type metadata for AlishaPairing.State);
    v56 = v55;
    v61 = sub_1001C56EC(v54, v55, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v52 + 4, v52 + 12);
    swift_release_n(v6, 2);
    swift_bridgeObjectRelease(v56);
    _os_log_impl((void *)&_mh_execute_header, v49, v51, "Wrong state %s", v52, 0xCu);
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v52, -1, -1);
  }
  else
  {
    swift_release_n(v6, 2);
  }

  sub_100081DE8(2);
  swift_release(v34);
}

uint64_t sub_100085570()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;

  if (BYTE6(v2) == 8)
    return ((uint64_t (*)(void))((char *)&loc_1000855C0 + dword_100086474[v0]))();
  sub_100063C8C(*(_QWORD *)(v3 - 264), v2);
  v5 = sub_100063C8C(*(_QWORD *)(v3 - 272), *(_QWORD *)(v3 - 256));
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.error.getter(v6, v7);
  if (!os_log_type_enabled(v6, v8))
  {

    sub_100063CD0(*(_QWORD *)(v3 - 264), v2);
    sub_100063CD0(*(_QWORD *)(v3 - 272), *(_QWORD *)(v3 - 256));
    sub_100081DE8(1);
    sub_100063CD0(*(_QWORD *)(v3 - 272), *(_QWORD *)(v3 - 256));
    sub_100063CD0(*(_QWORD *)(v3 - 264), v2);
    JUMPOUT(0x100085B90);
  }
  *(_DWORD *)swift_slowAlloc(42, -1) = 134218752;
  return ((uint64_t (*)(void))((char *)&loc_1000856C0 + dword_100086484[v1]))();
}

uint64_t sub_100085580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 264);
  if (__OFSUB__(HIDWORD(v2), (_DWORD)v2))
  {
    __break(1u);
    JUMPOUT(0x100085EE8);
  }
  if (HIDWORD(v2) - (_DWORD)v2 != 8)
    JUMPOUT(0x100085650);
  return ((uint64_t (*)(void))((char *)&loc_1000855C0 + dword_100086474[v0]))();
}

void sub_10008559C()
{
  uint64_t v0;

  if (!__OFSUB__(*(_QWORD *)(*(_QWORD *)(v0 - 264) + 24), *(_QWORD *)(*(_QWORD *)(v0 - 264) + 16)))
    JUMPOUT(0x1000855B0);
  __break(1u);
}

uint64_t sub_1000855D0()
{
  int v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;

  if (BYTE6(*(_QWORD *)(v2 - 256)) == 4)
    return ((uint64_t (*)(void))((char *)&loc_100085634 + dword_1000864A4[*(_QWORD *)(v2 - 168) >> 62]))();
  sub_100063C8C(*(_QWORD *)(v2 - 264), v1);
  v4 = sub_100063C8C(*(_QWORD *)(v2 - 272), *(_QWORD *)(v2 - 256));
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v5, v6))
    JUMPOUT(0x1000856D8);
  *(_DWORD *)swift_slowAlloc(42, -1) = 134218752;
  return ((uint64_t (*)(void))((char *)&loc_1000856C0 + dword_100086484[v0]))();
}

uint64_t sub_1000855EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 272);
  if (__OFSUB__(HIDWORD(v1), (_DWORD)v1))
  {
    __break(1u);
    JUMPOUT(0x1000863C8);
  }
  if (HIDWORD(v1) - (_DWORD)v1 != 4)
    JUMPOUT(0x100085650);
  return ((uint64_t (*)(void))((char *)&loc_100085634 + dword_1000864A4[*(_QWORD *)(v0 - 168) >> 62]))();
}

void sub_100085608()
{
  uint64_t v0;

  if (__OFSUB__(*(_QWORD *)(*(_QWORD *)(v0 - 272) + 24), *(_QWORD *)(*(_QWORD *)(v0 - 272) + 16)))
  {
    __break(1u);
    JUMPOUT(0x1000863CCLL);
  }
  JUMPOUT(0x10008561CLL);
}

uint64_t sub_100085644()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  if (BYTE6(*(_QWORD *)(v2 - 168)) < 0x22uLL)
    goto LABEL_10;
  v4 = *(_QWORD *)(v2 - 176);
  v3 = *(_QWORD *)(v2 - 168);
  sub_100063C8C(v4, v3);
  sub_1000723E8(v4, v3, 0);
  if (v0)
  {
    swift_errorRelease(v0);
LABEL_10:
    v14 = *(_QWORD *)(v2 - 176);
    v13 = *(_QWORD *)(v2 - 168);
    sub_100063C8C(v14, v13);
    v15 = sub_100063C8C(v14, v13);
    v16 = Logger.logObject.getter(v15);
    v18 = static os_log_type_t.error.getter(v16, v17);
    if (os_log_type_enabled(v16, v18))
    {
      v19 = (_DWORD *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      *(_QWORD *)(v2 - 144) = v20;
      *(_QWORD *)(v2 - 120) = v20;
      *(_QWORD *)(v2 - 152) = v19;
      *v19 = 136315138;
      *(_QWORD *)(v2 - 184) = v19 + 1;
      v21 = *(_QWORD *)(v2 - 176);
      v22 = *(_QWORD *)(v2 - 168);
      sub_1001BD2CC(v21, v22);
      v24 = v23;
      *(_QWORD *)(v2 - 136) = v23;
      v25 = sub_100063D3C((uint64_t *)&unk_100346060);
      v26 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v27 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v25, v26);
      v29 = v28;
      swift_bridgeObjectRelease(v24);
      *(_QWORD *)(v2 - 136) = sub_1001C56EC(v27, v29, (uint64_t *)(v2 - 120));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 136, v2 - 128, *(_QWORD *)(v2 - 184), v19 + 3);
      swift_bridgeObjectRelease(v29);
      sub_100063CD0(v21, v22);
      sub_100063CD0(v21, v22);
      v30 = *(uint8_t **)(v2 - 152);
      _os_log_impl((void *)&_mh_execute_header, v16, v18, "Invalid OOB data %s", v30, 0xCu);
      v31 = *(_QWORD *)(v2 - 144);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      v33 = *(_QWORD *)(v2 - 176);
      v32 = *(_QWORD *)(v2 - 168);
      sub_100063CD0(v33, v32);
      sub_100063CD0(v33, v32);
    }
    JUMPOUT(0x100085B68);
  }
  if (v5 != 114)
    goto LABEL_10;
  v7 = *(_QWORD *)(v2 - 176);
  v6 = *(_QWORD *)(v2 - 168);
  sub_100063C8C(v7, v6);
  sub_1000723E8(v7, v6, 17);
  if (v8 != 99)
    goto LABEL_10;
  v10 = *(_QWORD *)(v2 - 176);
  v9 = *(_QWORD *)(v2 - 168);
  *(_QWORD *)(v2 - 312) = Data.subdata(in:)(1, 17, v10, v9);
  *(_QWORD *)(v2 - 304) = v11;
  *(_QWORD *)(v2 - 176) = Data.subdata(in:)(18, 34, v10, v9);
  *(_QWORD *)(v2 - 168) = v12;
  if (v1)
  {
    if (v1 == 1)
    {
      if (!__OFSUB__(HIDWORD(*(_QWORD *)(v2 - 152)), *(_QWORD *)(v2 - 152)))
        return ((uint64_t (*)(void))((char *)&loc_100085C18 + dword_1000864B4[*(_QWORD *)(v2 - 168) >> 62]))();
      __break(1u);
LABEL_18:
      __break(1u);
      JUMPOUT(0x1000863E4);
    }
    if (__OFSUB__(*(_QWORD *)(*(_QWORD *)(v2 - 152) + 24), *(_QWORD *)(*(_QWORD *)(v2 - 152) + 16)))
      goto LABEL_18;
  }
  return ((uint64_t (*)(void))((char *)&loc_100085C18 + dword_1000864B4[*(_QWORD *)(v2 - 168) >> 62]))();
}

uint64_t sub_1000856D0()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 - 120) = BYTE6(v2);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 120, v3 - 112, v0 + 4, v0 + 12);
  sub_100063CD0(*(_QWORD *)(v3 - 264), v2);
  *(_WORD *)(v0 + 12) = 2048;
  *(_QWORD *)(v3 - 120) = 8;
  v4 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 120, v3 - 112, v0 + 14, v0 + 22);
  *(_WORD *)(v0 + 22) = 2048;
  return ((uint64_t (*)(uint64_t))((char *)&loc_10008579C + dword_100086494[v1]))(v4);
}

uint64_t sub_100085704()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v3 - 264);
  if (__OFSUB__(HIDWORD(v4), (_DWORD)v4))
  {
    __break(1u);
    JUMPOUT(0x1000863B8);
  }
  *(_QWORD *)(v3 - 120) = HIDWORD(v4) - (int)v4;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 120, v3 - 112, v0 + 4, v0 + 12);
  sub_100063CD0(*(_QWORD *)(v3 - 264), v2);
  *(_WORD *)(v0 + 12) = 2048;
  *(_QWORD *)(v3 - 120) = 8;
  v5 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 120, v3 - 112, v0 + 14, v0 + 22);
  *(_WORD *)(v0 + 22) = 2048;
  return ((uint64_t (*)(uint64_t))((char *)&loc_10008579C + dword_100086494[v1]))(v5);
}

void sub_100085720()
{
  uint64_t v0;

  if (__OFSUB__(*(_QWORD *)(*(_QWORD *)(v0 - 264) + 24), *(_QWORD *)(*(_QWORD *)(v0 - 264) + 16)))
  {
    __break(1u);
    JUMPOUT(0x1000863BCLL);
  }
  JUMPOUT(0x100085734);
}

void sub_1000857AC()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 120) = BYTE6(*(_QWORD *)(v4 - 256));
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 120, v4 - 112, v2 + 24, v2 + 32);
  sub_100063CD0(*(_QWORD *)(v4 - 272), *(_QWORD *)(v4 - 256));
  *(_WORD *)(v2 + 32) = 2048;
  *(_QWORD *)(v4 - 120) = 4;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 120, v4 - 112, v2 + 34, v2 + 42);
  _os_log_impl((void *)&_mh_execute_header, v0, v1, "Invalid E1_Payload %ld != %ld or Tag1 %ld != %ld", (uint8_t *)v2, 0x2Au);
  swift_slowDealloc(v2, -1, -1);

  sub_100081DE8(1);
  sub_100063CD0(*(_QWORD *)(v4 - 272), *(_QWORD *)(v4 - 256));
  sub_100063CD0(*(_QWORD *)(v4 - 264), v3);
  JUMPOUT(0x100085B90);
}

void sub_10008587C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 - 176);
  if (!__OFSUB__(HIDWORD(v2), (_DWORD)v2))
  {
    if (HIDWORD(v2) - (int)v2 >= 34)
    {
      v4 = *(_QWORD *)(v1 - 176);
      v3 = *(_QWORD *)(v1 - 168);
      sub_100063C8C(v4, v3);
      sub_1000723E8(v4, v3, 0, 0, 0);
      if (!v0)
        JUMPOUT(0x1000858F0);
      swift_errorRelease(v0);
    }
    JUMPOUT(0x100085998);
  }
  __break(1u);
  JUMPOUT(0x1000863D0);
}

void sub_100085894()
{
  uint64_t v0;

  if (__OFSUB__(*(_QWORD *)(*(_QWORD *)(v0 - 176) + 24), *(_QWORD *)(*(_QWORD *)(v0 - 176) + 16)))
  {
    __break(1u);
    JUMPOUT(0x1000863D4);
  }
  JUMPOUT(0x1000858A4);
}

uint64_t sub_100085C28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  if (__OFADD__(a1, BYTE6(*(_QWORD *)(v1 - 168))))
  {
    __break(1u);
    JUMPOUT(0x1000863D8);
  }
  return ((uint64_t (*)(void))((char *)&loc_100085C7C + dword_1000864C4[*(_QWORD *)(v1 - 304) >> 62]))();
}

uint64_t sub_100085C8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);

  v5 = BYTE6(*(_QWORD *)(v4 - 304));
  if (__OFADD__(a1, v5))
  {
    __break(1u);
    JUMPOUT(0x1000863DCLL);
  }
  *(_QWORD *)(v4 - 120) = sub_10007C71C(a1 + v5);
  *(_QWORD *)(v4 - 112) = v6;
  Data.append(_:)(*(_QWORD *)(v4 - 152), *(_QWORD *)(v4 - 184));
  Data.append(_:)(*(_QWORD *)(v4 - 176), *(_QWORD *)(v4 - 168));
  Data.append(_:)(*(_QWORD *)(v4 - 312), *(_QWORD *)(v4 - 304));
  v7 = *(_QWORD *)(v4 - 120);
  v8 = *(_QWORD *)(v4 - 112);
  sub_100063C8C(v7, v8);
  sub_100092148(0, v7, v8, *(_QWORD *)(v4 - 200), *(_QWORD *)(v4 - 208));
  *(_QWORD *)(v4 - 184) = v10;
  *(_QWORD *)(v4 - 320) = v11;
  *(_QWORD *)(v4 - 152) = v12;
  if (v2)
  {
    swift_errorRelease(v2);
    v13 = sub_100063CD0(v7, v8);
    v14 = Logger.logObject.getter(v13);
    v16 = static os_log_type_t.error.getter(v14, v15);
    if (os_log_type_enabled(v14, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v16, "Failed to encrypt BTAddrA || Ca || ra", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    sub_100081DE8(1);
    sub_100063CD0(*(_QWORD *)(v4 - 296), *(_QWORD *)(v4 - 288));
    sub_100063CD0(*(_QWORD *)(v4 - 192), *(_QWORD *)(v4 - 216));
    sub_100063CD0(*(_QWORD *)(v4 - 200), *(_QWORD *)(v4 - 208));
    sub_100063CD0(*(_QWORD *)(v4 - 232), *(_QWORD *)(v4 - 224));
    sub_100063CD0(*(_QWORD *)(v4 - 176), *(_QWORD *)(v4 - 168));
    sub_100063CD0(*(_QWORD *)(v4 - 312), *(_QWORD *)(v4 - 304));
    sub_100063CD0(*(_QWORD *)(v4 - 248), *(_QWORD *)(v4 - 240));
    swift_release(v1);
    sub_100063CD0(*(_QWORD *)(v4 - 272), *(_QWORD *)(v4 - 256));
    sub_100063CD0(*(_QWORD *)(v4 - 264), v3);
    sub_100063CD0(v7, v8);
    JUMPOUT(0x10008544CLL);
  }
  v18 = v9;
  v19 = sub_100063CD0(v7, v8);
  v20 = (uint64_t (*)(uint64_t))((char *)&loc_100085E60 + dword_1000864D4[v18 >> 62]);
  *(_QWORD *)(v4 - 328) = *(_QWORD *)(v4 - 152) >> 62;
  return v20(v19);
}

uint64_t sub_100085E80()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;

  if (BYTE6(v2) == 38)
    return ((uint64_t (*)(void))((char *)&loc_100085EC8 + dword_1000864E4[*(_QWORD *)(v3 - 328)]))();
  sub_100063C8C(*(_QWORD *)(v3 - 184), v2);
  v5 = sub_100063C8C(*(_QWORD *)(v3 - 320), *(_QWORD *)(v3 - 152));
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.error.getter(v6, v7);
  if (!os_log_type_enabled(v6, v8))
  {

    sub_100063CD0(*(_QWORD *)(v3 - 184), v2);
    sub_100063CD0(*(_QWORD *)(v3 - 320), *(_QWORD *)(v3 - 152));
    sub_100081DE8(1);

    sub_100063CD0(*(_QWORD *)(v3 - 296), *(_QWORD *)(v3 - 288));
    sub_100063CD0(*(_QWORD *)(v3 - 192), *(_QWORD *)(v3 - 216));
    sub_100063CD0(*(_QWORD *)(v3 - 200), *(_QWORD *)(v3 - 208));
    sub_100063CD0(*(_QWORD *)(v3 - 232), *(_QWORD *)(v3 - 224));
    sub_100063CD0(*(_QWORD *)(v3 - 176), *(_QWORD *)(v3 - 168));
    sub_100063CD0(*(_QWORD *)(v3 - 312), *(_QWORD *)(v3 - 304));
    sub_100063CD0(*(_QWORD *)(v3 - 248), *(_QWORD *)(v3 - 240));
    swift_release(v0);
    sub_100063CD0(*(_QWORD *)(v3 - 320), *(_QWORD *)(v3 - 152));
    sub_100063CD0(*(_QWORD *)(v3 - 184), v2);
    JUMPOUT(0x100086384);
  }
  *(_DWORD *)swift_slowAlloc(42, -1) = 134218752;
  return ((uint64_t (*)(void))((char *)&loc_10008614C + dword_1000864F4[v1]))();
}

#error "100085FD8: call analysis failed (funcsize=141)"

#error "100085FD8: call analysis failed (funcsize=116)"

void sub_100085F08()
{
  uint64_t v0;

  if (__OFSUB__(*(_QWORD *)(*(_QWORD *)(v0 - 320) + 24), *(_QWORD *)(*(_QWORD *)(v0 - 320) + 16)))
  {
    __break(1u);
    JUMPOUT(0x100086414);
  }
  JUMPOUT(0x100085F1CLL);
}

uint64_t sub_10008615C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 - 136) = BYTE6(v0);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 136, v2 - 128, v1 + 4, v1 + 12);
  sub_100063CD0(*(_QWORD *)(v2 - 184), v0);
  *(_WORD *)(v1 + 12) = 2048;
  *(_QWORD *)(v2 - 136) = 38;
  v3 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 136, v2 - 128, v1 + 14, v1 + 22);
  *(_WORD *)(v1 + 22) = 2048;
  return ((uint64_t (*)(uint64_t))((char *)&loc_10008621C + dword_100086504[*(_QWORD *)(v2 - 328)]))(v3);
}

uint64_t sub_100086188()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 - 184);
  if (__OFSUB__(HIDWORD(v3), (_DWORD)v3))
  {
    __break(1u);
    JUMPOUT(0x100086400);
  }
  *(_QWORD *)(v2 - 136) = HIDWORD(v3) - (int)v3;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 136, v2 - 128, v1 + 4, v1 + 12);
  sub_100063CD0(*(_QWORD *)(v2 - 184), v0);
  *(_WORD *)(v1 + 12) = 2048;
  *(_QWORD *)(v2 - 136) = 38;
  v4 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 136, v2 - 128, v1 + 14, v1 + 22);
  *(_WORD *)(v1 + 22) = 2048;
  return ((uint64_t (*)(uint64_t))((char *)&loc_10008621C + dword_100086504[*(_QWORD *)(v2 - 328)]))(v4);
}

void sub_1000861A0()
{
  uint64_t v0;

  if (__OFSUB__(*(_QWORD *)(*(_QWORD *)(v0 - 184) + 24), *(_QWORD *)(*(_QWORD *)(v0 - 184) + 16)))
  {
    __break(1u);
    JUMPOUT(0x100086404);
  }
  JUMPOUT(0x1000861B0);
}

void sub_10008622C()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 136) = BYTE6(*(_QWORD *)(v3 - 152));
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 136, v3 - 128, v2 + 24, v2 + 32);
  sub_100063CD0(*(_QWORD *)(v3 - 320), *(_QWORD *)(v3 - 152));
  *(_WORD *)(v2 + 32) = 2048;
  *(_QWORD *)(v3 - 136) = 4;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 136, v3 - 128, v2 + 34, v2 + 42);
  _os_log_impl((void *)&_mh_execute_header, v0, v1, "Invalid E2_Payload %ld != %ld or Tag2 %ld != %ld", (uint8_t *)v2, 0x2Au);
  swift_slowDealloc(v2, -1, -1);

  JUMPOUT(0x1000862F4);
}

void sub_100086514(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSString v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t inited;
  Swift::Int v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t (*v106)();
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  const char *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  id v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  const void *v135;
  const char *v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t aBlock;
  unint64_t v159;
  uint64_t (*v160)(uint64_t);
  void *v161;
  uint64_t (*v162)();
  _QWORD *v163;
  char v164[24];
  _QWORD *v165;
  char v166[8];

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v154 = (char *)&v136 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v152 = *(_QWORD *)(v10 - 8);
  v153 = v10;
  __chkstk_darwin(v10, v11);
  v151 = (char *)&v136 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (const char **)((char *)&v136 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v18 = qword_100354EE8;
  *v17 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v13);
  v19 = (id)v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v17, v13);
  if ((v18 & 1) != 0)
  {
    v149 = v7;
    v150 = v6;
    v13 = v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_logger;
    swift_retain(a2);
    swift_errorRetain(a1);
    swift_retain(a2);
    v20 = swift_errorRetain(a1);
    v21 = Logger.logObject.getter(v20);
    v25 = static os_log_type_t.info.getter(v21, v22, v23, v24);
    if (os_log_type_enabled(v21, v25))
    {
      v155 = v3;
      v156 = v13;
      v26 = swift_slowAlloc(22, -1);
      v27 = (_QWORD *)swift_slowAlloc(64, -1);
      v165 = v27;
      *(_DWORD *)v26 = 136315394;
      v28 = swift_retain(a2);
      v29 = UUID.uuidString.getter(v28);
      v31 = v30;
      swift_release(a2);
      aBlock = sub_1001C56EC(v29, v31, (uint64_t *)&v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v159, v26 + 4, v26 + 12);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v31);
      *(_WORD *)(v26 + 12) = 2080;
      v32 = 0xE000000000000000;
      if (a1)
      {
        aBlock = 0;
        v159 = 0xE000000000000000;
        v33._countAndFlagsBits = 0x7272652068746977;
        v33._object = (void *)0xEB0000000020726FLL;
        String.append(_:)(v33);
        v157 = a1;
        v34 = sub_100063D3C(&qword_100345378);
        _print_unlocked<A, B>(_:_:)(&v157, &aBlock, v34, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v35 = aBlock;
        v32 = v159;
      }
      else
      {
        v35 = 0;
      }
      aBlock = sub_1001C56EC(v35, v32, (uint64_t *)&v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v159, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease(v32);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v21, v25, "Pairing completed for %s %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      v3 = v155;
      v13 = v156;
    }
    else
    {
      swift_release_n(a2, 2);

      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
    v17 = *(_QWORD **)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer);
    if (v17)
    {
      v36 = (char *)v17 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      v37 = a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      swift_retain(*(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer));
      v38 = static UUID.== infix(_:_:)(v36, v37);
      if ((v38 & 1) != 0)
      {
        v7 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
        if (*(_BYTE *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) == 7)
        {
          if (a1)
          {
            swift_errorRetain(a1);
            swift_errorRetain(a1);
            v39 = swift_errorRetain(a1);
            v40 = Logger.logObject.getter(v39);
            v42 = static os_log_type_t.error.getter(v40, v41);
            if (os_log_type_enabled(v40, v42))
            {
              v43 = (uint8_t *)swift_slowAlloc(12, -1);
              v44 = (uint64_t *)swift_slowAlloc(8, -1);
              *(_DWORD *)v43 = 138412290;
              swift_errorRetain(a1);
              v45 = _swift_stdlib_bridgeErrorToNSError(a1);
              aBlock = v45;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v159, v43 + 4, v43 + 12);
              *v44 = v45;
              swift_errorRelease(a1);
              swift_errorRelease(a1);
              _os_log_impl((void *)&_mh_execute_header, v40, v42, "Pairing failed with error %@", v43, 0xCu);
              v46 = sub_100063D3C((uint64_t *)&unk_100346090);
              swift_arrayDestroy(v44, 1, v46);
              swift_slowDealloc(v44, -1, -1);
              swift_slowDealloc(v43, -1, -1);

            }
            else
            {

              swift_errorRelease(a1);
              swift_errorRelease(a1);
            }
            sub_100081DE8(2);
            swift_errorRelease(a1);
            goto LABEL_35;
          }
          v68 = OBJC_IVAR____TtC10seserviced13AlishaPairing_mode;
          if (*(_BYTE *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode))
          {
            if (*(_BYTE *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 1)
            {
              v69 = objc_opt_self(SESDAnalyticsLogger);
              UUID.uuidString.getter(v69);
              v71 = v70;
              v72 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v71);
              sub_100049154(v69, 5, v72);

LABEL_28:
              *(_BYTE *)(v3 + v7) = 8;
              sub_100080958(&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s", v136);
              v73 = sub_10007C66C((uint64_t)&off_1003053E0);
              v75 = v74;
              sub_100083D18(0xD00000000000001CLL, 0x80000001002BAF80, 3u, 17, v73, v74, a2);
              sub_100063CD0(v73, v75);
LABEL_35:
              swift_release(v17);
              return;
            }
            v81 = *(void **)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint);
            if (v81)
            {
              v82 = qword_1003445A0;
              v148 = v81;
              if (v82 == -1)
                goto LABEL_38;
              goto LABEL_44;
            }
            v58 = Logger.logObject.getter(v38);
            v89 = static os_log_type_t.error.getter(v58, v88);
            if (!os_log_type_enabled(v58, v89))
            {
LABEL_34:

              sub_100081DE8(2);
              goto LABEL_35;
            }
            v90 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v90 = 0;
            _os_log_impl((void *)&_mh_execute_header, v58, v89, "No endpoint", v90, 2u);
            v67 = v90;
LABEL_24:
            swift_slowDealloc(v67, -1, -1);
            goto LABEL_34;
          }
          v76 = swift_retain_n(v3, 2);
          v58 = Logger.logObject.getter(v76);
          v60 = static os_log_type_t.error.getter(v58, v77);
          if (os_log_type_enabled(v58, v60))
          {
            v61 = (uint8_t *)swift_slowAlloc(12, -1);
            v62 = swift_slowAlloc(32, -1);
            *(_DWORD *)v61 = 136315138;
            aBlock = v62;
            LOBYTE(v165) = *(_BYTE *)(v3 + v68);
            v78 = String.init<A>(describing:)(&v165, &type metadata for AlishaPairing.Mode);
            v80 = v79;
            v165 = (_QWORD *)sub_1001C56EC(v78, v79, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v61 + 4, v61 + 12);
            swift_release_n(v3, 2);
            swift_bridgeObjectRelease(v80);
            v66 = "Wrong mode %s";
            goto LABEL_23;
          }
        }
        else
        {
          v57 = swift_retain_n(v3, 2);
          v58 = Logger.logObject.getter(v57);
          v60 = static os_log_type_t.error.getter(v58, v59);
          if (os_log_type_enabled(v58, v60))
          {
            v61 = (uint8_t *)swift_slowAlloc(12, -1);
            v62 = swift_slowAlloc(32, -1);
            *(_DWORD *)v61 = 136315138;
            aBlock = v62;
            LOBYTE(v165) = *(_BYTE *)(v3 + v7);
            v63 = String.init<A>(describing:)(&v165, &type metadata for AlishaPairing.State);
            v65 = v64;
            v165 = (_QWORD *)sub_1001C56EC(v63, v64, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v61 + 4, v61 + 12);
            swift_release_n(v3, 2);
            swift_bridgeObjectRelease(v65);
            v66 = "Wrong state %s";
LABEL_23:
            _os_log_impl((void *)&_mh_execute_header, v58, v60, v66, v61, 0xCu);
            swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v62, -1, -1);
            v67 = v61;
            goto LABEL_24;
          }
        }
        swift_release_n(v3, 2);
        goto LABEL_34;
      }
      swift_release(v17);
    }
    v47 = swift_retain_n(a2, 2);
    v48 = Logger.logObject.getter(v47);
    v50 = static os_log_type_t.error.getter(v48, v49);
    if (os_log_type_enabled(v48, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(12, -1);
      v52 = swift_slowAlloc(32, -1);
      aBlock = v52;
      *(_DWORD *)v51 = 136315138;
      v53 = swift_retain(a2);
      v54 = UUID.uuidString.getter(v53);
      v56 = v55;
      swift_release(a2);
      v165 = (_QWORD *)sub_1001C56EC(v54, v56, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v51 + 4, v51 + 12);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v56);
      _os_log_impl((void *)&_mh_execute_header, v48, v50, "Wrong peer %s", v51, 0xCu);
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v51, -1, -1);
    }
    else
    {
      swift_release_n(a2, 2);
    }

    return;
  }
  __break(1u);
LABEL_44:
  swift_once(&qword_1003445A0, sub_1000B26B0);
LABEL_38:
  v156 = v13;
  v83 = sub_100063D3C(&qword_100346220);
  inited = swift_initStackObject(v83, v164);
  *(_OWORD *)(inited + 16) = xmmword_100288CD0;
  *(_QWORD *)(inited + 32) = a2;
  aBlock = inited;
  specialized Array._endMutation()(inited);
  v85 = aBlock;
  if (aBlock >> 62)
  {
    if ((aBlock & 0x8000000000000000) != 0)
      v91 = aBlock;
    else
      v91 = aBlock & 0xFFFFFFFFFFFFFF8;
    swift_retain(a2);
    swift_bridgeObjectRetain(v85);
    v92 = _CocoaArrayWrapper.endIndex.getter(v91);
    swift_bridgeObjectRelease(v85);
    if (v92)
      goto LABEL_40;
  }
  else
  {
    v86 = *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain(a2);
    if (v86)
    {
LABEL_40:
      v87 = (void *)sub_100090AD0(v85);
      goto LABEL_50;
    }
  }
  v87 = &_swiftEmptySetSingleton;
LABEL_50:
  swift_bridgeObjectRelease(v85);
  sub_1000ACAC4((uint64_t)v87, (uint64_t)&aBlock);
  v103 = v159;
  v104 = (uint64_t)v160;
  v105 = (unint64_t)v161;
  v106 = v162;
  v107 = v87;
  v108 = aBlock;
  swift_bridgeObjectRelease(v107);
  sub_100063C8C(v108, v103);
  sub_100063C8C(v104, v105);
  swift_bridgeObjectRetain(v106);
  sub_100063CD0(v104, v105);
  sub_100063CD0(v108, v103);
  if (*((_QWORD *)v106 + 2))
  {
    v140 = v103;
    v141 = v108;
    v142 = v105;
    v143 = v104;
    v155 = v3;
    v109 = *((_QWORD *)v106 + 5);
    v111 = *((_QWORD *)v106 + 6);
    v110 = *((_QWORD *)v106 + 7);
    v112 = *((_QWORD *)v106 + 8);
    v113 = (const char *)*((_QWORD *)v106 + 9);
    v114 = *((_QWORD *)v106 + 10);
    v145 = *((_QWORD *)v106 + 4);
    swift_retain(v145);
    v156 = v109;
    v146 = v111;
    sub_100063C8C(v109, v111);
    v147 = v110;
    v115 = v112;
    sub_100063C8C(v110, v112);
    v116 = (uint64_t)v113;
    v144 = v114;
    sub_100063C8C((uint64_t)v113, v114);
    swift_bridgeObjectRelease(v106);
    if (qword_1003447C0 != -1)
      swift_once(&qword_1003447C0, sub_1001EF020);
    v139 = qword_100354EF0;
    v117 = (_QWORD *)swift_allocObject(&unk_100307520, 96, 7);
    v118 = v148;
    v119 = v145;
    v117[2] = v148;
    v117[3] = v119;
    v120 = v146;
    v117[4] = v156;
    v117[5] = v120;
    v117[6] = v147;
    v117[7] = v115;
    v137 = v115;
    v136 = v113;
    v121 = v144;
    v117[8] = v116;
    v117[9] = v121;
    v122 = v155;
    v117[10] = a2;
    v117[11] = v122;
    v162 = sub_100096038;
    v163 = v117;
    aBlock = (unint64_t)_NSConcreteStackBlock;
    v159 = 1107296256;
    v160 = sub_100071C98;
    v161 = &unk_100307538;
    v138 = _Block_copy(&aBlock);
    swift_retain(a2);
    v148 = v118;
    swift_retain(v119);
    sub_100063C8C(v156, v120);
    v123 = v147;
    sub_100063C8C(v147, v115);
    sub_100063C8C(v116, v121);
    v124 = swift_retain(v155);
    v125 = v151;
    static DispatchQoS.unspecified.getter(v124);
    v165 = _swiftEmptyArrayStorage;
    v126 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v127 = sub_100063D3C((uint64_t *)&unk_100346200);
    v128 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
    v129 = v123;
    v130 = v154;
    v131 = v127;
    v132 = v150;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v165, v131, v128, v150, v126);
    v133 = v125;
    v134 = v125;
    v135 = v138;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v133, v130, v138);
    _Block_release(v135);
    v3 = v155;
    swift_release(v145);
    sub_100063CD0(v156, v146);
    sub_100063CD0(v129, v137);
    sub_100063CD0((uint64_t)v136, v144);

    sub_100063CD0(v141, v140);
    sub_100063CD0(v143, v142);
    swift_bridgeObjectRelease(v106);
    (*(void (**)(char *, uint64_t))(v149 + 8))(v130, v132);
    (*(void (**)(char *, uint64_t))(v152 + 8))(v134, v153);
    swift_release(v163);
    goto LABEL_28;
  }
  swift_bridgeObjectRelease(v106);
  sub_100063CD0(v108, v103);
  sub_100063CD0(v104, v105);
  swift_bridgeObjectRelease(v106);
  v93 = swift_retain_n(a2, 2);
  v94 = Logger.logObject.getter(v93);
  v96 = static os_log_type_t.error.getter(v94, v95);
  if (os_log_type_enabled(v94, v96))
  {
    v97 = (uint8_t *)swift_slowAlloc(12, -1);
    v98 = swift_slowAlloc(32, -1);
    aBlock = v98;
    *(_DWORD *)v97 = 136315138;
    v155 = v3;
    v99 = swift_retain(a2);
    v100 = UUID.uuidString.getter(v99);
    v102 = v101;
    swift_release(a2);
    v165 = (_QWORD *)sub_1001C56EC(v100, v102, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v97 + 4, v97 + 12);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v102);
    _os_log_impl((void *)&_mh_execute_header, v94, v96, "Failed to retrieve pairing info for %s", v97, 0xCu);
    swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v98, -1, -1);
    swift_slowDealloc(v97, -1, -1);
  }
  else
  {
    swift_release_n(a2, 2);
  }

  sub_100081DE8(2);
  swift_release(v17);

}

uint64_t sub_100087530(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  _BYTE v20[8];
  uint64_t v21;

  if (a3)
  {
    swift_errorRetain(a3);
    swift_errorRetain(a3);
    v6 = swift_errorRetain(a3);
    v7 = Logger.logObject.getter(v6);
    v9 = static os_log_type_t.error.getter(v7, v8);
    if (os_log_type_enabled(v7, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v21 = v11;
      *(_DWORD *)v10 = 136315138;
      swift_getErrorValue(a3, v20, v19);
      v12 = Error.localizedDescription.getter(v19[1], v19[2]);
      v14 = v13;
      v18 = sub_1001C56EC(v12, v13, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease(v14);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v7, v9, "Failed to process DK UWB message %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }
    sub_100081DE8(2);
    return swift_errorRelease(a3);
  }
  else if (a2 >> 60 != 15)
  {
    v17 = result;
    sub_100063C8C(result, a2);
    if (qword_1003445A0 != -1)
      swift_once(&qword_1003445A0, sub_1000B26B0);
    sub_1000ADCAC(v17, a2, a5);
    return sub_10006B9B4(v17, a2);
  }
  return result;
}

uint64_t sub_100087828(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  id v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  NSString v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  void **aBlock;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t (*v61)();
  _QWORD *v62;

  v48 = a5;
  v55 = a4;
  v8 = *a3;
  v7 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v11 = a3[4];
  v12 = a3[5];
  v13 = a3[6];
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v53 = *(_QWORD *)(v14 - 8);
  v54 = v14;
  __chkstk_darwin(v14, v15);
  v52 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v50 = *(_QWORD *)(v17 - 8);
  v51 = v17;
  __chkstk_darwin(v17, v18);
  v49 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001BD2CC(a1, a2);
  v21 = v20;
  aBlock = v20;
  v22 = sub_100063D3C((uint64_t *)&unk_100346060);
  v23 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
  BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v22, v23);
  v25 = v24;
  swift_bridgeObjectRelease(v21);
  v47 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  v26 = (_QWORD *)swift_allocObject(&unk_100307778, 80, 7);
  v26[2] = v8;
  v26[3] = v7;
  v26[4] = v9;
  v26[5] = v10;
  v26[6] = v11;
  v26[7] = v12;
  v27 = v55;
  v26[8] = v13;
  v26[9] = v27;
  v61 = sub_100096090;
  v62 = v26;
  aBlock = _NSConcreteStackBlock;
  v58 = 1107296256;
  v59 = sub_100087BE8;
  v60 = &unk_100307790;
  v28 = _Block_copy(&aBlock);
  v29 = v62;
  swift_retain(v27);
  swift_retain(v8);
  sub_100063C8C(v7, v9);
  sub_100063C8C(v10, v11);
  sub_100063C8C(v12, v13);
  swift_release(v29);
  v30 = v47;
  v31 = (id)SESEndPointUpdateWithBlock(v47, v28);
  _Block_release(v28);

  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v32 = (_QWORD *)swift_allocObject(&unk_1003077C8, 40, 7);
  v33 = v48;
  v32[2] = v31;
  v32[3] = v33;
  v34 = v55;
  v32[4] = v55;
  v61 = sub_1000968F4;
  v62 = v32;
  aBlock = _NSConcreteStackBlock;
  v58 = 1107296256;
  v59 = sub_100071C98;
  v60 = &unk_1003077E0;
  v35 = _Block_copy(&aBlock);
  swift_retain(v34);
  v36 = v31;
  v37 = swift_retain(v33);
  v38 = v49;
  static DispatchQoS.unspecified.getter(v37);
  v56 = _swiftEmptyArrayStorage;
  v39 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v40 = sub_100063D3C((uint64_t *)&unk_100346200);
  v41 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
  v42 = v52;
  v43 = v40;
  v44 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v43, v41, v54, v39);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v38, v42, v35);
  _Block_release(v35);

  (*(void (**)(char *, uint64_t))(v53 + 8))(v42, v44);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v38, v51);
  return swift_release(v62);
}

void sub_100087BE8(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_100087C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;

  if (a1)
  {
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    v5 = swift_errorRetain(a1);
    v6 = Logger.logObject.getter(v5);
    v8 = static os_log_type_t.error.getter(v6, v7);
    if (os_log_type_enabled(v6, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v9 = 138412290;
      swift_errorRetain(a1);
      v11 = _swift_stdlib_bridgeErrorToNSError(a1);
      v32 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v9 + 4, v9 + 12);
      *v10 = v11;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v6, v8, "Failed to update BLE data for endpoint %@", v9, 0xCu);
      v12 = sub_100063D3C((uint64_t *)&unk_100346090);
      swift_arrayDestroy(v10, 1, v12);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {

      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
    sub_100081DE8(2);
    return swift_errorRelease(a1);
  }
  else
  {
    v14 = Logger.logObject.getter(0);
    v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
    if (os_log_type_enabled(v14, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v18, "Endpoint updated with BLE UUID", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    swift_beginAccess(a2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_requestedFirstApproaches, &v32, 33, 0);
    v20 = sub_1000D3670(a3);
    swift_endAccess(&v32);
    v21 = swift_release(v20);
    v22 = Logger.logObject.getter(v21);
    v26 = static os_log_type_t.info.getter(v22, v23, v24, v25);
    if (os_log_type_enabled(v22, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v26, "Handing off the peripheral to Alisha", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    if (qword_100344680 != -1)
      swift_once(&qword_100344680, sub_10016E9A8);
    sub_10016D6D0(a3);
    v28 = sub_10007C66C((uint64_t)&off_100305408);
    v30 = v29;
    sub_100083D18(0xD00000000000001CLL, 0x80000001002BAF80, 3u, 17, v28, v29, a3);
    sub_100063CD0(v28, v30);
    return sub_100081DE8(6);
  }
}

void sub_100087F98(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  NSObject *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85[3];
  uint64_t v86;
  unint64_t v87;

  v4 = v3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x100088750);
  }
  v15 = *(_QWORD *)(v4 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer);
  if (!v15)
    goto LABEL_17;
  v16 = v15 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  v17 = a3 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  swift_retain(*(_QWORD *)(v4 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer));
  if ((static UUID.== infix(_:_:)(v16, v17) & 1) == 0)
  {
    swift_release(v15);
LABEL_17:
    v33 = swift_retain_n(a3, 2);
    v34 = Logger.logObject.getter(v33);
    v36 = static os_log_type_t.error.getter(v34, v35);
    if (os_log_type_enabled(v34, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      *(_DWORD *)v37 = 136315138;
      v85[0] = v38;
      v39 = swift_retain(a3);
      v40 = UUID.uuidString.getter(v39);
      v42 = v41;
      swift_release(a3);
      v86 = sub_1001C56EC(v40, v42, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v37 + 4, v37 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v42);
      _os_log_impl((void *)&_mh_execute_header, v34, v36, "Wrong peer %s", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {
      swift_release_n(a3, 2);
    }

    return;
  }
  v18 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
  if (*(_BYTE *)(v4 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) == 7)
  {
    v86 = a1;
    v87 = a2;
    sub_100063C8C(a1, a2);
    v19 = sub_100130E60(38);
    if (v20 >> 60 == 15)
    {
LABEL_12:
      v29 = Logger.logObject.getter(v19);
      v31 = static os_log_type_t.error.getter(v29, v30);
      if (os_log_type_enabled(v29, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v31, "Invalid length for FIRST_APPROACH_RS", v32, 2u);
        swift_slowDealloc(v32, -1, -1);
      }

      sub_100081DE8(2);
      goto LABEL_15;
    }
    v21 = v19;
    v22 = v20;
    v23 = sub_100130E60(8);
    if (v24 >> 60 == 15)
    {
LABEL_11:
      v19 = sub_10006B9B4(v21, v22);
      goto LABEL_12;
    }
    v25 = v23;
    v26 = v24;
    v27 = sub_100130E60(4);
    if (v28 >> 60 == 15)
    {
      sub_10006B9B4(v25, v26);
      goto LABEL_11;
    }
    v52 = v28;
    v84 = v27;
    v53 = *(void **)(v4 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint);
    if (v53)
    {
      v54 = v53;
      v55 = objc_msgSend(v54, "bleOOBKey");
      if (v55)
      {
        v56 = v55;
        v80 = v54;
        v83 = v52;
        v57 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v55);
        v59 = v58;

        v81 = v57;
        v82 = v59;
        sub_100092148(1, v21, v22, v57, v59);
        v67 = v66;
        v78 = v69;
        v79 = v68;
        v77 = v70;
        sub_10007C23C(v70, v69);
        if ((v71 & 1) != 0)
          __asm { BR              X10 }
        v72 = Logger.logObject.getter(v71);
        v74 = static os_log_type_t.error.getter(v72, v73);
        if (os_log_type_enabled(v72, v74))
        {
          v75 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v75 = 0;
          _os_log_impl((void *)&_mh_execute_header, v72, v74, "Failed authentication", v75, 2u);
          swift_slowDealloc(v75, -1, -1);
        }

        sub_100081DE8(1);
        sub_10006B9B4(v21, v22);
        sub_10006B9B4(v25, v26);

        sub_100063CD0(v77, v78);
        sub_100063CD0(v79, v67);
        sub_100063CD0(v81, v82);
        v65 = v83;
        v64 = v84;
LABEL_32:
        sub_10006B9B4(v64, v65);
LABEL_15:
        swift_release(v15);
        sub_100063CD0(v86, v87);
        return;
      }

    }
    v60 = Logger.logObject.getter(v27);
    v62 = static os_log_type_t.error.getter(v60, v61);
    if (os_log_type_enabled(v60, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v62, "Missing endpoint or bleOOBKey", v63, 2u);
      swift_slowDealloc(v63, -1, -1);
    }

    sub_100081DE8(2);
    sub_10006B9B4(v21, v22);
    sub_10006B9B4(v25, v26);
    v64 = v84;
    v65 = v52;
    goto LABEL_32;
  }
  v43 = swift_retain_n(v4, 2);
  v44 = Logger.logObject.getter(v43);
  v46 = static os_log_type_t.error.getter(v44, v45);
  if (os_log_type_enabled(v44, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = swift_slowAlloc(32, -1);
    *(_DWORD *)v47 = 136315138;
    v85[0] = v48;
    LOBYTE(v86) = *(_BYTE *)(v4 + v18);
    v49 = String.init<A>(describing:)(&v86, &type metadata for AlishaPairing.State);
    v51 = v50;
    v86 = sub_1001C56EC(v49, v50, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v47 + 4, v47 + 12);
    swift_release_n(v4, 2);
    swift_bridgeObjectRelease(v51);
    _os_log_impl((void *)&_mh_execute_header, v44, v46, "Wrong state %s", v47, 0xCu);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v47, -1, -1);
  }
  else
  {
    swift_release_n(v4, 2);
  }

  sub_100081DE8(2);
  swift_release(v15);
}

uint64_t sub_100088C54(void *a1)
{
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  if (objc_msgSend(a1, "endPointType") != (id)1)
    return 0;
  v2 = objc_msgSend(a1, "publicKeyIdentifier");
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  sub_10007C23C(v3, v5);
  v7 = v6;
  sub_100063CD0(v3, v5);
  return v7 & 1;
}

uint64_t sub_100088CF8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void **v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  void *v21;
  id v22;
  _QWORD *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  void **aBlock;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  _QWORD *v40;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v10 - 8);
  v32 = v10;
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001BD2CC(a1, a2);
  v15 = v14;
  aBlock = v14;
  v16 = sub_100063D3C((uint64_t *)&unk_100346060);
  v17 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
  BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v16, v17);
  v19 = v18;
  swift_bridgeObjectRelease(v15);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  v39 = sub_10008901C;
  v40 = 0;
  aBlock = _NSConcreteStackBlock;
  v36 = 1107296256;
  v37 = sub_100087BE8;
  v38 = &unk_1003078A8;
  v21 = _Block_copy(&aBlock);
  v22 = (id)SESEndPointUpdateWithBlock(v20, v21);
  _Block_release(v21);

  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v23 = (_QWORD *)swift_allocObject(&unk_1003078E0, 48, 7);
  v23[2] = v22;
  v23[3] = a3;
  v23[4] = a1;
  v23[5] = a2;
  v39 = sub_100096C64;
  v40 = v23;
  aBlock = _NSConcreteStackBlock;
  v36 = 1107296256;
  v37 = sub_100071C98;
  v38 = &unk_1003078F8;
  v24 = _Block_copy(&aBlock);
  v25 = v22;
  swift_retain(a3);
  v26 = sub_100063C8C(a1, a2);
  static DispatchQoS.unspecified.getter(v26);
  v34 = _swiftEmptyArrayStorage;
  v27 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_100063D3C((uint64_t *)&unk_100346200);
  v29 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v28, v29, v6, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v32);
  return swift_release(v40);
}

void sub_10008901C(void *a1)
{
  Class isa;

  sub_10006C25C(0, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
  isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  objc_msgSend(a1, "setBlePairingRequest:", isa);

}

void sub_100089080(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8_t *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  _BYTE v26[8];
  uint64_t v27;

  if (a1)
  {
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    v7 = swift_errorRetain(a1);
    v8 = Logger.logObject.getter(v7);
    v10 = static os_log_type_t.error.getter(v8, v9);
    if (os_log_type_enabled(v8, v10))
    {
      v23 = a4;
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v27 = v12;
      *(_DWORD *)v11 = 136315138;
      swift_getErrorValue(a1, v26, v25);
      v13 = Error.localizedDescription.getter(v25[1], v25[2]);
      v15 = v14;
      v24 = sub_1001C56EC(v13, v14, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease(v15);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v8, v10, "Failed to update endpoint %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      v16 = v11;
      a4 = v23;
      swift_slowDealloc(v16, -1, -1);
      swift_errorRelease(a1);

    }
    else
    {
      swift_errorRelease(a1);

      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
  }
  else
  {
    v17 = Logger.logObject.getter(0);
    v21 = static os_log_type_t.info.getter(v17, v18, v19, v20);
    if (os_log_type_enabled(v17, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v21, "Endpoint updated with BLE pairing request", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

  }
  sub_1000892C8(a3, a4);
}

void sub_1000892C8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  char **v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  void (*v12)(uint64_t, _QWORD, char **);
  id v13;
  uint64_t v14;
  void (*v15)(uint64_t, char **);
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char **v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_unfair_lock_s *v41;
  os_unfair_lock_s *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  Class isa;
  id v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  NSObject *v61;
  uint64_t v62;
  os_log_type_t v63;
  uint8_t *v64;
  id v65;
  void *v66;
  uint64_t v67;
  id v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  id v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  void *v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  char ***v96;
  char **v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  id v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char **v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  uint64_t v121;
  os_log_type_t v122;
  uint64_t v123;
  uint8_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char **v145;
  void (*v146)(_QWORD *, _QWORD, char **);
  void (*v147)(uint64_t, char **);
  _QWORD *v148;
  char **v149;
  char ***v150;
  _QWORD *v151;
  uint8_t *v152;
  char v153;
  uint64_t v154[5];
  uint64_t v155;
  unint64_t v156;
  char v157[24];
  uint64_t v158;

  v5 = (char **)type metadata accessor for DispatchPredicate(0);
  v6 = (unint64_t)*(v5 - 1);
  __chkstk_darwin(v5, v7);
  v9 = (uint64_t)&v137 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
LABEL_73:
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = (void *)qword_100354EE8;
  *(_QWORD *)v9 = qword_100354EE8;
  v11 = enum case for DispatchPredicate.onQueue(_:);
  v12 = *(void (**)(uint64_t, _QWORD, char **))(v6 + 104);
  v12(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v13 = v10;
  v14 = _dispatchPreconditionTest(_:)(v9);
  v15 = *(void (**)(uint64_t, char **))(v6 + 8);
  v15(v9, v5);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_75:
    swift_once(&qword_1003445B8, sub_1000EAA4C);
    goto LABEL_8;
  }
  LODWORD(v152) = v11;
  v16 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_requestedFirstApproaches);
  swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_requestedFirstApproaches, v157, 0, 0);
  v17 = *v16;
  sub_100063C8C(a1, a2);
  v18 = swift_bridgeObjectRetain(v17);
  v14 = 0;
  v19 = sub_10008FCE4(v18, a1, a2);
  sub_100063CD0(a1, a2);
  swift_bridgeObjectRelease(v17);
  if ((v19 & 1) != 0)
    return;
  v147 = v15;
  v148 = (_QWORD *)v9;
  v150 = (char ***)v2;
  v20 = v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_logger;
  sub_100063C8C(a1, a2);
  v21 = sub_100063C8C(a1, a2);
  v151 = (_QWORD *)v20;
  v22 = Logger.logObject.getter(v21);
  v26 = static os_log_type_t.info.getter(v22, v23, v24, v25);
  v27 = os_log_type_enabled(v22, v26);
  v149 = v5;
  v146 = (void (*)(_QWORD *, _QWORD, _QWORD *))v12;
  if (v27)
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v145 = (char **)swift_slowAlloc(32, -1);
    v154[0] = (uint64_t)v145;
    *(_DWORD *)v28 = 136315138;
    v144 = (uint64_t)(v28 + 4);
    sub_1001BD2CC(a1, a2);
    v30 = v29;
    v155 = v29;
    v31 = sub_100063D3C((uint64_t *)&unk_100346060);
    v32 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
    v33 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v31, v32);
    v35 = v34;
    swift_bridgeObjectRelease(v30);
    v155 = sub_1001C56EC(v33, v35, v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156, v144, v28 + 12);
    swift_bridgeObjectRelease(v35);
    sub_100063CD0(a1, a2);
    sub_100063CD0(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v22, v26, "Starting First Approach for %s", v28, 0xCu);
    v36 = v145;
    swift_arrayDestroy(v145, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

    sub_100063CD0(a1, a2);
    sub_100063CD0(a1, a2);
  }
  v2 = swift_allocObject(&unk_100307638, 32, 7);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  sub_100063C8C(a1, a2);
  if (qword_1003445B8 != -1)
    goto LABEL_75;
LABEL_8:
  v37 = off_1003463F0;
  v38 = swift_allocObject(&unk_100307660, 32, 7);
  *(_QWORD *)(v38 + 16) = sub_100096688;
  *(_QWORD *)(v38 + 24) = v2;
  v40 = __chkstk_darwin(v38, v39);
  *(&v137 - 4) = (uint64_t)sub_100096F30;
  *(&v137 - 3) = v40;
  *(&v137 - 2) = (uint64_t)v37;
  v42 = v41 + 4;
  swift_retain(v2);
  os_unfair_lock_lock(v42);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, v154);
  os_unfair_lock_unlock(v42);
  v43 = v154[0];
  swift_release(v2);
  swift_release(v38);
  v5 = (char **)sub_10009F618(v43);
  v44 = swift_bridgeObjectRelease(v43);
  if (!v5)
  {
    v57 = Logger.logObject.getter(v44);
    v59 = static os_log_type_t.error.getter(v57, v58);
    if (os_log_type_enabled(v57, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v59, "Endpoint not found", v60, 2u);
      swift_slowDealloc(v60, -1, -1);
    }

    return;
  }
  v45 = objc_msgSend(v5, "deviceConfiguration");
  if (!v45)
  {
    v61 = Logger.logObject.getter(0);
    v63 = static os_log_type_t.error.getter(v61, v62);
    if (os_log_type_enabled(v61, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v63, "Missing device configuration", v64, 2u);
      swift_slowDealloc(v64, -1, -1);
    }

    return;
  }
  v46 = v45;
  v144 = v14;
  v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v45);
  v49 = v48;

  v50 = (void *)objc_opt_self(SESTLV);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v52 = objc_msgSend(v50, "TLVsWithData:", isa);

  if (!v52)
  {
LABEL_88:
    sub_100063C8C(v47, v49);
    v119 = sub_100063C8C(v47, v49);
    v120 = Logger.logObject.getter(v119);
    v122 = static os_log_type_t.error.getter(v120, v121);
    if (os_log_type_enabled(v120, v122))
    {
      v123 = swift_slowAlloc(12, -1);
      v145 = v5;
      v124 = (uint8_t *)v123;
      v125 = swift_slowAlloc(32, -1);
      v154[0] = v125;
      *(_DWORD *)v124 = 136315138;
      v152 = v124 + 4;
      sub_1001BD2CC(v47, v49);
      v127 = v126;
      v155 = v126;
      v128 = v49;
      v129 = sub_100063D3C((uint64_t *)&unk_100346060);
      v130 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v131 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v129, v130);
      v133 = v132;
      swift_bridgeObjectRelease(v127);
      v155 = sub_1001C56EC(v131, v133, v154);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156, v152, v124 + 12);
      swift_bridgeObjectRelease(v133);
      sub_100063CD0(v47, v128);
      sub_100063CD0(v47, v128);
      _os_log_impl((void *)&_mh_execute_header, v120, v122, "Invalid device configuration %s", v124, 0xCu);
      swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v125, -1, -1);
      swift_slowDealloc(v124, -1, -1);
      sub_100063CD0(v47, v128);

    }
    else
    {
      sub_100063CD0(v47, v49);

      sub_100063CD0(v47, v49);
      sub_100063CD0(v47, v49);
    }
    return;
  }
  v2 = sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v52, v2);

  if (!((unint64_t)v9 >> 62))
  {
    v53 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v9);
    if (v53)
      goto LABEL_13;
    goto LABEL_87;
  }
LABEL_83:
  if (v9 < 0)
    v118 = v9;
  else
    v118 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v53 = _CocoaArrayWrapper.endIndex.getter(v118);
  if (!v53)
  {
LABEL_87:
    swift_bridgeObjectRelease_n(v9, 2);
    goto LABEL_88;
  }
LABEL_13:
  v143 = v47;
  v142 = v49;
  v145 = v5;
  v141 = a1;
  v6 = v9 & 0xC000000000000001;
  a1 = 4;
  v5 = &selRef_removeObject_;
  while (1)
  {
    if (v6)
      v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a1 - 4, v9);
    else
      v54 = *(id *)(v9 + 8 * a1);
    v55 = v54;
    v56 = a1 - 3;
    if (__OFADD__(a1 - 4, 1))
    {
      __break(1u);
      goto LABEL_73;
    }
    if (objc_msgSend(v54, "tag") == 32585)
      break;

    ++a1;
    if (v56 == v53)
    {
      swift_bridgeObjectRelease_n(v9, 2);
LABEL_51:
      v5 = v145;
      v49 = v142;
      v47 = v143;
      goto LABEL_88;
    }
  }
  swift_bridgeObjectRelease_n(v9, 2);
  v65 = objc_msgSend(v55, "children");
  if (v65)
  {
    v66 = v65;
    v67 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v65, v2);

    v140 = a2;
    if ((unint64_t)v67 >> 62)
    {
LABEL_93:
      if (v67 < 0)
        v134 = v67;
      else
        v134 = v67 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v67);
      v47 = _CocoaArrayWrapper.endIndex.getter(v134);
      if (v47)
        goto LABEL_30;
    }
    else
    {
      v47 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v67);
      if (v47)
      {
LABEL_30:
        v49 = 4;
        a2 = 32594;
        while (1)
        {
          if ((v67 & 0xC000000000000001) != 0)
            v68 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v49 - 4, v67);
          else
            v68 = *(id *)(v67 + 8 * v49);
          v9 = (uint64_t)v68;
          a1 = v49 - 3;
          if (__OFADD__(v49 - 4, 1))
          {
            __break(1u);
            goto LABEL_83;
          }
          if (objc_msgSend(v68, "tag") == 32594)
            break;

          ++v49;
          if (a1 == v47)
            goto LABEL_37;
        }
        swift_bridgeObjectRelease_n(v67, 2);
        v69 = objc_msgSend((id)v9, "children");
        if (!v69)
          goto LABEL_111;
        v70 = v69;
        v67 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v69, v2);

        if ((unint64_t)v67 >> 62)
          goto LABEL_99;
        v71 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v67);
        for (; v71; v71 = _CocoaArrayWrapper.endIndex.getter(v135))
        {
          v72 = 4;
          while (1)
          {
            if ((v67 & 0xC000000000000001) != 0)
              v73 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v72 - 4, v67);
            else
              v73 = *(id *)(v67 + 8 * v72);
            v74 = v73;
            v75 = v72 - 3;
            if (__OFADD__(v72 - 4, 1))
            {
              __break(1u);
              goto LABEL_93;
            }
            if (objc_msgSend(v73, "tag") == 208)
              break;

            ++v72;
            if (v75 == v71)
              goto LABEL_48;
          }
          swift_bridgeObjectRelease_n(v67, 2);
          v76 = objc_msgSend(v74, "value");

          if (!v76)
            goto LABEL_49;
          v77 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v76);
          v79 = v78;

          v155 = v77;
          v156 = v79;
          v80 = objc_msgSend((id)v9, "children");
          if (!v80)
            goto LABEL_112;
          v81 = v80;
          v82 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v80, v2);

          v138 = v79;
          v2 = v77;
          if ((unint64_t)v82 >> 62)
          {
            if (v82 < 0)
              v136 = v82;
            else
              v136 = v82 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v82);
            v67 = _CocoaArrayWrapper.endIndex.getter(v136);
          }
          else
          {
            v67 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain(v82);
          }
          v139 = swift_allocObject(&unk_100307688, 32, 7);
          if (!v67)
          {
LABEL_64:
            swift_bridgeObjectRelease_n(v82, 2);
LABEL_65:

            sub_100063CD0(v2, v138);
            swift_deallocUninitializedObject(v139, 32, 7);
            goto LABEL_51;
          }
          v137 = v139 + 16;
          v83 = 4;
          while (1)
          {
            v84 = (v82 & 0xC000000000000001) != 0
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v83 - 4, v82)
                : *(id *)(v82 + 8 * v83);
            v85 = v84;
            v86 = v83 - 3;
            if (__OFADD__(v83 - 4, 1))
              break;
            if (objc_msgSend(v84, "tag", v137, v138) == 209)
            {
              swift_bridgeObjectRelease_n(v82, 2);
              v87 = objc_msgSend(v85, "value");

              if (!v87)
                goto LABEL_65;
              v88 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v87);
              v90 = v89;

              v91 = v139;
              *(_QWORD *)(v139 + 16) = v88;
              *(_QWORD *)(v91 + 24) = v90;
              v92 = sub_100063D3C(&qword_100344DE8);
              v154[3] = v92;
              v154[4] = sub_10007EF60((unint64_t *)&qword_100344DF0, &qword_100344DE8, (uint64_t)&protocol conformance descriptor for <A> CollectionOfOne<A>);
              LOBYTE(v154[0]) = 0;
              v153 = *(_BYTE *)sub_10006BA78(v154, v92);
              Data._Representation.replaceSubrange(_:with:count:)(0, 0, &v153, 1);
              sub_10006BA9C(v154);
              sub_10008A39C();
              if (qword_1003445A0 != -1)
                swift_once(&qword_1003445A0, sub_1000B26B0);
              v144 = qword_100354BC8;
              v93 = v155;
              v94 = v156;
              v95 = (_QWORD *)swift_allocObject(&unk_1003076B0, 64, 7);
              v97 = v149;
              v96 = v150;
              v95[2] = v91;
              v95[3] = v96;
              v98 = v141;
              v99 = v140;
              v95[4] = v141;
              v95[5] = v99;
              v95[6] = v93;
              v95[7] = v94;
              v151 = v95;
              v100 = qword_100354EE8;
              v101 = v148;
              *v148 = qword_100354EE8;
              v146(v101, v152, v97);
              sub_100063C8C(v98, v99);
              swift_retain(v139);
              swift_retain(v96);
              sub_100063C8C(v93, v94);
              v102 = v98;
              v103 = v139;
              sub_100063C8C(v102, v99);
              swift_retain(v103);
              swift_retain(v96);
              v152 = (uint8_t *)v93;
              v104 = v93;
              v105 = v94;
              sub_100063C8C(v104, v94);
              v106 = (id)v100;
              LOBYTE(v100) = _dispatchPreconditionTest(_:)(v101);
              v147((uint64_t)v101, v97);
              if ((v100 & 1) != 0)
              {
                v108 = v144;
                if (sub_1000D77A8(*(_QWORD *)(v144 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralState)))
                {
                  v109 = v141;
                  v110 = v140;
                  v111 = (uint64_t)v152;
                  sub_10008A6C0(v103, (uint64_t)v96, v141, v140, (uint64_t)v152, v94);
                  v99 = (unint64_t)v151;
                  v112 = v142;
LABEL_81:

                  swift_release(v96);
                  swift_release(v103);
                  swift_release(v99);
                  sub_100063CD0(v109, v110);
                  sub_100063CD0(v111, v105);

                  sub_100063CD0(v143, v112);
                  sub_100063CD0(v155, v156);
                  swift_release(v103);
                  return;
                }
                v103 = swift_allocObject(&unk_1003076D8, 32, 7);
                v99 = (unint64_t)v151;
                *(_QWORD *)(v103 + 16) = sub_1000966D0;
                *(_QWORD *)(v103 + 24) = v99;
                v96 = (char ***)(v108 + OBJC_IVAR____TtC10seserviced6DSKBLE_closuresOnPowerOn);
                swift_beginAccess(v108 + OBJC_IVAR____TtC10seserviced6DSKBLE_closuresOnPowerOn, v154, 33, 0);
                v97 = *v96;
                swift_retain(v99);
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v97);
                *v96 = v97;
                v107 = &v158;
                if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                {
                  v114 = v140;
LABEL_78:
                  v116 = (unint64_t)v97[2];
                  v115 = (unint64_t)v97[3];
                  if (v116 >= v115 >> 1)
                  {
                    v97 = (char **)sub_1001C48CC((_QWORD *)(v115 > 1), v116 + 1, 1, v97);
                    *v96 = v97;
                  }
                  v96 = v150;
                  v97[2] = (char *)(v116 + 1);
                  v117 = &v97[2 * v116];
                  v117[4] = (char *)sub_1000966E0;
                  v117[5] = (char *)v103;
                  swift_endAccess(v154);
                  v110 = v114;
                  v109 = v141;
                  v112 = v142;
                  v103 = v139;
                  v111 = (uint64_t)v152;
                  goto LABEL_81;
                }
              }
              else
              {
                __break(1u);
              }
              v114 = *(v107 - 32);
              v97 = (char **)sub_1001C48CC(0, (int64_t)(v97[2] + 1), 1, v97);
              *v96 = v97;
              goto LABEL_78;
            }

            ++v83;
            if (v86 == v67)
              goto LABEL_64;
          }
          __break(1u);
LABEL_99:
          if (v67 < 0)
            v135 = v67;
          else
            v135 = v67 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v67);
        }
LABEL_48:
        swift_bridgeObjectRelease_n(v67, 2);
LABEL_49:

LABEL_50:
        goto LABEL_51;
      }
    }
LABEL_37:
    swift_bridgeObjectRelease_n(v67, 2);
    goto LABEL_50;
  }
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
}

uint64_t sub_10008A31C(void *a1)
{
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;
  char v6;

  v1 = objc_msgSend(a1, "publicKeyIdentifier");
  v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  sub_10007C23C(v2, v4);
  v6 = v5;
  sub_100063CD0(v2, v4);
  return v6 & 1;
}

void sub_10008A39C()
{
  __asm { BR              X12 }
}

void sub_10008A6C0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  __int128 v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  _OWORD v93[2];
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  char v99[32];

  *((_QWORD *)&v87 + 1) = a6;
  *(_QWORD *)&v87 = a5;
  v89 = a2;
  v9 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v90 = *(_QWORD *)(v13 - 8);
  v91 = (uint8_t *)v13;
  v15 = __chkstk_darwin(v13, v14);
  v17 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  v88 = (char *)&v85 - v19;
  if (qword_1003445A0 != -1)
    swift_once(&qword_1003445A0, sub_1000B26B0);
  swift_beginAccess(a1 + 16, v99, 0, 0);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 24);
  sub_100063C8C(v20, v21);
  sub_1000B0814(v20, v21);
  sub_100063CD0(v20, v21);
  v23 = v90;
  v22 = (uint64_t)v91;
  (*(void (**)(char *, _QWORD, uint64_t, uint8_t *))(v90 + 56))(v12, 0, 1, v91);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v12, 1, v22) == 1)
  {
    sub_100096700((uint64_t)v12, (uint64_t *)&unk_1003465E0);
    v24 = swift_retain_n(a1, 2);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v93[0] = v28;
      *(_DWORD *)v27 = 136315138;
      v91 = v27 + 4;
      swift_beginAccess(a1 + 16, &v96, 0, 0);
      v29 = *(_QWORD *)(a1 + 16);
      v30 = *(_QWORD *)(a1 + 24);
      sub_100063C8C(v29, v30);
      v31 = Data.description.getter(v29, v30);
      v33 = v32;
      sub_100063CD0(v29, v30);
      v94 = sub_1001C56EC(v31, v33, (uint64_t *)v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v91, v27 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to retrieve peripheral with address %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      swift_release_n(a1, 2);
    }

  }
  else
  {
    v34 = v88;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v88, v12, v22);
    v86 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
    v86(v17, v34, v22);
    v35 = type metadata accessor for Peer(0);
    swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
    v36 = sub_1001A3188((uint64_t)v17);
    v37 = (uint64_t *)(v36 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    v38 = *(_QWORD *)(v36 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    v39 = *(_QWORD *)(v36 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    *v37 = a3;
    v37[1] = a4;
    sub_100063C8C(a3, a4);
    sub_10006B9B4(v38, v39);
    v40 = v89;
    swift_beginAccess(v89 + OBJC_IVAR____TtC10seserviced13AlishaPairing_requestedFirstApproaches, &v96, 33, 0);
    swift_retain(v36);
    sub_1000C7708((uint64_t *)v93, v36);
    swift_endAccess(&v96);
    swift_release(*(_QWORD *)&v93[0]);
    if (qword_100344690 != -1)
      swift_once(&qword_100344690, sub_100182BE4);
    v98 = 0;
    v96 = 0u;
    v97 = 0u;
    sub_10017FAB4(0, (uint64_t)&v96);
    sub_100096700((uint64_t)&v96, &qword_100345390);
    if (qword_1003446C0 != -1)
      swift_once(&qword_1003446C0, sub_10019CC14);
    v41 = *(_QWORD *)(qword_100354DA0 + 16);
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionTemporaryIdentityAddress);
    v44 = v43;
    swift_beginAccess(a1 + 16, &v94, 0, 0);
    v45 = *(_QWORD *)(a1 + 16);
    v46 = *(_QWORD *)(a1 + 24);
    *((_QWORD *)&v97 + 1) = &type metadata for Data;
    *(_QWORD *)&v96 = v45;
    *((_QWORD *)&v96 + 1) = v46;
    sub_10006C2B4(&v96, v93);
    swift_bridgeObjectRetain(v41);
    sub_100063C8C(v45, v46);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v41);
    v92 = v41;
    sub_10018DEC0(v93, v42, v44, isUniquelyReferenced_nonNull_native);
    v48 = v92;
    swift_bridgeObjectRelease(v44);
    swift_bridgeObjectRelease(0x8000000000000000);
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionTemporaryIRKValue);
    v51 = v50;
    *((_QWORD *)&v97 + 1) = &type metadata for Data;
    v52 = *((_QWORD *)&v87 + 1);
    v53 = v87;
    v96 = v87;
    sub_10006C2B4(&v96, v93);
    sub_100063C8C(v53, v52);
    v54 = swift_isUniquelyReferenced_nonNull_native(v48);
    v92 = v48;
    sub_10018DEC0(v93, v49, v51, v54);
    v55 = v92;
    swift_bridgeObjectRelease(v51);
    swift_bridgeObjectRelease(0x8000000000000000);
    v56 = swift_retain_n(v36, 2);
    v57 = Logger.logObject.getter(v56);
    v61 = static os_log_type_t.info.getter(v57, v58, v59, v60);
    if (os_log_type_enabled(v57, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(12, -1);
      v63 = swift_slowAlloc(32, -1);
      *(_DWORD *)v62 = 136315138;
      *(_QWORD *)&v96 = v63;
      v64 = swift_retain(v36);
      v65 = UUID.uuidString.getter(v64);
      v67 = v66;
      swift_release(v36);
      *(_QWORD *)&v93[0] = sub_1001C56EC(v65, v67, (uint64_t *)&v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v93, (char *)v93 + 8, v62 + 4, v62 + 12);
      swift_release_n(v36, 2);
      v68 = v67;
      v40 = v89;
      swift_bridgeObjectRelease(v68);
      _os_log_impl((void *)&_mh_execute_header, v57, v61, "Requesting connection for First Approach %s", v62, 0xCu);
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v62, -1, -1);
    }
    else
    {
      swift_release_n(v36, 2);
    }

    v69 = v90;
    v70 = sub_100063D3C(&qword_100345398);
    v71 = *(unsigned __int8 *)(v69 + 80);
    v72 = (v71 + 32) & ~v71;
    v73 = swift_allocObject(v70, v72 + *(_QWORD *)(v69 + 72), v71 | 7);
    *(_OWORD *)(v73 + 16) = xmmword_1002888E0;
    v74 = v73 + v72;
    v75 = qword_100344780;
    swift_retain(v36);
    if (v75 != -1)
      swift_once(&qword_100344780, sub_1001E2370);
    v76 = (uint64_t)v91;
    v77 = sub_10009673C((uint64_t)v91, (uint64_t)qword_100354EB8);
    v86((char *)v74, (char *)v77, v76);
    v78 = type metadata accessor for DSKBLE.BLEConnectionRequest();
    swift_allocObject(v78, 184, 7);
    *(_QWORD *)&v84 = sub_100096F10;
    *((_QWORD *)&v84 + 1) = v40;
    *(_QWORD *)&v83 = sub_100096E94;
    *((_QWORD *)&v83 + 1) = v40;
    *(_QWORD *)&v82 = sub_100096F0C;
    *((_QWORD *)&v82 + 1) = v40;
    *(_QWORD *)&v81 = sub_100096E9C;
    *((_QWORD *)&v81 + 1) = v40;
    *(_QWORD *)&v80 = sub_100096EF8;
    *((_QWORD *)&v80 + 1) = v40;
    v79 = (uint64_t *)sub_1000BB9A4(v36, 893797958, 0xE400000000000000, v73, v55, 0, 0, 1, 0, v80, v81, v82, v83, v84, 0, 0);
    swift_retain_n(v40, 5);
    sub_1000B0F98(v79, 0);
    swift_release(v36);
    swift_release(v79);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v88, v76);
  }
}

uint64_t sub_10008AF58(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _BYTE v24[32];
  _BYTE v25[24];

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)&v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once(&qword_1003445A0, sub_1000B26B0);
    goto LABEL_6;
  }
  v10 = (uint64_t *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_requestedFirstApproaches);
  swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_requestedFirstApproaches, v25, 0, 0);
  v13 = *v10;
  swift_bridgeObjectRetain(*v10);
  sub_100063C8C(a1, a2);
  v6 = sub_10008F45C(v13, a1, a2);
  sub_100063CD0(a1, a2);
  result = swift_bridgeObjectRelease(v13);
  if (!v6)
    return result;
  if (qword_1003445A0 != -1)
    goto LABEL_17;
LABEL_6:
  sub_1000AD358(v6);
  swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_activeFirstApproaches, v24, 33, 0);
  v15 = sub_1000D3670(v6);
  swift_endAccess(v24);
  swift_release(v15);
  swift_beginAccess(v10, v24, 33, 0);
  v16 = sub_1000D3670(v6);
  swift_endAccess(v24);
  swift_release(v16);
  v17 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer);
  if (!v17)
  {
LABEL_10:
    if (qword_100344690 != -1)
      swift_once(&qword_100344690, sub_100182BE4);
    v20 = qword_100354D70;
    swift_retain(v6);
    v21 = sub_100196F9C(v20, v6);
    swift_release(v6);
    v22 = (void *)sub_10009F62C(v21);
    swift_bridgeObjectRelease(v21);
    if (v22)
    {
      sub_100184FC8();

    }
    return swift_release(v6);
  }
  v18 = v17 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  v19 = v6 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  swift_retain(*(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer));
  if ((static UUID.== infix(_:_:)(v18, v19) & 1) == 0)
  {
    swift_release(v17);
    goto LABEL_10;
  }
  sub_100081DE8(2);
  swift_release(v17);
  return swift_release(v6);
}

void sub_10008B230(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once(&qword_1003446C8, sub_1001A0A18);
    goto LABEL_8;
  }
  v9 = swift_retain_n(a1, 2);
  v10 = Logger.logObject.getter(v9);
  v14 = static os_log_type_t.info.getter(v10, v11, v12, v13);
  if (os_log_type_enabled(v10, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    *(_DWORD *)v15 = 136315138;
    v22 = v16;
    v17 = swift_retain(a1);
    v18 = UUID.uuidString.getter(v17);
    v20 = v19;
    swift_release(a1);
    v21 = sub_1001C56EC(v18, v20, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v15 + 4, v15 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v10, v14, "UWB Alisha session started running for %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

  if (qword_1003446C8 != -1)
    goto LABEL_10;
LABEL_8:
  sub_10019ED28(a1);
}

void sub_10008B4AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) != 0)
  {
    v13 = swift_retain_n(a2, 2);
    v14 = Logger.logObject.getter(v13);
    v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
    if (os_log_type_enabled(v14, v18))
    {
      v19 = swift_slowAlloc(22, -1);
      v20 = swift_slowAlloc(64, -1);
      v32 = v20;
      *(_DWORD *)v19 = 136315394;
      v21 = swift_retain(a2);
      v22 = UUID.uuidString.getter(v21);
      v24 = v23;
      swift_release(a2);
      v31 = sub_1001C56EC(v22, v24, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v19 + 4, v19 + 12);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v24);
      *(_WORD *)(v19 + 12) = 2080;
      v25 = sub_100186A94(a1);
      v27 = v26;
      v31 = sub_1001C56EC(v25, v26, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v14, v18, "UWB Alisha session suspended for %s %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      swift_release_n(a2, 2);
    }

    if (*(_BYTE *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2)
    {
      v28 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer);
      if (v28)
      {
        v29 = v28 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        v30 = a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        swift_retain(*(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer));
        if ((static UUID.== infix(_:_:)(v29, v30) & 1) != 0)
          sub_100081DE8(4);
        swift_release(v28);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10008B798(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    v9 = swift_retain_n(a1, 2);
    v10 = Logger.logObject.getter(v9);
    v14 = static os_log_type_t.info.getter(v10, v11, v12, v13);
    if (os_log_type_enabled(v10, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      *(_DWORD *)v15 = 136315138;
      v22 = v16;
      v17 = swift_retain(a1);
      v18 = UUID.uuidString.getter(v17);
      v20 = v19;
      swift_release(a1);
      v21 = sub_1001C56EC(v18, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v15 + 4, v15 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v10, v14, "UWB Alisha session resumed for %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      swift_release_n(a1, 2);
    }

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10008B9DC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v17;

  v4 = v3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) != 0)
  {
    if (qword_1003445A0 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003445A0, sub_1000B26B0);
LABEL_5:
  sub_1000ADCAC(a1, a2, a3);
  if (qword_100344680 != -1)
    swift_once(&qword_100344680, sub_10016E9A8);
  v15 = qword_100354D60;
  swift_retain(v4);
  swift_retain(a3);
  sub_100177FD4(a1, a2, 1, a3, v15, v4, a3);
  swift_release(v4);
  return swift_release(a3);
}

void sub_10008BC18(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    v11 = swift_retain_n(a2, 2);
    v12 = Logger.logObject.getter(v11);
    v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
    if (os_log_type_enabled(v12, v16))
    {
      v17 = swift_slowAlloc(22, -1);
      v18 = swift_slowAlloc(64, -1);
      v27 = v18;
      *(_DWORD *)v17 = 136315394;
      LOBYTE(v26) = a1;
      v19 = String.init<A>(describing:)(&v26, &type metadata for UWBAlishaSession.SessionHealth);
      v21 = v20;
      v26 = sub_1001C56EC(v19, v20, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease(v21);
      *(_WORD *)(v17 + 12) = 2080;
      v22 = swift_retain(a2);
      v23 = UUID.uuidString.getter(v22);
      v25 = v24;
      swift_release(a2);
      v26 = sub_1001C56EC(v23, v25, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v17 + 14, v17 + 22);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v12, v16, "UWB Alisha session health update %s for %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      swift_release_n(a2, 2);
    }

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10008BEA8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  const char *v23[3];
  uint64_t v24;

  v6 = type metadata accessor for Alisha.DKMessage(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  sub_10009691C((uint64_t)a1, (uint64_t)v9);
  if (v10 != 5)
    return sub_100096960((uint64_t)v9);
  v11 = v9[1];
  result = sub_100096960((uint64_t)v9);
  if (v11 != 13)
    return result;
  if (*(_BYTE *)(a2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2)
  {
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer);
    if (v13)
    {
      v14 = v13 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      v15 = a3 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      swift_retain(*(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer));
      if ((static UUID.== infix(_:_:)(v14, v15) & 1) != 0)
      {
        v16 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
        if (*(_BYTE *)(a2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) == 2)
        {
          v17 = *(void (**)(_QWORD))(a2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart);
          if (v17)
          {
            v18 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart + 8);
            swift_retain(v18);
            v17(0);
            sub_10008F210((uint64_t)v17, v18);
          }
          *(_BYTE *)(a2 + v16) = 3;
          sub_100080958(&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s", v23[0]);
          v19 = sub_10007C66C((uint64_t)&off_100305430);
          v21 = v20;
          sub_100083D18(0xD000000000000015, 0x80000001002BB020, 3u, 17, v19, v20, a3);
          sub_100063CD0(v19, v21);
        }
        return swift_release(v13);
      }
      swift_release(v13);
    }
  }
  swift_beginAccess(a2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_activeFirstApproaches, v23, 33, 0);
  swift_retain(a3);
  v22 = sub_1000C7708(&v24, a3);
  swift_endAccess(v23);
  result = swift_release(v24);
  if ((v22 & 1) != 0)
    return sub_1000840BC();
  return result;
}

uint64_t sub_10008C0CC(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void **v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  NSString v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  void **aBlock;
  uint64_t v62;
  void *v63;
  void *v64;
  void (*v65)();
  _QWORD *v66;

  v54 = a4;
  v5 = *a2;
  v6 = a2[1];
  v8 = a2[2];
  v7 = a2[3];
  v9 = a2[4];
  v51 = a2[5];
  v52 = a3;
  v50 = a2[6];
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v58 = *(_QWORD *)(v10 - 8);
  v59 = v10;
  __chkstk_darwin(v10, v11);
  v57 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v55 = *(_QWORD *)(v13 - 8);
  v56 = v13;
  __chkstk_darwin(v13, v14);
  v53 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(a1, "publicKeyIdentifier");
  v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  sub_1001BD2CC(v17, v19);
  v21 = v20;
  aBlock = v20;
  v22 = sub_100063D3C((uint64_t *)&unk_100346060);
  v23 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
  BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v22, v23);
  v25 = v24;
  swift_bridgeObjectRelease(v21);
  sub_100063CD0(v17, v19);
  v49 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  v26 = (_QWORD *)swift_allocObject(&unk_100307570, 80, 7);
  v27 = v5;
  v26[2] = v5;
  v26[3] = v6;
  v26[4] = v8;
  v26[5] = v7;
  v28 = v50;
  v29 = v51;
  v26[6] = v9;
  v26[7] = v29;
  v30 = v52;
  v26[8] = v28;
  v26[9] = v30;
  v65 = (void (*)())sub_100096090;
  v66 = v26;
  aBlock = _NSConcreteStackBlock;
  v62 = 1107296256;
  v63 = sub_100087BE8;
  v64 = &unk_100307588;
  v31 = _Block_copy(&aBlock);
  v32 = v66;
  swift_retain(v30);
  swift_retain(v27);
  sub_100063C8C(v6, v8);
  sub_100063C8C(v7, v9);
  sub_100063C8C(v29, v28);
  swift_release(v32);
  v33 = v49;
  v34 = (id)SESEndPointUpdateWithBlock(v49, v31);
  _Block_release(v31);

  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v35 = swift_allocObject(&unk_1003075C0, 32, 7);
  v36 = v54;
  *(_QWORD *)(v35 + 16) = v34;
  *(_QWORD *)(v35 + 24) = v36;
  v65 = sub_1000960A0;
  v66 = (_QWORD *)v35;
  aBlock = _NSConcreteStackBlock;
  v62 = 1107296256;
  v63 = sub_100071C98;
  v64 = &unk_1003075D8;
  v37 = _Block_copy(&aBlock);
  v38 = v34;
  v39 = swift_retain(v36);
  v40 = v53;
  static DispatchQoS.unspecified.getter(v39);
  v60 = _swiftEmptyArrayStorage;
  v41 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v42 = sub_100063D3C((uint64_t *)&unk_100346200);
  v43 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
  v44 = v57;
  v45 = v42;
  v46 = v59;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v45, v43, v59, v41);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v40, v44, v37);
  _Block_release(v37);

  (*(void (**)(char *, uint64_t))(v58 + 8))(v44, v46);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v40, v56);
  return swift_release(v66);
}

void sub_10008C4C4(void *a1)
{
  Class isa;
  uint64_t v3;
  uint64_t v4;
  id v5;

  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "setBleAddress:", isa);

  UUID.uuidString.getter();
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  objc_msgSend(a1, "setBleUUID:", v5);

}

void sub_10008C558(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *oslog;
  uint64_t v16;
  uint64_t v17;

  if (a1)
  {
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    v2 = swift_errorRetain(a1);
    v3 = Logger.logObject.getter(v2);
    v5 = static os_log_type_t.error.getter(v3, v4);
    if (os_log_type_enabled(v3, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v6 = 138412290;
      swift_errorRetain(a1);
      v8 = _swift_stdlib_bridgeErrorToNSError(a1);
      v16 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v6 + 4, v6 + 12);
      *v7 = v8;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v3, v5, "Failed to update BLE data for endpoint %@", v6, 0xCu);
      v9 = sub_100063D3C((uint64_t *)&unk_100346090);
      swift_arrayDestroy(v7, 1, v9);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

    }
    else
    {

      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
    sub_100081DE8(2);
    swift_errorRelease(a1);
  }
  else
  {
    oslog = Logger.logObject.getter(0);
    v13 = static os_log_type_t.info.getter(oslog, v10, v11, v12);
    if (os_log_type_enabled(oslog, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v13, "Endpoint updated with BLE UUID", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

  }
}

uint64_t sub_10008C788(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  char v9;
  uint64_t v11;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_type);
  if (v8 == 4)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
    v9 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
    if (v8)
      v9 = 0;
    else
      v9 = static UUID.== infix(_:_:)(a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v7);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9 & 1;
}

void sub_10008C878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_10008C8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v18 - 112) = *(_QWORD *)(v18 - 136);
  *(_WORD *)(v18 - 104) = v16;
  *(_BYTE *)(v18 - 102) = BYTE2(v16);
  *(_BYTE *)(v18 - 101) = BYTE3(v16);
  *(_BYTE *)(v18 - 100) = BYTE4(v16);
  *(_BYTE *)(v18 - 99) = BYTE5(v16);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_10008C980 + *((int *)qword_10008D4F0 + (v17 >> 62))))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_10008C990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t result;

  *(_QWORD *)(v10 - 128) = a5;
  *(_WORD *)(v10 - 120) = v8;
  *(_BYTE *)(v10 - 118) = BYTE2(v8);
  *(_BYTE *)(v10 - 117) = BYTE3(v8);
  *(_BYTE *)(v10 - 116) = BYTE4(v8);
  *(_BYTE *)(v10 - 115) = BYTE5(v8);
  sub_100063C8C(a5, v8);
  sub_100063C8C(*(_QWORD *)(v10 - 144), v5);
  v12 = *(_QWORD *)(v10 - 136);
  sub_100091794(v6);
  v14 = v13;
  sub_100063CD0(v12, v7);
  sub_100063CD0(a5, v8);
  sub_100063CD0(*(_QWORD *)(v10 - 136), v7);
  result = sub_100063CD0(*(_QWORD *)(v10 - 144), v5);
  *v9 = v14;
  return result;
}

void sub_10008D500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_10008D584()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t result;
  uint64_t v11;

  *(_QWORD *)(v6 - 112) = v2;
  *(_WORD *)(v6 - 104) = v4;
  *(_BYTE *)(v6 - 102) = BYTE2(v4);
  *(_BYTE *)(v6 - 101) = BYTE3(v4);
  *(_BYTE *)(v6 - 100) = BYTE4(v4);
  *(_BYTE *)(v6 - 99) = BYTE5(v4);
  sub_100063C8C(v1, v3);
  v7 = *(_QWORD *)(v6 - 120);
  sub_100063C8C(v5, v7);
  sub_100091794(v11);
  v9 = v8;
  sub_100063CD0(v5, v7);
  sub_100063CD0(v2, v4);
  result = sub_100063CD0(v1, v3);
  *v0 = v9;
  return result;
}

void sub_10008DA34(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if ((a3 & 1) != 0)
    ccaes_ccm_decrypt_mode();
  else
    ccaes_ccm_encrypt_mode();
  __asm { BR              X13 }
}

uint64_t sub_10008DAB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))((char *)&loc_10008DAF0 + dword_10008DBDC[v3 >> 62]))(a1, BYTE6(v4), a3, 0);
}

uint64_t sub_10008DB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))((char *)&loc_10008DB38
                                                                                     + dword_10008DBEC[v5 >> 62]))(a1, a2, a3, BYTE6(v6), a5, 0);
}

uint64_t sub_10008DB48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _DWORD *v11;

  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))ccccm_one_shot)(a1, a2, v5, a3, v8, BYTE6(v4), v7, v6, 0, 0, a4, v9);
  *v11 = result;
  return result;
}

void sub_10008DC04()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10008DC3C()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_10008DC80()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10008DCC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_10008F210(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart), *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_activeFirstApproaches));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_requestedFirstApproaches));

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10008DD64()
{
  return type metadata accessor for AlishaPairing(0);
}

uint64_t type metadata accessor for AlishaPairing(uint64_t a1)
{
  uint64_t result;

  result = qword_1003452A0;
  if (!qword_1003452A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AlishaPairing);
  return result;
}

uint64_t sub_10008DDA8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100288D20;
    v4[2] = &unk_100288D38;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = &unk_100288D50;
    v4[6] = &unk_100288D68;
    v4[7] = &unk_100288D50;
    v4[8] = &unk_100288D80;
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AlishaPairing.State(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AlishaPairing.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_10008DF34 + 4 * byte_100288CF5[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10008DF68 + 4 * byte_100288CF0[v4]))();
}

uint64_t sub_10008DF68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008DF70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008DF78);
  return result;
}

uint64_t sub_10008DF84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008DF8CLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_10008DF90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008DF98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AlishaPairing.State()
{
  return &type metadata for AlishaPairing.State;
}

uint64_t getEnumTagSinglePayload for DSKExpress.ExpressState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AlishaPairing.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10008E090 + 4 * byte_100288CFF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10008E0C4 + 4 * byte_100288CFA[v4]))();
}

uint64_t sub_10008E0C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008E0CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008E0D4);
  return result;
}

uint64_t sub_10008E0E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008E0E8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10008E0EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008E0F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AlishaPairing.Mode()
{
  return &type metadata for AlishaPairing.Mode;
}

unint64_t sub_10008E114()
{
  unint64_t result;

  result = qword_100345368;
  if (!qword_100345368)
  {
    result = swift_getWitnessTable(&unk_100288DE4, &type metadata for AlishaPairing.Mode);
    atomic_store(result, (unint64_t *)&qword_100345368);
  }
  return result;
}

unint64_t sub_10008E15C()
{
  unint64_t result;

  result = qword_100345370;
  if (!qword_100345370)
  {
    result = swift_getWitnessTable(&unk_100288E4C, &type metadata for AlishaPairing.State);
    atomic_store(result, (unint64_t *)&qword_100345370);
  }
  return result;
}

void sub_10008E1A0(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint8_t *v47;
  id v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  int v54;
  uint8_t *v55;
  uint8_t *v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint8_t *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint8_t *v73;
  uint8_t *v74;
  void *v75;
  os_log_t v76;
  uint64_t v77;
  _BYTE v78[16];
  id v79;

  v3 = v2;
  v5 = a1;
  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1, a2);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (uint64_t *)((char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v14 = qword_100354EE8;
  *v13 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_release(v3);

    __break(1u);
    return;
  }
  (*(void (**)(char *, id, uint64_t))(v6 + 16))(v8, v5, a2);
  v16 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
  if ((swift_dynamicCast(&v79, v8, a2, v16, 6) & 1) != 0)
  {
    v17 = v79;
    if (objc_msgSend(v79, "endPointType") != (id)1)
    {

      return;
    }
    v18 = OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint;
    v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint);
    v20 = v17;
    v21 = v20;
    if (v19)
    {
      swift_retain_n(v3, 2);
      v5 = v21;
      v22 = Logger.logObject.getter(v5);
      v24 = static os_log_type_t.error.getter(v22, v23);
      if (!os_log_type_enabled(v22, (os_log_type_t)v24))
      {

        swift_release_n(v3, 2);
        goto LABEL_14;
      }
      LODWORD(v75) = v24;
      v76 = v22;
      v25 = swift_slowAlloc(22, -1);
      v74 = (uint8_t *)swift_slowAlloc(64, -1);
      v79 = v74;
      *(_DWORD *)v25 = 136315394;
      v26 = *(void **)(v3 + v18);
      if (v26)
      {
        v72 = v25 + 4;
        v27 = objc_msgSend(v26, "publicKeyIdentifier");
        v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
        v30 = v29;

        sub_1001BD2CC(v28, v30);
        v32 = v31;
        v73 = 0;
        v77 = v31;
        v33 = sub_100063D3C((uint64_t *)&unk_100346060);
        v71 = v33;
        v34 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
        v35 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v33, v34);
        v37 = v36;
        swift_bridgeObjectRelease(v32);
        sub_100063CD0(v28, v30);
        v77 = sub_1001C56EC(v35, v37, (uint64_t *)&v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v72, v25 + 12);
        swift_release_n(v3, 2);
        swift_bridgeObjectRelease(v37);
        *(_WORD *)(v25 + 12) = 2080;
        v38 = objc_msgSend(v5, "publicKeyIdentifier");
        v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
        v41 = v40;

        sub_1001BD2CC(v39, v41);
        v43 = v42;
        v77 = v42;
        v44 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v71, v34);
        v46 = v45;
        swift_bridgeObjectRelease(v43);
        sub_100063CD0(v39, v41);
        v77 = sub_1001C56EC(v44, v46, (uint64_t *)&v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v25 + 14, v25 + 22);

        swift_bridgeObjectRelease(v46);
        v22 = v76;
        _os_log_impl((void *)&_mh_execute_header, v76, (os_log_type_t)v75, "We're tracking endpoint %s but got a new one %s", (uint8_t *)v25, 0x16u);
        v47 = v74;
        swift_arrayDestroy(v74, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v25, -1, -1);
LABEL_14:

        sub_100081DE8(2);
        return;
      }
      goto LABEL_19;
    }
    v48 = v20;
    v49 = Logger.logObject.getter(v48);
    v53 = static os_log_type_t.info.getter(v49, v50, v51, v52);
    v54 = v53;
    if (os_log_type_enabled(v49, v53))
    {
      LODWORD(v76) = v54;
      v55 = (uint8_t *)swift_slowAlloc(12, -1);
      v75 = (void *)swift_slowAlloc(32, -1);
      v79 = v75;
      *(_DWORD *)v55 = 136315138;
      v56 = v55 + 12;
      v73 = v55 + 4;
      v74 = v55;
      v57 = objc_msgSend(v48, "publicKeyIdentifier");
      v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v57);
      v60 = v59;

      sub_1001BD2CC(v58, v60);
      v62 = v61;
      v77 = v61;
      v63 = sub_100063D3C((uint64_t *)&unk_100346060);
      v64 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v65 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v63, v64);
      v67 = v66;
      swift_bridgeObjectRelease(v62);
      sub_100063CD0(v58, v60);
      v77 = sub_1001C56EC(v65, v67, (uint64_t *)&v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v73, v56);

      swift_bridgeObjectRelease(v67);
      v68 = v74;
      _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v76, "Endpoint created %s", v74, 0xCu);
      v69 = v75;
      swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v68, -1, -1);
    }
    else
    {

    }
    v70 = *(void **)(v3 + v18);
    *(_QWORD *)(v3 + v18) = v48;

  }
}

void sub_10008E800(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  char v23;
  id v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  int v30;
  uint8_t *v31;
  uint8_t *v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint8_t *v44;
  void *v45;
  NSObject *v46;
  uint64_t v47;
  os_log_type_t v48;
  uint8_t *v49;
  void *v50;
  uint8_t *v51;
  uint8_t *v52;
  void *v53;
  int v54;
  uint64_t v55;
  char v56[16];
  id v57;

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1, a2);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (uint8_t **)((char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v14 = qword_100354EE8;
  *v13 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    return;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  v16 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
  if ((swift_dynamicCast(&v57, v8, a2, v16, 6) & 1) != 0)
  {
    v17 = v57;
    v18 = objc_msgSend(v57, "endPointType");
    if (v18 == (id)1)
    {
      v19 = OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint;
      v20 = *(void **)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint);
      if (v20)
      {
        v21 = v17;
        v22 = v20;
        v23 = static NSObject.== infix(_:_:)(v22);

        if ((v23 & 1) != 0)
        {
          v24 = v21;
          v25 = Logger.logObject.getter(v24);
          v29 = static os_log_type_t.info.getter(v25, v26, v27, v28);
          v30 = v29;
          if (os_log_type_enabled(v25, v29))
          {
            v54 = v30;
            v31 = (uint8_t *)swift_slowAlloc(12, -1);
            v53 = (void *)swift_slowAlloc(32, -1);
            v57 = v53;
            *(_DWORD *)v31 = 136315138;
            v32 = v31 + 12;
            v51 = v31 + 4;
            v52 = v31;
            v33 = objc_msgSend(v24, "publicKeyIdentifier");
            v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
            v36 = v35;

            sub_1001BD2CC(v34, v36);
            v38 = v37;
            v55 = v37;
            v39 = sub_100063D3C((uint64_t *)&unk_100346060);
            v40 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
            v41 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v39, v40);
            v43 = v42;
            swift_bridgeObjectRelease(v38);
            sub_100063CD0(v34, v36);
            v55 = sub_1001C56EC(v41, v43, (uint64_t *)&v57);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v51, v32);

            swift_bridgeObjectRelease(v43);
            v44 = v52;
            _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v54, "Endpoint updated %s", v52, 0xCu);
            v45 = v53;
            swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v45, -1, -1);
            swift_slowDealloc(v44, -1, -1);
          }
          else
          {

          }
          v50 = *(void **)(v3 + v19);
          *(_QWORD *)(v3 + v19) = v24;

          return;
        }
      }
      v46 = Logger.logObject.getter(v18);
      v48 = static os_log_type_t.error.getter(v46, v47);
      if (os_log_type_enabled(v46, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v48, "Got an update for a different endpoint", v49, 2u);
        swift_slowDealloc(v49, -1, -1);
      }

    }
  }
}

uint64_t sub_10008EC34(uint64_t a1, uint64_t a2)
{
  return sub_10008EC48(a1, a2);
}

uint64_t sub_10008EC48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  swift_beginAccess(a1 + 16, v9, 1, 0);
  v4 = *(_QWORD *)(a1 + 16);
  swift_retain(a2);
  v5 = swift_bridgeObjectRetain(v4);
  v6 = sub_100096430(v5, a2);
  swift_release(a2);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_10008ECD0(id *a1)
{
  id v1;
  uint64_t result;
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = *a1;
  if (objc_msgSend(*a1, "endPointType") == (id)1)
  {
    result = (uint64_t)objc_msgSend(v1, "bleUUID");
    if (!result)
      return result;

    v3 = objc_msgSend(v1, "revocationAttestation");
    if (!v3)
      return 1;
    v4 = v3;
    v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

    sub_100063CD0(v5, v7);
  }
  return 0;
}

uint64_t sub_10008ED74(void **a1)
{
  return sub_10017590C(*a1);
}

uint64_t sub_10008ED7C(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;

  v3 = isStackAllocationSafe;
  v4 = *(_BYTE *)(isStackAllocationSafe + 32);
  v5 = v4 & 0x3F;
  v6 = (1 << v4) + 63;
  v7 = v6 >> 6;
  v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    sub_10008EED8((unint64_t *)((char *)&v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, v3);
    v10 = v9;
    v11 = swift_release(v3);
    if (v2)
      swift_willThrow(v11);
  }
  else
  {
    v12 = (void *)swift_slowAlloc(v8, -1);
    bzero(v12, v8);
    sub_10008EED8((unint64_t *)v12, v7, v3);
    v10 = v13;
    swift_release(v3);
    swift_slowDealloc(v12, -1, -1);
  }
  return v10;
}

void sub_10008EED8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t (*v22)(char *, unint64_t, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  char *v44;
  char v45;

  v4 = v3;
  v38 = a2;
  v39 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(os_unfair_lock_s **)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v43 = a3;
  v44 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 0;
  v11 = *(_QWORD *)(a3 + 56);
  v40 = 0;
  v41 = a3 + 56;
  v12 = 1 << *(_BYTE *)(a3 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v42 = (unint64_t)(v12 + 63) >> 6;
  while (v14)
  {
    v15 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    v16 = v15 | (v10 << 6);
LABEL_17:
    v20 = *(_QWORD *)(v43 + 48) + *(_QWORD *)&v7[18]._os_unfair_lock_opaque * v16;
    v21 = v7;
    v22 = *(uint64_t (**)(char *, unint64_t, uint64_t))&v7[4]._os_unfair_lock_opaque;
    v23 = v44;
    v24 = v22(v44, v20, v6);
    v26 = __chkstk_darwin(v24, v25);
    *(&v37 - 2) = (uint64_t)v23;
    if (qword_1003447A0 != -1)
      v26 = swift_once(&qword_1003447A0, sub_1001EDCA4);
    v28 = __chkstk_darwin(v26, v27);
    *(&v37 - 2) = (uint64_t)sub_100096660;
    *(&v37 - 1) = (uint64_t)(&v37 - 4);
    __chkstk_darwin(v28, v29);
    *(&v37 - 4) = v30;
    *(&v37 - 3) = (uint64_t)sub_10006E33C;
    *(&v37 - 2) = v31;
    v7 = v32 + 4;
    os_unfair_lock_lock(v32 + 4);
    sub_1000EABFC((_QWORD *(*)(uint64_t *__return_ptr))sub_100096668, &v45);
    if (v4)
      goto LABEL_32;
    v4 = 0;
    os_unfair_lock_unlock(v7);
    v33 = v45;
    v7 = v21;
    (*(void (**)(char *, uint64_t))&v21[2]._os_unfair_lock_opaque)(v44, v6);
    if ((v33 & 1) == 0)
    {
      *(unint64_t *)((char *)v39 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = __OFADD__(v40++, 1);
      if (v17)
        goto LABEL_31;
    }
  }
  v17 = __OFADD__(v10++, 1);
  if (v17)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v10 >= v42)
    goto LABEL_28;
  v18 = *(_QWORD *)(v41 + 8 * v10);
  if (v18)
  {
LABEL_16:
    v14 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
    goto LABEL_17;
  }
  v19 = v10 + 1;
  if (v10 + 1 >= v42)
    goto LABEL_28;
  v18 = *(_QWORD *)(v41 + 8 * v19);
  if (v18)
    goto LABEL_15;
  v19 = v10 + 2;
  if (v10 + 2 >= v42)
    goto LABEL_28;
  v18 = *(_QWORD *)(v41 + 8 * v19);
  if (v18)
    goto LABEL_15;
  v19 = v10 + 3;
  if (v10 + 3 >= v42)
  {
LABEL_28:
    v34 = v38;
    v35 = v40;
    v36 = v43;
    swift_retain(v43);
    sub_1001955D4(v39, v34, v35, v36);
    return;
  }
  v18 = *(_QWORD *)(v41 + 8 * v19);
  if (v18)
  {
LABEL_15:
    v10 = v19;
    goto LABEL_16;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v42)
      goto LABEL_28;
    v18 = *(_QWORD *)(v41 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_16;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  os_unfair_lock_unlock(v7);
  __break(1u);
}

uint64_t sub_10008F210(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_10008F220()
{
  uint64_t v0;

  return sub_10008EC48(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10008F238@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t *)@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t result;
  _BYTE v11[24];

  swift_beginAccess(a1 + 32, v11, 0, 0);
  v6 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain(v6);
  sub_100095478(v7, a2);
  v9 = v8;
  result = swift_bridgeObjectRelease(v6);
  *a3 = v9 & 1;
  return result;
}

void sub_10008F2C8()
{
  sub_10008F2D8("Transaction emulation started", 1);
}

void sub_10008F2D8(const char *a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;

  v5 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) != 0)
  {
    if (*(_BYTE *)(v5 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2)
    {
      v14 = Logger.logObject.getter(v13);
      v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
      if (os_log_type_enabled(v14, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v18, a1, v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }

      *(_BYTE *)(v5 + OBJC_IVAR____TtC10seserviced13AlishaPairing_isSEAccessAllowed) = a2;
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10008F45C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  int64_t v29;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];

  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = type metadata accessor for Peer(0);
    v9 = sub_1000639EC((unint64_t *)&qword_100347720, type metadata accessor for Peer, (uint64_t)&unk_10028BFA8);
    v10 = Set.Iterator.init(_cocoa:)(v37, v7, v8, v9);
    v5 = v37[0];
    v32 = v37[1];
    v11 = v37[2];
    v12 = v37[3];
    v13 = v37[4];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v32 = a1 + 56;
    v11 = ~v14;
    v15 = -v14;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v13 = v16 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v12 = 0;
  }
  v31 = (unint64_t)(v11 + 64) >> 6;
  v33 = a3;
  v34 = a2;
  while (1)
  {
    v17 = v13;
    v18 = v12;
    if ((v5 & 0x8000000000000000) == 0)
      break;
    v21 = __CocoaSet.Iterator.next()(v10);
    if (!v21)
      goto LABEL_38;
    v22 = v21;
    v35 = v21;
    v23 = type metadata accessor for Peer(0);
    swift_unknownObjectRetain(v22);
    swift_dynamicCast(&v36, &v35, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
    v24 = v36;
    swift_unknownObjectRelease(v22);
    v19 = v17;
    if (!v24)
      goto LABEL_39;
LABEL_30:
    v28 = *(_QWORD *)(v24 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    v27 = *(_QWORD *)(v24 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    if (v27 >> 60 != 15)
      __asm { BR              X8 }
    sub_100063C8C(v34, v33);
    sub_10006B9B4(v28, v27);
    sub_10006B9B4(v34, v33);
    v10 = (_QWORD *)swift_release(v24);
    v13 = v19;
  }
  if (v13)
  {
    v19 = (v13 - 1) & v13;
    v20 = __clz(__rbit64(v13)) | (v12 << 6);
    goto LABEL_29;
  }
  ++v12;
  if (__OFADD__(v18, 1))
  {
    __break(1u);
    JUMPOUT(0x10008FC34);
  }
  if (v12 >= v31)
    goto LABEL_38;
  v25 = *(_QWORD *)(v32 + 8 * v12);
  if (v25)
  {
LABEL_28:
    v19 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v12 << 6);
LABEL_29:
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
    swift_retain(v24);
    if (!v24)
      goto LABEL_39;
    goto LABEL_30;
  }
  v26 = v18 + 2;
  if (v18 + 2 >= v31)
    goto LABEL_38;
  v25 = *(_QWORD *)(v32 + 8 * v26);
  if (v25)
    goto LABEL_27;
  v26 = v18 + 3;
  if (v18 + 3 >= v31)
    goto LABEL_38;
  v25 = *(_QWORD *)(v32 + 8 * v26);
  if (v25)
    goto LABEL_27;
  v26 = v18 + 4;
  if (v18 + 4 >= v31)
    goto LABEL_38;
  v25 = *(_QWORD *)(v32 + 8 * v26);
  if (v25)
  {
LABEL_27:
    v12 = v26;
    goto LABEL_28;
  }
  v12 = v18 + 5;
  if (v18 + 5 >= v31)
    goto LABEL_38;
  v25 = *(_QWORD *)(v32 + 8 * v12);
  if (v25)
    goto LABEL_28;
  v29 = v18 + 6;
  while (v31 != v29)
  {
    v25 = *(_QWORD *)(v32 + 8 * v29++);
    if (v25)
    {
      v12 = v29 - 1;
      goto LABEL_28;
    }
  }
LABEL_38:
  v24 = 0;
LABEL_39:
  sub_10007EF58(v5);
  return v24;
}

uint64_t sub_10008FCE4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[5];

  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = type metadata accessor for Peer(0);
    v9 = sub_1000639EC((unint64_t *)&qword_100347720, type metadata accessor for Peer, (uint64_t)&unk_10028BFA8);
    v10 = Set.Iterator.init(_cocoa:)(v36, v7, v8, v9);
    v5 = v36[0];
    v31 = v36[1];
    v11 = v36[2];
    v12 = v36[3];
    v13 = v36[4];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v31 = a1 + 56;
    v11 = ~v14;
    v15 = -v14;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v13 = v16 & *(_QWORD *)(a1 + 56);
    v10 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v12 = 0;
  }
  v30 = (unint64_t)(v11 + 64) >> 6;
  v32 = a3;
  v33 = a2;
  while (1)
  {
    v17 = v12;
    if ((v5 & 0x8000000000000000) == 0)
      break;
    v20 = __CocoaSet.Iterator.next()(v10);
    v21 = v20;
    if (!v20)
      goto LABEL_40;
    v34 = v20;
    v22 = type metadata accessor for Peer(0);
    swift_unknownObjectRetain(v21);
    swift_dynamicCast(&v35, &v34, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
    v23 = v35;
    swift_unknownObjectRelease(v21);
    v18 = v13;
    if (!v23)
    {
LABEL_38:
      v21 = 0;
      goto LABEL_40;
    }
LABEL_30:
    v27 = *(_QWORD *)(v23 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    v26 = *(_QWORD *)(v23 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    if (v26 >> 60 != 15)
      __asm { BR              X8 }
    sub_100063C8C(v33, v32);
    sub_10006B9B4(v27, v26);
    sub_10006B9B4(v33, v32);
    v10 = (_QWORD *)swift_release(v23);
    v13 = v18;
  }
  if (v13)
  {
    v18 = (v13 - 1) & v13;
    v19 = __clz(__rbit64(v13)) | (v12 << 6);
    goto LABEL_29;
  }
  ++v12;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
    JUMPOUT(0x1000904F4);
  }
  if (v12 >= v30)
    goto LABEL_39;
  v24 = *(_QWORD *)(v31 + 8 * v12);
  if (v24)
  {
LABEL_28:
    v18 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v12 << 6);
LABEL_29:
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
    swift_retain(v23);
    if (!v23)
      goto LABEL_38;
    goto LABEL_30;
  }
  v25 = v17 + 2;
  if (v17 + 2 >= v30)
    goto LABEL_39;
  v24 = *(_QWORD *)(v31 + 8 * v25);
  if (v24)
    goto LABEL_27;
  v25 = v17 + 3;
  if (v17 + 3 >= v30)
    goto LABEL_39;
  v24 = *(_QWORD *)(v31 + 8 * v25);
  if (v24)
    goto LABEL_27;
  v25 = v17 + 4;
  if (v17 + 4 >= v30)
    goto LABEL_39;
  v24 = *(_QWORD *)(v31 + 8 * v25);
  if (v24)
  {
LABEL_27:
    v12 = v25;
    goto LABEL_28;
  }
  v12 = v17 + 5;
  if (v17 + 5 >= v30)
    goto LABEL_39;
  v24 = *(_QWORD *)(v31 + 8 * v12);
  if (v24)
    goto LABEL_28;
  v28 = v17 + 6;
  while (v30 != v28)
  {
    v24 = *(_QWORD *)(v31 + 8 * v28++);
    if (v24)
    {
      v12 = v28 - 1;
      goto LABEL_28;
    }
  }
LABEL_39:
  v21 = 0;
LABEL_40:
  sub_10007EF58(v5);
  return v21;
}

uint64_t sub_1000905A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  os_log_type_t v48;
  uint8_t *v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _QWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  v4 = v2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (_QWORD *)((char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = (void *)qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = v12;
  v14 = _dispatchPreconditionTest(_:)(v11);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  if (*(_BYTE *)(v4 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2)
  {
    v55 = a1;
    v16 = v4 + OBJC_IVAR____TtC10seserviced13AlishaPairing_logger;
    v17 = swift_retain_n(a2, 2);
    v18 = Logger.logObject.getter(v17);
    v22 = static os_log_type_t.info.getter(v18, v19, v20, v21);
    if (os_log_type_enabled(v18, v22))
    {
      v53[0] = v16;
      v23 = swift_slowAlloc(12, -1);
      v53[1] = v3;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v54 = v4;
      *(_DWORD *)v24 = 136315138;
      *(_QWORD *)&v56 = v25;
      v26 = swift_retain(a2);
      v27 = UUID.uuidString.getter(v26);
      v29 = v28;
      swift_release(a2);
      v58 = sub_1001C56EC(v27, v29, (uint64_t *)&v56);
      v4 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v24 + 4, v24 + 12);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v29);
      _os_log_impl((void *)&_mh_execute_header, v18, v22, "Peer discovered %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      swift_release_n(a2, 2);
    }

    v30 = v55;
    v31 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
    if (*(_BYTE *)(v4 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) == 1)
    {
      v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataIsConnectable);
      v34 = v33;
      if (*(_QWORD *)(v30 + 16) && (v35 = sub_100187ED0(v32, v33), (v36 & 1) != 0))
      {
        sub_100096CB0(*(_QWORD *)(v30 + 56) + 32 * v35, (uint64_t)&v56);
      }
      else
      {
        v56 = 0u;
        v57 = 0u;
      }
      swift_bridgeObjectRelease(v34);
      if (*((_QWORD *)&v57 + 1))
      {
        v46 = swift_dynamicCast(&v58, &v56, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
        if ((_DWORD)v46 && (v58 & 1) != 0)
        {
          v47 = *(_QWORD *)(v4 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer);
          *(_QWORD *)(v4 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer) = a2;
          swift_release(v47);
          return swift_retain(a2);
        }
      }
      else
      {
        v46 = sub_100096700((uint64_t)&v56, (uint64_t *)&unk_100346130);
      }
      v38 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v38, v48))
        goto LABEL_24;
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v48, "Peripheral is not connectable", v49, 2u);
      v45 = v49;
    }
    else
    {
      v37 = swift_retain_n(v4, 2);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v38, v39))
      {
        swift_release_n(v4, 2);
LABEL_24:

        sub_100081DE8(2);
        v50 = sub_100063C48();
        v51 = swift_allocError(&type metadata for AlishaPairing.PairingError, v50, 0, 0);
        *v52 = 2;
        return swift_willThrow(v51);
      }
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      *(_DWORD *)v40 = 136315138;
      *(_QWORD *)&v56 = v41;
      LOBYTE(v58) = *(_BYTE *)(v4 + v31);
      v42 = String.init<A>(describing:)(&v58, &type metadata for AlishaPairing.State);
      v44 = v43;
      v58 = sub_1001C56EC(v42, v43, (uint64_t *)&v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v40 + 4, v40 + 12);
      swift_release_n(v4, 2);
      swift_bridgeObjectRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Wrong state %s", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      v45 = v40;
    }
    swift_slowDealloc(v45, -1, -1);
    goto LABEL_24;
  }
  return result;
}

Swift::Int sub_100090AD0(Swift::Int result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  Swift::Int v10;
  BOOL v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];

  v1 = result;
  v2 = (unint64_t)result >> 62;
  if ((unint64_t)result >> 62)
  {
    if (result < 0)
      v6 = result;
    else
      v6 = result & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(result);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    result = swift_bridgeObjectRelease(v1);
    if (v3)
    {
LABEL_3:
      sub_100063D3C(&qword_1003489C0);
      result = static _SetStorage.allocate(capacity:)(v3);
      v4 = (_BYTE *)result;
      v27 = v1;
      if (!v2)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v3 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  v27 = v1;
  if (!v2)
  {
LABEL_4:
    v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v5)
      return (Swift::Int)v4;
    goto LABEL_15;
  }
LABEL_11:
  if (v1 < 0)
    v7 = v1;
  else
    v7 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v7);
  result = swift_bridgeObjectRelease(v1);
  if (!v5)
    return (Swift::Int)v4;
LABEL_15:
  v8 = 0;
  v9 = v4 + 56;
  while ((v27 & 0xC000000000000001) != 0)
  {
    result = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v27);
    v10 = result;
    v11 = __OFADD__(v8++, 1);
    if (v11)
      goto LABEL_33;
LABEL_24:
    Hasher.init(_seed:)(v28);
    v12 = v10 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v13 = type metadata accessor for UUID(0);
    v14 = sub_1000639EC((unint64_t *)&unk_100347730, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v28, v13, v14);
    result = Hasher._finalize()();
    v15 = -1 << v4[32];
    v16 = result & ~v15;
    v17 = v16 >> 6;
    v18 = *(_QWORD *)&v9[8 * (v16 >> 6)];
    v19 = 1 << v16;
    if (((1 << v16) & v18) != 0)
    {
      v20 = *(_QWORD *)(*((_QWORD *)v4 + 6) + 8 * v16);
      v21 = v20 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      swift_retain(v20);
      LOBYTE(v21) = static UUID.== infix(_:_:)(v21, v12);
      result = swift_release(v20);
      if ((v21 & 1) != 0)
      {
LABEL_16:
        result = swift_release(v10);
        goto LABEL_17;
      }
      v22 = ~v15;
      while (1)
      {
        v16 = (v16 + 1) & v22;
        v17 = v16 >> 6;
        v18 = *(_QWORD *)&v9[8 * (v16 >> 6)];
        v19 = 1 << v16;
        if ((v18 & (1 << v16)) == 0)
          break;
        v23 = *(_QWORD *)(*((_QWORD *)v4 + 6) + 8 * v16);
        v24 = v23 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        swift_retain(v23);
        LOBYTE(v24) = static UUID.== infix(_:_:)(v24, v12);
        result = swift_release(v23);
        if ((v24 & 1) != 0)
          goto LABEL_16;
      }
    }
    *(_QWORD *)&v9[8 * v17] = v19 | v18;
    *(_QWORD *)(*((_QWORD *)v4 + 6) + 8 * v16) = v10;
    v25 = *((_QWORD *)v4 + 2);
    v11 = __OFADD__(v25, 1);
    v26 = v25 + 1;
    if (v11)
      goto LABEL_34;
    *((_QWORD *)v4 + 2) = v26;
LABEL_17:
    if (v8 == v5)
      return (Swift::Int)v4;
  }
  if (v8 >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_35;
  v10 = *(_QWORD *)(v27 + 32 + 8 * v8);
  result = swift_retain(v10);
  v11 = __OFADD__(v8++, 1);
  if (!v11)
    goto LABEL_24;
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_100090DA8(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      v2 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        v3 = type metadata accessor for Data.RangeReference(0);
        result = swift_allocObject(v3, 32, 7);
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

void sub_100090E44(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = __DataStorage._bytes.getter();
  if (!v10)
    goto LABEL_10;
  v11 = v10;
  v12 = __DataStorage._offset.getter();
  if (__OFSUB__(a1, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v13 = __OFSUB__(a2, a1);
  v14 = a2 - a1;
  if (v13)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  v15 = a1 - v12;
  v16 = __DataStorage._length.getter();
  if (v16 >= v14)
    v17 = v14;
  else
    v17 = v16;
  sub_10008DA34(v11 + v15, v11 + v15 + v17, a4 & 1, a5, a6);
}

void sub_100090F88(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_100091030@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;

  *(_QWORD *)(v10 - 112) = v2;
  *(_WORD *)(v10 - 104) = a2;
  v11 = HIDWORD(a2);
  *(_BYTE *)(v10 - 102) = BYTE2(a2);
  *(_BYTE *)(v10 - 101) = BYTE3(a2);
  v12 = a2 >> 40;
  v13 = HIWORD(a2);
  *(_BYTE *)(v10 - 100) = v11;
  *(_BYTE *)(v10 - 99) = v12;
  *(_BYTE *)(v10 - 98) = v13;
  v14 = v10 - 112 + v13;
  sub_100063C8C(v8, v7);
  sub_100063C8C(v5, v4);
  sub_100063C8C(v3, v6);
  v24 = v6;
  sub_10008DA34(v10 - 112, v14, *(_DWORD *)(v10 - 136), v8, v7);
  if (v9)
  {
    v15 = *(_QWORD *)(v10 - 112);
    *(_QWORD *)(v10 - 136) = *(unsigned int *)(v10 - 104);
    *(_QWORD *)(v10 - 128) = v15;
    v16 = *(unsigned __int8 *)(v10 - 100);
    v17 = *(unsigned __int8 *)(v10 - 99);
    v18 = *(unsigned __int8 *)(v10 - 98);
    sub_100063CD0(v8, v7);
    sub_100063CD0(v5, v4);
    v19 = *(_QWORD *)(v10 - 136) | (v16 << 32) | (v17 << 40) | (v18 << 48);
  }
  else
  {
    v16 = *(unsigned int *)(v10 - 116);
    v20 = *(_QWORD *)(v10 - 112);
    *(_QWORD *)(v10 - 136) = *(unsigned int *)(v10 - 104);
    *(_QWORD *)(v10 - 128) = v20;
    *(_QWORD *)(v10 - 144) = *(unsigned __int8 *)(v10 - 100);
    v21 = *(unsigned __int8 *)(v10 - 99);
    v22 = *(unsigned __int8 *)(v10 - 98);
    sub_100063CD0(v8, v7);
    sub_100063CD0(v5, v4);
    v19 = *(_QWORD *)(v10 - 136) | (*(_QWORD *)(v10 - 144) << 32) | (v21 << 40) | (v22 << 48);
  }
  *a1 = *(_QWORD *)(v10 - 128);
  a1[1] = v19;
  sub_100063CD0(v3, v24);
  return v16;
}

void sub_100091794(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_100091830@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v9 - 112) = v8;
  *(_WORD *)(v9 - 104) = a2;
  *(_BYTE *)(v9 - 102) = BYTE2(a2);
  *(_BYTE *)(v9 - 101) = BYTE3(a2);
  *(_BYTE *)(v9 - 100) = BYTE4(a2);
  *(_BYTE *)(v9 - 99) = BYTE5(a2);
  *(_BYTE *)(v9 - 98) = BYTE6(a2);
  sub_100063C8C(v6, v5);
  v10 = *(_QWORD *)(v9 - 120);
  sub_100063C8C(v10, v4);
  sub_100063C8C(v7, v3);
  sub_100090F88(*(_QWORD *)(v9 - 136));
  *(_DWORD *)(v9 - 128) = v11;
  *(_QWORD *)(v9 - 144) = *(_QWORD *)(v9 - 112);
  *(_QWORD *)(v9 - 136) = v2;
  v12 = v3;
  v13 = *(unsigned int *)(v9 - 104);
  v14 = *(unsigned __int8 *)(v9 - 100);
  v15 = *(unsigned __int8 *)(v9 - 99);
  v16 = v5;
  v17 = v7;
  v18 = *(unsigned __int8 *)(v9 - 98);
  sub_100063CD0(v6, v16);
  sub_100063CD0(v10, v4);
  v19 = v13 | (v14 << 32);
  v20 = v12;
  v21 = *(unsigned int *)(v9 - 128);
  *a1 = *(_QWORD *)(v9 - 144);
  a1[1] = v19 | (v15 << 40) | (v18 << 48);
  sub_100063CD0(v17, v20);
  return v21;
}

void sub_100091F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = __DataStorage._bytes.getter();
  if (v9)
  {
    v10 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v10))
    {
LABEL_13:
      __break(1u);
      return;
    }
    v9 += a1 - v10;
  }
  v11 = __OFSUB__(a2, a1);
  v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_13;
  }
  v13 = __DataStorage._length.getter();
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  v15 = v9 + v14;
  if (v9)
    v16 = v15;
  else
    v16 = 0;
  sub_10008D500(v9, v16, a4, a5);
}

void sub_100092040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = __DataStorage._bytes.getter();
  if (v8)
  {
    v9 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v9))
    {
LABEL_13:
      __break(1u);
      return;
    }
    v8 += a1 - v9;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_13;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = v8 + v13;
  if (v8)
    v15 = v14;
  else
    v15 = 0;
  sub_10008C878(v8, v15, a4, a5);
}

void sub_100092148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X9 }
}

uint64_t sub_1000921B0()
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  if (BYTE6(v1) == 16)
    __asm { BR              X10 }
  v2 = sub_100063C48();
  v3 = swift_allocError(&type metadata for AlishaPairing.PairingError, v2, 0, 0);
  *v4 = 1;
  return swift_willThrow(v3);
}

void sub_100093144(char a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  os_log_type_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  NSObject *v110;
  uint64_t v111;
  os_log_type_t v112;
  uint8_t *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  os_log_type_t v120;
  uint8_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  NSObject *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  os_log_type_t v133;
  uint8_t *v134;
  uint64_t v135;
  os_log_type_t v136;
  uint8_t *v137;
  const char *v138[17];
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t aBlock;
  uint64_t v146;
  char v147[8];

  v143 = (char *)a6;
  v142 = type metadata accessor for DispatchWorkItemFlags(0);
  v141 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142, v10);
  v140 = (char *)v138 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for DispatchQoS(0);
  v138[16] = *(const char **)(v139 - 8);
  __chkstk_darwin(v139, v12);
  v14 = (char *)v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)v138 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchPredicate(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  v23 = (const char **)((char *)v138 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v24 = (void *)qword_100354EE8;
  *v23 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v19);
  v25 = v24;
  v26 = _dispatchPreconditionTest(_:)(v23);
  v27 = (*(uint64_t (**)(_QWORD *, uint64_t))(v20 + 8))(v23, v19);
  if ((v26 & 1) != 0)
  {
    switch(a1)
    {
      case 0:
        if (*(_BYTE *)(v144 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2)
        {
          if (*(_BYTE *)(v144 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) == 3)
          {
            *(_BYTE *)(v144 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) = 4;
            sub_100080958(&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s", v138[0]);
          }
          if (qword_100344550 != -1)
            swift_once(&qword_100344550, sub_1000601F0);
          sub_1000626C8(a3, a4);
        }
        return;
      case 1:
        v26 = OBJC_IVAR____TtC10seserviced13AlishaPairing_mode;
        if (*(_BYTE *)(v144 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2
          && *(_BYTE *)(v144 + OBJC_IVAR____TtC10seserviced13AlishaPairing_isSEAccessAllowed) != 1)
        {
          v105 = sub_10007C66C((uint64_t)&off_100305350);
          v107 = v106;
          sub_100083D18(0x535F454349564544, 0xEE00595355425F45, 3u, 17, v105, v106, (uint64_t)v143);
          v73 = v105;
          v108 = v107;
          goto LABEL_45;
        }
        v14 = v143;
        if (qword_100344738 != -1)
          goto LABEL_76;
        goto LABEL_24;
      case 2:
        v42 = v144;
        if (*(_BYTE *)(v144 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) != 2)
          return;
        if (qword_100344690 != -1)
          swift_once(&qword_100344690, sub_100182BE4);
        v43 = qword_100354D70;
        v44 = (uint64_t)v143;
        swift_retain(v143);
        v45 = sub_100196F9C(v43, v44);
        swift_release(v44);
        v46 = (void *)sub_10009F62C(v45);
        swift_bridgeObjectRelease(v45);
        if (!v46)
          goto LABEL_48;
        v47 = type metadata accessor for UWBAlishaSession();
        if (swift_dynamicCastClass(v46, v47))
        {
          if (qword_100344680 != -1)
            swift_once(&qword_100344680, sub_10016E9A8);
          sub_100176C18(2, a2, a3, a4);
          v49 = v48;
          v51 = v50;
          v52 = swift_allocObject(&unk_100307750, 32, 7);
          *(_QWORD *)(v52 + 16) = v42;
          *(_QWORD *)(v52 + 24) = v44;
          swift_retain(v44);
          swift_retain(v42);
          sub_100180788(v49, v51, (uint64_t)sub_100096830, v52);
          swift_release(v52);
          sub_100063CD0(v49, v51);

          return;
        }

LABEL_48:
        v118 = swift_retain_n(v44, 2);
        v110 = Logger.logObject.getter(v118);
        v120 = static os_log_type_t.error.getter(v110, v119);
        if (os_log_type_enabled(v110, v120))
        {
          v121 = (uint8_t *)swift_slowAlloc(12, -1);
          v122 = swift_slowAlloc(32, -1);
          *(_DWORD *)v121 = 136315138;
          aBlock = v122;
          v123 = swift_retain(v44);
          v124 = UUID.uuidString.getter(v123);
          v126 = v125;
          swift_release(v44);
          v146 = sub_1001C56EC(v124, v126, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147, v121 + 4, v121 + 12);
          swift_release_n(v44, 2);
          swift_bridgeObjectRelease(v126);
          _os_log_impl((void *)&_mh_execute_header, v110, v120, "No active UWB Alisha session for %s", v121, 0xCu);
          swift_arrayDestroy(v122, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v122, -1, -1);
          swift_slowDealloc(v121, -1, -1);
          goto LABEL_58;
        }
        goto LABEL_50;
      case 3:
        v63 = a3;
        sub_100063C8C(a3, a4);
        sub_1000723E8(a3, a4, 0);
        v65 = v64;
        if (v64 == 1)
          __asm { BR              X10 }
        sub_100063C8C(a3, a4);
        v89 = sub_100063C8C(a3, a4);
        v90 = Logger.logObject.getter(v89);
        v94 = static os_log_type_t.info.getter(v90, v91, v92, v93);
        if (os_log_type_enabled(v90, v94))
        {
          v95 = swift_slowAlloc(15, -1);
          v96 = swift_slowAlloc(32, -1);
          aBlock = v96;
          *(_DWORD *)v95 = 16777730;
          LOBYTE(v146) = v65;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, (char *)&v146 + 1, v95 + 4, v95 + 5);
          *(_WORD *)(v95 + 5) = 2080;
          v144 = v95 + 7;
          sub_1001BD2CC(v63, a4);
          v98 = v97;
          v146 = v97;
          v99 = v63;
          v100 = sub_100063D3C((uint64_t *)&unk_100346060);
          v101 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
          v102 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v100, v101);
          v104 = v103;
          swift_bridgeObjectRelease(v98);
          v146 = sub_1001C56EC(v102, v104, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147, v144, v95 + 15);
          swift_bridgeObjectRelease(v104);
          sub_100063CD0(v99, a4);
          sub_100063CD0(v99, a4);
          _os_log_impl((void *)&_mh_execute_header, v90, v94, "Ignoring unknown event category %hhu payload %s", (uint8_t *)v95, 0xFu);
          swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v96, -1, -1);
          swift_slowDealloc(v95, -1, -1);

          return;
        }

        sub_100063CD0(v63, a4);
        v73 = v63;
        goto LABEL_44;
      case 5:
        if (a2 != 15)
        {
          sub_100063C8C(a3, a4);
          v74 = sub_100063C8C(a3, a4);
          v75 = Logger.logObject.getter(v74);
          v79 = static os_log_type_t.info.getter(v75, v76, v77, v78);
          if (os_log_type_enabled(v75, v79))
          {
            v80 = swift_slowAlloc(15, -1);
            v81 = swift_slowAlloc(32, -1);
            aBlock = v81;
            *(_DWORD *)v80 = 16777730;
            LOBYTE(v146) = a2;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, (char *)&v146 + 1, v80 + 4, v80 + 5);
            *(_WORD *)(v80 + 5) = 2080;
            sub_1001BD2CC(a3, a4);
            v83 = v82;
            v146 = v82;
            v84 = sub_100063D3C((uint64_t *)&unk_100346060);
            v85 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
            v86 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v84, v85);
            v88 = v87;
            swift_bridgeObjectRelease(v83);
            v146 = sub_1001C56EC(v86, v88, &aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147, v80 + 7, v80 + 15);
            swift_bridgeObjectRelease(v88);
            sub_100063CD0(a3, a4);
            sub_100063CD0(a3, a4);
            _os_log_impl((void *)&_mh_execute_header, v75, v79, "Ignoring supplementary service message identifier %hhu payload %s", (uint8_t *)v80, 0xFu);
            swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v81, -1, -1);
            swift_slowDealloc(v80, -1, -1);

            return;
          }

          sub_100063CD0(a3, a4);
          v73 = a3;
          goto LABEL_44;
        }
        v66 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
        v44 = v144;
        if (*(_BYTE *)(v144 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) == 6)
        {
          v67 = Logger.logObject.getter(v27);
          v71 = static os_log_type_t.info.getter(v67, v68, v69, v70);
          if (os_log_type_enabled(v67, v71))
          {
            v72 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v72 = 0;
            _os_log_impl((void *)&_mh_execute_header, v67, v71, "Received FIRST_APPROACH_RS", v72, 2u);
            swift_slowDealloc(v72, -1, -1);
          }

          *(_BYTE *)(v144 + v66) = 7;
          sub_100080958(&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s", v138[0]);
          sub_100087F98(a3, a4, (uint64_t)v143);
          return;
        }
        v109 = swift_retain_n(v144, 2);
        v110 = Logger.logObject.getter(v109);
        v112 = static os_log_type_t.error.getter(v110, v111);
        if (os_log_type_enabled(v110, v112))
        {
          v113 = (uint8_t *)swift_slowAlloc(12, -1);
          v114 = swift_slowAlloc(32, -1);
          *(_DWORD *)v113 = 136315138;
          aBlock = v114;
          LOBYTE(v146) = *(_BYTE *)(v44 + v66);
          v115 = String.init<A>(describing:)(&v146, &type metadata for AlishaPairing.State);
          v117 = v116;
          v146 = sub_1001C56EC(v115, v116, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147, v113 + 4, v113 + 12);
          swift_release_n(v44, 2);
          swift_bridgeObjectRelease(v117);
          _os_log_impl((void *)&_mh_execute_header, v110, v112, "Wrong state %s", v113, 0xCu);
          swift_arrayDestroy(v114, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v114, -1, -1);
          swift_slowDealloc(v113, -1, -1);
        }
        else
        {
LABEL_50:
          swift_release_n(v44, 2);
        }
        goto LABEL_58;
      default:
        v28 = a3;
        sub_100063C8C(a3, a4);
        v29 = sub_100063C8C(a3, a4);
        v30 = Logger.logObject.getter(v29);
        v32 = static os_log_type_t.error.getter(v30, v31);
        if (os_log_type_enabled(v30, v32))
        {
          v33 = swift_slowAlloc(18, -1);
          v34 = swift_slowAlloc(32, -1);
          aBlock = v34;
          *(_DWORD *)v33 = 16777986;
          LOBYTE(v146) = a1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, (char *)&v146 + 1, v33 + 4, v33 + 5);
          *(_WORD *)(v33 + 5) = 256;
          LOBYTE(v146) = a2;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, (char *)&v146 + 1, v33 + 7, v33 + 8);
          *(_WORD *)(v33 + 8) = 2080;
          sub_1001BD2CC(v28, a4);
          v36 = v35;
          v146 = v35;
          v37 = sub_100063D3C((uint64_t *)&unk_100346060);
          v38 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
          v39 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v37, v38);
          v41 = v40;
          swift_bridgeObjectRelease(v36);
          v146 = sub_1001C56EC(v39, v41, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147, v33 + 10, v33 + 18);
          swift_bridgeObjectRelease(v41);
          sub_100063CD0(v28, a4);
          sub_100063CD0(v28, a4);
          _os_log_impl((void *)&_mh_execute_header, v30, v32, "Ignoring unknown message type %hhu identifier %hhu payload %s", (uint8_t *)v33, 0x12u);
          swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v34, -1, -1);
          swift_slowDealloc(v33, -1, -1);

        }
        else
        {

          sub_100063CD0(a3, a4);
          v73 = a3;
LABEL_44:
          v108 = a4;
LABEL_45:
          sub_100063CD0(v73, v108);
        }
        return;
    }
  }
  __break(1u);
LABEL_76:
  swift_once(&qword_100344738, sub_1001D63E8);
LABEL_24:
  v53 = &v14[OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier];
  swift_beginAccess(&v14[OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier], &aBlock, 0, 0);
  v54 = type metadata accessor for UUID(0);
  v55 = *(_QWORD *)(v54 - 8);
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v18, v53, v54);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v18, 0, 1, v54);
  sub_1001D50A4(a2, a3, a4, (uint64_t)v14, 1, (uint64_t)v18, 0, 1);
  sub_100096700((uint64_t)v18, (uint64_t *)&unk_1003465E0);
  v56 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
  v57 = v144;
  if (*(_BYTE *)(v144 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) == 8)
  {
    sub_100063C8C(a3, a4);
    sub_1000723E8(a3, a4, 1);
    v59 = v58;
    sub_100063C8C(a3, a4);
    sub_1000723E8(a3, a4, 2);
    v61 = v60;
    sub_100063C8C(a3, a4);
    sub_1000723E8(a3, a4, 3);
    if (v59 == 60)
    {
      if (*(_BYTE *)(v57 + v26))
      {
        if (*(_BYTE *)(v57 + v26) == 1)
        {
          if (v61)
          {
            if (v61 == 1 && v62 == 176)
            {
              *(_BYTE *)(v57 + v56) = 9;
              sub_100080958(&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s", v138[0]);
            }
            return;
          }
        }
        else if (v61)
        {
          if (v61 != 1 || v62 != 129)
            return;
          *(_BYTE *)(v57 + v56) = 9;
          sub_100080958(&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s", v138[0]);
          if (qword_100344550 != -1)
            swift_once(&qword_100344550, sub_1000601F0);
          sub_100062A30();
          v129 = Logger.logObject.getter(v128);
          v133 = static os_log_type_t.info.getter(v129, v130, v131, v132);
          if (os_log_type_enabled(v129, v133))
          {
            v134 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v134 = 0;
            _os_log_impl((void *)&_mh_execute_header, v129, v133, "Handing off the peripheral to Alisha", v134, 2u);
            swift_slowDealloc(v134, -1, -1);
          }

          if (qword_100344680 != -1)
            swift_once(&qword_100344680, sub_10016E9A8);
          sub_10016D6D0((uint64_t)v143);
          v127 = 6;
LABEL_59:
          sub_100081DE8(v127);
          return;
        }
      }
      else if (v61)
      {
        return;
      }
      v110 = Logger.logObject.getter(v62);
      v136 = static os_log_type_t.error.getter(v110, v135);
      if (os_log_type_enabled(v110, v136))
      {
        v137 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v137 = 0;
        _os_log_impl((void *)&_mh_execute_header, v110, v136, "Received error control flow", v137, 2u);
        swift_slowDealloc(v137, -1, -1);
      }
LABEL_58:

      v127 = 2;
      goto LABEL_59;
    }
  }
}

void sub_100095478(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  uint64_t v30;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = type metadata accessor for Peer(0);
    v7 = sub_1000639EC((unint64_t *)&qword_100347720, type metadata accessor for Peer, (uint64_t)&unk_10028BFA8);
    v8 = Set.Iterator.init(_cocoa:)(v29, v5, v6, v7);
    v3 = v29[0];
    v27 = v29[1];
    v9 = v29[2];
    v10 = v29[3];
    v11 = v29[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v27 = a1 + 56;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v10 = 0;
  }
  v26 = (unint64_t)(v9 + 64) >> 6;
  while (1)
  {
    v19 = v10;
    if ((v3 & 0x8000000000000000) == 0)
      break;
    v23 = __CocoaSet.Iterator.next()(v8);
    v24 = v23;
    if (!v23)
      goto LABEL_34;
    v28 = v23;
    v25 = type metadata accessor for Peer(0);
    swift_unknownObjectRetain(v24);
    swift_dynamicCast(&v30, &v28, (char *)&type metadata for Swift.AnyObject + 8, v25, 7);
    v17 = v30;
    swift_unknownObjectRelease(v24);
    if (!v17)
      goto LABEL_34;
LABEL_13:
    v30 = v17;
    v18 = a2(&v30);
    v8 = (_QWORD *)swift_release(v17);
    if ((v18 & 1) != 0)
      goto LABEL_34;
  }
  if (v11)
  {
    v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v16 = v15 | (v10 << 6);
LABEL_12:
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    swift_retain(v17);
    if (!v17)
      goto LABEL_34;
    goto LABEL_13;
  }
  v20 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v20 >= v26)
      goto LABEL_34;
    v21 = *(_QWORD *)(v27 + 8 * v20);
    ++v10;
    if (!v21)
    {
      v10 = v19 + 2;
      if (v19 + 2 >= v26)
        goto LABEL_34;
      v21 = *(_QWORD *)(v27 + 8 * v10);
      if (!v21)
      {
        v10 = v19 + 3;
        if (v19 + 3 >= v26)
          goto LABEL_34;
        v21 = *(_QWORD *)(v27 + 8 * v10);
        if (!v21)
        {
          v10 = v19 + 4;
          if (v19 + 4 >= v26)
            goto LABEL_34;
          v21 = *(_QWORD *)(v27 + 8 * v10);
          if (!v21)
          {
            v10 = v19 + 5;
            if (v19 + 5 >= v26)
              goto LABEL_34;
            v21 = *(_QWORD *)(v27 + 8 * v10);
            if (!v21)
            {
              v22 = v19 + 6;
              while (v26 != v22)
              {
                v21 = *(_QWORD *)(v27 + 8 * v22++);
                if (v21)
                {
                  v10 = v22 - 1;
                  goto LABEL_31;
                }
              }
LABEL_34:
              sub_10007EF58(v3);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v11 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v10 << 6);
    goto LABEL_12;
  }
  __break(1u);
}

void sub_100095760(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    v11 = swift_retain_n(a1, 2);
    v12 = Logger.logObject.getter(v11);
    v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
    if (os_log_type_enabled(v12, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      *(_DWORD *)v17 = 136315138;
      v27 = v18;
      v19 = swift_retain(a1);
      v20 = UUID.uuidString.getter(v19);
      v22 = v21;
      swift_release(a1);
      v26 = sub_1001C56EC(v20, v22, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v17 + 4, v17 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v12, v16, "UWB Alisha session invalidated for %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      swift_release_n(a1, 2);
    }

    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2)
    {
      v23 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer);
      if (v23)
      {
        v24 = v23 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        v25 = a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        swift_retain(*(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer));
        if ((static UUID.== infix(_:_:)(v24, v25) & 1) != 0)
          sub_100081DE8(4);
        swift_release(v23);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100095A0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  char *isa;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __n128 v32;
  int64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v37;
  int64_t v38;
  void (*v39)(char *, unint64_t, uint64_t, __n128);
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  v3 = __chkstk_darwin(v0, v2);
  v54 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3, v5);
  v55 = (char *)&v48 - v6;
  v7 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  isa = (char *)v11[-1].isa;
  __chkstk_darwin(v11, v13);
  v15 = (uint64_t *)((char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
LABEL_40:
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v16 = qword_100354EE8;
  *v15 = qword_100354EE8;
  (*((void (**)(_QWORD *, _QWORD, NSObject *))isa + 13))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*((void (**)(_QWORD *, NSObject *))isa + 1))(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_42;
  }
  if (qword_1003445A8 != -1)
LABEL_42:
    swift_once(&qword_1003445A8, sub_1000C35EC);
  isa = "assicAppletInstance";
  v15 = 0;
  v18 = sub_1000B1B4C(0xD000000000000011, 0x80000001002B9CC0);
  v20 = sub_10008ED7C(v18, v19);
  v21 = v20;
  if (!*(_QWORD *)(v20 + 16))
  {
    swift_release(v20);
    return;
  }
  if (qword_100344680 != -1)
    swift_once(&qword_100344680, sub_10016E9A8);
  v22 = swift_retain(v21);
  v11 = Logger.logObject.getter(v22);
  v26 = static os_log_type_t.info.getter(v11, v23, v24, v25);
  if (os_log_type_enabled(v11, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v27 = 134217984;
    v56 = *(_QWORD *)(v21 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v27 + 4, v27 + 12);
    swift_release(v21);
    _os_log_impl((void *)&_mh_execute_header, v11, v26, "Unpairing %ld unknown paired peers", v27, 0xCu);
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    swift_release(v21);
  }
  v28 = *(_QWORD *)(v21 + 56);
  v49 = v21 + 56;
  v29 = 1 << *(_BYTE *)(v21 + 32);
  v30 = -1;
  if (v29 < 64)
    v30 = ~(-1 << v29);
  v31 = v30 & v28;
  v50 = (unint64_t)(v29 + 63) >> 6;
  v32 = swift_bridgeObjectRetain(v21);
  v33 = 0;
  v52 = 0x80000001002B9CC0;
  v53 = v21;
  v51 = v10;
  while (1)
  {
    if (v31)
    {
      v34 = __clz(__rbit64(v31));
      v31 &= v31 - 1;
      v35 = v34 | (v33 << 6);
      goto LABEL_31;
    }
    if (__OFADD__(v33++, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v33 >= v50)
      goto LABEL_37;
    v37 = *(_QWORD *)(v49 + 8 * v33);
    if (!v37)
      break;
LABEL_30:
    v31 = (v37 - 1) & v37;
    v35 = __clz(__rbit64(v37)) + (v33 << 6);
LABEL_31:
    v39 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v1 + 16);
    v39(v10, *(_QWORD *)(v21 + 48) + *(_QWORD *)(v1 + 72) * v35, v0, v32);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v10, 0, 1, v0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v10, 1, v0) == 1)
      goto LABEL_38;
    v40 = v1;
    v41 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v42 = v0;
    v43 = v55;
    v41(v55, v10, v42);
    v11 = qword_100354BD0;
    v44 = v54;
    v45 = v43;
    v0 = v42;
    ((void (*)(char *, char *, uint64_t))v39)(v54, v45, v42);
    v46 = type metadata accessor for DSKBLEPairing.BLEUnpairingRequest(0);
    isa = (char *)swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
    v41(&isa[OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_peerIdentifier], v44, v42);
    v47 = &isa[OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_tag];
    *(_QWORD *)v47 = 0xD000000000000011;
    *((_QWORD *)v47 + 1) = v52;
    sub_1000AEAA4((uint64_t)isa);
    swift_release(isa);
    v1 = v40;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v55, v42);
    v10 = v51;
    v21 = v53;
  }
  v38 = v33 + 1;
  if (v33 + 1 >= v50)
    goto LABEL_37;
  v37 = *(_QWORD *)(v49 + 8 * v38);
  if (v37)
    goto LABEL_29;
  v38 = v33 + 2;
  if (v33 + 2 >= v50)
    goto LABEL_37;
  v37 = *(_QWORD *)(v49 + 8 * v38);
  if (v37)
    goto LABEL_29;
  v38 = v33 + 3;
  if (v33 + 3 >= v50)
    goto LABEL_37;
  v37 = *(_QWORD *)(v49 + 8 * v38);
  if (v37)
    goto LABEL_29;
  v38 = v33 + 4;
  if (v33 + 4 >= v50)
    goto LABEL_37;
  v37 = *(_QWORD *)(v49 + 8 * v38);
  if (v37)
    goto LABEL_29;
  v38 = v33 + 5;
  if (v33 + 5 >= v50)
  {
LABEL_37:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v1 + 56))(v10, 1, 1, v0, v32);
LABEL_38:
    swift_release_n(v21, 2);
    return;
  }
  v37 = *(_QWORD *)(v49 + 8 * v38);
  if (v37)
  {
LABEL_29:
    v33 = v38;
    goto LABEL_30;
  }
  while (1)
  {
    v33 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v33 >= v50)
      goto LABEL_37;
    v37 = *(_QWORD *)(v49 + 8 * v33);
    ++v38;
    if (v37)
      goto LABEL_30;
  }
  __break(1u);
}

uint64_t sub_100095FB0(void *a1)
{
  uint64_t v1;

  return sub_100084A08(a1, v1);
}

uint64_t sub_100095FB8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100095FDC(_QWORD *a1)
{
  uint64_t v1;

  return sub_10006E2C4(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_100095FE4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  sub_100063CD0(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_100063CD0(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_100063CD0(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100096038()
{
  uint64_t v0;
  void *v1;
  __int128 v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v1 = *(void **)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v2 = *(_OWORD *)(v0 + 48);
  v5 = *(_OWORD *)(v0 + 32);
  v6 = v2;
  v7 = *(_OWORD *)(v0 + 64);
  return sub_10008C0CC(v1, &v4, *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
}

uint64_t sub_100096074(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100096084(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100096094()
{
  return sub_100096800((void (*)(_QWORD))&_swift_errorRelease);
}

void sub_1000960A0()
{
  uint64_t v0;

  sub_10008C558(*(_QWORD *)(v0 + 16));
}

_QWORD *sub_1000960AC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_1000960E8(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

Swift::Int sub_1000960F4(Swift::Int result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v6 = (unint64_t *)result;
  v7 = 0;
  v8 = 0;
  v9 = a3 + 56;
  v10 = 1 << *(_BYTE *)(a3 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(a3 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v8 << 6);
      goto LABEL_5;
    }
    v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v16 >= v13)
      goto LABEL_24;
    v17 = *(_QWORD *)(v9 + 8 * v16);
    ++v8;
    if (!v17)
    {
      v8 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_24;
      v17 = *(_QWORD *)(v9 + 8 * v8);
      if (!v17)
      {
        v8 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_24;
        v17 = *(_QWORD *)(v9 + 8 * v8);
        if (!v17)
          break;
      }
    }
LABEL_20:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_5:
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v15) + 16) != a4)
    {
      *(_QWORD *)(result + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      if (__OFADD__(v7++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return sub_1001950AC(v6, a2, v7, a3);
      }
    }
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_24;
  v17 = *(_QWORD *)(v9 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v13)
      goto LABEL_24;
    v17 = *(_QWORD *)(v9 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

Swift::Int sub_10009626C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  Swift::Int v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v3 = v2;
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  swift_retain_n(a2, 2);
  if (v7 <= 0xD || (swift_stdlib_isStackAllocationSafe(v9, 8) & 1) != 0)
  {
    __chkstk_darwin();
    bzero((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain(a2);
    v10 = sub_1000960F4((Swift::Int)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, a1, a2);
    swift_release(a1);
    v11 = swift_release(a2);
    if (v3)
      swift_willThrow(v11);
    swift_release_n(a2, 2);
  }
  else
  {
    v12 = (void *)swift_slowAlloc(v9, -1);
    bzero(v12, v9);
    swift_retain(a2);
    v10 = sub_1000960F4((Swift::Int)v12, v8, a1, a2);
    swift_release(a1);
    swift_release(a2);
    swift_slowDealloc(v12, -1, -1);
    swift_release_n(a2, 2);
  }
  return v10;
}

uint64_t sub_100096430(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[9];
  uint64_t v23;
  _QWORD *v24;

  if ((a1 & 0xC000000000000001) == 0)
    return sub_10009626C(a1, a2);
  v3 = &_swiftEmptySetSingleton;
  v24 = &_swiftEmptySetSingleton;
  if (a1 < 0)
    v4 = a1;
  else
    v4 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_retain(a2);
  v5 = __CocoaSet.makeIterator()(v4);
  v6 = __CocoaSet.Iterator.next()(v5);
  if (v6)
  {
    v7 = &_swiftEmptySetSingleton;
    do
    {
      v22[0] = v6;
      v9 = sub_100063D3C(&qword_100346170);
      swift_dynamicCast(&v23, v22, (char *)&type metadata for Swift.AnyObject + 8, v9, 7);
      v10 = v23;
      v11 = *(_QWORD *)(v23 + 16);
      if (v11 == a2)
      {
        result = swift_release(v23);
      }
      else
      {
        v12 = v7[2];
        if (v7[3] <= v12)
        {
          sub_1000CBC04(v12 + 1);
          v7 = v24;
        }
        Hasher.init(_seed:)(v22);
        Hasher._combine(_:)(v11);
        result = Hasher._finalize()();
        v13 = (char *)(v7 + 7);
        v14 = -1 << *((_BYTE *)v7 + 32);
        v15 = result & ~v14;
        v16 = v15 >> 6;
        if (((-1 << v15) & ~v7[(v15 >> 6) + 7]) != 0)
        {
          v17 = __clz(__rbit64((-1 << v15) & ~v7[(v15 >> 6) + 7])) | v15 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v18 = 0;
          v19 = (unint64_t)(63 - v14) >> 6;
          do
          {
            if (++v16 == v19 && (v18 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v20 = v16 == v19;
            if (v16 == v19)
              v16 = 0;
            v18 |= v20;
            v21 = *(_QWORD *)&v13[8 * v16];
          }
          while (v21 == -1);
          v17 = __clz(__rbit64(~v21)) + (v16 << 6);
        }
        *(_QWORD *)&v13[(v17 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v17;
        *(_QWORD *)(v7[6] + 8 * v17) = v10;
        ++v7[2];
      }
      v6 = __CocoaSet.Iterator.next()(result);
    }
    while (v6);
    v3 = v24;
  }
  swift_release(a2);
  swift_release(v5);
  return (uint64_t)v3;
}

uint64_t sub_100096660(uint64_t a1)
{
  uint64_t v1;

  return sub_10008C788(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100096668@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_10008F238(*(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t *))(v1 + 24), a1);
}

uint64_t sub_100096688(void *a1)
{
  return sub_10008A31C(a1);
}

uint64_t sub_100096694()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  sub_100063CD0(v0[4], v0[5]);
  sub_100063CD0(v0[6], v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

void sub_1000966D0()
{
  uint64_t v0;

  sub_10008A6C0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1000966E0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100096700(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100063D3C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10009673C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_10009675C()
{
  _QWORD *v0;

  sub_100063CD0(v0[2], v0[3]);
  swift_release(v0[4]);
  sub_100063CD0(v0[5], v0[6]);
  sub_100063CD0(v0[7], v0[8]);
  sub_100063CD0(v0[9], v0[10]);
  swift_release(v0[11]);
  swift_release(v0[12]);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_1000967B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v3 = *(_OWORD *)(v0 + 56);
  v6 = *(_OWORD *)(v0 + 40);
  v7 = v3;
  v8 = *(_OWORD *)(v0 + 72);
  return sub_100087828(v1, v2, &v5, *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
}

uint64_t sub_1000967F4()
{
  return sub_100096800((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100096800(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 24));
  return swift_deallocObject(v1, 32, 7);
}

uint64_t sub_100096830(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100087530(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_10009683C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_100063CD0(v0[3], v0[4]);
  sub_100063CD0(v0[5], v0[6]);
  sub_100063CD0(v0[7], v0[8]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

void sub_100096880(void *a1)
{
  sub_10008C4C4(a1);
}

uint64_t sub_1000968C0()
{
  _QWORD *v0;

  swift_errorRelease(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000968F4()
{
  uint64_t *v0;

  return sub_100087C38(v0[2], v0[3], v0[4]);
}

void sub_10009690C(uint64_t a1, uint64_t a2)
{
  sub_100095760(a2);
}

uint64_t sub_10009691C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Alisha.DKMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100096960(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Alisha.DKMessage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_10009699C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  Swift::Int v11;
  void *result;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100063D3C(&qword_1003453A0);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v37 = v1;
    v38 = a1 + 32;
    while (1)
    {
      v6 = *(void **)(v38 + 8 * v4);
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v9 = v8;
      Hasher.init(_seed:)(v39);
      v10 = v6;
      String.hash(into:)(v39, v7, v9);
      v11 = Hasher._finalize()();
      result = (void *)swift_bridgeObjectRelease(v9);
      v13 = -1 << *(_BYTE *)(v3 + 32);
      v14 = v11 & ~v13;
      v15 = v14 >> 6;
      v16 = *(_QWORD *)(v5 + 8 * (v14 >> 6));
      v17 = 1 << v14;
      if (((1 << v14) & v16) != 0)
      {
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14));
        v20 = v19;
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
        if (v18 == v21 && v20 == v22)
        {
LABEL_3:
          swift_bridgeObjectRelease_n(v20, 2);
LABEL_4:

          goto LABEL_5;
        }
        v24 = v22;
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v21, v22, 0);
        swift_bridgeObjectRelease(v20);
        result = (void *)swift_bridgeObjectRelease(v24);
        if ((v25 & 1) != 0)
          goto LABEL_4;
        v26 = ~v13;
        while (1)
        {
          v14 = (v14 + 1) & v26;
          v15 = v14 >> 6;
          v16 = *(_QWORD *)(v5 + 8 * (v14 >> 6));
          v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0)
            break;
          v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14));
          v20 = v28;
          v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
          if (v27 == v29 && v20 == v30)
            goto LABEL_3;
          v32 = v30;
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v20, v29, v30, 0);
          swift_bridgeObjectRelease(v20);
          result = (void *)swift_bridgeObjectRelease(v32);
          if ((v33 & 1) != 0)
            goto LABEL_4;
        }
      }
      *(_QWORD *)(v5 + 8 * v15) = v17 | v16;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14) = v10;
      v34 = *(_QWORD *)(v3 + 16);
      v35 = __OFADD__(v34, 1);
      v36 = v34 + 1;
      if (v35)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v36;
LABEL_5:
      if (++v4 == v37)
        return (void *)v3;
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_100096BCC()
{
  uint64_t v0;

  sub_100063CD0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100096BF0(void *a1)
{
  return sub_100088C54(a1);
}

uint64_t sub_100096BF8()
{
  _QWORD *v0;

  sub_100063CD0(v0[2], v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100096C24()
{
  uint64_t v0;

  return sub_100088CF8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100096C30()
{
  _QWORD *v0;

  swift_errorRelease(v0[2]);
  swift_release(v0[3]);
  sub_100063CD0(v0[4], v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_100096C64()
{
  uint64_t v0;

  sub_100089080(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100096C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000905A4(a3, a4);
}

void sub_100096C8C(uint64_t a1, uint64_t a2)
{
  sub_10008274C(a1, a2);
}

uint64_t sub_100096CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t getEnumTagSinglePayload for AlishaPairing.PairingError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AlishaPairing.PairingError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100096DC8 + 4 * byte_100288D09[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100096DFC + 4 * byte_100288D04[v4]))();
}

uint64_t sub_100096DFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100096E04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100096E0CLL);
  return result;
}

uint64_t sub_100096E18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100096E20);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100096E24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100096E2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AlishaPairing.PairingError()
{
  return &type metadata for AlishaPairing.PairingError;
}

unint64_t sub_100096E4C()
{
  unint64_t result;

  result = qword_1003453A8;
  if (!qword_1003453A8)
  {
    result = swift_getWitnessTable(&unk_100288ED4, &type metadata for AlishaPairing.PairingError);
    atomic_store(result, (unint64_t *)&qword_1003453A8);
  }
  return result;
}

void sub_100096EF8(uint64_t a1, uint64_t a2)
{
  sub_100096C8C(a1, a2);
}

uint64_t sub_100096F14@<X0>(uint64_t *a1@<X8>)
{
  return sub_10007EFBC(a1);
}

uint64_t type metadata accessor for SEFidoEvents()
{
  return objc_opt_self(_TtC10seserviced12SEFidoEvents);
}

uint64_t destroy for DefaultAppInfo(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for DefaultAppInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for DefaultAppInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for DefaultAppInfo(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DefaultAppInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultAppInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultAppInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultAppInfo()
{
  return &type metadata for DefaultAppInfo;
}

uint64_t sub_100097720()
{
  uint64_t *v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v18;
  uint64_t v19[2];
  __int128 v20;

  v1 = v0;
  v3 = *v0;
  v2 = v0[1];
  v4 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain(v2);
  v5 = sub_1001415A4(v3, v2, 1);
  if (qword_100344580 != -1)
    swift_once(&qword_100344580, sub_100097D44);
  v6 = type metadata accessor for Logger(0);
  sub_10009673C(v6, (uint64_t)qword_1003453D8);
  v20 = *(_OWORD *)(v1 + 3);
  swift_bridgeObjectRetain(v2);
  sub_10006F87C((uint64_t)&v20);
  v7 = v5;
  swift_bridgeObjectRetain(v2);
  sub_10006F87C((uint64_t)&v20);
  v8 = v7;
  v9 = Logger.logObject.getter(v8);
  v13 = static os_log_type_t.info.getter(v9, v10, v11, v12);
  if (os_log_type_enabled(v9, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(32, -1);
    v19[0] = v15;
    *(_DWORD *)v14 = 136315394;
    swift_bridgeObjectRetain(v2);
    v18 = sub_1001C56EC(v3, v2, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(v2, 2);
    sub_10006F8A4((uint64_t)&v20);
    swift_bridgeObjectRelease(v2);
    sub_10006F8A4((uint64_t)&v20);
    *(_WORD *)(v14 + 12) = 2048;
    v16 = objc_msgSend(v8, "installType");

    v18 = (uint64_t)v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v14 + 14, v14 + 22);

    _os_log_impl((void *)&_mh_execute_header, v9, v13, "Current Default Application with bundleID %s is installed with installType %lu", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease(v2);

    sub_10006F8A4((uint64_t)&v20);
    swift_bridgeObjectRelease(v2);
    sub_10006F8A4((uint64_t)&v20);

  }
  return 1;
}

Swift::Int sub_100097BDC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_100097C34(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100097C78()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_100097CCC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

unint64_t sub_100097D00()
{
  unint64_t result;

  result = qword_1003453F0;
  if (!qword_1003453F0)
  {
    result = swift_getWitnessTable(&unk_100288F68, &type metadata for DefaultAppInfo);
    atomic_store(result, (unint64_t *)&qword_1003453F0);
  }
  return result;
}

uint64_t sub_100097D44()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000980F8(v0, qword_1003453D8);
  sub_10009673C(v0, (uint64_t)qword_1003453D8);
  return Logger.init(subsystem:category:)(0xD000000000000014);
}

void sub_100097DC4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[4];

  if (*(_QWORD *)(a1 + 16))
  {
    v4 = sub_100187ED0(0x6449656C646E7562, 0xE800000000000000);
    if ((v5 & 1) != 0)
    {
      sub_100096CB0(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v28);
      if ((swift_dynamicCast(&v26, v28, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        v6 = v27;
        if (*(_QWORD *)(a1 + 16))
        {
          v7 = v26;
          v8 = sub_100187ED0(0x6E69616D6F64, 0xE600000000000000);
          if ((v9 & 1) != 0)
          {
            sub_100096CB0(*(_QWORD *)(a1 + 56) + 32 * v8, (uint64_t)v28);
            if ((swift_dynamicCast(&v26, v28, (char *)&type metadata for Any + 8, &type metadata for UInt, 6) & 1) != 0)
            {
              if (*(_QWORD *)(a1 + 16))
              {
                v10 = v26;
                v11 = sub_100187ED0(0x4E79616C70736964, 0xEB00000000656D61);
                if ((v12 & 1) != 0)
                {
                  sub_100096CB0(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)v28);
                  if ((swift_dynamicCast(&v26, v28, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
                  {
                    swift_bridgeObjectRelease(a1);
                    v13 = v26;
                    v14 = v27;
                    goto LABEL_18;
                  }
                }
              }
            }
          }
        }
        swift_bridgeObjectRelease(v6);
      }
    }
  }
  if (qword_100344580 != -1)
    swift_once(&qword_100344580, sub_100097D44);
  v15 = type metadata accessor for Logger(0);
  sub_10009673C(v15, (uint64_t)qword_1003453D8);
  swift_bridgeObjectRetain(a1);
  v17 = Logger.logObject.getter(v16);
  v19 = static os_log_type_t.error.getter(v17, v18);
  if (os_log_type_enabled(v17, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v28[0] = v21;
    *(_DWORD *)v20 = 136315138;
    swift_bridgeObjectRetain(a1);
    v23 = Dictionary.description.getter(v22, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v25 = v24;
    swift_bridgeObjectRelease(a1);
    v26 = sub_1001C56EC(v23, v25, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v17, v19, "Malformed dict %s when forming default app info", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v7 = 0;
  v6 = 0;
  v10 = 0;
  v13 = 0;
  v14 = 0;
LABEL_18:
  *a2 = v7;
  a2[1] = v6;
  a2[2] = v10;
  a2[3] = v13;
  a2[4] = v14;
}

uint64_t *sub_1000980F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100098138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = type metadata accessor for HPKE.AEAD(0);
  v0 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v1);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for HPKE.KDF(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HPKE.KEM(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for HPKE.Ciphersuite(0);
  sub_1000980F8(v14, qword_1003453F8);
  sub_10009673C(v14, (uint64_t)qword_1003453F8);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for HPKE.KEM.P256_HKDF_SHA256(_:), v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for HPKE.KDF.HKDF_SHA256(_:), v4);
  (*(void (**)(char *, _QWORD, uint64_t))(v0 + 104))(v3, enum case for HPKE.AEAD.AES_GCM_128(_:), v17);
  return HPKE.Ciphersuite.init(kem:kdf:aead:)(v13, v8, v3);
}

char *sub_1000982B4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (**v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  uint64_t inited;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  Swift::String v47;
  uint64_t v48;
  unint64_t v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  _QWORD v63[3];
  uint64_t v64;

  v56 = a1;
  v57 = a2;
  v6 = type metadata accessor for HPKE.Ciphersuite(0);
  v59 = *(_QWORD *)(v6 - 8);
  v60 = v6;
  __chkstk_darwin(v6, v7);
  v58 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for HPKE.Sender(0);
  v9 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55, v10);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v14 = *(void (***)(char *, char *, uint64_t))(v13 - 8);
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v51 - v20;
  v63[0] = a3;
  v63[1] = a4;
  sub_100063C8C(a3, a4);
  v22 = v64;
  P256.KeyAgreement.PublicKey.init<A>(x963Representation:)(v63, &type metadata for Data, &protocol witness table for Data);
  if (!v22)
  {
    v52 = a3;
    v64 = 0;
    v53 = v9;
    v54 = v21;
    v14[2](v18, v21, v13);
    if (qword_100344588 != -1)
      swift_once(&qword_100344588, sub_100098138);
    v23 = v60;
    v24 = sub_10009673C(v60, (uint64_t)qword_1003453F8);
    v25 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v24, v23);
    v26 = v12;
    v27 = v64;
    HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)(v18, v25, 0, 0xC000000000000000, v13, &protocol witness table for P256.KeyAgreement.PublicKey);
    v28 = v53;
    if (v27)
    {
      ((void (*)(char *, uint64_t))v14[1])(v54, v13);
    }
    else
    {
      v63[0] = v56;
      v63[1] = v57;
      v62 = xmmword_1002889A0;
      v29 = sub_10007EF0C();
      v30 = HPKE.Sender.seal<A, B>(_:authenticating:)(v63, &v62, &type metadata for Data, &type metadata for Data, v29, v29);
      v64 = 0;
      v59 = v32;
      v60 = v30;
      v33 = sub_100063D3C(&qword_1003460E0);
      inited = swift_initStackObject(v33, &v61);
      *(_OWORD *)(inited + 16) = xmmword_100288AB0;
      strcpy((char *)v63, "version");
      v63[1] = 0xE700000000000000;
      AnyHashable.init<A>(_:)(v63, &type metadata for String, &protocol witness table for String);
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(SESPrivacyEncryptionSchemeAppleHPKEv1);
      *(_QWORD *)(inited + 96) = &type metadata for String;
      *(_QWORD *)(inited + 72) = v35;
      *(_QWORD *)(inited + 80) = v36;
      strcpy((char *)v63, "publicKeyHash");
      HIWORD(v63[1]) = -4864;
      AnyHashable.init<A>(_:)(v63, &type metadata for String, &protocol witness table for String);
      sub_1001EDD38(v52, a4);
      v38 = v37;
      v39 = v26;
      v41 = v40;
      v42 = Data.base64EncodedString(options:)(0);
      v58 = (char *)v14;
      sub_100063CD0(v38, v41);
      *(_QWORD *)(inited + 168) = &type metadata for String;
      *(Swift::String *)(inited + 144) = v42;
      v63[0] = 0xD000000000000012;
      v63[1] = 0x80000001002BB220;
      v43 = AnyHashable.init<A>(_:)(v63, &type metadata for String, &protocol witness table for String);
      v44 = HPKE.Sender.encapsulatedKey.getter(v43);
      v46 = v45;
      v47 = Data.base64EncodedString(options:)(0);
      sub_100063CD0(v44, v46);
      *(_QWORD *)(inited + 240) = &type metadata for String;
      *(Swift::String *)(inited + 216) = v47;
      v63[0] = 1635017060;
      v63[1] = 0xE400000000000000;
      AnyHashable.init<A>(_:)(v63, &type metadata for String, &protocol witness table for String);
      v49 = v59;
      v48 = v60;
      v50 = Data.base64EncodedString(options:)(0);
      *(_QWORD *)(inited + 312) = &type metadata for String;
      *(Swift::String *)(inited + 288) = v50;
      v18 = (char *)sub_10017C368(inited);
      sub_100063CD0(v48, v49);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v39, v55);
      (*((void (**)(char *, uint64_t))v58 + 1))(v54, v13);
    }
  }
  return v18;
}

unint64_t sub_100098748(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  const char *v23;
  id v24;
  unint64_t v26;
  char *v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD v53[5];
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v50 = a2;
  v3 = type metadata accessor for HPKE.Ciphersuite(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for HPKE.Recipient(0);
  v48 = *(_QWORD *)(v13 - 8);
  v49 = v13;
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = 0xD000000000000012;
  v52 = 0x80000001002BB220;
  AnyHashable.init<A>(_:)(&v51, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v17 = sub_100187F3C((uint64_t)v53), (v18 & 1) != 0))
  {
    sub_100096CB0(*(_QWORD *)(a1 + 56) + 32 * v17, (uint64_t)&v54);
  }
  else
  {
    v54 = 0u;
    v55 = 0u;
  }
  sub_100098C48((uint64_t)v53);
  if (!*((_QWORD *)&v55 + 1))
  {
    sub_100098C7C((uint64_t)&v54);
    goto LABEL_10;
  }
  if ((swift_dynamicCast(&v51, &v54, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_10:
    v22 = sub_100098CBC();
    v23 = "Missing ephemeralPublicKey";
    goto LABEL_11;
  }
  v45 = v16;
  v19 = v52;
  v46 = Data.init(base64Encoded:options:)(v51, v52, 0);
  v21 = v20;
  swift_bridgeObjectRelease(v19);
  v47 = v21;
  if (v21 >> 60 != 15)
  {
    v51 = 1635017060;
    v52 = 0xE400000000000000;
    AnyHashable.init<A>(_:)(&v51, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(a1 + 16))
    {
      v26 = sub_100187F3C((uint64_t)v53);
      v27 = v45;
      if ((v28 & 1) != 0)
      {
        sub_100096CB0(*(_QWORD *)(a1 + 56) + 32 * v26, (uint64_t)&v54);
      }
      else
      {
        v54 = 0u;
        v55 = 0u;
      }
    }
    else
    {
      v54 = 0u;
      v55 = 0u;
      v27 = v45;
    }
    sub_100098C48((uint64_t)v53);
    if (*((_QWORD *)&v55 + 1))
    {
      if ((swift_dynamicCast(&v51, &v54, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        v29 = v52;
        v30 = Data.init(base64Encoded:options:)(v51, v52, 0);
        v31 = v29;
        v22 = v32;
        swift_bridgeObjectRelease(v31);
        if (v22 >> 60 != 15)
        {
          v45 = (char *)v30;
          (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v50, v8);
          if (qword_100344588 != -1)
            swift_once(&qword_100344588, sub_100098138);
          v37 = sub_10009673C(v3, (uint64_t)qword_1003453F8);
          (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v37, v3);
          v39 = v46;
          v38 = v47;
          sub_100063C8C(v46, v47);
          v40 = v56;
          HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:)(v12, v7, 0, 0xC000000000000000, v39, v38, v8, &protocol witness table for P256.KeyAgreement.PrivateKey);
          if (!v40)
          {
            v41 = (uint64_t)v45;
            v53[0] = v45;
            v53[1] = v22;
            v54 = xmmword_1002889A0;
            v43 = v22;
            v42 = sub_10007EF0C();
            v22 = HPKE.Recipient.open<A, B>(_:authenticating:)(v53, &v54, &type metadata for Data, &type metadata for Data, v42, v42);
            sub_10006B9B4(v39, v38);
            (*(void (**)(char *, uint64_t))(v48 + 8))(v27, v49);
            sub_10006B9B4(v41, v43);
            return v22;
          }
          sub_10006B9B4(v39, v38);
          v35 = (uint64_t)v45;
          v36 = v22;
          goto LABEL_25;
        }
        v22 = sub_100098CBC();
        v33 = 0x2064696C61766E49;
LABEL_24:
        v34 = sub_1001E2838(0, 1, v33, 0xEC00000061746164, 0);
        swift_willThrow(v34);
        v35 = v46;
        v36 = v47;
LABEL_25:
        sub_10006B9B4(v35, v36);
        return v22;
      }
    }
    else
    {
      sub_100098C7C((uint64_t)&v54);
    }
    v22 = sub_100098CBC();
    v33 = 0x20676E697373694DLL;
    goto LABEL_24;
  }
  v22 = sub_100098CBC();
  v23 = "Invalid ephemeralPublicKey";
LABEL_11:
  v24 = sub_1001E2838(0, 1, 0xD00000000000001ALL, (unint64_t)(v23 - 32) | 0x8000000000000000, 0);
  swift_willThrow(v24);
  return v22;
}

uint64_t sub_100098C48(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_100098C7C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100063D3C((uint64_t *)&unk_100346130);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100098CBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003469E0;
  if (!qword_1003469E0)
  {
    v1 = objc_opt_self(NSError);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1003469E0);
  }
  return result;
}

uint64_t sub_100098CF8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  NSObject *v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v19;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (_QWORD *)((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced13EventListener_queue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.notOnQueue(_:), v3);
  v9 = v8;
  v10 = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v12 = swift_allocObject(&unk_100307B70, 32, 7);
  *(_QWORD *)(v12 + 16) = v1;
  *(_QWORD *)(v12 + 24) = a1;
  v13 = swift_allocObject(&unk_100307B98, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_1000997C4;
  *(_QWORD *)(v13 + 24) = v12;
  aBlock[4] = sub_1000997DC;
  v19 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10016DF1C;
  aBlock[3] = &unk_100307BB0;
  v14 = _Block_copy(aBlock);
  v15 = v19;
  swift_retain(v1);
  v16 = a1;
  swift_retain(v13);
  swift_release(v15);
  dispatch_sync(v9, v14);
  _Block_release(v14);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v13, "", 106, 78, 25, 1);
  swift_release(v12);
  result = swift_release(v13);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_100098EB8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  char **v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  void *v33;

  v3 = a2;
  v4 = Logger.logObject.getter(v3);
  v8 = static os_log_type_t.info.getter(v4, v5, v6, v7);
  v9 = &selRef_defaultCenter;
  if (os_log_type_enabled(v4, v8))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v30 = v11;
    *(_DWORD *)v10 = 136315138;
    v12 = objc_msgSend(v3, "name");
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    v9 = &selRef_defaultCenter;
    v28 = sub_1001C56EC(v13, v15, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v10 + 4, v10 + 12);

    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v4, v8, "Received notification %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {

  }
  v16 = objc_msgSend(v3, v9[394]);
  swift_beginAccess(a1 + 16, &v30, 32, 0);
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v17 + 16) && (v18 = sub_10018802C((uint64_t)v16), (v19 & 1) != 0))
  {
    v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
    swift_endAccess(&v30);
    swift_bridgeObjectRetain(v20);

    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      swift_bridgeObjectRetain(v20);
      v22 = (void **)(v20 + 64);
      do
      {
        v23 = (uint64_t)*(v22 - 1);
        v24 = *v22;
        v30 = (uint64_t)*(v22 - 4);
        v31 = *(_OWORD *)(v22 - 3);
        v32 = v23;
        v33 = v24;
        v25 = v31;
        swift_bridgeObjectRetain(v31);
        swift_retain(v23);
        v26 = v24;
        sub_10009914C((uint64_t)&v30);

        swift_release(v23);
        swift_bridgeObjectRelease(v25);
        v22 += 5;
        --v21;
      }
      while (v21);
      return swift_bridgeObjectRelease_n(v20, 2);
    }
    else
    {
      return swift_bridgeObjectRelease(v20);
    }
  }
  else
  {

    return swift_endAccess(&v30);
  }
}

uint64_t sub_10009914C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  void *v24;
  id v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t aBlock[5];
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v41 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  v40 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  __chkstk_darwin(v6, v7);
  v37 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 24);
  v10 = *(void **)(a1 + 32);
  v36 = *(_OWORD *)(a1 + 8);
  v12 = v36;
  swift_bridgeObjectRetain_n(v36, 2);
  swift_retain_n(v11, 2);
  v13 = v10;
  v14 = Logger.logObject.getter(v13);
  v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
  if (os_log_type_enabled(v14, v18))
  {
    v33 = v3;
    v19 = swift_slowAlloc(12, -1);
    v35 = v9;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    aBlock[0] = v21;
    v34 = v1;
    *(_DWORD *)v20 = 136315138;
    swift_bridgeObjectRetain(v12);
    v44 = (_QWORD *)sub_1001C56EC(v35, v12, aBlock);
    v3 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v20 + 4, v20 + 12);

    swift_release_n(v11, 2);
    swift_bridgeObjectRelease_n(v12, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, v18, "Calling handler for %s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    v22 = v20;
    v9 = v35;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {

    swift_release_n(v11, 2);
    swift_bridgeObjectRelease_n(v12, 2);
  }

  v23 = swift_allocObject(&unk_100307BE8, 56, 7);
  *(_QWORD *)(v23 + 16) = v9;
  *(_OWORD *)(v23 + 24) = v36;
  *(_QWORD *)(v23 + 40) = v11;
  *(_QWORD *)(v23 + 48) = v13;
  aBlock[4] = (uint64_t)sub_100099830;
  v43 = v23;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100071C98;
  aBlock[3] = (uint64_t)&unk_100307C00;
  v24 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(v12);
  swift_retain(v11);
  v25 = v13;
  v26 = v37;
  static DispatchQoS.unspecified.getter(v25);
  v44 = _swiftEmptyArrayStorage;
  v27 = sub_100099850();
  v28 = sub_100063D3C((uint64_t *)&unk_100346200);
  v29 = sub_100063D7C();
  v30 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v44, v28, v29, v3, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v26, v30, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v30, v3);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v26, v39);
  return swift_release(v43);
}

uint64_t sub_100099504()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[2]);
  v1 = (char *)v0 + OBJC_IVAR____TtC10seserviced13EventListener_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10009956C()
{
  return type metadata accessor for EventListener(0);
}

uint64_t type metadata accessor for EventListener(uint64_t a1)
{
  uint64_t result;

  result = qword_100345448;
  if (!qword_100345448)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EventListener);
  return result;
}

uint64_t sub_1000995B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void destroy for EventListener.Handler(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 24));

}

uint64_t initializeWithCopy for EventListener.Handler(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  v6 = v5;
  return a1;
}

_QWORD *assignWithCopy for EventListener.Handler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = (void *)a2[4];
  v9 = (void *)a1[4];
  a1[4] = v8;
  v10 = v8;

  return a1;
}

_QWORD *assignWithTake for EventListener.Handler(_QWORD *a1, uint64_t a2)
{
  void *v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_release(a1[3]);
  v4 = (void *)a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for EventListener.Handler()
{
  return &type metadata for EventListener.Handler;
}

uint64_t sub_100099798()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000997C4()
{
  uint64_t v0;

  return sub_100098EB8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000997CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000997DC()
{
  uint64_t v0;

  return sub_10016DEFC(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000997E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000997F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000997FC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100099830()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

unint64_t sub_100099850()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100344A20;
  if (!qword_100344A20)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100344A20);
  }
  return result;
}

uint64_t type metadata accessor for SignificantDigits()
{
  return objc_opt_self(_TtC10seserviced17SignificantDigits);
}

void sub_100099908(unsigned int a1, unsigned int a2)
{
  float v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  double v8;

  if (a1 <= 0xA && a2)
  {
    v4 = log10f((float)a2);
    if ((~LODWORD(v4) & 0x7F800000) != 0)
    {
      if (v4 > -1.0)
      {
        if (v4 < 4295000000.0)
        {
          v5 = v4 + 1;
          if (v4 != -1)
          {
            v6 = v5 >= a1;
            v7 = v5 - a1;
            if (v7 == 0 || !v6)
              return;
            v8 = __exp10((double)v7);
            if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) != 0)
            {
              if (v8 > -1.0)
              {
                if (v8 < 4294967300.0)
                {
                  if (v8)
                  {
                    if (a2 >= a2 % v8)
                      return;
LABEL_23:
                    __break(1u);
                    return;
                  }
LABEL_22:
                  __break(1u);
                  goto LABEL_23;
                }
LABEL_21:
                __break(1u);
                goto LABEL_22;
              }
LABEL_20:
              __break(1u);
              goto LABEL_21;
            }
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
}

uint64_t sub_1000999F4(uint64_t a1)
{
  _QWORD v2[4];

  v2[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[1] = &unk_100289058;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0, 4, v2, a1 + 96);
}

BOOL static UUID.UTF8DataStringCase.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void UUID.UTF8DataStringCase.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int UUID.UTF8DataStringCase.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL sub_100099AC8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static UUID.UTF8DataStringCase.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100099AD4()
{
  char *v0;

  return UUID.UTF8DataStringCase.hashValue.getter(*v0);
}

void sub_100099ADC(uint64_t a1)
{
  char *v1;

  UUID.UTF8DataStringCase.hash(into:)(a1, *v1);
}

Swift::Int sub_100099AE4()
{
  char *v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  UUID.UTF8DataStringCase.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

_QWORD *sub_100099B20()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  return v0;
}

uint64_t sub_100099B4C()
{
  uint64_t v0;

  sub_100099B20();
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for Store(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100099EA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Store);
}

uint64_t sub_100099B78(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = "\b";
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + 88);
}

BOOL sub_100099BC4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

void sub_100099BD8()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100099C00()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for DelegateWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100099EA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DelegateWrapper);
}

uint64_t sub_100099C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t getEnumTagSinglePayload for LyonTimeExtension.MessageDirection(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_100099CD0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100099D1C + 4 * byte_10028901D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100099D50 + 4 * asc_100289018[v4]))();
}

uint64_t sub_100099D50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100099D58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100099D60);
  return result;
}

uint64_t sub_100099D6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100099D74);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100099D78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100099D80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100099D8C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

uint64_t type metadata accessor for Store.StoreType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100099EA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Store.StoreType);
}

uint64_t sub_100099DA4(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100289160, a1);
}

Swift::Int sub_100099DB4()
{
  uint64_t v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
  return Hasher._finalize()();
}

Swift::Int sub_100099DF4()
{
  return sub_100099DB4();
}

void sub_100099E14()
{
  sub_100099BD8();
}

Swift::Int sub_100099E34()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100099BD8();
  return Hasher._finalize()();
}

BOOL sub_100099E70(uint64_t *a1, uint64_t *a2)
{
  return sub_100099BC4(*a1, *a2);
}

uint64_t sub_100099E90(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100289188, a1);
}

uint64_t sub_100099EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_100099ECC()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for AlishaExpress(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_100099F08();
  qword_100354BA8 = result;
  return result;
}

uint64_t sub_100099F08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD aBlock[5];
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v0 + 16) = 0;
  v7 = String.init(cString:)(SESLoggingSubsystem);
  Logger.init(subsystem:category:)(v7);
  sub_100071AEC();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v8 = (void *)static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  aBlock[4] = sub_10009BF04;
  v13 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_100307E50;
  v9 = _Block_copy(aBlock);
  v10 = v13;
  swift_retain(v1);
  swift_release(v10);
  os_state_add_handler(v8, v9);
  _Block_release(v9);

  return v1;
}

_DWORD *sub_10009A074()
{
  uint64_t v0;
  char v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  Class isa;
  _DWORD *v5;
  _OWORD v7[2];
  __int128 v8;
  void *v9;

  v1 = *(_BYTE *)(v0 + 16);
  v9 = &type metadata for Bool;
  LOBYTE(v8) = v1;
  sub_10006C2B4(&v8, v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v7, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v3 = sub_10017D088((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  v5 = sub_100015734((uint64_t)"alishaexpress.state", (uint64_t)isa);

  return v5;
}

void sub_10009A15C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD v26[5];

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (_QWORD *)((char *)&v26[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once(&qword_100344608, sub_100141A78);
LABEL_11:
    v26[3] = v2;
    v26[4] = &off_100307E40;
    v26[0] = v1;
    swift_retain(v1);
    v21 = sub_1000E848C(0xD00000000000001ALL, 0x80000001002BB350);
    if (v22 >> 60 == 15)
    {
      __break(1u);
      swift_unexpectedError(v7, "seserviced/AlishaExpress.swift", 30, 1, 38);
      __break(1u);
    }
    else
    {
      v23 = v21;
      v24 = v22;
      sub_100141854((uint64_t)v26, v21, v22);
      sub_10006B9B4(v23, v24);
      sub_10006BA9C(v26);
    }
    return;
  }
  v11 = *((_BYTE *)v1 + 16);
  v12 = Logger.logObject.getter(v10);
  v16 = v12;
  if ((v11 & 1) == 0)
  {
    v19 = static os_log_type_t.info.getter(v12, v13, v14, v15);
    v7 = (_QWORD *)v19;
    if (os_log_type_enabled(v16, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v7, "Starting AlishaExpress", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    *((_BYTE *)v1 + 16) = 1;
    if (qword_100344608 == -1)
      goto LABEL_11;
    goto LABEL_14;
  }
  v17 = static os_log_type_t.error.getter(v12, v13);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "AlishaExpress is already running", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

}

void sub_10009A3FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  id v10;
  uint64_t (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  os_log_type_t v28;
  uint8_t *v29;
  _BYTE v31[24];
  _OWORD v32[2];
  uint64_t v33;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v3 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v10 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8);
  v12 = v11(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once(&qword_100344608, sub_100141A78);
    goto LABEL_8;
  }
  v13 = *(unsigned __int8 *)(v1 + 16);
  v14 = Logger.logObject.getter(v12);
  v18 = v14;
  if (v13 != 1)
  {
    v28 = static os_log_type_t.error.getter(v14, v15);
    if (os_log_type_enabled(v18, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v28, "AlishaExpress is not running", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    return;
  }
  v19 = static os_log_type_t.info.getter(v14, v15, v16, v17);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Stopping AlishaExpress", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  if (qword_100344608 != -1)
    goto LABEL_15;
LABEL_8:
  v21 = qword_100354CE0;
  v22 = sub_1000E848C(0xD00000000000001ALL, 0x80000001002BB350);
  if (v23 >> 60 != 15)
  {
    v24 = v22;
    v25 = v23;
    v26 = qword_100354EE8;
    *v6 = qword_100354EE8;
    v9(v6, v8, v2);
    v27 = (id)v26;
    LOBYTE(v26) = _dispatchPreconditionTest(_:)(v6);
    v11(v6, v2);
    if ((v26 & 1) != 0)
    {
      v33 = 0;
      memset(v32, 0, sizeof(v32));
      swift_beginAccess(v21 + OBJC_IVAR____TtC10seserviced10DSKExpress_delegates, v31, 33, 0);
      sub_100063C8C(v24, v25);
      sub_10017C140((uint64_t)v32, v24, v25);
      swift_endAccess(v31);
      sub_10006B9B4(v24, v25);
      *(_BYTE *)(v1 + 16) = 0;
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10009A6E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10seserviced13AlishaExpress_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10009A734()
{
  return type metadata accessor for AlishaExpress(0);
}

uint64_t type metadata accessor for AlishaExpress(uint64_t a1)
{
  uint64_t result;

  result = qword_1003456B8;
  if (!qword_1003456B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AlishaExpress);
  return result;
}

uint64_t sub_10009A778(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100289210;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_10009A7F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  void (*v11)(_QWORD *, os_unfair_lock_s *, uint64_t);
  id v12;
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  os_unfair_lock_s *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_unfair_lock_s *v39;
  os_unfair_lock_s *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  id v48;
  os_unfair_lock_s *v49;
  uint64_t v50;
  __int128 *v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_QWORD *, os_unfair_lock_s *, uint64_t);
  void (*v58)(_QWORD *, uint64_t);
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  v10 = enum case for DispatchPredicate.onQueue(_:);
  v11 = *(void (**)(_QWORD *, os_unfair_lock_s *, uint64_t))(v5 + 104);
  v11(v8, (os_unfair_lock_s *)enum case for DispatchPredicate.onQueue(_:), v4);
  v12 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v13 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v13(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_36:
    v29 = swift_once(&qword_1003447A0, sub_1001EDCA4);
LABEL_10:
    __chkstk_darwin(v29, v30);
    v31 = (uint64_t)(&v54 - 6);
    *(&v54 - 4) = (uint64_t)sub_10009B494;
    *(&v54 - 3) = 0;
    *(&v54 - 2) = v32;
    v34 = v33 + 4;
    os_unfair_lock_lock(v33 + 4);
    sub_10009BE8C(&v63);
    v35 = v63;
    os_unfair_lock_unlock(v34);
    swift_retain(a1);
    sub_10009BBB4(v35, a1);
    swift_bridgeObjectRelease(v35);
    v36 = swift_release(a1);
    if (*(_BYTE *)(a1 + 16) == 1)
    {
      __chkstk_darwin(v36, v37);
      *(&v54 - 4) = (uint64_t)sub_10009B4B4;
      *(&v54 - 3) = 0;
      *(&v54 - 2) = v38;
      v40 = v39 + 4;
      os_unfair_lock_lock(v39 + 4);
      sub_10009BE8C(&v63);
      v31 = v63;
      os_unfair_lock_unlock(v40);
      if ((v31 & 0xC000000000000001) != 0)
      {
        if (v31 < 0)
          v41 = v31;
        else
          v41 = v31 & 0xFFFFFFFFFFFFFF8;
        v42 = __CocoaSet.count.getter(v41);
        goto LABEL_24;
      }
    }
    else
    {
      if (qword_100344560 != -1)
        swift_once(&qword_100344560, sub_10006C2DC);
      v47 = qword_100354EE8;
      *v8 = qword_100354EE8;
      v57(v8, (os_unfair_lock_s *)v60, v4);
      v48 = (id)v47;
      LOBYTE(v47) = _dispatchPreconditionTest(_:)(v8);
      v58(v8, v4);
      if ((v47 & 1) != 0)
      {
LABEL_31:
        if (qword_1003447D0 != -1)
          swift_once(&qword_1003447D0, sub_1001F8C40);
        sub_1001F8820(0);
        return;
      }
      __break(1u);
    }
    v42 = *(_QWORD *)(v31 + 16);
LABEL_24:
    v49 = (os_unfair_lock_s *)v60;
    if (v42)
    {
      v50 = sub_10009B120(v31);
      swift_bridgeObjectRelease(v31);
      if (qword_100344560 != -1)
        swift_once(&qword_100344560, sub_10006C2DC);
      v51 = (__int128 *)sub_100145A34(v50);
      swift_bridgeObjectRelease(v50);
      sub_10006C3F8(v51);
      swift_bridgeObjectRelease(v51);
      return;
    }
    swift_bridgeObjectRelease(v31);
    if (qword_100344560 != -1)
      swift_once(&qword_100344560, sub_10006C2DC);
    v52 = qword_100354EE8;
    *v8 = qword_100354EE8;
    v57(v8, v49, v4);
    v53 = (id)v52;
    LOBYTE(v52) = _dispatchPreconditionTest(_:)(v8);
    v58(v8, v4);
    if ((v52 & 1) == 0)
    {
      __break(1u);
      os_unfair_lock_unlock(v49);
      __break(1u);
      return;
    }
    goto LABEL_31;
  }
  if ((sub_1000EB09C((uint64_t)sub_10009ADC0, 0) & 1) == 0)
    return;
  v14 = v2 + OBJC_IVAR____TtC10seserviced13AlishaExpress_logger;
  v15 = swift_retain_n(a1, 2);
  v59 = v14;
  v16 = Logger.logObject.getter(v15);
  v20 = static os_log_type_t.info.getter(v16, v17, v18, v19);
  v21 = os_log_type_enabled(v16, v20);
  v57 = v11;
  v58 = v13;
  v60 = v10;
  if (v21)
  {
    v22 = swift_slowAlloc(12, -1);
    v55 = v2;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(32, -1);
    v63 = v24;
    v56 = v4;
    *(_DWORD *)v23 = 136315138;
    swift_retain(a1);
    v25 = sub_1001443D0();
    v27 = v26;
    swift_release(a1);
    v61 = sub_1001C56EC(v25, v27, &v63);
    v4 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v23 + 4, v23 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v16, v20, "%s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    v28 = v23;
    v2 = v55;
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

  if (*(_BYTE *)(v2 + 16) == 1)
  {
    if (qword_1003447A0 == -1)
      goto LABEL_10;
    goto LABEL_36;
  }
  v43 = Logger.logObject.getter(v29);
  v45 = static os_log_type_t.error.getter(v43, v44);
  if (os_log_type_enabled(v43, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v45, "Not running", v46, 2u);
    swift_slowDealloc(v46, -1, -1);
  }

}

BOOL sub_10009ADC0(void *a1)
{
  return objc_msgSend(a1, "endPointType") == (id)1;
}

void sub_10009ADE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  v4 = *a1;
  v5 = OBJC_IVAR____TtC10seserviced4Peer_expressState;
  v6 = *(unsigned __int8 *)(*a1 + OBJC_IVAR____TtC10seserviced4Peer_expressState);
  v7 = *(_QWORD *)(a2 + 24);
  swift_retain(*a1);
  v8 = swift_bridgeObjectRetain(v7);
  v9 = sub_10009B520(v8, v4);
  swift_bridgeObjectRelease(v7);
  swift_release(v4);
  if ((v9 & 1) != 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 16);
    *(_BYTE *)(v4 + v5) = v10;
    if (v10 == 1)
    {
      if (v6 != 1 && *(_BYTE *)(v4 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) == 1)
      {
        if (qword_100344680 != -1)
          swift_once(&qword_100344680, sub_10016E9A8);
        v11 = sub_10007C66C((uint64_t)&off_100305300);
        v13 = v12;
        sub_100176C18(3, 17, v11, v12);
        v15 = v14;
        v17 = v16;
        sub_100063CD0(v11, v13);
        if (qword_1003445A0 != -1)
          swift_once(&qword_1003445A0, sub_1000B26B0);
        sub_1000ADCAC(v15, v17, v4);
        if (v2)
          swift_errorRelease(v2);
        if (*(_BYTE *)(v4 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) == 2)
        {
          v18 = sub_1000B2084(v4);
          if (v18 != 2 && (v18 & 1) == 0)
          {
            if (qword_1003446C0 != -1)
              swift_once(&qword_1003446C0, sub_10019CC14);
            sub_10019B2F8(v4);
            if (qword_1003446C8 != -1)
              swift_once(&qword_1003446C8, sub_1001A0A18);
            sub_10019F204(0, v4);
          }
        }
        sub_100063CD0(v15, v17);
      }
      return;
    }
  }
  else
  {
    *(_BYTE *)(v4 + v5) = 0;
  }
  if (v6 == 1 && *(_BYTE *)(v4 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) == 1)
  {
    if (qword_100344690 != -1)
      swift_once(&qword_100344690, sub_100182BE4);
    v19 = qword_100354D70;
    swift_retain(v4);
    v20 = sub_100196F9C(v19, v4);
    swift_release(v4);
    v21 = (void *)sub_10009F62C(v20);
    swift_bridgeObjectRelease(v20);
    if (v21)
    {
      sub_100184CD0();
      sub_100184BA0();

    }
  }
}

BOOL sub_10009B0D0(uint64_t a1)
{
  return !*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_type)
      && *(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_expressState) == 1
      && *(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) == 2;
}

uint64_t sub_10009B120(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  uint64_t v34;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for Peer(0);
    v5 = sub_10009BEBC();
    result = (uint64_t)Set.Iterator.init(_cocoa:)(v33, v3, v4, v5);
    v1 = v33[0];
    v31 = v33[1];
    v7 = v33[2];
    v8 = v33[3];
    v9 = v33[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v31 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v29 = _swiftEmptyArrayStorage;
  v30 = (unint64_t)(v7 + 64) >> 6;
LABEL_11:
  v13 = v8;
  v14 = v9;
  while (1)
  {
    if (v1 < 0)
    {
      v21 = __CocoaSet.Iterator.next()(result);
      if (!v21)
        goto LABEL_42;
      v22 = v21;
      v32 = v21;
      v23 = type metadata accessor for Peer(0);
      swift_unknownObjectRetain(v22);
      swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
      v16 = v34;
      swift_unknownObjectRelease(v22);
      v8 = v13;
      v9 = v14;
      if (!v16)
        goto LABEL_42;
      goto LABEL_14;
    }
    if (!v14)
      break;
    v9 = (v14 - 1) & v14;
    v15 = __clz(__rbit64(v14)) | (v13 << 6);
    v8 = v13;
LABEL_13:
    v16 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    swift_retain(v16);
    if (!v16)
      goto LABEL_42;
LABEL_14:
    v17 = *(_QWORD *)(v16 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    v18 = *(_QWORD *)(v16 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    sub_10006BA34(v17, v18);
    result = swift_release(v16);
    v13 = v8;
    v14 = v9;
    if (v18 >> 60 != 15)
    {
      v25 = v29;
      result = swift_isUniquelyReferenced_nonNull_native(v29);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1001C4254(0, v29[2] + 1, 1, v29);
        v25 = (_QWORD *)result;
      }
      v27 = v25[2];
      v26 = v25[3];
      if (v27 >= v26 >> 1)
      {
        result = (uint64_t)sub_1001C4254((_QWORD *)(v26 > 1), v27 + 1, 1, v25);
        v25 = (_QWORD *)result;
      }
      v25[2] = v27 + 1;
      v29 = v25;
      v28 = &v25[2 * v27];
      v28[4] = v17;
      v28[5] = v18;
      goto LABEL_11;
    }
  }
  v8 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v8 >= v30)
      goto LABEL_42;
    v19 = *(_QWORD *)(v31 + 8 * v8);
    if (!v19)
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v30)
        goto LABEL_42;
      v19 = *(_QWORD *)(v31 + 8 * v20);
      if (v19)
        goto LABEL_26;
      v20 = v13 + 3;
      if (v13 + 3 >= v30)
        goto LABEL_42;
      v19 = *(_QWORD *)(v31 + 8 * v20);
      if (v19)
        goto LABEL_26;
      v20 = v13 + 4;
      if (v13 + 4 >= v30)
        goto LABEL_42;
      v19 = *(_QWORD *)(v31 + 8 * v20);
      if (v19)
      {
LABEL_26:
        v8 = v20;
      }
      else
      {
        v8 = v13 + 5;
        if (v13 + 5 >= v30)
          goto LABEL_42;
        v19 = *(_QWORD *)(v31 + 8 * v8);
        if (!v19)
        {
          v24 = v13 + 6;
          while (v30 != v24)
          {
            v19 = *(_QWORD *)(v31 + 8 * v24++);
            if (v19)
            {
              v8 = v24 - 1;
              goto LABEL_27;
            }
          }
LABEL_42:
          sub_10007EF58(v1);
          return (uint64_t)v29;
        }
      }
    }
LABEL_27:
    v9 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v8 << 6);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void sub_10009B474(uint64_t a1)
{
  sub_10009A7F0(a1);
}

BOOL sub_10009B494(_QWORD *a1)
{
  return *(_BYTE *)(*a1 + OBJC_IVAR____TtC10seserviced4Peer_type) == 0;
}

BOOL sub_10009B4B4(uint64_t *a1)
{
  return sub_10009B0D0(*a1);
}

uint64_t sub_10009B4BC@<X0>(uint64_t (*a1)(_QWORD *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = sub_1001643BC(a1, a2, a3);
  if (!v4)
    *a4 = result;
  return result;
}

_QWORD *sub_10009B4E4@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_10009B520(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v19;
  uint64_t *v20;

  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v20 = (uint64_t *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  v19 = (unint64_t)(v4 + 63) >> 6;
  v7 = 0;
  swift_bridgeObjectRetain(a1);
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
      JUMPOUT(0x10009BB10);
    }
    if (v7 >= v19)
      goto LABEL_26;
    v11 = *(_QWORD *)(v3 + 8 * v7);
    if (!v11)
      break;
LABEL_19:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_20:
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v14 = *v13;
    v15 = v13[1];
    v17 = *v20;
    v16 = v20[1];
    if (v16 >> 60 != 15)
      __asm { BR              X10 }
    sub_100063C8C(v14, v15);
    sub_10006B9B4(v14, v15);
    sub_10006B9B4(v17, v16);
  }
  v12 = v7 + 1;
  if (v7 + 1 >= v19)
    goto LABEL_26;
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
    goto LABEL_18;
  v12 = v7 + 2;
  if (v7 + 2 >= v19)
    goto LABEL_26;
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
    goto LABEL_18;
  v12 = v7 + 3;
  if (v7 + 3 >= v19)
    goto LABEL_26;
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
    goto LABEL_18;
  v12 = v7 + 4;
  if (v7 + 4 >= v19)
    goto LABEL_26;
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
LABEL_18:
    v7 = v12;
    goto LABEL_19;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      JUMPOUT(0x10009BB2CLL);
    }
    if (v7 >= v19)
      break;
    v11 = *(_QWORD *)(v3 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_19;
  }
LABEL_26:
  swift_release(a1);
  return 0;
}

_QWORD *sub_10009BBB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *result;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];
  uint64_t v33;

  v3 = v2;
  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = type metadata accessor for Peer(0);
    v9 = sub_10009BEBC();
    result = Set.Iterator.init(_cocoa:)(v32, v7, v8, v9);
    v5 = v32[0];
    v30 = v32[1];
    v11 = v32[2];
    v12 = v32[3];
    v13 = v32[4];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v30 = a1 + 56;
    v15 = ~v14;
    v16 = -v14;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v13 = v17 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v11 = v15;
    v12 = 0;
  }
  v29 = (unint64_t)(v11 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v18 = __CocoaSet.Iterator.next()(result);
  if (v18)
  {
    v19 = v18;
    v31 = v18;
    v20 = type metadata accessor for Peer(0);
    swift_unknownObjectRetain(v19);
    swift_dynamicCast(&v33, &v31, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
    v21 = v33;
    swift_unknownObjectRelease(v19);
    v22 = v12;
    v23 = v13;
    while (v21)
    {
      v33 = v21;
      sub_10009ADE4(&v33, a2);
      result = (_QWORD *)swift_release(v21);
      if (v3)
      {
        v28 = v5;
        return (_QWORD *)sub_10007EF58(v28);
      }
      v12 = v22;
      v13 = v23;
      if (v5 < 0)
        goto LABEL_11;
LABEL_14:
      if (v13)
      {
        v23 = (v13 - 1) & v13;
        v24 = __clz(__rbit64(v13)) | (v12 << 6);
        v22 = v12;
      }
      else
      {
        v22 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
          return result;
        }
        if (v22 >= v29)
          break;
        v25 = *(_QWORD *)(v30 + 8 * v22);
        if (!v25)
        {
          v26 = v12 + 2;
          if (v12 + 2 >= v29)
            break;
          v25 = *(_QWORD *)(v30 + 8 * v26);
          if (v25)
            goto LABEL_25;
          v26 = v12 + 3;
          if (v12 + 3 >= v29)
            break;
          v25 = *(_QWORD *)(v30 + 8 * v26);
          if (v25)
            goto LABEL_25;
          v26 = v12 + 4;
          if (v12 + 4 >= v29)
            break;
          v25 = *(_QWORD *)(v30 + 8 * v26);
          if (v25)
          {
LABEL_25:
            v22 = v26;
          }
          else
          {
            v22 = v12 + 5;
            if (v12 + 5 >= v29)
              break;
            v25 = *(_QWORD *)(v30 + 8 * v22);
            if (!v25)
            {
              v27 = v12 + 6;
              while (v29 != v27)
              {
                v25 = *(_QWORD *)(v30 + 8 * v27++);
                if (v25)
                {
                  v22 = v27 - 1;
                  goto LABEL_26;
                }
              }
              break;
            }
          }
        }
LABEL_26:
        v23 = (v25 - 1) & v25;
        v24 = __clz(__rbit64(v25)) + (v22 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v24);
      swift_retain(v21);
    }
  }
  v28 = v5;
  return (_QWORD *)sub_10007EF58(v28);
}

uint64_t sub_10009BE8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = sub_1001643BC(*(uint64_t (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  if (!v2)
    *a1 = result;
  return result;
}

unint64_t sub_10009BEBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100347720;
  if (!qword_100347720)
  {
    v1 = type metadata accessor for Peer(255);
    result = swift_getWitnessTable(&unk_10028BFA8, v1);
    atomic_store(result, (unint64_t *)&qword_100347720);
  }
  return result;
}

uint64_t sub_10009BF08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10009BF18(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10009BF20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  Swift::Int v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once(&qword_100344690, sub_100182BE4);
LABEL_8:
    v18 = sub_10017FEE0(qword_100354D70);
    v19 = sub_10009FEA4((uint64_t)v18);
    swift_bridgeObjectRelease(v18);
    if (v19)
    {
      sub_10009C160(v19);
      swift_bridgeObjectRelease(v19);
    }
    sub_100180268(1uLL);
    *(_BYTE *)(v1 + 16) = 0;
    return;
  }
  v10 = *(unsigned __int8 *)(v1 + 16);
  v11 = Logger.logObject.getter(v9);
  v15 = v11;
  if (v10 == 1)
  {
    v16 = static os_log_type_t.info.getter(v11, v12, v13, v14);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Stopping LyonUWB", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    if (qword_100344690 == -1)
      goto LABEL_8;
    goto LABEL_15;
  }
  v20 = static os_log_type_t.error.getter(v11, v12);
  if (os_log_type_enabled(v15, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v20, "LyonUWB is not running", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

}

void sub_10009C160(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  __objc2_class **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];
  _BYTE *v47;

  v2 = type metadata accessor for DispatchPredicate(0);
  v44 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  v5 = (uint64_t *)((char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = type metadata accessor for UWBLyonSession();
    v9 = sub_1000639EC(&qword_100345818, (uint64_t (*)(uint64_t))type metadata accessor for UWBLyonSession, (uint64_t)&protocol conformance descriptor for NSObject);
    v10 = Set.Iterator.init(_cocoa:)(v46, v7, v8, v9);
    a1 = v46[0];
    v42 = v46[1];
    v11 = v46[2];
    v12 = v46[3];
    v13 = v46[4];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 56);
    v42 = a1 + 56;
    v16 = ~v14;
    v17 = -v14;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v13 = v18 & v15;
    v10 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v11 = v16;
    v12 = 0;
  }
  v38 = v11;
  v40 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v41 = (unint64_t)(v11 + 64) >> 6;
  v43 = enum case for DispatchPredicate.onQueue(_:);
  v39 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    if (a1 < 0)
    {
      v23 = __CocoaSet.Iterator.next()(v10);
      if (!v23)
        goto LABEL_47;
      v24 = v23;
      v45 = v23;
      v25 = type metadata accessor for UWBLyonSession();
      swift_unknownObjectRetain(v24);
      swift_dynamicCast(&v47, &v45, v39, v25, 7);
      v26 = v47;
      swift_unknownObjectRelease(v24);
      v22 = v12;
      v20 = v13;
      if (!v26)
        goto LABEL_47;
    }
    else
    {
      if (v13)
      {
        v20 = (v13 - 1) & v13;
        v21 = __clz(__rbit64(v13)) | (v12 << 6);
        v22 = v12;
      }
      else
      {
        v27 = v12 + 1;
        if (__OFADD__(v12, 1))
          goto LABEL_49;
        if (v27 >= v41)
          goto LABEL_47;
        v28 = *(_QWORD *)(v42 + 8 * v27);
        v22 = v12 + 1;
        if (!v28)
        {
          v22 = v12 + 2;
          if (v12 + 2 >= v41)
            goto LABEL_47;
          v28 = *(_QWORD *)(v42 + 8 * v22);
          if (!v28)
          {
            v22 = v12 + 3;
            if (v12 + 3 >= v41)
              goto LABEL_47;
            v28 = *(_QWORD *)(v42 + 8 * v22);
            if (!v28)
            {
              v22 = v12 + 4;
              if (v12 + 4 >= v41)
                goto LABEL_47;
              v28 = *(_QWORD *)(v42 + 8 * v22);
              if (!v28)
              {
                v22 = v12 + 5;
                if (v12 + 5 >= v41)
                  goto LABEL_47;
                v28 = *(_QWORD *)(v42 + 8 * v22);
                if (!v28)
                {
                  v29 = v12 + 6;
                  while (v41 != v29)
                  {
                    v28 = *(_QWORD *)(v42 + 8 * v29++);
                    if (v28)
                    {
                      v22 = v29 - 1;
                      goto LABEL_34;
                    }
                  }
LABEL_47:
                  sub_10007EF58(a1);
                  return;
                }
              }
            }
          }
        }
LABEL_34:
        v20 = (v28 - 1) & v28;
        v21 = __clz(__rbit64(v28)) + (v22 << 6);
      }
      v26 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v21);
      if (!v26)
        goto LABEL_47;
    }
    v30 = *(__objc2_class ***)&v26[OBJC_IVAR____TtC10seserviced10UWBSession_peer];
    if (*v30 == _TtC10seserviced8LyonPeer
      && (*((_BYTE *)v30 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4) & 1) == 0)
    {
      v31 = *(unsigned int *)((char *)v30 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID);
      swift_retain(*(_QWORD *)&v26[OBJC_IVAR____TtC10seserviced10UWBSession_peer]);
      sub_100180FBC(v31, 107);
      swift_release(v30);
    }
    if (qword_1003447B8 != -1)
      swift_once(&qword_1003447B8, sub_1001EEFA4);
    v32 = qword_100354EE8;
    *v5 = qword_100354EE8;
    v33 = v44;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v44 + 104))(v5, v43, v2);
    v34 = (id)v32;
    LOBYTE(v32) = _dispatchPreconditionTest(_:)(v5);
    v35 = (*(uint64_t (**)(_QWORD *, uint64_t))(v33 + 8))(v5, v2);
    if ((v32 & 1) == 0)
      break;
    if (v26[OBJC_IVAR____TtC10seserviced10UWBSession_state] == 1)
    {
      if (qword_100344690 != -1)
        v35 = swift_once(&qword_100344690, sub_100182BE4);
      v19 = Logger.logObject.getter(v35);
      v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v36, "Session is invalidated, not deleting URSK", v37, 2u);
        swift_slowDealloc(v37, -1, -1);
      }
    }
    else
    {
      v19 = objc_msgSend(*(id *)&v26[OBJC_IVAR____TtC10seserviced10UWBSession_session], "deleteURSKs", v38);
    }

    sub_100184FC8();
    v12 = v22;
    v13 = v20;
  }
  __break(1u);
LABEL_49:
  __break(1u);
}

void sub_10009C628(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  int v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  os_log_type_t v64;
  uint8_t *v65;
  unint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  uint64_t v94;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int *v113;
  uint64_t v114;
  uint64_t v115;
  os_log_type_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  int v129;
  BOOL v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  os_log_type_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  NSObject *v146;
  os_log_type_t v147;
  uint64_t v148;
  uint8_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint8_t *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  NSObject *v160;
  uint64_t v161;
  os_log_type_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  _BYTE *v175;
  int v176;
  int v177;
  unint64_t v178;
  uint64_t v179;
  _BYTE *v180;
  _QWORD v181[2];
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;

  v5 = v4;
  v6 = v3;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (_QWORD *)((char *)v181 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v15 = qword_100354EE8;
  *v14 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v14, v10);
  if ((v15 & 1) != 0)
  {
    if (qword_100344690 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344690, sub_100182BE4);
LABEL_5:
  v17 = qword_100354D70;
  swift_retain(a3);
  v18 = sub_1001977B8(v17, a3);
  swift_release(a3);
  v19 = (uint64_t *)sub_10009F654(v18, sub_100196CE0, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1001964DC);
  v20 = swift_bridgeObjectRelease(v18);
  if (!v19)
  {
LABEL_16:
    v62 = Logger.logObject.getter(v20);
    v64 = static os_log_type_t.error.getter(v62, v63);
    if (os_log_type_enabled(v62, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v64, "No active UWB Lyon session", v65, 2u);
      swift_slowDealloc(v65, -1, -1);
    }

    v66 = sub_10006B828();
    v67 = swift_allocError(&type metadata for DSKError, v66, 0, 0);
    *v68 = 0;
    swift_willThrow(v67);
    return;
  }
  v21 = type metadata accessor for UWBLyonSession();
  v22 = swift_dynamicCastClass(v19, v21);
  if (!v22)
  {

    goto LABEL_16;
  }
  v23 = (uint64_t *)v22;
  v186 = a3;
  sub_100063C8C(a1, a2);
  sub_1000723E8(a1, a2, 0);
  v25 = v5;
  if (v5)
  {
LABEL_42:

    return;
  }
  v26 = v24;
  v181[1] = v23;
  v27 = v24;
  v28 = v6 + OBJC_IVAR____TtC10seserviced7LyonUWB_logger;
  v29 = Logger.logObject.getter(v24);
  v33 = static os_log_type_t.info.getter(v29, v30, v31, v32);
  v34 = os_log_type_enabled(v29, v33);
  LODWORD(v185) = v27;
  if (v34)
  {
    v35 = swift_slowAlloc(12, -1);
    v182 = v28;
    v36 = (uint8_t *)v35;
    v37 = swift_slowAlloc(32, -1);
    v183 = 0;
    v38 = v37;
    v189 = v37;
    v184 = v19;
    *(_DWORD *)v36 = 136315138;
    v23 = (uint64_t *)(v36 + 4);
    v39 = sub_10019A610(v27);
    v41 = v40;
    v187 = sub_1001C56EC(v39, v40, &v189);
    v19 = v184;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease(v41);
    _os_log_impl((void *)&_mh_execute_header, v29, v33, "Received Notification %s", v36, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    v42 = v38;
    v25 = v183;
    swift_slowDealloc(v42, -1, -1);
    v43 = v36;
    v28 = v182;
    swift_slowDealloc(v43, -1, -1);
  }

  if (v26 < 4u)
  {
    v44 = v186;
    v45 = swift_retain_n(v186, 2);
    v46 = Logger.logObject.getter(v45);
    v48 = static os_log_type_t.error.getter(v46, v47);
    if (os_log_type_enabled(v46, v48))
    {
      v49 = swift_slowAlloc(22, -1);
      v50 = swift_slowAlloc(64, -1);
      v189 = v50;
      *(_DWORD *)v49 = 136315394;
      v51 = swift_retain(v44);
      v52 = UUID.uuidString.getter(v51);
      v54 = v53;
      swift_release(v44);
      v187 = sub_1001C56EC(v52, v54, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v49 + 4, v49 + 12);
      swift_release_n(v44, 2);
      swift_bridgeObjectRelease(v54);
      *(_WORD *)(v49 + 12) = 2080;
      v55 = sub_10019A610(v185);
      v57 = v56;
      v187 = sub_1001C56EC(v55, v56, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v49 + 14, v49 + 22);
      swift_bridgeObjectRelease(v57);
      _os_log_impl((void *)&_mh_execute_header, v46, v48, "Peer %s received invalid notification %s", (uint8_t *)v49, 0x16u);
      v58 = (char *)&type metadata for Any + 8;
      v59 = v50;
      v60 = 2;
LABEL_13:
      swift_arrayDestroy(v59, v60, v58);
      v61 = v50;
LABEL_14:
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v49, -1, -1);
LABEL_41:

      v125 = sub_10006B828();
      v126 = swift_allocError(&type metadata for DSKError, v125, 0, 0);
      *v127 = 0;
      swift_willThrow(v126);
      goto LABEL_42;
    }
LABEL_39:
    v123 = v44;
    v124 = 2;
LABEL_40:
    swift_release_n(v123, v124);
    goto LABEL_41;
  }
  if (v26 != 5)
  {
    if (v26 != 4)
    {
      v91 = v186;
      v92 = swift_retain_n(v186, 2);
      v93 = Logger.logObject.getter(v92);
      v95 = static os_log_type_t.error.getter(v93, v94);
      if (os_log_type_enabled(v93, v95))
      {
        v96 = swift_slowAlloc(18, -1);
        v97 = swift_slowAlloc(32, -1);
        v189 = v97;
        *(_DWORD *)v96 = 67109378;
        LODWORD(v187) = v185;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, (char *)&v187 + 4, v96 + 4, v96 + 8);
        *(_WORD *)(v96 + 8) = 2080;
        v183 = v25;
        v98 = swift_retain(v91);
        v99 = UUID.uuidString.getter(v98);
        v101 = v100;
        swift_release(v91);
        v187 = sub_1001C56EC(v99, v101, &v189);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v96 + 10, v96 + 18);
        swift_release_n(v91, 2);
        swift_bridgeObjectRelease(v101);
        _os_log_impl((void *)&_mh_execute_header, v93, v95, "Not processing unknown ranging notification %u from peer %s", (uint8_t *)v96, 0x12u);
        swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v97, -1, -1);
        swift_slowDealloc(v96, -1, -1);
      }
      else
      {
        swift_release_n(v91, 2);
      }

      goto LABEL_42;
    }
    v23 = (uint64_t *)OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
    v44 = v186;
    switch(*(_BYTE *)(v186 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState))
    {
      case 7:
      case 0xB:
        v69 = swift_retain_n(v186, 4);
        v70 = Logger.logObject.getter(v69);
        v71 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v70, v71))
        {
          v72 = swift_slowAlloc(22, -1);
          v73 = swift_slowAlloc(64, -1);
          v184 = v19;
          v19 = (uint64_t *)v73;
          v189 = v73;
          *(_DWORD *)v72 = 136315394;
          LOBYTE(v187) = *((_BYTE *)v23 + v186);
          v74 = String.init<A>(describing:)(&v187, &type metadata for LyonSessionState);
          v76 = v75;
          v187 = sub_1001C56EC(v74, v75, &v189);
          v23 = &v188;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v72 + 4, v72 + 12);
          swift_release_n(v186, 2);
          swift_bridgeObjectRelease(v76);
          *(_WORD *)(v72 + 12) = 2080;
          v77 = swift_retain(v186);
          v78 = UUID.uuidString.getter(v77);
          v80 = v79;
          swift_release(v186);
          v187 = sub_1001C56EC(v78, v80, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v72 + 14, v72 + 22);
          swift_release_n(v186, 2);
          swift_bridgeObjectRelease(v80);
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "Received out of order secureRangingOverUWBRadioFailed when in %s for %s", (uint8_t *)v72, 0x16u);
          swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v19, -1, -1);
          swift_slowDealloc(v72, -1, -1);

          v44 = v186;
        }
        else
        {
          swift_release_n(v44, 4);

        }
        v128 = OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount;
        v157 = *(_DWORD *)(v44 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount);
        v130 = __CFADD__(v157, 1);
        v131 = v157 + 1;
        if (!v130)
          goto LABEL_53;
        __break(1u);
        goto LABEL_73;
      case 0xA:
      case 0xE:
        v113 = (unsigned int *)(v186 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID);
        if ((*(_BYTE *)(v186 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4) & 1) != 0)
          goto LABEL_37;
        if (*(_BYTE *)(v186 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) == 10)
          goto LABEL_67;
        *(_BYTE *)(v186 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) = 6;
        sub_10009E0A0(v44);
        goto LABEL_42;
      case 0xC:
        v145 = swift_retain_n(v186, 2);
        v182 = v28;
        v146 = Logger.logObject.getter(v145);
        v147 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v146, v147))
        {
          v148 = swift_slowAlloc(12, -1);
          v184 = v19;
          v149 = (uint8_t *)v148;
          v150 = swift_slowAlloc(32, -1);
          v185 = v150;
          v183 = v25;
          *(_DWORD *)v149 = 136315138;
          v189 = v150;
          v151 = swift_retain(v44);
          v152 = UUID.uuidString.getter(v151);
          v154 = v153;
          swift_release(v44);
          v187 = sub_1001C56EC(v152, v154, &v189);
          v25 = v183;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v149 + 4, v149 + 12);
          swift_release_n(v44, 2);
          swift_bridgeObjectRelease(v154);
          _os_log_impl((void *)&_mh_execute_header, v146, v147, "Received out of order secureRangingOverUWBRadioFailed when in pauseRangingRequested, discarding request sent to reader for %s", v149, 0xCu);
          v155 = v185;
          swift_arrayDestroy(v185, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v155, -1, -1);
          v156 = v149;
          v19 = v184;
          swift_slowDealloc(v156, -1, -1);
        }
        else
        {
          swift_release_n(v44, 2);
        }

        if (qword_100344568 == -1)
          goto LABEL_64;
LABEL_73:
        swift_once(&qword_100344568, sub_100073158);
LABEL_64:
        sub_1001A37EC(0);
        if (v25)
          goto LABEL_42;
        v176 = *(_DWORD *)(v44 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount);
        v130 = __CFADD__(v176, 1);
        v177 = v176 + 1;
        if (v130)
        {
          __break(1u);
          JUMPOUT(0x10009D97CLL);
        }
        *(_DWORD *)(v44 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount) = v177;
        *((_BYTE *)v23 + v44) = 10;
        v113 = (unsigned int *)(v44 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID);
        if ((*(_BYTE *)(v44 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4) & 1) == 0)
        {
LABEL_67:
          sub_100180FBC(*v113, 200);

          *((_BYTE *)v23 + v44) = 5;
          return;
        }
LABEL_37:
        v114 = swift_retain_n(v44, 2);
        v46 = Logger.logObject.getter(v114);
        v116 = static os_log_type_t.error.getter(v46, v115);
        if (!os_log_type_enabled(v46, v116))
          goto LABEL_39;
        v49 = swift_slowAlloc(12, -1);
        v50 = swift_slowAlloc(32, -1);
        *(_DWORD *)v49 = 136315138;
        v189 = v50;
        v186 = v49 + 4;
        v117 = swift_retain(v44);
        v118 = UUID.uuidString.getter(v117);
        v119 = v19;
        v121 = v120;
        swift_release(v44);
        v187 = sub_1001C56EC(v118, v121, &v189);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v186, v49 + 12);
        swift_release_n(v44, 2);
        v122 = v121;
        v19 = v119;
        swift_bridgeObjectRelease(v122);
        _os_log_impl((void *)&_mh_execute_header, v46, v116, "Peer %s received secureRangingOverUWBRadioFailed notification, but has no stored session ID", (uint8_t *)v49, 0xCu);
        v58 = (char *)&type metadata for Any + 8;
        v59 = v50;
        v60 = 1;
        break;
      default:
        goto LABEL_47;
    }
    goto LABEL_13;
  }
  v184 = v19;
  v19 = (uint64_t *)OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
  v81 = *(unsigned __int8 *)(v186 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState);
  if (v81 > 0xE)
  {
LABEL_54:
    v158 = v186;
    v159 = swift_retain_n(v186, 4);
    v160 = Logger.logObject.getter(v159);
    v162 = static os_log_type_t.error.getter(v160, v161);
    if (os_log_type_enabled(v160, v162))
    {
      v163 = swift_slowAlloc(22, -1);
      v164 = swift_slowAlloc(64, -1);
      v189 = v164;
      *(_DWORD *)v163 = 136315394;
      LOBYTE(v187) = *((_BYTE *)v19 + v158);
      v165 = String.init<A>(describing:)(&v187, &type metadata for LyonSessionState);
      v167 = v166;
      v187 = sub_1001C56EC(v165, v166, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v163 + 4, v163 + 12);
      swift_release_n(v158, 2);
      swift_bridgeObjectRelease(v167);
      *(_WORD *)(v163 + 12) = 2080;
      v168 = swift_retain(v158);
      v169 = UUID.uuidString.getter(v168);
      v171 = v170;
      swift_release(v158);
      v187 = sub_1001C56EC(v169, v171, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v163 + 14, v163 + 22);
      swift_release_n(v158, 2);
      swift_bridgeObjectRelease(v171);
      _os_log_impl((void *)&_mh_execute_header, v160, v162, "Received rangingSessionSuspended when in %s for %s", (uint8_t *)v163, 0x16u);
      swift_arrayDestroy(v164, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v164, -1, -1);
      swift_slowDealloc(v163, -1, -1);
    }
    else
    {
      swift_release_n(v158, 4);
    }

    v178 = sub_10006B828();
    v179 = swift_allocError(&type metadata for DSKError, v178, 0, 0);
    *v180 = 0;
    swift_willThrow(v179);

    return;
  }
  v82 = 1 << v81;
  if ((v82 & 0x1880) == 0)
  {
    if ((v82 & 0x4400) != 0)
    {
      v102 = v186;
      if ((*(_BYTE *)(v186 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4) & 1) != 0)
      {
        v103 = swift_retain_n(v186, 2);
        v104 = Logger.logObject.getter(v103);
        v106 = static os_log_type_t.error.getter(v104, v105);
        if (os_log_type_enabled(v104, v106))
        {
          v107 = (uint8_t *)swift_slowAlloc(12, -1);
          v108 = swift_slowAlloc(32, -1);
          *(_DWORD *)v107 = 136315138;
          v189 = v108;
          v109 = swift_retain(v102);
          v110 = UUID.uuidString.getter(v109);
          v112 = v111;
          swift_release(v102);
          v187 = sub_1001C56EC(v110, v112, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v107 + 4, v107 + 12);
          swift_release_n(v102, 2);
          swift_bridgeObjectRelease(v112);
          _os_log_impl((void *)&_mh_execute_header, v104, v106, "Peer %s received suspended notification, but has no stored session ID", v107, 0xCu);
          swift_arrayDestroy(v108, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v108, -1, -1);
          swift_slowDealloc(v107, -1, -1);
        }
        else
        {
          swift_release_n(v102, 2);
        }

        v172 = v184;
        v173 = sub_10006B828();
        v174 = swift_allocError(&type metadata for DSKError, v173, 0, 0);
        *v175 = 0;
        swift_willThrow(v174);

      }
      else
      {
        sub_100180FBC(*(unsigned int *)(v186 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID), 201);

        *((_BYTE *)v19 + v102) = 14;
      }
      return;
    }
    goto LABEL_54;
  }
  v44 = v186;
  v83 = swift_retain_n(v186, 2);
  v84 = Logger.logObject.getter(v83);
  v85 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v84, v85))
  {
    v86 = (uint8_t *)swift_slowAlloc(12, -1);
    v87 = swift_slowAlloc(32, -1);
    v183 = v25;
    *(_DWORD *)v86 = 136315138;
    v189 = v87;
    v23 = (uint64_t *)(v86 + 4);
    LOBYTE(v187) = *((_BYTE *)v19 + v44);
    v19 = &v187;
    v88 = String.init<A>(describing:)(&v187, &type metadata for LyonSessionState);
    v90 = v89;
    v187 = sub_1001C56EC(v88, v89, &v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v86 + 4, v86 + 12);
    swift_release_n(v44, 2);
    swift_bridgeObjectRelease(v90);
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "Received out of order rangingSessionSuspended when in %s", v86, 0xCu);
    swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v87, -1, -1);
    swift_slowDealloc(v86, -1, -1);
  }
  else
  {
    swift_release_n(v44, 2);
  }

  v128 = OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount;
  v129 = *(_DWORD *)(v44 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount);
  v130 = __CFADD__(v129, 1);
  v131 = v129 + 1;
  if (v130)
  {
    __break(1u);
LABEL_47:
    v132 = swift_retain_n(v44, 4);
    v46 = Logger.logObject.getter(v132);
    v134 = static os_log_type_t.error.getter(v46, v133);
    if (os_log_type_enabled(v46, v134))
    {
      v49 = swift_slowAlloc(22, -1);
      v185 = swift_slowAlloc(64, -1);
      v189 = v185;
      *(_DWORD *)v49 = 136315394;
      LOBYTE(v187) = *((_BYTE *)v23 + v44);
      v135 = String.init<A>(describing:)(&v187, &type metadata for LyonSessionState);
      v137 = v136;
      v187 = sub_1001C56EC(v135, v136, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v49 + 4, v49 + 12);
      swift_release_n(v44, 2);
      swift_bridgeObjectRelease(v137);
      *(_WORD *)(v49 + 12) = 2080;
      v138 = swift_retain(v44);
      v139 = UUID.uuidString.getter(v138);
      v140 = v19;
      v142 = v141;
      swift_release(v44);
      v187 = sub_1001C56EC(v139, v142, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v49 + 14, v49 + 22);
      swift_release_n(v44, 2);
      v143 = v142;
      v19 = v140;
      swift_bridgeObjectRelease(v143);
      _os_log_impl((void *)&_mh_execute_header, v46, v134, "Received secureRangingOverUWBRadioFailed when in invalid state %s for %s", (uint8_t *)v49, 0x16u);
      v144 = v185;
      swift_arrayDestroy(v185, 2, (char *)&type metadata for Any + 8);
      v61 = v144;
      goto LABEL_14;
    }
    v123 = v44;
    v124 = 4;
    goto LABEL_40;
  }
LABEL_53:
  *(_DWORD *)(v44 + v128) = v131;
}

void sub_10009D99C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (qword_100344690 != -1)
    swift_once(&qword_100344690, sub_100182BE4);
  v4 = qword_100354D70;
  swift_retain(a1);
  v5 = sub_100196F9C(v4, a1);
  swift_release(a1);
  v6 = (void *)sub_10009F654(v5, sub_100196CE0, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1001964DC);
  swift_bridgeObjectRelease(v5);
  if (v6)
  {
    v7 = type metadata accessor for UWBLyonSession();
    if (swift_dynamicCastClass(v6, v7))
    {
      v8 = swift_retain_n(a1, 2);
      v9 = Logger.logObject.getter(v8);
      v13 = static os_log_type_t.info.getter(v9, v10, v11, v12);
      if (os_log_type_enabled(v9, v13))
      {
        v34 = a2;
        v14 = swift_slowAlloc(18, -1);
        v33 = swift_slowAlloc(32, -1);
        v37 = v33;
        *(_DWORD *)v14 = 67109378;
        LODWORD(v35) = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, (char *)&v35 + 4, v14 + 4, v14 + 8);
        *(_WORD *)(v14 + 8) = 2080;
        v15 = type metadata accessor for UUID(0);
        v16 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v17 = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
        v19 = v18;
        v35 = sub_1001C56EC(v17, v18, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v14 + 10, v14 + 18);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v19);
        _os_log_impl((void *)&_mh_execute_header, v9, v13, "Prefectching ursk for session %u in peer %s", (uint8_t *)v14, 0x12u);
        swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        v20 = v14;
        a2 = v34;
        swift_slowDealloc(v20, -1, -1);
      }
      else
      {
        swift_release_n(a1, 2);
      }

      sub_1001821F0(a2);
      return;
    }

  }
  v21 = swift_retain_n(a1, 2);
  v22 = Logger.logObject.getter(v21);
  v26 = static os_log_type_t.info.getter(v22, v23, v24, v25);
  if (os_log_type_enabled(v22, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    *(_DWORD *)v27 = 136315138;
    v37 = v28;
    v29 = swift_retain(a1);
    v30 = UUID.uuidString.getter(v29);
    v32 = v31;
    swift_release(a1);
    v35 = sub_1001C56EC(v30, v32, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v27 + 4, v27 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v22, v26, "No session exists for peer %s", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

}

void sub_10009DD8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint8_t *v27;
  NSObject *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[3];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced7LyonUWB_pendingTimeSyncEvents);
  swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced7LyonUWB_pendingTimeSyncEvents, v34, 32, 0);
  v4 = *v3;
  if (*(_QWORD *)(*v3 + 16)
    && (v5 = sub_100187E34(a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier), (v6 & 1) != 0))
  {
    v7 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 24 * v5);
    v8 = *v7;
    v9 = v7[1];
    v10 = v7[2];
    swift_endAccess(v34);
    if (qword_100344690 != -1)
      swift_once(&qword_100344690, sub_100182BE4);
    v11 = qword_100354D70;
    swift_retain(a1);
    v12 = sub_100196F9C(v11, a1);
    swift_release(a1);
    v13 = (void *)sub_10009F654(v12, sub_100196CE0, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1001964DC);
    v14 = swift_bridgeObjectRelease(v12);
    if (v13)
    {
      v15 = swift_retain_n(a1, 2);
      v16 = Logger.logObject.getter(v15);
      v20 = static os_log_type_t.info.getter(v16, v17, v18, v19);
      if (os_log_type_enabled(v16, v20))
      {
        v32 = v8;
        v21 = (uint8_t *)swift_slowAlloc(12, -1);
        v22 = swift_slowAlloc(32, -1);
        v34[0] = v22;
        *(_DWORD *)v21 = 136315138;
        v23 = swift_retain(a1);
        v24 = UUID.uuidString.getter(v23);
        v26 = v25;
        swift_release(a1);
        v33 = sub_1001C56EC(v24, v26, v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v21 + 4, v21 + 12);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v26);
        _os_log_impl((void *)&_mh_execute_header, v16, v20, "Processing timesync for %s", v21, 0xCu);
        swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v22, -1, -1);
        v27 = v21;
        v8 = v32;
        swift_slowDealloc(v27, -1, -1);
      }
      else
      {
        swift_release_n(a1, 2);
      }

      sub_100184DF4(v8, v9, v10);
    }
    else
    {
      v28 = Logger.logObject.getter(v14);
      v30 = static os_log_type_t.error.getter(v28, v29);
      if (os_log_type_enabled(v28, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v30, "No active UWB Lyon session to do timesync for", v31, 2u);
        swift_slowDealloc(v31, -1, -1);
      }

    }
  }
  else
  {
    swift_endAccess(v34);
  }
}

void sub_10009E0A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(unint64_t, uint64_t, uint64_t);
  id v13;
  void (*v14)(unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  void *v98;
  id v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  id v109;
  void *v110;
  id v111;
  char v112;
  unint64_t v113;
  id v114;
  void *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  os_log_type_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  os_log_type_t v138;
  uint8_t *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  int v147;
  BOOL v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  NSObject *v153;
  os_log_type_t v154;
  uint8_t *v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint8_t *v161;
  id v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _BYTE v166[16];
  uint64_t v167;
  uint64_t v168[3];
  uint64_t v169;

  v3 = v2;
  v4 = v1;
  v164 = a1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (unint64_t)&v156 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = qword_100354EE8;
  *(_QWORD *)v9 = qword_100354EE8;
  v11 = enum case for DispatchPredicate.onQueue(_:);
  v12 = *(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 104);
  v12(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v13 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v14 = *(void (**)(unint64_t, uint64_t))(v6 + 8);
  v14(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_71;
  }
  if (qword_1003445A0 != -1)
LABEL_71:
    swift_once(&qword_1003445A0, sub_1000B26B0);
  v15 = v164;
  v16 = sub_1000B2084(v164);
  if (v16 == 2 || (v16 & 1) != 0)
  {
    v39 = swift_retain_n(v15, 2);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      v163 = v2;
      *(_DWORD *)v42 = 136315138;
      v168[0] = v43;
      v44 = type metadata accessor for UUID(0);
      v45 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v44, v45);
      v48 = v47;
      v165 = sub_1001C56EC(v46, v47, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v42 + 4, v42 + 12);
      swift_release_n(v15, 2);
      swift_bridgeObjectRelease(v48);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Not sending device intent: Not in closer state for peer %s", v42, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {
      swift_release_n(v15, 2);
    }
    goto LABEL_17;
  }
  if (qword_100344690 != -1)
    swift_once(&qword_100344690, sub_100182BE4);
  v17 = qword_100354D70;
  swift_retain(v15);
  v18 = sub_1001977B8(v17, v15);
  v19 = v15;
  v20 = v18;
  swift_release(v19);
  v21 = (void *)sub_10009F654(v20, sub_100196CE0, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1001964DC);
  v22 = swift_bridgeObjectRelease(v20);
  if (!v21)
  {
LABEL_20:
    v49 = Logger.logObject.getter(v22);
    v50 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Not sending device intent: No active UWB Lyon session", v51, 2u);
      swift_slowDealloc(v51, -1, -1);
    }

    return;
  }
  v23 = type metadata accessor for UWBLyonSession();
  v24 = swift_dynamicCastClass(v21, v23);
  if (!v24)
  {

    goto LABEL_20;
  }
  v25 = v24;
  v163 = v3;
  v26 = OBJC_IVAR____TtC10seserviced10UWBSession_state;
  if (*(_BYTE *)(v24 + OBJC_IVAR____TtC10seserviced10UWBSession_state) != 4)
  {
    v40 = v21;
    v52 = Logger.logObject.getter(v40);
    v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(12, -1);
      v55 = swift_slowAlloc(32, -1);
      *(_DWORD *)v54 = 136315138;
      v168[0] = v55;
      LOBYTE(v165) = *(_BYTE *)(v25 + v26);
      v56 = String.init<A>(describing:)(&v165, &type metadata for UWBSession.State);
      v58 = v57;
      v165 = sub_1001C56EC(v56, v57, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v54 + 4, v54 + 12);

      swift_bridgeObjectRelease(v58);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Not sending device intent: UWB session is currently in state %s", v54, 0xCu);
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v54, -1, -1);

    }
    else
    {

    }
LABEL_17:

    return;
  }
  v162 = v21;
  v27 = v164;
  v28 = *(_QWORD *)(v164 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier + 8);
  if (v28 >> 60 == 15)
  {
    v29 = swift_retain_n(v164, 2);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      *(_DWORD *)v32 = 136315138;
      v168[0] = v33;
      v161 = v32 + 4;
      v34 = type metadata accessor for UUID(0);
      v35 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v36 = dispatch thunk of CustomStringConvertible.description.getter(v34, v35);
      v38 = v37;
      v165 = sub_1001C56EC(v36, v37, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v161, v32 + 12);
      swift_release_n(v27, 2);
      swift_bridgeObjectRelease(v38);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Not sending device intent: No stored reader identifier for peer %s", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      swift_release_n(v27, 2);
    }

    return;
  }
  v59 = v4;
  v60 = *(_QWORD *)(v164 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier);
  v160 = v59;
  v61 = v59 + OBJC_IVAR____TtC10seserviced7LyonUWB_blockedReaderIdentifiers;
  swift_beginAccess(v59 + OBJC_IVAR____TtC10seserviced7LyonUWB_blockedReaderIdentifiers, v168, 32, 0);
  v62 = *(_QWORD *)(*(_QWORD *)v61 + 16);
  sub_100063C8C(v60, v28);
  v63 = v28;
  v64 = v163;
  v161 = (uint8_t *)v63;
  if (v62)
  {
    v65 = v63;
    sub_100063C8C(v60, v63);
    sub_100187F6C(v60, v65);
    if ((v66 & 1) != 0)
    {
      swift_endAccess(v168);
      v67 = (unint64_t)v161;
      sub_10006B9B4(v60, (unint64_t)v161);
      v68 = v60;
      v69 = v164;
      swift_retain(v164);
      sub_10006BA34(v60, v67);
      swift_retain(v69);
      v70 = sub_10006BA34(v60, v67);
      v71 = Logger.logObject.getter(v70);
      v72 = static os_log_type_t.default.getter();
      v73 = v72;
      if (!os_log_type_enabled(v71, v72))
      {

        v113 = (unint64_t)v161;
        sub_10006B9B4(v60, (unint64_t)v161);

        sub_10006B9B4(v60, v113);
        sub_10006B9B4(v60, v113);
        swift_release_n(v69, 2);
        return;
      }
      v74 = swift_slowAlloc(22, -1);
      v160 = swift_slowAlloc(64, -1);
      v168[0] = v160;
      *(_DWORD *)v74 = 136315394;
      LODWORD(v158) = v73;
      v75 = (unint64_t)v161;
      sub_100063C8C(v68, (unint64_t)v161);
      v76 = Data.description.getter(v68, v75);
      v78 = v77;
      sub_10006B9B4(v68, v75);
      v165 = sub_1001C56EC(v76, v78, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v74 + 4, v74 + 12);
      swift_bridgeObjectRelease(v78);
      sub_10006B9B4(v68, v75);
      sub_10006B9B4(v68, v75);
      *(_WORD *)(v74 + 12) = 2080;
      v79 = type metadata accessor for UUID(0);
      v80 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v81 = dispatch thunk of CustomStringConvertible.description.getter(v79, v80);
      v83 = v82;
      v165 = sub_1001C56EC(v81, v82, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v74 + 14, v74 + 22);
      swift_release_n(v164, 2);
      swift_bridgeObjectRelease(v83);
      _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v158, "Not sending device intent: Ranging blocked for peer by Wallet for reader identifier %s for peer %s", (uint8_t *)v74, 0x16u);
      v84 = v160;
      swift_arrayDestroy(v160, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v74, -1, -1);

      v85 = v68;
      v86 = v75;
LABEL_36:
      sub_10006B9B4(v85, v86);

      return;
    }
    sub_10006B9B4(v60, (unint64_t)v161);
  }
  v159 = v60;
  swift_endAccess(v168);
  v87 = v164;
  if (*(_BYTE *)(v164 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerStatus) == 1)
  {
    v88 = swift_retain_n(v164, 2);
    v71 = Logger.logObject.getter(v88);
    v89 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v71, v89))
    {

      sub_10006B9B4(v159, (unint64_t)v161);
      swift_release_n(v87, 2);

      return;
    }
    v90 = (uint8_t *)swift_slowAlloc(12, -1);
    v91 = swift_slowAlloc(32, -1);
    *(_DWORD *)v90 = 136315138;
    v168[0] = v91;
    v160 = (uint64_t)(v90 + 4);
    v92 = type metadata accessor for UUID(0);
    v93 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v94 = dispatch thunk of CustomStringConvertible.description.getter(v92, v93);
    v96 = v95;
    v165 = sub_1001C56EC(v94, v95, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v160, v90 + 12);
    swift_release_n(v87, 2);
    swift_bridgeObjectRelease(v96);
    _os_log_impl((void *)&_mh_execute_header, v71, v89, "Not sending device intent: Lock is unlocked for peer %s", v90, 0xCu);
    swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v91, -1, -1);
    swift_slowDealloc(v90, -1, -1);

    v85 = v159;
    v86 = (unint64_t)v161;
    goto LABEL_36;
  }
  v97 = qword_100354D70;
  v98 = (void *)qword_100354EE8;
  *(_QWORD *)v9 = qword_100354EE8;
  v12(v9, v11, v5);
  v99 = v98;
  v100 = _dispatchPreconditionTest(_:)(v9);
  v14(v9, v5);
  if ((v100 & 1) == 0)
  {
    __break(1u);
LABEL_73:
    swift_once(&qword_100344568, sub_100073158);
LABEL_59:
    if (v9 >> 60 == 15)
    {
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    sub_10006BA34(v5, v9);
    v144 = v164;
    sub_10007CAB8(2, 1, v5, v9, v164);
    sub_10006B9B4(v5, v9);
    if (v64)
    {

      sub_10006B9B4(v159, (unint64_t)v161);
      v145 = v5;
      v146 = v9;
LABEL_64:
      sub_10006B9B4(v145, v146);
      return;
    }
    v147 = *(_DWORD *)(v144 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingAttemptsCount);
    v148 = __CFADD__(v147, 1);
    v149 = v147 + 1;
    if (!v148)
    {
      *(_DWORD *)(v144 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingAttemptsCount) = v149;
      *(_DWORD *)(v144 + OBJC_IVAR____TtC10seserviced8LyonPeer_lastTransactionIntent) = 0;
      v150 = qword_100354A80;
      v151 = swift_allocObject(&unk_100307ED0, 24, 7);
      swift_weakInit(v151 + 16, v144);
      v152 = swift_allocObject(&unk_100307EF8, 40, 7);
      *(_QWORD *)(v152 + 16) = v151;
      *(_BYTE *)(v152 + 24) = 0;
      *(_QWORD *)(v152 + 32) = v150;
      swift_retain(v151);
      swift_retain(v150);
      sub_1001A3C14(0, (uint64_t)sub_10006B8E0, v152);
      swift_release(v151);
      swift_release(v152);
      sub_10006B9B4(v5, v9);

      v145 = v159;
      v146 = (unint64_t)v161;
      goto LABEL_64;
    }
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  v101 = (uint64_t *)(v97 + OBJC_IVAR____TtC10seserviced6DSKUWB_rangingLimitExceeded);
  swift_beginAccess(v97 + OBJC_IVAR____TtC10seserviced6DSKUWB_rangingLimitExceeded, v168, 0, 0);
  if (!sub_10017ED28(1uLL, *v101))
    goto LABEL_43;
  if (qword_100344708 != -1)
    swift_once(&qword_100344708, sub_1001C2AE4);
  v102 = qword_100354E20;
  v103 = qword_100354EE8;
  *(_QWORD *)v9 = qword_100354EE8;
  v12(v9, v11, v5);
  v104 = (id)v103;
  LOBYTE(v103) = _dispatchPreconditionTest(_:)(v9);
  v14(v9, v5);
  if ((v103 & 1) == 0)
  {
    __break(1u);
    goto LABEL_75;
  }
  v105 = swift_beginAccess(v102 + 32, &v165, 0, 0);
  if (!*(_QWORD *)(*(_QWORD *)(v102 + 32) + 16))
  {
    v153 = Logger.logObject.getter(v105);
    v154 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v153, v154))
    {
      v155 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v155 = 0;
      _os_log_impl((void *)&_mh_execute_header, v153, v154, "Not sending device intent: Ranging limit is currently exceeded, and no exception is set", v155, 2u);
      swift_slowDealloc(v155, -1, -1);
    }

    sub_10006B9B4(v159, (unint64_t)v161);
  }
  else
  {
LABEL_43:
    v106 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
    v107 = v164;
    v108 = *(unsigned __int8 *)(v164 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState);
    if (v108 == 14)
    {
      v114 = objc_msgSend((id)objc_opt_self(SESTLV), "TLVWithTag:value:", 1, 0);
      if (!v114)
      {
LABEL_78:
        __break(1u);
        return;
      }
      v115 = v114;
      v111 = objc_msgSend(v114, "asData");

      v112 = 11;
      if (!v111)
      {
LABEL_47:
        v5 = 0;
        v9 = 0xF000000000000000;
        goto LABEL_53;
      }
LABEL_52:
      v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v111);
      v9 = v116;

LABEL_53:
      v117 = v164;
      *(_BYTE *)(v164 + v106) = v112;
      v118 = swift_retain_n(v117, 4);
      v119 = Logger.logObject.getter(v118);
      v123 = static os_log_type_t.info.getter(v119, v120, v121, v122);
      v124 = v123;
      if (os_log_type_enabled(v119, v123))
      {
        v125 = swift_slowAlloc(22, -1);
        v158 = swift_slowAlloc(64, -1);
        v169 = v158;
        *(_DWORD *)v125 = 136315394;
        v157 = v124;
        LOBYTE(v167) = *(_BYTE *)(v117 + v106);
        v126 = String.init<A>(describing:)(&v167, &type metadata for LyonSessionState);
        v128 = v127;
        v167 = sub_1001C56EC(v126, v127, &v169);
        v160 = v9;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168, v125 + 4, v125 + 12);
        swift_release_n(v117, 2);
        swift_bridgeObjectRelease(v128);
        *(_WORD *)(v125 + 12) = 2080;
        v129 = swift_retain(v117);
        v130 = UUID.uuidString.getter(v129);
        v131 = v5;
        v133 = v132;
        swift_release(v117);
        v167 = sub_1001C56EC(v130, v133, &v169);
        v9 = v160;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168, v125 + 14, v125 + 22);
        swift_release_n(v117, 2);
        v134 = v133;
        v5 = v131;
        swift_bridgeObjectRelease(v134);
        _os_log_impl((void *)&_mh_execute_header, v119, (os_log_type_t)v157, "Sending device intent in state: %s for peer %s", (uint8_t *)v125, 0x16u);
        v135 = v158;
        swift_arrayDestroy(v158, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v135, -1, -1);
        swift_slowDealloc(v125, -1, -1);
      }
      else
      {
        swift_release_n(v117, 4);
      }

      v100 = (uint64_t)v162;
      if (qword_100344568 == -1)
        goto LABEL_59;
      goto LABEL_73;
    }
    if (v108 == 6)
    {
      v109 = objc_msgSend((id)objc_opt_self(SESTLV), "TLVWithTag:value:", 0, 0);
      if (!v109)
      {
LABEL_77:
        __break(1u);
        goto LABEL_78;
      }
      v110 = v109;
      v111 = objc_msgSend(v109, "asData");

      v112 = 7;
      if (!v111)
        goto LABEL_47;
      goto LABEL_52;
    }
    v136 = swift_retain_n(v164, 2);
    v137 = Logger.logObject.getter(v136);
    v138 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v137, v138))
    {
      v139 = (uint8_t *)swift_slowAlloc(12, -1);
      v140 = swift_slowAlloc(32, -1);
      *(_DWORD *)v139 = 136315138;
      v169 = v140;
      v160 = (uint64_t)(v139 + 4);
      LOBYTE(v167) = *(_BYTE *)(v107 + v106);
      v141 = String.init<A>(describing:)(&v167, &type metadata for LyonSessionState);
      v143 = v142;
      v167 = sub_1001C56EC(v141, v142, &v169);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168, v160, v139 + 12);
      swift_release_n(v107, 2);
      swift_bridgeObjectRelease(v143);
      _os_log_impl((void *)&_mh_execute_header, v137, v138, "Not sending device intent - incorrect state %s", v139, 0xCu);
      swift_arrayDestroy(v140, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v140, -1, -1);
      swift_slowDealloc(v139, -1, -1);

      sub_10006B9B4(v159, (unint64_t)v161);
    }
    else
    {

      sub_10006B9B4(v159, (unint64_t)v161);
      swift_release_n(v107, 2);
    }

  }
}

void sub_10009F390(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once(&qword_100344690, sub_100182BE4);
    goto LABEL_6;
  }
  if (*(_BYTE *)(v1 + 16) != 1)
  {
    v13 = Logger.logObject.getter(v10);
    v17 = static os_log_type_t.error.getter(v13, v16);
    if (!os_log_type_enabled(v13, v17))
      goto LABEL_17;
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    v19 = "Not running";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v13, v17, v19, v18, 2u);
    swift_slowDealloc(v18, -1, -1);
    goto LABEL_17;
  }
  if (qword_100344690 != -1)
    goto LABEL_19;
LABEL_6:
  v11 = qword_100354D70;
  swift_retain(a1);
  v12 = sub_1001977B8(v11, a1);
  swift_release(a1);
  v13 = sub_10009F654(v12, sub_100196CE0, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1001964DC);
  v14 = swift_bridgeObjectRelease(v12);
  if (!v13)
  {
LABEL_14:
    v13 = Logger.logObject.getter(v14);
    v17 = static os_log_type_t.info.getter(v13, v20, v21, v22);
    if (!os_log_type_enabled(v13, v17))
      goto LABEL_17;
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    v19 = "No session to cleanup";
    goto LABEL_16;
  }
  v15 = type metadata accessor for UWBLyonSession();
  if (!swift_dynamicCastClass(v13, v15))
  {

    goto LABEL_14;
  }
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4) & 1) == 0)
    sub_100180FBC(*(unsigned int *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID), 107);
  sub_100181254();
  sub_100184FC8();
LABEL_17:

}

uint64_t sub_10009F618(uint64_t a1)
{
  return sub_10009F654(a1, sub_100196CE0, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_100196274);
}

uint64_t sub_10009F62C(uint64_t a1)
{
  return sub_10009F654(a1, sub_100196CE0, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1001964DC);
}

uint64_t sub_10009F640(uint64_t a1)
{
  return sub_10009F654(a1, sub_100196CE0, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_10019671C);
}

uint64_t sub_10009F654(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t, uint64_t, BOOL, uint64_t))
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char v16;

  v5 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    v7 = __CocoaSet.startIndex.getter(v6);
    v9 = v8;
    v10 = __CocoaSet.endIndex.getter(v6);
    v12 = static __CocoaSet.Index.== infix(_:_:)(v7, v9, v10, v11);
    swift_bridgeObjectRelease(v10);
    if ((v12 & 1) != 0)
      goto LABEL_6;
    goto LABEL_10;
  }
  result = a2(a1);
  if ((v16 & 1) == 0)
  {
    v9 = v15;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v15)
    {
      v7 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
      {
LABEL_6:
        sub_1000960E8(v7, v9, v5 != 0);
        return 0;
      }
LABEL_10:
      v13 = a3(v7, v9, v5 != 0, a1);
      sub_1000960E8(v7, v9, v5 != 0);
      return v13;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10009F76C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_10009F7B4(unsigned __int8 a1, uint64_t a2)
{
  unsigned __int8 v2;

  if ((a2 & 0xFF000000000000) != 0)
    v2 = a1;
  else
    v2 = 0;
  return v2 | (((a2 & 0xFF000000000000) == 0) << 8);
}

uint64_t sub_10009F8B4@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;

  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  ObjectType = swift_getObjectType(v3);
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRetain(v5);
  v8 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v4);
  v9 = swift_getObjectType(v5);
  result = dispatch thunk of _AnyIndexBox._typeID.getter(v9, v6);
  if (v8 == result)
  {
    v11 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v5, v6, ObjectType, v4);
    swift_unknownObjectRelease(v5);
    if ((v11 & 1) != 0)
    {
      result = swift_unknownObjectRelease(v3);
      a2[1] = 0u;
      a2[2] = 0u;
      *a2 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter(v3, v4);
      return swift_unknownObjectRelease(v3);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10009F9BC()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for LyonUWB(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_10009F9F8();
  qword_100354BB0 = result;
  return result;
}

uint64_t sub_10009F9F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD aBlock[5];
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v0 + 16) = 0;
  v7 = String.init(cString:)(SESLoggingSubsystem);
  Logger.init(subsystem:category:)(v7);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced7LyonUWB_pendingTimeSyncEvents) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced7LyonUWB_blockedReaderIdentifiers) = &_swiftEmptyDictionarySingleton;
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v8 = (void *)static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  aBlock[4] = sub_1000A90A8;
  v13 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_100307E98;
  v9 = _Block_copy(aBlock);
  v10 = v13;
  swift_retain(v1);
  swift_release(v10);
  os_state_add_handler(v8, v9);
  _Block_release(v9);

  return v1;
}

_DWORD *sub_10009FB88()
{
  uint64_t v0;
  char v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  Class isa;
  _DWORD *v5;
  _OWORD v7[2];
  __int128 v8;
  void *v9;

  v1 = *(_BYTE *)(v0 + 16);
  v9 = &type metadata for Bool;
  LOBYTE(v8) = v1;
  sub_10006C2B4(&v8, v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v7, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v3 = sub_10017D088((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  v5 = sub_100015734((uint64_t)"lyonuwb.state", (uint64_t)isa);

  return v5;
}

void sub_10009FC70()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD v22[5];

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (_QWORD *)((char *)&v22[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once(&qword_100344690, sub_100182BE4);
LABEL_11:
    v22[3] = v2;
    v22[4] = &off_100307E80;
    v22[0] = v1;
    swift_retain(v1);
    sub_10017FAB4(1uLL, (uint64_t)v22);
    sub_1000AC14C((uint64_t)v22);
    *((_BYTE *)v1 + 16) = 1;
    return;
  }
  v11 = *((_BYTE *)v1 + 16);
  v12 = Logger.logObject.getter(v10);
  v16 = v12;
  if ((v11 & 1) == 0)
  {
    v19 = static os_log_type_t.info.getter(v12, v13, v14, v15);
    if (os_log_type_enabled(v16, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v19, "Starting LyonUWB", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    if (qword_100344690 == -1)
      goto LABEL_11;
    goto LABEL_13;
  }
  v17 = static os_log_type_t.error.getter(v12, v13);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "LyonUWB is already running", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

}

Swift::Int sub_10009FEA4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  _QWORD v42[5];

  v1 = a1;
  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
      goto LABEL_5;
LABEL_11:
    v4 = &_swiftEmptySetSingleton;
    if (v2)
      goto LABEL_6;
LABEL_12:
    v13 = -1 << *(_BYTE *)(v1 + 32);
    v39 = v1 + 56;
    v10 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(v1 + 56);
    swift_bridgeObjectRetain(v1);
    result = swift_retain(v4);
    v11 = 0;
    goto LABEL_16;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v3 = __CocoaSet.count.getter(a1);
  if (!v3)
    goto LABEL_11;
LABEL_5:
  sub_100063D3C(&qword_100345820);
  v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
  if (!v2)
    goto LABEL_12;
LABEL_6:
  if (v1 < 0)
    v5 = v1;
  else
    v5 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  swift_retain(v4);
  v6 = __CocoaSet.makeIterator()(v5);
  v7 = type metadata accessor for UWBSession();
  v8 = sub_1000639EC((unint64_t *)&qword_100345828, (uint64_t (*)(uint64_t))type metadata accessor for UWBSession, (uint64_t)&protocol conformance descriptor for NSObject);
  result = (Swift::Int)Set.Iterator.init(_cocoa:)(v42, v6, v7, v8);
  v1 = v42[0];
  v39 = v42[1];
  v10 = v42[2];
  v11 = v42[3];
  v12 = v42[4];
LABEL_16:
  v38 = (unint64_t)(v10 + 64) >> 6;
  v16 = (char *)(v4 + 7);
  while (v1 < 0)
  {
    v21 = __CocoaSet.Iterator.next()(result);
    if (!v21)
      goto LABEL_52;
    v40 = v21;
    v22 = type metadata accessor for UWBSession();
    swift_dynamicCast(&v41, &v40, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
    v23 = v41;
    v20 = v11;
    v18 = v12;
LABEL_41:
    v28 = type metadata accessor for UWBLyonSession();
    v29 = swift_dynamicCastClass(v23, v28);
    if (!v29)
    {
      swift_release_n(v4, 2);

      sub_10007EF58(v1);
      return 0;
    }
    v30 = v29;
    result = NSObject._rawHashValue(seed:)(v4[5]);
    v31 = -1 << *((_BYTE *)v4 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)&v16[8 * (v32 >> 6)]) != 0)
    {
      v17 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)&v16[8 * (v32 >> 6)])) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_54;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)&v16[8 * v33];
      }
      while (v37 == -1);
      v17 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)&v16[(v17 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v17;
    *(_QWORD *)(v4[6] + 8 * v17) = v30;
    ++v4[2];
    v11 = v20;
    v12 = v18;
  }
  if (v12)
  {
    v18 = (v12 - 1) & v12;
    v19 = __clz(__rbit64(v12)) | (v11 << 6);
    v20 = v11;
LABEL_40:
    v23 = *(void **)(*(_QWORD *)(v1 + 48) + 8 * v19);
    v41 = v23;
    v27 = v23;
    goto LABEL_41;
  }
  v24 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v24 >= v38)
      goto LABEL_52;
    v25 = *(_QWORD *)(v39 + 8 * v24);
    v20 = v11 + 1;
    if (!v25)
    {
      v20 = v11 + 2;
      if (v11 + 2 >= v38)
        goto LABEL_52;
      v25 = *(_QWORD *)(v39 + 8 * v20);
      if (!v25)
      {
        v20 = v11 + 3;
        if (v11 + 3 >= v38)
          goto LABEL_52;
        v25 = *(_QWORD *)(v39 + 8 * v20);
        if (!v25)
        {
          v20 = v11 + 4;
          if (v11 + 4 >= v38)
            goto LABEL_52;
          v25 = *(_QWORD *)(v39 + 8 * v20);
          if (!v25)
          {
            v20 = v11 + 5;
            if (v11 + 5 >= v38)
              goto LABEL_52;
            v25 = *(_QWORD *)(v39 + 8 * v20);
            if (!v25)
            {
              v26 = v11 + 6;
              while (v38 != v26)
              {
                v25 = *(_QWORD *)(v39 + 8 * v26++);
                if (v25)
                {
                  v20 = v26 - 1;
                  goto LABEL_39;
                }
              }
LABEL_52:
              v41 = 0;
              swift_release(v4);
              sub_10007EF58(v1);
              return (Swift::Int)v4;
            }
          }
        }
      }
    }
LABEL_39:
    v18 = (v25 - 1) & v25;
    v19 = __clz(__rbit64(v25)) + (v20 << 6);
    goto LABEL_40;
  }
LABEL_54:
  __break(1u);
  return result;
}

id sub_1000A02B4()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  Class isa;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v26;
  uint64_t v27;
  id v28;
  Class v29;
  Class v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  unsigned int v35;
  char v36;
  __int16 v37;
  uint64_t v38;
  _QWORD *v39;

  v1 = v0;
  v2 = (id)objc_opt_self(SESTLV);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(v2, "TLVsWithData:", isa);

  if (!v4)
  {
    v13 = sub_10006B828();
    v14 = swift_allocError(&type metadata for DSKError, v13, 0, 0);
    *v15 = 0;
    swift_willThrow(v14);
    return v2;
  }
  v5 = sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  v38 = (uint64_t)_swiftEmptyArrayStorage;
  v39 = _swiftEmptyArrayStorage;
  v37 = 256;
  v35 = 0;
  v36 = 1;
  if ((unint64_t)v6 >> 62)
    goto LABEL_15;
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v6);
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    v8 = 4;
    while (1)
    {
      v9 = (v6 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v6)
         : *(id *)(v6 + 8 * v8);
      v2 = v9;
      v10 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v34 = v9;
      sub_1000A184C(&v34, &v39, (uint64_t)&v38, &v37, (uint64_t)&v35);
      if (v1)
      {
        swift_bridgeObjectRelease_n(v6, 2);

        goto LABEL_29;
      }

      ++v8;
      if (v10 == v7)
      {
        v11 = swift_bridgeObjectRelease_n(v6, 2);
        v12 = (uint64_t)v39;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_15:
    if (v6 < 0)
      v16 = v6;
    else
      v16 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
  }
  v11 = swift_bridgeObjectRelease_n(v6, 2);
  v12 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_20:
  if ((unint64_t)v12 >> 62)
  {
    if (v12 < 0)
      v31 = v12;
    else
      v31 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v32 = _CocoaArrayWrapper.endIndex.getter(v31);
    v11 = swift_bridgeObjectRelease(v12);
    if (!v32)
      goto LABEL_26;
  }
  else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_26;
  }
  v17 = v38;
  if ((unint64_t)v38 >> 62)
  {
    if (v38 < 0)
      v33 = v38;
    else
      v33 = v38 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v38);
    v2 = (id)_CocoaArrayWrapper.endIndex.getter(v33);
    v11 = swift_bridgeObjectRelease(v17);
    if (v2)
    {
LABEL_24:
      if ((v37 & 0x100) == 0 && (v36 & 1) == 0)
      {
        v26 = v37;
        v27 = v35;
        v28 = objc_allocWithZone((Class)NIAcwgM1Msg);
        sub_10006C25C(0, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v17);
        v29 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v12);
        v30 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v17);
        v2 = objc_msgSend(v28, "initWithSupportedUwbConfigIds:supportedPulseShapeCombos:channelBitmask:uwbSessionId:", v29, v30, v26, v27);
        swift_bridgeObjectRelease(v12);
        swift_bridgeObjectRelease(v17);

        return v2;
      }
    }
  }
  else
  {
    v2 = *(id *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_24;
  }
LABEL_26:
  v18 = Logger.logObject.getter(v11);
  v20 = static os_log_type_t.error.getter(v18, v19);
  if (os_log_type_enabled(v18, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v20, "expected values not found while parsng M1 message", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = sub_10006B828();
  v23 = swift_allocError(&type metadata for DSKError, v22, 0, 0);
  *v24 = 0;
  swift_willThrow(v23);
LABEL_29:
  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(v39);
  return v2;
}

id sub_1000A06BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v7;
  Class isa;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _DWORD *v46;
  uint8_t *buf;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE v51[8];
  id v52;
  __int16 v53;
  __int16 v54;
  unsigned int v55;
  char v56;
  __int16 v57;
  __int16 v58;
  __int16 v59;
  __int16 v60;

  v4 = v3;
  v7 = (void *)objc_opt_self(SESTLV);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v9 = objc_msgSend(v7, "TLVsWithData:", isa);

  if (v9)
  {
    v11 = sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v11);

    v60 = 256;
    v59 = 256;
    v58 = 256;
    v57 = 256;
    v55 = 0;
    v56 = 1;
    v54 = 256;
    v53 = 256;
    if ((unint64_t)v12 >> 62)
    {
LABEL_26:
      if (v12 < 0)
        v40 = v12;
      else
        v40 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
      v13 = _CocoaArrayWrapper.endIndex.getter(v40);
      if (v13)
      {
LABEL_4:
        v49 = a2;
        a2 = 4;
        do
        {
          if ((v12 & 0xC000000000000001) != 0)
            v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2 - 4, v12);
          else
            v14 = *(id *)(v12 + 8 * a2);
          v15 = v14;
          v16 = a2 - 3;
          if (__OFADD__(a2 - 4, 1))
          {
            __break(1u);
            goto LABEL_26;
          }
          v52 = v14;
          v45 = v2;
          sub_1000A1FA0(&v52, &v60, &v59, &v58, &v57, (uint64_t)&v55, &v54, &v53);
          if (v4)
          {
            swift_bridgeObjectRelease_n(v12, 2);

            sub_100063C8C(a1, v49);
            v24 = sub_100063C8C(a1, v49);
            v25 = Logger.logObject.getter(v24);
            v27 = static os_log_type_t.error.getter(v25, v26);
            if (os_log_type_enabled(v25, v27))
            {
              v28 = (uint8_t *)swift_slowAlloc(12, -1);
              v48 = (void *)swift_slowAlloc(32, -1);
              v52 = v48;
              *(_DWORD *)v28 = 136315138;
              v29 = v28 + 12;
              v46 = v28 + 4;
              buf = v28;
              sub_1001BD2CC(a1, v49);
              v31 = v30;
              v32 = sub_100063D3C((uint64_t *)&unk_100346060);
              v33 = sub_10006B86C();
              v34 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v32, v33);
              v36 = v35;
              swift_bridgeObjectRelease(v31);
              v50 = sub_1001C56EC(v34, v36, (uint64_t *)&v52);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v46, v29);
              swift_bridgeObjectRelease(v36);
              sub_100063CD0(a1, v49);
              sub_100063CD0(a1, v49);
              _os_log_impl((void *)&_mh_execute_header, v25, v27, "Incorrectly formatted TLV while parsing for M3: %s", buf, 0xCu);
              swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v48, -1, -1);
              swift_slowDealloc(buf, -1, -1);

            }
            else
            {

              sub_100063CD0(a1, v49);
              sub_100063CD0(a1, v49);
            }
            v37 = sub_10006B828();
            v38 = swift_allocError(&type metadata for DSKError, v37, 0, 0);
            *v39 = 0;
            swift_willThrow(v38);
            return (id)swift_errorRelease(v4);
          }

          ++a2;
        }
        while (v16 != v13);
        v17 = swift_bridgeObjectRelease_n(v12, 2);
        if ((v60 & 0x100) == 0
          && (v59 & 0x100) == 0
          && (v58 & 0x100) == 0
          && (v57 & 0x100) == 0
          && (v56 & 1) == 0
          && (v54 & 0x100) == 0
          && (v53 & 0x100) == 0)
        {
          LOBYTE(v45) = v53;
          return objc_msgSend(objc_allocWithZone((Class)NIAcwgM3Msg), "initWithSelectedRanMultiplier:selectedNumChapsPerSlot:numResponders:numSlotsPerRound:supportedSyncCodeIndexBitmask:selectedHoppingConfigBitmask:macMode:", v60, v59, v58, v57, v55, v54, v45);
        }
LABEL_31:
        v19 = Logger.logObject.getter(v17);
        v21 = static os_log_type_t.error.getter(v19, v41);
        if (os_log_type_enabled(v19, v21))
        {
          v22 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v22 = 0;
          v23 = "expected values not found while parsing M3 message";
          goto LABEL_33;
        }
        goto LABEL_34;
      }
    }
    else
    {
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v12);
      if (v13)
        goto LABEL_4;
    }
    v17 = swift_bridgeObjectRelease_n(v12, 2);
    goto LABEL_31;
  }
  v19 = Logger.logObject.getter(v10);
  v21 = static os_log_type_t.error.getter(v19, v20);
  if (os_log_type_enabled(v19, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    v23 = "Could not parse message for M1";
LABEL_33:
    _os_log_impl((void *)&_mh_execute_header, v19, v21, v23, v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }
LABEL_34:

  v42 = sub_10006B828();
  v43 = swift_allocError(&type metadata for DSKError, v42, 0, 0);
  *v44 = 0;
  return (id)swift_willThrow(v43);
}

void sub_1000A0C08(uint64_t a1, unint64_t a2)
{
  void *v2;
  id v3;
  Class isa;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  NSObject *v18;
  uint64_t v19;
  os_log_type_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  unsigned int v29;
  uint64_t v30;

  v3 = v2;
  sub_100063C8C(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(a1, a2);
  v7 = objc_msgSend((id)objc_opt_self(SESTLV), "TLVWithData:", isa);

  if (v7)
  {
    if (objc_msgSend(v7, "tag") == 2)
    {
      v9 = objc_msgSend(v7, "value");
      if (v9)
      {
        v10 = v9;
        objc_msgSend(v9, "u32BE:", 0);

        return;
      }
      __break(1u);
LABEL_13:

      __break(1u);
      JUMPOUT(0x1000A0F90);
    }
    v3 = v7;
    v18 = Logger.logObject.getter(v3);
    v20 = static os_log_type_t.error.getter(v18, v19);
    if (os_log_type_enabled(v18, v20))
    {
      v21 = swift_slowAlloc(18, -1);
      *(_DWORD *)v21 = 67109376;
      v29 = objc_msgSend(v3, "tag");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v21 + 4, v21 + 8);
      *(_WORD *)(v21 + 8) = 2048;
      v22 = objc_msgSend(v3, "value");
      if (v22)
      {
        v23 = v22;
        static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
        v25 = v24;

        __asm { BR              X10 }
      }
      goto LABEL_13;
    }

    v26 = sub_10006B828();
    v27 = swift_allocError(&type metadata for DSKError, v26, 0, 0);
    *v28 = 0;
    swift_willThrow(v27);

  }
  else
  {
    v11 = Logger.logObject.getter(v8);
    v13 = static os_log_type_t.error.getter(v11, v12);
    if (os_log_type_enabled(v11, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v13, "Could not parse request ranging message", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    v15 = sub_10006B828();
    v16 = swift_allocError(&type metadata for DSKError, v15, 0, 0);
    *v17 = 0;
    swift_willThrow(v16);
  }
}

BOOL sub_1000A0FA0(uint64_t a1, unint64_t a2)
{
  void *v2;
  id v3;
  Class isa;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  BOOL v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  unsigned int v36;
  uint64_t v37;

  v3 = v2;
  sub_100063C8C(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(a1, a2);
  v7 = objc_msgSend((id)objc_opt_self(SESTLV), "TLVWithData:", isa);

  if (v7)
  {
    if (objc_msgSend(v7, "tag") == 17)
    {
      v9 = objc_msgSend(v7, "value");
      if (v9)
      {
        v10 = v9;
        v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v13 = v12;

        sub_1000723E8(v11, v13, 0);
        v15 = v14;

        if (!v2)
          return v15 == 0;
        return v16;
      }
      __break(1u);
    }
    else
    {
      v3 = v7;
      v24 = Logger.logObject.getter(v3);
      v26 = static os_log_type_t.error.getter(v24, v25);
      if (!os_log_type_enabled(v24, v26))
      {

        v32 = sub_10006B828();
        v33 = swift_allocError(&type metadata for DSKError, v32, 0, 0);
        *v34 = 0;
        swift_willThrow(v33);

        return v16;
      }
      v27 = swift_slowAlloc(18, -1);
      *(_DWORD *)v27 = 67109376;
      v36 = objc_msgSend(v3, "tag");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v27 + 4, v27 + 8);
      *(_WORD *)(v27 + 8) = 2048;
      v28 = objc_msgSend(v3, "value");
      if (v28)
      {
        v29 = v28;
        static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
        v31 = v30;

        __asm { BR              X10 }
      }
    }

    __break(1u);
    JUMPOUT(0x1000A134CLL);
  }
  v17 = Logger.logObject.getter(v8);
  v19 = static os_log_type_t.error.getter(v17, v18);
  if (os_log_type_enabled(v17, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v19, "Could not parse message for suspend request", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  v21 = sub_10006B828();
  v22 = swift_allocError(&type metadata for DSKError, v21, 0, 0);
  *v23 = 0;
  swift_willThrow(v22);
  return v16;
}

void sub_1000A135C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[3];

  v56 = a1;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = (void *)qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = v13;
  v15 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once(&qword_100344690, sub_100182BE4);
    goto LABEL_8;
  }
  v55 = v4;
  v16 = v4 + OBJC_IVAR____TtC10seserviced7LyonUWB_logger;
  v17 = swift_retain_n(a4, 2);
  v18 = Logger.logObject.getter(v17);
  v22 = static os_log_type_t.info.getter(v18, v19, v20, v21);
  if (os_log_type_enabled(v18, v22))
  {
    v23 = swift_slowAlloc(12, -1);
    v53 = v16;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc(32, -1);
    v58[0] = v25;
    v54 = a2;
    *(_DWORD *)v24 = 136315138;
    v26 = a3;
    v27 = type metadata accessor for UUID(0);
    v28 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v29 = v27;
    a3 = v26;
    v30 = dispatch thunk of CustomStringConvertible.description.getter(v29, v28);
    v32 = v31;
    v57 = sub_1001C56EC(v30, v31, v58);
    a2 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v24 + 4, v24 + 12);
    swift_release_n(a4, 2);
    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v18, v22, "Received BT TimeSync event for %s", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    swift_release_n(a4, 2);
  }

  if (qword_100344690 != -1)
    goto LABEL_17;
LABEL_8:
  v33 = qword_100354D70;
  swift_retain(a4);
  v34 = sub_1001977B8(v33, a4);
  swift_release(a4);
  v35 = (void *)sub_10009F654(v34, sub_100196CE0, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1001964DC);
  swift_bridgeObjectRelease(v34);
  if (v35)
  {
    if (*(unsigned __int8 *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) >= 5u)
    {
      sub_100184DF4(v56, a2, a3);

      return;
    }

  }
  v36 = swift_retain_n(a4, 2);
  v37 = Logger.logObject.getter(v36);
  v41 = static os_log_type_t.info.getter(v37, v38, v39, v40);
  if (os_log_type_enabled(v37, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v58[0] = v43;
    *(_DWORD *)v42 = 136315138;
    LOBYTE(v57) = *(_BYTE *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState);
    v44 = String.init<A>(describing:)(&v57, &type metadata for LyonSessionState);
    v45 = a3;
    v47 = v46;
    v57 = sub_1001C56EC(v44, v46, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v42 + 4, v42 + 12);
    swift_release_n(a4, 2);
    v48 = v47;
    a3 = v45;
    swift_bridgeObjectRelease(v48);
    _os_log_impl((void *)&_mh_execute_header, v37, v41, "Queuing timesync event as we are not ready to send in %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {
    swift_release_n(a4, 2);
  }

  v49 = a4 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  v50 = (uint64_t *)(v55 + OBJC_IVAR____TtC10seserviced7LyonUWB_pendingTimeSyncEvents);
  swift_beginAccess(v55 + OBJC_IVAR____TtC10seserviced7LyonUWB_pendingTimeSyncEvents, v58, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v50);
  v57 = *v50;
  *v50 = 0x8000000000000000;
  sub_10018DD50(v56, a2, a3, v49, isUniquelyReferenced_nonNull_native);
  v52 = *v50;
  *v50 = v57;
  swift_bridgeObjectRelease(v52);
  swift_endAccess(v58);
}

void sub_1000A184C(id *a1, id a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v5;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  uint8_t *v39;
  id v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  uint64_t v54;
  _BYTE v55[8];
  uint64_t v56;

  v9 = *a1;
  switch(objc_msgSend(*a1, "tag"))
  {
    case 0u:
      v10 = objc_msgSend(v9, "value");
      if (v10)
      {
        v11 = v10;
        static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
        v13 = v12;

        __asm { BR              X10 }
      }
      __break(1u);
      goto LABEL_22;
    case 1u:
      v14 = objc_msgSend(v9, "value");
      if (v14)
      {
        v15 = v14;
        static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
        v17 = v16;

        __asm { BR              X10 }
      }
LABEL_22:
      __break(1u);
      goto LABEL_23;
    case 2u:
      v18 = objc_msgSend(v9, "value");
      if (!v18)
      {
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:

        __break(1u);
        JUMPOUT(0x1000A1F3CLL);
      }
      v19 = v18;
      v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v22 = v21;

      sub_1000727AC(v20, v22, 0);
      if (!v5)
      {
        *(_DWORD *)a5 = v23;
        *(_BYTE *)(a5 + 4) = 0;
      }
      return;
    case 3u:
      v24 = objc_msgSend(v9, "value");
      if (!v24)
        goto LABEL_24;
      v25 = v24;
      v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v28 = v27;

      sub_1000723E8(v26, v28, 0);
      if (!v5)
      {
        *a4 = v29;
        a4[1] = 0;
      }
      return;
    case 0x10u:
      a2 = v9;
      v34 = Logger.logObject.getter(a2);
      v38 = static os_log_type_t.info.getter(v34, v35, v36, v37);
      if (!os_log_type_enabled(v34, v38))
      {

        return;
      }
      v53 = v38;
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v52 = swift_slowAlloc(32, -1);
      v56 = v52;
      *(_DWORD *)v39 = 136315138;
      v40 = objc_msgSend(a2, "value");
      if (v40)
      {
        v41 = v40;
        v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v40);
        v44 = v43;

        sub_1001BD2CC(v42, v44);
        v46 = v45;
        v47 = sub_100063D3C((uint64_t *)&unk_100346060);
        v48 = sub_10006B86C();
        v49 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v47, v48);
        v51 = v50;
        swift_bridgeObjectRelease(v46);
        sub_100063CD0(v42, v44);
        v54 = sub_1001C56EC(v49, v51, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v39 + 4, v39 + 12);

        swift_bridgeObjectRelease(v51);
        _os_log_impl((void *)&_mh_execute_header, v34, v53, "Ignoring vendor specific tag in M1 of value %s", v39, 0xCu);
        swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v39, -1, -1);

        return;
      }
      goto LABEL_25;
    default:
      v30 = v9;
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v33 = 67109120;
        LODWORD(v56) = objc_msgSend(v30, "tag");
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, (char *)&v56 + 4, v33 + 4, v33 + 8);

        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Unknown attribute tag %u in M1 message", v33, 8u);
        swift_slowDealloc(v33, -1, -1);
      }
      else
      {

      }
      return;
  }
}

void sub_1000A1FA0(id *a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, uint64_t a6, _BYTE *a7, _BYTE *a8)
{
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;

  v15 = *a1;
  switch(objc_msgSend(*a1, "tag"))
  {
    case 4u:
      v16 = objc_msgSend(v15, "value");
      if (!v16)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        JUMPOUT(0x1000A23A4);
      }
      v17 = v16;
      v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v20 = v19;

      sub_1000723E8(v18, v20, 0);
      if (!v62)
      {
        *a2 = v21;
        a2[1] = 0;
      }
      break;
    case 6u:
      v26 = objc_msgSend(v15, "value");
      if (!v26)
        goto LABEL_29;
      v27 = v26;
      v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v30 = v29;

      sub_1000727AC(v28, v30, 0);
      if (!v62)
      {
        *(_DWORD *)a6 = v31;
        *(_BYTE *)(a6 + 4) = 0;
      }
      break;
    case 8u:
      v32 = objc_msgSend(v15, "value");
      if (!v32)
        goto LABEL_30;
      v33 = v32;
      v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v36 = v35;

      sub_1000723E8(v34, v36, 0);
      if (!v62)
      {
        *a7 = v37;
        a7[1] = 0;
      }
      break;
    case 9u:
      v38 = objc_msgSend(v15, "value");
      if (!v38)
        goto LABEL_31;
      v39 = v38;
      v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v42 = v41;

      sub_1000723E8(v40, v42, 0);
      if (!v62)
      {
        *a3 = v43;
        a3[1] = 0;
      }
      break;
    case 0xAu:
      v56 = objc_msgSend(v15, "value");
      if (!v56)
        goto LABEL_34;
      v57 = v56;
      v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v60 = v59;

      sub_1000723E8(v58, v60, 0);
      if (!v62)
      {
        *a4 = v61;
        a4[1] = 0;
      }
      break;
    case 0xBu:
      v44 = objc_msgSend(v15, "value");
      if (!v44)
        goto LABEL_32;
      v45 = v44;
      v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v44);
      v48 = v47;

      sub_1000723E8(v46, v48, 0);
      if (!v62)
      {
        *a5 = v49;
        a5[1] = 0;
      }
      break;
    case 0xFu:
      v50 = objc_msgSend(v15, "value");
      if (!v50)
        goto LABEL_33;
      v51 = v50;
      v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v50);
      v54 = v53;

      sub_1000723E8(v52, v54, 0);
      if (!v62)
      {
        *a8 = v55;
        a8[1] = 0;
      }
      break;
    default:
      v22 = v15;
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v25 = 67109120;
        v63 = objc_msgSend(v22, "tag");
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v25 + 4, v25 + 8);

        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Ignoring nknown attribute tag %u in M3 message", v25, 8u);
        swift_slowDealloc(v25, -1, -1);
      }
      else
      {

      }
      return;
  }
}

void sub_1000A23D4(void *a1, uint64_t a2, __objc2_class **a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint32_t *p_cb;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint8_t *v29;
  id v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  Class isa;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  Class v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  Class v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  Class v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  Class v71;
  id v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  Class v76;
  id v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  Class v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  Class v86;
  id v87;
  void *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  uint8_t *v108;
  id v109;
  _QWORD v110[3];
  char v111[8];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (uint8_t **)((char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_36:
    swift_once(&qword_100344568, sub_100073158);
LABEL_13:
    sub_10007CD7C((uint64_t)a3, 0);
    swift_release(a3);
    swift_errorRelease(a2);
    return;
  }
  if (*a3 != _TtC10seserviced8LyonPeer || !a3)
    return;
  p_cb = &OBJC_PROTOCOL___SESDarwinNotificationDelegate.cb;
  if (a2)
  {
    swift_retain(a3);
    v15 = swift_errorRetain(a2);
LABEL_8:
    swift_willThrow(v15);
    goto LABEL_9;
  }
  if (!a1)
  {
    v43 = sub_10006B828();
    a2 = swift_allocError(&type metadata for DSKError, v43, 0, 0);
    *v44 = 0;
    v15 = swift_retain(a3);
    goto LABEL_8;
  }
  v29 = (uint8_t *)(v3 + OBJC_IVAR____TtC10seserviced7LyonUWB_logger);
  swift_retain_n(a3, 3);
  v30 = a1;
  v108 = v29;
  v31 = Logger.logObject.getter(v30);
  v35 = static os_log_type_t.info.getter(v31, v32, v33, v34);
  if (os_log_type_enabled(v31, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = swift_slowAlloc(32, -1);
    v109 = v30;
    v38 = v37;
    *(_DWORD *)v36 = 136315138;
    v114 = v37;
    v39 = swift_retain(a3);
    v40 = UUID.uuidString.getter(v39);
    v42 = v41;
    swift_release(a3);
    v112 = sub_1001C56EC(v40, v42, &v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v36 + 4, v36 + 12);
    swift_release_n(a3, 2);
    swift_bridgeObjectRelease(v42);
    _os_log_impl((void *)&_mh_execute_header, v31, v35, "UWB Lyon session M2 message for %s", v36, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    v30 = v109;
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v36, -1, -1);
  }
  else
  {
    swift_release_n(a3, 2);
  }

  v45 = (void *)objc_opt_self(SESTLV);
  v46 = sub_100063D3C(&qword_100346220);
  v47 = swift_allocObject(v46, 88, 7);
  *(_OWORD *)(v47 + 16) = xmmword_100289240;
  LOWORD(v114) = __rev16(objc_msgSend(v30, "selectedUwbConfigId"));
  v48 = sub_100074C98((uint64_t)&v114, (uint64_t)&v114 + 2);
  v50 = v49;
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v48, v50);
  v52 = objc_msgSend(v45, "TLVWithTag:value:", 0, isa);

  if (!v52)
  {
    __break(1u);
    goto LABEL_38;
  }
  *(_QWORD *)(v47 + 32) = v52;
  LOBYTE(v114) = objc_msgSend(v30, "selectedPulseShapeCombo");
  v53 = sub_100074C98((uint64_t)&v114, (uint64_t)&v114 + 1);
  v55 = v54;
  v56 = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v53, v55);
  v57 = objc_msgSend(v45, "TLVWithTag:value:", 1, v56);

  if (!v57)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  *(_QWORD *)(v47 + 40) = v57;
  LOBYTE(v114) = objc_msgSend(v30, "selectedChannelBitmask");
  v58 = sub_100074C98((uint64_t)&v114, (uint64_t)&v114 + 1);
  v60 = v59;
  v61 = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v58, v60);
  v62 = objc_msgSend(v45, "TLVWithTag:value:", 3, v61);

  if (!v62)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  *(_QWORD *)(v47 + 48) = v62;
  LODWORD(v114) = bswap32(objc_msgSend(v30, "supportedSyncCodeIndexBitmask"));
  v63 = sub_100074C98((uint64_t)&v114, (uint64_t)&v114 + 4);
  v65 = v64;
  v66 = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v63, v65);
  v67 = objc_msgSend(v45, "TLVWithTag:value:", 6, v66);

  if (!v67)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  *(_QWORD *)(v47 + 56) = v67;
  LOBYTE(v114) = objc_msgSend(v30, "minRanMultiplier");
  v68 = sub_100074C98((uint64_t)&v114, (uint64_t)&v114 + 1);
  v70 = v69;
  v71 = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v68, v70);
  v72 = objc_msgSend(v45, "TLVWithTag:value:", 4, v71);

  if (!v72)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  *(_QWORD *)(v47 + 64) = v72;
  LOBYTE(v114) = objc_msgSend(v30, "supportedSlotBitmask");
  v73 = sub_100074C98((uint64_t)&v114, (uint64_t)&v114 + 1);
  v75 = v74;
  v76 = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v73, v75);
  v77 = objc_msgSend(v45, "TLVWithTag:value:", 5, v76);

  if (!v77)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v78 = v30;
  *(_QWORD *)(v47 + 72) = v77;
  LOBYTE(v114) = objc_msgSend(v30, "supportedHoppingConfigBitmask");
  v79 = sub_100074C98((uint64_t)&v114, (uint64_t)&v114 + 1);
  v81 = v80;
  v82 = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v79, v81);
  v83 = objc_msgSend(v45, "TLVWithTag:value:", 8, v82);

  if (!v83)
  {
LABEL_43:
    __break(1u);
    return;
  }
  *(_QWORD *)(v47 + 80) = v83;
  v114 = v47;
  specialized Array._endMutation()(v84);
  v85 = v114;
  sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
  v86 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v85);
  v87 = objc_msgSend(v45, "dataWithTLVs:", v86);

  p_cb = &OBJC_PROTOCOL___SESDarwinNotificationDelegate.cb;
  if (!v87)
  {
    v93 = swift_retain_n(a3, 2);
    v94 = Logger.logObject.getter(v93);
    v96 = static os_log_type_t.error.getter(v94, v95);
    if (os_log_type_enabled(v94, v96))
    {
      v97 = (uint8_t *)swift_slowAlloc(12, -1);
      v98 = swift_slowAlloc(32, -1);
      *(_DWORD *)v97 = 136315138;
      v114 = v98;
      v108 = v97 + 4;
      v99 = swift_retain(a3);
      v100 = UUID.uuidString.getter(v99);
      v109 = v78;
      v102 = v101;
      swift_release(a3);
      v112 = sub_1001C56EC(v100, v102, &v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v108, v97 + 12);
      swift_release_n(a3, 2);
      v103 = v102;
      p_cb = &OBJC_PROTOCOL___SESDarwinNotificationDelegate.cb;
      v78 = v109;
      swift_bridgeObjectRelease(v103);
      _os_log_impl((void *)&_mh_execute_header, v94, v96, "UWB Lyon session M2 message for %s could not be created", v97, 0xCu);
      swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v98, -1, -1);
      swift_slowDealloc(v97, -1, -1);
    }
    else
    {
      swift_release_n(a3, 2);
    }

    v104 = sub_10006B828();
    a2 = swift_allocError(&type metadata for DSKError, v104, 0, 0);
    *v105 = 0;
    swift_willThrow(a2);

LABEL_9:
    swift_retain(a3);
    swift_errorRetain(a2);
    swift_retain(a3);
    v16 = swift_errorRetain(a2);
    v17 = Logger.logObject.getter(v16);
    v19 = static os_log_type_t.error.getter(v17, v18);
    if (os_log_type_enabled(v17, v19))
    {
      v20 = swift_slowAlloc(22, -1);
      v21 = swift_slowAlloc(64, -1);
      v114 = v21;
      *(_DWORD *)v20 = 136315394;
      v22 = swift_retain(a3);
      v23 = UUID.uuidString.getter(v22);
      v25 = v24;
      swift_release(a3);
      v112 = sub_1001C56EC(v23, v25, &v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v20 + 4, v20 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v25);
      *(_WORD *)(v20 + 12) = 2080;
      swift_getErrorValue(a2, v111, v110);
      v26 = Error.localizedDescription.getter(v110[1], v110[2]);
      v28 = v27;
      v112 = sub_1001C56EC(v26, v27, &v114);
      p_cb = (_DWORD *)(&OBJC_PROTOCOL___SESDarwinNotificationDelegate + 64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v20 + 14, v20 + 22);
      swift_bridgeObjectRelease(v28);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v17, v19, "Failed to process M2 message for %s %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {
      swift_release_n(a3, 2);

      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }
    if (*((_QWORD *)p_cb + 173) == -1)
      goto LABEL_13;
    goto LABEL_36;
  }
  v88 = v78;
  v89 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v87);
  v91 = v90;

  if (qword_100344568 != -1)
    swift_once(&qword_100344568, sub_100073158);
  v92 = qword_100354A80;
  sub_10007CAB8(1, 1, v89, v91, (uint64_t)a3);
  sub_1001A37EC(1);
  v106 = swift_allocObject(&unk_100307ED0, 24, 7);
  swift_weakInit(v106 + 16, a3);
  v107 = swift_allocObject(&unk_100307FC0, 40, 7);
  *(_QWORD *)(v107 + 16) = v106;
  *(_BYTE *)(v107 + 24) = 0;
  *(_QWORD *)(v107 + 32) = v92;
  v109 = (id)v106;
  swift_retain(v106);
  swift_retain(v92);
  sub_1001A3C14(0, (uint64_t)sub_10006C2C4, v107);
  swift_release(a3);
  swift_release(v109);
  swift_release(v107);
  sub_100063CD0(v89, v91);

}

void sub_1000A2FC0(void *a1, uint64_t a2, __objc2_class **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint32_t *p_cb;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  Class isa;
  void *v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  Class v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  Class v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  Class v71;
  id v72;
  uint64_t v73;
  unint64_t v74;
  Class v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  BOOL v92;
  int v93;
  id v94;
  unint64_t v95;
  _BYTE *v96;
  int v97;
  uint64_t v98;
  uint8_t *v99;
  uint64_t v100;
  id v101;
  _QWORD v102[3];
  _BYTE v103[8];
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;

  v4 = v3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_40:
    swift_once(&qword_100344568, sub_100073158);
LABEL_13:
    sub_10007CD7C((uint64_t)a3, 0);
    swift_release(a3);
    swift_errorRelease(a2);
    return;
  }
  if (*a3 == _TtC10seserviced8LyonPeer && a3)
  {
    p_cb = &OBJC_PROTOCOL___SESDarwinNotificationDelegate.cb;
    if (a2)
    {
      swift_retain(a3);
      v16 = swift_errorRetain(a2);
LABEL_8:
      swift_willThrow(v16);
      goto LABEL_9;
    }
    if (!a1)
    {
      v33 = sub_10006B828();
      a2 = swift_allocError(&type metadata for DSKError, v33, 0, 0);
      *v34 = 0;
      v16 = swift_retain(a3);
      goto LABEL_8;
    }
    v31 = qword_100344568;
    swift_retain(a3);
    v32 = a1;
    if (v31 != -1)
      swift_once(&qword_100344568, sub_100073158);
    sub_1001A37EC(1);
    v35 = v4 + OBJC_IVAR____TtC10seserviced7LyonUWB_logger;
    v36 = swift_retain_n(a3, 2);
    v100 = v35;
    v37 = Logger.logObject.getter(v36);
    v41 = static os_log_type_t.info.getter(v37, v38, v39, v40);
    v42 = os_log_type_enabled(v37, v41);
    v101 = v32;
    if (v42)
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      *(_DWORD *)v43 = 136315138;
      v106 = v44;
      v99 = v43 + 4;
      v45 = swift_retain(a3);
      v46 = UUID.uuidString.getter(v45);
      v48 = v47;
      swift_release(a3);
      v104 = sub_1001C56EC(v46, v48, (uint64_t *)&v106);
      v32 = v101;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v99, v43 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v48);
      _os_log_impl((void *)&_mh_execute_header, v37, v41, "UWB Lyon session M4 message for %s", v43, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      swift_release_n(a3, 2);
    }

    v49 = (void *)objc_opt_self(SESTLV);
    v50 = sub_100063D3C(&qword_100346220);
    v51 = swift_allocObject(v50, 64, 7);
    *(_OWORD *)(v51 + 16) = xmmword_100289250;
    LODWORD(v106) = bswap32(objc_msgSend(v32, "stsIndex0"));
    v52 = sub_100074C98((uint64_t)&v106, (uint64_t)&v106 + 4);
    v54 = v53;
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100063CD0(v52, v54);
    v56 = v32;
    v57 = objc_msgSend(v49, "TLVWithTag:value:", 12, isa);

    if (v57)
    {
      *(_QWORD *)(v51 + 32) = v57;
      v106 = bswap64((unint64_t)objc_msgSend(v56, "uwbTime0"));
      v58 = sub_100074C98((uint64_t)&v106, (uint64_t)&v107);
      v60 = v59;
      v61 = Data._bridgeToObjectiveC()().super.isa;
      sub_100063CD0(v58, v60);
      v62 = objc_msgSend(v49, "TLVWithTag:value:", 13, v61);

      if (v62)
      {
        *(_QWORD *)(v51 + 40) = v62;
        LODWORD(v106) = bswap32(objc_msgSend(v56, "hopKey"));
        v63 = sub_100074C98((uint64_t)&v106, (uint64_t)&v106 + 4);
        v65 = v64;
        v66 = Data._bridgeToObjectiveC()().super.isa;
        sub_100063CD0(v63, v65);
        v67 = objc_msgSend(v49, "TLVWithTag:value:", 14, v66);

        if (v67)
        {
          *(_QWORD *)(v51 + 48) = v67;
          LOBYTE(v106) = objc_msgSend(v56, "selectedSyncCodeIndex");
          v68 = sub_100074C98((uint64_t)&v106, (uint64_t)&v106 + 1);
          v70 = v69;
          v71 = Data._bridgeToObjectiveC()().super.isa;
          sub_100063CD0(v68, v70);
          v72 = objc_msgSend(v49, "TLVWithTag:value:", 7, v71);

          if (v72)
          {
            *(_QWORD *)(v51 + 56) = v72;
            v106 = v51;
            specialized Array._endMutation()(v73);
            v74 = v106;
            sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
            v75 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v74);
            v76 = objc_msgSend(v49, "dataWithTLVs:", v75);

            if (v76)
            {
              v77 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v76);
              v79 = v78;

              v80 = 0;
              sub_10007CAB8(1, 3, v77, v79, (uint64_t)a3);
              sub_100063CD0(v77, v79);

              *((_BYTE *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) = 10;
              if (*(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_lastTransactionIntent) != 1)
              {
                v90 = OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedRangingCount;
                v97 = *(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedRangingCount);
                v92 = __CFADD__(v97, 1);
                v93 = v97 + 1;
                if (v92)
                  __break(1u);
                goto LABEL_38;
              }
              v90 = OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedRangingCount;
              v91 = *(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedRangingCount);
              v92 = __CFADD__(v91, 1);
              v93 = v91 + 1;
              if (!v92)
              {
LABEL_38:
                *(_DWORD *)((char *)a3 + v90) = v93;
                swift_release(a3);
                return;
              }
              __break(1u);
            }
            else
            {
              v81 = swift_retain_n(a3, 2);
              v80 = Logger.logObject.getter(v81);
              v83 = static os_log_type_t.error.getter(v80, v82);
              if (os_log_type_enabled(v80, v83))
              {
                v84 = (uint8_t *)swift_slowAlloc(12, -1);
                v85 = swift_slowAlloc(32, -1);
                *(_DWORD *)v84 = 136315138;
                v106 = v85;
                v86 = swift_retain(a3);
                v87 = UUID.uuidString.getter(v86);
                v89 = v88;
                swift_release(a3);
                v104 = sub_1001C56EC(v87, v89, (uint64_t *)&v106);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v84 + 4, v84 + 12);
                swift_release_n(a3, 2);
                swift_bridgeObjectRelease(v89);
                _os_log_impl((void *)&_mh_execute_header, v80, v83, "UWB Lyon session M4 message for %s could not be created", v84, 0xCu);
                swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v85, -1, -1);
                swift_slowDealloc(v84, -1, -1);
LABEL_36:

                p_cb = (_DWORD *)(&OBJC_PROTOCOL___SESDarwinNotificationDelegate + 64);
                v94 = v101;
                v95 = sub_10006B828();
                a2 = swift_allocError(&type metadata for DSKError, v95, 0, 0);
                *v96 = 0;
                swift_willThrow(a2);

LABEL_9:
                swift_retain(a3);
                swift_errorRetain(a2);
                swift_retain(a3);
                v17 = swift_errorRetain(a2);
                v18 = Logger.logObject.getter(v17);
                v20 = static os_log_type_t.error.getter(v18, v19);
                if (os_log_type_enabled(v18, v20))
                {
                  v21 = swift_slowAlloc(22, -1);
                  v22 = swift_slowAlloc(64, -1);
                  v106 = v22;
                  *(_DWORD *)v21 = 136315394;
                  v23 = swift_retain(a3);
                  v24 = UUID.uuidString.getter(v23);
                  v26 = v25;
                  swift_release(a3);
                  v104 = sub_1001C56EC(v24, v26, (uint64_t *)&v106);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v21 + 4, v21 + 12);
                  swift_release_n(a3, 2);
                  swift_bridgeObjectRelease(v26);
                  *(_WORD *)(v21 + 12) = 2080;
                  swift_getErrorValue(a2, v103, v102);
                  v27 = Error.localizedDescription.getter(v102[1], v102[2]);
                  v29 = v28;
                  v104 = sub_1001C56EC(v27, v28, (uint64_t *)&v106);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v21 + 14, v21 + 22);
                  swift_bridgeObjectRelease(v29);
                  swift_errorRelease(a2);
                  swift_errorRelease(a2);
                  _os_log_impl((void *)&_mh_execute_header, v18, v20, "Failed to process M4 message for %s %s", (uint8_t *)v21, 0x16u);
                  swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
                  v30 = v22;
                  p_cb = (_DWORD *)(&OBJC_PROTOCOL___SESDarwinNotificationDelegate + 64);
                  swift_slowDealloc(v30, -1, -1);
                  swift_slowDealloc(v21, -1, -1);

                }
                else
                {
                  swift_release_n(a3, 2);

                  swift_errorRelease(a2);
                  swift_errorRelease(a2);
                }
                if (*((_QWORD *)p_cb + 173) == -1)
                  goto LABEL_13;
                goto LABEL_40;
              }
            }
            swift_release_n(a3, 2);
            goto LABEL_36;
          }
LABEL_45:
          __break(1u);
          return;
        }
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_44;
  }
}

void sub_1000A3A18(void *a1, uint64_t a2, __objc2_class **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint32_t *p_cb;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  Class isa;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  Class v41;
  id v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  os_log_type_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  id v63;
  unsigned __int8 v64;
  int v65;
  _DWORD *v66;
  int v67;
  BOOL v68;
  int v69;
  int v70;
  uint64_t v71;
  id v72;
  _QWORD v73[3];
  _BYTE v74[8];
  uint64_t v75;
  uint64_t v76;
  __int128 v77;

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_39:
    swift_once(&qword_100344568, sub_100073158);
    goto LABEL_25;
  }
  if (*a3 != _TtC10seserviced8LyonPeer || !a3)
    return;
  p_cb = &OBJC_PROTOCOL___SESDarwinNotificationDelegate.cb;
  if (!a2)
  {
    if (!a1)
    {
      v26 = sub_10006B828();
      a2 = swift_allocError(&type metadata for DSKError, v26, 0, 0);
      *v27 = 0;
      v14 = swift_retain(a3);
      goto LABEL_8;
    }
    swift_retain_n(a3, 3);
    v72 = a1;
    v15 = Logger.logObject.getter(v72);
    v19 = static os_log_type_t.info.getter(v15, v16, v17, v18);
    if (os_log_type_enabled(v15, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      *(_DWORD *)v20 = 136315138;
      *(_QWORD *)&v77 = v21;
      v22 = swift_retain(a3);
      v23 = UUID.uuidString.getter(v22);
      v25 = v24;
      swift_release(a3);
      v75 = sub_1001C56EC(v23, v25, (uint64_t *)&v77);
      p_cb = (_DWORD *)(&OBJC_PROTOCOL___SESDarwinNotificationDelegate + 64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v20 + 4, v20 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v15, v19, "UWB Lyon session Ranging response message for %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      swift_release_n(a3, 2);
    }

    v77 = xmmword_1002889A0;
    LODWORD(v75) = bswap32(objc_msgSend(v72, "stsIndex0"));
    v28 = sub_100074C98((uint64_t)&v75, (uint64_t)&v75 + 4);
    v30 = v29;
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100063CD0(v28, v30);
    v32 = (void *)objc_opt_self(SESTLV);
    v33 = objc_msgSend(v32, "TLVWithTag:value:", 12, isa);

    if (v33)
    {
      v34 = objc_msgSend(v33, "asData");

      if (v34)
      {
        v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);
        v37 = v36;

        Data.append(_:)(v35, v37);
        sub_100063CD0(v35, v37);
        v75 = bswap64((unint64_t)objc_msgSend(v72, "uwbTime0"));
        v38 = sub_100074C98((uint64_t)&v75, (uint64_t)&v76);
        v40 = v39;
        v41 = Data._bridgeToObjectiveC()().super.isa;
        sub_100063CD0(v38, v40);
        v42 = objc_msgSend(v32, "TLVWithTag:value:", 13, v41);

        if (v42)
        {
          v43 = objc_msgSend(v42, "asData");

          if (v43)
          {
            v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v43);
            v46 = v45;

            Data.append(_:)(v44, v46);
            sub_100063CD0(v44, v46);
            *((_BYTE *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) = 10;
            if (*((_QWORD *)p_cb + 173) != -1)
              swift_once(&qword_100344568, sub_100073158);
            v47 = v77;
            sub_100063C8C(v77, *((unint64_t *)&v77 + 1));
            sub_10007CAB8(1, 7, v47, *((unint64_t *)&v47 + 1), (uint64_t)a3);
            sub_100063CD0(v47, *((unint64_t *)&v47 + 1));
            sub_1001A37EC(1);

            v65 = *(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_lastTransactionIntent);
            sub_100063CD0(v47, *((unint64_t *)&v47 + 1));
            if (v65 == 1)
            {
              v66 = (_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedRangingCount);
              v67 = *(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedRangingCount);
              v68 = __CFADD__(v67, 1);
              v69 = v67 + 1;
              if (!v68)
              {
LABEL_37:
                *v66 = v69;
                swift_release(a3);
                return;
              }
              __break(1u);
            }
            v66 = (_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedRangingCount);
            v70 = *(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedRangingCount);
            v68 = __CFADD__(v70, 1);
            v69 = v70 + 1;
            if (v68)
              __break(1u);
            goto LABEL_37;
          }
LABEL_44:
          __break(1u);
          return;
        }
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_43;
  }
  swift_retain(a3);
  v14 = swift_errorRetain(a2);
LABEL_8:
  swift_willThrow(v14);
  swift_retain(a3);
  swift_errorRetain(a2);
  swift_retain(a3);
  v48 = swift_errorRetain(a2);
  v49 = Logger.logObject.getter(v48);
  v51 = static os_log_type_t.error.getter(v49, v50);
  if (os_log_type_enabled(v49, v51))
  {
    v53 = swift_slowAlloc(22, -1);
    v54 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v77 = v54;
    *(_DWORD *)v53 = 136315394;
    v55 = swift_retain(a3);
    v56 = UUID.uuidString.getter(v55);
    v58 = v57;
    swift_release(a3);
    v75 = sub_1001C56EC(v56, v58, (uint64_t *)&v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v53 + 4, v53 + 12);
    swift_release_n(a3, 2);
    swift_bridgeObjectRelease(v58);
    *(_WORD *)(v53 + 12) = 2080;
    swift_getErrorValue(a2, v74, v73);
    v59 = Error.localizedDescription.getter(v73[1], v73[2]);
    v61 = v60;
    v75 = sub_1001C56EC(v59, v60, (uint64_t *)&v77);
    p_cb = (_DWORD *)(&OBJC_PROTOCOL___SESDarwinNotificationDelegate + 64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v53 + 14, v53 + 22);
    swift_bridgeObjectRelease(v61);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v49, v51, "Failed to process resume request for %s %s", (uint8_t *)v53, 0x16u);
    swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v53, -1, -1);

  }
  else
  {
    swift_release_n(a3, 2);

    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }
  if (*((_QWORD *)p_cb + 173) != -1)
    goto LABEL_39;
LABEL_25:
  v62 = (void *)_convertErrorToNSError(_:)(a2);
  v63 = objc_msgSend(v62, "code");

  if (v63 == (id)-19703)
  {
    v64 = 3;
  }
  else if (v63 == (id)-19702)
  {
    v64 = 2;
  }
  else
  {
    v64 = v63 == (id)-19701;
  }
  sub_10007CD7C((uint64_t)a3, v64);
  swift_release(a3);
  swift_errorRelease(a2);
}

void sub_1000A4258(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  void *v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = (void *)qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = v8;
  v10 = _dispatchPreconditionTest(_:)(v7);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4) & 1) != 0)
  {
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "We should have cached the sessionID while parsing M1", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    return;
  }
  v1 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) == 10)
  {
    v15 = objc_msgSend((id)objc_opt_self(SESTLV), "TLVWithTag:unsignedLongValue:", 2, bswap32(*(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID)));
    if (v15)
    {
      v16 = v15;
      v17 = objc_msgSend(v15, "asData");

      if (v17)
      {
        v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
        v10 = v18;

        if (qword_100344568 == -1)
        {
LABEL_11:
          v19 = qword_100354A80;
          sub_10007CAB8(1, 4, v4, v10, a1);
          v20 = swift_allocObject(&unk_100307ED0, 24, 7);
          swift_weakInit(v20 + 16, a1);
          v21 = swift_allocObject(&unk_100307F20, 40, 7);
          *(_QWORD *)(v21 + 16) = v20;
          *(_BYTE *)(v21 + 24) = 0;
          *(_QWORD *)(v21 + 32) = v19;
          swift_retain(v20);
          swift_retain(v19);
          sub_1001A3C14(0, (uint64_t)sub_10006C2C4, v21);
          swift_release(v20);
          swift_release(v21);
          sub_100063CD0(v4, v10);
          *(_BYTE *)(a1 + v1) = 12;
          return;
        }
LABEL_18:
        swift_once(&qword_100344568, sub_100073158);
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
  v22 = swift_retain_n(a1, 2);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    *(_DWORD *)v25 = 136315138;
    v32 = v26;
    LOBYTE(v31) = *(_BYTE *)(a1 + v1);
    v27 = String.init<A>(describing:)(&v31, &type metadata for LyonSessionState);
    v29 = v28;
    v31 = sub_1001C56EC(v27, v28, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v25 + 4, v25 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Device state is %s, not sending pause ranging request", v25, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

}

uint64_t sub_1000A4730(uint64_t a1, __objc2_class **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t result;
  int v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  id v41;
  unsigned __int8 v42;
  uint64_t v43;
  int v44;
  _QWORD v45[3];
  _BYTE v46[8];
  uint64_t v47;
  uint64_t v48;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (*a2 == _TtC10seserviced8LyonPeer && a2)
  {
    if (!a1)
    {
      v28 = swift_retain_n(a2, 3);
      v29 = Logger.logObject.getter(v28);
      v33 = static os_log_type_t.info.getter(v29, v30, v31, v32);
      if (os_log_type_enabled(v29, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(12, -1);
        v35 = swift_slowAlloc(32, -1);
        *(_DWORD *)v34 = 136315138;
        v48 = v35;
        v36 = swift_retain(a2);
        v37 = UUID.uuidString.getter(v36);
        v39 = v38;
        swift_release(a2);
        v47 = sub_1001C56EC(v37, v39, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v34 + 4, v34 + 12);
        swift_release_n(a2, 2);
        swift_bridgeObjectRelease(v39);
        _os_log_impl((void *)&_mh_execute_header, v29, v33, "NI URSK prefetched for %s", v34, 0xCu);
        swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v35, -1, -1);
        swift_slowDealloc(v34, -1, -1);
      }
      else
      {
        swift_release_n(a2, 2);
      }

      if (qword_100344558 != -1)
        swift_once(&qword_100344558, sub_10006449C);
      sub_10006AD2C((uint64_t)a2);
      return swift_release(a2);
    }
    v12 = *(_DWORD *)((char *)a2 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID);
    v13 = *((unsigned __int8 *)a2 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4);
    swift_retain(a2);
    swift_errorRetain(a1);
    swift_retain(a2);
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    swift_retain(a2);
    sub_10006AD24();
    v14 = sub_10006AD24();
    v15 = Logger.logObject.getter(v14);
    v17 = static os_log_type_t.error.getter(v15, v16);
    if (os_log_type_enabled(v15, v17))
    {
      if (v13)
        v18 = 0;
      else
        v18 = v12;
      v44 = v18;
      v19 = swift_slowAlloc(28, -1);
      v20 = swift_slowAlloc(64, -1);
      v48 = v20;
      *(_DWORD *)v19 = 136315650;
      swift_getErrorValue(a1, v46, v45);
      v21 = Error.localizedDescription.getter(v45[1], v45[2]);
      v23 = v22;
      v47 = sub_1001C56EC(v21, v22, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v23);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      *(_WORD *)(v19 + 12) = 2080;
      v24 = swift_retain(a2);
      v25 = UUID.uuidString.getter(v24);
      v27 = v26;
      swift_release(a2);
      v47 = sub_1001C56EC(v25, v27, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v19 + 14, v19 + 22);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v27);
      *(_WORD *)(v19 + 22) = 1024;
      LODWORD(v47) = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 4, v19 + 24, v19 + 28);
      _os_log_impl((void *)&_mh_execute_header, v15, v17, "Failed to prefetch URSK %s for %s with session ID 0x%x", (uint8_t *)v19, 0x1Cu);
      swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_release_n(a2, 2);
    }
    if (qword_100344568 == -1)
    {
LABEL_16:
      v40 = (void *)_convertErrorToNSError(_:)(a1);
      v41 = objc_msgSend(v40, "code");

      if (v41 == (id)-19703)
      {
        v42 = 3;
      }
      else if (v41 == (id)-19702)
      {
        v42 = 2;
      }
      else
      {
        v42 = v41 == (id)-19701;
      }
      sub_10007CD7C((uint64_t)a2, v42);
      swift_errorRelease(a1);
      return swift_release(a2);
    }
LABEL_29:
    swift_once(&qword_100344568, sub_100073158);
    goto LABEL_16;
  }
  return result;
}

void sub_1000A4CAC(void *a1, uint64_t a2, __objc2_class **a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint32_t *p_cb;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  unsigned __int8 v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  Class isa;
  id v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  Class v60;
  id v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  Class v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  Class v70;
  id v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  Class v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  Class v80;
  id v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  Class v85;
  id v86;
  uint64_t v87;
  void *v88;
  unint64_t v89;
  Class v90;
  id v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  os_log_type_t v98;
  uint8_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  int v107;
  BOOL v108;
  int v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (uint64_t *)((char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_45:
    swift_once(&qword_100344568, sub_100073158);
LABEL_13:
    v30 = (void *)_convertErrorToNSError(_:)(a2);
    v31 = objc_msgSend(v30, "code");

    if (v31 == (id)-19703)
    {
      v32 = 3;
    }
    else if (v31 == (id)-19702)
    {
      v32 = 2;
    }
    else
    {
      v32 = v31 == (id)-19701;
    }
    sub_10007CD7C((uint64_t)a3, v32);
    swift_release(a3);
    swift_errorRelease(a2);
    return;
  }
  if (*a3 != _TtC10seserviced8LyonPeer || !a3)
    return;
  p_cb = &OBJC_PROTOCOL___SESDarwinNotificationDelegate.cb;
  if (a2)
  {
    swift_retain(a3);
    v15 = swift_errorRetain(a2);
LABEL_8:
    swift_willThrow(v15);
    goto LABEL_9;
  }
  if (!a1)
  {
    v47 = sub_10006B828();
    a2 = swift_allocError(&type metadata for DSKError, v47, 0, 0);
    *v48 = 0;
    v15 = swift_retain(a3);
    goto LABEL_8;
  }
  v33 = v3 + OBJC_IVAR____TtC10seserviced7LyonUWB_logger;
  swift_retain_n(a3, 3);
  v34 = a1;
  v110 = v33;
  v35 = Logger.logObject.getter(v34);
  v39 = static os_log_type_t.info.getter(v35, v36, v37, v38);
  if (os_log_type_enabled(v35, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v41 = swift_slowAlloc(32, -1);
    v111 = v34;
    v42 = v41;
    *(_DWORD *)v40 = 136315138;
    v114 = v41;
    v43 = swift_retain(a3);
    v44 = UUID.uuidString.getter(v43);
    v46 = v45;
    swift_release(a3);
    v112 = sub_1001C56EC(v44, v46, (uint64_t *)&v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v40 + 4, v40 + 12);
    swift_release_n(a3, 2);
    swift_bridgeObjectRelease(v46);
    _os_log_impl((void *)&_mh_execute_header, v35, v39, "NI timesync message for %s", v40, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    v34 = v111;
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v40, -1, -1);
  }
  else
  {
    swift_release_n(a3, 2);
  }

  v49 = (void *)objc_opt_self(SESTLV);
  v50 = sub_100063D3C(&qword_100346220);
  v51 = swift_allocObject(v50, 88, 7);
  *(_OWORD *)(v51 + 16) = xmmword_100289240;
  v114 = bswap64((unint64_t)objc_msgSend(v34, "deviceEventCount"));
  v52 = sub_100074C98((uint64_t)&v114, (uint64_t)&v115);
  v54 = v53;
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v52, v54);
  v56 = objc_msgSend(v49, "TLVWithTag:value:", 0, isa);

  if (!v56)
  {
    __break(1u);
    goto LABEL_48;
  }
  *(_QWORD *)(v51 + 32) = v56;
  v114 = bswap64((unint64_t)objc_msgSend(v34, "uwbDeviceTimeUs"));
  v57 = sub_100074C98((uint64_t)&v114, (uint64_t)&v115);
  v59 = v58;
  v60 = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v57, v59);
  v61 = objc_msgSend(v49, "TLVWithTag:value:", 1, v60);

  if (!v61)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  *(_QWORD *)(v51 + 40) = v61;
  LOBYTE(v114) = objc_msgSend(v34, "uwbDeviceTimeUncertainty");
  v62 = sub_100074C98((uint64_t)&v114, (uint64_t)&v114 + 1);
  v64 = v63;
  v65 = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v62, v64);
  v66 = objc_msgSend(v49, "TLVWithTag:value:", 2, v65);

  if (!v66)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  *(_QWORD *)(v51 + 48) = v66;
  LOBYTE(v114) = objc_msgSend(v34, "uwbClockSkewMeasurementAvailable");
  v67 = sub_100074C98((uint64_t)&v114, (uint64_t)&v114 + 1);
  v69 = v68;
  v70 = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v67, v69);
  v71 = objc_msgSend(v49, "TLVWithTag:value:", 3, v70);

  if (!v71)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  *(_QWORD *)(v51 + 56) = v71;
  LOWORD(v114) = __rev16(objc_msgSend(v34, "deviceMaxPpm"));
  v72 = sub_100074C98((uint64_t)&v114, (uint64_t)&v114 + 2);
  v74 = v73;
  v75 = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v72, v74);
  v76 = objc_msgSend(v49, "TLVWithTag:value:", 4, v75);

  if (!v76)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  *(_QWORD *)(v51 + 64) = v76;
  LOBYTE(v114) = objc_msgSend(v34, "success");
  v77 = sub_100074C98((uint64_t)&v114, (uint64_t)&v114 + 1);
  v79 = v78;
  v80 = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v77, v79);
  v81 = objc_msgSend(v49, "TLVWithTag:value:", 5, v80);

  if (!v81)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  *(_QWORD *)(v51 + 72) = v81;
  LOWORD(v114) = __rev16(objc_msgSend(v34, "retryDelay"));
  v82 = sub_100074C98((uint64_t)&v114, (uint64_t)&v114 + 2);
  v84 = v83;
  v85 = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v82, v84);
  v86 = objc_msgSend(v49, "TLVWithTag:value:", 6, v85);

  if (!v86)
  {
LABEL_53:
    __break(1u);
    return;
  }
  v88 = v34;
  *(_QWORD *)(v51 + 80) = v86;
  v114 = v51;
  specialized Array._endMutation()(v87);
  v89 = v114;
  sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
  v90 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v89);
  v91 = objc_msgSend(v49, "dataWithTLVs:", v90);

  p_cb = &OBJC_PROTOCOL___SESDarwinNotificationDelegate.cb;
  if (!v91)
  {
    v95 = swift_retain_n(a3, 2);
    v96 = Logger.logObject.getter(v95);
    v98 = static os_log_type_t.error.getter(v96, v97);
    if (os_log_type_enabled(v96, v98))
    {
      v99 = (uint8_t *)swift_slowAlloc(12, -1);
      v100 = swift_slowAlloc(32, -1);
      *(_DWORD *)v99 = 136315138;
      v114 = v100;
      v111 = v34;
      v101 = swift_retain(a3);
      v102 = UUID.uuidString.getter(v101);
      v104 = v103;
      swift_release(a3);
      v112 = sub_1001C56EC(v102, v104, (uint64_t *)&v114);
      v88 = v111;
      p_cb = (_DWORD *)(&OBJC_PROTOCOL___SESDarwinNotificationDelegate + 64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v99 + 4, v99 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v104);
      _os_log_impl((void *)&_mh_execute_header, v96, v98, "UWB Lyon session timesync message for %s could not be created", v99, 0xCu);
      swift_arrayDestroy(v100, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v100, -1, -1);
      swift_slowDealloc(v99, -1, -1);
    }
    else
    {
      swift_release_n(a3, 2);
    }

    v105 = sub_10006B828();
    a2 = swift_allocError(&type metadata for DSKError, v105, 0, 0);
    *v106 = 0;
    swift_willThrow(a2);

LABEL_9:
    swift_retain(a3);
    swift_errorRetain(a2);
    swift_retain(a3);
    v16 = swift_errorRetain(a2);
    v17 = Logger.logObject.getter(v16);
    v19 = static os_log_type_t.error.getter(v17, v18);
    if (os_log_type_enabled(v17, v19))
    {
      v20 = swift_slowAlloc(22, -1);
      v21 = (uint64_t *)swift_slowAlloc(8, -1);
      v22 = swift_slowAlloc(32, -1);
      v114 = v22;
      *(_DWORD *)v20 = 136315394;
      v23 = swift_retain(a3);
      v24 = UUID.uuidString.getter(v23);
      v26 = v25;
      swift_release(a3);
      v112 = sub_1001C56EC(v24, v26, (uint64_t *)&v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v20 + 4, v20 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v20 + 12) = 2112;
      swift_errorRetain(a2);
      v27 = _swift_stdlib_bridgeErrorToNSError(a2);
      v112 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v20 + 14, v20 + 22);
      *v21 = v27;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v17, v19, "Failed to process time sync for %s with %@", (uint8_t *)v20, 0x16u);
      v28 = sub_100063D3C((uint64_t *)&unk_100346090);
      swift_arrayDestroy(v21, 1, v28);
      swift_slowDealloc(v21, -1, -1);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      v29 = v22;
      p_cb = (_DWORD *)(&OBJC_PROTOCOL___SESDarwinNotificationDelegate + 64);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {
      swift_release_n(a3, 2);

      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }
    if (*((_QWORD *)p_cb + 173) == -1)
      goto LABEL_13;
    goto LABEL_45;
  }
  v92 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v91);
  v94 = v93;

  if (qword_100344568 != -1)
    swift_once(&qword_100344568, sub_100073158);
  sub_10007CAB8(3, 0, v92, v94, (uint64_t)a3);
  if (*((_BYTE *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) == 5)
  {
    *((_BYTE *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) = 6;
    sub_10009E0A0((uint64_t)a3);
    sub_100063CD0(v92, v94);
    swift_release(a3);

  }
  else
  {
    sub_100063CD0(v92, v94);

    v107 = *(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_timeSyncProcedure1Count);
    v108 = __CFADD__(v107, 1);
    v109 = v107 + 1;
    if (v108)
      __break(1u);
    *(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_timeSyncProcedure1Count) = v109;
    swift_release(a3);
  }
}

void sub_1000A58A8(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = a1;
  if ((a1 & 0x10000) != 0)
  {
    v6 = Logger.logObject.getter(a1);
    v8 = static os_log_type_t.error.getter(v6, v7);
    if (os_log_type_enabled(v6, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v17 = v10;
      *(_DWORD *)v9 = 136315138;
      v11 = sub_1000AAC04();
      v12 = Error.localizedDescription.getter(&type metadata for DSKBLE.BLEError, v11);
      v14 = v13;
      v16 = sub_1001C56EC(v12, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v6, v8, "Failed to retrieve the BLE connection handle %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }

    if (qword_100344568 != -1)
      swift_once(&qword_100344568, sub_100073158);
    sub_10007CD7C((uint64_t)a2, 0);
  }
  else
  {
    if (qword_100344690 != -1)
      swift_once(&qword_100344690, sub_100182BE4);
    swift_retain_n(a3, 13);
    v15 = (void *)sub_100181AD8(a2, v5, (uint64_t)sub_1000AAC48, a3, (uint64_t)sub_1000AAC4C, a3, (uint64_t)sub_1000AAC50, a3, (uint64_t)sub_1000AAC54, a3, (uint64_t)sub_1000AAC5C, a3, (uint64_t)sub_1000AAC60, a3, (uint64_t)sub_1000AAC64, a3, (uint64_t)sub_1000AAC68, a3, (uint64_t)sub_1000AAC6C,
                    a3,
                    (uint64_t)sub_1000AAC74,
                    a3,
                    (uint64_t)sub_1000AAC7C,
                    a3,
                    (uint64_t)sub_1000AAC84,
                    a3,
                    (uint64_t)sub_1000AAC8C,
                    a3);
    swift_release_n(a3, 13);

  }
}

void sub_1000A5CF8(__objc2_class **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  id v10;
  char v11;
  void (*v12)(_QWORD *, uint64_t);
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint8_t *v33;
  unsigned int v34;
  void (*v35)(_QWORD *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[2];

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = (void *)qword_100354EE8;
  *v6 = qword_100354EE8;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v3 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v10 = v7;
  v11 = _dispatchPreconditionTest(_:)(v6);
  v12 = *(void (**)(_QWORD *, uint64_t))(v3 + 8);
  v12(v6, v2);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once(&qword_100344668, sub_1001647D0);
LABEL_9:
    v30 = qword_100354EE8;
    *v6 = qword_100354EE8;
    v9(v6, v8, v2);
    v31 = (id)v30;
    LOBYTE(v30) = _dispatchPreconditionTest(_:)(v6);
    v12(v6, v2);
    if ((v30 & 1) != 0)
    {
      if (qword_1003445A0 == -1)
      {
LABEL_11:
        sub_1000B725C(-80, -85, 0, *((unsigned __int8 *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_peripheralTXPower), (uint64_t)a1);
        swift_release(a1);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once(&qword_1003445A0, sub_1000B26B0);
    goto LABEL_11;
  }
  v13 = swift_retain_n(a1, 2);
  v14 = Logger.logObject.getter(v13);
  v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
  if (os_log_type_enabled(v14, v18))
  {
    v19 = swift_slowAlloc(12, -1);
    v36 = v2;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v35 = v9;
    v22 = v21;
    v34 = v8;
    *(_DWORD *)v20 = 136315138;
    v38[0] = v21;
    v33 = v20 + 4;
    v23 = swift_retain(a1);
    v24 = UUID.uuidString.getter(v23);
    v26 = v25;
    swift_release(a1);
    v37 = sub_1001C56EC(v24, v26, v38);
    v8 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v33, v20 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v14, v18, "UWB Lyon session started running for %s", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v27 = v22;
    v9 = v35;
    swift_slowDealloc(v27, -1, -1);
    v28 = v20;
    v2 = v36;
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

  if (*a1 == _TtC10seserviced8LyonPeer)
  {
    v29 = qword_100344668;
    swift_retain(a1);
    if (v29 == -1)
      goto LABEL_9;
    goto LABEL_14;
  }
}

uint64_t sub_1000A603C(char a1, __objc2_class **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    swift_once(&qword_100344568, sub_100073158);
    goto LABEL_13;
  }
  if (*a2 != _TtC10seserviced8LyonPeer)
    return result;
  if ((a1 & 4) != 0)
  {
    v12 = OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason;
    v13 = 5;
  }
  else
  {
    v12 = OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason;
    if ((a1 & 2) != 0)
      v13 = 6;
    else
      v13 = 9;
  }
  *(_DWORD *)((char *)a2 + v12) = v13;
  v14 = swift_retain(a2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "UWB Lyon session suspended; disconnecting until uwb is resumed",
      v17,
      2u);
    swift_slowDealloc(v17, -1, -1);
  }

  sub_1000A6654((uint64_t)a2);
  if (qword_100344568 != -1)
    goto LABEL_16;
LABEL_13:
  sub_10007CD7C((uint64_t)a2, 1u);
  return swift_release(a2);
}

uint64_t sub_1000A6238(__objc2_class **a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t result;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25[2];

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint8_t **)((char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) != 0)
  {
    if (*a1 == _TtC10seserviced8LyonPeer && a1)
    {
      v11 = swift_retain_n(a1, 3);
      v12 = Logger.logObject.getter(v11);
      v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
      if (os_log_type_enabled(v12, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(12, -1);
        v18 = swift_slowAlloc(32, -1);
        *(_DWORD *)v17 = 136315138;
        v25[0] = v18;
        v23 = v17 + 4;
        v19 = swift_retain(a1);
        v20 = UUID.uuidString.getter(v19);
        v22 = v21;
        swift_release(a1);
        v24 = sub_1001C56EC(v20, v22, v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v23, v17 + 12);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v22);
        _os_log_impl((void *)&_mh_execute_header, v12, v16, "NI session resumed for %s", v17, 0xCu);
        swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);
      }
      else
      {
        swift_release_n(a1, 2);
      }

      sub_10009E0A0((uint64_t)a1);
      return swift_release(a1);
    }
  }
  else
  {
    __break(1u);
    swift_once(&qword_100344568, sub_100073158);
    sub_10007CD7C((uint64_t)a1, 1u);
    swift_release(a1);
    return swift_errorRelease(v1);
  }
  return result;
}

void sub_1000A6654(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25[2];

  v2 = swift_retain_n(a1, 4);
  v3 = Logger.logObject.getter(v2);
  v7 = static os_log_type_t.info.getter(v3, v4, v5, v6);
  if (os_log_type_enabled(v3, v7))
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v25[0] = v9;
    *(_DWORD *)v8 = 136315394;
    v10 = swift_retain(a1);
    v11 = UUID.uuidString.getter(v10);
    v13 = v12;
    swift_release(a1);
    v24 = sub_1001C56EC(v11, v13, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v8 + 4, v8 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v8 + 12) = 2080;
    LOBYTE(v24) = *(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState);
    v14 = String.init<A>(describing:)(&v24, &type metadata for LyonSessionState);
    v16 = v15;
    v24 = sub_1001C56EC(v14, v15, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v8 + 14, v8 + 22);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v3, v7, "Sending NI ranging paused notification %s in state %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_release_n(a1, 4);
  }

  v17 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) != 10)
    goto LABEL_10;
  if (qword_100344568 != -1)
    swift_once(&qword_100344568, sub_100073158);
  v18 = objc_msgSend((id)objc_opt_self(SESTLV), "TLVWithTag:value:", 5, 0);
  if (v18)
  {
    v19 = v18;
    v20 = objc_msgSend(v18, "asData");

    if (v20)
    {
      v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = v22;

      sub_10007CAB8(2, 1, v21, v23, a1);
      sub_100063CD0(v21, v23);
LABEL_10:
      *(_BYTE *)(a1 + v17) = 14;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1000A6A88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint8_t *v17;
  const char *v18;
  os_log_type_t v19;
  uint8_t *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v24;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    if (qword_100344690 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344690, sub_100182BE4);
LABEL_5:
  v9 = qword_100354D70;
  swift_retain(a1);
  v10 = sub_1001977B8(v9, a1);
  swift_release(a1);
  v11 = sub_10009F654(v10, sub_100196CE0, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1001964DC);
  v12 = swift_bridgeObjectRelease(v10);
  if (v11)
  {
    v13 = type metadata accessor for UWBLyonSession();
    v14 = swift_dynamicCastClass(v11, v13);
    if (v14)
    {
      v15 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState);
      if (v15 == 13 || v15 == 10)
      {
        if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4) & 1) == 0)
        {
          sub_100180FBC(*(unsigned int *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID), 107);
          sub_1000A6654(a1);
          goto LABEL_23;
        }
        v21 = Logger.logObject.getter(v14);
        v22 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v21, v22))
          goto LABEL_21;
        v17 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v17 = 0;
        v18 = "Trying to pause ranging for peer with no uwbsessionID";
      }
      else
      {
        v21 = Logger.logObject.getter(v14);
        v22 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v21, v22))
          goto LABEL_21;
        v17 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v17 = 0;
        v18 = "UWB session not ranging, no need to pause";
      }
      _os_log_impl((void *)&_mh_execute_header, v21, v22, v18, v17, 2u);
      swift_slowDealloc(v17, -1, -1);
LABEL_21:

      goto LABEL_23;
    }

  }
  v11 = Logger.logObject.getter(v12);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v19, "No active UWB Lyon session, cannot pause ranging", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }
LABEL_23:

}

uint64_t sub_1000A6D9C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _QWORD v24[23];
  uint64_t __s2;
  char v26;
  uint64_t aBlock;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (_QWORD *)((char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x1000A8504);
  }
  swift_bridgeObjectRetain(a2);
  v11 = sub_1000E848C(a1, a2);
  if (v12 >> 60 != 15)
  {
    v19 = (char *)&loc_1000A6FC0 + dword_1000A85D4[v12 >> 62];
    v24[22] = v11;
    __asm { BR              X9 }
  }
  v13 = swift_bridgeObjectRetain_n(a2, 2);
  v14 = Logger.logObject.getter(v13);
  v16 = static os_log_type_t.error.getter(v14, v15);
  if (os_log_type_enabled(v14, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    aBlock = v18;
    *(_DWORD *)v17 = 136315138;
    swift_bridgeObjectRetain(a2);
    __s2 = sub_1001C56EC(a1, a2, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, &v26, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, v16, "Trying to suspend ranging for invalied reader identifier %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
  }

  v20 = sub_10006B828();
  v21 = swift_allocError(&type metadata for DSKError, v20, 0, 0);
  *v22 = 0;
  return swift_willThrow(v21);
}

void sub_1000A8614(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24[3];

  sub_100063C8C(a2, a3);
  v6 = sub_100063C8C(a2, a3);
  v7 = Logger.logObject.getter(v6);
  v11 = static os_log_type_t.info.getter(v7, v8, v9, v10);
  if (os_log_type_enabled(v7, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v24[0] = v21;
    *(_DWORD *)v12 = 136315138;
    sub_1001BD2CC(a2, a3);
    v14 = v13;
    v15 = sub_100063D3C((uint64_t *)&unk_100346060);
    v16 = sub_10006B86C();
    v17 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v15, v16);
    v19 = v18;
    swift_bridgeObjectRelease(v14);
    v22 = sub_1001C56EC(v17, v19, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v19);
    sub_100063CD0(a2, a3);
    sub_100063CD0(a2, a3);
    _os_log_impl((void *)&_mh_execute_header, v7, v11, "Unblocking reader identifier %s from timer", v12, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    sub_100063CD0(a2, a3);
    sub_100063CD0(a2, a3);
  }
  swift_beginAccess(a1 + OBJC_IVAR____TtC10seserviced7LyonUWB_blockedReaderIdentifiers, v24, 33, 0);
  sub_100063C8C(a2, a3);
  v20 = (void *)sub_10012E8F8(a2, a3);
  swift_endAccess(v24);
  sub_100063CD0(a2, a3);

}

uint64_t sub_1000A8860(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v15[3];
  uint64_t v16;
  uint64_t v17;

  swift_bridgeObjectRetain(a2);
  sub_1000E848C(a1, a2);
  if (v4 >> 60 != 15)
    __asm { BR              X10 }
  v5 = swift_bridgeObjectRetain_n(a2, 2);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.error.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v15[0] = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(a2);
    v16 = sub_1001C56EC(a1, a2, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "Trying to suspend ranging for invalied reader identifier %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
  }

  v11 = sub_10006B828();
  v12 = swift_allocError(&type metadata for DSKError, v11, 0, 0);
  *v13 = 0;
  return swift_willThrow(v12);
}

uint64_t sub_1000A8F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10seserviced7LyonUWB_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced7LyonUWB_pendingTimeSyncEvents));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced7LyonUWB_blockedReaderIdentifiers));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000A8FDC()
{
  return type metadata accessor for LyonUWB(0);
}

uint64_t type metadata accessor for LyonUWB(uint64_t a1)
{
  uint64_t result;

  result = qword_100345778;
  if (!qword_100345778)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LyonUWB);
  return result;
}

uint64_t sub_1000A9020(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100289278;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000A90AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A90BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000A90C4(unsigned __int8 a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint8_t *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  char *v42;
  int v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  NSObject *v55;
  uint64_t v56;
  os_log_type_t v57;
  uint8_t *v58;
  NSObject *v59;
  int v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  unint64_t v78;
  uint64_t v79;
  _BOOL8 v80;
  NSObject *v81;
  uint64_t v82;
  os_log_type_t v83;
  uint8_t *v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  void *v93;
  id v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  BOOL v99;
  int v100;
  uint64_t v101;
  NSObject *v102;
  uint64_t v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  os_log_type_t v113;
  uint8_t *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint8_t *v127;
  uint64_t v128;
  NSObject *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  os_log_type_t v133;
  uint8_t *v134;
  id v135;
  void *v136;
  id v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  os_log_type_t v144;
  uint8_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  NSObject *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  os_log_type_t v157;
  uint8_t *v158;
  uint64_t v159;
  NSObject *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  _BYTE *v173;
  NSObject *v174;
  uint64_t v175;
  NSObject *v176;
  uint64_t v177;
  os_log_type_t v178;
  uint64_t v179;
  int v180;
  int v181;
  id v182;
  void *v183;
  id v184;
  char *v185;
  int v186;
  int v187;
  unint64_t v188;
  uint64_t v189;
  _BYTE *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  NSObject *v194;
  uint64_t v195;
  os_log_type_t v196;
  uint8_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  os_log_type_t v209;
  uint8_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  int v217;
  int v218;
  uint64_t v219;
  int v220;
  int v221;
  int v222;
  int v223;
  _QWORD v224[2];
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint8_t *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (_QWORD *)((char *)v224 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = (void *)qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = v13;
  v15 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v15 & 1) != 0)
  {
    v228 = a2;
    if (qword_100344690 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344690, sub_100182BE4);
LABEL_5:
  v16 = qword_100354D70;
  swift_retain(a4);
  v17 = sub_1001977B8(v16, a4);
  swift_release(a4);
  v18 = (void *)sub_10009F654(v17, sub_100196CE0, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1001964DC);
  v19 = swift_bridgeObjectRelease(v17);
  if (!v18)
  {
LABEL_17:
    v48 = Logger.logObject.getter(v19);
    v50 = static os_log_type_t.error.getter(v48, v49);
    if (os_log_type_enabled(v48, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v50, "No active UWB Lyon session", v51, 2u);
      swift_slowDealloc(v51, -1, -1);
    }

    v52 = sub_10006B828();
    v53 = swift_allocError(&type metadata for DSKError, v52, 0, 0);
    *v54 = 0;
    swift_willThrow(v53);
    return;
  }
  v20 = type metadata accessor for UWBLyonSession();
  v21 = swift_dynamicCastClass(v18, v20);
  if (!v21)
  {

    goto LABEL_17;
  }
  v22 = v21;
  v23 = &v230[OBJC_IVAR____TtC10seserviced7LyonUWB_logger];
  v24 = Logger.logObject.getter(v21);
  v28 = static os_log_type_t.info.getter(v24, v25, v26, v27);
  if (os_log_type_enabled(v24, v28))
  {
    v227 = (uint64_t)v22;
    v29 = swift_slowAlloc(12, -1);
    v225 = a3;
    v30 = (uint8_t *)v29;
    v9 = swift_slowAlloc(32, -1);
    v233 = v9;
    v224[1] = v23;
    *(_DWORD *)v30 = 136315138;
    v31 = sub_10019A318(a1);
    v226 = a4;
    v32 = v18;
    v34 = v33;
    v231 = sub_1001C56EC(v31, v33, &v233);
    v22 = v227;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, &v232, v30 + 4, v30 + 12);
    v35 = v34;
    v18 = v32;
    a4 = v226;
    swift_bridgeObjectRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, v24, v28, "%s", v30, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    v36 = v30;
    a3 = v225;
    swift_slowDealloc(v36, -1, -1);
  }

  switch(a1)
  {
    case 0u:
      v38 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
      if ((*(_BYTE *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) & 0xFE) != 6)
      {
        v101 = swift_retain_n(a4, 2);
        v102 = Logger.logObject.getter(v101);
        v104 = static os_log_type_t.error.getter(v102, v103);
        if (os_log_type_enabled(v102, v104))
        {
          v105 = (uint8_t *)swift_slowAlloc(12, -1);
          v106 = swift_slowAlloc(32, -1);
          *(_DWORD *)v105 = 136315138;
          v233 = v106;
          LOBYTE(v231) = *(_BYTE *)(a4 + v38);
          v107 = String.init<A>(describing:)(&v231, &type metadata for LyonSessionState);
          v109 = v108;
          v231 = sub_1001C56EC(v107, v108, &v233);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, &v232, v105 + 4, v105 + 12);
          swift_release_n(a4, 2);
          swift_bridgeObjectRelease(v109);
          v110 = "Received M1 in invalid state %s";
LABEL_83:
          _os_log_impl((void *)&_mh_execute_header, v102, v104, v110, v105, 0xCu);
          swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v106, -1, -1);
          swift_slowDealloc(v105, -1, -1);
LABEL_85:

LABEL_86:
          v171 = sub_10006B828();
          v172 = swift_allocError(&type metadata for DSKError, v171, 0, 0);
          *v173 = 0;
          swift_willThrow(v172);
          goto LABEL_87;
        }
        goto LABEL_84;
      }
      v227 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
      v22 = a4;
      v39 = v229;
      v40 = (char *)sub_1000A02B4();
      if (v39)
      {
LABEL_87:

        return;
      }
      v42 = v40;
      v43 = v41;
      v44 = (char *)v22 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID;
      if ((*((_BYTE *)&v22->isa + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4) & 1) == 0
        && *(_DWORD *)v44 == v41)
      {
        sub_100181414((uint64_t)v40, 200);
        if (qword_100344568 == -1)
          goto LABEL_15;
        goto LABEL_127;
      }
      v174 = v22;
      v175 = swift_retain(v22);
      v176 = Logger.logObject.getter(v175);
      v178 = static os_log_type_t.error.getter(v176, v177);
      if (os_log_type_enabled(v176, v178))
      {
        v179 = swift_slowAlloc(14, -1);
        *(_DWORD *)v179 = 67109376;
        LODWORD(v233) = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, (char *)&v233 + 4, v179 + 4, v179 + 8);
        *(_WORD *)(v179 + 8) = 1024;
        v180 = *(_DWORD *)v44;
        if (v44[4])
          v180 = 0;
        LODWORD(v233) = v180;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, (char *)&v233 + 4, v179 + 10, v179 + 14);
        swift_release(v174);
        _os_log_impl((void *)&_mh_execute_header, v176, v178, "m1 message contains incorrect uwbSession ID %u, expected %u", (uint8_t *)v179, 0xEu);
        swift_slowDealloc(v179, -1, -1);
      }
      else
      {
        swift_release(v22);
      }

      v188 = sub_10006B828();
      v189 = swift_allocError(&type metadata for DSKError, v188, 0, 0);
      *v190 = 0;
      swift_willThrow(v189);

      return;
    case 2u:
      v70 = a3;
      v71 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
      if (*(_BYTE *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) == 8)
      {
        if (qword_100344568 != -1)
          swift_once(&qword_100344568, sub_100073158);
        v72 = v229;
        sub_1001A37EC(0);
        if (!v72)
        {
          v227 = (uint64_t)v22;
          v73 = qword_100354A80;
          v74 = a4;
          v75 = swift_allocObject(&unk_100307ED0, 24, 7);
          swift_weakInit(v75 + 16, v74);
          v76 = swift_allocObject(&unk_100307F70, 40, 7);
          *(_QWORD *)(v76 + 16) = v75;
          *(_BYTE *)(v76 + 24) = 1;
          *(_QWORD *)(v76 + 32) = v73;
          swift_retain(v75);
          swift_retain(v73);
          sub_1001A3C14(1, (uint64_t)sub_10006C2C4, v76);
          swift_release(v75);
          swift_release(v76);
          *(_BYTE *)(v74 + v71) = 9;
          v77 = sub_1000A06BC(v228, v70);
          sub_100181614((uint64_t)v77);

        }
        goto LABEL_87;
      }
      v111 = swift_retain_n(a4, 2);
      v59 = Logger.logObject.getter(v111);
      v113 = static os_log_type_t.error.getter(v59, v112);
      if (!os_log_type_enabled(v59, v113))
        goto LABEL_76;
      v114 = (uint8_t *)swift_slowAlloc(12, -1);
      v115 = swift_slowAlloc(32, -1);
      *(_DWORD *)v114 = 136315138;
      v233 = v115;
      v230 = v114 + 4;
      LOBYTE(v231) = *(_BYTE *)(a4 + v71);
      v116 = String.init<A>(describing:)(&v231, &type metadata for LyonSessionState);
      v118 = v117;
      v231 = sub_1001C56EC(v116, v117, &v233);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, &v232, v230, v114 + 12);
      swift_release_n(a4, 2);
      swift_bridgeObjectRelease(v118);
      _os_log_impl((void *)&_mh_execute_header, v59, v113, "Received M3 in invalid state %s", v114, 0xCu);
      swift_arrayDestroy(v115, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v115, -1, -1);
      swift_slowDealloc(v114, -1, -1);

      goto LABEL_86;
    case 4u:
      v59 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
      v60 = *(unsigned __int8 *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState);
      if ((v60 - 11) < 3)
      {
        v61 = swift_retain_n(a4, 2);
        v62 = Logger.logObject.getter(v61);
        v63 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v62, v63))
        {
          v64 = (uint8_t *)swift_slowAlloc(12, -1);
          v65 = swift_slowAlloc(32, -1);
          v66 = v59;
          v59 = v65;
          *(_DWORD *)v64 = 136315138;
          v233 = v65;
          LOBYTE(v231) = *((_BYTE *)&v66->isa + a4);
          v67 = String.init<A>(describing:)(&v231, &type metadata for LyonSessionState);
          v69 = v68;
          v231 = sub_1001C56EC(v67, v68, &v233);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, &v232, v64 + 4, v64 + 12);
          swift_release_n(a4, 2);
          swift_bridgeObjectRelease(v69);
          _os_log_impl((void *)&_mh_execute_header, v62, v63, "Out of order suspend request received in %s", v64, 0xCu);
          swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v59, -1, -1);
          swift_slowDealloc(v64, -1, -1);
        }
        else
        {
          swift_release_n(a4, 2);
        }

        v140 = OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount;
        v141 = *(_DWORD *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount);
        v99 = __CFADD__(v141, 1);
        v142 = v141 + 1;
        if (v99)
        {
          __break(1u);
LABEL_76:
          swift_release_n(a4, 2);

          goto LABEL_86;
        }
LABEL_94:
        *(_DWORD *)(a4 + v140) = v142;
        return;
      }
      v88 = v229;
      if (v60 != 14)
      {
        if (v60 != 10)
        {
          v166 = swift_retain_n(a4, 2);
          v102 = Logger.logObject.getter(v166);
          v104 = static os_log_type_t.error.getter(v102, v167);
          if (os_log_type_enabled(v102, v104))
          {
            v105 = (uint8_t *)swift_slowAlloc(12, -1);
            v106 = swift_slowAlloc(32, -1);
            *(_DWORD *)v105 = 136315138;
            v233 = v106;
            LOBYTE(v231) = *((_BYTE *)&v59->isa + a4);
            v168 = String.init<A>(describing:)(&v231, &type metadata for LyonSessionState);
            v170 = v169;
            v231 = sub_1001C56EC(v168, v169, &v233);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, &v232, v105 + 4, v105 + 12);
            swift_release_n(a4, 2);
            swift_bridgeObjectRelease(v170);
            v110 = "Lyon session in invalid state %s, disconnecting";
            goto LABEL_83;
          }
LABEL_84:
          swift_release_n(a4, 2);
          goto LABEL_85;
        }
        sub_1000A0C08(v228, a3);
        if (v88)
          goto LABEL_87;
        if ((*(_BYTE *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4) & 1) != 0
          || (_DWORD)v91 != *(_DWORD *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID))
        {
          v192 = v228;
          sub_100063C8C(v228, a3);
          v193 = sub_100063C8C(v192, a3);
          v194 = Logger.logObject.getter(v193);
          v196 = static os_log_type_t.error.getter(v194, v195);
          if (os_log_type_enabled(v194, v196))
          {
            v197 = (uint8_t *)swift_slowAlloc(12, -1);
            v229 = swift_slowAlloc(32, -1);
            v233 = v229;
            *(_DWORD *)v197 = 136315138;
            v227 = (uint64_t)(v197 + 4);
            sub_1001BD2CC(v192, a3);
            v199 = v198;
            v231 = v198;
            v200 = sub_100063D3C((uint64_t *)&unk_100346060);
            v230 = (uint8_t *)v18;
            v201 = v200;
            v202 = sub_10006B86C();
            v203 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v201, v202);
            v205 = v204;
            swift_bridgeObjectRelease(v199);
            v231 = sub_1001C56EC(v203, v205, &v233);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, &v232, v227, v197 + 12);
            v206 = v205;
            v18 = v230;
            swift_bridgeObjectRelease(v206);
            sub_100063CD0(v192, a3);
            sub_100063CD0(v192, a3);
            _os_log_impl((void *)&_mh_execute_header, v194, v196, "Unable to parse suspend request %s, erroring out", v197, 0xCu);
            v207 = v229;
            swift_arrayDestroy(v229, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v207, -1, -1);
            swift_slowDealloc(v197, -1, -1);

          }
          else
          {

            sub_100063CD0(v192, a3);
            sub_100063CD0(v192, a3);
          }
          goto LABEL_86;
        }
        v78 = a4;
        sub_100180FBC(v91, 200);
        if (qword_100344568 == -1)
        {
LABEL_53:
          v92 = objc_msgSend((id)objc_opt_self(SESTLV), "TLVWithTag:unsignedChar:", 17, 0);
          if (!v92)
          {
LABEL_136:
            __break(1u);
            goto LABEL_137;
          }
          v93 = v92;
          v94 = objc_msgSend(v92, "asData");

          if (!v94)
          {
LABEL_137:
            __break(1u);
            JUMPOUT(0x1000AABB0);
          }
          v95 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v94);
          v97 = v96;

          sub_10007CAB8(1, 5, v95, v97, v78);
          sub_100063CD0(v95, v97);

          v98 = *(_DWORD *)(v78 + OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedSuspendRangingCount);
          v99 = __CFADD__(v98, 1);
          v100 = v98 + 1;
          if (!v99)
          {
            *(_DWORD *)(v78 + OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedSuspendRangingCount) = v100;
            *((_BYTE *)&v59->isa + v78) = 14;
            return;
          }
          __break(1u);
          goto LABEL_131;
        }
LABEL_129:
        swift_once(&qword_100344568, sub_100073158);
        goto LABEL_53;
      }
      v152 = swift_retain_n(a4, 2);
      v153 = Logger.logObject.getter(v152);
      v157 = static os_log_type_t.info.getter(v153, v154, v155, v156);
      if (os_log_type_enabled(v153, v157))
      {
        v158 = (uint8_t *)swift_slowAlloc(12, -1);
        v159 = swift_slowAlloc(32, -1);
        v160 = v59;
        v161 = v159;
        *(_DWORD *)v158 = 136315138;
        v233 = v159;
        v22 = (v158 + 4);
        LOBYTE(v231) = *((_BYTE *)&v160->isa + a4);
        v162 = String.init<A>(describing:)(&v231, &type metadata for LyonSessionState);
        v164 = v163;
        v231 = sub_1001C56EC(v162, v163, &v233);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, &v232, v158 + 4, v158 + 12);
        v9 = a4;
        swift_release_n(a4, 2);
        v165 = v164;
        v88 = v229;
        swift_bridgeObjectRelease(v165);
        _os_log_impl((void *)&_mh_execute_header, v153, v157, "Lyon session not currently ranging %s, nothing to do", v158, 0xCu);
        swift_arrayDestroy(v161, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v161, -1, -1);
        swift_slowDealloc(v158, -1, -1);
      }
      else
      {
        v9 = a4;
        swift_release_n(a4, 2);
      }

      if (qword_100344568 == -1)
        goto LABEL_97;
      goto LABEL_124;
    case 5u:
      v78 = a3;
      v79 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
      if (*(_BYTE *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) == 12)
      {
        v59 = v229;
        if (qword_100344568 != -1)
          swift_once(&qword_100344568, sub_100073158);
        sub_1001A37EC(0);
        if (v59)
          goto LABEL_87;
        v80 = sub_1000A0FA0(v228, v78);
        if (v80)
        {
          if ((*(_BYTE *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4) & 1) != 0)
          {
            v81 = Logger.logObject.getter(v80);
            v83 = static os_log_type_t.error.getter(v81, v82);
            if (os_log_type_enabled(v81, v83))
            {
              v84 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v84 = 0;
              _os_log_impl((void *)&_mh_execute_header, v81, v83, "uwb sessionID not cached", v84, 2u);
              swift_slowDealloc(v84, -1, -1);
            }

            goto LABEL_86;
          }
          sub_100180FBC(*(unsigned int *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID), 100);

          v220 = *(_DWORD *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedSuspendRangingCount);
          v99 = __CFADD__(v220, 1);
          v221 = v220 + 1;
          if (!v99)
          {
            *(_DWORD *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedSuspendRangingCount) = v221;
            *(_BYTE *)(a4 + v79) = 14;
            return;
          }
          __break(1u);
          goto LABEL_129;
        }
        v208 = swift_retain_n(a4, 2);
        v120 = Logger.logObject.getter(v208);
        v209 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v120, v209))
        {
          v210 = (uint8_t *)swift_slowAlloc(12, -1);
          v211 = swift_slowAlloc(32, -1);
          v229 = 0;
          v212 = v211;
          *(_DWORD *)v210 = 136315138;
          v233 = v211;
          v230 = v210 + 4;
          v213 = swift_retain(a4);
          v214 = UUID.uuidString.getter(v213);
          v216 = v215;
          swift_release(a4);
          v231 = sub_1001C56EC(v214, v216, &v233);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, &v232, v230, v210 + 12);
          swift_release_n(a4, 2);
          swift_bridgeObjectRelease(v216);
          _os_log_impl((void *)&_mh_execute_header, v120, v209, "Lock rejected suspend request for peer %s", v210, 0xCu);
          swift_arrayDestroy(v212, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v212, -1, -1);
          v127 = v210;
          goto LABEL_63;
        }
      }
      else
      {
        v119 = swift_retain_n(a4, 2);
        v120 = Logger.logObject.getter(v119);
        v121 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v120, v121))
        {
          v122 = (uint8_t *)swift_slowAlloc(12, -1);
          v123 = swift_slowAlloc(32, -1);
          *(_DWORD *)v122 = 136315138;
          v233 = v123;
          v230 = v122 + 4;
          LOBYTE(v231) = *(_BYTE *)(a4 + v79);
          v124 = String.init<A>(describing:)(&v231, &type metadata for LyonSessionState);
          v126 = v125;
          v231 = sub_1001C56EC(v124, v125, &v233);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, &v232, v230, v122 + 12);
          swift_release_n(a4, 2);
          swift_bridgeObjectRelease(v126);
          _os_log_impl((void *)&_mh_execute_header, v120, v121, "Received suspend response in invalid state %s", v122, 0xCu);
          swift_arrayDestroy(v123, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v123, -1, -1);
          v127 = v122;
LABEL_63:
          swift_slowDealloc(v127, -1, -1);

          goto LABEL_87;
        }
      }
      swift_release_n(a4, 2);

      goto LABEL_87;
    case 6u:
      if (*((_BYTE *)&v22->isa + OBJC_IVAR____TtC10seserviced10UWBSession_state) == 4)
      {
        v85 = a3;
        v86 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
        v87 = *(unsigned __int8 *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState);
        v88 = v229;
        if (v87 == 14 || v87 == 11)
        {
          if (qword_100344568 != -1)
            swift_once(&qword_100344568, sub_100073158);
          sub_1001A37EC(0);
          if (v88)
            goto LABEL_87;
          v227 = (uint64_t)v22;
          v89 = qword_100354A80;
          v22 = a4;
          v42 = (char *)swift_allocObject(&unk_100307ED0, 24, 7);
          swift_weakInit(v42 + 16, v22);
          v90 = swift_allocObject(&unk_100307F48, 40, 7);
          *(_QWORD *)(v90 + 16) = v42;
          *(_BYTE *)(v90 + 24) = 1;
          *(_QWORD *)(v90 + 32) = v89;
          swift_retain(v42);
          swift_retain(v89);
          sub_1001A3C14(1, (uint64_t)sub_10006C2C4, v90);
          swift_release(v42);
          swift_release(v90);
          if (*((_BYTE *)&v22->isa + v86) == 11)
          {
            v191 = 100;
LABEL_113:
            *((_BYTE *)&v22->isa + v86) = 13;
            sub_1000A0C08(v228, v85);
            sub_10018180C(v219, v191);
            goto LABEL_87;
          }
          *(_DWORD *)((char *)&v22->isa + OBJC_IVAR____TtC10seserviced8LyonPeer_lastTransactionIntent) = 1;
          v217 = *(_DWORD *)((char *)&v22->isa + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingAttemptsCount);
          v99 = __CFADD__(v217, 1);
          v218 = v217 + 1;
          if (!v99)
          {
            *(_DWORD *)((char *)&v22->isa + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingAttemptsCount) = v218;
            v191 = 200;
            goto LABEL_113;
          }
LABEL_126:
          __break(1u);
LABEL_127:
          swift_once(&qword_100344568, sub_100073158);
LABEL_15:
          sub_1001A37EC(0);
          v45 = qword_100354A80;
          v46 = swift_allocObject(&unk_100307ED0, 24, 7);
          swift_weakInit(v46 + 16, v22);
          v47 = swift_allocObject(&unk_100307F98, 40, 7);
          *(_QWORD *)(v47 + 16) = v46;
          *(_BYTE *)(v47 + 24) = 1;
          *(_QWORD *)(v47 + 32) = v45;
          swift_retain(v46);
          swift_retain(v45);
          sub_1001A3C14(1, (uint64_t)sub_10006C2C4, v47);

          swift_release(v46);
          swift_release(v47);
          if (*((_BYTE *)&v22->isa + v227) == 7)
            goto LABEL_122;
          *(_DWORD *)((char *)&v22->isa + OBJC_IVAR____TtC10seserviced8LyonPeer_lastTransactionIntent) = 1;
          v222 = *(_DWORD *)((char *)&v22->isa + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingAttemptsCount);
          v99 = __CFADD__(v222, 1);
          v223 = v222 + 1;
          if (!v99)
          {
            *(_DWORD *)((char *)&v22->isa + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingAttemptsCount) = v223;
LABEL_122:
            *((_BYTE *)&v22->isa + v227) = 8;
            return;
          }
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
          goto LABEL_133;
        }
        v143 = swift_retain_n(a4, 2);
        v22 = Logger.logObject.getter(v143);
        v144 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v22, v144))
        {
          v145 = (uint8_t *)swift_slowAlloc(12, -1);
          v146 = swift_slowAlloc(32, -1);
          *(_DWORD *)v145 = 136315138;
          v9 = (uint64_t)(v145 + 12);
          v233 = v146;
          v230 = v145 + 4;
          LOBYTE(v231) = *(_BYTE *)(a4 + v86);
          v147 = String.init<A>(describing:)(&v231, &type metadata for LyonSessionState);
          v148 = v88;
          v150 = v149;
          v231 = sub_1001C56EC(v147, v149, &v233);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, &v232, v230, v145 + 12);
          swift_release_n(a4, 2);
          v151 = v150;
          v88 = v148;
          swift_bridgeObjectRelease(v151);
          _os_log_impl((void *)&_mh_execute_header, v22, v144, "Received resume request in invalid state %s", v145, 0xCu);
          swift_arrayDestroy(v146, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v146, -1, -1);
          swift_slowDealloc(v145, -1, -1);
        }
        else
        {
          swift_release_n(a4, 2);
        }

        v140 = OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount;
        v181 = *(_DWORD *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount);
        v99 = __CFADD__(v181, 1);
        v142 = v181 + 1;
        if (!v99)
          goto LABEL_94;
        __break(1u);
LABEL_124:
        swift_once(&qword_100344568, sub_100073158);
LABEL_97:
        v182 = objc_msgSend((id)objc_opt_self(SESTLV), "TLVWithTag:unsignedChar:", 17, 0);
        if (!v182)
        {
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        v183 = v182;
        v184 = objc_msgSend(v182, "asData");

        if (!v184)
        {
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        v138 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v184);
        v42 = v185;

        sub_10007CAB8(1, 5, v138, (unint64_t)v42, v9);
        if (!v88)
        {
          sub_100063CD0(v138, (unint64_t)v42);

          v186 = *(_DWORD *)(v9 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount);
          v99 = __CFADD__(v186, 1);
          v187 = v186 + 1;
          if (!v99)
          {
            *(_DWORD *)(v9 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount) = v187;
            return;
          }
          __break(1u);
          goto LABEL_126;
        }
      }
      else
      {
        v128 = a4;
        v129 = Logger.logObject.getter(v37);
        v133 = static os_log_type_t.info.getter(v129, v130, v131, v132);
        if (os_log_type_enabled(v129, v133))
        {
          v134 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v134 = 0;
          _os_log_impl((void *)&_mh_execute_header, v129, v133, "UWB session invalidated; cannot resume", v134, 2u);
          swift_slowDealloc(v134, -1, -1);
        }

        if (qword_100344568 != -1)
          swift_once(&qword_100344568, sub_100073158);
        v135 = objc_msgSend((id)objc_opt_self(SESTLV), "TLVWithTag:value:", 3, 0);
        if (!v135)
          goto LABEL_132;
        v136 = v135;
        v137 = objc_msgSend(v135, "asData");

        if (!v137)
        {
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
        v138 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v137);
        v42 = v139;

        sub_10007CAB8(2, 1, v138, (unint64_t)v42, v128);
      }
      sub_100063CD0(v138, (unint64_t)v42);
      goto LABEL_87;
    default:
      v55 = Logger.logObject.getter(v37);
      v57 = static os_log_type_t.error.getter(v55, v56);
      if (os_log_type_enabled(v55, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(5, -1);
        *(_DWORD *)v58 = 16777472;
        LOBYTE(v233) = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, (char *)&v233 + 1, v58 + 4, v58 + 5);
        _os_log_impl((void *)&_mh_execute_header, v55, v57, "Unable to parse UWB message with id %hhu", v58, 5u);
        swift_slowDealloc(v58, -1, -1);
      }

      goto LABEL_86;
  }
}

uint64_t sub_1000AABCC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1000AAC04()
{
  unint64_t result;

  result = qword_100346030;
  if (!qword_100346030)
  {
    result = swift_getWitnessTable(&unk_100289974, &type metadata for DSKBLE.BLEError);
    atomic_store(result, (unint64_t *)&qword_100346030);
  }
  return result;
}

uint64_t sub_1000AAC54(uint64_t a1, __objc2_class **a2)
{
  return sub_1000ABD54(a2);
}

uint64_t sub_1000AAC6C(uint64_t a1, uint64_t a2, __objc2_class **a3)
{
  return sub_1000AAC90(a3);
}

uint64_t sub_1000AAC74(uint64_t a1, uint64_t a2, __objc2_class **a3)
{
  return sub_1000AAF00(a3);
}

uint64_t sub_1000AAC7C(uint64_t a1, __objc2_class **a2)
{
  return sub_1000AB36C(a2);
}

void sub_1000AAC84(uint64_t a1, __objc2_class **a2)
{
  sub_1000AB7DC(a2);
}

uint64_t sub_1000AAC90(__objc2_class **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    if (*a1 == _TtC10seserviced8LyonPeer)
    {
      v10 = swift_retain_n(a1, 3);
      v11 = Logger.logObject.getter(v10);
      v15 = static os_log_type_t.info.getter(v11, v12, v13, v14);
      if (os_log_type_enabled(v11, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(12, -1);
        v17 = swift_slowAlloc(32, -1);
        *(_DWORD *)v16 = 136315138;
        v23 = v17;
        v18 = swift_retain(a1);
        v19 = UUID.uuidString.getter(v18);
        v21 = v20;
        swift_release(a1);
        v22 = sub_1001C56EC(v19, v21, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v16 + 4, v16 + 12);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v21);
        _os_log_impl((void *)&_mh_execute_header, v11, v15, "NI pause request message for %s", v16, 0xCu);
        swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v17, -1, -1);
        swift_slowDealloc(v16, -1, -1);
      }
      else
      {
        swift_release_n(a1, 2);
      }

      sub_1000A4258((uint64_t)a1);
      return swift_release(a1);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000AAF00(__objc2_class **a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t result;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  id v24;
  unsigned __int8 v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28[2];

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint8_t **)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) != 0)
  {
    if (*a1 == _TtC10seserviced8LyonPeer && a1)
    {
      v11 = swift_retain_n(a1, 3);
      v12 = Logger.logObject.getter(v11);
      v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
      if (os_log_type_enabled(v12, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(12, -1);
        v18 = swift_slowAlloc(32, -1);
        *(_DWORD *)v17 = 136315138;
        v28[0] = v18;
        v26 = v17 + 4;
        v19 = swift_retain(a1);
        v20 = UUID.uuidString.getter(v19);
        v22 = v21;
        swift_release(a1);
        v27 = sub_1001C56EC(v20, v22, v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v26, v17 + 12);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v22);
        _os_log_impl((void *)&_mh_execute_header, v12, v16, "NI resume request for %s", v17, 0xCu);
        swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);
      }
      else
      {
        swift_release_n(a1, 2);
      }

      sub_10009E0A0((uint64_t)a1);
      return swift_release(a1);
    }
  }
  else
  {
    __break(1u);
    swift_once(&qword_100344568, sub_100073158);
    v23 = (void *)_convertErrorToNSError(_:)(v1);
    v24 = objc_msgSend(v23, "code");

    if (v24 == (id)-19703)
    {
      v25 = 3;
    }
    else if (v24 == (id)-19702)
    {
      v25 = 2;
    }
    else
    {
      v25 = v24 == (id)-19701;
    }
    sub_10007CD7C((uint64_t)a1, v25);
    swift_release(a1);
    return swift_errorRelease(v1);
  }
  return result;
}

uint64_t sub_1000AB36C(__objc2_class **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint64_t result;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  double v42;
  double *v43;
  double *v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (uint64_t *)((char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) != 0)
  {
    if (*a1 == _TtC10seserviced8LyonPeer)
    {
      v48 = v3;
      v15 = swift_retain_n(a1, 3);
      v16 = Logger.logObject.getter(v15);
      v20 = static os_log_type_t.info.getter(v16, v17, v18, v19);
      if (os_log_type_enabled(v16, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(12, -1);
        v22 = swift_slowAlloc(32, -1);
        v47 = v2;
        v23 = v22;
        *(_DWORD *)v21 = 136315138;
        v50 = v22;
        v46 = v21 + 4;
        v24 = swift_retain(a1);
        v25 = UUID.uuidString.getter(v24);
        v27 = v26;
        swift_release(a1);
        v49 = sub_1001C56EC(v25, v27, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v46, v21 + 12);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v27);
        _os_log_impl((void *)&_mh_execute_header, v16, v20, "NI ranging started for %s", v21, 0xCu);
        swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
        v28 = v23;
        v2 = v47;
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v21, -1, -1);
      }
      else
      {
        swift_release_n(a1, 2);
      }

      v30 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
      if (*((_BYTE *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) != 10)
      {
        v31 = swift_retain_n(a1, 2);
        v32 = Logger.logObject.getter(v31);
        v34 = static os_log_type_t.error.getter(v32, v33);
        if (os_log_type_enabled(v32, v34))
        {
          v35 = (uint8_t *)swift_slowAlloc(12, -1);
          v36 = swift_slowAlloc(32, -1);
          *(_DWORD *)v35 = 136315138;
          v50 = v36;
          LOBYTE(v49) = *((_BYTE *)a1 + v30);
          v37 = String.init<A>(describing:)(&v49, &type metadata for LyonSessionState);
          v47 = v2;
          v39 = v38;
          v49 = sub_1001C56EC(v37, v38, &v50);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v35 + 4, v35 + 12);
          swift_release_n(a1, 2);
          v40 = v39;
          v2 = v47;
          swift_bridgeObjectRelease(v40);
          _os_log_impl((void *)&_mh_execute_header, v32, v34, "Started ranging when device is not in correct state? %s", v35, 0xCu);
          swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v36, -1, -1);
          swift_slowDealloc(v35, -1, -1);
        }
        else
        {
          swift_release_n(a1, 2);
        }

        *((_BYTE *)a1 + v30) = 10;
      }
      v41 = Date.init()(v29);
      v42 = Date.timeIntervalSince1970.getter(v41);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v6, v2);
      v43 = (double *)((char *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_startTime);
      *v43 = v42;
      *((_BYTE *)v43 + 8) = 0;
      v44 = (double *)((char *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_firstRangingStart);
      if (*((_BYTE *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_firstRangingStart + 8) == 1)
      {
        *v44 = v42;
        *((_BYTE *)v44 + 8) = 0;
      }
      return swift_release(a1);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000AB7DC(__objc2_class **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  double *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  int v20;
  void *v21;
  id v22;
  unsigned __int8 v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (_QWORD *)((char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (*a1 != _TtC10seserviced8LyonPeer || !a1)
    return;
  v14 = (double *)((char *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_startTime);
  if ((*((_BYTE *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_startTime + 8) & 1) != 0)
  {
    swift_retain(a1);
    goto LABEL_13;
  }
  v15 = *v14;
  v16 = swift_retain(a1);
  v17 = Date.init()(v16);
  v18 = Date.timeIntervalSince1970.getter(v17);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v19 = v18 - v15;
  if ((~COERCE__INT64(v18 - v15) & 0x7FF0000000000000) == 0)
    goto LABEL_27;
  if (v19 <= -1.0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v19 >= 4294967300.0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v20 = *(_DWORD *)((char *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingDuration);
  if (!__CFADD__(v20, v19))
  {
    *(_DWORD *)((char *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingDuration) = v20 + v19;
    *v14 = 0.0;
    *((_BYTE *)v14 + 8) = 1;
LABEL_13:
    if (*((_BYTE *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) == 5)
    {
      *((_BYTE *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) = 6;
      sub_10009E0A0((uint64_t)a1);
    }
    goto LABEL_21;
  }
LABEL_30:
  __break(1u);
  swift_once(&qword_100344568, sub_100073158);
  v21 = (void *)_convertErrorToNSError(_:)(v2);
  v22 = objc_msgSend(v21, "code");

  if (v22 == (id)-19703)
  {
    v23 = 3;
  }
  else if (v22 == (id)-19702)
  {
    v23 = 2;
  }
  else
  {
    v23 = v22 == (id)-19701;
  }
  sub_10007CD7C((uint64_t)a1, v23);
  swift_errorRelease(v2);
LABEL_21:
  v24 = swift_retain_n(a1, 2);
  v25 = Logger.logObject.getter(v24);
  v29 = static os_log_type_t.info.getter(v25, v26, v27, v28);
  if (os_log_type_enabled(v25, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    v31 = swift_slowAlloc(32, -1);
    *(_DWORD *)v30 = 136315138;
    v38 = v31;
    v32 = swift_retain(a1);
    v33 = UUID.uuidString.getter(v32);
    v35 = v34;
    swift_release(a1);
    v37 = sub_1001C56EC(v33, v35, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v30 + 4, v30 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, v25, v29, "NI ranging paused for %s", v30, 0xCu);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);
    swift_release(a1);
  }
  else
  {
    swift_release_n(a1, 3);
  }

}

uint64_t sub_1000ABD54(__objc2_class **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (*a1 == _TtC10seserviced8LyonPeer && a1)
  {
    v10 = swift_retain_n(a1, 3);
    v11 = Logger.logObject.getter(v10);
    v15 = static os_log_type_t.info.getter(v11, v12, v13, v14);
    if (os_log_type_enabled(v11, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      *(_DWORD *)v16 = 136315138;
      v33 = v17;
      v18 = swift_retain(a1);
      v19 = UUID.uuidString.getter(v18);
      v21 = v20;
      swift_release(a1);
      v32 = sub_1001C56EC(v19, v21, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v16 + 4, v16 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v11, v15, "NI session invalidated for %s", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      swift_release_n(a1, 2);
    }

    if ((*((_BYTE *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_hasError) & 1) != 0)
      return swift_release(a1);
    v22 = swift_retain_n(a1, 2);
    v23 = Logger.logObject.getter(v22);
    v25 = static os_log_type_t.error.getter(v23, v24);
    if (os_log_type_enabled(v23, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      *(_DWORD *)v26 = 136315138;
      v33 = v27;
      v28 = swift_retain(a1);
      v29 = UUID.uuidString.getter(v28);
      v31 = v30;
      swift_release(a1);
      v32 = sub_1001C56EC(v29, v31, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v26 + 4, v26 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v23, v25, "NI session invalidated for %s while connected, disconnecting", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      swift_release_n(a1, 2);
    }

    if (qword_100344568 == -1)
    {
LABEL_14:
      sub_10007CD7C((uint64_t)a1, 1u);
      return swift_release(a1);
    }
LABEL_18:
    swift_once(&qword_100344568, sub_100073158);
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_1000AC14C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100063D3C(&qword_100345390);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AC18C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_100063CD0(v0[3], v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000AC1B8()
{
  uint64_t v0;

  sub_1000A8614(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_1000AC1CC(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  Class isa;
  id v19;
  char *v20;
  id v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  void (*v28)(char *, _QWORD, uint64_t, uint64_t);
  id v29;
  uint64_t v30;

  v24 = a3;
  v29 = a2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  v23 = a1;
  if (v13)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v25 = *(_QWORD *)(v5 + 72);
    v27 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain(a1);
    v26 = v12;
    while (1)
    {
      v27(v12, v14, v4);
      v15 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56);
      v15(v12, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4) == 1)
        break;
      v28 = v15;
      v16 = v5;
      v17 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
      v17(v8, v12, v4);
      v30 = sub_10006C25C(0, &qword_100348B80, NSObject_ptr);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v19 = objc_msgSend((id)objc_opt_self(CBUUID), "UUIDWithNSUUID:", isa);

      v20 = v8;
      v21 = objc_msgSend(v29, "UUID");
      LOBYTE(isa) = static NSObject.== infix(_:_:)(v19);

      if ((isa & 1) != 0)
      {
        swift_bridgeObjectRelease(v23);
        v22 = v24;
        v17(v24, v20, v4);
        v28(v22, 0, 1, v4);
        goto LABEL_11;
      }
      v5 = v16;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v4);
      v14 += v25;
      --v13;
      v8 = v20;
      v12 = v26;
      if (!v13)
        goto LABEL_8;
    }
  }
  else
  {
    v28 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56);
    swift_bridgeObjectRetain(a1);
LABEL_8:
    v15 = v28;
    v28(v12, 1, 1, v4);
  }
  swift_bridgeObjectRelease(v23);
  v15(v24, 1, 1, v4);
LABEL_11:

}

void sub_1000AC470(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_1000AC4C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = BYTE6(v24);
  if (BYTE6(v24))
  {
    *(_QWORD *)(v3 - 104) = v2;
    v5 = BYTE6(v24);
    v6 = sub_100192924(0, BYTE6(v24), 0);
    v2 = *(_QWORD *)(v3 - 104);
    if ((_DWORD)v1)
    {
      if ((_DWORD)v1 == 1)
        v7 = (int)a1;
      else
        v7 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(v3 - 136) = v24 & 0x3FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v3 - 128) = v1;
    while (v5)
    {
      if ((_DWORD)v1)
      {
        if ((_DWORD)v1 == 1)
        {
          if (v7 < (int)a1 || v7 >= a1 >> 32)
            goto LABEL_29;
          v8 = ((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v6);
          if (!v8)
          {
            __break(1u);
LABEL_36:
            __break(1u);
          }
          v9 = v8;
          v10 = __DataStorage._offset.getter();
          v11 = v7 - v10;
          if (__OFSUB__(v7, v10))
            goto LABEL_32;
        }
        else
        {
          if (v7 < *(_QWORD *)(a1 + 16))
            goto LABEL_31;
          if (v7 >= *(_QWORD *)(a1 + 24))
            goto LABEL_33;
          v13 = ((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v6);
          if (!v13)
            goto LABEL_36;
          v9 = v13;
          v14 = __DataStorage._offset.getter();
          v11 = v7 - v14;
          if (__OFSUB__(v7, v14))
            goto LABEL_34;
        }
        v12 = *(_BYTE *)(v9 + v11);
      }
      else
      {
        if (v7 >= BYTE6(v24))
          goto LABEL_30;
        *(_QWORD *)(v3 - 118) = a1;
        *(_WORD *)(v3 - 110) = v24;
        *(_BYTE *)(v3 - 108) = BYTE2(v24);
        *(_BYTE *)(v3 - 107) = BYTE3(v24);
        *(_BYTE *)(v3 - 106) = BYTE4(v24);
        *(_BYTE *)(v3 - 105) = BYTE5(v24);
        v12 = *(_BYTE *)(v3 - 118 + v7);
      }
      v15 = sub_100063D3C((uint64_t *)&unk_1003477E0);
      v16 = swift_allocObject(v15, 72, 7);
      *(_OWORD *)(v16 + 16) = xmmword_1002888E0;
      *(_QWORD *)(v16 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v16 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v16 + 32) = v12;
      v6 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t))String.init(format:_:))(1479684133, 0xE400000000000000, v16);
      v17 = v6;
      v19 = v18;
      *(_QWORD *)(v3 - 104) = v2;
      v21 = *(_QWORD *)(v2 + 16);
      v20 = *(_QWORD *)(v2 + 24);
      if (v21 >= v20 >> 1)
      {
        v6 = sub_100192924(v20 > 1, v21 + 1, 1);
        v2 = *(_QWORD *)(v3 - 104);
      }
      *(_QWORD *)(v2 + 16) = v21 + 1;
      v22 = v2 + 16 * v21;
      *(_QWORD *)(v22 + 32) = v17;
      *(_QWORD *)(v22 + 40) = v19;
      ++v7;
      --v5;
      --v4;
      v1 = *(_QWORD *)(v3 - 128);
      if (!v4)
        return v2;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    __break(1u);
    JUMPOUT(0x1000AC7DCLL);
  }
  return v2;
}

void sub_1000AC804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (_QWORD *)((char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v6 = qword_100354EE8;
  *v5 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  v8 = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  v9 = *(void **)(v0 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (v9)
  {
    v10 = objc_allocWithZone((Class)NSMutableData);
    v11 = v9;
    v12 = objc_msgSend(v10, "init");

    v13 = v12;
    v14 = NSData.startIndex.getter();
    v15 = NSData.endIndex.getter();
    v16 = NSData.startIndex.getter();
    v17 = NSData.endIndex.getter();
    if (v14 >= v16 && v17 >= v14)
    {
      v18 = NSData.startIndex.getter();
      v19 = NSData.endIndex.getter();

      if (v15 >= v18 && v19 >= v15)
      {
        if (!__OFSUB__(v15, v14))
        {
          if (v15 - v14 == 32)
          {
            v20 = v13;
            static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);

          }
          else
          {
            v25 = type metadata accessor for __DataStorage(0);
            swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
            v26 = __DataStorage.init(length:)(32);
            v28[0] = 0x2000000000;
            v28[1] = v26;
            sub_10016B11C((int *)v28, 0);

          }
          return;
        }
LABEL_19:
        __break(1u);
        return;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v21 = Logger.logObject.getter(v8);
  v23 = static os_log_type_t.error.getter(v21, v22);
  if (os_log_type_enabled(v21, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v23, "Not running", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

}

void sub_1000ACAC4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  id v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  char v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned __int8 v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v53;
  void (*v54)(uint64_t *, _QWORD);
  uint64_t v55;
  Class isa;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  os_log_type_t v69;
  uint8_t *v70;
  unint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  NSObject *v84;
  uint64_t v85;
  os_log_type_t v86;
  uint8_t *v87;
  unint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  uint64_t v103[4];
  __int128 v104;
  unsigned __int8 v105;
  _QWORD *v106;

  v101 = a1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (uint64_t *)((char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v14 = qword_100354EE8;
  *v13 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  v16 = (*(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_75;
  }
  v17 = *(void **)(v97 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (!v17)
  {
    v22 = Logger.logObject.getter(v16);
    v24 = static os_log_type_t.error.getter(v22, v23);
    if (os_log_type_enabled(v22, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v24, "Not running", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v26 = sub_10006B828();
    v27 = swift_allocError(&type metadata for DSKError, v26, 0, 0);
    *v28 = 1;
    swift_willThrow(v27);
    return;
  }
  v94 = (_QWORD *)a2;
  v95 = v17;
  a2 = v101;
  v18 = v101 & 0xC000000000000001;
  if ((v101 & 0xC000000000000001) != 0)
  {
    if (v101 < 0)
      v19 = v101;
    else
      v19 = v101 & 0xFFFFFFFFFFFFFF8;
    v20 = v17;
    v21 = __CocoaSet.count.getter(v19);
  }
  else
  {
    v21 = *(_QWORD *)(v101 + 16);
    v29 = v17;
  }
  v30 = _swiftEmptyArrayStorage;
  v99 = a2 & 0xC000000000000001;
  if (!v21)
  {
LABEL_37:
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v30);
    v2 = v95;
    v57 = objc_msgSend(v95, "retrievePeripheralsWithIdentifiers:", isa);

    v58 = sub_10006C25C(0, &qword_1003460B0, CBPeripheral_ptr);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v57, v58);

    v10 = (unint64_t)v9 >> 62;
    if (!((unint64_t)v9 >> 62))
    {
      v59 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_39;
    }
LABEL_75:
    if (v9 < 0)
      v92 = v9;
    else
      v92 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v59 = _CocoaArrayWrapper.endIndex.getter(v92);
    swift_bridgeObjectRelease(v9);
LABEL_39:
    v60 = v96;
    if (v99)
    {
      if (a2 < 0)
        v61 = a2;
      else
        v61 = a2 & 0xFFFFFFFFFFFFFF8;
      if (v59 == __CocoaSet.count.getter(v61))
      {
LABEL_44:
        *(_OWORD *)v103 = xmmword_1002888D0;
        v104 = xmmword_1002888D0;
        v106 = _swiftEmptyArrayStorage;
        if (v10)
        {
          if (v9 < 0)
            v83 = v9;
          else
            v83 = v9 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v9);
          v62 = _CocoaArrayWrapper.endIndex.getter(v83);
          if (v62)
          {
LABEL_46:
            if (v62 >= 1)
            {
              v63 = 0;
              do
              {
                if ((v9 & 0xC000000000000001) != 0)
                  v64 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v63, v9);
                else
                  v64 = *(id *)(v9 + 8 * v63 + 32);
                v65 = v64;
                ++v63;
                v102 = v64;
                sub_1000BA6EC(&v102, v2);

              }
              while (v62 != v63);
              v74 = swift_bridgeObjectRelease_n(v9, 2);
              v75 = v103[1];
              if ((unint64_t)v103[1] >> 60 != 15)
              {
                v76 = *((_QWORD *)&v104 + 1);
                if (*((_QWORD *)&v104 + 1) >> 60 != 15)
                {
                  v96 = v60;
                  v77 = v103[0];
                  v78 = v104;
                  v79 = v106;
                  v80 = v106[2];
                  if (v99)
                  {
                    if (v101 < 0)
                      v81 = v101;
                    else
                      v81 = v101 & 0xFFFFFFFFFFFFFF8;
                    sub_10006BA34(v103[0], v103[1]);
                    sub_10006BA34(v78, v76);
                    if (v80 == __CocoaSet.count.getter(v81))
                      goto LABEL_63;
                  }
                  else
                  {
                    v91 = *(_QWORD *)(v101 + 16);
                    sub_10006BA34(v103[0], v103[1]);
                    sub_10006BA34(v78, v76);
                    if (v80 == v91)
                    {
LABEL_63:

                      sub_10006B9B4(v78, v76);
                      sub_10006B9B4(v77, v75);
                      v82 = v94;
                      *v94 = v77;
                      v82[1] = v75;
                      v82[2] = v78;
                      v82[3] = v76;
                      v82[4] = v79;
                      return;
                    }
                  }
                  sub_10006B9B4(v78, v76);
                  v74 = sub_10006B9B4(v77, v75);
                }
              }
              goto LABEL_69;
            }
            goto LABEL_80;
          }
        }
        else
        {
          v62 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v9);
          if (v62)
            goto LABEL_46;
        }
        v74 = swift_bridgeObjectRelease_n(v9, 2);
LABEL_69:
        v84 = Logger.logObject.getter(v74);
        v86 = static os_log_type_t.error.getter(v84, v85);
        if (os_log_type_enabled(v84, v86))
        {
          v87 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v87 = 0;
          _os_log_impl((void *)&_mh_execute_header, v84, v86, "Got invalid pairing information", v87, 2u);
          swift_slowDealloc(v87, -1, -1);
        }

        v88 = sub_1000AAC04();
        v89 = swift_allocError(&type metadata for DSKBLE.BLEError, v88, 0, 0);
        *v90 = 2;
        swift_willThrow(v89);

        swift_bridgeObjectRelease(v106);
        sub_10006B9B4(v104, *((unint64_t *)&v104 + 1));
        sub_10006B9B4(v103[0], v103[1]);
        return;
      }
    }
    else if (v59 == *(_QWORD *)(a2 + 16))
    {
      goto LABEL_44;
    }
    v66 = swift_bridgeObjectRelease(v9);
    v67 = Logger.logObject.getter(v66);
    v69 = static os_log_type_t.error.getter(v67, v68);
    if (os_log_type_enabled(v67, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v70 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v69, "Failed to retrieve peripherals", v70, 2u);
      swift_slowDealloc(v70, -1, -1);
    }

    v71 = sub_1000AAC04();
    v72 = swift_allocError(&type metadata for DSKBLE.BLEError, v71, 0, 0);
    *v73 = 2;
    swift_willThrow(v72);

    return;
  }
  v106 = _swiftEmptyArrayStorage;
  sub_10019296C(0, v21 & ~(v21 >> 63), 0);
  if (v18)
  {
    if (a2 < 0)
      v31 = a2;
    else
      v31 = a2 & 0xFFFFFFFFFFFFFF8;
    v32 = __CocoaSet.startIndex.getter(v31);
    v34 = 1;
  }
  else
  {
    v32 = sub_100196CE0(a2);
    v34 = v35 & 1;
  }
  *(_QWORD *)&v104 = v32;
  *((_QWORD *)&v104 + 1) = v33;
  v105 = v34;
  if ((v21 & 0x8000000000000000) == 0)
  {
    v36 = a2 & 0xFFFFFFFFFFFFFF8;
    if (a2 < 0)
      v36 = a2;
    v100 = v36;
    v98 = v5;
    do
    {
      while (1)
      {
        v47 = sub_10019671C(v104, *((uint64_t *)&v104 + 1), v105, a2);
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v47 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v4);
        swift_release(v47);
        v48 = v106;
        if ((swift_isUniquelyReferenced_nonNull_native(v106) & 1) == 0)
        {
          sub_10019296C(0, v48[2] + 1, 1);
          v48 = v106;
        }
        v50 = v48[2];
        v49 = v48[3];
        if (v50 >= v49 >> 1)
        {
          sub_10019296C(v49 > 1, v50 + 1, 1);
          v48 = v106;
        }
        v48[2] = v50 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))((unint64_t)v48+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v50, v8, v4);
        v106 = v48;
        if (v18)
          break;
        v37 = v104;
        v38 = v105;
        v39 = sub_100195EE4(v104, *((_QWORD *)&v104 + 1), v105, a2);
        v41 = v40;
        v42 = v8;
        v43 = v4;
        v45 = v44;
        sub_1000960E8(v37, *((uint64_t *)&v37 + 1), v38);
        *(_QWORD *)&v104 = v39;
        *((_QWORD *)&v104 + 1) = v41;
        a2 = v101;
        v46 = v45 & 1;
        v4 = v43;
        v8 = v42;
        v5 = v98;
        v18 = v99;
        v105 = v46;
        if (!--v21)
          goto LABEL_36;
      }
      if ((v105 & 1) == 0)
        goto LABEL_81;
      v51 = __CocoaSet.Index.handleBitPattern.getter(v104, *((_QWORD *)&v104 + 1));
      if (v51)
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v51);
      else
        isUniquelyReferenced_nonNull_native = 1;
      v53 = sub_100063D3C(&qword_100345380);
      v54 = (void (*)(uint64_t *, _QWORD))Set.Index._asCocoa.modify(v103, v53);
      __CocoaSet.formIndex(after:isUnique:)(v55, isUniquelyReferenced_nonNull_native, v100);
      v54(v103, 0);
      --v21;
    }
    while (v21);
LABEL_36:
    sub_1000960E8(v104, *((uint64_t *)&v104 + 1), v105);
    v30 = v106;
    goto LABEL_37;
  }
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
}

void sub_1000AD358(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[3];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if (!*(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
  {
    v24 = Logger.logObject.getter(v11);
    v26 = static os_log_type_t.error.getter(v24, v25);
    if (os_log_type_enabled(v24, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v26, "Not running", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }
    goto LABEL_14;
  }
  v12 = swift_retain_n(a1, 2);
  v13 = Logger.logObject.getter(v12);
  v17 = static os_log_type_t.info.getter(v13, v14, v15, v16);
  if (os_log_type_enabled(v13, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    *(_DWORD *)v18 = 136315138;
    v40[0] = v19;
    v20 = swift_retain(a1);
    v21 = UUID.uuidString.getter(v20);
    v23 = v22;
    swift_release(a1);
    v38 = sub_1001C56EC(v21, v23, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v18 + 4, v18 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v13, v17, "Disconnection request for %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

  v28 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests);
  swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests, v40, 0, 0);
  v29 = *v28;
  swift_retain(a1);
  v30 = swift_bridgeObjectRetain(v29);
  v31 = sub_1000D9D38(v30, a1);
  swift_bridgeObjectRelease(v29);
  swift_release(a1);
  if (v31)
  {
    swift_beginAccess(v28, &v38, 33, 0);
    v32 = sub_1000D3B40((uint64_t)v31);
    swift_endAccess(&v38);
    swift_release(v31);
    swift_release(v32);
  }
  v33 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
  swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, &v38, 0, 0);
  v34 = *v33;
  swift_retain(a1);
  v35 = swift_bridgeObjectRetain(v34);
  v36 = sub_1000D837C(v35, a1);
  swift_bridgeObjectRelease(v34);
  swift_release(a1);
  if (v36)
  {
    v24 = (id)v36[3];
    sub_1000B4DF8(v24, 1, 0);
    swift_release(v36);
LABEL_14:

  }
}

_QWORD *sub_1000AD728(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  uint64_t v34;

  v3 = v2;
  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = type metadata accessor for DSKBLE.BLEScanRequest();
    v10 = sub_1000C69C4(&qword_100346058, v9, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEScanRequest, (uint64_t)&unk_100289848);
    result = Set.Iterator.init(_cocoa:)(v33, v7, v8, v10);
    v5 = v33[0];
    v31 = v33[1];
    v12 = v33[2];
    v13 = v33[3];
    v14 = v33[4];
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a1 + 32);
    v31 = a1 + 56;
    v16 = ~v15;
    v17 = -v15;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v14 = v18 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v12 = v16;
    v13 = 0;
  }
  v30 = (unint64_t)(v12 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v19 = __CocoaSet.Iterator.next()(result);
  if (v19)
  {
    v20 = v19;
    v32 = v19;
    v21 = type metadata accessor for DSKBLE.BLEScanRequest();
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
    v22 = v34;
    swift_unknownObjectRelease(v20);
    v23 = v13;
    v24 = v14;
    while (v22)
    {
      v34 = v22;
      sub_1000B5844((uint64_t)&v34, a2);
      result = (_QWORD *)swift_release(v22);
      if (v3)
      {
        v29 = v5;
        return (_QWORD *)sub_10007EF58(v29);
      }
      v13 = v23;
      v14 = v24;
      if (v5 < 0)
        goto LABEL_11;
LABEL_14:
      if (v14)
      {
        v24 = (v14 - 1) & v14;
        v25 = __clz(__rbit64(v14)) | (v13 << 6);
        v23 = v13;
      }
      else
      {
        v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
          return result;
        }
        if (v23 >= v30)
          break;
        v26 = *(_QWORD *)(v31 + 8 * v23);
        if (!v26)
        {
          v27 = v13 + 2;
          if (v13 + 2 >= v30)
            break;
          v26 = *(_QWORD *)(v31 + 8 * v27);
          if (v26)
            goto LABEL_25;
          v27 = v13 + 3;
          if (v13 + 3 >= v30)
            break;
          v26 = *(_QWORD *)(v31 + 8 * v27);
          if (v26)
            goto LABEL_25;
          v27 = v13 + 4;
          if (v13 + 4 >= v30)
            break;
          v26 = *(_QWORD *)(v31 + 8 * v27);
          if (v26)
          {
LABEL_25:
            v23 = v27;
          }
          else
          {
            v23 = v13 + 5;
            if (v13 + 5 >= v30)
              break;
            v26 = *(_QWORD *)(v31 + 8 * v23);
            if (!v26)
            {
              v28 = v13 + 6;
              while (v30 != v28)
              {
                v26 = *(_QWORD *)(v31 + 8 * v28++);
                if (v26)
                {
                  v23 = v28 - 1;
                  goto LABEL_26;
                }
              }
              break;
            }
          }
        }
LABEL_26:
        v24 = (v26 - 1) & v26;
        v25 = __clz(__rbit64(v26)) + (v23 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v25);
      swift_retain(v22);
    }
  }
  v29 = v5;
  return (_QWORD *)sub_10007EF58(v29);
}

void sub_1000ADA10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[5];
  uint64_t v29;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for DSKBLE.BLEConnectionRequest();
    v6 = sub_1000C69C4((unint64_t *)&unk_1003460C0, v5, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEConnectionRequest, (uint64_t)&unk_1002897D0);
    v7 = Set.Iterator.init(_cocoa:)(v28, v3, v4, v6);
    v1 = v28[0];
    v26 = v28[1];
    v8 = v28[2];
    v9 = v28[3];
    v10 = v28[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v26 = a1 + 56;
    v8 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(a1 + 56);
    v7 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v9 = 0;
  }
  v14 = (unint64_t)(v8 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v10)
    {
      v15 = (v10 - 1) & v10;
      v16 = __clz(__rbit64(v10)) | (v9 << 6);
      v17 = v9;
      goto LABEL_32;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v22 >= v14)
      goto LABEL_35;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    v17 = v9 + 1;
    if (!v23)
    {
      v17 = v9 + 2;
      if (v9 + 2 >= v14)
        goto LABEL_35;
      v23 = *(_QWORD *)(v26 + 8 * v17);
      if (!v23)
      {
        v17 = v9 + 3;
        if (v9 + 3 >= v14)
          goto LABEL_35;
        v23 = *(_QWORD *)(v26 + 8 * v17);
        if (!v23)
        {
          v17 = v9 + 4;
          if (v9 + 4 >= v14)
            goto LABEL_35;
          v23 = *(_QWORD *)(v26 + 8 * v17);
          if (!v23)
          {
            v17 = v9 + 5;
            if (v9 + 5 >= v14)
              goto LABEL_35;
            v23 = *(_QWORD *)(v26 + 8 * v17);
            if (!v23)
            {
              v24 = v9 + 6;
              while (v14 != v24)
              {
                v23 = *(_QWORD *)(v26 + 8 * v24++);
                if (v23)
                {
                  v17 = v24 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              sub_10007EF58(v1);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v15 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_32:
    v21 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v16);
    swift_retain(v21);
    if (!v21)
      goto LABEL_35;
    while (1)
    {
      v25 = *(void **)(v21 + 56);
      *(_QWORD *)(v21 + 56) = 0;
      swift_release(v21);

      v9 = v17;
      v10 = v15;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v18 = __CocoaSet.Iterator.next()(v7);
      if (v18)
      {
        v19 = v18;
        v27 = v18;
        v20 = type metadata accessor for DSKBLE.BLEConnectionRequest();
        swift_unknownObjectRetain(v19);
        swift_dynamicCast(&v29, &v27, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
        v21 = v29;
        swift_unknownObjectRelease(v19);
        v17 = v9;
        v15 = v10;
        if (v21)
          continue;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
}

void sub_1000ADCAC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  void *v23;
  Class isa;
  NSUUID v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[3];
  char v57[24];
  uint64_t v58;
  uint64_t v59;

  v7 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v8 = *(v7 - 1);
  __chkstk_darwin();
  v10 = (uint64_t *)((char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = (void *)qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(uint64_t *, _QWORD, _QWORD *))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = v11;
  v13 = _dispatchPreconditionTest(_:)(v10);
  v14 = (*(uint64_t (**)(uint64_t *, _QWORD *))(v8 + 8))(v10, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (!*(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
  {
    v25.super.isa = (Class)Logger.logObject.getter(v14);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)v25.super.isa, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v25.super.isa, v26, "Not running", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }
    goto LABEL_13;
  }
  v15 = (uint64_t *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
  swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v57, 0, 0);
  v16 = *v15;
  swift_retain(a3);
  v17 = swift_bridgeObjectRetain(v16);
  v7 = sub_1000D89A0(v17, a3);
  swift_bridgeObjectRelease(v16);
  swift_release(a3);
  if (v7)
  {
    v10 = v7 + 20;
    swift_beginAccess(v7 + 20, v56, 0, 0);
    if (*(_QWORD *)(v7[20] + 16) <= 9uLL)
    {
      swift_beginAccess(v7 + 20, &v54, 33, 0);
      v13 = *v10;
      sub_100063C8C(a1, a2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
      *v10 = v13;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_8:
        v20 = *(_QWORD *)(v13 + 16);
        v19 = *(_QWORD *)(v13 + 24);
        v21 = (uint8_t *)(v20 + 1);
        if (v20 >= v19 >> 1)
        {
          v53 = (uint8_t *)(v20 + 1);
          v52 = sub_1001C4254((_QWORD *)(v19 > 1), v20 + 1, 1, (_QWORD *)v13);
          v21 = v53;
          v13 = (uint64_t)v52;
          *v10 = (uint64_t)v52;
        }
        *(_QWORD *)(v13 + 16) = v21;
        v22 = v13 + 16 * v20;
        *(_QWORD *)(v22 + 32) = a1;
        *(_QWORD *)(v22 + 40) = a2;
        swift_endAccess(&v54);
        sub_1000B61EC((uint64_t)v7);
        v23 = (void *)objc_opt_self(CertificationLogging);
        isa = Data._bridgeToObjectiveC()().super.isa;
        v25.super.isa = UUID._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v23, "bleLogMessageSent:peerUUID:", isa, v25.super.isa);
        swift_release(v7);

LABEL_13:
        return;
      }
LABEL_23:
      v13 = (uint64_t)sub_1001C4254(0, *(_QWORD *)(v13 + 16) + 1, 1, (_QWORD *)v13);
      *v10 = v13;
      goto LABEL_8;
    }
    v37 = swift_retain_n(a3, 2);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      *(_DWORD *)v40 = 136315138;
      v53 = v40 + 4;
      v54 = v41;
      v42 = swift_retain(a3);
      v43 = UUID.uuidString.getter(v42);
      v45 = v44;
      swift_release(a3);
      v58 = sub_1001C56EC(v43, v45, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v53, v40 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v45);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Send queue is full %s", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      swift_release_n(a3, 2);
    }

    v49 = sub_1000AAC04();
    v50 = swift_allocError(&type metadata for DSKBLE.BLEError, v49, 0, 0);
    *v51 = 6;
    swift_willThrow(v50);
    swift_release(v7);
  }
  else
  {
    v28 = swift_retain_n(a3, 2);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      *(_DWORD *)v31 = 136315138;
      v56[0] = v32;
      v33 = swift_retain(a3);
      v34 = UUID.uuidString.getter(v33);
      v36 = v35;
      swift_release(a3);
      v54 = sub_1001C56EC(v34, v36, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v31 + 4, v31 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v36);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to send message to disconnected peripheral %s", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      swift_release_n(a3, 2);
    }

    v46 = sub_1000AAC04();
    v47 = swift_allocError(&type metadata for DSKBLE.BLEError, v46, 0, 0);
    *v48 = 4;
    swift_willThrow(v47);
  }
}

void sub_1000AE2DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint8_t *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  char v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD v47[2];
  id v48;
  uint64_t v49[3];
  uint64_t v50;
  uint64_t v51;

  v3 = v2;
  v4 = v1;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (_QWORD *)((char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) != 0)
  {
    v14 = *(void **)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
    if (v14)
    {
      v15 = v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_logger;
      swift_retain_n(a1, 2);
      v16 = v14;
      v17 = Logger.logObject.getter(v16);
      v21 = static os_log_type_t.info.getter(v17, v18, v19, v20);
      if (os_log_type_enabled(v17, v21))
      {
        v22 = swift_slowAlloc(12, -1);
        v48 = v16;
        v23 = (uint8_t *)v22;
        v24 = swift_slowAlloc(32, -1);
        v47[1] = v3;
        v25 = v24;
        v49[0] = v24;
        *(_DWORD *)v23 = 136315138;
        v47[0] = v15;
        v26 = *(_QWORD *)(a1 + 16);
        v27 = *(_QWORD *)(a1 + 24);
        swift_bridgeObjectRetain(v27);
        v50 = sub_1001C56EC(v26, v27, v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v23 + 4, v23 + 12);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v27);
        _os_log_impl((void *)&_mh_execute_header, v17, v21, "Scan request for %s", v23, 0xCu);
        swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v25, -1, -1);
        v28 = v23;
        v16 = v48;
        swift_slowDealloc(v28, -1, -1);
      }
      else
      {
        swift_release_n(a1, 2);
      }

      if ((*(_BYTE *)(a1 + 40) & 1) != 0
        || (v33 = objc_msgSend(v16, "state"), (unint64_t)v33 >= 5) && (v33 == (id)5 || v33 == (id)10))
      {
        swift_beginAccess(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_scanRequests, v49, 33, 0);
        swift_retain(a1);
        v32 = sub_1000C70D8(&v50, a1);
        swift_endAccess(v49);
        swift_release(v50);
        if ((v32 & 1) != 0)
        {
          sub_1000B4314();
        }
        else
        {
          v37 = swift_retain_n(a1, 2);
          v38 = Logger.logObject.getter(v37);
          v42 = static os_log_type_t.info.getter(v38, v39, v40, v41);
          if (os_log_type_enabled(v38, v42))
          {
            v48 = v16;
            v43 = (uint8_t *)swift_slowAlloc(12, -1);
            v44 = swift_slowAlloc(32, -1);
            v49[0] = v44;
            *(_DWORD *)v43 = 136315138;
            v45 = *(_QWORD *)(a1 + 16);
            v46 = *(_QWORD *)(a1 + 24);
            swift_bridgeObjectRetain(v46);
            v50 = sub_1001C56EC(v45, v46, v49);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v43 + 4, v43 + 12);
            swift_release_n(a1, 2);
            swift_bridgeObjectRelease(v46);
            _os_log_impl((void *)&_mh_execute_header, v38, v42, "Scan is already requested %s", v43, 0xCu);
            swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v44, -1, -1);
            swift_slowDealloc(v43, -1, -1);

            return;
          }
          swift_release_n(a1, 2);

        }
      }
      else
      {
        v34 = sub_1000AAC04();
        v35 = swift_allocError(&type metadata for DSKBLE.BLEError, v34, 0, 0);
        *v36 = 3;
        swift_willThrow(v35);
      }

    }
    else
    {
      v29 = Logger.logObject.getter(v13);
      v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Not running", v31, 2u);
        swift_slowDealloc(v31, -1, -1);
      }

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000AE7B0(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35[2];
  _BYTE v36[24];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (uint64_t *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    v11 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests);
    swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests, v36, 1, 0);
    v12 = *v11;
    swift_retain(a1);
    v13 = swift_bridgeObjectRetain(v12);
    v14 = sub_1000D6E68(v13, a1);
    swift_bridgeObjectRelease(v12);
    swift_release(a1);
    v15 = *v11;
    *v11 = (uint64_t)v14;
    result = swift_bridgeObjectRelease(v15);
    v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 32);
      v18 = v17 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      v19 = a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      swift_retain(v17);
      if ((static UUID.== infix(_:_:)(v18, v19) & 1) != 0)
      {
        v20 = swift_retain_n(a1, 2);
        v21 = Logger.logObject.getter(v20);
        v25 = static os_log_type_t.info.getter(v21, v22, v23, v24);
        if (os_log_type_enabled(v21, v25))
        {
          v26 = (uint8_t *)swift_slowAlloc(12, -1);
          v27 = swift_slowAlloc(32, -1);
          v35[0] = v27;
          *(_DWORD *)v26 = 136315138;
          v33 = v26 + 4;
          v28 = swift_retain(a1);
          v29 = UUID.uuidString.getter(v28);
          v31 = v30;
          swift_release(a1);
          v34 = sub_1001C56EC(v29, v31, v35);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v33, v26 + 12);
          swift_release_n(a1, 2);
          swift_bridgeObjectRelease(v31);
          _os_log_impl((void *)&_mh_execute_header, v21, v25, "Request to cancel pairing for %s", v26, 0xCu);
          swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v27, -1, -1);
          swift_slowDealloc(v26, -1, -1);
        }
        else
        {
          swift_release_n(a1, 2);
        }

        sub_1000C57FC(0);
      }
      return swift_release(v17);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000AEAA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[3];
  uint64_t v53;
  uint64_t v54;

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (_QWORD *)((char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = (void *)qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  v11 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v13 = v3 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_logger;
  v14 = swift_retain_n(a1, 2);
  v49 = v13;
  v15 = Logger.logObject.getter(v14);
  v19 = static os_log_type_t.info.getter(v15, v16, v17, v18);
  if (os_log_type_enabled(v15, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v47[1] = v2;
    v22 = v21;
    v48 = v3;
    *(_DWORD *)v20 = 136315138;
    v52[0] = v21;
    v23 = type metadata accessor for UUID(0);
    v24 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
    v27 = v26;
    v50 = sub_1001C56EC(v25, v26, v52);
    v3 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v20 + 4, v20 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v15, v19, "New request to unpair %s", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

  v28 = (uint64_t *)(v3 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_unpairingRequests);
  swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_unpairingRequests, v52, 0, 0);
  v29 = *v28;
  swift_retain(a1);
  v30 = swift_bridgeObjectRetain(v29);
  v31 = sub_1000D7158(v30, a1);
  swift_bridgeObjectRelease(v29);
  swift_release(a1);
  if ((v31 & 1) == 0)
  {
    swift_beginAccess(v28, &v50, 33, 0);
    v42 = swift_retain(a1);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
    v8 = *(_QWORD **)((*v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v12 = *(_QWORD *)((*v28 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if ((unint64_t)v8 < v12 >> 1)
    {
LABEL_11:
      v43 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, a1);
      specialized Array._endMutation()(v43);
      swift_endAccess(&v50);
      sub_1000C450C();
      return;
    }
LABEL_15:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, (char *)v8 + 1, 1);
    goto LABEL_11;
  }
  v32 = swift_retain_n(a1, 2);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    *(_DWORD *)v35 = 136315138;
    v50 = v36;
    v37 = type metadata accessor for UUID(0);
    v38 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v37, v38);
    v41 = v40;
    v53 = sub_1001C56EC(v39, v40, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v35 + 4, v35 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v41);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Unpairing already requested for %s", v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

  v44 = sub_1000AAC04();
  v45 = swift_allocError(&type metadata for DSKBLE.BLEError, v44, 0, 0);
  *v46 = 0;
  swift_willThrow(v45);
}

void sub_1000AEF70(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  NSString v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[24];
  uint64_t v41;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (uint8_t **)((char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = qword_100354EE8;
  *v9 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    if (!*(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    {
      v17 = Logger.logObject.getter(v12);
      v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Not running", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }
      goto LABEL_25;
    }
    v13 = (uint64_t *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_scanRequests);
    swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_scanRequests, v40, 1, 0);
    v14 = *v13;
    if ((*v13 & 0xC000000000000001) != 0)
    {
      if (v14 < 0)
        v15 = *v13;
      else
        v15 = v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v13);
      v16 = __CocoaSet.count.getter(v15);
      swift_bridgeObjectRelease(v14);
    }
    else
    {
      v16 = *(_QWORD *)(v14 + 16);
    }
    swift_bridgeObjectRetain(a2);
    v38 = a1;
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v21 = objc_msgSend((id)objc_opt_self(CBUUID), "UUIDWithString:", v20);

    v22 = *v13;
    v17 = v21;
    v23 = swift_bridgeObjectRetain(v22);
    v24 = sub_1000D74C4(v23, v17);

    v25 = *v13;
    *v13 = v24;
    swift_bridgeObjectRelease(v25);
    v26 = *v13;
    if ((v26 & 0xC000000000000001) != 0)
    {
      if (v26 < 0)
        v27 = v26;
      else
        v27 = v26 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v26);
      v28 = __CocoaSet.count.getter(v27);
      swift_bridgeObjectRelease(v26);
      if (v28 >= v16)
        goto LABEL_24;
    }
    else if (*(_QWORD *)(v26 + 16) >= v16)
    {
LABEL_24:
      sub_1000B4314();
LABEL_25:

      return;
    }
    v29 = swift_bridgeObjectRetain_n(a2, 2);
    v30 = Logger.logObject.getter(v29);
    v34 = static os_log_type_t.info.getter(v30, v31, v32, v33);
    if (os_log_type_enabled(v30, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      v41 = v36;
      *(_DWORD *)v35 = 136315138;
      v37 = v35 + 4;
      swift_bridgeObjectRetain(a2);
      v39 = sub_1001C56EC(v38, a2, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v37, v35 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v30, v34, "Stop scanning for %s", v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a2, 2);
    }

    goto LABEL_24;
  }
  __break(1u);
}

void sub_1000AF360(uint64_t a1)
{
  uint8_t *v1;
  uint64_t v2;
  uint8_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint8_t *v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[3];
  uint64_t v72;
  uint64_t v73;

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (uint64_t *)((char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = (void *)qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  v11 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_23:
    swift_once(&qword_1003445A0, sub_1000B26B0);
    goto LABEL_11;
  }
  v12 = &v3[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_logger];
  v13 = swift_retain_n(a1, 2);
  v14 = Logger.logObject.getter(v13);
  v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
  if (os_log_type_enabled(v14, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v64 = v2;
    v65 = v12;
    v21 = v20;
    v71[0] = v20;
    v66 = v3;
    *(_DWORD *)v19 = 136315138;
    v63 = v19 + 4;
    v22 = *(_QWORD *)(a1 + 32);
    v23 = swift_retain(v22);
    v24 = UUID.uuidString.getter(v23);
    v26 = v25;
    swift_release(v22);
    v69 = sub_1001C56EC(v24, v26, v71);
    v3 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v63, v19 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v14, v18, "New request to pair %s", v19, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

  v11 = (uint64_t)&v3[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests];
  swift_beginAccess(&v3[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests], v71, 0, 0);
  v27 = *(_QWORD *)v11;
  swift_retain(a1);
  v28 = swift_bridgeObjectRetain(v27);
  v29 = sub_1000D77C0(v28, a1);
  swift_bridgeObjectRelease(v27);
  swift_release(a1);
  if ((v29 & 1) != 0)
  {
    v30 = swift_retain_n(a1, 2);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      v69 = v34;
      *(_DWORD *)v33 = 136315138;
      v66 = v33 + 4;
      v35 = *(_QWORD *)(a1 + 32);
      v36 = swift_retain(v35);
      v37 = UUID.uuidString.getter(v36);
      v39 = v38;
      swift_release(v35);
      v67 = sub_1001C56EC(v37, v39, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v66, v33 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Pairing already requested for %s", v33, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      swift_release_n(a1, 2);
    }

    v48 = 0;
LABEL_21:
    v59 = sub_1000AAC04();
    v60 = swift_allocError(&type metadata for DSKBLE.BLEError, v59, 0, 0);
    *v61 = v48;
    swift_willThrow(v60);
    return;
  }
  if (qword_1003445A0 != -1)
    goto LABEL_23;
LABEL_11:
  v40 = (uint64_t *)(qword_100354BC8 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
  swift_beginAccess(qword_100354BC8 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, &v69, 0, 0);
  v41 = *v40;
  swift_retain(a1);
  v42 = swift_bridgeObjectRetain(v41);
  v43 = sub_1000D78E4(v42, a1);
  swift_bridgeObjectRelease(v41);
  swift_release(a1);
  if ((v43 & 1) == 0)
  {
    v49 = swift_retain_n(a1, 2);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = swift_slowAlloc(32, -1);
      *(_DWORD *)v52 = 136315138;
      v66 = v52 + 4;
      v67 = v53;
      v54 = *(_QWORD *)(a1 + 32);
      v55 = swift_retain(v54);
      v56 = UUID.uuidString.getter(v55);
      v58 = v57;
      swift_release(v54);
      v72 = sub_1001C56EC(v56, v58, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v66, v52 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v58);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Peripheral is not connected %s", v52, 0xCu);
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);
    }
    else
    {
      swift_release_n(a1, 2);
    }

    v48 = 4;
    goto LABEL_21;
  }
  swift_beginAccess(v11, &v67, 33, 0);
  v44 = swift_retain(a1);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v44);
  v46 = *(_QWORD *)((*(_QWORD *)v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v45 = *(_QWORD *)((*(_QWORD *)v11 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v46 >= v45 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
  v47 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, a1);
  specialized Array._endMutation()(v47);
  swift_endAccess(&v67);
  sub_1000C450C();
}

void sub_1000AF9F8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  uint8_t *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t v51;
  uint8_t *v52;
  void *v53;
  uint64_t v54;
  uint64_t inited;
  uint64_t v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  Class isa;
  id v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  NSObject *v76;
  uint64_t v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  NSObject *v87;
  uint64_t v88;
  os_log_type_t v89;
  uint8_t *v90;
  unint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  _BYTE *v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  os_log_type_t v98;
  uint8_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint8_t *v107;
  id v108;
  unint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  _BYTE *v113;
  id v114;
  _BYTE *v115;
  uint64_t v116;
  unint64_t v117;
  uint8_t *v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  char v122[176];
  uint64_t v123[2];
  uint64_t v124;
  uint64_t v125;

  v5 = v4;
  v6 = v3;
  v10 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v11 = *(v10 - 1);
  __chkstk_darwin(v10, v12);
  v14 = (id *)((char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v15 = qword_100354EE8;
  *v14 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, _QWORD *))(v11 + 8))(v14, v10);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_34:
    swift_once(&qword_1003445A0, sub_1000B26B0);
LABEL_12:
    v38 = (uint64_t *)(qword_100354BC8 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
    swift_beginAccess(qword_100354BC8 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v123, 0, 0);
    v39 = *v38;
    swift_retain(v10);
    v40 = swift_bridgeObjectRetain(v39);
    v41 = (uint8_t *)sub_1000D8690(v40, (uint64_t)v10);
    swift_bridgeObjectRelease(v39);
    swift_release(v10);
    if (v41)
    {
      v42 = v10[2];
      v43 = v10[3];
      v44 = v116;
      v45 = v117;
      v10[2] = v116;
      v10[3] = v45;
      sub_10006B9B4(v42, v43);
      v46 = sub_100063C8C(v44, v45);
      v47 = Logger.logObject.getter(v46);
      v51 = static os_log_type_t.info.getter(v47, v48, v49, v50);
      if (os_log_type_enabled(v47, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v51, "Requesting pairing", v52, 2u);
        swift_slowDealloc(v52, -1, -1);
      }

      v6[v5] = 2;
      v53 = (void *)*((_QWORD *)v41 + 3);
      v54 = sub_100063D3C(&qword_1003460E0);
      inited = swift_initStackObject(v54, v122);
      *(_OWORD *)(inited + 16) = xmmword_1002888F0;
      v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBPairingOptionsUseMITMAuthentication);
      v121 = v56;
      v57 = v53;
      AnyHashable.init<A>(_:)(&v120, &type metadata for String, &protocol witness table for String);
      *(_QWORD *)(inited + 96) = &type metadata for Bool;
      v119 = v41;
      *(_BYTE *)(inited + 72) = 1;
      v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBPairingOptionsDistributeIRK);
      v121 = v58;
      AnyHashable.init<A>(_:)(&v120, &type metadata for String, &protocol witness table for String);
      *(_QWORD *)(inited + 168) = &type metadata for Bool;
      *(_BYTE *)(inited + 144) = 1;
      v59 = sub_10017C368(inited);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v59);
      v61 = v114;
      objc_msgSend(v114, "pairPeer:options:", v57, isa);
      swift_release(v10);

      swift_release(v119);
    }
    else
    {
      v95 = swift_retain_n(v10, 2);
      v96 = Logger.logObject.getter(v95);
      v98 = static os_log_type_t.error.getter(v96, v97);
      if (os_log_type_enabled(v96, v98))
      {
        v99 = (uint8_t *)swift_slowAlloc(12, -1);
        v100 = swift_slowAlloc(32, -1);
        v115 = v6;
        v101 = v100;
        v119 = v99;
        *(_DWORD *)v99 = 136315138;
        v120 = v100;
        v118 = v99 + 4;
        v102 = v10[4];
        v103 = swift_retain(v102);
        v104 = UUID.uuidString.getter(v103);
        v106 = v105;
        swift_release(v102);
        v124 = sub_1001C56EC(v104, v106, &v120);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, &v125, v118, v99 + 12);
        swift_release_n(v10, 2);
        swift_bridgeObjectRelease(v106);
        v107 = v119;
        _os_log_impl((void *)&_mh_execute_header, v96, v98, "Peripheral is not connected %s", v119, 0xCu);
        swift_arrayDestroy(v101, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v101, -1, -1);
        swift_slowDealloc(v107, -1, -1);
      }
      else
      {
        swift_release_n(v10, 2);
      }

      v108 = v114;
      v109 = sub_1000AAC04();
      v110 = swift_allocError(&type metadata for DSKBLE.BLEError, v109, 0, 0);
      *v111 = 4;
      sub_1000C57FC(v110);
      swift_errorRelease(v110);
      v112 = swift_allocError(&type metadata for DSKBLE.BLEError, v109, 0, 0);
      *v113 = 4;
      swift_willThrow(v112);
      swift_release(v10);

    }
    return;
  }
  v118 = (uint8_t *)v4;
  v17 = &v6[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_logger];
  v18 = swift_retain_n(a3, 2);
  v119 = v17;
  v19 = Logger.logObject.getter(v18);
  v23 = static os_log_type_t.info.getter(v19, v20, v21, v22);
  v24 = os_log_type_enabled(v19, v23);
  v117 = a2;
  v116 = a1;
  if (v24)
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v123[0] = v26;
    *(_DWORD *)v25 = 136315138;
    v27 = swift_retain(a3);
    v28 = UUID.uuidString.getter(v27);
    v115 = v6;
    v30 = v29;
    swift_release(a3);
    v120 = sub_1001C56EC(v28, v30, v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v25 + 4, v25 + 12);
    swift_release_n(a3, 2);
    v31 = v30;
    v6 = v115;
    swift_bridgeObjectRelease(v31);
    _os_log_impl((void *)&_mh_execute_header, v19, v23, "Received OOB data for %s", v25, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    swift_release_n(a3, 2);
  }

  v10 = *(_QWORD **)&v6[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest];
  if (v10)
  {
    v32 = v10[4];
    v33 = v32 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v34 = a3 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    swift_retain(*(_QWORD *)&v6[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest]);
    swift_retain(v32);
    LOBYTE(v34) = static UUID.== infix(_:_:)(v33, v34);
    v35 = swift_release(v32);
    if ((v34 & 1) != 0)
    {
      v5 = OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state;
      if (v6[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state] == 1)
      {
        v36 = *(void **)&v6[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingAgent];
        if (v36)
        {
          v37 = qword_1003445A0;
          v114 = v36;
          if (v37 == -1)
            goto LABEL_12;
          goto LABEL_34;
        }
        v87 = Logger.logObject.getter(v35);
        v89 = static os_log_type_t.error.getter(v87, v88);
        if (os_log_type_enabled(v87, v89))
        {
          v90 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v90 = 0;
          _os_log_impl((void *)&_mh_execute_header, v87, v89, "Missing shared pairing agent", v90, 2u);
          swift_slowDealloc(v90, -1, -1);
        }

        v91 = sub_1000AAC04();
        v92 = swift_allocError(&type metadata for DSKBLE.BLEError, v91, 0, 0);
        *v93 = 2;
        sub_1000C57FC(v92);
        swift_errorRelease(v92);
        v85 = swift_allocError(&type metadata for DSKBLE.BLEError, v91, 0, 0);
        *v94 = 2;
      }
      else
      {
        v75 = v6;
        v76 = Logger.logObject.getter(v75);
        v78 = static os_log_type_t.error.getter(v76, v77);
        if (os_log_type_enabled(v76, v78))
        {
          v79 = (uint8_t *)swift_slowAlloc(12, -1);
          v80 = swift_slowAlloc(32, -1);
          *(_DWORD *)v79 = 136315138;
          v123[0] = v80;
          v119 = v79 + 4;
          LOBYTE(v120) = v6[v5];
          v81 = String.init<A>(describing:)(&v120, &type metadata for DSKBLEPairing.State);
          v83 = v82;
          v120 = sub_1001C56EC(v81, v82, v123);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v119, v79 + 12);

          swift_bridgeObjectRelease(v83);
          _os_log_impl((void *)&_mh_execute_header, v76, v78, "Pairing requested in wrong state %s", v79, 0xCu);
          swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v80, -1, -1);
          swift_slowDealloc(v79, -1, -1);
        }
        else
        {

        }
        v84 = sub_1000AAC04();
        v85 = swift_allocError(&type metadata for DSKBLE.BLEError, v84, 0, 0);
        *v86 = 2;
      }
      swift_willThrow(v85);
      swift_release(v10);
      return;
    }
    swift_release(v10);
  }
  v62 = swift_retain_n(a3, 2);
  v63 = Logger.logObject.getter(v62);
  v65 = static os_log_type_t.error.getter(v63, v64);
  if (os_log_type_enabled(v63, v65))
  {
    v66 = (uint8_t *)swift_slowAlloc(12, -1);
    v67 = swift_slowAlloc(32, -1);
    v123[0] = v67;
    *(_DWORD *)v66 = 136315138;
    v68 = swift_retain(a3);
    v69 = UUID.uuidString.getter(v68);
    v71 = v70;
    swift_release(a3);
    v120 = sub_1001C56EC(v69, v71, v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v66 + 4, v66 + 12);
    swift_release_n(a3, 2);
    swift_bridgeObjectRelease(v71);
    _os_log_impl((void *)&_mh_execute_header, v63, v65, "Pairing not in progress for %s", v66, 0xCu);
    swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v66, -1, -1);
  }
  else
  {
    swift_release_n(a3, 2);
  }

  v72 = sub_1000AAC04();
  v73 = swift_allocError(&type metadata for DSKBLE.BLEError, v72, 0, 0);
  *v74 = 5;
  swift_willThrow(v73);
}

_QWORD *sub_1000B055C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  uint64_t v31;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for DSKBLE.BLEScanRequest();
    v6 = sub_1000C69C4(&qword_100346058, v5, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEScanRequest, (uint64_t)&unk_100289848);
    result = Set.Iterator.init(_cocoa:)(v30, v3, v4, v6);
    v1 = v30[0];
    v28 = v30[1];
    v9 = v30[2];
    v8 = v30[3];
    v10 = v30[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v28 = a1 + 56;
    v9 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v14 = (unint64_t)(v9 + 64) >> 6;
  while (1)
  {
    v15 = v8;
    if (v1 < 0)
    {
      v18 = __CocoaSet.Iterator.next()(result);
      if (!v18)
        goto LABEL_38;
      v19 = v18;
      v29 = v18;
      v20 = type metadata accessor for DSKBLE.BLEScanRequest();
      swift_unknownObjectRetain(v19);
      swift_dynamicCast(&v31, &v29, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
      v21 = v31;
      swift_unknownObjectRelease(v19);
      v8 = v15;
      if (!v21)
        goto LABEL_38;
      goto LABEL_35;
    }
    if (!v10)
      break;
    v16 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v17 = v16 | (v8 << 6);
LABEL_34:
    v21 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v17);
    swift_retain(v21);
    if (!v21)
      goto LABEL_38;
LABEL_35:
    v25 = *(_QWORD *)(v21 + 64);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 16);
      result = (_QWORD *)swift_release(v21);
      if (v26)
      {
        v27 = 1;
        goto LABEL_39;
      }
    }
    else
    {
      result = (_QWORD *)swift_release(v21);
    }
  }
  v22 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v22 >= v14)
      goto LABEL_38;
    v23 = *(_QWORD *)(v28 + 8 * v22);
    ++v8;
    if (!v23)
    {
      v8 = v15 + 2;
      if (v15 + 2 >= v14)
        goto LABEL_38;
      v23 = *(_QWORD *)(v28 + 8 * v8);
      if (!v23)
      {
        v8 = v15 + 3;
        if (v15 + 3 >= v14)
          goto LABEL_38;
        v23 = *(_QWORD *)(v28 + 8 * v8);
        if (!v23)
        {
          v8 = v15 + 4;
          if (v15 + 4 >= v14)
            goto LABEL_38;
          v23 = *(_QWORD *)(v28 + 8 * v8);
          if (!v23)
          {
            v8 = v15 + 5;
            if (v15 + 5 >= v14)
              goto LABEL_38;
            v23 = *(_QWORD *)(v28 + 8 * v8);
            if (!v23)
            {
              v24 = v15 + 6;
              while (v14 != v24)
              {
                v23 = *(_QWORD *)(v28 + 8 * v24++);
                if (v23)
                {
                  v8 = v24 - 1;
                  goto LABEL_33;
                }
              }
LABEL_38:
              v27 = 0;
LABEL_39:
              sub_10007EF58(v1);
              return (_QWORD *)v27;
            }
          }
        }
      }
    }
LABEL_33:
    v10 = (v23 - 1) & v23;
    v17 = __clz(__rbit64(v23)) + (v8 << 6);
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B0814(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v20;

  v3 = v2;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (uint64_t *)((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = qword_100354EE8;
  *v9 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x1000B0F78);
  }
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    __asm { BR              X9 }
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Not running", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = sub_1000AAC04();
  v17 = swift_allocError(&type metadata for DSKBLE.BLEError, v16, 0, 0);
  *v18 = 3;
  return swift_willThrow(v17);
}

void sub_1000B0F98(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  id v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  uint8_t *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t *v38;
  char v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  Class v84;
  id v85;
  uint64_t v86;
  id v87;
  id v88;
  void *v89;
  uint64_t v90;
  id v91;
  Class isa;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  os_log_type_t v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint8_t *v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  _BYTE v116[16];
  __int128 v117;
  uint64_t v118;
  _UNKNOWN **v119;
  uint64_t v120;
  _BYTE v121[24];

  v4 = v2;
  v7 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v8 = *(v7 - 1);
  __chkstk_darwin(v7, v9);
  v11 = (uint64_t *)((char *)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = (void *)qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = v12;
  v14 = _dispatchPreconditionTest(_:)(v11);
  v15 = (*(uint64_t (**)(_QWORD *, _QWORD *))(v8 + 8))(v11, v7);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_42;
  }
  v16 = *(void **)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (v16)
  {
    v17 = &unk_100345000;
    if ((a2 & 1) != 0)
    {
      swift_retain_n(a1, 2);
      v18 = v16;
      v19 = Logger.logObject.getter(v18);
      v23 = static os_log_type_t.info.getter(v19, v20, v21, v22);
      if (os_log_type_enabled(v19, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(12, -1);
        v114 = (id)swift_slowAlloc(32, -1);
        *(_QWORD *)&v117 = v114;
        *(_DWORD *)v24 = 136315138;
        v113 = (uint64_t)(v24 + 4);
        v25 = v4;
        v26 = v18;
        v27 = a1[2];
        v28 = swift_retain(v27);
        v29 = UUID.uuidString.getter(v28);
        v31 = v30;
        v32 = v27;
        v18 = v26;
        v4 = v25;
        swift_release(v32);
        v120 = sub_1001C56EC(v29, v31, (uint64_t *)&v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v113, v24 + 12);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v31);
        _os_log_impl((void *)&_mh_execute_header, v19, v23, "Replacing existing connection request for %s", v24, 0xCu);
        v33 = v114;
        swift_arrayDestroy(v114, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        v34 = v24;
        v17 = (_QWORD *)&unk_100345000;
        swift_slowDealloc(v34, -1, -1);
      }
      else
      {
        swift_release_n(a1, 2);
      }

      swift_beginAccess(v4 + v17[267], &v117, 33, 0);
      v53 = swift_retain(a1);
      v54 = sub_1000D61BC(v53);
      swift_endAccess(&v117);
      swift_release(v54);
      v55 = (uint64_t *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
      swift_beginAccess(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, &v120, 0, 0);
      v56 = *v55;
      swift_retain(a1);
      v57 = swift_bridgeObjectRetain(v56);
      v58 = sub_1000D806C(v57, (uint64_t)a1);
      swift_bridgeObjectRelease(v56);
      swift_release(a1);
      if (v58)
      {
        v118 = type metadata accessor for DSKBLE.BLEConnectionRequest();
        v119 = &off_100308308;
        *(_QWORD *)&v117 = a1;
        swift_beginAccess(v58 + 5, &v115, 33, 0);
        swift_retain(a1);
        sub_10006BA9C(v58 + 5);
        sub_1000DB160(&v117, (uint64_t)(v58 + 5));
        swift_endAccess(&v115);
        sub_1000B5D80(a1[2]);
        swift_release(v58);
      }

      return;
    }
    v38 = (uint64_t *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests);
    swift_beginAccess(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests, &v117, 33, 0);
    v3 = v16;
    swift_retain(a1);
    v39 = sub_1000C8444(&v120, (uint64_t)a1);
    swift_endAccess(&v117);
    swift_release(v120);
    if ((v39 & 1) != 0)
    {
      v40 = swift_retain_n(a1, 2);
      v41 = Logger.logObject.getter(v40);
      v45 = static os_log_type_t.info.getter(v41, v42, v43, v44);
      if (os_log_type_enabled(v41, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(12, -1);
        v113 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v117 = v113;
        v114 = v3;
        *(_DWORD *)v46 = 136315138;
        v112 = v46 + 4;
        v47 = a1[2];
        v48 = swift_retain(v47);
        v49 = UUID.uuidString.getter(v48);
        v51 = v50;
        swift_release(v47);
        v120 = sub_1001C56EC(v49, v51, (uint64_t *)&v117);
        v3 = v114;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v112, v46 + 12);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v51);
        _os_log_impl((void *)&_mh_execute_header, v41, v45, "Connection request for %s", v46, 0xCu);
        v52 = v113;
        swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v46, -1, -1);
      }
      else
      {
        swift_release_n(a1, 2);
      }

    }
    v59 = (uint64_t *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
    swift_beginAccess(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, &v117, 0, 0);
    v60 = *v59;
    swift_retain(a1);
    v61 = swift_bridgeObjectRetain(v60);
    v62 = sub_1000DAE50(v61, (uint64_t)a1);
    swift_bridgeObjectRelease(v60);
    swift_release(a1);
    if ((v62 & 1) != 0)
    {
      v63 = swift_retain_n(a1, 2);
      v64 = Logger.logObject.getter(v63);
      v65 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v64, v65))
      {
        v66 = (uint8_t *)swift_slowAlloc(12, -1);
        v67 = swift_slowAlloc(32, -1);
        v120 = v67;
        *(_DWORD *)v66 = 136315138;
        v68 = a1[2];
        v69 = swift_retain(v68);
        v70 = UUID.uuidString.getter(v69);
        v114 = v3;
        v72 = v71;
        swift_release(v68);
        v115 = sub_1001C56EC(v70, v72, &v120);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116, v66 + 4, v66 + 12);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v72);
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "Peripheral is already connected %s", v66, 0xCu);
        swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v67, -1, -1);
        swift_slowDealloc(v66, -1, -1);

LABEL_23:
        return;
      }
      swift_release_n(a1, 2);

      goto LABEL_40;
    }
    v73 = objc_msgSend(v3, "state");
    if ((unint64_t)v73 < 5 || v73 != (id)10 && v73 != (id)5)
    {
      v93 = Logger.logObject.getter(v73);
      v97 = static os_log_type_t.info.getter(v93, v94, v95, v96);
      if (os_log_type_enabled(v93, v97))
      {
        v98 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v98 = 0;
        _os_log_impl((void *)&_mh_execute_header, v93, v97, "Central is not available", v98, 2u);
        swift_slowDealloc(v98, -1, -1);
      }

      goto LABEL_40;
    }
    v74 = *v38;
    swift_retain(a1);
    v75 = swift_bridgeObjectRetain(v74);
    v7 = sub_1000D9A0C(v75, a1);
    swift_bridgeObjectRelease(v74);
    swift_release(a1);
    if (!v7)
      goto LABEL_51;
    v76 = (void *)v7[7];
    if (v76)
    {
LABEL_35:
      v90 = v7[6];
      v91 = v76;
      swift_bridgeObjectRetain(v90);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v90);
      objc_msgSend(v3, "connectPeripheral:options:", v91, isa);

      swift_release(v7);
      return;
    }
    v77 = sub_100063D3C(&qword_100345398);
    v78 = type metadata accessor for UUID(0);
    v79 = *(_QWORD *)(v78 - 8);
    v80 = *(unsigned __int8 *)(v79 + 80);
    v81 = (v80 + 32) & ~v80;
    v82 = swift_allocObject(v77, v81 + *(_QWORD *)(v79 + 72), v80 | 7);
    *(_OWORD *)(v82 + 16) = xmmword_1002888E0;
    v83 = v82 + v81;
    v14 = a1[2];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v83, v14 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v78);
    v84 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v82);
    v85 = objc_msgSend(v3, "retrievePeripheralsWithIdentifiers:", v84);

    v86 = sub_10006C25C(0, &qword_1003460B0, CBPeripheral_ptr);
    a2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v85, v86);

    if (!((unint64_t)a2 >> 62))
    {
      if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_31:
        if ((a2 & 0xC000000000000001) != 0)
        {
          v87 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_34:
          v88 = v87;
          swift_bridgeObjectRelease(a2);
          v89 = (void *)v7[7];
          v7[7] = v88;

          v76 = (void *)v7[7];
          if (v76)
            goto LABEL_35;
LABEL_52:
          __break(1u);
          return;
        }
        if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v87 = *(id *)(a2 + 32);
          goto LABEL_34;
        }
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
LABEL_46:
      swift_bridgeObjectRelease(a2);
      v101 = swift_retain_n(a1, 2);
      v102 = Logger.logObject.getter(v101);
      v103 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v102, v103))
      {
        v104 = (uint8_t *)swift_slowAlloc(12, -1);
        v105 = swift_slowAlloc(32, -1);
        v114 = v3;
        v106 = v105;
        v120 = v105;
        *(_DWORD *)v104 = 136315138;
        v113 = (uint64_t)(v104 + 4);
        v107 = swift_retain(v14);
        v108 = UUID.uuidString.getter(v107);
        v110 = v109;
        swift_release(v14);
        v115 = sub_1001C56EC(v108, v110, &v120);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116, v113, v104 + 12);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v110);
        _os_log_impl((void *)&_mh_execute_header, v102, v103, "Failed to retrieve peripheral for %s", v104, 0xCu);
        swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v106, -1, -1);
        swift_slowDealloc(v104, -1, -1);
        swift_release(v7);

        goto LABEL_23;
      }
      swift_release_n(a1, 2);
      swift_release(v7);

LABEL_40:
      return;
    }
LABEL_42:
    if (a2 < 0)
      v99 = a2;
    else
      v99 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v100 = _CocoaArrayWrapper.endIndex.getter(v99);
    swift_bridgeObjectRelease(a2);
    if (v100)
      goto LABEL_31;
    goto LABEL_46;
  }
  v35 = Logger.logObject.getter(v15);
  v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Not running", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }

}

uint64_t sub_1000B1B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  void *v31;
  id v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  NSObject *v38;
  uint64_t v39;
  os_log_type_t v40;
  id v41;
  uint8_t *v42;
  uint8_t *v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  NSObject *v47;
  uint64_t v48;
  os_log_type_t v49;
  id v50;
  uint8_t *v51;
  uint8_t *v52;
  unint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;

  v60 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60, v4);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (id *)((char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) != 0)
  {
    if (qword_1003445A0 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003445A0, sub_1000B26B0);
LABEL_5:
  v14 = *(void **)(qword_100354BC8 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (!v14)
  {
    v35 = sub_1000AAC04();
    v36 = swift_allocError(&type metadata for DSKBLE.BLEError, v35, 0, 0);
    *v37 = 3;
    swift_willThrow(v36);
    return v7;
  }
  v15 = v14;
  v16 = objc_msgSend(v15, "sharedPairingAgent");
  if (!v16)
  {
    v47 = Logger.logObject.getter(0);
    v49 = static os_log_type_t.error.getter(v47, v48);
    v7 = v49;
    if (os_log_type_enabled(v47, v49))
    {
      v50 = v15;
      v51 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v7, "Failed to retrieve shared pairing agent", v51, 2u);
      v52 = v51;
      v15 = v50;
      swift_slowDealloc(v52, -1, -1);
    }

    v53 = sub_1000AAC04();
    v54 = swift_allocError(&type metadata for DSKBLE.BLEError, v53, 0, 0);
    *v55 = 3;
    swift_willThrow(v54);

    return v7;
  }
  v17 = v16;
  v18 = objc_msgSend(v16, "retrievePairedPeers");
  if (!v18)
    goto LABEL_21;
  v19 = v18;
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, (char *)&type metadata for Any + 8);
  v58 = v17;
  v21 = v20;

  v22 = sub_1000C5BE8(v21);
  v23 = v21;
  v17 = v58;
  v18 = (id)swift_bridgeObjectRelease(v23);
  if (!v22)
  {
LABEL_21:
    v38 = Logger.logObject.getter(v18);
    v40 = static os_log_type_t.error.getter(v38, v39);
    v7 = v40;
    if (os_log_type_enabled(v38, v40))
    {
      v41 = v15;
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v7, "Failed to retrieve paired peers", v42, 2u);
      v43 = v42;
      v15 = v41;
      swift_slowDealloc(v43, -1, -1);
    }

    v44 = sub_1000AAC04();
    v45 = swift_allocError(&type metadata for DSKBLE.BLEError, v44, 0, 0);
    *v46 = 3;
    swift_willThrow(v45);

    return v7;
  }
  swift_bridgeObjectRetain(a2);
  v24 = v59;
  v25 = (uint64_t)sub_1000D7BF4((uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(a2);
  if (!((unint64_t)v25 >> 62))
  {
    v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    v59 = v24;
    if (v26)
      goto LABEL_11;
LABEL_33:
    swift_bridgeObjectRelease(v25);
    v29 = _swiftEmptyArrayStorage;
LABEL_34:
    v7 = sub_100145D2C((uint64_t)v29);

    swift_bridgeObjectRelease(v29);
    return v7;
  }
  if (v25 < 0)
    v56 = v25;
  else
    v56 = v25 & 0xFFFFFFFFFFFFFF8;
  v26 = _CocoaArrayWrapper.endIndex.getter(v56);
  v59 = v24;
  if (!v26)
    goto LABEL_33;
LABEL_11:
  v57 = v15;
  v61 = _swiftEmptyArrayStorage;
  result = sub_10019296C(0, v26 & ~(v26 >> 63), 0);
  if ((v26 & 0x8000000000000000) == 0)
  {
    v28 = 0;
    v29 = v61;
    do
    {
      if ((v25 & 0xC000000000000001) != 0)
        v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28, v25);
      else
        v30 = *(id *)(v25 + 8 * v28 + 32);
      v31 = v30;
      v32 = objc_msgSend(v30, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

      v61 = v29;
      v34 = v29[2];
      v33 = v29[3];
      if (v34 >= v33 >> 1)
      {
        sub_10019296C(v33 > 1, v34 + 1, 1);
        v29 = v61;
      }
      ++v28;
      v29[2] = v34 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v29+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v34, v6, v60);
    }
    while (v26 != v28);
    swift_bridgeObjectRelease(v25);
    v15 = v57;
    v17 = v58;
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B2084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31[2];
  _BYTE v32[24];

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v31[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) != 0)
  {
    if (*(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    {
      v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
      swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v32, 0, 0);
      v12 = *v11;
      swift_retain(a1);
      v13 = swift_bridgeObjectRetain(v12);
      v14 = sub_1000D89A0(v13, a1);
      swift_bridgeObjectRelease(v12);
      swift_release(a1);
      if (v14)
      {
        v15 = *((unsigned __int8 *)v14 + 168);
        swift_release(v14);
      }
      else
      {
        v20 = swift_retain_n(a1, 2);
        v21 = Logger.logObject.getter(v20);
        v23 = static os_log_type_t.error.getter(v21, v22);
        if (os_log_type_enabled(v21, v23))
        {
          v24 = (uint8_t *)swift_slowAlloc(12, -1);
          v25 = swift_slowAlloc(32, -1);
          *(_DWORD *)v24 = 136315138;
          v31[0] = v25;
          v26 = swift_retain(a1);
          v27 = UUID.uuidString.getter(v26);
          v29 = v28;
          swift_release(a1);
          v30 = sub_1001C56EC(v27, v29, v31);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v24 + 4, v24 + 12);
          v15 = 2;
          swift_release_n(a1, 2);
          swift_bridgeObjectRelease(v29);
          _os_log_impl((void *)&_mh_execute_header, v21, v23, "Peripheral is not connected %s", v24, 0xCu);
          swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v25, -1, -1);
          swift_slowDealloc(v24, -1, -1);
        }
        else
        {
          v15 = 2;
          swift_release_n(a1, 2);
        }

      }
    }
    else
    {
      v16 = Logger.logObject.getter(result);
      v18 = static os_log_type_t.error.getter(v16, v17);
      if (os_log_type_enabled(v16, v18))
      {
        v15 = 2;
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v18, "Not running", v19, 2u);
        swift_slowDealloc(v19, -1, -1);

      }
      else
      {

        return 2;
      }
    }
    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1000B23D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  uint64_t v34;

  v2 = a2;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v4 = a2;
    else
      v4 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = type metadata accessor for DSKBLE.BLEScanRequest();
    v8 = sub_1000C69C4(&qword_100346058, v7, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEScanRequest, (uint64_t)&unk_100289848);
    result = Set.Iterator.init(_cocoa:)(v33, v5, v6, v8);
    v2 = v33[0];
    v31 = v33[1];
    v10 = v33[2];
    v11 = v33[3];
    v12 = v33[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a2 + 32);
    v31 = a2 + 56;
    v14 = ~v13;
    v15 = -v13;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v12 = v16 & *(_QWORD *)(a2 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a2);
    v10 = v14;
    v11 = 0;
  }
  v30 = (unint64_t)(v10 + 64) >> 6;
  do
  {
    if (v2 < 0)
    {
      v22 = __CocoaSet.Iterator.next()(result);
      if (!v22)
        goto LABEL_38;
      v23 = v22;
      v32 = v22;
      v24 = type metadata accessor for DSKBLE.BLEScanRequest();
      swift_unknownObjectRetain(v23);
      swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v24, 7);
      v25 = v34;
      swift_unknownObjectRelease(v23);
      v21 = v11;
      v19 = v12;
      if (!v25)
        goto LABEL_38;
    }
    else
    {
      if (v12)
      {
        v19 = (v12 - 1) & v12;
        v20 = __clz(__rbit64(v12)) | (v11 << 6);
        v21 = v11;
      }
      else
      {
        v26 = v11 + 1;
        if (__OFADD__(v11, 1))
          goto LABEL_40;
        if (v26 >= v30)
          goto LABEL_38;
        v27 = *(_QWORD *)(v31 + 8 * v26);
        v21 = v11 + 1;
        if (!v27)
        {
          v21 = v11 + 2;
          if (v11 + 2 >= v30)
            goto LABEL_38;
          v27 = *(_QWORD *)(v31 + 8 * v21);
          if (!v27)
          {
            v21 = v11 + 3;
            if (v11 + 3 >= v30)
              goto LABEL_38;
            v27 = *(_QWORD *)(v31 + 8 * v21);
            if (!v27)
            {
              v21 = v11 + 4;
              if (v11 + 4 >= v30)
                goto LABEL_38;
              v27 = *(_QWORD *)(v31 + 8 * v21);
              if (!v27)
              {
                v21 = v11 + 5;
                if (v11 + 5 >= v30)
                  goto LABEL_38;
                v27 = *(_QWORD *)(v31 + 8 * v21);
                if (!v27)
                {
                  v28 = v11 + 6;
                  while (v30 != v28)
                  {
                    v27 = *(_QWORD *)(v31 + 8 * v28++);
                    if (v27)
                    {
                      v21 = v28 - 1;
                      goto LABEL_34;
                    }
                  }
LABEL_38:
                  sub_10007EF58(v2);
                  return (_QWORD *)a1;
                }
              }
            }
          }
        }
LABEL_34:
        v19 = (v27 - 1) & v27;
        v20 = __clz(__rbit64(v27)) + (v21 << 6);
      }
      v25 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v20);
      swift_retain(v25);
      if (!v25)
        goto LABEL_38;
    }
    v29 = *(_QWORD *)(v25 + 64);
    if (v29)
      v17 = *(_QWORD *)(v29 + 16);
    else
      v17 = 1;
    result = (_QWORD *)swift_release(v25);
    v11 = v21;
    v12 = v19;
    v18 = __OFADD__(a1, v17);
    a1 += v17;
  }
  while (!v18);
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

id sub_1000B26B0(uint64_t a1)
{
  return sub_1000C3600(a1, type metadata accessor for DSKBLE, &qword_100354BC8);
}

id sub_1000B26C4()
{
  void *v0;
  void *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  void **aBlock;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void *v31;
  void *v32;
  uint64_t v33;
  objc_super v34;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = type metadata accessor for DispatchQoS.QoSClass(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = SESLoggingSubsystem;
  v9 = v1;
  v10 = String.init(cString:)(v8);
  Logger.init(subsystem:category:)(v10);
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced6DSKBLE_centralState] = 4;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced6DSKBLE_closuresOnPowerOn] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals] = &_swiftEmptySetSingleton;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests] = &_swiftEmptySetSingleton;
  v11 = &v9[OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryEventName];
  *(_QWORD *)v11 = 0xD000000000000014;
  *((_QWORD *)v11 + 1) = 0x80000001002BBCC0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryPairedPeripherals] = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryTransactions] = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced6DSKBLE_maxBTScanFilters] = 8;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced6DSKBLE_maxPeripheralErrorRetries] = 3;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced6DSKBLE_retryDelaySec] = 0x4014000000000000;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced6DSKBLE_rssiCloserDeactivated] = 10;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced6DSKBLE_rssiFurtherDeactivated] = -120;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced6DSKBLE_scanRequests] = &_swiftEmptySetSingleton;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced6DSKBLE_sendQueueSize] = 10;

  v34.receiver = v9;
  v34.super_class = ObjectType;
  v12 = objc_msgSendSuper2(&v34, "init");
  v13 = qword_1003447C8;
  v14 = v12;
  if (v13 != -1)
    swift_once(&qword_1003447C8, sub_1001F416C);
  v15 = qword_100354F00;
  v16 = v14;
  sub_1000D6AFC(v16, v15);

  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v17 = qword_100354EE8;
  v18 = swift_allocObject(&unk_1003085D0, 24, 7);
  *(_QWORD *)(v18 + 16) = v16;
  v32 = sub_1000E5024;
  v33 = v18;
  aBlock = _NSConcreteStackBlock;
  v29 = 1107296256;
  v30 = sub_1000B3514;
  v31 = &unk_1003085E8;
  v19 = _Block_copy(&aBlock);
  v20 = v33;
  v21 = v16;
  swift_release(v20);
  xpc_set_event_stream_handler("com.apple.bluetooth.discovery", v17, v19);
  _Block_release(v19);
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchQoS.QoSClass.default(_:), v3);
  v22 = (void *)static OS_dispatch_queue.global(qos:)(v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v23 = swift_allocObject(&unk_100308620, 24, 7);
  *(_QWORD *)(v23 + 16) = v21;
  v32 = sub_1000E502C;
  v33 = v23;
  aBlock = _NSConcreteStackBlock;
  v29 = 1107296256;
  v30 = sub_10017BF6C;
  v31 = &unk_100308638;
  v24 = _Block_copy(&aBlock);
  v25 = v33;
  v26 = v21;
  swift_release(v25);
  os_state_add_handler(v22, v24);

  _Block_release(v24);
  return v26;
}

void sub_1000B2A88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
  {
    v2 = _CFXPCCreateCFObjectFromXPCObject(a1);
    if (v2)
    {
      v11 = v2;
      v3 = sub_100063D3C((uint64_t *)&unk_100346140);
      v4 = swift_dynamicCast(&v10, &v11, (char *)&type metadata for Swift.AnyObject + 8, v3, 6);
      if ((v4 & 1) != 0)
      {
        v5 = v10;
        sub_1000B2B94(v10);
        swift_bridgeObjectRelease(v5);
      }
      else
      {
        v6 = Logger.logObject.getter(v4);
        v8 = static os_log_type_t.error.getter(v6, v7);
        if (os_log_type_enabled(v6, v8))
        {
          v9 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v9 = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, v8, "Failed to convert XPC object to Dictionary", v9, 2u);
          swift_slowDealloc(v9, -1, -1);
        }

      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1000B2B94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  Swift::String v50;
  Swift::String v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD v65[2];
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;

  v4 = v1;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_42;
  }
  if (*(_QWORD *)(a1 + 16))
  {
    v13 = sub_100187ED0(0x746E657645435058, 0xEC000000656D614ELL);
    if ((v14 & 1) != 0)
    {
      v70 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13);
      swift_unknownObjectRetain(v70);
      if ((swift_dynamicCast(&v73, &v70, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6) & 1) != 0)
      {
        v15 = v74;
        if (*(_QWORD *)(a1 + 16))
        {
          v16 = v73;
          v17 = sub_100187ED0(0x707954746E657665, 0xE900000000000065);
          if ((v18 & 1) != 0)
          {
            v70 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v17);
            swift_unknownObjectRetain(v70);
            if ((swift_dynamicCast(&v73, &v70, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6) & 1) != 0)
            {
              v10 = (_QWORD *)v74;
              if (*(_QWORD *)(a1 + 16)
                && (v7 = v73, v19 = sub_100187ED0(0x656369766564, 0xE600000000000000), (v20 & 1) != 0))
              {
                v21 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v19);
                if ((objc_msgSend(v21, "respondsToSelector:", "__swift_objectForKeyedSubscript:") & 1) != 0)
                {
                  v66 = 0x4449656369766564;
                  v67 = 0xE800000000000000;
                  swift_unknownObjectRetain(v21);
                  v22 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v66, &type metadata for String);
                  v23 = objc_msgSend(v21, "__swift_objectForKeyedSubscript:", v22);
                  swift_unknownObjectRelease(v22);
                  swift_unknownObjectRelease(v21);
                  if (v23)
                  {
                    _bridgeAnyObjectToAny(_:)(v65);
                    swift_unknownObjectRelease(v23);
                  }
                  else
                  {
                    memset(v65, 0, sizeof(v65));
                  }
                  sub_10006C218((uint64_t)v65, (uint64_t)&v66, (uint64_t *)&unk_100346130);
                }
                else
                {
                  v66 = 0;
                  v67 = 0;
                  v68 = 0;
                  v69 = 1;
                }
                sub_10006C218((uint64_t)&v66, (uint64_t)&v70, &qword_100346250);
                if (v72 != 1)
                {
                  sub_10006C218((uint64_t)&v70, (uint64_t)&v73, (uint64_t *)&unk_100346130);
                  if (!v75)
                  {
                    swift_bridgeObjectRelease(v15);
                    swift_bridgeObjectRelease(v10);
                    sub_100096700((uint64_t)&v73, (uint64_t *)&unk_100346130);
                    goto LABEL_17;
                  }
                  if ((swift_dynamicCast(&v66, &v73, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
                  {
                    v2 = v66;
                    v3 = (void *)v67;
                    swift_bridgeObjectRetain_n(v15, 2);
                    swift_bridgeObjectRetain_n(v10, 2);
                    v35 = swift_bridgeObjectRetain_n(v3, 2);
                    v36 = Logger.logObject.getter(v35);
                    v40 = static os_log_type_t.info.getter(v36, v37, v38, v39);
                    v41 = v40;
                    if (os_log_type_enabled(v36, v40))
                    {
                      v42 = swift_slowAlloc(32, -1);
                      v64 = v2;
                      v43 = v42;
                      v63 = swift_slowAlloc(96, -1);
                      v73 = v63;
                      *(_DWORD *)v43 = 136315650;
                      swift_bridgeObjectRetain(v15);
                      v70 = sub_1001C56EC(v16, v15, &v73);
                      v62 = v41;
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v43 + 4, v43 + 12);
                      swift_bridgeObjectRelease_n(v15, 3);
                      *(_WORD *)(v43 + 12) = 2080;
                      swift_bridgeObjectRetain(v10);
                      v70 = sub_1001C56EC(v7, (unint64_t)v10, &v73);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v43 + 14, v43 + 22);
                      swift_bridgeObjectRelease_n(v10, 3);
                      *(_WORD *)(v43 + 22) = 2080;
                      swift_bridgeObjectRetain(v3);
                      v70 = sub_1001C56EC(v64, (unint64_t)v3, &v73);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v43 + 24, v43 + 32);
                      swift_bridgeObjectRelease_n(v3, 3);
                      _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v62, "XPC event from com.apple.bluetooth.discovery %s %s %s", (uint8_t *)v43, 0x20u);
                      v44 = v63;
                      swift_arrayDestroy(v63, 3, (char *)&type metadata for Any + 8);
                      swift_slowDealloc(v44, -1, -1);
                      v45 = v43;
                      v2 = v64;
                      swift_slowDealloc(v45, -1, -1);
                    }
                    else
                    {
                      swift_bridgeObjectRelease_n(v3, 2);
                      swift_bridgeObjectRelease_n(v10, 2);
                      swift_bridgeObjectRelease_n(v15, 2);
                    }

                    v46 = *(_QWORD *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryEventName);
                    v47 = *(_QWORD *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryEventName + 8);
                    if (v16 == v46 && v15 == v47)
                    {
                      swift_bridgeObjectRelease(v15);
                    }
                    else
                    {
                      v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v15, v46, v47, 0);
                      swift_bridgeObjectRelease(v15);
                      if ((v48 & 1) == 0)
                      {
                        swift_bridgeObjectRelease(v10);
                        goto LABEL_47;
                      }
                    }
                    if (v7 == 0x6F46656369766564 && v10 == (_QWORD *)0xEB00000000646E75)
                    {
                      v49 = 0xEB00000000646E75;
LABEL_44:
                      swift_bridgeObjectRelease(v49);
                      v73 = 0;
                      v74 = 0xE000000000000000;
                      _StringGuts.grow(_:)(52);
                      v50._object = (void *)0x80000001002BBD20;
                      v50._countAndFlagsBits = 0xD000000000000032;
                      String.append(_:)(v50);
                      v51._countAndFlagsBits = v2;
                      v51._object = v3;
                      String.append(_:)(v51);
                      v52 = v74;
                      v53 = String.utf8CString.getter(v73, v74);
                      swift_bridgeObjectRelease(v52);
                      v54 = os_transaction_create(v53 + 32);
                      swift_release(v53);
                      v55 = (uint64_t *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryTransactions);
                      swift_beginAccess(v55, &v73, 33, 0);
                      if (v54)
                      {
                        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v55);
                        v70 = *v55;
                        *v55 = 0x8000000000000000;
                        sub_10018E718(v54, v2, (uint64_t)v3, isUniquelyReferenced_nonNull_native);
                        v57 = *v55;
                        *v55 = v70;
                        swift_bridgeObjectRelease(v3);
                        swift_bridgeObjectRelease(v57);
                      }
                      else
                      {
                        v58 = sub_10012E9C4(v2, (uint64_t)v3);
                        swift_bridgeObjectRelease(v3);
                        swift_unknownObjectRelease(v58);
                      }
                      swift_endAccess(&v73);
                      return;
                    }
LABEL_42:
                    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F46656369766564, 0xEB00000000646E75, v7, v10, 0) & 1) != 0)
                    {
                      v49 = (unint64_t)v10;
                      goto LABEL_44;
                    }
                    if (v7 == 0x6F4C656369766564 && v10 == (_QWORD *)0xEA00000000007473)
                    {
                      swift_bridgeObjectRelease(0xEA00000000007473);
LABEL_54:
                      swift_beginAccess(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryTransactions, &v73, 33, 0);
                      v60 = sub_10012E9C4(v2, (uint64_t)v3);
                      swift_endAccess(&v73);
                      swift_bridgeObjectRelease(v3);
                      swift_unknownObjectRelease(v60);
                      return;
                    }
                    v59 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F4C656369766564, 0xEA00000000007473, v7, v10, 0);
                    swift_bridgeObjectRelease(v10);
                    if ((v59 & 1) != 0)
                      goto LABEL_54;
LABEL_47:
                    swift_bridgeObjectRelease(v3);
                    return;
                  }
                  swift_bridgeObjectRelease(v15);
                  v24 = v10;
                  goto LABEL_16;
                }
              }
              else
              {
                v70 = 0;
                v71[0] = 0;
                v71[1] = 0;
                v72 = 1;
              }
              swift_bridgeObjectRelease(v15);
              swift_bridgeObjectRelease(v10);
              sub_100096700((uint64_t)&v70, &qword_100346250);
              goto LABEL_17;
            }
          }
        }
        v24 = (_QWORD *)v15;
LABEL_16:
        swift_bridgeObjectRelease(v24);
      }
    }
  }
LABEL_17:
  v25 = swift_bridgeObjectRetain_n(a1, 2);
  v26 = Logger.logObject.getter(v25);
  v28 = static os_log_type_t.error.getter(v26, v27);
  if (os_log_type_enabled(v26, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v73 = v30;
    *(_DWORD *)v29 = 136315138;
    v31 = swift_bridgeObjectRetain(a1);
    v32 = Dictionary.description.getter(v31, &type metadata for String, (char *)&type metadata for Swift.AnyObject + 8, &protocol witness table for String);
    v34 = v33;
    swift_bridgeObjectRelease(a1);
    v70 = sub_1001C56EC(v32, v34, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v26, v28, "Failed to retrieve expected keys from XPC object %s", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a1, 2);
  }

}

uint64_t sub_1000B3514(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_1000B355C()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(__int128 *, _QWORD);
  uint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  BOOL v47;
  char v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  Class isa;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  _QWORD *v61;
  _BYTE v62[128];
  void *v63;
  __int128 v64;
  unsigned __int8 v65;
  __int128 v66;
  void *v67;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralState);
  v67 = &type metadata for Int;
  *(_QWORD *)&v66 = v1;
  sub_10006C2B4(&v66, &v64);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v63 = &_swiftEmptyDictionarySingleton;
  sub_10018DEC0(&v64, 0x536C6172746E6563, 0xEC00000065746174, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v57 = v0;
  v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
  swift_beginAccess(v3, &v63, 0, 0);
  v4 = *v3;
  v5 = *v3 & 0xC000000000000001;
  if (v5)
  {
    if (v4 < 0)
      v6 = *v3;
    else
      v6 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v7 = __CocoaSet.count.getter(v6);
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 16);
    swift_bridgeObjectRetain(v4);
  }
  if (!v7)
  {
    swift_bridgeObjectRelease(v4);
    v12 = _swiftEmptyArrayStorage;
LABEL_31:
    v67 = (void *)sub_100063D3C(&qword_100346050);
    *(_QWORD *)&v66 = v12;
    sub_10006C2B4(&v66, &v64);
    v38 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v61 = &_swiftEmptyDictionarySingleton;
    sub_10018DEC0(&v64, 0xD000000000000014, 0x80000001002BB490, v38);
    swift_bridgeObjectRelease(0x8000000000000000);
    v39 = (uint64_t *)(v57 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests);
    swift_beginAccess(v57 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests, &v61, 0, 0);
    v40 = *v39;
    if ((*v39 & 0xC000000000000001) != 0)
    {
      if (v40 < 0)
        v41 = *v39;
      else
        v41 = v40 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v40);
      v42 = __CocoaSet.count.getter(v41);
      swift_bridgeObjectRelease(v40);
    }
    else
    {
      v42 = *(_QWORD *)(v40 + 16);
    }
    v67 = &type metadata for Int;
    *(_QWORD *)&v66 = v42;
    sub_10006C2B4(&v66, &v64);
    v43 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v60 = &_swiftEmptyDictionarySingleton;
    sub_10018DEC0(&v64, 0xD000000000000012, 0x80000001002BB4B0, v43);
    swift_bridgeObjectRelease(0x8000000000000000);
    v44 = v57 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryTransactions;
    swift_beginAccess(v57 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryTransactions, &v60, 0, 0);
    v45 = *(_QWORD *)(*(_QWORD *)v44 + 16);
    v67 = &type metadata for Int;
    *(_QWORD *)&v66 = v45;
    sub_10006C2B4(&v66, &v64);
    v46 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v59 = &_swiftEmptyDictionarySingleton;
    sub_10018DEC0(&v64, 0xD000000000000015, 0x80000001002BB510, v46);
    swift_bridgeObjectRelease(0x8000000000000000);
    v47 = *(_QWORD *)(v57 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager) != 0;
    v67 = &type metadata for Bool;
    LOBYTE(v66) = v47;
    sub_10006C2B4(&v66, &v64);
    v48 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_10018DEC0(&v64, 0x6E696E6E75527369, 0xE900000000000067, v48);
    swift_bridgeObjectRelease(0x8000000000000000);
    v49 = (uint64_t *)(v57 + OBJC_IVAR____TtC10seserviced6DSKBLE_scanRequests);
    swift_beginAccess(v57 + OBJC_IVAR____TtC10seserviced6DSKBLE_scanRequests, &v59, 0, 0);
    v50 = *v49;
    if ((v50 & 0xC000000000000001) != 0)
    {
      if (v50 < 0)
        v51 = v50;
      else
        v51 = v50 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v50);
      v52 = __CocoaSet.count.getter(v51);
      swift_bridgeObjectRelease(v50);
    }
    else
    {
      v52 = *(_QWORD *)(v50 + 16);
    }
    v67 = &type metadata for Int;
    *(_QWORD *)&v66 = v52;
    sub_10006C2B4(&v66, &v64);
    v53 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_10018DEC0(&v64, 0x757165526E616373, 0xEC00000073747365, v53);
    swift_bridgeObjectRelease(0x8000000000000000);
    v54 = sub_10017D088((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v54);
    v56 = sub_100015734((uint64_t)"dskble.state", (uint64_t)isa);

    return (uint64_t)v56;
  }
  v61 = _swiftEmptyArrayStorage;
  sub_1001929E4(0, v7 & ~(v7 >> 63), 0);
  if (v5)
  {
    if (v4 < 0)
      v8 = v4;
    else
      v8 = v4 & 0xFFFFFFFFFFFFFF8;
    result = __CocoaSet.startIndex.getter(v8);
    v11 = 1;
  }
  else
  {
    result = sub_100196CE0(v4);
    v11 = v13 & 1;
  }
  *(_QWORD *)&v64 = result;
  *((_QWORD *)&v64 + 1) = v10;
  v65 = v11;
  if ((v7 & 0x8000000000000000) == 0)
  {
    v14 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v4 < 0)
      v14 = v4;
    v58 = v14;
    do
    {
      while (1)
      {
        v22 = sub_1001969D4(v64, *((uint64_t *)&v64 + 1), v65, v4);
        v23 = sub_100063D3C((uint64_t *)&unk_100346040);
        inited = swift_initStackObject(v23, v62);
        *(_OWORD *)(inited + 16) = xmmword_1002888F0;
        *(_QWORD *)(inited + 32) = 0xD000000000000011;
        *(_QWORD *)(inited + 40) = 0x80000001002BBD00;
        v25 = *(_QWORD *)(v22 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        v26 = type metadata accessor for UUID(0);
        *(_QWORD *)(inited + 72) = v26;
        v27 = sub_1000960AC((_QWORD *)(inited + 48));
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v27, v25, v26);
        *(_QWORD *)(inited + 80) = 0x6574617473;
        *(_QWORD *)(inited + 88) = 0xE500000000000000;
        v28 = *(_BYTE *)(v22 + 32);
        *(_QWORD *)(inited + 120) = &type metadata for DSKBLE.BLEPeripheral.State;
        *(_BYTE *)(inited + 96) = v28;
        v29 = sub_10017C218(inited);
        swift_release(v22);
        v30 = v61;
        result = swift_isUniquelyReferenced_nonNull_native(v61);
        if ((result & 1) == 0)
        {
          result = sub_1001929E4(0, v61[2] + 1, 1);
          v30 = v61;
        }
        v32 = v30[2];
        v31 = v30[3];
        if (v32 >= v31 >> 1)
        {
          result = sub_1001929E4(v31 > 1, v32 + 1, 1);
          v30 = v61;
        }
        v30[2] = v32 + 1;
        v30[v32 + 4] = v29;
        if (v5)
          break;
        v15 = v64;
        v16 = v65;
        v17 = sub_100195EE4(v64, *((_QWORD *)&v64 + 1), v65, v4);
        v19 = v18;
        v21 = v20;
        sub_1000960E8(v15, *((uint64_t *)&v15 + 1), v16);
        *(_QWORD *)&v64 = v17;
        *((_QWORD *)&v64 + 1) = v19;
        v65 = v21 & 1;
        if (!--v7)
          goto LABEL_30;
      }
      if ((v65 & 1) == 0)
        goto LABEL_45;
      v33 = __CocoaSet.Index.handleBitPattern.getter(v64, *((_QWORD *)&v64 + 1));
      if (v33)
        v34 = swift_isUniquelyReferenced_nonNull_native(v33);
      else
        v34 = 1;
      v35 = sub_100063D3C(&qword_100346248);
      v36 = (void (*)(__int128 *, _QWORD))Set.Index._asCocoa.modify(&v66, v35);
      __CocoaSet.formIndex(after:isUnique:)(v37, v34, v58);
      v36(&v66, 0);
      --v7;
    }
    while (v7);
LABEL_30:
    sub_1000960E8(v64, *((uint64_t *)&v64 + 1), v65);
    swift_bridgeObjectRelease(v4);
    v12 = v61;
    goto LABEL_31;
  }
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

void sub_1000B3C60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  id v28;
  Class isa;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  _BYTE v35[128];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v35[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v10 = OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager;
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  v12 = Logger.logObject.getter(v9);
  v16 = v12;
  if (!v11)
  {
    v19 = static os_log_type_t.info.getter(v12, v13, v14, v15);
    if (os_log_type_enabled(v16, (os_log_type_t)v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v19, "Starting DSKBLE", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v21 = (void *)qword_100354EE8;
    v22 = sub_100063D3C((uint64_t *)&unk_100346040);
    inited = swift_initStackObject(v22, v35);
    *(_OWORD *)(inited + 16) = xmmword_1002888F0;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBManagerNeedsRestrictedStateOperation);
    *(_QWORD *)(inited + 40) = v24;
    *(_QWORD *)(inited + 72) = &type metadata for Bool;
    *(_BYTE *)(inited + 48) = 1;
    *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBManagerReceivesControllerBTClockEvents);
    *(_QWORD *)(inited + 88) = v25;
    *(_QWORD *)(inited + 120) = &type metadata for Bool;
    *(_BYTE *)(inited + 96) = 1;
    v26 = v21;
    v27 = sub_10017C218(inited);
    v28 = objc_allocWithZone((Class)CBCentralManager);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v27);
    v30 = objc_msgSend(v28, "initWithDelegate:queue:options:", 0, v26, isa);

    v31 = *(void **)(v1 + v10);
    *(_QWORD *)(v1 + v10) = v30;

    v32 = *(void **)(v1 + v10);
    if (v32)
    {
      objc_msgSend(v32, "setDelegate:", v1);
      v33 = *(void **)(v1 + v10);
      if (v33)
      {
        v34 = objc_msgSend(v33, "state");
        *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralState) = v34;
        return;
      }
      goto LABEL_15;
    }
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  v17 = static os_log_type_t.error.getter(v12, v13);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "DSKBLE is already running", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

}

void sub_1000B3F68()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  Swift::Int v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void *v36;
  NSObject *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  char v42[24];
  char v43[24];
  char v44[32];
  char v45[24];
  char v46[24];
  char v47[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v42[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *(_QWORD *)v6 = qword_100354EE8;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    v10 = OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager;
    v11 = *(void **)&v1[OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager];
    if (v11)
    {
      v12 = v11;
      v13 = Logger.logObject.getter(v12);
      v17 = static os_log_type_t.info.getter(v13, v14, v15, v16);
      if (os_log_type_enabled(v13, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v17, "Stopping DSKBLE", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

      objc_msgSend(v12, "setDelegate:", 0);
      v19 = &v1[OBJC_IVAR____TtC10seserviced6DSKBLE_scanRequests];
      swift_beginAccess(&v1[OBJC_IVAR____TtC10seserviced6DSKBLE_scanRequests], v47, 1, 0);
      v20 = *(_QWORD *)v19;
      *(_QWORD *)v19 = &_swiftEmptySetSingleton;
      swift_bridgeObjectRelease(v20);
      sub_1000B4314();
      v21 = &v1[OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests];
      swift_beginAccess(&v1[OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests], v46, 1, 0);
      v22 = *(_QWORD *)v21;
      *(_QWORD *)v21 = &_swiftEmptySetSingleton;
      swift_bridgeObjectRelease(v22);
      v23 = &v1[OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals];
      swift_beginAccess(&v1[OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals], v45, 0, 0);
      swift_bridgeObjectRetain(*(_QWORD *)v23);
      v25 = sub_1000D5B7C(v24);
      v26 = v1;
      sub_1000DB38C(v25, (uint64_t)v26);
      swift_release(v25);

      v27 = *(_QWORD *)v23;
      v28 = v26;
      swift_bridgeObjectRetain(v27);
      sub_1000DBCF0(v29, (uint64_t)v28, 1);
      swift_bridgeObjectRelease(v27);

      v30 = &v28[OBJC_IVAR____TtC10seserviced6DSKBLE_closuresOnPowerOn];
      swift_beginAccess(&v28[OBJC_IVAR____TtC10seserviced6DSKBLE_closuresOnPowerOn], v44, 1, 0);
      v31 = *(_QWORD *)v30;
      *(_QWORD *)v30 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v31);
      v32 = &v28[OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryPairedPeripherals];
      swift_beginAccess(&v28[OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryPairedPeripherals], v43, 1, 0);
      v33 = *(_QWORD *)v32;
      *(_QWORD *)v32 = &_swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease(v33);
      v34 = &v28[OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryTransactions];
      swift_beginAccess(&v28[OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryTransactions], v42, 1, 0);
      v35 = *(_QWORD *)v34;
      *(_QWORD *)v34 = &_swiftEmptyDictionarySingleton;

      swift_bridgeObjectRelease(v35);
      v36 = *(void **)&v1[v10];
      *(_QWORD *)&v1[v10] = 0;

      *(_QWORD *)&v28[OBJC_IVAR____TtC10seserviced6DSKBLE_centralState] = 4;
    }
    else
    {
      v37 = Logger.logObject.getter(v9);
      v39 = static os_log_type_t.error.getter(v37, v38);
      if (os_log_type_enabled(v37, v39))
      {
        v40 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v39, "DSKBLE is not running", v40, 2u);
        swift_slowDealloc(v40, -1, -1);
      }

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000B4314()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  id v10;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t *, _QWORD);
  uint64_t v44;
  uint64_t v45;
  uint64_t inited;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  _BOOL4 v62;
  uint8_t *v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  Class isa;
  _QWORD *v91;
  Class v92;
  id v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  NSObject *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  os_log_type_t v103;
  uint8_t *v104;
  id v105[2];
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  __int128 v109;
  unsigned __int8 v110;
  _QWORD *v111;
  uint64_t v112;
  _BYTE v113[128];
  uint64_t v114[3];
  uint64_t v115;
  _QWORD *v116;
  _BYTE v117[8];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = (uint64_t)v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v5 = qword_100354EE8;
  *(_QWORD *)v4 = qword_100354EE8;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = (id)v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_51;
  }
  v8 = *(void **)((char *)v0 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (!v8)
    goto LABEL_18;
  v9 = v8;
  v10 = -[NSObject state](v9, "state");
  if ((unint64_t)v10 < 5)
    goto LABEL_20;
  if (v10 != (id)10 && v10 != (id)5)
    goto LABEL_20;
  v105[0] = v9;
  v105[1] = v0;
  v12 = (_QWORD *)((char *)v0 + OBJC_IVAR____TtC10seserviced6DSKBLE_scanRequests);
  swift_beginAccess((char *)v0 + OBJC_IVAR____TtC10seserviced6DSKBLE_scanRequests, v117, 0, 0);
  v106 = v12;
  v13 = *v12;
  v14 = *v12 & 0xC000000000000001;
  if (v14)
  {
    v15 = v13 & 0xFFFFFFFFFFFFFF8;
    if (v13 < 0)
      v16 = *v12;
    else
      v16 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v17 = __CocoaSet.count.getter(v16);
    if (v17)
    {
      v18 = v17;
      v116 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v17);
      v7 = __CocoaSet.startIndex.getter(v16);
      *(_QWORD *)&v109 = v7;
      *((_QWORD *)&v109 + 1) = v19;
      v110 = 1;
      if (v18 < 0)
      {
        __break(1u);
LABEL_18:
        v9 = Logger.logObject.getter(v7);
        v20 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v9, v20))
        {
          v21 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v21 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, v20, "Not running", v21, 2u);
          swift_slowDealloc(v21, -1, -1);
        }
LABEL_20:

        return;
      }
      goto LABEL_23;
    }
LABEL_35:
    swift_bridgeObjectRelease(v13);
    v4 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_36:
    v0 = v106;
    if (!((unint64_t)v4 >> 62))
    {
      if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_38:
        v45 = sub_100063D3C((uint64_t *)&unk_100346040);
        inited = swift_initStackObject(v45, v113);
        *(_OWORD *)(inited + 16) = xmmword_1002888F0;
        *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBCentralManagerScanOptionAllowDuplicatesKey);
        *(_QWORD *)(inited + 40) = v47;
        *(_QWORD *)(inited + 72) = &type metadata for Bool;
        *(_BYTE *)(inited + 48) = 1;
        *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBCentralManagerScanOptionUsecase);
        *(_QWORD *)(inited + 88) = v48;
        *(_QWORD *)(inited + 120) = &type metadata for UInt32;
        *(_DWORD *)(inited + 96) = 655360;
        v49 = sub_10017C218(inited);
        v116 = (_QWORD *)v49;
        v50 = *v0;
        v51 = swift_bridgeObjectRetain(*v0);
        v52 = v0;
        v53 = sub_1000B055C(v51);
        swift_bridgeObjectRelease(v50);
        if ((v53 & 1) != 0)
        {
          v54 = *v52;
          swift_bridgeObjectRetain(*v52);
          v55 = (uint64_t)sub_1000B23D8(0, v54);
          v56 = swift_bridgeObjectRelease(v54);
          v57 = Logger.logObject.getter(v56);
          v61 = static os_log_type_t.info.getter(v57, v58, v59, v60);
          v62 = os_log_type_enabled(v57, v61);
          if (v55 <= 8)
          {
            if (v62)
            {
              v64 = (uint8_t *)swift_slowAlloc(12, -1);
              *(_DWORD *)v64 = 134217984;
              v114[0] = v55;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v114, &v114[1], v64 + 4, v64 + 12);
              _os_log_impl((void *)&_mh_execute_header, v57, v61, "Computing %ld scan filters", v64, 0xCu);
              swift_slowDealloc(v64, -1, -1);
            }

            v111 = _swiftEmptyArrayStorage;
            v65 = *v106;
            v66 = swift_bridgeObjectRetain(*v106);
            sub_1000AD728(v66, (uint64_t *)&v111);
            swift_bridgeObjectRelease(v65);
            v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBCentralManagerScanOptionMatchingRuleKey);
            v69 = v68;
            v70 = v111;
            v115 = sub_100063D3C(&qword_100346050);
            v114[0] = (uint64_t)v70;
            sub_10006C2B4(v114, &v109);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v49);
            v108 = (_QWORD *)v49;
            v116 = (_QWORD *)0x8000000000000000;
            sub_10018DEC0(&v109, v67, v69, isUniquelyReferenced_nonNull_native);
            v72 = v116;
            v116 = v108;
            swift_bridgeObjectRelease(v69);
            swift_bridgeObjectRelease(v72);
          }
          else
          {
            if (v62)
            {
              v63 = (uint8_t *)swift_slowAlloc(12, -1);
              *(_DWORD *)v63 = 134217984;
              v114[0] = v55;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v114, &v114[1], v63 + 4, v63 + 12);
              _os_log_impl((void *)&_mh_execute_header, v57, v61, "Ignoring scan filters due to max exceeded %ld", v63, 0xCu);
              swift_slowDealloc(v63, -1, -1);
            }

          }
        }
        v73 = swift_bridgeObjectRetain_n(v4, 2);
        v74 = Logger.logObject.getter(v73);
        v78 = static os_log_type_t.info.getter(v74, v75, v76, v77);
        if (os_log_type_enabled(v74, v78))
        {
          v79 = swift_slowAlloc(22, -1);
          v107 = swift_slowAlloc(64, -1);
          v114[0] = v107;
          *(_DWORD *)v79 = 136315394;
          v80 = sub_10006C25C(0, (unint64_t *)&unk_100348970, CBUUID_ptr);
          v81 = swift_bridgeObjectRetain(v4);
          v82 = Array.description.getter(v81, v80);
          v84 = v83;
          swift_bridgeObjectRelease(v4);
          *(_QWORD *)&v109 = sub_1001C56EC(v82, v84, v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 8, v79 + 4, v79 + 12);
          swift_bridgeObjectRelease_n(v4, 2);
          swift_bridgeObjectRelease(v84);
          *(_WORD *)(v79 + 12) = 2080;
          swift_beginAccess(&v116, &v109, 0, 0);
          v85 = v116;
          swift_bridgeObjectRetain(v116);
          v86 = Dictionary.description.getter(v85, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
          v88 = v87;
          swift_bridgeObjectRelease(v85);
          v111 = (_QWORD *)sub_1001C56EC(v86, v88, v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v79 + 14, v79 + 22);
          swift_bridgeObjectRelease(v88);
          _os_log_impl((void *)&_mh_execute_header, v74, v78, "Now scanning for services %s with options %s", (uint8_t *)v79, 0x16u);
          v89 = v107;
          swift_arrayDestroy(v107, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v89, -1, -1);
          swift_slowDealloc(v79, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v4, 2);
        }

        sub_10006C25C(0, (unint64_t *)&unk_100348970, CBUUID_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v4);
        swift_beginAccess(&v116, v114, 0, 0);
        v91 = v116;
        swift_bridgeObjectRetain(v116);
        v92 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v91);
        v93 = v105[0];
        objc_msgSend(v105[0], "scanForPeripheralsWithServices:options:", isa, v92);

        v94 = v116;
        swift_bridgeObjectRelease(v94);
        return;
      }
LABEL_55:
      swift_bridgeObjectRelease(v4);
      v97 = v105[0];
      v98 = objc_msgSend(v105[0], "isScanning");
      if ((_DWORD)v98)
      {
        v99 = Logger.logObject.getter(v98);
        v103 = static os_log_type_t.info.getter(v99, v100, v101, v102);
        if (os_log_type_enabled(v99, v103))
        {
          v104 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v104 = 0;
          _os_log_impl((void *)&_mh_execute_header, v99, v103, "Stopping scan", v104, 2u);
          swift_slowDealloc(v104, -1, -1);
        }

        objc_msgSend(v97, "stopScan");
      }

      return;
    }
LABEL_51:
    if (v4 < 0)
      v95 = v4;
    else
      v95 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v96 = _CocoaArrayWrapper.endIndex.getter(v95);
    swift_bridgeObjectRelease(v4);
    if (v96)
      goto LABEL_38;
    goto LABEL_55;
  }
  v18 = *(_QWORD *)(v13 + 16);
  swift_bridgeObjectRetain(*v12);
  if (!v18)
    goto LABEL_35;
  v116 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v18);
  *(_QWORD *)&v109 = sub_100196CE0(v13);
  *((_QWORD *)&v109 + 1) = v22;
  v110 = v23 & 1;
  v15 = v13 & 0xFFFFFFFFFFFFFF8;
LABEL_23:
  v24 = (void *)objc_opt_self(CBUUID);
  if (v13 < 0)
    v25 = v13;
  else
    v25 = v15;
  v107 = v25;
  while (1)
  {
    while (1)
    {
      v31 = v109;
      v32 = v110;
      v33 = sub_100195FCC(v109, *((uint64_t *)&v109 + 1), v110, v13);
      v34 = *(_QWORD *)(v33 + 24);
      swift_bridgeObjectRetain(v34);
      v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
      v36 = objc_msgSend(v24, "UUIDWithString:", v35);
      swift_release(v33);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v37);
      v38 = v116[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v38);
      v39 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v36);
      specialized ContiguousArray._endMutation()(v39);
      if (v14)
        break;
      v26 = sub_100195EE4(v31, *((_QWORD *)&v31 + 1), v32, v13);
      v28 = v27;
      v30 = v29;
      sub_1000960E8(v31, *((uint64_t *)&v31 + 1), v32);
      *(_QWORD *)&v109 = v26;
      *((_QWORD *)&v109 + 1) = v28;
      v110 = v30 & 1;
      if (!--v18)
        goto LABEL_34;
    }
    if ((v32 & 1) == 0)
      break;
    v40 = __CocoaSet.Index.handleBitPattern.getter(v31, *((_QWORD *)&v31 + 1));
    if (v40)
      v41 = swift_isUniquelyReferenced_nonNull_native(v40);
    else
      v41 = 1;
    v42 = sub_100063D3C(&qword_100346038);
    v43 = (void (*)(uint64_t *, _QWORD))Set.Index._asCocoa.modify(v114, v42);
    __CocoaSet.formIndex(after:isUnique:)(v44, v41, v107);
    v43(v114, 0);
    if (!--v18)
    {
LABEL_34:
      sub_1000960E8(v109, *((uint64_t *)&v109 + 1), v110);
      v4 = (uint64_t)v116;
      swift_bridgeObjectRelease(v13);
      goto LABEL_36;
    }
  }
  __break(1u);
}

void sub_1000B4DF8(void *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint8_t *v31;
  uint8_t *v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint8_t *v44;
  uint64_t v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  void *v51;
  __CFReadStream *v52;
  __CFWriteStream *v53;
  id v54;
  void *v55;
  id v56;
  void *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  void (*v69)(uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  void *v83;
  void *v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  os_log_type_t v94;
  int v95;
  uint64_t v96;
  _QWORD *v97;
  id v98;
  void *v99;
  id v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint8_t *v119;
  uint8_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  int v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135[4];
  char v136[32];

  v5 = v3;
  v9 = type metadata accessor for UUID(0);
  v130 = *(_QWORD *)(v9 - 8);
  v131 = v9;
  __chkstk_darwin(v9, v10);
  v129 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (uint64_t *)((char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v17 = qword_100354EE8;
  *v16 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  v18 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_36:
    swift_once(&qword_1003447C8, sub_1001F416C);
    goto LABEL_26;
  }
  if ((a2 & 1) != 0)
  {
    v19 = *(void **)(v5 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
    if (v19)
      objc_msgSend(v19, "cancelPeripheralConnection:", a1);
  }
  v20 = (_QWORD *)(v5 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
  swift_beginAccess(v5 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v136, 0, 0);
  v21 = *v20;
  v16 = a1;
  v22 = swift_bridgeObjectRetain(v21);
  v4 = sub_1000D8FC0(v22);
  v123 = 0;
  swift_bridgeObjectRelease(v21);

  if (!v4)
    goto LABEL_28;
  v23 = v5 + OBJC_IVAR____TtC10seserviced6DSKBLE_logger;
  v24 = v16;
  v25 = Logger.logObject.getter(v24);
  v29 = static os_log_type_t.info.getter(v25, v26, v27, v28);
  v30 = os_log_type_enabled(v25, v29);
  v128 = a3;
  v126 = v20;
  v127 = v16;
  v122 = v23;
  v125 = (uint64_t)v24;
  if (v30)
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v121 = swift_slowAlloc(32, -1);
    v135[0] = v121;
    v120 = v31;
    *(_DWORD *)v31 = 136315138;
    v32 = v31 + 12;
    v119 = v31 + 4;
    v33 = objc_msgSend(v24, "identifier");
    v34 = v4;
    v35 = v5;
    v36 = v129;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v37 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v38 = v24;
    v39 = v131;
    v40 = dispatch thunk of CustomStringConvertible.description.getter(v131, v37);
    v42 = v41;
    v43 = v36;
    v5 = v35;
    v4 = v34;
    (*(void (**)(char *, uint64_t))(v130 + 8))(v43, v39);
    v133 = sub_1001C56EC(v40, v42, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v119, v32);

    swift_bridgeObjectRelease(v42);
    v44 = v120;
    _os_log_impl((void *)&_mh_execute_header, v25, v29, "Disconnected %s", v120, 0xCu);
    v45 = v121;
    swift_arrayDestroy(v121, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);
  }
  else
  {

  }
  v46 = (void *)v4[16];
  if (v46)
  {
    v47 = v46;
    v48 = objc_msgSend(v47, "inputStream");
    if (v48)
    {
      v49 = v48;
      objc_msgSend(v48, "close");

      v50 = objc_msgSend(v47, "outputStream");
      if (v50)
      {
        v51 = v50;
        objc_msgSend(v50, "close");

        v52 = (__CFReadStream *)objc_msgSend(v47, "inputStream");
        CFReadStreamSetDispatchQueue(v52, 0);

        v53 = (__CFWriteStream *)objc_msgSend(v47, "outputStream");
        CFWriteStreamSetDispatchQueue(v53, 0);

        v54 = objc_msgSend(v47, "inputStream");
        if (v54)
        {
          v55 = v54;
          objc_msgSend(v54, "setDelegate:", 0);

          v56 = objc_msgSend(v47, "outputStream");
          if (v56)
          {
            v57 = v56;
            objc_msgSend(v56, "setDelegate:", 0);

            goto LABEL_17;
          }
LABEL_40:
          __break(1u);
          return;
        }
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_17:
  a3 = v4[2];
  v58 = swift_retain(a3);
  v59 = v129;
  UUID.init()(v58);
  v60 = a3 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
  swift_beginAccess(a3 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier, v135, 33, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v130 + 40))(v60, v59, v131);
  swift_endAccess(v135);
  *(_BYTE *)(a3 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) = 0;
  v61 = *((unsigned __int8 *)v4 + 32);
  v124 = v5;
  v62 = v4 + 5;
  if (v61 == 8)
  {
    swift_beginAccess(v62, &v133, 0, 0);
    v63 = v4[8];
    v64 = v4[9];
    v65 = sub_10006BA78(v4 + 5, v63);
    v66 = *(_QWORD *)(v63 - 8);
    __chkstk_darwin(v65, v65);
    v68 = (char *)&v118 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v66 + 16))(v68);
    v69 = (void (*)(uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(v64 + 104))(v63, v64);
    v71 = v70;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v68, v63);
    v69(a3);
  }
  else
  {
    swift_beginAccess(v62, &v133, 0, 0);
    v72 = v4[8];
    v73 = v4[9];
    v74 = sub_10006BA78(v4 + 5, v72);
    v75 = *(_QWORD *)(v72 - 8);
    __chkstk_darwin(v74, v74);
    v77 = (char *)&v118 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v75 + 16))(v77);
    v78 = (void (*)(uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(v73 + 88))(v72, v73);
    v71 = v79;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v72);
    v80 = sub_1000AAC04();
    v81 = swift_allocError(&type metadata for DSKBLE.BLEError, v80, 0, 0);
    *v82 = 3;
    v78(v81, a3);
    swift_errorRelease(v81);
  }
  swift_release(v71);
  v83 = (void *)v4[18];
  v84 = (void *)v125;
  if (v83)
  {
    v85 = v83;
    v86 = v84;
    v87 = v85;
    v88 = v86;
    v89 = v87;
    v90 = (uint8_t *)Logger.logObject.getter(v89);
    v94 = static os_log_type_t.info.getter(v90, v91, v92, v93);
    v95 = v94;
    if (os_log_type_enabled((os_log_t)v90, v94))
    {
      v96 = swift_slowAlloc(22, -1);
      v97 = (_QWORD *)swift_slowAlloc(8, -1);
      v121 = (uint64_t)v97;
      v125 = swift_slowAlloc(32, -1);
      v135[0] = v125;
      *(_DWORD *)v96 = 138412546;
      LODWORD(v122) = v95;
      v132 = (uint64_t)v89;
      v120 = v90;
      v98 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v96 + 4, v96 + 12);
      *v97 = v83;

      v99 = v98;
      *(_WORD *)(v96 + 12) = 2080;
      v119 = (uint8_t *)(v96 + 14);
      v100 = objc_msgSend(v88, "identifier");
      v101 = v129;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v102 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v103 = v131;
      v104 = dispatch thunk of CustomStringConvertible.description.getter(v131, v102);
      v106 = v105;
      (*(void (**)(char *, uint64_t))(v130 + 8))(v101, v103);
      v132 = sub_1001C56EC(v104, v106, v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v119, v96 + 22);

      swift_bridgeObjectRelease(v106);
      v107 = v120;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v120, (os_log_type_t)v122, "Releasing voucher (BT) %@ for %s", (uint8_t *)v96, 0x16u);
      v108 = sub_100063D3C((uint64_t *)&unk_100346090);
      v109 = v121;
      swift_arrayDestroy(v121, 1, v108);
      swift_slowDealloc(v109, -1, -1);
      v110 = v125;
      swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v110, -1, -1);
      swift_slowDealloc(v96, -1, -1);

    }
    else
    {

    }
  }
  v5 = v124;
  a1 = v126;
  v16 = v127;
  if (!*((_BYTE *)v4 + 32))
    goto LABEL_27;
  if (qword_1003447C8 != -1)
    goto LABEL_36;
LABEL_26:
  sub_1001F2474(v4[2] + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier);
LABEL_27:
  swift_beginAccess(a1, v135, 33, 0);
  v111 = sub_1000D38AC((uint64_t)v4);
  swift_endAccess(v135);
  swift_release(v4);
  swift_release(a3);
  swift_release(v111);
  LOBYTE(a3) = v128;
LABEL_28:
  if ((a3 & 1) != 0)
  {
    v112 = *(_QWORD *)(v5 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralState);
    if (v112 >= 5 && (v112 == 10 || v112 == 5))
    {
      v113 = (uint64_t *)(v5 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests);
      swift_beginAccess(v5 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests, v135, 0, 0);
      v114 = *v113;
      v115 = v16;
      v116 = swift_bridgeObjectRetain(v114);
      v117 = sub_1000DA014(v116, v115);
      swift_bridgeObjectRelease(v114);

      if (v117)
      {
        sub_1000B0F98(v117, 0);
        swift_release(v117);
      }
    }
  }
}

uint64_t sub_1000B5844(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  id v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26[4];
  _BYTE v27[184];
  uint64_t v28;

  v3 = *(_QWORD **)a1;
  result = *(_QWORD *)(*(_QWORD *)a1 + 64);
  if (result)
  {
    v5 = *(_QWORD *)(result + 16);
    if (v5)
    {
      v28 = swift_bridgeObjectRetain(result);
      v6 = (unint64_t *)(v28 + 56);
      do
      {
        v8 = *(v6 - 1);
        v7 = *v6;
        v10 = *(v6 - 3);
        v9 = *(v6 - 2);
        v26[0] = v10;
        v26[1] = v9;
        v26[2] = v8;
        v26[3] = v7;
        sub_100063C8C(v10, v9);
        sub_100063C8C(v8, v7);
        sub_1000B5AA4(v26, a2, v3);
        sub_100063CD0(v10, v9);
        sub_100063CD0(v8, v7);
        v6 += 4;
        --v5;
      }
      while (v5);
      return swift_bridgeObjectRelease(v28);
    }
  }
  else
  {
    v11 = sub_100063D3C((uint64_t *)&unk_100346040);
    inited = swift_initStackObject(v11, v27);
    *(_OWORD *)(inited + 16) = xmmword_100288AC0;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBCentralManagerScanOptionFilterIdentifierString);
    *(_QWORD *)(inited + 40) = v13;
    v14 = v3[2];
    v15 = v3[3];
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = v14;
    *(_QWORD *)(inited + 56) = v15;
    *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBCentralManagerScanOptionMatchingRuleRSSIKey);
    *(_QWORD *)(inited + 88) = v16;
    v17 = v3[4];
    *(_QWORD *)(inited + 120) = &type metadata for Int;
    *(_QWORD *)(inited + 96) = v17;
    *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBCentralManagerScanOptionMatchingRuleServiceUUID);
    *(_QWORD *)(inited + 136) = v18;
    v19 = v3[3];
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v19);
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    v21 = objc_msgSend((id)objc_opt_self(CBUUID), "UUIDWithString:", v20);

    *(_QWORD *)(inited + 168) = sub_10006C25C(0, (unint64_t *)&unk_100348970, CBUUID_ptr);
    *(_QWORD *)(inited + 144) = v21;
    v22 = sub_10017C218(inited);
    v23 = (_QWORD *)*a2;
    result = swift_isUniquelyReferenced_nonNull_native(*a2);
    *a2 = (uint64_t)v23;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1001C49D8(0, v23[2] + 1, 1, v23);
      v23 = (_QWORD *)result;
      *a2 = result;
    }
    v25 = v23[2];
    v24 = v23[3];
    if (v25 >= v24 >> 1)
    {
      result = (uint64_t)sub_1001C49D8((_QWORD *)(v24 > 1), v25 + 1, 1, v23);
      v23 = (_QWORD *)result;
      *a2 = result;
    }
    v23[2] = v25 + 1;
    v23[v25 + 4] = v22;
  }
  return result;
}

