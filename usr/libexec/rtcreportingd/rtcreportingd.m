uint64_t sub_100005370()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  sub_100015CC8(*(_QWORD **)(v0 + 144), (_QWORD *)(v0 + 16));
  *(_QWORD *)(v0 + 120) = *(_QWORD *)(v0 + 64);
  sub_100005400((_QWORD *)(v0 + 120));
  *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 80);
  sub_10001EFD0(v0 + 104);
  *(_QWORD *)(v0 + 128) = *(_QWORD *)(v0 + 96);
  sub_100005400((_QWORD *)(v0 + 128));
  v1 = *(_BYTE *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_BYTE *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 136);
  *(_OWORD *)v5 = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v2;
  *(_QWORD *)(v5 + 32) = v3;
  *(_BYTE *)(v5 + 40) = v1;
  return sub_10001B084(*(uint64_t (**)(void))(v0 + 8));
}

_QWORD *sub_100005400(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

void sub_100005428(char a1, uint64_t a2, char a3, uint64_t a4)
{
  size_t v4;
  uint64_t v5;
  char v8;
  char v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  if ((a3 & 1) != 0)
  {
    sub_100012C24();
    if (v8 != v9)
    {
      sub_10001D164();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10001A178();
    }
  }
  sub_10001A284();
  if (v5)
  {
    v10 = sub_10001AAC8(&qword_10008E5E0);
    v11 = (char *)sub_100018E5C(v10, v5 + 32);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v4;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  if ((a1 & 1) != 0)
  {
    sub_10005DC54((char *)(a4 + 32), v4, v11 + 32);
    sub_1000120A8();
  }
  else
  {
    v13 = sub_10000A808();
    sub_1000055C8(v13, v14, v15, v16);
  }
}

void sub_1000054D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100040BB0(a1, a2, a3, (uint64_t)&unk_100090A60, (uint64_t)type metadata accessor for CachedStorebag, (uint64_t)&unk_10008F8B0, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_1000054F4(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, void **))
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    sub_10001AAC8(a2);
    v6 = (void *)static _DictionaryStorage.allocate(capacity:)(v5);
  }
  else
  {
    v6 = &_swiftEmptyDictionarySingleton;
  }
  v8 = v6;
  v7 = swift_bridgeObjectRetain(a1);
  a3(v7, 1, &v8);
  sub_10000781C();
  sub_10001FD4C();
}

uint64_t sub_10000558C(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != 1)
  {
    if (a4)
      return result;
    swift_bridgeObjectRelease(a2);
    result = a3;
  }
  return swift_bridgeObjectRelease(result);
}

char *sub_1000055C8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = (char *)(a4 + a1 + 32);
  v7 = &__dst[v4];
  if (v6 >= &__dst[v4] || &v6[v4] <= __dst)
  {
    memcpy(__dst, v6, v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000056B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 16 * a1 + 32;
  v8 = a3 + 16 * v4;
  if (v7 >= v8 || v7 + 16 * v4 <= a3)
  {
    sub_10001AAC8(&qword_10008E5F0);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000057C8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 160);
  v3 = *(_QWORD *)(*v1 + 168);
  v5 = *v1;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
    return (*(uint64_t (**)(void))(v5 + 8))();
  else
    return swift_task_switch(sub_100005370, *(_QWORD *)(v2 + 152), 0);
}

uint64_t sub_100005844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  sub_10000B0F0();
  sub_10000F498(v3);
  *(_QWORD *)(v0 + 176) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return sub_10001A1B0((uint64_t)sub_100052D1C, *(_QWORD *)(v0 + 120), 0);
  sub_100015060((_QWORD *)(v0 + 64));
  v6 = *(_BYTE *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 48);
  v9 = *(_BYTE *)(v0 + 32);
  v10 = *(_QWORD *)(v0 + 104);
  *(_OWORD *)v10 = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v7;
  *(_QWORD *)(v10 + 32) = v8;
  *(_BYTE *)(v10 + 40) = v6;
  return sub_10001B084(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1000058C4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 112) = a2;
  *(_QWORD *)(v4 + 120) = v3;
  *(_BYTE *)(v4 + 57) = a3;
  *(_QWORD *)(v4 + 104) = a1;
  sub_10000F3E8();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000058E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 184);
  *(_QWORD *)(v0 + 176) = v1;
  return sub_10001211C((uint64_t)sub_10000E380, v1);
}

void sub_100005900(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[9];

  v1 = a1;
  if (!*(_QWORD *)(a1 + 16)
    || (sub_10001AAC8((uint64_t *)&unk_100090AA0), v2 = sub_10000C028(), (v29 = *(_QWORD *)(v1 + 16)) == 0))
  {
LABEL_24:
    sub_10000781C();
    sub_100015500();
    return;
  }
  v3 = 0;
  v27 = v1;
  v28 = v1 + 32;
  while (v3 < *(_QWORD *)(v1 + 16))
  {
    v4 = *(void **)(v28 + 8 * v3);
    v5 = *(_QWORD *)(v2 + 40);
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;
    Hasher.init(_seed:)(v30, v5);
    v9 = v4;
    String.hash(into:)(v30, v6, v8);
    v10 = Hasher._finalize()();
    sub_100019460();
    v11 = -1 << *(_BYTE *)(v2 + 32);
    v12 = v10 & ~v11;
    sub_100068400();
    if ((v15 & v14) != 0)
    {
      sub_100068474();
      v16 = sub_10006835C();
      if (v8 == v16 && v10 == v17)
      {
LABEL_21:
        sub_10000F3C8(v10);
LABEL_22:

        goto LABEL_23;
      }
      v19 = sub_10001D0CC(v16, v17);
      sub_10000A828();
      swift_bridgeObjectRelease(v6);
      if ((v19 & 1) != 0)
        goto LABEL_22;
      v20 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v20;
        sub_100068400();
        if ((v14 & v15) == 0)
          break;
        sub_100068474();
        v21 = sub_10006835C();
        if (v19 == v21 && v10 == v22)
          goto LABEL_21;
        v19 = sub_10001D0CC(v21, v22);
        sub_10000A828();
        swift_bridgeObjectRelease(v6);
        if ((v19 & 1) != 0)
          goto LABEL_22;
      }
    }
    *(_QWORD *)(v2 + 56 + 8 * v13) = v15 | v14;
    *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v12) = v9;
    v24 = *(_QWORD *)(v2 + 16);
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_26;
    *(_QWORD *)(v2 + 16) = v26;
LABEL_23:
    ++v3;
    v1 = v27;
    if (v3 == v29)
      goto LABEL_24;
  }
  __break(1u);
LABEL_26:
  __break(1u);
}

void sub_100005AB0(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v8;
  char v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  if ((a3 & 1) != 0)
  {
    sub_100012C24();
    if (v8 != v9)
    {
      sub_10001D164();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10001A178();
    }
  }
  sub_10001A284();
  if (v5)
  {
    v10 = sub_10001AAC8(&qword_10008E4E0);
    v11 = (char *)sub_100018E5C(v10, 24 * v5 + 32);
    v12 = j__malloc_size(v11);
    sub_1000194D4(v12);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  if ((a1 & 1) != 0)
  {
    sub_10005DE84((char *)(a4 + 32), v4, v11 + 32);
    sub_1000120A8();
  }
  else
  {
    v13 = sub_10000A808();
    sub_100005C50(v13, v14, v15, v16);
  }
  sub_10000BF84();
}

uint64_t sub_100005B5C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 32 * a1 + 32;
  v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100005C50(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100005D4C()
{
  uint64_t v0;
  char v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  sub_10001B228();
  if ((v4 & 1) != 0)
  {
    sub_100012C24();
    if (v8 != v9)
    {
      sub_10001D164();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10001A178();
    }
  }
  else
  {
    v7 = v3;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    v12 = sub_10001D870(v2, v3, v4, v5, v6);
    v13 = (_QWORD *)sub_100018E5C(v12, 32 * v11 + 32);
    v2 = j__malloc_size(v13);
    v13[2] = v10;
    v13[3] = 2 * ((uint64_t)(v2 - 32) / 32);
  }
  else
  {
    v13 = _swiftEmptyArrayStorage;
  }
  if ((v1 & 1) != 0)
  {
    sub_10001D038();
    sub_1000120A8();
  }
  else
  {
    sub_10001BC24(v2, v3, (uint64_t)(v13 + 4));
  }
  sub_10000BF84();
}

uint64_t sub_100005DF4@<X0>(uint64_t *a1@<X2>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v6 = v3;
  v8 = *v3;
  swift_bridgeObjectRetain(*v3);
  v9 = sub_1000199E8();
  v11 = sub_10001A120(v9, v10);
  v13 = v12;
  swift_bridgeObjectRelease(v8);
  if ((v13 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
    v24 = *v6;
    v15 = *v6;
    *v6 = 0x8000000000000000;
    v16 = *(_QWORD *)(v15 + 24);
    sub_10001AAC8(a1);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v16);
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * v11 + 8));
    v17 = *(_QWORD *)(v24 + 56);
    v18 = a2(0);
    sub_10001B968(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v11, a3, a2);
    v19 = sub_1000199E8();
    _NativeDictionary._delete(at:)(v19, v20);
    v21 = *v6;
    *v6 = v24;
    swift_bridgeObjectRelease(v21);
    return _s10RTCUtility9XPCObjectOwst_0(a3, 0, 1, v18);
  }
  else
  {
    v23 = a2(0);
    return _s10RTCUtility9XPCObjectOwst_0(a3, 1, 1, v23);
  }
}

uint64_t sub_100005F3C()
{
  uint64_t v0;
  _QWORD *v2;

  if (*(_BYTE *)(v0 + 58) == 1)
  {
    sub_1000583DC();
    sub_10000F3E8();
    return sub_100010514();
  }
  else
  {
    v2 = (_QWORD *)swift_task_alloc(dword_10008EC8C);
    *(_QWORD *)(v0 + 160) = v2;
    *v2 = v0;
    v2[1] = sub_100007488;
    return sub_10000CEF4();
  }
}

uint64_t sub_100005FA0(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 104) = v1;
  *(_BYTE *)(v2 + 184) = a1;
  return sub_10001211C((uint64_t)sub_10000C868, v1);
}

uint64_t sub_100005FB8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100005FC0()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[14];
  v0[16] = *(_QWORD *)(v0[15] + 112);
  swift_retain(v1);
  sub_10000F3E8();
  return sub_100010514();
}

uint64_t sub_100005FF8()
{
  sub_100019A20();
  sub_10000F3E8();
  return sub_100010514();
}

void sub_100006028()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  xpc_object_t v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_1000110BC();
  v21 = v2;
  v22 = v3;
  v20 = v0;
  v4 = *(_QWORD *)(v0 + 400);
  if (v4)
  {
    sub_100019A20();
    swift_task_switch(sub_10000B080, v4, 0);
    return;
  }
  v5 = sub_100015ACC();
  if (!v5)
    goto LABEL_11;
  v6 = v5;
  if (qword_10008DFE0 != -1)
    swift_once(&qword_10008DFE0, sub_10002DF10);
  v7 = *(NSObject **)(v0 + 248);
  v8 = sub_10000F3D0();
  sub_100015718(v8, (uint64_t)qword_10008EAE0);
  sub_100019A20();
  sub_100018E8C();
  v9 = sub_10000BFB8();
  v10 = sub_1000112C4(v9);
  v11 = *(_QWORD *)(v0 + 248);
  if (v10)
  {
    v18 = v0 + 168;
    v12 = (uint8_t *)sub_100012C5C(12);
    v13 = sub_100012C5C(32);
    v19 = v13;
    *(_DWORD *)v12 = 136446210;
    v14 = *(_QWORD *)(v11 + 128);
    v15 = *(_QWORD *)(v11 + 136);
    sub_10001CEBC();
    *(_QWORD *)(v0 + 168) = sub_100014F94(v14, v15, &v19);
    sub_100007864(v0 + 168, v0 + 176, (uint64_t)(v12 + 4));
    sub_100010678();
    sub_10001B380();
    sub_100010670((void *)&_mh_execute_header, v7, v1, "notifying %{public}s that session is disabled", v12);
    sub_10000BE60(v13);
    sub_1000120F8(v13);
    sub_1000120F8((uint64_t)v12);
  }
  else
  {
    sub_10001B380();
  }

  v16 = *(_QWORD *)(v0 + 248);
  xpc_dictionary_set_BOOL(v6, "disabled", 1);
  v17 = *(_QWORD *)(v16 + 112);
  if (v17)
  {
    xpc_connection_send_message(*(xpc_connection_t *)(v17 + 16), v6);
    swift_unknownObjectRelease(v6);
LABEL_11:
    sub_10001AFA8();
    sub_100010D58();
    sub_10000F3D8();
    sub_1000111E4();
    sub_10000BFB0();
    sub_10001210C();
    sub_10000B0DC();
    sub_100010384();
    sub_10000BD30();
    sub_10000BDD4();
    swift_task_dealloc(v18);
    sub_10000A858(*(uint64_t (**)(void))(v0 + 8));
    return;
  }
  __break(1u);
}

uint64_t sub_100006214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v0 + 311) = sub_10000B160() & 1;
  sub_10000CEB8();
  return sub_10001A1B0(v1, v2, v3);
}

uint64_t sub_100006250(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10001A120(a1, a2);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) == 0)
    return 0;
  v9 = sub_10001D3E4();
  v17 = *v3;
  v10 = *v3;
  *v3 = 0x8000000000000000;
  v11 = *(_QWORD *)(v10 + 24);
  sub_10001AAC8(&qword_10008F268);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(v9, v11);
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v17 + 48) + 16 * v7 + 8));
  v12 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v7);
  v13 = sub_10001E50C();
  _NativeDictionary._delete(at:)(v13, v14);
  v15 = *v3;
  *v3 = v17;
  swift_bridgeObjectRelease(v15);
  return v12;
}

uint64_t sub_100006354(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26[9];

  v7 = *v3;
  sub_10001CFD8(*(_QWORD *)(*v3 + 40), a2);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v26, a2, a3);
  v8 = sub_10001C484();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  sub_10000F458();
  if ((v11 & 1) != 0)
  {
    v12 = *(_QWORD *)(v7 + 48);
    v13 = (uint64_t *)(v12 + 16 * v10);
    v14 = v13[1];
    v15 = *v13 == a2 && v14 == a3;
    if (v15 || (sub_10001BC88(*v13, v14) & 1) != 0)
    {
LABEL_7:
      sub_10000A818();
      sub_100019460();
      v16 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v17 = v16[1];
      *a1 = *v16;
      a1[1] = v17;
      swift_bridgeObjectRetain(v17);
      return 0;
    }
    v19 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v19;
      sub_10000F458();
      if ((v20 & 1) == 0)
        break;
      v21 = (uint64_t *)(v12 + 16 * v10);
      v22 = v21[1];
      v23 = *v21 == a2 && v22 == a3;
      if (v23 || (sub_10001BC88(*v21, v22) & 1) != 0)
        goto LABEL_7;
    }
  }
  sub_100019460();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v26[0] = *v3;
  *v3 = 0x8000000000000000;
  sub_100007840();
  sub_100020168(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v25 = *v3;
  *v3 = v26[0];
  swift_bridgeObjectRelease(v25);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

void sub_1000064B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(*(_QWORD *)(v0 + 104) + OBJC_IVAR____TtC13rtcreportingd7Session_receivedEnd) = 1;
  v1 = qword_1000973C8;
  *(_QWORD *)(v0 + 152) = qword_1000973C8;
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 104);
    sub_100019A20();
    sub_10000781C();
    v3 = *(_QWORD *)(v2 + 112);
    v4 = *(_QWORD *)(v2 + 120);
    v5 = (_QWORD *)swift_task_alloc(dword_10008F5D4);
    *(_QWORD *)(v0 + 160) = v5;
    *v5 = v0;
    v5[1] = sub_100006CF0;
    sub_100020854(v3, v4, *(_BYTE *)(v0 + 184));
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10000654C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_10001211C((uint64_t)sub_1000092C8, v0);
}

uint64_t sub_100006560@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  int v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v9 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = PropertyListDecoder.init()();
  v44 = 100;
  v11 = sub_1000208F4();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:)(v39, &type metadata for Storebag._StorebagRoot, a1, a2, &v44, &type metadata for Storebag._StorebagRoot, v11);
  if (v4)
  {
    sub_100019AB0();
    return swift_release(v10);
  }
  else
  {
    v37 = v39[1];
    v38 = v39[0];
    v13 = v40;
    v14 = v41;
    v15 = v42;
    v34 = v43;
    sub_1000207B8(a3, v43);
    if (!v16)
      v16 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for String, &unk_100087B10, &protocol witness table for String);
    v24 = v16;
    if ((_DWORD)v14)
      v13 = 86400;
    if (v15)
    {
      v25 = sub_10000B0D4();
      sub_10001C5C4(v25, v26, v27, v28, v29, v30, v31, v32, v34, v37);
      sub_100019AB0();
      swift_bridgeObjectRelease(v35);
      v33 = v15;
    }
    else
    {
      sub_10001C5C4(v16, v17, v18, v19, v20, v21, v22, v23, v34, v37);
      v15 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for String, &type metadata for StorebagSharedValue, &protocol witness table for String);
      sub_100019AB0();
      v33 = v36;
    }
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v14);
    result = swift_release(v10);
    *(_QWORD *)a4 = v24;
    *(_DWORD *)(a4 + 8) = v13;
    *(_QWORD *)(a4 + 16) = v38;
    *(_QWORD *)(a4 + 24) = v14;
    *(_QWORD *)(a4 + 32) = v15;
  }
  return result;
}

uint64_t sub_100006700(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_100006758(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2[4];
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  return a1;
}

uint64_t sub_1000067F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v6 = *v3;
  v8 = *(_QWORD *)(*v3 + 208);
  v7 = *(_QWORD *)(*v3 + 216);
  *(_QWORD *)(*v3 + 224) = v2;
  swift_task_dealloc(v7);
  swift_release(v8);
  if (v2)
  {
    sub_10001EFD0(v6 + 16);
    sub_10001EFD0(v6 + 32);
    sub_10001EFD0(v6 + 48);
    sub_10000AF70();
    v9 = sub_100024900;
  }
  else
  {
    *(_QWORD *)(v6 + 232) = a2;
    *(_QWORD *)(v6 + 240) = a1;
    v9 = sub_10001EEA8;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_1000068A8()
{
  uint64_t v0;

  sub_100019A38();
  sub_10000BDC4(*(_QWORD *)(v0 + 448));
  return sub_100010514();
}

uint64_t sub_1000068E4(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *i;
  unsigned __int8 v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return swift_bridgeObjectRelease(a1);
  v37 = swift_bridgeObjectRetain(a1);
  for (i = (_QWORD *)(v37 + 40); ; i += 2)
  {
    v8 = *((_BYTE *)i - 8);
    v9 = *i;
    v41 = v8;
    v10 = (_QWORD *)*a3;
    v11 = sub_100006B98(v8, v6);
    v13 = v10[2];
    v14 = (v12 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&unk_100086CE8);
      __break(1u);
      goto LABEL_20;
    }
    v16 = v11;
    v17 = v12;
    v18 = v10[3];
    swift_bridgeObjectRetain(v9);
    if (v18 < v15)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v17 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      sub_10001AAC8(&qword_10008E878);
      _NativeDictionary.copy()();
      if ((v17 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    *(_BYTE *)(v21[6] + v16) = v8;
    *(_QWORD *)(v21[7] + 8 * v16) = v9;
    v22 = v21[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_18;
    v21[2] = v24;
    a2 = 1;
    if (!--v3)
      return swift_bridgeObjectRelease_n(v37, 2);
  }
  sub_10005E698(v15, a2 & 1);
  v20 = sub_100006B98(v8, v19);
  if ((v17 & 1) != (v6 & 1))
    goto LABEL_19;
  v16 = v20;
  if ((v17 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v25 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow(v25, v26, v27, v28, v29, v30, v31, v32);
  v40 = v25;
  swift_errorRetain(v25);
  v33 = sub_10001AAC8(&qword_10008E7E8);
  if ((swift_dynamicCast(v33, &v40, v33, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease_n(v37, 2);
    return swift_errorRelease(v40);
  }
LABEL_20:
  v38 = 0;
  v39 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v35._object = (void *)0x8000000100071370;
  v35._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v35);
  _print_unlocked<A, B>(_:_:)(&v41, &v38, &unk_100086CE8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v36._countAndFlagsBits = 39;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v38, v39, "Swift/NativeDictionary.swift", 28, 2);
  __break(1u);
  return result;
}

unint64_t sub_100006B98(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v4;

  sub_10001CFD8(*(_QWORD *)(v2 + 40), a2);
  sub_100010DBC(a1);
  v4 = sub_10001C484();
  return sub_100006BE4(a1, v4);
}

unint64_t sub_100006BE4(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

void sub_100006C84()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = qword_1000973C8;
  v0[21] = qword_1000973C8;
  if (v1)
  {
    swift_retain(v1);
    v2 = (_QWORD *)sub_10000BFD4();
    v0[22] = (uint64_t)v2;
    *v2 = v0;
    v2[1] = sub_100006ECC;
    sub_100020824(v0[14], v0[9]);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100006CF0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  sub_10000B0F0();
  sub_10000F498(v2);
  v0[21] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    v4 = v0[13];
    v5 = sub_10005AE94;
  }
  else
  {
    v6 = v0[13];
    swift_release(v0[19]);
    v5 = sub_1000058E8;
    v4 = v6;
  }
  return sub_10001A1B0((uint64_t)v5, v4, 0);
}

uint64_t sub_100006D50()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *v0;
  sub_10000B158(*(_QWORD *)(v5 + 144), &v5);
  sub_10000A828();
  sub_10000CEB8();
  return sub_10001A1B0(v1, v2, v3);
}

uint64_t sub_100006D9C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v23[9];

  v5 = *v2;
  sub_10001CFD8(*(_QWORD *)(*v2 + 40), a2);
  sub_100007840();
  String.hash(into:)(v23, a1, a2);
  v6 = sub_10001C484();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  sub_100052968();
  if ((v9 & 1) == 0)
  {
LABEL_18:
    sub_10000A818();
    return 0;
  }
  v10 = *(_QWORD *)(v5 + 48);
  v11 = (uint64_t *)(v10 + 16 * v8);
  v12 = v11[1];
  v13 = *v11 == a1 && v12 == a2;
  if (!v13 && (sub_10001D960(*v11, v12) & 1) == 0)
  {
    v17 = ~v7;
    do
    {
      v8 = (v8 + 1) & v17;
      sub_100052968();
      if ((v18 & 1) == 0)
        goto LABEL_18;
      v19 = (uint64_t *)(v10 + 16 * v8);
      v20 = v19[1];
      v21 = *v19 == a1 && v20 == a2;
    }
    while (!v21 && (sub_10001D960(*v19, v20) & 1) == 0);
  }
  sub_10000A818();
  sub_10001D3E4();
  sub_100010E2C();
  if (!v15)
  {
    sub_10004F74C();
    v14 = v23[0];
  }
  v16 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_100020300(v8);
  sub_1000078C4(v23[0]);
  return v16;
}

uint64_t sub_100006ECC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 80);
    v5 = sub_100040970;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 80);
    swift_release(*(_QWORD *)(v2 + 168));
    v5 = sub_100007E64;
    v4 = v6;
  }
  return sub_10001A1B0((uint64_t)v5, v4, 0);
}

uint64_t sub_100006F38()
{
  sub_1000583DC();
  sub_10000F3E8();
  return sub_100010514();
}

uint64_t sub_100006F64(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;

  *(_BYTE *)(v5 + 96) = a4;
  *(_QWORD *)(v5 + 48) = a3;
  *(_QWORD *)(v5 + 56) = v4;
  *(_QWORD *)(v5 + 32) = a1;
  *(_QWORD *)(v5 + 40) = a2;
  v8 = (_QWORD *)swift_task_alloc(dword_10008EBFC);
  *(_QWORD *)(v5 + 64) = v8;
  *v8 = v5;
  v8[1] = sub_10000BECC;
  return sub_10001F918(a1, a2);
}

uint64_t sub_100006FCC()
{
  uint64_t v0;

  sub_10000BDC4(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return sub_100010514();
}

_QWORD *sub_10000700C(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v14 = *(_QWORD *)(a3 + 16);
  if (!v14)
    return &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a3);
  v5 = 0;
  v6 = &_swiftEmptyArrayStorage;
  while (1)
  {
    v18 = *(_BYTE *)(a3 + v5 + 32);
    a1(&v16, &v18);
    if (v3)
      break;
    v7 = v17;
    if (v17)
    {
      v8 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      {
        sub_10000715C();
        v6 = v11;
      }
      v9 = v6[2];
      if (v9 >= v6[3] >> 1)
      {
        sub_10000715C();
        v6 = v12;
      }
      v6[2] = v9 + 1;
      v10 = (char *)&v6[2 * v9];
      v10[32] = v8;
      *((_QWORD *)v10 + 5) = v7;
    }
    if (v14 == ++v5)
    {
      swift_bridgeObjectRelease(a3);
      return v6;
    }
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(a3);
  return v6;
}

void sub_10000715C()
{
  sub_100012B7C();
}

uint64_t sub_100007178@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100007190(a1, a2);
}

uint64_t sub_100007190@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *a1;
  v11 = *a1;
  v5 = sub_10001AAC8(&qword_10008E850);
  v6 = sub_1000072E8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v11, v5, &type metadata for Data, v6);
  if (v2)
  {
    swift_errorRelease(v2);
    v7 = sub_10001AAC8(&qword_10008E888);
    v11 = v4;
    sub_100007290(&qword_10008E890, &qword_10008E888);
    result = KeyedDecodingContainer.decode<A>(_:forKey:)(v7, &v11, v5, v7, v8);
    v10 = v12;
    *a2 = v4;
    a2[1] = v10;
  }
  else
  {
    result = sub_100010720(v12, v13);
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void sub_100007290(unint64_t *a1, uint64_t *a2)
{
  void (*v2)(void);
  uint64_t v4;

  if (!*a1)
  {
    v4 = sub_100028B88(0, a2);
    v2();
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v4), a1);
  }
  sub_10001FD4C();
}

unint64_t sub_1000072E8()
{
  unint64_t result;

  result = qword_10008E880;
  if (!qword_10008E880)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10008E880);
  }
  return result;
}

uint64_t sub_100007324()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  sub_10000B0F0();
  v2 = v0[34];
  v0[35] = v3;
  v0[36] = v1;
  swift_task_dealloc(v2);
  if (v1)
    v4 = sub_100035D24;
  else
    v4 = sub_100005FF8;
  return sub_10001A1B0((uint64_t)v4, v0[32], 0);
}

uint64_t sub_100007380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v16[24];

  sub_10001C454(v3 + 144, (uint64_t)v16, 0);
  v7 = *(_QWORD *)(v3 + 144);
  v8 = *(_QWORD *)(v7 + 16);
  sub_10000CA18();
  sub_100007840();
  if (v8 && (v9 = sub_10001A120(a1, a2), (v10 & 1) != 0))
  {
    v11 = *(_QWORD **)(*(_QWORD *)(v7 + 56) + 8 * v9);
    sub_100018040();
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  sub_10000AF70();
  swift_bridgeObjectRelease(v7);
  v12 = v11[2];
  if (!v12)
  {
LABEL_11:
    a3 = 0;
    goto LABEL_12;
  }
  if (v11[4] != a3)
  {
    v13 = v11 + 5;
    while (--v12)
    {
      v14 = v13[2];
      v13 += 3;
      if (v14 == a3)
        goto LABEL_10;
    }
    goto LABEL_11;
  }
LABEL_10:
  sub_100007840();
LABEL_12:
  sub_10000A828();
  return a3;
}

uint64_t sub_100007488()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001575C();
  sub_1000108A8();
  *(_BYTE *)(v1 + 59) = v0;
  sub_100030350(v2);
  sub_10000F3E8();
  return sub_100010514();
}

void sub_1000074C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[3];

  sub_100012CD4();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  sub_10001AAC8((uint64_t *)&unk_100090A60);
  sub_100012C34();
  __chkstk_darwin(v7);
  sub_10000CA58();
  if (qword_10008E0C8 != -1)
    swift_once(&qword_10008E0C8, sub_100065C74);
  v8 = sub_10000F3D0();
  sub_100015718(v8, (uint64_t)qword_100097440);
  v9 = swift_bridgeObjectRetain_n(v4, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (sub_100068494(v10))
  {
    v12 = (uint8_t *)sub_100012C5C(12);
    v13 = sub_100012C5C(32);
    v15[0] = v13;
    *(_DWORD *)v12 = 136446210;
    sub_100010644();
    v14 = sub_100014F94(v6, v4, v15);
    sub_100007864((uint64_t)&v14, (uint64_t)v15, (uint64_t)(v12 + 4));
    sub_1000110B4(v4);
    sub_100010670((void *)&_mh_execute_header, v10, v11, "evicting storebag %{public}s from cache", v12);
    sub_10000BE60(v13);
    sub_1000120F8(v13);
    sub_1000120F8((uint64_t)v12);

  }
  else
  {

    sub_10000F3C8(v4);
  }
  sub_100010430(v2 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_cache, (uint64_t)v15);
  sub_1000207F8(v1);
  sub_10001D7E8(v1, (uint64_t *)&unk_100090A60);
  swift_endAccess(v15);
  sub_1000120D4();
}

uint64_t sub_10000767C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  sub_10000AF58();
  v3 = sub_10001CCC4(66, v2);
  if (v0)
  {
    *(_QWORD *)(v1 + 48) = v0;
    v4 = *(_QWORD *)(v1 + 32);
    v5 = sub_10003BFD0;
  }
  else
  {
    sub_1000076F8(v3, *(_BYTE *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
    sub_10000CEA8();
    v4 = *(_QWORD *)(v1 + 32);
    v5 = sub_10003BFCC;
  }
  return sub_10001B170((uint64_t)v5, v4, 0);
}

uint64_t sub_1000076F8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t inited;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v8 = sub_10001AAC8(&qword_10008E4B0);
  inited = swift_initStackObject(v8, &v12);
  *(_OWORD *)(inited + 16) = xmmword_10006D0D0;
  *(_QWORD *)(inited + 56) = &type metadata for Int64;
  *(_QWORD *)(inited + 64) = &off_100086160;
  *(_QWORD *)(inited + 32) = a2 & 1;
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = &off_1000861A0;
  *(_QWORD *)(inited + 72) = a3;
  *(_QWORD *)(inited + 80) = a4;
  swift_bridgeObjectRetain(a4);
  sub_100011BCC(inited);
  if (v4)
  {
    swift_setDeallocating(inited);
    return sub_100011B7C();
  }
  else
  {
    swift_setDeallocating(inited);
    sub_100011B7C();
    do
    {
      v11 = sub_100011A74();
      result = swift_release(v11);
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1000077F8()
{
  uint64_t v0;

  sqlite3_finalize(*(sqlite3_stmt **)(v0 + 16));
  return swift_deallocClassInstance(v0, 25, 7);
}

uint64_t sub_10000781C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100007830@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(_QWORD *)(a1 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_100007840()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100007848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRelease(a10);
}

void sub_100007850()
{
  sub_10002A874();
}

uint64_t sub_10000785C(uint64_t a1)
{
  return swift_retain_n(a1, 2);
}

uint64_t sub_100007864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

uint64_t sub_10000786C()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

BOOL sub_100007874(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100007884()
{
  uint64_t v0;

  return sub_10001EFD0(v0);
}

void sub_10000788C()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_1000078A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000078B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

uint64_t sub_1000078C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *v1 = a1;
  return swift_bridgeObjectRelease(v2);
}

_WORD *sub_1000078D0(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1000078DC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v1 + 12) = 2082;
  v3 = v2[25];
  v4 = v2[26];
  v5 = v2[27];
  v6 = v2[28];
  v7 = v2[29];
  v0[2] = v2[24];
  v0[3] = v3;
  v0[4] = v4;
  v0[5] = v5;
  v0[6] = v6;
  v0[7] = v7;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_10000790C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_release(a14);
}

void sub_100007918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[9];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_1000110BC();
  v23 = v1;
  v24 = v2;
  v22 = v0;
  if (*(_QWORD *)(v0 + 72))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 112);
    *(_QWORD *)(v0 + 80) = v3;
    if (v3)
    {
      v4 = dword_1000903D4;
      sub_100014530();
      v5 = (_QWORD *)swift_task_alloc(v4);
      *(_QWORD *)(v0 + 88) = v5;
      *v5 = v0;
      v5[1] = sub_10000A510;
      sub_100010778(v3, *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 96));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_10008DFE0 != -1)
      swift_once(&qword_10008DFE0, sub_10002DF10);
    v6 = *(NSObject **)(v0 + 56);
    v7 = *(_QWORD *)(v0 + 40);
    v8 = sub_10000F3D0();
    sub_100015718(v8, (uint64_t)qword_10008EAE0);
    sub_10000BD20(v7);
    sub_10000785C((uint64_t)v6);
    sub_100018E8C();
    v9 = sub_100010E94();
    v10 = sub_100019A28(v9);
    v11 = *(_QWORD *)(v0 + 56);
    v12 = *(_QWORD *)(v0 + 40);
    if (v10)
    {
      v19 = *(_QWORD *)(v0 + 32);
      v13 = sub_100012C5C(22);
      v20 = sub_100012C5C(64);
      v21[0] = v20;
      *(_DWORD *)v13 = 136446466;
      sub_1000111DC();
      *(_QWORD *)(v0 + 16) = sub_100015C14(v19, v14, v21);
      sub_10000BDDC(v0 + 16, v0 + 24, v15, v13 + 12);
      sub_1000110B4(v12);
      *(_WORD *)(v13 + 12) = 2082;
      v16 = *(_QWORD *)(v11 + 128);
      v17 = *(_QWORD *)(v11 + 136);
      sub_10001CEBC();
      *(_QWORD *)(v0 + 24) = sub_100014F94(v16, v17, v21);
      sub_10000BDDC(v0 + 24, v0 + 32, v18, v13 + 22);
      sub_100010678();
      sub_100018064(v11);
      sub_10000BFA8((void *)&_mh_execute_header, v6, (os_log_type_t)v7, "invalid session id %{public}s from %{public}s", (uint8_t *)v13);
      sub_10000BDEC(v20);
      sub_1000120F8(v20);
      sub_1000120F8(v13);
    }
    else
    {
      sub_10000F3C8(*(_QWORD *)(v0 + 40));
      sub_100018064(v11);
    }

    sub_10000A858(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_100007B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[35] = a3;
  v4[36] = v3;
  v4[33] = a1;
  v4[34] = a2;
  v5 = sub_10001AAC8(&qword_10008EA80);
  v4[37] = sub_100007830(*(_QWORD *)(v5 - 8));
  v6 = type metadata accessor for URLResourceValues(0);
  v4[38] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[39] = v7;
  v4[40] = sub_100007830(v7);
  v8 = sub_1000112E0();
  v4[41] = v8;
  v4[42] = *(_QWORD *)(v8 - 8);
  v4[43] = sub_10000BFD4();
  v4[44] = sub_10000BFD4();
  v4[45] = sub_10000BFD4();
  v9 = sub_10000F3C0();
  v4[46] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[47] = v10;
  v4[48] = sub_100007830(v10);
  sub_10001AAC8((uint64_t *)&unk_100090A60);
  v4[49] = sub_10000BFD4();
  v4[50] = sub_10000BFD4();
  v4[51] = type metadata accessor for CachedStorebag(0);
  v4[52] = sub_10000BFD4();
  v4[53] = sub_10000BFD4();
  return sub_10001B170((uint64_t)sub_100009660, v3, 0);
}

uint64_t sub_100007C68(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 392);
  *(_QWORD *)(v3 + 400) = a1;
  *(_QWORD *)(v3 + 408) = v1;
  sub_100030350(v4);
  sub_1000120B4();
  sub_10000AF70();
  sub_10000BDE4();
  sub_10001B144();
  sub_100019460();
  sub_10001B380();
  sub_10000CEB8();
  return sub_100012104();
}

uint64_t sub_100007D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 + 80) = a3;
  *(_QWORD *)(v4 + 88) = a4;
  *(_QWORD *)(v4 + 64) = a1;
  *(_QWORD *)(v4 + 72) = a2;
  *(_OWORD *)(v4 + 96) = *(_OWORD *)a2;
  *(_QWORD *)(v4 + 112) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(v4 + 136) = *(_QWORD *)(a2 + 40);
  v5 = type metadata accessor for Date(0);
  *(_QWORD *)(v4 + 144) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 152) = v6;
  *(_QWORD *)(v4 + 160) = sub_100007830(v6);
  v7 = type metadata accessor for TimeZone(0);
  *(_QWORD *)(v4 + 168) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 176) = v8;
  *(_QWORD *)(v4 + 184) = sub_100007830(v8);
  return swift_task_switch(sub_1000090F4, 0, 0);
}

void sub_100007DA0()
{
  uint64_t v0;
  uint64_t v1;
  _xpc_connection_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10000A874();
  if (!sub_100015ACC())
  {
    swift_release(*(_QWORD *)(v0 + 440));
    goto LABEL_5;
  }
  sub_10000D220();
  if (v1)
  {
    v2 = (_xpc_connection_s *)sub_10001A190();
    sub_10001FD5C(v2);
    sub_1000104E8();
    sub_10001A3C8();
    sub_100019ABC();
LABEL_5:
    v3 = sub_10001D258();
    v5 = v4;
    swift_task_dealloc(v3);
    sub_100010D58();
    sub_10000F3D8();
    sub_1000111E4();
    sub_10000BFB0();
    sub_10001210C();
    sub_10000B0DC();
    sub_100010384();
    sub_10000BD30();
    sub_10000BDD4();
    swift_task_dealloc(v5);
    sub_1000111C0(*(uint64_t (**)(void))(v0 + 8));
    return;
  }
  __break(1u);
}

uint64_t sub_100007E3C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  return sub_10000BD38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100007E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  NSObject *log;
  uint64_t v47;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = sub_10001AAC8(&qword_10008F610);
  if (_s10RTCUtility9XPCObjectOwet_0(v1, 1, v2) == 1)
  {
    v3 = sub_10002339C(v1);
    v4 = UUID.init()(v3);
    v5 = UUID.uuidString.getter(v4);
    v7 = v6;
    *(_QWORD *)(v0 + 240) = v6;
    result = sub_10001CF04();
    v9 = qword_1000973C8;
    *(_QWORD *)(v0 + 248) = qword_1000973C8;
    if (v9)
    {
      v10 = *(_QWORD *)(v0 + 152);
      v11 = *(_QWORD *)(v0 + 128);
      v12 = *(_QWORD *)(v0 + 120);
      *(_QWORD *)(v0 + 256) = v5;
      swift_retain(v9);
      swift_bridgeObjectRetain(v7);
      v14 = static Date.now.getter(v13);
      Date.addingTimeInterval(_:)(v14, 86400.0);
      v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      *(_QWORD *)(v0 + 264) = v15;
      v15(v10, v12);
      v16 = (_QWORD *)swift_task_alloc(dword_10008F604);
      *(_QWORD *)(v0 + 272) = v16;
      *v16 = v0;
      v16[1] = sub_10004089C;
      v17 = *(_QWORD *)(v0 + 136);
      return sub_10003CFEC(*(_QWORD *)(v0 + 72), v5, v7, v17);
    }
    __break(1u);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 152);
    v18 = *(_QWORD *)(v0 + 160);
    v20 = *(_QWORD *)(v0 + 120);
    v21 = *(_QWORD *)(v0 + 128);
    v22 = *(_QWORD *)(v1 + 8);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v18, v1 + *(int *)(v2 + 48), v20);
    static Date.now.getter(v23);
    v24 = static Date.< infix(_:_:)(v19, v18);
    v25 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    *(_QWORD *)(v0 + 192) = v25;
    v25(v19, v20);
    if ((v24 & 1) != 0)
    {
      v25(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 120));
      sub_10001D8E4();
      sub_1000111E4();
      sub_10000BFB0();
      sub_10001210C();
      sub_10000B0DC();
      sub_100010384();
      v26 = sub_10001C710();
      return v27(v26);
    }
    swift_bridgeObjectRelease(v22);
    if (qword_10008E018 != -1)
      swift_once(&qword_10008E018, sub_100040488);
    v28 = *(_OWORD **)(v0 + 72);
    v29 = type metadata accessor for Logger(0);
    sub_100015718(v29, (uint64_t)qword_100097328);
    *(_OWORD *)(v0 + 16) = *v28;
    *(_OWORD *)(v0 + 32) = v28[1];
    *(_OWORD *)(v0 + 48) = v28[2];
    sub_10001DA0C();
    sub_10000A8E4();
    sub_10000AFEC();
    sub_10001DA0C();
    sub_10000A8E4();
    v30 = sub_10000AFEC();
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      log = v31;
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v47 = v45;
      *(_DWORD *)v33 = 136446210;
      sub_10001DA0C();
      sub_10000A8E4();
      sub_10000AFEC();
      v34 = sub_1000159D4();
      v36 = v35;
      sub_10001D29C();
      sub_1000180E8();
      sub_100007884();
      *(_QWORD *)(v0 + 64) = sub_100014F94(v34, v36, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease(v36);
      sub_10001D29C();
      sub_1000180E8();
      sub_100007884();
      sub_10001D29C();
      sub_1000180E8();
      sub_100007884();
      v31 = log;
      _os_log_impl((void *)&_mh_execute_header, log, v32, "CID expired for %{public}s, refreshing", v33, 0xCu);
      swift_arrayDestroy(v45, 1);
      sub_1000120F8(v45);
      sub_1000120F8((uint64_t)v33);
    }
    else
    {
      sub_10001D29C();
      sub_1000180E8();
      sub_100007884();
      sub_10001D29C();
      sub_1000180E8();
      sub_100007884();
    }

    v37 = ((uint64_t (*)(void))UUID.init())();
    v5 = UUID.uuidString.getter(v37);
    v7 = v38;
    *(_QWORD *)(v0 + 200) = v5;
    *(_QWORD *)(v0 + 208) = v38;
    result = sub_10001CF04();
    v39 = qword_1000973C8;
    *(_QWORD *)(v0 + 216) = qword_1000973C8;
    if (v39)
    {
      v40 = *(_QWORD *)(v0 + 152);
      v41 = *(_QWORD *)(v0 + 120);
      swift_retain(v39);
      swift_bridgeObjectRetain(v7);
      v43 = static Date.now.getter(v42);
      Date.addingTimeInterval(_:)(v43, 86400.0);
      v25(v40, v41);
      v44 = (_QWORD *)swift_task_alloc(dword_10008F604);
      *(_QWORD *)(v0 + 224) = v44;
      *v44 = v0;
      v44[1] = sub_1000407AC;
      v17 = *(_QWORD *)(v0 + 144);
      return sub_10003CFEC(*(_QWORD *)(v0 + 72), v5, v7, v17);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000082B0(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_1000082DC()
{
  sub_10001AAC8(&qword_10008ED58);
  return sub_100008310();
}

uint64_t sub_100008310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char v16;
  void (*v17)(_BYTE *, uint64_t);
  uint64_t v18;
  void (*v19)(_BYTE *, uint64_t);
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _BYTE v25[13];
  char v26;
  char v27;
  char v28;

  v0 = type metadata accessor for NWPath.Status(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v25[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v25[-v5];
  v7 = type metadata accessor for NWPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __chkstk_darwin(v9);
  v14 = &v25[-v13];
  v15 = NWPathMonitor.currentPath.getter(v12);
  NWPath.status.getter(v15);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for NWPath.Status.unsatisfied(_:), v0);
  v16 = static NWPath.Status.== infix(_:_:)(v6, v4);
  v17 = *(void (**)(_BYTE *, uint64_t))(v1 + 8);
  v17(v4, v0);
  v17(v6, v0);
  v18 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v14, v7);
  if ((v16 & 1) != 0)
  {
    v19 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
    v19(v11, v7);
LABEL_4:
    v26 = 0;
    v22 = sub_10001AAC8(&qword_10008ED58);
    v23 = &v26;
    goto LABEL_5;
  }
  v20 = NWPath.isConstrained.getter(v18);
  v19 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v21 = ((uint64_t (*)(_BYTE *, uint64_t))v19)(v11, v7);
  if ((v20 & 1) != 0)
    goto LABEL_4;
  if ((NWPath.isExpensive.getter(v21) & 1) != 0)
  {
    v27 = 1;
    v22 = sub_10001AAC8(&qword_10008ED58);
    v23 = &v27;
  }
  else
  {
    v28 = 2;
    v22 = sub_10001AAC8(&qword_10008ED58);
    v23 = &v28;
  }
LABEL_5:
  CheckedContinuation.resume(returning:)(v23, v22);
  return ((uint64_t (*)(_BYTE *, uint64_t))v19)(v14, v7);
}

uint64_t sub_100008524()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1000117C8(0xD00000000000009BLL, 0x8000000100072E70);
  sub_1000085A8(v1, *(_QWORD *)(v0 + 16));
  sub_10000CEA8();
  return sub_10001B170((uint64_t)sub_10001D280, *(_QWORD *)(v0 + 24), 0);
}

uint64_t sub_1000085A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  _BYTE v21[312];

  v3 = v2;
  getTimeIntervalSince1970(Date:)();
  v6 = v5;
  v7 = sub_10001AAC8(&qword_10008E4B0);
  inited = swift_initStackObject(v7, v21);
  *(_OWORD *)(inited + 16) = xmmword_10006FD40;
  v10 = *(_QWORD *)(a2 + 112);
  v9 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = &off_1000861A0;
  *(_QWORD *)(inited + 32) = v10;
  *(_QWORD *)(inited + 40) = v9;
  v11 = *(unsigned __int8 *)(a2 + 240);
  *(_QWORD *)(inited + 96) = &type metadata for Int;
  *(_QWORD *)(inited + 104) = &off_100086140;
  *(_QWORD *)(inited + 72) = v11;
  v12 = *(_QWORD *)(a2 + 192);
  v13 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(inited + 136) = &type metadata for String;
  *(_QWORD *)(inited + 144) = &off_1000861A0;
  *(_QWORD *)(inited + 112) = v12;
  *(_QWORD *)(inited + 120) = v13;
  v14 = *(_QWORD *)(a2 + 208);
  v15 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(inited + 176) = &type metadata for String;
  *(_QWORD *)(inited + 184) = &off_1000861A0;
  *(_QWORD *)(inited + 152) = v14;
  *(_QWORD *)(inited + 160) = v15;
  v16 = *(_QWORD *)(a2 + 224);
  v17 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(inited + 216) = &type metadata for String;
  *(_QWORD *)(inited + 224) = &off_1000861A0;
  *(_QWORD *)(inited + 192) = v16;
  *(_QWORD *)(inited + 200) = v17;
  v18 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(inited + 256) = &type metadata for Double;
  *(_QWORD *)(inited + 264) = &off_100086180;
  *(_QWORD *)(inited + 232) = v18;
  *(_QWORD *)(inited + 296) = &type metadata for Int64;
  *(_QWORD *)(inited + 304) = &off_100086160;
  *(_QWORD *)(inited + 272) = v6;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v17);
  sub_100011BCC(inited);
  if (v3)
  {
    swift_setDeallocating(inited);
    return sub_100011B7C();
  }
  else
  {
    swift_setDeallocating(inited);
    sub_100011B7C();
    do
    {
      v20 = sub_100011A74();
      result = swift_release(v20);
    }
    while (v20);
  }
  return result;
}

void getTimeIntervalSince1970(Date:)()
{
  double v0;

  v0 = Date.timeIntervalSince1970.getter();
  if (v0 >= 0.0 && (*(_QWORD *)&v0 & 0x7FF0000000000000) != 0x7FF0000000000000)
  {
    if (v0 <= -9.22337204e18)
    {
      __break(1u);
    }
    else if (v0 < 9.22337204e18)
    {
      return;
    }
    __break(1u);
  }
}

uint64_t sub_100008798@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;

  v5 = sub_10001AAC8(&qword_10008E850);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001D44C(a1, v9);
  v11 = sub_100020930();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Storebag._StorebagRoot.CodingKeys, &type metadata for Storebag._StorebagRoot.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100015060(a1);
  v37 = 4;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v37, v5);
  v15 = v14;
  v36 = 5;
  swift_bridgeObjectRetain(v14);
  v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v36, v5);
  v29 = v13;
  v16 = sub_10001AAC8(&qword_10008E860);
  v35 = 6;
  sub_100007290(&qword_10008E868, &qword_10008E860);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v16, &v35, v5, v16, v17);
  v27 = v34;
  swift_bridgeObjectRetain(v34);
  v18 = KeyedDecodingContainer.allKeys.getter(v5);
  v19 = v18;
  if (*(_QWORD *)(v18 + 16))
  {
    v26[0] = a2;
    v26[1] = v5;
    v26[2] = v15;
    swift_bridgeObjectRetain(v18);
    v33 = &_swiftEmptyArrayStorage;
    v30 = v19;
    v31 = v6;
    __asm { BR              X8 }
  }
  v20 = swift_bridgeObjectRelease(v18);
  v33 = v26;
  __chkstk_darwin(v20);
  v26[-2] = v8;
  v21 = sub_10000700C((void (*)(uint64_t *__return_ptr, char *))sub_100007178, (uint64_t)&v26[-4], (uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(&_swiftEmptyArrayStorage);
  sub_1000054F4((uint64_t)v21, (uint64_t *)&unk_1000904F0, (void (*)(uint64_t, uint64_t, void **))sub_1000068E4);
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain(v23);
  sub_100015060(a1);
  swift_bridgeObjectRelease(v23);
  v24 = v27;
  swift_bridgeObjectRelease(v27);
  result = swift_bridgeObjectRelease(v15);
  *(_QWORD *)a2 = v29;
  *(_QWORD *)(a2 + 8) = v15;
  v25 = BYTE4(v28);
  *(_DWORD *)(a2 + 16) = v28;
  *(_BYTE *)(a2 + 20) = v25 & 1;
  *(_QWORD *)(a2 + 24) = v24;
  *(_QWORD *)(a2 + 32) = v23;
  return result;
}

uint64_t sub_100008DB0(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  result = a1[7];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[8]);
    swift_bridgeObjectRelease(a1[9]);
    return swift_bridgeObjectRelease(a1[10]);
  }
  return result;
}

uint64_t sub_100008E20@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100008E44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100008E44(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v9;
  unint64_t v11;

  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 4;
  }
  if (a1 == 0x5F68736572666572 && a2 == 0xED0000656C637963)
  {
    v9 = 0xED0000656C637963;
    goto LABEL_17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5F68736572666572, 0xED0000656C637963, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_17:
    swift_bridgeObjectRelease(v9);
    return 5;
  }
  if (a1 == 0x765F646572616873 && a2 == 0xEC00000073656C61)
  {
    v11 = 0xEC00000073656C61;
  }
  else
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x765F646572616873, 0xEC00000073656C61, a1, a2, 0) & 1) == 0)
      __asm { BR              X8 }
    v11 = a2;
  }
  swift_bridgeObjectRelease(v11);
  return 6;
}

uint64_t sub_1000090F4()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_OWORD **)(v0 + 72);
  *(_OWORD *)(v0 + 16) = *v2;
  *(_OWORD *)(v0 + 32) = v2[1];
  *(_OWORD *)(v0 + 48) = v2[2];
  sub_10001E08C(v0 + 16);
  sub_10001E08C(v0 + 32);
  sub_10001E08C(v0 + 48);
  v3 = qword_10008E080;
  swift_bridgeObjectRetain(v1);
  if (v3 != -1)
    swift_once(&qword_10008E080, sub_1000584B0);
  if (byte_1000973F0 == 1)
  {
    if (qword_10008E098 != -1)
      swift_once(&qword_10008E098, sub_1000585B8);
    v4 = 5;
    if (!byte_100097401)
      v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(v0 + 192) = v4;
  v6 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 152);
  v11 = static TimeZone.current.getter();
  Date.init()(v11);
  *(_QWORD *)(v0 + 200) = TimeZone.secondsFromGMT(for:)(v8);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v13 = qword_1000973E0;
  *(_QWORD *)(v0 + 208) = qword_1000973E0;
  if (v13)
  {
    v14 = dword_10008F76C;
    swift_retain(v13);
    v15 = (_QWORD *)swift_task_alloc(v14);
    *(_QWORD *)(v0 + 216) = v15;
    *v15 = v0;
    v15[1] = sub_1000067F8;
    return sub_10000A46C(*(_QWORD *)(v0 + 72));
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100009280@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100018FC0(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

void sub_1000092AC(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  sub_100019138(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t sub_1000092C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = sub_1000095E0(&qword_10008ED50, a2, (uint64_t (*)(uint64_t))type metadata accessor for StorebagCoordinator, (uint64_t)&unk_10006DD50);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v2 + 24) = v5;
  *v5 = v2;
  v5[1] = sub_100006FCC;
  return withCheckedContinuation<A>(isolation:function:_:)(v2 + 32, v3, v4, 0xD000000000000013, 0x8000000100071920, sub_1000308EC, *(_QWORD *)(v2 + 16), &unk_100089860);
}

uint64_t sub_10000937C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD aBlock[5];
  uint64_t v28;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v23 = *(_QWORD *)(v7 - 8);
  v24 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001AAC8(&qword_10008ED58);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v22[1] = *(_QWORD *)(a2 + 120);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 24) & ~v13;
  v15 = swift_allocObject(&unk_100087768, v14 + v12, v13 | 7);
  *(_QWORD *)(v15 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v15 + v14, (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = sub_1000082DC;
  v28 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000082B0;
  aBlock[3] = &unk_100087780;
  v16 = _Block_copy(aBlock);
  v17 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v17);
  v26 = &_swiftEmptyArrayStorage;
  v18 = sub_1000095E0(&qword_10008EA40, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10001AAC8(&qword_10008EA48);
  v20 = sub_100009620((unint64_t *)&unk_10008EA50, &qword_10008EA48);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v19, v20, v4, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
  return swift_release(v28);
}

uint64_t sub_1000095E0(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100009620(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100027598(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100009660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Bool v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t result;
  uint64_t v15;
  uint64_t inited;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  unsigned __int8 v20;
  uint64_t v21;
  char v22;
  void (*v23)(uint64_t, uint64_t);
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  NSObject *v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  NSURL *v70;
  uint64_t v71;
  void *v72;
  id v73;
  id v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t);
  uint64_t (*v117)(uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;

  v6 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 408);
  sub_10001F1C4();
  sub_10006855C(v6, 1, v5);
  if (!v19)
  {
    v9 = *(_QWORD *)(v0 + 424);
    sub_100021214(*(_QWORD *)(v0 + 400), v9);
    v125 = *(_DWORD *)(v9 + 8);
    v10 = *(_QWORD *)(v9 + 24);
    v121 = *(_QWORD *)(v9 + 16);
    v123 = *(_QWORD *)v9;
    v11 = *(_QWORD *)(v9 + 32);
    swift_bridgeObjectRetain(*(_QWORD *)v9);
    v120 = v10;
    sub_100010644();
    v119 = v11;
    sub_10000CA18();
    sub_10001C614(v9, type metadata accessor for CachedStorebag);
LABEL_5:
    v115 = *(_QWORD *)(v0 + 296);
    v12 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 424));
    sub_100010D58();
    sub_10000F3D8();
    sub_10000B0DC();
    sub_100010384();
    sub_10000BD30();
    sub_10000BDD4();
    sub_1000111E4();
    sub_10000BFB0();
    swift_task_dealloc(v115);
    *(_QWORD *)v12 = v123;
    *(_DWORD *)(v12 + 8) = v125;
    *(_QWORD *)(v12 + 16) = v121;
    *(_QWORD *)(v12 + 24) = v120;
    *(_QWORD *)(v12 + 32) = v119;
    v13 = (uint64_t (*)(void))sub_100015B7C();
    return sub_1000193C0(v13);
  }
  sub_10001D7E8(*(_QWORD *)(v0 + 400), (uint64_t *)&unk_100090A60);
  sub_10006849C();
  v7 = URL.checkResourceIsReachable()();
  if (v8)
  {
    sub_10000A8B8();
LABEL_9:
    *(_QWORD *)(v0 + 160) = &unk_100086C58;
    *(_QWORD *)(v0 + 168) = &off_100086F20;
    v17 = (_QWORD *)swift_task_alloc(dword_100090854);
    *(_QWORD *)(v0 + 432) = v17;
    *v17 = v0;
    v17[1] = sub_100065E20;
    return sub_100066880(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280), v0 + 136, 0);
  }
  if (!v7)
    goto LABEL_9;
  v15 = sub_10001AAC8(&qword_10008EA78);
  inited = swift_initStackObject(v15, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_10006D0C0;
  sub_100068520(inited, NSURLContentModificationDateKey);
  sub_100068438();
  URL.resourceValues(forKeys:)();
  v18 = sub_10006831C();
  URLResourceValues.contentModificationDate.getter(v18);
  sub_1000683B0();
  result = sub_10006855C(v2, 1, v3);
  if (v19)
  {
    __break(1u);
  }
  else
  {
    sub_10000CF00();
    sub_1000683EC();
    v20 = sub_100015674();
    sub_100068308(v20);
    v21 = sub_100019574();
    static Date.now.getter(v21);
    v22 = sub_100068420();
    v23 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    *(_QWORD *)(v0 + 448) = v23;
    sub_1000682F4();
    v116 = v23;
    if ((v22 & 1) == 0)
    {
      v125 = v4;
      v113 = v3;
      v32 = *(_QWORD *)(v0 + 408);
      v33 = *(_QWORD *)(v0 + 416);
      v34 = *(_QWORD *)(v0 + 392);
      v36 = *(_QWORD *)(v0 + 280);
      v35 = *(_QWORD *)(v0 + 288);
      v124 = *(_QWORD *)(v0 + 272);
      v37 = *(_QWORD *)(v0 + 96);
      v38 = *(_QWORD *)(v0 + 120);
      v122 = *(_QWORD *)(v0 + 112);
      v39 = *(_QWORD *)(v0 + 128);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 336) + 16))(v33 + *(int *)(v32 + 20), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 328));
      v40 = *(_QWORD *)(v2 + 32);
      v41 = *(_OWORD *)(v2 + 16);
      *(_OWORD *)v33 = *(_OWORD *)v2;
      *(_OWORD *)(v33 + 16) = v41;
      *(_QWORD *)(v33 + 32) = v40;
      sub_1000211D4(v33, v34, type metadata accessor for CachedStorebag);
      v42 = v39;
      _s10RTCUtility9XPCObjectOwst_0(v34, 0, 1, v32);
      sub_100010430(v35 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_cache, v0 + 176);
      swift_bridgeObjectRetain(v36);
      sub_10000CA18();
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v39);
      sub_1000054D8(v34, v124, v36, v43, v44, v45, v46, v47, v92, v95, v97, v100, v104, v108, v110, v113, (uint64_t)v116, v118, v0 + 176,
        v122);
      swift_endAccess(v0 + 176);
      if (qword_10008E0C8 != -1)
        swift_once(&qword_10008E0C8, sub_100065C74);
      v120 = v38;
      v123 = v37;
      v48 = sub_10000F3D0();
      sub_100018168(v48, (uint64_t)qword_100097440);
      v49 = sub_100015738();
      v50 = static os_log_type_t.debug.getter();
      v51 = sub_100068494(v49);
      v53 = *(_QWORD *)(v0 + 376);
      v52 = *(_QWORD *)(v0 + 384);
      v55 = *(_QWORD *)(v0 + 360);
      v54 = *(_QWORD *)(v0 + 368);
      v109 = *(_QWORD *)(v0 + 352);
      v111 = *(_QWORD *)(v0 + 416);
      v56 = *(_QWORD *)(v0 + 328);
      v57 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
      v119 = v42;
      if (v51)
      {
        v94 = *(_QWORD *)(v0 + 272);
        v106 = *(_QWORD *)(v0 + 368);
        v58 = v49;
        v59 = (uint8_t *)sub_100012C5C(12);
        v102 = v52;
        v60 = sub_100012C5C(32);
        v126 = v60;
        *(_DWORD *)v59 = 136446210;
        sub_100018040();
        *(_QWORD *)(v0 + 240) = sub_100014F94(v94, (unint64_t)v57, &v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v114, v59 + 4, v59 + 12);
        sub_1000110B4((uint64_t)v57);
        sub_100010670((void *)&_mh_execute_header, v58, v50, "storing storebag %{public}s in cache", v59);
        sub_10000BE60(v60);
        sub_1000120F8(v60);
        sub_1000120F8((uint64_t)v59);

        sub_10001C614(v111, type metadata accessor for CachedStorebag);
        sub_10000D2E8(v61, v62, v63, v64, v65, v66, v67, v68, v94, v0 + 240, v55, v102, v106, v109, v111, v114, v117);
        v57(v99, v56);
        (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v103, v107);
      }
      else
      {
        sub_10000F3C8((uint64_t)v57);

        sub_10001C614(v111, type metadata accessor for CachedStorebag);
        sub_10000D2E8(v76, v77, v78, v79, v80, v81, v82, v83, v93, v96, v98, v101, v105, v109, v111, v114, v117);
        v57(v55, v56);
        (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
      }
      goto LABEL_5;
    }
    sub_10001FEDC();
    sub_10000BE38();
    sub_1000108B8();
    if (qword_10008E0C8 != -1)
      swift_once(&qword_10008E0C8, sub_100065C74);
    v24 = *(NSObject **)(v0 + 280);
    v25 = sub_10000F3D0();
    sub_100018168(v25, (uint64_t)qword_100097440);
    sub_100015738();
    v26 = sub_10000BFB8();
    v27 = sub_1000108D4(v26);
    v28 = *(_QWORD *)(v0 + 280);
    if (v27)
    {
      v23 = (void (*)(uint64_t, uint64_t))(v0 + 256);
      v29 = (uint8_t *)sub_100012C5C(12);
      v112 = v3;
      v30 = sub_100012C5C(32);
      v126 = v30;
      sub_100019A04(4.8751e-34);
      *(_QWORD *)(v0 + 256) = sub_10006833C();
      sub_100007864(v0 + 256, v0 + 264, 12);
      sub_1000110B4(v28);
      sub_100010670((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "removing expired storebag %{public}s", v29);
      sub_10000BE60(v30);
      v31 = v30;
      v3 = v112;
      sub_1000120F8(v31);
      sub_1000120F8((uint64_t)v29);

    }
    else
    {

      sub_10000F3C8(v28);
    }
    v69 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    URL._bridgeToObjectiveC()(v70);
    v72 = (void *)v71;
    *(_QWORD *)(v0 + 248) = 0;
    v73 = sub_10000BE8C(v71, "removeItemAtURL:error:");

    if (!(_DWORD)v73)
    {
      sub_10001E1C0();
      sub_10000C09C();

      sub_1000684A8(v84, v85, v86, v87, v88, v89, v90, v91, v92, v95, v97, v100, v104, v108);
      v116(v3, v4);
      sub_100068468();
      (*((void (**)(uint64_t, _QWORD))v69 + 1))(v28, v23);
      sub_10001D42C();
      sub_100010D58();
      sub_1000111E4();
      sub_10000BFB0();
      sub_10001210C();
      sub_10000B0DC();
      sub_100010384();
      sub_10000BD30();
      sub_10000BDD4();
      sub_10000F3D8();
      v13 = (uint64_t (*)(void))sub_100015B7C();
      return sub_1000193C0(v13);
    }
    v74 = *(id *)(v0 + 248);
    v75 = (_QWORD *)sub_10000BFD4();
    *(_QWORD *)(v0 + 456) = v75;
    sub_1000684CC(v75);
    return sub_100010614();
  }
  return result;
}

uint64_t sub_100009EA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = sub_100009ED0(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t sub_100009ED0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;

  v2 = a1[3];
  v3 = a1[4];
  sub_10001D44C(a1, v2);
  v4 = dispatch thunk of Decoder.codingPath.getter(v2, v3);
  sub_10000A1E0(v4, (uint64_t)v25);
  result = sub_10000A828();
  v6 = v26;
  if (v26)
  {
    v7 = v27;
    sub_10001D44C(v25, v26);
    v8 = dispatch thunk of CodingKey.stringValue.getter(v6, v7);
    v10 = v9;
    sub_100015060(v25);
    if (v8 == 0x6F7A6E6F67 && v10 == (_QWORD *)0xE500000000000000)
    {
      v14 = 0xE500000000000000;
    }
    else
    {
      if ((sub_10001AB54(0x6F7A6E6F67, 0xE500000000000000) & 1) != 0)
      {
LABEL_12:
        v14 = (unint64_t)v10;
        goto LABEL_35;
      }
      if (v8 == 0x6B6E756C7073 && v10 == (_QWORD *)0xE600000000000000)
      {
        v14 = 0xE600000000000000;
      }
      else
      {
        v13 = sub_10001A1BC();
        if ((sub_10001AB54(v13, 0xE600000000000000) & 1) != 0)
          goto LABEL_12;
        if (v8 == 0x685F6B6E756C7073 && v10 == (_QWORD *)0xEE00646F70656D6FLL)
        {
          v14 = 0xEE00646F70656D6FLL;
        }
        else
        {
          v16 = sub_10001A1BC();
          if ((sub_10001AB54(v16 & 0xFFFFFFFFFFFFLL | 0x685F000000000000, 0xEE00646F70656D6FLL) & 1) != 0)
            goto LABEL_12;
          if (v8 != 0x615F6B6E756C7073 || v10 != (_QWORD *)0xEA00000000007674)
          {
            v18 = sub_10001A1BC();
            if ((sub_10001AB54(v18 & 0xFFFFFFFFFFFFLL | 0x615F000000000000, 0xEA00000000007674) & 1) == 0)
            {
              if (v8 == 0xD000000000000012)
              {
                v14 = 0x8000000100071AD0;
                if (v10 == (_QWORD *)0x8000000100071AD0)
                  goto LABEL_35;
              }
              if ((sub_10001AB54(0xD000000000000012, 0x8000000100071AD0) & 1) == 0)
              {
                if (v8 == 0x6C61636F6CLL && v10 == (_QWORD *)0xE500000000000000)
                {
                  v21 = swift_bridgeObjectRelease(0xE500000000000000);
                }
                else
                {
                  v20 = sub_10001AB54(0x6C61636F6CLL, 0xE500000000000000);
                  v21 = sub_10000A828();
                  if ((v20 & 1) == 0)
                  {
                    v10 = 0;
LABEL_38:
                    sub_10001934C();
                    return (uint64_t)v10;
                  }
                }
                sub_10001B164(v21);
                v24 = sub_100034830(v25);
                if (!v1)
                  v10 = v24;
                goto LABEL_38;
              }
            }
            goto LABEL_12;
          }
          v14 = 0xEA00000000007674;
        }
      }
    }
LABEL_35:
    v22 = swift_bridgeObjectRelease(v14);
    sub_10001B164(v22);
    v23 = sub_10000A20C(v25);
    if (!v1)
      v10 = (_QWORD *)v23;
    goto LABEL_38;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000A19C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

double sub_10000A1E0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10000A19C(a1 + 40 * v2 - 8, a2);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10000A20C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v3 = sub_10001AAC8(&qword_10008EFC0);
  __chkstk_darwin(v3);
  sub_10001CC78();
  v4 = a1[4];
  sub_10001D44C(a1, a1[3]);
  v5 = sub_10000A430();
  sub_10001B094((uint64_t)&unk_100087C30, (uint64_t)&unk_100087C30, v5);
  if (v1)
  {
    sub_10001934C();
    return v4;
  }
  v6 = a1[3];
  v7 = a1[4];
  sub_10001D44C(a1, v6);
  v8 = dispatch thunk of Decoder.codingPath.getter(v6, v7);
  sub_10000A1E0(v8, (uint64_t)v16);
  result = sub_10000A828();
  v10 = v17;
  if (v17)
  {
    v11 = v18;
    sub_10001D44C(v16, v17);
    v4 = dispatch thunk of CodingKey.stringValue.getter(v10, v11);
    swift_bridgeObjectRetain(v12);
    sub_100015060(v16);
    v13 = sub_10001AAC8(&qword_10008EFD0);
    v14 = sub_10000A3CC(&qword_10008EFD8, &qword_10008EFD0, (void (*)(void))sub_100034984);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v13, v15, v3, v13, v14);
    sub_100012154();
    swift_bridgeObjectRetain(v16[0]);
    sub_10001934C();
    sub_10000A828();
    sub_100019460();
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000A3CC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100027598(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000A430()
{
  unint64_t result;

  result = qword_10008EFC8;
  if (!qword_10008EFC8)
  {
    result = swift_getWitnessTable(&unk_10006E34C, &unk_100087C30);
    atomic_store(result, (unint64_t *)&qword_10008EFC8);
  }
  return result;
}

uint64_t sub_10000A46C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[9] = a1;
  v2[10] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = sub_100007830(v4);
  v5 = sub_10001AAC8(&qword_10008E4D8);
  v2[14] = sub_100007830(*(_QWORD *)(v5 - 8));
  v6 = type metadata accessor for Date(0);
  v2[15] = v6;
  v2[16] = *(_QWORD *)(v6 - 8);
  v2[17] = sub_10000BFD4();
  v2[18] = sub_10000BFD4();
  v2[19] = sub_10000BFD4();
  v2[20] = sub_10000BFD4();
  return sub_10001A1B0((uint64_t)sub_100006C84, v1, 0);
}

uint64_t sub_10000A510()
{
  uint64_t v0;

  sub_100019A38();
  sub_10000BDC4(*(_QWORD *)(v0 + 88));
  sub_10000CEA8();
  sub_10000CEB8();
  return sub_100012104();
}

uint64_t sub_10000A550()
{
  uint64_t v0;

  sub_10000A568();
  return swift_defaultActor_deallocate(v0);
}

void sub_10000A568()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[21]);
  sub_10000AF70();
  sub_10000781C();
  swift_release(v0[23]);
  swift_bridgeObjectRelease(v0[29]);
  sub_10000AF70();
  sub_10000781C();
  v1 = sub_1000112E0();
  sub_10001AFDC(v1);
  swift_unknownObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC13rtcreportingd7Session_realtimeBackend));
  swift_unknownObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC13rtcreportingd7Session_immediateBackend));
  v2 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC13rtcreportingd7Session_eventExtraFieldProvider + 56);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC13rtcreportingd7Session_eventExtraFieldProvider
                                                   + 88));
  sub_1000120B4();
  swift_bridgeObjectRelease(v2);
  sub_10000AF70();
  sub_10000781C();
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC13rtcreportingd7Session_hierarchyID + 8));
  swift_defaultActor_destroy(v0);
  sub_10000BF84();
}

void sub_10000A64C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  double v5;

  v5 = sub_10000A678(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = v4;
    *(double *)(a2 + 8) = v5;
  }
}

double sub_10000A678(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  char v12;
  uint64_t v13;

  v4 = sub_10001AAC8(&qword_10008FA28);
  __chkstk_darwin(v4);
  sub_10000BE50();
  v5 = a1[3];
  v6 = a1[4];
  sub_10001D44C(a1, v5);
  v7 = sub_10000A954();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for StorebagSectionPerCountrySampling.CodingKeys, &type metadata for StorebagSectionPerCountrySampling.CodingKeys, v7, v5, v6);
  if (v1)
  {
    sub_100019A88();
  }
  else
  {
    v8 = sub_100018F04();
    v12 = 0;
    v9 = sub_10000B030((unint64_t *)&qword_10008FA00);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v8, &v12, v4, v8, v9);
    v11 = 1;
    swift_bridgeObjectRetain(v13);
    v2 = KeyedDecodingContainer.decode(_:forKey:)(&v11, v4);
    sub_1000078A8();
    sub_100015060(a1);
    sub_100019460();
  }
  return v2;
}

uint64_t sub_10000A7FC(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0, 0);
}

uint64_t sub_10000A808()
{
  return 0;
}

uint64_t sub_10000A818()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000A820()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000A828()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000A830(uint64_t a1)
{
  uint64_t v1;

  return _s10RTCUtility9XPCObjectOwet_0(a1, 1, *(_QWORD *)(v1 - 136));
}

uint64_t sub_10000A858(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10000A890(uint64_t a1, uint64_t a2)
{
  Swift::String v2;

  v2._countAndFlagsBits = 0x747065636341;
  v2._object = (void *)0xE600000000000000;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&a1, v2);
}

BOOL sub_10000A8A8(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10000A8B8()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

void sub_10000A8C0(uint64_t a1@<X8>)
{
  sub_100021ECC(0xD000000000000011, (a1 - 32) | 0x8000000000000000);
}

uint64_t sub_10000A8D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 4) = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10000A8E4()
{
  uint64_t v0;

  return sub_10001E08C(v0);
}

uint64_t sub_10000A8EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_10001D44C(v0, v1);
  return dispatch thunk of Encoder.singleValueContainer()(v1, v2);
}

uint64_t sub_10000A918()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 104));
}

uint64_t sub_10000A920()
{
  uint64_t v0;
  uint64_t v1;

  return swift_retain(*(_QWORD *)(*(_QWORD *)(v0 + 48) + 8 * v1));
}

uint64_t sub_10000A930@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100006354((uint64_t *)(v2 - 128), a1, (a2 - 32) | 0x8000000000000000);
}

uint64_t sub_10000A944()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

unint64_t sub_10000A954()
{
  unint64_t result;

  result = qword_10008FA30;
  if (!qword_10008FA30)
  {
    result = swift_getWitnessTable(&unk_10006F0DC, &type metadata for StorebagSectionPerCountrySampling.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008FA30);
  }
  return result;
}

uint64_t sub_10000A990()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *v0;
  sub_10000B158(*(_QWORD *)(v5 + 168), &v5);
  sub_10000A828();
  sub_10000CEB8();
  return sub_10001A1B0(v1, v2, v3);
}

uint64_t sub_10000A9DC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  xpc_object_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  xpc_object_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _xpc_connection_s *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v54 = v0 + 200;
  v1 = *(_QWORD *)(v0 + 424);
  v2 = &unk_10006D000;
  if (*(_QWORD *)(v1 + 16))
  {
    v3 = *(void **)(v0 + 416);
    v4 = sub_10002DD30(v1);
    xpc_dictionary_set_value(v3, "allowed", v4);
    sub_10001A3C8();
    if (qword_10008DFE0 != -1)
      swift_once(&qword_10008DFE0, sub_10002DF10);
    v6 = *(_QWORD *)(v0 + 424);
    v5 = *(_QWORD *)(v0 + 432);
    v7 = *(_QWORD *)(v0 + 400);
    v8 = sub_10000F3D0();
    sub_100015718(v8, (uint64_t)qword_10008EAE0);
    sub_10000785C(v7);
    sub_10000BD20(v6);
    sub_10000BD20(v5);
    v9 = sub_10000F490();
    v10 = static os_log_type_t.debug.getter();
    v11 = sub_1000108D4(v10);
    v13 = *(_QWORD *)(v0 + 424);
    v12 = *(_QWORD *)(v0 + 432);
    v14 = *(_QWORD *)(v0 + 400);
    if (v11)
    {
      v15 = (uint8_t *)sub_100012C5C(22);
      v53 = sub_100012C5C(64);
      v56 = v53;
      *(_DWORD *)v15 = 136446466;
      v16 = *(_QWORD *)(v14 + 112);
      sub_1000111A4();
      *(_QWORD *)(v0 + 200) = sub_100030364(v16, v17, &v56);
      sub_10001F4F8(v54, v0 + 208, v18, (uint64_t)(v15 + 12));
      sub_10000A820();
      sub_100018064(v14);
      sub_100010860();
      v19 = sub_10000B0D4();
      v20 = Set.description.getter(v19, &type metadata for Int, &protocol witness table for Int);
      v22 = v21;
      sub_10000BDE4();
      *(_QWORD *)(v0 + 208) = sub_100015C14(v20, v23, &v56);
      sub_10001F4F8(v0 + 208, v0 + 216, v24, (uint64_t)(v15 + 22));
      swift_bridgeObjectRelease(v22);
      sub_10000F3C8(v13);
      sub_10000F3C8(v12);
      sub_10000BFA8((void *)&_mh_execute_header, v9, (os_log_type_t)v6, "new session %{public}s allowlisting events: %{public}s", v15);
      sub_10000BDEC(v53);
      v2 = (_QWORD *)&unk_10006D000;
      sub_1000120F8(v53);
      sub_1000120F8((uint64_t)v15);

    }
    else
    {
      sub_10000F3C8(*(_QWORD *)(v0 + 424));
      sub_10000F3C8(v12);

      sub_100018064(v14);
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(v0 + 432) + 16))
  {
    v25 = *(void **)(v0 + 416);
    v26 = sub_10002DD30(*(_QWORD *)(v0 + 432));
    xpc_dictionary_set_value(v25, "denied", v26);
    sub_100019ABC();
    if (qword_10008DFE0 != -1)
      swift_once(&qword_10008DFE0, sub_10002DF10);
    v27 = *(_QWORD *)(v0 + 424);
    v28 = *(_QWORD *)(v0 + 432);
    v29 = *(_QWORD *)(v0 + 400);
    v30 = sub_10000F3D0();
    sub_100015718(v30, (uint64_t)qword_10008EAE0);
    sub_10000785C(v29);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    v31 = sub_100015B60();
    v32 = static os_log_type_t.debug.getter();
    v33 = sub_100019A28(v32);
    v34 = *(_QWORD *)(v0 + 432);
    v35 = *(_QWORD *)(v0 + 400);
    if (v33)
    {
      v51 = *(_QWORD *)(v0 + 424);
      v36 = (uint8_t *)swift_slowAlloc(22, -1);
      v52 = sub_100012C5C(64);
      v56 = v52;
      *(_DWORD *)v36 = v2[47];
      v37 = *(_QWORD *)(v35 + 112);
      sub_10000CA18();
      *(_QWORD *)(v0 + 184) = sub_100014578(v37, v38, &v56);
      sub_10000BDDC(v0 + 184, v0 + 192, v39, (uint64_t)(v36 + 12));
      sub_10000AF70();
      sub_100018064(v35);
      sub_100010860();
      v40 = sub_1000111A4();
      v41 = Set.description.getter(v40, &type metadata for Int, &protocol witness table for Int);
      v43 = v42;
      sub_10000A820();
      *(_QWORD *)(v0 + 192) = sub_100014F94(v41, v43, &v56);
      sub_10001F4F8(v0 + 192, v54, v44, (uint64_t)(v36 + 22));
      sub_100019460();
      sub_10000F3C8(v51);
      sub_10000F3C8(v34);
      sub_10000BFA8((void *)&_mh_execute_header, v31, (os_log_type_t)v27, "new session %{public}s denylisting events: %{public}s", v36);
      sub_10000BDEC(v52);
      sub_1000120F8(v52);
      sub_1000120F8((uint64_t)v36);

    }
    else
    {
      sub_10000F3C8(*(_QWORD *)(v0 + 424));
      sub_10000F3C8(v34);

      sub_100018064(v35);
    }
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 424));
    sub_10000A828();
  }
  sub_10000D220();
  if (v45)
  {
    v46 = *(_QWORD *)(v0 + 400);
    v47 = (_xpc_connection_s *)sub_10001A190();
    sub_10001FD5C(v47);
    sub_100018064(v46);
    sub_10001A3C8();
    sub_100019ABC();
    v48 = sub_10001D258();
    v55 = v49;
    swift_task_dealloc(v48);
    sub_100010D58();
    sub_10000F3D8();
    sub_1000111E4();
    sub_10000BFB0();
    sub_10001210C();
    sub_10000B0DC();
    sub_100010384();
    sub_10000BD30();
    sub_10000BDD4();
    swift_task_dealloc(v55);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    result = swift_release(*(_QWORD *)(v0 + 400));
    __break(1u);
  }
  return result;
}

uint64_t sub_10000AE78()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;
  uint64_t v5;
  uint64_t (*v6)(void);

  if (*(_BYTE *)(v0 + 59) == 3)
  {
    v1 = *(_QWORD *)(v0 + 112);
LABEL_7:
    *(_QWORD *)(v0 + 88) = sub_100058400();
    *(_QWORD *)(v0 + 96) = &off_100089B78;
    *(_QWORD *)(v0 + 64) = v1;
    sub_100019A20();
    v3 = (_QWORD *)sub_1000156A4();
    *(_QWORD *)(v0 + 168) = v3;
    *v3 = v0;
    v3[1] = sub_100005844;
    return sub_100015B44(v0 + 16, v0 + 64);
  }
  v1 = *(_QWORD *)(v0 + 112);
  if (*(_BYTE *)(v1 + 240) == 1 || *(_BYTE *)(v0 + 57) != 0)
    goto LABEL_7;
  v5 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)v5 = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v5 + 8) = &_swiftEmptyArrayStorage;
  *(_BYTE *)(v5 + 16) = 1;
  *(_QWORD *)(v5 + 24) = 1701736302;
  *(_QWORD *)(v5 + 32) = 0xE400000000000000;
  *(_BYTE *)(v5 + 40) = 2;
  v6 = (uint64_t (*)(void))sub_10001C704();
  return sub_10001B084(v6);
}

uint64_t sub_10000AF70()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000AF78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100018DC0(a1, v3, *(_DWORD *)(v1 + 360));
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10000AF94()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10000AF9C()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 136));
}

void sub_10000AFA4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_10000AFB8()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100010720(v1, v0);
}

uint64_t sub_10000AFC4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000AFD0()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_10000AFEC()
{
  uint64_t v0;

  return sub_10001E08C(v0);
}

uint64_t sub_10000AFF4()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_10000B020()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 112));
}

uint64_t sub_10000B028()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 184));
}

uint64_t sub_10000B030(unint64_t *a1)
{
  uint64_t *v1;

  return sub_100018E08(a1, v1);
}

uint64_t sub_10000B038()
{
  uint64_t v0;

  return swift_retain_n(v0, 2);
}

uint64_t sub_10000B048(uint64_t a1)
{
  uint64_t v1;

  return _s10RTCUtility9XPCObjectOwet_0(a1, 1, v1);
}

_QWORD *sub_10000B064@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_10000B070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10000B080()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 458) = sub_10000B160() & 1;
  sub_10000CEB8();
  return sub_100012104();
}

_QWORD *sub_10000B0C8()
{
  return sub_10003C104();
}

uint64_t sub_10000B0D4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10000B0DC()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10000B0E4()
{
  uint64_t v0;

  return sub_100033A90(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
}

void sub_10000B0F0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10000B100(char a1)
{
  return sub_10003A9FC(a1);
}

uint64_t sub_10000B10C()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

unint64_t sub_10000B114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001A120(a2, a3);
}

uint64_t sub_10000B124()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_10000B144(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_100023458(v2, a2);
}

uint64_t sub_10000B14C@<X0>(uint64_t (*a1)(_QWORD, _QWORD)@<X8>)
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 72));
}

uint64_t sub_10000B158@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_10000B160()
{
  uint64_t v0;

  return (*(_QWORD *)(*(_QWORD *)(v0 + 136) + 16) == 0) & (*(unsigned __int8 *)(v0 + 152) ^ 1u);
}

uint64_t sub_10000B180(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)(v3 + 457) = a2;
  *(_QWORD *)(v3 + 240) = a1;
  *(_QWORD *)(v3 + 248) = v2;
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_10001AAC8(&qword_10008FEE0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 256) = swift_task_alloc(v4);
  *(_QWORD *)(v3 + 264) = swift_task_alloc(v4);
  *(_QWORD *)(v3 + 272) = swift_task_alloc(v4);
  *(_QWORD *)(v3 + 280) = swift_task_alloc(v4);
  *(_QWORD *)(v3 + 288) = swift_task_alloc(v4);
  *(_QWORD *)(v3 + 296) = swift_task_alloc(v4);
  *(_QWORD *)(v3 + 304) = swift_task_alloc(v4);
  *(_QWORD *)(v3 + 312) = swift_task_alloc(v4);
  *(_QWORD *)(v3 + 320) = swift_task_alloc(v4);
  *(_QWORD *)(v3 + 328) = swift_task_alloc(v4);
  *(_QWORD *)(v3 + 336) = swift_task_alloc(v4);
  return swift_task_switch(sub_100012F64, v2, 0);
}

uint64_t sub_10000B25C()
{
  uint64_t **v0;
  uint64_t v1;
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  _BOOL8 v27;
  Swift::Int v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  _WORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;

  if (*(_BYTE *)(v1 + 311) == 1)
    sub_10000E4D8(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 168), 1);
  v3 = *(_QWORD *)(v1 + 224);
  if (v3)
  {
    v2 = (unint64_t *)(v1 + 112);
    v4 = *(_QWORD *)(v1 + 280);
    v5 = *(_QWORD *)(v1 + 288);
    v6 = *(_QWORD *)(v4 + 112);
    v7 = *(_QWORD *)(v4 + 120);
    *(_QWORD *)(v1 + 136) = 46;
    *(_QWORD *)(v1 + 144) = 0xE100000000000000;
    v8 = swift_task_alloc(32);
    *(_QWORD *)(v8 + 16) = v1 + 136;
    sub_10000BD20(v7);
    sub_100010644();
    v9 = sub_10000C39C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10000C7E4, v8, v6, v7);
    sub_100019460();
    swift_task_dealloc(v8);
    sub_100020728(v9);
    sub_1000108EC();
    swift_bridgeObjectRelease(v9);
    if (!v5)
    {
      Substring.init(_:)(0, 0xE000000000000000);
      sub_1000108EC();
    }
    v10 = *(_QWORD *)(v1 + 256);
    v11 = *(_QWORD *)(v1 + 216);
    v57 = static String._fromSubstring(_:)(v6, v7, v8, v5);
    v13 = v12;
    sub_10000AF70();
    v0 = (uint64_t **)(v10 + 144);
    sub_10000F3E8();
    sub_10001C454(v14, v15, v16);
    v17 = *(_QWORD *)(v10 + 144);
    sub_100010644();
    sub_100018040();
    sub_100020788(v11, v3, v17);
    v19 = v18;
    sub_10000781C();
    sub_10000A828();
    swift_bridgeObjectRelease(v19);
    if (!v19)
    {
      v20 = *(_QWORD *)(v1 + 216);
      sub_10001C454(v10 + 144, v1 + 64, 33);
      sub_100010644();
      sub_1000207EC((uint64_t)_swiftEmptyArrayStorage, v20, v3);
      swift_endAccess(v1 + 64);
      sub_10000781C();
    }
    v21 = *(_QWORD *)(v1 + 216);
    sub_10001C454(v10 + 144, v1 + 112, 33);
    sub_100010644();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
    v58 = *v0;
    v23 = v58;
    *v0 = (uint64_t *)0x8000000000000000;
    sub_100010644();
    v24 = sub_100010870(v21);
    v26 = v23[2];
    v27 = (v25 & 1) == 0;
    v28 = v26 + v27;
    if (__OFADD__(v26, v27))
    {
      __break(1u);
    }
    else
    {
      v8 = v24;
      v29 = v25;
      sub_10001AAC8(&qword_10008F8E0);
      v23 = (uint64_t *)&v58;
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v28))
      {
        v23 = v58;
        v30 = sub_100010870(*(_QWORD *)(v1 + 216));
        if ((v29 & 1) != (v31 & 1))
        {
          sub_100010EA8();
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v32);
        }
        v8 = v30;
      }
      if ((v29 & 1) != 0)
      {
        v23 = *(uint64_t **)(v58[7] + 8 * v8);
        if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) != 0)
        {
LABEL_15:
          v35 = v23[2];
          v34 = v23[3];
          if (v35 >= v34 >> 1)
          {
            sub_1000384F4(v34 > 1, v35 + 1);
            v23 = v56;
          }
          v37 = *(_QWORD *)(v1 + 208);
          v36 = *(_QWORD *)(v1 + 216);
          v23[2] = v35 + 1;
          v38 = &v23[3 * v35];
          v38[4] = v37;
          v38[5] = v57;
          v38[6] = v13;
          v59 = v23;
          sub_10001FF78((uint64_t *)&v59, 1, (uint64_t *)&v58, v8, v36, v3);
          sub_10000781C();
          sub_10000A828();
          *v0 = v58;
          sub_10000781C();
          swift_endAccess(v1 + 112);
          sub_10000781C();
          goto LABEL_18;
        }
LABEL_30:
        sub_1000384F4(0, v23[2] + 1);
        v23 = v55;
        goto LABEL_15;
      }
    }
    __break(1u);
    goto LABEL_30;
  }
LABEL_18:
  v39 = *(_QWORD *)(v1 + 280);
  v40 = (void *)*(unsigned __int8 *)(v39 + 240);
  swift_release(v39);
  if ((_DWORD)v40 != 2)
    goto LABEL_27;
  v41 = *(_QWORD *)(v1 + 256);
  v42 = *(_QWORD *)(v41 + 152);
  if (v42 || (v2 = &qword_10008F000, byte_10008F678 != 1))
  {
    v52 = __OFADD__(v42, 1);
    v53 = v42 + 1;
    if (v52)
    {
      __break(1u);
      goto LABEL_32;
    }
    *(_QWORD *)(v41 + 152) = v53;
LABEL_27:
    sub_10001FEA0();
    sub_100010EA8();
    __asm { BR              X1 }
  }
  if (qword_10008DFF0 != -1)
LABEL_32:
    swift_once(&qword_10008DFF0, sub_100034E9C);
  v43 = sub_10000F3D0();
  sub_100010688(v43, (uint64_t)qword_10008F040);
  v44 = sub_100015624();
  if (sub_100019A28(v44))
  {
    v45 = (_WORD *)sub_100012C5C(2);
    sub_100038500(v45);
    sub_10001B3B0((void *)&_mh_execute_header, v46, v47, "registering eager submit activity");
    sub_1000120F8((uint64_t)v0);
  }
  v48 = *(_QWORD *)(v1 + 256);

  *((_BYTE *)v2 + 1656) = 0;
  *(_QWORD *)(v1 + 296) = *(_QWORD *)(v48 + 160);
  sub_100010EA8();
  return swift_task_switch(v49, v50, v51);
}

uint64_t sub_10000B668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 80);
  sub_10001C454(v1 + 152, v0 + 16, 32);
  v2 = *(_QWORD *)(v1 + 152);
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = *(_QWORD *)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 72);
    sub_10000CA18();
    v5 = sub_10001A120(v4, v3);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v5);
      sub_100014538();
      sub_100019A20();
      sub_10003036C();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
    }
    sub_10003036C();
  }
  result = sub_100014538();
  v9 = qword_1000973D8;
  *(_QWORD *)(v0 + 88) = qword_1000973D8;
  if (v9)
  {
    if (*(_QWORD *)(*(_QWORD *)(v0 + 80) + 112))
    {
      sub_100014530();
      sub_100019A20();
      v10 = XPCConnection.remoteUID.getter();
      sub_10000CEA8();
      v11 = (_QWORD *)swift_task_alloc(dword_10008F094);
      *(_QWORD *)(v0 + 96) = v11;
      *v11 = v0;
      v11[1] = sub_10002EEF8;
      return sub_100036A2C(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), v10);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10000B770(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _BYTE v4[240];

  sub_100018190(a1, v4);
  if (!v2)
    memcpy(a2, v4, 0xE9uLL);
}

#error "10000B858: call analysis failed (funcsize=51)"

uint64_t sub_10000B890()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1000110BC();
  sub_10000CA78();
  sub_100015CBC(v2[73], v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2[55] + 120));
    v4 = (_QWORD *)v2[55];
    swift_bridgeObjectRelease(v4[17]);
    sub_10000781C();
    sub_10000AF70();
    swift_release(v4[23]);
    swift_bridgeObjectRelease(v4[25]);
    sub_10000781C();
    sub_10000AF70();
    v5 = v2[71];
    v6 = v2[70];
    v7 = v2[55];
    v8 = v2[54];
    v9 = v7 + v2[72];
    v10 = sub_1000112E0();
    sub_10005F8EC(v10);
    swift_unknownObjectRelease(*(_QWORD *)(v7 + v6));
    swift_unknownObjectRelease(*(_QWORD *)(v7 + v5));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
    swift_defaultActor_destroy(v7);
    sub_10001B380();
    sub_10001D7E8(v8, &qword_100090490);
    v11 = sub_10005F8E0();
    swift_deallocPartialClassInstance(v11);
    sub_100012D34();
    sub_10000F3D8();
    sub_1000111E4();
    sub_10000BFB0();
    sub_10001210C();
    sub_10000B0DC();
    sub_100010384();
    sub_10000BD30();
    sub_10000BDD4();
    return sub_10000A858(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    memcpy((void *)(v2[55] + OBJC_IVAR____TtC13rtcreportingd7Session_eventExtraFieldProvider), v2 + 2, 0x60uLL);
    sub_10000F3E8();
    return sub_10000AFD0();
  }
}

#error "10000BB2C: call analysis failed (funcsize=186)"

uint64_t sub_10000BD20(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2);
}

uint64_t sub_10000BD28()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10000BD30()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10000BD38(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10000BD44(uint64_t a1)
{
  unint64_t v1;

  return sub_100010720(a1, v1);
}

uint64_t sub_10000BD4C()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_10000BD54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 192) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 192, v1 + 200, v2 + 14, v2 + 22);
}

uint64_t sub_10000BD70()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *v0 = v1;
  return swift_bridgeObjectRelease(v2);
}

void sub_10000BD7C()
{
  sub_100022D70();
}

uint64_t sub_10000BD94()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 424);
}

uint64_t sub_10000BDB4()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10000BDBC()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10000BDC4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t sub_10000BDD4()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10000BDDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

uint64_t sub_10000BDE4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000BDEC(uint64_t a1)
{
  return swift_arrayDestroy(a1, 2);
}

void sub_10000BDF4()
{
  Swift::String v0;

  v0._countAndFlagsBits = 58;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_10000BE04()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 4);
}

void sub_10000BE10(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 616) = v1;
  *(_QWORD *)(v2 + 608) = a1;
}

uint64_t sub_10000BE30()
{
  uint64_t v0;

  return sub_10001E08C(v0);
}

uint64_t sub_10000BE38()
{
  _OWORD *v0;
  uint64_t v1;

  *v0 = *(_OWORD *)(v1 + 112);
  return sub_10001EFD0((uint64_t)v0);
}

uint64_t sub_10000BE48()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10000BE60(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1);
}

uint64_t sub_10000BE68()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

uint64_t sub_10000BE70(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10000BE78()
{
  uint64_t v0;

  return sub_100033A4C(*(_QWORD *)(v0 - 72), *(_QWORD *)(v0 - 248));
}

uint64_t sub_10000BE84()
{
  uint64_t v0;

  return sub_10001EFD0(v0);
}

id sub_10000BE8C(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  return objc_msgSend(v2, a2, v3, v4);
}

uint64_t sub_10000BE9C()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

void sub_10000BEA4()
{
  uint64_t v0;
  _QWORD *v1;

  v1[58] = v0;
  v1[59] = *(_QWORD *)(v1[41] + 56);
}

uint64_t sub_10000BEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

uint64_t sub_10000BEC0()
{
  uint64_t v0;

  return sub_100033A4C(*(_QWORD *)(v0 - 72), *(_QWORD *)(v0 - 240));
}

uint64_t sub_10000BECC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = a1;
  sub_100030350(v2);
  return sub_100010514();
}

uint64_t sub_10000BF1C()
{
  uint64_t v0;
  xpc_object_t reply;
  xpc_object_t v2;

  reply = xpc_dictionary_create_reply(*(xpc_object_t *)(v0 + 104));
  if (reply)
  {
    v2 = reply;
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(v0 + 96) + 16), reply);
    swift_unknownObjectRelease(v2);
  }
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  sub_10000CEA8();
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  sub_100010D58();
  return sub_10000BD38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000BF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return StringProtocol.components<A>(separatedBy:)(a1, a2, a2, a4, a4);
}

void sub_10000BFA8(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

uint64_t sub_10000BFB0()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10000BFB8()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_10000BFD4()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

uint64_t sub_10000BFDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _s10RTCUtility9XPCObjectOwst_0(v3, a2, 1, v2);
}

uint64_t sub_10000C000()
{
  uint64_t v0;

  return _bridgeAnyObjectToAny(_:)(v0);
}

uint64_t sub_10000C00C(uint64_t a1, char a2)
{
  return sub_1000107D0(a1, a2);
}

uint64_t sub_10000C028()
{
  uint64_t v0;

  return static _SetStorage.allocate(capacity:)(v0);
}

uint64_t sub_10000C038()
{
  uint64_t v0;

  return swift_retain(v0);
}

void sub_10000C040()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10000C054()
{
  uint64_t v0;

  return Error.localizedDescription.getter(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

void sub_10000C074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 192) = v0;
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 8 * v3 + 32) = v4;
}

uint64_t sub_10000C09C()
{
  uint64_t v0;

  return _convertNSErrorToError(_:)(v0);
}

uint64_t sub_10000C0A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = JSONEncoder.init()();
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 80) = v3;
  swift_bridgeObjectRetain(v1);
  v4 = sub_10001AAC8((uint64_t *)&unk_10008F870);
  v5 = sub_10000C318();
  v6 = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 16, v4, v5);
  v8 = v7;
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = v6;
  *(_QWORD *)(v0 + 104) = v7;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  if (sub_100010EC4() <= 0x400000)
  {
    v14 = *(_QWORD *)(v0 + 72);
    static String.Encoding.utf8.getter();
    result = String.init(data:encoding:)(v6, v8, v14);
    *(_QWORD *)(v0 + 112) = result;
    *(_QWORD *)(v0 + 120) = v16;
    if (v16)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 112);
      *(_QWORD *)(v0 + 128) = v17;
      return swift_task_switch(sub_10001172C, v17, 0);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_10008E008 != -1)
      swift_once(&qword_10008E008, sub_10003AEDC);
    v9 = sub_10000F3D0();
    sub_100015718(v9, (uint64_t)qword_10008F4F0);
    v10 = sub_100021264(v6, v8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = sub_100012C5C(22);
      *(_DWORD *)v13 = 134349312;
      *(_QWORD *)(v0 + 24) = sub_100010EC4();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v13 + 4, v13 + 12);
      sub_100012C64();
      *(_WORD *)(v13 + 12) = 2050;
      *(_QWORD *)(v0 + 32) = 0x400000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v13 + 14, v13 + 22);
      sub_10000BFA8((void *)&_mh_execute_header, v11, v12, "event too large: (%{public}ld > %{public}lld", (uint8_t *)v13);
      sub_1000120F8(v13);
    }
    else
    {
      sub_100012C64();
    }

    v18 = sub_10002262C();
    v19 = sub_10000A7FC((uint64_t)&type metadata for DiskCacheError, v18);
    *v20 = 0;
    swift_willThrow(v19, v20, v21, v22, v23, v24, v25, v26);
    sub_100012C64();
    sub_1000104E8();
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

unint64_t sub_10000C318()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008EAB0;
  if (!qword_10008EAB0)
  {
    v1 = sub_100027598((uint64_t *)&unk_10008F870);
    sub_100023D98((unint64_t *)&qword_10008EAB8, type metadata accessor for EventValue, (uint64_t)&unk_10006E8F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10008EAB0);
  }
  return result;
}

uint64_t sub_10000C39C(uint64_t a1, unsigned __int8 a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t result;
  const char *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  unint64_t v58;
  _QWORD v60[4];

  v60[3] = a4;
  if (a1 < 0)
  {
    v45 = "Must take zero or more splits";
    v46 = "Swift/Collection.swift";
    v47 = 29;
    v48 = 22;
    goto LABEL_42;
  }
  v10 = swift_allocObject(&unk_100087E68, 24, 7);
  *(_QWORD *)(v10 + 16) = _swiftEmptyArrayStorage;
  v52 = v10 + 16;
  v57 = swift_allocObject(&unk_100087E90, 24, 7);
  *(_QWORD *)(v57 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v33 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v33 = 11;
    sub_100037B9C(v33 | (v11 << 16), v57, a2 & 1, v10);
    swift_bridgeObjectRelease(a6);
    v14 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain(v14);
    swift_release(v10);
    v34 = v57;
LABEL_38:
    swift_release(v34);
    return (uint64_t)v14;
  }
  v50 = v10;
  v51 = a1;
  v13 = 7;
  if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  v49 = v13 | (v12 << 16);
  v58 = 4 * v12;
  v14 = _swiftEmptyArrayStorage;
  v15 = 15;
  v16 = 15;
  v17 = 15;
  while (1)
  {
    v18 = String.subscript.getter(v15, a5, a6);
    v20 = v19;
    v60[0] = v18;
    v60[1] = v19;
    v21 = a3(v60);
    if (v6)
    {
      swift_release(v50);
      swift_release(v57);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(a6);
      return (uint64_t)v14;
    }
    v22 = v21;
    swift_bridgeObjectRelease(v20);
    if ((v22 & 1) == 0)
    {
      v15 = String.index(after:)(v15, a5, a6);
      goto LABEL_23;
    }
    v23 = (v16 >> 14 == v15 >> 14) & a2;
    if (v23 != 1)
    {
      if (v15 >> 14 < v16 >> 14)
        goto LABEL_40;
      v24 = String.subscript.getter(v16, v15, a5, a6);
      v53 = v26;
      v54 = v25;
      v55 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      {
        sub_10002014C();
        v14 = v31;
      }
      v28 = v14[2];
      if (v28 >= v14[3] >> 1)
      {
        sub_10002014C();
        v14 = v32;
      }
      v14[2] = v28 + 1;
      v29 = &v14[4 * v28];
      v29[4] = v24;
      v29[5] = v55;
      v29[6] = v54;
      v29[7] = v53;
      *(_QWORD *)v52 = v14;
    }
    v30 = String.index(after:)(v15, a5, a6);
    v15 = v30;
    *(_QWORD *)(v57 + 16) = v30;
    if ((v23 & 1) == 0 && v14[2] == v51)
      break;
    v16 = v30;
    v17 = v30;
LABEL_23:
    if (v58 == v15 >> 14)
      goto LABEL_32;
  }
  v17 = v30;
  v16 = v30;
LABEL_32:
  if (v58 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a6);
LABEL_37:
    swift_bridgeObjectRetain(v14);
    swift_release(v50);
    v34 = v57;
    goto LABEL_38;
  }
  if (v58 >= v17 >> 14)
  {
    v35 = String.subscript.getter(v17, v49, a5, a6);
    v37 = v36;
    v39 = v38;
    v41 = v40;
    swift_bridgeObjectRelease(a6);
    sub_1000206C8();
    v42 = *(_QWORD *)(*(_QWORD *)v52 + 16);
    sub_10002067C(v42);
    v14 = *(_QWORD **)v52;
    v14[2] = v42 + 1;
    v43 = &v14[4 * v42];
    v43[4] = v35;
    v43[5] = v37;
    v43[6] = v39;
    v43[7] = v41;
    *(_QWORD *)v52 = v14;
    goto LABEL_37;
  }
LABEL_40:
  v45 = "Range requires lowerBound <= upperBound";
  v46 = "Swift/Range.swift";
  v47 = 39;
  v48 = 17;
LABEL_42:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v45, v47, 2, v46, v48);
  __break(1u);
  return result;
}

uint64_t sub_10000C7E4(uint64_t *a1)
{
  uint64_t v1;

  return sub_10000C800(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t sub_10000C800(uint64_t *a1, uint64_t *a2)
{
  return sub_10000C828(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_10000C828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0) & 1;
}

uint64_t sub_10000C868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  __n128 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  char v46;

  sub_1000110BC();
  a21 = v24;
  a22 = v25;
  a20 = v22;
  v26 = *(_QWORD *)(v22 + 104);
  if (*(_BYTE *)(v26 + OBJC_IVAR____TtC13rtcreportingd7Session_haveNonRealtimeEvents) == 1
    && (sub_10005FB28(), !v27)
    && (v28 = *(_QWORD *)(v26 + OBJC_IVAR____TtC13rtcreportingd7Session_realtimeBackend),
        (*(_QWORD *)(v22 + 112) = v28) != 0))
  {
    swift_unknownObjectRetain(v28);
    v29 = (_QWORD *)sub_10000B10C();
    *(_QWORD *)(v22 + 120) = v29;
    *v29 = v22;
    v29[1] = sub_10005A9A8;
    sub_10001CFAC();
    return sub_10005CCEC(v30, v31);
  }
  else
  {
    sub_10005FB28();
    if (!v27)
      sub_10005F994();
    v46 = *(_BYTE *)(v22 + 184);
    sub_10001AAC8(&qword_10008E748);
    v33 = sub_10001AAC8(&qword_10008E750);
    v34 = (__n128 *)sub_10001D004(v33);
    v35 = sub_10001BBD0(v34, (__n128)xmmword_10006D0D0);
    sub_1000199FC(v23, v35);
    v36 = sub_10001F53C();
    v38 = sub_10005FB90(v36, (uint64_t)&type metadata for String, v37, (uint64_t)&protocol witness table for String);
    sub_1000111A4();
    v39 = (_QWORD *)sub_10005FAD4(v46);
    sub_10000A820();
    v40 = sub_10005FBB4();
    a10 = v38;
    sub_10005F8A8(v39, (uint64_t)sub_10001D810, v41, v40, (uint64_t)&a10);
    if (v38)
    {
      sub_10001CFAC();
      return swift_bridgeObjectRelease(v42);
    }
    else
    {
      sub_10005F880();
      sub_100010644();
      v43 = (_QWORD *)sub_10000B10C();
      *(_QWORD *)(v22 + 144) = v43;
      sub_10005F810(v43, (uint64_t)sub_100006D50);
      sub_10001CFAC();
      return sub_1000107D0(v44, v45);
    }
  }
}

uint64_t sub_10000CA18()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10000CA20()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 448));
}

uint64_t sub_10000CA28()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_100014F94(v1, v0, (uint64_t *)(v2 - 168));
}

uint64_t sub_10000CA38()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_10000CA50()
{
  uint64_t *v0;

  return sub_10001AAC8(v0);
}

uint64_t sub_10000CA70()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

void sub_10000CA78()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10000CA88(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  _QWORD *v17;

  v7 = sub_10001AAC8(&qword_10008E748);
  v8 = sub_10001AAC8(&qword_10008E750);
  sub_10001802C();
  v11 = v10 & ~v9;
  v12 = swift_allocObject(v7, v11 + 2 * v3, v9 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_10006D0D0;
  v13 = (_QWORD *)(v12 + v11);
  v14 = (_QWORD *)(v12 + v11 + *(int *)(v8 + 48));
  *v13 = 0x67616265726F7453;
  v13[1] = 0xEF6E6F6973726556;
  *v14 = a2;
  v14[1] = a3;
  v15 = sub_1000192F4();
  sub_10001B9BC((uint64_t)v14, v15);
  v16 = (_BYTE *)sub_1000104F0((uint64_t)v13 + v3);
  *v17 = 0xD000000000000013;
  v17[1] = 0x80000001000708B0;
  *v16 = a1;
  swift_storeEnumTagMultiPayload(v16, v15, 4);
  sub_100010644();
  return Dictionary.init(dictionaryLiteral:)(v12, &type metadata for String, v15, &protocol witness table for String);
}

uint64_t sub_10000CBA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  _QWORD *v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  sub_10005F9C8();
  v45 = v3;
  v46 = v4;
  v44 = v1;
  sub_10000CA78();
  sub_100015CBC(v2[83], v5);
  if (v0)
  {
    swift_release(v2[55]);
    sub_10000AF94();
    sub_1000104E8();
    sub_10001D7E8(v2[54], &qword_100090490);
    sub_100012D34();
    sub_10000F3D8();
    sub_1000111E4();
    sub_10000BFB0();
    sub_10001210C();
    sub_10000B0DC();
    sub_100010384();
    sub_10000BD30();
    sub_10000BDD4();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v38 = v1;
    v7 = v2[59];
    v41 = v2[58];
    v42 = v2[57];
    swift_release(v2[82]);
    v40 = sub_10001AAC8(&qword_10008E748);
    v8 = sub_10001AAC8(&qword_10008E750);
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(_QWORD *)(v9 + 72);
    v11 = *(unsigned __int8 *)(v9 + 80);
    v12 = (v11 + 32) & ~v11;
    v39 = v11 | 7;
    v13 = swift_allocObject(v40, v12 + 2 * v10, v11 | 7);
    *(_OWORD *)(v13 + 16) = xmmword_10006D0D0;
    v14 = (_QWORD *)(v13 + v12);
    v15 = (_QWORD *)(v13 + v12 + *(int *)(v8 + 48));
    sub_10005FB08();
    *v14 = v16;
    v14[1] = 0xE700000000000000;
    *v15 = 0;
    v17 = sub_1000192F4();
    sub_1000199FC((uint64_t)v15, v17);
    v18 = (_QWORD *)sub_10005F964(v13 + v12 + v10);
    *v19 = v20;
    v19[1] = 0xE700000000000000;
    *v18 = 0;
    sub_1000199FC((uint64_t)v18, v17);
    v21 = Dictionary.init(dictionaryLiteral:)(v13, &type metadata for String, v17, &protocol witness table for String);
    v22 = static Locale.current.getter(v21);
    v23 = Locale.regionCode.getter(v22);
    v25 = v24;
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v7, v42);
    if (v25)
      v26 = v23;
    else
      v26 = 16191;
    if (v25)
      v27 = v25;
    else
      v27 = 0xE200000000000000;
    v28 = swift_allocObject(v40, v12 + v10, v39);
    *(_OWORD *)(v28 + 16) = xmmword_10006D0C0;
    v29 = (_QWORD *)(v28 + v12);
    v30 = (uint64_t *)(v28 + v12 + *(int *)(v8 + 48));
    *v29 = 0x656C61636F4CLL;
    v29[1] = 0xE600000000000000;
    *v30 = v26;
    v30[1] = v27;
    swift_storeEnumTagMultiPayload(v30, v17, 0);
    v31 = (_QWORD *)Dictionary.init(dictionaryLiteral:)(v28, &type metadata for String, v17, &protocol witness table for String);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
    v43 = v21;
    sub_10005F8A8(v31, (uint64_t)sub_10001D810, v33, isUniquelyReferenced_nonNull_native, (uint64_t)&v43);
    if (v12)
    {
      return sub_1000154E4(0x8000000000000000);
    }
    else
    {
      v34 = v2[55];
      v35 = v43;
      v2[84] = v43;
      swift_bridgeObjectRelease(0x8000000000000000);
      v36 = *(_BYTE *)(v34 + 240) == 1;
      v37 = (_QWORD *)swift_task_alloc(dword_1000903DC);
      v2[85] = (uint64_t)v37;
      *v37 = v38;
      v37[1] = sub_10000B7C0;
      return sub_10000C00C(v35, v36);
    }
  }
}

uint64_t sub_10000CEA8()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10000CEB0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10000CED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_WORD *)(v10 + 12) = 2082;
  return swift_getErrorValue(v9, v11, a9);
}

uint64_t sub_10000CEE8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 296));
}

uint64_t sub_10000CEF4()
{
  return sub_10000654C();
}

uint64_t sub_10000CF00()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[42] + 32))(v0[45], v0[37], v0[41]);
}

uint64_t sub_10000CF18(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39[7];
  uint64_t v40;

  v10 = type metadata accessor for EventValue(0);
  v40 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v38 = (uint64_t *)((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v14 = (char *)&v35 - v13;
  v15 = sub_10001AAC8((uint64_t *)&unk_100090440);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001DA44((uint64_t)a1, a2, a3, v39);
  v37 = a1;
  sub_100018040();
  v36 = a3;
  swift_retain(a3);
  sub_10005FAFC();
  v18 = sub_10001AAC8(&qword_10008E750);
  while (1)
  {
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v17, 1, v18) == 1)
    {
      swift_release(v36);
      swift_bridgeObjectRelease(v37);
      sub_100051928(v39[0]);
      return swift_release(v39[6]);
    }
    v19 = (uint64_t)v17 + *(int *)(v18 + 48);
    v21 = *v17;
    v20 = v17[1];
    sub_10001B968(v19, (uint64_t)v14, type metadata accessor for EventValue);
    v23 = sub_10005F944();
    v24 = a1[2];
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
      break;
    v27 = v22;
    if (a1[3] >= v26)
    {
      if ((a4 & 1) != 0)
      {
        if ((v22 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        sub_10001AAC8((uint64_t *)&unk_10008F860);
        _NativeDictionary.copy()();
        if ((v27 & 1) != 0)
          goto LABEL_10;
      }
    }
    else
    {
      sub_1000196FC(v26, a4 & 1, type metadata accessor for EventValue, (uint64_t *)&unk_100090450);
      v28 = sub_10005F944();
      if ((v27 & 1) != (v29 & 1))
        goto LABEL_18;
      v23 = v28;
      if ((v27 & 1) != 0)
      {
LABEL_10:
        a1 = v38;
        sub_10001B93C((uint64_t)v14, (uint64_t)v38, type metadata accessor for EventValue);
        sub_10001C614((uint64_t)v14, type metadata accessor for EventValue);
        swift_bridgeObjectRelease(v20);
        sub_10004DE4C((uint64_t)a1, *(_QWORD *)(*(_QWORD *)a5 + 56) + *(_QWORD *)(v40 + 72) * v23);
        goto LABEL_14;
      }
    }
    a1 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    v30 = (_QWORD *)(a1[6] + 16 * v23);
    *v30 = v21;
    v30[1] = v20;
    sub_10001B968((uint64_t)v14, a1[7] + *(_QWORD *)(v40 + 72) * v23, type metadata accessor for EventValue);
    v31 = a1[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
      goto LABEL_17;
    a1[2] = v33;
LABEL_14:
    sub_10005FAFC();
    v18 = sub_10001AAC8(&qword_10008E750);
    a4 = 1;
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10000D204()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 312));
}

uint64_t sub_10000D20C(uint64_t a1)
{
  uint64_t v1;

  return _s10RTCUtility9XPCObjectOwst_0(v1, 1, 1, a1);
}

_QWORD *sub_10000D22C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_10000D238()
{
  uint64_t v0;

  return sub_100037D24(v0);
}

uint64_t sub_10000D254(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_10000D264(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 144) = a1;
  *(_QWORD *)(v1 + v3) = a1;
  return swift_retain(a1);
}

uint64_t sub_10000D278()
{
  return URL.init(string:)(0xD000000000000024);
}

void sub_10000D284()
{
  sub_100022D70();
}

uint64_t sub_10000D290()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_10000D29C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, _QWORD);
  uint64_t v2;

  return v1(a1, *(_QWORD *)(v2 - 208));
}

uint64_t sub_10000D2A8(uint64_t a1, uint64_t a2)
{
  return sub_100027490(a1, a2);
}

uint64_t sub_10000D2B4()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_10000D2BC()
{
  return type metadata accessor for CachedSession(0);
}

uint64_t sub_10000D2C4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_10000D2D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v2 + ((v1 + 32) & ~v1) + *(_QWORD *)(v3 + 72) * a1;
}

uint64_t sub_10000D2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(uint64_t, uint64_t))
{
  uint64_t v17;

  return a17(a14, v17);
}

uint64_t sub_10000D2F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  sub_100010644();
  v1 = sub_100058454();
  v3 = v2;
  sub_10000781C();
  v0[17] = v3;
  if (v3)
  {
    v4 = v0[16];
    v0[18] = v1;
    v5 = *(_QWORD *)(v4 + 128);
    v0[19] = v5;
    v6 = sub_10001EFF8;
  }
  else
  {
    sub_1000583DC();
    v6 = sub_100021150;
    v5 = v1;
  }
  return sub_10001808C((uint64_t)v6, v5, 0);
}

uint64_t sub_10000D36C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  int64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::String v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  BOOL v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  char v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  BOOL v60;
  BOOL v61;
  char v63;
  BOOL v64;
  BOOL v65;
  BOOL v66;
  BOOL v67;
  BOOL v68;
  char v70;
  BOOL v71;
  BOOL v72;
  char v73;
  BOOL v74;
  BOOL v75;
  BOOL v76;
  BOOL v77;
  BOOL v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  BOOL v85;
  char v87;
  BOOL v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008E080 != -1)
    swift_once(&qword_10008E080, sub_1000584B0);
  if (byte_1000973F0 == 1)
  {
    if (qword_10008E088 != -1)
      swift_once(&qword_10008E088, sub_1000584D4);
    v8 = (id)qword_1000973F8;
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v8, "stringArrayForKey:", v9);

    if (v10)
    {
      v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, &type metadata for String);

      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        v92 = a2;
        v93 = v4;
        v91 = a1;
        v95 = &_swiftEmptyArrayStorage;
        sub_10005EC28(0, v12, 0);
        v13 = v95;
        v14 = v11 + 40;
        do
        {
          v15 = String.lowercased()();
          v95 = v13;
          v17 = v13[2];
          v16 = v13[3];
          if (v17 >= v16 >> 1)
          {
            sub_10005EC28((char *)(v16 > 1), v17 + 1, 1);
            v13 = v95;
          }
          v14 += 16;
          v13[2] = v17 + 1;
          *(Swift::String *)&v13[2 * v17 + 4] = v15;
          --v12;
        }
        while (v12);
        sub_10000A820();
        a1 = v91;
        a2 = v92;
        v4 = v93;
      }
      else
      {
        sub_10000A820();
        v13 = &_swiftEmptyArrayStorage;
      }
      v18 = String.lowercased()();
      v19 = sub_100030394(v18._countAndFlagsBits, (uint64_t)v18._object, v13);
      swift_bridgeObjectRelease(v13);
      v20 = sub_10000A820();
      if ((v19 & 1) == 0)
      {
        Logger.init()(v20);
        v25 = swift_bridgeObjectRetain_n(a2, 2);
        v26 = Logger.logObject.getter(v25);
        v27 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = (uint8_t *)sub_100012C5C(12);
          v29 = (_QWORD *)swift_slowAlloc(32, -1);
          v93 = v4;
          v30 = a1;
          v31 = (uint64_t)v29;
          v95 = v29;
          *(_DWORD *)v28 = 136446210;
          swift_bridgeObjectRetain(a2);
          v94 = sub_100014F94(v30, a2, (uint64_t *)&v95);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v28 + 4, v28 + 12);
          swift_bridgeObjectRelease_n(a2, 3);
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "client %{public}s blocked by defaults", v28, 0xCu);
          swift_arrayDestroy(v31, 1);
          sub_1000120F8(v31);
          sub_1000120F8((uint64_t)v28);

          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v93);
        }
        else
        {

          swift_bridgeObjectRelease_n(a2, 2);
          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        }
        return 0;
      }
    }
  }
  v21 = 0x74696B656D6167;
  v22 = a1 == 19271 && a2 == 0xE200000000000000;
  if (v22 || (sub_100012C54(19271, 0xE200000000000000, a1, a2) & 1) != 0)
    return v21;
  v24 = a1 == 19779 && a2 == 0xE200000000000000;
  if (v24 || (sub_100012C54(19779, 0xE200000000000000, a1, a2) & 1) != 0)
  {
LABEL_26:
    sub_100012C70();
    return v21;
  }
  v32 = a1 == 17238 && a2 == 0xE200000000000000;
  if (v32 || (sub_100012C54(17238, 0xE200000000000000, a1, a2) & 1) != 0)
    goto LABEL_36;
  v21 = 0x7674656C707061;
  v33 = a1 == 22100 && a2 == 0xE200000000000000;
  if (v33 || (sub_100012C54(22100, 0xE200000000000000, a1, a2) & 1) != 0)
    return v21;
  v21 = 0x617273656E757469;
  v34 = a1 == 21065 && a2 == 0xE200000000000000;
  if (v34 || (sub_100012C54(21065, 0xE200000000000000, a1, a2) & 1) != 0)
    return v21;
  v21 = 0x6974736567677573;
  v35 = a1 == 18259 && a2 == 0xE200000000000000;
  if (v35 || (sub_100012C54(18259, 0xE200000000000000, a1, a2) & 1) != 0)
    return v21;
  if (a1 == 21580 && a2 == 0xE200000000000000)
    goto LABEL_36;
  v21 = a2;
  if ((sub_10001AB24(21580, 0xE200000000000000) & 1) != 0)
    goto LABEL_36;
  v21 = 0x796C616E6178736FLL;
  v37 = a1 == 1096307535 && a2 == 0xE400000000000000;
  if (v37 || (sub_10001AB24(1096307535, 0xE400000000000000) & 1) != 0)
    return v21;
  v38 = a1 == 0x4D41434B48 && a2 == 0xE500000000000000;
  if (v38 || (sub_10001AB24(0x4D41434B48, 0xE500000000000000) & 1) != 0)
    goto LABEL_36;
  v39 = a1 == 0x534C482D4D43 && a2 == 0xE600000000000000;
  if (v39 || (sub_10001AB24(0x534C482D4D43, 0xE600000000000000) & 1) != 0)
    goto LABEL_26;
  v40 = a1 == 0x53424152432D4D43 && a2 == 0xE800000000000000;
  if (v40 || (sub_10001AB24(0x53424152432D4D43, 0xE800000000000000) & 1) != 0)
    return 0x6964656D65726F63;
  v21 = 1835364208;
  v41 = a1 == 0x53425550564544 && a2 == 0xE700000000000000;
  if (v41 || (sub_10001AB24(0x53425550564544, 0xE700000000000000) & 1) != 0)
    return v21;
  v21 = 0x7061736F65646976;
  v42 = a1 == 0x534F45444956 && a2 == 0xE600000000000000;
  if (v42 || (sub_10001AB24(0x534F45444956, 0xE600000000000000) & 1) != 0)
    return v21;
  v21 = 0x7361656C69626F6DLL;
  v43 = a1 == 0x54455353414C424DLL && a2 == 0xE800000000000000;
  if (v43 || (sub_10001AB24(0x54455353414C424DLL, 0xE800000000000000) & 1) != 0)
    return v21;
  v21 = 0x6964756165726F63;
  v44 = a1 == 16707 && a2 == 0xE200000000000000;
  if (v44 || (sub_10001AB24(16707, 0xE200000000000000) & 1) != 0)
    return v21;
  if (a1 == 4282189 && a2 == 0xE300000000000000)
  {
LABEL_36:
    sub_10001CC58();
    return v21;
  }
  sub_10001AB24(4282189, 0xE300000000000000);
  sub_10001CC58();
  if ((v46 & 1) == 0)
  {
    v21 = 0x617261686173;
    v47 = a1 == 16979 && a2 == 0xE200000000000000;
    if (!v47 && (sub_10001AB24(16979, 0xE200000000000000) & 1) == 0)
    {
      v21 = 0x76697463616F7270;
      v48 = a1 == 20545 && a2 == 0xE200000000000000;
      if (!v48 && (sub_10001AB24(20545, 0xE200000000000000) & 1) == 0)
      {
        v21 = 0x7574696B616CLL;
        v49 = a1 == 19282 && a2 == 0xE200000000000000;
        if (!v49 && (sub_10001AB24(19282, 0xE200000000000000) & 1) == 0)
        {
          v21 = 0x73676E6977;
          v50 = a1 == 1280332353 && a2 == 0xE400000000000000;
          if (!v50 && (sub_10001AB24(1280332353, 0xE400000000000000) & 1) == 0)
          {
            v21 = 0x796F6C6C61;
            v51 = a1 == 5456969 && a2 == 0xE300000000000000;
            if (!v51 && (sub_10001AB24(5456969, 0xE300000000000000) & 1) == 0)
            {
              v21 = 0x656761726F7473;
              v52 = a1 == 1196577875 && a2 == 0xE400000000000000;
              if (!v52 && (sub_10001AB24(1196577875, 0xE400000000000000) & 1) == 0)
              {
                v53 = a1 == 21844 && a2 == 0xE200000000000000;
                if (v53 || (sub_10001AB24(21844, 0xE200000000000000) & 1) != 0)
                  return 30068;
                v21 = 0x74656C706F7264;
                v54 = a1 == 22350 && a2 == 0xE200000000000000;
                if (!v54 && (sub_10001AB24(22350, 0xE200000000000000) & 1) == 0)
                {
                  v21 = 0x7473616365726F66;
                  v55 = a1 == 18755 && a2 == 0xE200000000000000;
                  if (!v55 && (sub_10001AB24(18755, 0xE200000000000000) & 1) == 0)
                  {
                    v21 = 1952542820;
                    v56 = a1 == 1413566532 && a2 == 0xE400000000000000;
                    if (!v56 && (sub_10001AB24(1413566532, 0xE400000000000000) & 1) == 0)
                    {
                      v57 = a1 == 5524567 && a2 == 0xE300000000000000;
                      if (v57 || (sub_10001AB24(5524567, 0xE300000000000000) & 1) != 0)
                        goto LABEL_163;
                      v21 = 0x697463656C666572;
                      v58 = a1 == 21074 && a2 == 0xE200000000000000;
                      if (v58 || (sub_10001AB24(21074, 0xE200000000000000) & 1) != 0)
                        return v21;
                      v21 = 0x6461737361626D61;
                      v59 = a1 == 5264215 && a2 == 0xE300000000000000;
                      if (v59 || (sub_10001AB24(5264215, 0xE300000000000000) & 1) != 0)
                        return v21;
                      v21 = 0x6C6572656D6F68;
                      v60 = a1 == 1279611464 && a2 == 0xE400000000000000;
                      if (v60 || (sub_10001AB24(1279611464, 0xE400000000000000) & 1) != 0)
                        return v21;
                      v21 = 0x7369737361637472;
                      v61 = a1 == 0x6C6F6F74637472 && a2 == 0xE700000000000000;
                      if (v61 || (sub_10001AB24(0x6C6F6F74637472, 0xE700000000000000) & 1) != 0)
                        return v21;
                      if (a1 == 0x4C444F2D4D43 && a2 == 0xE600000000000000)
                        goto LABEL_26;
                      sub_10001AB24(0x4C444F2D4D43, 0xE600000000000000);
                      sub_100012C70();
                      if ((v63 & 1) == 0)
                      {
                        v64 = a1 == 16708 && a2 == 0xE200000000000000;
                        if (v64 || (sub_10001AB24(16708, 0xE200000000000000) & 1) != 0)
                          return 24931;
                        v21 = 0x7375626D696ELL;
                        v65 = a1 == 4473923 && a2 == 0xE300000000000000;
                        if (!v65 && (sub_10001AB24(4473923, 0xE300000000000000) & 1) == 0)
                        {
                          v21 = 7630698;
                          v66 = a1 == 5461070 && a2 == 0xE300000000000000;
                          if (!v66 && (sub_10001AB24(5461070, 0xE300000000000000) & 1) == 0)
                          {
                            v21 = 1869636978;
                            v67 = a1 == 5657156 && a2 == 0xE300000000000000;
                            if (!v67 && (sub_10001AB24(5657156, 0xE300000000000000) & 1) == 0)
                            {
                              v21 = 0x6365736172656961;
                              v68 = a1 == 4407892 && a2 == 0xE300000000000000;
                              if (!v68 && (sub_10001AB24(4407892, 0xE300000000000000) & 1) == 0)
                              {
                                v21 = 0x6B726F7769;
                                if (a1 != 5850443 || a2 != 0xE300000000000000)
                                {
                                  v70 = sub_10001B9EC(5850443, 0xE300000000000000, a1);
                                  v71 = a1 == 5457744 && a2 == 0xE300000000000000;
                                  v72 = v71;
                                  if ((v70 & 1) == 0 && !v72)
                                  {
                                    v73 = sub_10001B9EC(5457744, 0xE300000000000000, a1);
                                    v74 = a1 == 5390926 && a2 == 0xE300000000000000;
                                    v75 = v74;
                                    if ((v73 & 1) == 0
                                      && !v75
                                      && (sub_10001AB24(5390926, 0xE300000000000000) & 1) == 0)
                                    {
                                      v21 = 1952804451;
                                      v76 = a1 == 5723214 && a2 == 0xE300000000000000;
                                      if (!v76 && (sub_10001AB24(5723214, 0xE300000000000000) & 1) == 0)
                                      {
                                        v21 = 1819110755;
                                        v77 = a1 == 0x4C4D2D4D43 && a2 == 0xE500000000000000;
                                        if (!v77 && (sub_10001AB24(0x4C4D2D4D43, 0xE500000000000000) & 1) == 0)
                                        {
                                          v21 = 1802661751;
                                          v78 = a1 == 1263685463 && a2 == 0xE400000000000000;
                                          if (!v78 && (sub_10001AB24(1263685463, 0xE400000000000000) & 1) == 0)
                                          {
                                            v21 = 1700949871;
                                            v79 = a1 == 1161973583 && a2 == 0xE400000000000000;
                                            if (!v79 && (sub_10001AB24(1161973583, 0xE400000000000000) & 1) == 0)
                                            {
                                              v21 = 7368547;
                                              v80 = a1 == 5263171 && a2 == 0xE300000000000000;
                                              if (!v80 && (sub_10001AB24(5263171, 0xE300000000000000) & 1) == 0)
                                              {
                                                v81 = a1 == 21062 && a2 == 0xE200000000000000;
                                                if (v81 || (sub_10001AB24(21062, 0xE200000000000000) & 1) != 0)
                                                  return 29286;
                                                v21 = 7037805;
                                                v82 = a1 == 4932429 && a2 == 0xE300000000000000;
                                                if (!v82 && (sub_10001AB24(4932429, 0xE300000000000000) & 1) == 0)
                                                {
                                                  v21 = 7499873;
                                                  v83 = a1 == 5394497 && a2 == 0xE300000000000000;
                                                  if (!v83 && (sub_10001AB24(5394497, 0xE300000000000000) & 1) == 0)
                                                  {
                                                    v21 = 1718644067;
                                                    v84 = a1 == 0x46502D4D43 && a2 == 0xE500000000000000;
                                                    if (!v84
                                                      && (sub_10001AB24(0x46502D4D43, 0xE500000000000000) & 1) == 0)
                                                    {
                                                      v21 = 1885564259;
                                                      v85 = a1 == 0x5041432D4D43 && a2 == 0xE600000000000000;
                                                      if (!v85
                                                        && (sub_10001AB24(0x5041432D4D43, 0xE600000000000000) & 1) == 0)
                                                      {
                                                        if (a1 == 0x322D544C57 && a2 == 0xE500000000000000)
                                                        {
LABEL_163:
                                                          sub_10001B264();
                                                          return v21;
                                                        }
                                                        sub_10001AB24(0x322D544C57, 0xE500000000000000);
                                                        sub_10001B264();
                                                        if ((v87 & 1) != 0)
                                                          return v21;
                                                        v21 = 0x65736E61707865;
                                                        v88 = a1 == 1280329811 && a2 == 0xE400000000000000;
                                                        if (v88
                                                          || (sub_10001AB24(1280329811, 0xE400000000000000) & 1) != 0)
                                                        {
                                                          return v21;
                                                        }
                                                        v89 = a1 == 5522771 && a2 == 0xE300000000000000;
                                                        if (v89
                                                          || (sub_10001AB24(5522771, 0xE300000000000000) & 1) != 0)
                                                        {
                                                          return 1701863795;
                                                        }
                                                        return 0;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v21;
}

uint64_t sub_10000E2F0(uint64_t a1)
{
  int v2;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 120));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 128));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 136));
  v2 = *(unsigned __int8 *)(a1 + 176);
  if (v2 != 255)
    sub_100018DC0(*(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), v2 & 1);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 192));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 208));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 224));
}

uint64_t sub_10000E380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10000E3B8(*(char **)(v0 + 104));
  sub_10000CEB8();
  return sub_10001A1B0(v1, v2, v3);
}

char *sub_10000E3B8(char *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t *v7;
  void (*v8)(_QWORD *);
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[4];
  _BYTE v17[32];

  v2 = v1;
  v3 = (uint64_t)result;
  v4 = *(_QWORD *)&result[OBJC_IVAR____TtC13rtcreportingd7Session_hierarchyID + 8];
  if (v4)
  {
    v5 = *(_QWORD *)&result[OBJC_IVAR____TtC13rtcreportingd7Session_hierarchyID];
    sub_10000CEB0();
    v6 = sub_100034F1C((uint64_t)v17);
    v8 = sub_100035E60(v16, v5, v4);
    if (*v7)
    {
      v9 = v7;
      swift_retain(v3);
      result = (char *)sub_100038174(v9, v3);
      v10 = *(_QWORD *)(*v9 + 16);
      if (v10 < (uint64_t)result)
        goto LABEL_11;
      sub_10003A11C(result, v10);
    }
    ((void (*)(_QWORD *, _QWORD))v8)(v16, 0);
    sub_1000120B4();
    result = (char *)((uint64_t (*)(_BYTE *, _QWORD))v6)(v17, 0);
  }
  if (*(_BYTE *)(v3 + 240) != 2)
  {
LABEL_9:
    v14 = *(_QWORD *)(v3 + 192);
    v15 = *(_QWORD *)(v3 + 200);
    sub_10000CA18();
    sub_10000E4D8(v14, v15, 1);
    return (char *)sub_10000AF70();
  }
  v11 = *(_QWORD *)(v2 + 152);
  v12 = __OFSUB__(v11, 1);
  v13 = v11 - 1;
  if (!v12)
  {
    *(_QWORD *)(v2 + 152) = v13;
    goto LABEL_9;
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_10000E4D8(uint64_t a1, unint64_t a2, int a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  char *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[16];
  uint64_t v69[2];
  uint64_t v70[3];
  _BYTE v71[24];

  v4 = v3;
  v8 = *v3;
  v9 = sub_10001AAC8((uint64_t *)&unk_1000903E0);
  __chkstk_darwin(v9);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t)(v3 + 15);
  sub_10001C454((uint64_t)(v3 + 15), (uint64_t)v71, 0);
  v13 = v3[15];
  sub_100010644();
  sub_100007840();
  v14 = sub_10000EB90(a1, a2, v13);
  v16 = v15;
  swift_bridgeObjectRelease(v13);
  sub_10000781C();
  if ((v16 & 1) != 0)
  {
    if (qword_10008DFF0 != -1)
      swift_once(&qword_10008DFF0, sub_100034E9C);
    v29 = sub_10000F3D0();
    v30 = sub_100015718(v29, (uint64_t)qword_10008F040);
    v31 = sub_10000BD20(a2);
    Logger.logObject.getter(v31);
    v32 = sub_100010E94();
    if (os_log_type_enabled(v30, v32))
    {
      v33 = (uint8_t *)sub_100012C5C(12);
      v34 = sub_100012C5C(32);
      v70[0] = v34;
      *(_DWORD *)v33 = 136446210;
      sub_100010644();
      v67 = sub_100014F94(a1, a2, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v33 + 4, v33 + 12);
      sub_1000110B4(a2);
      sub_100010670((void *)&_mh_execute_header, v30, v32, "session config finished with no use count for %{public}s", v33);
      sub_10000BE60(v34);
      v35 = v34;
LABEL_10:
      sub_1000120F8(v35);
      sub_1000120F8((uint64_t)v33);
LABEL_19:

      return;
    }
LABEL_18:
    sub_10000F3C8(a2);
    goto LABEL_19;
  }
  v65 = a3;
  v17 = v14 - 1;
  if (__OFSUB__(v14, 1))
  {
    __break(1u);
  }
  else
  {
    --*((_WORD *)v4 + 64);
    if (qword_10008DFF0 == -1)
      goto LABEL_4;
  }
  swift_once(&qword_10008DFF0, sub_100034E9C);
LABEL_4:
  v18 = sub_10000F3D0();
  v19 = sub_100015718(v18, (uint64_t)qword_10008F040);
  sub_10000BD20(a2);
  v20 = sub_100019AD0();
  v21 = v19;
  Logger.logObject.getter(v20);
  v22 = sub_10000BD4C();
  v23 = sub_1000384A0(v22);
  v66 = a1;
  v63 = v8;
  v64 = v11;
  if (v23)
  {
    v24 = sub_100012C5C(26);
    v25 = sub_100012C5C(32);
    v62 = v19;
    v26 = v25;
    v70[0] = v25;
    *(_DWORD *)v24 = 136446722;
    sub_100010644();
    v67 = sub_100014F94(a1, a2, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v24 + 4, v24 + 12);
    sub_1000110B4(a2);
    *(_WORD *)(v24 + 12) = 2050;
    v67 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v24 + 14, v24 + 22);
    *(_WORD *)(v24 + 22) = 512;
    v27 = *((_WORD *)v4 + 64);
    sub_10000BDB4();
    LOWORD(v67) = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, (char *)&v67 + 2, v24 + 24, v24 + 26);
    sub_10000BDB4();
    _os_log_impl((void *)&_mh_execute_header, v21, v16, "session config finished for %{public}s with %{public}lld uses remaining. Total Active Sessions: %hu", (uint8_t *)v24, 0x1Au);
    sub_10000BE60(v26);
    v28 = v26;
    v19 = v62;
    sub_1000120F8(v28);
    sub_1000120F8(v24);
  }
  else
  {
    swift_release_n(v4, 2);
    sub_10000F3C8(a2);
  }

  if (v17 > 0)
  {
    sub_10001C454(v12, (uint64_t)v70, 33);
    sub_100010644();
    sub_10000EBD0(v17, v66, a2);
    swift_endAccess(v70);
    sub_10000781C();
    return;
  }
  sub_10001C454(v12, (uint64_t)v70, 33);
  v36 = v66;
  sub_100006250(v66, a2);
  swift_endAccess(v70);
  if ((v65 & 1) != 0)
  {
    sub_10001C454((uint64_t)(v4 + 17), (uint64_t)v70, 0);
    v37 = v4[17];
    sub_100018040();
    sub_100020584(v36, a2, v37);
    v39 = v38;
    sub_10000A828();
    v40 = sub_10000BD20(a2);
    v30 = v19;
    Logger.logObject.getter(v40);
    v41 = sub_10000BD4C();
    v42 = os_log_type_enabled(v19, v41);
    if ((v39 & 1) != 0)
    {
      if (v42)
      {
        v33 = (uint8_t *)sub_100012C5C(12);
        v43 = sub_100012C5C(32);
        v67 = v43;
        *(_DWORD *)v33 = 136446210;
        sub_100010644();
        v44 = sub_10000CA28();
        v45 = sub_1000384CC(v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v45, v46, v33 + 4, v33 + 12);
        sub_1000110B4(a2);
        sub_100010670((void *)&_mh_execute_header, v30, v41, "not evicting %{public}s: already running", v33);
        sub_10000BE60(v43);
        v35 = v43;
        goto LABEL_10;
      }
      goto LABEL_18;
    }
    if (v42)
    {
      v19 = sub_100012C5C(12);
      v53 = sub_100012C5C(32);
      v67 = v53;
      LODWORD(v19->isa) = 136446210;
      sub_100010644();
      v54 = sub_10000CA28();
      v55 = sub_1000384CC(v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, v56, (char *)&v19->isa + 4, (char *)&v19[1].isa + 4);
      sub_1000110B4(a2);
      sub_100010670((void *)&_mh_execute_header, v30, v41, "starting eviction timer for %{public}s", (uint8_t *)v19);
      sub_10000BE60(v53);
      sub_1000120F8(v53);
      sub_1000120F8((uint64_t)v19);
    }
    else
    {
      sub_10000F3C8(a2);
    }

    sub_10001C454((uint64_t)(v4 + 17), (uint64_t)&v67, 33);
    sub_100010644();
    sub_100006354(v69, v36, a2);
    swift_endAccess(&v67);
    swift_bridgeObjectRelease(v69[1]);
    v57 = type metadata accessor for TaskPriority(0);
    sub_10003847C(v57);
    v59 = sub_1000095E0(&qword_10008F248, v58, (uint64_t (*)(uint64_t))type metadata accessor for SessionCoordinator, (uint64_t)&unk_10006E428);
    v60 = (_QWORD *)sub_1000384C0((uint64_t)&unk_100087E40);
    v60[2] = v4;
    v60[3] = v59;
    v60[4] = v4;
    v60[5] = v36;
    v61 = v63;
    v60[6] = a2;
    v60[7] = v61;
    sub_100019AD0();
    sub_100010644();
    v52 = sub_10005A888((uint64_t)v19, (uint64_t)&unk_10008F260, (uint64_t)v60);
  }
  else
  {
    v47 = type metadata accessor for TaskPriority(0);
    sub_10003847C(v47);
    v49 = sub_1000095E0(&qword_10008F248, v48, (uint64_t (*)(uint64_t))type metadata accessor for SessionCoordinator, (uint64_t)&unk_10006E428);
    v50 = (_QWORD *)sub_1000384C0((uint64_t)&unk_100087E18);
    v50[2] = v4;
    v50[3] = v49;
    v50[4] = v36;
    v50[5] = a2;
    v51 = v63;
    v50[6] = v4;
    v50[7] = v51;
    sub_100019AD0();
    sub_100010644();
    v52 = sub_10002E7AC((uint64_t)v19, (uint64_t)&unk_10008F250, (uint64_t)v50);
  }
  swift_release(v52);
}

uint64_t sub_10000EB90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16) && (v4 = sub_10005F90C(a1, a2), (v5 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
  else
    return 0;
}

uint64_t sub_10000EBD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000432B8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000F074);
}

uint64_t sub_10000EBDC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  xpc_object_t v20;
  void *v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  _xpc_connection_s *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = v0 + 232;
  v2 = &unk_10006D000;
  if ((*(_BYTE *)(v0 + 458) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + 400);
    v4 = *(_QWORD *)(v3 + 112);
    v5 = *(_QWORD *)(v3 + 120);
    sub_10001C454(*(_QWORD *)(v0 + 248) + 152, v0 + 40, 33);
    swift_retain(v3);
    sub_1000111A4();
    sub_10000F2AC(v3, v4, v5);
    swift_endAccess(v0 + 40);
    sub_10000A820();
    if (qword_10008DFE0 != -1)
      swift_once(&qword_10008DFE0, sub_10002DF10);
    v6 = *(NSObject **)(v0 + 400);
    v7 = *(_QWORD *)(v0 + 248);
    v8 = sub_10000F3D0();
    sub_100015718(v8, (uint64_t)qword_10008EAE0);
    sub_100019A20();
    swift_retain(v7);
    sub_10000F490();
    v9 = sub_10000BFB8();
    v10 = sub_1000112C4(v9);
    v11 = *(_QWORD *)(v0 + 248);
    if (v10)
    {
      v12 = sub_100012C5C(22);
      v50 = sub_100012C5C(64);
      v13 = v50;
      *(_DWORD *)v12 = 136446466;
      v14 = *(_QWORD *)(v3 + 112);
      sub_10000CA18();
      *(_QWORD *)(v0 + 232) = sub_100014578(v14, v15, &v50);
      sub_10001F4F8(v0 + 232, v0 + 240, v16, v12 + 12);
      sub_10000AF70();
      sub_10001AF98();
      *(_WORD *)(v12 + 12) = 2082;
      v17 = *(_QWORD *)(v11 + 128);
      sub_1000111DC();
      *(_QWORD *)(v0 + 152) = sub_100015C14(v17, v18, &v50);
      v2 = (_QWORD *)&unk_10006D000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v12 + 14, v12 + 22);
      sub_10001B144();
      sub_100010370();
      sub_10000BFA8((void *)&_mh_execute_header, v6, (os_log_type_t)v7, "new session %{public}s started for %{public}s", (uint8_t *)v12);
      sub_10000BDEC(v13);
      v19 = v13;
      v1 = v0 + 232;
      sub_1000120F8(v19);
      sub_1000120F8(v12);

    }
    else
    {
      sub_100010370();

      sub_10001AF98();
    }
  }
  v20 = sub_100015ACC();
  *(_QWORD *)(v0 + 416) = v20;
  if (!v20)
  {
    sub_100018064(*(_QWORD *)(v0 + 400));
LABEL_18:
    v44 = sub_10001D258();
    v49 = v45;
    swift_task_dealloc(v44);
    sub_100010D58();
    sub_10000F3D8();
    sub_1000111E4();
    sub_10000BFB0();
    sub_10001210C();
    sub_10000B0DC();
    sub_100010384();
    sub_10000BD30();
    sub_10000BDD4();
    swift_task_dealloc(v49);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v21 = v20;
  v22 = v2;
  v23 = *(_BYTE *)(v0 + 458);
  v24 = *(_QWORD *)(v0 + 400);
  v25 = String.utf8CString.getter(*(_QWORD *)(v24 + 112), *(_QWORD *)(v24 + 120));
  xpc_dictionary_set_string(v21, "genID", (const char *)(v25 + 32));
  sub_10000CEA8();
  if ((v23 & 1) == 0)
    return swift_task_switch(sub_10001E5D0, *(_QWORD *)(v0 + 400), 0);
  if (qword_10008DFE0 != -1)
    swift_once(&qword_10008DFE0, sub_10002DF10);
  v26 = *(NSObject **)(v0 + 400);
  v27 = *(_QWORD *)(v0 + 248);
  v28 = sub_10000F3D0();
  sub_100015718(v28, (uint64_t)qword_10008EAE0);
  sub_100019A20();
  sub_100014530();
  sub_100015B60();
  v29 = sub_10000BFB8();
  v30 = sub_100019A28(v29);
  v31 = *(_QWORD *)(v0 + 400);
  v32 = *(_QWORD *)(v0 + 248);
  if (v30)
  {
    v33 = sub_100012C5C(22);
    v47 = sub_100012C5C(64);
    *(_DWORD *)v33 = v22[47];
    v48 = v1;
    v50 = v47;
    v46 = v31;
    v35 = *(_QWORD *)(v32 + 128);
    v34 = *(_QWORD *)(v32 + 136);
    swift_bridgeObjectRetain(v34);
    *(_QWORD *)(v0 + 216) = sub_100014F94(v35, v34, &v50);
    sub_10000BDDC(v0 + 216, v0 + 224, v36, v33 + 12);
    sub_1000120B4();
    sub_10001AF98();
    *(_WORD *)(v33 + 12) = 2082;
    v37 = *(_QWORD *)(v24 + 112);
    v38 = *(_QWORD *)(v24 + 120);
    sub_1000108E4();
    *(_QWORD *)(v0 + 224) = sub_100014F94(v37, v38, &v50);
    sub_10001F4F8(v0 + 224, v48, v39, v33 + 22);
    sub_100019460();
    swift_release(v46);
    sub_10000BFA8((void *)&_mh_execute_header, v26, (os_log_type_t)v27, "notifying %{public}s that session %{public}s is disabled", (uint8_t *)v33);
    sub_10000BDEC(v47);
    sub_1000120F8(v47);
    sub_1000120F8(v33);

  }
  else
  {
    sub_10001AF98();

    swift_release(v31);
  }
  xpc_dictionary_set_BOOL(v21, "disabled", 1);
  sub_10000D220();
  if (v41)
  {
    v42 = *(_QWORD *)(v0 + 400);
    v43 = (_xpc_connection_s *)sub_10001A190();
    sub_10001FD5C(v43);
    sub_100018064(v42);
    sub_10001A3C8();
    sub_100019ABC();
    goto LABEL_18;
  }
  result = swift_release(*(_QWORD *)(v0 + 400));
  __break(1u);
  return result;
}

void sub_10000F074(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;

  v5 = v4;
  v10 = *v4;
  v11 = sub_10001A120(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_10001AAC8(&qword_10008F268);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = sub_10001A120(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v16) = a1;
  }
  else
  {
    sub_10000F294(v16, a2, a3, a1, v20);
    swift_bridgeObjectRetain(a3);
  }
}

void sub_10000F180(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  v5 = v4;
  v10 = *v4;
  v11 = sub_10001A120(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_10001AAC8((uint64_t *)&unk_10008F880);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = sub_10001A120(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = *(_QWORD *)(v20 + 56);
    swift_release(*(_QWORD *)(v21 + 8 * v16));
    *(_QWORD *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_10000F294(v16, a2, a3, a1, v20);
    swift_bridgeObjectRetain(a3);
  }
}

void sub_10000F294(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char v7;

  sub_10001AB78(a1, a2, a3, a4, a5);
  if (v7)
    __break(1u);
  else
    sub_10001FEC4(v5, v6);
}

uint64_t sub_10000F2AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000432B8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000F180);
}

uint64_t sub_10000F2B8()
{
  uint64_t v0;
  uint64_t v1;
  _BOOL8 v2;
  _QWORD *v3;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 440) + 240) == 1;
  v3 = (_QWORD *)sub_10000D290();
  *(_QWORD *)(v0 + 592) = v3;
  *v3 = v0;
  v3[1] = sub_10000BA18;
  return ((uint64_t (*)(uint64_t, _QWORD, _BOOL8))((char *)&unk_100090180 + v1))(v0 + 112, *(_QWORD *)(v0 + 440), v2);
}

uint64_t sub_10000F360()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 352);
  if (*(_BYTE *)(v1 + 240) == 1)
    *(_BYTE *)(v1 + OBJC_IVAR____TtC13rtcreportingd7Session_haveNonRealtimeEvents) = 1;
  sub_10005F7CC();
  sub_100010D58();
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  return sub_10001B084(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000F3C0()
{
  return type metadata accessor for URL(0);
}

uint64_t sub_10000F3C8(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2);
}

uint64_t sub_10000F3D0()
{
  return type metadata accessor for Logger(0);
}

uint64_t sub_10000F3D8()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10000F3E0()
{
  uint64_t v0;

  return sub_100021264(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 384));
}

uint64_t sub_10000F3F4()
{
  return type metadata accessor for SQLiteDB.Transaction();
}

uint64_t sub_10000F404(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10000F430()
{
  uint64_t v0;

  return v0 + 488;
}

void sub_10000F444()
{
  sub_100012D78();
}

uint64_t sub_10000F46C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_10000F488()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10000F490()
{
  return Logger.logObject.getter();
}

void sub_10000F498(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_10000F4A4()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 176));
}

BOOL sub_10000F4B0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10000F4C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return sub_100014F94(v3, v4, a3);
}

uint64_t sub_10000F4CC()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100010720(v0, v1);
}

uint64_t sub_10000F4D8(int a1, uint64_t a2, _OWORD *a3, char a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, char a18, uint64_t a19)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  Swift::String v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  __n128 v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t (*v105)(_QWORD);
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v13 = v11;
  v125 = a7;
  *(_QWORD *)(v12 + 432) = a19;
  *(_QWORD *)(v12 + 440) = v13;
  *(_QWORD *)(v12 + 424) = a2;
  *(_QWORD *)(v12 + 448) = *(_QWORD *)v13;
  v16 = type metadata accessor for Locale(0);
  *(_QWORD *)(v12 + 456) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v12 + 464) = v17;
  *(_QWORD *)(v12 + 472) = sub_100007830(v17);
  v120 = type metadata accessor for SHA256(0);
  v116 = *(_QWORD *)(v120 - 8);
  v121 = sub_100007830(v116);
  *(_QWORD *)(v12 + 480) = v121;
  v18 = type metadata accessor for SHA256Digest(0);
  v118 = *(_QWORD *)(v18 - 8);
  v119 = v18;
  v117 = sub_100007830(v118);
  *(_QWORD *)(v12 + 488) = v117;
  v19 = type metadata accessor for String.Encoding(0);
  v123 = *(_QWORD *)(v19 - 8);
  v124 = v19;
  v122 = sub_100007830(v123);
  *(_QWORD *)(v12 + 496) = v122;
  v20 = type metadata accessor for UUID(0);
  v127 = *(_QWORD *)(v20 - 8);
  v128 = v20;
  *(_QWORD *)(v12 + 504) = sub_100007830(v127);
  v21 = sub_10001AAC8(&qword_100090490);
  v129 = sub_10001CF30(v21);
  *(_QWORD *)(v12 + 512) = v129;
  v22 = sub_10000BFD4();
  *(_QWORD *)(v12 + 520) = v22;
  v23 = type metadata accessor for CachedSession(0);
  *(_QWORD *)(v12 + 528) = v23;
  v126 = sub_10001CF30(v23);
  *(_QWORD *)(v12 + 536) = v126;
  v24 = sub_10000BFD4();
  *(_QWORD *)(v12 + 544) = v24;
  v25 = swift_defaultActor_initialize(v13);
  *(_QWORD *)(v12 + 552) = OBJC_IVAR____TtC13rtcreportingd7Session_creation;
  static Date.now.getter(v25);
  *(_QWORD *)(v13 + OBJC_IVAR____TtC13rtcreportingd7Session_sentEvents) = 0;
  v26 = OBJC_IVAR____TtC13rtcreportingd7Session_realtimeBackend;
  *(_QWORD *)(v12 + 560) = OBJC_IVAR____TtC13rtcreportingd7Session_realtimeBackend;
  v27 = (uint64_t *)(v13 + v26);
  *v27 = 0;
  v27[1] = 0;
  v28 = OBJC_IVAR____TtC13rtcreportingd7Session_immediateBackend;
  *(_QWORD *)(v12 + 568) = OBJC_IVAR____TtC13rtcreportingd7Session_immediateBackend;
  v29 = (_QWORD *)(v13 + v28);
  *v29 = 0;
  v29[1] = 0;
  *(_BYTE *)(v13 + OBJC_IVAR____TtC13rtcreportingd7Session_haveNonRealtimeEvents) = 0;
  *(_BYTE *)(v13 + OBJC_IVAR____TtC13rtcreportingd7Session_sendingNonRealtimeEvents) = 0;
  *(_BYTE *)(v13 + OBJC_IVAR____TtC13rtcreportingd7Session_receivedEnd) = 0;
  v30 = v13 + OBJC_IVAR____TtC13rtcreportingd7Session_user;
  *(_DWORD *)v30 = a1;
  *(_BYTE *)(v30 + 4) = 0;
  *(_QWORD *)(v13 + 184) = a2;
  v31 = *v27;
  *v27 = 0;
  v27[1] = 0;
  sub_100019A20();
  swift_unknownObjectRelease(v31);
  sub_10001D470(a19, v22, &qword_100090490);
  if (_s10RTCUtility9XPCObjectOwet_0(v22, 1, v23) == 1)
  {
    sub_10001D7E8(v22, &qword_100090490);
    v33 = (uint64_t)a6;
    if (a6)
    {
      v34 = a5;
      sub_10000CA18();
      v35._countAndFlagsBits = 46;
      v35._object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      v37 = UUID.init()(v36);
      *(_QWORD *)(v12 + 153) = UUID.uuid.getter(v37);
      *(_BYTE *)(v12 + 161) = v38;
      *(_BYTE *)(v12 + 162) = v39;
      *(_BYTE *)(v12 + 163) = v40;
      *(_BYTE *)(v12 + 164) = v41;
      *(_BYTE *)(v12 + 165) = v42;
      *(_BYTE *)(v12 + 166) = v43;
      *(_BYTE *)(v12 + 167) = v44;
      *(_BYTE *)(v12 + 168) = v45;
      v46 = sub_10005FC08();
      v48 = v47;
      v49 = Data.base64EncodedString(options:)(0);
      v50 = sub_100010720(v46, v48);
      sub_10005FA78(v50, v51, v52, v53, v54, v55, v56, v57, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125,
        v126,
        v127,
        v128);
      String.append(_:)(v49);
      sub_100019460();
      countAndFlagsBits = a5;
      object = a6;
      goto LABEL_7;
    }
    v60 = UUID.init()(v32);
    *(_QWORD *)(v12 + 169) = UUID.uuid.getter(v60);
    *(_BYTE *)(v12 + 177) = v61;
    *(_BYTE *)(v12 + 178) = v62;
    *(_BYTE *)(v12 + 179) = v63;
    *(_BYTE *)(v12 + 180) = v64;
    *(_BYTE *)(v12 + 181) = v65;
    *(_BYTE *)(v12 + 182) = v66;
    *(_BYTE *)(v12 + 183) = v67;
    *(_BYTE *)(v12 + 184) = v68;
    v69 = sub_10005FC08();
    v71 = v70;
    v72 = Data.base64EncodedString(options:)(0);
    countAndFlagsBits = v72._countAndFlagsBits;
    object = v72._object;
    v73 = sub_100010720(v69, v71);
    sub_10005FA78(v73, v74, v75, v76, v77, v78, v79, v80, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125,
      v126,
      v127,
      v128);
  }
  else
  {
    sub_10001B968(v22, v24, type metadata accessor for CachedSession);
    countAndFlagsBits = *(_QWORD *)(v24 + 48);
    object = *(void **)(v24 + 56);
    sub_1000111A4();
    sub_10001C614(v24, type metadata accessor for CachedSession);
    v33 = (uint64_t)a6;
  }
  v34 = a5;
LABEL_7:
  *(_QWORD *)(v13 + 112) = countAndFlagsBits;
  *(_QWORD *)(v13 + 120) = object;
  v81 = OBJC_IVAR____TtC13rtcreportingd7Session_hierarchyID;
  *(_QWORD *)(v12 + 576) = OBJC_IVAR____TtC13rtcreportingd7Session_hierarchyID;
  v82 = (uint64_t *)(v13 + v81);
  *v82 = v34;
  v82[1] = v33;
  if ((a18 & 1) != 0)
  {
    sub_10001D470(a19, v129, &qword_100090490);
    if (_s10RTCUtility9XPCObjectOwet_0(v129, 1, v23) == 1)
    {
      sub_10001D7E8(v129, &qword_100090490);
      if (a8)
      {
        static String.Encoding.utf8.getter(v84);
        String.data(using:allowLossyConversion:)(v122, 0, v125, a8);
        v86 = v85;
        sub_10000A828();
        (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v122, v124);
        if (v86 >> 60 == 15)
        {
          *(_OWORD *)(v12 + 304) = *a3;
          sub_10001EFD0(v12 + 304);
          *(_OWORD *)(v12 + 320) = a3[1];
          sub_10001EFD0(v12 + 320);
          *(_OWORD *)(v12 + 336) = a3[2];
          sub_100007884();
          v87 = sub_10005F650();
          v88 = sub_10000A7FC((uint64_t)&unk_100089D40, v87);
          *v89 = 0;
          swift_willThrow(v88, v89, v90, v91, v92, v93, v94, v95);
          swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 440) + 120));
          swift_release(*(_QWORD *)(*(_QWORD *)(v12 + 440) + 184));
          v96 = *(_QWORD *)(v12 + 568);
          v97 = *(_QWORD *)(v12 + 560);
          v98 = *(_QWORD *)(v12 + 440);
          v99 = *(_QWORD *)(v12 + 432);
          v100 = v98 + *(_QWORD *)(v12 + 576);
          v101 = sub_1000112E0();
          sub_10005F8EC(v101);
          swift_unknownObjectRelease(*(_QWORD *)(v98 + v97));
          swift_unknownObjectRelease(*(_QWORD *)(v98 + v96));
          swift_bridgeObjectRelease(*(_QWORD *)(v100 + 8));
          swift_defaultActor_destroy(v98);
          sub_10001B380();
          sub_10001D7E8(v99, &qword_100090490);
          v102 = sub_10001BAB8();
          swift_deallocPartialClassInstance(v102);
          swift_task_dealloc(*(_QWORD *)(v12 + 544));
          sub_10000F3D8();
          sub_1000111E4();
          sub_10000BFB0();
          sub_10001210C();
          sub_10000B0DC();
          sub_100010384();
          sub_10000BD30();
          sub_10000BDD4();
          sub_10005F824();
          __asm { BR              X0 }
        }
        sub_100023D98((unint64_t *)&unk_1000904B0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
        dispatch thunk of HashFunction.init()();
        __asm { BR              X10 }
      }
      a17 = (double)arc4random_uniform(0x2710u) / 10000.0;
    }
    else
    {
      sub_10000A828();
      sub_10001B968(v129, v126, type metadata accessor for CachedSession);
      a17 = *(double *)(v126 + 64);
      v104 = sub_100014638();
      sub_10001C614(v104, v105);
    }
  }
  else
  {
    swift_bridgeObjectRelease(a8);
  }
  *(double *)(v13 + 128) = a17;
  *(_QWORD *)(v13 + 136) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v13 + 144) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v13 + 152) = 0;
  *(_QWORD *)(v13 + 160) = 1701736302;
  *(_QWORD *)(v13 + 168) = 0xE400000000000000;
  *(_BYTE *)(v13 + 176) = 2;
  v106 = *a3;
  v107 = a3[1];
  *(_OWORD *)(v12 + 288) = *a3;
  *(_OWORD *)(v12 + 352) = v107;
  v108 = a3[2];
  *(_OWORD *)(v12 + 368) = v108;
  *(_OWORD *)(v13 + 208) = v107;
  *(_OWORD *)(v13 + 224) = v108;
  *(_OWORD *)(v13 + 192) = v106;
  *(_BYTE *)(v13 + 240) = a4;
  sub_10001E08C(v12 + 288);
  sub_10000A8E4();
  sub_10000BE30();
  sub_100010644();
  v109 = (_QWORD *)sub_10000B10C();
  *(_QWORD *)(v12 + 584) = v109;
  *v109 = v12;
  v109[1] = sub_10000B890;
  sub_10005F824();
  return sub_100007D0C(v110, v111, v112, v113);
}

uint64_t sub_10000FE64(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    if (a2)
    {
      v3 = result;
      if (a2 <= 14)
      {
        return Data.InlineData.init(_:)(result, result + a2);
      }
      else
      {
        v4 = type metadata accessor for __DataStorage(0);
        swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
        __DataStorage.init(bytes:length:)(v3, a2);
        if ((unint64_t)a2 >= 0x7FFFFFFF)
        {
          v5 = type metadata accessor for Data.RangeReference(0);
          result = swift_allocObject(v5, 32, 7);
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = a2;
        }
        else
        {
          return a2 << 32;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_10000FF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, char a18, uint64_t a19)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char **p_type;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  unint64_t v55;
  Swift::String v56;
  char *v57;

  v12 = *(_QWORD *)(v11 + 160);
  *(_QWORD *)(v11 + 16) = v12;
  v13 = *(void **)(v11 + 224);
  v14 = *(_QWORD *)(v11 + 192);
  v15 = *(_QWORD *)(v11 + 200);
  v16 = *(_QWORD *)(v11 + 176);
  v17 = *(_QWORD *)(v11 + 184);
  v18 = *(_QWORD *)(v11 + 168);
  *(_QWORD *)(v11 + 24) = v18;
  *(_QWORD *)(v11 + 32) = v16;
  *(_QWORD *)(v11 + 40) = v17;
  *(_QWORD *)(v11 + 48) = v14;
  *(_QWORD *)(v11 + 56) = v15;
  if (!v13)
  {
    sub_10000B0D4();
    sub_1000108E4();
    sub_10000CEB0();
    v38 = 0;
    goto LABEL_28;
  }
  v19 = *(_QWORD *)(v11 + 208);
  v54 = 0;
  v55 = 0xE000000000000000;
  if (v19 < 0)
  {
LABEL_32:
    __break(1u);
    return;
  }
  if (v19)
  {
    swift_bridgeObjectRetain(v18);
    sub_1000108E4();
    sub_10000CEB0();
    v20 = 0;
    p_type = &stru_10008CFF0.type;
    v57 = (char *)&type metadata for Any + 8;
    do
    {
      if (v20 == v19)
      {
        __break(1u);
        goto LABEL_32;
      }
      v22 = *(NSObject **)(v11 + 256);
      sub_100007380(*(_QWORD *)(v11 + 216), (uint64_t)v13, v20);
      if (v24)
      {
        v25 = v23;
        v26 = (unint64_t)v24;
        v27 = v54 & 0xFFFFFFFFFFFFLL;
        if ((v55 & 0x2000000000000000) != 0)
          v27 = HIBYTE(v55) & 0xF;
        if (v27)
        {
          v56._countAndFlagsBits = 46;
          v56._object = (void *)0xE100000000000000;
          v28._countAndFlagsBits = v23;
          v28._object = v24;
          String.append(_:)(v28);
          sub_100019460();
          String.append(_:)(v56);
          sub_100019460();
        }
        else
        {
          swift_bridgeObjectRelease(v55);
          v54 = v25;
          v55 = v26;
        }
      }
      else
      {
        if (p_type[510] != (char *)-1)
          swift_once(&qword_10008DFF0, sub_100034E9C);
        v29 = sub_10000F3D0();
        sub_100015718(v29, (uint64_t)qword_10008F040);
        v30 = sub_1000384B0();
        Logger.logObject.getter(v30);
        v31 = sub_100010E94();
        if (os_log_type_enabled(v22, v31))
        {
          v33 = *(_QWORD *)(v11 + 208);
          v32 = *(_QWORD *)(v11 + 216);
          v34 = sub_100012C5C(22);
          v35 = p_type;
          v36 = sub_100012C5C(32);
          v56._countAndFlagsBits = v36;
          *(_DWORD *)v34 = 136315394;
          sub_10000CA18();
          *(_QWORD *)(v34 + 4) = sub_100014F94(v32, (unint64_t)v13, &v56._countAndFlagsBits);
          sub_1000110B4((uint64_t)v13);
          *(_WORD *)(v34 + 12) = 2048;
          sub_10000AF70();
          *(_QWORD *)(v34 + 14) = v33;
          sub_10000AF70();
          _os_log_impl((void *)&_mh_execute_header, v22, v31, "gap in hierarchy: %s level %ld", (uint8_t *)v34, 0x16u);
          swift_arrayDestroy(v36, 1);
          v37 = v36;
          p_type = v35;
          sub_1000120F8(v37);
          sub_1000120F8(v34);

        }
        else
        {

          sub_10000BE04();
        }
      }
      ++v20;
      v19 = *(_QWORD *)(v11 + 208);
    }
    while (v20 != v19);
    v38 = v54;
    v13 = (void *)v55;
    if (!v54)
      goto LABEL_22;
  }
  else
  {
    swift_bridgeObjectRetain(v18);
    sub_1000108E4();
    sub_10000CEB0();
    v38 = 0;
    v13 = (void *)0xE000000000000000;
LABEL_22:
    if (v13 == (void *)0xE000000000000000)
    {
      v39 = 0xE000000000000000;
LABEL_26:
      swift_bridgeObjectRelease(v39);
      v38 = 0;
      v13 = 0;
      goto LABEL_27;
    }
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v38, v13, 0, 0xE000000000000000, 0) & 1) != 0)
  {
    v39 = (unint64_t)v13;
    goto LABEL_26;
  }
LABEL_27:
  v12 = *(_QWORD *)(v11 + 160);
  v18 = *(_QWORD *)(v11 + 168);
LABEL_28:
  if ((sub_10003607C(v12, v18) & 1) != 0)
  {
    v41 = *(_QWORD *)(v11 + 256);
    v40 = *(_QWORD *)(v11 + 264);
    v42 = sub_10000D2BC();
    _s10RTCUtility9XPCObjectOwst_0(v40, 1, 1, v42);
    v43 = type metadata accessor for Session(0);
    sub_10001B14C(v43);
    v44 = dword_10009048C;
    swift_retain(v41);
    sub_1000108E4();
    v45 = (_QWORD *)swift_task_alloc(v44);
    *(_QWORD *)(v11 + 272) = v45;
    *v45 = v11;
    v45[1] = sub_100007324;
    sub_10000F4D8(*(_DWORD *)(v11 + 304), *(_QWORD *)(v11 + 256), (_OWORD *)(v11 + 16), *(_BYTE *)(v11 + 309), v38, v13, *(_QWORD *)(v11 + 232), *(_QWORD *)(v11 + 240), v46, v47, v48, v49, v50, v51, v52, v53, a17, a18, a19);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v11 + 200));
    sub_10000A828();
    sub_10000781C();
    sub_10000AF70();
    sub_10001FEA0();
    (*(void (**)(_QWORD))(v11 + 8))(0);
  }
}

uint64_t sub_10001030C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t type metadata accessor for CachedSession(uint64_t a1)
{
  return sub_10001030C(a1, qword_100090388, (uint64_t)&nominal type descriptor for CachedSession);
}

uint64_t type metadata accessor for Session(uint64_t a1)
{
  return sub_10001030C(a1, qword_100090228, (uint64_t)&nominal type descriptor for Session);
}

uint64_t sub_100010364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005DB50);
}

uint64_t sub_100010370()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100010378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2, a7, 25, a9, a10, a11);
}

uint64_t sub_100010384()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10001038C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 16))(v3, v1 + v2);
}

uint64_t sub_10001039C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return Dictionary.init(dictionaryLiteral:)(v3, v4, a3, v5);
}

uint64_t sub_1000103AC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[3];
  v0[5] = *(_QWORD *)(v0[4] + 112);
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_1000103BC(uint64_t a1, uint64_t a2)
{
  return sub_10003BFDC(a1, a2);
}

void sub_1000103D8()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_1000103F4@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

unint64_t sub_1000103FC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10001A120(v0, v1);
}

uint64_t sub_100010408()
{
  return type metadata accessor for Client();
}

uint64_t sub_100010410(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_100010424()
{
  uint64_t v0;

  return dispatch thunk of Actor.unownedExecutor.getter(v0);
}

uint64_t sub_100010430(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33, 0);
}

uint64_t sub_10001043C(int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  *(_QWORD *)(v9 + 248) = v18;
  *(_QWORD *)(v9 + 256) = v8;
  *(_BYTE *)(v9 + 310) = v19;
  *(_QWORD *)(v9 + 240) = v17;
  *(_OWORD *)(v9 + 208) = v15;
  *(_OWORD *)(v9 + 224) = v16;
  *(_QWORD *)(v9 + 192) = a7;
  *(_QWORD *)(v9 + 200) = a8;
  *(_QWORD *)(v9 + 176) = a5;
  *(_QWORD *)(v9 + 184) = a6;
  *(_QWORD *)(v9 + 160) = a3;
  *(_QWORD *)(v9 + 168) = a4;
  *(_BYTE *)(v9 + 309) = a2;
  *(_DWORD *)(v9 + 304) = a1;
  v10 = sub_10001AAC8(&qword_100090490);
  *(_QWORD *)(v9 + 264) = sub_100007830(*(_QWORD *)(v10 - 8));
  sub_10000F3E8();
  return swift_task_switch(v11, v12, v13);
}

uint64_t sub_1000104B4()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  sub_100010720(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_10000CEA8();
  sub_10000F3D8();
  v1 = (uint64_t (*)(void))sub_10001C704();
  return sub_100012CC0(v1);
}

uint64_t sub_1000104E8()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000104F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return a1 + *(int *)(v1 + 48);
}

uint64_t sub_1000104FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000558C(a1, a2, a3, 1);
}

uint64_t sub_100010504()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100010514()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_100010540()
{
  uint64_t v0;

  return Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10001054C(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  return swift_bridgeObjectRetain(*(_QWORD *)(v2 + 56));
}

id sub_10001055C(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 0);
}

unint64_t sub_100010584()
{
  return 0xD000000000000011;
}

uint64_t sub_100010598()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
}

BOOL sub_1000105A0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000105B0()
{
  uint64_t v0;

  return swift_defaultActor_initialize(v0);
}

uint64_t sub_1000105E4()
{
  uint64_t v0;
  uint64_t v1;

  return swift_retain(*(_QWORD *)(*(_QWORD *)(v0 + 48) + 8 * v1));
}

uint64_t sub_1000105F4()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_100010600()
{
  return 0x7365707974;
}

uint64_t sub_100010614()
{
  return sub_100007B28();
}

xpc_object_t sub_100010630(uint64_t a1)
{
  void *v1;

  return xpc_dictionary_get_value(v1, (const char *)(a1 + 32));
}

uint64_t sub_10001063C(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_100010644()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001064C()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100014F94(*(_QWORD *)(v0 + 440), v1, (uint64_t *)(v0 + 736));
}

void sub_100010670(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t sub_100010678()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100010680()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100010688(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_100015718(a1, a2);
  return Logger.logObject.getter(v2);
}

uint64_t sub_10001069C(uint64_t a1, uint64_t a2)
{
  return sub_10002102C(a1, a2);
}

NSDictionary sub_1000106CC()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_1000106D8(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(a1, *(_QWORD *)(v1 - 120));
}

uint64_t sub_1000106E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_1000106FC()
{
  return Logger.init()();
}

uint64_t sub_100010704()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_10001070C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 112))(v1, v2, v0);
}

uint64_t sub_100010720(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_100010764()
{
  sub_10001A444();
}

uint64_t sub_100010778(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 + 104) = a2;
  *(_QWORD *)(v4 + 112) = v3;
  *(_BYTE *)(v4 + 176) = a3;
  *(_QWORD *)(v4 + 96) = a1;
  *(_QWORD *)(v4 + 120) = *v3;
  v5 = sub_10001AAC8(&qword_10008FEE0);
  *(_QWORD *)(v4 + 128) = sub_10001CF30(v5);
  *(_QWORD *)(v4 + 136) = sub_10000BFD4();
  sub_10000F3E8();
  return sub_10001A1B0(v6, v7, v8);
}

uint64_t sub_1000107D0(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v3 + 464) = a2;
  *(_QWORD *)(v3 + 344) = a1;
  *(_QWORD *)(v3 + 352) = v2;
  *(_QWORD *)(v3 + 360) = *v2;
  v4 = sub_10001AAC8((uint64_t *)&unk_1000903E0);
  *(_QWORD *)(v3 + 368) = sub_100007830(*(_QWORD *)(v4 - 8));
  v5 = sub_10001AAC8(&qword_10008E740);
  *(_QWORD *)(v3 + 376) = sub_10001CF30(v5);
  *(_QWORD *)(v3 + 384) = sub_10000BFD4();
  *(_QWORD *)(v3 + 392) = sub_10000BFD4();
  *(_QWORD *)(v3 + 400) = sub_10000BFD4();
  sub_10000F3E8();
  return sub_10001A1B0(v6, v7, v8);
}

void sub_100010860()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2082;
}

unint64_t sub_100010870(uint64_t a1)
{
  uint64_t v1;

  return sub_10001A120(a1, v1);
}

uint64_t sub_100010878(uint64_t a1, uint64_t a2, ...)
{
  unint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  return sub_100014F94(v3, v2, (uint64_t *)va);
}

uint64_t sub_100010888()
{
  uint64_t v0;

  return sub_100033A4C(*(_QWORD *)(v0 - 72), *(_QWORD *)(v0 - 232));
}

void sub_1000108A8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

_QWORD *sub_1000108B8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 232) = *(_QWORD *)(v1 + 128);
  return sub_100005400(v0);
}

uint64_t sub_1000108C8(uint64_t a1)
{
  uint64_t v1;

  return _s10RTCUtility9XPCObjectOwet_0(a1, 1, v1);
}

BOOL sub_1000108D4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000108E4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100010900()
{
  uint64_t v0;
  uint64_t v1;

  *(_WORD *)(v1 + 12) = 2082;
  return v0;
}

void sub_100010918()
{
  sub_100012D78();
}

BOOL sub_100010924(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10001092C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_100010978(void *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  xpc_type_t type;
  uint64_t ObjectType;
  uint64_t v8;
  _BYTE v9[24];

  swift_beginAccess(v1 + 24, v9, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v1 + 24);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(v1 + 32);
    type = xpc_get_type(a1);
    ObjectType = swift_getObjectType(v4);
    v8 = 16;
    if (type == (xpc_type_t)&_xpc_type_error)
      v8 = 8;
    (*(void (**)(void *, uint64_t, uint64_t))(v5 + v8))(a1, ObjectType, v5);
    return swift_unknownObjectRelease(v4);
  }
  return result;
}

void sub_100010A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  os_log_type_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = v0;
  sub_10001AAC8((uint64_t *)&unk_1000903E0);
  sub_100012C34();
  __chkstk_darwin(v2);
  sub_10000BE50();
  v5 = v4 - v3;
  sub_10001AAC8(&qword_10008FEE0);
  sub_100012C34();
  __chkstk_darwin(v6);
  sub_10000BE50();
  v9 = (uint64_t *)(v8 - v7);
  v10 = sub_10001A190();
  v11 = XPCMessage.init(fromXPC:)(v10);
  if (v11)
  {
    v13 = (void *)v11;
    v14 = v12;
    swift_unknownObjectRetain(v11);
    v15 = (uint64_t *)MessageKeys.sessionID.unsafeMutableAddressor();
    v16 = *v15;
    v17 = v15[1];
    sub_1000108E4();
    RTCXPCDictionary.subscript.getter(v16, v17, v13, (uint64_t)v9);
    sub_10001A3C8();
    sub_100019460();
    v18 = sub_100012114();
    v19 = sub_100030374((uint64_t)v9);
    if ((_DWORD)v19 == 1)
    {
      sub_10001C5D0(v19, &qword_10008FEE0);
    }
    else if (swift_getEnumCaseMultiPayload(v9, v18) == 8)
    {
      v30 = v9[1];
      if (v14 != 1)
      {
        v34 = *v9;
        v35 = sub_100030348();
        sub_10000D20C(v35);
        v32 = sub_100018E5C((uint64_t)&unk_100087640, 65);
        *(_QWORD *)(v32 + 16) = 0;
        *(_QWORD *)(v32 + 24) = 0;
        *(_QWORD *)(v32 + 32) = v1;
        *(_QWORD *)(v32 + 40) = v34;
        *(_QWORD *)(v32 + 48) = v30;
        *(_QWORD *)(v32 + 56) = v13;
        *(_BYTE *)(v32 + 64) = v14;
        sub_10001A190();
        sub_100014530();
        v33 = &unk_10008EBE8;
        goto LABEL_14;
      }
      sub_10000A820();
    }
    else
    {
      sub_100030380();
    }
    v31 = sub_100030348();
    sub_10000D20C(v31);
    v32 = sub_100018E5C((uint64_t)&unk_100087618, 49);
    *(_QWORD *)(v32 + 16) = 0;
    *(_QWORD *)(v32 + 24) = 0;
    *(_QWORD *)(v32 + 32) = v1;
    *(_QWORD *)(v32 + 40) = v13;
    *(_BYTE *)(v32 + 48) = v14;
    sub_10001A190();
    sub_100014530();
    v33 = &unk_10008EBD8;
LABEL_14:
    sub_10002E7AC(v5, (uint64_t)v33, v32);
    sub_10001A3C8();
    sub_1000104E8();
    return;
  }
  if (qword_10008DFE0 != -1)
    swift_once(&qword_10008DFE0, sub_10002DF10);
  v20 = sub_10000F3D0();
  v21 = (void *)sub_100015718(v20, (uint64_t)qword_10008EAE0);
  v22 = sub_100014530();
  Logger.logObject.getter(v22);
  v23 = sub_100010E94();
  if (sub_10001CF9C(v23))
  {
    v24 = (_DWORD *)sub_100012C5C(12);
    v25 = sub_100012C5C(32);
    v37 = v25;
    *v24 = 136446210;
    v26 = *(_QWORD *)(v1 + 128);
    sub_1000111DC();
    v36 = sub_100015C14(v26, v27, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v24 + 1, v24 + 3);
    sub_1000104E8();
    sub_10001B144();
    sub_10000AFA4((void *)&_mh_execute_header, v28, v29, "received invalid XPC message from %{public}s");
    sub_10000BE60(v25);
    sub_1000120F8(v25);
    sub_1000120F8((uint64_t)v24);

  }
  else
  {

    swift_release(v1);
  }
}

void sub_100010D0C(uint64_t a1, _DWORD *a2)
{
  int v2;

  *a2 = v2;
}

uint64_t sub_100010D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11, 2, a4, 36, 2, a7, 17);
}

uint64_t sub_100010D58()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_100010D60()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000229EC(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
}

uint64_t sub_100010D84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 168) + 8))(v0, v1);
}

uint64_t sub_100010D98()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_100010DA4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void sub_100010DBC(uint64_t a1@<X8>)
{
  Hasher._combine(_:)(a1 + 1);
}

uint64_t sub_100010DC8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100010DDC()
{
  return 0x746E65696C63;
}

void sub_100010DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10004A588(a1, a2, v2);
}

void sub_100010E04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  _s10RTCUtility9XPCObjectOwst_0(v2, a2, 1, v3);
  sub_10002DAA8(v2, v4);
}

void sub_100010E2C()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_100010E40()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_100010E4C(uint64_t a1)
{
  uint64_t v1;

  return _s10RTCUtility9XPCObjectOwet_0(v1, 1, a1);
}

uint64_t sub_100010E70()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 424));
}

uint64_t sub_100010E94()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_100010E9C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100010EC4()
{
  uint64_t v0;
  uint64_t v1;

  return Data.count.getter(v1, v0);
}

uint64_t sub_100010ED0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 360));
}

unint64_t sub_100010ED8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10001A120(v1, v0);
}

uint64_t sub_100010EE4(uint64_t a1)
{
  uint64_t v1;

  return _s10RTCUtility9XPCObjectOwst_0(a1, 1, 1, v1);
}

uint64_t sub_100010EF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 232) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 232, v2 + 240, v1, v3);
}

uint64_t sub_100010F10()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 448))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 328));
}

void *MessageKeys.sessionID.unsafeMutableAddressor()
{
  return &static MessageKeys.sessionID;
}

uint64_t XPCMessage.init(fromXPC:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int64 *v5;
  void *v6;
  id v7;
  uint64_t v8;

  sub_10001AAC8(&qword_10008FEE0);
  sub_100012C34();
  __chkstk_darwin(v2);
  sub_10000BE50();
  v5 = (Swift::Int64 *)(v4 - v3);
  swift_getObjectType(a1);
  if (OS_xpc_object.type()()._rawValue == &_xpc_type_dictionary)
  {
    v6 = (void *)swift_unknownObjectRetain(a1);
    v7 = xpc_dictionary_get_value(v6, "type");
    XPCObject.init(_:)(v7, (uint64_t)v5);
    sub_100019ABC();
    v8 = sub_100012114();
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v5, 1, v8) == 1)
    {
      sub_100019ABC();
      sub_100062700((uint64_t)v5);
      return 0;
    }
    if (swift_getEnumCaseMultiPayload(v5, v8) != 3)
    {
      sub_100019ABC();
      sub_10002FCCC((uint64_t)v5);
      return 0;
    }
    if (XPCMessage.MessageType.init(rawValue:)(*v5).value != RTCUtility_XPCMessage_MessageType_unknownDefault)
      return a1;
  }
  sub_100019ABC();
  return 0;
}

Swift::OpaquePointer __swiftcall OS_xpc_object.type()()
{
  void *v0;

  return (Swift::OpaquePointer)xpc_get_type(v0);
}

RTCUtility::XPCMessage::MessageType_optional __swiftcall XPCMessage.MessageType.init(rawValue:)(Swift::Int64 rawValue)
{
  if ((unint64_t)rawValue >= 5)
    LOBYTE(rawValue) = 5;
  return (RTCUtility::XPCMessage::MessageType_optional)rawValue;
}

uint64_t sub_10001106C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  v5 = type metadata accessor for String.Encoding(0);
  v4[9] = sub_1000110F4(v5);
  sub_10000F3E8();
  return sub_100010514();
}

void sub_1000110AC()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_1000110B4(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3);
}

uint64_t sub_1000110F4(uint64_t a1)
{
  return swift_task_alloc((*(_QWORD *)(*(_QWORD *)(a1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10001111C()
{
  uint64_t v0;

  return sub_100015060(*(_QWORD **)(v0 + 232));
}

uint64_t sub_100011124()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_100011134(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100011160@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_10001116C()
{
  return swift_task_alloc(80);
}

uint64_t sub_100011178()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_100011180()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100011188(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 736) = a1;
  *(_WORD *)v2 = 514;
  *(_BYTE *)(v2 + 2) = 34;
  return swift_release(v3);
}

uint64_t sub_1000111A4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000111C0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000111DC()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000111E4()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_1000111EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_100033A4C(v2, v1 + *(int *)(a1 + 48));
}

uint64_t sub_100011200()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_100011208(uint64_t a1)
{
  uint64_t v1;

  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = v1;
  return swift_retain(v1);
}

uint64_t sub_10001121C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  return swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(a10 + 48) + 16 * v10 + 8));
}

NSArray sub_100011230()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t sub_10001123C()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v1 - 104, v0);
}

BOOL sub_100011250(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100011260(uint64_t (*a1)(void))
{
  return a1();
}

id sub_100011270()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  return objc_msgSend(v0, *(SEL *)(v2 + 3744), v1);
}

void sub_100011280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a3);
  v5 = sub_10001BAB8();
  v4(v5);
  swift_unknownObjectRelease(a3);
  sub_10000AF64();
}

BOOL sub_1000112C4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000112D4()
{
  uint64_t v0;

  return sub_100037D60(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 256));
}

uint64_t sub_1000112E0()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_1000112E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10005B6DC(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_1000112F0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_100011314(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_10001BE64(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100011320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_10000AF58();
  sub_10001CCC4(90, v2);
  if (v0)
  {
    v3 = (uint64_t (*)(void))sub_10001B3C4();
  }
  else
  {
    sub_100011380(*(__int128 **)(v1 + 24), *(_QWORD **)(v1 + 16));
    sub_10000CEA8();
    v3 = (uint64_t (*)(void))sub_10001C704();
  }
  return sub_10001A1E4(v3);
}

uint64_t sub_100011380@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t inited;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v11[152];
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v5 = sub_10001AAC8(&qword_10008E4B0);
  inited = swift_initStackObject(v5, v11);
  v8 = a1[1];
  v14 = *a1;
  v7 = v14;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = &off_1000861A0;
  *(_OWORD *)(inited + 16) = xmmword_10006D1A0;
  *(_OWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = &off_1000861A0;
  *(_OWORD *)(inited + 72) = v8;
  v12 = a1[2];
  v9 = v12;
  v13 = v8;
  *(_QWORD *)(inited + 136) = &type metadata for String;
  *(_QWORD *)(inited + 144) = &off_1000861A0;
  *(_OWORD *)(inited + 112) = v9;
  sub_10001E08C((uint64_t)&v14);
  sub_10001E08C((uint64_t)&v13);
  sub_10001E08C((uint64_t)&v12);
  sub_100011BCC(inited);
  swift_setDeallocating(inited);
  if (v2)
    return sub_100011B7C();
  sub_100011B7C();
  return sub_100011510(a2);
}

uint64_t sub_100011510@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;

  result = sub_100011A74();
  if (!v1)
  {
    if (result)
    {
      sub_1000115FC(result, a1);
      v5 = sub_10001C6F4();
      sub_10001063C(v5);
      if (v2)
      {
        while (1)
        {
          v8 = sub_10001C6F4();
          sub_10001063C(v8);
        }
      }
      return sub_10000BE48();
    }
    else
    {
      v6 = sub_1000225F0();
      sub_10000A7FC((uint64_t)&unk_100086348, v6);
      *v7 = 0;
      return sub_1000199C4();
    }
  }
  return result;
}

uint64_t sub_1000115FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  sqlite3_int64 v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = swift_retain(a1);
  sub_1000116BC(v4, 0);
  if (v6)
  {
    v7 = v5;
    v8 = v6;
    v9 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 16), 1);
    v10 = sub_10001AAC8(&qword_10008F610);
    *a2 = v7;
    a2[1] = v8;
    Date.init(timeIntervalSince1970:)((double)v9);
    return _s10RTCUtility9XPCObjectOwst_0((uint64_t)a2, 0, 1, v10);
  }
  else
  {
    v12 = sub_10002262C();
    v13 = sub_10000A7FC((uint64_t)&type metadata for DiskCacheError, v12);
    *v14 = 0;
    return swift_willThrow(v13, v14, v15, v16, v17, v18, v19, v20);
  }
}

void sub_1000116BC(uint64_t a1, uint64_t a2)
{
  const unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return;
  }
  v2 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 16), a2);
  if (v2)
    String.init(cString:)(v2, v3, v4, v5, v6, v7);
  sub_1000104E8();
  sub_10000AF64();
}

uint64_t sub_10001172C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v1 = v0[11];
  sub_10000AF58();
  v3 = sub_1000117C8(0xD00000000000003BLL, v2);
  if (v1)
  {
    v0[17] = v1;
    v8 = v0[8];
    v7 = sub_10003BF84;
  }
  else
  {
    sub_100011974(v3, v0[5], v0[6], v0[7], v0[14], v0[15]);
    v5 = v0[15];
    v6 = v0[8];
    sub_10000CEA8();
    swift_bridgeObjectRelease(v5);
    v7 = sub_1000104B4;
    v8 = v6;
  }
  return sub_10001B170((uint64_t)v7, v8, 0);
}

uint64_t sub_1000117C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  sqlite3_stmt *v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  sqlite3_stmt *v15;

  if ((*(_BYTE *)(*(_QWORD *)(v2 + 112) + 24) & 1) != 0)
  {
    v3 = sub_1000225F0();
    sub_10000A7FC((uint64_t)&unk_100086348, v3);
    *v4 = 3;
  }
  else
  {
    v15 = 0;
    v5 = String.utf8CString.getter(a1, a2);
    swift_retain(v2);
    v6 = sub_100011180();
    v7 = sub_1000118E4(v6, v2, v5, &v15);
    sub_10000BE48();
    v8 = v15;
    if (v15 && !v7)
    {
      v9 = type metadata accessor for SQLiteDB.Statement();
      result = sub_100018E64(v9);
      *(_BYTE *)(result + 24) = 0;
      *(_QWORD *)(result + 16) = v8;
      return result;
    }
    v11 = sub_1000225B4();
    v12 = sub_10000A7FC((uint64_t)&unk_1000863C0, v11);
    sub_100010D0C(v12, v13);
    *(_QWORD *)(v14 + 8) = 0xD00000000000001BLL;
    *(_QWORD *)(v14 + 16) = 0x8000000100070DB0;
  }
  return sub_1000199C4();
}

uint64_t sub_1000118E4(uint64_t result, uint64_t a2, uint64_t a3, sqlite3_stmt **a4)
{
  unint64_t v5;
  uint64_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  if (v5 >> 31)
  {
    __break(1u);
  }
  else
  {
    v7 = sqlite3_prepare_v2(*(sqlite3 **)(*(_QWORD *)(a2 + 112) + 16), (const char *)(result + 32), v5, a4, 0);
    swift_release(a3);
    swift_release(a2);
    return v7;
  }
  return result;
}

uint64_t type metadata accessor for SQLiteDB.Statement()
{
  return objc_opt_self(_TtCC13rtcreportingd8SQLiteDB9Statement);
}

uint64_t sub_100011974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t inited;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v11 = sub_10001AAC8(&qword_10008E4B0);
  inited = swift_initStackObject(v11, &v15);
  *(_OWORD *)(inited + 16) = xmmword_10006D0D0;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = &off_1000861A0;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = &off_1000861A0;
  *(_QWORD *)(inited + 72) = a5;
  *(_QWORD *)(inited + 80) = a6;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a6);
  sub_100011BCC(inited);
  if (v6)
  {
    swift_setDeallocating(inited);
    return sub_100011B7C();
  }
  else
  {
    swift_setDeallocating(inited);
    sub_100011B7C();
    do
    {
      v14 = sub_100011A74();
      result = swift_release(v14);
    }
    while (v14);
  }
  return result;
}

uint64_t sub_100011A74()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v1 = v0;
  v2 = sqlite3_step(*(sqlite3_stmt **)(v0 + 16));
  if (v2 == 101)
  {
    *(_BYTE *)(v0 + 24) = 1;
    return 0;
  }
  else
  {
    v3 = v2;
    if (v2 == 100)
    {
      sub_100011180();
    }
    else
    {
      HIDWORD(v10[1]) = -335544320;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease(0xE000000000000000);
      strcpy((char *)v10, "Statement ((");
      sub_1000217DC();
      String.append(_:)(v4);
      sub_10000A818();
      v5._object = (void *)0x8000000100070EF0;
      v5._countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v5);
      v6 = v10[0];
      v1 = v10[1];
      v7 = sub_1000225B4();
      sub_10000A7FC((uint64_t)&unk_1000863C0, v7);
      *(_DWORD *)v8 = v3;
      *(_QWORD *)(v8 + 8) = v6;
      *(_QWORD *)(v8 + 16) = v1;
      sub_1000199C4();
    }
  }
  return v1;
}

uint64_t sub_100011B7C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_10001AAC8(&qword_10008F5B8);
  swift_arrayDestroy(v0 + 32, v1);
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_100011BCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  v20 = a1 + 32;
  result = swift_bridgeObjectRetain(a1);
  v6 = 0;
  while (1)
  {
    if (v6 == v4)
    {
      v15 = 0u;
      v16 = 0u;
      v6 = v4;
      v14 = 0u;
    }
    else
    {
      if (v6 >= v4)
        goto LABEL_11;
      sub_10000A19C(v20 + 40 * v6, (uint64_t)v13);
      *(_QWORD *)&v14 = v6;
      sub_100011D14(v13, (uint64_t)&v14 + 8);
      ++v6;
    }
    sub_100011D2C((uint64_t)&v14, (uint64_t)&v17);
    if (!v19)
      return swift_bridgeObjectRelease(a1);
    v7 = v17;
    result = sub_100011D14(&v18, (uint64_t)&v14);
    v8 = __OFADD__(v7, 1);
    v9 = v7 + 1;
    if (v8)
      break;
    v10 = *((_QWORD *)&v15 + 1);
    v11 = v16;
    sub_10001D44C(&v14, *((uint64_t *)&v15 + 1));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(v3, v9, v10, v11);
    result = sub_100015060(&v14);
    if (v2)
      return swift_bridgeObjectRelease(a1);
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100011D14(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100011D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001AAC8(&qword_10008E508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100011D74(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_100011D8C(a1, a2, *v2, v2[1]);
}

uint64_t sub_100011D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = String.utf8CString.getter(a3, a4);
  sub_100011180();
  v7 = swift_retain(v6);
  LODWORD(a2) = sub_100011E20(v7, a1, a2, v6);
  result = sub_10000BDB4();
  if ((_DWORD)a2)
  {
    v9 = sub_1000225B4();
    v10 = sub_10000A7FC((uint64_t)&unk_1000863C0, v9);
    sub_10001D368(v10, v11);
    return sub_10001B994(v12, v13);
  }
  return result;
}

uint64_t sub_100011E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  sqlite3_stmt *v9;
  uint64_t v10;

  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  v6 = a3;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v5 = a4;
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >> 31)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4 = a2;
  v7 = a1;
  v9 = *(sqlite3_stmt **)(a2 + 16);
  if (qword_10008DFB0 != -1)
LABEL_9:
    swift_once(&qword_10008DFB0, sub_1000225A4);
  v10 = sqlite3_bind_text(v9, v6, (const char *)(v7 + 32), v8, (void (__cdecl *)(void *))qword_10008DFB8);
  swift_release(v5);
  swift_release(v4);
  return v10;
}

void sub_100011EF8(uint64_t a1, uint64_t a2)
{
  sqlite3_int64 *v2;

  sub_100011F10(a1, a2, *v2);
}

void sub_100011F10(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return;
  }
  if (sqlite3_bind_int64(*(sqlite3_stmt **)(a1 + 16), a2, a3))
  {
    v3 = sub_100015414();
    v4 = sub_10000A7FC((uint64_t)&unk_1000863C0, v3);
    sub_100010D0C(v4, v5);
    sub_10001B994(v6, 0xD000000000000014);
  }
  sub_10000BF94();
}

void sub_100011F84(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100011F9C(a1, a2, *v2);
}

void sub_100011F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;

  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_11;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
    return;
  }
  if (sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 16), a2, a3))
  {
    v4 = sub_100015414();
    v5 = sub_10000A7FC((uint64_t)&unk_1000863C0, v4);
    sub_100010D0C(v5, v6);
    sub_10001B994(v7, 0xD000000000000012);
  }
  sub_10000BF94();
}

void sub_100012024(uint64_t a1, uint64_t a2)
{
  double *v2;

  sub_10001203C(a1, a2, *v2);
}

void sub_10001203C(uint64_t a1, uint64_t a2, double a3)
{
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return;
  }
  if (sqlite3_bind_double(*(sqlite3_stmt **)(a1 + 16), a2, a3))
  {
    v3 = sub_100015414();
    v4 = sub_10000A7FC((uint64_t)&unk_1000863C0, v3);
    sub_10001D368(v4, v5);
    sub_10001B994(v6, v7);
  }
  sub_10000BF94();
}

uint64_t sub_1000120A8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000120B4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000120BC(char a1)
{
  _BYTE *v1;
  uint64_t v2;

  *v1 = a1 & 1;
  return swift_storeEnumTagMultiPayload(v1, v2, 4);
}

uint64_t sub_1000120EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0);
}

uint64_t sub_1000120F8(uint64_t a1)
{
  return swift_slowDealloc(a1, -1, -1);
}

uint64_t sub_100012104()
{
  return swift_task_switch();
}

uint64_t sub_10001210C()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_100012114()
{
  return type metadata accessor for XPCObject(0);
}

uint64_t sub_10001211C(uint64_t a1, uint64_t a2)
{
  return swift_task_switch(a1, a2, 0);
}

uint64_t sub_100012154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100012164(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100012178()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_10001D44C(v0, v1);
  return dispatch thunk of Encoder.singleValueContainer()(v1, v2);
}

uint64_t sub_1000121A4()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_1000121AC()
{
  return 0x6C625F746E657665;
}

uint64_t sub_1000121D0()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_1000121D8()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

uint64_t sub_1000121E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 256) = v1;
  *(_QWORD *)(v3 - 176) = v2 + 56;
  *(_QWORD *)(v3 - 168) = (unint64_t)((1 << *(_BYTE *)(v2 + 32)) + 63) >> 6;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100012228(uint64_t (*a1)(void))
{
  return a1();
}

void *sub_100012244@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t sub_100012254()
{
  return ((uint64_t (*)(void))withCheckedContinuation<A>(isolation:function:_:))();
}

uint64_t sub_100012270()
{
  return swift_slowAlloc(8, -1);
}

uint64_t sub_10001227C()
{
  uint64_t v0;

  return swift_retain(v0);
}

unint64_t sub_10001228C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10001A120(v1, v0);
}

uint64_t *sub_100012298(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v12);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain(v8);
        v9 = a1;
        v10 = a3;
        v11 = 0;
        goto LABEL_9;
      case 5u:
        v13 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = a3;
        v11 = 5;
        goto LABEL_9;
      case 6u:
        v14 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v14);
        v9 = a1;
        v10 = a3;
        v11 = 6;
        goto LABEL_9;
      case 7u:
        v15 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v15);
        v9 = a1;
        v10 = a3;
        v11 = 7;
LABEL_9:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1000123BC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10000B0F0();
  sub_10000F498(v2);
  *(_QWORD *)(v0 + 456) = v1;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 424));
  sub_1000120B4();
  sub_10000AF94();
  sub_10000CEB8();
  return swift_task_switch(v4, v5, v6);
}

void sub_100012430(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _QWORD __src[11];

  sub_100012478(a1, __src);
  if (!v2)
    memcpy(a2, __src, 0x58uLL);
}

void sub_100012478(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  _QWORD *v75;
  uint64_t v76[2];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  _QWORD *v81;
  void *v82;
  _QWORD v83[2];
  _QWORD *v84;

  v5 = sub_10001AAC8(&qword_1000907A0);
  __chkstk_darwin(v5);
  v6 = a1[3];
  v7 = a1[4];
  sub_10001D44C(a1, v6);
  v8 = sub_100012B40();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_10008A3B0, &unk_10008A3B0, v8, v6, v7);
  if (v2)
  {
    sub_100019A88();
  }
  else
  {
    v75 = a2;
    v84 = &_swiftEmptyArrayStorage;
    sub_100018F04();
    LOBYTE(v83[0]) = 0;
    v9 = sub_10000B030((unint64_t *)&qword_10008FA00);
    sub_10001AC24(v9, (uint64_t)v83);
    v10 = v76[0];
    if (v76[0])
      sub_100064210(v76[0]);
    LOBYTE(v83[0]) = 1;
    sub_10001A24C(v10, (uint64_t)v83);
    sub_100064210(v76[0]);
    v11 = sub_10001B35C(1);
    v68 = v12;
    v71 = v11;
    v13 = v84;
    v14 = sub_100011178();
    if ((v14 & 1) == 0)
    {
      sub_10001B108();
      v13 = (_QWORD *)v14;
    }
    v16 = v13[2];
    v15 = v13[3];
    v17 = v16 + 1;
    if (v16 >= v15 >> 1)
    {
      sub_10001A318(v15);
      v67 = v53;
      sub_10001B108();
      v17 = v67;
      v13 = (_QWORD *)v14;
    }
    v13[2] = v17;
    v18 = &v13[2 * v16];
    v18[4] = v71;
    v18[5] = v68;
    v84 = v13;
    v83[0] = &_swiftEmptyArrayStorage;
    LOBYTE(v82) = 2;
    sub_10001AC24(v14, (uint64_t)&v82);
    v19 = v76[0];
    if (v76[0])
      sub_100064210(v76[0]);
    LOBYTE(v82) = 3;
    sub_10001A24C(v19, (uint64_t)&v82);
    sub_100064210(v76[0]);
    v20 = sub_10001B35C(3);
    v22 = v21;
    v23 = v83[0];
    v72 = v20;
    if ((sub_100011178() & 1) == 0)
    {
      sub_10001B108();
      v23 = v54;
    }
    v25 = *(_QWORD *)(v23 + 16);
    v24 = *(_QWORD *)(v23 + 24);
    if (v25 >= v24 >> 1)
    {
      sub_10001A318(v24);
      sub_10001B108();
      v23 = v55;
    }
    *(_QWORD *)(v23 + 16) = v25 + 1;
    v26 = v23 + 16 * v25;
    *(_QWORD *)(v26 + 32) = v72;
    *(_QWORD *)(v26 + 40) = v22;
    v83[0] = v23;
    v82 = &_swiftEmptyArrayStorage;
    sub_100018F04();
    LOBYTE(v81) = 4;
    v27 = sub_10000B030(&qword_10008FA80);
    sub_10001AC24(v27, (uint64_t)&v81);
    if (v76[0])
      sub_1000642E8(v76[0]);
    v28 = sub_10001B204(5);
    if ((v29 & 1) == 0)
    {
      v30 = v28;
      v31 = (uint64_t)v82;
      v28 = sub_100011178();
      v73 = v30;
      if ((v28 & 1) == 0)
      {
        sub_10001C53C();
        v31 = v28;
      }
      v33 = *(_QWORD *)(v31 + 16);
      v32 = *(_QWORD *)(v31 + 24);
      v34 = v33 + 1;
      if (v33 >= v32 >> 1)
      {
        v56 = sub_10001A318(v32);
        v70 = v57;
        sub_100022DD8(v56, v57, 1, v31);
        v34 = v70;
        v31 = v28;
      }
      *(_QWORD *)(v31 + 16) = v34;
      *(_QWORD *)(v31 + 8 * v33 + 32) = v73;
      v82 = (void *)v31;
    }
    v81 = &_swiftEmptyArrayStorage;
    v80 = 6;
    sub_10001AC24(v28, (uint64_t)&v80);
    if (v76[0])
      sub_1000642E8(v76[0]);
    v35 = sub_10001B204(7);
    v37 = v81;
    if ((v36 & 1) == 0)
    {
      v38 = v35;
      v39 = (uint64_t)v81;
      if ((swift_isUniquelyReferenced_nonNull_native(v81) & 1) == 0)
      {
        sub_10001C53C();
        v39 = v58;
      }
      v37 = (_QWORD *)v39;
      v41 = *(_QWORD *)(v39 + 16);
      v40 = *(_QWORD *)(v39 + 24);
      if (v41 >= v40 >> 1)
      {
        v59 = sub_10001A318(v40);
        sub_100022DD8(v59, v41 + 1, 1, v39);
        v37 = v60;
      }
      v37[2] = v41 + 1;
      v37[v41 + 4] = v38;
      v81 = v37;
    }
    v43 = v82;
    v42 = v83[0];
    LOBYTE(v76[0]) = 8;
    v74 = v84;
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRetain(v42);
    sub_1000111DC();
    swift_bridgeObjectRetain(v37);
    v44 = v37;
    v45 = KeyedDecodingContainer.decode(_:forKey:)(v76, v5);
    v69 = v46;
    v47 = v46;
    v65 = v45;
    v80 = 9;
    v48 = sub_100012F28();
    swift_bridgeObjectRetain(v47);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&unk_10008A280, &v80, v5, &unk_10008A280, v48);
    sub_10001E060();
    v49 = v76[0];
    v66 = v76[0];
    v51 = v77;
    v50 = v78;
    v63 = v77;
    v64 = v78;
    v52 = v79;
    v61 = v76[1];
    v62 = v79;
    sub_1000111DC();
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v43);
    sub_10000CEB0();
    sub_10000CEB0();
    sub_100012E88(v49, v61, v51, v50, v52);
    sub_10000A828();
    sub_10001B144();
    swift_bridgeObjectRelease(v43);
    sub_10000BDE4();
    sub_1000120B4();
    sub_100015060(a1);
    sub_1000120B4();
    sub_10000BDE4();
    swift_bridgeObjectRelease(v43);
    sub_10001B144();
    sub_10000A828();
    sub_100012ED8(v66, v61, v63, v64, v62);
    *v75 = v74;
    v75[1] = v42;
    v75[2] = v43;
    v75[3] = v44;
    v75[4] = v65;
    v75[5] = v69;
    v75[6] = v66;
    v75[7] = v61;
    v75[8] = v63;
    v75[9] = v64;
    v75[10] = v62;
  }
  sub_10000A840();
}

uint64_t sub_100012B18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100012B40();
  return CodingKey.description.getter(a1, v2);
}

unint64_t sub_100012B40()
{
  unint64_t result;

  result = qword_1000907A8;
  if (!qword_1000907A8)
  {
    result = swift_getWitnessTable(&unk_100070338, &unk_10008A3B0);
    atomic_store(result, (unint64_t *)&qword_1000907A8);
  }
  return result;
}

void sub_100012B7C()
{
  uint64_t v0;
  char v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  sub_10001B228();
  if ((v4 & 1) != 0)
  {
    sub_100012C24();
    if (v8 != v9)
    {
      sub_10001D164();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10001A178();
    }
  }
  else
  {
    v7 = v3;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    v12 = sub_10001D870(v2, v3, v4, v5, v6);
    v13 = (_QWORD *)sub_100018E5C(v12, 16 * v11 + 32);
    v2 = j__malloc_size(v13);
    v13[2] = v10;
    v13[3] = 2 * ((uint64_t)(v2 - 32) / 16);
  }
  else
  {
    v13 = &_swiftEmptyArrayStorage;
  }
  if ((v1 & 1) != 0)
  {
    sub_10001D038();
    sub_1000120A8();
  }
  else
  {
    sub_10001BC24(v2, v3, (uint64_t)(v13 + 4));
  }
  sub_10000BF84();
}

uint64_t sub_100012C44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = a2;
  return swift_storeEnumTagMultiPayload(a1, v2, 1);
}

uint64_t sub_100012C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

uint64_t sub_100012C5C(uint64_t a1)
{
  return swift_slowAlloc(a1, -1);
}

uint64_t sub_100012C64()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100010720(v1, v0);
}

void sub_100012C8C(uint64_t a1@<X8>)
{
  Swift::String v1;
  Swift::String_optional v2;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v2.value._countAndFlagsBits = 1885960807;
  v2.value._object = (void *)0xE400000000000000;
  v1._countAndFlagsBits = 0xD000000000000010;
  URLRequest.setValue(_:forHTTPHeaderField:)(v2, v1);
}

void sub_100012CAC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t sub_100012CC0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100012CCC(uint64_t a1, uint64_t a2)
{
  return swift_deallocObject(a1, a2, 7);
}

uint64_t sub_100012CEC(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_100012CFC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
}

uint64_t sub_100012D04()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 3);
}

uint64_t sub_100012D10(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 15);
}

uint64_t sub_100012D18(uint64_t a1, uint64_t *a2)
{
  return sub_10001AAC8(a2);
}

uint64_t sub_100012D34()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 544));
}

uint64_t sub_100012D50()
{
  return 0x69726F6765746163;
}

void sub_100012D6C()
{
  _xpc_connection_s *v0;
  void *v1;

  xpc_connection_set_event_handler(v0, v1);
}

void sub_100012D78()
{
  sub_100012B7C();
}

uint64_t sub_100012D94(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100012E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_100012ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a5);
  }
  return result;
}

unint64_t sub_100012F28()
{
  unint64_t result;

  result = qword_1000907B0;
  if (!qword_1000907B0)
  {
    result = swift_getWitnessTable(&unk_1000700BC, &unk_10008A280);
    atomic_store(result, (unint64_t *)&qword_1000907B0);
  }
  return result;
}

uint64_t sub_100012F64()
{
  uint64_t v0;
  uint64_t v1;
  uint8_t *v2;
  uint8_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint8_t *v60;
  unint64_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  os_log_type_t v65;
  _BOOL4 v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t result;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  os_log_type_t v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  char v115;
  _QWORD *v116;
  uint64_t v117;
  void *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  _QWORD *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;

  v2 = (uint8_t *)(v1 + 104);
  v3 = (uint8_t *)(v1 + 136);
  if (*(_BYTE *)(v1 + 457) == 1)
  {
    v11 = *(_QWORD *)(v1 + 256);
    v12 = *(void **)(v1 + 240);
    v13 = (uint64_t *)MessageKeys.sessionID.unsafeMutableAddressor();
    v14 = *v13;
    v15 = v13[1];
    sub_1000108E4();
    RTCXPCDictionary.subscript.getter(v14, v15, v12, v11);
    sub_100019460();
    v16 = sub_100012114();
    v17 = sub_100030374(v11);
    v18 = *(_QWORD *)(v1 + 256);
    if (v17 == 1)
    {
      sub_10001D7AC(*(_QWORD *)(v1 + 256), &qword_10008FEE0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload(*(_QWORD *)(v1 + 256), v16) == 8)
      {
        v39 = (uint8_t *)(v1 + 120);
        v41 = *(uint64_t **)v18;
        v40 = *(_QWORD *)(v18 + 8);
        sub_10001C454(*(_QWORD *)(v1 + 248) + 152, v1 + 64, 33);
        sub_100015B88();
        v43 = v42;
        *(_QWORD *)(v1 + 440) = v42;
        swift_endAccess(v1 + 64);
        if (v43)
        {
          if (qword_10008DFE0 != -1)
            swift_once(&qword_10008DFE0, sub_10002DF10);
          v44 = *(NSObject **)(v1 + 248);
          v45 = sub_10000F3D0();
          sub_100015718(v45, (uint64_t)qword_10008EAE0);
          sub_10000785C((uint64_t)v44);
          sub_1000111A4();
          sub_100015738();
          v46 = sub_10000BFB8();
          v47 = os_log_type_enabled(v44, v46);
          v48 = *(_QWORD *)(v1 + 248);
          if (v47)
          {
            v49 = sub_100012C5C(22);
            v134 = sub_100012C5C(64);
            v138 = v134;
            *(_DWORD *)v49 = 136446466;
            sub_1000111A4();
            *(_QWORD *)v39 = sub_100030364((uint64_t)v41, v50, &v138);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v49 + 4, v49 + 12);
            sub_1000110B4(v40);
            *(_WORD *)(v49 + 12) = 2082;
            v51 = *(_QWORD *)(v48 + 128);
            sub_10000CA18();
            *(_QWORD *)(v1 + 128) = sub_100014578(v51, v52, &v138);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v49 + 14, v49 + 22);
            sub_10000AF70();
            sub_100018064(v48);
            sub_10000BFA8((void *)&_mh_execute_header, v44, v46, "session end requested for %{public}s by %{public}s", (uint8_t *)v49);
            sub_10000BDEC(v134);
            sub_1000120F8(v134);
            sub_1000120F8(v49);
          }
          else
          {
            sub_10000F3C8(v40);
            sub_100018064(v48);
          }

          v89 = (_QWORD *)swift_task_alloc(dword_100090474);
          *(_QWORD *)(v1 + 448) = v89;
          *v89 = v1;
          v89[1] = sub_1000068A8;
          return sub_100005FA0(1);
        }
        if (qword_10008DFE0 != -1)
          swift_once(&qword_10008DFE0, sub_10002DF10);
        v82 = *(NSObject **)(v1 + 248);
        v83 = sub_10000F3D0();
        v0 = sub_100015718(v83, (uint64_t)qword_10008EAE0);
        sub_10000785C((uint64_t)v82);
        sub_1000111A4();
        sub_100018E8C();
        v84 = sub_100010E94();
        v85 = sub_10001AEC4(v84);
        v86 = *(_QWORD *)(v1 + 248);
        if (v85)
        {
          v39 = (uint8_t *)sub_100012C5C(22);
          v135 = sub_100012C5C(64);
          v138 = v135;
          *(_DWORD *)v39 = 136446466;
          v0 = (uint64_t)(v39 + 4);
          sub_1000111A4();
          *(_QWORD *)v2 = sub_100030364((uint64_t)v41, v87, &v138);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112, v39 + 4, v39 + 12);
          sub_1000110B4(v40);
          sub_100010860();
          v40 = *(_QWORD *)(v86 + 128);
          v41 = *(uint64_t **)(v86 + 136);
          sub_10000B0D4();
          *(_QWORD *)(v1 + 112) = sub_100014F94(v40, (unint64_t)v41, &v138);
          sub_10001F4F8(v1 + 112, v1 + 120, v88, (uint64_t)(v39 + 22));
          sub_10000BDE4();
          sub_100018064(v86);
          sub_10000BFA8((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "attempt to close non-existing session %{public}s from %{public}s", v39);
          v2 = (uint8_t *)v135;
          sub_10000BDEC(v135);
          sub_1000120F8(v135);
          sub_1000120F8((uint64_t)v39);
        }
        else
        {
          sub_10000F3C8(v40);
          sub_100018064(v86);
        }

        if (!sub_100015ACC())
          goto LABEL_40;
        sub_10000D220();
        if (!v70)
        {
          __break(1u);
          goto LABEL_56;
        }
LABEL_39:
        sub_10001FD5C(*(_xpc_connection_s **)(v70 + 16));
        sub_100019ABC();
        goto LABEL_40;
      }
      sub_10002FCCC(v18);
    }
    if (qword_10008DFE0 != -1)
      swift_once(&qword_10008DFE0, sub_10002DF10);
    v63 = *(NSObject **)(v1 + 248);
    v64 = sub_10000F3D0();
    v2 = (uint8_t *)sub_100015718(v64, (uint64_t)qword_10008EAE0);
    sub_100019A20();
    sub_100015738();
    v65 = sub_100010E94();
    v66 = sub_1000112C4(v65);
    v67 = *(_QWORD **)(v1 + 248);
    if (v66)
    {
      v135 = v1 + 88;
      v2 = (uint8_t *)sub_100012C5C(12);
      v68 = sub_100012C5C(32);
      v138 = v68;
      *(_DWORD *)v2 = 136446210;
      v133 = (uint64_t)(v2 + 4);
      v0 = v67[16];
      v69 = v67[17];
      sub_10000B0D4();
      *(_QWORD *)(v1 + 88) = sub_100014F94(v0, v69, &v138);
      sub_100007864(v1 + 88, v1 + 96, (uint64_t)(v2 + 4));
      sub_10000BDE4();
      sub_100010370();
      sub_100010670((void *)&_mh_execute_header, v63, (os_log_type_t)v12, "missing required value in end session from %{public}s", v2);
      sub_10000BE60(v68);
      sub_1000120F8(v68);
      sub_1000120F8((uint64_t)v2);
    }
    else
    {
      sub_100010370();
    }

    if (!sub_100015ACC())
      goto LABEL_40;
    sub_10000D220();
    if (!v70)
    {
      __break(1u);
LABEL_98:
      swift_once(&qword_10008E080, sub_1000584B0);
      goto LABEL_84;
    }
    goto LABEL_39;
  }
  if (*(_BYTE *)(v1 + 457))
  {
    if (qword_10008DFE0 != -1)
      swift_once(&qword_10008DFE0, sub_10002DF10);
    v20 = *(_QWORD *)(v1 + 240);
    v19 = *(NSObject **)(v1 + 248);
    v21 = sub_10000F3D0();
    v22 = sub_100015718(v21, (uint64_t)qword_10008EAE0);
    sub_10000785C((uint64_t)v19);
    swift_unknownObjectRetain_n(v20, 2);
    sub_100015B60();
    v23 = sub_100010E94();
    v24 = sub_1000112C4(v23);
    v25 = *(_QWORD *)(v1 + 248);
    if (!v24)
    {
      swift_unknownObjectRelease_n(*(_QWORD *)(v1 + 240), 2);
      sub_100018064(v25);
LABEL_30:

LABEL_40:
      v71 = sub_10001D258();
      v136 = v72;
      swift_task_dealloc(v71);
      sub_100010D58();
      sub_10000F3D8();
      sub_1000111E4();
      sub_10000BFB0();
      sub_10001210C();
      sub_10000B0DC();
      sub_100010384();
      sub_10000BD30();
      sub_10000BDD4();
      swift_task_dealloc(v136);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
    v26 = *(_BYTE *)(v1 + 457);
    v132 = *(_QWORD *)(v1 + 240);
    v27 = sub_100012C5C(22);
    v28 = sub_100012C5C(64);
    v138 = v28;
    *(_DWORD *)v27 = 136315394;
    *(_BYTE *)(v1 + 456) = v26;
    v29 = String.init<A>(describing:)(v1 + 456, &type metadata for XPCMessage.MessageType);
    *(_QWORD *)(v1 + 176) = sub_100014F94(v29, v30, &v138);
    sub_10001F4F8(v1 + 176, v1 + 184, v31, v27 + 12);
    sub_10001B144();
    swift_unknownObjectRelease_n(v132, 2);
    *(_WORD *)(v27 + 12) = 2082;
    v32 = *(_QWORD *)(v25 + 128);
    sub_1000111DC();
    *(_QWORD *)(v1 + 96) = sub_100015C14(v32, v33, &v138);
    sub_10001F4F8(v1 + 96, v1 + 104, v34, v27 + 22);
    sub_10001B144();
    sub_100018064(v25);
    sub_10000BFA8((void *)&_mh_execute_header, v19, v22, "invalid client message %s from %{public}s", (uint8_t *)v27);
    sub_10000BDEC(v28);
    sub_1000120F8(v28);
    v35 = v27;
LABEL_28:
    sub_1000120F8(v35);
    goto LABEL_30;
  }
  v4 = *(_QWORD *)(v1 + 336);
  v5 = *(void **)(v1 + 240);
  v6 = (uint64_t *)MessageKeys.clientName.unsafeMutableAddressor();
  v0 = *v6;
  v7 = v6[1];
  sub_1000111A4();
  RTCXPCDictionary.subscript.getter(v0, v7, v5, v4);
  sub_10000A820();
  sub_100012114();
  v8 = sub_10001CC4C(v4);
  v9 = *(uint64_t **)(v1 + 336);
  if (v8 == 1)
  {
    v10 = *(_QWORD *)(v1 + 336);
LABEL_5:
    sub_10001D7AC(v10, &qword_10008FEE0);
LABEL_24:
    if (qword_10008DFE0 != -1)
      swift_once(&qword_10008DFE0, sub_10002DF10);
    v19 = *(NSObject **)(v1 + 248);
    v54 = sub_10000F3D0();
    sub_100015718(v54, (uint64_t)qword_10008EAE0);
    sub_100019A20();
    sub_100015738();
    v55 = sub_100010E94();
    v56 = sub_1000108D4(v55);
    v57 = *(_QWORD *)(v1 + 248);
    if (!v56)
    {
      sub_100010370();
      goto LABEL_30;
    }
    v58 = (uint8_t *)sub_100012C5C(12);
    v59 = sub_100012C5C(32);
    v138 = v59;
    *(_DWORD *)v58 = 136446210;
    v60 = v3;
    v62 = *(_QWORD *)(v57 + 128);
    v61 = *(_QWORD *)(v57 + 136);
    swift_bridgeObjectRetain(v61);
    *(_QWORD *)(v1 + 136) = sub_100014F94(v62, v61, &v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v60, v1 + 144, v58 + 4, v58 + 12);
    sub_1000120B4();
    sub_100010370();
    sub_100010670((void *)&_mh_execute_header, v19, (os_log_type_t)v0, "missing required values in create session from %{public}s", v58);
    sub_10000BE60(v59);
    sub_1000120F8(v59);
    v35 = (uint64_t)v58;
    goto LABEL_28;
  }
  if (sub_10001A2A0(*(_QWORD *)(v1 + 336)) != 8)
  {
    v53 = (uint64_t)v9;
LABEL_23:
    sub_10002FCCC(v53);
    goto LABEL_24;
  }
  v36 = *(_QWORD *)(v1 + 328);
  v0 = *v9;
  v2 = (uint8_t *)v9[1];
  *(_QWORD *)(v1 + 344) = v2;
  MessageKeys.serviceName.unsafeMutableAddressor();
  sub_1000111DC();
  sub_10001D888(v36);
  sub_10001B144();
  v37 = sub_10001CC4C(v36);
  v38 = *(uint64_t **)(v1 + 328);
  if (v37 == 1)
  {
    sub_10000781C();
    v10 = (uint64_t)v38;
    goto LABEL_5;
  }
  if (sub_10001A2A0(*(_QWORD *)(v1 + 328)) != 8)
  {
    sub_10000781C();
    v53 = (uint64_t)v38;
    goto LABEL_23;
  }
  v39 = (uint8_t *)(v1 + 136);
  v74 = *(_QWORD *)(v1 + 320);
  v75 = *(void **)(v1 + 240);
  v76 = *v38;
  v40 = v38[1];
  v135 = v76;
  *(_QWORD *)(v1 + 352) = v40;
  v77 = (uint64_t *)MessageKeys.clientType.unsafeMutableAddressor();
  v79 = *v77;
  v78 = v77[1];
  sub_1000108E4();
  RTCXPCDictionary.subscript.getter(v79, v78, v75, v74);
  sub_100019460();
  v80 = sub_10001CC4C(v74);
  v41 = *(uint64_t **)(v1 + 320);
  if (v80 == 1)
  {
    sub_10000A820();
    sub_10000781C();
    v81 = (uint64_t)v41;
LABEL_44:
    sub_10001D7AC(v81, &qword_10008FEE0);
LABEL_61:
    v3 = v39;
    goto LABEL_24;
  }
LABEL_56:
  if (sub_10001A2A0((uint64_t)v41) != 8)
  {
    sub_10000A820();
    sub_10000781C();
    v98 = (uint64_t)v41;
LABEL_60:
    sub_10002FCCC(v98);
    goto LABEL_61;
  }
  v90 = *(_QWORD *)(v1 + 312);
  v91 = *(void **)(v1 + 240);
  v131 = *v41;
  v133 = v40;
  v92 = v41[1];
  *(_QWORD *)(v1 + 360) = v92;
  v93 = (uint64_t *)MessageKeys.realtime.unsafeMutableAddressor();
  v95 = *v93;
  v94 = v93[1];
  sub_10000B0D4();
  RTCXPCDictionary.subscript.getter(v95, v94, v91, v90);
  sub_10000BDE4();
  v96 = sub_10001CC4C(v90);
  v97 = *(char **)(v1 + 312);
  if (v96 == 1)
  {
    swift_bridgeObjectRelease(v133);
    sub_10000781C();
    sub_10000A820();
    v81 = (uint64_t)v97;
    goto LABEL_44;
  }
  v130 = v92;
  if (sub_10001A2A0((uint64_t)v97) != 2)
  {
    swift_bridgeObjectRelease(v133);
    sub_10000781C();
    swift_bridgeObjectRelease(v92);
    v98 = (uint64_t)v97;
    goto LABEL_60;
  }
  v99 = *(_QWORD *)(v1 + 304);
  v137 = *v97;
  MessageKeys.hierarchyToken.unsafeMutableAddressor();
  sub_1000111DC();
  sub_10001D888(v99);
  sub_10001B144();
  v100 = sub_10001CC4C(v99);
  v101 = *(_QWORD *)(v1 + 304);
  if ((_DWORD)v100 != 1)
  {
    if (sub_10001A2A0(*(_QWORD *)(v1 + 304)) == 8)
    {
      v102 = *(_QWORD *)(v1 + 296);
      v103 = *(void **)(v1 + 240);
      v104 = *(_QWORD *)(v101 + 8);
      v105 = (uint64_t *)MessageKeys.hierarchyLevel.unsafeMutableAddressor();
      v106 = *v105;
      v107 = v105[1];
      sub_1000111DC();
      RTCXPCDictionary.subscript.getter(v106, v107, v103, v102);
      sub_10001B144();
      if (sub_10001CC4C(v102) == 1)
      {
        v100 = sub_100010678();
        goto LABEL_64;
      }
      if (sub_10001A2A0(*(_QWORD *)(v1 + 296)) == 3)
        goto LABEL_73;
      sub_100010678();
    }
    sub_100030380();
    goto LABEL_72;
  }
LABEL_64:
  sub_10001C5D0(v100, &qword_10008FEE0);
LABEL_72:
  v104 = 0;
LABEL_73:
  v129 = v104;
  *(_QWORD *)(v1 + 368) = v104;
  v108 = *(_QWORD *)(v1 + 288);
  MessageKeys.samplingUUID.unsafeMutableAddressor();
  sub_1000111DC();
  sub_10001D888(v108);
  sub_10001B144();
  v109 = sub_10001CC4C(v108);
  v110 = *(_QWORD *)(v1 + 288);
  if ((_DWORD)v109 == 1)
  {
    sub_10001C5D0(v109, &qword_10008FEE0);
  }
  else
  {
    if (sub_10001A2A0(*(_QWORD *)(v1 + 288)) == 8)
    {
      v111 = *(_QWORD *)(v110 + 8);
      goto LABEL_79;
    }
    sub_100030380();
  }
  v111 = 0;
LABEL_79:
  *(_QWORD *)(v1 + 376) = v111;
  v112 = *(_QWORD *)(v1 + 280);
  MessageKeys.eager.unsafeMutableAddressor();
  sub_1000111DC();
  sub_10001D888(v112);
  sub_10001B144();
  if (sub_10001CC4C(v112) == 1)
    goto LABEL_87;
  v113 = *(_QWORD *)(v1 + 272);
  sub_10002FE50(*(_QWORD *)(v1 + 280), v113);
  if (sub_10001A2A0(v113) != 2)
  {
    sub_10002FCCC(*(_QWORD *)(v1 + 272));
LABEL_87:
    v67 = (_QWORD *)v1;
    sub_10001D7AC(*(_QWORD *)(v1 + 280), &qword_10008FEE0);
    if ((v137 & 1) == 0)
      goto LABEL_89;
LABEL_88:
    v115 = 1;
    goto LABEL_90;
  }
  v67 = (_QWORD *)v1;
  v114 = **(unsigned __int8 **)(v1 + 272);
  sub_10001D7AC(*(_QWORD *)(v1 + 280), &qword_10008FEE0);
  if ((v137 & 1) != 0)
    goto LABEL_88;
  if (!v114)
  {
LABEL_89:
    v115 = 0;
    goto LABEL_90;
  }
  if (qword_10008E080 != -1)
    goto LABEL_98;
LABEL_84:
  if ((byte_1000973F0 & 1) == 0)
    goto LABEL_89;
  v115 = 2;
LABEL_90:
  v116 = v67;
  v117 = v67[33];
  v118 = (void *)v116[30];
  v119 = (uint64_t *)MessageKeys.overrideSampling.unsafeMutableAddressor();
  v120 = *v119;
  v121 = v119[1];
  sub_10001CEBC();
  RTCXPCDictionary.subscript.getter(v120, v121, v118, v117);
  sub_100010678();
  v122 = sub_10001CC4C(v117);
  v123 = v116;
  v124 = v116[33];
  if (v122 == 1)
  {
    sub_10001D7AC(v116[33], &qword_10008FEE0);
  }
  else if (sub_10001A2A0(v116[33]) != 5)
  {
    sub_10002FCCC(v124);
  }
  if (*(_QWORD *)(v116[31] + 112))
  {
    sub_100019A20();
    v125 = XPCConnection.remoteUID.getter();
    sub_10000CEA8();
    v126 = qword_1000973D8;
    v116[48] = qword_1000973D8;
    if (v126)
    {
      v127 = dword_10008F084;
      sub_100019A20();
      v128 = (_QWORD *)swift_task_alloc(v127);
      v123[49] = v128;
      *v128 = v123;
      v128[1] = sub_100007C68;
      return sub_10001043C(v125, v115, v131, v130, v0, (uint64_t)v2, v135, v133);
    }
  }
  else
  {
    sub_10000A820();
    swift_bridgeObjectRelease(v129);
    __break(1u);
  }
  sub_10000A820();
  result = swift_bridgeObjectRelease(v129);
  __break(1u);
  return result;
}

unsigned __int8 *RTCXPCDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  xpc_object_t v7;

  v6 = String.utf8CString.getter(a1, a2);
  v7 = xpc_dictionary_get_value(a3, (const char *)(v6 + 32));
  sub_10000AF94();
  return XPCObject.init(_:)(v7, a4);
}

uint64_t sub_100013DEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t EnumCaseMultiPayload;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  const void *v34;
  char v35;
  NSObject *isEscapingClosureAtFileLocation;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  size_t count;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  if (*(_BYTE *)(v0 + 176) != 2)
    goto LABEL_17;
  v1 = v0 + 72;
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(void **)(v0 + 104);
  v4 = (uint64_t *)MessageKeys.payload.unsafeMutableAddressor();
  v5 = *v4;
  v6 = v4[1];
  sub_1000111A4();
  RTCXPCDictionary.subscript.getter(v5, v6, v3, v2);
  sub_10000A820();
  v7 = type metadata accessor for XPCObject(0);
  v8 = sub_10001CC4C(v2);
  v9 = *(void ***)(v0 + 136);
  if (v8 == 1)
  {
    sub_10001D7E8(*(_QWORD *)(v0 + 136), &qword_10008FEE0);
LABEL_11:
    if (qword_10008E0A8 != -1)
      swift_once(&qword_10008E0A8, sub_10005B758);
    v16 = *(NSObject **)(v0 + 112);
    v25 = sub_10000F3D0();
    sub_100015718(v25, (uint64_t)qword_1000901B0);
    sub_100019A20();
    sub_100015738();
    v26 = sub_100010E94();
    v27 = sub_10005F98C(v16);
    v28 = *(_QWORD *)(v0 + 112);
    if (v27)
    {
      v29 = (uint8_t *)sub_100012C5C(12);
      v30 = sub_100012C5C(32);
      v65 = v30;
      *(_DWORD *)v29 = 136446210;
      v31 = *(_QWORD *)(v28 + 112);
      v32 = *(_QWORD *)(v28 + 120);
      sub_10000B0D4();
      *(_QWORD *)(v0 + 64) = sub_100014F94(v31, v32, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v29 + 4, v29 + 12);
      sub_10000BDE4();
      sub_100010370();
      sub_100010670((void *)&_mh_execute_header, v16, v26, "session %{public}s receieved event with no payload", v29);
      sub_10000BE60(v30);
      sub_1000120F8(v30);
      sub_1000120F8((uint64_t)v29);
    }
    else
    {
      sub_100010370();
    }
    goto LABEL_16;
  }
  v10 = sub_100014638();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v11);
  if ((_DWORD)EnumCaseMultiPayload != 12)
  {
    sub_10001A2A8(EnumCaseMultiPayload, type metadata accessor for XPCObject);
    goto LABEL_11;
  }
  v13 = *(_QWORD *)(v0 + 112);
  v14 = *v9;
  *(_QWORD *)(v0 + 144) = *v9;
  if ((*(_BYTE *)(v13 + OBJC_IVAR____TtC13rtcreportingd7Session_receivedEnd) & 1) != 0)
  {
    if (qword_10008E0A8 != -1)
      swift_once(&qword_10008E0A8, sub_10005B758);
    v15 = sub_10000F3D0();
    v16 = sub_100015718(v15, (uint64_t)qword_1000901B0);
    v17 = sub_10005F8C8();
    Logger.logObject.getter(v17);
    v18 = sub_100010E94();
    v19 = sub_10005F98C(v16);
    v20 = *(_QWORD *)(v0 + 112);
    if (v19)
    {
      v21 = (uint8_t *)sub_100012C5C(12);
      v22 = sub_100012C5C(32);
      v65 = v22;
      *(_DWORD *)v21 = 136446210;
      v23 = *(_QWORD *)(v20 + 112);
      sub_100010644();
      *(_QWORD *)(v0 + 88) = sub_10005FC48(v23, v24, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v21 + 4, v21 + 12);
      sub_10000781C();
      sub_100018064(v20);
      sub_100010670((void *)&_mh_execute_header, v16, v18, "session %{public}s received event after ending", v21);
      sub_10000BE60(v22);
      sub_1000120F8(v22);
      sub_1000120F8((uint64_t)v21);

      swift_unknownObjectRelease(v14);
LABEL_17:
      swift_task_dealloc(*(_QWORD *)(v0 + 136));
      sub_100010D58();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    swift_unknownObjectRelease(v14);
    sub_100018064(v20);
LABEL_16:

    goto LABEL_17;
  }
  v34 = (const void *)(v0 + 16);
  if (*(_BYTE *)(v13 + 176) != 1)
  {
    isEscapingClosureAtFileLocation = *(unsigned __int8 *)(v13 + 240);
    if (!*(_BYTE *)(v13 + 176) && (_DWORD)isEscapingClosureAtFileLocation == 1)
    {
      v35 = 1;
      goto LABEL_39;
    }
    v64 = v0 + 88;
    v37 = v0 + 72;
    v38 = v14;
    v39 = *(_QWORD *)(v0 + 128);
    v40 = *(void **)(v0 + 104);
    v41 = (uint64_t *)MessageKeys.realtime.unsafeMutableAddressor();
    v42 = *v41;
    v43 = v41[1];
    sub_10001CEBC();
    RTCXPCDictionary.subscript.getter(v42, v43, v40, v39);
    sub_100010678();
    v44 = sub_10001CC4C(v39);
    v45 = *(char **)(v0 + 128);
    if (v44 == 1)
    {
      sub_10001D7E8(*(_QWORD *)(v0 + 128), &qword_10008FEE0);
      v35 = 0;
      v14 = v38;
      goto LABEL_38;
    }
    v14 = v38;
    v1 = v0 + 72;
    if (swift_getEnumCaseMultiPayload(*(_QWORD *)(v0 + 128), v7) == 2)
    {
      v46 = *v45;
      if ((_DWORD)isEscapingClosureAtFileLocation == 1)
        v35 = *v45;
      else
        v35 = 0;
      if ((_DWORD)isEscapingClosureAtFileLocation != 1 && v46)
      {
        if (qword_10008E0A8 == -1)
          goto LABEL_33;
        goto LABEL_42;
      }
      goto LABEL_39;
    }
    sub_10001C614((uint64_t)v45, type metadata accessor for XPCObject);
  }
  v35 = 0;
LABEL_39:
  while (1)
  {
    v37 = *(_QWORD *)(v0 + 112);
    v56 = *(_QWORD *)(v0 + 120);
    v57 = sub_1000192F4();
    *(_QWORD *)(v0 + 72) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v57, &protocol witness table for String);
    count = xpc_dictionary_get_count(v14);
    sub_10001AAC8((uint64_t *)&unk_10008F870);
    Dictionary.reserveCapacity(_:)(count);
    v59 = (_QWORD *)sub_100018E5C((uint64_t)&unk_100089BE0, 40);
    *(_QWORD *)(v0 + 152) = v59;
    v59[2] = v37;
    v59[3] = v1;
    v59[4] = v56;
    v60 = sub_100018E5C((uint64_t)&unk_100089C08, 32);
    *(_QWORD *)(v60 + 16) = sub_100011314;
    *(_QWORD *)(v60 + 24) = v59;
    *(_QWORD *)(v0 + 48) = sub_1000112F0;
    *(_QWORD *)(v0 + 56) = v60;
    *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = sub_100011280;
    *(_QWORD *)(v0 + 40) = &unk_100089C20;
    v38 = _Block_copy(v34);
    v34 = *(const void **)(v0 + 56);
    swift_retain(v37);
    swift_unknownObjectRetain(v14);
    sub_100019A20();
    sub_10000BDB4();
    xpc_dictionary_apply(v14, v38);
    swift_unknownObjectRelease(v14);
    _Block_release(v38);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v60, "", 71, 209, 48, 1);
    sub_10000CEA8();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
      break;
    __break(1u);
LABEL_42:
    swift_once(&qword_10008E0A8, sub_10005B758);
LABEL_33:
    v47 = sub_10000F3D0();
    sub_100015718(v47, (uint64_t)qword_1000901B0);
    v48 = sub_100019A20();
    Logger.logObject.getter(v48);
    v49 = sub_10005FAB4();
    v50 = os_log_type_enabled(isEscapingClosureAtFileLocation, v49);
    v51 = *(_QWORD *)(v0 + 112);
    if (v50)
    {
      v52 = (uint8_t *)sub_100012C5C(12);
      v63 = sub_100012C5C(32);
      v65 = v63;
      *(_DWORD *)v52 = 136446210;
      v53 = *(_QWORD *)(v51 + 112);
      v54 = *(_QWORD *)(v51 + 120);
      sub_1000111DC();
      *(_QWORD *)(v0 + 80) = sub_100014F94(v53, v54, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v64, v52 + 4, v52 + 12);
      v55 = v54;
      v14 = v38;
      swift_bridgeObjectRelease(v55);
      swift_release(v51);
      sub_100010670((void *)&_mh_execute_header, isEscapingClosureAtFileLocation, v49, "session %{public}s sent realtime event to non-realtime session", v52);
      sub_10000BE60(v63);
      sub_1000120F8(v63);
      sub_1000120F8((uint64_t)v52);
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 112));
    }

    v35 = 0;
LABEL_38:
    v1 = v37;
  }
  v61 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 160) = v61;
  sub_10000CA18();
  v62 = (_QWORD *)sub_10000BFD4();
  *(_QWORD *)(v0 + 168) = v62;
  *v62 = v0;
  v62[1] = sub_10000A990;
  return sub_1000107D0(v61, v35);
}

void *MessageKeys.realtime.unsafeMutableAddressor()
{
  return &static MessageKeys.realtime;
}

uint64_t sub_100014528()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100014530()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100014538()
{
  uint64_t v0;

  return swift_endAccess(v0);
}

uint64_t sub_100014540()
{
  uint64_t v0;

  return Error.localizedDescription.getter(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

uint64_t sub_100014560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(uint64_t, uint64_t), uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  return a14(a16, v16);
}

uint64_t sub_100014570()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 360));
}

uint64_t sub_100014578(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_100014F94(a1, v3, a3);
}

uint64_t sub_100014580()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

void sub_10001459C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0x16u);
}

uint64_t sub_1000145B0()
{
  return type metadata accessor for UUID(0);
}

uint64_t sub_1000145B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return StringProtocol.contains<A>(_:)(a1, a2, a2, a4, a4);
}

uint64_t sub_1000145C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v3[50] = v1;
  v3[51] = a1;
  v3[49] = v2;
  return swift_bridgeObjectRetain_n(v1, 2);
}

uint64_t sub_1000145DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 192) + 8))(v0, v1);
}

void *MessageKeys.payload.unsafeMutableAddressor()
{
  return &static MessageKeys.payload;
}

uint64_t sub_1000145FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 168) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 168, v4, v2, v3 + 12);
}

uint64_t sub_100014630()
{
  return swift_bridgeObjectRelease(0);
}

uint64_t sub_100014638()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100014644()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void *v21;
  void *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  _BOOL4 v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t result;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  os_log_type_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122[2];

  v6 = *(_QWORD *)(v1 + 352);
  v7 = OBJC_IVAR____TtC13rtcreportingd7Session_sentEvents;
  v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC13rtcreportingd7Session_sentEvents);
  v9 = __CFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
  {
    __break(1u);
LABEL_44:
    swift_once(&qword_10008E0A8, sub_10005B758);
    goto LABEL_25;
  }
  v11 = *(_QWORD *)(v1 + 400);
  v12 = *(_QWORD *)(v1 + 344);
  *(_QWORD *)(v6 + OBJC_IVAR____TtC13rtcreportingd7Session_sentEvents) = v10;
  sub_100015584(0x646F6874656D5FLL, 0xE700000000000000, v12, type metadata accessor for EventValue, v11);
  v13 = sub_1000192F4();
  if (_s10RTCUtility9XPCObjectOwet_0(v11, 1, v13) != 1)
  {
    sub_10001D470(*(_QWORD *)(v1 + 400), *(_QWORD *)(v1 + 392), &qword_10008E740);
    v14 = sub_10005FBBC();
    if (v14 == 2)
    {
      *(_QWORD *)(v1 + 328) = **(_QWORD **)(v1 + 392);
      v15 = &type metadata for UInt64;
      v16 = &protocol witness table for UInt64;
      goto LABEL_7;
    }
    if (v14 == 1)
    {
      *(_QWORD *)(v1 + 336) = **(_QWORD **)(v1 + 392);
      v15 = &type metadata for Int64;
      v16 = &protocol witness table for Int64;
LABEL_7:
      v120 = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
      v4 = v17;
      goto LABEL_10;
    }
    sub_10001C614(*(_QWORD *)(v1 + 392), type metadata accessor for EventValue);
  }
  v4 = 0xE300000000000000;
  v120 = 4079420;
LABEL_10:
  v18 = *(_QWORD *)(v1 + 384);
  v19 = *(_QWORD *)(v1 + 344);
  sub_10001D7E8(*(_QWORD *)(v1 + 400), &qword_10008E740);
  sub_100015584(0x7375746174735FLL, 0xE700000000000000, v19, type metadata accessor for EventValue, v18);
  if (_s10RTCUtility9XPCObjectOwet_0(v18, 1, v13) != 1)
  {
    sub_10001D470(*(_QWORD *)(v1 + 384), *(_QWORD *)(v1 + 376), &qword_10008E740);
    v20 = sub_10005FBBC();
    if (v20 == 2)
    {
      *(_QWORD *)(v1 + 312) = **(_QWORD **)(v1 + 376);
      v21 = &type metadata for UInt64;
      v22 = &protocol witness table for UInt64;
      v3 = v1 + 312;
    }
    else
    {
      if (v20 != 1)
      {
        v5 = 4079420;
        v3 = v1 + 312;
        sub_10001C614(*(_QWORD *)(v1 + 376), type metadata accessor for EventValue);
        goto LABEL_18;
      }
      v3 = v1 + 312;
      *(_QWORD *)(v1 + 320) = **(_QWORD **)(v1 + 376);
      v21 = &type metadata for Int64;
      v22 = &protocol witness table for Int64;
    }
    v5 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
    v0 = v23;
    goto LABEL_19;
  }
  v5 = 4079420;
  v3 = v1 + 312;
LABEL_18:
  v0 = 0xE300000000000000;
LABEL_19:
  v24 = *(unsigned __int8 *)(v1 + 464);
  sub_10001D7E8(*(_QWORD *)(v1 + 384), &qword_10008E740);
  v25 = 0x69746C616572202DLL;
  if (!v24)
    v25 = 0;
  v118 = v25;
  if (v24)
    v2 = 0xEA0000000000656DLL;
  else
    v2 = 0xE000000000000000;
  if (qword_10008E0A8 != -1)
    goto LABEL_44;
LABEL_25:
  v26 = *(_QWORD *)(v1 + 352);
  v27 = sub_10000F3D0();
  *(_QWORD *)(v1 + 408) = sub_100015718(v27, (uint64_t)qword_1000901B0);
  swift_retain_n(v26, 6);
  sub_1000111DC();
  sub_10000CA18();
  sub_10000CEB0();
  v28 = sub_100015738();
  v117 = static os_log_type_t.default.getter();
  v29 = os_log_type_enabled(v28, v117);
  v30 = v0;
  v31 = *(_QWORD **)(v1 + 352);
  if (!v29)
  {
    swift_release_n(*(_QWORD *)(v1 + 352), 6);
    sub_10000F3C8(v4);
    sub_10000F3C8(v30);
    sub_10000F3C8(v2);

LABEL_29:
    v58 = *(_QWORD *)(v1 + 344);
    v57 = *(_QWORD *)(v1 + 352);
    v36 = *(_QWORD *)(v57 + 112);
    *(_QWORD *)(v1 + 416) = v36;
    v32 = *(_QWORD *)(v57 + 120);
    *(_QWORD *)(v1 + 424) = v32;
    memcpy((void *)(v1 + 16), (const void *)(v57 + OBJC_IVAR____TtC13rtcreportingd7Session_eventExtraFieldProvider), 0x60uLL);
    sub_10000CEB0();
    sub_10000CA18();
    sub_10001596C((_QWORD *)(v1 + 16));
    sub_10001DA80();
    v60 = v59;
    v61 = sub_10005FBB4();
    v122[0] = v58;
    sub_100019BD0(v60, (uint64_t)sub_10001D810, 0, v61, (uint64_t)v122);
    v46 = v122[0];
    *(_QWORD *)(v1 + 432) = v122[0];
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_100015904((_QWORD *)(v1 + 16));
    v62 = qword_10008E080;
    sub_10000CEB0();
    result = sub_100018040();
    if (v62 == -1)
      goto LABEL_30;
    goto LABEL_46;
  }
  v111 = v2;
  v112 = v30;
  v113 = v4;
  v114 = v5;
  v115 = v3;
  v116 = v6;
  v32 = sub_100012C5C(62);
  v110 = sub_100012C5C(160);
  v122[0] = v110;
  *(_DWORD *)v32 = 136447490;
  v33 = v31[14];
  sub_100010644();
  *(_QWORD *)(v1 + 264) = sub_10005FC48(v33, v34, v122);
  sub_10005F93C(v1 + 264, v1 + 272, v35, v32 + 12);
  sub_10000781C();
  sub_100018064((uint64_t)v31);
  *(_WORD *)(v32 + 12) = 2082;
  v36 = v31[25];
  v37 = v31[26];
  v38 = v31[27];
  v39 = v31[28];
  v40 = v31[29];
  *(_QWORD *)(v1 + 112) = v31[24];
  *(_QWORD *)(v1 + 120) = v36;
  *(_QWORD *)(v1 + 128) = v37;
  *(_QWORD *)(v1 + 136) = v38;
  *(_QWORD *)(v1 + 144) = v39;
  *(_QWORD *)(v1 + 152) = v40;
  sub_1000111A4();
  sub_1000108E4();
  sub_10001CEBC();
  v41 = sub_1000159D4();
  v42 = v7;
  v44 = v43;
  sub_10000A820();
  swift_bridgeObjectRelease(v38);
  sub_100010678();
  *(_QWORD *)(v1 + 272) = sub_100014F94(v41, v44, v122);
  sub_10001F4F8(v1 + 272, v1 + 280, v45, v32 + 22);
  sub_10000BDE4();
  sub_100018064((uint64_t)v31);
  *(_WORD *)(v32 + 22) = 2050;
  v46 = *(_QWORD *)(v116 + v42);
  sub_10000AF94();
  if (v46)
  {
    *(_QWORD *)(v1 + 280) = v46 - 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 280, v1 + 288, v32 + 24, v32 + 32);
    sub_10001B380();
    *(_WORD *)(v32 + 32) = 2082;
    sub_1000108E4();
    *(_QWORD *)(v1 + 288) = sub_10005FAF4(v120, v47, v122);
    v48 = sub_10001BAB8();
    sub_10005F93C(v48, v49, v50, v51);
    sub_1000110B4(v113);
    *(_WORD *)(v32 + 42) = 2082;
    sub_1000111A4();
    *(_QWORD *)(v1 + 296) = sub_100014F94(v114, v112, v122);
    v52 = sub_100014638();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v52, v53, v32 + 44, v54);
    sub_1000110B4(v112);
    *(_WORD *)(v32 + 52) = 2080;
    sub_10000CA18();
    *(_QWORD *)(v1 + 304) = sub_100014578(v118, v55, v122);
    sub_10001F4F8(v1 + 304, v115, v56, v32 + 62);
    sub_1000110B4(v111);
    _os_log_impl((void *)&_mh_execute_header, v28, v117, "session %{public}s (%{public}s) sending message %{public}llu %{public}s:%{public}s%s", (uint8_t *)v32, 0x3Eu);
    swift_arrayDestroy(v110, 5);
    sub_1000120F8(v110);
    sub_1000120F8(v32);

    goto LABEL_29;
  }
  __break(1u);
LABEL_46:
  result = swift_once(&qword_10008E080, sub_1000584B0);
LABEL_30:
  if ((byte_1000973F0 & 1) != 0)
  {
    v64 = *(_QWORD *)(v1 + 368);
    v65 = *(_QWORD *)(v1 + 352);
    v66 = sub_100030348();
    sub_10001BC54(v64, v67, v68, v66);
    sub_100023D98(&qword_1000903F8, type metadata accessor for Session, (uint64_t)&unk_10006FBD4);
    v70 = v69;
    v71 = (_QWORD *)sub_100018E5C((uint64_t)&unk_100089CA8, 64);
    v71[2] = v65;
    v71[3] = v70;
    v71[4] = v65;
    v71[5] = v36;
    v71[6] = v32;
    v71[7] = v46;
    swift_retain_n(v65, 2);
    sub_10000CEB0();
    sub_100018040();
    v72 = sub_10005A888(v64, (uint64_t)&unk_100090420, (uint64_t)v71);
    result = swift_release(v72);
  }
  v73 = (_BYTE *)(v1 + 464);
  v74 = *(_QWORD *)(v1 + 352);
  v75 = *(_QWORD *)(v74 + OBJC_IVAR____TtC13rtcreportingd7Session_immediateBackend);
  if (v75)
  {
    v76 = *(_QWORD *)(v1 + 368);
    v119 = *(_QWORD *)(v1 + 360);
    v77 = *(_QWORD *)(v74 + OBJC_IVAR____TtC13rtcreportingd7Session_immediateBackend + 8);
    v78 = type metadata accessor for TaskPriority(0);
    sub_10001BC54(v76, v79, v80, v78);
    sub_100023D98(&qword_1000903F8, type metadata accessor for Session, (uint64_t)&unk_10006FBD4);
    v82 = v81;
    v83 = (_QWORD *)sub_100018E5C((uint64_t)&unk_100089C80, 88);
    v83[2] = v74;
    v83[3] = v82;
    v83[4] = v75;
    v83[5] = v77;
    v83[6] = v36;
    v83[7] = v32;
    v83[8] = v46;
    v83[9] = v74;
    v83[10] = v119;
    sub_10005F8C8();
    sub_10000CEB0();
    sub_100018040();
    v84 = swift_unknownObjectRetain(v75);
    v85 = sub_10005FB9C(v84, (uint64_t)&unk_100090410);
    result = swift_release(v85);
    v73 = (_BYTE *)(v1 + 464);
  }
  if ((*v73 & 1) != 0)
  {
    v86 = *(_QWORD *)(v1 + 352);
    sub_1000120B4();
    sub_10000A828();
    v87 = v86 + OBJC_IVAR____TtC13rtcreportingd7Session_realtimeBackend;
    v88 = *(_QWORD *)(v86 + OBJC_IVAR____TtC13rtcreportingd7Session_realtimeBackend);
    if (v88)
    {
      v89 = *(_QWORD *)(v1 + 368);
      v121 = *(_QWORD *)(v1 + 360);
      v90 = *(_QWORD *)(v1 + 352);
      v91 = *(_QWORD *)(v87 + 8);
      v92 = sub_100030348();
      sub_10001BC54(v89, v93, v94, v92);
      sub_100023D98(&qword_1000903F8, type metadata accessor for Session, (uint64_t)&unk_10006FBD4);
      v96 = v95;
      v97 = (_QWORD *)sub_100018E5C((uint64_t)&unk_100089C58, 88);
      v97[2] = v90;
      v97[3] = v96;
      v97[4] = v90;
      v97[5] = v88;
      v97[6] = v91;
      v97[7] = v36;
      v97[8] = v32;
      v97[9] = v46;
      v97[10] = v121;
      sub_10005F8C8();
      v98 = swift_unknownObjectRetain(v88);
      v99 = sub_10005FB9C(v98, (uint64_t)&unk_100090400);
      swift_release(v99);
    }
    else
    {
      sub_1000120B4();
      v105 = sub_10000A828();
      v106 = Logger.logObject.getter(v105);
      v107 = static os_log_type_t.fault.getter();
      if (sub_100019A28(v107))
      {
        v108 = (uint8_t *)sub_100012C5C(2);
        *(_WORD *)v108 = 0;
        _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEFAULT, "no backend for realtime session", v108, 2u);
        sub_1000120F8((uint64_t)v108);
      }

    }
    sub_10005F7CC();
    sub_100010D58();
    sub_10000F3D8();
    sub_1000111E4();
    sub_10000BFB0();
    sub_10005F9F4();
    __asm { BR              X0 }
  }
  v100 = qword_1000973C8;
  *(_QWORD *)(v1 + 440) = qword_1000973C8;
  if (v100)
  {
    sub_100014530();
    sub_1000120B4();
    sub_10000A828();
    v101 = (_QWORD *)swift_task_alloc(dword_10008F5CC);
    *(_QWORD *)(v1 + 448) = v101;
    *v101 = v1;
    v101[1] = sub_1000123BC;
    sub_10005F9F4();
    return sub_10001106C(v102, v103, v104);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100014F94(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  void *ObjectType;

  v6 = sub_100015080(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1000151D4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1000151D4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    sub_10000CA18();
  }
  sub_100015060(v12);
  return v7;
}

uint64_t sub_100015060(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

_QWORD *sub_100015080(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_10002FAAC((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_100015210(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25);
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (_QWORD *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000151D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *sub_100015210(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1000152A4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10001576C(0, v2[2] + 1, 1, (uint64_t)v2);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_10001576C((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

_QWORD *sub_1000152A4(uint64_t a1, unint64_t a2)
{
  Swift::Int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v4 = String.UTF8View._foreignCount()();
    if (v4)
      goto LABEL_6;
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return &_swiftEmptyArrayStorage;
LABEL_6:
  v5 = sub_10001551C(v4, 0);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 71, 0);
    __break(1u);
    goto LABEL_14;
  }
  v6 = v5;
  v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    v9 = "Insufficient space allocated to copy string contents";
    v10 = "Swift/StringUTF8View.swift";
    v11 = 52;
    v12 = 26;
    goto LABEL_15;
  }
  if (v7 == v4)
    return v6;
  v9 = "invalid Collection: less than 'count' elements in collection";
  v10 = "Swift/ContiguousArrayBuffer.swift";
  v11 = 60;
  v12 = 33;
LABEL_15:
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v9, v11, 2, v10, v12);
  __break(1u);
  return result;
}

unint64_t sub_100015414()
{
  return sub_1000225B4();
}

unint64_t sub_10001541C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 720) = 44;
  *(_QWORD *)(v0 + 728) = 0xE100000000000000;
  return sub_100019414();
}

uint64_t sub_100015430(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

unint64_t sub_100015468()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10001A120(v1, v0);
}

uint64_t sub_100015478()
{
  uint64_t v0;

  return v0;
}

void sub_1000154D0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_1000154E4(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

_QWORD *sub_10001551C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_10001AAC8(&qword_10008EC20);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100015584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 16) && (v8 = sub_10005F90C(a1, a2), (v9 & 1) != 0))
  {
    v10 = v8;
    v11 = *(_QWORD *)(v5 + 56);
    v12 = a4(0);
    sub_10001B93C(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v10, a5, a4);
    v13 = a5;
    v14 = 0;
    v15 = v12;
  }
  else
  {
    v15 = a4(0);
    v13 = a5;
    v14 = 1;
  }
  return _s10RTCUtility9XPCObjectOwst_0(v13, v14, 1, v15);
}

uint64_t sub_10001561C()
{
  uint64_t v0;

  return sub_10002774C(v0 + 968);
}

uint64_t sub_100015624()
{
  return static os_log_type_t.info.getter();
}

size_t sub_10001562C(uint64_t a1, int64_t a2)
{
  return sub_10005ECD4(0, a2, 0);
}

uint64_t sub_100015638()
{
  uint64_t v0;

  return sub_100037D24(v0);
}

BOOL sub_100015640@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_100015654(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_100023458(a1, v1);
}

uint64_t sub_10001565C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v13 + 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a11, a13, a10, v14 + 22);
}

uint64_t sub_100015674()
{
  return sub_100020C80();
}

uint64_t sub_100015690(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(result + 16) = v1;
  *(_QWORD *)(result + 24) = v2;
  return result;
}

uint64_t sub_1000156A4()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

uint64_t sub_1000156AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112, v3, v2);
}

uint64_t sub_1000156C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_100015700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s10RTCUtility9XPCObjectOwst_0(a1, a2, a3, a4);
}

uint64_t sub_10001570C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005DAE8);
}

uint64_t sub_100015718(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_100015730()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 488));
}

uint64_t sub_100015738()
{
  return Logger.logObject.getter();
}

uint64_t sub_100015740()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
}

uint64_t sub_100015748()
{
  uint64_t v0;

  return sub_100037D24(v0);
}

uint64_t sub_100015750()
{
  uint64_t v0;

  return sub_100033A4C(*(_QWORD *)(v0 - 72), *(_QWORD *)(v0 - 224));
}

void sub_10001575C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

char *sub_10001576C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001AAC8(&qword_10008EC20);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10002FB70(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100015840(v14, v8, v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_100015840(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

_QWORD *sub_100015904(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[7];
  v5 = a1[9];
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

_QWORD *sub_10001596C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[5];
  v3 = a1[7];
  v4 = a1[9];
  v5 = a1[11];
  swift_bridgeObjectRetain(a1[3]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_1000159D4()
{
  __int128 *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  void *v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v8;
  __int128 v9;

  v9 = *v0;
  v8 = v9;
  sub_10001E08C((uint64_t)&v9);
  sub_10000BDF4();
  v1 = *((_QWORD *)v0 + 2);
  v2 = (void *)*((_QWORD *)v0 + 3);
  sub_100007840();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  sub_10000BDF4();
  v5 = *((_QWORD *)v0 + 4);
  v4 = (void *)*((_QWORD *)v0 + 5);
  swift_bridgeObjectRetain(v4);
  v6._countAndFlagsBits = v5;
  v6._object = v4;
  String.append(_:)(v6);
  sub_10000781C();
  return v8;
}

uint64_t XPCConnection.remoteUID.getter()
{
  uint64_t v0;

  return xpc_connection_get_euid(*(xpc_connection_t *)(v0 + 16));
}

const char *MessageKeys.eager.unsafeMutableAddressor()
{
  return "eager";
}

const char *MessageKeys.overrideSampling.unsafeMutableAddressor()
{
  return "orsf";
}

const char *MessageKeys.hierarchyToken.unsafeMutableAddressor()
{
  return "hktn";
}

const char *MessageKeys.samplingUUID.unsafeMutableAddressor()
{
  return "suuid";
}

void *MessageKeys.serviceName.unsafeMutableAddressor()
{
  return &static MessageKeys.serviceName;
}

void *MessageKeys.clientType.unsafeMutableAddressor()
{
  return &static MessageKeys.clientType;
}

const char *MessageKeys.clientName.unsafeMutableAddressor()
{
  return "cn";
}

uint64_t sub_100015AB8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[41] + 8))(v0[60], v0[42]);
}

xpc_object_t sub_100015ACC()
{
  uint64_t v0;

  return xpc_dictionary_create_reply(*(xpc_object_t *)(v0 + 240));
}

uint64_t sub_100015AD4()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100021264(v0, v1);
}

void sub_100015AE0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  NSObject *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v5, v6, a4, v4, 2u);
}

void sub_100015B10(uint64_t a1@<X8>)
{
  char v1;

  *(_QWORD *)(a1 + 64) |= 1 << v1;
}

uint64_t sub_100015B28()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100015B3C()
{
  uint64_t v0;

  return sub_100033B1C(*(_QWORD *)(v0 - 152));
}

uint64_t sub_100015B44(uint64_t a1, uint64_t a2)
{
  return sub_100021134(a1, a2);
}

uint64_t sub_100015B54()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_100015B60()
{
  return Logger.logObject.getter();
}

uint64_t sub_100015B68()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100015B7C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

void sub_100015B88()
{
  char v0;
  char v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  sub_10000AFF4();
  sub_100015468();
  v1 = v0;
  sub_10000A818();
  if ((v1 & 1) != 0)
  {
    sub_10001D3E4();
    sub_10000788C();
    v2 = sub_10001AAC8((uint64_t *)&unk_10008F880);
    v10 = sub_10001952C(v2, v3, v4, v5, v6, v7, v8, v9, v18, v20);
    sub_10001121C(v10, v11, v12, v13, v14, v15, v16, v17, v19, v21);
    type metadata accessor for Session(0);
    sub_10001FD90();
    sub_10000BD70();
  }
  sub_100011108();
}

uint64_t sub_100015C14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_100014F94(a1, v3, a3);
}

uint64_t sub_100015C1C()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_100015C2C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100006D9C(v1, v0);
}

uint64_t sub_100015C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

uint64_t sub_100015C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a12, a9);
}

uint64_t sub_100015C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_100015C74()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100015C90()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100015CB4()
{
  return static os_log_type_t.fault.getter();
}

uint64_t sub_100015CBC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2;
  return swift_task_dealloc(a1);
}

void sub_100015CC8(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  os_log_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  char *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  void **v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  BOOL v140;
  int v141;
  NSString v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  BOOL v152;
  uint64_t v153;
  uint64_t v154;
  BOOL v155;
  uint64_t v156;
  uint64_t v157;
  BOOL v158;
  _QWORD *v159;
  void **v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  BOOL v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  BOOL v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  BOOL v182;
  _QWORD *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  BOOL v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  BOOL v196;
  uint64_t v197;
  uint64_t v198;
  BOOL v199;
  uint64_t v200;
  uint64_t v201;
  BOOL v202;
  uint64_t v203;
  uint64_t v204;
  BOOL v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  NSObject *v212;
  unint64_t v213;
  double *v214;
  _QWORD *v215;
  uint64_t v216;
  double v217;
  uint64_t v218;
  uint64_t v219;
  char v221;
  uint64_t v222;
  uint64_t v223;
  BOOL v224;
  uint64_t v225;
  uint64_t v226;
  BOOL v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  BOOL v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  char *v237;
  uint64_t v238;
  unsigned __int8 v239;
  int v240;
  void *v241;
  void *v242;
  uint64_t v243;
  void (*v244)(char *);
  uint64_t v245;
  uint64_t v246;
  NSObject *v247;
  os_log_type_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  os_log_type_t v255;
  uint8_t *v256;
  unint64_t v257;
  os_log_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char v265;
  BOOL v267;
  void (*v268)(char *);
  NSObject *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  __n128 *v282;
  char *v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  NSObject *v289;
  uint64_t v290;
  void (*v291)(os_log_t);
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  __n128 *inited;
  uint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  NSObject *v310;
  NSObject *v311;
  uint64_t v312;
  uint64_t v313;
  _QWORD *v314;
  double v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  _QWORD *v321;
  uint64_t v322;
  void (*v323)(char *);
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  __n128 *v338;
  _QWORD *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t *v343;
  NSObject *v344;
  os_log_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  char v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  char v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  char *v370;
  NSObject *v371;
  void *v372;
  void *v373;
  uint64_t v374;
  uint64_t v375;
  BOOL v377;
  int *v378;
  uint64_t v379;
  uint64_t v380;
  double *v381;
  int64_t v382;
  uint64_t v383;
  _QWORD *v384;
  uint64_t v385;
  uint64_t v386;
  char v387;
  uint64_t v388;
  uint64_t v389;
  char *v390;
  void *v391;
  uint64_t v392;
  uint64_t v393;
  NSObject *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  double *v398;
  uint64_t v399;
  _QWORD *v400;
  _QWORD *v401;
  uint64_t v402;
  uint64_t v403;
  _QWORD *v404;
  char **v405;
  uint64_t v406;
  _QWORD *v407;
  uint64_t v408;
  uint64_t v409;
  double *v410;
  uint64_t v411;
  char *v412;
  uint64_t v413;
  _QWORD *v414;
  char *v415;
  char *v416;
  __int128 v417;
  char *v418;
  uint64_t v419;
  uint64_t *v420;
  __int128 v421;
  uint64_t v422;
  _BYTE *v423;
  uint64_t v424;
  uint64_t v425;
  char *v426;
  _QWORD *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  int v431;
  uint64_t v432;
  int v433;
  uint64_t v434;
  char *v435;
  uint64_t v436;
  int64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  char *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  int64_t v449;
  unint64_t isa;
  os_log_t v451;
  _BYTE *v452;
  _BYTE *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  _BYTE *v458;
  uint64_t v459;
  NSObject *v460;
  NSObject *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  __int128 v469;
  __int128 v470;
  uint64_t v471;
  uint64_t v472;
  char v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  _QWORD *v478;
  _QWORD *v479;
  _BYTE v480[233];
  char v481;
  uint64_t v482;
  char v483;
  _BYTE v484[16];
  _BYTE v485[16];
  __int128 v486;
  __int128 v487;
  char v488;
  char v489;
  NSObject *v490;
  char v491[17];

  v3 = v2;
  v407 = a2;
  v411 = type metadata accessor for SessionConfiguration.Backend(0);
  sub_1000192FC();
  __chkstk_darwin(v5);
  sub_10001D17C();
  v410 = v6;
  v406 = type metadata accessor for SessionConfiguration.BackendHTTP(0);
  sub_1000192FC();
  __chkstk_darwin(v7);
  sub_10001D17C();
  v405 = v8;
  sub_10001AAC8(&qword_10008E780);
  sub_1000192FC();
  __chkstk_darwin(v9);
  sub_10001D17C();
  v422 = v10;
  v425 = sub_10000F3C0();
  v409 = *(_QWORD *)(v425 - 8);
  sub_1000192FC();
  __chkstk_darwin(v11);
  sub_10001065C();
  v408 = v12;
  sub_100015684();
  __chkstk_darwin(v13);
  v412 = (char *)&v405 - v14;
  v15 = type metadata accessor for Locale(0);
  v438 = *(_QWORD *)(v15 - 8);
  v439 = v15;
  sub_1000192FC();
  __chkstk_darwin(v16);
  sub_10001065C();
  v424 = v17;
  sub_100015684();
  __chkstk_darwin(v18);
  v426 = (char *)&v405 - v19;
  v20 = sub_10000F3D0();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v405 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v435 = (char *)&v405 - v25;
  sub_100015684();
  __chkstk_darwin(v26);
  v415 = (char *)&v405 - v27;
  sub_100015684();
  __chkstk_darwin(v28);
  v30 = ((char *)&v405 - v29);
  v31 = a1[4];
  sub_100028B4C(a1);
  v456 = sub_10001E42C(*(uint64_t (**)(uint64_t, uint64_t))(v31 + 16));
  v457 = v32;
  v33 = a1[4];
  v427 = a1;
  v34 = a1;
  v35 = v30;
  sub_100028B4C(v34);
  v463 = sub_10001E42C(*(uint64_t (**)(uint64_t, uint64_t))(v33 + 24));
  v37 = v36;
  v38 = *v2;
  v39 = *(_QWORD *)(*v2 + 64);
  v434 = *v2 + 64;
  v40 = 1 << *(_BYTE *)(v38 + 32);
  v41 = -1;
  v479 = &_swiftEmptyArrayStorage;
  if (v40 < 64)
    v41 = ~(-1 << v40);
  v42 = v41 & v39;
  v478 = &_swiftEmptyArrayStorage;
  v437 = (unint64_t)(v40 + 63) >> 6;
  v420 = &v468;
  v458 = &v480[16];
  v452 = &v480[232];
  v453 = &v480[216];
  v423 = &v480[224];
  v43 = swift_bridgeObjectRetain(v38);
  v44 = v42;
  v45 = 0;
  v413 = 2;
  v421 = xmmword_10006D1A0;
  v417 = xmmword_10006D190;
  v418 = (char *)&type metadata for Any + 8;
  v414 = v3;
  v442 = v21;
  v443 = v20;
  v416 = v24;
  v464 = v37;
  v461 = v35;
  v428 = v43;
  while (1)
  {
LABEL_4:
    if (v44)
    {
      v46 = __clz(__rbit64(v44));
      v44 &= v44 - 1;
      v47 = v46 | (v45 << 6);
    }
    else
    {
      v48 = v45 + 1;
      if (__OFADD__(v45, 1))
        goto LABEL_342;
      if (v48 >= v437)
        goto LABEL_336;
      v49 = *(_QWORD *)(v434 + 8 * v48);
      ++v45;
      if (!v49)
      {
        v45 = v48 + 1;
        if (v48 + 1 >= v437)
          goto LABEL_336;
        v49 = *(_QWORD *)(v434 + 8 * v45);
        if (!v49)
        {
          v45 = v48 + 2;
          if (v48 + 2 >= v437)
            goto LABEL_336;
          v49 = *(_QWORD *)(v434 + 8 * v45);
          if (!v49)
          {
            v50 = v48 + 3;
            if (v50 >= v437)
              goto LABEL_336;
            v49 = *(_QWORD *)(v434 + 8 * v50);
            if (!v49)
            {
              while (1)
              {
                v45 = v50 + 1;
                if (__OFADD__(v50, 1))
                  goto LABEL_344;
                if (v45 >= v437)
                  break;
                v49 = *(_QWORD *)(v434 + 8 * v45);
                ++v50;
                if (v49)
                  goto LABEL_19;
              }
LABEL_336:
              sub_10000CA20();
              sub_10000CEA8();
              swift_bridgeObjectRelease(v37);
              v400 = v479;
              v401 = v478;
              v402 = v414[2];
              v403 = swift_bridgeObjectRetain(v414[3]);
              v404 = v407;
              *v407 = v400;
              v404[1] = v401;
              *((_BYTE *)v404 + 16) = 0;
              v404[3] = v402;
              v404[4] = v403;
              *((_BYTE *)v404 + 40) = v413;
              return;
            }
            v45 = v50;
          }
        }
      }
LABEL_19:
      v44 = (v49 - 1) & v49;
      v47 = __clz(__rbit64(v49)) + (v45 << 6);
    }
    v51 = *(_QWORD *)(v43 + 56) + 32 * v47;
    v52 = *(_QWORD *)v51;
    v455 = *(_QWORD *)(v51 + 8);
    v462 = *(_QWORD *)(v51 + 16);
    v53 = *(unsigned __int8 *)(v51 + 24);
    if (v53)
      break;
    v460 = *(NSObject **)(v462 + 16);
    if (!v460)
      continue;
    v448 = v44;
    v449 = v45;
    v117 = *(_QWORD *)(v43 + 48) + 16 * v47;
    v118 = *(_QWORD *)(v117 + 8);
    v444 = *(char **)v117;
    v119 = v462;
    v459 = v462 + 32;
    v446 = v118;
    swift_bridgeObjectRetain(v118);
    v454 = v52;
    sub_100020A48(v52, v455, v119, 0);
    swift_bridgeObjectRetain(v119);
    v120 = 0;
LABEL_74:
    if (v120 >= *(_QWORD *)(v462 + 16))
      goto LABEL_338;
    memcpy(v480, (const void *)(v459 + 240 * v120), sizeof(v480));
    sub_100028AC0((uint64_t)v480, (uint64_t)v485);
    sub_100028AC0((uint64_t)v485, (uint64_t)&v486);
    if (*((_QWORD *)&v486 + 1))
    {
      v469 = v486;
      sub_10001FC94();
      sub_10001561C();
      sub_100019414();
      v121 = sub_100028AC8();
      v124 = sub_10000BF9C(v121, (uint64_t)&type metadata for String, v122, v123);
      v125 = *(_QWORD *)(v124 + 16);
      if (!v125)
        goto LABEL_132;
      sub_100028AA0();
      v130 = v81 && v127 == v129;
      if (v130 || (sub_100012C54(v126, v127, v128, v129) & 1) != 0)
        goto LABEL_82;
      if (v125 == 1)
        goto LABEL_132;
      sub_100028AA0();
      v169 = v81 && v166 == v168;
      if (v169 || (sub_100012C54(v165, v166, v167, v168) & 1) != 0)
      {
LABEL_82:
        sub_10000A828();
      }
      else
      {
        if (v125 == 2)
        {
LABEL_132:
          sub_10000A828();
LABEL_133:
          sub_10001B128();
          goto LABEL_256;
        }
        v170 = v124 + 72;
        v171 = 2;
        while (1)
        {
          v172 = v171 + 1;
          if (__OFADD__(v171, 1))
            goto LABEL_343;
          sub_100028AA0();
          v177 = v81 && v174 == v176;
          if (v177 || (sub_100012C54(v173, v174, v175, v176) & 1) != 0)
            break;
          v170 += 16;
          ++v171;
          if (v172 == v125)
          {
            sub_10000A828();
            v35 = v461;
            goto LABEL_133;
          }
        }
        sub_10000A828();
        v35 = v461;
      }
    }
    else
    {
      sub_10001561C();
    }
    sub_100028AC0((uint64_t)v458, (uint64_t)v484);
    sub_100028AC0((uint64_t)v484, (uint64_t)&v487);
    if (*((_QWORD *)&v487 + 1))
    {
      v469 = v487;
      sub_10001541C();
      v131 = sub_100028AC8();
      v134 = (_QWORD *)sub_10000BF9C(v131, (uint64_t)&type metadata for String, v132, v133);
      v135 = v134;
      v136 = v134[2];
      if (!v136)
      {
        sub_10000A828();
        sub_10001B128();
        v35 = v461;
        goto LABEL_256;
      }
      v137 = v134[4];
      v138 = (void *)v134[5];
      sub_100007840();
      LOBYTE(v137) = sub_10001E1D4(v137, v138);
      sub_10000A818();
      if ((v137 & 1) == 0)
      {
        if (v136 == 1)
          goto LABEL_170;
        v160 = (void **)(v135 + 7);
        v161 = 1;
        while (1)
        {
          v162 = v161 + 1;
          if (__OFADD__(v161, 1))
            break;
          v164 = (uint64_t)*(v160 - 1);
          v163 = *v160;
          sub_10000CA18();
          LOBYTE(v164) = sub_10001E1D4(v164, v163);
          sub_10000AF70();
          if ((v164 & 1) != 0)
            goto LABEL_87;
          ++v161;
          v160 += 2;
          if (v162 == v136)
            goto LABEL_170;
        }
        __break(1u);
LABEL_338:
        __break(1u);
LABEL_339:
        __break(1u);
LABEL_340:
        __break(1u);
        goto LABEL_341;
      }
LABEL_87:
      sub_10000A828();
      v35 = v461;
    }
    sub_100028AD8((uint64_t)v453, (uint64_t)&v483);
    sub_100028AD8((uint64_t)&v483, (uint64_t)&v489);
    v140 = (v489 & 1) == 0 && v489 != 2;
    if ((((uint64_t (*)(void))DiagnosticLogSubmissionEnabled)() & 1) == 0 && !v140)
    {
      sub_100014570();
      sub_100015730();
      sub_10001B128();
      if (qword_10008DFC8 != -1)
        swift_once(&qword_10008DFC8, sub_100025234);
      sub_100018E70(v443, (uint64_t)qword_100097278);
      v291(v35);
      v292 = sub_10001B9C4((uint64_t)&unk_1000867E8);
      v293 = v457;
      *(_QWORD *)(v292 + 16) = v456;
      *(_QWORD *)(v292 + 24) = v293;
      v294 = sub_10001B9C4((uint64_t)&unk_100086810);
      v295 = v464;
      *(_QWORD *)(v294 + 16) = v463;
      *(_QWORD *)(v294 + 24) = v295;
      v296 = v294;
      v459 = v294;
      sub_10000BD20(v293);
      v297 = sub_10000BD20(v295);
      v298 = Logger.logObject.getter(v297);
      LODWORD(v451) = sub_100028B60(v298);
      isa = sub_100018E5C((uint64_t)&unk_100086838, 17);
      *(_BYTE *)(isa + 16) = 34;
      v447 = sub_100018E5C((uint64_t)&unk_100086860, 17);
      *(_BYTE *)(v447 + 16) = 8;
      v299 = sub_10001B9C4((uint64_t)&unk_100086888);
      *(_QWORD *)(v299 + 16) = sub_100028A94;
      *(_QWORD *)(v299 + 24) = v292;
      v37 = sub_10001B9C4((uint64_t)&unk_1000868B0);
      *(_QWORD *)(v37 + 16) = sub_100028A30;
      *(_QWORD *)(v37 + 24) = v299;
      v300 = sub_100018E5C((uint64_t)&unk_1000868D8, 17);
      *(_BYTE *)(v300 + 16) = 34;
      v301 = sub_100018E5C((uint64_t)&unk_100086900, 17);
      *(_BYTE *)(v301 + 16) = 8;
      v302 = sub_10001B9C4((uint64_t)&unk_100086928);
      *(_QWORD *)(v302 + 16) = sub_100028A94;
      *(_QWORD *)(v302 + 24) = v296;
      v35 = (os_log_t)sub_10001B9C4((uint64_t)&unk_100086950);
      v35[2].isa = (Class)sub_100028A30;
      v35[3].isa = (Class)v302;
      v303 = sub_10001AAC8(&qword_10008E7B0);
      inited = (__n128 *)swift_initStackObject(v303, &v466);
      sub_10001F578(inited);
      v305 = isa;
      v306[4] = sub_100028A38;
      v306[5] = v305;
      v307 = v447;
      v306[6] = sub_100028A38;
      v306[7] = v307;
      v306[8] = sub_100028A34;
      v306[9] = v37;
      v306[10] = sub_100028A38;
      v306[11] = v300;
      v306[12] = sub_100028A38;
      v306[13] = v301;
      v306[14] = sub_100028A34;
      v306[15] = v35;
      v446 = v292;
      sub_10001E534();
      sub_10000C038();
      sub_10001FCF8();
      v444 = (char *)v302;
      swift_retain(v302);
      sub_10000F488();
      sub_10001E194();
      sub_100028B3C();
      sub_100014528();
      v445 = v301;
      sub_100019A20();
      sub_10000BDBC();
      sub_10000A818();
      if (sub_10001FE84((os_log_type_t)v451))
      {
        sub_100028B1C();
        v451 = (os_log_t)sub_10001BB48();
        sub_100011188((uint64_t)v451);
        LODWORD(isa) = v301;
        MEMORY[0xB] = 8;
        sub_10001AF98();
        sub_10001AE9C();
        v308 = sub_10001064C();
        sub_10001F4D0(v308);
        sub_1000194E8();
        sub_10001B380();
        sub_10000BD28();
        sub_10000F3C8(v292);
        MEMORY[0x14] = 34;
        sub_10000AF94();
        MEMORY[0x15] = 8;
        sub_100028B00();
        sub_100019450();
        v309 = sub_100028AF0();
        sub_10001D044(v309);
        sub_10001D37C();
        sub_100019B1C();
        sub_10000BDB4();
        sub_10000F3C8(v37);
        v310 = v460;
        sub_10001D9C0((void *)&_mh_execute_header, v460, (os_log_type_t)isa, "skipping %{public}s:%{public}s: dnu disabled");
        v35 = v451;
        sub_10000BDEC((uint64_t)v451);
        sub_1000120F8((uint64_t)v35);
        sub_1000120F8(8);

        sub_10001C428();
        sub_100015AB8();
      }
      else
      {
        sub_100028B68();
        v346 = v464;
        sub_10000A818();
        sub_10001D37C();
        sub_100019B1C();
        sub_10000BDB4();
        sub_100028B00();
        sub_10000AF94();
        sub_10000CA20();
        sub_1000194E8();
        sub_10001B380();
        sub_10000BD28();
        sub_10001AF98();
        sub_100010370();
        sub_10001C428();
        sub_100015AB8();
        v37 = v346;
      }
      goto LABEL_334;
    }
    sub_100028AD8((uint64_t)v452, (uint64_t)&v481);
    sub_100028AD8((uint64_t)&v481, (uint64_t)v491);
    v141 = v491[0];
    if (sub_10001E218() && v141 != 2 && (v141 & 1) == 0)
    {
      sub_100014570();
      sub_100015730();
      sub_10001B128();
      v322 = v463;
      if (qword_10008DFC8 != -1)
        swift_once(&qword_10008DFC8, sub_100025234);
      sub_100018E70(v443, (uint64_t)qword_100097278);
      v323(v415);
      v324 = sub_10001B9C4((uint64_t)&unk_100086A40);
      v325 = v457;
      *(_QWORD *)(v324 + 16) = v456;
      *(_QWORD *)(v324 + 24) = v325;
      v326 = sub_10001B9C4((uint64_t)&unk_100086A68);
      v327 = v464;
      *(_QWORD *)(v326 + 16) = v322;
      *(_QWORD *)(v326 + 24) = v327;
      v459 = v326;
      sub_10000BD20(v325);
      v328 = sub_10000BD20(v327);
      v329 = Logger.logObject.getter(v328);
      LODWORD(v451) = sub_100028B60(v329);
      v330 = sub_100018E5C((uint64_t)&unk_100086A90, 17);
      *(_BYTE *)(v330 + 16) = 34;
      isa = sub_100018E5C((uint64_t)&unk_100086AB8, 17);
      *(_BYTE *)(isa + 16) = 8;
      v331 = sub_10001B9C4((uint64_t)&unk_100086AE0);
      *(_QWORD *)(v331 + 16) = sub_100028A94;
      *(_QWORD *)(v331 + 24) = v324;
      v332 = sub_10001B9C4((uint64_t)&unk_100086B08);
      *(_QWORD *)(v332 + 16) = sub_100028A30;
      *(_QWORD *)(v332 + 24) = v331;
      v333 = sub_100018E5C((uint64_t)&unk_100086B30, 17);
      *(_BYTE *)(v333 + 16) = 34;
      v334 = sub_100018E5C((uint64_t)&unk_100086B58, 17);
      *(_BYTE *)(v334 + 16) = 8;
      v335 = sub_10001B9C4((uint64_t)&unk_100086B80);
      *(_QWORD *)(v335 + 16) = sub_100028A94;
      *(_QWORD *)(v335 + 24) = v326;
      v336 = sub_10001B9C4((uint64_t)&unk_100086BA8);
      *(_QWORD *)(v336 + 16) = sub_100028A30;
      *(_QWORD *)(v336 + 24) = v335;
      v337 = sub_10001AAC8(&qword_10008E7B0);
      v338 = (__n128 *)sub_100018E5C(v337, 128);
      sub_10001F578(v338);
      v339[4] = sub_100028A38;
      v339[5] = v330;
      v340 = isa;
      v339[6] = sub_100028A38;
      v339[7] = v340;
      v339[8] = sub_100028A34;
      v339[9] = v332;
      v339[10] = sub_100028A38;
      v339[11] = v333;
      v339[12] = sub_100028A38;
      v339[13] = v334;
      v339[14] = sub_100028A34;
      v339[15] = v336;
      v447 = v324;
      sub_10001E534();
      v445 = v331;
      sub_10000C038();
      sub_10001FCF8();
      v444 = (char *)v335;
      sub_100014528();
      sub_100019A20();
      sub_10001E194();
      v341 = v332;
      sub_100028B3C();
      v446 = v333;
      swift_retain(v333);
      sub_10000F488();
      sub_10000BDBC();
      sub_10000A818();
      v342 = v451;
      if (os_log_type_enabled(v460, (os_log_type_t)v451))
      {
        sub_100028B1C();
        LODWORD(v441) = v342;
        v451 = (os_log_t)sub_10001BB48();
        *(_QWORD *)&v469 = v451;
        *(_WORD *)v342 = 514;
        v37 = 34;
        *(_BYTE *)(v342 + 2) = 34;
        sub_10000AF94();
        *(_BYTE *)(v342 + 3) = 8;
        sub_10001B380();
        sub_10001AE9C();
        v467 = sub_10001064C();
        v343 = v420;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, v420, v334, v342 + 12);
        swift_release(v447);
        sub_100028B00();
        sub_10000CEA8();
        sub_10000F3C8(v324);
        *(_BYTE *)(v342 + 12) = 34;
        sub_1000194E8();
        *(_BYTE *)(v342 + 13) = 8;
        sub_10001AF98();
        sub_100019450();
        v467 = sub_100028AF0();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, v343, v341, v342 + 22);
        sub_10001D37C();
        sub_100019B1C();
        sub_10000BDB4();
        sub_10000F3C8(34);
        v344 = v460;
        sub_10001D9C0((void *)&_mh_execute_header, v460, (os_log_type_t)v441, "skipping %{public}s:%{public}s: PE disabled");
        v345 = v451;
        sub_10000BDEC((uint64_t)v451);
        sub_1000120F8((uint64_t)v345);
        sub_1000120F8(v342);

      }
      else
      {
        sub_100028B68();
        v37 = v464;
        swift_bridgeObjectRelease(v464);
        sub_10001D37C();
        sub_100019B1C();
        sub_10000BDB4();
        sub_10001AF98();
        sub_1000194E8();
        sub_10000CA20();
        swift_release(v447);
        sub_100028B00();
        sub_10000CEA8();
        sub_10001B380();
        sub_10000AF94();
      }
      sub_10001C428();
      (*(void (**)(char *, uint64_t))(v442 + 8))(v415, v443);
      goto LABEL_299;
    }
    v142 = String._bridgeToObjectiveC()();
    v143 = MGCopyAnswer(v142, 0);

    if (!v143)
      goto LABEL_349;
    v144 = *(_QWORD **)&v480[104];
    type metadata accessor for CFString(0);
    v146 = (void *)swift_dynamicCastUnknownClassUnconditional(v143, v145, 0, 0, 0);
    v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(v146);
    v135 = v148;

    if (v144)
    {
      v149 = v144[2];
      if (!v149)
        goto LABEL_170;
      v150 = v144[4];
      v151 = v144[5];
      v152 = v150 == v147 && v151 == (_QWORD)v135;
      if (!v152 && (sub_10001DF90(v150, v151) & 1) == 0)
      {
        if (v149 == 1)
          goto LABEL_170;
        v153 = v144[6];
        v154 = v144[7];
        v155 = v153 == v147 && v154 == (_QWORD)v135;
        if (!v155 && (sub_10001DF90(v153, v154) & 1) == 0)
        {
          if (v149 == 2)
            goto LABEL_170;
          sub_100007840();
          while (1)
          {
            if (__OFADD__(2, 1))
              goto LABEL_345;
            v156 = v144[8];
            v157 = v144[9];
            v158 = v156 == v147 && v157 == (_QWORD)v135;
            if (v158 || (sub_10001DF90(v156, v157) & 1) != 0)
              break;
            sub_1000199CC();
            if (v81)
            {
              sub_10000A828();
              v159 = v144;
LABEL_171:
              swift_bridgeObjectRelease(v159);
LABEL_172:
              sub_10001B128();
              goto LABEL_255;
            }
          }
          sub_10000A818();
        }
      }
    }
    v178 = *(_QWORD **)&v480[96];
    if (*(_QWORD *)&v480[96])
    {
      v179 = *(_QWORD *)(*(_QWORD *)&v480[96] + 16);
      if (v179)
      {
        v180 = *(_QWORD *)(*(_QWORD *)&v480[96] + 32);
        v181 = *(_QWORD *)(*(_QWORD *)&v480[96] + 40);
        v182 = v180 == v147 && v181 == (_QWORD)v135;
        if (!v182 && (sub_10001DF90(v180, v181) & 1) == 0)
        {
          if (v179 == 1)
            goto LABEL_159;
          v194 = v178[6];
          v195 = v178[7];
          v196 = v194 == v147 && v195 == (_QWORD)v135;
          if (!v196 && (sub_10001DF90(v194, v195) & 1) == 0)
          {
            if (v179 == 2)
              goto LABEL_159;
            sub_100007840();
            while (1)
            {
              if (__OFADD__(2, 1))
                goto LABEL_346;
              v197 = v178[8];
              v198 = v178[9];
              v199 = v197 == v147 && v198 == (_QWORD)v135;
              if (v199 || (sub_10001DF90(v197, v198) & 1) != 0)
                break;
              sub_1000199CC();
              if (v81)
              {
                sub_10000A818();
                goto LABEL_159;
              }
            }
            v193 = v178;
LABEL_169:
            swift_bridgeObjectRelease(v193);
          }
        }
LABEL_170:
        v159 = v135;
        goto LABEL_171;
      }
    }
LABEL_159:
    sub_10000A828();
    v183 = *(_QWORD **)&v480[208];
    if (*(_QWORD *)&v480[208])
    {
      v184 = sub_10000CA18();
      v185 = v426;
      v186 = static Locale.current.getter(v184);
      v187 = Locale.regionCode.getter(v186);
      v135 = v188;
      (*(void (**)(char *, uint64_t))(v438 + 8))(v185, v439);
      if (!v135)
      {
        v159 = v183;
        goto LABEL_171;
      }
      v189 = v183[2];
      if (!v189)
      {
LABEL_168:
        v193 = v183;
        goto LABEL_169;
      }
      v190 = v183[4];
      v191 = v183[5];
      v192 = v190 == v187 && v135 == (_QWORD *)v191;
      if (!v192 && (sub_1000120EC(v190, v191, v187) & 1) == 0)
      {
        if (v189 == 1)
          goto LABEL_168;
        v200 = v183[6];
        v201 = v183[7];
        v202 = v200 == v187 && v135 == (_QWORD *)v201;
        if (!v202 && (sub_1000120EC(v200, v201, v187) & 1) == 0)
        {
          if (v189 == 2)
            goto LABEL_168;
          sub_10000CA18();
          while (1)
          {
            if (__OFADD__(2, 1))
              goto LABEL_348;
            v203 = v183[8];
            v204 = v183[9];
            v205 = v203 == v187 && v135 == (_QWORD *)v204;
            if (v205 || (sub_1000120EC(v203, v204, v187) & 1) != 0)
              break;
            sub_1000199CC();
            if (v81)
            {
              sub_10000A828();
              sub_10000F3C8((uint64_t)v183);
              goto LABEL_172;
            }
          }
          sub_10000A828();
        }
      }
      sub_10000AF70();
      sub_10000A828();
    }
    sub_10002793C((uint64_t)v423, (uint64_t)&v482, &qword_10008E7D0);
    v206 = v424;
    v208 = static Locale.current.getter(v207);
    v209 = Locale.regionCode.getter(v208);
    v211 = v210;
    (*(void (**)(uint64_t, uint64_t))(v438 + 8))(v206, v439);
    if (!v211)
      goto LABEL_244;
    sub_10002793C((uint64_t)&v482, (uint64_t)&v490, &qword_10008E7D0);
    v212 = v490;
    if (!v490 || (isa = (unint64_t)v490[2].isa) == 0)
    {
LABEL_243:
      sub_10000A828();
LABEL_244:
      if (v480[56])
        v217 = 1.0;
      else
        v217 = *(double *)&v480[48];
      goto LABEL_247;
    }
    sub_10001E698(&v482);
    v213 = 0;
    v451 = v212 + 4;
    v447 = (uint64_t)v212;
    while (1)
    {
      sub_100026CB0(v213, 1, (uint64_t)v212);
      v214 = (double *)&v451[2 * v213];
      v215 = *(_QWORD **)v214;
      v216 = *(_QWORD *)(*(_QWORD *)v214 + 16);
      if (v216)
        break;
LABEL_241:
      if (++v213 == isa)
      {
        sub_100005400(&v482);
        goto LABEL_243;
      }
    }
    v217 = v214[1];
    v218 = v215[4];
    v219 = v215[5];
    sub_1000111A4();
    if (v218 == v209 && v211 == v219)
      goto LABEL_259;
    v221 = sub_10001DF90(v218, v219);
    sub_10000BD20((uint64_t)v215);
    if ((v221 & 1) != 0)
      goto LABEL_258;
    if (v216 == 1)
      goto LABEL_240;
    v222 = v215[6];
    v223 = v215[7];
    v224 = v222 == v209 && v211 == v223;
    if (!v224 && (sub_10001DF90(v222, v223) & 1) == 0)
    {
      if (v216 != 2)
      {
        v225 = v215[8];
        v226 = v215[9];
        v227 = v225 == v209 && v211 == v226;
        if (v227 || (sub_10001DF90(v225, v226) & 1) != 0)
          goto LABEL_258;
        if (v216 != 3)
        {
          v228 = v215 + 11;
          v229 = 3;
          while (1)
          {
            v230 = v229 + 1;
            if (__OFADD__(v229, 1))
              break;
            v231 = *(v228 - 1);
            v232 = *v228;
            v233 = v231 == v209 && v211 == v232;
            if (v233 || (sub_10001DF90(v231, v232) & 1) != 0)
              goto LABEL_258;
            v228 += 2;
            ++v229;
            if (v230 == v216)
              goto LABEL_240;
          }
LABEL_341:
          __break(1u);
LABEL_342:
          __break(1u);
LABEL_343:
          __break(1u);
LABEL_344:
          __break(1u);
LABEL_345:
          __break(1u);
LABEL_346:
          __break(1u);
          goto LABEL_347;
        }
      }
LABEL_240:
      sub_10000F3C8((uint64_t)v215);
      sub_10000A820();
      v212 = v447;
      goto LABEL_241;
    }
LABEL_258:
    sub_10000F3C8((uint64_t)v215);
LABEL_259:
    sub_100005400(&v482);
    sub_10000A828();
    sub_10000A820();
LABEL_247:
    v234 = v427[3];
    v235 = v427[4];
    sub_100028B4C(v427);
    if ((*(double (**)(uint64_t, uint64_t))(v235 + 48))(v234, v235) < v217)
    {
      v236 = v480[201];
      v237 = *(char **)&v480[160];
      v238 = *(_QWORD *)&v480[168];
      v239 = v480[176];
      v240 = v480[153];
      v241 = *(void **)&v480[136];
      v242 = *(void **)&v480[128];
      v243 = v422;
      v447 = *(_QWORD *)&v480[32];
      isa = *(_QWORD *)&v480[40];
      URL.init(string:)(*(_QWORD *)&v480[32]);
      if (_s10RTCUtility9XPCObjectOwet_0(v243, 1, v425) != 1)
      {
        sub_100015730();
        v363 = v409;
        v364 = v243;
        v365 = v425;
        v460 = *(NSObject **)(v409 + 32);
        ((void (*)(char *, uint64_t, uint64_t))v460)(v412, v364, v425);
        if (v240 == 2)
          v366 = v413;
        else
          v366 = v240 & 1;
        v413 = v366;
        sub_10002545C(v237, v238, v239);
        v368 = v367;
        (*(void (**)(uint64_t, char *, uint64_t))(v363 + 16))(v408, v412, v365);
        LODWORD(v459) = v236 != 2 && (v236 & 1) == 0;
        v369 = v446;
        v370 = v444;
        if (v241)
        {
          v371 = v460;
          v372 = v241;
          v373 = &_swiftEmptyArrayStorage;
        }
        else
        {
          v373 = &_swiftEmptyArrayStorage;
          v372 = &_swiftEmptyArrayStorage;
          v371 = v460;
        }
        sub_1000111A4();
        v374 = sub_100052C5C((uint64_t)v372);
        if (v242)
          v373 = v242;
        sub_10000CEB0();
        v375 = sub_100052C5C((uint64_t)v373);
        sub_10001B128();
        sub_10002793C((uint64_t)&v483, (uint64_t)&v488, &qword_10008E7C8);
        v377 = (v488 & 1) == 0 && v488 != 2;
        v379 = (uint64_t)v405;
        v378 = (int *)v406;
        *v405 = v370;
        *(_QWORD *)(v379 + 8) = v369;
        *(double *)(v379 + 16) = v217;
        v380 = v425;
        ((void (*)(uint64_t, uint64_t, uint64_t))v371)(v379 + v378[6], v408, v425);
        *(_QWORD *)(v379 + v378[7]) = v368;
        *(_BYTE *)(v379 + v378[8]) = v459;
        *(_QWORD *)(v379 + v378[9]) = v374;
        *(_QWORD *)(v379 + v378[10]) = v375;
        *(_BYTE *)(v379 + v378[11]) = v377;
        v381 = v410;
        sub_100027A4C(v379, (uint64_t)v410);
        swift_storeEnumTagMultiPayload(v381, v411, 0);
        sub_1000431DC();
        sub_1000431F4(v479[2]);
        sub_100028B7C();
        sub_10001C428();
        sub_100023458(v379, type metadata accessor for SessionConfiguration.BackendHTTP);
        (*(void (**)(char *, uint64_t))(v409 + 8))(v412, v380);
        v35 = v461;
        v43 = v428;
        v44 = v448;
        v45 = v449;
        v37 = v464;
        continue;
      }
      sub_100027968(v243);
      if (qword_10008DFC8 != -1)
        swift_once(&qword_10008DFC8, sub_100025234);
      sub_100018E70(v443, (uint64_t)qword_100097278);
      v244(v435);
      v245 = sub_100018E5C((uint64_t)&unk_100086978, 249);
      memcpy((void *)(v245 + 16), v480, 0xE9uLL);
      v246 = sub_10001561C();
      v247 = Logger.logObject.getter(v246);
      v248 = static os_log_type_t.error.getter();
      v249 = sub_100018E5C((uint64_t)&unk_1000869A0, 17);
      *(_BYTE *)(v249 + 16) = 32;
      v250 = sub_100018E5C((uint64_t)&unk_1000869C8, 17);
      *(_BYTE *)(v250 + 16) = 8;
      v251 = sub_10001B9C4((uint64_t)&unk_1000869F0);
      *(_QWORD *)(v251 + 16) = sub_100027A3C;
      *(_QWORD *)(v251 + 24) = v245;
      v252 = sub_10001B9C4((uint64_t)&unk_100086A18);
      *(_QWORD *)(v252 + 16) = sub_100028A30;
      *(_QWORD *)(v252 + 24) = v251;
      v253 = sub_10001AAC8(&qword_10008E7B0);
      v254 = swift_initStackObject(v253, &v465);
      *(_OWORD *)(v254 + 16) = v421;
      *(_QWORD *)(v254 + 32) = sub_100028A38;
      *(_QWORD *)(v254 + 40) = v249;
      *(_QWORD *)(v254 + 48) = sub_100028A38;
      *(_QWORD *)(v254 + 56) = v250;
      *(_QWORD *)(v254 + 64) = sub_100028A34;
      *(_QWORD *)(v254 + 72) = v252;
      sub_10000BDBC();
      sub_10000C038();
      sub_10001E194();
      swift_retain(v250);
      sub_10000F488();
      sub_10000A828();
      v255 = v248;
      v451 = v247;
      if (os_log_type_enabled(v247, v248))
      {
        v256 = (uint8_t *)sub_100012C5C(12);
        v445 = sub_100012C5C(32);
        *(_QWORD *)&v469 = v445;
        *(_WORD *)v256 = 258;
        v256[2] = 32;
        swift_release(v249);
        v256[3] = 8;
        sub_10000BE48();
        v257 = isa;
        sub_100007840();
        v467 = sub_100014F94(v447, v257, (uint64_t *)&v469);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, v420, v256 + 4, v256 + 12);
        sub_10000BDB4();
        sub_10001B380();
        sub_100010370();
        sub_10000A818();
        sub_10001B128();
        v258 = v451;
        _os_log_impl((void *)&_mh_execute_header, v451, v255, "invalid URL \"%s\"", v256, 0xCu);
        v259 = v445;
        swift_arrayDestroy(v445, 1);
        sub_1000120F8(v259);
        sub_1000120F8((uint64_t)v256);

      }
      else
      {
        sub_10000BDB4();
        sub_10001B380();
        sub_100010370();
        sub_10000BE48();
        swift_release(v249);
        sub_10001B128();

      }
      (*(void (**)(char *, uint64_t))(v442 + 8))(v435, v443);
LABEL_255:
      v35 = v461;
LABEL_256:
      if (++v120 == v460)
      {
        sub_100014570();
        sub_100028AAC();
        sub_10000A828();
        v37 = v464;
        goto LABEL_276;
      }
      goto LABEL_74;
    }
    sub_100014570();
    sub_10001B128();
    sub_100028AAC();
    sub_10000A828();
LABEL_298:
    v37 = v464;
LABEL_299:
    v35 = v461;
LABEL_334:
    v43 = v428;
LABEL_335:
    v44 = v448;
    v45 = v449;
  }
  if (v53 != 1)
    goto LABEL_4;
  v448 = v44;
  v449 = v45;
  sub_100020A48(v52, v455, v462, 1);
  v54 = qword_10008E080;
  v454 = v52;
  sub_10000CA18();
  if (v54 != -1)
    swift_once(&qword_10008E080, sub_1000584B0);
  if (byte_1000973F0 != 1)
  {
    v261 = v454;
    v260 = v455;
    sub_10001B23C();
    goto LABEL_275;
  }
  v55 = v454;
  v432 = *(_QWORD *)(v454 + 16);
  if (!v432)
  {
    v260 = v455;
    sub_10001B23C();
    v261 = v262;
LABEL_275:
    sub_10000558C(v262, v263, v264, v265);
    v35 = v461;
    sub_1000104FC(v261, v260, v54);
LABEL_276:
    v43 = v428;
    goto LABEL_335;
  }
  v56 = 0;
  v436 = v454 + 32;
  while (1)
  {
    if (v56 >= *(_QWORD *)(v55 + 16))
      goto LABEL_340;
    isa = v56;
    v57 = v436 + 112 * v56;
    v58 = *(_QWORD *)(v57 + 8);
    v447 = *(_QWORD *)(v57 + 16);
    v59 = *(_QWORD *)(v57 + 24);
    v60 = *(double *)(v57 + 32);
    v431 = *(unsigned __int8 *)(v57 + 40);
    v62 = *(char **)(v57 + 48);
    v61 = *(_QWORD *)(v57 + 56);
    v63 = *(unsigned __int8 *)(v57 + 64);
    v64 = *(_QWORD *)(v57 + 72);
    v65 = *(_QWORD *)(v57 + 80);
    v66 = *(unsigned __int8 *)(v57 + 88);
    v433 = *(unsigned __int8 *)(v57 + 89);
    v67 = *(NSObject **)(v57 + 96);
    v460 = *(NSObject **)(v57 + 104);
    v451 = v67;
    LODWORD(v459) = v63;
    if (!v58)
    {
      v441 = 0;
      v58 = v59;
      swift_bridgeObjectRetain(v59);
      v444 = v62;
      v445 = v61;
      v83 = sub_100028B94();
      LODWORD(v446) = v66;
      sub_100018DFC(v83, v84, v66);
      v85 = v460;
      sub_10000CA18();
      v86 = sub_10000B0D4();
      v87 = v64;
      if (!v58)
        goto LABEL_262;
LABEL_48:
      *(_QWORD *)&v469 = v447;
      *((_QWORD *)&v469 + 1) = v58;
      sub_10001541C();
      v94 = sub_100028AC8();
      v97 = (_QWORD *)sub_10000BF9C(v94, (uint64_t)&type metadata for String, v95, v96);
      v98 = (uint64_t)v97;
      v99 = v97[2];
      if (v99)
      {
        v100 = v87;
        v429 = v65;
        v101 = v37;
        v103 = v97[4];
        v102 = (void *)v97[5];
        swift_bridgeObjectRetain(v97);
        sub_10000CEB0();
        sub_1000195D4(v103, v102, v463, v101);
        sub_10001C5F8();
        if ((v103 & 1) != 0)
        {
LABEL_261:
          v86 = sub_10000F3C8(v98);
          v37 = v464;
          v85 = v460;
          v67 = v451;
          v65 = v429;
          v87 = v100;
          LOBYTE(v63) = v459;
LABEL_262:
          v267 = (v433 & 1) == 0 && v433 != 2;
          if ((DiagnosticLogSubmissionEnabled(v86) & 1) == 0 && !v267)
          {
            sub_100018048();
            sub_10001C6FC();
            sub_10000A818();
            sub_100028B30();
            sub_10000AF78(v87);
            sub_10000AF70();
            if (qword_10008DFC8 != -1)
              swift_once(&qword_10008DFC8, sub_100025234);
            sub_100018E70(v443, (uint64_t)qword_100097278);
            v268(v416);
            v269 = sub_10001B9C4((uint64_t)&unk_100086658);
            v270 = v457;
            v269[2].isa = (Class)v456;
            v269[3].isa = (Class)v270;
            v271 = sub_10001B9C4((uint64_t)&unk_100086680);
            *(_QWORD *)(v271 + 16) = v463;
            *(_QWORD *)(v271 + 24) = v37;
            v272 = v271;
            v459 = v271;
            sub_10000BD20(v270);
            v273 = sub_10000BD20(v37);
            v274 = Logger.logObject.getter(v273);
            LODWORD(v447) = sub_100028B60(v274);
            v445 = sub_100018E5C((uint64_t)&unk_1000866A8, 17);
            *(_BYTE *)(v445 + 16) = 34;
            v444 = (char *)sub_100018E5C((uint64_t)&unk_1000866D0, 17);
            v444[16] = 8;
            v275 = sub_10001B9C4((uint64_t)&unk_1000866F8);
            *(_QWORD *)(v275 + 16) = sub_100027708;
            *(_QWORD *)(v275 + 24) = v269;
            v276 = sub_10001B9C4((uint64_t)&unk_100086720);
            *(_QWORD *)(v276 + 16) = sub_100027720;
            *(_QWORD *)(v276 + 24) = v275;
            v277 = sub_100018E5C((uint64_t)&unk_100086748, 17);
            *(_BYTE *)(v277 + 16) = 34;
            v278 = sub_100018E5C((uint64_t)&unk_100086770, 17);
            *(_BYTE *)(v278 + 16) = 8;
            v279 = sub_10001B9C4((uint64_t)&unk_100086798);
            *(_QWORD *)(v279 + 16) = sub_100028A94;
            *(_QWORD *)(v279 + 24) = v272;
            v280 = sub_10001B9C4((uint64_t)&unk_1000867C0);
            *(_QWORD *)(v280 + 16) = sub_100028A30;
            *(_QWORD *)(v280 + 24) = v279;
            v281 = sub_10001AAC8(&qword_10008E7B0);
            v282 = (__n128 *)swift_initStackObject(v281, &v477);
            sub_10001F578(v282);
            v283 = v444;
            v284 = v445;
            v285[4] = sub_100027714;
            v285[5] = v284;
            v285[6] = sub_100028A38;
            v285[7] = v283;
            v285[8] = sub_100027728;
            v285[9] = v276;
            v285[10] = sub_100028A38;
            v285[11] = v277;
            v285[12] = sub_100028A38;
            v285[13] = v278;
            v285[14] = sub_100028A34;
            v285[15] = v280;
            v451 = v269;
            sub_10001E534();
            sub_10000BDBC();
            sub_10001FCF8();
            v446 = v279;
            swift_retain(v279);
            sub_10000F488();
            sub_10001E194();
            sub_10000C038();
            sub_100014528();
            isa = v278;
            sub_100019A20();
            sub_100028B3C();
            sub_10000A818();
            if (sub_10001FE84((os_log_type_t)v447))
            {
              sub_100028B1C();
              v447 = sub_10001BB48();
              sub_100011188(v447);
              LODWORD(v445) = v278;
              MEMORY[0xB] = 8;
              sub_10001AF98();
              sub_10001AE9C();
              v286 = sub_10001064C();
              sub_10001F4D0(v286);
              swift_release(v451);
              sub_10000BDB4();
              sub_10001B380();
              sub_10000F3C8((uint64_t)v269);
              MEMORY[0x14] = 34;
              sub_10000AF94();
              MEMORY[0x15] = 8;
              swift_release(isa);
              v287 = v464;
              sub_10000CA18();
              v288 = sub_100014F94(v463, v287, (uint64_t *)&v469);
              sub_10001D044(v288);
              sub_10001D37C();
              sub_1000194E8();
              sub_10000BD28();
              sub_10000F3C8(v287);
              v289 = v460;
              sub_10001D9C0((void *)&_mh_execute_header, v460, (os_log_type_t)v445, "skipping %{public}s:%{public}s: dnu disabled");
              v290 = v447;
              sub_10000BDEC(v447);
              sub_1000120F8(v290);
              sub_1000120F8(8);

              sub_100018048();
              sub_100028AE0();
              v37 = v287;
            }
            else
            {
              sub_100028B68();
              v347 = v464;
              sub_10000A818();
              sub_10001D37C();
              sub_1000194E8();
              sub_10000BD28();
              swift_release(isa);
              sub_10000AF94();
              sub_10000CA20();
              swift_release(v451);
              sub_10000BDB4();
              sub_10001B380();
              sub_10001AF98();
              sub_100010370();
              sub_100018048();
              sub_100028AE0();
              v37 = v347;
            }
            goto LABEL_299;
          }
          v430 = v87;
          v311 = v85;
          if (v431)
            v60 = 1.0;
          v312 = v427[3];
          v313 = v427[4];
          v314 = sub_10001D44C(v427, v312);
          v315 = (*(double (**)(uint64_t, uint64_t))(v313 + 48))(v312, v313);
          v316 = v444;
          if (v315 >= v60)
          {
            sub_10001C6FC();
            sub_10000A818();
            sub_100018DE4((uint64_t)v316, v445, v63);
            sub_10000AF78(v430);
            swift_bridgeObjectRelease(v311);
            v349 = v454;
            v348 = v455;
            sub_10001B23C();
            sub_10000558C(v350, v351, v352, v353);
            sub_1000104FC(v349, v348, (uint64_t)v314);
            goto LABEL_298;
          }
          v317 = v445;
          sub_10002545C(v444, v445, v63);
          v436 = v318;
          v35 = v461;
          v429 = v65;
          v445 = v317;
          v440 = v58;
          if ((v446 & 1) != 0)
          {
            isa = v414[4];
            swift_bridgeObjectRetain(v65);
            v319 = v430;
            v447 = sub_10005A0E8(v430, v65, isa);
            LODWORD(isa) = v320;
            sub_100018DC0(v319, v65, 1);
            if (isa == 255)
            {
              v321 = &_swiftEmptyArrayStorage;
            }
            else if (isa == 1)
            {
              v65 = v429;
              v321 = (_QWORD *)v447;
            }
            else
            {
              sub_100027738(v447, isa);
              v321 = &_swiftEmptyArrayStorage;
              v65 = v429;
            }
          }
          else
          {
            v321 = (_QWORD *)swift_bridgeObjectRetain(v430);
          }
          v444 = v316;
          v382 = v321[2];
          if (v382)
          {
            *(_QWORD *)&v469 = &_swiftEmptyArrayStorage;
            v383 = (uint64_t)v321;
            sub_100026B5C(v382);
            v447 = v383;
            v384 = (_QWORD *)(v383 + 72);
            do
            {
              v386 = *(v384 - 5);
              v385 = *(v384 - 4);
              v387 = *((_BYTE *)v384 - 24);
              v388 = *(v384 - 1);
              isa = *(v384 - 2);
              v389 = *v384;
              v384 += 6;
              sub_10000BD20(v385);
              sub_100007840();
              sub_1000111A4();
              sub_1000273E4();
              v390 = *(char **)(v469 + 16);
              sub_10002742C(v390);
              *(_QWORD *)&v470 = v386;
              *((_QWORD *)&v470 + 1) = v385;
              v471 = v386;
              v472 = v385;
              v473 = v387;
              v474 = isa;
              v475 = v388;
              v476 = v389;
              sub_100027454((uint64_t)v390, &v470);
              --v382;
            }
            while (v382);
            swift_bridgeObjectRelease(v447);
            sub_100018048();
            v391 = (void *)v469;
            v35 = v461;
            v67 = v451;
            v65 = v429;
            v392 = v430;
            LOBYTE(v63) = v459;
          }
          else
          {
            swift_bridgeObjectRelease(v321);
            sub_100018048();
            v391 = &_swiftEmptyArrayStorage;
            v392 = v430;
          }
          sub_1000054F4((uint64_t)v391, &qword_10008E7D8, (void (*)(uint64_t, uint64_t, void **))sub_100026CD0);
          isa = v393;
          if (v460)
            v394 = v460;
          else
            v394 = &_swiftEmptyArrayStorage;
          sub_100007840();
          v395 = sub_100052C5C((uint64_t)v394);
          v37 = v464;
          if (v67)
          {
            sub_10000B0D4();
            sub_10001C6FC();
            sub_10000D204();
            sub_100018DE4((uint64_t)v444, v445, v63);
            sub_100018DC0(v392, v65, v446);
            sub_10000A818();
            sub_10000BDE4();
          }
          else
          {
            sub_10001C6FC();
            sub_10000D204();
            sub_100018DE4((uint64_t)v444, v445, v63);
            sub_100018DC0(v392, v65, v446);
            sub_10000A818();
            swift_bridgeObjectRelease(0);
            v67 = &_swiftEmptyArrayStorage;
          }
          v396 = sub_100052C5C((uint64_t)v67);
          v398 = v410;
          v397 = v411;
          *v410 = v60;
          v399 = isa;
          *((_QWORD *)v398 + 1) = v436;
          *((_QWORD *)v398 + 2) = v399;
          *((_QWORD *)v398 + 3) = v395;
          *((_QWORD *)v398 + 4) = v396;
          swift_storeEnumTagMultiPayload(v398, v397, 1);
          sub_1000431DC();
          sub_1000431F4(v478[2]);
          sub_100028B7C();
          v360 = v454;
          v361 = v455;
          v362 = v462;
LABEL_333:
          sub_1000104FC(v360, v361, v362);
          goto LABEL_334;
        }
        if (v99 != 1)
        {
          v104 = (void **)(v98 + 56);
          v105 = 1;
          do
          {
            v106 = v105 + 1;
            if (__OFADD__(v105, 1))
              goto LABEL_339;
            v108 = (uint64_t)*(v104 - 1);
            v107 = *v104;
            sub_10000CEB0();
            sub_10001E1D4(v108, v107);
            sub_10001C5F8();
            if ((v108 & 1) != 0)
              goto LABEL_261;
            ++v105;
            v104 += 2;
          }
          while (v106 != v99);
        }
        sub_10000F3C8(v98);
        sub_10000A818();
        sub_10001C6FC();
        sub_100028B24();
        sub_100018DC0(v100, v429, v446);
        swift_bridgeObjectRelease(v451);
LABEL_56:
        v37 = v464;
      }
      else
      {
        sub_10000A818();
        sub_10000A828();
        sub_10001C6FC();
        sub_100028B24();
        sub_10000AF78(v87);
      }
      v35 = v461;
      goto LABEL_59;
    }
    *(_QWORD *)&v469 = *(_QWORD *)v57;
    *((_QWORD *)&v469 + 1) = v58;
    sub_10001FC94();
    v440 = v68;
    swift_bridgeObjectRetain(v68);
    sub_100007840();
    v69 = sub_100028B94();
    sub_100018DFC(v69, v70, v66);
    v71 = sub_100019414();
    sub_10000B0D4();
    swift_bridgeObjectRetain(v460);
    v72 = v64;
    v73 = v66;
    v74 = StringProtocol.components<A>(separatedBy:)(&v467, &type metadata for String, &type metadata for String, v71, v71);
    if (*(_QWORD *)(v74 + 16))
      break;
    sub_10000D204();
    sub_10000A818();
    sub_10000A828();
    sub_100018DE4((uint64_t)v62, v61, v63);
    sub_100018DC0(v72, v65, v73);
    swift_bridgeObjectRelease(v460);
    v37 = v464;
    v35 = v461;
LABEL_59:
    v56 = isa + 1;
    sub_10000BDE4();
    v55 = v454;
    if (v56 == v432)
    {
      v354 = v455;
      sub_10001B23C();
      v356 = v355;
      sub_10000558C(v355, v357, v358, v359);
      v360 = v356;
      v361 = v354;
      v362 = v56;
      goto LABEL_333;
    }
  }
  v441 = v58;
  v444 = v62;
  v445 = v61;
  v430 = v72;
  v75 = v65;
  LODWORD(v446) = v73;
  sub_100028AA0();
  v81 = v81 && v77 == v79;
  if (v81)
  {
    sub_10000A828();
    v87 = v430;
    sub_10001084C();
    v37 = v88;
    goto LABEL_48;
  }
  v419 = v80;
  sub_100012C54(v76, v77, v78, v79);
  sub_10001084C();
  if ((v82 & 1) != 0)
    goto LABEL_47;
  if (v419 == 1)
  {
LABEL_36:
    sub_10000A828();
LABEL_37:
    sub_10000A818();
    sub_10001C6FC();
    sub_100028B30();
    sub_100018DC0(v430, v65, v446);
    sub_10000AF70();
    goto LABEL_56;
  }
  sub_100028AA0();
  v93 = v81 && v90 == v92;
  if (v93 || (sub_100012C54(v89, v90, v91, v92) & 1) != 0)
  {
LABEL_47:
    sub_10000A828();
    v37 = v464;
    v87 = v430;
    goto LABEL_48;
  }
  if (v419 == 2)
    goto LABEL_36;
  v109 = v74 + 72;
  v110 = 2;
  while (1)
  {
    v111 = v110 + 1;
    if (__OFADD__(v110, 1))
      break;
    sub_100028AA0();
    v116 = v81 && v113 == v115;
    if (v116 || (sub_100012C54(v112, v113, v114, v115) & 1) != 0)
    {
      sub_10000A828();
      v37 = v464;
      v65 = v75;
      v87 = v430;
      goto LABEL_48;
    }
    v109 += 16;
    ++v110;
    if (v111 == v419)
    {
      sub_10000A828();
      v65 = v75;
      goto LABEL_37;
    }
  }
LABEL_347:
  __break(1u);
LABEL_348:
  __break(1u);
LABEL_349:
  __break(1u);
}

uint64_t sub_100018040()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100018048()
{
  uint64_t *v0;

  return sub_10000558C(v0[53], v0[54], v0[61], 1);
}

uint64_t sub_100018058()
{
  return swift_willThrow();
}

uint64_t sub_100018064(uint64_t a1)
{
  return swift_release_n(a1, 2);
}

void sub_10001806C(uint64_t a1, uint64_t a2)
{
  Swift::String v2;

  v2._countAndFlagsBits = 0x2D746E65746E6F43;
  v2._object = (void *)0xEC00000065707954;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&a1, v2);
}

uint64_t sub_10001808C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10001809C()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_1000180A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 184);
  *(_QWORD *)(v0 + 600) = v1;
  *(_BYTE *)(v0 + 668) = *(_BYTE *)(v1 + 32);
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_1000180D8()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_1000180E8()
{
  uint64_t v0;

  return sub_10001EFD0(v0);
}

uint64_t sub_1000180F0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100018104()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
}

uint64_t sub_10001810C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100014F94(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_100018118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_100050BEC(v3, v1, v0, v2);
}

_QWORD *sub_100018130(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v14 + 160) = result;
  result[2] = v15;
  result[3] = v16;
  result[4] = a11;
  result[5] = v12;
  result[6] = v13;
  result[7] = v11;
  result[8] = v17;
  return result;
}

uint64_t sub_100018150()
{
  return 0x79726F6765746163;
}

uint64_t sub_100018168(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100015718(a1, a2);
  return swift_bridgeObjectRetain_n(v2, 2);
}

void *sub_100018184@<X0>(uint64_t a1@<X8>, uint64_t a2, char aBlock, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  a5 = a1;
  a6 = v6;
  return _Block_copy(&aBlock);
}

void sub_100018190(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  char v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  _QWORD v107[30];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  _BYTE v116[7];
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  char v121;
  int v122;
  __int16 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  char v132;
  char v133;
  int v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 v138;
  _BYTE v139[7];
  uint64_t v140;
  uint64_t v141;
  char v142;
  char v143;
  int v144;
  __int16 v145;
  uint64_t v146;
  char v147;
  char v148;
  int v149;
  __int16 v150;
  uint64_t v151;
  char v152;
  char v153;
  char v154;
  int v155;
  __int16 v156;
  int v157;
  __int16 v158;
  _BYTE v159[12];
  char v160;
  int v161;
  __int16 v162;
  char v163;
  _BYTE v164[7];
  char v165;
  uint64_t v166;

  v5 = sub_10001AAC8(&qword_10008FA60);
  __chkstk_darwin(v5);
  sub_10000BE50();
  v6 = a1[3];
  v7 = a1[4];
  sub_10001D44C(a1, v6);
  v8 = sub_100018F48();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_100088DD0, &unk_100088DD0, v8, v6, v7);
  if (v2)
  {
    v166 = v2;
    v9 = 0;
  }
  else
  {
    v106 = a2;
    LOBYTE(v108) = 0;
    v15 = sub_10001B3F4((uint64_t)&v108);
    v17 = v16;
    LOBYTE(v108) = 1;
    sub_10001C748(v15, v16);
    v91 = v17;
    v18 = sub_10001B3F4((uint64_t)&v108);
    LOBYTE(v108) = 2;
    v20 = v19;
    sub_10001C748(v18, v19);
    v21 = sub_10001AFF0();
    v23 = KeyedDecodingContainer.decode(_:forKey:)(v21, v22);
    v90 = v20;
    v25 = v24;
    v105 = v23;
    LOBYTE(v108) = 3;
    sub_10001C748(v23, v24);
    v26 = sub_10001AFF0();
    v89 = v25;
    v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v26);
    v104 = v18;
    v165 = v28 & 1;
    LOBYTE(v108) = 4;
    v81 = v28;
    v83 = sub_10001B3F4((uint64_t)&v108);
    v84 = v27;
    LOBYTE(v108) = 5;
    v30 = v29;
    sub_10001C748(v83, v29);
    v31 = sub_10001AFF0();
    v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v31);
    v88 = v30;
    LOBYTE(v18) = v33;
    v80 = v32;
    v163 = v33 & 1;
    LOBYTE(v107[0]) = 6;
    v34 = sub_100018F84();
    sub_10001D074((uint64_t)&unk_100088AB0, (uint64_t)v107, v5, (uint64_t)&unk_100088AB0, v34);
    v79 = v34;
    v77 = v18;
    v78 = v108;
    v35 = sub_100018F04();
    LOBYTE(v107[0]) = 7;
    v36 = sub_10000B030((unint64_t *)&qword_10008FA00);
    v37 = sub_100015B28();
    sub_10001D074(v37, v38, v39, v35, v36);
    v40 = v108;
    LOBYTE(v107[0]) = 8;
    swift_bridgeObjectRetain(v108);
    v41 = sub_100015B28();
    v86 = v35;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v41, v42, v43, v35, v36);
    v44 = v36;
    v45 = v108;
    LOBYTE(v108) = 9;
    v103 = v45;
    swift_bridgeObjectRetain(v45);
    v76 = sub_10001B3F4((uint64_t)&v108);
    v102 = v46;
    v166 = 0;
    sub_100018F04();
    LOBYTE(v107[0]) = 10;
    v47 = sub_10000B030(&qword_10008FA80);
    swift_bridgeObjectRetain(v102);
    v48 = sub_100015C90();
    sub_10001CDC8(v48, v49, v50, v51, v47);
    v166 = v47;
    if (!v47)
    {
      LOBYTE(v107[0]) = 11;
      v101 = v108;
      swift_bridgeObjectRetain(v108);
      v52 = sub_100015C90();
      sub_10001CDC8(v52, v53, v54, v55, 0);
      v166 = 0;
      v56 = v108;
      LOBYTE(v108) = 12;
      v99 = v56;
      swift_bridgeObjectRetain(v56);
      v57 = sub_10000F430();
      v75 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v57);
      v166 = 0;
      v59 = v58;
      v160 = v58 & 1;
      LOBYTE(v107[0]) = 13;
      sub_10001BA4C((uint64_t)&unk_100088AB0);
      v166 = 0;
      v74 = v108;
      LOBYTE(v107[0]) = 14;
      sub_10001BA4C((uint64_t)&unk_100088AB0);
      v166 = 0;
      v73 = v108;
      v60 = sub_10001AAC8(&qword_10008FA40);
      LOBYTE(v107[0]) = 15;
      v61 = sub_100019594(&qword_10008FA88, &qword_10008FA40);
      sub_10001CDC8(v60, (uint64_t)v107, v5, v60, v61);
      v166 = 0;
      v62 = v108;
      LOBYTE(v108) = 16;
      v96 = v109;
      v98 = v62;
      v94 = v110;
      sub_100018DCC(v62, v109, v110);
      v63 = sub_10000F430();
      v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v63, v64);
      v92 = v65;
      v166 = 0;
      LOBYTE(v107[0]) = 17;
      swift_bridgeObjectRetain(v65);
      sub_10001BA4C((uint64_t)&unk_100088AB0);
      v166 = 0;
      v71 = v108;
      LOBYTE(v107[0]) = 18;
      sub_10001BA4C((uint64_t)&unk_100088AB0);
      v166 = 0;
      v70 = v108;
      LOBYTE(v107[0]) = 19;
      sub_10001CDC8(v86, (uint64_t)v107, v5, v86, v44);
      v166 = 0;
      LOBYTE(v107[0]) = 20;
      v87 = v108;
      swift_bridgeObjectRetain(v108);
      sub_10001BA4C((uint64_t)&unk_100088AB0);
      v166 = 0;
      v66 = v108;
      LOBYTE(v107[0]) = 21;
      sub_10001BA4C((uint64_t)&unk_100088AB0);
      v166 = 0;
      v69 = v108;
      v67 = sub_10001AAC8(&qword_10008FA90);
      LOBYTE(v107[0]) = 22;
      v68 = sub_100019B6C();
      sub_10001CDC8(v67, (uint64_t)v107, v5, v67, v68);
      v166 = 0;
      v153 = 23;
      v85 = v108;
      swift_bridgeObjectRetain(v108);
      sub_10001CDC8((uint64_t)&unk_100088AB0, (uint64_t)&v153, v5, (uint64_t)&unk_100088AB0, v79);
      v166 = 0;
      sub_10001ABC4();
      LOBYTE(v107[7]) = v81 & 1;
      LOBYTE(v107[11]) = v77 & 1;
      LOBYTE(v107[19]) = v59 & 1;
      v82 = v154;
      v107[0] = v15;
      v107[1] = v91;
      v107[2] = v104;
      v107[3] = v90;
      v107[4] = v105;
      v107[5] = v89;
      v107[6] = v84;
      v107[8] = v83;
      v107[9] = v88;
      v107[10] = v80;
      BYTE1(v107[11]) = v78;
      v107[12] = v40;
      v107[13] = v103;
      v107[14] = v76;
      v107[15] = v102;
      v107[16] = v101;
      v107[17] = v99;
      v107[18] = v75;
      BYTE1(v107[19]) = v74;
      BYTE2(v107[19]) = v73;
      v107[20] = v98;
      v107[21] = v96;
      LOBYTE(v107[22]) = v94;
      v107[23] = v72;
      v107[24] = v92;
      LOBYTE(v107[25]) = v71;
      BYTE1(v107[25]) = v70;
      v107[26] = v87;
      LOBYTE(v107[27]) = v66;
      BYTE1(v107[27]) = v69;
      v107[28] = v85;
      LOBYTE(v107[29]) = v154;
      sub_10002774C((uint64_t)v107);
      sub_100010678();
      sub_10000BDE4();
      sub_1000120B4();
      sub_100018DE4(v98, v96, v94);
      sub_10000BDE4();
      swift_bridgeObjectRelease(v90);
      sub_10000A818();
      sub_100019460();
      swift_bridgeObjectRelease(v40);
      sub_100010678();
      sub_100010598();
      sub_10001CF14();
      sub_1000120B4();
      sub_10001111C();
      v108 = v15;
      v109 = v91;
      v110 = v104;
      v111 = v90;
      v112 = v105;
      v113 = v89;
      v114 = v84;
      v115 = v165;
      *(_DWORD *)v116 = *(_DWORD *)v164;
      *(_DWORD *)&v116[3] = *(_DWORD *)&v164[3];
      v117 = v83;
      v118 = v88;
      v119 = v80;
      v120 = v163;
      v121 = v78;
      v122 = v161;
      v123 = v162;
      v124 = v40;
      v125 = v103;
      v126 = v76;
      v127 = v102;
      v128 = v101;
      v129 = v99;
      v130 = v75;
      v131 = v160;
      v132 = v74;
      v133 = v73;
      v135 = v159[11];
      v134 = *(_DWORD *)&v159[7];
      v136 = v98;
      v137 = v96;
      v138 = v94;
      *(_DWORD *)&v139[3] = *(_DWORD *)&v159[3];
      *(_DWORD *)v139 = *(_DWORD *)v159;
      v140 = v72;
      v141 = v92;
      v142 = v71;
      v143 = v70;
      v145 = v158;
      v144 = v157;
      v146 = v87;
      v147 = v66;
      v148 = v69;
      v150 = v156;
      v149 = v155;
      v151 = v85;
      v152 = v82;
      sub_10002783C((uint64_t)&v108);
      memcpy(v106, v107, 0xE9uLL);
      goto LABEL_25;
    }
    sub_10001ABC4();
    sub_10001A1FC();
    sub_100012CFC();
    sub_100018104();
    sub_10001B2E4();
    sub_10001D1D0();
    sub_100019374();
    sub_100010598();
    v9 = 919;
  }
  sub_10001111C();
  if ((v9 & 1) != 0)
  {
    sub_10001A1FC();
    if (((v9 >> 1) & 1) == 0)
    {
LABEL_6:
      if (((v9 >> 2) & 1) != 0)
        goto LABEL_7;
      goto LABEL_17;
    }
  }
  else if ((v9 & 2) == 0)
  {
    goto LABEL_6;
  }
  sub_100012CFC();
  if (((v9 >> 2) & 1) != 0)
  {
LABEL_7:
    sub_100018104();
    if (((v9 >> 4) & 1) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  if (((v9 >> 4) & 1) == 0)
  {
LABEL_8:
    v10 = v95;
    if (((v9 >> 7) & 1) != 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  sub_10001B2E4();
  v10 = v95;
  if (((v9 >> 7) & 1) != 0)
  {
LABEL_9:
    sub_10001D1D0();
    v11 = v103;
    v12 = v97;
    if (((v9 >> 8) & 1) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v11 = v103;
  v12 = v97;
  if (((v9 >> 8) & 1) == 0)
  {
LABEL_10:
    if (((v9 >> 9) & 1) != 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  swift_bridgeObjectRelease(v11);
  if (((v9 >> 9) & 1) != 0)
  {
LABEL_11:
    sub_1000120B4();
    v13 = v100;
    if (((v9 >> 10) & 1) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v13 = v100;
  if (((v9 >> 10) & 1) == 0)
  {
LABEL_12:
    if (((v9 >> 11) & 1) != 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  swift_bridgeObjectRelease(v13);
  if (((v9 >> 11) & 1) != 0)
  {
LABEL_13:
    sub_10000A818();
    v14 = v93;
    if (((v9 >> 15) & 1) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
LABEL_23:
  v14 = v93;
  if (((v9 >> 15) & 1) == 0)
    goto LABEL_25;
LABEL_24:
  sub_100018DE4(v12, v10, v14);
LABEL_25:
  sub_10000A840();
}

uint64_t sub_100018DC0(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    a1 = a2;
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100018DCC(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_100018DFC(result, a2, a3 & 1);
  return result;
}

uint64_t sub_100018DE4(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_100018DC0(result, a2, a3 & 1);
  return result;
}

uint64_t sub_100018DFC(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    a1 = a2;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100018E08(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100027598(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100018E5C(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7);
}

uint64_t sub_100018E64(uint64_t a1)
{
  return swift_allocObject(a1, 25, 7);
}

uint64_t sub_100018E70(uint64_t a1, uint64_t a2)
{
  return sub_100015718(a1, a2);
}

uint64_t sub_100018E8C()
{
  return Logger.logObject.getter();
}

double sub_100018E94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  _s10RTCUtility9XPCObjectOwst_0(v1, 0, 1, v2);
  *(_QWORD *)&result = swift_bridgeObjectRetain(v0).n128_u64[0];
  return result;
}

uint64_t sub_100018EB8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 328);
}

uint64_t sub_100018ED0@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

unint64_t sub_100018EF0()
{
  return 0xD000000000000012;
}

uint64_t sub_100018F04()
{
  uint64_t *v0;

  return sub_10001AAC8(v0);
}

uint64_t sub_100018F0C@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 - 256));
}

uint64_t sub_100018F14()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 - 104));
}

uint64_t sub_100018F20(uint64_t a1)
{
  return sub_10000A46C(a1);
}

uint64_t sub_100018F3C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

unint64_t sub_100018F48()
{
  unint64_t result;

  result = qword_10008FA68;
  if (!qword_10008FA68)
  {
    result = swift_getWitnessTable(&unk_10006F35C, &unk_100088DD0);
    atomic_store(result, (unint64_t *)&qword_10008FA68);
  }
  return result;
}

unint64_t sub_100018F84()
{
  unint64_t result;

  result = qword_10008FA70;
  if (!qword_10008FA70)
  {
    result = swift_getWitnessTable(&unk_10006EEEC, &unk_100088AB0);
    atomic_store(result, (unint64_t *)&qword_10008FA70);
  }
  return result;
}

uint64_t sub_100018FC0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];

  sub_10001D44C(a1, a1[3]);
  v4 = sub_100015478();
  dispatch thunk of Decoder.singleValueContainer()(v4);
  if (!v2)
  {
    sub_10001D44C(v22, v22[3]);
    v5 = sub_100015478();
    v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v5);
    if (!v6)
    {
      v1 = 1;
      goto LABEL_10;
    }
    if (v6 == 1)
    {
      v1 = 0;
LABEL_10:
      sub_100015060(v22);
      sub_100019A88();
      return v1;
    }
    v8 = type metadata accessor for DecodingError(0);
    swift_allocError(v8, &protocol witness table for DecodingError, 0, 0);
    v10 = v9;
    sub_10001AAC8(&qword_10008FA38);
    *v10 = &unk_100088AB0;
    v11 = a1[3];
    v12 = a1[4];
    v1 = (uint64_t)sub_10001D44C(a1, v11);
    v13 = dispatch thunk of Decoder.codingPath.getter(v11, v12);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v13, 0xD00000000000001BLL, 0x8000000100072AE0, 0);
    v14 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for DecodingError.typeMismatch(_:), v8);
    swift_willThrow(v14, v15, v16, v17, v18, v19, v20, v21);
    sub_100015060(v22);
  }
  sub_100019A88();
  return v1;
}

void sub_100019138(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21[2];
  uint64_t v22;
  _QWORD v23[4];
  uint64_t v24;

  v19 = a5;
  v24 = type metadata accessor for StorebagSectionMaybeShared(0, a2, a3, a4);
  v20 = *(_QWORD *)(v24 - 8);
  v9 = __chkstk_darwin(v24);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v19 - v12;
  sub_10001D44C(a1, a1[3]);
  v14 = sub_10001BC10();
  dispatch thunk of Decoder.singleValueContainer()(v14);
  if (v5)
  {
    swift_errorRelease(v5);
    v22 = 0;
    memset(v21, 0, sizeof(v21));
    sub_100064900((uint64_t)v21);
    sub_10000A19C((uint64_t)a1, (uint64_t)v23);
    dispatch thunk of Decodable.init(from:)(v23, a2, a3);
    v16 = v24;
    swift_storeEnumTagMultiPayload(v11, v24, 0);
    v17 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v17(v13, v11, v16);
  }
  else
  {
    sub_100011D14(v21, (uint64_t)v23);
    sub_10001D44C(v23, v23[3]);
    v15 = sub_10001BC10();
    *(_QWORD *)v13 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v15);
    *((_QWORD *)v13 + 1) = v18;
    v16 = v24;
    swift_storeEnumTagMultiPayload(v13, v24, 1);
    sub_100015060(v23);
    v17 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  }
  v17(v19, v13, v16);
  sub_100019A88();
  sub_10000A840();
}

uint64_t sub_1000192F4()
{
  return type metadata accessor for EventValue(0);
}

uint64_t sub_100019308()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 168))(v0, *(_QWORD *)(v1 - 128));
}

uint64_t sub_100019318(char a1)
{
  return sub_100005FA0(a1);
}

uint64_t sub_100019334()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 344));
}

uint64_t sub_10001934C()
{
  _QWORD *v0;

  return sub_100015060(v0);
}

void sub_100019354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100020584(v2, v0, v1);
}

uint64_t sub_100019364(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return String.hash(into:)(a1, a2, v2);
}

uint64_t sub_10001936C()
{
  return swift_bridgeObjectRelease(0x8000000000000000);
}

uint64_t sub_100019374()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 208));
}

NSString sub_10001937C()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100019388(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001939C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 4) = a1;
  return swift_bridgeObjectRelease_n(v1, 3);
}

uint64_t sub_1000193AC()
{
  return 0x65756C6176;
}

uint64_t sub_1000193C0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000193DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t type metadata accessor for StorebagSectionMaybeShared(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000193DC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StorebagSectionMaybeShared);
}

unint64_t sub_100019414()
{
  unint64_t result;

  result = qword_10008E7B8;
  if (!qword_10008E7B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10008E7B8);
  }
  return result;
}

uint64_t sub_100019450()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 504));
}

uint64_t sub_100019460()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_100019468(void *a1)
{
  free(a1);
}

uint64_t sub_100019470(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 2);
}

uint64_t sub_100019490()
{
  uint64_t v0;

  return v0;
}

void sub_1000194A0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_1000194C4()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[47] + 8))(v0[48], v0[46]);
}

uint64_t sub_1000194D4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * ((result - 32) / v3);
  return result;
}

uint64_t sub_1000194E8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 360));
}

uint64_t sub_1000194F0()
{
  return URLRequest.httpMethod.setter(1414745936, 0xE400000000000000);
}

uint64_t sub_100019500(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s10RTCUtility9XPCObjectOwst_0(a1, a2, 1, *(_QWORD *)(v2 - 144));
}

uint64_t sub_100019510(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

BOOL sub_10001952C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::Bool v10;
  Swift::Int v11;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_100019540()
{
  uint64_t v0;

  return v0;
}

_QWORD *sub_100019564()
{
  uint64_t v0;

  return sub_100005400((_QWORD *)(v0 - 96));
}

uint64_t sub_10001956C()
{
  return sub_100040508();
}

uint64_t sub_100019574()
{
  uint64_t v0;

  return Date.advanced(by:)((double)*(int *)(v0 + 104));
}

uint64_t sub_100019594(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100027598(a2);
    result = swift_getWitnessTable(&unk_1000700E4, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000195D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String_optional v13;
  uint64_t v14;
  void *v15;
  Swift::String_optional v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String_optional v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v38;

  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v13 = String.Iterator.next()();
  object = v13.value._object;
  countAndFlagsBits = v13.value._countAndFlagsBits;
  if (v13.value._object)
  {
    v14 = v13.value._countAndFlagsBits;
    v15 = v13.value._object;
    while (1)
    {
      v16 = String.Iterator.next()();
      if (!v16.value._object)
        break;
      if (v14 == v16.value._countAndFlagsBits && v15 == v16.value._object)
      {
        sub_10000781C();
        sub_10000A828();
      }
      else
      {
        v18 = sub_1000120EC(v14, (uint64_t)v15, v16.value._countAndFlagsBits);
        sub_10000781C();
        v19 = sub_10000A828();
        if ((v18 & 1) == 0)
        {
          sub_100007848(v19, v20, v21, v22, v23, v24, v25, v26, a3, a4);
          v38 = a2;
          goto LABEL_16;
        }
      }
      v27 = String.Iterator.next()();
      object = v27.value._object;
      countAndFlagsBits = v27.value._countAndFlagsBits;
      v14 = v27.value._countAndFlagsBits;
      v15 = v27.value._object;
      if (!v27.value._object)
        goto LABEL_12;
    }
    v29 = sub_10000781C();
    sub_100007848(v29, v30, v31, v32, v33, v34, v35, v36, a3, a4);
    swift_bridgeObjectRelease(a2);
    return 1;
  }
LABEL_12:
  sub_100007848(countAndFlagsBits, (uint64_t)object, v7, v8, v9, v10, v11, v12, a3, a4);
  v28 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease(a2);
  if (!v28)
    return 1;
  v38 = v28;
LABEL_16:
  swift_bridgeObjectRelease(v38);
  return 0;
}

void sub_1000196FC(uint64_t a1, int a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  unint64_t i;
  int64_t v24;
  _QWORD *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  int64_t v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  uint64_t (*v57)(_QWORD);
  _QWORD v58[9];

  v6 = v4;
  v57 = a3;
  v8 = a3(0);
  v55 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v51 - v9;
  v11 = (_QWORD *)*v4;
  sub_10001AAC8(a4);
  v12 = sub_10005F8E0();
  v56 = a2;
  v14 = (_QWORD *)sub_10005FAC8(v12, v13);
  if (!v11[2])
    goto LABEL_37;
  sub_10005FA88();
  v54 = v15;
  sub_10005FC14();
  v18 = v17 & v16;
  v52 = v4;
  v53 = (unint64_t)(v19 + 63) >> 6;
  v20 = v14 + 8;
  sub_100014528();
  v21 = 0;
  if (!v18)
    goto LABEL_4;
LABEL_3:
  v22 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (i = v22 | (v21 << 6); ; i = v29 + (v21 << 6))
  {
    v30 = (uint64_t *)(v11[6] + 16 * i);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v55 + 72);
    v34 = v11[7] + v33 * i;
    if ((v56 & 1) != 0)
    {
      sub_10001B968(v34, (uint64_t)v10, v57);
    }
    else
    {
      sub_10001B93C(v34, (uint64_t)v10, v57);
      sub_1000111DC();
    }
    Hasher.init(_seed:)(v58, v14[5]);
    String.hash(into:)(v58, v32, v31);
    Hasher._finalize()();
    sub_10005F924();
    if (((v37 << v36) & ~v20[v35]) == 0)
    {
      sub_1000154A4();
      while (++v39 != v40 || (v38 & 1) == 0)
      {
        v41 = v39 == v40;
        if (v39 == v40)
          v39 = 0;
        v38 |= v41;
        if (v20[v39] != -1)
        {
          sub_100010894();
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return;
    }
    sub_10000B130();
LABEL_28:
    sub_10005FAA0();
    *(_QWORD *)((char *)v20 + v42) |= v43;
    v45 = (_QWORD *)(v14[6] + 16 * v44);
    *v45 = v32;
    v45[1] = v31;
    sub_10001B968((uint64_t)v10, v14[7] + v33 * v44, v57);
    sub_10005F97C();
    if (v18)
      goto LABEL_3;
LABEL_4:
    v24 = v21 + 1;
    if (__OFADD__(v21, 1))
      goto LABEL_39;
    if (v24 >= v53)
    {
      sub_10000AF94();
      v6 = v52;
      v25 = v54;
      goto LABEL_32;
    }
    v25 = v54;
    ++v21;
    if (!v54[v24])
    {
      v21 = v24 + 1;
      if (v24 + 1 >= v53)
        goto LABEL_30;
      if (!v54[v21])
        break;
    }
LABEL_15:
    sub_10005F954();
    v18 = v28 & v27;
  }
  v26 = v24 + 2;
  if (v26 < v53)
  {
    if (!v54[v26])
    {
      while (1)
      {
        v21 = v26 + 1;
        if (__OFADD__(v26, 1))
          goto LABEL_40;
        if (v21 >= v53)
          goto LABEL_30;
        ++v26;
        if (v54[v21])
          goto LABEL_15;
      }
    }
    v21 = v26;
    goto LABEL_15;
  }
LABEL_30:
  sub_10000AF94();
  v6 = v52;
LABEL_32:
  if ((v56 & 1) != 0)
  {
    sub_10001C5D8();
    if (v47 != v48)
    {
      *v25 = -1 << v46;
    }
    else
    {
      v49 = sub_10005FA68();
      sub_1000204B8(v49, v50, v25);
    }
    v11[2] = 0;
  }
LABEL_37:
  sub_10000AF94();
  *v6 = v14;
}

uint64_t sub_1000199C4()
{
  return swift_willThrow();
}

uint64_t sub_1000199DC(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 3);
}

uint64_t sub_1000199E8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000199F4(uint64_t a1)
{
  uint64_t v1;

  return sub_100033A4C(a1, v1);
}

uint64_t sub_1000199FC(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 1);
}

uint64_t sub_100019A04(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

void sub_100019A18(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_100023458(v2, a2);
}

uint64_t sub_100019A20()
{
  uint64_t v0;

  return swift_retain(v0);
}

BOOL sub_100019A28(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_100019A38()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

void sub_100019A48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  **(_QWORD **)(v1 + 264) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v0);
}

unint64_t sub_100019A60(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t sub_100019A6C(uint64_t a1, uint64_t a2)
{
  return sub_10003BFDC(a1, a2);
}

uint64_t sub_100019A88()
{
  _QWORD *v0;

  return sub_100015060(v0);
}

uint64_t sub_100019A90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = a1;
  v2[1] = v1;
  return swift_storeEnumTagMultiPayload(v2, v3, 0);
}

uint64_t sub_100019AA4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100014F94(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_100019AB0()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100010720(v1, v0);
}

uint64_t sub_100019ABC()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100019AC4()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100021264(v1, v0);
}

uint64_t sub_100019AD0()
{
  uint64_t v0;

  return swift_retain_n(v0, 2);
}

uint64_t sub_100019AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s10RTCUtility9XPCObjectOwst_0(a1, a2, 1, v2);
}

uint64_t sub_100019B1C()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 344));
}

uint64_t sub_100019B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;

  return sub_100014F94(v10, v9, &a9);
}

uint64_t sub_100019B34@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void sub_100019B50()
{
  void *v0;

}

unint64_t sub_100019B60()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10001A120(v0, v1);
}

unint64_t sub_100019B6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008FA98;
  if (!qword_10008FA98)
  {
    v1 = sub_100027598(&qword_10008FA90);
    sub_100046E88();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008FA98);
  }
  return result;
}

uint64_t sub_100019BD0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[7];
  uint64_t v48;

  v10 = type metadata accessor for EventValue(0);
  v48 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v46 = (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v45 = (uint64_t)&v43 - v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v43 - v15;
  v17 = sub_10001AAC8((uint64_t *)&unk_100090440);
  __chkstk_darwin(v17);
  v19 = (uint64_t *)((char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001DA44(a1, a2, a3, v47);
  v44 = a1;
  swift_bridgeObjectRetain(a1);
  v43 = a3;
  swift_retain(a3);
  sub_10001D49C((uint64_t)v19);
  v20 = sub_10001AAC8(&qword_10008E750);
  while (1)
  {
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v19, 1, v20) == 1)
    {
      swift_release(v43);
      swift_bridgeObjectRelease(v44);
      sub_100051928(v47[0]);
      return swift_release(v47[6]);
    }
    v22 = *v19;
    v21 = v19[1];
    v23 = (uint64_t)v16;
    sub_10001B968((uint64_t)v19 + *(int *)(v20 + 48), (uint64_t)v16, type metadata accessor for EventValue);
    v24 = *(_QWORD **)a5;
    v26 = sub_10001A120(v22, v21);
    v27 = v24[2];
    v28 = (v25 & 1) == 0;
    v29 = v27 + v28;
    if (__OFADD__(v27, v28))
      break;
    v30 = v25;
    if (v24[3] >= v29)
    {
      if ((a4 & 1) == 0)
      {
        sub_10001AAC8((uint64_t *)&unk_10008F860);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      sub_1000196FC(v29, a4 & 1, type metadata accessor for EventValue, (uint64_t *)&unk_100090450);
      v31 = sub_10001A120(v22, v21);
      if ((v30 & 1) != (v32 & 1))
        goto LABEL_17;
      v26 = v31;
    }
    v33 = *(_QWORD **)a5;
    if ((v30 & 1) != 0)
    {
      v34 = v33[7];
      v35 = *(_QWORD *)(v48 + 72) * v26;
      v36 = v46;
      sub_10001B93C(v34 + v35, v46, type metadata accessor for EventValue);
      v37 = v45;
      sub_10001B93C(v36, v45, type metadata accessor for EventValue);
      sub_10001C614(v36, type metadata accessor for EventValue);
      v16 = (char *)v23;
      sub_10001C614(v23, type metadata accessor for EventValue);
      swift_bridgeObjectRelease(v21);
      sub_10004DE4C(v37, *(_QWORD *)(*(_QWORD *)a5 + 56) + v35);
    }
    else
    {
      v33[(v26 >> 6) + 8] |= 1 << v26;
      v38 = (uint64_t *)(v33[6] + 16 * v26);
      *v38 = v22;
      v38[1] = v21;
      v16 = (char *)v23;
      sub_10001B968(v23, v33[7] + *(_QWORD *)(v48 + 72) * v26, type metadata accessor for EventValue);
      v39 = v33[2];
      v40 = __OFADD__(v39, 1);
      v41 = v39 + 1;
      if (v40)
        goto LABEL_16;
      v33[2] = v41;
    }
    sub_10001D49C((uint64_t)v19);
    v20 = sub_10001AAC8(&qword_10008E750);
    a4 = 1;
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_100019F38()
{
  _QWORD *v0;
  uint64_t (*v1)(_QWORD);
  uint64_t (*v2)(_QWORD);
  uint64_t *v3;
  uint64_t *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  sub_100012CD4();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  sub_10000B114(v11, v9, v7);
  sub_10000B00C();
  if (v15)
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v13;
  v17 = v14;
  sub_10001AAC8(v4);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(v6 & 1, (Swift::Int)v0))
    goto LABEL_5;
  v18 = sub_10001A120(v10, v8);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v16 = v18;
LABEL_5:
  v20 = (_QWORD *)*v0;
  if ((v17 & 1) != 0)
  {
    v21 = v20[7];
    v22 = v2(0);
    sub_1000434E0(v12, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v16, v2);
    sub_1000120D4();
  }
  else
  {
    sub_10001A324(v16, v10, v8, v12, v20, v2);
    swift_bridgeObjectRetain(v8);
  }
}

unint64_t sub_10001A040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10001A120(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[72];

  sub_10001CFD8(*(_QWORD *)(v2 + 40), a2);
  String.hash(into:)(v9, a1, a2);
  sub_10001C484();
  v5 = sub_10001B0B4();
  return sub_10001A040(v5, v6, v7);
}

uint64_t sub_10001A188(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(a1, v1);
}

uint64_t sub_10001A190()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10001A198(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001A1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10001A1BC()
{
  return 0x6B6E756C7073;
}

uint64_t sub_10001A1CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v10 + 48) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, v10 + 56, v11, v12);
}

uint64_t sub_10001A1E4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001A1F0()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_10001A1FC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
}

uint64_t sub_10001A204()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_10001A210()
{
  uint64_t v0;
  uint64_t v1;

  return Identifiable<>.id.getter(v0, v1);
}

NSString sub_10001A220()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10001A244()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10001A24C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v3, a2, v2, v3, v4);
}

uint64_t sub_10001A268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11, 2, a4, a5, a6, 33, 2);
}

uint64_t sub_10001A27C()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10001A294()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, *(_QWORD *)(v2 - 128));
}

uint64_t sub_10001A2A0(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(a1, v1);
}

void sub_10001A2A8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_10001C614(v2, a2);
}

uint64_t sub_10001A2B0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001A2C4()
{
  _QWORD *v0;

  return sub_100015060(v0);
}

BOOL sub_10001A2CC(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

unint64_t sub_10001A2DC(uint64_t a1)
{
  uint64_t v1;

  return sub_10001A120(a1, v1);
}

uint64_t sub_10001A2E8()
{
  return sub_10003D494();
}

uint64_t sub_10001A304()
{
  uint64_t v0;

  return sub_1000249F0(v0 - 128);
}

BOOL sub_10001A318@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_10001A324(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(_QWORD))
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = (_QWORD *)(a5[6] + 16 * a1);
  *v10 = a2;
  v10[1] = a3;
  v11 = a5[7];
  v12 = a6(0);
  sub_10001B968(a4, v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * a1, a6);
  v13 = a5[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
  }
  else
  {
    a5[2] = v15;
    sub_10000BF84();
  }
}

uint64_t sub_10001A3B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v2, a1);
}

uint64_t sub_10001A3C8()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10001A3E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v1 + 112);
  return swift_retain(v1);
}

uint64_t sub_10001A3F8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10001A428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return sub_100033A4C(a2 + *(_QWORD *)(v2 + 72) * a1, v3);
}

uint64_t sub_10001A438()
{
  uint64_t v0;

  return swift_release(v0);
}

void sub_10001A444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(_QWORD);
  char *v15;
  uint64_t v16[8];
  uint64_t v17;
  uint64_t v18;

  sub_10001AAC8(&qword_10008EF68);
  sub_100012C34();
  __chkstk_darwin(v0);
  sub_10000CA40();
  __chkstk_darwin(v1);
  v17 = sub_10001AAC8(&qword_10008F890);
  v16[4] = *(_QWORD *)(v17 - 8);
  sub_1000192FC();
  __chkstk_darwin(v2);
  v4 = sub_100018ED0(v3, v16[0]);
  v16[5] = *(_QWORD *)(type metadata accessor for UUID(v4) - 8);
  sub_1000192FC();
  __chkstk_darwin(v5);
  v6 = sub_10001C438();
  v7 = type metadata accessor for EventValue(v6);
  v16[6] = *(_QWORD *)(v7 - 8);
  sub_1000192FC();
  __chkstk_darwin(v8);
  sub_10001065C();
  v16[7] = v9;
  sub_100015684();
  __chkstk_darwin(v10);
  sub_10000F420();
  __chkstk_darwin(v11);
  v13 = (char *)v16 - v12;
  sub_10001B93C(v18, (uint64_t)v16 - v12, v14);
  v18 = v7;
  v15 = (char *)&loc_10001A590 + *((int *)qword_100042598 + swift_getEnumCaseMultiPayload(v13, v7));
  __asm { BR              X10 }
}

uint64_t sub_10001A5A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = v0[3];
  v5 = v0[4];
  sub_10001D44C(v0, v4);
  dispatch thunk of Encoder.singleValueContainer()(v4, v5);
  sub_10001B44C(v2 - 120, *(_QWORD *)(v2 - 96));
  v6 = sub_10001E50C();
  ((void (*)(uint64_t))dispatch thunk of SingleValueEncodingContainer.encode(_:))(v6);
  swift_bridgeObjectRelease(v3);
  return sub_100015060((_QWORD *)(v2 - 120));
}

uint64_t sub_10001AAC8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10001AB08(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 0);
}

uint64_t sub_10001AB14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10001AB24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v2, v3, 0);
}

uint64_t sub_10001AB34()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_10001AB54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_10001AB64(uint64_t (*a1)(void))
{
  return a1();
}

unint64_t sub_10001AB78(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  *(_QWORD *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  v5 = (_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * result) = a4;
  return result;
}

uint64_t sub_10001ABB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_10001ABC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_10001ABD4()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

void sub_10001ABDC(unint64_t a1@<X8>)
{
  int64_t v1;

  sub_10005EC44(a1 > 1, v1, 1);
}

uint64_t sub_10001ABF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v17 = *(_QWORD **)(v15 + 72);
  v18 = (_QWORD *)(*(_QWORD *)(a14 + 48) + 16 * v14);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  return sub_10001AAC8(v16);
}

uint64_t sub_10001AC24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v3, a2, v2, v3, v4);
}

uint64_t sub_10001AC40()
{
  uint64_t v0;

  return swift_unknownObjectRelease_n(v0, 2);
}

uint64_t sub_10001AC54(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 1, 0);
}

uint64_t sub_10001AC60()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001AC7C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100010DDC();
  return ((uint64_t (*)(uint64_t))((char *)sub_10001ACA0 + 4 * byte_10006EE50[v1]))(v0);
}

uint64_t sub_10001ACA4()
{
  return 0x6C72755F74736F70;
}

unint64_t sub_10001ACBC()
{
  return 0xD000000000000012;
}

uint64_t sub_10001AE68()
{
  return 0x5F656C6261736964;
}

uint64_t sub_10001AE9C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 448));
}

BOOL sub_10001AEC4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10001AED4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + a1 + 32);
  sub_10001D44C((_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 24));
  return *(unsigned int *)(*(_QWORD *)(v2 + 8) + 4);
}

void sub_10001AF04()
{
  sub_100021ECC(0x54494D4D4F43, 0xE600000000000000);
}

void sub_10001AF1C(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 384) = a1;
}

_QWORD *sub_10001AF30(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va, 0);
}

uint64_t sub_10001AF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_10001AF48(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10001AF64()
{
  uint64_t v0;
  _QWORD *v1;

  return sub_1000204B8(0, v0, v1);
}

void sub_10001AF74()
{
  void *v0;

}

uint64_t sub_10001AF80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0);
}

uint64_t sub_10001AF90(uint64_t a1, uint64_t a2)
{
  return sub_1000117C8(a1, a2);
}

uint64_t sub_10001AF98()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10001AFA0()
{
  return CocoaError._nsError.getter();
}

uint64_t sub_10001AFA8()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 336));
}

unint64_t sub_10001AFC8()
{
  return 0xD000000000000021;
}

uint64_t sub_10001AFDC(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_10001AFF0()
{
  uint64_t v0;

  return v0 + 488;
}

uint64_t sub_10001B000(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_10001B014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_100033AD8(*(_QWORD *)(v1 + 56) + *(_QWORD *)(*(_QWORD *)(v3 - 184) + 72) * v2, v0);
}

uint64_t sub_10001B02C()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_10001B034(uint64_t a1)
{
  return sub_10000A46C(a1);
}

id sub_10001B04C()
{
  uint64_t v0;

  return *(id *)(v0 + 1016);
}

uint64_t sub_10001B054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v1 + 120) = result;
  *(_BYTE *)(v1 + 176) = *(_BYTE *)(result + 32);
  return result;
}

void sub_10001B068(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v1;
  a1[1] = (v2 - 32) | 0x8000000000000000;
}

uint64_t sub_10001B078()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100010720(v0, v1);
}

uint64_t sub_10001B084(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001B08C()
{
  uint64_t *v0;

  return sub_10001AAC8(v0);
}

uint64_t sub_10001B094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a2, a3, v3, v4);
}

void sub_10001B0A0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  NSObject *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v5, v6, a4, v4, 0xCu);
}

uint64_t sub_10001B0B4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001B0C0(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 96) = a1;
  *v1 = *(_OWORD *)(v3 - 128);
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10001B0D4(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  return sub_1000095E0(a1, 255, a3, a4);
}

uint64_t sub_10001B0F4(uint64_t a1)
{
  uint64_t v1;

  v1 = qword_1000973E0;
  qword_1000973E0 = a1;
  return swift_release(v1);
}

void sub_10001B108()
{
  sub_100012D78();
}

__n128 sub_10001B114@<Q0>(__n128 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  *a2 = v2;
  a2[1] = v3;
  result = *(__n128 *)(v4 - 176);
  *(__n128 *)(v4 - 128) = result;
  *a1 = result;
  return result;
}

uint64_t sub_10001B128()
{
  uint64_t v0;

  return sub_10002783C(v0 + 968);
}

uint64_t sub_10001B130()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 104) = 40;
  *(_QWORD *)(v0 - 96) = 0xE100000000000000;
  return static Date.now.getter();
}

uint64_t sub_10001B144()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001B14C(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_10001B158()
{
  uint64_t v0;

  return sub_100010720(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 384));
}

uint64_t sub_10001B164(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return sub_10000A19C(v1, (uint64_t)va);
}

uint64_t sub_10001B170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10001B17C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001B188()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001B194()
{
  uint64_t v0;
  _QWORD *v1;

  sub_100015060(v1);
  return swift_bridgeObjectRelease(v0);
}

void sub_10001B1AC()
{
  _DWORD *v0;

  v0[54] = 1;
  v0[60] = 1;
  v0[56] = 1;
}

uint64_t sub_10001B1EC()
{
  uint64_t v0;

  return swift_retain_n(v0, 2);
}

uint64_t sub_10001B1F8()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 80));
}

uint64_t sub_10001B204@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 160) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v2 - 160, v1);
}

uint64_t sub_10001B21C()
{
  uint64_t v0;
  uint64_t *v1;

  return sub_10001D7AC(v0, v1);
}

uint64_t sub_10001B250()
{
  uint64_t v0;
  uint64_t v1;

  return _BridgedStoredNSError.code.getter(v0, *(_QWORD *)(v1 - 144));
}

uint64_t sub_10001B278()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100021264(v0, v1);
}

uint64_t sub_10001B284(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100015718(a1, a2);
  return swift_errorRetain(v2);
}

uint64_t sub_10001B29C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  return sub_100014F94(a1, a2, (uint64_t *)va);
}

uint64_t sub_10001B2A8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10001B2B4()
{
  uint64_t v0;

  return sub_100037D24(v0);
}

id sub_10001B2BC(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 1);
}

uint64_t sub_10001B2C8()
{
  uint64_t v0;

  return sub_10001B44C(v0 - 120, *(_QWORD *)(v0 - 96));
}

uint64_t sub_10001B2D8(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10001B2E4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
}

uint64_t sub_10001B2F8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_10001B304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return sub_10004ADA0(a1, a2, *(_QWORD *)(v7 + 16), a4, a5, v6, v5);
}

uint64_t sub_10001B32C(uint64_t a1)
{
  uint64_t v1;

  return sub_100050F70(a1, *(_QWORD *)(v1 - 152));
}

uint64_t sub_10001B338()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 120));
}

uint64_t sub_10001B35C@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 160) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 160, v1);
}

uint64_t sub_10001B374()
{
  uint64_t v0;
  uint64_t v1;

  return String.utf8CString.getter(v1, v0);
}

uint64_t sub_10001B380()
{
  uint64_t v0;

  return swift_release(v0);
}

void sub_10001B388()
{
  Swift::String v0;

  v0._countAndFlagsBits = 5972009;
  v0._object = (void *)0xE300000000000000;
  String.append(_:)(v0);
}

uint64_t sub_10001B398()
{
  uint64_t v0;

  return URLRequest.init(url:cachePolicy:timeoutInterval:)(v0, 0, 60.0);
}

void sub_10001B3B0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  os_log_type_t v4;
  NSObject *v5;
  uint8_t *v6;

  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t sub_10001B3C4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_10001B3D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return sub_100014F94(v3, v4, a3);
}

uint64_t sub_10001B3DC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 120));
}

uint64_t sub_10001B3EC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 96));
}

uint64_t sub_10001B3F4(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_10001B400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_10001B40C()
{
  uint64_t v0;
  uint64_t v1;

  return Identifiable<>.id.getter(v0, v1);
}

uint64_t sub_10001B41C()
{
  return 0x6E6F69746361;
}

uint64_t sub_10001B430()
{
  return ((uint64_t (*)(void))Task.result.getter)();
}

uint64_t sub_10001B44C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void sub_10001B474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  int64_t count;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char isEscapingClosureAtFileLocation;
  uint64_t v34;
  uint64_t v35;
  xpc_object_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  sub_100012CD4();
  v1 = v0;
  v3 = v2;
  v4 = type metadata accessor for XPCObject(0);
  sub_100012C34();
  __chkstk_darwin(v5);
  sub_10000BE50();
  v8 = v7 - v6;
  v9 = type metadata accessor for EventValue(0);
  sub_100012C34();
  __chkstk_darwin(v10);
  sub_10000BE50();
  v13 = v12 - v11;
  v14 = sub_1000199E8();
  sub_10001B93C(v14, v15, type metadata accessor for XPCObject);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v4);
  switch((int)EnumCaseMultiPayload)
  {
    case 2:
      sub_10001D8F4(EnumCaseMultiPayload, type metadata accessor for XPCObject);
      *(_BYTE *)v13 = *(_BYTE *)v8;
      v17 = sub_10001B0B4();
      v19 = 4;
      goto LABEL_9;
    case 3:
    case 6:
      sub_10001D8F4(EnumCaseMultiPayload, type metadata accessor for XPCObject);
      *(_QWORD *)v13 = *(_QWORD *)v8;
      v17 = sub_10001B0B4();
      v19 = 1;
      goto LABEL_9;
    case 4:
      sub_10001D8F4(EnumCaseMultiPayload, type metadata accessor for XPCObject);
      *(_QWORD *)v13 = *(_QWORD *)v8;
      v17 = sub_10001B0B4();
      v19 = 2;
      goto LABEL_9;
    case 5:
      sub_10001D8F4(EnumCaseMultiPayload, type metadata accessor for XPCObject);
      *(_QWORD *)v13 = *(_QWORD *)v8;
      v17 = sub_10001B0B4();
      v19 = 3;
      goto LABEL_9;
    case 8:
      sub_10001D8F4(EnumCaseMultiPayload, type metadata accessor for XPCObject);
      v20 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)v13 = *(_QWORD *)v8;
      *(_QWORD *)(v13 + 8) = v20;
      v17 = sub_10001B0B4();
      v19 = 0;
      goto LABEL_9;
    case 9:
      sub_10001D8F4(EnumCaseMultiPayload, type metadata accessor for XPCObject);
      v21 = sub_1000145B0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v13, v8, v21);
      v17 = sub_10001B0B4();
      v19 = 5;
LABEL_9:
      swift_storeEnumTagMultiPayload(v17, v18, v19);
      goto LABEL_10;
    case 11:
      v26 = *(void **)v8;
      count = xpc_array_get_count(*(xpc_object_t *)v8);
      v28 = _swiftEmptyArrayStorage;
      if (!swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage)
        || count > _swiftEmptyArrayStorage[3] >> 1)
      {
        v28 = (_QWORD *)sub_100022DA8();
      }
      v45 = (uint64_t)v28;
      v29 = sub_100018E5C((uint64_t)&unk_100088398, 24);
      *(_QWORD *)(v29 + 16) = &v45;
      v30 = sub_100018E5C((uint64_t)&unk_1000883C0, 32);
      *(_QWORD *)(v30 + 16) = sub_100043458;
      *(_QWORD *)(v30 + 24) = v29;
      v31 = sub_100043B98((uint64_t)sub_100042260);
      swift_retain(v30);
      swift_release(v30);
      xpc_array_apply(v26, v31);
      _Block_release(v31);
      v32 = swift_unknownObjectRelease(v26);
      sub_10001D8F4(v32, type metadata accessor for XPCObject);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v30, "", 69, 95, 40, 1);
      swift_release(v30);
      if ((isEscapingClosureAtFileLocation & 1) != 0)
      {
        __break(1u);
LABEL_20:
        __break(1u);
      }
      else
      {
        *(_QWORD *)v13 = v45;
        v34 = sub_10001B0B4();
        swift_storeEnumTagMultiPayload(v34, v35, 6);
LABEL_10:
        sub_10001B968(v13, v3, type metadata accessor for EventValue);
        sub_100019AF8(v3, 0);
        v22 = sub_1000199E8();
        sub_10001BCE0(v22, v23);
        v24 = sub_10001B188();
        sub_10001BCE0(v24, v25);
LABEL_11:
        sub_1000120D4();
      }
      return;
    case 12:
      v36 = *(xpc_object_t *)v8;
      v45 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v9, &protocol witness table for String);
      v37 = xpc_dictionary_get_count(v36);
      sub_10001AAC8((uint64_t *)&unk_10008F870);
      Dictionary.reserveCapacity(_:)(v37);
      v38 = sub_100018E5C((uint64_t)&unk_100088320, 24);
      *(_QWORD *)(v38 + 16) = &v45;
      v39 = sub_100018E5C((uint64_t)&unk_100088348, 32);
      *(_QWORD *)(v39 + 16) = sub_100043438;
      *(_QWORD *)(v39 + 24) = v38;
      v40 = sub_100043B98((uint64_t)sub_100011280);
      swift_unknownObjectRetain(v36);
      swift_retain(v39);
      swift_release(v39);
      xpc_dictionary_apply(v36, v40);
      _Block_release(v40);
      v41 = swift_unknownObjectRelease_n(v36, 2);
      sub_10001D8F4(v41, type metadata accessor for XPCObject);
      v42 = swift_isEscapingClosureAtFileLocation(v39, "", 69, 103, 49, 1);
      swift_release(v39);
      if ((v42 & 1) != 0)
        goto LABEL_20;
      *(_QWORD *)v13 = v45;
      v43 = sub_10001B0B4();
      swift_storeEnumTagMultiPayload(v43, v44, 7);
      goto LABEL_10;
    default:
      sub_100043BA4(v1);
      sub_100043BA4(v8);
      sub_100019AF8(v3, 1);
      goto LABEL_11;
  }
}

void sub_10001B93C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_10001C604(a1, a2, a3);
  sub_10001C724(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_10000BF94();
}

void sub_10001B968(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_10001C604(a1, a2, a3);
  sub_10001C724(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_10000BF94();
}

uint64_t sub_10001B994@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = (v2 - 32) | 0x8000000000000000;
  return swift_willThrow();
}

uint64_t sub_10001B9BC(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 0);
}

uint64_t sub_10001B9C4(uint64_t a1)
{
  return swift_allocObject(a1, 32, 7);
}

uint64_t sub_10001B9D0()
{
  return Logger.init()();
}

uint64_t sub_10001B9EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0);
}

uint64_t sub_10001B9F8()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_10001BA00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v2 + 328);
  v4 = v1 + ((*(unsigned __int8 *)(v2 + 664) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 664));
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 248) + 72);
  *(_QWORD *)(v2 + 392) = v5;
  return sub_100037D60(v4 + v5 * a1, v3);
}

uint64_t sub_10001BA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return swift_dynamicCast(v5 - 168, v5 - 120, v4, a4, 0);
}

uint64_t sub_10001BA40()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_10001BA4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, v1 + 248, v2, a1, *(_QWORD *)(v1 + 56));
}

uint64_t sub_10001BA6C(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return sub_10000A19C(v1, (uint64_t)va);
}

uint64_t sub_10001BA78(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_10001BA84()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

void sub_10001BA90()
{
  int64_t v0;

  sub_10005EC44(0, v0, 0);
}

uint64_t sub_10001BAA4(char a1)
{
  return sub_100034F58(a1);
}

uint64_t sub_10001BAB8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001BAF8()
{
  return 0;
}

uint64_t sub_10001BB14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10001BB2C()
{
  return 0x64696C61766E693CLL;
}

uint64_t sub_10001BB48()
{
  return swift_slowAlloc(64, -1);
}

uint64_t sub_10001BB58()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

void sub_10001BB60(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;

  v4 = v3;
  v5._countAndFlagsBits = v2;
  v5._object = v1;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&a1, v5);
}

uint64_t sub_10001BB74()
{
  return 0x6E6F6973726576;
}

char *sub_10001BB90@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  result = (char *)v1 + *(int *)(v2 + 48);
  *v1 = a1;
  return result;
}

uint64_t sub_10001BBA0()
{
  return 0x73656C7572;
}

uint64_t sub_10001BBB4(uint64_t a1)
{
  return sub_10003C58C(a1);
}

uint64_t sub_10001BBD0(__n128 *a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  a1[1] = a2;
  v4 = (unint64_t *)((char *)a1->n128_u64 + v3);
  v5 = (unint64_t *)((char *)a1->n128_u64 + v3 + *(int *)(v2 + 48));
  *v4 = 0x646F6874656D5FLL;
  v4[1] = 0xE700000000000000;
  *v5 = 0;
  return type metadata accessor for EventValue(0);
}

uint64_t sub_10001BC04()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10001BC10()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001BC24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  return v4(0, v5, a3, v3);
}

void sub_10001BC34(uint64_t a1, const char *a2)
{
  uint64_t v2;

  sub_100028BB8(v2, a2);
}

uint64_t sub_10001BC3C()
{
  uint64_t v0;

  return sub_100037D60(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 320));
}

void sub_10001BC48(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_100043334(a1, 0xD000000000000012, a3, a4);
}

uint64_t sub_10001BC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s10RTCUtility9XPCObjectOwst_0(a1, 1, 1, a4);
}

uint64_t sub_10001BC88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_10001BC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003C3DC(a1, a2, a3);
}

uint64_t sub_10001BCA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_10001BCB8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001BCD4()
{
  return 1701869940;
}

uint64_t sub_10001BCE0(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t *initializeWithCopy for XPCObject(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_11;
    case 1u:
      v10 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v10);
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_11;
    case 7u:
      v12 = *a2;
      v11 = a2[1];
      sub_100021264(v12, v11);
      *a1 = v12;
      a1[1] = v11;
      v7 = a1;
      v8 = a3;
      v9 = 7;
      goto LABEL_11;
    case 8u:
      v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      swift_bridgeObjectRetain(v13);
      v7 = a1;
      v8 = a3;
      v9 = 8;
      goto LABEL_11;
    case 9u:
      v14 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      v7 = a1;
      v8 = a3;
      v9 = 9;
      goto LABEL_11;
    case 0xAu:
      v15 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v15);
      v7 = a1;
      v8 = a3;
      v9 = 10;
      goto LABEL_11;
    case 0xBu:
      v16 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v16);
      v7 = a1;
      v8 = a3;
      v9 = 11;
      goto LABEL_11;
    case 0xCu:
      v17 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v17);
      v7 = a1;
      v8 = a3;
      v9 = 12;
LABEL_11:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t sub_10001BE64(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  const _xpc_type_s *type;
  const char *name;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[7];

  v51 = a4;
  v52 = a3;
  v6 = sub_10001AAC8(&qword_10008E740);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v49 - v10;
  v12 = type metadata accessor for EventValue(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001AAC8(&qword_10008FEE0);
  __chkstk_darwin(v15);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for XPCObject(0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v49 - v22;
  v50 = String.init(cString:)(a1);
  v25 = v24;
  v26 = (void *)swift_unknownObjectRetain(a2);
  XPCObject.init(_:)(v26, (uint64_t)v17);
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v17, 1, v18) == 1)
  {
    swift_bridgeObjectRelease(v25);
    v27 = &qword_10008FEE0;
    v28 = (uint64_t)v17;
  }
  else
  {
    sub_10001B968((uint64_t)v17, (uint64_t)v23, type metadata accessor for XPCObject);
    sub_10001B93C((uint64_t)v23, (uint64_t)v21, type metadata accessor for XPCObject);
    sub_10001B474();
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v11, 1, v12) != 1)
    {
      sub_10001B968((uint64_t)v11, (uint64_t)v14, type metadata accessor for EventValue);
      sub_10001B93C((uint64_t)v14, (uint64_t)v9, type metadata accessor for EventValue);
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v9, 0, 1, v12);
      sub_10001CE90((uint64_t)v9, v50, v25, v43, v44, v45, v46, v47, v49, v50, v51, v52, v53, v54[0], v54[1], v54[2], v54[3], v54[4], v54[5],
        v54[6]);
      sub_10001C614((uint64_t)v14, type metadata accessor for EventValue);
      sub_10001C614((uint64_t)v23, type metadata accessor for XPCObject);
      return 1;
    }
    sub_10001C614((uint64_t)v23, type metadata accessor for XPCObject);
    swift_bridgeObjectRelease(v25);
    v27 = &qword_10008E740;
    v28 = (uint64_t)v11;
  }
  sub_10001D7E8(v28, v27);
  type = xpc_get_type(a2);
  name = xpc_type_get_name(type);
  v31 = String.init(cString:)(name);
  v33 = v32;
  v34 = v52;
  if (qword_10008E0A8 != -1)
    swift_once(&qword_10008E0A8, sub_10005B758);
  v35 = type metadata accessor for Logger(0);
  sub_100015718(v35, (uint64_t)qword_1000901B0);
  swift_retain_n(v34, 2);
  swift_bridgeObjectRetain(v33);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = swift_slowAlloc(22, -1);
    v40 = swift_slowAlloc(64, -1);
    v54[0] = v40;
    *(_DWORD *)v39 = 136446466;
    v41 = *(_QWORD *)(v34 + 112);
    v42 = *(_QWORD *)(v34 + 120);
    swift_bridgeObjectRetain(v42);
    v53 = sub_100014F94(v41, v42, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v39 + 4, v39 + 12);
    swift_release_n(v34, 2);
    swift_bridgeObjectRelease(v42);
    *(_WORD *)(v39 + 12) = 2082;
    swift_bridgeObjectRetain(v33);
    v53 = sub_100014F94(v31, v33, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v39 + 14, v39 + 22);
    swift_bridgeObjectRelease_n(v33, 3);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "session %{public}s skipping invalid payload value of type %{public}s", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy(v40, 2);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v33, 2);
    swift_release_n(v34, 2);
  }
  return 1;
}

uint64_t _s10RTCUtility9XPCObjectOwet_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

_QWORD *sub_10001C2E4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain(v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_7;
    case 5u:
      v10 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v7 = a1;
      v8 = a3;
      v9 = 5;
      goto LABEL_7;
    case 6u:
      v11 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v11);
      v7 = a1;
      v8 = a3;
      v9 = 6;
      goto LABEL_7;
    case 7u:
      v12 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v12);
      v7 = a1;
      v8 = a3;
      v9 = 7;
LABEL_7:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t type metadata accessor for EventValue(uint64_t a1)
{
  uint64_t result;

  result = qword_10008F958;
  if (!qword_10008F958)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EventValue);
  return result;
}

uint64_t sub_10001C418(sqlite3 *a1, const char *a2)
{
  return sqlite3_exec(a1, a2, 0, 0, 0);
}

uint64_t sub_10001C428()
{
  uint64_t *v0;

  return sub_10000558C(v0[53], v0[54], v0[61], 0);
}

uint64_t sub_10001C438()
{
  return 0;
}

uint64_t sub_10001C454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0);
}

uint64_t sub_10001C45C()
{
  return swift_task_alloc(32);
}

uint64_t sub_10001C468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return _s10RTCUtility9XPCObjectOwst_0(v4, 1, 1, a4);
}

id sub_10001C478(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 0);
}

Swift::Int sub_10001C484()
{
  return Hasher._finalize()();
}

uint64_t sub_10001C48C()
{
  return 0x63736A5F343662;
}

uint64_t sub_10001C4A4()
{
  return 0x65636976726573;
}

unint64_t sub_10001C4BC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10001A120(v1, v0);
}

uint64_t sub_10001C4CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_100050BEC(v2, v1, v3, v0);
}

uint64_t sub_10001C4E4()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 160));
}

uint64_t sub_10001C500(__n128 *a1, __n128 a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  a1[1] = a2;
  a1[2].n128_u64[0] = v4;
  a1[2].n128_u64[1] = v2;
  a1[3].n128_u64[0] = v3;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10001C528(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_100033A4C(v2, v1 + *(int *)(a1 + 48));
}

void sub_10001C53C()
{
  uint64_t v0;

  sub_100022DD8(0, *(_QWORD *)(v0 + 16) + 1, 1, v0);
}

uint64_t sub_10001C554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = v14;
  sub_100011D14(v11, a1 + 64);
  *(_QWORD *)(a1 + 104) = a9;
  return swift_retain_n(v9, 2);
}

char *sub_10001C590(uint64_t a1, uint64_t a2)
{
  return sub_100069198(a1, a2);
}

uint64_t sub_10001C59C(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_10001C5A8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_10001C5B4(uint64_t a1)
{
  uint64_t v1;

  return sub_100033A4C(a1, v1);
}

uint64_t sub_10001C5BC(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10001C5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRetain(a10);
}

uint64_t sub_10001C5D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_10001D7AC(v2, a2);
}

uint64_t sub_10001C5EC@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  *(_BYTE *)(a1 + 8) = a2;
  return swift_willThrow();
}

uint64_t sub_10001C5F8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001C604(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

void sub_10001C614(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  sub_10001AFDC(v2);
  sub_10000BF94();
}

uint64_t sub_10001C63C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      v4 = a1[1];
      goto LABEL_4;
    case 5:
      v5 = type metadata accessor for UUID(0);
      result = (*(uint64_t (**)(uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    case 6:
    case 7:
      v4 = *a1;
LABEL_4:
      result = swift_bridgeObjectRelease(v4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for XPCObject(uint64_t a1)
{
  uint64_t result;

  result = qword_100090C30;
  if (!qword_100090C30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for XPCObject);
  return result;
}

uint64_t sub_10001C6F4()
{
  return sub_100011A74();
}

uint64_t sub_10001C6FC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 320));
}

uint64_t sub_10001C704()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_10001C710()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001C724@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10001C748(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10001C750()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10004A744(v0, v1);
}

uint64_t sub_10001C764()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001C78C()
{
  uint64_t v0;
  _QWORD *v1;

  return sub_1000204B8(0, v0, v1);
}

uint64_t sub_10001C79C()
{
  return Logger.init()();
}

uint64_t sub_10001C7A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return sub_100033AD8(a1 + *(int *)(v1 + 48), v2);
}

uint64_t sub_10001C7B8()
{
  return 7955819;
}

uint64_t sub_10001C7C8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t destroy for XPCObject(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 1:
    case 10:
    case 11:
    case 12:
      result = swift_unknownObjectRelease(*a1);
      break;
    case 7:
      result = sub_100010720(*a1, a1[1]);
      break;
    case 8:
      result = swift_bridgeObjectRelease(a1[1]);
      break;
    case 9:
      v4 = type metadata accessor for UUID(0);
      result = (*(uint64_t (**)(uint64_t *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    default:
      return result;
  }
  return result;
}

unsigned __int8 *XPCObject.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  xpc_type_t type;
  xpc_type_t v17;
  unsigned __int8 *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL value;
  int64_t v23;
  uint64_t v24;
  double v25;
  int64_t v26;
  unsigned __int8 *v27;
  size_t length;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = sub_100012114();
  sub_100012C34();
  __chkstk_darwin(v5);
  sub_10000CA40();
  v8 = (uint64_t *)(v6 - v7);
  v10 = __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v36 - v11);
  __chkstk_darwin(v10);
  v14 = (uint64_t *)((char *)&v36 - v13);
  if (!a1)
    return (unsigned __int8 *)_s10RTCUtility9XPCObjectOwst_0(a2, 1, 1, v4);
  v15 = (void *)swift_unknownObjectRetain(a1);
  type = xpc_get_type(v15);
  if (type == (xpc_type_t)&_xpc_type_null)
  {
    sub_10001AC40();
    v19 = sub_10001BAB8();
    v21 = 13;
LABEL_26:
    swift_storeEnumTagMultiPayload(v19, v20, v21);
LABEL_27:
    sub_10001CE4C((uint64_t)v14, a2);
    return (unsigned __int8 *)sub_10001CD48();
  }
  v17 = type;
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    sub_10001A27C();
    *v14 = a1;
    v19 = sub_10001BAB8();
    v21 = 0;
    goto LABEL_26;
  }
  if (type == (xpc_type_t)&_xpc_type_endpoint)
  {
    sub_10001A27C();
    *v14 = a1;
    v19 = sub_10001BAB8();
    v21 = 1;
    goto LABEL_26;
  }
  if (type == (xpc_type_t)&_xpc_type_BOOL)
  {
    value = xpc_BOOL_get_value(a1);
    sub_10001AC40();
    *(_BYTE *)v14 = value;
    v19 = sub_10001BAB8();
    v21 = 2;
    goto LABEL_26;
  }
  if (type == (xpc_type_t)&_xpc_type_int64)
  {
    v23 = xpc_int64_get_value(a1);
    sub_10001AC40();
    *v14 = v23;
    v19 = sub_10001BAB8();
    v21 = 3;
    goto LABEL_26;
  }
  if (type == (xpc_type_t)&_xpc_type_uint64)
  {
    v24 = xpc_uint64_get_value(a1);
    sub_10001AC40();
    *v14 = v24;
    v19 = sub_10001BAB8();
    v21 = 4;
    goto LABEL_26;
  }
  if (type == (xpc_type_t)&_xpc_type_double)
  {
    v25 = xpc_double_get_value(a1);
    sub_10001AC40();
    *(double *)v14 = v25;
    v19 = sub_10001BAB8();
    v21 = 5;
    goto LABEL_26;
  }
  if (type == (xpc_type_t)&_xpc_type_date)
  {
    v26 = xpc_date_get_value(a1);
    sub_10001AC40();
    *v14 = v26;
    v19 = sub_10001BAB8();
    v21 = 6;
    goto LABEL_26;
  }
  if (type == (xpc_type_t)&_xpc_type_data)
  {
    result = (unsigned __int8 *)xpc_data_get_bytes_ptr(a1);
    if (result)
    {
      v27 = result;
      length = xpc_data_get_length(a1);
      v29 = Data.init(bytes:count:)(v27, length);
      v31 = v30;
      sub_10001AC40();
      *v12 = v29;
      v12[1] = v31;
      swift_storeEnumTagMultiPayload(v12, v4, 7);
      v32 = (uint64_t)v12;
LABEL_32:
      sub_10001CE4C(v32, (uint64_t)v14);
      goto LABEL_27;
    }
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    result = (unsigned __int8 *)xpc_string_get_string_ptr(a1);
    if (result)
    {
      v33 = String.init(cString:)(result);
      v35 = v34;
      sub_10001AC40();
      *v8 = v33;
      v8[1] = v35;
      swift_storeEnumTagMultiPayload(v8, v4, 8);
      v32 = (uint64_t)v8;
      goto LABEL_32;
    }
    goto LABEL_39;
  }
  if (type != (xpc_type_t)&_xpc_type_uuid)
  {
    if (type == (xpc_type_t)&_xpc_type_shmem)
    {
      sub_10001A27C();
      *v14 = a1;
      v19 = sub_10001BAB8();
      v21 = 10;
    }
    else
    {
      sub_10001A27C();
      if (v17 == (xpc_type_t)&_xpc_type_array)
      {
        *v14 = a1;
        v19 = sub_10001BAB8();
        v21 = 11;
      }
      else
      {
        if (v17 != (xpc_type_t)&_xpc_type_dictionary)
        {
          sub_10001A27C();
          return (unsigned __int8 *)_s10RTCUtility9XPCObjectOwst_0(a2, 1, 1, v4);
        }
        *v14 = a1;
        v19 = sub_10001BAB8();
        v21 = 12;
      }
    }
    goto LABEL_26;
  }
  result = (unsigned __int8 *)xpc_uuid_get_bytes(a1);
  if (result)
  {
    UUID.init(uuid:)(*result, result[1], result[2], result[3], result[4], result[5], result[6], result[7], *((_QWORD *)result + 1));
    sub_10001AC40();
    v19 = sub_10001BAB8();
    v21 = 9;
    goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t _s10RTCUtility9XPCObjectOwst_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_10001CC44(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10001CC4C(uint64_t a1)
{
  uint64_t v1;

  return _s10RTCUtility9XPCObjectOwet_0(a1, 1, v1);
}

uint64_t sub_10001CC90(float a1)
{
  uint64_t v1;
  uint64_t v2;
  float *v3;
  uint64_t v4;

  *v3 = a1;
  return swift_getErrorValue(v1, v4, v2);
}

uint64_t sub_10001CCAC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 224));
}

uint64_t sub_10001CCC4(uint64_t a1, uint64_t a2)
{
  return sub_1000117C8(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2);
}

uint64_t sub_10001CCD0()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_10001CCDC()
{
  return 0x656469727265766FLL;
}

uint64_t sub_10001CCFC()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_10001CD08()
{
  uint64_t v0;
  uint64_t v1;

  return Identifiable<>.id.getter(v0, v1);
}

void sub_10001CD18(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_10001CD2C()
{
  return Logger.init()();
}

uint64_t sub_10001CD48()
{
  uint64_t v0;
  uint64_t v1;

  return _s10RTCUtility9XPCObjectOwst_0(v1, 0, 1, v0);
}

uint64_t sub_10001CD5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v1 + v3 * a1 + *(int *)(v2 + 48);
}

uint64_t sub_10001CD6C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100010720(v1, v0);
}

void sub_10001CD78(uint64_t a1, uint64_t a2)
{
  Swift::String v2;

  v2._countAndFlagsBits = 0x2D746E65746E6F43;
  v2._object = (void *)0xEE006874676E654CLL;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&a1, v2);
}

uint64_t sub_10001CDA4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[23];
  v1[50] = *v0;
  v1[51] = v0[1];
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10001CDC0(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10001CDC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_10001CDD4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Array<A>.init(from:)(va);
}

uint64_t sub_10001CDE0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_100014F94(v1, v0, (uint64_t *)(v2 - 96));
}

uint64_t sub_10001CDF0()
{
  uint64_t v0;

  return swift_allocObject(v0, 112, 15);
}

void sub_10001CE04(uint64_t a1@<X8>)
{
  sub_10005EC44(0, a1 + 1, 1);
}

uint64_t sub_10001CE18(uint64_t a1)
{
  return swift_allocObject(a1, 48, 7);
}

uint64_t sub_10001CE24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11, 2, a4, 55, 2, a7, 25, a9, a10, a11);
}

uint64_t sub_10001CE3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_10001CE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for XPCObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10001CE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100040BB0(a1, a2, a3, (uint64_t)&unk_10008E740, (uint64_t)type metadata accessor for EventValue, (uint64_t)&unk_10008F860, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

uint64_t sub_10001CEAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10001CEBC()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001CEC4(uint64_t a1)
{
  return dispatch thunk of Actor.unownedExecutor.getter(a1);
}

uint64_t sub_10001CECC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return 0x554E447473616CLL;
}

uint64_t sub_10001CEEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a1 + 16 * v1);
  v4 = v3[1];
  *(_QWORD *)(v2 + 632) = v4;
  *(_QWORD *)(v2 + 640) = *v3;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_10001CF04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10001CF14()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192));
}

uint64_t sub_10001CF1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_10001CF28()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 24));
}

uint64_t sub_10001CF30(uint64_t a1)
{
  return swift_task_alloc((*(_QWORD *)(*(_QWORD *)(a1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10001CF48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_10001CF58()
{
  return 0x7365756C6176;
}

uint64_t sub_10001CF6C()
{
  return ((uint64_t (*)(void))Task.value.getter)();
}

uint64_t sub_10001CF88()
{
  return 0x54494D4D4F43;
}

BOOL sub_10001CF9C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

_QWORD *sub_10001CFD8(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return Hasher.init(_seed:)((uint64_t *)va, a1);
}

void sub_10001CFE0(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 72) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10001CFFC()
{
  return type metadata accessor for SessionCoordinator();
}

uint64_t sub_10001D004(uint64_t a1)
{
  uint64_t v1;

  return swift_allocObject(v1, ((*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) | 7);
}

uint64_t sub_10001D02C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;

  return sub_100014F94(v4, v3, a3);
}

uint64_t sub_10001D038()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0 + 32, v2);
}

uint64_t sub_10001D044(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 720) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 720, v4, v2, v3 + 22);
}

uint64_t sub_10001D05C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001D074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_10001D0B0()
{
  uint64_t v0;

  return sub_10001EFD0(v0);
}

uint64_t sub_10001D0B8()
{
  return type metadata accessor for SubmissionCoordinator();
}

unint64_t sub_10001D0C0()
{
  return sub_100061A3C();
}

uint64_t sub_10001D0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, a1, a2, 0);
}

uint64_t sub_10001D0E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;

  swift_isUniquelyReferenced_nonNull_native(*v0);
  sub_1000103D8();
  sub_10001B188();
  sub_100019F38();
  v1 = *v0;
  *v0 = v3;
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_10001D170@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return swift_allocObject(v2, a1, a2 | 7);
}

uint64_t sub_10001D190()
{
  return swift_slowAlloc(12, -1);
}

uint64_t sub_10001D1A0()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 360));
}

uint64_t sub_10001D1B8()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10001D1C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  return sub_100006354(v1, v2, v0);
}

uint64_t sub_10001D1D0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
}

unint64_t sub_10001D1D8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10001A120(v1, v0);
}

uint64_t sub_10001D1E4(char a1)
{
  return sub_10003AFB0(a1);
}

double sub_10001D1F0()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  _s10RTCUtility9XPCObjectOwst_0(v0, 0, 1, v1);
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_10001D214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(_QWORD *)(v4 - 112) = v5;
  return v5(v3, v1, v0);
}

uint64_t sub_10001D22C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100010720(v1, v0);
}

uint64_t sub_10001D238()
{
  unint64_t v0;
  uint64_t v1;

  return sub_1000229EC(v1, v0);
}

unint64_t sub_10001D244()
{
  return 0xD000000000000018;
}

uint64_t sub_10001D258()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 336);
}

void sub_10001D274()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_10001D280()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001D28C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_beginAccess(v2 + 112, a2, 0, 0);
}

uint64_t sub_10001D29C()
{
  uint64_t v0;

  return sub_10001EFD0(v0);
}

uint64_t sub_10001D2A4()
{
  return 0x6E6F6973726576;
}

uint64_t sub_10001D2BC()
{
  return 0x737265746C6966;
}

uint64_t sub_10001D2D4()
{
  return swift_slowAlloc(32, -1);
}

void sub_10001D2E4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 8 * (v0 >> 6) + 64) |= 1 << v0;
  v4 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v0);
  *v4 = v2;
  v4[1] = v1;
}

uint64_t sub_10001D318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_10001D328(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_10001D33C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001D35C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return RTCXPCDictionary.subscript.setter(a1, v2, v1);
}

void sub_10001D368(uint64_t a1, _DWORD *a2)
{
  int v2;

  *a2 = v2;
}

uint64_t sub_10001D37C()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 464));
}

uint64_t sub_10001D384()
{
  return swift_slowAlloc(32, -1);
}

uint64_t sub_10001D390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v11, v10);
}

uint64_t sub_10001D3AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 320);
}

uint64_t sub_10001D3C8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001D3D8()
{
  return sub_100035EFC();
}

uint64_t sub_10001D3E4()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

void sub_10001D3EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_100043334(a1, a2, 0xE700000000000000, a4);
}

uint64_t sub_10001D3F4()
{
  uint64_t v0;
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 - 104) + 48) + 16 * v0 + 8));
}

uint64_t sub_10001D408(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001D420()
{
  uint64_t v0;

  return sub_100033A90(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

uint64_t sub_10001D42C()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 424));
}

_QWORD *sub_10001D44C(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

void sub_10001D470(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_10005FA48(a1, a2, a3);
  sub_10001C724(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_10000BF94();
}

uint64_t sub_10001D49C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int64_t v45;

  v3 = sub_10001AAC8((uint64_t *)&unk_10008F8A0);
  __chkstk_darwin(v3);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001AAC8(&qword_10008EF68);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)&v40 - v10);
  v12 = *v1;
  v13 = v1[1];
  v15 = v1[2];
  v14 = v1[3];
  v16 = v14;
  v17 = v1[4];
  v41 = v5;
  if (v17)
  {
    v44 = v9;
    v45 = v14;
    v42 = v15;
    v43 = v13;
    v18 = a1;
    v19 = (v17 - 1) & v17;
    v20 = __clz(__rbit64(v17)) | (v14 << 6);
LABEL_3:
    v21 = *(_QWORD *)(v12 + 56);
    v22 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * v20);
    v23 = v12;
    v24 = *v22;
    v25 = v22[1];
    v26 = type metadata accessor for EventValue(0);
    sub_10001B93C(v21 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v20, (uint64_t)v11 + *(int *)(v3 + 48), type metadata accessor for EventValue);
    *v11 = v24;
    v11[1] = v25;
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v11, 0, 1, v3);
    v27 = v25;
    v12 = v23;
    swift_bridgeObjectRetain(v27);
    a1 = v18;
    v13 = v43;
    v9 = v44;
    v15 = v42;
    goto LABEL_25;
  }
  v28 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
LABEL_23:
    v16 = v10;
    goto LABEL_24;
  }
  v29 = (unint64_t)(v15 + 64) >> 6;
  if (v28 < v29)
  {
    v30 = *(_QWORD *)(v13 + 8 * v28);
    if (v30)
    {
LABEL_7:
      v42 = v15;
      v43 = v13;
      v44 = v9;
      v45 = v28;
      v18 = a1;
      v19 = (v30 - 1) & v30;
      v20 = __clz(__rbit64(v30)) + (v28 << 6);
      goto LABEL_3;
    }
    v31 = v14 + 2;
    v16 = v14 + 1;
    if (v14 + 2 < v29)
    {
      v30 = *(_QWORD *)(v13 + 8 * v31);
      if (v30)
      {
LABEL_10:
        v28 = v31;
        goto LABEL_7;
      }
      v16 = v14 + 2;
      if (v14 + 3 < v29)
      {
        v30 = *(_QWORD *)(v13 + 8 * (v14 + 3));
        if (v30)
        {
          v28 = v14 + 3;
          goto LABEL_7;
        }
        v31 = v14 + 4;
        v16 = v14 + 3;
        if (v14 + 4 < v29)
        {
          v30 = *(_QWORD *)(v13 + 8 * v31);
          if (v30)
            goto LABEL_10;
          v28 = v14 + 5;
          v16 = v14 + 4;
          if (v14 + 5 < v29)
          {
            v30 = *(_QWORD *)(v13 + 8 * v28);
            if (v30)
              goto LABEL_7;
            v10 = v29 - 1;
            v32 = v14 + 6;
            while (v32 < v29)
            {
              v30 = *(_QWORD *)(v13 + 8 * v32++);
              if (v30)
              {
                v28 = v32 - 1;
                goto LABEL_7;
              }
            }
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_24:
  v45 = v16;
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)v11, 1, 1, v3);
  v19 = 0;
LABEL_25:
  *v1 = v12;
  v1[1] = v13;
  v33 = v45;
  v1[2] = v15;
  v1[3] = v33;
  v1[4] = v19;
  v34 = (void (*)(uint64_t))v1[5];
  sub_10005F624((uint64_t)v11, (uint64_t)v9, &qword_10008EF68);
  v35 = 1;
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v9, 1, v3) != 1)
  {
    v36 = (uint64_t)v9;
    v37 = (uint64_t)v41;
    sub_10005F624(v36, (uint64_t)v41, (uint64_t *)&unk_10008F8A0);
    v34(v37);
    sub_10001D7E8(v37, (uint64_t *)&unk_10008F8A0);
    v35 = 0;
  }
  v38 = sub_10001AAC8(&qword_10008E750);
  return _s10RTCUtility9XPCObjectOwst_0(a1, v35, 1, v38);
}

uint64_t sub_10001D7AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10001AAC8(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_10001D7E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_10001AAC8(a2);
  sub_10001AFDC(v2);
  sub_10000BF94();
}

uint64_t sub_10001D810@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = (uint64_t)a1 + *(int *)(sub_10001AAC8((uint64_t *)&unk_10008F8A0) + 48);
  v5 = sub_10001AAC8(&qword_10008E750);
  result = sub_10001D97C((uint64_t)a2 + *(int *)(v5 + 48), *a1, a1[1], v4);
  *a2 = result;
  a2[1] = v7;
  return result;
}

uint64_t sub_10001D870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_10001AAC8(a5);
}

uint64_t sub_10001D878(uint64_t a1)
{
  return String.data(using:allowLossyConversion:)(a1, 0, 10, 0xE100000000000000);
}

unsigned __int8 *sub_10001D888@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  return RTCXPCDictionary.subscript.getter(v2, v3, v1, a1);
}

uint64_t sub_10001D898()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 344));
}

uint64_t sub_10001D8B0()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_10001D8BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10001D8D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10001D8E4()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 160));
}

void sub_10001D8F4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_10001C614(v2, a2);
}

uint64_t sub_10001D8FC()
{
  return 7496054;
}

uint64_t sub_10001D90C()
{
  return 0x68775F746E657665;
}

uint64_t sub_10001D930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_10001D93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v13 - 192) = (char *)&a9 - v9;
  *(_QWORD *)(v13 - 128) = v12;
  return sub_10004ADA0(a1, a2, *(_QWORD *)(v12 + 16), a4, a5, v11, v10);
}

uint64_t sub_10001D960(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

void sub_10001D970(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_10001D97C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10001B93C(a4, a1, type metadata accessor for EventValue);
  swift_bridgeObjectRetain(a3);
  return a2;
}

void sub_10001D9C0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

uint64_t sub_10001D9CC()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_10001D9D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return sub_100033AD8(a1 + *(int *)(v1 + 48), v2);
}

uint64_t sub_10001D9EC(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
  return swift_willThrow();
}

uint64_t sub_10001DA00()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_10001DA0C()
{
  uint64_t v0;

  return sub_10001E08C(v0);
}

uint64_t sub_10001DA14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_10001DA24()
{
  uint64_t v0;
  uint64_t v1;

  return Identifiable<>.id.getter(v0, v1);
}

uint64_t sub_10001DA34()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_10001DA44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = -1 << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64)
    v8 = ~(-1 << -(char)v4);
  else
    v8 = -1;
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

void sub_10001DA80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  __n128 *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  _OWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _OWORD *v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  _QWORD *v45;
  char v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char v64[16];
  __int128 v65;

  v2 = sub_10001AAC8(&qword_10008E740);
  __chkstk_darwin(v2);
  v54 = (_QWORD **)((char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001AAC8(&qword_10008E748);
  v4 = sub_10001AAC8(&qword_10008E750);
  sub_10001802C();
  v7 = v6 & ~v5;
  v8 = sub_10001D170(v7 - v1 + 16 * v1, v5);
  *(_OWORD *)(v8 + 16) = xmmword_10006D0F0;
  v56 = v8;
  v9 = (_QWORD *)(v8 + v7);
  v10 = (_OWORD *)(v8 + v7 + *(int *)(v4 + 48));
  *v9 = 0x7265646E65735FLL;
  v9[1] = 0xE700000000000000;
  v11 = *(_OWORD *)(v0 + 64);
  v60 = *(_OWORD *)(v0 + 48);
  v61 = v11;
  v62 = *(_OWORD *)(v0 + 80);
  v65 = v60;
  *v10 = v60;
  v12 = sub_1000192F4();
  sub_10001AB08((uint64_t)v10);
  v13 = (__n128 *)sub_10001DF84((uint64_t)v9 + v1);
  sub_10001B114(v13, v14);
  sub_10001AB08(v15);
  v16 = (char *)v9 + 2 * v1;
  v17 = &v16[*(int *)(v4 + 48)];
  strcpy(v16, "_serviceName");
  v16[13] = 0;
  *((_WORD *)v16 + 7) = -5120;
  v63 = v62;
  *(_OWORD *)v17 = v62;
  sub_10001AB08((uint64_t)v17);
  v18 = (_QWORD *)((char *)v9 + 3 * v1);
  v19 = (_OWORD *)((char *)v18 + *(int *)(v4 + 48));
  *v18 = 0x6E6F69737365735FLL;
  v18[1] = 0xEA00000000004449;
  v59 = *(_OWORD *)(v0 + 16);
  *v19 = v59;
  sub_10001AB08((uint64_t)v19);
  v20 = (_QWORD *)sub_10001DF84((uint64_t)v9 + 4 * v1);
  *v21 = 0x616E7265746E695FLL;
  v21[1] = 0xE90000000000006CLL;
  sub_100012C44(v20, *(_QWORD *)v0);
  v22 = (_QWORD *)sub_10001DF84((uint64_t)v9 + 5 * v1);
  *v23 = 0x6E6F7A656D69745FLL;
  v23[1] = 0xEF74657366664F65;
  sub_100012C44(v22, *(_QWORD *)(v0 + 8));
  v24 = (_OWORD *)sub_10001CD5C(6);
  *v25 = 0x6449746E65696C63;
  v25[1] = 0xE800000000000000;
  v58 = *(_OWORD *)(v0 + 32);
  *v24 = v58;
  sub_10001AB08((uint64_t)v24);
  v26 = (char *)&v9[v1] - v1;
  v27 = &v26[*(int *)(v4 + 48)];
  strcpy(v26, "_productFamily");
  v26[15] = -18;
  sub_10001E08C((uint64_t)&v65);
  sub_10001E08C((uint64_t)v64);
  sub_10001E08C((uint64_t)&v63);
  sub_10001E08C((uint64_t)&v59);
  sub_10001E08C((uint64_t)&v58);
  if (qword_10008DFC0 != -1)
    swift_once(&qword_10008DFC0, sub_1000248CC);
  v28 = *(_QWORD *)algn_10008E6D8;
  v55 = *(_QWORD *)algn_10008E6D8;
  *(_QWORD *)v27 = qword_10008E6D0;
  *((_QWORD *)v27 + 1) = v28;
  sub_10001AB08((uint64_t)v27);
  v29 = &v9[v1];
  v30 = (_QWORD *)((char *)v29 + *(int *)(v4 + 48));
  *v29 = 0x656D614E736F5FLL;
  v29[1] = 0xE700000000000000;
  v31 = unk_10008E6E8;
  *v30 = qword_10008E6E0;
  v30[1] = v31;
  sub_10001AB08((uint64_t)v30);
  v32 = (_QWORD *)sub_10001DF84((uint64_t)v9 + 9 * v1);
  strcpy(v33, "_productModel");
  *((_WORD *)v33 + 7) = -4864;
  v34 = unk_10008E6F8;
  *v32 = qword_10008E6F0;
  v32[1] = v34;
  sub_10001AB08((uint64_t)v32);
  v35 = (_QWORD *)sub_10001CD5C(10);
  *v36 = 0x6973726556736F5FLL;
  v36[1] = 0xEA00000000006E6FLL;
  v37 = unk_10008E708;
  *v35 = qword_10008E700;
  v35[1] = v37;
  sub_10001AB08((uint64_t)v35);
  v38 = (_QWORD *)sub_10001CD5C(11);
  *v39 = 0x646C6975625FLL;
  v39[1] = 0xE600000000000000;
  v40 = unk_10008E718;
  *v38 = qword_10008E710;
  v38[1] = v40;
  sub_10001AB08((uint64_t)v38);
  v41 = (_QWORD *)sub_10001CD5C(12);
  *v42 = 0x5674726F7065725FLL;
  v42[1] = 0xEB00000000737265;
  v43 = unk_10008E728;
  *v41 = qword_10008E720;
  v41[1] = v43;
  sub_10001AB08((uint64_t)v41);
  sub_10001B068((_QWORD *)((char *)v9 + 13 * v1));
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v31);
  sub_100018040();
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v43);
  v44 = sub_10001E0B4();
  sub_1000120BC(v44);
  v45 = (_QWORD *)((char *)v9 + 14 * v1);
  *v45 = 0xD000000000000016;
  v45[1] = 0x80000001000710D0;
  v46 = sub_10001E218();
  sub_1000120BC(v46);
  v57 = Dictionary.init(dictionaryLiteral:)(v56, &type metadata for String, v12, &protocol witness table for String);
  if (qword_10008E080 != -1)
    swift_once(&qword_10008E080, sub_1000584B0);
  if (byte_1000973F0 == 1)
  {
    v47 = *(_QWORD *)algn_10008E738;
    v48 = v54;
    *v54 = qword_10008E730;
    v48[1] = v47;
    sub_10001AB08((uint64_t)v48);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v48, 0, 1, v12);
    sub_100010644();
    sub_10001CE90((uint64_t)v48, 0x754E6C6169726553, 0xE90000000000006DLL, v49, v50, v51, v52, v53, (uint64_t)v54, v55, v56, v57, v58, *((uint64_t *)&v58 + 1), v59, *((uint64_t *)&v59 + 1), v60, *((uint64_t *)&v60 + 1), v61,
      *((uint64_t *)&v61 + 1));
  }
  sub_1000120D4();
}

uint64_t sub_10001DF84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return a1 + *(int *)(v1 + 48);
}

uint64_t sub_10001DF90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_10001DFA0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10001DFB0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 568) = 0;
  return sub_100037D60(*(_QWORD *)(v0 + 360)+ ((*(unsigned __int8 *)(v0 + 664) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 664)), *(_QWORD *)(v0 + 272));
}

uint64_t sub_10001DFD0()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 160));
}

uint64_t sub_10001DFE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10001DFF0()
{
  return swift_slowAlloc(12, -1);
}

uint64_t sub_10001E010()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 336));
}

uint64_t sub_10001E028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10001E044()
{
  return ((uint64_t (*)(void))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:))();
}

uint64_t sub_10001E060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10001E070(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v2 - 96, *(_QWORD *)(v2 - 152), v1);
}

uint64_t sub_10001E08C(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

BOOL sub_10001E0B4()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v0 = objc_msgSend(objc_allocWithZone((Class)MCRestrictionManager), "init");
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureAppAndAccessoryAnalyticsAllowed);
  if (sub_10001E13C(v1, v2, v0) == 1)
  {

    return 1;
  }
  else
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureAppAnalyticsAllowed);
    v6 = sub_10001E13C(v4, v5, v0);

    return v6 == 1;
  }
}

id sub_10001E13C(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5;
  id v6;

  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v6 = objc_msgSend(a3, "BOOLSettingForFeature:", v5);

  return v6;
}

uint64_t sub_10001E194()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10001E19C()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_10001E1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, a2, v9, a4);
}

uint64_t sub_10001E1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  unint64_t v5;
  va_list va;

  va_start(va, a4);
  return sub_100014F94(v4, v5, (uint64_t *)va);
}

id sub_10001E1C0()
{
  void *v0;

  return v0;
}

uint64_t sub_10001E1D4(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1000195D4(a1, a2, *(_QWORD *)(v2 + 496), *(_QWORD *)(v2 + 504));
}

uint64_t sub_10001E1DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return 0;
}

void sub_10001E1F0()
{
  void *v0;

}

uint64_t sub_10001E1FC@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_10001E208(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + v1);
  *(_QWORD *)(v2 + v1) = a1;
  return swift_unknownObjectRelease(v3);
}

BOOL sub_10001E218()
{
  uint8_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t domain_answer;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint8_t *v11;
  NSObject *v12;
  os_log_type_t v13;
  _WORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = sub_10000F3D0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  __chkstk_darwin(v3);
  v5 = (char *)&v16 - v4;
  v17 = 0;
  v18 = 0;
  domain_answer = os_eligibility_get_domain_answer(18, &v18, &v17, 0, 0);
  v7 = v18;
  if (!v18)
  {
    v0 = (uint8_t *)domain_answer;
    v8 = Logger.init()();
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, (os_log_type_t)v10))
    {
      v11 = (uint8_t *)sub_100012C5C(8);
      *(_DWORD *)v11 = 67109120;
      HIDWORD(v16) = (_DWORD)v0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)((char *)&v16 + 4, &v17, v11 + 4, v11 + 8);
      _os_log_impl((void *)&_mh_execute_header, v9, (os_log_type_t)v10, "Unable to determine eligibility due to error %d", v11, 8u);
      sub_1000120F8((uint64_t)v11);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    v7 = v18;
  }
  if (v7 == 4)
  {
    sub_1000106FC();
    v12 = sub_100018E8C();
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (_WORD *)sub_100012C5C(2);
      sub_1000078D0(v14);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Device is eligible for Elisabeth", v0, 2u);
      sub_1000120F8((uint64_t)v0);
    }

    sub_100011160(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  return v7 == 4;
}

uint64_t type metadata accessor for CachedStorebag(uint64_t a1)
{
  return sub_10001030C(a1, qword_100090A28, (uint64_t)&nominal type descriptor for CachedStorebag);
}

uint64_t sub_10001E42C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10001E450(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void sub_10001E468(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_10001E490(uint64_t a1)
{
  return sub_1000542C8(a1);
}

uint64_t sub_10001E49C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001E4B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100067ABC);
}

uint64_t sub_10001E4D4(uint64_t a1)
{
  uint64_t v1;

  return _s10RTCUtility9XPCObjectOwst_0(v1, 1, 1, a1);
}

uint64_t sub_10001E4F8()
{
  uint64_t v0;

  return swift_endAccess(v0);
}

uint64_t sub_10001E504()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
}

uint64_t sub_10001E50C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001E524(uint64_t a1, _QWORD *a2)
{
  *a2 = 1;
  return swift_willThrow();
}

uint64_t sub_10001E534()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10001E540()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100021264(v0, v1);
}

uint64_t sub_10001E54C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = a2;
  return swift_storeEnumTagMultiPayload(a1, v2, 4);
}

void sub_10001E55C(uint64_t a1, ...)
{
  char v1;
  va_list va;

  va_start(va, a1);
  sub_100041118((uint64_t)va, v1);
}

void sub_10001E574()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10001E598()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 424));
}

uint64_t sub_10001E5C0()
{
  uint64_t v0;
  uint64_t v1;

  return Identifiable<>.id.getter(v1, v0);
}

uint64_t sub_10001E5D0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 424) = sub_10001E60C();
  *(_QWORD *)(v0 + 432) = v1;
  sub_10000CEB8();
  return sub_100012104();
}

uint64_t sub_10001E60C()
{
  uint64_t v0;
  _BYTE v2[25];
  __int128 v3;
  __int128 v4;

  *(_OWORD *)v2 = *(_OWORD *)(v0 + 152);
  *(_OWORD *)&v2[9] = *(_OWORD *)(v0 + 161);
  v3 = *(_OWORD *)(v0 + 136);
  v4 = *(_OWORD *)&v2[8];
  sub_10001E698(&v3);
  sub_10001E698((_QWORD *)&v3 + 1);
  sub_10001E08C((uint64_t)&v4);
  sub_10001E6C0();
  sub_100005400(&v3);
  sub_100005400((_QWORD *)&v3 + 1);
  sub_10001EFD0((uint64_t)&v4);
  return sub_100014638();
}

_QWORD *sub_10001E698(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

void *sub_10001E6C0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t isStackAllocationSafe;
  __n128 v44;
  char *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  unsigned int v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  void *result;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;

  v86 = type metadata accessor for SessionConfiguration.BackendHTTP(0);
  __chkstk_darwin(v86);
  v85 = (char *)&v80 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for SessionConfiguration.Backend(0);
  v2 = *(uint64_t (**)(uint64_t))(v89 - 8);
  v3 = __chkstk_darwin(v89);
  v5 = (uint64_t *)((char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = __chkstk_darwin(v3);
  v88 = (uint64_t *)((char *)&v80 - v7);
  v8 = __chkstk_darwin(v6);
  v10 = (uint64_t)&v80 - v9;
  v11 = __chkstk_darwin(v8);
  v87 = (uint64_t *)((char *)&v80 - v12);
  v13 = __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v80 - v14);
  __chkstk_darwin(v13);
  v17 = (char *)&v80 - v16;
  v91 = *v0;
  v18 = v91;
  v19 = *(_QWORD *)(v91 + 16);
  v20 = _swiftEmptyArrayStorage;
  v84 = v5;
  v81 = v2;
  v82 = v19;
  v80 = v91;
  if (v19)
  {
    v90 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v91);
    sub_10001BA90();
    v21 = v2;
    v22 = v18 + ((*((unsigned __int8 *)v2 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v2 + 80));
    v83 = *((_QWORD *)v21 + 9);
    v23 = v19;
    do
    {
      sub_10005039C(v22, (uint64_t)v17);
      sub_10005039C((uint64_t)v17, (uint64_t)v15);
      if (sub_1000106D8((uint64_t)v15) == 1)
      {
        v0 = (uint64_t *)v15[1];
        v24 = v15[3];
        swift_bridgeObjectRelease(v15[4]);
        sub_10000A820();
        sub_10000A828();
      }
      else
      {
        sub_10001B32C((uint64_t)v15);
        v24 = *(uint64_t *)((char *)v0 + *(int *)(v86 + 36));
        sub_100007840();
        sub_10003D6E8((uint64_t)v0, type metadata accessor for SessionConfiguration.BackendHTTP);
      }
      sub_10003D6E8((uint64_t)v17, type metadata accessor for SessionConfiguration.Backend);
      v20 = v90;
      if ((swift_isUniquelyReferenced_nonNull_native(v90) & 1) == 0)
      {
        sub_10001CE04(v20[2]);
        v20 = v90;
      }
      v26 = v20[2];
      v25 = v20[3];
      if (v26 >= v25 >> 1)
      {
        sub_10001ABDC(v25);
        v20 = v90;
      }
      v20[2] = v26 + 1;
      v20[v26 + 4] = v24;
      v22 += v83;
      --v23;
    }
    while (v23);
    sub_100019564();
    v5 = v84;
    v2 = v81;
    v19 = v82;
  }
  v90 = &_swiftEmptySetSingleton;
  v27 = v20[2];
  if (v27)
  {
    swift_bridgeObjectRetain(v20);
    for (i = 0; i != v27; ++i)
    {
      v29 = v20[i + 4];
      swift_bridgeObjectRetain(v29);
      sub_10004E424(v30);
    }
    sub_100019460();
    v19 = v82;
  }
  sub_100019460();
  v83 = (uint64_t)v90;
  v31 = _swiftEmptyArrayStorage;
  if (v19)
  {
    v90 = _swiftEmptyArrayStorage;
    v32 = v80;
    sub_100010644();
    sub_10001BA90();
    v33 = v32 + ((*((unsigned __int8 *)v2 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v2 + 80));
    v34 = *((_QWORD *)v2 + 9);
    v35 = v19;
    do
    {
      v31 = v87;
      sub_10005039C(v33, (uint64_t)v87);
      sub_10005039C((uint64_t)v31, v10);
      if (sub_1000106D8(v10) == 1)
      {
        v31 = *(_QWORD **)(v10 + 8);
        v36 = *(_QWORD *)(v10 + 24);
        swift_bridgeObjectRelease(*(_QWORD *)(v10 + 32));
        sub_10000A820();
        sub_10000A828();
      }
      else
      {
        sub_10001B32C(v10);
        v36 = *(_QWORD *)((char *)v31 + *(int *)(v86 + 36));
        sub_100007840();
        sub_10003D6E8((uint64_t)v31, type metadata accessor for SessionConfiguration.BackendHTTP);
      }
      sub_10003D6E8((uint64_t)v87, type metadata accessor for SessionConfiguration.Backend);
      if ((sub_100018F14() & 1) == 0)
      {
        sub_10001CE04(v31[2]);
        v31 = v90;
      }
      v38 = v31[2];
      v37 = v31[3];
      if (v38 >= v37 >> 1)
      {
        sub_10001ABDC(v37);
        v31 = v90;
      }
      v31[2] = v38 + 1;
      v31[v38 + 4] = v36;
      v33 += v34;
      --v35;
    }
    while (v35);
    sub_100019564();
    v5 = v84;
    v19 = v82;
  }
  v39 = v31[2];
  if (v39)
  {
    swift_bridgeObjectRetain(v31);
    v40 = 0;
    v41 = &_swiftEmptySetSingleton;
    do
    {
      v42 = v41[32] & 0x3F;
      sub_10000BFEC();
      isStackAllocationSafe = sub_100010644();
      if (v42 <= 0xD
        || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * v10, 8, v44),
            (isStackAllocationSafe & 1) != 0))
      {
        __chkstk_darwin(isStackAllocationSafe);
        v45 = (char *)&v80 - ((8 * v10 + 15) & 0x3FFFFFFFFFFFFFF0);
        sub_10001C78C();
        v46 = sub_10001C4CC();
        if (v10)
        {
          v71 = sub_100010678();
LABEL_63:
          swift_willThrow(v71, v72, v73, v74, v75, v76, v77, v78);
          sub_10001B02C();
          __break(1u);
LABEL_64:
          sub_100010678();
          sub_10001B02C();
          v79 = (uint64_t)v45;
          goto LABEL_66;
        }
        v47 = (_BYTE *)v46;
        sub_100010678();
        v41 = v47;
      }
      else
      {
        v45 = (char *)swift_slowAlloc(8 * v10, -1);
        sub_10001C78C();
        v48 = sub_10001C4CC();
        if (v10)
          goto LABEL_64;
        v49 = (_BYTE *)v48;
        sub_100010678();
        sub_1000120F8((uint64_t)v45);
        v41 = v49;
      }
      ++v40;
      sub_10000781C();
    }
    while (v39 != v40);
    sub_10000A828();
    v19 = v82;
  }
  else
  {
    v41 = &_swiftEmptySetSingleton;
  }
  sub_10000A828();
  v50 = _swiftEmptyArrayStorage;
  v51 = v80;
  v52 = v81;
  if (v19)
  {
    v90 = _swiftEmptyArrayStorage;
    sub_100010644();
    sub_10001BA90();
    v53 = v51 + ((*((unsigned __int8 *)v52 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v52 + 80));
    v54 = *((_QWORD *)v52 + 9);
    v52 = type metadata accessor for SessionConfiguration.Backend;
    do
    {
      v55 = v19;
      v50 = v88;
      sub_10005039C(v53, (uint64_t)v88);
      sub_10005039C((uint64_t)v50, (uint64_t)v5);
      if (sub_1000106D8((uint64_t)v5) == 1)
      {
        v50 = (_QWORD *)v5[1];
        v56 = v5[4];
        swift_bridgeObjectRelease(v5[3]);
        sub_10000A820();
        sub_10000A828();
      }
      else
      {
        sub_10001B32C((uint64_t)v5);
        v56 = *(_QWORD *)((char *)v50 + *(int *)(v86 + 40));
        sub_100007840();
        sub_10003D6E8((uint64_t)v50, type metadata accessor for SessionConfiguration.BackendHTTP);
      }
      sub_10003D6E8((uint64_t)v88, type metadata accessor for SessionConfiguration.Backend);
      if ((sub_100018F14() & 1) == 0)
      {
        sub_10001CE04(v50[2]);
        v50 = v90;
      }
      v58 = v50[2];
      v57 = v50[3];
      if (v58 >= v57 >> 1)
      {
        sub_10001ABDC(v57);
        v50 = v90;
      }
      v50[2] = v58 + 1;
      v50[v58 + 4] = v56;
      v53 += v54;
      v19 = v55 - 1;
      v5 = v84;
    }
    while (v55 != 1);
    sub_100019564();
  }
  v59 = v50[2];
  if (!v59)
  {
    v61 = &_swiftEmptySetSingleton;
LABEL_60:
    sub_10000A828();
    return sub_10001EE48((uint64_t)v41, v83, (uint64_t)v61);
  }
  swift_bridgeObjectRetain(v50);
  v60 = 0;
  v61 = &_swiftEmptySetSingleton;
  while (1)
  {
    v45 = (char *)v50[v60 + 4];
    v62 = v61[32] & 0x3F;
    sub_10000BFEC();
    v63 = sub_100007840();
    if (v62 > 0xD)
    {
      v63 = swift_stdlib_isStackAllocationSafe(8 * (_QWORD)v52, 8, v64);
      if ((v63 & 1) == 0)
        break;
    }
    __chkstk_darwin(v63);
    sub_10001AF64();
    v65 = sub_100018118();
    if (v52)
    {
      v71 = sub_10000781C();
      goto LABEL_63;
    }
    v66 = (_BYTE *)v65;
    sub_10000781C();
    v61 = v66;
LABEL_57:
    ++v60;
    sub_10000A818();
    if (v59 == v60)
    {
      sub_10000A828();
      goto LABEL_60;
    }
  }
  v67 = swift_slowAlloc(8 * (_QWORD)v52, -1);
  sub_10001AF64();
  v68 = sub_100018118();
  if (!v52)
  {
    v69 = (_BYTE *)v68;
    sub_10000781C();
    sub_1000120F8(v67);
    v61 = v69;
    goto LABEL_57;
  }
  sub_10000781C();
  sub_10001B02C();
  v79 = v67;
LABEL_66:
  result = (void *)sub_1000120F8(v79);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SessionConfiguration.Backend(uint64_t a1)
{
  return sub_10001030C(a1, qword_100090028, (uint64_t)&nominal type descriptor for SessionConfiguration.Backend);
}

uint64_t type metadata accessor for SessionConfiguration.BackendHTTP(uint64_t a1)
{
  return sub_10001030C(a1, qword_10008FF68, (uint64_t)&nominal type descriptor for SessionConfiguration.BackendHTTP);
}

void *sub_10001EE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRelease(a1);
  if (v5)
  {
    sub_10004E590(a2, a3);
  }
  else
  {
    sub_10000781C();
    sub_10000A828();
    return &_swiftEmptySetSingleton;
  }
  return (void *)a2;
}

uint64_t sub_10001EEA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 232);
  v12 = *(_OWORD *)(v0 + 192);
  v9 = *(_QWORD *)(v0 + 184);
  v10 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 128);
  v15 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 64);
  sub_100010644();
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v3);
  sub_100018040();
  sub_10001EFD0(v0 + 16);
  sub_10001EFD0(v0 + 32);
  sub_10001EFD0(v0 + 48);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v4);
  sub_10000AF70();
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  *(_OWORD *)v6 = v12;
  *(_QWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 24) = v5;
  *(_QWORD *)(v6 + 32) = v15;
  *(_QWORD *)(v6 + 40) = v1;
  *(_QWORD *)(v6 + 48) = v11;
  *(_QWORD *)(v6 + 56) = v4;
  *(_QWORD *)(v6 + 64) = v13;
  *(_QWORD *)(v6 + 72) = v3;
  *(_QWORD *)(v6 + 80) = v14;
  *(_QWORD *)(v6 + 88) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001EFD0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10001EFF8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  *(_BYTE *)(v0 + 58) = sub_10001F044() & 1;
  sub_10000781C();
  return sub_10001808C((uint64_t)sub_100005F3C, v1, 0);
}

uint64_t sub_10001F044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  Swift::Bool v10;
  uint64_t v11;

  sub_100012CD4();
  v1 = sub_10000F3C0();
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10000CA58();
  sub_10001AAC8((uint64_t *)&unk_100090A60);
  sub_100012C34();
  __chkstk_darwin(v3);
  sub_10000BE50();
  v6 = v5 - v4;
  sub_10001F1C4();
  v7 = type metadata accessor for CachedStorebag(0);
  v8 = 1;
  v9 = _s10RTCUtility9XPCObjectOwet_0(v6, 1, v7);
  sub_10001D7E8(v6, (uint64_t *)&unk_100090A60);
  if (v9 == 1)
  {
    sub_10006849C();
    v10 = URL.checkResourceIsReachable()();
    if (v11)
    {
      sub_10000A8B8();
      v8 = 0;
    }
    else
    {
      v8 = v10;
    }
    sub_10001C7C8(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  return v8 & 1;
}

uint64_t sub_10001F150(uint64_t a1, uint64_t a2)
{
  Swift::String v2;

  swift_bridgeObjectRetain(a2);
  v2._countAndFlagsBits = 0x7473696C702ELL;
  v2._object = (void *)0xE600000000000000;
  String.append(_:)(v2);
  URL.appendingPathComponent(_:)(a1, a2);
  return swift_bridgeObjectRelease(a2);
}

void sub_10001F1C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[3];
  uint64_t v38;

  sub_100012CD4();
  v5 = v4;
  v7 = v6;
  v35 = v8;
  sub_1000112E0();
  sub_100068528();
  __chkstk_darwin(v9);
  sub_100068398();
  sub_10001AAC8((uint64_t *)&unk_100090A60);
  sub_100012C34();
  __chkstk_darwin(v10);
  sub_10001065C();
  v33 = v11;
  sub_100015684();
  __chkstk_darwin(v12);
  v13 = sub_10006850C();
  v14 = type metadata accessor for CachedStorebag(v13);
  sub_100012C34();
  __chkstk_darwin(v15);
  sub_10000BE50();
  v18 = v17 - v16;
  v19 = (uint64_t *)(v0 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_cache);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_cache, &v38, 0, 0);
  v20 = *v19;
  sub_100007840();
  sub_100018040();
  v34 = v7;
  sub_10001F5DC(v7, v5, v20, v3);
  swift_bridgeObjectRelease(v5);
  sub_10000A828();
  sub_10006855C(v3, 1, v14);
  if (v21)
  {
    sub_10001D7E8(v3, (uint64_t *)&unk_100090A60);
    v22 = 1;
    v23 = v35;
  }
  else
  {
    v24 = sub_100021214(v3, v18);
    v25 = v18 + *(int *)(v14 + 20);
    static Date.now.getter(v24);
    v26 = static Date.< infix(_:_:)(v25, v2);
    sub_10001C7C8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    if ((v26 & 1) != 0)
    {
      if (qword_10008E0C8 != -1)
        swift_once(&qword_10008E0C8, sub_100065C74);
      v27 = sub_10000F3D0();
      v28 = sub_100015718(v27, (uint64_t)qword_100097440);
      v29 = swift_bridgeObjectRetain_n(v5, 2);
      Logger.logObject.getter(v29);
      v30 = sub_10000BFB8();
      if (os_log_type_enabled(v28, v30))
      {
        v31 = (uint8_t *)sub_100012C5C(12);
        v32 = sub_100012C5C(32);
        v37[0] = v32;
        *(_DWORD *)v31 = 136446210;
        sub_100007840();
        v36 = sub_100014F94(v34, v5, v37);
        sub_100007864((uint64_t)&v36, (uint64_t)v37, (uint64_t)(v31 + 4));
        sub_1000110B4(v5);
        sub_100010670((void *)&_mh_execute_header, v28, v30, "removing expired storebag %{public}s from memory cache", v31);
        sub_10000BE60(v32);
        sub_1000120F8(v32);
        sub_1000120F8((uint64_t)v31);

      }
      else
      {

        sub_10000F3C8(v5);
      }
      v23 = v35;
      sub_100010430((uint64_t)v19, (uint64_t)v37);
      sub_1000207F8(v33);
      sub_10001D7E8(v33, (uint64_t *)&unk_100090A60);
      swift_endAccess(v37);
      sub_10001C614(v18, type metadata accessor for CachedStorebag);
      v22 = 1;
    }
    else
    {
      v23 = v35;
      sub_100021214(v18, v35);
      v22 = 0;
    }
  }
  _s10RTCUtility9XPCObjectOwst_0(v23, v22, 1, v14);
  sub_1000120D4();
}

uint64_t sub_10001F4D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 720) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 720, *(_QWORD *)(v1 + 136), v3, v2 + 12);
}

uint64_t sub_10001F4EC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100014F94(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_10001F4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

uint64_t sub_10001F500(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_getErrorValue(a1, a2, v2);
}

NSString sub_10001F508()
{
  return String._bridgeToObjectiveC()();
}

BOOL sub_10001F514()
{
  Swift::Int v0;
  Swift::Bool v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1, v0);
}

void sub_10001F52C(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  os_log_type_t v5;

  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

uint64_t sub_10001F53C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v6 = (_QWORD *)(v5 + v4);
  v7 = (_QWORD *)(v5 + v4 + *(int *)(v1 + 48));
  *v6 = 0x7375746174735FLL;
  v6[1] = v3;
  *v7 = v0;
  return swift_storeEnumTagMultiPayload(v7, v2, 1);
}

uint64_t sub_10001F56C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100067B2C);
}

__n128 sub_10001F578(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = v1[6];
  a1[1] = result;
  return result;
}

uint64_t sub_10001F588(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  return sub_100014F94(a1, a2, (uint64_t *)va);
}

uint64_t sub_10001F594()
{
  return static os_log_type_t.fault.getter();
}

void sub_10001F59C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10001F5AC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10001F5B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  _s10RTCUtility9XPCObjectOwst_0(v1, 1, 1, a1);
  return sub_10000A19C(v3, v2);
}

uint64_t sub_10001F5DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100015584(a1, a2, a3, type metadata accessor for CachedStorebag, a4);
}

_BYTE *initializeBufferWithCopyOfBuffer for Storebag._StorebagRoot.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_10001F5F8()
{
  unsigned __int8 *v0;

  return sub_10001F600(*v0);
}

uint64_t sub_10001F608()
{
  unsigned __int8 *v0;

  return sub_10001F610(*v0);
}

uint64_t sub_10001F610(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001F63C + 4 * byte_100070005[a1]))(1937335659, 0xE400000000000000);
}

uint64_t sub_10001F65C()
{
  return 0x6F697469646E6F63;
}

void *sub_10001F678(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE9uLL);
}

void *sub_10001F684(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t sub_10001F68C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 232) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 233) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 233) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_10001F708(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 233))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10001F74C()
{
  return 0;
}

__n128 initializeWithTake for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for Storebag._StorebagRoot(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_10001F7AC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_10001F800(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10001F840(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001F848(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001F850(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001F858(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001F860(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001F868(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001F870(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001F878(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001F880(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001F888(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001F898(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001F8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001F8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001F8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001F8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001F8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001F8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001F908(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001F918(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  return swift_task_switch(sub_10000B668, v2, 0);
}

uint64_t sub_10001F934()
{
  char *v0;

  return sub_10001F93C(*v0);
}

uint64_t sub_10001F93C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6C6F687365726874;
  else
    return 0x7972746E756F63;
}

uint64_t sub_10001F978()
{
  unsigned __int8 *v0;

  return sub_10001F980(*v0);
}

uint64_t sub_10001F980(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001F9B4 + 4 * byte_10006D1B0[a1]))(0x6E6F6973726576, 0xE700000000000000);
}

uint64_t sub_10001F9B4()
{
  return 0x6D706F6C65766564;
}

uint64_t sub_10001F9D4()
{
  return 0x6E695F656C707061;
}

uint64_t sub_10001F9F8()
{
  return 1684366707;
}

uint64_t sub_10001FA08()
{
  return 0x657361656C6572;
}

uint64_t sub_10001FA1C()
{
  return 0x5F68736572666572;
}

uint64_t sub_10001FA40()
{
  return 0x765F646572616873;
}

uint64_t sub_10001FA64(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_10001FAA0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

__n128 sub_10001FAE0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Storebag._StorebagRoot.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
  {
    v6 = *a1;
    if (v6 >= 4)
      v7 = v6 - 3;
    else
      v7 = 0;
    if (v7 >= 4)
      return v7 - 3;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 6;
    if (a2 + 6 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10001FB44 + 4 * byte_10006D1D6[v4]))();
  }
}

uint64_t initializeWithTake for StorebagSharedValue(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t sub_10001FBB0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 112);
  *(_QWORD *)(v0 + 32) = v1;
  return sub_10001211C((uint64_t)sub_100008524, v1);
}

uint64_t sub_10001FBC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_10001FBB0, v1, 0);
}

uint64_t sub_10001FBE0()
{
  return 0x73746E65696C63;
}

uint64_t sub_10001FBF8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_10001FC40(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

__n128 initializeWithTake for Storebag._StorebagRoot(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void sub_10001FC94()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 720) = 44;
  *(_QWORD *)(v0 + 728) = 0xE100000000000000;
}

uint64_t sub_10001FCBC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 328);
}

uint64_t sub_10001FCD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v17 + 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a16, v18, v16, v19 + 32);
}

void sub_10001FCE8()
{
  void *v0;

}

uint64_t sub_10001FCF8()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 464));
}

uint64_t sub_10001FD14@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return 50;
}

void sub_10001FD24(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, os_log_type_t type, uint64_t a17, uint64_t a18, os_log_t log)
{
  uint8_t *v19;

  _os_log_impl(a1, log, type, a4, v19, 0x20u);
}

id sub_10001FD3C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  return objc_msgSend(v4, a2, v3, v2);
}

void sub_10001FD5C(_xpc_connection_s *a1)
{
  void *v1;

  xpc_connection_send_message(a1, v1);
}

uint64_t sub_10001FD64()
{
  uint64_t v0;

  return swift_release(v0);
}

void sub_10001FD7C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0x16u);
}

uint64_t sub_10001FD90()
{
  uint64_t v0;
  uint64_t v1;

  return _NativeDictionary._delete(at:)(v0, v1);
}

uint64_t sub_10001FD9C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100010720(v1, v0);
}

uint64_t sub_10001FDA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v10 + 248) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, v12, v11, v13);
}

uint64_t sub_10001FDC0()
{
  uint64_t v0;

  return _s10RTCUtility9XPCObjectOwet_0(*(_QWORD *)(v0 + 432), 1, *(_QWORD *)(v0 + 528));
}

BOOL sub_10001FDE4(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10001FDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_arrayDestroy(a10, 2);
}

uint64_t sub_10001FE00()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_10001FE0C(uint64_t a1)
{
  uint64_t v1;

  return _s10RTCUtility9XPCObjectOwet_0(v1, 1, a1);
}

uint64_t sub_10001FE3C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 104);
}

_QWORD *sub_10001FE54@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_10001FE64()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 168);
  *v4 = *v1;
  *(_QWORD *)(v3 + 176) = v0;
  return swift_task_dealloc(v5);
}

BOOL sub_10001FE84@<W0>(os_log_type_t a1@<W8>)
{
  uint64_t v1;

  return os_log_type_enabled(*(os_log_t *)(v1 + 472), a1);
}

uint64_t sub_10001FE94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_10001FEA0()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 264));
}

uint64_t sub_10001FEA8(float a1)
{
  uint64_t v1;
  uint64_t v2;
  float *v3;
  uint64_t v4;

  *v3 = a1;
  return swift_getErrorValue(v1, v2, v4);
}

void sub_10001FEC4(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a1 + 16) = a2;
}

uint64_t sub_10001FECC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return String.lowercased()()._countAndFlagsBits;
}

_QWORD *sub_10001FEDC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 216) = *(_QWORD *)(v0 + 96);
  return sub_100005400((_QWORD *)(v0 + 216));
}

uint64_t sub_10001FEF4()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1000229EC(v0, v1);
}

uint64_t sub_10001FF00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 424) = v1;
  *(_QWORD *)(v2 + 432) = v0;
  return URLRequest.httpBody.setter();
}

uint64_t sub_10001FF0C(uint64_t a1)
{
  uint64_t v1;

  return swift_initStackObject(a1, v1);
}

uint64_t sub_10001FF24()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
}

uint64_t sub_10001FF2C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 256);
}

uint64_t sub_10001FF44()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10001FF50@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 392);
}

uint64_t sub_10001FF68(uint64_t a1)
{
  uint64_t v1;

  return Error.localizedDescription.getter(v1, a1);
}

double sub_10001FF78(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  double result;

  v8 = *a1;
  if (*a1)
  {
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(*a3 + 56) + 8 * a4) = v8;
    }
    else
    {
      sub_10000F294(a4, a5, a6, v8, *a3);
      swift_bridgeObjectRetain(a6);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 16 * a4, 1);
    v9 = *a3;
    sub_10001AAC8(&qword_10008F270);
    _NativeDictionary._delete(at:)(a4, v9);
  }
  *(_QWORD *)&result = swift_bridgeObjectRetain(v8).n128_u64[0];
  return result;
}

void sub_100020038(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  v5 = v4;
  v10 = *v4;
  v11 = sub_10001A120(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_10001AAC8(&qword_10008F8E0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = sub_10001A120(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = *(_QWORD *)(v20 + 56);
    swift_bridgeObjectRelease(*(_QWORD *)(v21 + 8 * v16));
    *(_QWORD *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_10000F294(v16, a2, a3, a1, v20);
    swift_bridgeObjectRetain(a3);
  }
}

void sub_10002014C()
{
  sub_100005D4C();
}

uint64_t sub_100020168(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10004EB78(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_10004F74C();
      goto LABEL_22;
    }
    sub_10004FC24(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

unint64_t sub_100020300(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v24, *(_QWORD *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v24, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v2 >= v14)
          {
LABEL_15:
            v17 = *(_QWORD *)(v3 + 48);
            v18 = (_OWORD *)(v17 + 16 * v2);
            v19 = (_OWORD *)(v17 + 16 * v6);
            v20 = v2 != v6 || v18 >= v19 + 1;
            v2 = v6;
            if (v20)
            {
              *v18 = *v19;
              v2 = v6;
            }
          }
        }
        else if (v14 >= v9 || v2 >= v14)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v23;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1000204B8(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

char *sub_1000204D4(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001B9A8();
    result = (char *)sub_10001CE24((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_100012244(a3, result);
  }
  return result;
}

void sub_10002052C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_10002052C(a1, &qword_10008E5A8, (uint64_t)&unk_1000862A8);
}

void sub_100020584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  Swift::Int v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  char v20;
  _QWORD v21[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v21, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v21, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    sub_10000F458();
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (uint64_t *)(v10 + 16 * v8);
      v12 = v11[1];
      if ((*v11 != a1 || v12 != a2) && (sub_10001CF48(*v11, v12) & 1) == 0)
      {
        v14 = ~v7;
        v15 = (v8 + 1) & v14;
        sub_10000F458();
        if ((v16 & 1) != 0)
        {
          do
          {
            v17 = (uint64_t *)(v10 + 16 * v15);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((sub_10001CF48(*v17, v18) & 1) != 0)
              break;
            v15 = (v15 + 1) & v14;
            sub_10000F458();
          }
          while ((v20 & 1) != 0);
        }
      }
    }
  }
}

uint64_t sub_10002067C(uint64_t a1)
{
  return sub_100020688(a1, (uint64_t (*)(BOOL))sub_10002014C);
}

uint64_t sub_100020688(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    result = a2(v3 > 1);
    *(_QWORD *)v2 = result;
  }
  return result;
}

uint64_t sub_1000206C8()
{
  return sub_1000206D4((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10002014C);
}

uint64_t sub_1000206D4(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!(_DWORD)result)
  {
    result = a1(result, *(_QWORD *)(v3 + 16) + 1, 1, v3);
    *v1 = result;
  }
  return result;
}

uint64_t sub_100020728(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = (uint64_t *)(a1 + 32 * v1);
  v3 = *v2;
  swift_bridgeObjectRetain(v2[3]);
  return v3;
}

void sub_100020788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  char v4;

  if (*(_QWORD *)(a3 + 16))
  {
    v3 = sub_10005F90C(a1, a2);
    if ((v4 & 1) != 0)
      sub_10005FC50(v3);
  }
  sub_10000BF94();
}

void sub_1000207B8(unsigned __int8 a1, uint64_t a2)
{
  unint64_t v2;
  char v3;

  if (*(_QWORD *)(a2 + 16))
  {
    v2 = sub_100006B98(a1, a2);
    if ((v3 & 1) != 0)
      sub_10005FC50(v2);
  }
  sub_10000BF94();
}

uint64_t sub_1000207EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000432B8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_100020038);
}

uint64_t sub_1000207F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100005DF4((uint64_t *)&unk_10008F8B0, type metadata accessor for CachedStorebag, a1);
}

uint64_t sub_10002080C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 112);
  *(_QWORD *)(v0 + 40) = v1;
  return sub_10001211C((uint64_t)sub_100011320, v1);
}

uint64_t sub_100020824(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_10001211C((uint64_t)sub_10002080C, v2);
}

uint64_t sub_10002083C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 112);
  *(_QWORD *)(v0 + 40) = v1;
  return sub_10001211C((uint64_t)sub_10000767C, v1);
}

uint64_t sub_100020854(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 56) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  return sub_10001211C((uint64_t)sub_10002083C, v3);
}

uint64_t getEnumTagSinglePayload for Storebag._StorebagRoot(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

double sub_1000208B0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_100008798(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

unint64_t sub_1000208F4()
{
  unint64_t result;

  result = qword_10008E7A8;
  if (!qword_10008E7A8)
  {
    result = swift_getWitnessTable(&unk_10006D48C, &type metadata for Storebag._StorebagRoot);
    atomic_store(result, (unint64_t *)&qword_10008E7A8);
  }
  return result;
}

unint64_t sub_100020930()
{
  unint64_t result;

  result = qword_10008E858;
  if (!qword_10008E858)
  {
    result = swift_getWitnessTable(&unk_10006D698, &type metadata for Storebag._StorebagRoot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008E858);
  }
  return result;
}

double sub_10002096C()
{
  uint64_t v0;

  return *(double *)(*(_QWORD *)v0 + 128);
}

void sub_100020978()
{
  sub_1000209D4();
}

void sub_100020998()
{
  sub_1000209F4();
  sub_10000BF94();
}

void sub_1000209B4()
{
  sub_100020A14();
}

void sub_1000209D4()
{
  sub_100018040();
  sub_100014638();
  sub_10000BF94();
}

void sub_1000209F4()
{
  sub_100018040();
  sub_100014638();
  sub_10000BF94();
}

void sub_100020A14()
{
  sub_100018040();
  sub_100014638();
  sub_10000BF94();
}

uint64_t sub_100020A34(uint64_t a1)
{
  return sub_10000558C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_100020A48(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != 1)
  {
    if (a4)
      return result;
    swift_bridgeObjectRetain(a2);
    result = a3;
  }
  return swift_bridgeObjectRetain(result);
}

unint64_t sub_100020A84()
{
  unint64_t result;

  result = qword_10008FBB8;
  if (!qword_10008FBB8)
  {
    result = swift_getWitnessTable(&unk_10007010C, &unk_10008A1F0);
    atomic_store(result, (unint64_t *)&qword_10008FBB8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for StorebagSharedValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for StorebagSharedValue(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100020B44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;

  result = sub_100020B70(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_100020B70(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[40];

  sub_10000A19C((uint64_t)a1, (uint64_t)v19);
  sub_100020A84();
  v4 = Array<A>.init(from:)(v19);
  if (v1)
  {
    v5 = sub_10001ABD4();
    sub_10001BA6C(v5);
    v6 = sub_100047DFC();
    sub_10001CDD4(v6, &unk_100088720, v6);
    v7 = sub_10001ABD4();
    v8 = sub_10001BA6C(v7);
    sub_10001CDD4(v8, &type metadata for String, &protocol witness table for String);
    sub_10001ABD4();
    v9 = sub_100047E38();
    v10 = swift_allocError(&type metadata for StorebagSharedValue.Error, v9, 0, 0);
    swift_willThrow(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  else
  {
    v2 = v4;
  }
  sub_100015060(a1);
  return v2;
}

uint64_t sub_100020C80()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_10008E088 != -1)
    swift_once(&qword_10008E088, sub_1000584D4);
  v0 = (id)qword_1000973F8;
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "integerForKey:", v1);

  if (!v2)
    goto LABEL_10;
  v3 = sub_100024AD4((unint64_t)v2);
  if (v3 == 4)
  {
    if (qword_10008DFC8 != -1)
      swift_once(&qword_10008DFC8, sub_100025234);
    v4 = sub_10000F3D0();
    v5 = sub_100015718(v4, (uint64_t)qword_100097278);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)sub_100012C5C(12);
      *(_DWORD *)v8 = 134349056;
      v20 = (uint64_t)v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v8 + 4, v8 + 12);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "invalid environmentType override from defaults: %{public}ld", v8, 0xCu);
      sub_1000120F8((uint64_t)v8);
    }

LABEL_10:
    if (qword_10008E080 != -1)
      swift_once(&qword_10008E080, sub_1000584B0);
    if (byte_1000973F0)
      return 1;
    else
      return 3;
  }
  v9 = v3;
  if (qword_10008DFC8 != -1)
    swift_once(&qword_10008DFC8, sub_100025234);
  v10 = sub_10000F3D0();
  v11 = sub_100015718(v10, (uint64_t)qword_100097278);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = sub_100012C5C(22);
    v15 = sub_100012C5C(32);
    v20 = v15;
    *(_DWORD *)v14 = 136446466;
    LOBYTE(v19) = v9;
    v16 = String.init<A>(describing:)(&v19, &unk_100086CE8);
    v19 = sub_100014F94(v16, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 4, v14 + 12);
    sub_10000BDE4();
    *(_WORD *)(v14 + 12) = 2050;
    v19 = (uint64_t)v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 14, v14 + 22);
    sub_10001D9C0((void *)&_mh_execute_header, v12, v13, "overriding environmentType to %{public}s (%{public}ld) from defaults");
    swift_arrayDestroy(v15, 1);
    sub_1000120F8(v15);
    sub_1000120F8(v14);
  }

  return v9;
}

uint64_t sub_100020F90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  sub_1000074C8();
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100020FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_10000D36C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  *(_QWORD *)(v0 + 40) = v2;
  if (!v2)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 48) = v1;
  *(_QWORD *)(v0 + 56) = *(_QWORD *)(v3 + 128);
  return sub_100010514();
}

uint64_t sub_10002102C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_10001211C((uint64_t)sub_100020FD0, v2);
}

uint64_t sub_100021044()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v1 = *(_QWORD **)(v0 + 144);
  v2 = v1[3];
  v3 = v1[4];
  sub_10001D44C(v1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  v6 = v5;
  v7 = sub_10000D36C(v4, v5);
  v9 = v8;
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(v0 + 160) = v9;
  if (v9)
  {
    v10 = (_QWORD *)swift_task_alloc(dword_10009084C);
    *(_QWORD *)(v0 + 168) = v10;
    *v10 = v0;
    v10[1] = sub_1000057C8;
    return sub_100007B28(v0 + 64, v7, v9);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 136);
    *(_QWORD *)v12 = &_swiftEmptyArrayStorage;
    *(_QWORD *)(v12 + 8) = &_swiftEmptyArrayStorage;
    *(_BYTE *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = 1701736302;
    *(_QWORD *)(v12 + 32) = 0xE400000000000000;
    *(_BYTE *)(v12 + 40) = 2;
    return sub_10001B084(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_100021134(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  return sub_10001211C((uint64_t)sub_100021044, v2);
}

uint64_t sub_100021150()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  sub_10001454C();
  v1 = v0[14];
  v0[11] = sub_100058400();
  v0[12] = &off_100089B78;
  v0[8] = v1;
  sub_100014530();
  v2 = (_QWORD *)sub_1000156A4();
  v0[21] = v2;
  *v2 = v0;
  v2[1] = sub_100005844;
  return sub_100021134((uint64_t)(v0 + 2), (uint64_t)(v0 + 8));
}

void sub_1000211D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  sub_10000BF94();
}

uint64_t sub_100021214(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CachedStorebag(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

const char *MessageKeys.hierarchyLevel.unsafeMutableAddressor()
{
  return "hlvl";
}

uint64_t sub_100021264(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

const char *sub_1000212A8(int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  Swift::String v7;
  const char *result;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  uint64_t v13;

  v5 = 0x6F727245204C5153;
  if (a3)
  {
    v5 = a2;
    v6 = a3;
  }
  else
  {
    v6 = 0xE900000000000072;
  }
  v13 = v5;
  swift_bridgeObjectRetain(v6);
  v7._countAndFlagsBits = 8250;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v6);
  result = sqlite3_errstr(a1);
  if (result)
  {
    v9 = String.init(cString:)(result);
    v11 = v10;
    swift_bridgeObjectRetain(v6);
    v12._countAndFlagsBits = v9;
    v12._object = v11;
    String.append(_:)(v12);
    sub_10000781C();
    swift_bridgeObjectRelease(v11);
    return (const char *)v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100021380()
{
  unsigned int *v0;

  return sub_10002137C(*v0, *((_QWORD *)v0 + 1), *((_QWORD *)v0 + 2));
}

const char *sub_100021398()
{
  uint64_t v0;

  return sub_1000212A8(*(_DWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

uint64_t sub_1000213B4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000213EC + 4 * byte_10006CAF0[a1]))(0xD00000000000001ALL, 0x8000000100071090);
}

void sub_1000213EC()
{
  sub_10000AF58();
}

uint64_t sub_10002140C()
{
  return 0x6465736F6C63;
}

uint64_t sub_100021420(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100021458 + 4 * byte_10006CAF4[a1]))(0xD00000000000001ALL, 0x8000000100071090);
}

void sub_100021458()
{
  sub_10000AF58();
}

uint64_t sub_100021478()
{
  return 0x6465736F6C63;
}

BOOL sub_10002148C(char a1, char a2)
{
  return a1 == a2;
}

void sub_10002149C(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int sub_1000214C0(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL sub_100021504(char *a1, char *a2)
{
  return sub_10002148C(*a1, *a2);
}

Swift::Int sub_100021510()
{
  unsigned __int8 *v0;

  return sub_1000214C0(*v0);
}

void sub_100021518(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_10002149C(a1, *v1);
}

Swift::Int sub_100021520(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100021560()
{
  unsigned __int8 *v0;

  return sub_100021420(*v0);
}

uint64_t sub_100021568()
{
  unsigned __int8 *v0;

  return sub_1000213B4(*v0);
}

uint64_t sub_100021570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_10000F3C0();
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10001AE84();
  type metadata accessor for SQLiteDB.Location(0);
  sub_100012C34();
  __chkstk_darwin(v3);
  sub_10000BE50();
  v6 = v5 - v4;
  sub_100023414(v0, v5 - v4);
  if (_s10RTCUtility9XPCObjectOwet_0(v6, 1, v1) == 1)
    return 0x3A79726F6D656D3ALL;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v0, v6, v1);
  v7 = URL.path.getter(v8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  return v7;
}

uint64_t sub_10002165C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  sqlite3 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  sqlite3 *v20;

  v2 = v1;
  *(_BYTE *)(v2 + 24) = 0;
  v20 = 0;
  v4 = sub_100021570();
  v6 = v5;
  v7 = String.utf8CString.getter(v4, v5);
  swift_bridgeObjectRelease(v6);
  v8 = sqlite3_open_v2((const char *)(v7 + 32), &v20, 32774, 0);
  swift_release(v7);
  v9 = v20;
  if (!v20 || v8)
  {
    v10 = sub_1000225B4();
    v11 = swift_allocError(&unk_1000863C0, v10, 0, 0);
    *(_DWORD *)v12 = v8;
    *(_QWORD *)(v12 + 8) = 0xD000000000000017;
    *(_QWORD *)(v12 + 16) = 0x8000000100071010;
    swift_willThrow(v11, v12, v13, v14, v15, v16, v17, v18);
    sub_100023458(a1, type metadata accessor for SQLiteDB.Location);
    swift_deallocPartialClassInstance(v2);
  }
  else
  {
    sub_100023458(a1, type metadata accessor for SQLiteDB.Location);
    *(_QWORD *)(v2 + 16) = v9;
  }
  return v2;
}

uint64_t sub_1000217A0()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
  {
    *(_BYTE *)(v0 + 24) = 1;
    return sqlite3_close_v2(*(sqlite3 **)(v0 + 16));
  }
  return result;
}

uint64_t sub_1000217BC()
{
  uint64_t v0;

  sub_1000217A0();
  return swift_deallocClassInstance(v0, 25, 7);
}

void sub_1000217DC()
{
  uint64_t v0;
  char *v1;
  char *v2;

  v1 = sqlite3_expanded_sql(*(sqlite3_stmt **)(v0 + 16));
  if (v1)
  {
    v2 = v1;
    String.init(cString:)(v1);
    sqlite3_free(v2);
  }
  sub_10000AF64();
}

uint64_t sub_10002182C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  sqlite3_stmt *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  sqlite3_int64 v24;
  uint64_t v25;
  __n128 v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  Class isa;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  id v60;
  _QWORD v61[4];

  v59 = type metadata accessor for EventValue(0);
  sub_100012C34();
  __chkstk_darwin(v7);
  sub_10000BE50();
  v10 = (uint64_t *)(v9 - v8);
  v11 = type metadata accessor for String.Encoding(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_10000BE50();
  v15 = v14 - v13;
  v16 = sub_100011A74();
  if (!v4)
  {
    v18 = v16;
    v55 = v15;
    v56 = v12;
    v57 = v11;
    while (1)
    {
      if (!v18)
        return swift_bridgeObjectRelease(a3);
      v19 = *(sqlite3_stmt **)(v18 + 16);
      swift_retain(v18);
      if (!sqlite3_column_text(v19, 1))
        break;
      v20 = a2;
      v21 = String.init(cString:)();
      v23 = v22;
      sub_100010370();
      v24 = sqlite3_column_int64(*(sqlite3_stmt **)(v18 + 16), 0);
      v25 = a3;
      v26 = swift_bridgeObjectRetain(a3);
      static String.Encoding.utf8.getter(v26);
      String.data(using:allowLossyConversion:)(v55, 0, v21, v23);
      v28 = v27;
      sub_1000120B4();
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
      if (v28 >> 60 == 15)
      {
        sub_10000A820();
        v43 = sub_100022668();
        sub_10000A7FC((uint64_t)&unk_100088510, v43);
        sub_1000199C4();
        goto LABEL_18;
      }
      v29 = (void *)objc_opt_self(NSJSONSerialization);
      isa = Data._bridgeToObjectiveC()().super.isa;
      v60 = 0;
      v31 = objc_msgSend(v29, "JSONObjectWithData:options:error:", isa, 0, &v60);

      v32 = v60;
      if (!v31)
      {
        v44 = v32;
        sub_10000A820();
        _convertNSErrorToError(_:)(v44);

        swift_willThrow(v45, v46, v47, v48, v49, v50, v51, v52);
        sub_10001D238();
        goto LABEL_18;
      }
      _bridgeAnyObjectToAny(_:)(v31);
      swift_unknownObjectRelease(v31);
      sub_100041558((uint64_t)v61, v10);
      if (swift_getEnumCaseMultiPayload(v10, v59) != 7)
      {
        v53 = sub_10000A820();
        sub_100019A18(v53, type metadata accessor for EventValue);
        v54 = sub_100022668();
        sub_10000A7FC((uint64_t)&unk_100088510, v54);
        sub_1000199C4();
        sub_10001D238();
        sub_100015060(v61);
LABEL_18:
        v42 = v25;
LABEL_19:
        swift_bridgeObjectRelease(v42);
        return sub_100010370();
      }
      sub_100015060(v61);
      sub_10001D238();
      v33 = *v10;
      v34 = *a4;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
      *a4 = v34;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100005D4C();
        v34 = v38;
        *a4 = v38;
      }
      v36 = *(_QWORD *)(v34 + 16);
      if (v36 >= *(_QWORD *)(v34 + 24) >> 1)
      {
        sub_100005D4C();
        v34 = v39;
        *a4 = v39;
      }
      *(_QWORD *)(v34 + 16) = v36 + 1;
      v37 = (_QWORD *)(v34 + 32 * v36);
      v37[4] = v24;
      v37[5] = v20;
      a2 = v20;
      a3 = v25;
      v37[6] = v25;
      v37[7] = v33;
      sub_100010370();
      v18 = sub_100011A74();
    }
    sub_100010370();
    v40 = sub_10002262C();
    sub_10000A7FC((uint64_t)&type metadata for DiskCacheError, v40);
    *v41 = 0;
    sub_1000199C4();
    v42 = a3;
    goto LABEL_19;
  }
  return swift_bridgeObjectRelease(a3);
}

uint64_t (*sub_100021C34(uint64_t a1))(uint64_t)
{
  return sub_100021C6C(a1, (uint64_t (*)(uint64_t))sub_100021D54);
}

uint64_t (*sub_100021C50(uint64_t a1))(uint64_t)
{
  return sub_100021C6C(a1, sub_100021DCC);
}

uint64_t (*sub_100021C6C(uint64_t a1, uint64_t (*a2)(uint64_t)))(uint64_t)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v10;
  _BYTE *v11;

  v5 = sub_100011A74();
  if (!v2)
  {
    if (v5)
    {
      a2 = (uint64_t (*)(uint64_t))a2(v5);
      v6 = sub_10001C6F4();
      sub_10001063C(v6);
      if (v3)
      {
        do
        {
          a2 = (uint64_t (*)(uint64_t))sub_10001C6F4();
          swift_release(a2);
        }
        while (a2);
        v10 = sub_1000225F0();
        sub_10000A7FC((uint64_t)&unk_100086348, v10);
        *v11 = 1;
        sub_1000199C4();
        sub_10000BE48();
      }
      else
      {
        sub_10000BE48();
      }
    }
    else
    {
      v7 = sub_1000225F0();
      sub_10000A7FC((uint64_t)&unk_100086348, v7);
      *v8 = 0;
      sub_1000199C4();
    }
  }
  return a2;
}

void sub_100021D54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (sqlite3_column_count(*(sqlite3_stmt **)(a1 + 16)) == 1)
  {
    v2 = swift_retain(a1);
    sub_1000224F8(v2, 0);
  }
  else
  {
    v3 = sub_1000225F0();
    v4 = swift_allocError(&unk_100086348, v3, 0, 0);
    *v5 = 2;
    swift_willThrow(v4, v5, v6, v7, v8, v9, v10, v11);
  }
}

sqlite3_int64 sub_100021DCC(uint64_t a1)
{
  sqlite3_stmt *v1;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(sqlite3_stmt **)(a1 + 16);
  if (sqlite3_column_count(v1) == 1)
    return sqlite3_column_int64(v1, 0);
  v3 = sub_1000225F0();
  v4 = swift_allocError(&unk_100086348, v3, 0, 0);
  *v5 = 2;
  return swift_willThrow(v4, v5, v6, v7, v8, v9, v10, v11);
}

sqlite3_int64 sub_100021E40()
{
  uint64_t v0;

  return sqlite3_changes64(*(sqlite3 **)(*(_QWORD *)(*(_QWORD *)(v0 + 16) + 112) + 16));
}

void sub_100021E50()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    v2 = sub_1000225B4();
    sub_10000A7FC((uint64_t)&unk_1000863C0, v2);
    *v3 = 1;
    sub_10001B994((uint64_t)v3, 0xD00000000000001DLL);
  }
  else
  {
    v4 = sub_10001CF88();
    sub_100021ECC(v4, v5);
    if (!v1)
      *(_BYTE *)(v0 + 24) = 1;
  }
  sub_100007824();
}

void sub_100021ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  sqlite3 *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;

  v3 = *(_QWORD *)(v2 + 112);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
  {
    v4 = sub_1000225F0();
    v5 = sub_10000A7FC((uint64_t)&unk_100086348, v4);
    *(_BYTE *)v6 = 3;
LABEL_5:
    swift_willThrow(v5, v6, v7, v8, v9, v10, v11, v12);
    goto LABEL_6;
  }
  v13 = *(sqlite3 **)(v3 + 16);
  v14 = String.utf8CString.getter(a1, a2);
  LODWORD(v13) = sub_10001C418(v13, (const char *)(v14 + 32));
  sub_10000BE48();
  if ((_DWORD)v13)
  {
    v15 = sub_1000225B4();
    v16 = sub_10000A7FC((uint64_t)&unk_1000863C0, v15);
    sub_100010D0C(v16, v17);
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    goto LABEL_5;
  }
LABEL_6:
  sub_100007824();
}

uint64_t sub_100021F64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 25, 7);
}

uint64_t sub_100021F88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sqlite3 *v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;

  type metadata accessor for SQLiteDB.Location(0);
  sub_100012C34();
  __chkstk_darwin(v4);
  sub_10001AE84();
  swift_defaultActor_initialize(v1);
  sub_100023414(a1, v1);
  v5 = type metadata accessor for SQLiteDB.DBHandle();
  sub_100018E64(v5);
  v6 = sub_10002165C(v1);
  if (!v2)
  {
    v7 = v6;
    v8 = *(sqlite3 **)(v6 + 16);
    v9 = sub_10001C418(v8, "PRAGMA journal_mode=WAL;");
    if (v9)
    {
      v10 = v9;
      v11 = sub_1000225B4();
      v12 = sub_10000A7FC((uint64_t)&unk_1000863C0, v11);
      *(_DWORD *)v13 = v10;
      v20 = 0xD000000000000014;
      v21 = "Failed to enable WAL";
    }
    else
    {
      v22 = sub_10001C418(v8, "PRAGMA foreign_keys=ON;");
      if (!(_DWORD)v22)
      {
        sub_100019A18(v22, type metadata accessor for SQLiteDB.Location);
        *(_QWORD *)(v1 + 112) = v7;
        return v1;
      }
      v23 = v22;
      v20 = 0xD000000000000013;
      v24 = sub_1000225B4();
      v12 = sub_10000A7FC((uint64_t)&unk_1000863C0, v24);
      *(_DWORD *)v13 = v23;
      v21 = "Failed to enable FK";
    }
    *(_QWORD *)(v13 + 8) = v20;
    *(_QWORD *)(v13 + 16) = (unint64_t)(v21 - 32) | 0x8000000000000000;
    swift_willThrow(v12, v13, v14, v15, v16, v17, v18, v19);
    sub_10001B380();
  }
  v25 = swift_defaultActor_destroy(v1);
  sub_100019A18(v25, type metadata accessor for SQLiteDB.Location);
  swift_deallocPartialClassInstance(v1);
  return v1;
}

uint64_t sub_100022118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v12 = sub_10001AF90(a1, a2);
  if (v7)
    return sub_10000A818();
  v14 = v12;
  sub_10003C8E4(v12, a4, a5, a6, a7, &v15);
  sub_10000A818();
  swift_release(v14);
  return v15;
}

_QWORD *sub_1000221AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000221C0(a1, a2, a3, a4, a5);
}

_QWORD *sub_1000221C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t inited;
  _BYTE v12[72];

  sub_10001AF90(a1, a2);
  if (v6)
  {
    swift_release(a5);
  }
  else
  {
    v9 = sub_10001AAC8(&qword_10008E4B0);
    inited = swift_initStackObject(v9, v12);
    *(_OWORD *)(inited + 16) = xmmword_10006D0C0;
    *(_QWORD *)(inited + 56) = &type metadata for Int;
    *(_QWORD *)(inited + 64) = &off_100086140;
    *(_QWORD *)(inited + 32) = a4;
    sub_100011BCC(inited);
    swift_setDeallocating(inited);
    sub_100011B7C();
    v5 = sub_10000B0C8();
    sub_10000BE48();
    sub_10000BDB4();
  }
  return v5;
}

_QWORD *sub_1000222B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t inited;
  uint64_t v14;

  sub_10001AF90(a1, a2);
  if (v7)
  {
    sub_10000BE48();
    sub_1000120B4();
  }
  else
  {
    v11 = sub_10001AAC8(&qword_10008E4B0);
    inited = swift_initStackObject(v11, &v14);
    *(_OWORD *)(inited + 16) = xmmword_10006D0D0;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = &off_1000861A0;
    *(_QWORD *)(inited + 32) = a4;
    *(_QWORD *)(inited + 40) = a5;
    *(_QWORD *)(inited + 96) = &type metadata for Int;
    *(_QWORD *)(inited + 104) = &off_100086140;
    *(_QWORD *)(inited + 72) = a6;
    swift_bridgeObjectRetain();
    sub_100011BCC(inited);
    swift_setDeallocating(inited);
    sub_100011B7C();
    v6 = sub_10000B0C8();
    sub_10000BE48();
    sub_1000120B4();
    sub_10001B380();
  }
  return v6;
}

uint64_t sub_1000223E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = type metadata accessor for SQLiteDB.Transaction();
  inited = swift_initStackObject(v5, &v10);
  *(_BYTE *)(inited + 24) = 0;
  *(_QWORD *)(inited + 16) = a1;
  swift_retain(a1);
  sub_100021ECC(0xD000000000000011, 0x8000000100070D90);
  if (!v2)
  {
    sub_10003CACC(inited, a2);
    if ((*(_BYTE *)(inited + 24) & 1) == 0)
    {
      v8 = sub_10001CF88();
      sub_100021ECC(v8, v9);
    }
  }
  sub_10000BDB4();
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_1000224B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

void sub_1000224D8()
{
  sub_10000B0C0();
}

void sub_1000224E0()
{
  sub_1000224D8();
}

void sub_1000224F8(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    sqlite3_column_int(*(sqlite3_stmt **)(a1 + 16), a2);
    sub_1000104E8();
    sub_10000BF94();
    return;
  }
  __break(1u);
}

uint64_t type metadata accessor for SQLiteDB()
{
  return objc_opt_self(_TtC13rtcreportingd8SQLiteDB);
}

uint64_t type metadata accessor for SQLiteDB.DBHandle()
{
  return objc_opt_self(_TtCC13rtcreportingd8SQLiteDBP33_C8B85249553736E44DE752D9368DC8428DBHandle);
}

uint64_t type metadata accessor for SQLiteDB.Transaction()
{
  return objc_opt_self(_TtCC13rtcreportingd8SQLiteDB11Transaction);
}

void sub_1000225A4()
{
  qword_10008DFB8 = -1;
}

unint64_t sub_1000225B4()
{
  unint64_t result;

  result = qword_10008E478;
  if (!qword_10008E478)
  {
    result = swift_getWitnessTable(&unk_10006D074, &unk_1000863C0);
    atomic_store(result, (unint64_t *)&qword_10008E478);
  }
  return result;
}

unint64_t sub_1000225F0()
{
  unint64_t result;

  result = qword_10008E480;
  if (!qword_10008E480)
  {
    result = swift_getWitnessTable(&unk_10006D034, &unk_100086348);
    atomic_store(result, (unint64_t *)&qword_10008E480);
  }
  return result;
}

unint64_t sub_10002262C()
{
  unint64_t result;

  result = qword_10008E488;
  if (!qword_10008E488)
  {
    result = swift_getWitnessTable(&unk_10006E6C8, &type metadata for DiskCacheError);
    atomic_store(result, (unint64_t *)&qword_10008E488);
  }
  return result;
}

unint64_t sub_100022668()
{
  unint64_t result;

  result = qword_10008E490;
  if (!qword_10008E490)
  {
    result = swift_getWitnessTable(&unk_10006EAB8, &unk_100088510);
    atomic_store(result, (unint64_t *)&qword_10008E490);
  }
  return result;
}

uint64_t sub_1000226A4(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10006CE60, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_1000226E0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10006CE60, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100022728(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  WitnessTable = swift_getWitnessTable(&unk_10006CE60, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

void sub_100022780()
{
  uint64_t *v0;

  sub_100022910(*v0, (void (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000227A4(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_10002281C(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

NSString sub_100022898@<X0>(_QWORD *a1@<X8>)
{
  NSString result;

  result = sub_1000228BC();
  *a1 = result;
  return result;
}

NSString sub_1000228BC()
{
  uint64_t v0;
  uint64_t v1;
  NSString v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v1 = v0;
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  return v2;
}

void sub_1000228F0()
{
  uint64_t *v0;

  sub_100022910(*v0, (void (*)(uint64_t))&String.hashValue.getter);
}

void sub_100022910(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5 = v4;
  a2(v3);
  swift_bridgeObjectRelease(v5);
  sub_10000BF94();
}

uint64_t sub_100022944(uint64_t a1)
{
  uint64_t *v1;

  return sub_10002294C(a1, *v1);
}

uint64_t sub_10002294C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10002298C(uint64_t a1)
{
  uint64_t *v1;

  return sub_100067C00(a1, *v1);
}

uint64_t sub_100022994(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10006CE60, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

void sub_1000229E0(uint64_t *a1, uint64_t *a2)
{
  sub_10005A140(*a1, *a2);
}

uint64_t sub_1000229EC(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100010720(result, a2);
  return result;
}

uint64_t sub_100022A00@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100022A44@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100022A6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100023D98(&qword_10008E5F8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_10006CF60);
  v3 = v2;
  sub_100023D98(&qword_10008E600, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_10006CF00);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

void sub_100022AF0(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v8;
  char v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  if ((a3 & 1) != 0)
  {
    sub_100012C24();
    if (v8 != v9)
    {
      sub_10001D164();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10001A178();
    }
  }
  sub_10001A284();
  if (v5)
  {
    v10 = sub_10001AAC8(&qword_10008E4F8);
    v11 = (char *)sub_100018E5C(v10, 40 * v5 + 32);
    v12 = j__malloc_size(v11);
    sub_1000194D4(v12);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  if ((a1 & 1) != 0)
  {
    sub_10005DCB4((char *)(a4 + 32), v4, v11 + 32);
    sub_1000120A8();
  }
  else
  {
    v13 = sub_10000A808();
    sub_100022EB0(v13, v14, v15, v16);
  }
  sub_10000BF84();
}

uint64_t sub_100022B9C()
{
  return sub_100022BD4();
}

uint64_t sub_100022BB8()
{
  return sub_100022BD4();
}

uint64_t sub_100022BD4()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  void (*v2)(uint64_t, uint64_t, unint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  const char *v26;
  uint64_t v27;

  sub_10001B228();
  if ((v6 & 1) != 0)
  {
    sub_100012C24();
    if (v10 != v11)
    {
      sub_10001D164();
      if (v10)
      {
        __break(1u);
LABEL_23:
        sub_10001B9A8();
        v26 = "Division by zero";
        v27 = 16;
LABEL_25:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v26, v27, 2, "Swift/IntegerTypes.swift", 24);
        __break(1u);
        return result;
      }
      sub_10001A178();
    }
  }
  else
  {
    v9 = v5;
  }
  v12 = *(_QWORD *)(v0 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(v0 + 16);
  else
    v13 = v9;
  if (!v13)
  {
    v19 = &_swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  v14 = sub_10001D870(v4, v5, v6, v7, v8);
  v15 = *(_QWORD *)(v1(0) - 8);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = *(unsigned __int8 *)(v15 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = (_QWORD *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  v20 = j__malloc_size(v19);
  if (!v16)
    goto LABEL_23;
  if (v20 - v18 == 0x8000000000000000 && v16 == -1)
  {
    sub_10001B9A8();
    v26 = "Division results in an overflow";
    v27 = 31;
    goto LABEL_25;
  }
  v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  v22 = *(unsigned __int8 *)(*(_QWORD *)(v1(0) - 8) + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = (unint64_t)v19 + v23;
  if ((v3 & 1) != 0)
  {
    v2(v0 + v23, v12, v24);
    sub_1000120A8();
  }
  else
  {
    sub_1000230E0(0, v12, v24, v0, v1);
  }
  return (uint64_t)v19;
}

void sub_100022D70()
{
  sub_100012B7C();
}

uint64_t sub_100022D8C()
{
  return sub_100022BD4();
}

uint64_t sub_100022DA8()
{
  return sub_100022BD4();
}

void sub_100022DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100022DEC(a1, a2, a3, a4, &qword_10008E4C0, (void (*)(uint64_t, uint64_t, char *))sub_10005E020);
}

void sub_100022DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100022DEC(a1, a2, a3, a4, &qword_10008E608, (void (*)(uint64_t, uint64_t, char *))sub_10005E020);
}

void sub_100022DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, char *))
{
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  char *v17;

  v8 = a1;
  if ((a3 & 1) != 0)
  {
    sub_100012C24();
    if (v10 != v11)
    {
      sub_10001D164();
      if (v10)
      {
        __break(1u);
        return;
      }
      sub_10001A178();
    }
  }
  else
  {
    v9 = a2;
  }
  v12 = *(_QWORD *)(a4 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(a4 + 16);
  else
    v13 = v9;
  if (v13)
  {
    v14 = sub_10001D870(a1, a2, a3, a4, a5);
    v15 = (char *)sub_100018E5C(v14, 8 * v13 + 32);
    v16 = j__malloc_size(v15);
    *((_QWORD *)v15 + 2) = v12;
    *((_QWORD *)v15 + 3) = 2 * ((uint64_t)(v16 - 32) / 8);
  }
  else
  {
    v15 = (char *)&_swiftEmptyArrayStorage;
  }
  v17 = v15 + 32;
  if ((v8 & 1) != 0)
  {
    a6(a4 + 32, v12, v17);
    sub_1000120A8();
  }
  else
  {
    sub_1000232D0(0, v12, v17, a4);
  }
  sub_10000BF84();
}

uint64_t sub_100022EB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 40 * a1 + 32;
  v8 = a3 + 40 * v4;
  if (v7 >= v8 || v7 + 40 * v4 <= a3)
  {
    sub_10001AAC8(&qword_10008E500);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100022FCC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 16 * a1 + 32;
  v8 = a3 + 16 * v4;
  if (v7 >= v8 || v7 + 16 * v4 <= a3)
  {
    sub_10001AAC8(&qword_10008E4D0);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000230E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_10001B9A8();
    v20 = "UnsafeMutablePointer.initialize with negative count";
    v21 = 51;
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    sub_10000781C();
    return v14;
  }
  sub_10001B9A8();
  v20 = "UnsafeMutablePointer.initialize overlapping range";
  v21 = 49;
LABEL_11:
  result = sub_100010378((uint64_t)"Fatal error", 11, 2, (uint64_t)v20, v21, v18, (uint64_t)"Swift/UnsafePointer.swift", v19, v22, v23, v24);
  __break(1u);
  return result;
}

uint64_t sub_1000231DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 32 * a1 + 32;
  v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1000232D0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_10001B9A8();
    v11 = "UnsafeMutablePointer.initialize with negative count";
    v12 = 51;
    goto LABEL_11;
  }
  v5 = (char *)(a4 + 8 * a1 + 32);
  v6 = &__dst[8 * v4];
  if (v5 >= v6 || &v5[8 * v4] <= __dst)
  {
    memcpy(__dst, v5, 8 * v4);
    sub_10000781C();
    return v6;
  }
  sub_10001B9A8();
  v11 = "UnsafeMutablePointer.initialize overlapping range";
  v12 = 49;
LABEL_11:
  result = (char *)sub_100010378((uint64_t)"Fatal error", 11, 2, (uint64_t)v11, v12, v9, (uint64_t)"Swift/UnsafePointer.swift", v10, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_10002339C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001AAC8(&qword_10008E4D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SQLiteDB.Location(uint64_t a1)
{
  uint64_t result;

  result = qword_10008E588;
  if (!qword_10008E588)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SQLiteDB.Location);
  return result;
}

uint64_t sub_100023414(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SQLiteDB.Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100023458(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_10000BF94();
}

uint64_t *sub_100023490(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_100023548(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for URL(0);
  result = _s10RTCUtility9XPCObjectOwet_0(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return result;
}

void *sub_1000235A0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL(0);
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *sub_100023634(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v6 = type metadata accessor for URL(0);
  v7 = _s10RTCUtility9XPCObjectOwet_0((uint64_t)a1, 1, v6);
  v8 = _s10RTCUtility9XPCObjectOwet_0((uint64_t)a2, 1, v6);
  if (!v7)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)a1, 0, 1, v6);
  return a1;
}

void *sub_100023718(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL(0);
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *sub_1000237AC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v6 = type metadata accessor for URL(0);
  v7 = _s10RTCUtility9XPCObjectOwet_0((uint64_t)a1, 1, v6);
  v8 = _s10RTCUtility9XPCObjectOwet_0((uint64_t)a2, 1, v6);
  if (!v7)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)a1, 0, 1, v6);
  return a1;
}

uint64_t sub_100023890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002389C);
}

uint64_t sub_10002389C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_10000F3C0();
  v5 = _s10RTCUtility9XPCObjectOwet_0(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t sub_1000238DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000238E8);
}

uint64_t sub_1000238E8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = sub_10000F3C0();
  return _s10RTCUtility9XPCObjectOwst_0(a1, v5, a3, v6);
}

uint64_t sub_10002392C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL(0);
  return _s10RTCUtility9XPCObjectOwet_0(a1, 1, v2);
}

uint64_t sub_100023960(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return _s10RTCUtility9XPCObjectOwst_0(a1, a2, 1, v4);
}

uint64_t sub_100023998(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_10002052C(a1, &qword_10008E598, (uint64_t)&unk_100086258);
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_10002052C(a1, &qword_10008E5A0, (uint64_t)&unk_100086280);
}

uint64_t getEnumTagSinglePayload for StorebagSectionCondition.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_100023A9C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100023AE8 + 4 * byte_10006CAFD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100023B1C + 4 * byte_10006CAF8[v4]))();
}

uint64_t sub_100023B1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100023B24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100023B2CLL);
  return result;
}

uint64_t sub_100023B38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100023B40);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100023B44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100023B4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100023B58(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100023B60(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void type metadata accessor for DBError()
{
  sub_10000B0C0();
}

uint64_t destroy for SessionHierarchyItem(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

void sub_100023B80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  sub_10000BF94();
}

uint64_t sub_100023BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for SessionHierarchyItem(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_100023C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_100023C44(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100023C98(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

void type metadata accessor for SQLError()
{
  sub_10000B0C0();
}

unint64_t sub_100023D04()
{
  unint64_t result;

  result = qword_10008E5B0;
  if (!qword_10008E5B0)
  {
    result = swift_getWitnessTable(&unk_10006CDFC, &unk_100086348);
    atomic_store(result, (unint64_t *)&qword_10008E5B0);
  }
  return result;
}

void sub_100023D40()
{
  sub_100023D98(&qword_10008E5B8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10006CFF0);
}

void sub_100023D6C()
{
  sub_100023D98(&qword_10008E5C0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_10006CEC4);
}

void sub_100023D98(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }
  sub_10000BF94();
}

void sub_100023DD4()
{
  sub_100023D98(&qword_10008E5C8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_10006CE98);
}

void sub_100023E00()
{
  sub_100023D98(&qword_10008E5D0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_10006CF34);
}

void sub_100023E2C()
{
  sub_100023D98(&qword_10008E5D8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10006CE34);
}

uint64_t initializeBufferWithCopyOfBuffer for ClientIdentity(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for AllEventFieldProvider(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t initializeWithCopy for AllEventFieldProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

_QWORD *assignWithCopy for AllEventFieldProvider(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = a2[3];
  v5 = a1[3];
  a1[3] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[4] = a2[4];
  v6 = a2[5];
  v7 = a1[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[6] = a2[6];
  v8 = a2[7];
  v9 = a1[7];
  a1[7] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[8] = a2[8];
  v10 = a2[9];
  v11 = a1[9];
  a1[9] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[10] = a2[10];
  v12 = a2[11];
  v13 = a1[11];
  a1[11] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

void *initializeWithTake for AllEventFieldProvider(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t assignWithTake for AllEventFieldProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for AllEventFieldProvider(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AllEventFieldProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AllEventFieldProvider()
{
  return &type metadata for AllEventFieldProvider;
}

uint64_t destroy for HTTPHeaderFieldProvider(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for HTTPHeaderFieldProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for HTTPHeaderFieldProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

void *initializeWithTake for HTTPHeaderFieldProvider(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for HTTPHeaderFieldProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPHeaderFieldProvider(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPHeaderFieldProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPHeaderFieldProvider()
{
  return &type metadata for HTTPHeaderFieldProvider;
}

void sub_1000243DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  _OWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  __n128 *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33[2];
  __int128 v34;
  __int128 v35;

  v1 = sub_10001AAC8(&qword_10008E740);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001AAC8(&qword_10008E748);
  v4 = sub_10001AAC8(&qword_10008E750);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = sub_10001D170(v8 + 4 * v6, v7);
  *(_OWORD *)(v9 + 16) = xmmword_10006D0E0;
  v10 = (_QWORD *)(v9 + v8);
  v11 = (_OWORD *)(v9 + v8 + *(int *)(v4 + 48));
  *v10 = 0xD000000000000011;
  v10[1] = 0x80000001000710F0;
  v12 = *(_OWORD *)(v0 + 24);
  v30 = *(_OWORD *)(v0 + 8);
  v31 = v12;
  v32 = *(_OWORD *)(v0 + 40);
  v35 = v12;
  *v11 = v12;
  v13 = sub_1000192F4();
  sub_10001B9BC((uint64_t)v11, v13);
  sub_1000104F0((uint64_t)v10 + v6);
  sub_10001B068(v14);
  v34 = v32;
  *v15 = v32;
  sub_10001B9BC((uint64_t)v15, v13);
  sub_1000104F0((uint64_t)v10 + 2 * v6);
  sub_10001B068(v16);
  *v17 = *(_QWORD *)v0;
  swift_storeEnumTagMultiPayload(v17, v13, 1);
  v18 = (__n128 *)sub_1000104F0((uint64_t)v10 + 3 * v6);
  sub_10001B114(v18, v19);
  sub_10001B9BC(v20, v13);
  sub_10001E08C((uint64_t)&v35);
  sub_10001E08C((uint64_t)&v34);
  sub_10001E08C((uint64_t)v33);
  v29 = Dictionary.init(dictionaryLiteral:)(v9, &type metadata for String, v13, &protocol witness table for String);
  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
  {
    v21 = *(_QWORD *)(v0 + 64);
    v22 = *(_QWORD *)(v0 + 72);
    *v3 = v21;
    v3[1] = v22;
    sub_10001B9BC((uint64_t)v3, v13);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v3, 0, 1, v13);
    sub_100018040();
    sub_10001CE90((uint64_t)v3, 0xD000000000000010, 0x8000000100071150, v23, v24, v25, v26, v27, v28, v29, v30, *((uint64_t *)&v30 + 1), v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33[0], v33[1], v34,
      *((uint64_t *)&v34 + 1));
  }
  sub_1000120D4();
}

uint64_t sub_100024608()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v0 = 960051513;
  v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v2 = sub_10002497C(v1);
  if (v2)
  {
    v3 = v2;
    sub_10005A09C(0x656C646E75424643, 0xEF6E6F6973726556, v2, &v6);
    swift_bridgeObjectRelease(v3);
    if (v7)
    {
      if (swift_dynamicCast(&v5, &v6, (char *)&type metadata for Any + 8, &type metadata for String, 6))
        return v5;
    }
    else
    {
      sub_1000249F0((uint64_t)&v6);
    }
  }
  return v0;
}

void sub_1000246D8(uint64_t *a1@<X8>)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = (id)MobileGestalt_get_current_device();
  if (!v2)
  {
    __break(1u);
    goto LABEL_15;
  }
  v3 = v2;
  v4 = (id)MobileGestalt_copy_deviceName_obj();
  if (!v4)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v8 = v7;

  v9 = (id)MobileGestalt_copy_marketingProductName_obj(v3);
  if (!v9)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v10 = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v13 = v12;

  v14 = (id)MobileGestalt_copy_productType_obj(v3);
  if (!v14)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v15 = v14;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v18 = v17;

  v19 = (id)MobileGestalt_copy_productVersion_obj(v3);
  if (!v19)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v20 = v19;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v42 = v22;
  v43 = v21;

  v23 = (id)MobileGestalt_copy_supplementalBuildVersion_obj(v3);
  if (!v23)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v24 = v23;
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v38 = v26;
  v39 = v25;

  if (qword_10008E080 != -1)
    swift_once(&qword_10008E080, sub_1000584B0);
  v40 = v18;
  v41 = v16;
  v27 = v13;
  v28 = v11;
  if (byte_1000973F0 != 1)
  {
    v31 = v8;
    v32 = 0;
    v34 = 0xE000000000000000;
    goto LABEL_13;
  }
  v29 = (id)MobileGestalt_copy_serialNumber_obj(v3);
  if (v29)
  {
    v30 = v29;
    v31 = v8;
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v34 = v33;

LABEL_13:
    v35 = sub_100024608();
    v37 = v36;

    *a1 = v6;
    a1[1] = v31;
    a1[2] = v28;
    a1[3] = v27;
    a1[4] = v41;
    a1[5] = v40;
    a1[6] = v43;
    a1[7] = v42;
    a1[8] = v39;
    a1[9] = v38;
    a1[10] = v35;
    a1[11] = v37;
    a1[12] = v32;
    a1[13] = v34;
    return;
  }
LABEL_20:
  __break(1u);
}

void *sub_1000248CC()
{
  uint64_t v1[14];

  sub_1000246D8(v1);
  return memcpy(&qword_10008E6D0, v1, 0x70uLL);
}

uint64_t sub_100024900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  sub_10000AF70();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002497C(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "infoDictionary");

  if (!v2)
    return 0;
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  return v3;
}

uint64_t sub_1000249F0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001AAC8(&qword_10008E758);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100024A34(unint64_t a1)
{
  if (a1 >= 4)
    return 3;
  else
    return 0x2010003u >> (8 * a1);
}

uint64_t sub_100024A54(unsigned __int8 a1)
{
  return a1 + 1;
}

uint64_t sub_100024A60()
{
  unsigned __int8 *v0;

  return sub_100040CAC(*v0);
}

void sub_100024A68(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_10004119C(a1, *v1);
}

uint64_t sub_100024A70(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_100041204(a1, *v1);
}

uint64_t sub_100024A78@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100024A34(*a1);
  *a2 = result;
  return result;
}

void sub_100024AA0(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = sub_100024A54(*v1);
  sub_10000BF94();
}

void sub_100024AC4(_QWORD *a1@<X8>)
{
  *a1 = &off_1000857E0;
}

uint64_t sub_100024AD4(unint64_t a1)
{
  if (a1 >= 5)
    return 4;
  else
    return (0x302010004uLL >> (8 * a1));
}

void sub_100024AF8(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[10];
  uint64_t v18;

  v17[1] = a2;
  v17[3] = *(_QWORD *)(type metadata accessor for SHA256(0) - 8);
  sub_1000192FC();
  __chkstk_darwin(v3);
  v18 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v18);
  v4 = type metadata accessor for SHA256Digest(0);
  v17[5] = *(_QWORD *)(v4 - 8);
  v17[6] = v4;
  sub_1000192FC();
  __chkstk_darwin(v5);
  sub_10001065C();
  v17[2] = v6;
  sub_100015684();
  __chkstk_darwin(v7);
  v17[4] = (char *)v17 - v8;
  sub_10001AAC8(&qword_10008E780);
  sub_1000192FC();
  v10 = __chkstk_darwin(v9);
  v11 = __chkstk_darwin(v10);
  v12 = __chkstk_darwin(v11);
  v13 = __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  v14 = sub_10000F3C0();
  v17[8] = *(_QWORD *)(v14 - 8);
  v17[9] = v14;
  sub_1000192FC();
  __chkstk_darwin(v15);
  sub_10001D17C();
  v17[7] = v16;
  __asm { BR              X10 }
}

void sub_100024CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;

  sub_10000AF58();
  URL.init(string:)(v6);
  if (sub_10000A830(v3) == 1)
  {
    __break(1u);
    JUMPOUT(0x100024CF4);
  }
  v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 144) + 32))(*(_QWORD *)(v5 - 152), v3, v0);
  v8 = (id)((uint64_t (*)(uint64_t))MobileGestalt_get_current_device)(v7);
  if (v8)
  {
    v9 = v8;
    v10 = (id)((uint64_t (*)(void))MobileGestalt_copy_marketingProductName_obj)();
    if (v10)
    {
      v11 = v10;
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v14 = v13;

      ((void (*)(void))static String.Encoding.utf8.getter)();
      String.data(using:allowLossyConversion:)(v2, 0, v12, v14);
      v16 = v15;
      sub_10000A820();
      (*(void (**)(uint64_t, _QWORD))(v1 + 8))(v2, *(_QWORD *)(v5 - 128));
      if (v16 >> 60 != 15)
      {
        sub_100027564((unint64_t *)&unk_1000904B0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256);
        ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.init())(v4, v17);
        v18 = (char *)&loc_100024E9C + dword_1000251E4[v16 >> 62];
        *(_QWORD *)(v5 - 208) = v9;
        __asm { BR              X10 }
      }
LABEL_9:
      __break(1u);
      JUMPOUT(0x1000251D0);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  goto LABEL_9;
}

uint64_t sub_1000251F4(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_100043B78(a1, *v1);
}

uint64_t sub_1000251FC@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100024AD4(*a1);
  *a2 = result;
  return result;
}

void sub_100025224(_QWORD *a1@<X8>)
{
  *a1 = &off_100085808;
}

uint64_t sub_100025234()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026B1C(v0, qword_100097278);
  sub_100015718(v0, (uint64_t)qword_100097278);
  return Logger.init(subsystem:category:)(0xD000000000000017, 0x8000000100071220, 0x67616265726F7473, 0xE800000000000000);
}

uint64_t sub_1000252A8()
{
  return 7;
}

uint64_t sub_1000252B0()
{
  return sub_10001F74C();
}

uint64_t sub_1000252CC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000252A8();
  *a1 = result;
  return result;
}

uint64_t sub_1000252F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100020930();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100025318(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100020930();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100025340(uint64_t a1)
{
  sub_1000054F4(a1, &qword_10008E7F0, (void (*)(uint64_t, uint64_t, void **))sub_100027030);
}

unint64_t sub_100025354(uint64_t a1, char a2)
{
  Swift::String v2;

  if ((a2 & 1) != 0)
  {
    if (a1)
      return 0xD000000000000025;
    else
      return 0xD00000000000001DLL;
  }
  else
  {
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease(0xE000000000000000);
    v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v2);
    sub_10000781C();
    return 0xD000000000000011;
  }
}

unint64_t sub_100025424()
{
  uint64_t v0;

  return sub_100025354(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_100025430(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 40));
  return v1;
}

void sub_10002545C(char *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v75;
  void *v76;
  char **v77;
  void (*v78)(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, uint64_t@<X3>, uint64_t@<X8>);
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v88;
  unint64_t v90;
  unint64_t v92;
  unint64_t v94;
  unint64_t v95;
  unint64_t v97;
  char v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120[5];
  uint64_t v121;
  uint64_t v122;

  v7 = ~a3;
  v8 = type metadata accessor for EventValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!v7)
    goto LABEL_8;
  if ((a3 & 1) != 0)
  {
    v12 = *(_QWORD *)(v3 + 32);
    sub_100018DFC((uint64_t)a1, a2, 1);
    v13 = sub_10005A0E8((uint64_t)a1, a2, v12);
    v15 = v14;
    sub_100018DE4((uint64_t)a1, a2, a3);
    if (v15 != 255)
    {
      if (!v15)
      {
        a1 = (char *)v13;
        goto LABEL_9;
      }
      sub_100027738(v13, v15);
    }
LABEL_8:
    a1 = (char *)&_swiftEmptyArrayStorage;
    goto LABEL_9;
  }
  sub_100018DFC((uint64_t)a1, a2, 0);
LABEL_9:
  sub_100022AF0(0, *((_QWORD *)a1 + 2), 0, (uint64_t)&_swiftEmptyArrayStorage);
  v122 = v16;
  v17 = *((_QWORD *)a1 + 2);
  if (!v17)
  {
LABEL_67:
    swift_bridgeObjectRelease(a1);
    return;
  }
  v18 = 0;
  v19 = a1 + 32;
  v102 = (unint64_t)"Duplicate values for key: '";
  v101 = 0x8000000100071390;
  v115 = v9;
  v103 = v8;
  v106 = a1;
  v105 = v17;
  v104 = a1 + 32;
  while (v18 < *((_QWORD *)a1 + 2))
  {
    v20 = &v19[88 * v18];
    if (!*((_QWORD *)v20 + 7))
    {
      v114 = v18;
      v22 = *(_QWORD *)v20;
      v21 = *((_QWORD *)v20 + 1);
      v24 = *((_QWORD *)v20 + 2);
      v23 = *((_QWORD *)v20 + 3);
      v25 = *((_QWORD *)v20 + 4);
      v26 = *((_QWORD *)v20 + 5);
      v27 = *((_QWORD *)v20 + 6);
      v28 = *((_QWORD *)v20 + 9);
      v117 = *((_QWORD *)v20 + 8);
      v29 = *((_QWORD *)v20 + 10);
      v111 = *(_QWORD *)(v22 + 16);
      v112 = v25;
      swift_bridgeObjectRetain(v22);
      v119 = v21;
      swift_bridgeObjectRetain(v21);
      v118 = v24;
      swift_bridgeObjectRetain(v24);
      v116 = v23;
      swift_bridgeObjectRetain(v23);
      v113 = v26;
      swift_bridgeObjectRetain(v26);
      v108 = v27;
      v109 = v29;
      v110 = v28;
      sub_100012E88(v27, 0, v117, v28, v29);
      swift_bridgeObjectRetain(v22);
      v30 = Set.init(minimumCapacity:)(v111, &type metadata for String, &protocol witness table for String);
      v121 = v30;
      v31 = *(_QWORD *)(v22 + 16);
      if (v31)
      {
        v32 = (uint64_t *)(v22 + 40);
        v33 = v103;
        do
        {
          v34 = *(v32 - 1);
          v35 = *v32;
          swift_bridgeObjectRetain(*v32);
          sub_100006354(v120, v34, v35);
          swift_bridgeObjectRelease(v120[1]);
          v32 += 2;
          --v31;
        }
        while (v31);
        swift_bridgeObjectRelease(v22);
        v107 = v121;
      }
      else
      {
        v107 = v30;
        swift_bridgeObjectRelease(v22);
        v33 = v103;
      }
      v36 = v119;
      v111 = v22;
      v37 = *(_QWORD *)(v119 + 16);
      if (v37)
      {
        v120[0] = (uint64_t)&_swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v119);
        sub_10005EBB4(0, v37, 0);
        v38 = (_QWORD *)v120[0];
        v39 = (uint64_t *)(v36 + 40);
        do
        {
          v40 = *v39;
          *v11 = *(v39 - 1);
          v11[1] = v40;
          swift_storeEnumTagMultiPayload(v11, v33, 0);
          v120[0] = (uint64_t)v38;
          v41 = v38[2];
          v42 = v38[3];
          swift_bridgeObjectRetain(v40);
          if (v41 >= v42 >> 1)
          {
            sub_10005EBB4(v42 > 1, v41 + 1, 1);
            v38 = (_QWORD *)v120[0];
          }
          v39 += 2;
          v38[2] = v41 + 1;
          sub_100027BC0((uint64_t)v11, (uint64_t)v38+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v41, type metadata accessor for EventValue);
          --v37;
        }
        while (v37);
        swift_bridgeObjectRelease(v119);
      }
      else
      {
        v38 = &_swiftEmptyArrayStorage;
      }
      v43 = v118;
      v44 = *(_QWORD *)(v118 + 16);
      swift_bridgeObjectRetain(v118);
      v45 = Set.init(minimumCapacity:)(v44, &type metadata for Int, &protocol witness table for Int);
      v46 = *(_QWORD *)(v43 + 16);
      if (v46)
      {
        v47 = 0;
        v48 = v43 + 32;
        do
        {
          v49 = v45 + 56;
          while (1)
          {
            v50 = *(_QWORD *)(v48 + 8 * v47++);
            v51 = static Hasher._hash(seed:_:)(*(_QWORD *)(v45 + 40), v50);
            v52 = -1 << *(_BYTE *)(v45 + 32);
            v53 = v51 & ~v52;
            if (((*(_QWORD *)(v49 + ((v53 >> 3) & 0xFFFFFFFFFFFFF8)) >> v53) & 1) == 0)
              break;
            v54 = *(_QWORD *)(v45 + 48);
            if (*(_QWORD *)(v54 + 8 * v53) != v50)
            {
              v55 = ~v52;
              do
              {
                v53 = (v53 + 1) & v55;
                if (((*(_QWORD *)(v49 + ((v53 >> 3) & 0xFFFFFFFFFFFFF8)) >> v53) & 1) == 0)
                  goto LABEL_35;
              }
              while (*(_QWORD *)(v54 + 8 * v53) != v50);
            }
            if (v47 == v46)
              goto LABEL_36;
          }
LABEL_35:
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
          v120[0] = v45;
          sub_10004F418(v50, v53, isUniquelyReferenced_nonNull_native);
          v45 = v120[0];
          swift_bridgeObjectRelease(0x8000000000000000);
        }
        while (v47 != v46);
LABEL_36:
        v43 = v118;
        swift_bridgeObjectRelease(v118);
        v9 = v115;
      }
      else
      {
        swift_bridgeObjectRelease(v43);
      }
      v57 = v116;
      v58 = *(_QWORD *)(v116 + 16);
      swift_bridgeObjectRetain(v116);
      v59 = Set.init(minimumCapacity:)(v58, &type metadata for Int, &protocol witness table for Int);
      v60 = *(_QWORD *)(v57 + 16);
      if (v60)
      {
        v61 = v57;
        v62 = 0;
        v63 = v61 + 32;
        do
        {
          v64 = v59 + 56;
          while (1)
          {
            v65 = *(_QWORD *)(v63 + 8 * v62++);
            v66 = static Hasher._hash(seed:_:)(*(_QWORD *)(v59 + 40), v65);
            v67 = -1 << *(_BYTE *)(v59 + 32);
            v68 = v66 & ~v67;
            if (((*(_QWORD *)(v64 + ((v68 >> 3) & 0xFFFFFFFFFFFFF8)) >> v68) & 1) == 0)
              break;
            v69 = *(_QWORD *)(v59 + 48);
            if (*(_QWORD *)(v69 + 8 * v68) != v65)
            {
              v70 = ~v67;
              do
              {
                v68 = (v68 + 1) & v70;
                if (((*(_QWORD *)(v64 + ((v68 >> 3) & 0xFFFFFFFFFFFFF8)) >> v68) & 1) == 0)
                  goto LABEL_48;
              }
              while (*(_QWORD *)(v69 + 8 * v68) != v65);
            }
            if (v62 == v60)
              goto LABEL_49;
          }
LABEL_48:
          v71 = swift_isUniquelyReferenced_nonNull_native(v59);
          v120[0] = v59;
          sub_10004F418(v65, v68, v71);
          v59 = v120[0];
          swift_bridgeObjectRelease(0x8000000000000000);
        }
        while (v62 != v60);
LABEL_49:
        v57 = v116;
        swift_bridgeObjectRelease(v116);
        v9 = v115;
        v43 = v118;
      }
      else
      {
        swift_bridgeObjectRelease(v57);
      }
      v72 = v112;
      v73 = v113;
      if (v112 == 0x776F6C6C61 && v113 == 0xE500000000000000)
      {
        v75 = 0xE500000000000000;
LABEL_58:
        swift_bridgeObjectRelease(v75);
        v76 = &unk_100089230;
        v77 = &off_1000895C8;
        goto LABEL_59;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x776F6C6C61, 0xE500000000000000, v112, v113, 0) & 1) != 0)
      {
        v75 = v73;
        goto LABEL_58;
      }
      if (v72 == 0x65766F6D6572 && v73 == 0xE600000000000000)
      {
        v88 = 0xE600000000000000;
LABEL_75:
        swift_bridgeObjectRelease(v88);
        v76 = &unk_1000892B0;
        v77 = (char **)&off_1000895E8;
        goto LABEL_59;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65766F6D6572, 0xE600000000000000, v72, v73, 0) & 1) != 0)
      {
        v88 = v73;
        goto LABEL_75;
      }
      if (v72 == 0x363532616873 && v73 == 0xE600000000000000)
      {
        v90 = 0xE600000000000000;
LABEL_83:
        swift_bridgeObjectRelease(v90);
        v76 = &unk_100089330;
        v77 = (char **)&off_100089608;
        goto LABEL_59;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x363532616873, 0xE600000000000000, v72, v73, 0) & 1) != 0)
      {
        v90 = v73;
        goto LABEL_83;
      }
      if (v72 == 0x73696C6574696877 && v73 == 0xEF7365756C615674)
      {
        v92 = 0xEF7365756C615674;
LABEL_91:
        swift_bridgeObjectRelease(v92);
        v76 = &unk_1000893B0;
        v77 = (char **)&off_100089628;
        goto LABEL_59;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73696C6574696877, 0xEF7365756C615674, v72, v73, 0) & 1) != 0)
      {
        v92 = v73;
        goto LABEL_91;
      }
      if (v72 == 0x73696C6B63616C62 && v73 == 0xEF7365756C615674)
      {
        v94 = 0xEF7365756C615674;
LABEL_99:
        swift_bridgeObjectRelease(v94);
        v76 = &unk_100089430;
        v77 = (char **)&off_100089648;
        goto LABEL_59;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73696C6B63616C62, 0xEF7365756C615674, v72, v73, 0) & 1) != 0)
      {
        v94 = v73;
        goto LABEL_99;
      }
      if (v72 == 0xD000000000000018 && v73 == v101)
      {
        v95 = v102 | 0x8000000000000000;
        goto LABEL_105;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, v102 | 0x8000000000000000, v72, v73, 0) & 1) != 0)
      {
        v95 = v73;
LABEL_105:
        swift_bridgeObjectRelease(v95);
        v76 = &unk_1000894B0;
        v77 = (char **)&off_100089668;
LABEL_59:
        swift_bridgeObjectRelease(v57);
        swift_bridgeObjectRelease(v43);
        swift_bridgeObjectRelease(v119);
        swift_bridgeObjectRelease(v111);
        sub_100012ED8(v108, 0, v117, v110, v109);
LABEL_60:
        v78 = (void (*)(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, uint64_t@<X3>, uint64_t@<X8>))v77[1];
        v120[3] = (uint64_t)v76;
        v120[4] = (uint64_t)v77;
        v79 = sub_100027AC4(v120);
        v78(v107, (uint64_t)v38, v45, v59, (uint64_t)v79);
        v80 = v122;
        v81 = swift_isUniquelyReferenced_nonNull_native(v122);
        if ((v81 & 1) == 0)
        {
          sub_100022AF0(0, *(_QWORD *)(v80 + 16) + 1, 1, v80);
          v80 = v81;
          v122 = v81;
        }
        v83 = *(_QWORD *)(v80 + 16);
        v82 = *(_QWORD *)(v80 + 24);
        if (v83 >= v82 >> 1)
        {
          sub_100022AF0(v82 > 1, v83 + 1, 1, v80);
          v80 = v81;
          v122 = v81;
        }
        __chkstk_darwin(v81);
        v85 = (uint64_t *)((char *)&v100 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0));
        (*(void (**)(uint64_t *, uint64_t *))(v86 + 16))(v85, v79);
        sub_100027B00(v83, (uint64_t)v85, &v122, (uint64_t)v76, (uint64_t)v77);
        v122 = v80;
        sub_100015060(v120);
        v9 = v115;
        goto LABEL_65;
      }
      if (v72 == 0x646E65707061 && v73 == 0xE600000000000000)
      {
        v97 = 0xE600000000000000;
      }
      else
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646E65707061, 0xE600000000000000, v72, v73, 0) & 1) == 0)
        {
          if (v72 == 0x646E6570657270 && v73 == 0xE700000000000000)
          {
            swift_bridgeObjectRelease(0xE700000000000000);
            v76 = &unk_1000895B0;
            v77 = (char **)&off_1000896A8;
            goto LABEL_59;
          }
          v99 = _stringCompareWithSmolCheck(_:_:expecting:)(0x646E6570657270, 0xE700000000000000, v72, v73, 0);
          swift_bridgeObjectRelease(v73);
          swift_bridgeObjectRelease(v57);
          swift_bridgeObjectRelease(v43);
          swift_bridgeObjectRelease(v119);
          swift_bridgeObjectRelease(v111);
          sub_100012ED8(v108, 0, v117, v110, v109);
          if ((v99 & 1) != 0)
          {
            v76 = &unk_1000895B0;
            v77 = (char **)&off_1000896A8;
            goto LABEL_60;
          }
          swift_bridgeObjectRelease(v59);
          swift_bridgeObjectRelease(v45);
          swift_bridgeObjectRelease(v38);
          swift_bridgeObjectRelease(v107);
LABEL_65:
          a1 = v106;
          v17 = v105;
          v18 = v114;
          v19 = v104;
          goto LABEL_66;
        }
        v97 = v73;
      }
      swift_bridgeObjectRelease(v97);
      v76 = &unk_100089530;
      v77 = (char **)&off_100089688;
      goto LABEL_59;
    }
LABEL_66:
    if (++v18 == v17)
      goto LABEL_67;
  }
  __break(1u);
}

uint64_t sub_100025FA4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain(a2);
  return a1;
}

uint64_t sub_100025FD4()
{
  uint64_t result;

  result = sub_100025FF0();
  qword_10008E768 = result;
  return result;
}

uint64_t sub_100025FF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  mach_header_64 *v4;
  uint8_t *v5;
  unint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t inited;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const __CFData *isa;
  const __CFDictionary *v28;
  SecKeyRef v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  unint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t size;
  _BYTE v46[64];
  _QWORD v47[2];

  v0 = type metadata accessor for Data.Deallocator(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  size = 0;
  v4 = _NSGetMachExecuteHeader();
  v5 = getsectiondata(v4, "__TEXT", "__info_plist", &size);
  if (v5 && (v6 = size) != 0)
  {
    if ((size & 0x8000000000000000) != 0)
      __break(1u);
    v7 = v5;
    (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Data.Deallocator.none(_:), v0);
    v8 = Data.init(bytesNoCopy:count:deallocator:)(v7, v6, v3);
    v10 = v9;
    v11 = type metadata accessor for PropertyListDecoder(0);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v12 = PropertyListDecoder.init()();
    v44 = 100;
    v13 = objc_autoreleasePoolPush();
    v14 = sub_100026AE0();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:)(v47, &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot, v8, v10, &v44, &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot, v14);
    objc_autoreleasePoolPop(v13);
    v15 = v47[0];
    v16 = v47[1];
    v17 = sub_10001AAC8(&qword_10008E778);
    inited = swift_initStackObject(v17, v46);
    *(_OWORD *)(inited + 16) = xmmword_10006D0D0;
    *(_QWORD *)(inited + 32) = kSecAttrKeyType;
    *(_QWORD *)(inited + 40) = kSecAttrKeyTypeRSA;
    *(_QWORD *)(inited + 48) = kSecAttrKeyClass;
    *(_QWORD *)(inited + 56) = kSecAttrKeyClassPublic;
    v19 = (id)kSecAttrKeyType;
    v20 = (id)kSecAttrKeyTypeRSA;
    v21 = (id)kSecAttrKeyClass;
    v22 = (id)kSecAttrKeyClassPublic;
    sub_100021264(v15, v16);
    type metadata accessor for CFString(0);
    v24 = v23;
    sub_100027564(&qword_10008E5B8, (uint64_t (*)(uint64_t))type metadata accessor for CFString);
    v26 = Dictionary.init(dictionaryLiteral:)(inited, v24, v24, v25);
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100010720(v15, v16);
    v28 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v26);
    v29 = SecKeyCreateWithData(isa, v28, 0);

    if (v29)
    {
      sub_100010720(v15, v16);
      swift_release(v12);
      sub_100010720(v8, v10);
      return (uint64_t)v29;
    }
    if (qword_10008DFC8 != -1)
      swift_once(&qword_10008DFC8, sub_100025234);
    v38 = type metadata accessor for Logger(0);
    v39 = sub_100015718(v38, (uint64_t)qword_100097278);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "unable to parse storebag key", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }

    v36 = 0xD00000000000001CLL;
    v37 = "unable to parse storebag key";
  }
  else
  {
    if (qword_10008DFC8 != -1)
      swift_once(&qword_10008DFC8, sub_100025234);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_100015718(v31, (uint64_t)qword_100097278);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "unable to load Info.plist section", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    v36 = 0xD000000000000021;
    v37 = "unable to load Info.plist section";
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v36, (unint64_t)(v37 - 32) | 0x8000000000000000, "rtcreportingd/Storebag.swift", 28, 2);
  __break(1u);
  return result;
}

BOOL sub_100026584(Swift::String a1)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_100085A50;
  return sub_1000266E8(a1, v1);
}

uint64_t sub_1000265A4()
{
  return 0x726F706552435452;
}

_QWORD *sub_1000265C4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;

  v3 = sub_10001AAC8(&qword_10008E838);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10001D44C(a1, v7);
  v10 = sub_10002838C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot.CodingKeys, &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_100015060(a1);
  }
  else
  {
    v11 = sub_1000283C8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting, v12, v3, &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v14;
    sub_100015060(a1);
  }
  return v9;
}

BOOL sub_1000266E8(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  sub_10000781C();
  return v5 != 0;
}

BOOL sub_100026724(Swift::String a1)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_100085A88;
  return sub_1000266E8(a1, v1);
}

uint64_t sub_100026744()
{
  return 1;
}

unint64_t sub_10002674C()
{
  return 0xD000000000000011;
}

_QWORD *sub_100026768(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;

  v3 = sub_10001AAC8(&qword_10008E8C8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10001D44C(a1, v7);
  v10 = sub_100028840();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting.CodingKeys, &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_100015060(a1);
  }
  else
  {
    v11 = sub_1000072E8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, v12, v3, &type metadata for Data, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v14;
    sub_100015060(a1);
  }
  return v9;
}

BOOL sub_10002689C@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  _BOOL8 result;

  v3._rawValue = &off_100085A50;
  result = sub_1000266E8(*a1, v3);
  *a2 = result;
  return result;
}

void sub_1000268D4(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_1000265A4();
  a1[1] = v2;
  sub_10000BF94();
}

BOOL sub_1000268F8@<W0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = sub_100026584(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100026920(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002838C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100026948(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002838C();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_100026970@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_1000265C4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

BOOL sub_1000269A4@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  _BOOL8 result;

  v3._rawValue = &off_100085A88;
  result = sub_1000266E8(*a1, v3);
  *a2 = result;
  return result;
}

void sub_1000269DC(unint64_t *a1@<X8>)
{
  unint64_t v2;

  *a1 = sub_10002674C();
  a1[1] = v2;
  sub_10000BF94();
}

BOOL sub_100026A00@<W0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = sub_100026724(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100026A28()
{
  return sub_10001F74C();
}

uint64_t sub_100026A40@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100026744();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100026A68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100028840();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100026A90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100028840();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_100026AB8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_100026768(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

unint64_t sub_100026AE0()
{
  unint64_t result;

  result = qword_10008E770;
  if (!qword_10008E770)
  {
    result = swift_getWitnessTable(&unk_10006D4C4, &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot);
    atomic_store(result, (unint64_t *)&qword_10008E770);
  }
  return result;
}

uint64_t *sub_100026B1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

char *sub_100026B5C(int64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  char *result;
  int64_t v5;

  v3 = *v1;
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!(_DWORD)result || a1 > *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v3 + 16) <= a1)
      v5 = a1;
    else
      v5 = *(_QWORD *)(v3 + 16);
    return sub_10005EBE0(result, v5, 0);
  }
  return result;
}

void sub_100026BC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 < 0)
  {
    sub_10001E4BC();
    sub_100010D18((uint64_t)"Fatal error", v3, v4, (uint64_t)"Can't construct Array with count < 0", v5, v6, (uint64_t)"Swift/Array.swift");
    __break(1u);
  }
  else
  {
    if (a1)
    {
      v2 = sub_10000F3C0();
      *(_QWORD *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2) + 16) = a1;
    }
    sub_10000F3C0();
    sub_100028B54();
  }
}

void sub_100026C48(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  *(_QWORD *)(v5 + 16) = a1 + 1;
  v6 = type metadata accessor for SessionConfiguration.Backend(0);
  sub_100027BC0(a2, v5+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * a1, type metadata accessor for SessionConfiguration.Backend);
}

unint64_t sub_100026CB0(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100026CD0(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD v51[2];
  uint64_t v52;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v43 = v4;
  if (!v4)
    return swift_bridgeObjectRelease_n(v3, 2);
  v5 = 0;
  v6 = 0;
  v42 = v3;
  while (1)
  {
    if (v6 >= *(_QWORD *)(v3 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_24;
    }
    v48 = *(_OWORD *)(v3 + v5 + 80);
    v7 = *(_BYTE *)(v3 + v5 + 64);
    v8 = *(_QWORD *)(v3 + v5 + 72);
    v10 = *(_QWORD *)(v3 + v5 + 48);
    v9 = *(_QWORD *)(v3 + v5 + 56);
    v11 = *(_QWORD *)(v3 + v5 + 32);
    v12 = *(_QWORD *)(v3 + v5 + 40);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v48);
    v13 = swift_bridgeObjectRetain(*((_QWORD *)&v48 + 1));
    if (!v12)
      return swift_bridgeObjectRelease_n(v3, 2);
    v44 = v10;
    v45 = v9;
    v41 = v13;
    v51[0] = v11;
    v51[1] = v12;
    v14 = (_QWORD *)*a3;
    v16 = sub_10001A120(v11, v12);
    v17 = v14[2];
    v18 = (v15 & 1) == 0;
    v19 = v17 + v18;
    if (__OFADD__(v17, v18))
      goto LABEL_21;
    v20 = v15;
    if (v14[3] < v19)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      sub_10001AAC8(&qword_10008E7E0);
      _NativeDictionary.copy()();
      if ((v20 & 1) != 0)
        goto LABEL_16;
    }
LABEL_12:
    v23 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    v24 = (uint64_t *)(v23[6] + 16 * v16);
    *v24 = v11;
    v24[1] = v12;
    v25 = v23[7] + 48 * v16;
    *(_QWORD *)v25 = v44;
    *(_QWORD *)(v25 + 8) = v45;
    *(_BYTE *)(v25 + 16) = v7;
    *(_QWORD *)(v25 + 24) = v8;
    *(_OWORD *)(v25 + 32) = v48;
    v26 = v23[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_22;
    ++v6;
    v23[2] = v28;
    v5 += 64;
    a2 = 1;
    v3 = v42;
    if (v43 == v6)
      return swift_bridgeObjectRelease_n(v3, 2);
  }
  sub_10005E8E4(v19, a2 & 1);
  v21 = sub_10001A120(v11, v12);
  if ((v20 & 1) != (v22 & 1))
    goto LABEL_23;
  v16 = v21;
  if ((v20 & 1) == 0)
    goto LABEL_12;
LABEL_16:
  v29 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow(v29, v30, v31, v32, v33, v34, v35, v36);
  v52 = v29;
  swift_errorRetain(v29);
  v37 = sub_10001AAC8(&qword_10008E7E8);
  if ((swift_dynamicCast(v37, &v52, v37, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRelease_n(v42, 2);
    return swift_errorRelease(v52);
  }
LABEL_24:
  v49 = 0;
  v50 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v39._object = (void *)0x8000000100071370;
  v39._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v39);
  _print_unlocked<A, B>(_:_:)(v51, &v49, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v40._countAndFlagsBits = 39;
  v40._object = (void *)0xE100000000000000;
  String.append(_:)(v40);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v49, v50, "Swift/NativeDictionary.swift", 28, 2);
  __break(1u);
  return result;
}

uint64_t sub_100027030(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  _QWORD *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v55 = a3;
  v6 = type metadata accessor for CachedSession(0);
  v54 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001AAC8(&qword_10008E7F8);
  v10 = __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    return swift_bridgeObjectRelease(a1);
  v48 = v3;
  v49 = a1;
  v53 = (uint64_t)v13 + *(int *)(v10 + 48);
  v15 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  v50 = *(_QWORD *)(v11 + 72);
  swift_bridgeObjectRetain();
  v16 = type metadata accessor for CachedSession;
  v51 = v13;
  v52 = v8;
  while (1)
  {
    sub_100027B78(v15, (uint64_t)v13);
    v18 = v13[1];
    v58 = *v13;
    v17 = v58;
    v59 = v18;
    v19 = v16;
    sub_100027BC0(v53, (uint64_t)v8, v16);
    v20 = (_QWORD *)*v55;
    v22 = sub_10001A120(v17, v18);
    v23 = v20[2];
    v24 = (v21 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_20;
    }
    v26 = v21;
    if (v20[3] < v25)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v21 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      sub_10001AAC8((uint64_t *)&unk_10008F8D0);
      _NativeDictionary.copy()();
      if ((v26 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v29 = (_QWORD *)*v55;
    *(_QWORD *)(*v55 + 8 * (v22 >> 6) + 64) |= 1 << v22;
    v30 = (uint64_t *)(v29[6] + 16 * v22);
    *v30 = v17;
    v30[1] = v18;
    v8 = v52;
    v16 = v19;
    sub_100027BC0((uint64_t)v52, v29[7] + *(_QWORD *)(v54 + 72) * v22, v19);
    v31 = v29[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
      goto LABEL_18;
    v29[2] = v33;
    v13 = v51;
    v15 += v50;
    a2 = 1;
    if (!--v14)
      return swift_bridgeObjectRelease_n(v49, 2);
  }
  sub_10005EBA0(v25, a2 & 1);
  v27 = sub_10001A120(v17, v18);
  if ((v26 & 1) != (v28 & 1))
    goto LABEL_19;
  v22 = v27;
  if ((v26 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v34 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow(v34, v35, v36, v37, v38, v39, v40, v41);
  v60 = v34;
  swift_errorRetain(v34);
  v42 = sub_10001AAC8(&qword_10008E7E8);
  if ((swift_dynamicCast(v42, &v60, v42, &type metadata for _MergeError, 0) & 1) == 0)
  {
    v43 = v49;
    swift_bridgeObjectRelease(v49);
    sub_100023458((uint64_t)v52, type metadata accessor for CachedSession);
    v44 = v59;
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v44);
    return swift_errorRelease(v60);
  }
LABEL_20:
  v56 = 0;
  v57 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v46._object = (void *)0x8000000100071370;
  v46._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v46);
  _print_unlocked<A, B>(_:_:)(&v58, &v56, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v47._countAndFlagsBits = 39;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v56, v57, "Swift/NativeDictionary.swift", 28, 2);
  __break(1u);
  return result;
}

char *sub_1000273E4()
{
  _QWORD *v0;
  uint64_t v1;
  char *result;

  v1 = *v0;
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v0);
  *v0 = v1;
  if ((result & 1) == 0)
    return sub_10005EBE0(0, *(_QWORD *)(v1 + 16) + 1, 1);
  return result;
}

char *sub_10002742C(char *result)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if ((uint64_t)(result + 1) > (uint64_t)(v2 >> 1))
    return sub_10005EBE0((char *)(v2 > 1), (int64_t)(result + 1), 1);
  return result;
}

__n128 sub_100027454(uint64_t a1, __int128 *a2)
{
  uint64_t *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  v5 = *((_QWORD *)a2 + 3);
  v6 = *((_BYTE *)a2 + 32);
  v7 = *((_QWORD *)a2 + 5);
  v8 = *v2;
  *(_QWORD *)(v8 + 16) = a1 + 1;
  v9 = v8 + (a1 << 6);
  *(_OWORD *)(v9 + 32) = v3;
  *(_QWORD *)(v9 + 48) = v4;
  *(_QWORD *)(v9 + 56) = v5;
  *(_BYTE *)(v9 + 64) = v6;
  *(_QWORD *)(v9 + 72) = v7;
  result = (__n128)a2[3];
  *(__n128 *)(v9 + 80) = result;
  return result;
}

uint64_t sub_100027490(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  v12 = sub_100028B44();
  sub_100027564((unint64_t *)&unk_1000904B0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

uint64_t sub_100027550(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100021264(result, a2);
  return result;
}

void sub_100027564(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = a2(255);
    atomic_store(sub_10001C59C(v3), a1);
  }
  sub_10000BF94();
}

uint64_t sub_100027598(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000275DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v7 = a1;
  v8 = a2;
  v9 = BYTE2(a2);
  v10 = BYTE3(a2);
  v11 = BYTE4(a2);
  v3 = (char *)&v7 + a3;
  v12 = BYTE5(a2);
  v4 = sub_100028B44();
  sub_100027564((unint64_t *)&unk_1000904B0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(&v7, v3, v4, v5);
}

uint64_t sub_1000276E4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100027708()
{
  uint64_t v0;

  return sub_100025FA4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

_BYTE **sub_100027714(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10002FBF0(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_100027720()
{
  uint64_t v0;

  return sub_10002FA20(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100027728(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return sub_10002FA40(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_100027738(uint64_t result, char a2)
{
  if (a2 != -1)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_10002774C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 168);
  v13 = *(_QWORD *)(a1 + 160);
  v15 = *(_QWORD *)(a1 + 192);
  v16 = *(_QWORD *)(a1 + 208);
  v14 = *(_QWORD *)(a1 + 224);
  v10 = *(_BYTE *)(a1 + 176);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 136));
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  sub_100018DCC(v13, v12, v10);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  return a1;
}

uint64_t sub_10002783C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 120);
  v8 = *(_QWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 136);
  v12 = *(_QWORD *)(a1 + 168);
  v13 = *(_QWORD *)(a1 + 160);
  v14 = *(_QWORD *)(a1 + 192);
  v15 = *(_QWORD *)(a1 + 208);
  v16 = *(_QWORD *)(a1 + 224);
  v10 = *(_BYTE *)(a1 + 176);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  sub_100018DE4(v13, v12, v10);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

void sub_10002793C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_10001AAC8(a3);
  sub_10001A3B0(v3);
  sub_10000BF94();
}

uint64_t sub_100027968(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001AAC8(&qword_10008E780);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000279A8()
{
  uint64_t v0;
  int v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
  v1 = *(unsigned __int8 *)(v0 + 192);
  if (v1 != 255)
    sub_100018DC0(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), v1 & 1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 208));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 224));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 240));
  return swift_deallocObject(v0, 249, 7);
}

uint64_t sub_100027A3C()
{
  uint64_t v0;

  return sub_100025430(v0 + 16);
}

uint64_t sub_100027A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SessionConfiguration.BackendHTTP(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027A98()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_100027AC4(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100027B00(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  v9 = sub_100027AC4(&v12);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v9, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return sub_100011D14(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_100027B78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001AAC8(&qword_10008E7F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100027BC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = a3(0);
  sub_10001A3B0(v3);
  sub_10000BF94();
}

uint64_t destroy for Storebag._StorebagRoot(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t initializeWithCopy for Storebag._StorebagRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for Storebag._StorebagRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v7);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t assignWithTake for Storebag._StorebagRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *type metadata accessor for Storebag._StorebagRoot()
{
  return &type metadata for Storebag._StorebagRoot;
}

void type metadata accessor for StorebagKeyInfoPlistProvider()
{
  sub_10000B0C0();
}

uint64_t sub_100027D7C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100027DC8 + 4 * byte_10006D1C7[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100027DFC + 4 * byte_10006D1C2[v4]))();
}

uint64_t sub_100027DFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100027E04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100027E0CLL);
  return result;
}

uint64_t sub_100027E18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100027E20);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100027E24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100027E2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for StorebagEnvironment()
{
  sub_10000B0C0();
}

ValueMetadata *type metadata accessor for StorebagKeyInfoPlistProvider._InfoPlistRoot()
{
  return &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot;
}

uint64_t sub_100027E60(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100027E80(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_100027EB0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100027ECC(uint64_t result, int a2)
{
  char v2;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  *(_BYTE *)(result + 8) = v2;
  return result;
}

void type metadata accessor for Storebag.Error()
{
  sub_10000B0C0();
}

uint64_t sub_100027EF8(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t sub_100027F28(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  v4 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v4;
  v5 = a2[4];
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *sub_100027F84(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t *sub_100028008(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  a1[2] = a2[2];
  swift_bridgeObjectRelease(a1[3]);
  v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_100028064(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000280A4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for Storebag()
{
  sub_10000B0C0();
}

uint64_t getEnumTagSinglePayload for BackendHTTP.POSTData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_100028180(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000281CC + 4 * byte_10006D1D1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100028200 + 4 * byte_10006D1CC[v4]))();
}

uint64_t sub_100028200(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100028208(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100028210);
  return result;
}

uint64_t sub_10002821C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100028224);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100028228(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100028230(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for StorebagExpedite()
{
  sub_10000B0C0();
}

void sub_100028248()
{
  sub_100028320(&qword_10008E800, &qword_10008E808);
}

unint64_t sub_100028278()
{
  unint64_t result;

  result = qword_10008E810;
  if (!qword_10008E810)
  {
    result = swift_getWitnessTable(&unk_10006D344, &unk_100086F10);
    atomic_store(result, (unint64_t *)&qword_10008E810);
  }
  return result;
}

unint64_t sub_1000282B8()
{
  unint64_t result;

  result = qword_10008E818;
  if (!qword_10008E818)
  {
    result = swift_getWitnessTable(&unk_10006D4EC, &unk_100086DF8);
    atomic_store(result, (unint64_t *)&qword_10008E818);
  }
  return result;
}

void sub_1000282F4()
{
  sub_100028320(&qword_10008E820, &qword_10008E828);
}

void sub_100028320(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_100028B88(0, a2);
    atomic_store(sub_10001C59C(v3), a1);
  }
  sub_10000BF94();
}

unint64_t sub_100028350()
{
  unint64_t result;

  result = qword_10008E830;
  if (!qword_10008E830)
  {
    result = swift_getWitnessTable(&unk_10006D464, &unk_100086CE8);
    atomic_store(result, (unint64_t *)&qword_10008E830);
  }
  return result;
}

unint64_t sub_10002838C()
{
  unint64_t result;

  result = qword_10008E840;
  if (!qword_10008E840)
  {
    result = swift_getWitnessTable(&unk_10006D710, &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008E840);
  }
  return result;
}

unint64_t sub_1000283C8()
{
  unint64_t result;

  result = qword_10008E848;
  if (!qword_10008E848)
  {
    result = swift_getWitnessTable(&unk_10006D6E8, &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting);
    atomic_store(result, (unint64_t *)&qword_10008E848);
  }
  return result;
}

unint64_t sub_100028404()
{
  unint64_t result;

  result = qword_10008E870;
  if (!qword_10008E870)
  {
    result = swift_getWitnessTable(&unk_10006F454, &type metadata for StorebagSharedValue);
    atomic_store(result, (unint64_t *)&qword_10008E870);
  }
  return result;
}

unint64_t sub_100028440()
{
  unint64_t result;

  result = qword_10008E898;
  if (!qword_10008E898)
  {
    result = swift_getWitnessTable(&unk_10006E0C8, &unk_100087B10);
    atomic_store(result, (unint64_t *)&qword_10008E898);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Storebag._StorebagRoot.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 6;
  if (a3 + 6 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFA)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000284D0 + 4 * byte_10006D1E0[v5]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100028504 + 4 * byte_10006D1DB[v5]))();
}

uint64_t sub_100028504(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002850C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100028514);
  return result;
}

uint64_t sub_100028520(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100028528);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10002852C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100028534(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100028540(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 4)
    return v1 - 3;
  else
    return 0;
}

_BYTE *sub_100028554(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 3;
  return result;
}

ValueMetadata *type metadata accessor for Storebag._StorebagRoot.CodingKeys()
{
  return &type metadata for Storebag._StorebagRoot.CodingKeys;
}

uint64_t sub_10002857C()
{
  return 0;
}

ValueMetadata *type metadata accessor for StorebagKeyInfoPlistProvider._InfoPlistRoot.CodingKeys()
{
  return &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot.CodingKeys;
}

uint64_t *initializeBufferWithCopyOfBuffer for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_100021264(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting(uint64_t a1)
{
  return sub_100010720(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *_s13rtcreportingd28StorebagKeyInfoPlistProviderV22_InfoPlistRTCReportingVwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_100021264(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_100010720(v5, v6);
  return a1;
}

uint64_t *assignWithTake for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100010720(v3, v4);
  return a1;
}

uint64_t _s13rtcreportingd28StorebagKeyInfoPlistProviderV22_InfoPlistRTCReportingVwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    {
      v2 = *(_DWORD *)a1 + 12;
    }
    else
    {
      v2 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t _s13rtcreportingd28StorebagKeyInfoPlistProviderV22_InfoPlistRTCReportingVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting()
{
  return &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting;
}

unint64_t sub_100028704()
{
  unint64_t result;

  result = qword_10008E8A0;
  if (!qword_10008E8A0)
  {
    result = swift_getWitnessTable(&unk_10006D620, &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008E8A0);
  }
  return result;
}

unint64_t sub_100028744()
{
  unint64_t result;

  result = qword_10008E8A8;
  if (!qword_10008E8A8)
  {
    result = swift_getWitnessTable(&unk_10006D648, &type metadata for Storebag._StorebagRoot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008E8A8);
  }
  return result;
}

unint64_t sub_100028784()
{
  unint64_t result;

  result = qword_10008E8B0;
  if (!qword_10008E8B0)
  {
    result = swift_getWitnessTable(&unk_10006D670, &type metadata for Storebag._StorebagRoot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008E8B0);
  }
  return result;
}

unint64_t sub_1000287C4()
{
  unint64_t result;

  result = qword_10008E8B8;
  if (!qword_10008E8B8)
  {
    result = swift_getWitnessTable(&unk_10006D558, &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008E8B8);
  }
  return result;
}

unint64_t sub_100028804()
{
  unint64_t result;

  result = qword_10008E8C0;
  if (!qword_10008E8C0)
  {
    result = swift_getWitnessTable(&unk_10006D580, &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008E8C0);
  }
  return result;
}

unint64_t sub_100028840()
{
  unint64_t result;

  result = qword_10008E8D0;
  if (!qword_10008E8D0)
  {
    result = swift_getWitnessTable(&unk_10006D850, &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008E8D0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BackendGroup.Error(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s13rtcreportingd28StorebagKeyInfoPlistProviderV14_InfoPlistRootV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10002890C + 4 * byte_10006D1E5[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10002892C + 4 * byte_10006D1EA[v4]))();
}

_BYTE *sub_10002890C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10002892C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100028934(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10002893C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100028944(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10002894C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting.CodingKeys()
{
  return &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting.CodingKeys;
}

unint64_t sub_10002896C()
{
  unint64_t result;

  result = qword_10008E8D8;
  if (!qword_10008E8D8)
  {
    result = swift_getWitnessTable(&unk_10006D828, &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008E8D8);
  }
  return result;
}

unint64_t sub_1000289AC()
{
  unint64_t result;

  result = qword_10008E8E0;
  if (!qword_10008E8E0)
  {
    result = swift_getWitnessTable(&unk_10006D760, &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008E8E0);
  }
  return result;
}

unint64_t sub_1000289EC()
{
  unint64_t result;

  result = qword_10008E8E8;
  if (!qword_10008E8E8)
  {
    result = swift_getWitnessTable(&unk_10006D788, &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008E8E8);
  }
  return result;
}

uint64_t sub_100028AAC()
{
  uint64_t *v0;

  return sub_10000558C(v0[53], v0[54], v0[61], 0);
}

void sub_100028AC0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10002793C(a1, a2, v2);
}

uint64_t sub_100028AC8()
{
  uint64_t v0;

  return v0 + 720;
}

void sub_100028AD8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10002793C(a1, a2, v2);
}

uint64_t sub_100028AE0()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[41] + 8))(v0[11], v0[42]);
}

uint64_t sub_100028AF0()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100014F94(*(_QWORD *)(v0 + 496), v1, (uint64_t *)(v0 + 736));
}

uint64_t sub_100028B00()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 352));
}

unint64_t sub_100028B08()
{
  return 0xD00000000000002FLL;
}

uint64_t sub_100028B1C()
{
  return sub_100012C5C(22);
}

uint64_t sub_100028B24()
{
  uint64_t v0;

  return sub_100018DE4(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352), *(_DWORD *)(v0 + 464));
}

uint64_t sub_100028B30()
{
  uint64_t v0;
  unsigned __int8 v1;

  return sub_100018DE4(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352), v1);
}

uint64_t sub_100028B3C()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100028B44()
{
  return type metadata accessor for SHA256(0);
}

_QWORD *sub_100028B4C(_QWORD *a1)
{
  uint64_t v1;

  return sub_10001D44C(a1, v1);
}

uint64_t sub_100028B60(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 472) = a1;
  return static os_log_type_t.debug.getter();
}

void sub_100028B68()
{
  uint64_t v0;

}

void sub_100028B70()
{
  sub_100012D78();
}

void sub_100028B7C()
{
  uint64_t v0;
  uint64_t v1;

  sub_100026C48(v0, v1);
}

uint64_t sub_100028B88(uint64_t a1, uint64_t *a2)
{
  return sub_100027598(a2);
}

uint64_t sub_100028B94()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;

  sub_100018DCC(v1, v0, v2);
  return v3;
}

void sub_100028BB8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for CocoaError(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = sub_10001C438();
  v9 = type metadata accessor for Logger(v8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10001B9D0();
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v3, a1, v6);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v20 = v9;
    v14 = (uint8_t *)sub_10001D190();
    v19 = a2;
    v15 = sub_10001D384();
    v22 = v15;
    *(_DWORD *)v14 = 136446210;
    sub_100023D98((unint64_t *)&unk_10008EA00, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError, (uint64_t)&protocol conformance descriptor for CocoaError);
    v17 = Error.localizedDescription.getter(v6, v16);
    v21 = sub_10001F4EC(v17, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 4, &v14[v2]);
    swift_bridgeObjectRelease(v3);
    sub_10001CEAC();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v19, v14, 0xCu);
    swift_arrayDestroy(v15, 1);
    sub_1000120F8(v15);
    sub_1000120F8((uint64_t)v14);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v20);
  }
  else
  {
    sub_10001CEAC();

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v9);
  }
  sub_1000120D4();
}

void sub_100028D74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _BYTE v16[8];
  uint64_t v17;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10001B9D0();
  swift_errorRetain(a1);
  v5 = swift_errorRetain(a1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v13 = v3;
    v8 = (uint8_t *)sub_10001D190();
    v9 = sub_10001D384();
    v17 = v9;
    *(_DWORD *)v8 = 136446210;
    swift_getErrorValue(a1, v16, v15);
    v10 = v15[0];
    v11 = Error.localizedDescription.getter(v15[1], v15[2]);
    v14 = sub_10001F4EC(v11, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15, v8 + 4, &v8[v1]);
    swift_bridgeObjectRelease(v10);
    sub_10000D2B4();
    sub_10000D2B4();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "unable to access transparency log (UNKNOWN): %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1);
    sub_1000120F8(v9);
    sub_1000120F8((uint64_t)v8);

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v13);
  }
  else
  {
    sub_10000D2B4();
    sub_10000D2B4();

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  }
  sub_1000120D4();
}

unint64_t sub_100028EF4()
{
  return sub_10001D244();
}

void sub_100028F00()
{
  sub_1000110AC();
}

void sub_100028F20()
{
  sub_10002C07C();
}

unint64_t sub_100028F3C()
{
  sub_100028EF4();
  return 0xD000000000000018;
}

uint64_t sub_100028F58()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026B1C(v0, qword_100097290);
  sub_100015718(v0, (uint64_t)qword_100097290);
  return Logger.init(subsystem:category:)(0xD000000000000017, 0x8000000100071220, 0x726170736E617274, 0xEC00000079636E65);
}

id sub_100028FD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  NSString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t inited;
  NSString *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void *v40;
  char *v41;
  id v42;
  NSURL *v43;
  void *v44;
  void *v45;
  unsigned int v46;
  id v47;
  id result;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  char v65[40];

  v2 = sub_10001AAC8(&qword_10008EA70);
  __chkstk_darwin(v2);
  v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v59 - v10;
  v12 = NSHomeDirectory();
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  URL.init(fileURLWithPath:isDirectory:)(v13, v15, 1);
  v16 = v15;
  v17 = a1;
  swift_bridgeObjectRelease(v16);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000019, 0x8000000100071510, 1);
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  v62 = v5;
  v60 = v18;
  v18((uint64_t)v11, v5);
  v19 = sub_10001AAC8(&qword_10008EA78);
  inited = swift_initStackObject(v19, v65);
  *(_OWORD *)(inited + 16) = xmmword_10006D0C0;
  *(_QWORD *)(inited + 32) = NSURLIsDirectoryKey;
  v21 = NSURLIsDirectoryKey;
  sub_100005900(inited);
  v23 = v22;
  v24 = v61;
  URL.resourceValues(forKeys:)();
  if (v24)
  {
    swift_errorRelease(v24);
    swift_bridgeObjectRelease(v23);
    v25 = type metadata accessor for URLResourceValues(0);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v4, 1, 1, v25);
  }
  else
  {
    swift_bridgeObjectRelease(v23);
    v26 = type metadata accessor for URLResourceValues(0);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v4, 0, 1, v26);
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v4, 1, v26) != 1)
    {
      v58 = URLResourceValues.isDirectory.getter();
      result = (id)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v4, v26);
      v27 = v62;
      if ((v58 & 1) != 0)
        return result;
      goto LABEL_5;
    }
  }
  sub_10002DAA8((uint64_t)v4, &qword_10008EA70);
  v27 = v62;
LABEL_5:
  if (qword_10008DFD8 != -1)
    swift_once(&qword_10008DFD8, sub_100028F58);
  v28 = type metadata accessor for Logger(0);
  sub_100015718(v28, (uint64_t)qword_100097290);
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v27);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = (void *)swift_slowAlloc(32, -1);
    v61 = a1;
    v34 = v33;
    v64 = v33;
    *(_DWORD *)v32 = 136446210;
    v35 = URL.path.getter();
    v37 = v36;
    v63 = sub_100014F94(v35, v36, (uint64_t *)&v64);
    v27 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v32 + 4, v32 + 12);
    swift_bridgeObjectRelease(v37);
    v38 = v9;
    v39 = v60;
    v60((uint64_t)v38, v27);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "creating log directory at %{public}s", v32, 0xCu);
    swift_arrayDestroy(v34, 1);
    v40 = v34;
    v17 = v61;
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    v41 = v9;
    v39 = v60;
    v60((uint64_t)v41, v27);
  }

  v42 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v43);
  v45 = v44;
  v64 = 0;
  v46 = objc_msgSend(v42, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v44, 1, 0, &v64);

  v47 = v64;
  if (v46)
    return v64;
  v49 = v64;
  _convertNSErrorToError(_:)(v47);

  swift_willThrow(v50, v51, v52, v53, v54, v55, v56, v57);
  return (id)v39(v17, v27);
}

void sub_100029478(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  void *v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  char *v37;
  uint64_t v38;
  NSObject *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t (*v47)(char *);
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  void *clients;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  id v79;
  char **p_type;
  uint64_t v81;
  void (*v82)(char *, NSObject *, uint64_t);
  char *v83;
  id v84;
  NSURL *v85;
  void *v86;
  void *v87;
  unsigned int v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  os_log_type_t v103;
  _BOOL4 v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t inited;
  NSString *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  double v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  NSObject *v139;
  os_log_type_t v140;
  _QWORD *v141;
  uint8_t *v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint8_t *v147;
  id v148;
  NSURL *v149;
  void *v150;
  void *v151;
  char *v152;
  unsigned int v153;
  _QWORD *v154;
  _QWORD *v155;
  char *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  NSObject *v168;
  os_log_type_t v169;
  uint8_t *v170;
  NSObject *v171;
  _QWORD *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  id v186;
  void *v187;
  uint64_t v188;
  char *v189;
  __n128 v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  NSObject *v194;
  uint64_t v195;
  char *v196;
  void (*v197)(char *, uint64_t);
  uint64_t v198;
  char *v199;
  uint64_t v200;
  _QWORD v201[3];
  char v202[8];
  uint64_t v203;
  uint64_t v204;
  NSURL v205;
  _QWORD *v206;

  v184 = a1;
  v1 = sub_10001AAC8(&qword_10008EA80);
  __chkstk_darwin(v1);
  v180 = (char *)&v176 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = type metadata accessor for URLResourceValues(0);
  v193 = *(_QWORD *)(v195 - 8);
  __chkstk_darwin(v195);
  v182 = (char *)&v176 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = type metadata accessor for Date(0);
  v178 = *(_QWORD *)(v181 - 8);
  v4 = __chkstk_darwin(v181);
  v177 = (char *)&v176 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v179 = (char *)&v176 - v6;
  v7 = sub_10001AAC8(&qword_10008E780);
  v8 = __chkstk_darwin(v7);
  v183 = (uint64_t)&v176 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v185 = (uint64_t)&v176 - v11;
  v12 = __chkstk_darwin(v10);
  v194 = ((char *)&v176 - v13);
  __chkstk_darwin(v12);
  v15 = (char *)&v176 - v14;
  v192 = type metadata accessor for URL(0);
  v200 = *(_QWORD *)(v192 - 8);
  v16 = __chkstk_darwin(v192);
  v199 = (char *)&v176 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v176 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v176 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v176 - v25;
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v176 - v28;
  __chkstk_darwin(v27);
  v31 = (char *)&v176 - v30;
  v32 = (void *)objc_opt_self(NSFileManager);
  v33 = objc_msgSend(v32, "defaultManager");
  v34 = v198;
  sub_100028FD4((uint64_t)v31);
  v198 = v34;
  if (v34)
  {

    return;
  }
  v191 = v29;
  v190.n128_u64[0] = (unint64_t)v26;
  v196 = v23;
  v186 = v32;
  v176 = v20;
  URL._bridgeToObjectiveC()(&v205);
  v36 = v35;
  v37 = (char *)v200;
  v38 = v192;
  v197 = *(void (**)(char *, uint64_t))(v200 + 8);
  v197(v31, v192);
  v205._clients = 0;
  v39 = sub_10002D938((uint64_t)v36, (uint64_t)_swiftEmptyArrayStorage, 0, (uint64_t)&v205._clients, v33);

  v40 = v205._clients;
  if (!v39)
  {
    v68 = v40;
    _convertNSErrorToError(_:)(v40);

    swift_willThrow(v69, v70, v71, v72, v73, v74, v75, v76);
    return;
  }
  v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v39, v38);

  v206 = _swiftEmptyArrayStorage;
  v42 = v41;
  v43 = v38;
  v44 = v199;
  v189 = *(char **)(v41 + 16);
  if (v189)
  {
    v45 = 0;
    v187 = (void *)0x80000001000714F0;
    v188 = v41;
    while ((unint64_t)v45 < *(_QWORD *)(v42 + 16))
    {
      v39 = ((v37[80] + 32) & ~(unint64_t)v37[80]);
      v46 = *((_QWORD *)v37 + 9);
      (*((void (**)(char *, char *, uint64_t))v37 + 2))(v15, (char *)v39 + v42 + v46 * (_QWORD)v45, v43);
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v15, 0, 1, v43);
      if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v15, 1, v43) == 1)
        goto LABEL_17;
      v47 = (uint64_t (*)(char *))*((_QWORD *)v37 + 4);
      v48 = v15;
      v49 = v43;
      v50 = v191;
      v51 = v48;
      v52 = v47(v191);
      v53 = URL.lastPathComponent.getter(v52);
      v55 = v54;
      v56 = sub_1000195D4(0xD000000000000018, v187, v53, v54);
      swift_bridgeObjectRelease(v55);
      if ((v56 & 1) != 0)
      {
        ((void (*)(unint64_t, char *, uint64_t))v47)(v190.n128_u64[0], v50, v49);
        v57 = v206;
        if ((swift_isUniquelyReferenced_nonNull_native(v206) & 1) == 0)
        {
          sub_10005EBFC(0, v57[2] + 1, 1);
          v57 = v206;
        }
        v15 = v51;
        v59 = v57[2];
        v58 = v57[3];
        if (v59 >= v58 >> 1)
        {
          sub_10005EBFC(v58 > 1, v59 + 1, 1);
          v57 = v206;
        }
        v57[2] = v59 + 1;
        v60 = (char *)v39 + (_QWORD)v57 + v59 * v46;
        v43 = v192;
        ((void (*)(char *, unint64_t, uint64_t))v47)(v60, v190.n128_u64[0], v192);
        v206 = v57;
      }
      else
      {
        v197(v50, v49);
        v43 = v49;
        v15 = v51;
      }
      ++v45;
      v44 = v199;
      v37 = (char *)v200;
      v42 = v188;
      if (v189 == v45)
        goto LABEL_16;
    }
    __break(1u);
    goto LABEL_57;
  }
LABEL_16:
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)v15, 1, 1, v43);
LABEL_17:
  swift_bridgeObjectRelease(v42);
  sub_10002DAA8((uint64_t)v15, &qword_10008E780);
  v205._clients = v206;
  v61 = v198;
  sub_10002A454((uint64_t *)&v205._clients);
  v198 = v61;
  clients = v205._clients;
  v188 = sub_10002A4D8(1, (uint64_t)v205._clients);
  v191 = v65;
  if (v63 != v64 >> 1)
  {
    v77 = v63;
    v37 = (char *)(v64 >> 1);
    v78 = swift_bridgeObjectRetain(clients);
    v78.n128_u64[0] = 136446210;
    v190 = v78;
    v189 = (char *)&type metadata for Any + 8;
    v79 = v186;
    p_type = &stru_10008CFF0.type;
    v66 = v195;
    while (v77 < (uint64_t)v37)
    {
      v81 = v200;
      v39 = v194;
      (*(void (**)(NSObject *, char *, uint64_t))(v200 + 16))(v194, &v191[*(_QWORD *)(v200 + 72) * v77], v43);
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v39, 0, 1, v43);
      if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v39, 1, v43) == 1)
      {
        v67 = v193;
        goto LABEL_35;
      }
      v82 = *(void (**)(char *, NSObject *, uint64_t))(v81 + 32);
      v83 = v196;
      v82(v196, v39, v43);
      v84 = objc_msgSend(v79, p_type[436]);
      URL._bridgeToObjectiveC()(v85);
      v87 = v86;
      v206 = 0;
      v88 = objc_msgSend(v84, "removeItemAtURL:error:", v86, &v206);

      v89 = v206;
      if (v88)
      {
        v90 = v206;
        v197(v83, v43);
        v79 = v186;
        p_type = (char **)(&stru_10008CFF0 + 16);
        v66 = v195;
        v67 = v193;
      }
      else
      {
        v91 = v206;
        v92 = _convertNSErrorToError(_:)(v89);

        swift_willThrow(v93, v94, v95, v96, v97, v98, v99, v100);
        if (qword_10008DFD8 != -1)
          swift_once(&qword_10008DFD8, sub_100028F58);
        v198 = 0;
        v101 = type metadata accessor for Logger(0);
        sub_100015718(v101, (uint64_t)qword_100097290);
        swift_errorRetain(v92);
        v102 = swift_errorRetain(v92);
        v39 = Logger.logObject.getter(v102);
        v103 = static os_log_type_t.error.getter();
        v104 = os_log_type_enabled(v39, v103);
        v67 = v193;
        if (v104)
        {
          v105 = swift_slowAlloc(12, -1);
          v106 = (_QWORD *)swift_slowAlloc(32, -1);
          v206 = v106;
          *(_DWORD *)v105 = v190.n128_u32[0];
          swift_getErrorValue(v92, v202, v201);
          v107 = Error.localizedDescription.getter(v201[1], v201[2]);
          v109 = v108;
          *(_QWORD *)(v105 + 4) = sub_100014F94(v107, v108, (uint64_t *)&v206);
          swift_bridgeObjectRelease(v109);
          swift_errorRelease(v92);
          swift_errorRelease(v92);
          _os_log_impl((void *)&_mh_execute_header, v39, v103, "failed to erase old log: %{public}s", (uint8_t *)v105, 0xCu);
          swift_arrayDestroy(v106, 1);
          v110 = v106;
          v44 = v199;
          swift_slowDealloc(v110, -1, -1);
          v111 = v105;
          v43 = v192;
          swift_slowDealloc(v111, -1, -1);

        }
        else
        {

          swift_errorRelease(v92);
          swift_errorRelease(v92);
        }
        swift_errorRelease(v92);
        v197(v196, v43);
        v79 = v186;
        p_type = (char **)(&stru_10008CFF0 + 16);
        v66 = v195;
      }
      if (v37 == (char *)++v77)
        goto LABEL_19;
    }
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  swift_bridgeObjectRetain(clients);
  v66 = v195;
  v67 = v193;
LABEL_19:
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)v194, 1, 1, v43);
LABEL_35:
  swift_unknownObjectRelease(v188);
  v112 = v205._clients;
  v113 = v185;
  sub_100034E0C((uint64_t)v205._clients, v185);
  swift_bridgeObjectRelease(v112);
  v114 = v183;
  sub_10002DA18(v113, v183);
  v115 = _s10RTCUtility9XPCObjectOwet_0(v114, 1, v43);
  v116 = v184;
  if (v115 == 1)
  {
    v117 = &qword_10008E780;
    v118 = v114;
LABEL_37:
    sub_10002DAA8(v118, v117);
LABEL_38:
    sub_10002DA60(v185, v116);
    return;
  }
  v119 = v176;
  (*(void (**)(char *, uint64_t, uint64_t))(v200 + 32))(v176, v114, v43);
  v120 = sub_10001AAC8(&qword_10008EA78);
  inited = swift_initStackObject(v120, &v205._reserved);
  *(_OWORD *)(inited + 16) = xmmword_10006D0C0;
  *(_QWORD *)(inited + 32) = NSURLCreationDateKey;
  v122 = NSURLCreationDateKey;
  sub_100005900(inited);
  v124 = v123;
  v125 = v182;
  v126 = v198;
  URL.resourceValues(forKeys:)();
  v198 = v126;
  if (v126)
  {
    swift_bridgeObjectRelease(v124);
    v197(v119, v43);
    sub_10002DAA8(v185, &qword_10008E780);
    return;
  }
  v127 = swift_bridgeObjectRelease(v124);
  v128 = (uint64_t)v180;
  URLResourceValues.creationDate.getter(v127);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v125, v66);
  v129 = v181;
  if (_s10RTCUtility9XPCObjectOwet_0(v128, 1, v181) == 1)
  {
    v197(v176, v43);
    v117 = &qword_10008EA80;
    v118 = v128;
    goto LABEL_37;
  }
  v130 = v116;
  v131 = v178;
  v132 = v179;
  v133 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v178 + 32))(v179, v128, v129);
  v134 = v177;
  static Date.now.getter(v133);
  v135 = Date.distance(to:)(v134);
  v39 = *(NSObject **)(v131 + 8);
  ((void (*)(char *, uint64_t))v39)(v134, v129);
  v37 = v176;
  if (v135 <= 604800.0)
  {
    ((void (*)(char *, uint64_t))v39)(v132, v129);
    v197(v37, v43);
    v116 = v130;
    goto LABEL_38;
  }
  if (qword_10008DFD8 != -1)
LABEL_58:
    swift_once(&qword_10008DFD8, sub_100028F58);
  v136 = type metadata accessor for Logger(0);
  v137 = sub_100015718(v136, (uint64_t)qword_100097290);
  v138 = (*(uint64_t (**)(char *, char *, uint64_t))(v200 + 16))(v44, v37, v43);
  v200 = v137;
  v139 = Logger.logObject.getter(v138);
  v140 = static os_log_type_t.info.getter();
  v141 = &unk_10006D000;
  if (os_log_type_enabled(v139, v140))
  {
    v142 = (uint8_t *)swift_slowAlloc(12, -1);
    v143 = (_QWORD *)swift_slowAlloc(32, -1);
    v206 = v143;
    *(_DWORD *)v142 = 136446210;
    v144 = URL.lastPathComponent.getter(v143);
    v146 = v145;
    v203 = sub_100014F94(v144, v145, (uint64_t *)&v206);
    v43 = v192;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, &v204, v142 + 4, v142 + 12);
    swift_bridgeObjectRelease(v146);
    v141 = (_QWORD *)&unk_10006D000;
    v197(v44, v43);
    _os_log_impl((void *)&_mh_execute_header, v139, v140, "aging out log file: %{public}s", v142, 0xCu);
    swift_arrayDestroy(v143, 1);
    swift_slowDealloc(v143, -1, -1);
    v147 = v142;
    v37 = v176;
    swift_slowDealloc(v147, -1, -1);
  }
  else
  {
    v197(v44, v43);
  }

  v148 = objc_msgSend(v186, "defaultManager");
  URL._bridgeToObjectiveC()(v149);
  v151 = v150;
  v206 = 0;
  v152 = v37;
  v153 = objc_msgSend(v148, "removeItemAtURL:error:", v150, &v206);

  v154 = v206;
  if (v153)
  {
    v155 = v206;
    ((void (*)(char *, uint64_t))v39)(v179, v181);
    v156 = v152;
  }
  else
  {
    v157 = v206;
    v158 = _convertNSErrorToError(_:)(v154);

    swift_willThrow(v159, v160, v161, v162, v163, v164, v165, v166);
    v198 = 0;
    swift_errorRetain(v158);
    v167 = swift_errorRetain(v158);
    v168 = Logger.logObject.getter(v167);
    v169 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v168, v169))
    {
      v170 = (uint8_t *)swift_slowAlloc(12, -1);
      v171 = v39;
      v172 = (_QWORD *)swift_slowAlloc(32, -1);
      v206 = v172;
      *(_DWORD *)v170 = v141[277];
      swift_getErrorValue(v158, &v205._baseURL, &v204);
      v173 = Error.localizedDescription.getter(v205.super.isa, v205._urlString);
      v175 = v174;
      v203 = sub_100014F94(v173, v174, (uint64_t *)&v206);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, &v204, v170 + 4, v170 + 12);
      swift_bridgeObjectRelease(v175);
      swift_errorRelease(v158);
      swift_errorRelease(v158);
      _os_log_impl((void *)&_mh_execute_header, v168, v169, "failed to erase old log: %{public}s", v170, 0xCu);
      swift_arrayDestroy(v172, 1);
      swift_slowDealloc(v172, -1, -1);
      swift_slowDealloc(v170, -1, -1);

      swift_errorRelease(v158);
      ((void (*)(char *, uint64_t))v171)(v179, v181);
    }
    else
    {

      swift_errorRelease(v158);
      swift_errorRelease(v158);
      swift_errorRelease(v158);
      ((void (*)(char *, uint64_t))v39)(v179, v181);
    }
    v156 = v176;
    v43 = v192;
  }
  v197(v156, v43);
  sub_10002DAA8(v185, &qword_10008E780);
  _s10RTCUtility9XPCObjectOwst_0(v184, 1, 1, v43);
}

void sub_10002A454(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = sub_10003A0E0();
  v4 = *(_QWORD *)(v3 + 16);
  v5[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_10002C4D8(v5);
  *a1 = v3;
}

uint64_t sub_10002A4D8(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = sub_10002DAE0(0, (v3 - result) & ~((uint64_t)(v3 - result) >> 63), v3);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v3 >= v5)
  {
    type metadata accessor for URL(0);
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

void sub_10002A568(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  Class isa;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v24 = a1;
  v21 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  sub_10002D9C8(0xD000000000000013, 0x80000001000714D0, v9);
  static Date.now.getter(v10);
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = objc_msgSend(v9, "stringFromDate:", isa);

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  sub_100028FD4((uint64_t)v4);
  if (v1)
  {
    swift_bridgeObjectRelease(v15);
  }
  else
  {
    v22 = 0;
    v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease(v23);
    v22 = 0xD000000000000018;
    v23 = 0x80000001000714F0;
    v16._countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(v15);
    v17._countAndFlagsBits = 1954051118;
    v17._object = (void *)0xE400000000000000;
    String.append(_:)(v17);
    v18 = v23;
    v19 = v24;
    URL.appendingPathComponent(_:)(v22, v23);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v21);
    Data.write(to:options:)(v19, 0, 0, 0xC000000000000000);
  }

}

uint64_t sub_10002A7A4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  swift_defaultActor_initialize(v0);
  *(_BYTE *)(v0 + 112) = 2;
  *(_QWORD *)(v0 + 128) = 0;
  *(_QWORD *)(v0 + 120) = objc_msgSend((id)objc_opt_self(NSFileHandle), "fileHandleWithNullDevice");
  return swift_task_switch(sub_10002A814, v0, 0);
}

uint64_t sub_10002A814()
{
  uint64_t v0;
  uint64_t v1;

  sub_100007850();
  if (!v0)
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 16));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_10002A874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  type metadata accessor for CocoaError.Code(0);
  sub_1000111AC();
  __chkstk_darwin(v2);
  sub_10001065C();
  v62 = v3;
  __chkstk_darwin(v4);
  v6 = (char *)&v53 - v5;
  v7 = type metadata accessor for CocoaError(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10001065C();
  v60 = v9;
  v11 = __chkstk_darwin(v10);
  v61 = (char *)&v53 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v53 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v53 - v16;
  sub_10002AC18();
  if (v0)
  {
    v65 = v0;
    swift_errorRetain(v0);
    v18 = sub_10001AAC8(&qword_10008E7E8);
    if (swift_dynamicCast(v17, &v65, v18, v7, 0))
    {
      v58 = v8;
      v19 = sub_100010504();
      v55 = v20;
      v20(v19);
      sub_100023D98(&qword_10008E9F0, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError, (uint64_t)&protocol conformance descriptor for CocoaError);
      v59 = v7;
      v57 = v21;
      v22 = _BridgedStoredNSError.code.getter(v7, v21);
      v23 = v62;
      static CocoaError.fileWriteNoPermission.getter(v22);
      sub_100023D98(&qword_10008E9F8, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code, (uint64_t)&protocol conformance descriptor for CocoaError.Code);
      v25 = v24;
      sub_10001A188(v1);
      v56 = v25;
      sub_10001A188(v1);
      v26 = v63;
      v27 = v64;
      sub_10001CC44(v23);
      sub_10001CC44((uint64_t)v6);
      if (v27 == v26)
      {
        v28 = sub_10001BB58();
        sub_10001BC34(v28, "unable to access transparency log (PERM): %{public}s");
        sub_10001AFA0();
        sub_100018058();
        v29 = v59;
        v30 = *(void (**)(char *, uint64_t))(v58 + 8);
        v30(v15, v59);
        v30(v17, v29);
LABEL_9:
        swift_errorRelease(v65);
        goto LABEL_12;
      }
      v54 = *(void (**)(char *, uint64_t))(v58 + 8);
      v54(v15, v59);
      v31 = v61;
      v32 = sub_100010504();
      v55(v32);
      v33 = sub_10001B250();
      static CocoaError.fileWriteOutOfSpace.getter(v33);
      sub_10001A188(v1);
      sub_10001A188(v1);
      v35 = v63;
      v34 = v64;
      sub_10001CC44(v23);
      sub_10001CC44((uint64_t)v6);
      if (v34 == v35)
      {
        v36 = sub_10001BB58();
        sub_10001BC34(v36, "unable to write transparency log (OOS): %{public}s");
        sub_10001AFA0();
        sub_100018058();
        v37 = v59;
        v38 = v54;
        v54(v31, v59);
        v38(v17, v37);
        goto LABEL_9;
      }
      v54(v31, v59);
      v39 = sub_100010504();
      v40(v39);
      v41 = sub_10001B250();
      static CocoaError.fileWriteUnknown.getter(v41);
      sub_10001A188(v1);
      sub_10001A188(v1);
      v43 = v63;
      v42 = v64;
      sub_10001CC44(v23);
      sub_10001CC44((uint64_t)v6);
      if (v42 == v43)
      {
        v44 = sub_10001BB58();
        sub_10001BC34(v44, "unable to access storebag cache (WRITE-UNKNOWN): %{public}s");
        sub_10001AFA0();
        sub_100018058();
        sub_100019308();
        goto LABEL_9;
      }
      sub_100019308();
    }
    swift_errorRelease(v65);
    sub_100028D74(v0);
    swift_willThrow(v45, v46, v47, v48, v49, v50, v51, v52);
  }
LABEL_12:
  sub_10000A840();
}

void sub_10002AC18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  id v46;
  void *v47;
  id v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t ObjectType;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t aBlock[5];
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v110 = *(_QWORD *)(v1 - 8);
  v111 = v1;
  __chkstk_darwin(v1);
  v109 = (char *)&v100 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v107 = *(_QWORD *)(v3 - 8);
  v108 = v3;
  __chkstk_darwin(v3);
  v106 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_source.FileSystemEvent(0);
  v104 = *(_QWORD *)(v5 - 8);
  v105 = v5;
  __chkstk_darwin(v5);
  v103 = (char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001AAC8(&qword_10008E780);
  __chkstk_darwin(v7);
  v9 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v114 - 8);
  v11 = __chkstk_darwin(v114);
  v101 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v100 - v14;
  v16 = __chkstk_darwin(v13);
  v113 = (uint64_t)&v100 - v17;
  v18 = __chkstk_darwin(v16);
  v102 = (char *)&v100 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v100 - v21;
  __chkstk_darwin(v20);
  v112 = (char *)&v100 - v23;
  v116 = v0;
  v24 = *(void **)(v0 + 120);
  v25 = (void *)objc_opt_self(NSFileHandle);
  v26 = v24;
  v27 = objc_msgSend(v25, "fileHandleWithNullDevice");
  sub_10002C358(0, (unint64_t *)&qword_10008EA10, NSFileHandle_ptr);
  v28 = static NSObject.== infix(_:_:)(v26, v27);

  if ((v28 & 1) == 0)
  {
    if (qword_10008DFD8 != -1)
      swift_once(&qword_10008DFD8, sub_100028F58);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_100015718(v29, (uint64_t)qword_100097290);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "witnessed log vanish - refeshing", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

  }
  v34 = v116;
  v35 = *(_QWORD *)(v116 + 128);
  if (v35)
  {
    swift_getObjectType(*(_QWORD *)(v116 + 128));
    swift_unknownObjectRetain(v35);
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease(v35);
    v36 = *(_QWORD *)(v34 + 128);
    *(_QWORD *)(v34 + 128) = 0;
    swift_unknownObjectRelease(v36);
  }
  v37 = v115;
  sub_100029478((uint64_t)v9);
  if (!v37)
  {
    v115 = v10;
    v38 = v114;
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v9, 1, v114) == 1)
    {
      sub_10002DAA8((uint64_t)v9, &qword_10008E780);
      sub_10002A568(v113);
      v39 = *(void (**)(char *, uint64_t, uint64_t))(v115 + 16);
      v41 = v113;
      v40 = v114;
      v39(v15, v113, v114);
      v42 = sub_100030C9C((uint64_t)v15);
      v50 = *(void **)(v34 + 120);
      *(_QWORD *)(v34 + 120) = v42;

      if (qword_10008DFD8 != -1)
        swift_once(&qword_10008DFD8, sub_100028F58);
      v51 = type metadata accessor for Logger(0);
      sub_100015718(v51, (uint64_t)qword_100097290);
      v52 = v101;
      v53 = ((uint64_t (*)(char *, uint64_t, uint64_t))v39)(v101, v41, v40);
      v54 = Logger.logObject.getter(v53);
      v55 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v54, v55))
      {
        v56 = (uint8_t *)swift_slowAlloc(12, -1);
        v112 = (char *)swift_slowAlloc(32, -1);
        aBlock[0] = (uint64_t)v112;
        *(_DWORD *)v56 = 136446210;
        v57 = URL.path.getter();
        v59 = v58;
        v119 = sub_100014F94(v57, v58, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v56 + 4, v56 + 12);
        swift_bridgeObjectRelease(v59);
        v60 = *(void (**)(char *, uint64_t))(v115 + 8);
        v60(v52, v40);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "created new log file at %{public}s", v56, 0xCu);
        v61 = v112;
        swift_arrayDestroy(v112, 1);
        swift_slowDealloc(v61, -1, -1);
        v62 = v56;
        v34 = v116;
        swift_slowDealloc(v62, -1, -1);

        v63 = v113;
      }
      else
      {

        v60 = *(void (**)(char *, uint64_t))(v115 + 8);
        v60(v52, v40);
        v63 = v41;
      }
      v75 = v40;
    }
    else
    {
      v43 = v115;
      v44 = v112;
      (*(void (**)(void))(v115 + 32))();
      v45 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
      v45(v22, v44, v38);
      v46 = sub_100030C9C((uint64_t)v22);
      v47 = *(void **)(v34 + 120);
      *(_QWORD *)(v34 + 120) = v46;

      v48 = *(id *)(v34 + 120);
      NSFileHandle.seekToEnd()();
      if (v49)
      {
        (*(void (**)(char *, uint64_t))(v115 + 8))(v44, v38);

        return;
      }

      if (qword_10008DFD8 != -1)
        swift_once(&qword_10008DFD8, sub_100028F58);
      v64 = type metadata accessor for Logger(0);
      sub_100015718(v64, (uint64_t)qword_100097290);
      v65 = v102;
      v66 = ((uint64_t (*)(char *, char *, uint64_t))v45)(v102, v44, v38);
      v67 = (uint64_t)v44;
      v68 = Logger.logObject.getter(v66);
      v69 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v68, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc(12, -1);
        v71 = swift_slowAlloc(32, -1);
        aBlock[0] = v71;
        *(_DWORD *)v70 = 136446210;
        v72 = URL.path.getter();
        v74 = v73;
        v119 = sub_100014F94(v72, v73, aBlock);
        v34 = v116;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v70 + 4, v70 + 12);
        swift_bridgeObjectRelease(v74);
        v60 = *(void (**)(char *, uint64_t))(v115 + 8);
        v60(v102, v38);
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "opened log file at %{public}s", v70, 0xCu);
        swift_arrayDestroy(v71, 1);
        swift_slowDealloc(v71, -1, -1);
        swift_slowDealloc(v70, -1, -1);

        v63 = (uint64_t)v112;
      }
      else
      {

        v60 = *(void (**)(char *, uint64_t))(v115 + 8);
        v60(v65, v38);
        v63 = v67;
      }
      v75 = v38;
    }
    v60((char *)v63, v75);
    v77 = v104;
    v76 = v105;
    sub_10002C358(0, &qword_10008EA18, OS_dispatch_source_ptr);
    v78 = objc_msgSend(*(id *)(v34 + 120), "fileDescriptor");
    v79 = sub_10001AAC8(&qword_10008EA20);
    v80 = swift_allocObject(v79, ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))+ 2 * *(_QWORD *)(v77 + 72), *(unsigned __int8 *)(v77 + 80) | 7);
    *(_OWORD *)(v80 + 16) = xmmword_10006D0D0;
    v81 = static OS_dispatch_source.FileSystemEvent.rename.getter();
    static OS_dispatch_source.FileSystemEvent.delete.getter(v81);
    aBlock[0] = v80;
    sub_100023D98(&qword_10008EA28, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.FileSystemEvent, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.FileSystemEvent);
    v83 = v82;
    v84 = sub_10001AAC8(&qword_10008EA30);
    sub_10002C3BC(&qword_10008EA38, &qword_10008EA30);
    v85 = v103;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v84, v86, v76, v83);
    v87 = v78;
    v88 = v116;
    v89 = static OS_dispatch_source.makeFileSystemObjectSource(fileDescriptor:eventMask:queue:)(v87, v85, 0);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v85, v76);
    v90 = *(_QWORD *)(v88 + 128);
    *(_QWORD *)(v88 + 128) = v89;
    swift_unknownObjectRelease(v90);
    v91 = *(_QWORD *)(v88 + 128);
    if (v91)
    {
      ObjectType = swift_getObjectType(*(_QWORD *)(v88 + 128));
      v93 = swift_allocObject(&unk_1000872A8, 24, 7);
      swift_weakInit(v93 + 16, v88);
      aBlock[4] = (uint64_t)sub_10002C3B4;
      v118 = v93;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000082B0;
      aBlock[3] = (uint64_t)&unk_1000872C0;
      v94 = v88;
      v95 = _Block_copy(aBlock);
      swift_retain(v93);
      v96 = swift_unknownObjectRetain(v91);
      v97 = v106;
      static DispatchQoS.unspecified.getter(v96);
      v98 = v109;
      sub_10002B784();
      OS_dispatch_source.setEventHandler(qos:flags:handler:)(v97, v98, v95, ObjectType);
      _Block_release(v95);
      swift_unknownObjectRelease(v91);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v98, v111);
      (*(void (**)(char *, uint64_t))(v107 + 8))(v97, v108);
      swift_release(v118);
      swift_release(v93);
      v99 = *(_QWORD *)(v94 + 128);
      if (v99)
      {
        swift_getObjectType(*(_QWORD *)(v94 + 128));
        swift_unknownObjectRetain(v99);
        OS_dispatch_source.resume()();
        swift_unknownObjectRelease(v99);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_10002B654(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];

  v2 = sub_10001AAC8((uint64_t *)&unk_1000903E0);
  __chkstk_darwin(v2);
  v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v11, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v6 = result;
    v7 = type metadata accessor for TaskPriority(0);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v4, 1, 1, v7);
    v8 = (_QWORD *)swift_allocObject(&unk_1000872F8, 40, 7);
    v8[2] = 0;
    v8[3] = 0;
    v8[4] = v6;
    v9 = sub_10005A888((uint64_t)v4, (uint64_t)&unk_10008EA68, (uint64_t)v8);
    return swift_release(v9);
  }
  return result;
}

uint64_t sub_10002B728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_10002B740, a4, 0);
}

uint64_t sub_10002B740()
{
  uint64_t v0;

  sub_100007850();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002B784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = _swiftEmptyArrayStorage;
  sub_100023D98(&qword_10008EA40, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = v1;
  v3 = sub_10001AAC8(&qword_10008EA48);
  sub_10002C3BC((unint64_t *)&unk_10008EA50, &qword_10008EA48);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v6, v3, v4, v0, v2);
}

void sub_10002B830(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  void *v16;
  void *v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  id v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  unsigned __int8 v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  id v60[2];
  void *v61;
  void *v62;

  v57 = a3;
  v58 = a4;
  v59._countAndFlagsBits = a1;
  v59._object = a2;
  type metadata accessor for String.Encoding(0);
  sub_1000111AC();
  __chkstk_darwin(v5);
  v7 = (char *)v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10001AEAC();
  v61 = 0;
  v62 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(v62);
  v10 = sub_10001B130();
  v11 = Date.description.getter(v10);
  v13 = v12;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v4, v8);
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v13);
  sub_10001B388();
  String.append(_:)(v59);
  v15._object = (void *)0x80000001000714B0;
  v15._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v15);
  v16 = v61;
  v17 = v62;
  static String.Encoding.utf8.getter(v18);
  v19 = String.data(using:allowLossyConversion:)(v7, 0, v16, v17);
  v21 = v20;
  swift_bridgeObjectRelease(v17);
  sub_10001D9CC();
  if (v21 >> 60 == 15)
  {
    v22 = sub_10002C2A4();
    v23 = sub_10000A7FC((uint64_t)&type metadata for TransparencyLog.WriteError, v22);
    swift_willThrow(v23, v24, v25, v26, v27, v28, v29, v30);
LABEL_10:
    sub_10000A840();
    return;
  }
  v61 = (void *)v19;
  v62 = (void *)v21;
  v31.n128_f64[0] = Data.append(_:)(v57, v58);
  static String.Encoding.utf8.getter(v31);
  v32 = sub_10001D878((uint64_t)v7);
  v34 = v33;
  sub_10001D9CC();
  if (v34 >> 60 != 15)
  {
    Data.append(_:)(v32, v34);
    sub_1000229EC(v32, v34);
    v35 = v56;
    v36 = *(void **)(v56 + 120);
    v38 = (uint64_t)v61;
    v37 = (unint64_t)v62;
    v60[0] = v61;
    v60[1] = v62;
    v39 = v36;
    sub_100021264(v38, v37);
    v40 = sub_10002C31C();
    v41 = v55[1];
    NSFileHandle.write<A>(contentsOf:)(v60, &type metadata for Data, v40);
    if (v41)
    {

      sub_100012C64();
    }
    else
    {
      sub_100012C64();

      v42 = *(void **)(v35 + 120);
      v60[0] = 0;
      v43 = objc_msgSend(v42, "synchronizeAndReturnError:", v60);
      v44 = v60[0];
      if ((v43 & 1) != 0)
      {
        v45 = v60[0];
      }
      else
      {
        v46 = v60[0];
        _convertNSErrorToError(_:)(v44);

        swift_willThrow(v47, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    sub_100012C64();
    goto LABEL_10;
  }
  __break(1u);
}

void sub_10002BAD4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  void *v21;
  void *v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  unint64_t v60;
  uint64_t v61;
  id v62;
  unint64_t v63;
  void *v64;
  unsigned int v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  Swift::String v83;
  uint64_t v84;
  id v85[2];
  void *v86;
  void *v87;

  v83._countAndFlagsBits = a1;
  v83._object = a2;
  v82 = type metadata accessor for JSONEncoder.OutputFormatting(0);
  v10 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v81 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v84);
  v12 = sub_10001C438();
  v13 = type metadata accessor for Date(v12);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_10001AEAC();
  if (qword_10008E080 != -1)
    swift_once(&qword_10008E080, sub_1000584B0);
  if (byte_1000973F0 != 1)
    goto LABEL_15;
  if (qword_10008E090 != -1)
    swift_once(&qword_10008E090, sub_100058528);
  if (byte_100097400 != 1)
    goto LABEL_15;
  v78 = v6;
  v79 = a5;
  v80 = v7;
  v86 = 0;
  v87 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease(v87);
  v15 = sub_10001B130();
  v16 = Date.description.getter(v15);
  v18 = v17;
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v5, v13);
  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  sub_10001B388();
  String.append(_:)(v83);
  v20._object = (void *)0x8000000100071490;
  v20._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v20);
  v21 = v86;
  v22 = v87;
  static String.Encoding.utf8.getter(v23);
  v24 = String.data(using:allowLossyConversion:)(v8, 0, v21, v22);
  v26 = v25;
  swift_bridgeObjectRelease(v22);
  sub_10001A294();
  if (v26 >> 60 == 15)
  {
    v27 = sub_10002C2A4();
    v28 = sub_10000A7FC((uint64_t)&type metadata for TransparencyLog.WriteError, v27);
    swift_willThrow(v28, v29, v30, v31, v32, v33, v34, v35);
LABEL_15:
    sub_10000A840();
    return;
  }
  v36 = v24;
  v86 = (void *)v24;
  v87 = (void *)v26;
  v37 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  v38 = (void *)JSONEncoder.init()();
  v39 = sub_10001AAC8(&qword_10008E9B0);
  v40 = (_OWORD *)swift_allocObject(v39, ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72), *(unsigned __int8 *)(v10 + 80) | 7);
  v40[1] = xmmword_10006D0C0;
  static JSONEncoder.OutputFormatting.prettyPrinted.getter();
  v85[0] = v40;
  sub_100023D98(&qword_10008E9B8, (uint64_t (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting, (uint64_t)&protocol conformance descriptor for JSONEncoder.OutputFormatting);
  v42 = v41;
  v43 = sub_10001AAC8(&qword_10008E9C0);
  sub_10002C3BC((unint64_t *)&qword_10008E9C8, &qword_10008E9C0);
  v44 = v81;
  dispatch thunk of SetAlgebra.init<A>(_:)(v85, v43, v45, v82, v42);
  dispatch thunk of JSONEncoder.outputFormatting.setter(v44);
  v46 = v79;
  v85[0] = v79;
  v47 = sub_10002C2E0();
  swift_bridgeObjectRetain();
  v48 = v47;
  v49 = v80;
  v50 = dispatch thunk of JSONEncoder.encode<A>(_:)(v85, &type metadata for TransparencyLog.JustEvents, v48);
  if (v49)
  {
    swift_bridgeObjectRelease(v46);
    swift_release(v38);
    sub_1000229EC(v36, v26);
    goto LABEL_15;
  }
  v52 = v50;
  v53 = v51;
  v83._object = v38;
  swift_bridgeObjectRelease(v46);
  v54.n128_f64[0] = Data.append(_:)(v52, v53);
  static String.Encoding.utf8.getter(v54);
  v55 = sub_10001D878(v8);
  v57 = v56;
  sub_10001A294();
  if (v57 >> 60 != 15)
  {
    Data.append(_:)(v55, v57);
    sub_1000229EC(v55, v57);
    v58 = v78;
    v59 = *(void **)(v78 + 120);
    v61 = (uint64_t)v86;
    v60 = (unint64_t)v87;
    v85[0] = v86;
    v85[1] = v87;
    v62 = v59;
    sub_100021264(v61, v60);
    v63 = sub_10002C31C();
    NSFileHandle.write<A>(contentsOf:)(v85, &type metadata for Data, v63);
    sub_10001CD6C();

    v64 = *(void **)(v58 + 120);
    v85[0] = 0;
    v65 = objc_msgSend(v64, "synchronizeAndReturnError:", v85);
    v66 = v85[0];
    if (v65)
    {
      v67 = v85[0];
      sub_10001CD6C();
      sub_10001B078();
      sub_10000AF9C();
    }
    else
    {
      v68 = v85[0];
      _convertNSErrorToError(_:)(v66);

      swift_willThrow(v69, v70, v71, v72, v73, v74, v75, v76);
      sub_10001B078();
      sub_10000AF9C();
      sub_10001CD6C();
    }
    goto LABEL_15;
  }
  __break(1u);
}

uint64_t sub_10002BF90()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 128));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10002BFBC()
{
  uint64_t v0;

  sub_10002BF90();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for TransparencyLog()
{
  return objc_opt_self(_TtC13rtcreportingd15TransparencyLog);
}

uint64_t sub_10002BFF4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10002C000(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x73746E657665 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73746E657665, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

void sub_10002C07C()
{
  _QWORD v0[9];

  Hasher.init(_seed:)(v0, 0);
  sub_1000110AC();
  Hasher._finalize()();
  sub_100010D30();
}

uint64_t sub_10002C0B0()
{
  return 0x73746E657665;
}

uint64_t sub_10002C0C4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_10001AAC8(&qword_10008EA98);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001D44C(a1, v8);
  v10 = sub_10002DB94();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for TransparencyLog.JustEvents.CodingKeys, &type metadata for TransparencyLog.JustEvents.CodingKeys, v10, v8, v9);
  v13 = a2;
  sub_10001AAC8((uint64_t *)&unk_10008F870);
  sub_10000C318();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10002C1C8()
{
  return sub_10002BFF4();
}

void sub_10002C1E0(uint64_t a1)
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, a1);
  sub_1000110AC();
  Hasher._finalize()();
  sub_100010D30();
}

uint64_t sub_10002C214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10002C000(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10002C23C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002DB94();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002C264(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002DB94();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10002C28C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10002C0C4(a1, *v1);
}

unint64_t sub_10002C2A4()
{
  unint64_t result;

  result = qword_10008E9A8;
  if (!qword_10008E9A8)
  {
    result = swift_getWitnessTable(&unk_10006DA48, &type metadata for TransparencyLog.WriteError);
    atomic_store(result, (unint64_t *)&qword_10008E9A8);
  }
  return result;
}

unint64_t sub_10002C2E0()
{
  unint64_t result;

  result = qword_10008E9D0;
  if (!qword_10008E9D0)
  {
    result = swift_getWitnessTable(&unk_10006DA20, &type metadata for TransparencyLog.JustEvents);
    atomic_store(result, (unint64_t *)&qword_10008E9D0);
  }
  return result;
}

unint64_t sub_10002C31C()
{
  unint64_t result;

  result = qword_10008E9D8;
  if (!qword_10008E9D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, &qword_10008E9D8);
  }
  return result;
}

uint64_t sub_10002C358(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10002C390()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002C3B4()
{
  uint64_t v0;

  return sub_10002B654(v0);
}

void sub_10002C3BC(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_100027598(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), a1);
  }
  sub_10000BF94();
}

uint64_t sub_10002C3F8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002C424(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10008EA64);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10002C490;
  return sub_10002B728(a1, v4, v5, v6);
}

uint64_t sub_10002C490()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_10002C4D8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(char *, uint64_t, uint64_t);
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  char v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void (*v94)(char *, uint64_t, uint64_t);
  uint64_t v95;
  char *v96;
  void (*v97)(char *, uint64_t);
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  char v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  Swift::Int v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  unint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t (*v175)(char *, uint64_t, uint64_t);
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  _QWORD *v185;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v185 = *(_QWORD **)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v169 = (char *)&v160 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v181 = (char *)&v160 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v160 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v160 - v13;
  v15 = __chkstk_darwin(v12);
  v173 = (char *)&v160 - v16;
  v17 = __chkstk_darwin(v15);
  v172 = (char *)&v160 - v18;
  v19 = __chkstk_darwin(v17);
  v166 = (char *)&v160 - v20;
  __chkstk_darwin(v19);
  v165 = (char *)&v160 - v21;
  v184 = a1;
  v22 = a1[1];
  v23 = _minimumMergeRunLength(_:)(v22);
  if (v23 >= v22)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      if (v22)
        sub_10002D03C(0, v22, 1, v184);
      return;
    }
    goto LABEL_158;
  }
  v24 = v23;
  sub_100026BC0(v22 / 2);
  v162 = v25;
  v163 = v22;
  v171 = v26;
  if (v22 <= 0)
  {
LABEL_122:
    v28 = (char *)_swiftEmptyArrayStorage;
    v100 = _swiftEmptyArrayStorage[2];
LABEL_123:
    if (v100 < 2)
    {
LABEL_134:
      swift_bridgeObjectRelease(v28);
      if (v163 >= -1)
        goto LABEL_135;
      goto LABEL_162;
    }
    v151 = *v184;
    v152 = v171;
    while (1)
    {
      v153 = v100 - 2;
      if (v100 < 2)
        break;
      if (!v151)
        goto LABEL_166;
      v144 = v28;
      v154 = v28 + 32;
      v155 = *(_QWORD *)&v28[16 * v153 + 32];
      v156 = *(_QWORD *)&v28[16 * v100 + 24];
      sub_10002D310(v151 + v185[9] * v155, v151 + v185[9] * *(_QWORD *)&v154[16 * v100 - 16], v151 + v185[9] * v156, v152);
      if (v2)
        goto LABEL_120;
      if (v156 < v155)
        goto LABEL_153;
      if ((swift_isUniquelyReferenced_nonNull_native(v144) & 1) == 0)
        v144 = sub_10002D924((uint64_t)v144);
      if (v153 >= *((_QWORD *)v144 + 2))
        goto LABEL_154;
      v157 = &v144[16 * v153 + 32];
      *(_QWORD *)v157 = v155;
      *((_QWORD *)v157 + 1) = v156;
      v158 = *((_QWORD *)v144 + 2);
      if (v100 > v158)
        goto LABEL_155;
      v28 = v144;
      memmove(&v144[16 * v100 + 16], &v144[16 * v100 + 32], 16 * (v158 - v100));
      *((_QWORD *)v144 + 2) = v158 - 1;
      v100 = v158 - 1;
      if (v158 <= 2)
        goto LABEL_134;
    }
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
    return;
  }
  v161 = v24;
  v176 = v11;
  v179 = v4;
  v27 = 0;
  v28 = (char *)_swiftEmptyArrayStorage;
  v29 = v22;
  v167 = v14;
  while (1)
  {
    v30 = (uint64_t)v27;
    v31 = v27 + 1;
    v170 = v27;
    if ((uint64_t)(v27 + 1) >= v29)
    {
      v44 = (uint64_t)(v27 + 1);
      v45 = v179;
    }
    else
    {
      v182 = v29;
      v164 = v28;
      v32 = *v184;
      v33 = v185[9];
      v34 = (void (*)(char *, uint64_t, uint64_t))v185[2];
      v35 = v179;
      v34(v165, *v184 + v33 * (_QWORD)v31, v179);
      v177 = v32;
      v183 = v33;
      v36 = ((uint64_t (*)(char *, uint64_t, uint64_t))v34)(v166, v32 + v33 * v30, v35);
      v37 = URL.lastPathComponent.getter(v36);
      v39 = v38;
      v40 = URL.lastPathComponent.getter(v37);
      if (v37 == v40 && v39 == v41)
      {
        LODWORD(v180) = 0;
        v43 = v39;
      }
      else
      {
        v43 = v41;
        LODWORD(v180) = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, v40, v41, 1);
      }
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(v43);
      v46 = (void (*)(char *, uint64_t))v185[1];
      v45 = v179;
      v46(v166, v179);
      v46(v165, v45);
      v30 = (uint64_t)v170;
      v44 = (uint64_t)(v170 + 2);
      if ((uint64_t)(v170 + 2) < v182)
      {
        v174 = v2;
        v178 = v183 * (_QWORD)v31;
        v47 = v177;
        v48 = v183 * v44;
        while (1)
        {
          v49 = v44;
          v34(v172, v47 + v48, v45);
          v50 = ((uint64_t (*)(char *, uint64_t, uint64_t))v34)(v173, v47 + v178, v45);
          v51 = URL.lastPathComponent.getter(v50);
          v53 = v52;
          v54 = URL.lastPathComponent.getter(v51);
          if (v51 == v54 && v53 == v55)
          {
            v58 = 0;
            v57 = v53;
          }
          else
          {
            v57 = v55;
            v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v53, v54, v55, 1);
          }
          swift_bridgeObjectRelease(v53);
          swift_bridgeObjectRelease(v57);
          v45 = v179;
          v46(v173, v179);
          v46(v172, v45);
          if (((v180 ^ v58) & 1) != 0)
            break;
          ++v44;
          v47 += v183;
          if (v49 + 1 >= v182)
          {
            v29 = v182;
            v44 = v182;
            v2 = v174;
            v14 = v167;
            v30 = (uint64_t)v170;
            goto LABEL_25;
          }
        }
        v2 = v174;
        v14 = v167;
        v30 = (uint64_t)v170;
      }
      v29 = v182;
LABEL_25:
      v28 = v164;
      if ((v180 & 1) != 0)
      {
        if (v44 < v30)
          goto LABEL_159;
        if (v30 < v44)
        {
          v174 = v2;
          v59 = 0;
          v60 = v183 * (v44 - 1);
          v61 = v30;
          v62 = v44 * v183;
          v63 = v61;
          v64 = v61 * v183;
          do
          {
            if (v63 != v44 + v59 - 1)
            {
              v65 = v177;
              if (!v177)
                goto LABEL_165;
              v66 = v177 + v64;
              v178 = v177 + v60;
              v45 = v179;
              v180 = (char *)v185[4];
              ((void (*)(char *, uint64_t, uint64_t))v180)(v169, v177 + v64, v179);
              if (v64 < v60 || v66 >= v65 + v62)
              {
                v68 = v65 + v64;
                v69 = v178;
                swift_arrayInitWithTakeFrontToBack(v68, v178, 1, v45);
              }
              else
              {
                v69 = v178;
                if (v64 != v60)
                  swift_arrayInitWithTakeBackToFront(v66);
              }
              ((void (*)(uint64_t, char *, uint64_t))v180)(v69, v169, v45);
              v14 = v167;
            }
            ++v63;
            --v59;
            v60 -= v183;
            v62 -= v183;
            v64 += v183;
          }
          while (v63 < v44 + v59);
          v28 = v164;
          v2 = v174;
          v30 = (uint64_t)v170;
          v29 = v182;
        }
      }
    }
    if (v44 < v29)
    {
      if (__OFSUB__(v44, v30))
        goto LABEL_157;
      if (v44 - v30 < v161)
      {
        if (__OFADD__(v30, v161))
          goto LABEL_160;
        if (v30 + v161 >= v29)
          v70 = v29;
        else
          v70 = v30 + v161;
        if (v70 < v30)
          goto LABEL_161;
        if (v44 != v70)
        {
          v164 = v28;
          v71 = v185[9];
          v72 = (uint64_t (*)(char *, uint64_t, uint64_t))v185[2];
          v174 = v2;
          v175 = v72;
          v73 = v71 * (v44 - 1);
          v177 = v71;
          v183 = v44 * v71;
          v168 = v70;
          do
          {
            v74 = 0;
            v180 = (char *)v44;
            v178 = v73;
            while (1)
            {
              v182 = v30;
              v75 = *v184;
              v76 = v175;
              v175(v14, v183 + v74 + *v184, v45);
              v77 = v73 + v74 + v75;
              v78 = v14;
              v79 = v176;
              v80 = v76(v176, v77, v45);
              v81 = v45;
              v82 = URL.lastPathComponent.getter(v80);
              v84 = v83;
              v85 = URL.lastPathComponent.getter(v82);
              if (v82 == v85 && v84 == v86)
              {
                swift_bridgeObjectRelease_n(v84, 2);
                v97 = (void (*)(char *, uint64_t))v185[1];
                v97(v79, v45);
                v97(v78, v45);
                v14 = v78;
                goto LABEL_63;
              }
              v88 = v86;
              v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v84, v85, v86, 1);
              swift_bridgeObjectRelease(v84);
              swift_bridgeObjectRelease(v88);
              v90 = (void (*)(char *, uint64_t))v185[1];
              v90(v79, v81);
              v90(v78, v81);
              v14 = v78;
              if ((v89 & 1) == 0)
                break;
              v91 = *v184;
              v73 = v178;
              if (!*v184)
                goto LABEL_163;
              v92 = v91 + v183 + v74;
              v93 = (char *)(v91 + v178 + v74);
              v94 = (void (*)(char *, uint64_t, uint64_t))v185[4];
              v95 = v179;
              v94(v181, v92, v179);
              swift_arrayInitWithTakeFrontToBack(v92, v93, 1, v95);
              v94(v93, (uint64_t)v181, v95);
              v74 -= v177;
              v30 = v182 + 1;
              v96 = v180;
              v45 = v95;
              if (v180 == (char *)(v182 + 1))
                goto LABEL_64;
            }
            v45 = v81;
LABEL_63:
            v96 = v180;
            v73 = v178;
LABEL_64:
            v44 = (uint64_t)(v96 + 1);
            v73 += v177;
            v183 += v177;
            v30 = (uint64_t)v170;
          }
          while (v44 != v168);
          v44 = v168;
          v2 = v174;
          v28 = v164;
        }
      }
    }
    if (v44 < v30)
      goto LABEL_156;
    if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
      v28 = sub_10002D830(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
    v99 = *((_QWORD *)v28 + 2);
    v98 = *((_QWORD *)v28 + 3);
    v100 = v99 + 1;
    v174 = v2;
    v180 = (char *)v44;
    if (v99 >= v98 >> 1)
      v28 = sub_10002D830((char *)(v98 > 1), v99 + 1, 1, v28);
    *((_QWORD *)v28 + 2) = v100;
    v101 = v28 + 32;
    v102 = &v28[16 * v99 + 32];
    v103 = v180;
    *(_QWORD *)v102 = v30;
    *((_QWORD *)v102 + 1) = v103;
    if (v99)
      break;
    v100 = 1;
LABEL_114:
    v29 = v184[1];
    v27 = v180;
    v2 = v174;
    if ((uint64_t)v180 >= v29)
      goto LABEL_123;
  }
  while (1)
  {
    v104 = v100 - 1;
    if (v100 >= 4)
    {
      v109 = &v101[16 * v100];
      v110 = *((_QWORD *)v109 - 8);
      v111 = *((_QWORD *)v109 - 7);
      v115 = __OFSUB__(v111, v110);
      v112 = v111 - v110;
      if (v115)
        goto LABEL_141;
      v114 = *((_QWORD *)v109 - 6);
      v113 = *((_QWORD *)v109 - 5);
      v115 = __OFSUB__(v113, v114);
      v107 = v113 - v114;
      v108 = v115;
      if (v115)
        goto LABEL_142;
      v116 = v100 - 2;
      v117 = &v101[16 * v100 - 32];
      v119 = *(_QWORD *)v117;
      v118 = *((_QWORD *)v117 + 1);
      v115 = __OFSUB__(v118, v119);
      v120 = v118 - v119;
      if (v115)
        goto LABEL_143;
      v115 = __OFADD__(v107, v120);
      v121 = v107 + v120;
      if (v115)
        goto LABEL_145;
      if (v121 >= v112)
      {
        v139 = &v101[16 * v104];
        v141 = *(_QWORD *)v139;
        v140 = *((_QWORD *)v139 + 1);
        v115 = __OFSUB__(v140, v141);
        v142 = v140 - v141;
        if (v115)
          goto LABEL_151;
        v132 = v107 < v142;
        goto LABEL_103;
      }
    }
    else
    {
      if (v100 != 3)
      {
        v133 = *((_QWORD *)v28 + 4);
        v134 = *((_QWORD *)v28 + 5);
        v115 = __OFSUB__(v134, v133);
        v126 = v134 - v133;
        v127 = v115;
        goto LABEL_97;
      }
      v106 = *((_QWORD *)v28 + 4);
      v105 = *((_QWORD *)v28 + 5);
      v115 = __OFSUB__(v105, v106);
      v107 = v105 - v106;
      v108 = v115;
    }
    if ((v108 & 1) != 0)
      goto LABEL_144;
    v116 = v100 - 2;
    v122 = &v101[16 * v100 - 32];
    v124 = *(_QWORD *)v122;
    v123 = *((_QWORD *)v122 + 1);
    v125 = __OFSUB__(v123, v124);
    v126 = v123 - v124;
    v127 = v125;
    if (v125)
      goto LABEL_146;
    v128 = &v101[16 * v104];
    v130 = *(_QWORD *)v128;
    v129 = *((_QWORD *)v128 + 1);
    v115 = __OFSUB__(v129, v130);
    v131 = v129 - v130;
    if (v115)
      goto LABEL_148;
    if (__OFADD__(v126, v131))
      goto LABEL_150;
    if (v126 + v131 >= v107)
    {
      v132 = v107 < v131;
LABEL_103:
      if (v132)
        v104 = v116;
      goto LABEL_105;
    }
LABEL_97:
    if ((v127 & 1) != 0)
      goto LABEL_147;
    v135 = &v101[16 * v104];
    v137 = *(_QWORD *)v135;
    v136 = *((_QWORD *)v135 + 1);
    v115 = __OFSUB__(v136, v137);
    v138 = v136 - v137;
    if (v115)
      goto LABEL_149;
    if (v138 < v126)
      goto LABEL_114;
LABEL_105:
    v143 = v104 - 1;
    if (v104 - 1 >= v100)
    {
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
    if (!*v184)
      goto LABEL_164;
    v144 = v28;
    v145 = &v101[16 * v143];
    v146 = *(_QWORD *)v145;
    v147 = &v101[16 * v104];
    v148 = *((_QWORD *)v147 + 1);
    v149 = v174;
    sub_10002D310(*v184 + v185[9] * *(_QWORD *)v145, *v184 + v185[9] * *(_QWORD *)v147, *v184 + v185[9] * v148, v171);
    v174 = v149;
    if (v149)
      break;
    if (v148 < v146)
      goto LABEL_138;
    if (v104 > *((_QWORD *)v144 + 2))
      goto LABEL_139;
    *(_QWORD *)v145 = v146;
    *(_QWORD *)&v101[16 * v143 + 8] = v148;
    v150 = *((_QWORD *)v144 + 2);
    if (v104 >= v150)
      goto LABEL_140;
    v28 = v144;
    v100 = v150 - 1;
    memmove(&v101[16 * v104], v147 + 16, 16 * (v150 - 1 - v104));
    *((_QWORD *)v144 + 2) = v150 - 1;
    if (v150 <= 2)
      goto LABEL_114;
  }
  v2 = v174;
LABEL_120:
  swift_bridgeObjectRelease(v144);
  if (v163 < -1)
  {
    __break(1u);
    goto LABEL_122;
  }
LABEL_135:
  v159 = v162;
  *(_QWORD *)(v162 + 16) = 0;
  swift_bridgeObjectRelease(v159);
}

uint64_t sub_10002D03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;

  v45 = a4;
  v38 = a1;
  v41 = type metadata accessor for URL(0);
  v46 = *(_QWORD **)(v41 - 8);
  v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  v43 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v36 - v9;
  result = __chkstk_darwin(v8);
  v13 = (char *)&v36 - v12;
  v42 = a3;
  v37 = a2;
  if (a3 != a2)
  {
    v14 = v46[9];
    v39 = (uint64_t (*)(char *, uint64_t, uint64_t))v46[2];
    v40 = v14;
    v48 = v14 * (v42 - 1);
    v47 = v14 * v42;
    while (2)
    {
      v15 = 0;
      v16 = v38;
      v17 = v41;
      while (1)
      {
        v18 = *v45;
        v44 = v47 + v15;
        v19 = v39;
        v39(v13, v47 + v15 + v18, v17);
        v20 = v19(v10, v48 + v15 + v18, v17);
        v21 = URL.lastPathComponent.getter(v20);
        v22 = v10;
        v24 = v23;
        v25 = URL.lastPathComponent.getter(v21);
        if (v21 == v25 && v24 == v26)
          break;
        v28 = v26;
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v24, v25, v26, 1);
        swift_bridgeObjectRelease(v24);
        swift_bridgeObjectRelease(v28);
        v30 = (void (*)(char *, uint64_t))v46[1];
        v30(v22, v17);
        result = ((uint64_t (*)(char *, uint64_t))v30)(v13, v17);
        v10 = v22;
        if ((v29 & 1) != 0)
        {
          v31 = *v45;
          if (!*v45)
          {
            __break(1u);
            return result;
          }
          v32 = v31 + v47 + v15;
          v33 = v31 + v48 + v15;
          v34 = (void (*)(char *, uint64_t, uint64_t))v46[4];
          v17 = v41;
          v34(v43, v32, v41);
          swift_arrayInitWithTakeFrontToBack(v32, v33, 1, v17);
          result = ((uint64_t (*)(uint64_t, char *, uint64_t))v34)(v33, v43, v17);
          v15 -= v40;
          ++v16;
          v10 = v22;
          if (v42 != v16)
            continue;
        }
        goto LABEL_13;
      }
      swift_bridgeObjectRelease_n(v24, 2);
      v35 = (void (*)(char *, uint64_t))v46[1];
      v35(v22, v17);
      result = ((uint64_t (*)(char *, uint64_t))v35)(v13, v17);
      v10 = v22;
LABEL_13:
      v48 += v40;
      v47 += v40;
      if (++v42 != v37)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_10002D310(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  int64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v29;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  void (*v45)(uint64_t, uint64_t);
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  BOOL v50;
  BOOL v51;
  uint64_t (*v52)(char *, unint64_t, uint64_t);
  unint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, unint64_t, uint64_t);
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  char v67;
  void (*v68)(char *, uint64_t);
  unint64_t v69;
  BOOL v70;
  BOOL v71;
  unint64_t v72;
  uint64_t v74;
  unint64_t v75;
  uint64_t (*v76)(char *, unint64_t, uint64_t);
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, unint64_t, uint64_t);
  char *v82;
  uint64_t v83;
  unint64_t v84;

  v8 = type metadata accessor for URL(0);
  v9 = __chkstk_darwin(v8);
  v82 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v81 = (uint64_t (*)(uint64_t, unint64_t, uint64_t))((char *)&v74 - v12);
  v13 = __chkstk_darwin(v11);
  result = __chkstk_darwin(v13);
  v17 = (char *)&v74 - v16;
  v83 = v18;
  v19 = *(_QWORD *)(v18 + 72);
  if (!v19)
  {
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v20 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v19 == -1)
    goto LABEL_91;
  v22 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v19 == -1)
    goto LABEL_92;
  v79 = v15;
  v80 = v19;
  v24 = v20 / v19;
  v25 = v22 / v19;
  if (v20 / v19 >= v22 / v19)
  {
    result = sub_10005DE78(a2, v22 / v19, a4);
    v26 = a4 + v25 * v19;
    if (v25 * v19 < 1 || a1 >= a2)
      goto LABEL_22;
    v79 = -v19;
    v52 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v83 + 16);
    v75 = a4;
    v76 = v52;
    v77 = a1;
    while (1)
    {
      v53 = a3;
      v84 = v26;
      v54 = v79;
      v78 = v26 + v79;
      v55 = v76;
      ((void (*)(uint64_t (*)(uint64_t, unint64_t, uint64_t)))v76)(v81);
      v56 = a2 + v54;
      v57 = a2 + v54;
      v58 = v8;
      v59 = v55(v82, v57, v8);
      v60 = URL.lastPathComponent.getter(v59);
      v62 = v61;
      v64 = URL.lastPathComponent.getter(v60);
      if (v60 == v64 && v62 == v63)
      {
        v67 = 0;
        v66 = v62;
      }
      else
      {
        v66 = v63;
        v67 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v62, v64, v63, 1);
      }
      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease(v66);
      a3 = v53 + v79;
      v68 = *(void (**)(char *, uint64_t))(v83 + 8);
      v8 = v58;
      v68(v82, v58);
      result = ((uint64_t (*)(uint64_t (*)(uint64_t, unint64_t, uint64_t), uint64_t))v68)(v81, v58);
      v69 = v77;
      if ((v67 & 1) != 0)
      {
        v70 = v53 < a2 || a3 >= a2;
        v19 = v80;
        if (v70)
        {
          result = swift_arrayInitWithTakeFrontToBack(a3, v56, 1, v8);
        }
        else if (v53 != a2)
        {
          result = swift_arrayInitWithTakeBackToFront(a3);
        }
        a2 = v56;
        a4 = v75;
        v26 = v84;
        goto LABEL_84;
      }
      v71 = v53 < v84 || a3 >= v84;
      v19 = v80;
      if (v71)
      {
        v72 = v78;
        result = swift_arrayInitWithTakeFrontToBack(a3, v78, 1, v8);
      }
      else
      {
        if (v53 == v84)
        {
          v26 = v78;
          goto LABEL_83;
        }
        v72 = v78;
        result = swift_arrayInitWithTakeBackToFront(a3);
      }
      v26 = v72;
LABEL_83:
      a4 = v75;
LABEL_84:
      if (v26 <= a4 || a2 <= v69)
        goto LABEL_22;
    }
  }
  result = sub_10005DE78(a1, v20 / v19, a4);
  v26 = a4 + v24 * v19;
  if (v24 * v19 >= 1 && a2 < a3)
  {
    v81 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v83 + 16);
    v82 = v17;
    v31 = v79;
    v84 = a4 + v24 * v19;
    v78 = a3;
    while (1)
    {
      v32 = v81;
      v81((uint64_t)v17, a2, v8);
      v33 = v32(v31, a4, v8);
      v34 = v8;
      v35 = URL.lastPathComponent.getter(v33);
      v37 = v36;
      v38 = URL.lastPathComponent.getter(v35);
      if (v35 == v38 && v37 == v39)
        break;
      v41 = v39;
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, v38, v39, 1);
      v43 = v31;
      v44 = v42;
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease(v41);
      v45 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
      v45(v43, v34);
      result = ((uint64_t (*)(char *, uint64_t))v45)(v17, v34);
      v8 = v34;
      if ((v44 & 1) == 0)
        goto LABEL_39;
      v19 = v80;
      v46 = a2 + v80;
      v47 = a1 < a2 || a1 >= v46;
      v48 = v78;
      if (!v47)
      {
        v31 = v79;
        if (a1 != a2)
          result = swift_arrayInitWithTakeBackToFront(a1);
        v26 = v84;
        goto LABEL_49;
      }
      result = swift_arrayInitWithTakeFrontToBack(a1, a2, 1, v8);
LABEL_48:
      v26 = v84;
      v31 = v79;
LABEL_49:
      a1 += v19;
      v51 = a4 >= v26 || v46 >= v48;
      a2 = v46;
      if (v51)
        goto LABEL_16;
    }
    swift_bridgeObjectRelease_n(v37, 2);
    v49 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
    v49(v31, v34);
    result = ((uint64_t (*)(char *, uint64_t))v49)(v17, v34);
    v8 = v34;
LABEL_39:
    v19 = v80;
    v50 = a1 < a4 || a1 >= a4 + v80;
    v48 = v78;
    if (v50)
    {
      result = swift_arrayInitWithTakeFrontToBack(a1, a4, 1, v8);
    }
    else if (a1 != a4)
    {
      result = swift_arrayInitWithTakeBackToFront(a1);
    }
    v46 = a2;
    a4 += v19;
    goto LABEL_48;
  }
LABEL_16:
  a2 = a1;
LABEL_22:
  v29 = v26 - a4;
  if (v19 != -1 || v29 != 0x8000000000000000)
  {
    sub_10005DE78(a4, v29 / v19, a2);
    return 1;
  }
LABEL_93:
  __break(1u);
  return result;
}

char *sub_10002D830(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001AAC8(&qword_10008EA88);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13)
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10002D924(uint64_t a1)
{
  return sub_10002D830(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

id sub_10002D938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  Class isa;
  id v11;

  type metadata accessor for URLResourceKey(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  v11 = objc_msgSend(a5, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", a1, isa, a3, a4);

  return v11;
}

void sub_10002D9C8(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5;

  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  objc_msgSend(a3, "setDateFormat:", v5);

}

uint64_t sub_10002DA18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001AAC8(&qword_10008E780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002DA60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001AAC8(&qword_10008E780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10002DAA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10001AAC8(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_10000BF94();
}

uint64_t sub_10002DAE0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v5;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2)
      return 0;
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  v5 = __OFADD__(result, a2);
  result += a2;
  if (v5)
    goto LABEL_14;
  return result;
}

ValueMetadata *type metadata accessor for TransparencyLog.JustEvents()
{
  return &type metadata for TransparencyLog.JustEvents;
}

ValueMetadata *type metadata accessor for TransparencyLog.WriteError()
{
  return &type metadata for TransparencyLog.WriteError;
}

unint64_t sub_10002DB58()
{
  unint64_t result;

  result = qword_10008EA90;
  if (!qword_10008EA90)
  {
    result = swift_getWitnessTable(&unk_10006D9F8, &type metadata for TransparencyLog.WriteError);
    atomic_store(result, (unint64_t *)&qword_10008EA90);
  }
  return result;
}

unint64_t sub_10002DB94()
{
  unint64_t result;

  result = qword_10008EAA0;
  if (!qword_10008EAA0)
  {
    result = swift_getWitnessTable(&unk_10006DB4C, &type metadata for TransparencyLog.JustEvents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008EAA0);
  }
  return result;
}

uint64_t _s13rtcreportingd15TransparencyLogC10WriteErrorOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10002DC10 + 4 * byte_10006D8C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10002DC30 + 4 * byte_10006D8C5[v4]))();
}

_BYTE *sub_10002DC10(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10002DC30(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10002DC38(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10002DC40(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10002DC48(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10002DC50(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TransparencyLog.JustEvents.CodingKeys()
{
  return &type metadata for TransparencyLog.JustEvents.CodingKeys;
}

unint64_t sub_10002DC70()
{
  unint64_t result;

  result = qword_10008EAC0;
  if (!qword_10008EAC0)
  {
    result = swift_getWitnessTable(&unk_10006DB24, &type metadata for TransparencyLog.JustEvents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008EAC0);
  }
  return result;
}

unint64_t sub_10002DCB0()
{
  unint64_t result;

  result = qword_10008EAC8;
  if (!qword_10008EAC8)
  {
    result = swift_getWitnessTable(&unk_10006DA94, &type metadata for TransparencyLog.JustEvents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008EAC8);
  }
  return result;
}

unint64_t sub_10002DCF0()
{
  unint64_t result;

  result = qword_10008EAD0;
  if (!qword_10008EAD0)
  {
    result = swift_getWitnessTable(&unk_10006DABC, &type metadata for TransparencyLog.JustEvents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008EAD0);
  }
  return result;
}

xpc_object_t *sub_10002DD30(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int64_t v4;
  int v5;
  int v6;
  char v7;
  char v8;
  xpc_object_t v9;
  xpc_object_t *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  char v14;
  xpc_object_t v15;
  unint64_t v17;
  xpc_object_t *v18;
  xpc_object_t **v19;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = (unint64_t)_swiftEmptyArrayStorage;
  if (v1)
  {
    v19 = (xpc_object_t **)_swiftEmptyArrayStorage;
    v2 = (unint64_t)&v19;
    specialized ContiguousArray.reserveCapacity(_:)(v1);
    v4 = sub_10003016C(a1);
    v6 = v5;
    v8 = v7 & 1;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(a1 + 32))
    {
      if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
        goto LABEL_14;
      if (*(_DWORD *)(a1 + 36) != v6)
        goto LABEL_15;
      v9 = xpc_int64_create(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v4));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v10 = v19[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v9);
      v2 = (unint64_t)&v19;
      specialized ContiguousArray._endMutation()(v11);
      v12 = sub_100030088(v4, v6, v8 & 1, a1);
      v4 = v12;
      v6 = v13;
      v8 = v14 & 1;
      if (!--v1)
      {
        sub_1000301EC(v12, v13, v14 & 1);
        v2 = (unint64_t)v19;
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_9:
  if ((v2 & 0x8000000000000000) != 0 || (v2 & 0x4000000000000000) != 0)
  {
LABEL_16:
    swift_bridgeObjectRetain(v2);
    v18 = (xpc_object_t *)sub_10002FE98(v17);
    swift_bridgeObjectRelease(v2);
    sub_10002DEDC(v18 + 4, (size_t)v18[2], (xpc_object_t **)&v19);
    swift_bridgeObjectRelease(v2);
    swift_release(v18);
    return (xpc_object_t *)v19;
  }
  v15 = xpc_array_create((xpc_object_t *)((v2 & 0xFFFFFFFFFFFFFF8) + 32), *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10));
  swift_bridgeObjectRelease(v2);
  return (xpc_object_t *)v15;
}

xpc_object_t *sub_10002DEDC@<X0>(xpc_object_t *result@<X0>, size_t a2@<X1>, xpc_object_t **a3@<X8>)
{
  if (result)
  {
    result = (xpc_object_t *)xpc_array_create(result, a2);
    *a3 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002DF10()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026B1C(v0, qword_10008EAE0);
  sub_100015718(v0, (uint64_t)qword_10008EAE0);
  return Logger.init(subsystem:category:)(0xD000000000000017, 0x8000000100071220, 0x746E65696C63, 0xE600000000000000);
}

uint64_t sub_10002DF80()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  __n128 v23;
  uint64_t isStackAllocationSafe;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  sub_10000A874();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  *(_QWORD *)(v1 + 32) = v3;
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 24) = v5;
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v60 = *(_QWORD *)(v7 - 8);
  v61 = v7;
  v8 = sub_100007830(v60);
  *(_QWORD *)(v1 + 48) = v8;
  v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v58 = *(_QWORD *)(v9 - 8);
  v59 = v9;
  v10 = sub_100007830(v58);
  *(_QWORD *)(v1 + 56) = v10;
  v11 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  v12 = sub_100007830(*(_QWORD *)(v11 - 8));
  *(_QWORD *)(v1 + 64) = v12;
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = sub_100007830(*(_QWORD *)(v13 - 8));
  *(_QWORD *)(v1 + 72) = v14;
  swift_defaultActor_initialize(v2);
  v2[14] = 0;
  v15 = type metadata accessor for Session(0);
  v16 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v15, &protocol witness table for String);
  v2[18] = v6;
  v2[19] = v16;
  swift_retain(v6);
  *(_QWORD *)(v1 + 80) = XPCIncomingConnection.auditToken.getter(v4);
  *(_DWORD *)(v1 + 88) = v17;
  *(_DWORD *)(v1 + 92) = v18;
  *(_DWORD *)(v1 + 96) = v19;
  *(_DWORD *)(v1 + 100) = v20;
  *(_DWORD *)(v1 + 104) = v21;
  *(_DWORD *)(v1 + 108) = v22;
  isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(4096, 1, v23);
  if ((isStackAllocationSafe & 1) != 0)
  {
    __chkstk_darwin(isStackAllocationSafe);
    v25 = sub_100030338(&v54, (uint64_t)&v55);
    if (v6)
    {
      swift_willThrow(v25, v26, v27, v28, v29, v30, v31, v32);
      sub_100010D3C();
      return swift_errorRelease(v33);
    }
    v39 = v62;
    v40 = v63;
  }
  else
  {
    v35 = (_BYTE *)sub_100012C5C(4096);
    sub_100030338(v35, (uint64_t)(v35 + 4096));
    if (v6)
    {
      swift_errorRelease(v6);
      sub_100010D3C();
      return swift_slowDealloc(v36, v37, v38);
    }
    sub_1000120F8((uint64_t)v35);
    v39 = v62;
    v40 = v63;
  }
  v2[16] = v39;
  v2[17] = v40;
  v57 = sub_1000301F8();
  v62 = 0;
  v63 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease(v63);
  v62 = 0xD000000000000018;
  v63 = 0x8000000100071840;
  v42 = v2[16];
  v41 = (void *)v2[17];
  sub_10000CA18();
  v43._countAndFlagsBits = v42;
  v43._object = v41;
  String.append(_:)(v43);
  v44 = sub_10000AF70();
  v55 = v63;
  v56 = v62;
  static DispatchQoS.background.getter(v44);
  *(_QWORD *)(v1 + 16) = _swiftEmptyArrayStorage;
  v45 = sub_1000095E0((unint64_t *)&qword_10008EC38, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v46 = sub_10001AAC8(&qword_10008EC40);
  v47 = sub_100030234();
  dispatch thunk of SetAlgebra.init<A>(_:)(v1 + 16, v46, v47, v11, v45);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v58 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v59);
  v49 = v60;
  v48 = v61;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v60 + 104))(v8, enum case for DispatchQoS.QoSClass.background(_:), v61);
  v50 = static OS_dispatch_queue.global(qos:)(v8);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v8, v48);
  v2[15] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v56, v55, v14, v12, v10, v50);
  sub_10000CEB8();
  sub_100010D3C();
  return swift_task_switch(v51, v52, v53);
}

uint64_t sub_10002E318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  _xpc_connection_s *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_10000A874();
  v13 = (_xpc_connection_s *)v12[4];
  v14 = v12[5];
  v15 = v12[3];
  v16 = *(void **)(v14 + 120);
  v17 = type metadata accessor for XPCConnection();
  sub_100018E5C(v17, 48);
  v18 = v16;
  sub_10000785C(v14);
  v19 = v18;
  v20 = XPCConnection.init(conn:targetQ:delegate:)(v13, v19, v14, (uint64_t)&off_1000875F0);
  swift_release(v15);
  sub_100010370();

  v21 = *(_QWORD *)(v14 + 112);
  *(_QWORD *)(v14 + 112) = v20;
  swift_release(v21);
  sub_10001210C();
  sub_10000BFB0();
  sub_1000111E4();
  sub_10000F3D8();
  sub_100010D3C();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
}

uint64_t sub_10002E404@<X0>(_BYTE *buffer@<X0>, audit_token_t *audittoken@<X2>, uint64_t a3@<X1>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE v25[8];
  _QWORD *v26;
  _QWORD v27[2];

  *buffer = 0;
  if (!buffer)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a3 - (uint64_t)buffer >= (uint64_t)&_mh_execute_header)
  {
LABEL_9:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20);
    __break(1u);
    return result;
  }
  result = proc_pidpath_audittoken(audittoken, buffer, a3 - (_DWORD)buffer);
  if ((int)result < 1)
  {
    v14 = 0xE700000000000000;
    v12 = 0x6E776F6E6B6E75;
  }
  else
  {
    v12 = String.init(cString:)(buffer, v7, v8, v9, v10, v11);
    v14 = v13;
    v27[0] = 47;
    v27[1] = 0xE100000000000000;
    __chkstk_darwin(v12);
    v26 = v27;
    swift_bridgeObjectRetain();
    v15 = sub_10002FF88(sub_10000C7E4, (uint64_t)v25, v12, v14);
    v17 = v16;
    result = swift_bridgeObjectRelease(v14);
    if ((v17 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v18 = String.index(after:)(v15, v12, v14);
      swift_bridgeObjectRelease(v14);
      v19 = sub_10002E5BC(v18, v12, v14);
      v21 = v20;
      v12 = static String._fromSubstring(_:)(v19, v22, v23, v20);
      v14 = v24;
      result = swift_bridgeObjectRelease(v21);
    }
  }
  *a4 = v12;
  a4[1] = v14;
  return result;
}

unint64_t sub_10002E5BC(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v4 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v4 < result >> 14)
  {
    __break(1u);
  }
  else
  {
    v5 = String.subscript.getter();
    swift_bridgeObjectRelease(a3);
    return v5;
  }
  return result;
}

BOOL sub_10002E65C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1000095E0(&qword_10008EBC8, a2, (uint64_t (*)(uint64_t))type metadata accessor for Client, (uint64_t)&unk_10006DC6C);
  v4 = Identifiable<>.id.getter(v2, v3);
  return v4 == Identifiable<>.id.getter(v2, v3);
}

void sub_10002E6D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt v5;

  v3 = *v2;
  v4 = sub_1000095E0(&qword_10008EBC8, a2, (uint64_t (*)(uint64_t))type metadata accessor for Client, (uint64_t)&unk_10006DC6C);
  v5 = Identifiable<>.id.getter(v3, v4);
  Hasher._combine(_:)(v5);
}

uint64_t sub_10002E730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  _QWORD *v13;

  v13 = (_QWORD *)swift_task_alloc(dword_10008EBF4);
  *(_QWORD *)(v8 + 16) = v13;
  *v13 = v8;
  v13[1] = sub_100030318;
  return sub_100006F64(a5, a6, a7, a8);
}

uint64_t sub_10002E7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v17[4];

  v6 = sub_100030348();
  if (_s10RTCUtility9XPCObjectOwet_0(a1, 1, v6) == 1)
  {
    sub_10001D7AC(a1, (uint64_t *)&unk_1000903E0);
    v7 = 7168;
  }
  else
  {
    v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v7 = v8 | 0x1C00;
  }
  v9 = *(_QWORD *)(a3 + 16);
  if (v9)
  {
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType);
    v13 = v12;
    swift_unknownObjectRelease(v9);
  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v14 = sub_100018E5C((uint64_t)&unk_100087668, 32);
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v17[0] = 0;
    v17[1] = 0;
    v15 = v17;
    v17[2] = v11;
    v17[3] = v13;
  }
  else
  {
    v15 = 0;
  }
  return swift_task_create(v7, v15, (char *)&type metadata for () + 8, &unk_10008EC08, v14);
}

uint64_t sub_10002E8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(dword_10008EC14);
  *(_QWORD *)(v6 + 16) = v9;
  *v9 = v6;
  v9[1] = sub_100030318;
  return sub_10000B180(a5, a6);
}

void sub_10002E94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  xpc_object_t v35;
  uint64_t v36;
  uint64_t v37;
  _xpc_connection_s *v38;

  sub_1000110BC();
  a21 = v23;
  a22 = v24;
  a20 = v22;
  if (qword_10008DFE0 != -1)
    swift_once(&qword_10008DFE0, sub_10002DF10);
  v25 = *(_QWORD *)(v22 + 408);
  v26 = sub_10000F3D0();
  sub_100015718(v26, (uint64_t)qword_10008EAE0);
  swift_errorRetain(v25);
  swift_errorRetain(v25);
  v27 = sub_100015738();
  v28 = static os_log_type_t.error.getter();
  v29 = os_log_type_enabled(v27, v28);
  v30 = *(_QWORD *)(v22 + 408);
  if (v29)
  {
    a10 = v22 + 160;
    v31 = (uint8_t *)sub_100012C5C(12);
    v32 = sub_100012C5C(32);
    a11 = v32;
    *(_DWORD *)v31 = 136446210;
    swift_getErrorValue(v30, v22 + 144, v22 + 16);
    v33 = Error.localizedDescription.getter(*(_QWORD *)(v22 + 24), *(_QWORD *)(v22 + 32));
    *(_QWORD *)(v22 + 160) = sub_100014F94(v33, v34, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22 + 160, v22 + 168, v31 + 4, v31 + 12);
    sub_10000A828();
    sub_10001E19C();
    sub_10001E19C();
    sub_100010670((void *)&_mh_execute_header, v27, v28, "failed initializing session: %{public}s", v31);
    sub_10000BE60(v32);
    sub_1000120F8(v32);
    sub_1000120F8((uint64_t)v31);
  }
  else
  {
    sub_10001E19C();
    sub_10001E19C();
  }

  v35 = sub_100015ACC();
  if (!v35)
  {
    swift_errorRelease(*(_QWORD *)(v22 + 408));
    goto LABEL_10;
  }
  v36 = *(_QWORD *)(v22 + 248);
  xpc_dictionary_set_string(v35, "error", "init failed");
  if (*(_QWORD *)(v36 + 112))
  {
    v37 = *(_QWORD *)(v22 + 408);
    v38 = (_xpc_connection_s *)sub_10001A190();
    sub_10001FD5C(v38);
    swift_errorRelease(v37);
    sub_10001A3C8();
    sub_100019ABC();
LABEL_10:
    sub_10001AFA8();
    sub_100010D58();
    sub_10000F3D8();
    sub_1000111E4();
    sub_10000BFB0();
    sub_10001210C();
    sub_10000B0DC();
    sub_100010384();
    sub_10000BD30();
    sub_10000BDD4();
    swift_task_dealloc(a10);
    sub_10000A858(*(uint64_t (**)(void))(v22 + 8));
    return;
  }
  __break(1u);
}

void sub_10002EB54(void *a1)
{
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  os_log_type_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  os_log_type_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v3 = v1;
  v5 = XPC_ERROR_CONNECTION_INVALID.getter();
  v6 = swift_unknownObjectRelease(v5);
  if ((void *)v5 == a1)
  {
    if (qword_10008DFE0 != -1)
      swift_once(&qword_10008DFE0, sub_10002DF10);
    v18 = sub_10000F3D0();
    v19 = (void *)sub_100015718(v18, (uint64_t)qword_10008EAE0);
    v20 = sub_100014530();
    Logger.logObject.getter(v20);
    v21 = sub_100015624();
    if (sub_10001CF9C(v21))
    {
      v22 = (_DWORD *)sub_100012C5C(12);
      v23 = sub_100012C5C(32);
      v55 = v23;
      *v22 = 136446210;
      v24 = *(_QWORD *)(v3 + 128);
      sub_1000111DC();
      v26 = sub_100015C14(v24, v25, &v55);
      sub_10001D390(v26, v27, v28, v29, v30, v31, v32, v33, v54, v55);
      sub_1000104E8();
      sub_10001B144();
      sub_10000AFA4((void *)&_mh_execute_header, v34, v35, "XPC client %{public}s closed connection");
      sub_10000BE60(v23);
      sub_1000120F8(v23);
      sub_1000120F8((uint64_t)v22);

    }
    else
    {

      sub_1000104E8();
    }
    sub_100030358();
  }
  else
  {
    v7 = XPC_ERROR_CONNECTION_INTERRUPTED.getter(v6);
    swift_unknownObjectRelease(v7);
    if ((void *)v7 == a1)
    {
      if (qword_10008DFE0 != -1)
        swift_once(&qword_10008DFE0, sub_10002DF10);
      v36 = sub_10000F3D0();
      v37 = (void *)sub_100015718(v36, (uint64_t)qword_10008EAE0);
      v38 = sub_100014530();
      Logger.logObject.getter(v38);
      v39 = sub_100015624();
      if (sub_10001CF9C(v39))
      {
        v40 = (_DWORD *)sub_100012C5C(12);
        v41 = sub_100012C5C(32);
        v55 = v41;
        *v40 = 136446210;
        v42 = *(_QWORD *)(v3 + 128);
        sub_1000111DC();
        v44 = sub_100015C14(v42, v43, &v55);
        sub_10001D390(v44, v45, v46, v47, v48, v49, v50, v51, v54, v55);
        sub_1000104E8();
        sub_10001B144();
        sub_10000AFA4((void *)&_mh_execute_header, v52, v53, "XPC client %{public}s interrupted connection");
        sub_10000BE60(v41);
        sub_1000120F8(v41);
        sub_1000120F8((uint64_t)v40);

      }
      else
      {

        swift_release(v3);
      }
    }
    else
    {
      v8 = xpc_copy_description(a1);
      v9 = String.init(cString:)(v8);
      v11 = v10;
      if (qword_10008DFE0 != -1)
        swift_once(&qword_10008DFE0, sub_10002DF10);
      v12 = sub_10000F3D0();
      v13 = sub_100015718(v12, (uint64_t)qword_10008EAE0);
      v14 = sub_100007840();
      Logger.logObject.getter(v14);
      v15 = sub_100015624();
      if (sub_10001AEC4(v15))
      {
        v16 = (uint8_t *)sub_100012C5C(12);
        v17 = sub_100012C5C(32);
        v55 = v17;
        *(_DWORD *)v16 = 136315138;
        sub_100007840();
        v54 = sub_100014F94(v9, v11, &v55);
        sub_100007864((uint64_t)&v54, (uint64_t)&v55, (uint64_t)(v16 + 4));
        sub_1000110B4(v11);
        sub_100010670((void *)&_mh_execute_header, v13, v2, "XPC connection triggered error: %s", v16);
        sub_10000BE60(v17);
        sub_1000120F8(v17);
        sub_1000120F8((uint64_t)v16);

      }
      else
      {

        sub_10000F3C8(v11);
      }
      sub_100030358();
      free(v8);
    }
  }
}

uint64_t sub_10002EEF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = a1;
  sub_100030350(v2);
  sub_10000CEA8();
  sub_10000CEB8();
  return sub_100012104();
}

uint64_t sub_10002EF50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 104);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 72);
    v3 = *(_QWORD *)(v0 + 64);
    sub_10001C454(*(_QWORD *)(v0 + 80) + 152, v0 + 40, 33);
    sub_10000CA18();
    v4 = sub_100019A20();
    sub_10000F2AC(v4, v3, v2);
    sub_100014538();
    v1 = *(_QWORD *)(v0 + 104);
    sub_10003036C();
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t *sub_10002EFD8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];

  v1 = *v0;
  sub_10001AAC8((uint64_t *)&unk_1000903E0);
  sub_100012C34();
  __chkstk_darwin(v2);
  sub_10000BE50();
  v5 = v4 - v3;
  sub_10001C454((uint64_t)(v0 + 19), (uint64_t)v13, 0);
  v6 = v0[19];
  v8 = v0[16];
  v7 = v0[17];
  v9 = sub_100030348();
  _s10RTCUtility9XPCObjectOwst_0(v5, 1, 1, v9);
  v10 = (_QWORD *)sub_100018E5C((uint64_t)&unk_100087690, 64);
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v6;
  v10[5] = v8;
  v10[6] = v7;
  v10[7] = v1;
  sub_10000CA18();
  sub_100007840();
  v11 = sub_10002E7AC(v5, (uint64_t)&unk_10008EC58, (uint64_t)v10);
  swift_release(v11);
  swift_release(v0[14]);

  swift_bridgeObjectRelease(v0[17]);
  swift_release(v0[18]);
  swift_bridgeObjectRelease(v0[19]);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10002F0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_10002F0FC, 0, 0);
}

#error "10002F204: call analysis failed (funcsize=144)"

uint64_t sub_10002F354()
{
  uint64_t v0;

  sub_100019A38();
  sub_10000BDC4(*(_QWORD *)(v0 + 64));
  return sub_100010514();
}

#error "10002F468: call analysis failed (funcsize=141)"

uint64_t sub_10002F5D8()
{
  uint64_t v0;

  sub_10002EFD8();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for Client()
{
  return objc_opt_self(_TtC13rtcreportingd6Client);
}

uint64_t destroy for ClientIdentity(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for ClientIdentity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for ClientIdentity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for ClientIdentity(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for ClientIdentity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientIdentity(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientIdentity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClientIdentity()
{
  return &type metadata for ClientIdentity;
}

void sub_10002F824()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  v1 = sub_1000095E0(&qword_10008EBC8, v0, (uint64_t (*)(uint64_t))type metadata accessor for Client, (uint64_t)&unk_10006DC6C);
  v2 = sub_100030388(v1);
  Hasher._combine(_:)(v2);
  Hasher._finalize()();
  sub_100010D30();
}

uint64_t sub_10002F87C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = Identifiable<>.id.getter(a1, a2);
  *a3 = result;
  return result;
}

void sub_10002F8A4()
{
  sub_10002F824();
}

void sub_10002F8C4(uint64_t a1, uint64_t a2)
{
  sub_10002E6D8(a1, a2);
}

void sub_10002F8E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  v2 = sub_1000095E0(&qword_10008EBC8, v1, (uint64_t (*)(uint64_t))type metadata accessor for Client, (uint64_t)&unk_10006DC6C);
  v3 = sub_100030388(v2);
  Hasher._combine(_:)(v3);
  Hasher._finalize()();
  sub_100010D30();
}

BOOL sub_10002F940(uint64_t *a1, uint64_t *a2)
{
  return sub_10002E65C(*a1, *a2);
}

uint64_t sub_10002F94C(uint64_t a1, uint64_t a2)
{
  return sub_1000095E0(&qword_10008EBC0, a2, (uint64_t (*)(uint64_t))type metadata accessor for Client, (uint64_t)&unk_10006DBF4);
}

void *sub_10002F978()
{
  return &protocol witness table for ObjectIdentifier;
}

uint64_t sub_10002F984(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10002F9E8;
  return v6(a1);
}

uint64_t sub_10002F9E8()
{
  uint64_t (**v0)(void);

  sub_10000BDC4(*((_QWORD *)*v0 + 2));
  return sub_10000BD38(v0[1]);
}

uint64_t sub_10002FA20(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10002FA40(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v6 = a4();
  v8 = sub_100014F94(v6, v7, a3);
  v9 = *a1;
  v10 = *a1 + 8;
  v12 = v8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9, v10);
  result = sub_10000A828();
  *a1 = v10;
  return result;
}

void *sub_10002FAAC(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory with negative count", 60, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1170, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1173, 0);
  }
  __break(1u);
  return result;
}

char *sub_10002FB70(char *__src, size_t __len, char *__dst)
{
  char v4;

  if ((__len & 0x8000000000000000) != 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

_BYTE **sub_10002FBF0(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t sub_10002FC00()
{
  uint64_t v0;

  sub_100010680();
  swift_release(*(_QWORD *)(v0 + 32));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 49, 7);
}

uint64_t sub_10002FC30()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_BYTE *)(v0 + 48);
  v3 = (_QWORD *)swift_task_alloc(dword_10008EBD4);
  *(_QWORD *)(v1 + 16) = v3;
  v4 = sub_100015430(v3);
  return sub_10002E8E8(v4, v5, v6, v7, v8, v2);
}

uint64_t sub_10002FC98()
{
  uint64_t (**v0)(void);

  sub_10000BDC4(*((_QWORD *)*v0 + 2));
  return sub_10000BD38(v0[1]);
}

uint64_t sub_10002FCCC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for XPCObject(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002FD08()
{
  _QWORD *v0;

  sub_100010680();
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_unknownObjectRelease(v0[7]);
  return swift_deallocObject(v0, 65, 7);
}

uint64_t sub_10002FD40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_BYTE *)(v0 + 64);
  v5 = (_QWORD *)swift_task_alloc(dword_10008EBE4);
  *(_QWORD *)(v1 + 16) = v5;
  v6 = sub_100015430(v5);
  return sub_10002E730(v6, v7, v8, v9, v10, v2, v3, v4);
}

uint64_t sub_10002FDBC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002FDE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10008EC04);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10002FC98;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10008EC00 + dword_10008EC00))(a1, v4);
}

uint64_t sub_10002FE50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001AAC8(&qword_10008FEE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10002FE98(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_8;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_10001AAC8(&qword_10008EC18);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v4[2] = v2;
      v4[3] = (2 * ((uint64_t)(v5 - 32) / 8)) | 1;
    }
    v6 = swift_bridgeObjectRetain(v1);
    v7 = specialized _ArrayBuffer._copyContents(initializing:)(v4 + 4, v2, v1, v6);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_8:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    v10 = swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9, v10);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

unint64_t sub_10002FF88(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  _QWORD v17[2];

  v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v5 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v5)
    return 0;
  v9 = 7;
  if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0)
    v9 = 11;
  v10 = v9 | (v5 << 16);
  while (1)
  {
    v10 = String.index(before:)(v10, a3, a4);
    v11 = String.subscript.getter(v10, a3, a4);
    v13 = v12;
    v17[0] = v11;
    v17[1] = v12;
    v14 = a1(v17);
    if (v4)
      break;
    v15 = v14;
    swift_bridgeObjectRelease(v13);
    if ((v15 & 1) != 0)
      return v10;
    if (v10 < 0x4000)
      return 0;
  }
  swift_bridgeObjectRelease(v13);
  return v10;
}

int64_t sub_100030088(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    v10 = *(_QWORD *)(v6 + 8 * v9);
    if (v10)
      return __clz(__rbit64(v10)) + (v9 << 6);
    v11 = (unint64_t)(result + 63) >> 6;
    v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      v10 = *(_QWORD *)(v6 + 8 * v9);
      if (v10)
        return __clz(__rbit64(v10)) + (v9 << 6);
      while (v5 + 3 < v11)
      {
        v10 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_10003016C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1000301EC(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

unint64_t sub_1000301F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008EC30;
  if (!qword_10008EC30)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10008EC30);
  }
  return result;
}

unint64_t sub_100030234()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008EC48;
  if (!qword_10008EC48)
  {
    v1 = sub_100027598(&qword_10008EC40);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, &qword_10008EC48);
  }
  return result;
}

uint64_t sub_100030278()
{
  uint64_t v0;

  sub_100010680();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000302A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v5 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(dword_10008EC54);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100030318;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v5;
  return swift_task_switch(sub_10002F0FC, 0, 0);
}

uint64_t sub_10003031C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a2;
  v4[6] = v3;
  v4[7] = *(_QWORD *)(*(_QWORD *)(result + 56) + 8 * v2);
  return result;
}

uint64_t sub_100030338(_BYTE *a1, uint64_t a2)
{
  audit_token_t *v2;
  uint64_t v3;

  return sub_10002E404(a1, v2, a2, (uint64_t *)(v3 - 104));
}

uint64_t sub_100030348()
{
  return type metadata accessor for TaskPriority(0);
}

uint64_t sub_100030350@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_100030358()
{
  uint64_t v0;

  return sub_100061C58(v0);
}

uint64_t sub_100030364(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_100014F94(a1, v3, a3);
}

uint64_t sub_10003036C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
}

uint64_t sub_100030374(uint64_t a1)
{
  uint64_t v1;

  return _s10RTCUtility9XPCObjectOwet_0(a1, 1, v1);
}

uint64_t sub_100030380()
{
  uint64_t v0;

  return sub_10002FCCC(v0);
}

uint64_t sub_100030388(uint64_t a1)
{
  uint64_t v1;

  return Identifiable<>.id.getter(v1, a1);
}

uint64_t sub_100030394(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = sub_100012C54(v7, v8, a1, a2);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (sub_100012C54(v14, v15, a1, a2) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100030450()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_10003045C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v1[3] = v0;
  v3 = v0;
  v4 = type metadata accessor for StorebagCache.Location(0);
  v25 = sub_100007830(*(_QWORD *)(v4 - 8));
  v2[4] = v25;
  v5 = type metadata accessor for DispatchQoS.QoSClass(0);
  v23 = *(_QWORD *)(v5 - 8);
  v24 = v5;
  v6 = sub_100007830(v23);
  v2[5] = v6;
  v22 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v20 = *(_QWORD *)(v22 - 8);
  v19 = sub_100007830(v20);
  v2[6] = v19;
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  v8 = sub_100007830(*(_QWORD *)(v7 - 8));
  v2[7] = v8;
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = sub_100007830(*(_QWORD *)(v9 - 8));
  v2[8] = v10;
  swift_defaultActor_initialize(v3);
  sub_1000301F8();
  static DispatchQoS.background.getter();
  v2[2] = _swiftEmptyArrayStorage;
  v11 = sub_1000095E0((unint64_t *)&qword_10008EC38, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v12 = sub_10001AAC8(&qword_10008EC40);
  v13 = sub_100009620(&qword_10008EC48, &qword_10008EC40);
  dispatch thunk of SetAlgebra.init<A>(_:)(v2 + 2, v12, v13, v7, v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 104))(v19, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v22);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 104))(v6, enum case for DispatchQoS.QoSClass.background(_:), v24);
  v14 = static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v6, v24);
  *(_QWORD *)(v21 + 120) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000022, 0x8000000100071940, v10, v8, v19, v14);
  v15 = type metadata accessor for URL(0);
  _s10RTCUtility9XPCObjectOwst_0(v25, 1, 1, v15);
  v16 = type metadata accessor for StorebagCache(0);
  sub_10001B14C(v16);
  v17 = (_QWORD *)swift_task_alloc(dword_100090AC4);
  v2[9] = v17;
  *v17 = v2;
  v17[1] = sub_1000306B8;
  return sub_100065CF4(v25);
}

uint64_t sub_1000306B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  sub_10000BDC4(*(_QWORD *)(*(_QWORD *)v1 + 72));
  *(_QWORD *)(v3 + 128) = a1;
  v4 = sub_10001AAC8(&qword_10008ED68);
  v5 = type metadata accessor for NWInterface.InterfaceType(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(v4, v8 + *(_QWORD *)(v6 + 72), v7 | 7);
  *(_OWORD *)(v9 + 16) = xmmword_10006D0C0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v9 + v8, enum case for NWInterface.InterfaceType.loopback(_:), v5);
  v10 = type metadata accessor for NWPathMonitor(0);
  sub_10001B14C(v10);
  *(_QWORD *)(v3 + 112) = NWPathMonitor.init(prohibitedInterfaceTypes:)(v9);
  return swift_task_switch(sub_1000307A8, v3, 0);
}

uint64_t sub_1000307A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v5 + 112);
  v8 = *(void **)(v5 + 120);
  swift_retain(v7);
  v9 = v8;
  NWPathMonitor.start(queue:)();

  swift_release(v7);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100030844()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));

  swift_release(*(_QWORD *)(v0 + 128));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100030878()
{
  uint64_t v0;

  sub_100030844();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for StorebagCoordinator()
{
  return objc_opt_self(_TtC13rtcreportingd19StorebagCoordinator);
}

uint64_t sub_1000308B0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1000095E0(&qword_10008ED50, a2, (uint64_t (*)(uint64_t))type metadata accessor for StorebagCoordinator, (uint64_t)&unk_10006DD50);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000308EC(uint64_t a1)
{
  uint64_t v1;

  return sub_10000937C(a1, v1);
}

uint64_t sub_1000308F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001AAC8(&qword_10008ED58);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

_QWORD *sub_10003096C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int64_t v24;

  v3 = v2;
  v4 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    sub_10005EC70(0, v5, 0);
    v7 = _swiftEmptyArrayStorage;
    v8 = (uint64_t *)(a1 + 48);
    while (1)
    {
      v24 = v5;
      v9 = v7;
      v10 = *(v8 - 2);
      v11 = *(v8 - 1);
      v12 = *v8;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
      v13 = v4;
      v7 = v4;
      v14 = sub_1000317C0(v10, v11, v12);
      if (v3)
        break;
      v17 = v14;
      v18 = v15;
      v19 = v16;
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v11);
      v7 = v9;
      v21 = v9[2];
      v20 = v9[3];
      if (v21 >= v20 >> 1)
      {
        sub_10005EC70((char *)(v20 > 1), v21 + 1, 1);
        v7 = v9;
      }
      v7[2] = v21 + 1;
      v22 = &v7[3 * v21];
      v22[4] = v17;
      v22[5] = v18;
      v22[6] = v19;
      v8 += 3;
      v3 = 0;
      v5 = v24 - 1;
      v4 = v13;
      if (v24 == 1)
      {
        swift_release(v13);
        return v7;
      }
    }
    swift_release(v4);
    swift_release(v9);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    swift_release(a2);
    return _swiftEmptyArrayStorage;
  }
  return v7;
}

uint64_t sub_100030AF8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = 0;
    v6 = (_OWORD *)(result + 40);
    v7 = _swiftEmptyArrayStorage;
    while (v5 < *(_QWORD *)(v3 + 16))
    {
      v8 = *((_QWORD *)v6 - 1);
      v15 = *v6;
      v16 = v8;
      v17 = v15;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(*((_QWORD *)&v15 + 1));
      v9 = sub_100032D98(&v16, a2);
      if (v2)
      {
        swift_release(a2);
        swift_release(v7);
        swift_bridgeObjectRelease(v3);
        swift_bridgeObjectRelease(*((_QWORD *)&v15 + 1));
        v13 = v15;
        goto LABEL_17;
      }
      if ((v9 & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native(v7);
        v18 = v7;
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_10005EC70(0, v7[2] + 1, 1);
          v7 = v18;
        }
        v11 = v7[2];
        v10 = v7[3];
        if (v11 >= v10 >> 1)
        {
          result = (uint64_t)sub_10005EC70((char *)(v10 > 1), v11 + 1, 1);
          v7 = v18;
        }
        v7[2] = v11 + 1;
        v12 = &v7[3 * v11];
        v12[4] = v8;
        *(_OWORD *)(v12 + 5) = v15;
      }
      else
      {
        swift_bridgeObjectRelease(*((_QWORD *)&v15 + 1));
        result = swift_bridgeObjectRelease(v15);
      }
      ++v5;
      v6 = (_OWORD *)((char *)v6 + 24);
      if (v4 == v5)
        goto LABEL_15;
    }
    __break(1u);
  }
  else
  {
    v7 = _swiftEmptyArrayStorage;
LABEL_15:
    swift_release(a2);
    v13 = v3;
LABEL_17:
    swift_bridgeObjectRelease(v13);
    return (uint64_t)v7;
  }
  return result;
}

id sub_100030C9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  uint64_t v12;
  id v14;

  v2 = v1;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v5 = v4;
  v14 = 0;
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "fileHandleForWritingToURL:error:", v4, &v14);

  v7 = v14;
  if (v6)
  {
    v8 = type metadata accessor for URL(0);
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v10 = v7;
    v9(a1, v8);
  }
  else
  {
    v11 = v14;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow();
    v12 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

uint64_t sub_100030DB0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.data(for:delegate:)[1]);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100030E04;
  return NSURLSession.data(for:delegate:)(a1, 0);
}

uint64_t sub_100030E04(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_10001AB34();
  if (!v3)
  {
    sub_10000AFB8();

  }
  return sub_10001B084(*(uint64_t (**)(void))(v4 + 8));
}

uint64_t sub_100030E4C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10008EF84);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003446C;
  return sub_100030DB0(a1);
}

uint64_t sub_100030E9C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Swift::Bool v14;
  uint64_t v15;
  id v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _BYTE v23[16];
  _QWORD v24[2];

  v2 = v1;
  v4 = sub_10000F3C0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v23[-v9];
  strcpy((char *)v24, "/tmp/rtc_mock");
  HIWORD(v24[1]) = -4864;
  if ((a1 & 1) != 0)
    v11 = 0x6D69746C6165725FLL;
  else
    v11 = 0;
  if ((a1 & 1) != 0)
    v12 = 0xE900000000000065;
  else
    v12 = 0xE000000000000000;
  v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease(v12);
  URL.init(fileURLWithPath:)(v24[0], v24[1]);
  sub_10000A828();
  v14 = URL.checkResourceIsReachable()();
  if (v15)
  {
    swift_errorRelease(v15);
  }
  else if (v14)
  {
    goto LABEL_11;
  }
  v16 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter();
  v17 = String._bridgeToObjectiveC()();
  sub_10000A828();
  objc_msgSend(v16, "createFileAtPath:contents:attributes:", v17, 0, 0);

LABEL_11:
  sub_100033478();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v8, v10, v4);
  v18 = sub_100030C9C((uint64_t)v8);
  NSFileHandle.seekToEnd()();
  if (v19)
  {
    result = swift_unexpectedError(v19, "rtcreportingd/BackendHTTP.swift", 31, 1, 28);
    __break(1u);
  }
  else
  {
    v20 = sub_10001AAC8(&qword_10008EF58);
    v21 = swift_allocObject(v20, 28, 7);
    *(_DWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 16) = v18;
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
    *(_QWORD *)(v2 + 16) = v21;
    return v2;
  }
  return result;
}

uint64_t sub_1000310DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_1000310F4, 0, 0);
}

uint64_t sub_1000310F4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v1 = URLRequest.httpBody.getter();
  if (v2 >> 60 != 15)
  {
    v3 = v1;
    v4 = v2;
    v5 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 24) + 16);
    v6 = swift_task_alloc(32);
    *(_QWORD *)(v6 + 16) = v3;
    *(_QWORD *)(v6 + 24) = v4;
    v7 = (uint64_t)&v5[4];
    v5 += 6;
    os_unfair_lock_lock(v5);
    sub_1000311A8(v7, *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
    os_unfair_lock_unlock(v5);
    v8 = sub_100010E9C();
    sub_1000229EC(v8, v9);
    sub_10000BFB0();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000311A8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t result;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v6 = type metadata accessor for String.Encoding(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a2;
  v17 = a3;
  v10 = sub_10002C31C();
  result = NSFileHandle.write<A>(contentsOf:)(&v16, &type metadata for Data, v10);
  if (!v3)
  {
    static String.Encoding.utf8.getter(v12);
    v13 = String.data(using:allowLossyConversion:)(v9, 0, 10, 0xE100000000000000);
    v15 = v14;
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (v15 >> 60 == 15)
    {
      __break(1u);
    }
    else
    {
      v16 = v13;
      v17 = v15;
      NSFileHandle.write<A>(contentsOf:)(&v16, &type metadata for Data, v10);
      return sub_1000229EC(v13, v15);
    }
  }
  return result;
}

uint64_t sub_1000312CC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for MockHTTPSending()
{
  return objc_opt_self(_TtC13rtcreportingd15MockHTTPSending);
}

uint64_t sub_100031310(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10008EF54);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003446C;
  return sub_1000310DC(a1);
}

uint64_t sub_100031360()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026B1C(v0, qword_1000972A8);
  sub_100015718(v0, (uint64_t)qword_1000972A8);
  return Logger.init(subsystem:category:)(0xD000000000000017, 0x8000000100071220, 0x2D646E656B636162, 0xEC00000070747468);
}

uint64_t sub_1000313DC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 0x656D695474736F70 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D695474736F70, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6449746E65696C63 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449746E65696C63, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x73746E657665 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73746E657665, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100031528()
{
  return 3;
}

uint64_t sub_100031530(char a1)
{
  if (!a1)
    return 0x656D695474736F70;
  if (a1 == 1)
    return 0x6449746E65696C63;
  return 0x73746E657665;
}

uint64_t sub_100031584(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;

  v18 = a3;
  v10 = sub_10001AAC8(&qword_10008EF88);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  sub_10001D44C(a1, v14);
  v16 = sub_100034200();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BackendHTTP.POSTData.CodingKeys, &type metadata for BackendHTTP.POSTData.CodingKeys, v16, v14, v15);
  v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v22, v10, a5);
  if (!v5)
  {
    v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a2, v18, &v21, v10);
    v20 = a4;
    v19 = 2;
    sub_10001AAC8(&qword_10008EF98);
    sub_10003423C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_100031700()
{
  char *v0;

  return sub_100031530(*v0);
}

uint64_t sub_100031708@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000313DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10003172C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100031528();
  *a1 = result;
  return result;
}

uint64_t sub_100031750(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100034200();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100031778(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100034200();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000317A0(_QWORD *a1)
{
  uint64_t v1;

  return sub_100031584(a1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(double *)v1);
}

uint64_t sub_1000317C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = a3;
  v14 = a1;
  v15 = a2;
  v5 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_filters);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = v5 + 32;
    swift_bridgeObjectRetain(a2);
    sub_10000CA18();
    swift_bridgeObjectRetain(v5);
    while (1)
    {
      sub_10000A19C(v7, (uint64_t)v11);
      v8 = v12;
      v9 = v13;
      sub_10001D44C(v11, v12);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(&v14, v8, v9);
      if (v4)
        break;
      sub_100015060(v11);
      v7 += 40;
      if (!--v6)
      {
        swift_bridgeObjectRelease(v5);
        return v14;
      }
    }
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v16);
    sub_100015060(v11);
  }
  else
  {
    v7 = a1;
    swift_bridgeObjectRetain(a2);
    sub_10000CA18();
  }
  return v7;
}

uint64_t sub_1000318E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_filters);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  v7 = v3 + 32;
  swift_bridgeObjectRetain(*(_QWORD *)(v2 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_filters));
  while (1)
  {
    sub_10000A19C(v7, (uint64_t)v11);
    v8 = v12;
    v9 = v13;
    sub_10001D44C(v11, v12);
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 24))(a1, a2, v8, v9) & 1) != 0)
      break;
    sub_100015060(v11);
    v7 += 40;
    if (!--v4)
    {
      sub_10000781C();
      return 0;
    }
  }
  sub_10000781C();
  sub_100015060(v11);
  return 1;
}

uint64_t sub_1000319AC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[27] = a1;
  v2[28] = v1;
  v2[29] = *v1;
  v3 = type metadata accessor for EventValue(0);
  v2[30] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[31] = v4;
  v2[32] = sub_100007830(v4);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_10001AAC8(&qword_10008EF68) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[33] = swift_task_alloc(v5);
  v2[34] = swift_task_alloc(v5);
  v6 = sub_10000F3C0();
  v2[35] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[36] = v7;
  v2[37] = sub_100007830(v7);
  v8 = type metadata accessor for URLRequest(0);
  v2[38] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[39] = v9;
  v2[40] = sub_100007830(v9);
  v10 = type metadata accessor for JSONEncoder.OutputFormatting(0);
  v2[41] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[42] = v11;
  v2[43] = sub_100007830(v11);
  return sub_10001A1B0((uint64_t)sub_100031A84, (uint64_t)v1, 0);
}

uint64_t sub_100031A84()
{
  double *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  double v25;
  unint64_t v26;
  uint64_t *v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *__dst;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  sub_100014530();
  v1 = sub_100010E9C();
  v4 = sub_10003096C(v1, v2);
  v5 = *((_QWORD *)v0 + 28);
  sub_10000BDBC();
  v6 = sub_100030AF8((uint64_t)v4, v5);
  if (!*(_QWORD *)(v6 + 16))
  {
    sub_10000781C();
    sub_10001D898();
    sub_100010D58();
    sub_10000F3D8();
    sub_1000111E4();
    sub_10000BFB0();
    sub_10001210C();
    sub_100010520();
    __asm { BR              X0 }
  }
  if (qword_10008DFE8 != -1)
    swift_once(&qword_10008DFE8, sub_100031360);
  v7 = *((_QWORD *)v0 + 28);
  v8 = type metadata accessor for Logger(0);
  *((_QWORD *)v0 + 44) = sub_100015718(v8, (uint64_t)qword_1000972A8);
  swift_retain_n(v7, 2);
  swift_bridgeObjectRetain(v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v59 = *((_QWORD *)v0 + 35);
    v12 = *((_QWORD *)v0 + 28);
    v13 = sub_100012C5C(22);
    v60 = sub_100012C5C(32);
    *(_DWORD *)v13 = 134349314;
    v0[25] = *(double *)(v6 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 25, v0 + 26, v13 + 4, v13 + 12);
    sub_10000781C();
    *(_WORD *)(v13 + 12) = 2082;
    v14 = sub_1000342A0(&qword_10008EF60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v59, v14);
    *((_QWORD *)v0 + 26) = sub_10001F588(v15, v16, v17, v18, v19, v20, v21, v22, v53, v54, v55, (uint64_t)__dst, (uint64_t)(v0 + 25));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 26, v0 + 27, v13 + 14, v13 + 22);
    swift_release_n(v12, 2);
    sub_10000A828();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "submitting %{public}ld events to %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v60, 1);
    sub_1000120F8(v60);
    sub_1000120F8(v13);

  }
  else
  {
    v23 = *((_QWORD *)v0 + 28);

    swift_release_n(v23, 2);
    sub_10000781C();
  }
  v24 = v0 + 12;
  v25 = sub_100032CF0();
  if ((sub_1000318E0(0x6449746E65696C63, 0xE800000000000000) & 1) != 0)
  {
    v58 = 0;
    v26 = 0xE000000000000000;
  }
  else
  {
    v27 = (uint64_t *)(*((_QWORD *)v0 + 28) + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_clientID);
    v26 = v27[1];
    v58 = *v27;
    swift_bridgeObjectRetain(v26);
  }
  v28 = *(_QWORD *)(v6 + 16);
  if (v28)
  {
    v57 = v26;
    sub_10005EC8C(0, v28, 0);
    v29 = _swiftEmptyArrayStorage[2];
    v30 = 48;
    do
    {
      v31 = *(_QWORD *)(v6 + v30);
      v32 = _swiftEmptyArrayStorage[3];
      sub_10000CA18();
      if (v29 >= v32 >> 1)
        sub_10005EC8C(v32 > 1, v29 + 1, 1);
      _swiftEmptyArrayStorage[2] = v29 + 1;
      _swiftEmptyArrayStorage[v29 + 4] = v31;
      v30 += 24;
      ++v29;
      --v28;
    }
    while (v28);
    sub_10000781C();
    v26 = v57;
    v24 = v0 + 12;
  }
  else
  {
    sub_10000781C();
  }
  v33 = *((_QWORD *)v0 + 42);
  v34 = *((_QWORD *)v0 + 43);
  v35 = *((_QWORD *)v0 + 41);
  v36 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  *((_QWORD *)v0 + 45) = JSONEncoder.init()();
  v37 = sub_10001AAC8(&qword_10008E9B0);
  v38 = swift_allocObject(v37, ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(_QWORD *)(v33 + 72), *(unsigned __int8 *)(v33 + 80) | 7);
  *(_OWORD *)(v38 + 16) = xmmword_10006D0C0;
  static JSONEncoder.OutputFormatting.prettyPrinted.getter();
  *((_QWORD *)v0 + 23) = v38;
  v39 = sub_1000342A0(&qword_10008E9B8, (uint64_t (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting, (uint64_t)&protocol conformance descriptor for JSONEncoder.OutputFormatting);
  v40 = sub_10001AAC8(&qword_10008E9C0);
  v41 = sub_100033910();
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 23, v40, v41, v35, v39);
  dispatch thunk of JSONEncoder.outputFormatting.setter(v34);
  v0[12] = v25;
  *((_QWORD *)v0 + 13) = v58;
  *((_QWORD *)v0 + 14) = v26;
  *((_QWORD *)v0 + 15) = _swiftEmptyArrayStorage;
  v42 = sub_100033954();
  v43 = dispatch thunk of JSONEncoder.encode<A>(_:)(v24, &type metadata for BackendHTTP.POSTData, v42);
  v0[46] = 0.0;
  *((_QWORD *)v0 + 47) = v43;
  *((_QWORD *)v0 + 48) = v44;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  sub_10000BDE4();
  if (qword_10008E090 != -1)
    swift_once(&qword_10008E090, sub_100058528);
  if ((byte_100097400 & 1) != 0)
  {
    v45 = *((_QWORD *)v0 + 48);
    sub_100034470();
    sub_10001038C(v46);
    sub_10001B398();
    __asm { BR              X10 }
  }
  v47 = qword_1000973E8;
  *((_QWORD *)v0 + 49) = qword_1000973E8;
  if (!v47)
  {
    __break(1u);
    JUMPOUT(0x100032548);
  }
  v48 = (double *)(*((_QWORD *)v0 + 28) + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_name);
  v0[50] = *v48;
  v0[51] = v48[1];
  swift_retain(v47);
  sub_100010520();
  return swift_task_switch(v49, v50, v51);
}

uint64_t sub_100032558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 368);
  sub_10002B830(*(_QWORD *)(v0 + 400), *(void **)(v0 + 408), *(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 384));
  *(_QWORD *)(v0 + 416) = v1;
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 224);
    v3 = sub_100032C2C;
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 224);
    swift_release(*(_QWORD *)(v0 + 392));
    v3 = sub_1000325C8;
    v2 = v4;
  }
  return swift_task_switch(v3, v2, 0);
}

void sub_1000325C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 384);
  sub_100034470();
  sub_10001038C(v2);
  sub_10001B398();
  __asm { BR              X10 }
}

uint64_t sub_10003264C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  _QWORD *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48[14];

  v6 = sub_10001C45C();
  sub_100015690(v6);
  sub_100033B58(v0, v10, v11, v0, v1, (uint64_t)v48);
  sub_10001B158();
  sub_10000BFB0();
  if (v2)
  {
    sub_10000786C();
    v12 = sub_10000786C();
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)sub_100012C5C(12);
      v16 = sub_100012C5C(32);
      v48[0] = v16;
      *(_DWORD *)v15 = 136446210;
      ((void (*)(uint64_t))swift_getErrorValue)(v5);
      v17 = sub_10003448C();
      *(_QWORD *)(v3 + 192) = sub_100014F94(v17, v18, v48);
      ((void (*)(uint64_t, uint8_t *, uint8_t *))UnsafeMutableRawBufferPointer.copyMemory(from:))(v3 + 200, v15 + 4, v15 + 12);
      sub_10000A828();
      sub_10001B9F8();
      sub_10001B9F8();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "failed to compress payload: %{public}s", v15, 0xCu);
      sub_100015C1C();
      sub_1000120F8(v16);
      sub_1000120F8((uint64_t)v15);

      sub_10001B9F8();
    }
    else
    {
      sub_10001B9F8();
      sub_10001B9F8();
      sub_10001B9F8();

    }
    sub_10000F3E0();
    v7 = 0xF000000000000000;
  }
  else
  {
    v7 = v48[1];
    sub_10000CEC4();
    if (!v9 & v8)
    {
      sub_10000F3E0();
    }
    else
    {
      sub_100019AC4();
      sub_100010E9C();
    }
  }
  sub_10001FF00();
  sub_1000194F0();
  sub_10000CEC4();
  if (!(!v9 & v8))
    sub_100012C8C((uint64_t)"Content-Encoding");
  sub_10001E43C();
  v46 = v19;
  v20 = *(_QWORD *)(v3 + 224);
  sub_10000A890(0xD000000000000010, 0x8000000100071A60);
  sub_10001806C(0xD000000000000010, 0x8000000100071A60);
  *(_QWORD *)(v3 + 152) = sub_1000344AC();
  v21 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  sub_10001CD78(v21, v22);
  sub_10000781C();
  memcpy(v4, (const void *)(v20 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_extraHeaders), 0x50uLL);
  sub_1000243DC();
  sub_100034498();
  v44 = v23;
  sub_100012124();
  v45 = v24;
  v42 = v24 - 1;
  v43 = v25 + 104;
  while (1)
  {
    if (v5)
    {
      sub_10001A3D0();
LABEL_15:
      sub_100019A48();
      *(_QWORD *)(v46 + 8) = v7;
      v26 = sub_10001B08C();
      sub_1000111EC(v26);
      sub_100018E94();
      goto LABEL_25;
    }
    v27 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      JUMPOUT(0x100032B68);
    }
    if (v27 < v45)
    {
      if (*(_QWORD *)(v44 + 8 * v27))
        goto LABEL_19;
      if (v20 + 2 >= v45)
      {
        ++v20;
      }
      else
      {
        if (*(_QWORD *)(v44 + 8 * (v20 + 2)))
          goto LABEL_19;
        if (v20 + 3 >= v45)
        {
          v20 += 2;
        }
        else
        {
          if (*(_QWORD *)(v44 + 8 * (v20 + 3)))
            goto LABEL_19;
          if (v20 + 4 >= v45)
          {
            v20 += 3;
          }
          else
          {
            if (*(_QWORD *)(v44 + 8 * (v20 + 4)))
            {
LABEL_19:
              sub_1000110D8();
              goto LABEL_15;
            }
            while (v20 + 5 < v45)
            {
              if (*(_QWORD *)(v43 + 8 * v20++))
                goto LABEL_19;
            }
            v20 = v42;
          }
        }
      }
    }
    v28 = sub_10001B08C();
    sub_10001E4D4(v28);
LABEL_25:
    sub_10000B0E4();
    v29 = sub_10001B08C();
    sub_10001FE0C(v29);
    if (v9)
      break;
    sub_10000BFC0();
    sub_10001D9D8(v30);
    v31 = sub_100014580();
    switch(v31)
    {
      case 0:
        v34 = **(_QWORD **)(v3 + 256);
        goto LABEL_33;
      case 2:
        *(_QWORD *)(v3 + 160) = **(_QWORD **)(v3 + 256);
        v32 = &type metadata for UInt64;
        v33 = &protocol witness table for UInt64;
        goto LABEL_32;
      case 1:
        *(_QWORD *)(v3 + 168) = **(_QWORD **)(v3 + 256);
        v32 = &type metadata for Int64;
        v33 = &protocol witness table for Int64;
LABEL_32:
        v34 = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
LABEL_33:
        sub_10001BB60(v34);
        sub_10000781C();
        sub_10000BDE4();
        break;
      default:
        v35 = *(_QWORD *)(v3 + 256);
        sub_10000781C();
        sub_100033B1C(v35);
        break;
    }
  }
  sub_10001FD64();
  v37 = sub_10001AED4(OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_target);
  v47 = v38;
  v39 = (_QWORD *)swift_task_alloc(v37);
  *(_QWORD *)(v3 + 440) = v39;
  v40 = sub_10001D3AC(v39, (uint64_t)sub_100032B7C);
  return v47(v40);
}

uint64_t sub_100032B7C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 440);
  *(_QWORD *)(*v1 + 448) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100032C9C;
  else
    v4 = sub_100032BD8;
  return sub_10001A1B0((uint64_t)v4, *(_QWORD *)(v2 + 224), 0);
}

uint64_t sub_100032BD8()
{
  uint64_t v0;

  sub_10001D1A0();
  sub_10000AFB8();
  sub_100010D60();
  sub_10001D898();
  sub_100010D58();
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  sub_10001210C();
  return sub_10001A198(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100032C2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 360);
  swift_release(*(_QWORD *)(v0 + 392));
  sub_10000BD44(v1);
  swift_release(v2);
  sub_100019334();
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  sub_10001210C();
  sub_10000B0DC();
  return sub_10001B084(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100032C9C()
{
  uint64_t v0;

  sub_10001D1A0();
  sub_10000AFB8();
  sub_100010D60();
  sub_100019334();
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  sub_10001210C();
  sub_10000B0DC();
  return sub_10001A198(*(uint64_t (**)(void))(v0 + 8));
}

double sub_100032CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000318E0(0x656D695474736F70, 0xE800000000000000);
  result = 0.0;
  if ((v4 & 1) == 0)
  {
    static Date.now.getter(v4);
    getTimeIntervalSince1970(Date:)();
    v7 = v6;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return (double)v7;
  }
  return result;
}

uint64_t sub_100032D98(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = sub_100041344(*a1, a1[1], a1[2]);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v3;
  v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_allowedCategories);
  if (*(_QWORD *)(v6 + 16))
  {
    sub_10005FF8C(v3, v6);
    if ((v7 & 1) == 0)
    {
      if (qword_10008DFE8 != -1)
        swift_once(&qword_10008DFE8, sub_100031360);
      v20 = type metadata accessor for Logger(0);
      sub_100015718(v20, (uint64_t)qword_1000972A8);
      v21 = swift_retain_n(a2, 2);
      v12 = Logger.logObject.getter(v21);
      v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = swift_slowAlloc(22, -1);
        v25 = swift_slowAlloc(32, -1);
        v26 = v5;
        v28 = v25;
        *(_DWORD *)v14 = 134218242;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 4, v14 + 12);
        *(_WORD *)(v14 + 12) = 2082;
        swift_retain(a2);
        v22 = sub_100033114();
        v24 = v23;
        swift_release(a2);
        v26 = sub_100014F94(v22, v24, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 14, v14 + 22);
        swift_release_n(a2, 2);
        swift_bridgeObjectRelease(v24);
        v18 = "removing event with category %ld from submission to %{public}s due to allowlist";
        goto LABEL_15;
      }
LABEL_16:

      swift_release_n(a2, 2);
      return 0;
    }
  }
  v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_deniedCategories);
  if (!*(_QWORD *)(v8 + 16))
    return 1;
  sub_10005FF8C(v5, v8);
  if ((v9 & 1) == 0)
    return 1;
  if (qword_10008DFE8 != -1)
    swift_once(&qword_10008DFE8, sub_100031360);
  v10 = type metadata accessor for Logger(0);
  sub_100015718(v10, (uint64_t)qword_1000972A8);
  v11 = swift_retain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v12, v13))
    goto LABEL_16;
  v14 = swift_slowAlloc(22, -1);
  v25 = swift_slowAlloc(32, -1);
  v26 = v5;
  v28 = v25;
  *(_DWORD *)v14 = 134218242;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 4, v14 + 12);
  *(_WORD *)(v14 + 12) = 2082;
  swift_retain(a2);
  v15 = sub_100033114();
  v17 = v16;
  swift_release(a2);
  v26 = sub_100014F94(v15, v17, &v28);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 14, v14 + 22);
  swift_release_n(a2, 2);
  swift_bridgeObjectRelease(v17);
  v18 = "removing event with category %ld from submission to %{public}s due to denylist";
LABEL_15:
  _os_log_impl((void *)&_mh_execute_header, v12, v13, v18, (uint8_t *)v14, 0x16u);
  swift_arrayDestroy(v25, 1);
  swift_slowDealloc(v25, -1, -1);
  swift_slowDealloc(v14, -1, -1);

  return 0;
}

uint64_t sub_100033114()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_name);
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_name + 8);
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 539828258;
  v4._object = (void *)0xE400000000000000;
  String.append(_:)(v4);
  v5 = sub_10000F3C0();
  v6 = sub_1000342A0(&qword_10008EF60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v5, v6);
  String.append(_:)(v7);
  sub_10000781C();
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 8744;
}

uint64_t sub_1000331F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release(*(_QWORD *)(v0 + 112));
  v1 = v0 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_url;
  v2 = sub_10000F3C0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100015060((_QWORD *)(v0 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_target));
  sub_10001FE94(OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_clientID);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_extraHeaders + 32);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_extraHeaders + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_extraHeaders + 72));
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  sub_10000781C();
  sub_100034484(OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_filters);
  sub_10001FE94(OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_name);
  sub_100034484(OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_allowedCategories);
  sub_100034484(OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_deniedCategories);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000332C8()
{
  uint64_t v0;

  sub_1000331F0();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000332E0()
{
  return type metadata accessor for BackendHTTP(0);
}

uint64_t type metadata accessor for BackendHTTP(uint64_t a1)
{
  uint64_t result;

  result = qword_10008EE40;
  if (!qword_10008EE40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BackendHTTP);
  return result;
}

uint64_t sub_100033320(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_10006DE38;
    v4[4] = &unk_10006DE50;
    v4[5] = &unk_10006DE68;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[7] = &unk_10006DE50;
    v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[10] = &unk_10006DE80;
    result = swift_updateClassMetadata2(a1, 256, 11, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000333E0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10008EE54);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003342C;
  return sub_1000319AC(a1);
}

uint64_t sub_10003342C()
{
  uint64_t v0;

  sub_10001AB34();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100033458()
{
  return sub_100033114();
}

unint64_t sub_100033478()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008EA10;
  if (!qword_10008EA10)
  {
    v1 = objc_opt_self(NSFileHandle);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10008EA10);
  }
  return result;
}

uint64_t sub_1000334B4@<X0>(Bytef *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uLong v14;
  uLong v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  z_stream strm;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a2 - (_QWORD)a1;
  if (a1)
    v15 = v14;
  else
    v15 = 0;
  memset(&strm.total_in, 0, 20);
  memset(&strm.total_out, 0, 52);
  strm.adler = 0;
  strm.reserved = 0;
  if ((v15 & 0x8000000000000000) != 0)
  {
    v38 = "Negative value is not representable";
    v39 = 35;
  }
  else
  {
    if (!HIDWORD(v15))
    {
      strm.avail_in = v15;
      if (a1)
      {
        strm.next_in = a1;
        v16 = deflateInit2_(&strm, -1, 8, 31, 8, 0, "1.2.12", 112);
        if (v16)
        {
          v17 = v16;
          v18 = sub_100033C48();
          v19 = swift_allocError(&_s9ZLibErrorON, v18, 0, 0);
          *v20 = v17;
          return swift_willThrow(v19, v20, v21, v22, v23, v24, v25, v26);
        }
        if ((deflateBound(&strm, v14) & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else
        {
          v41 = Data.init(count:)();
          v42 = v28;
          sub_100033C84((uint64_t)&v41);
          if ((_DWORD)v29 != 1)
          {
            v33 = v29;
            v34 = Logger.init()(v29);
            v35 = Logger.logObject.getter(v34);
            v36 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v35, v36))
            {
              v37 = (uint8_t *)swift_slowAlloc(8, -1);
              *(_DWORD *)v37 = 67240192;
              HIDWORD(v40) = v33;
              UnsafeMutableRawBufferPointer.copyMemory(from:)((char *)&v40 + 4, &v41, v37 + 4, v37 + 8);
              _os_log_impl((void *)&_mh_execute_header, v35, v36, "zlib returned unexpected status %{public}d", v37, 8u);
              swift_slowDealloc(v37, -1, -1);
            }

            (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
            *(_OWORD *)a5 = xmmword_10006DD90;
            sub_100010720(v41, v42);
            return deflateEnd(&strm);
          }
          if ((strm.total_out & 0x8000000000000000) == 0)
          {
            Data._Representation.count.setter();
            v30 = v41;
            v31 = v42;
            v32 = Data.count.getter(v41, v42);
            if (v32 >= Data.count.getter(a3, a4))
            {
              sub_100010720(v30, v31);
              *(_OWORD *)a5 = xmmword_10006DD90;
            }
            else
            {
              *(_QWORD *)a5 = v30;
              *(_QWORD *)(a5 + 8) = v31;
            }
            return deflateEnd(&strm);
          }
        }
        __break(1u);
      }
      __break(1u);
    }
    v38 = "Not enough bits to represent the passed value";
    v39 = 45;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v38, v39, 2, "Swift/Integers.swift", 20);
  __break(1u);
  return result;
}

uint64_t sub_10003380C@<X0>(z_streamp strm@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, _DWORD *a4@<X8>)
{
  uLong v5;
  uLong total_out;
  BOOL v7;
  uLong v8;
  uint64_t result;
  const char *v10;
  uint64_t v11;

  if (a2)
    v5 = a3 - a2;
  else
    v5 = 0;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_13;
  total_out = strm->total_out;
  v7 = v5 >= total_out;
  v8 = v5 - total_out;
  if (v7)
  {
    if (HIDWORD(v8))
    {
      v10 = "Not enough bits to represent the passed value";
      v11 = 45;
      goto LABEL_15;
    }
    strm->avail_out = v8;
    if (!a2)
      goto LABEL_12;
    if ((total_out & 0x8000000000000000) == 0)
    {
      strm->next_out = (Bytef *)(a2 + total_out);
      result = deflate(strm, 4);
      *a4 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  v10 = "Negative value is not representable";
  v11 = 35;
LABEL_15:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/Integers.swift", 20);
  __break(1u);
  return result;
}

unint64_t sub_100033910()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008E9C8;
  if (!qword_10008E9C8)
  {
    v1 = sub_100027598(&qword_10008E9C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008E9C8);
  }
  return result;
}

unint64_t sub_100033954()
{
  unint64_t result;

  result = qword_10008EF70;
  if (!qword_10008EF70)
  {
    result = swift_getWitnessTable(&unk_10006DF5C, &type metadata for BackendHTTP.POSTData);
    atomic_store(result, (unint64_t *)&qword_10008EF70);
  }
  return result;
}

uint64_t sub_100033990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t result;
  Bytef *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Bytef *v16;
  uint64_t v17;

  result = __DataStorage._bytes.getter();
  v11 = (Bytef *)result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_13;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = &v11[v15];
  if (v11)
    v17 = (uint64_t)v16;
  else
    v17 = 0;
  sub_1000334B4(v11, v17, a3, a4, a5);
  return sub_100010720(a3, a4);
}

uint64_t sub_100033A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100033A90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001AAC8(&qword_10008EF68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100033AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100033B1C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EventValue(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100033B58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;
  char v14;

  v9 = a1;
  v10 = a2;
  v11 = BYTE2(a2);
  v12 = BYTE3(a2);
  v13 = BYTE4(a2);
  v14 = BYTE5(a2);
  sub_1000334B4((Bytef *)&v9, (uint64_t)&v9 + a3, a4, a5, a6);
  return sub_100010720(a4, a5);
}

unint64_t sub_100033C48()
{
  unint64_t result;

  result = qword_10008EF78;
  if (!qword_10008EF78)
  {
    result = swift_getWitnessTable(&unk_10006DF1C, &_s9ZLibErrorON);
    atomic_store(result, &qword_10008EF78);
  }
  return result;
}

void sub_100033C84(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_100033CE0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  z_stream *v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v3;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  v8 = BYTE4(a1);
  v9 = BYTE5(a1);
  v10 = BYTE6(a1);
  result = sub_100033FB4((uint64_t)&v6, BYTE6(a1), v2);
  v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *v1 = v6;
  v1[1] = v5;
  return result;
}

uint64_t sub_100033F14(uint64_t a1, uint64_t a2, uint64_t a3, z_stream *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  result = __DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v9 = result;
  result = __DataStorage._offset.getter();
  v10 = a1 - result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v11 = __OFSUB__(a2, a1);
  v12 = a2 - a1;
  if (v11)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v13 = __DataStorage._length.getter();
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  result = sub_10003380C(a4, v9 + v10, v9 + v10 + v14, &v15);
  if (!v4)
    return v15;
  return result;
}

uint64_t sub_100033FB4(uint64_t a1, uint64_t a2, z_stream *a3)
{
  uint64_t v3;
  uint64_t result;
  unsigned int v5;

  result = sub_10003380C(a3, a1, a1 + a2, &v5);
  if (!v3)
    return v5;
  return result;
}

_DWORD *_s9ZLibErrorOwCP(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t _s9ZLibErrorOwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _s9ZLibErrorOwst(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 4) = v3;
  return result;
}

ValueMetadata *_s9ZLibErrorOMa()
{
  return &_s9ZLibErrorON;
}

uint64_t destroy for BackendHTTP.POSTData(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for BackendHTTP.POSTData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for BackendHTTP.POSTData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for BackendHTTP.POSTData(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for BackendHTTP.POSTData(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  a1[1] = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(a1[2]);
  v4 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for BackendHTTP.POSTData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BackendHTTP.POSTData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BackendHTTP.POSTData()
{
  return &type metadata for BackendHTTP.POSTData;
}

unint64_t sub_100034200()
{
  unint64_t result;

  result = qword_10008EF90;
  if (!qword_10008EF90)
  {
    result = swift_getWitnessTable(&unk_10006E048, &type metadata for BackendHTTP.POSTData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008EF90);
  }
  return result;
}

unint64_t sub_10003423C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008EFA0;
  if (!qword_10008EFA0)
  {
    v1 = sub_100027598(&qword_10008EF98);
    sub_10000C318();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008EFA0);
  }
  return result;
}

uint64_t sub_1000342A0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BackendHTTP.POSTData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10003432C + 4 * byte_10006DDB5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100034360 + 4 * byte_10006DDB0[v4]))();
}

uint64_t sub_100034360(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100034368(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100034370);
  return result;
}

uint64_t sub_10003437C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100034384);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100034388(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100034390(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BackendHTTP.POSTData.CodingKeys()
{
  return &type metadata for BackendHTTP.POSTData.CodingKeys;
}

unint64_t sub_1000343B0()
{
  unint64_t result;

  result = qword_10008EFA8;
  if (!qword_10008EFA8)
  {
    result = swift_getWitnessTable(&unk_10006E020, &type metadata for BackendHTTP.POSTData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008EFA8);
  }
  return result;
}

unint64_t sub_1000343F0()
{
  unint64_t result;

  result = qword_10008EFB0;
  if (!qword_10008EFB0)
  {
    result = swift_getWitnessTable(&unk_10006DF90, &type metadata for BackendHTTP.POSTData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008EFB0);
  }
  return result;
}

unint64_t sub_100034430()
{
  unint64_t result;

  result = qword_10008EFB8;
  if (!qword_10008EFB8)
  {
    result = swift_getWitnessTable(&unk_10006DFB8, &type metadata for BackendHTTP.POSTData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008EFB8);
  }
  return result;
}

uint64_t sub_100034484@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1));
}

uint64_t sub_10003448C()
{
  uint64_t v0;

  return Error.localizedDescription.getter(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
}

uint64_t sub_1000344AC()
{
  uint64_t v0;
  uint64_t v1;

  return Data.count.getter(v1, v0);
}

uint64_t sub_1000344B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_100020A48(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t sub_100034514(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_100020A48(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_10000558C(v7, v8, v9, v10);
  return a1;
}

uint64_t sub_100034580(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_10000558C(v5, v7, v6, v8);
  return a1;
}

uint64_t sub_1000345CC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 1u)
    return *(unsigned __int8 *)(a1 + 24);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1000345E4(uint64_t result, unsigned int a2)
{
  uint64_t v2;

  v2 = a2 - 2;
  if (a2 >= 2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    LOBYTE(a2) = 2;
    *(_QWORD *)result = v2;
  }
  *(_BYTE *)(result + 24) = a2;
  return result;
}

void type metadata accessor for StorebagSectionBackend()
{
  sub_10000B0C0();
}

void sub_10003460C()
{
  sub_10003472C();
}

void sub_100034628(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100034634(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000A430();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003465C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000A430();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100034684()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_1000346A8(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x73746E65696C63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73746E65696C63, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

void sub_10003472C()
{
  _QWORD v0[9];

  Hasher.init(_seed:)(v0, 0);
  sub_10001D274();
  Hasher._finalize()();
  sub_100010D30();
}

uint64_t sub_10003475C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_10000A20C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

void sub_100034788(uint64_t a1)
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, a1);
  sub_10001D274();
  Hasher._finalize()();
  sub_100010D30();
}

uint64_t sub_1000347B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result;

  result = sub_1000346A8(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_1000347E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000349C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100034808(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000349C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_100034830(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  v4 = sub_10001AAC8(&qword_10008EFE8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10001CC78();
  v6 = sub_10001D44C(a1, a1[3]);
  v7 = sub_1000349C0();
  sub_10001B094((uint64_t)&unk_100087BA0, (uint64_t)&unk_100087BA0, v7);
  if (v1)
  {
    sub_100015060(a1);
  }
  else
  {
    v8 = sub_10001AAC8(&qword_10008EFF8);
    v9 = sub_10000A3CC(&qword_10008F000, &qword_10008EFF8, (void (*)(void))sub_1000349FC);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v8, v10, v4, v8, v9);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
    v6 = v12;
    sub_100015060(a1);
  }
  return v6;
}

_QWORD *sub_10003495C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_100034830(a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t sub_100034984()
{
  unint64_t result;

  result = qword_10008EFE0;
  if (!qword_10008EFE0)
  {
    result = swift_getWitnessTable(&unk_10006F0B4, &unk_100088BC0);
    atomic_store(result, (unint64_t *)&qword_10008EFE0);
  }
  return result;
}

unint64_t sub_1000349C0()
{
  unint64_t result;

  result = qword_10008EFF0;
  if (!qword_10008EFF0)
  {
    result = swift_getWitnessTable(&unk_10006E2FC, &unk_100087BA0);
    atomic_store(result, (unint64_t *)&qword_10008EFF0);
  }
  return result;
}

unint64_t sub_1000349FC()
{
  unint64_t result;

  result = qword_10008F008;
  if (!qword_10008F008)
  {
    result = swift_getWitnessTable(&unk_10006F08C, &unk_100088B28);
    atomic_store(result, (unint64_t *)&qword_10008F008);
  }
  return result;
}

void type metadata accessor for StorebagSectionBackendTTR.CodingKeys()
{
  sub_10000B0C0();
}

uint64_t sub_100034A48(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100034A88 + 4 * byte_10006E0A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100034AA8 + 4 * byte_10006E0A5[v4]))();
}

_BYTE *sub_100034A88(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100034AA8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100034AB0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100034AB8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100034AC0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100034AC8(_DWORD *result)
{
  *result = 0;
  return result;
}

void type metadata accessor for StorebagSectionBackendHTTP.CodingKeys()
{
  sub_10000B0C0();
}

void type metadata accessor for StorebagSectionBackendTTR()
{
  sub_10000B0C0();
}

uint64_t sub_100034AF0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *sub_100034B18(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *sub_100034B54(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *sub_100034BB8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_100034BFC(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100034C3C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for StorebagSectionBackendHTTP()
{
  sub_10000B0C0();
}

unint64_t sub_100034C8C()
{
  unint64_t result;

  result = qword_10008F010;
  if (!qword_10008F010)
  {
    result = swift_getWitnessTable(&unk_10006E21C, &unk_100087C30);
    atomic_store(result, (unint64_t *)&qword_10008F010);
  }
  return result;
}

unint64_t sub_100034CCC()
{
  unint64_t result;

  result = qword_10008F018;
  if (!qword_10008F018)
  {
    result = swift_getWitnessTable(&unk_10006E2D4, &unk_100087BA0);
    atomic_store(result, (unint64_t *)&qword_10008F018);
  }
  return result;
}

unint64_t sub_100034D0C()
{
  unint64_t result;

  result = qword_10008F020;
  if (!qword_10008F020)
  {
    result = swift_getWitnessTable(&unk_10006E244, &unk_100087BA0);
    atomic_store(result, (unint64_t *)&qword_10008F020);
  }
  return result;
}

unint64_t sub_100034D4C()
{
  unint64_t result;

  result = qword_10008F028;
  if (!qword_10008F028)
  {
    result = swift_getWitnessTable(&unk_10006E26C, &unk_100087BA0);
    atomic_store(result, (unint64_t *)&qword_10008F028);
  }
  return result;
}

unint64_t sub_100034D8C()
{
  unint64_t result;

  result = qword_10008F030;
  if (!qword_10008F030)
  {
    result = swift_getWitnessTable(&unk_10006E18C, &unk_100087C30);
    atomic_store(result, (unint64_t *)&qword_10008F030);
  }
  return result;
}

unint64_t sub_100034DCC()
{
  unint64_t result;

  result = qword_10008F038;
  if (!qword_10008F038)
  {
    result = swift_getWitnessTable(&unk_10006E1B4, &unk_100087C30);
    atomic_store(result, (unint64_t *)&qword_10008F038);
  }
  return result;
}

uint64_t sub_100034E0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v5 = v3 - 1;
    v6 = type metadata accessor for URL(0);
    sub_10001458C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, a1 + v7 + *(_QWORD *)(v8 + 72) * v5, v6);
    v9 = a2;
    v10 = 0;
    v11 = v6;
  }
  else
  {
    v11 = type metadata accessor for URL(0);
    v9 = a2;
    v10 = 1;
  }
  return _s10RTCUtility9XPCObjectOwst_0(v9, v10, 1, v11);
}

uint64_t sub_100034E9C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026B1C(v0, qword_10008F040);
  sub_100015718(v0, (uint64_t)qword_10008F040);
  return Logger.init(subsystem:category:)(0xD000000000000017, 0x8000000100071220, 0xD000000000000013, 0x8000000100071C10);
}

uint64_t (*sub_100034F1C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  sub_10001C454(v1 + 144, a1, 33);
  return j__swift_endAccess;
}

uint64_t sub_100034F58(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  *(_QWORD *)(v2 + 128) = v1;
  *(_BYTE *)(v2 + 264) = a1;
  *(_QWORD *)(v2 + 136) = *(_QWORD *)v1;
  v3 = sub_10001AAC8(&qword_10008E7F8);
  *(_QWORD *)(v2 + 144) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 152) = v4;
  *(_QWORD *)(v2 + 160) = sub_100007830(v4);
  v5 = swift_defaultActor_initialize(v1);
  *(_QWORD *)(v1 + 120) = sub_10001039C(v5, v6, (uint64_t)&type metadata for Int64);
  *(_WORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = &_swiftEmptySetSingleton;
  v7 = sub_10001AAC8(&qword_10008F270);
  *(_QWORD *)(v1 + 144) = sub_10001039C(v7, v8, v7);
  *(_QWORD *)(v1 + 152) = 0;
  v9 = sub_10000D2BC();
  *(_QWORD *)(v2 + 168) = v9;
  *(_QWORD *)(v1 + 168) = sub_10001039C(v9, v10, v9);
  v11 = type metadata accessor for StorebagCoordinator();
  swift_allocObject(v11, 136, 15);
  v12 = (_QWORD *)swift_task_alloc(dword_10008ED64);
  *(_QWORD *)(v2 + 176) = v12;
  sub_10000D22C(v12, (uint64_t)sub_100035054);
  return sub_10003045C();
}

uint64_t sub_100035054(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100019A38();
  v3 = *(_QWORD *)(v2 + 128);
  sub_10000BDC4(*(_QWORD *)(v2 + 176));
  *(_QWORD *)(v3 + 112) = a1;
  v4 = type metadata accessor for SubmitEagerEventsActivity();
  v5 = sub_1000095E0(&qword_10008FEA0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SubmitEagerEventsActivity, (uint64_t)&unk_10006E74C);
  v6 = type metadata accessor for XPCActivity();
  swift_allocObject(v6, 137, 15);
  *(_QWORD *)(v3 + 160) = sub_10004A744(v4, v5);
  sub_10000CEB8();
  return sub_10001808C(v7, v8, v9);
}

void sub_1000350F4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  if ((*(_BYTE *)(v0 + 264) & 1) != 0)
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    (*(void (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
  }
  else
  {
    v1 = qword_1000973C8;
    *(_QWORD *)(v0 + 184) = qword_1000973C8;
    if (v1)
    {
      sub_100019A20();
      v2 = (_QWORD *)sub_10000BFD4();
      *(_QWORD *)(v0 + 192) = v2;
      sub_10000D22C(v2, (uint64_t)sub_100035178);
      sub_10003A5C8(50);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_100035178()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  sub_1000110BC();
  v2 = v0;
  v4 = v3;
  v5 = (_QWORD *)*v1;
  v7 = *(_QWORD *)(*v1 + 184);
  v6 = *(_QWORD *)(*v1 + 192);
  v8 = *v1;
  *(_QWORD *)(*v1 + 200) = v4;
  swift_task_dealloc(v6);
  v9 = swift_release(v7);
  if (v2)
  {
    if (qword_10008DFF0 != -1)
      swift_once(&qword_10008DFF0, sub_100034E9C);
    v10 = sub_10000F3D0();
    sub_10001B284(v10, (uint64_t)qword_10008F040);
    v11 = sub_100011200();
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.fault.getter();
    if (sub_10001FDE4(v12))
    {
      v50 = v8;
      v14 = (uint8_t *)sub_100012C5C(12);
      v53 = sub_100012C5C(32);
      *(_DWORD *)v14 = 136446210;
      sub_10001F500(v2, (uint64_t)(v5 + 14));
      v15 = sub_1000384E0();
      v5[15] = sub_10001B29C(v15, v16, v17, v18);
      sub_100015C3C((uint64_t)(v5 + 15), (uint64_t)(v5 + 16));
      sub_10000A828();
      sub_10000BE9C();
      sub_10000BE9C();
      sub_100010670((void *)&_mh_execute_header, v12, v13, "failed to load abandoned sessions: %{public}s", v14);
      sub_10000BE60(v53);
      sub_1000120F8(v53);
      v19 = (uint64_t)v14;
      v8 = v50;
      sub_1000120F8(v19);

      sub_10000BE9C();
    }
    else
    {
      sub_10000BE9C();
      sub_10000BE9C();
      sub_10000BE9C();

    }
  }
  else
  {
    v20 = v4[2];
    v5[26] = v20;
    if (v20)
    {
      if (v20 == 50)
      {
        if (qword_10008DFF0 != -1)
          swift_once(&qword_10008DFF0, sub_100034E9C);
        v21 = sub_10000F3D0();
        sub_100010688(v21, (uint64_t)qword_10008F040);
        v22 = sub_100010E94();
        if (sub_10001CF9C(v22))
        {
          v23 = (_WORD *)sub_100012C5C(2);
          *v23 = 0;
          sub_100015AE0((void *)&_mh_execute_header, v24, v25, "too many abandoned sessions - dropping all sessions");
          sub_1000120F8((uint64_t)v23);
        }

        v26 = qword_1000973C8;
        v5[27] = qword_1000973C8;
        if (v26)
        {
          sub_100019A20();
          v27 = (_QWORD *)sub_10000BE68();
          v5[28] = v27;
          *v27 = v8;
          v27[1] = sub_100035544;
          sub_10001CFAC();
          sub_10003A65C();
          return;
        }
        goto LABEL_25;
      }
      v28 = v5[25];
      v51 = v8;
      v52 = v5[20];
      v30 = v5[18];
      v29 = v5[19];
      sub_10001562C(v9, v20);
      v31 = 0;
      sub_10001458C();
      v33 = v28 + v32;
      v35 = *(_QWORD *)(v34 + 72);
      do
      {
        v36 = (_QWORD *)v5[20];
        v37 = (uint64_t)v36 + *(int *)(v30 + 48);
        sub_100037D60(v33, v37);
        v38 = *(_QWORD *)(v37 + 56);
        *v36 = *(_QWORD *)(v37 + 48);
        *(_QWORD *)(v52 + 8) = v38;
        v40 = _swiftEmptyArrayStorage[2];
        v39 = _swiftEmptyArrayStorage[3];
        swift_bridgeObjectRetain();
        if (v40 >= v39 >> 1)
          sub_10005ECD4(v39 > 1, v40 + 1, 1);
        v41 = v5[26];
        v42 = v5[20];
        ++v31;
        _swiftEmptyArrayStorage[2] = v40 + 1;
        sub_1000383AC(v42, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(_QWORD *)(v29 + 72) * v40);
        v33 += v35;
      }
      while (v31 != v41);
      sub_100015740();
      v8 = v51;
    }
    else
    {
      sub_10000A828();
    }
    v43 = (uint64_t *)(v5[16] + 168);
    sub_100025340((uint64_t)_swiftEmptyArrayStorage);
    v45 = v44;
    sub_10001C454((uint64_t)v43, (uint64_t)(v5 + 11), 1);
    v46 = *v43;
    *v43 = v45;
    swift_bridgeObjectRelease(v46);
  }
  v47 = qword_1000973C8;
  v5[29] = qword_1000973C8;
  if (v47)
  {
    sub_100019A20();
    v48 = (_QWORD *)sub_10000BE68();
    v5[30] = v48;
    *v48 = v8;
    v48[1] = sub_10003583C;
    sub_10001CFAC();
    sub_10003A730(v49);
    return;
  }
  __break(1u);
LABEL_25:
  __break(1u);
}

void sub_100035544()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;

  v3 = (_QWORD *)*v1;
  v42 = v3;
  sub_10001C5A8(v3[28], &v42);
  if (v0)
  {
    sub_100015740();
    sub_10000CEA8();
    if (qword_10008DFF0 != -1)
      swift_once(&qword_10008DFF0, sub_100034E9C);
    v4 = sub_10000F3D0();
    sub_10001B284(v4, (uint64_t)qword_10008F040);
    v5 = sub_100011200();
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.fault.getter();
    if (sub_10001FDE4(v6))
    {
      v38 = v2;
      v8 = (uint8_t *)sub_100012C5C(12);
      v9 = sub_100012C5C(32);
      v41 = (_QWORD *)v9;
      *(_DWORD *)v8 = 136446210;
      sub_10001F500(v0, (uint64_t)(v3 + 14));
      v10 = sub_1000384E0();
      v3[15] = sub_100014F94(v10, v11, (uint64_t *)&v41);
      sub_100015C3C((uint64_t)(v3 + 15), (uint64_t)(v3 + 16));
      sub_10000A828();
      sub_10000BE9C();
      sub_10000BE9C();
      sub_100010670((void *)&_mh_execute_header, v6, v7, "failed to load abandoned sessions: %{public}s", v8);
      sub_10000BE60(v9);
      sub_1000120F8(v9);
      v12 = (uint64_t)v8;
      v2 = v38;
      sub_1000120F8(v12);

      sub_10000BE9C();
    }
    else
    {
      sub_10000BE9C();
      sub_10000BE9C();
      sub_10000BE9C();

    }
  }
  else
  {
    v39 = v2;
    v13 = sub_10000CEA8();
    v15 = v3[25];
    v14 = v3[26];
    v40 = v3[20];
    v17 = v3[18];
    v16 = v3[19];
    v41 = _swiftEmptyArrayStorage;
    sub_10001562C(v13, v14);
    v18 = 0;
    v19 = _swiftEmptyArrayStorage;
    sub_10001458C();
    v21 = v15 + v20;
    v23 = *(_QWORD *)(v22 + 72);
    do
    {
      v24 = (_QWORD *)v3[20];
      v25 = (uint64_t)v24 + *(int *)(v17 + 48);
      sub_100037D60(v21, v25);
      v26 = *(_QWORD *)(v25 + 56);
      *v24 = *(_QWORD *)(v25 + 48);
      *(_QWORD *)(v40 + 8) = v26;
      v41 = v19;
      v27 = v19[2];
      v28 = v19[3];
      swift_bridgeObjectRetain();
      if (v27 >= v28 >> 1)
      {
        sub_10005ECD4(v28 > 1, v27 + 1, 1);
        v19 = v41;
      }
      v29 = v3[26];
      v30 = v3[20];
      ++v18;
      v19[2] = v27 + 1;
      sub_1000383AC(v30, (uint64_t)v19+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v27);
      v21 += v23;
    }
    while (v18 != v29);
    sub_100015740();
    v31 = v3[16];
    sub_100025340((uint64_t)v19);
    v33 = v32;
    sub_10001C454(v31 + 168, (uint64_t)(v3 + 11), 1);
    v34 = *(_QWORD *)(v31 + 168);
    *(_QWORD *)(v31 + 168) = v33;
    swift_bridgeObjectRelease(v34);
    v2 = v39;
  }
  v35 = qword_1000973C8;
  v3[29] = qword_1000973C8;
  if (v35)
  {
    sub_100019A20();
    v36 = (_QWORD *)sub_10000BE68();
    v3[30] = v36;
    *v36 = v2;
    v36[1] = sub_10003583C;
    sub_100010EA8();
    sub_10003A730(v37);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10003583C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  sub_10000C040();
  sub_10001C5A8(v2[30], v4);
  v5 = v2[29];
  if (v1)
  {
    swift_errorRelease(v1);
    swift_release(v5);
  }
  else
  {
    swift_release(v2[29]);
    v6 = *(void **)(v0 + 16);
    sub_10000781C();
    if (v6)
    {
      if (qword_10008DFF0 != -1)
        swift_once(&qword_10008DFF0, sub_100034E9C);
      v7 = sub_10000F3D0();
      sub_100010688(v7, (uint64_t)qword_10008F040);
      v8 = sub_10000BFB8();
      if (sub_10001CF9C(v8))
      {
        v9 = (_WORD *)sub_100012C5C(2);
        *v9 = 0;
        sub_100015AE0((void *)&_mh_execute_header, v10, v11, "found eager events, starting activity");
        sub_1000120F8((uint64_t)v9);
      }

      byte_10008F678 = 0;
    }
  }
  v12 = (_QWORD *)swift_task_alloc(dword_10008F09C);
  v2[31] = v12;
  *v12 = v3;
  v12[1] = sub_100035944;
  return sub_100036F00();
}

uint64_t sub_100035944()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10000B0F0();
  v1 = *(_QWORD *)(v0 + 128);
  sub_10000F498(v2);
  swift_task_dealloc(v3);
  *(_QWORD *)(v0 + 256) = *(_QWORD *)(v1 + 160);
  sub_100019A20();
  sub_10000F3E8();
  return sub_10001A1B0(v4, v5, v6);
}

uint64_t sub_10003598C()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  __int128 v7;

  v7 = *(_OWORD *)(v0 + 128);
  sub_1000384EC();
  sub_10000CEA8();
  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v2 = MCEffectiveSettingsChangedNotification;
  v3 = swift_allocObject(&unk_100087EB8, 32, 7);
  *(_OWORD *)(v3 + 16) = v7;
  *(_QWORD *)(v0 + 48) = sub_1000383A4;
  *(_QWORD *)(v0 + 56) = v3;
  *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = sub_100035C80;
  *(_QWORD *)(v0 + 40) = &unk_100087ED0;
  v4 = _Block_copy((const void *)(v0 + 16));
  swift_retain(v7);
  sub_10000BDB4();
  v5 = objc_msgSend(v1, "addObserverForName:object:queue:usingBlock:", v2, 0, 0, v4);
  _Block_release(v4);

  swift_unknownObjectRelease(v5);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
}

uint64_t sub_100035AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  v3 = sub_10001AAC8((uint64_t *)&unk_1000903E0);
  __chkstk_darwin(v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008DFF0 != -1)
    swift_once(&qword_10008DFF0, sub_100034E9C);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100015718(v6, (uint64_t)qword_10008F040);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "received notification for MC effective settings change", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = type metadata accessor for TaskPriority(0);
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)v5, 1, 1, v11);
  v12 = (_QWORD *)swift_allocObject(&unk_100087F08, 40, 7);
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = a2;
  swift_retain(a2);
  v13 = sub_10002E7AC((uint64_t)v5, (uint64_t)&unk_10008F288, (uint64_t)v12);
  return swift_release(v13);
}

uint64_t sub_100035C38()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10008F09C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100030318;
  return sub_100036F00();
}

uint64_t sub_100035C80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100035D24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 288);
  *(_QWORD *)(v0 + 152) = v1;
  swift_errorRetain(v1);
  v2 = sub_10001AAC8(&qword_10008E7E8);
  if (swift_dynamicCast(v0 + 308, v0 + 152, v2, &unk_100089D40, 0) && *(_BYTE *)(v0 + 308) == 1)
  {
    swift_errorRelease(*(_QWORD *)(v0 + 288));
    swift_errorRelease(*(_QWORD *)(v0 + 152));
    sub_10001FEA0();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 152));
    sub_100010D58();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100035DDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000384EC();
  sub_10000CEB8();
  return sub_10001A1B0(v0, v1, v2);
}

uint64_t sub_100035E10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v1 + 152);
  v3 = __OFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 152) = v4;
    v5 = *(_QWORD *)(v0 + 280);
    sub_10001FEA0();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
  }
  return result;
}

void (*sub_100035E60(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_100037F1C(v6, a2, a3);
  return sub_100035ECC;
}

void sub_100035ECC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  sub_10000A828();
  sub_100019468(v1);
}

uint64_t sub_100035EFC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_10001211C((uint64_t)sub_100035F10, v0);
}

uint64_t sub_100035F10()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  os_log_type_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (*(uint64_t *)(*(_QWORD *)(v2 + 16) + 152) <= 0)
  {
    if (qword_10008DFF0 != -1)
      swift_once(&qword_10008DFF0, sub_100034E9C);
    v11 = sub_10000F3D0();
    sub_100010688(v11, (uint64_t)qword_10008F040);
    v12 = sub_100015624();
    if (sub_100019A28(v12))
    {
      v13 = (_WORD *)sub_100012C5C(2);
      sub_100038500(v13);
      sub_10001B3B0((void *)&_mh_execute_header, v14, v15, "dropping eager submit activity");
      sub_1000120F8(v1);
    }

    byte_10008F678 = 1;
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (qword_10008DFF0 != -1)
      swift_once(&qword_10008DFF0, sub_100034E9C);
    v3 = sub_10000F3D0();
    sub_100010688(v3, (uint64_t)qword_10008F040);
    v4 = sub_100015624();
    if (sub_100019A28(v4))
    {
      v5 = (_WORD *)sub_100012C5C(2);
      sub_100038500(v5);
      sub_10001B3B0((void *)&_mh_execute_header, v6, v7, "re-registering eager submit activity");
      sub_1000120F8(v1);
    }
    v8 = *(_QWORD *)(v2 + 16);

    v9 = *(_QWORD *)(v8 + 160);
    *(_QWORD *)(v2 + 24) = v9;
    return sub_10001808C((uint64_t)sub_100036054, v9, 0);
  }
}

uint64_t sub_100036054()
{
  uint64_t v0;

  sub_1000384EC();
  return sub_10000BD38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003607C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  uint64_t v4;
  uint64_t *v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  Swift::Int v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52[3];

  v4 = v2;
  v7 = (uint64_t *)(v2 + 120);
  sub_10001C454(v2 + 120, (uint64_t)v52, 33);
  sub_10000CA18();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + 120));
  v9 = *(_QWORD *)(v2 + 120);
  v51 = v9;
  *(_QWORD *)(v4 + 120) = 0x8000000000000000;
  v10 = sub_100038494();
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v11 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_22;
  }
  v15 = v10;
  v16 = v11;
  sub_10001AAC8(&qword_10008F268);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v14))
  {
LABEL_5:
    v19 = *v7;
    *v7 = v51;
    swift_bridgeObjectRelease(v19);
    v20 = *v7;
    if ((v16 & 1) == 0)
    {
      sub_10000F294(v15, a1, a2, 0, *v7);
      sub_10000CA18();
    }
    v21 = *(_QWORD *)(v20 + 56);
    v22 = *(_QWORD *)(v21 + 8 * v15);
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      *(_QWORD *)(v21 + 8 * v15) = v24;
      swift_endAccess(v52);
      sub_10000AF70();
      v25 = *(unsigned __int16 *)(v4 + 128);
      v26 = (unsigned __int16)(v25 + 1);
      v3 = v26 != v25 + 1;
      if (v26 == v25 + 1)
        LOWORD(v25) = v25 + 1;
      *(_WORD *)(v4 + 128) = v25;
      if (qword_10008DFF0 == -1)
      {
LABEL_11:
        v27 = sub_10000F3D0();
        sub_100015718(v27, (uint64_t)qword_10008F040);
        sub_1000384B0();
        v28 = swift_retain_n(v4, 4);
        v29 = Logger.logObject.getter(v28);
        v30 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v29, v30))
        {

          sub_10000BE04();
          swift_release_n(v4, 4);
          return !v3;
        }
        v31 = sub_100012C5C(26);
        v32 = sub_100012C5C(32);
        v52[0] = v32;
        *(_DWORD *)v31 = 136446722;
        sub_10000CA18();
        v33 = sub_100014F94(a1, a2, v52);
        sub_10001E1A4(v33, (uint64_t)v52, v34, v31 + 12, v35, v36, v37, v38, v33);
        sub_1000110B4(a2);
        *(_WORD *)(v31 + 12) = 2048;
        v39 = *v7;
        if (*(_QWORD *)(*v7 + 16))
        {
          sub_10000CA18();
          sub_100018040();
          v40 = sub_100038494();
          if ((v41 & 1) != 0)
          {
            v42 = *(_QWORD *)(*(_QWORD *)(v39 + 56) + 8 * v40);
            sub_1000104E8();
            sub_10000F3C8(a2);
            sub_10000A828();
LABEL_19:
            v51 = v42;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v31 + 14, v31 + 22);
            sub_10000AF70();
            sub_1000104E8();
            *(_WORD *)(v31 + 22) = 512;
            v43 = *(_WORD *)(v4 + 128);
            v44 = sub_1000104E8();
            LOWORD(v51) = v43;
            sub_10001E1A4(v44, (uint64_t)&v51 + 2, v45, v31 + 26, v46, v47, v48, v49, v51);
            sub_1000104E8();
            _os_log_impl((void *)&_mh_execute_header, v29, v30, "registered use for session config for %{public}s, now %lld uses. Total Active Sessions: %hu", (uint8_t *)v31, 0x1Au);
            sub_10000BE60(v32);
            sub_1000120F8(v32);
            sub_1000120F8(v31);

            return !v3;
          }
          sub_1000104E8();
          sub_10000F3C8(a2);
          sub_10000A828();
        }
        else
        {
          sub_10000AF70();
          sub_1000104E8();
        }
        v42 = 0;
        goto LABEL_19;
      }
LABEL_23:
      swift_once(&qword_10008DFF0, sub_100034E9C);
      goto LABEL_11;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v17 = sub_100038494();
  if ((v16 & 1) == (v18 & 1))
  {
    v15 = v17;
    goto LABEL_5;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000363B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;

  v6[14] = a5;
  v6[15] = a6;
  v6[13] = a4;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  v6[16] = v7;
  *v7 = v6;
  v7[1] = sub_100036414;
  return static Task<>.sleep(nanoseconds:)(10000000000);
}

uint64_t sub_100036414()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100019A38();
  v3 = *(_QWORD *)(v2 + 128);
  *v4 = *v1;
  *(_QWORD *)(v2 + 136) = v0;
  swift_task_dealloc(v3);
  sub_10000CEB8();
  return sub_10001A1B0(v5, v6, v7);
}

uint64_t sub_100036468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, NSObject *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  os_log_type_t v31;
  _BOOL4 v32;
  unint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t (*v47)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, NSObject *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  unint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  _QWORD *v64;

  sub_1000110BC();
  a21 = v24;
  a22 = v25;
  a20 = v22;
  v26 = (uint64_t)(v22 + 12);
  if (qword_10008DFF0 != -1)
    swift_once(&qword_10008DFF0, sub_100034E9C);
  v27 = v22[15];
  v28 = sub_10000F3D0();
  v29 = sub_100015718(v28, (uint64_t)qword_10008F040);
  v30 = sub_10000BD20(v27);
  Logger.logObject.getter(v30);
  v31 = sub_10000BD4C();
  v32 = sub_1000384A0(v31);
  v33 = v22[15];
  if (v32)
  {
    a10 = v29;
    v34 = v22[14];
    a9 = v22 + 5;
    v35 = (uint8_t *)sub_100012C5C(12);
    v36 = sub_100012C5C(32);
    a11 = v36;
    *(_DWORD *)v35 = 136446210;
    sub_10000B0D4();
    v37 = v34;
    v26 = (uint64_t)(v22 + 12);
    v22[12] = sub_100014F94(v37, v33, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22 + 12, v22 + 13, v35 + 4, v35 + 12);
    sub_1000110B4(v33);
    sub_100010670((void *)&_mh_execute_header, v29, v23, "eviction timer fired: %{public}s", v35);
    sub_10000BE60(v36);
    sub_1000120F8(v36);
    sub_1000120F8((uint64_t)v35);
  }
  else
  {
    sub_10000F3C8(v22[15]);
  }

  v38 = v22[13];
  sub_10000CEB8();
  sub_10001C454(v39, v40, v41);
  v42 = *(_QWORD *)(v38 + 120);
  if (*(_QWORD *)(v42 + 16))
  {
    v43 = v22[14];
    sub_100010644();
    sub_100018040();
    v44 = sub_100010870(v43);
    if ((v45 & 1) != 0)
    {
      v46 = *(_QWORD *)(*(_QWORD *)(v42 + 56) + 8 * v44);
      sub_10000A828();
      sub_1000120B4();
      if (v46)
      {
        sub_10001C454(v22[13] + 136, (uint64_t)(v22 + 8), 33);
        sub_100015C2C();
        sub_10001E4F8();
        sub_10000A828();
        sub_10001CFAC();
        return v47(v47, v48, v49, v50, v51, v52, v53, v54, a9, a10, a11, a12, a13, a14);
      }
    }
    else
    {
      sub_10000A828();
      sub_1000120B4();
    }
  }
  v56 = sub_10000BD20(v22[15]);
  v57 = v29;
  Logger.logObject.getter(v56);
  v58 = sub_10000BD4C();
  v59 = sub_10001FDE4(v57);
  v60 = v22[15];
  if (v59)
  {
    v61 = v22[14];
    v62 = (uint8_t *)sub_100012C5C(12);
    v63 = sub_100012C5C(32);
    a11 = v63;
    *(_DWORD *)v62 = 136446210;
    swift_bridgeObjectRetain(v60);
    v22[11] = sub_100014F94(v61, v60, &a11);
    sub_100015C3C((uint64_t)(v22 + 11), v26);
    sub_1000110B4(v60);
    sub_100010670((void *)&_mh_execute_header, v57, v58, "requesting eviction for %{public}s", v62);
    sub_10000BE60(v63);
    sub_1000120F8(v63);
    sub_1000120F8((uint64_t)v62);
  }
  else
  {
    sub_10000F3C8(v22[15]);
  }

  v64 = (_QWORD *)swift_task_alloc(dword_10008EC9C);
  v22[18] = v64;
  *v64 = v22;
  v64[1] = sub_100036788;
  return sub_10001069C(v22[14], v22[15]);
}

uint64_t sub_100036788()
{
  uint64_t v0;

  sub_100019A38();
  sub_10000BDC4(*(_QWORD *)(v0 + 144));
  sub_10000F3E8();
  return sub_100010514();
}

uint64_t sub_1000367C0()
{
  uint64_t v0;

  sub_10001C454(*(_QWORD *)(v0 + 104) + 136, v0 + 64, 33);
  sub_100015C2C();
  sub_10001E4F8();
  sub_10000A828();
  return sub_10001D3C8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100036814()
{
  uint64_t v0;

  sub_10001C454(*(_QWORD *)(v0 + 104) + 136, v0 + 16, 33);
  sub_100015C2C();
  sub_10001E4F8();
  sub_10000A828();
  return sub_10001D3C8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100036868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  return swift_task_switch(sub_100036884, a6, 0);
}

uint64_t sub_100036884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  _BOOL4 v30;
  unint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  _QWORD *v35;

  sub_1000110BC();
  a21 = v23;
  a22 = v24;
  a20 = v22;
  if (qword_10008DFF0 != -1)
    swift_once(&qword_10008DFF0, sub_100034E9C);
  v25 = v22[4];
  v26 = sub_10000F3D0();
  v27 = sub_100015718(v26, (uint64_t)qword_10008F040);
  v28 = sub_10000BD20(v25);
  Logger.logObject.getter(v28);
  v29 = sub_10000BD4C();
  v30 = sub_100019A28(v29);
  v31 = v22[4];
  if (v30)
  {
    v32 = v22[3];
    v33 = (uint8_t *)sub_100012C5C(12);
    v34 = sub_100012C5C(32);
    a11 = v34;
    *(_DWORD *)v33 = 136446210;
    sub_10000CEB0();
    v22[2] = sub_100014F94(v32, v31, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22 + 2, v22 + 3, v33 + 4, v33 + 12);
    sub_1000110B4(v31);
    sub_100010670((void *)&_mh_execute_header, v27, (os_log_type_t)v27, "requesting immediate eviction for %{public}s", v33);
    sub_10000BE60(v34);
    sub_1000120F8(v34);
    sub_1000120F8((uint64_t)v33);
  }
  else
  {
    sub_10000F3C8(v22[4]);
  }

  v35 = (_QWORD *)swift_task_alloc(dword_10008EC9C);
  v22[6] = v35;
  *v35 = v22;
  v35[1] = sub_100036A00;
  return sub_10001069C(v22[3], v22[4]);
}

uint64_t sub_100036A00()
{
  uint64_t v0;
  uint64_t v1;

  sub_100019A38();
  sub_10000BDC4(*(_QWORD *)(v1 + 48));
  return sub_10000BD38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100036A2C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 + 136) = a2;
  *(_QWORD *)(v4 + 144) = v3;
  *(_DWORD *)(v4 + 208) = a3;
  *(_QWORD *)(v4 + 128) = a1;
  sub_10001AAC8(&qword_100090490);
  *(_QWORD *)(v4 + 152) = sub_10000BFD4();
  *(_QWORD *)(v4 + 160) = sub_10000BFD4();
  v5 = sub_10000D2BC();
  *(_QWORD *)(v4 + 168) = v5;
  *(_QWORD *)(v4 + 176) = sub_100007830(*(_QWORD *)(v5 - 8));
  sub_10000F3E8();
  return sub_10001A1B0(v6, v7, v8);
}

uint64_t sub_100036AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, char a18, uint64_t a19)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;

  v13 = *(_QWORD *)(v11 + 160);
  v12 = *(_QWORD *)(v11 + 168);
  sub_10001C454(*(_QWORD *)(v11 + 144) + 168, v11 + 64, 33);
  sub_10004320C(v13);
  swift_endAccess(v11 + 64);
  if (_s10RTCUtility9XPCObjectOwet_0(v13, 1, v12) == 1)
  {
    sub_100037CA0(*(_QWORD *)(v11 + 160));
  }
  else
  {
    v14 = *(uint64_t **)(v11 + 176);
    sub_100037CE0(*(_QWORD *)(v11 + 160), (uint64_t)v14);
    v16 = *v14;
    v15 = v14[1];
    sub_100010644();
    v17 = sub_10003607C(v16, v15);
    sub_10000781C();
    v18 = *(_QWORD *)(v11 + 176);
    if ((v17 & 1) != 0)
    {
      v19 = *(_QWORD *)(v11 + 168);
      v21 = *(_QWORD *)(v11 + 144);
      v20 = *(_QWORD *)(v11 + 152);
      v22 = *(_QWORD *)(v18 + 16);
      v23 = *(_QWORD *)(v18 + 24);
      v24 = *(_QWORD *)(v18 + 32);
      v25 = *(_QWORD *)(v18 + 40);
      *(_QWORD *)(v11 + 16) = v16;
      *(_QWORD *)(v11 + 24) = v15;
      *(_QWORD *)(v11 + 32) = v22;
      *(_QWORD *)(v11 + 40) = v23;
      *(_QWORD *)(v11 + 48) = v24;
      *(_QWORD *)(v11 + 56) = v25;
      v26 = *(_BYTE *)(v18 + 72);
      sub_100037D60(v18, v20);
      _s10RTCUtility9XPCObjectOwst_0(v20, 0, 1, v19);
      v27 = type metadata accessor for Session(0);
      sub_10001B14C(v27);
      v28 = dword_10009048C;
      sub_100010644();
      swift_retain(v21);
      sub_10000B0D4();
      swift_bridgeObjectRetain(v25);
      v29 = (_QWORD *)swift_task_alloc(v28);
      *(_QWORD *)(v11 + 184) = v29;
      *v29 = v11;
      v29[1] = sub_100036C7C;
      return sub_10000F4D8(*(_DWORD *)(v11 + 208), *(_QWORD *)(v11 + 144), (_OWORD *)(v11 + 16), v26, 0, 0, 0, 0, v30, v31, v32, v33, v34, v35, v36, v37, a17, a18, a19);
    }
    sub_100037D24(v18);
  }
  sub_10000F4A4();
  sub_100010D58();
  sub_10000F3D8();
  return (*(uint64_t (**)(_QWORD))(v11 + 8))(0);
}

uint64_t sub_100036C7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  sub_10000C040();
  sub_10000F498(v3);
  v2[24] = v1;
  swift_task_dealloc(v4);
  v5 = v2[18];
  if (v1)
  {
    v6 = sub_100036D2C;
  }
  else
  {
    v2[25] = v0;
    v6 = sub_100036CD4;
  }
  return sub_10001808C((uint64_t)v6, v5, 0);
}

uint64_t sub_100036CD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 200);
  sub_100037D24(*(_QWORD *)(v0 + 176));
  v2 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  sub_10000F3D8();
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100036D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_1000110BC();
  v15 = (uint64_t *)v14[22];
  v16 = *v15;
  v17 = v15[1];
  sub_10000CA18();
  sub_10000E4D8(v16, v17, 0);
  sub_10000AF70();
  if (qword_10008DFF0 != -1)
    swift_once(&qword_10008DFF0, sub_100034E9C);
  v18 = v14[24];
  v19 = sub_10000F3D0();
  sub_100015718(v19, (uint64_t)qword_10008F040);
  swift_errorRetain(v18);
  v20 = swift_errorRetain(v18);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.fault.getter();
  v23 = os_log_type_enabled(v21, v22);
  v24 = v14[24];
  v25 = v14[22];
  if (v23)
  {
    a10 = v14[22];
    a9 = v14 + 15;
    v26 = (uint8_t *)sub_100012C5C(12);
    a11 = sub_100012C5C(32);
    *(_DWORD *)v26 = 136446210;
    sub_10001F500(v24, (uint64_t)(v14 + 14));
    v27 = Error.localizedDescription.getter(v14[12], v14[13]);
    v14[15] = sub_10001B29C(v27, v28, v29, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v14 + 15, v14 + 16, v26 + 4, v26 + 12);
    sub_10000A828();
    sub_10000A8B8();
    sub_10000A8B8();
    sub_100010670((void *)&_mh_execute_header, v21, v22, "failed to rehydrate session: %{public}s", v26);
    sub_10000BE60(a11);
    sub_1000120F8(a11);
    sub_1000120F8((uint64_t)v26);

    sub_10000A8B8();
    v31 = a10;
  }
  else
  {

    sub_10000A8B8();
    sub_10000A8B8();
    sub_10000A8B8();
    v31 = v25;
  }
  sub_100037D24(v31);
  sub_10000F4A4();
  sub_100010D58();
  sub_10000F3D8();
  sub_10001CFAC();
  return v33(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_100036F00()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return sub_10001211C((uint64_t)sub_100036F14, v0);
}

void sub_100036F14()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = qword_1000973C8;
  *(_QWORD *)(v0 + 64) = qword_1000973C8;
  if (v1)
  {
    sub_100019A20();
    v2 = (_QWORD *)sub_10000BFD4();
    *(_QWORD *)(v0 + 72) = v2;
    sub_10000D22C(v2, (uint64_t)sub_100036F6C);
    sub_10003A7C4();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100036F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;

  sub_10000B0F0();
  v2 = *(_QWORD *)(v0 + 72);
  *(_BYTE *)(v0 + 192) = v3;
  *(_QWORD *)(v0 + 80) = v1;
  swift_task_dealloc(v2);
  if (v1)
  {
    v4 = *(_QWORD *)(v0 + 56);
    v5 = (void (*)(uint64_t))sub_100037434;
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 56);
    swift_release(*(_QWORD *)(v0 + 64));
    v5 = sub_100036FD8;
    v4 = v6;
  }
  return sub_10001A1B0((uint64_t)v5, v4, 0);
}

void sub_100036FD8(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)();
  int v13;
  uint64_t v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(unsigned __int8 *)(v3 + 192);
  if (v4 == 2)
  {
    if (qword_10008DFF0 != -1)
      swift_once(&qword_10008DFF0, sub_100034E9C);
    v5 = sub_10000F3D0();
    sub_100010688(v5, (uint64_t)qword_10008F040);
    v6 = sub_10000BFB8();
    if (sub_100019A28(v6))
    {
      v7 = (_WORD *)sub_100012C5C(2);
      sub_100038500(v7);
      sub_10001B3B0((void *)&_mh_execute_header, v8, v9, "resetting clientIDs due to missing lastDNU setting");
      sub_1000120F8(v2);
    }

    v10 = qword_1000973C8;
    *(_QWORD *)(v3 + 136) = qword_1000973C8;
    if (v10)
    {
      sub_100019A20();
      v11 = (_QWORD *)sub_10000BFD4();
      *(_QWORD *)(v3 + 144) = v11;
      v12 = sub_10003731C;
LABEL_15:
      sub_10000D22C(v11, (uint64_t)v12);
      sub_10003A928();
      return;
    }
    __break(1u);
  }
  else
  {
    v13 = v4 & 1;
    if (v13 == DiagnosticLogSubmissionEnabled(a1))
    {
      (*(void (**)(void))(v3 + 8))();
      return;
    }
    if (qword_10008DFF0 != -1)
      swift_once(&qword_10008DFF0, sub_100034E9C);
    v14 = sub_10000F3D0();
    sub_100010688(v14, (uint64_t)qword_10008F040);
    v15 = sub_10000BFB8();
    if (sub_10001FDE4(v1))
    {
      v16 = sub_100012C5C(14);
      *(_DWORD *)v16 = 67240448;
      *(_DWORD *)(v3 + 184) = v13;
      v17 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 + 184, v3 + 188, v16 + 4, v16 + 8);
      *(_WORD *)(v16 + 8) = 1026;
      *(_DWORD *)(v3 + 188) = DiagnosticLogSubmissionEnabled(v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 + 188, v3 + 192, v16 + 10, v16 + 14);
      _os_log_impl((void *)&_mh_execute_header, v1, v15, "DNU status changed (%{BOOL,public}d -> %{BOOL,public}d), resetting clientIDs", (uint8_t *)v16, 0xEu);
      sub_1000120F8(v16);
    }

    v18 = qword_1000973C8;
    *(_QWORD *)(v3 + 88) = qword_1000973C8;
    if (v18)
    {
      sub_100019A20();
      v11 = (_QWORD *)sub_10000BFD4();
      *(_QWORD *)(v3 + 96) = v11;
      v12 = sub_100037204;
      goto LABEL_15;
    }
  }
  __break(1u);
}

uint64_t sub_100037204()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)();
  uint64_t v6;

  sub_10000B0F0();
  sub_10000F498(v2);
  v0[13] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    v4 = v0[7];
    v5 = (void (*)())sub_100037554;
  }
  else
  {
    v6 = v0[7];
    swift_release(v0[11]);
    v5 = sub_100037264;
    v4 = v6;
  }
  return sub_10001A1B0((uint64_t)v5, v4, 0);
}

void sub_100037264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;

  v1 = qword_1000973C8;
  *(_QWORD *)(v0 + 112) = qword_1000973C8;
  if (v1)
  {
    v2 = sub_100019A20();
    v3 = DiagnosticLogSubmissionEnabled(v2);
    v4 = (_QWORD *)swift_task_alloc(dword_10008F624);
    *(_QWORD *)(v0 + 120) = v4;
    *v4 = v0;
    v4[1] = sub_1000372C4;
    sub_10000B100(v3);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000372C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  sub_10000B0F0();
  sub_10000F498(v3);
  v0[16] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return sub_10001A1B0((uint64_t)sub_100037674, v0[7], 0);
  swift_release(v0[14]);
  return sub_100012CC0(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10003731C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)();
  uint64_t v6;

  sub_10000B0F0();
  sub_10000F498(v2);
  v0[19] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    v4 = v0[7];
    v5 = (void (*)())sub_100037794;
  }
  else
  {
    v6 = v0[7];
    swift_release(v0[17]);
    v5 = sub_10003737C;
    v4 = v6;
  }
  return sub_10001A1B0((uint64_t)v5, v4, 0);
}

void sub_10003737C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;

  v1 = qword_1000973C8;
  *(_QWORD *)(v0 + 160) = qword_1000973C8;
  if (v1)
  {
    v2 = sub_100019A20();
    v3 = DiagnosticLogSubmissionEnabled(v2);
    v4 = (_QWORD *)swift_task_alloc(dword_10008F624);
    *(_QWORD *)(v0 + 168) = v4;
    *v4 = v0;
    v4[1] = sub_1000373DC;
    sub_10000B100(v3);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000373DC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  sub_10000B0F0();
  sub_10000F498(v3);
  v0[22] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return sub_10001A1B0((uint64_t)sub_1000378B4, v0[7], 0);
  swift_release(v0[20]);
  return sub_100012CC0(*(uint64_t (**)(void))(v2 + 8));
}

#error "1000374CC: call analysis failed (funcsize=67)"

#error "1000375EC: call analysis failed (funcsize=67)"

#error "10003770C: call analysis failed (funcsize=67)"

#error "10003782C: call analysis failed (funcsize=67)"

#error "10003794C: call analysis failed (funcsize=67)"

_QWORD *sub_1000379D4()
{
  _QWORD *v0;

  swift_release(v0[14]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[17]);
  swift_bridgeObjectRelease(v0[18]);
  swift_release(v0[20]);
  swift_bridgeObjectRelease(v0[21]);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100037A20()
{
  uint64_t v0;

  sub_1000379D4();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SessionCoordinator()
{
  return objc_opt_self(_TtC13rtcreportingd18SessionCoordinator);
}

uint64_t initializeBufferWithCopyOfBuffer for SessionHierarchyItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for SessionHierarchyItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[2];
  v4 = a1[2];
  a1[2] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for SessionHierarchyItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionHierarchyItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SessionHierarchyItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionHierarchyItem()
{
  return &type metadata for SessionHierarchyItem;
}

uint64_t sub_100037B9C(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = String.subscript.getter();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    sub_1000206C8();
    v14 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 16);
    sub_10002067C(v14);
    v15 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(v15 + 16) = v14 + 1;
    v16 = (_QWORD *)(v15 + 32 * v14);
    v16[4] = v7;
    v16[5] = v9;
    v16[6] = v11;
    v16[7] = v13;
    return v5 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17);
  __break(1u);
  return result;
}

uint64_t sub_100037CA0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001AAC8(&qword_100090490);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100037CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CachedSession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100037D24(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CachedSession(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100037D60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CachedSession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100037DA4()
{
  uint64_t v0;

  sub_100010680();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100037DD4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[6];
  v5 = (_QWORD *)swift_task_alloc(dword_10008F244);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10002FC98;
  v5[4] = v3;
  v5[5] = v4;
  v5[3] = v2;
  sub_10000F3E8();
  return sub_10001808C(v6, v7, v8);
}

uint64_t sub_100037E34()
{
  uint64_t v0;

  sub_100010680();
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100037E64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[6];
  v5 = (_QWORD *)swift_task_alloc(dword_10008F25C);
  *(_QWORD *)(v1 + 16) = v5;
  v6 = sub_10001E450(v5);
  return sub_1000363B8(v6, v7, v8, v2, v3, v4);
}

uint64_t sub_100037EE0()
{
  uint64_t (**v0)(void);

  sub_10000BDC4(*((_QWORD *)*v0 + 2));
  return v0[1]();
}

void (*sub_100037F1C(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_100038148(v7);
  v7[10] = sub_100037FF8(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100037FAC;
}

void sub_100037FAC(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  sub_10000A828();
  v2(v1, 0);
  free(v1);
}

void (*sub_100037FF8(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _BOOL8 v15;
  Swift::Int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v12 = sub_10001A120(a2, a3);
  *((_BYTE *)v10 + 40) = v13 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v13 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }
  v17 = v12;
  v18 = v13;
  sub_10001AAC8(&qword_10008F8E0);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v16))
  {
    v19 = sub_10001A120(a2, a3);
    if ((v18 & 1) == (v20 & 1))
    {
      v17 = v19;
      goto LABEL_5;
    }
LABEL_10:
    result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
LABEL_5:
  v10[4] = v17;
  if ((v18 & 1) != 0)
    v21 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v17);
  else
    v21 = 0;
  *v10 = v21;
  return sub_100038110;
}

void sub_100038110(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_10001FF78(*a1, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease(*v1);
  sub_100019468(v1);
}

uint64_t (*sub_100038148(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_100038168;
}

uint64_t sub_100038168(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t sub_100038174(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  if (!v4)
  {
    v6 = 0;
LABEL_29:
    swift_release(a2);
    return v6;
  }
  v5 = 0;
  v6 = 0;
  v7 = *(_QWORD *)(a2 + 112);
  v8 = *(_QWORD *)(a2 + 120);
  while (1)
  {
    result = *(_QWORD *)(v3 + v5 + 40);
    v10 = *(_QWORD *)(v3 + v5 + 48);
    if (result == v7 && v10 == v8)
      break;
    result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v7, v8, 0);
    if ((result & 1) != 0)
      break;
    ++v6;
    v5 += 24;
    if (v4 == v6)
    {
      v6 = *(_QWORD *)(v3 + 16);
      goto LABEL_29;
    }
  }
  v12 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    v13 = *(_QWORD *)(v3 + 16);
    while (v12 != v13)
    {
      if (v12 >= v13)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      v14 = (_QWORD *)(v3 + v5);
      result = *(_QWORD *)(v3 + v5 + 64);
      v15 = *(_QWORD *)(v3 + v5 + 72);
      v16 = *(_QWORD *)(a2 + 112);
      v17 = *(_QWORD *)(a2 + 120);
      if (result != v16 || v15 != v17)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v15, v16, v17, 0);
        if ((result & 1) == 0)
        {
          if (v12 != v6)
          {
            if (v6 >= v13)
              goto LABEL_32;
            v19 = (uint64_t *)(v3 + 32 + 24 * v6);
            v20 = v19[2];
            v30 = v19[1];
            v31 = *v19;
            v21 = v14[7];
            v22 = v14[8];
            v23 = v14[9];
            swift_bridgeObjectRetain(v20);
            swift_bridgeObjectRetain(v23);
            if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
            {
              sub_10003A0F4(v3);
              v3 = v29;
            }
            v24 = (_QWORD *)(v3 + 24 * v6);
            v25 = v24[6];
            v24[4] = v21;
            v24[5] = v22;
            v24[6] = v23;
            result = swift_bridgeObjectRelease(v25);
            if (v12 >= *(_QWORD *)(v3 + 16))
              goto LABEL_33;
            v26 = (_QWORD *)(v3 + v5);
            v27 = *(_QWORD *)(v3 + v5 + 72);
            v26[7] = v31;
            v26[8] = v30;
            v26[9] = v20;
            result = swift_bridgeObjectRelease(v27);
            *a1 = v3;
          }
          if (__OFADD__(v6++, 1))
            goto LABEL_31;
        }
      }
      ++v12;
      v13 = *(_QWORD *)(v3 + 16);
      v5 += 24;
    }
    goto LABEL_29;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_10003834C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100038370()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100038380()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000383A4(uint64_t a1)
{
  uint64_t v1;

  return sub_100035AC8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000383AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001AAC8(&qword_10008E7F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000383F4()
{
  uint64_t v0;

  sub_100010680();
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10003841C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10008F284);
  *(_QWORD *)(v0 + 16) = v1;
  sub_10001E450(v1);
  return sub_100035C38();
}

uint64_t sub_10003847C(uint64_t a1)
{
  uint64_t v1;

  return _s10RTCUtility9XPCObjectOwst_0(*(_QWORD *)(v1 - 192), 1, 1, a1);
}

unint64_t sub_100038494()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10001A120(v1, v0);
}

BOOL sub_1000384A0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000384B0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 4);
}

uint64_t sub_1000384C0(uint64_t a1)
{
  return swift_allocObject(a1, 64, 7);
}

uint64_t sub_1000384CC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = a1;
  return v1 - 144;
}

uint64_t sub_1000384E0()
{
  uint64_t v0;

  return Error.localizedDescription.getter(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

void sub_1000384EC()
{
  sub_1000493BC(2);
}

void sub_1000384F4(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_100005AB0(a1, a2, 1, v2);
}

_WORD *sub_100038500(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10003850C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  const char **v11;
  _QWORD *v12;
  const char **v13;
  _QWORD *v14;
  uint64_t v15;
  const char **v16;
  _BYTE *v17;
  uint64_t result;
  _QWORD *v19;
  _BYTE *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE *v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  int64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;

  v0 = sub_10001AAC8(&qword_10008F350);
  v1 = sub_10001AAC8(&qword_10008F358);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v0, v5 + 13 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_10006E450;
  v7 = v6 + v5;
  v8 = (_BYTE *)(v6 + v5 + *(int *)(v1 + 48));
  *(_QWORD *)(v6 + v5) = XPC_ACTIVITY_REPEATING;
  *v8 = 1;
  v9 = type metadata accessor for XPCObject(0);
  swift_storeEnumTagMultiPayload(v8, v9, 2);
  v10 = (_QWORD *)(v7 + v3 + *(int *)(v1 + 48));
  *(_QWORD *)(v7 + v3) = XPC_ACTIVITY_DELAY;
  *v10 = 86400;
  swift_storeEnumTagMultiPayload(v10, v9, 3);
  v11 = (const char **)(v7 + 2 * v3);
  v12 = (const char **)((char *)v11 + *(int *)(v1 + 48));
  *v11 = XPC_ACTIVITY_GRACE_PERIOD;
  *v12 = 43200;
  swift_storeEnumTagMultiPayload(v12, v9, 3);
  v13 = (const char **)(v7 + 3 * v3);
  v14 = (const char **)((char *)v13 + *(int *)(v1 + 48));
  *v13 = XPC_ACTIVITY_PRIORITY;
  *v14 = String.init(cString:)(XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  v14[1] = v15;
  swift_storeEnumTagMultiPayload(v14, v9, 8);
  v16 = (const char **)(v7 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = XPC_ACTIVITY_ALLOW_BATTERY;
  *v17 = 0;
  result = swift_storeEnumTagMultiPayload(v17, v9, 2);
  if (!XPC_ACTIVITY_POWER_NAP)
  {
    __break(1u);
    goto LABEL_11;
  }
  v19 = (_QWORD *)(v7 + 5 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = XPC_ACTIVITY_POWER_NAP;
  *v20 = 1;
  result = swift_storeEnumTagMultiPayload(v20, v9, 2);
  if (!XPC_ACTIVITY_RANDOM_INITIAL_DELAY)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v21 = (_QWORD *)(v7 + 6 * v3);
  v22 = (_QWORD *)((char *)v21 + *(int *)(v1 + 48));
  *v21 = XPC_ACTIVITY_RANDOM_INITIAL_DELAY;
  *v22 = 43200;
  result = swift_storeEnumTagMultiPayload(v22, v9, 4);
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v23 = (_QWORD *)(v7 - v3 + 8 * v3);
  v24 = (char *)v23 + *(int *)(v1 + 48);
  *v23 = XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY;
  *v24 = 1;
  result = swift_storeEnumTagMultiPayload(v24, v9, 2);
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v25 = (_QWORD *)(v7 + 8 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY;
  *v26 = 1;
  result = swift_storeEnumTagMultiPayload(v26, v9, 2);
  if (!XPC_ACTIVITY_NETWORK_DOWNLOAD_SIZE)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v27 = (_QWORD *)(v7 + 9 * v3);
  v28 = (_QWORD *)((char *)v27 + *(int *)(v1 + 48));
  *v27 = XPC_ACTIVITY_NETWORK_DOWNLOAD_SIZE;
  *v28 = 0x100000;
  result = swift_storeEnumTagMultiPayload(v28, v9, 4);
  if (!XPC_ACTIVITY_EXPECTED_DURATION)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v29 = (_QWORD *)(v7 + 10 * v3);
  v30 = (_QWORD *)((char *)v29 + *(int *)(v1 + 48));
  *v29 = XPC_ACTIVITY_EXPECTED_DURATION;
  *v30 = XPC_ACTIVITY_INTERVAL_1_MIN;
  result = swift_storeEnumTagMultiPayload(v30, v9, 3);
  if (!XPC_ACTIVITY_GROUP_NAME)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v31 = (_QWORD *)(v7 + 11 * v3);
  v32 = (_QWORD *)((char *)v31 + *(int *)(v1 + 48));
  *v31 = XPC_ACTIVITY_GROUP_NAME;
  *v32 = 0xD00000000000001DLL;
  v32[1] = 0x8000000100071D30;
  result = swift_storeEnumTagMultiPayload(v32, v9, 8);
  if (XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT)
  {
    v33 = (_QWORD *)(v7 + 12 * v3);
    v34 = (_QWORD *)((char *)v33 + *(int *)(v1 + 48));
    *v33 = XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT;
    *v34 = 1;
    swift_storeEnumTagMultiPayload(v34, v9, 4);
    v35 = sub_10001AAC8(&qword_10008F360);
    v36 = sub_100038A2C();
    result = Dictionary.init(dictionaryLiteral:)(v6, v35, v9, v36);
    qword_100097308 = result;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t *sub_1000388C8()
{
  if (qword_10008DFF8 != -1)
    swift_once(&qword_10008DFF8, sub_10003850C);
  return &qword_100097308;
}

uint64_t sub_100038908()
{
  uint64_t v0;

  return sub_100038A70(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100038914()
{
  uint64_t v0;

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for RefreshStorebagsActivity()
{
  return objc_opt_self(_TtC13rtcreportingd24RefreshStorebagsActivity);
}

uint64_t sub_100038950()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10008F2BC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10002C490;
  return sub_100038908();
}

double sub_100038994()
{
  double result;

  sub_1000388C8();
  *(_QWORD *)&result = swift_bridgeObjectRetain(qword_100097308).n128_u64[0];
  return result;
}

unint64_t sub_1000389B0()
{
  return 0xD000000000000011;
}

unint64_t sub_1000389CC(uint64_t a1)
{
  unint64_t result;

  result = sub_1000389F0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000389F0()
{
  unint64_t result;
  uint64_t refreshed;

  result = qword_10008F348;
  if (!qword_10008F348)
  {
    refreshed = type metadata accessor for RefreshStorebagsActivity();
    result = swift_getWitnessTable(&unk_10006E498, refreshed);
    atomic_store(result, (unint64_t *)&qword_10008F348);
  }
  return result;
}

unint64_t sub_100038A2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008F368;
  if (!qword_10008F368)
  {
    v1 = sub_100027598(&qword_10008F360);
    result = swift_getWitnessTable(&protocol conformance descriptor for UnsafePointer<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10008F368);
  }
  return result;
}

uint64_t sub_100038A70(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100038A78()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026B1C(v0, qword_10008F370);
  sub_100015718(v0, (uint64_t)qword_10008F370);
  return Logger.init(subsystem:category:)(0xD000000000000017, 0x8000000100071220, 0x2D646E656B636162, 0xED000070756F7267);
}

Swift::Int sub_100038AF8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int sub_100038B3C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

char *sub_100038B78(uint64_t a1)
{
  uint64_t v1;
  char *result;
  uint64_t v4;
  _BYTE v5[24];

  swift_beginAccess(v1 + 112, v5, 33, 0);
  swift_unknownObjectRetain(a1);
  result = (char *)sub_100039F70(v1 + 112, a1);
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 112) + 16);
  if (v4 < (uint64_t)result)
  {
    __break(1u);
  }
  else
  {
    sub_10003A220(result, v4);
    return (char *)swift_endAccess(v5);
  }
  return result;
}

uint64_t sub_100038C00(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[5] = a1;
  v2[6] = v1;
  v2[7] = *v1;
  return swift_task_switch(sub_100038C20, v1, 0);
}

uint64_t sub_100038C20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(v1 + 48);
  sub_10001D28C(a1, v1 + 16);
  if (*(_QWORD *)(*(_QWORD *)(v2 + 112) + 16))
  {
    v4 = *(_QWORD *)(v1 + 48);
    v5 = *(_QWORD *)(v1 + 56);
    v6 = *(_QWORD *)(v1 + 40);
    sub_1000095E0(&qword_10008F478, v3, (uint64_t (*)(uint64_t))type metadata accessor for BackendGroup, (uint64_t)&unk_10006E500);
    v7 = (_QWORD *)swift_task_alloc(48);
    *(_QWORD *)(v1 + 64) = v7;
    v7[2] = v4;
    v7[3] = v6;
    v7[4] = v5;
    v8 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
    *(_QWORD *)(v1 + 72) = v8;
    *v8 = v1;
    v8[1] = sub_100038D40;
    return withTaskGroup<A, B>(of:returning:isolation:body:)();
  }
  else
  {
    v10 = sub_1000399CC();
    v11 = swift_allocError(&type metadata for BackendGroup.Error, v10, 0, 0);
    swift_willThrow(v11, v12, v13, v14, v15, v16, v17, v18);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100038D40()
{
  uint64_t v0;

  sub_100019A38();
  sub_10000BDC4(*(_QWORD *)(v0 + 72));
  sub_100010D58();
  return sub_100012104();
}

uint64_t sub_100038D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[14] = a4;
  v5[15] = a5;
  v5[12] = a2;
  v5[13] = a3;
  return swift_task_switch(sub_100038DA0, a3, 0);
}

uint64_t sub_100038DA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t (*v38)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(v1 + 104);
  sub_10001D28C(a1, v1 + 48);
  v4 = *(_QWORD *)(v2 + 112);
  v36 = *(_QWORD *)(v4 + 16);
  if (v36)
  {
    swift_bridgeObjectRetain(v4);
    v5 = 0;
    v35 = v4;
    do
    {
      v6 = *(_QWORD *)(v1 + 112);
      v7 = *(_QWORD *)(v1 + 120);
      v8 = v4 + 16 * v5;
      v9 = *(_QWORD *)(v1 + 104);
      v10 = (*(_QWORD *)(*(_QWORD *)(sub_10001AAC8((uint64_t *)&unk_1000903E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
      v11 = swift_task_alloc(v10);
      v12 = type metadata accessor for TaskPriority(0);
      v37 = *(_OWORD *)(v8 + 32);
      _s10RTCUtility9XPCObjectOwst_0(v11, 1, 1, v12);
      v13 = swift_allocObject(&unk_100087FB0, 72, 7);
      *(_QWORD *)(v13 + 16) = 0;
      v14 = (_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 24) = 0;
      *(_OWORD *)(v13 + 32) = v37;
      *(_QWORD *)(v13 + 48) = v6;
      *(_QWORD *)(v13 + 56) = v9;
      *(_QWORD *)(v13 + 64) = v7;
      v15 = swift_task_alloc(v10);
      sub_100039B64(v11, v15);
      LODWORD(v7) = _s10RTCUtility9XPCObjectOwet_0(v15, 1, v12);
      swift_unknownObjectRetain_n(v37, 2);
      swift_bridgeObjectRetain(v6);
      v16 = swift_retain(v9);
      if ((_DWORD)v7 == 1)
      {
        sub_10001D7AC(v15, (uint64_t *)&unk_1000903E0);
        v17 = 0;
      }
      else
      {
        v18 = TaskPriority.rawValue.getter(v16);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v15, v12);
        v17 = v18;
      }
      sub_100010D58();
      v19 = *v14;
      if (*v14)
      {
        ObjectType = swift_getObjectType(*v14);
        swift_unknownObjectRetain(v19);
        v21 = sub_10001CEC4(ObjectType);
        v23 = v22;
        swift_unknownObjectRelease(v19);
      }
      else
      {
        v21 = 0;
        v23 = 0;
      }
      v24 = **(_QWORD **)(v1 + 96);
      v25 = swift_allocObject(&unk_100087FD8, 32, 7);
      *(_QWORD *)(v25 + 16) = &unk_10008F4A8;
      *(_QWORD *)(v25 + 24) = v13;
      v26 = v23 | v21;
      if (v23 | v21)
      {
        v26 = v1 + 16;
        *(_QWORD *)(v1 + 16) = 0;
        *(_QWORD *)(v1 + 24) = 0;
        *(_QWORD *)(v1 + 32) = v21;
        *(_QWORD *)(v1 + 40) = v23;
      }
      v4 = v35;
      ++v5;
      *(_QWORD *)(v1 + 72) = 1;
      *(_QWORD *)(v1 + 80) = v26;
      *(_QWORD *)(v1 + 88) = v24;
      v27 = swift_task_create(v17 | 0x3100, v1 + 72, (char *)&type metadata for () + 8, &unk_10008F4B0, v25);
      swift_unknownObjectRelease(v37);
      swift_release(v27);
      sub_10001D7AC(v11, (uint64_t *)&unk_1000903E0);
      swift_task_dealloc(v11);
    }
    while (v36 != v5);
    swift_bridgeObjectRelease(v35);
  }
  v28 = sub_1000095E0(&qword_10008F478, v3, (uint64_t (*)(uint64_t))type metadata accessor for BackendGroup, (uint64_t)&unk_10006E500);
  v29 = sub_10006ACF8(2, 18, 0, 0);
  v30 = *(_QWORD *)(v1 + 104);
  if (v29)
  {
    v31 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.awaitAllRemainingTasks(isolation:)[1]);
    *(_QWORD *)(v1 + 128) = v31;
    v32 = sub_10001AAC8(&qword_10008F4B8);
    *v31 = v1;
    v31[1] = sub_100039130;
    return TaskGroup.awaitAllRemainingTasks(isolation:)(v30, v28, v32);
  }
  else
  {
    v38 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10008F4C0 + dword_10008F4C0);
    v34 = (_QWORD *)swift_task_alloc(unk_10008F4C4);
    *(_QWORD *)(v1 + 136) = v34;
    *v34 = v1;
    v34[1] = sub_10003915C;
    return v38(v30, v28);
  }
}

uint64_t sub_100039130()
{
  uint64_t v0;
  uint64_t v1;

  sub_100019A38();
  sub_10000BDC4(*(_QWORD *)(v1 + 128));
  return sub_10000BD38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003915C()
{
  uint64_t v0;
  uint64_t v1;

  sub_100019A38();
  sub_10000BDC4(*(_QWORD *)(v1 + 136));
  return sub_10000BD38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100039188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  int *v21;
  _QWORD *v22;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);

  v7[15] = a5;
  v7[16] = a7;
  v7[14] = a4;
  v11 = sub_10001AAC8(&qword_10008F4C8);
  v7[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CocoaError(0);
  v7[18] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[19] = v13;
  v7[20] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URLError.Code(0);
  v7[21] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v7[22] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[23] = swift_task_alloc(v16);
  v7[24] = swift_task_alloc(v16);
  v17 = sub_10001AAC8(&qword_10008F4D0);
  v7[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for URLError(0);
  v7[26] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v7[27] = v19;
  v7[28] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectType = swift_getObjectType(a4);
  v21 = *(int **)(a5 + 24);
  v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v21 + *v21);
  v22 = (_QWORD *)swift_task_alloc(v21[1]);
  v7[29] = v22;
  *v22 = v7;
  v22[1] = sub_1000392E8;
  return v24(a6, ObjectType, a5);
}

uint64_t sub_1000392E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 232);
  v3 = *v1;
  *(_QWORD *)(v3 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100039410, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 224));
  sub_100010D58();
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  sub_10001210C();
  return sub_100012164(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_100039388()
{
  uint64_t v0;

  sub_100038B78(*(_QWORD *)(v0 + 112));
  return swift_task_switch(sub_1000393C8, 0, 0);
}

uint64_t sub_1000393C8()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 240));
  sub_10001CCAC();
  sub_100010D58();
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  sub_10001210C();
  return sub_100012164(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100039410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v1 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 80) = v1;
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  swift_errorRetain(v1);
  v4 = sub_10001AAC8(&qword_10008E7E8);
  v5 = swift_dynamicCast(v2, v0 + 80, v4, v3, 6);
  if ((v5 & 1) != 0)
  {
    v9 = *(_QWORD *)(v0 + 152);
    v8 = *(_QWORD *)(v0 + 160);
    v11 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 144);
    _s10RTCUtility9XPCObjectOwst_0(v11, 0, 1, v10);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v8, v11, v10);
    LOBYTE(v11) = CocoaError.isCoderError.getter(v12);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    if ((v11 & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 136);
    sub_10001C468(v5, v6, v7, *(_QWORD *)(v0 + 144));
    sub_10001D7AC(v13, &qword_10008F4C8);
  }
  v14 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 200);
  v15 = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v0 + 56) = v14;
  swift_errorRetain(v14);
  v17 = swift_dynamicCast(v16, v0 + 56, v4, v15, 6);
  if ((v17 & 1) != 0)
  {
    v20 = *(_QWORD *)(v0 + 216);
    v21 = *(_QWORD *)(v0 + 224);
    v51 = v20;
    v22 = *(_QWORD *)(v0 + 200);
    v23 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 184);
    v24 = *(_QWORD *)(v0 + 192);
    v26 = *(_QWORD *)(v0 + 168);
    v52 = *(_QWORD *)(v0 + 176);
    _s10RTCUtility9XPCObjectOwst_0(v22, 0, 1, v23);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v21, v22, v23);
    v27 = sub_1000095E0(&qword_10008F4D8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URLError, (uint64_t)&protocol conformance descriptor for URLError);
    v28 = _BridgedStoredNSError.code.getter(v23, v27);
    static URLError.Code.cancelled.getter(v28);
    sub_1000095E0(&qword_10008F4E0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URLError.Code, (uint64_t)&protocol conformance descriptor for URLError.Code);
    sub_10001D8B0();
    sub_10001D8B0();
    v30 = *(_QWORD *)(v0 + 96);
    v29 = *(_QWORD *)(v0 + 104);
    v31 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    v31(v25, v26);
    v31(v24, v26);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v21, v23);
    if (v30 == v29)
    {
LABEL_7:
      swift_errorRelease(*(_QWORD *)(v0 + 240));
      sub_10001CCAC();
      sub_100010D58();
      sub_10000F3D8();
      sub_1000111E4();
      sub_10000BFB0();
      sub_10001210C();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v33 = *(_QWORD *)(v0 + 200);
    sub_10001C468(v17, v18, v19, *(_QWORD *)(v0 + 208));
    sub_10001D7AC(v33, &qword_10008F4D0);
  }
  if (qword_10008E000 != -1)
    swift_once(&qword_10008E000, sub_100038A78);
  v34 = *(_QWORD *)(v0 + 240);
  v35 = type metadata accessor for Logger(0);
  sub_100015718(v35, (uint64_t)qword_10008F370);
  swift_errorRetain(v34);
  sub_10001D1B8();
  swift_errorRetain(v34);
  v36 = sub_10001D1B8();
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.error.getter();
  v39 = os_log_type_enabled(v37, v38);
  v40 = *(_QWORD *)(v0 + 240);
  if (v39)
  {
    v50 = *(_OWORD *)(v0 + 112);
    v41 = swift_slowAlloc(22, -1);
    v42 = swift_slowAlloc(64, -1);
    v53 = v42;
    *(_DWORD *)v41 = 136446466;
    *(_OWORD *)(v0 + 40) = v50;
    sub_10001D1B8();
    v43 = sub_10001AAC8(&qword_10008E4D0);
    v44 = String.init<A>(describing:)(v0 + 40, v43);
    v46 = v45;
    *(_QWORD *)(v0 + 64) = sub_100014F94(v44, v45, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v41 + 4, v41 + 12);
    swift_unknownObjectRelease_n(v50, 2);
    swift_bridgeObjectRelease(v46);
    *(_WORD *)(v41 + 12) = 2082;
    swift_getErrorValue(v40, v0 + 72, v0 + 16);
    v47 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v49 = v48;
    *(_QWORD *)(v0 + 88) = sub_100014F94(v47, v48, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v41 + 14, v41 + 22);
    swift_bridgeObjectRelease(v49);
    sub_10001809C();
    sub_10001809C();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "disabling backend '%{public}s' which returned error: %{public}s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy(v42, 2);
    sub_1000120F8(v42);
    sub_1000120F8(v41);
  }
  else
  {
    swift_unknownObjectRelease_n(*(_QWORD *)(v0 + 112), 2);
    sub_10001809C();
    sub_10001809C();
  }

  return swift_task_switch(sub_100039388, *(_QWORD *)(v0 + 128), 0);
}

uint64_t sub_10003989C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for BackendGroup()
{
  return objc_opt_self(_TtC13rtcreportingd12BackendGroup);
}

uint64_t sub_1000398E0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10008F3B4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003992C;
  return sub_100038C00(a1);
}

uint64_t sub_10003992C()
{
  uint64_t v0;

  sub_10001AB34();
  return sub_10000BD38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100039950(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_10008F484);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_10003992C;
  return sub_100038D84(a1, a2, v6, v7, v8);
}

unint64_t sub_1000399CC()
{
  unint64_t result;

  result = qword_10008F490;
  if (!qword_10008F490)
  {
    result = swift_getWitnessTable(&unk_10006E598, &type metadata for BackendGroup.Error);
    atomic_store(result, &qword_10008F490);
  }
  return result;
}

uint64_t sub_100039A08(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100039A6C;
  return v6(a1);
}

uint64_t sub_100039A6C()
{
  uint64_t v0;

  sub_10001AB34();
  return sub_10000BD38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100039A94()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100039AD0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_10008F49C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003A400;
  return sub_100039188(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100039B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001AAC8((uint64_t *)&unk_1000903E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100039BAC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100039BD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10008F4A4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003992C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10008F4A0 + dword_10008F4A0))(a1, v4);
}

uint64_t sub_100039C40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v3 + 64) = a2;
  *(_QWORD *)(v3 + 72) = v2;
  *(_QWORD *)(v3 + 56) = a1;
  v4 = sub_10006ACF8(2, 18, 0, 0);
  *(_DWORD *)(v3 + 112) = v4;
  if (v4)
  {
    v5 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.next(isolation:)[1]);
    *(_QWORD *)(v3 + 104) = v5;
    v6 = sub_10001AAC8(&qword_10008F4B8);
    *v5 = v3;
    v5[1] = sub_100039E6C;
    return TaskGroup.next(isolation:)(v3 + 116, *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), v6);
  }
  else
  {
    if (*(_QWORD *)(v3 + 56))
    {
      ObjectType = swift_getObjectType(*(_QWORD *)(v3 + 56));
      v9 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType);
      v11 = v10;
    }
    else
    {
      v9 = 0;
      v11 = 0;
    }
    *(_QWORD *)(v3 + 80) = v9;
    *(_QWORD *)(v3 + 88) = v11;
    return swift_task_switch(sub_100039D2C, v9, v11);
  }
}

uint64_t sub_100039D2C()
{
  uint64_t v0;

  return swift_taskGroup_wait_next_throwing(v0 + 117, **(_QWORD **)(v0 + 72), sub_100039D48, v0 + 16);
}

uint64_t sub_100039D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  _QWORD *v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v1 + 96) = v0;
  if (v0)
  {
    v2 = *(_QWORD *)(v1 + 80);
    v3 = *(_QWORD *)(v1 + 88);
    v4 = sub_100039E50;
    return swift_task_switch(v4, v2, v3);
  }
  if ((*(_BYTE *)(v1 + 117) & 1) != 0)
    return (*(uint64_t (**)(void))(v1 + 8))();
  if (!*(_DWORD *)(v1 + 112))
  {
    if (*(_QWORD *)(v1 + 56))
    {
      ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 56));
      v9 = sub_10001CEC4(ObjectType);
      v3 = v10;
    }
    else
    {
      v9 = 0;
      v3 = 0;
    }
    *(_QWORD *)(v1 + 80) = v9;
    *(_QWORD *)(v1 + 88) = v3;
    v4 = sub_100039D2C;
    v2 = v9;
    return swift_task_switch(v4, v2, v3);
  }
  v6 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.next(isolation:)[1]);
  *(_QWORD *)(v1 + 104) = v6;
  v7 = sub_10001AAC8(&qword_10008F4B8);
  *v6 = v1;
  v6[1] = sub_100039E6C;
  return TaskGroup.next(isolation:)(v1 + 116, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), v7);
}

uint64_t sub_100039E50()
{
  uint64_t v0;

  return swift_unexpectedError(*(_QWORD *)(v0 + 96), "_Concurrency/TaskGroup.swift", 28, 1, 648);
}

uint64_t sub_100039E6C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(*v0 + 104);
  v2 = *v0;
  swift_task_dealloc(v1);
  if ((*(_BYTE *)(v2 + 116) & 1) != 0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  if (*(_DWORD *)(v2 + 112))
  {
    v4 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.next(isolation:)[1]);
    *(_QWORD *)(v2 + 104) = v4;
    v5 = sub_10001AAC8(&qword_10008F4B8);
    *v4 = v2;
    v4[1] = sub_100039E6C;
    return TaskGroup.next(isolation:)(v2 + 116, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), v5);
  }
  else
  {
    if (*(_QWORD *)(v2 + 56))
    {
      ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 56));
      v7 = sub_10001CEC4(ObjectType);
      v9 = v8;
    }
    else
    {
      v7 = 0;
      v9 = 0;
    }
    *(_QWORD *)(v2 + 80) = v7;
    *(_QWORD *)(v2 + 88) = v9;
    return sub_100012104();
  }
}

uint64_t sub_100039F70(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (!v4)
  {
    v7 = 0;
LABEL_7:
    swift_unknownObjectRelease(a2);
    return v7;
  }
  v5 = (_QWORD *)result;
  v6 = 0;
  v7 = 0;
  while (*(_QWORD *)(v3 + v6 + 32) != a2)
  {
    ++v7;
    v6 += 16;
    if (v4 == v7)
    {
      v7 = *(_QWORD *)(*(_QWORD *)result + 16);
      goto LABEL_7;
    }
  }
  v8 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    while (v8 != v4)
    {
      if (v8 >= v4)
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      v9 = *(_QWORD *)(v3 + v6 + 48);
      if (v9 != a2)
      {
        if (v8 != v7)
        {
          if (v7 >= v4)
            goto LABEL_23;
          v10 = *(_QWORD *)(v3 + v6 + 56);
          v16 = *(_OWORD *)(v3 + 32 + 16 * v7);
          swift_unknownObjectRetain(*(_QWORD *)(v3 + 32 + 16 * v7));
          swift_unknownObjectRetain(v9);
          if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
          {
            sub_10003A108();
            v3 = v15;
          }
          v11 = v3 + 16 * v7;
          v12 = *(_QWORD *)(v11 + 32);
          *(_QWORD *)(v11 + 32) = v9;
          *(_QWORD *)(v11 + 40) = v10;
          result = swift_unknownObjectRelease(v12);
          if (v8 >= *(_QWORD *)(v3 + 16))
            goto LABEL_24;
          v13 = *(_QWORD *)(v3 + v6 + 48);
          *(_OWORD *)(v3 + v6 + 48) = v16;
          result = swift_unknownObjectRelease(v13);
          *v5 = v3;
        }
        if (__OFADD__(v7++, 1))
          goto LABEL_22;
        v4 = *(_QWORD *)(v3 + 16);
      }
      ++v8;
      v6 += 16;
    }
    goto LABEL_7;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10003A0E0()
{
  return sub_100022BB8();
}

void sub_10003A0F4(uint64_t a1)
{
  sub_100005AB0(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_10003A108()
{
  sub_100022D70();
}

char *sub_10003A11C(char *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v6 = result;
  v7 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v8 = &result[-a2];
  if (__OFSUB__(0, v7))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = (uint64_t)&v8[v5];
    else
      v11 = v5;
    sub_100005AB0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    v4 = v12;
  }
  v13 = (char *)(v4 + 32 + 24 * (_QWORD)v6);
  result = (char *)swift_arrayDestroy(v13, v7);
  if (!v7)
    goto LABEL_16;
  v14 = *(_QWORD *)(v4 + 16);
  if (__OFSUB__(v14, a2))
    goto LABEL_22;
  result = sub_10005DE84((char *)(v4 + 32 + 24 * a2), v14 - a2, v13);
  v15 = *(_QWORD *)(v4 + 16);
  v16 = __OFADD__(v15, v8);
  v17 = v15 - v7;
  if (!v16)
  {
    *(_QWORD *)(v4 + 16) = v17;
LABEL_16:
    *v2 = v4;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

char *sub_10003A220(char *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = result;
  v7 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = &result[-a2];
  if (__OFSUB__(0, v7))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v5, v8))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native(*v2) || v5 - v7 > *(_QWORD *)(v4 + 24) >> 1)
  {
    sub_100022D70();
    v4 = v9;
  }
  v10 = (char *)(v4 + 32 + 16 * (_QWORD)v6);
  sub_10001AAC8(&qword_10008E4D0);
  result = (char *)swift_arrayDestroy(v10, v7);
  if (!v7)
    goto LABEL_13;
  v11 = *(_QWORD *)(v4 + 16);
  if (__OFSUB__(v11, a2))
    goto LABEL_19;
  result = sub_1000204D4((char *)(v4 + 32 + 16 * a2), v11 - a2, v10);
  v12 = *(_QWORD *)(v4 + 16);
  v13 = __OFADD__(v12, v8);
  v14 = v12 - v7;
  if (!v13)
  {
    *(_QWORD *)(v4 + 16) = v14;
LABEL_13:
    *v2 = v4;
    return result;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t storeEnumTagSinglePayload for BackendGroup.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10003A364 + 4 * byte_10006E4C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10003A384 + 4 * byte_10006E4C5[v4]))();
}

_BYTE *sub_10003A364(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10003A384(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003A38C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003A394(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003A39C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003A3A4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BackendGroup.Error()
{
  return &type metadata for BackendGroup.Error;
}

unint64_t sub_10003A3C4()
{
  unint64_t result;

  result = qword_10008F4E8;
  if (!qword_10008F4E8)
  {
    result = swift_getWitnessTable(&unk_10006E570, &type metadata for BackendGroup.Error);
    atomic_store(result, (unint64_t *)&qword_10008F4E8);
  }
  return result;
}

uint64_t sub_10003A404(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v16;

  if (*(_BYTE *)(v3 + 24) == 1)
  {
    v5 = sub_1000225B4();
    v6 = swift_allocError(&unk_1000863C0, v5, 0, 0);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = 0xD00000000000001DLL;
    *(_QWORD *)(v7 + 16) = 0x8000000100070ED0;
    return swift_willThrow(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  else
  {
    result = sub_1000117C8(a1, a2);
    if (!v4)
    {
      v16 = result;
      a3();
      return swift_release(v16);
    }
  }
  return result;
}

uint64_t sub_10003A4C8(void (*a1)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for SQLiteDB.Transaction();
  v5 = swift_allocObject(v4, 25, 7);
  *(_BYTE *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 16) = v1;
  swift_retain(v1);
  sub_100021ECC(0xD000000000000011, 0x8000000100070D90);
  if (v2)
    return swift_release(v5);
  a1(&v7, v5);
  if ((*(_BYTE *)(v5 + 24) & 1) == 0)
    sub_100021ECC(0x54494D4D4F43, 0xE600000000000000);
  swift_release(v5);
  return v7;
}

uint64_t sub_10003A5C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_10001211C((uint64_t)sub_10003A5DC, v1);
}

uint64_t sub_10003A5DC()
{
  sub_10001A3E8();
  sub_10000F3E8();
  return sub_100010514();
}

uint64_t sub_10003A608()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  sub_10000AF58();
  v1 = sub_100019A60(163);
  v6 = sub_1000221AC(v1, v2, v3, v4, v5);
  return sub_10001DFA0((uint64_t)v6, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003A65C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return sub_10001211C((uint64_t)sub_10003A670, v0);
}

uint64_t sub_10003A670()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0[7] + 112);
  v0[8] = v1;
  v0[9] = 0;
  return sub_10001211C((uint64_t)sub_10003A688, v1);
}

uint64_t sub_10003A688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v3 = sub_10000F3F4();
  v4 = sub_10001FF0C(v3);
  sub_100011208(v4);
  sub_10000A8C0((uint64_t)"BEGIN TRANSACTION");
  if (v1)
  {
    sub_1000104E8();
    v5 = (uint64_t (*)(void))sub_10001B3C4();
    return sub_10001B17C(v5);
  }
  sub_10003C498(v0, v2 + 6);
  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
    sub_10001AF04();
  sub_1000104E8();
  if (v2[6] != 5)
  {
    v5 = (uint64_t (*)(void))sub_10001C704();
    return sub_10001B17C(v5);
  }
  v2[9] = 0;
  return sub_10001D8BC((uint64_t)sub_10003A688, v2[8], 0);
}

uint64_t sub_10003A730(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_10001211C((uint64_t)sub_10003A744, v1);
}

uint64_t sub_10003A744()
{
  sub_10001A3E8();
  sub_10000F3E8();
  return sub_100010514();
}

uint64_t sub_10003A770()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  sub_10000AF58();
  v1 = sub_100019A60(155);
  v6 = sub_1000221AC(v1, v2, v3, v4, v5);
  return sub_10001DFA0((uint64_t)v6, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003A7C4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 24) = v0;
  v2 = (_QWORD *)swift_task_alloc(dword_10008F644);
  *(_QWORD *)(v1 + 32) = v2;
  v3 = sub_10001CECC(v2, (uint64_t)sub_10003A808);
  return sub_10003BB1C(v3, v4);
}

uint64_t sub_10003A808(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = *v2;
  v4 = v7;
  sub_10000F498(&v7);
  *(_QWORD *)(v4 + 40) = v1;
  swift_task_dealloc(v5);
  if (v1)
    return sub_10001B170((uint64_t)sub_10003A880, *(_QWORD *)(v4 + 24), 0);
  else
    return ((uint64_t (*)(BOOL))v2[1])(a1 != 0);
}

uint64_t sub_10003A880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 16) = v1;
  swift_errorRetain(v1);
  v2 = sub_10001AAC8(&qword_10008E7E8);
  if (!swift_dynamicCast(v0 + 48, v0 + 16, v2, &unk_100086348, 0) || *(_BYTE *)(v0 + 48))
  {
    swift_errorRelease(*(_QWORD *)(v0 + 16));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 40));
    swift_errorRelease(*(_QWORD *)(v0 + 16));
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(2);
  }
}

uint64_t sub_10003A928()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return sub_10001211C((uint64_t)sub_10003A93C, v0);
}

uint64_t sub_10003A93C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0[7] + 112);
  v0[8] = v1;
  v0[9] = 0;
  return sub_10001211C((uint64_t)sub_10003A954, v1);
}

uint64_t sub_10003A954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v3 = sub_10000F3F4();
  v4 = sub_10001FF0C(v3);
  sub_100011208(v4);
  sub_10000A8C0((uint64_t)"BEGIN TRANSACTION");
  if (v1)
  {
    sub_1000104E8();
    v5 = (uint64_t (*)(void))sub_10001B3C4();
    return sub_10001B17C(v5);
  }
  sub_10003D39C(v0, v2 + 6);
  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
    sub_10001AF04();
  sub_1000104E8();
  if (v2[6] != 50)
  {
    v5 = (uint64_t (*)(void))sub_10001C704();
    return sub_10001B17C(v5);
  }
  v2[9] = 0;
  return sub_10001D8BC((uint64_t)sub_10003A954, v2[8], 0);
}

uint64_t sub_10003A9FC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1 & 1;
  v3 = (_QWORD *)swift_task_alloc(dword_10008F62C);
  *(_QWORD *)(v1 + 16) = v3;
  v4 = sub_10001CECC(v3, (uint64_t)sub_10003AA44);
  return sub_10003BCF4(v4, v5, v2);
}

uint64_t sub_10003AA44()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return sub_10000BD38(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10003AA84@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  NSString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  NSString *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  NSURL *v30;
  void *v31;
  void *v32;
  unsigned int v33;
  id v34;
  id v35;
  char *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  char *v52;
  uint64_t v53;
  id v54;
  char v55[40];

  v53 = type metadata accessor for URLResourceValues(0);
  v5 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v52 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001AAC8(&qword_10008EA70);
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v49 - v15;
  if ((a1 & 1) == 0)
  {
    v49 = a2;
    v50 = v5;
    v51 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    v17 = NSHomeDirectory();
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    URL.init(fileURLWithPath:isDirectory:)(v18, v20, 1);
    swift_bridgeObjectRelease(v20);
    sub_10000AF58();
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000032, v21, 1);
    sub_10003D8C8((uint64_t)v14);
    v22 = sub_10001AAC8(&qword_10008EA78);
    inited = swift_initStackObject(v22, v55);
    *(_OWORD *)(inited + 16) = xmmword_10006D0C0;
    *(_QWORD *)(inited + 32) = NSURLIsDirectoryKey;
    v24 = NSURLIsDirectoryKey;
    sub_100005900(inited);
    v26 = v25;
    URL.resourceValues(forKeys:)();
    if (v2)
    {
      swift_errorRelease(v2);
      swift_bridgeObjectRelease(v26);
      sub_100019500((uint64_t)v9, 1);
    }
    else
    {
      swift_bridgeObjectRelease(v26);
      sub_100019500((uint64_t)v9, 0);
      if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v9, 1, v11) != 1)
      {
        v47 = URLResourceValues.isDirectory.getter();
        (*(void (**)(char *, uint64_t))(v50 + 8))(v9, v11);
        v29 = v51;
        if ((v47 & 1) != 0)
        {
LABEL_11:
          v48 = v49;
          URL.appendingPathComponent(_:isDirectory:)(0x62642E6568636163, 0xE800000000000000, 0);

          sub_10003D8C8((uint64_t)v16);
          v27 = v48;
          v28 = 0;
          return _s10RTCUtility9XPCObjectOwst_0(v27, v28, 1, v10);
        }
LABEL_7:
        URL._bridgeToObjectiveC()(v30);
        v32 = v31;
        v54 = 0;
        v33 = objc_msgSend(v29, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v31, 1, 0, &v54);

        v34 = v54;
        if (!v33)
        {
          v37 = v54;
          _convertNSErrorToError(_:)(v34);

          swift_willThrow(v38, v39, v40, v41, v42, v43, v44, v45);
          return sub_10003D8C8((uint64_t)v16);
        }
        v35 = v54;
        v36 = v52;
        URLResourceValues.init()(v35);
        URLResourceValues.isExcludedFromBackup.setter(1);
        URL.setResourceValues(_:)(v36);
        sub_100010D84();
        goto LABEL_11;
      }
    }
    v29 = v51;
    sub_10003D664((uint64_t)v9);
    goto LABEL_7;
  }
  v27 = a2;
  v28 = 1;
  return _s10RTCUtility9XPCObjectOwst_0(v27, v28, 1, v10);
}

BOOL sub_10003AE48(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_10003AE58(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int sub_10003AE7C(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL sub_10003AEC0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10003AE48(*a1, *a2);
}

Swift::Int sub_10003AECC()
{
  char *v0;

  return sub_10003AE7C(*v0);
}

void sub_10003AED4(uint64_t a1)
{
  char *v1;

  sub_10003AE58(a1, *v1);
}

uint64_t sub_10003AEDC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026B1C(v0, qword_10008F4F0);
  sub_100015718(v0, (uint64_t)qword_10008F4F0);
  return Logger.init(subsystem:category:)(0x726F706572637472, 0xED000064676E6974, 0x686361636B736964, 0xE900000000000065);
}

uint64_t sub_10003AF5C()
{
  if (qword_10008E080 != -1)
    swift_once(&qword_10008E080, sub_1000584B0);
  if (byte_1000973F0)
    return 0x140000000;
  else
    return 3221225472;
}

uint64_t sub_10003AFB0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  char v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  char v64;

  v3 = v2;
  *(_QWORD *)(v2 + 88) = v1;
  v4 = (_QWORD *)(v2 + 88);
  v64 = a1 & 1;
  v5 = sub_10001AAC8(&qword_10008EA70);
  v62 = sub_1000110F4(v5);
  v4[1] = v62;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[2] = v8;
  type metadata accessor for SQLiteDB.Location(0);
  v9 = sub_10000B10C();
  v4[3] = v9;
  v10 = sub_10000B10C();
  v4[4] = v10;
  v11 = sub_10000B10C();
  v4[5] = v11;
  swift_defaultActor_initialize(v1);
  sub_10003AA84(v64, v11);
  v59 = (uint64_t)v4;
  v12 = v3;
  v60 = v8;
  v61 = v1;
  sub_10003D6A4(v11, v10, type metadata accessor for SQLiteDB.Location);
  if (_s10RTCUtility9XPCObjectOwet_0(v10, 1, v6) == 1)
  {
    sub_10003D6E8(v10, type metadata accessor for SQLiteDB.Location);
    v13 = v1;
LABEL_6:
    v20 = v9;
LABEL_7:
    sub_10003D6A4(v11, v20, type metadata accessor for SQLiteDB.Location);
    v21 = type metadata accessor for SQLiteDB();
    swift_allocObject(v21, 120, 15);
    *(_QWORD *)(v13 + 112) = sub_100021F88(v20);
    v23 = (_QWORD *)swift_task_alloc(dword_10008F664);
    *(_QWORD *)(v3 + 136) = v23;
    *v23 = v3;
    v23[1] = sub_10003B58C;
    v24 = sub_10001BB74();
    return sub_10003BC08(v24, v25);
  }
  v57 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v8, v10, v6);
  v14 = sub_10001AAC8(&qword_10008EA78);
  v15 = sub_10001FF0C(v14);
  *(_OWORD *)(v15 + 16) = xmmword_10006D0C0;
  *(_QWORD *)(v15 + 32) = NSURLFileSizeKey;
  v16 = NSURLFileSizeKey;
  sub_100005900(v15);
  v18 = v17;
  URL.resourceValues(forKeys:)();
  v13 = v61;
  swift_bridgeObjectRelease(v18);
  v19 = type metadata accessor for URLResourceValues(0);
  _s10RTCUtility9XPCObjectOwst_0(v62, 0, 1, v19);
  if (_s10RTCUtility9XPCObjectOwet_0(v62, 1, v19) == 1)
  {
    sub_10003D664(v62);
LABEL_5:
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v57);
    goto LABEL_6;
  }
  v58 = URLResourceValues.fileSize.getter();
  v28 = v27;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v62, v19);
  if ((v28 & 1) != 0 || sub_10003AF5C() >= v58)
    goto LABEL_5;
  v63 = (uint64_t *)(v59 - 16);
  if (qword_10008E0A0 != -1)
    swift_once(&qword_10008E0A0, sub_100058690);
  if ((byte_100097402 & 1) != 0)
  {
    if (qword_10008E008 != -1)
      swift_once(&qword_10008E008, sub_10003AEDC);
    v29 = sub_10000F3D0();
    v30 = sub_100010688(v29, (uint64_t)qword_10008F4F0);
    v31 = static os_log_type_t.error.getter();
    v20 = v9;
    if (os_log_type_enabled(v30, v31))
    {
      v32 = sub_100012C5C(22);
      *(_DWORD *)v32 = 134349312;
      *v63 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v63, v59 - 8, v32 + 4, v32 + 12);
      *(_WORD *)(v32 + 12) = 2050;
      *(_QWORD *)(v59 - 8) = sub_10003AF5C();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v59 - 8, v59, v32 + 14, v32 + 22);
      sub_10000BFA8((void *)&_mh_execute_header, v30, v31, "cache size %{public}ld exceeded maximum %{public}ld - cache delete overridden", (uint8_t *)v32);
      sub_1000120F8(v32);
    }

    sub_100015C48(v33, v34, v35, v36, v37, v38, v39, v40, v57, v58, v59, v60);
    goto LABEL_7;
  }
  if (qword_10008E008 != -1)
    swift_once(&qword_10008E008, sub_10003AEDC);
  v41 = sub_10000F3D0();
  v42 = sub_100010688(v41, (uint64_t)qword_10008F4F0);
  v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = sub_100012C5C(22);
    *(_DWORD *)v44 = 134349312;
    *(_QWORD *)(v59 - 32) = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v59 - 32, v59 - 24, v44 + 4, v44 + 12);
    *(_WORD *)(v44 + 12) = 2050;
    *(_QWORD *)(v59 - 24) = sub_10003AF5C();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v59 - 24, v63, v44 + 14, v44 + 22);
    sub_10000BFA8((void *)&_mh_execute_header, v42, v43, "cache size %{public}ld exceeded maximum %{public}ld - deleting cache", (uint8_t *)v44);
    v45 = v44;
    v3 = v12;
    sub_1000120F8(v45);
  }

  v46 = sub_10002262C();
  v47 = sub_10000A7FC((uint64_t)&type metadata for DiskCacheError, v46);
  v49 = sub_10001D9EC(v47, v48);
  sub_100015C48(v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60);
  sub_10003D6E8(v11, type metadata accessor for SQLiteDB.Location);
  swift_defaultActor_destroy(v61);
  swift_deallocPartialClassInstance(v61);
  v22 = *(_QWORD *)(v3 + 104);
  swift_task_dealloc(*(_QWORD *)(v3 + 128));
  sub_100010D58();
  sub_10000F3D8();
  swift_task_dealloc(v22);
  sub_10000BFB0();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10003B58C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = *v2;
  v4 = v7;
  sub_10000F498(&v7);
  *(_QWORD *)(v4 + 144) = v1;
  swift_task_dealloc(v5);
  if (!v1)
    *(_QWORD *)(v4 + 152) = a1;
  return sub_100012104();
}

uint64_t sub_10003B5FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 152);
  if (v1 > 5)
  {
    sub_10003D6E8(*(_QWORD *)(v0 + 128), type metadata accessor for SQLiteDB.Location);
    sub_100010D58();
    sub_10000F3D8();
    sub_1000111E4();
    sub_10000BFB0();
    sub_10001210C();
    return sub_10001B2A8(*(_QWORD *)(v0 + 88), *(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v2 = (_QWORD *)swift_task_alloc(dword_10008F66C);
    *(_QWORD *)(v0 + 160) = v2;
    *v2 = v0;
    v2[1] = sub_10003B704;
    return sub_10003B850(v1);
  }
}

uint64_t sub_10003B6B0()
{
  uint64_t v0;
  _QWORD *v1;

  swift_errorRelease(*(_QWORD *)(v0 + 144));
  v1 = (_QWORD *)swift_task_alloc(dword_10008F66C);
  *(_QWORD *)(v0 + 160) = v1;
  *v1 = v0;
  v1[1] = sub_10003B704;
  return sub_10003B850(0);
}

uint64_t sub_10003B704()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v6 = *(_QWORD **)v1;
  v2 = v6;
  sub_10000F498(&v6);
  v2[21] = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2[11] + 112);
    v2[22] = v4;
    swift_retain(v4);
    sub_10000F3E8();
    return sub_100012104();
  }
  else
  {
    sub_10003D6E8(v2[16], type metadata accessor for SQLiteDB.Location);
    sub_100010D58();
    sub_10000F3D8();
    sub_1000111E4();
    sub_10000BFB0();
    sub_10001210C();
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(v2[11]);
  }
}

uint64_t sub_10003B7C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 88);
  sub_1000217A0();
  v3 = sub_1000104E8();
  swift_willThrow(v3, v4, v5, v6, v7, v8, v9, v10);
  swift_release(v2);
  sub_10003D6E8(v1, type metadata accessor for SQLiteDB.Location);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  sub_10001210C();
  return sub_10001B17C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003B850(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch(sub_10003B868, v1, 0);
}

uint64_t sub_10003B868()
{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v10;

  if (*(_QWORD *)(v1 + 24))
  {
    if (qword_10008E008 != -1)
      swift_once(&qword_10008E008, sub_10003AEDC);
    v2 = sub_10000F3D0();
    v3 = sub_100010688(v2, (uint64_t)qword_10008F4F0);
    v4 = static os_log_type_t.default.getter();
    if (sub_100019A28(v4))
    {
      v5 = (uint8_t *)sub_100012C5C(2);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v0, "unsupported prior database version - deleting disk cache", v5, 2u);
      sub_1000120F8((uint64_t)v5);
    }

    v6 = sub_10002262C();
    v7 = sub_10000A7FC((uint64_t)&type metadata for DiskCacheError, v6);
    sub_10001D9EC(v7, v8);
    return sub_10001A1E4(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 112);
    *(_QWORD *)(v1 + 40) = v10;
    return sub_10001B170((uint64_t)sub_10003B95C, v10, 0);
  }
}

uint64_t sub_10003B95C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  sub_10000AF58();
  v2 = sub_100019A60(1174);
  sub_100021ECC(v2, v3);
  if (v0)
  {
    v4 = (uint64_t (*)(void))sub_10001B3C4();
    return sub_10001A1E4(v4);
  }
  else
  {
    v6 = (_QWORD *)swift_task_alloc(dword_10008F62C);
    *(_QWORD *)(v1 + 48) = v6;
    *v6 = v1;
    v6[1] = sub_10003B9E0;
    v7 = sub_10001BB74();
    return sub_10003BCF4(v7, v8, 6);
  }
}

uint64_t sub_10003B9E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v1;
  sub_10000F498(&v4);
  swift_task_dealloc(v2);
  if (v0)
    return sub_100012CC0((uint64_t (*)(void))v1[1]);
  else
    return sub_100012104();
}

uint64_t sub_10003BA38()
{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t (*v6)(void);

  if (qword_10008E008 != -1)
    swift_once(&qword_10008E008, sub_10003AEDC);
  v2 = sub_10000F3D0();
  v3 = sub_100010688(v2, (uint64_t)qword_10008F4F0);
  v4 = static os_log_type_t.default.getter();
  if (sub_100019A28(v4))
  {
    v5 = (uint8_t *)sub_100012C5C(12);
    *(_DWORD *)v5 = 134217984;
    *(_QWORD *)(v1 + 16) = 6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v0, "initialized disk cache with version %lld", v5, 0xCu);
    sub_1000120F8((uint64_t)v5);
  }

  v6 = (uint64_t (*)(void))sub_10001C704();
  return sub_10001B17C(v6);
}

uint64_t sub_10003BB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_10003BB38, v2, 0);
}

uint64_t sub_10003BB38()
{
  sub_1000103AC();
  sub_10000F3E8();
  return sub_100010514();
}

uint64_t sub_10003BB64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v2 = sub_10001CCC4(37, 0x80000001000723B0);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
    v5 = (uint64_t (*)(void))sub_10001B3C4();
    return sub_10001B17C(v5);
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 24);
    v4 = sub_10003BEAC(v2, *(_QWORD *)(v1 + 16), v3, (uint64_t (*)(uint64_t))sub_100021C34);
    sub_10000CEA8();
    swift_bridgeObjectRelease(v3);
    return sub_10001B2A8(v4, *(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t sub_10003BC08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_10003BC24, v2, 0);
}

uint64_t sub_10003BC24()
{
  sub_1000103AC();
  sub_10000F3E8();
  return sub_100010514();
}

uint64_t sub_10003BC50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v2 = sub_10001CCC4(37, 0x80000001000723B0);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
    v5 = (uint64_t (*)(void))sub_10001B3C4();
    return sub_10001B17C(v5);
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 24);
    v4 = sub_10003BEAC(v2, *(_QWORD *)(v1 + 16), v3, (uint64_t (*)(uint64_t))sub_100021C50);
    sub_10000CEA8();
    swift_bridgeObjectRelease(v3);
    return sub_10001B2A8(v4, *(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t sub_10003BCF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_10003BD10, v3, 0);
}

uint64_t sub_10003BD10()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 112);
  *(_QWORD *)(v0 + 48) = v1;
  return sub_10001211C((uint64_t)sub_10003BD28, v1);
}

uint64_t sub_10003BD28()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  sub_10000AF58();
  v3 = sub_10001CCC4(96, v2);
  if (v0)
  {
    v1[7] = v0;
    v4 = v1[5];
    v5 = sub_10003BDA4;
  }
  else
  {
    sub_10003BDB0(v3, v1[2], v1[3], v1[4]);
    sub_10000CEA8();
    v4 = v1[5];
    v5 = sub_10003D8C4;
  }
  return sub_10001B170((uint64_t)v5, v4, 0);
}

uint64_t sub_10003BDA4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003BDB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t inited;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v8 = sub_10001AAC8(&qword_10008E4B0);
  inited = swift_initStackObject(v8, &v12);
  *(_OWORD *)(inited + 16) = xmmword_10006D0D0;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = &off_1000861A0;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  *(_QWORD *)(inited + 96) = &type metadata for Int64;
  *(_QWORD *)(inited + 104) = &off_100086160;
  *(_QWORD *)(inited + 72) = a4;
  swift_bridgeObjectRetain(a3);
  sub_100011BCC(inited);
  if (v4)
  {
    swift_setDeallocating(inited);
    return sub_100011B7C();
  }
  else
  {
    swift_setDeallocating(inited);
    sub_100011B7C();
    do
    {
      v11 = sub_100011A74();
      result = swift_release(v11);
    }
    while (v11);
  }
  return result;
}

uint64_t sub_10003BEAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v9;
  uint64_t inited;
  _BYTE v12[72];

  v9 = sub_10001AAC8(&qword_10008E4B0);
  inited = swift_initStackObject(v9, v12);
  *(_OWORD *)(inited + 16) = xmmword_10006D0C0;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = &off_1000861A0;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  swift_bridgeObjectRetain(a3);
  sub_100011BCC(inited);
  swift_setDeallocating(inited);
  if (v4)
    return sub_100011B7C();
  sub_100011B7C();
  return a4(a1);
}

uint64_t sub_10003BF84()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  sub_100010720(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_1000104E8();
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return sub_100012CC0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003BFD0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003BFDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return sub_10001211C((uint64_t)sub_10003BFF4, v2);
}

uint64_t sub_10003BFF4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 112);
  *(_QWORD *)(v0 + 112) = v1;
  return sub_10001211C((uint64_t)sub_10003C00C, v1);
}

uint64_t sub_10003C00C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  sub_10000AF58();
  sub_10001CCC4(46, v2);
  if (v0)
  {
    v9 = (uint64_t (*)(void))sub_10001B3C4();
  }
  else
  {
    v4 = v1[11];
    v3 = v1[12];
    v5 = sub_10001AAC8(&qword_10008E4B0);
    v6 = sub_10001FF0C(v5);
    *(_OWORD *)(v6 + 16) = xmmword_10006D0C0;
    *(_QWORD *)(v6 + 56) = &type metadata for String;
    *(_QWORD *)(v6 + 64) = &off_1000861A0;
    *(_QWORD *)(v6 + 32) = v4;
    *(_QWORD *)(v6 + 40) = v3;
    swift_bridgeObjectRetain(v3);
    sub_100011BCC(v6);
    swift_setDeallocating(v6);
    sub_100011B7C();
    do
    {
      v8 = sub_100011A74();
      v7 = v8;
      swift_release(v8);
    }
    while (v7);
    sub_1000104E8();
    v9 = (uint64_t (*)(void))v1[1];
  }
  return v9();
}

_QWORD *sub_10003C104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v11;
  _QWORD *v12;

  v12 = _swiftEmptyArrayStorage;
  v1 = sub_100011A74();
  if (v0)
    return (_QWORD *)sub_100007848(v1, v2, v3, v4, v5, v6, v7, v8, v11, (uint64_t)v12);
  for (i = v1; i; i = sub_100011A74())
  {
    sub_10003C190(i, (uint64_t *)&v12);
    swift_release(i);
  }
  return v12;
}

uint64_t sub_10003C190(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  sqlite3_stmt *v24;
  double v25;
  sqlite3_int64 v26;
  int v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  sqlite3_int64 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = type metadata accessor for CachedSession(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_retain(a1);
  sub_1000116BC(v8, 0);
  if (!v10)
    goto LABEL_13;
  v11 = v9;
  v12 = v10;
  v13 = swift_retain(a1);
  sub_1000116BC(v13, 2);
  if (!v15)
  {
LABEL_12:
    swift_bridgeObjectRelease(v12);
LABEL_13:
    v35 = sub_10002262C();
    v36 = swift_allocError(&type metadata for DiskCacheError, v35, 0, 0);
    *v37 = 0;
    return swift_willThrow(v36, v37, v38, v39, v40, v41, v42, v43);
  }
  v16 = v15;
  v48 = v14;
  v49 = v11;
  v17 = swift_retain(a1);
  sub_1000116BC(v17, 3);
  if (!v19)
  {
    v34 = v12;
    v12 = v16;
LABEL_11:
    swift_bridgeObjectRelease(v34);
    goto LABEL_12;
  }
  v20 = v19;
  v47 = v18;
  v21 = swift_retain(a1);
  sub_1000116BC(v21, 4);
  if (!v23)
  {
    swift_bridgeObjectRelease(v12);
    v34 = v16;
    v12 = v20;
    goto LABEL_11;
  }
  v24 = *(sqlite3_stmt **)(a1 + 16);
  v45 = v23;
  v46 = v22;
  v44 = sqlite3_column_int64(v24, 1);
  v25 = sqlite3_column_double(v24, 5);
  v26 = sqlite3_column_int64(v24, 6);
  v27 = sub_1000414B0(v44);
  if (v27 == 3)
    v28 = 0;
  else
    v28 = v27;
  LODWORD(v44) = v28;
  Date.init(timeIntervalSince1970:)((double)v26);
  *(_QWORD *)v7 = v48;
  *((_QWORD *)v7 + 1) = v16;
  *((_QWORD *)v7 + 2) = v47;
  *((_QWORD *)v7 + 3) = v20;
  v29 = v45;
  *((_QWORD *)v7 + 4) = v46;
  *((_QWORD *)v7 + 5) = v29;
  *((_QWORD *)v7 + 6) = v49;
  *((_QWORD *)v7 + 7) = v12;
  *((double *)v7 + 8) = v25;
  v7[72] = v44;
  v30 = &v7[*(int *)(v4 + 36)];
  *(_DWORD *)v30 = 0;
  v30[4] = 1;
  sub_1000431E8();
  v31 = *(_QWORD *)(*a2 + 16);
  sub_100043200(v31);
  v32 = *a2;
  *(_QWORD *)(v32 + 16) = v31 + 1;
  sub_10003D6A4((uint64_t)v7, v32+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v31, type metadata accessor for CachedSession);
  return sub_10003D6E8((uint64_t)v7, type metadata accessor for CachedSession);
}

uint64_t sub_10003C3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_10001211C((uint64_t)sub_10003C3F4, v3);
}

uint64_t sub_10003C3F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v1 + 112);
  swift_bridgeObjectRetain();
  swift_retain(v1);
  return sub_100012104();
}

uint64_t sub_10003C440()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  sub_10000AF58();
  v1 = sub_100019A60(154);
  v7 = sub_1000222B0(v1, v2, v3, v4, v5, v6);
  return sub_10001DFA0((uint64_t)v7, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003C498@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 24) == 1)
  {
    v4 = sub_1000225B4();
    v5 = swift_allocError(&unk_1000863C0, v4, 0, 0);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = 0xD00000000000001DLL;
    *(_QWORD *)(v6 + 16) = 0x8000000100070ED0;
    return swift_willThrow(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  else
  {
    result = sub_1000117C8(0xD000000000000040, 0x80000001000723E0);
    if (!v2)
    {
      v14 = result;
      do
      {
        v15 = sub_100011A74();
        swift_release(v15);
      }
      while (v15);
      swift_release(v14);
      result = sub_100021E40();
      *a2 = result;
    }
  }
  return result;
}

uint64_t sub_10003C58C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_10001211C((uint64_t)sub_10003C5A0, v1);
}

uint64_t sub_10003C5A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 112);
  *(_QWORD *)(v0 + 32) = v1;
  return sub_10001211C((uint64_t)sub_10003C5B8, v1);
}

uint64_t sub_10003C5B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  sub_10000AF58();
  sub_10001CCC4(54, v2);
  if (v0)
  {
    v3 = (uint64_t (*)(void))sub_10001B3C4();
    return v3();
  }
  else
  {
    sub_10003C630(*(_QWORD *)(v1 + 16), &v5);
    sub_10000CEA8();
    return sub_10001DFA0(v5, *(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t sub_10003C630@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t inited;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  sqlite3_stmt *v10;
  const unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[72];

  v5 = sub_10001AAC8(&qword_10008E4B0);
  inited = swift_initStackObject(v5, v33);
  *(_OWORD *)(inited + 16) = xmmword_10006D0C0;
  *(_QWORD *)(inited + 56) = &type metadata for Int;
  *(_QWORD *)(inited + 64) = &off_100086140;
  *(_QWORD *)(inited + 32) = a1;
  sub_100011BCC(inited);
  if (v2)
  {
    swift_setDeallocating(inited);
    return sub_100011B7C();
  }
  else
  {
    swift_setDeallocating(inited);
    sub_100011B7C();
    result = sub_100011A74();
    v8 = result;
    v9 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (!v8)
      {
        *a2 = v9;
        return result;
      }
      v10 = *(sqlite3_stmt **)(v8 + 16);
      swift_retain(v8);
      v11 = sqlite3_column_text(v10, 0);
      if (!v11)
        break;
      v17 = String.init(cString:)(v11, v12, v13, v14, v15, v16);
      v19 = v18;
      swift_release(v8);
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      {
        sub_100012D78();
        v9 = v22;
      }
      v20 = v9[2];
      if (v20 >= v9[3] >> 1)
      {
        sub_100012D78();
        v9 = v23;
      }
      v9[2] = v20 + 1;
      v21 = &v9[2 * v20];
      v21[4] = v17;
      v21[5] = v19;
      swift_release(v8);
      result = sub_100011A74();
      v8 = result;
    }
    swift_release(v8);
    v24 = sub_10002262C();
    v25 = swift_allocError(&type metadata for DiskCacheError, v24, 0, 0);
    *v26 = 0;
    swift_willThrow(v25, v26, v27, v28, v29, v30, v31, v32);
    swift_bridgeObjectRelease(v9);
    return swift_release(v8);
  }
}

uint64_t sub_10003C834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_10001211C((uint64_t)sub_10003C850, v4);
}

uint64_t sub_10003C850()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[3];
  v0[7] = *(_QWORD *)(v0[6] + 112);
  swift_bridgeObjectRetain(v1);
  sub_10000F3E8();
  return sub_100010514();
}

uint64_t sub_10003C88C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10000AF58();
  v1 = sub_100019A60(242);
  v8 = sub_100022118(v1, v2, v3, v4, v5, v6, v7);
  return sub_10001DFA0(v8, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003C8E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t inited;
  uint64_t result;
  _QWORD *v16;
  _BYTE v17[152];

  v13 = sub_10001AAC8(&qword_10008E4B0);
  inited = swift_initStackObject(v13, v17);
  *(_OWORD *)(inited + 16) = xmmword_10006D1A0;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = &off_1000861A0;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  *(_QWORD *)(inited + 96) = &type metadata for Int64;
  *(_QWORD *)(inited + 104) = &off_100086160;
  *(_QWORD *)(inited + 72) = a4;
  *(_QWORD *)(inited + 136) = &type metadata for Int64;
  *(_QWORD *)(inited + 144) = &off_100086160;
  *(_QWORD *)(inited + 112) = a5;
  swift_bridgeObjectRetain(a3);
  sub_100011BCC(inited);
  swift_setDeallocating(inited);
  if (v6)
    return sub_100011B7C();
  sub_100011B7C();
  v16 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a3);
  sub_10002182C(a1, a2, a3, &v16);
  result = (uint64_t)v16;
  *a6 = v16;
  return result;
}

uint64_t sub_10003CA1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_10001211C((uint64_t)sub_10003CA30, v1);
}

uint64_t sub_10003CA30()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 112);
  swift_bridgeObjectRetain(v1);
  sub_10000F3E8();
  return sub_100010514();
}

uint64_t sub_10003CA68()
{
  uint64_t *v0;

  sub_1000223E0(v0[4], v0[2]);
  v0[5] = 0;
  return sub_10001B170((uint64_t)sub_10003BFCC, v0[3], 0);
}

uint64_t sub_10003CAC0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10003CACC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v40[72];
  uint64_t v41;

  v3 = v2;
  v41 = *(_QWORD *)(a2 + 16);
  if (v41)
  {
    v5 = a2 + 32;
    swift_bridgeObjectRetain(a2);
    v6 = 0;
    sub_10000AF58();
    while (*(_BYTE *)(a1 + 24) != 1)
    {
      v8 = *(_QWORD *)(v5 + 8 * v6);
      v9 = v7;
      v10 = sub_1000117C8(0xD000000000000027, v7);
      if (v3)
        goto LABEL_11;
      v18 = v10;
      v19 = sub_10001AAC8(&qword_10008E4B0);
      inited = swift_initStackObject(v19, v40);
      *(_OWORD *)(inited + 16) = xmmword_10006D0C0;
      *(_QWORD *)(inited + 56) = &type metadata for Int64;
      *(_QWORD *)(inited + 64) = &off_100086160;
      *(_QWORD *)(inited + 32) = v8;
      sub_100011BCC(inited);
      ++v6;
      swift_setDeallocating(inited);
      sub_100011B7C();
      do
      {
        v21 = sub_100011A74();
        swift_release(v21);
      }
      while (v21);
      v22 = swift_release(v18);
      v7 = v9;
      if (v6 == v41)
      {
        sub_100007848(v22, v9, v23, v24, v25, v26, v27, v28, v38, a2);
        goto LABEL_9;
      }
    }
    v29 = sub_1000225B4();
    v30 = sub_10000A7FC((uint64_t)&unk_1000863C0, v29);
    *(_DWORD *)v31 = 1;
    *(_QWORD *)(v31 + 8) = 0xD00000000000001DLL;
    *(_QWORD *)(v31 + 16) = 0x8000000100070ED0;
    v10 = swift_willThrow(v30, v31, v32, v33, v34, v35, v36, v37);
LABEL_11:
    sub_100007848(v10, v11, v12, v13, v14, v15, v16, v17, v38, a2);
  }
  else
  {
LABEL_9:
    sub_100021E50();
  }
}

uint64_t sub_10003CCAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_10001211C((uint64_t)sub_10003CCC0, v1);
}

uint64_t sub_10003CCC0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 112);
  v0[5] = 0;
  v2 = swift_task_alloc(32);
  v0[6] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  sub_10000F3E8();
  return sub_100012104();
}

uint64_t sub_10003CD08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;

  v1 = v0[5];
  v0[7] = sub_10003A4C8((void (*)(uint64_t *__return_ptr, uint64_t))sub_10003D594);
  v0[8] = v1;
  if (v1)
  {
    v2 = v0[3];
    v3 = sub_10003CDD8;
  }
  else
  {
    v4 = v0[3];
    swift_task_dealloc(v0[6]);
    v3 = sub_10003CD74;
    v2 = v4;
  }
  return sub_10001B170((uint64_t)v3, v2, 0);
}

uint64_t sub_10003CD74()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(void);

  if (v0[7] == 50)
  {
    v0[5] = v0[8];
    v1 = v0[2];
    v2 = swift_task_alloc(32);
    v0[6] = v2;
    *(_QWORD *)(v2 + 16) = v1;
    sub_10000F3E8();
    return sub_100012104();
  }
  else
  {
    v4 = (uint64_t (*)(void))sub_10001C704();
    return sub_100012CC0(v4);
  }
}

uint64_t sub_10003CDD8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return sub_10000BD38(*(uint64_t (**)(void))(v0 + 8));
}

sqlite3_int64 sub_10003CE04@<X0>(uint64_t a1@<X1>, sqlite3_int64 *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  sqlite3_int64 result;
  _QWORD v12[2];

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_100088100, v9 + v7, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_10003A404(0xD00000000000003CLL, 0x80000001000720C0, (void (*)(void))sub_10003D60C);
  result = swift_release(v10);
  if (!v2)
  {
    result = sub_100021E40();
    *a2 = result;
  }
  return result;
}

uint64_t sub_10003CF1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[72];

  getTimeIntervalSince1970(Date:)();
  v2 = v1;
  v3 = sub_10001AAC8(&qword_10008E4B0);
  inited = swift_initStackObject(v3, v7);
  *(_OWORD *)(inited + 16) = xmmword_10006D0C0;
  *(_QWORD *)(inited + 56) = &type metadata for Int64;
  *(_QWORD *)(inited + 64) = &off_100086160;
  *(_QWORD *)(inited + 32) = v2;
  sub_100011BCC(inited);
  if (v0)
  {
    swift_setDeallocating(inited);
    return sub_100011B7C();
  }
  else
  {
    swift_setDeallocating(inited);
    sub_100011B7C();
    do
    {
      v6 = sub_100011A74();
      result = swift_release(v6);
    }
    while (v6);
  }
  return result;
}

uint64_t sub_10003CFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_10001211C((uint64_t)sub_10003D008, v4);
}

uint64_t sub_10003D008()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = v0[4];
  v2 = *(_QWORD *)(v0[6] + 112);
  v0[7] = v2;
  if (v1)
    v3 = sub_10003D034;
  else
    v3 = sub_10003D0B8;
  return sub_10001211C((uint64_t)v3, v2);
}

uint64_t sub_10003D034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  sub_10000AF58();
  v3 = sub_10001CCC4(197, v2);
  if (v0)
  {
    *(_QWORD *)(v1 + 64) = v0;
    v4 = *(_QWORD *)(v1 + 48);
    v5 = sub_10003D0B0;
  }
  else
  {
    sub_10003D138(v3, *(_QWORD *)(v1 + 40), *(__int128 **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
    sub_10000CEA8();
    v4 = *(_QWORD *)(v1 + 48);
    v5 = sub_10003BFCC;
  }
  return sub_10001B170((uint64_t)v5, v4, 0);
}

uint64_t sub_10003D0B0()
{
  return sub_100005FB8();
}

uint64_t sub_10003D0B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  sub_10000AF58();
  v3 = sub_10001CCC4(76, v2);
  if (v0)
  {
    *(_QWORD *)(v1 + 72) = v0;
    v4 = *(_QWORD *)(v1 + 48);
    v5 = sub_10003D130;
  }
  else
  {
    sub_10003D290(v3, *(__int128 **)(v1 + 16));
    sub_10000CEA8();
    v4 = *(_QWORD *)(v1 + 48);
    v5 = sub_10003D8C4;
  }
  return sub_10001B170((uint64_t)v5, v4, 0);
}

uint64_t sub_10003D130()
{
  return sub_100005FB8();
}

uint64_t sub_10003D138(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t result;
  uint64_t v17;
  _BYTE v18[232];
  __int128 v19;
  __int128 v20;
  __int128 v21;

  getTimeIntervalSince1970(Date:)();
  v10 = v9;
  v11 = sub_10001AAC8(&qword_10008E4B0);
  inited = swift_initStackObject(v11, v18);
  v14 = a3[1];
  v21 = *a3;
  v13 = v21;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = &off_1000861A0;
  *(_OWORD *)(inited + 16) = xmmword_10006E5E0;
  *(_OWORD *)(inited + 32) = v13;
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = &off_1000861A0;
  *(_OWORD *)(inited + 72) = v14;
  v19 = a3[2];
  v15 = v19;
  v20 = v14;
  *(_QWORD *)(inited + 136) = &type metadata for String;
  *(_QWORD *)(inited + 144) = &off_1000861A0;
  *(_OWORD *)(inited + 112) = v15;
  *(_QWORD *)(inited + 176) = &type metadata for String;
  *(_QWORD *)(inited + 184) = &off_1000861A0;
  *(_QWORD *)(inited + 152) = a4;
  *(_QWORD *)(inited + 160) = a5;
  *(_QWORD *)(inited + 216) = &type metadata for Int64;
  *(_QWORD *)(inited + 224) = &off_100086160;
  *(_QWORD *)(inited + 192) = v10;
  sub_10001E08C((uint64_t)&v21);
  sub_10001E08C((uint64_t)&v20);
  sub_10001E08C((uint64_t)&v19);
  swift_bridgeObjectRetain(a5);
  sub_100011BCC(inited);
  if (v5)
  {
    swift_setDeallocating(inited);
    return sub_100011B7C();
  }
  else
  {
    swift_setDeallocating(inited);
    sub_100011B7C();
    do
    {
      v17 = sub_100011A74();
      result = swift_release(v17);
    }
    while (v17);
  }
  return result;
}

uint64_t sub_10003D290(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t inited;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t result;
  uint64_t v10;
  _BYTE v11[152];
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = sub_10001AAC8(&qword_10008E4B0);
  inited = swift_initStackObject(v4, v11);
  v7 = a2[1];
  v14 = *a2;
  v6 = v14;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = &off_1000861A0;
  *(_OWORD *)(inited + 16) = xmmword_10006D1A0;
  *(_OWORD *)(inited + 32) = v6;
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = &off_1000861A0;
  *(_OWORD *)(inited + 72) = v7;
  v12 = a2[2];
  v8 = v12;
  v13 = v7;
  *(_QWORD *)(inited + 136) = &type metadata for String;
  *(_QWORD *)(inited + 144) = &off_1000861A0;
  *(_OWORD *)(inited + 112) = v8;
  sub_10001E08C((uint64_t)&v14);
  sub_10001E08C((uint64_t)&v13);
  sub_10001E08C((uint64_t)&v12);
  sub_100011BCC(inited);
  if (v2)
  {
    swift_setDeallocating(inited);
    return sub_100011B7C();
  }
  else
  {
    swift_setDeallocating(inited);
    sub_100011B7C();
    do
    {
      v10 = sub_100011A74();
      result = swift_release(v10);
    }
    while (v10);
  }
  return result;
}

uint64_t sub_10003D39C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 24) == 1)
  {
    v4 = sub_1000225B4();
    v5 = swift_allocError(&unk_1000863C0, v4, 0, 0);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = 0xD00000000000001DLL;
    *(_QWORD *)(v6 + 16) = 0x8000000100070ED0;
    return swift_willThrow(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  else
  {
    result = sub_1000117C8(0xD00000000000001DLL, 0x8000000100072390);
    if (!v2)
    {
      v14 = result;
      do
      {
        v15 = sub_100011A74();
        swift_release(v15);
      }
      while (v15);
      swift_release(v14);
      result = sub_100021E40();
      *a2 = result;
    }
  }
  return result;
}

uint64_t sub_10003D494()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_10001211C((uint64_t)sub_10003D4A8, v0);
}

uint64_t sub_10003D4A8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 112);
  *(_QWORD *)(v0 + 24) = v1;
  return sub_10001211C((uint64_t)sub_10003D4C0, v1);
}

uint64_t sub_10003D4C0()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  sub_1000117C8(0x4D5555434156, 0xE600000000000000);
  do
  {
    v0 = sub_100011A74();
    swift_release(v0);
  }
  while (v0);
  sub_10000CEA8();
  v1 = (uint64_t (*)(void))sub_10001C704();
  return sub_10001A1E4(v1);
}

uint64_t type metadata accessor for DiskCache()
{
  return objc_opt_self(_TtC13rtcreportingd9DiskCache);
}

unint64_t sub_10003D554()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008EAB8;
  if (!qword_10008EAB8)
  {
    v1 = type metadata accessor for EventValue(255);
    result = swift_getWitnessTable(&unk_10006E8F0, v1);
    atomic_store(result, (unint64_t *)&qword_10008EAB8);
  }
  return result;
}

sqlite3_int64 sub_10003D594@<X0>(sqlite3_int64 *a1@<X8>)
{
  uint64_t v1;

  return sub_10003CE04(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10003D5AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10003D60C()
{
  type metadata accessor for Date(0);
  return sub_10003CF1C();
}

uint64_t sub_10003D664(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001AAC8(&qword_10008EA70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003D6A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003D6E8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for DiskCacheError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DiskCacheError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10003D7F8 + 4 * byte_10006E605[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003D82C + 4 * byte_10006E600[v4]))();
}

uint64_t sub_10003D82C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003D834(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003D83CLL);
  return result;
}

uint64_t sub_10003D848(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003D850);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10003D854(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003D85C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10003D868(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DiskCacheError()
{
  return &type metadata for DiskCacheError;
}

unint64_t sub_10003D888()
{
  unint64_t result;

  result = qword_10008F670;
  if (!qword_10008F670)
  {
    result = swift_getWitnessTable(&unk_10006E6A0, &type metadata for DiskCacheError);
    atomic_store(result, (unint64_t *)&qword_10008F670);
  }
  return result;
}

uint64_t sub_10003D8C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10003D8D0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  const char **v17;
  _QWORD *v18;
  uint64_t v19;
  const char **v20;
  _BYTE *v21;
  uint64_t result;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;

  if ((byte_10008F678 & 1) != 0)
  {
    v0 = sub_10001AAC8(&qword_10008F360);
    v1 = type metadata accessor for XPCObject(0);
    v2 = sub_100038A2C();
    v3 = _swiftEmptyArrayStorage;
    v4 = v0;
    v5 = v1;
    return Dictionary.init(dictionaryLiteral:)(v3, v4, v5, v2);
  }
  v6 = sub_10001AAC8(&qword_10008F350);
  v7 = sub_10001AAC8(&qword_10008F358);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v6, v11 + 12 * v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_10006E710;
  v13 = v12 + v11;
  v14 = (_QWORD *)(v12 + v11 + *(int *)(v7 + 48));
  *(_QWORD *)(v12 + v11) = XPC_ACTIVITY_DELAY;
  *v14 = 300;
  v15 = type metadata accessor for XPCObject(0);
  sub_1000199DC((uint64_t)v14);
  v16 = (_QWORD *)(v13 + v9 + *(int *)(v7 + 48));
  *(_QWORD *)(v13 + v9) = XPC_ACTIVITY_GRACE_PERIOD;
  *v16 = 120;
  sub_1000199DC((uint64_t)v16);
  v17 = (const char **)(v13 + 2 * v9);
  v18 = (const char **)((char *)v17 + *(int *)(v7 + 48));
  *v17 = XPC_ACTIVITY_PRIORITY;
  *v18 = String.init(cString:)(XPC_ACTIVITY_PRIORITY_UTILITY);
  v18[1] = v19;
  sub_10004044C((uint64_t)v18);
  v20 = (const char **)(v13 + 3 * v9);
  v21 = (char *)v20 + *(int *)(v7 + 48);
  *v20 = XPC_ACTIVITY_ALLOW_BATTERY;
  *v21 = 0;
  result = sub_100019470((uint64_t)v21);
  if (!XPC_ACTIVITY_POWER_NAP)
  {
    __break(1u);
    goto LABEL_14;
  }
  v23 = sub_10001BB90(XPC_ACTIVITY_POWER_NAP);
  *v23 = 1;
  result = sub_100019470((uint64_t)v23);
  if (!XPC_ACTIVITY_RANDOM_INITIAL_DELAY)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v24 = sub_10001BB90(XPC_ACTIVITY_RANDOM_INITIAL_DELAY);
  result = sub_10001E54C(v24, 60);
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v25 = sub_10001BB90(XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY);
  *v25 = 1;
  result = sub_100019470((uint64_t)v25);
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v26 = sub_10001BB90(XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY);
  *v26 = 1;
  result = sub_100019470((uint64_t)v26);
  if (!XPC_ACTIVITY_NETWORK_UPLOAD_SIZE)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v27 = sub_10001BB90(XPC_ACTIVITY_NETWORK_UPLOAD_SIZE);
  result = sub_10001E54C(v27, 5242880);
  if (!XPC_ACTIVITY_EXPECTED_DURATION)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v28 = sub_10001BB90(XPC_ACTIVITY_EXPECTED_DURATION);
  *(_QWORD *)v28 = XPC_ACTIVITY_INTERVAL_1_MIN;
  result = sub_1000199DC((uint64_t)v28);
  if (!XPC_ACTIVITY_GROUP_NAME)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v29 = sub_10001BB90(XPC_ACTIVITY_GROUP_NAME);
  *(_QWORD *)v29 = 0xD00000000000001DLL;
  *((_QWORD *)v29 + 1) = 0x8000000100071D30;
  result = sub_10004044C((uint64_t)v29);
  if (XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT)
  {
    v30 = sub_10001BB90(XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT);
    sub_10001E54C(v30, 1);
    v31 = sub_10001AAC8(&qword_10008F360);
    v2 = sub_100038A2C();
    v3 = (_QWORD *)v12;
    v4 = v31;
    v5 = v15;
    return Dictionary.init(dictionaryLiteral:)(v3, v4, v5, v2);
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_10003DBDC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026B1C(v0, qword_100097310);
  sub_100015718(v0, (uint64_t)qword_100097310);
  return Logger.init(subsystem:category:)(0xD000000000000017, 0x8000000100071220, 0x652D74696D627573, 0xEC00000072656761);
}

uint64_t sub_10003DC58()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[30] = v0;
  v1[31] = *(_QWORD *)(type metadata accessor for CachedSession(0) - 8);
  v1[32] = sub_10000BFD4();
  v1[33] = sub_10000BFD4();
  v1[34] = sub_10000BFD4();
  v1[35] = sub_10000BFD4();
  v1[36] = sub_10000BFD4();
  v1[37] = sub_10000BFD4();
  v1[38] = sub_10000BFD4();
  v1[39] = sub_10000BFD4();
  v1[40] = sub_10000BFD4();
  v1[41] = sub_10000BFD4();
  sub_10000F3E8();
  return sub_10001A1B0(v2, v3, v4);
}

void sub_10003DCF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_10008E010 != -1)
    swift_once(&qword_10008E010, sub_10003DBDC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100015718(v1, (uint64_t)qword_100097310);
  v0[42] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)sub_100012C5C(2);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "starting eager submission activity", v5, 2u);
    sub_1000120F8((uint64_t)v5);
  }

  v0[23] = &_swiftEmptySetSingleton;
  if (qword_1000973C8)
  {
    v0[43] = qword_1000973C8;
    sub_100019A20();
    v6 = (_QWORD *)sub_10000BFD4();
    v0[44] = v6;
    *v6 = v0;
    v6[1] = sub_10003DE00;
    sub_1000403D0(50);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10003DE00()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)();
  uint64_t v6;

  sub_10000B0F0();
  sub_10001F59C();
  v0[45] = v2;
  v0[46] = v1;
  sub_100030350(v3);
  if (v1)
  {
    v4 = v0[30];
    v5 = (void (*)())sub_10003F3C0;
  }
  else
  {
    v6 = v0[30];
    swift_release(v0[43]);
    v5 = sub_10003DE60;
    v4 = v6;
  }
  return sub_10001A1B0((uint64_t)v5, v4, 0);
}

void sub_10003DE60()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v4 = *(_QWORD *)(v1 + 360);
  v5 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v1 + 376) = v5;
  if (v5)
  {
    v6 = static Task<>.isCancelled.getter();
    v4 = *(_QWORD *)(v1 + 360);
    if ((v6 & 1) == 0)
    {
      v10 = *(_QWORD *)(v1 + 248);
      v11 = *(_DWORD *)(v10 + 80);
      *(_DWORD *)(v1 + 664) = v11;
      *(_QWORD *)(v1 + 384) = 0;
      v12 = *(_QWORD *)(v4 + 16);
      swift_bridgeObjectRetain(v4);
      if (v12)
      {
        v14 = (v11 + 32) & ~(unint64_t)v11;
        v15 = *(_QWORD *)(v1 + 328);
        *(_QWORD *)(v1 + 392) = *(_QWORD *)(v10 + 72);
        sub_100037D60(v13 + v14, v15);
        sub_10001CDA4();
        sub_100010644();
        sub_100019354();
        sub_10000AFC4();
        sub_10000781C();
        if ((v2 & 1) != 0)
        {
          v16 = sub_10001BC3C();
          Logger.logObject.getter(v16);
          v17 = sub_10000BFB8();
          if (sub_1000108D4(v17))
          {
            v18 = sub_100012C5C(12);
            sub_100012C5C(32);
            sub_100040458();
            v19 = sub_10001054C(4.8751e-34);
            v21 = sub_10001B3D0(v19, v20, &v38);
            sub_10000A8D8(v21);
            sub_10001B2B4();
            sub_10001B0A0((void *)&_mh_execute_header, v22, v23, "sending events for session: %{public}s");
            sub_10001DA00();
            sub_1000120F8(v3);
            sub_1000120F8(v18);
          }
          else
          {
            sub_10001B2B4();
          }

          v29 = qword_1000973E0;
          *(_QWORD *)(v1 + 424) = qword_1000973E0;
          if (v29)
          {
            sub_100019A20();
            v30 = (_QWORD *)sub_10000BFD4();
            *(_QWORD *)(v1 + 432) = v30;
            v31 = sub_100018EB8(v30, (uint64_t)sub_10003E288);
            sub_10001A3F8(v31, v32);
            return;
          }
          goto LABEL_36;
        }
        sub_100010644();
        sub_10001D1C0();
        sub_10001E504();
        v28 = qword_1000973D8;
        *(_QWORD *)(v1 + 416) = qword_1000973D8;
        if (v28)
        {
          sub_100010644();
          sub_100019A20();
          goto LABEL_17;
        }
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  swift_bridgeObjectRelease(v4);
  sub_1000180A4();
  if (v0)
  {
    sub_100015450();
    goto LABEL_5;
  }
  sub_10004043C();
  if (!v27 & v26)
  {
    if (v24[8])
      goto LABEL_14;
    if (v25 < 0xC0)
      goto LABEL_31;
    if (v24[9])
      goto LABEL_14;
    if (v25 < 0x100)
      goto LABEL_31;
    if (v24[10])
      goto LABEL_14;
    if (v25 < 0x140)
      goto LABEL_31;
    if (v24[11])
    {
LABEL_14:
      sub_1000403B8();
LABEL_5:
      sub_10000BE10(v7);
      v9 = qword_1000973D8;
      *(_QWORD *)(v1 + 624) = qword_1000973D8;
      if (v9)
      {
        sub_10001CEEC(*(_QWORD *)(v8 + 48));
        sub_100019A20();
LABEL_17:
        sub_10000F3E8();
        sub_100010D98();
        return;
      }
      goto LABEL_34;
    }
    v33 = v25 >> 6;
    v34 = 12;
    while (v34 - 7 < v33)
    {
      if (v24[v34++])
        goto LABEL_14;
    }
  }
LABEL_31:
  swift_release(v24);
  v36 = qword_1000973D8;
  *(_QWORD *)(v1 + 648) = qword_1000973D8;
  if (v36)
  {
    sub_100019A20();
    sub_10000781C();
    v37 = (_QWORD *)swift_task_alloc(dword_10008F08C);
    *(_QWORD *)(v1 + 656) = v37;
    sub_10000D22C(v37, (uint64_t)sub_10003F2D8);
    sub_10001D3D8();
    return;
  }
LABEL_37:
  __break(1u);
}

uint64_t sub_10003E144()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[30];
  sub_10003607C(v0[50], v0[51]);
  sub_10000781C();
  sub_10000CEA8();
  return sub_10001808C((uint64_t)sub_10003E190, v1, 0);
}

void sub_10003E190()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;

  v3 = sub_10001BC3C();
  Logger.logObject.getter(v3);
  v4 = sub_10000BFB8();
  if (sub_1000108D4(v4))
  {
    v5 = sub_100012C5C(12);
    sub_100012C5C(32);
    sub_100040458();
    v6 = sub_10001054C(4.8751e-34);
    v8 = sub_10001B3D0(v6, v7, &v15);
    sub_10000A8D8(v8);
    sub_10001B2B4();
    sub_10001B0A0((void *)&_mh_execute_header, v9, v10, "sending events for session: %{public}s");
    sub_10001DA00();
    sub_1000120F8(v2);
    sub_1000120F8(v5);
  }
  else
  {
    sub_10001B2B4();
  }

  v11 = qword_1000973E0;
  *(_QWORD *)(v1 + 424) = qword_1000973E0;
  if (v11)
  {
    sub_100019A20();
    v12 = (_QWORD *)sub_10000BFD4();
    *(_QWORD *)(v1 + 432) = v12;
    v13 = sub_100018EB8(v12, (uint64_t)sub_10003E288);
    sub_10001A3F8(v13, v14);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10003E288()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)();
  uint64_t v7;

  sub_10000B0F0();
  sub_10001F59C();
  v0[55] = v2;
  v0[56] = v3;
  v0[57] = v1;
  sub_100030350(v4);
  if (v1)
  {
    v5 = v0[30];
    v6 = sub_10003F5D0;
  }
  else
  {
    v7 = v0[30];
    swift_release(v0[53]);
    v6 = sub_10003E2EC;
    v5 = v7;
  }
  return sub_10001A1B0((uint64_t)v6, v5, 0);
}

void sub_10003E2EC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  os_log_type_t v56;
  _BOOL4 v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  NSObject *log;
  uint64_t v74;
  NSObject *v75;
  uint64_t v76;

  if (v0[55])
  {
    if (qword_1000973C8)
    {
      sub_10000BEA4();
      sub_100019A20();
      sub_10000CA18();
      v1 = (_QWORD *)sub_1000156A4();
      v0[60] = v1;
      sub_100019B34(v1, (uint64_t)sub_10003E748);
      sub_100015AF4();
      sub_10003C834(v2, v3, v4, v5);
      return;
    }
    goto LABEL_21;
  }
  v6 = v0[41];
  v7 = v0[37];
  v9 = v0[35];
  v8 = v0[36];
  sub_100037D60(v6, v0[38]);
  sub_100037D60(v6, v7);
  sub_100037D60(v6, v8);
  v10 = sub_100037D60(v6, v9);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = v0[41];
  v15 = v0[38];
  v16 = v0[36];
  if (v13)
  {
    v8 = sub_100012C5C(42);
    v74 = sub_100012C5C(128);
    *(_DWORD *)v8 = 136446978;
    v75 = v14;
    v76 = v74;
    log = v11;
    v18 = *(_QWORD *)(v15 + 48);
    v17 = *(_QWORD *)(v15 + 56);
    sub_100010644();
    v0[16] = sub_100014F94(v18, v17, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v8 + 4, v8 + 12);
    sub_10000781C();
    sub_100015638();
    *(_WORD *)(v8 + 12) = 2082;
    v19 = sub_10000CA18();
    v0[17] = sub_1000403E0(v19, v20, v21, v22, v23, v24, v25, v26);
    sub_10000BEB8((uint64_t)(v0 + 17), (uint64_t)(v0 + 18), v27, v8 + 22);
    sub_10000AF70();
    sub_10000D238();
    *(_WORD *)(v8 + 22) = 2082;
    v28 = sub_10000CA18();
    v0[18] = sub_1000403E0(v28, v29, v30, v31, v32, v33, v34, v35);
    sub_10000BEB8((uint64_t)(v0 + 18), (uint64_t)(v0 + 19), v36, v8 + 32);
    sub_10000AF70();
    sub_100037D24(v16);
    *(_WORD *)(v8 + 32) = 2082;
    v37 = sub_10000CA18();
    v0[19] = sub_1000403E0(v37, v38, v39, v40, v41, v42, v43, v44);
    sub_10000BEB8((uint64_t)(v0 + 19), (uint64_t)(v0 + 20), v45, v8 + 42);
    sub_10000AF70();
    sub_100015748();
    v14 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v12, "no backend available for session %{public}s - %{public}s:%{public}s:%{public}s", (uint8_t *)v8, 0x2Au);
    swift_arrayDestroy(v74, 4);
    sub_1000120F8(v74);
    sub_1000120F8(v8);

    v46 = (uint64_t)v75;
  }
  else
  {

    sub_100015748();
    sub_100037D24(v16);
    sub_10000D238();
    sub_100015638();
    v46 = (uint64_t)v14;
  }
  sub_100037D24(v46);
  sub_10001CFC8();
  if (v48)
  {
    sub_100010ED0();
    sub_10001DFB0();
    v49 = qword_1000973C8;
    v0[72] = qword_1000973C8;
    if (v49)
    {
      sub_10001FE30();
      sub_100019A20();
      v50 = (_QWORD *)sub_1000156A4();
      v0[73] = v50;
      sub_10001D8D0(v50, (uint64_t)sub_10003EF94);
      sub_100015AF4();
      sub_10003BFDC(v51, v52);
      return;
    }
    goto LABEL_22;
  }
  sub_10001AF1C(v47);
  if (v53)
  {
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  sub_10001BA00(v54);
  sub_10001CDA4();
  sub_100010644();
  sub_100019354();
  sub_10000AFC4();
  sub_10000781C();
  if ((v8 & 1) != 0)
  {
    v55 = sub_10001BC3C();
    Logger.logObject.getter(v55);
    v56 = sub_10000BFB8();
    v57 = sub_1000108D4(v56);
    v58 = v0[40];
    if (v57)
    {
      v59 = (_DWORD *)sub_100012C5C(12);
      v60 = sub_100012C5C(32);
      v76 = v60;
      *v59 = 136446210;
      swift_bridgeObjectRetain(*(_QWORD *)(v58 + 56));
      v63 = sub_10001B3D0(v61, v62, &v76);
      sub_10000A8D8(v63);
      sub_10001B2B4();
      sub_10001B0A0((void *)&_mh_execute_header, v64, v65, "sending events for session: %{public}s");
      sub_10001DA00();
      sub_1000120F8(v60);
      sub_1000120F8((uint64_t)v59);
    }
    else
    {
      sub_10001B2B4();
    }

    v70 = qword_1000973E0;
    v0[53] = qword_1000973E0;
    if (v70)
    {
      sub_100019A20();
      v71 = (_QWORD *)sub_10000BFD4();
      v0[54] = v71;
      sub_10001FCBC(v71, (uint64_t)sub_10003E288);
      sub_100015AF4();
      __asm { BR              X1 }
    }
    goto LABEL_24;
  }
  sub_100010644();
  sub_10001D1C0();
  sub_10001E504();
  v66 = qword_1000973D8;
  v0[52] = qword_1000973D8;
  if (v66)
  {
    sub_100010644();
    sub_100019A20();
    sub_10000F3E8();
    sub_100015AF4();
    swift_task_switch(v67, v68, v69);
    return;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
}

uint64_t sub_10003E748()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)();

  sub_10000B0F0();
  sub_10001F59C();
  v0[61] = v2;
  v0[62] = v1;
  sub_100030350(v3);
  if (v1)
  {
    v4 = v0[30];
    v5 = sub_10003F878;
  }
  else
  {
    sub_10000BE70(v0[59]);
    sub_10000CEA8();
    v5 = sub_10003E7A8;
    v4 = (uint64_t)v0;
  }
  return sub_10001A1B0((uint64_t)v5, v4, 0);
}

void sub_10003E7A8()
{
  os_log_type_t v0;
  _QWORD *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  char v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  NSObject *log;
  uint64_t v62;
  os_log_type_t type[16];
  uint64_t v64[2];

  v3 = v1[61];
  v4 = v1[41];
  if (*(_QWORD *)(v3 + 16))
  {
    v5 = v1[42];
    sub_100037D60(v4, v1[39]);
    v6 = swift_bridgeObjectRetain_n(v3, 4);
    Logger.logObject.getter(v6);
    v7 = sub_10000BFB8();
    if (sub_1000108D4(v7))
    {
      log = v5;
      v8 = v1[61];
      v9 = v1[39];
      v10 = sub_100012C5C(42);
      v62 = sub_100012C5C(96);
      v64[0] = v62;
      *(_DWORD *)v10 = 134349826;
      v1[26] = *(_QWORD *)(v3 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 26, v1 + 27, v10 + 4, v10 + 12);
      *(_WORD *)(v10 + 12) = 2080;
      v11 = *(_QWORD *)(v9 + 48);
      v12 = *(_QWORD *)(v9 + 56);
      swift_bridgeObjectRetain(v12);
      v1[27] = sub_100014F94(v11, v12, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 27, v1 + 28, v10 + 14, v10 + 22);
      sub_10000BDE4();
      sub_100015638();
      *(_WORD *)(v10 + 22) = 2082;
      v13 = sub_10005297C(v8, 0x646F6874656D5FLL, 0xE700000000000000);
      v14 = sub_100052C78((uint64_t)v13);
      v15 = Set.description.getter(v14, &type metadata for Int64, &protocol witness table for Int64);
      v17 = v16;
      swift_bridgeObjectRelease(v14);
      v1[28] = sub_100014F94(v15, v17, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 28, v1 + 29, v10 + 24, v10 + 32);
      sub_10000BDE4();
      sub_10000D2C4();
      *(_WORD *)(v10 + 32) = 2082;
      v18 = sub_10005297C(v8, 0x7375746174735FLL, 0xE700000000000000);
      v19 = sub_100052C78((uint64_t)v18);
      Set.description.getter(v19, &type metadata for Int64, &protocol witness table for Int64);
      v20 = sub_10000AF70();
      v1[29] = sub_10001B3D0(v20, v21, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 29, v1 + 30, v10 + 34, v10 + 42);
      sub_10000BDE4();
      sub_10000D2C4();
      v5 = log;
      _os_log_impl((void *)&_mh_execute_header, log, v0, "sending %{public}ld events for session %s with categories [%{public}s] types [%{public}s]", (uint8_t *)v10, 0x2Au);
      swift_arrayDestroy(v62, 3);
      sub_1000120F8(v62);
      sub_1000120F8(v10);
    }
    else
    {
      v29 = v1[61];
      sub_100037D24(v1[39]);
      swift_bridgeObjectRelease_n(v29, 4);
    }

    v30 = *(_QWORD *)(v3 + 16);
    v1[63] = v30;
    v31 = _swiftEmptyArrayStorage;
    if (v30)
    {
      v32 = v1 + 20;
      v33 = v1[61];
      v1[20] = _swiftEmptyArrayStorage;
      sub_10005EC70(0, v30, 0);
      v31 = (_QWORD *)v1[20];
      v34 = (_OWORD *)(v33 + 48);
      do
      {
        v35 = *((_QWORD *)v34 - 1);
        *(_OWORD *)type = *v34;
        v36 = *v34;
        *v32 = v31;
        v37 = v31[2];
        v38 = v31[3];
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRetain(*(_QWORD *)&type[8]);
        if (v37 >= v38 >> 1)
        {
          sub_10005EC70((char *)(v38 > 1), v37 + 1, 1);
          v31 = (_QWORD *)*v32;
        }
        v31[2] = v37 + 1;
        v39 = &v31[3 * v37];
        v39[4] = v35;
        *(_OWORD *)(v39 + 5) = *(_OWORD *)type;
        v34 += 2;
        --v30;
      }
      while (v30);
    }
    v1[64] = v31;
    v40 = v1[56];
    swift_getObjectType(v1[55]);
    v41 = (_QWORD *)swift_task_alloc(*(unsigned int *)(*(_QWORD *)(v40 + 24) + 4));
    v1[65] = v41;
    *v41 = v1;
    v41[1] = sub_10003ED1C;
    sub_100019ADC();
    __asm { BR              X3 }
  }
  v22 = (void *)v1[55];
  sub_100037D24(v4);
  sub_10000781C();
  sub_100019ABC();
  sub_10001CFC8();
  if (v24)
  {
    sub_100010ED0();
    sub_10001DFB0();
    v25 = qword_1000973C8;
    v1[72] = qword_1000973C8;
    if (v25)
    {
      sub_10001FE30();
      sub_100019A20();
      v26 = (_QWORD *)sub_1000156A4();
      v1[73] = v26;
      sub_10001D8D0(v26, (uint64_t)sub_10003EF94);
      sub_100019ADC();
      sub_10003BFDC(v27, v28);
      return;
    }
    goto LABEL_25;
  }
  sub_10001AF1C(v23);
  if (v43)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  sub_10001BA00(v44);
  sub_10001CDA4();
  sub_100010644();
  sub_100019354();
  sub_10000AFC4();
  sub_10000781C();
  if ((v2 & 1) != 0)
  {
    v45 = sub_10001BC3C();
    Logger.logObject.getter(v45);
    v46 = sub_10000BFB8();
    if (sub_1000108D4(v46))
    {
      v47 = sub_100012C5C(12);
      v48 = sub_100012C5C(32);
      v64[0] = v48;
      v49 = sub_10001054C(4.8751e-34);
      v51 = sub_10001B3D0(v49, v50, v64);
      sub_10000A8D8(v51);
      sub_10001B2B4();
      sub_10001B0A0((void *)&_mh_execute_header, v52, v53, "sending events for session: %{public}s");
      sub_10001DA00();
      sub_1000120F8(v48);
      sub_1000120F8(v47);
    }
    else
    {
      sub_10001B2B4();
    }

    v58 = qword_1000973E0;
    v1[53] = qword_1000973E0;
    if (v58)
    {
      sub_100019A20();
      v59 = (_QWORD *)sub_10000BFD4();
      v1[54] = v59;
      sub_10001FCBC(v59, (uint64_t)sub_10003E288);
      sub_100019ADC();
      __asm { BR              X1 }
    }
    goto LABEL_27;
  }
  sub_100010644();
  sub_10001D1C0();
  sub_10001E504();
  v54 = qword_1000973D8;
  v1[52] = qword_1000973D8;
  if (v54)
  {
    sub_100010644();
    sub_100019A20();
    sub_10000F3E8();
    sub_100019ADC();
    swift_task_switch(v55, v56, v57);
    return;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
}

uint64_t sub_10003ED1C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void (*v6)();
  uint64_t v7;
  uint64_t v8;

  sub_10000B0F0();
  v3 = v0[65];
  *v4 = *v2;
  v0[66] = v1;
  swift_task_dealloc(v3);
  v5 = v0[64];
  if (v1)
  {
    sub_10000BE70(v5);
    sub_10000A828();
    v6 = sub_10003FB30;
    v7 = (uint64_t)v0;
  }
  else
  {
    v8 = v0[30];
    swift_bridgeObjectRelease(v5);
    v6 = sub_10003ED8C;
    v7 = v8;
  }
  return sub_10001A1B0((uint64_t)v6, v7, 0);
}

void sub_10003ED8C()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = qword_1000973C8;
  v0[67] = qword_1000973C8;
  if (v1)
  {
    v2 = v0[63];
    v3 = v0[61];
    if (v2)
    {
      v4 = v0 + 25;
      v0[25] = _swiftEmptyArrayStorage;
      swift_retain(v1);
      sub_10005ECB8(0, v2, 0);
      v5 = 0;
      v6 = (_QWORD *)v0[25];
      v7 = (uint64_t *)(v3 + 32);
      v8 = v6[2];
      do
      {
        v10 = *v7;
        v7 += 4;
        v9 = v10;
        *v4 = v6;
        v11 = v6[3];
        if (v8 >= v11 >> 1)
        {
          sub_10005ECB8((char *)(v11 > 1), v8 + 1, 1);
          v6 = (_QWORD *)*v4;
        }
        v12 = v0[63];
        ++v5;
        v6[2] = v8 + 1;
        v6[v8++ + 4] = v9;
      }
      while (v5 != v12);
      swift_bridgeObjectRelease(v0[61]);
    }
    else
    {
      swift_retain(v1);
      swift_bridgeObjectRelease(v3);
      v6 = _swiftEmptyArrayStorage;
    }
    v0[68] = v6;
    v13 = (_QWORD *)swift_task_alloc(dword_10008F5B4);
    v0[69] = v13;
    *v13 = v0;
    v13[1] = sub_10003EEC8;
    sub_10003CA1C((uint64_t)v6);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10003EEC8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void (*v6)();

  sub_10000B0F0();
  v3 = v0[69];
  *v4 = *v2;
  v0[70] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    v5 = v0[30];
    v6 = sub_10003FDE8;
  }
  else
  {
    sub_10000BE70(v0[68]);
    sub_10000CEA8();
    v6 = sub_10003EF30;
    v5 = (uint64_t)v0;
  }
  return sub_10001A1B0((uint64_t)v6, v5, 0);
}

void sub_10003EF30()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (qword_1000973C8)
  {
    sub_10000BEA4();
    sub_100019A20();
    sub_10000CA18();
    v1 = (_QWORD *)sub_1000156A4();
    *(_QWORD *)(v0 + 480) = v1;
    v2 = sub_100019B34(v1, (uint64_t)sub_10003E748);
    sub_10003C834(v2, v3, v4, v5);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10003EF94()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 584);
  *(_QWORD *)(*v1 + 592) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 576);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 360));
    swift_release(v4);
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 576));
  }
  sub_10000F3E8();
  return sub_10001808C(v5, v6, v7);
}

uint64_t sub_10003F014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 568) + 1;
  sub_100037D24(*(_QWORD *)(v0 + 272));
  if (v2 == v1)
  {
    result = sub_100010ED0();
    if (qword_1000973C8)
    {
      *(_QWORD *)(v0 + 344) = qword_1000973C8;
      sub_100019A20();
      v4 = (_QWORD *)sub_10000BFD4();
      *(_QWORD *)(v0 + 352) = v4;
      *v4 = v0;
      v4[1] = sub_10003DE00;
      return sub_1000403D0(50);
    }
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 568) + 1;
    *(_QWORD *)(v0 + 568) = v5;
    result = sub_100037D60(*(_QWORD *)(v0 + 360)+ ((*(unsigned __int8 *)(v0 + 664) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 664))+ *(_QWORD *)(v0 + 392) * v5, *(_QWORD *)(v0 + 272));
    v6 = qword_1000973C8;
    *(_QWORD *)(v0 + 576) = qword_1000973C8;
    if (v6)
    {
      sub_10001FE30();
      sub_100019A20();
      v7 = (_QWORD *)sub_1000156A4();
      *(_QWORD *)(v0 + 584) = v7;
      v8 = sub_10001D8D0(v7, (uint64_t)sub_10003EF94);
      return sub_10003BFDC(v8, v9);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10003F10C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[30];
  sub_10000E4D8(v0[80], v0[79], 0);
  sub_10000781C();
  sub_10000CEA8();
  return sub_10001808C((uint64_t)sub_10003F160, v1, 0);
}

void sub_10003F160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 608);
  if (*(_QWORD *)(v0 + 616))
  {
LABEL_2:
    sub_10000BE10(v1);
    v2 = qword_1000973D8;
    *(_QWORD *)(v0 + 624) = qword_1000973D8;
    if (v2)
    {
      sub_10001CEEC(*(_QWORD *)(*(_QWORD *)(v0 + 600) + 48));
      sub_100019A20();
      sub_10000F3E8();
      sub_10001A1B0(v3, v4, v5);
      return;
    }
    goto LABEL_22;
  }
  v6 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
    goto LABEL_21;
  }
  v7 = (1 << *(_BYTE *)(v0 + 668)) + 63;
  v8 = *(_QWORD *)(v0 + 600);
  if (v6 < (uint64_t)(v7 >> 6))
  {
    v9 = v8 + 56;
    ++v1;
    if (*(_QWORD *)(v8 + 56 + 8 * v6))
      goto LABEL_2;
    v10 = v7 >> 6;
    v1 = v6 + 1;
    if (v6 + 1 < v10)
    {
      if (*(_QWORD *)(v9 + 8 * v1))
        goto LABEL_2;
      v1 = v6 + 2;
      if (v6 + 2 < v10)
      {
        if (*(_QWORD *)(v9 + 8 * v1))
          goto LABEL_2;
        v11 = v6 + 3;
        if (v11 < v10)
        {
          if (*(_QWORD *)(v9 + 8 * v11))
          {
            v1 = v11;
            goto LABEL_2;
          }
          while (1)
          {
            v1 = v11 + 1;
            if (__OFADD__(v11, 1))
              break;
            if (v1 >= v10)
              goto LABEL_18;
            ++v11;
            if (*(_QWORD *)(v9 + 8 * v1))
              goto LABEL_2;
          }
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
      }
    }
  }
LABEL_18:
  swift_release(v8);
  v12 = qword_1000973D8;
  *(_QWORD *)(v0 + 648) = qword_1000973D8;
  if (v12)
  {
    sub_100019A20();
    sub_10000781C();
    v13 = (_QWORD *)swift_task_alloc(dword_10008F08C);
    *(_QWORD *)(v0 + 656) = v13;
    sub_10000D22C(v13, (uint64_t)sub_10003F2D8);
    sub_100035EFC();
    return;
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_10003F2D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 240);
  sub_10000BDC4(*(_QWORD *)(*(_QWORD *)v0 + 656));
  sub_10000CEA8();
  return sub_10001A1B0((uint64_t)sub_10003F324, v1, 0);
}

uint64_t sub_10003F324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10000A874();
  v1 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 280);
  v9 = *(_QWORD *)(v0 + 256);
  v8 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

#error "10003F438: call analysis failed (funcsize=128)"

void sub_10003F5D0()
{
  void *v0;
  void *v1;
  _QWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t (*v41)(void);
  uint64_t v42;
  uint64_t v43;

  swift_release(v2[53]);
  sub_10004047C();
  sub_100011200();
  v5 = sub_100011200();
  Logger.logObject.getter(v5);
  v6 = sub_10000CA38();
  if (sub_100007874(v6))
  {
    v42 = v2[41];
    v7 = sub_100012C5C(22);
    v8 = sub_100012C5C(64);
    v43 = v8;
    v9 = sub_10004042C(4.8752e-34);
    *(_QWORD *)(v7 + 4) = sub_100010878(v9, v10, v2 + 14);
    sub_10000A828();
    sub_10000D238();
    v11 = sub_100010900();
    swift_getErrorValue(v11, v12, v13);
    v14 = sub_10000C054();
    *(_QWORD *)(v7 + 14) = sub_10001B29C(v14, v15, v16, v17);
    sub_10000A828();
    sub_10000BE9C();
    sub_10000BE9C();
    sub_10001FD7C((void *)&_mh_execute_header, v18, v19, "failed to process events for session %{public}s: %{public}s");
    sub_100040404();
    sub_1000120F8(v8);
    sub_1000120F8(v7);

    sub_10000BE9C();
    v20 = v42;
  }
  else
  {
    sub_10001E1F0();
    sub_10000BE9C();
    sub_10000BE9C();
    sub_10001B2B4();
    sub_10000BE9C();
    v20 = (uint64_t)v0;
  }
  sub_100037D24(v20);
  sub_10001CFC8();
  if (v22)
  {
    sub_100010ED0();
    sub_10001DFB0();
    v23 = qword_1000973C8;
    v2[72] = qword_1000973C8;
    if (v23)
    {
      sub_10001FE30();
      sub_100019A20();
      v24 = (_QWORD *)sub_1000156A4();
      v2[73] = v24;
      v25 = sub_10001D8D0(v24, (uint64_t)sub_10003EF94);
      sub_100019A6C(v25, v26);
      return;
    }
    goto LABEL_18;
  }
  sub_10001AF1C(v21);
  if (v27)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  sub_10001BA00(v28);
  sub_10001CDA4();
  sub_100010644();
  sub_100019354();
  sub_10000AFC4();
  sub_10000781C();
  if ((v3 & 1) == 0)
  {
    sub_100010644();
    sub_10001D1C0();
    sub_10001E504();
    v37 = qword_1000973D8;
    v2[52] = qword_1000973D8;
    if (v37)
    {
      sub_100010644();
      sub_100019A20();
      sub_10000F3E8();
      sub_10000AFD0();
      return;
    }
    goto LABEL_19;
  }
  v29 = sub_10001BC3C();
  Logger.logObject.getter(v29);
  v30 = sub_10000BFB8();
  if (sub_1000108D4(v30))
  {
    v31 = sub_100012C5C(12);
    sub_100012C5C(32);
    sub_100040458();
    v32 = sub_10001054C(4.8751e-34);
    v34 = sub_10001B3D0(v32, v33, &v43);
    sub_10000A8D8(v34);
    sub_10001B2B4();
    sub_10001B0A0((void *)&_mh_execute_header, v35, v36, "sending events for session: %{public}s");
    sub_10001DA00();
    sub_1000120F8(v4);
    sub_1000120F8(v31);
  }
  else
  {
    sub_10001B2B4();
  }

  v38 = qword_1000973E0;
  v2[53] = qword_1000973E0;
  if (v38)
  {
    sub_100019A20();
    v39 = (_QWORD *)sub_10000BFD4();
    v2[54] = v39;
    v40 = sub_100018EB8(v39, (uint64_t)sub_10003E288);
    sub_10000F404(v40, v41);
    return;
  }
LABEL_20:
  __break(1u);
}

void sub_10003F878()
{
  void *v0;
  _QWORD *v1;
  char v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  uint64_t v43;
  uint64_t v44;

  v4 = (void *)v1[58];
  v5 = v1[55];
  swift_bridgeObjectRelease(v1[59]);
  sub_10000CEA8();
  swift_unknownObjectRelease(v5);
  sub_10004047C();
  sub_100011200();
  v6 = sub_100011200();
  Logger.logObject.getter(v6);
  v7 = sub_10000CA38();
  if (sub_100007874(v7))
  {
    v43 = v1[41];
    v8 = sub_100012C5C(22);
    v9 = sub_100012C5C(64);
    v44 = v9;
    v10 = sub_10004042C(4.8752e-34);
    *(_QWORD *)(v8 + 4) = sub_100010878(v10, v11, v1 + 14);
    sub_10000A828();
    sub_10000D238();
    v12 = sub_100010900();
    swift_getErrorValue(v12, v13, v14);
    v15 = sub_10000C054();
    *(_QWORD *)(v8 + 14) = sub_10001B29C(v15, v16, v17, v18);
    sub_10000A828();
    sub_10000BE9C();
    sub_10000BE9C();
    sub_10001FD7C((void *)&_mh_execute_header, v19, v20, "failed to process events for session %{public}s: %{public}s");
    sub_100040404();
    sub_1000120F8(v9);
    sub_1000120F8(v8);

    sub_10000BE9C();
    v21 = v43;
  }
  else
  {
    sub_10001E1F0();
    sub_10000BE9C();
    sub_10000BE9C();
    sub_10001B2B4();
    sub_10000BE9C();
    v21 = (uint64_t)v4;
  }
  sub_100037D24(v21);
  sub_10001CFC8();
  if (v23)
  {
    sub_100010ED0();
    sub_10001DFB0();
    v24 = qword_1000973C8;
    v1[72] = qword_1000973C8;
    if (v24)
    {
      sub_10001FE30();
      sub_100019A20();
      v25 = (_QWORD *)sub_1000156A4();
      v1[73] = v25;
      v26 = sub_10001D8D0(v25, (uint64_t)sub_10003EF94);
      sub_100019A6C(v26, v27);
      return;
    }
    goto LABEL_18;
  }
  sub_10001AF1C(v22);
  if (v28)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  sub_10001BA00(v29);
  sub_10001CDA4();
  sub_100010644();
  sub_100019354();
  sub_10000AFC4();
  sub_10000781C();
  if ((v2 & 1) == 0)
  {
    sub_100010644();
    sub_10001D1C0();
    sub_10001E504();
    v38 = qword_1000973D8;
    v1[52] = qword_1000973D8;
    if (v38)
    {
      sub_100010644();
      sub_100019A20();
      sub_10000F3E8();
      sub_10000AFD0();
      return;
    }
    goto LABEL_19;
  }
  v30 = sub_10001BC3C();
  Logger.logObject.getter(v30);
  v31 = sub_10000BFB8();
  if (sub_1000108D4(v31))
  {
    v32 = sub_100012C5C(12);
    sub_100012C5C(32);
    sub_100040458();
    v33 = sub_10001054C(4.8751e-34);
    v35 = sub_10001B3D0(v33, v34, &v44);
    sub_10000A8D8(v35);
    sub_10001B2B4();
    sub_10001B0A0((void *)&_mh_execute_header, v36, v37, "sending events for session: %{public}s");
    sub_10001DA00();
    sub_1000120F8(v3);
    sub_1000120F8(v32);
  }
  else
  {
    sub_10001B2B4();
  }

  v39 = qword_1000973E0;
  v1[53] = qword_1000973E0;
  if (v39)
  {
    sub_100019A20();
    v40 = (_QWORD *)sub_10000BFD4();
    v1[54] = v40;
    v41 = sub_100018EB8(v40, (uint64_t)sub_10003E288);
    sub_10000F404(v41, v42);
    return;
  }
LABEL_20:
  __break(1u);
}

void sub_10003FB30()
{
  void *v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t (*v62)(void);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  sub_1000112D4();
  sub_100011200();
  v4 = sub_100011200();
  Logger.logObject.getter(v4);
  v5 = sub_10000CA38();
  if (sub_10000F4B0(v5))
  {
    v64 = v2[55];
    v65 = v2[41];
    v3 = v2[32];
    v6 = sub_100012C5C(22);
    v66 = sub_100012C5C(64);
    v7 = sub_1000403F0(4.8752e-34);
    v11 = sub_10001E1B0(v7, v8, v9, v10);
    sub_1000145FC(v11);
    swift_bridgeObjectRelease(&type metadata for Any);
    v12 = sub_10001B2B4();
    sub_10000CED0(v12, v13, v14, v15, v16, v17, v18, v19, (uint64_t)(v2 + 2));
    v20 = sub_100010540();
    v26 = sub_100040464(v20, v21, v22, v23, v24, v25);
    sub_10000BD54(v26);
    sub_10000A828();
    sub_10000BE9C();
    sub_10000BE9C();
    sub_10001459C((void *)&_mh_execute_header, v27, v28, "failed to send events for session %{public}s: %{public}s");
    sub_10001FDEC(v29, v30, v31, v32, v33, v34, v35, v36, v63, v66);
    sub_1000120F8((uint64_t)v0);
    sub_1000120F8(v6);

    swift_unknownObjectRelease(v64);
    sub_10000BE9C();
    v37 = v65;
  }
  else
  {
    sub_100019B50();
    sub_100019ABC();
    sub_10000BE9C();
    sub_10000BE9C();
    sub_100015748();
    sub_10000BE9C();
    v37 = v3;
  }
  sub_100037D24(v37);
  sub_10001CFC8();
  if (v39)
  {
    sub_100010ED0();
    sub_10001DFB0();
    v40 = qword_1000973C8;
    v2[72] = qword_1000973C8;
    if (v40)
    {
      sub_10001FE30();
      sub_100019A20();
      v41 = (_QWORD *)sub_1000156A4();
      v2[73] = v41;
      v42 = sub_10001D8D0(v41, (uint64_t)sub_10003EF94);
      sub_1000103BC(v42, v43);
      return;
    }
    goto LABEL_18;
  }
  sub_10001AF1C(v38);
  if (v44)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  sub_10001BA00(v45);
  sub_10001CDA4();
  sub_100010644();
  sub_100019354();
  sub_10000AFC4();
  sub_10000781C();
  if ((v3 & 1) == 0)
  {
    sub_100010644();
    sub_10001D1C0();
    sub_10001E504();
    v55 = qword_1000973D8;
    v2[52] = qword_1000973D8;
    if (v55)
    {
      sub_100010644();
      sub_100019A20();
      sub_10000F3E8();
      sub_100015C58(v56, v57, v58);
      return;
    }
    goto LABEL_19;
  }
  v46 = sub_10001BC3C();
  Logger.logObject.getter(v46);
  v47 = sub_10000BFB8();
  if (sub_1000108D4(v47))
  {
    v48 = sub_100012C5C(12);
    v49 = sub_100012C5C(32);
    v66 = v49;
    v50 = sub_10001054C(4.8751e-34);
    v52 = sub_10001B3D0(v50, v51, &v66);
    sub_10000A8D8(v52);
    sub_10001B2B4();
    sub_10001B0A0((void *)&_mh_execute_header, v53, v54, "sending events for session: %{public}s");
    sub_10001DA00();
    sub_1000120F8(v49);
    sub_1000120F8(v48);
  }
  else
  {
    sub_10001B2B4();
  }

  v59 = qword_1000973E0;
  v2[53] = qword_1000973E0;
  if (v59)
  {
    sub_100019A20();
    v60 = (_QWORD *)sub_10000BFD4();
    v2[54] = v60;
    v61 = sub_100040414(v60, (uint64_t)sub_10003E288);
    sub_100019510(v61, v62);
    return;
  }
LABEL_20:
  __break(1u);
}

void sub_10003FDE8()
{
  void *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t (*v62)(void);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v3 = (void *)v1[67];
  swift_bridgeObjectRelease(v1[68]);
  sub_10000CEA8();
  sub_1000112D4();
  sub_100011200();
  v4 = sub_100011200();
  Logger.logObject.getter(v4);
  v5 = sub_10000CA38();
  if (sub_10000F4B0(v5))
  {
    v64 = v1[55];
    v65 = v1[41];
    v2 = v1[32];
    v6 = sub_100012C5C(22);
    v66 = sub_100012C5C(64);
    v7 = sub_1000403F0(4.8752e-34);
    v11 = sub_10001E1B0(v7, v8, v9, v10);
    sub_1000145FC(v11);
    swift_bridgeObjectRelease(&type metadata for Any);
    v12 = sub_10001B2B4();
    sub_10000CED0(v12, v13, v14, v15, v16, v17, v18, v19, (uint64_t)(v1 + 2));
    v20 = sub_100010540();
    v26 = sub_100040464(v20, v21, v22, v23, v24, v25);
    sub_10000BD54(v26);
    sub_10000A828();
    sub_10000BE9C();
    sub_10000BE9C();
    sub_10001459C((void *)&_mh_execute_header, v27, v28, "failed to send events for session %{public}s: %{public}s");
    sub_10001FDEC(v29, v30, v31, v32, v33, v34, v35, v36, v63, v66);
    sub_1000120F8((uint64_t)v3);
    sub_1000120F8(v6);

    swift_unknownObjectRelease(v64);
    sub_10000BE9C();
    v37 = v65;
  }
  else
  {
    sub_100019B50();
    sub_100019ABC();
    sub_10000BE9C();
    sub_10000BE9C();
    sub_100015748();
    sub_10000BE9C();
    v37 = v2;
  }
  sub_100037D24(v37);
  sub_10001CFC8();
  if (v39)
  {
    sub_100010ED0();
    sub_10001DFB0();
    v40 = qword_1000973C8;
    v1[72] = qword_1000973C8;
    if (v40)
    {
      sub_10001FE30();
      sub_100019A20();
      v41 = (_QWORD *)sub_1000156A4();
      v1[73] = v41;
      v42 = sub_10001D8D0(v41, (uint64_t)sub_10003EF94);
      sub_1000103BC(v42, v43);
      return;
    }
    goto LABEL_18;
  }
  sub_10001AF1C(v38);
  if (v44)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  sub_10001BA00(v45);
  sub_10001CDA4();
  sub_100010644();
  sub_100019354();
  sub_10000AFC4();
  sub_10000781C();
  if ((v2 & 1) == 0)
  {
    sub_100010644();
    sub_10001D1C0();
    sub_10001E504();
    v55 = qword_1000973D8;
    v1[52] = qword_1000973D8;
    if (v55)
    {
      sub_100010644();
      sub_100019A20();
      sub_10000F3E8();
      sub_100015C58(v56, v57, v58);
      return;
    }
    goto LABEL_19;
  }
  v46 = sub_10001BC3C();
  Logger.logObject.getter(v46);
  v47 = sub_10000BFB8();
  if (sub_1000108D4(v47))
  {
    v48 = sub_100012C5C(12);
    v49 = sub_100012C5C(32);
    v66 = v49;
    v50 = sub_10001054C(4.8751e-34);
    v52 = sub_10001B3D0(v50, v51, &v66);
    sub_10000A8D8(v52);
    sub_10001B2B4();
    sub_10001B0A0((void *)&_mh_execute_header, v53, v54, "sending events for session: %{public}s");
    sub_10001DA00();
    sub_1000120F8(v49);
    sub_1000120F8(v48);
  }
  else
  {
    sub_10001B2B4();
  }

  v59 = qword_1000973E0;
  v1[53] = qword_1000973E0;
  if (v59)
  {
    sub_100019A20();
    v60 = (_QWORD *)sub_10000BFD4();
    v1[54] = v60;
    v61 = sub_100040414(v60, (uint64_t)sub_10003E288);
    sub_100019510(v61, v62);
    return;
  }
LABEL_20:
  __break(1u);
}

#error "100040128: call analysis failed (funcsize=128)"

uint64_t type metadata accessor for SubmitEagerEventsActivity()
{
  return objc_opt_self(_TtC13rtcreportingd25SubmitEagerEventsActivity);
}

uint64_t sub_1000402E0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10008F6AC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100037EE0;
  return sub_10003DC58();
}

uint64_t sub_100040324()
{
  return sub_10003D8D0();
}

uint64_t sub_100040338()
{
  return 0x652D74696D627573;
}

unint64_t sub_100040358(uint64_t a1)
{
  unint64_t result;

  result = sub_10004037C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10004037C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008F738;
  if (!qword_10008F738)
  {
    v1 = type metadata accessor for SubmitEagerEventsActivity();
    result = swift_getWitnessTable(&unk_10006E768, v1);
    atomic_store(result, (unint64_t *)&qword_10008F738);
  }
  return result;
}

uint64_t sub_1000403D0(uint64_t a1)
{
  return sub_10003A730(a1);
}

uint64_t sub_1000403E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  unint64_t v9;
  va_list va;

  va_start(va, a8);
  return sub_100014F94(v8, v9, (uint64_t *)va);
}

uint64_t sub_1000403F0(float a1)
{
  uint64_t v1;
  float *v2;

  *v2 = a1;
  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + 56));
}

uint64_t sub_100040404()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 2);
}

uint64_t sub_100040414@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 328);
}

uint64_t sub_10004042C(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  return swift_bridgeObjectRetain(*(_QWORD *)(v2 + 56));
}

uint64_t sub_10004044C(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 8);
}

uint64_t sub_100040464(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  return sub_100014F94(a1, a2, (uint64_t *)va);
}

uint64_t sub_100040470(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100014F94(a1, a2, &a9);
}

uint64_t sub_10004047C()
{
  uint64_t v0;

  return sub_100037D60(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 264));
}

uint64_t sub_100040488()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026B1C(v0, qword_100097328);
  sub_100015718(v0, (uint64_t)qword_100097328);
  return Logger.init(subsystem:category:)(0xD000000000000017, 0x8000000100071220, 0xD000000000000016, 0x8000000100072A50);
}

uint64_t sub_100040508()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;

  swift_defaultActor_initialize(v0);
  v1 = objc_msgSend((id)objc_opt_self(NSURLSessionConfiguration), "ephemeralSessionConfiguration");
  v2 = sub_10001C478((uint64_t)objc_msgSend(v1, "setAllowsCellularAccess:", 0), "setAllowsConstrainedNetworkAccess:");
  v3 = sub_10001C478((uint64_t)v2, "setAllowsExpensiveNetworkAccess:");
  v4 = sub_10001B2BC((uint64_t)v3, "setHTTPCookieAcceptPolicy:");
  v5 = sub_10001055C((uint64_t)v4, "setHTTPCookieStorage:");
  sub_10001B2BC((uint64_t)v5, "setRequestCachePolicy:");
  v6 = sub_10001055C((uint64_t)objc_msgSend(v1, "setTimeoutIntervalForRequest:", 5.0), "setURLCache:");
  v7 = sub_10001055C((uint64_t)v6, "setURLCredentialStorage:");
  sub_10001C478((uint64_t)v7, "setWaitsForConnectivity:");
  v8 = (void *)objc_opt_self(NSURLSession);
  v9 = objc_msgSend(v8, "sessionWithConfiguration:", v1);
  *(_QWORD *)(v0 + 112) = v9;
  v10 = sub_10001B2BC((uint64_t)v9, "setAllowsCellularAccess:");
  v11 = sub_10001B2BC((uint64_t)v10, "setAllowsConstrainedNetworkAccess:");
  sub_10001B2BC((uint64_t)v11, "setAllowsExpensiveNetworkAccess:");
  v12 = objc_msgSend(v8, "sessionWithConfiguration:", v1);

  *(_QWORD *)(v0 + 120) = v12;
  return v0;
}

id sub_100040654@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v5;
  NSString v6;
  unsigned int v7;
  uint64_t v8;
  id result;
  unint64_t v10;
  void *v11;

  if (qword_10008E080 != -1)
    swift_once(&qword_10008E080, sub_1000584B0);
  if (byte_1000973F0 != 1)
    goto LABEL_8;
  if (qword_10008E088 != -1)
    swift_once(&qword_10008E088, sub_1000584D4);
  v5 = (id)qword_1000973F8;
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "BOOLForKey:", v6);

  if (v7)
  {
    v8 = type metadata accessor for MockHTTPSending();
    swift_allocObject(v8, 24, 7);
    result = (id)sub_100030E9C(a1 & 1);
    a2[3] = v8;
    a2[4] = &off_1000877F8;
    *a2 = result;
  }
  else
  {
LABEL_8:
    v10 = sub_100040AAC();
    if ((a1 & 1) != 0)
      v11 = *(void **)(v2 + 120);
    else
      v11 = *(void **)(v2 + 112);
    a2[3] = v10;
    a2[4] = &off_1000877C8;
    *a2 = v11;
    return v11;
  }
  return result;
}

uint64_t sub_1000407AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 216);
  v3 = *(_QWORD *)(*v1 + 224);
  v5 = *(_QWORD *)(*v1 + 208);
  v6 = *(void (**)(uint64_t, uint64_t))(*v1 + 192);
  v7 = *(_QWORD *)(*v1 + 144);
  v8 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  v6(v7, v8);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  if (v0)
  {
    v9 = *(_QWORD *)(v2 + 80);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 208));
    v10 = sub_1000409BC;
    v11 = v9;
  }
  else
  {
    v11 = *(_QWORD *)(v2 + 80);
    v10 = sub_100040850;
  }
  return sub_1000156C8((uint64_t)v10, v11, 0);
}

uint64_t sub_100040850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  sub_10001B3DC();
  sub_10001D8E4();
  sub_1000111E4();
  sub_10000BFB0();
  sub_10001210C();
  sub_10000B0DC();
  sub_100010384();
  v0 = sub_10001C710();
  return sub_100010DA4(v0, v1, v2);
}

uint64_t sub_10004089C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 264);
  v2 = *(_QWORD *)(*v1 + 272);
  v5 = *(_QWORD *)(*v1 + 240);
  v4 = *(_QWORD *)(*v1 + 248);
  v6 = *(_QWORD *)(*v1 + 136);
  v7 = *(_QWORD *)(*v1 + 120);
  v8 = *v1;
  *(_QWORD *)(v8 + 280) = v0;
  swift_task_dealloc(v2);
  v3(v6, v7);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  if (v0)
  {
    v9 = *(_QWORD *)(v8 + 80);
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + 240));
    return sub_1000156C8((uint64_t)sub_100040A04, v9, 0);
  }
  else
  {
    v11 = *(_QWORD *)(v8 + 256);
    v12 = *(_QWORD *)(v8 + 240);
    swift_task_dealloc(*(_QWORD *)(v8 + 160));
    sub_1000111E4();
    sub_10000BFB0();
    sub_10001210C();
    sub_10000B0DC();
    sub_100010384();
    return sub_100010DA4(v11, v12, *(uint64_t (**)(void))(v8 + 8));
  }
}

uint64_t sub_100040970()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 168));
  sub_10001DFD0();
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  sub_10001210C();
  sub_10000B0DC();
  return sub_10001AB64(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000409BC()
{
  uint64_t v0;

  sub_10001B3DC();
  sub_10001DFD0();
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  sub_10001210C();
  sub_10000B0DC();
  return sub_10001AB64(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100040A04()
{
  uint64_t v0;

  sub_10001DFD0();
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  sub_10001210C();
  sub_10000B0DC();
  return sub_10001AB64(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100040A48()
{
  uint64_t v0;

  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100040A74()
{
  uint64_t v0;

  sub_100040A48();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SubmissionCoordinator()
{
  return objc_opt_self(_TtC13rtcreportingd21SubmissionCoordinator);
}

unint64_t sub_100040AAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008F828;
  if (!qword_10008F828)
  {
    v1 = objc_opt_self(NSURLSession);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10008F828);
  }
  return result;
}

uint64_t sub_100040AE8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100040B34 + 4 * byte_10006E7F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100040B68 + 4 * byte_10006E7F0[v4]))();
}

uint64_t sub_100040B68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100040B70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100040B78);
  return result;
}

uint64_t sub_100040B84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100040B8CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100040B90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100040B98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for SessionType()
{
  sub_10000B0C0();
}

void sub_100040BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t (*v25)(uint64_t);
  uint64_t (*v26)(uint64_t);
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  sub_100012CD4();
  a19 = v21;
  a20 = v22;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  sub_10001AAC8(v27);
  sub_100012C34();
  __chkstk_darwin(v31);
  v32 = sub_10001C438();
  v33 = v26(v32);
  __chkstk_darwin(v33);
  v35 = (char *)&a9 - v34;
  if (_s10RTCUtility9XPCObjectOwet_0(v30, 1, v36) == 1)
  {
    sub_10001D7E8(v30, v28);
    sub_100005DF4(v24, v26, v20);
    sub_10000781C();
    sub_10001D7E8(v20, v28);
  }
  else
  {
    sub_10001B968(v30, (uint64_t)v35, v26);
    sub_10001D0E8();
    sub_10000781C();
  }
  sub_1000120D4();
}

void sub_100040CB0(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = a1;
  sub_10001AF30(a1);
  sub_100010DBC(v1);
  sub_10001C484();
  sub_100010D30();
}

void sub_100040CDC()
{
  sub_100040D18(0x726F706552435452);
}

void sub_100040CFC()
{
  sub_100040D18(0xD000000000000011);
}

void sub_100040D18(uint64_t a1)
{
  _BYTE v2[72];

  sub_10001AF30(a1);
  sub_100019364((uint64_t)v2, a1);
  sub_10001C484();
  sub_100010D30();
}

void sub_100040D4C(uint64_t a1)
{
  _QWORD *v1;

  v1 = sub_10001AF30(a1);
  sub_10001E55C((uint64_t)v1);
  sub_10001C484();
  sub_100010D30();
}

void sub_100040D74(uint64_t a1)
{
  sub_100040DA4(a1, (uint64_t (*)(uint64_t))sub_10004459C);
}

void sub_100040D80(uint64_t a1)
{
  sub_100040DA4(a1, (uint64_t (*)(uint64_t))sub_10001AC7C);
}

void sub_100040D8C(uint64_t a1)
{
  sub_100040DA4(a1, (uint64_t (*)(uint64_t))sub_1000458B0);
}

void sub_100040D98(uint64_t a1)
{
  sub_100040DA4(a1, (uint64_t (*)(uint64_t))sub_1000640D8);
}

void sub_100040DA4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  _BYTE v5[72];

  sub_10001AF30(a1);
  v4 = a2(a1);
  sub_100019364((uint64_t)v5, v4);
  sub_10000781C();
  sub_10001C484();
  sub_100010D30();
}

void sub_100040DEC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100040E2C(uint64_t a1)
{
  sub_100019364(a1, 7496054);
  return sub_10001CDC0(0xE300000000000000);
}

uint64_t sub_100040EBC(uint64_t a1)
{
  return String.hash(into:)(a1, 0x726F706552435452, 0xEC000000676E6974);
}

uint64_t sub_100040EDC(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000011, 0x80000001000708E0);
}

uint64_t sub_100040EF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_10001AC7C();
  v4 = v3;
  String.hash(into:)(a1, v2, v3);
  return sub_10001CDC0(v4);
}

void sub_100040F34(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100040F70(uint64_t a1)
{
  sub_100019364(a1, 0x65636976726573);
  return sub_10001CDC0(0xE700000000000000);
}

void sub_100041018(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100041050(uint64_t a1)
{
  sub_100019364(a1, 7955819);
  return sub_10001CDC0(0xE300000000000000);
}

void sub_100041118(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100041150(uint64_t a1)
{
  sub_100019364(a1, 0x6E6F6973726576);
  return sub_10001CDC0(0xE700000000000000);
}

void sub_10004119C(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2 + 1);
}

Swift::Int sub_1000411C4(uint64_t a1, unsigned __int8 a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

void sub_100041208(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;

  v2 = a2;
  sub_10001CFD8(a1, a2);
  sub_100010DBC(v2);
  sub_10001C484();
  sub_100010D30();
}

void sub_100041234(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = sub_10001CFD8(a1, a2);
  sub_10001E55C((uint64_t)v2);
  sub_10001C484();
  sub_100010D30();
}

void sub_10004125C(uint64_t a1, uint64_t a2)
{
  sub_1000412FC(a1, a2, (uint64_t (*)(uint64_t))sub_1000640D8);
}

void sub_100041268(uint64_t a1, uint64_t a2)
{
  sub_1000412FC(a1, a2, (uint64_t (*)(uint64_t))sub_1000458B0);
}

void sub_100041274(uint64_t a1, uint64_t a2)
{
  sub_1000412FC(a1, a2, (uint64_t (*)(uint64_t))sub_10001AC7C);
}

void sub_100041280(uint64_t a1)
{
  sub_1000412BC(a1, 0xD000000000000011);
}

void sub_10004129C(uint64_t a1)
{
  sub_1000412BC(a1, 0x726F706552435452);
}

void sub_1000412BC(uint64_t a1, uint64_t a2)
{
  _BYTE v3[72];

  sub_10001CFD8(a1, a2);
  sub_100019364((uint64_t)v3, a2);
  sub_10001C484();
  sub_100010D30();
}

void sub_1000412F0(uint64_t a1, uint64_t a2)
{
  sub_1000412FC(a1, a2, (uint64_t (*)(uint64_t))sub_10004459C);
}

void sub_1000412FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  _BYTE v6[72];

  sub_10001CFD8(a1, a2);
  v5 = a3(a2);
  sub_100019364((uint64_t)v6, v5);
  sub_10000781C();
  sub_10001C484();
  sub_100010D30();
}

uint64_t sub_100041344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v5 = type metadata accessor for EventValue(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10000CA40();
  v9 = (uint64_t *)(v7 - v8);
  __chkstk_darwin(v10);
  sub_1000106B8();
  __chkstk_darwin(v11);
  v13 = (char *)&v18 - v12;
  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v14 = sub_10001A120(0x646F6874656D5FLL, 0xE700000000000000);
  if ((v15 & 1) == 0)
    return 0;
  sub_10001B93C(*(_QWORD *)(a3 + 56) + *(_QWORD *)(v6 + 72) * v14, v3, type metadata accessor for EventValue);
  sub_10001B968(v3, (uint64_t)v13, type metadata accessor for EventValue);
  sub_10001B93C((uint64_t)v13, (uint64_t)v9, type metadata accessor for EventValue);
  result = swift_getEnumCaseMultiPayload(v9, v5);
  if ((_DWORD)result != 2)
  {
    if ((_DWORD)result == 1)
    {
      v17 = *v9;
    }
    else
    {
      sub_10001A2A8(result, type metadata accessor for EventValue);
      v17 = 0;
    }
    goto LABEL_10;
  }
  v17 = *v9;
  if ((*v9 & 0x8000000000000000) == 0)
  {
LABEL_10:
    sub_10001A2A8(result, type metadata accessor for EventValue);
    return v17;
  }
  __break(1u);
  return result;
}

uint64_t XPCMessage.MessageType.rawValue.getter(uint64_t result)
{
  return result;
}

unint64_t sub_1000414B0(unint64_t result)
{
  if (result >= 3)
    return 3;
  return result;
}

Swift::Int sub_1000414C0(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1000411C4(a1, *v1);
}

unint64_t sub_1000414C8@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000414B0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000414F0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = XPCMessage.MessageType.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

unint64_t sub_10004151C()
{
  unint64_t result;

  result = qword_10008F830;
  if (!qword_10008F830)
  {
    result = swift_getWitnessTable(&unk_10006E8C8, &unk_100088300);
    atomic_store(result, (unint64_t *)&qword_10008F830);
  }
  return result;
}

uint64_t sub_100041558@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFBoolean *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const __CFBoolean *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  const __CFBoolean *v56;
  CFBooleanRef v57;
  uint64_t v58;
  uint64_t v59;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v61;
  char v62;
  uint64_t v63;
  _BOOL8 v64;
  Swift::Int v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  CFBooleanRef *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  int64_t v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  int64_t v100;
  _OWORD *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  int64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  __int128 v111;
  _OWORD v112[2];
  CFBooleanRef v113;
  const __CFBoolean *v114;
  uint64_t v115;
  _QWORD v116[5];
  uint64_t v117;

  v6 = v2;
  type metadata accessor for EventValue(0);
  sub_1000156E0();
  __chkstk_darwin(v9);
  sub_10000CA40();
  v12 = v10 - v11;
  __chkstk_darwin(v13);
  sub_1000106B8();
  __chkstk_darwin(v14);
  v109 = (char *)&v97 - v15;
  v16 = sub_1000151D4(a1, (uint64_t)v116);
  if (sub_10001BA2C(v16, v17, v18, (uint64_t)&type metadata for String))
  {
    v19 = v114;
    *a2 = (uint64_t)v113;
    a2[1] = (uint64_t)v19;
    v20 = sub_10001B188();
    v22 = 0;
    goto LABEL_17;
  }
  v108 = v3;
  v23 = sub_10002C358(0, &qword_10008F838, NSNumber_ptr);
  v26 = sub_10001BA2C(v23, v24, v25, v23);
  if ((_DWORD)v26)
  {
    v29 = v113;
    if (kCFBooleanTrue)
      v30 = v113 == kCFBooleanTrue;
    else
      v30 = 0;
    if (v30)
    {

      *(_BYTE *)a2 = 1;
      goto LABEL_16;
    }

    if (kCFBooleanFalse && v29 == kCFBooleanFalse)
    {
      *(_BYTE *)a2 = 0;
LABEL_16:
      v20 = sub_10001B188();
      v22 = 4;
      goto LABEL_17;
    }
  }
  v31 = sub_10001BA2C(v26, v27, v28, (uint64_t)&type metadata for Int64);
  if ((_DWORD)v31)
  {
    *a2 = (uint64_t)v113;
    v20 = sub_10001B188();
    v22 = 1;
    goto LABEL_17;
  }
  v34 = sub_10001BA2C(v31, v32, v33, (uint64_t)&type metadata for UInt64);
  if ((_DWORD)v34)
  {
    *a2 = (uint64_t)v113;
    v20 = sub_10001B188();
    v22 = 2;
    goto LABEL_17;
  }
  if (sub_10001BA2C(v34, v35, v36, (uint64_t)&type metadata for Double))
  {
    *a2 = (uint64_t)v113;
    v20 = sub_10001B188();
    v22 = 3;
    goto LABEL_17;
  }
  v38 = sub_10001AAC8(&qword_10008F840);
  v39 = swift_dynamicCast(&v117, v116, (char *)&type metadata for Any + 8, v38, 0);
  v105 = v5;
  if (!v39)
  {
    v80 = sub_10001AAC8((uint64_t *)&unk_10008F848);
    if (!swift_dynamicCast(&v111, v116, (char *)&type metadata for Any + 8, v80, 0))
    {
      v88 = sub_100022668();
      v89 = swift_allocError(&unk_100088510, v88, 0, 0);
      swift_willThrow(v89, v90, v91, v92, v93, v94, v95, v96);
      return sub_100015060(v116);
    }
    v104 = a2;
    v109 = v4;
    v81 = v111;
    v82 = sub_100022DA8();
    v83 = *(_QWORD *)(v81 + 16);
    if (v83)
    {
      v84 = v81 + 32;
      while (1)
      {
        sub_1000151D4(v84, (uint64_t)&v113);
        sub_100041558(&v113);
        if (v2)
          break;
        v85 = *(_QWORD *)(v82 + 16);
        if (v85 >= *(_QWORD *)(v82 + 24) >> 1)
          v82 = sub_100022DA8();
        *(_QWORD *)(v82 + 16) = v85 + 1;
        sub_100043B88();
        sub_10001B968(v12, v82 + v86 + *(_QWORD *)(v87 + 72) * v85, type metadata accessor for EventValue);
        sub_100015060(&v113);
        v84 += 32;
        if (!--v83)
          goto LABEL_63;
      }
      sub_100015060(&v113);
      swift_bridgeObjectRelease(v82);
      sub_10000A820();
      return sub_100015060(v116);
    }
LABEL_63:
    sub_10000A820();
    v20 = (uint64_t)v104;
    *v104 = v82;
    v21 = v109;
    v22 = 6;
LABEL_17:
    swift_storeEnumTagMultiPayload(v20, v21, v22);
    return sub_100015060(v116);
  }
  v40 = v117;
  v41 = Dictionary.init(minimumCapacity:)(*(_QWORD *)(v117 + 16), &type metadata for String, v4, &protocol witness table for String);
  v42 = 0;
  v99 = v40 + 64;
  v102 = v40;
  sub_100010568();
  v45 = v44 & v43;
  v101 = v112;
  v103 = &v115;
  v100 = (unint64_t)(v46 + 63) >> 6;
  v98 = v100 - 1;
  v104 = a2;
  if (!v45)
    goto LABEL_25;
LABEL_23:
  v107 = (v45 - 1) & v45;
  v47 = __clz(__rbit64(v45)) | (v42 << 6);
  while (2)
  {
    v48 = *(_QWORD *)(v102 + 56);
    v49 = (_QWORD *)(*(_QWORD *)(v102 + 48) + 16 * v47);
    v50 = v49[1];
    *(_QWORD *)&v111 = *v49;
    *((_QWORD *)&v111 + 1) = v50;
    sub_1000151D4(v48 + 32 * v47, (uint64_t)v101);
    swift_bridgeObjectRetain(v50);
    while (1)
    {
      sub_1000434A8((uint64_t)&v111, (uint64_t)&v113, &qword_10008F858);
      v56 = v114;
      if (!v114)
      {
        sub_10000CEE8();
        *a2 = v41;
        v20 = sub_10001B188();
        v22 = 7;
        goto LABEL_17;
      }
      v106 = v42;
      v57 = v113;
      sub_100043324(v103, &v111);
      sub_100041558(&v111);
      if (v6)
      {
        swift_bridgeObjectRelease(v56);
        sub_100015060(&v111);
        swift_bridgeObjectRelease(v41);
        sub_10000CEE8();
        return sub_100015060(v116);
      }
      v58 = sub_10001E50C();
      sub_10001B968(v58, v59, type metadata accessor for EventValue);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v41);
      v110 = v41;
      v61 = sub_100010ED8();
      v63 = *(_QWORD *)(v41 + 16);
      v64 = (v62 & 1) == 0;
      v65 = v63 + v64;
      if (__OFADD__(v63, v64))
      {
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      v66 = v61;
      v67 = v62;
      sub_10001AAC8((uint64_t *)&unk_10008F860);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v65))
      {
        v68 = sub_100010ED8();
        if ((v67 & 1) != (v69 & 1))
          goto LABEL_73;
        v66 = v68;
      }
      v41 = v110;
      if ((v67 & 1) != 0)
      {
        v70 = sub_100015C74();
        sub_1000434E0(v70, v71, type metadata accessor for EventValue);
      }
      else
      {
        sub_100015B10(v110 + 8 * (v66 >> 6));
        v72 = (CFBooleanRef *)(*(_QWORD *)(v41 + 48) + 16 * v66);
        *v72 = v57;
        v72[1] = v56;
        v73 = sub_100015C74();
        sub_10001B968(v73, v74, type metadata accessor for EventValue);
        v75 = *(_QWORD *)(v41 + 16);
        v76 = __OFADD__(v75, 1);
        v77 = v75 + 1;
        if (v76)
          goto LABEL_70;
        *(_QWORD *)(v41 + 16) = v77;
        swift_bridgeObjectRetain(v56);
      }
      v6 = 0;
      v42 = v106;
      swift_bridgeObjectRelease(v56);
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_100015060(&v111);
      a2 = v104;
      v45 = v107;
      if (v107)
        goto LABEL_23;
LABEL_25:
      v51 = v42 + 1;
      if (__OFADD__(v42, 1))
        goto LABEL_71;
      if (v51 < v100)
      {
        if (*(_QWORD *)(v99 + 8 * v51))
          goto LABEL_28;
        v42 += 2;
        if (v51 + 1 >= v100)
        {
          v42 = v51;
          goto LABEL_33;
        }
        if (*(_QWORD *)(v99 + 8 * v42))
          goto LABEL_28;
        if (v51 + 2 < v100)
          break;
      }
LABEL_33:
      v107 = 0;
      memset(v112, 0, sizeof(v112));
      v111 = 0u;
    }
    if (*(_QWORD *)(v99 + 8 * (v51 + 2)))
      goto LABEL_28;
    v78 = v51 + 3;
    if (v51 + 3 >= v100)
    {
      v42 = v51 + 2;
      goto LABEL_33;
    }
    if (*(_QWORD *)(v99 + 8 * v78))
    {
LABEL_28:
      sub_10001FF14();
      v107 = v53 & v52;
      v47 = v55 + (v54 << 6);
      v42 = v54;
      continue;
    }
    break;
  }
  while (1)
  {
    v79 = v78 + 1;
    if (__OFADD__(v78, 1))
      break;
    if (v79 >= v100)
    {
      v42 = v98;
      goto LABEL_33;
    }
    ++v78;
    if (*(_QWORD *)(v99 + 8 * v79))
      goto LABEL_28;
  }
LABEL_72:
  __break(1u);
LABEL_73:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_100041CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24[6];
  uint64_t v25;
  uint64_t v26;

  sub_100012CD4();
  v25 = v0;
  v26 = v1;
  v2 = sub_1000145B0();
  v24[2] = *(_QWORD *)(v2 - 8);
  v24[3] = v2;
  sub_1000192FC();
  __chkstk_darwin(v3);
  v5 = sub_100018ED0(v4, v24[0]);
  v6 = type metadata accessor for EventValue(v5);
  sub_100012C34();
  __chkstk_darwin(v7);
  sub_10001065C();
  v24[4] = v8;
  sub_100015684();
  __chkstk_darwin(v9);
  sub_10000F420();
  __chkstk_darwin(v10);
  v24[5] = (uint64_t)v24 - v11;
  sub_100015684();
  __chkstk_darwin(v12);
  sub_1000106B8();
  v14 = __chkstk_darwin(v13);
  v15 = __chkstk_darwin(v14);
  v16 = __chkstk_darwin(v15);
  __chkstk_darwin(v16);
  sub_10001AAC8((uint64_t *)&unk_10008F9A0);
  sub_100012C34();
  __chkstk_darwin(v17);
  sub_10000BE50();
  v20 = v19 - v18;
  v22 = v19 - v18 + *(int *)(v21 + 48);
  sub_10001B93C(v25, v19 - v18, type metadata accessor for EventValue);
  sub_10001B93C(v26, v22, type metadata accessor for EventValue);
  v23 = (char *)sub_100041E2C + 4 * byte_10006E816[swift_getEnumCaseMultiPayload(v20, v6)];
  __asm { BR              X10 }
}

uint64_t sub_100041E2C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  char v9;

  sub_10001B93C(v0, (uint64_t)v2, type metadata accessor for EventValue);
  v4 = *v2;
  v3 = v2[1];
  if (sub_10001CCD0())
  {
    sub_10000A818();
    sub_10001D7E8(v0, (uint64_t *)&unk_10008F9A0);
    goto LABEL_9;
  }
  v5 = v1[1];
  if (v4 == *v1 && v3 == v5)
  {
    v8 = swift_bridgeObjectRelease_n(v3, 2);
    goto LABEL_12;
  }
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, *v1, v1[1], 0);
  swift_bridgeObjectRelease(v5);
  v8 = sub_10000A818();
  if ((v7 & 1) != 0)
  {
LABEL_12:
    sub_10001A2A8(v8, type metadata accessor for EventValue);
    v9 = 1;
    return v9 & 1;
  }
  sub_10001A2A8(v8, type metadata accessor for EventValue);
LABEL_9:
  v9 = 0;
  return v9 & 1;
}

uint64_t sub_1000420F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_10001AAC8(&qword_10008FEE0);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001AAC8(&qword_10008E740);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (void *)swift_unknownObjectRetain(a2);
  XPCObject.init(_:)(v11, (uint64_t)v7);
  v12 = type metadata accessor for XPCObject(0);
  result = _s10RTCUtility9XPCObjectOwet_0((uint64_t)v7, 1, v12);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_10001B474(v7);
    v14 = type metadata accessor for EventValue(0);
    result = _s10RTCUtility9XPCObjectOwet_0((uint64_t)v10, 1, v14);
    if ((_DWORD)result != 1)
    {
      sub_1000206D4((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100022DA8);
      v15 = *(_QWORD *)(*a3 + 16);
      sub_100020688(v15, (uint64_t (*)(BOOL))sub_100022DA8);
      v16 = *a3;
      *(_QWORD *)(v16 + 16) = v15 + 1;
      sub_10001B968((uint64_t)v10, v16+ ((*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * v15, type metadata accessor for EventValue);
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100042260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  char v6;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a3);
  v6 = v5(a2, a3);
  swift_unknownObjectRelease(a3);
  return v6 & 1;
}

uint64_t sub_1000422B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t var50[12];

  v4 = sub_10001AAC8(&qword_10008FEE0);
  __chkstk_darwin(v4);
  v6 = (char *)var50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001AAC8(&qword_10008E740);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)var50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)var50 - v11;
  v13 = type metadata accessor for EventValue(0);
  __chkstk_darwin(v13);
  v15 = (char *)var50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = String.init(cString:)(a1);
  v18 = v17;
  v19 = (void *)swift_unknownObjectRetain(a2);
  XPCObject.init(_:)(v19, (uint64_t)v6);
  v20 = type metadata accessor for XPCObject(0);
  result = _s10RTCUtility9XPCObjectOwet_0((uint64_t)v6, 1, v20);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_10001B474(v6);
    result = _s10RTCUtility9XPCObjectOwet_0((uint64_t)v12, 1, v13);
    if ((_DWORD)result != 1)
    {
      sub_10001B968((uint64_t)v12, (uint64_t)v15, type metadata accessor for EventValue);
      sub_10001B93C((uint64_t)v15, (uint64_t)v10, type metadata accessor for EventValue);
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v10, 0, 1, v13);
      sub_100040BB0((uint64_t)v10, v16, v18, (uint64_t)&qword_10008E740, (uint64_t)type metadata accessor for EventValue, (uint64_t)&unk_10008F860, v22, v23, var50[0], var50[1], var50[2], var50[3], var50[4], var50[5], var50[6], var50[7], var50[8], var50[9], var50[10],
        var50[11]);
      sub_10001C614((uint64_t)v15, type metadata accessor for EventValue);
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100042498()
{
  return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
}

uint64_t sub_1000424D4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_100042500@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = XPCIncomingConnection.init(conn:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100042524@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100042498();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100042548(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004346C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100042570(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004346C();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1000425B8()
{
  return sub_10001AFC8();
}

unint64_t sub_1000425C4()
{
  sub_1000425B8();
  return 0xD000000000000021;
}

void sub_1000425E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  char *v14;
  _QWORD v15[12];

  sub_10001AAC8(&qword_10008EF68);
  sub_100012C34();
  __chkstk_darwin(v1);
  sub_10000CA40();
  sub_10000F420();
  __chkstk_darwin(v2);
  v15[7] = (char *)v15 - v3;
  sub_1000145B0();
  sub_1000156E0();
  __chkstk_darwin(v4);
  v5 = sub_10001C438();
  v6 = type metadata accessor for EventValue(v5);
  v15[6] = *(_QWORD *)(v6 - 8);
  sub_1000192FC();
  __chkstk_darwin(v7);
  sub_10000CA40();
  __chkstk_darwin(v8);
  v15[10] = (char *)v15 - v9;
  sub_100015684();
  __chkstk_darwin(v10);
  v12 = (char *)v15 - v11;
  sub_10001B93C(v0, (uint64_t)v15 - v11, v13);
  v14 = (char *)&loc_1000426EC + *((int *)qword_100042C90 + swift_getEnumCaseMultiPayload(v12, v6));
  __asm { BR              X10 }
}

NSString sub_1000426FC()
{
  uint64_t v0;
  uint64_t v1;
  NSString v2;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  return v2;
}

uint64_t sub_100042CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for EventValue(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        sub_10001B93C(a1 + v12, (uint64_t)v10, type metadata accessor for EventValue);
        sub_10001B93C(a2 + v12, (uint64_t)v7, type metadata accessor for EventValue);
        v15 = sub_100041CA0(v10, v7);
        sub_10001C614((uint64_t)v7, type metadata accessor for EventValue);
        sub_10001C614((uint64_t)v10, type metadata accessor for EventValue);
        v17 = v14-- != 0;
        if ((v15 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

void sub_100042DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;

  v4 = type metadata accessor for EventValue(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v47 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - v8;
  v10 = sub_10001AAC8(&qword_10008EF68);
  v11 = __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v41 - v14);
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v48 = 0;
  v45 = a1;
  v46 = v5;
  v18 = *(_QWORD *)(a1 + 64);
  v17 = a1 + 64;
  v16 = v18;
  v19 = 1 << *(_BYTE *)(v17 - 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v16;
  v43 = v17;
  v44 = (unint64_t)(v19 + 63) >> 6;
  v42 = v44 - 1;
  while (1)
  {
    if (v21)
    {
      v22 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v23 = v22 | (v48 << 6);
LABEL_8:
      v24 = *(_QWORD *)(v45 + 56);
      v25 = (_QWORD *)(*(_QWORD *)(v45 + 48) + 16 * v23);
      v26 = v25[1];
      *v13 = *v25;
      v13[1] = v26;
      v27 = v24 + *(_QWORD *)(v5 + 72) * v23;
      v28 = sub_10001AAC8((uint64_t *)&unk_10008F8A0);
      sub_10001B93C(v27, (uint64_t)v13 + *(int *)(v28 + 48), type metadata accessor for EventValue);
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v13, 0, 1, v28);
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
    v29 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v29 < v44)
    {
      v30 = *(_QWORD *)(v43 + 8 * v29);
      if (v30)
        goto LABEL_12;
      v31 = v48 + 2;
      ++v48;
      if (v29 + 1 < v44)
      {
        v30 = *(_QWORD *)(v43 + 8 * v31);
        if (v30)
          goto LABEL_15;
        v48 = v29 + 1;
        if (v29 + 2 < v44)
        {
          v30 = *(_QWORD *)(v43 + 8 * (v29 + 2));
          if (v30)
          {
            v29 += 2;
            goto LABEL_12;
          }
          v48 = v29 + 2;
          if (v29 + 3 < v44)
          {
            v30 = *(_QWORD *)(v43 + 8 * (v29 + 3));
            if (v30)
            {
              v29 += 3;
              goto LABEL_12;
            }
            v31 = v29 + 4;
            v48 = v29 + 3;
            if (v29 + 4 < v44)
              break;
          }
        }
      }
    }
LABEL_29:
    v32 = sub_10001AAC8((uint64_t *)&unk_10008F8A0);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v13, 1, 1, v32);
    v21 = 0;
LABEL_30:
    sub_1000434A8((uint64_t)v13, (uint64_t)v15, &qword_10008EF68);
    v33 = sub_10001AAC8((uint64_t *)&unk_10008F8A0);
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v15, 1, v33) == 1)
      return;
    v35 = *v15;
    v34 = v15[1];
    sub_10001B968((uint64_t)v15 + *(int *)(v33 + 48), (uint64_t)v9, type metadata accessor for EventValue);
    v36 = sub_10001A120(v35, v34);
    LOBYTE(v35) = v37;
    swift_bridgeObjectRelease(v34);
    if ((v35 & 1) == 0)
    {
      sub_10001C614((uint64_t)v9, type metadata accessor for EventValue);
      return;
    }
    v5 = v46;
    v38 = *(_QWORD *)(a2 + 56) + *(_QWORD *)(v46 + 72) * v36;
    v39 = v47;
    sub_10001B93C(v38, v47, type metadata accessor for EventValue);
    v40 = sub_100041CA0(v39, v9);
    sub_10001C614(v39, type metadata accessor for EventValue);
    sub_10001C614((uint64_t)v9, type metadata accessor for EventValue);
    if ((v40 & 1) == 0)
      return;
  }
  v30 = *(_QWORD *)(v43 + 8 * v31);
  if (v30)
  {
LABEL_15:
    v29 = v31;
LABEL_12:
    v21 = (v30 - 1) & v30;
    v23 = __clz(__rbit64(v30)) + (v29 << 6);
    v48 = v29;
    goto LABEL_8;
  }
  while (1)
  {
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v29 >= v44)
    {
      v48 = v42;
      goto LABEL_29;
    }
    v30 = *(_QWORD *)(v43 + 8 * v29);
    ++v31;
    if (v30)
      goto LABEL_12;
  }
LABEL_38:
  __break(1u);
}

uint64_t sub_1000431DC()
{
  return sub_1000206D4((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100022B9C);
}

uint64_t sub_1000431E8()
{
  return sub_1000206D4((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100022D8C);
}

uint64_t sub_1000431F4(uint64_t a1)
{
  return sub_100020688(a1, (uint64_t (*)(BOOL))sub_100022B9C);
}

uint64_t sub_100043200(uint64_t a1)
{
  return sub_100020688(a1, (uint64_t (*)(BOOL))sub_100022D8C);
}

uint64_t sub_10004320C@<X0>(uint64_t a1@<X8>)
{
  return sub_100005DF4((uint64_t *)&unk_10008F8D0, type metadata accessor for CachedSession, a1);
}

void sub_100043220()
{
  char v0;
  char v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  sub_10000AFF4();
  sub_100015468();
  v1 = v0;
  sub_10000A818();
  if ((v1 & 1) != 0)
  {
    sub_10001D3E4();
    sub_10000788C();
    v2 = sub_10001AAC8(&qword_10008F8C8);
    v10 = sub_10001952C(v2, v3, v4, v5, v6, v7, v8, v9, v19, v21);
    v18 = sub_10001121C(v10, v11, v12, v13, v14, v15, v16, v17, v20, v22);
    sub_100043BAC(v18, (unint64_t *)&qword_10008F8C0, NSObject_ptr);
    sub_10001FD90();
    sub_10000BD70();
  }
  sub_100011108();
}

uint64_t sub_1000432B8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v11;

  swift_isUniquelyReferenced_nonNull_native(*v4);
  sub_1000103D8();
  a4(a1, a2, a3);
  v9 = *v4;
  *v4 = v11;
  return swift_bridgeObjectRelease(v9);
}

_OWORD *sub_100043324(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_100043334(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  sub_10000B114(a1, a2, a3);
  sub_10000B00C();
  if (v11)
  {
    __break(1u);
    goto LABEL_9;
  }
  v12 = v9;
  v13 = v10;
  sub_10001AAC8(&qword_10008F8C8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, (Swift::Int)v4))
    goto LABEL_5;
  v14 = sub_10001B0B4();
  v16 = sub_10001A120(v14, v15);
  if ((v13 & 1) != (v17 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v12 = v16;
LABEL_5:
  v18 = *v4;
  if ((v13 & 1) != 0)
  {
    v19 = *(_QWORD *)(v18 + 56);

    *(_QWORD *)(v19 + 8 * v12) = a1;
  }
  else
  {
    sub_10000F294(v12, a2, a3, a1, v18);
    swift_bridgeObjectRetain();
  }
}

uint64_t sub_10004342C()
{
  uint64_t v0;

  return sub_100012CCC(v0, 24);
}

uint64_t sub_100043438(uint64_t a1, uint64_t a2)
{
  return sub_1000422B0(a1, a2);
}

uint64_t sub_100043440()
{
  uint64_t v0;

  return sub_100012CCC(v0, 32);
}

uint64_t sub_10004344C()
{
  uint64_t v0;

  return sub_100012CCC(v0, 24);
}

uint64_t sub_100043458(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000420F4(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_100043460()
{
  uint64_t v0;

  return sub_100012CCC(v0, 32);
}

unint64_t sub_10004346C()
{
  unint64_t result;

  result = qword_10008F898;
  if (!qword_10008F898)
  {
    result = swift_getWitnessTable(&unk_10006EA68, &unk_100088468);
    atomic_store(result, (unint64_t *)&qword_10008F898);
  }
  return result;
}

void sub_1000434A8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_10001AAC8(a3);
  sub_10001C724(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_10000BF94();
}

void sub_1000434E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_10001C604(a1, a2, a3);
  sub_10001C724(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40));
  sub_10000BF94();
}

void sub_10004350C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;

  v5 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  v7 = 0;
  if ((isUniquelyReferenced_nonNull_bridgeObject & 1) != 0
    && (v5 & 0x8000000000000000) == 0
    && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_12;
    v7 = 1;
  }
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v10 = v5;
    else
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    v11 = swift_bridgeObjectRetain(v5);
    v8 = _CocoaArrayWrapper.endIndex.getter(v10, v11);
    sub_10000781C();
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  *v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v9, a2 & 1, v5);
LABEL_12:
  sub_10000BF84();
}

_QWORD *sub_1000435B8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_1000435E4(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_1000435EC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *sub_10004362C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_10004365C(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10004369C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for EventValue.CodingKeys()
{
  sub_10000B0C0();
}

_QWORD *sub_1000436E4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_100043750(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_bridgeObjectRelease(v4);
  return a1;
}

void type metadata accessor for CachedEvent()
{
  sub_10000B0C0();
}

void type metadata accessor for BadCachedEvent()
{
  sub_10000B0C0();
}

void sub_1000437B0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  sub_100018040();
  sub_10000BF94();
}

void type metadata accessor for Event()
{
  sub_10000B0C0();
}

_QWORD *sub_1000437F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_10001C614((uint64_t)a1, type metadata accessor for EventValue);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *a1 = *a2;
        v6 = a2[1];
        a1[1] = v6;
        swift_bridgeObjectRetain(v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_8;
      case 5u:
        v10 = type metadata accessor for UUID(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v7 = a1;
        v8 = a3;
        v9 = 5;
        goto LABEL_8;
      case 6u:
        v11 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v11);
        v7 = a1;
        v8 = a3;
        v9 = 6;
        goto LABEL_8;
      case 7u:
        v12 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v12);
        v7 = a1;
        v8 = a3;
        v9 = 7;
LABEL_8:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *sub_10004390C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 5)
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 5);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_100043998(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_10001C614((uint64_t)a1, type metadata accessor for EventValue);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 5)
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 5);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100043A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_100043A58(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_10006E950;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = &unk_10006E968;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 8, v4);
    return 0;
  }
  return result;
}

unint64_t sub_100043AFC()
{
  unint64_t result;

  result = qword_10008F990;
  if (!qword_10008F990)
  {
    result = swift_getWitnessTable(&unk_10006EA18, &unk_100088468);
    atomic_store(result, (unint64_t *)&qword_10008F990);
  }
  return result;
}

unint64_t sub_100043B3C()
{
  unint64_t result;

  result = qword_10008F998;
  if (!qword_10008F998)
  {
    result = swift_getWitnessTable(&unk_10006EA40, &unk_100088468);
    atomic_store(result, (unint64_t *)&qword_10008F998);
  }
  return result;
}

void *sub_100043B98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = a1;
  *(_QWORD *)(v2 - 112) = v1;
  return _Block_copy((const void *)(v2 - 136));
}

void sub_100043BA4(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_10001C614(a1, v1);
}

uint64_t sub_100043BAC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  return sub_10002C358(0, a2, a3);
}

unint64_t sub_100043BB4(Swift::String string)
{
  unint64_t v1;
  void *object;
  Swift::String v3;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100085AC0, v3);
  sub_10000B124();
  if (v1 >= 4)
    return 4;
  else
    return v1;
}

uint64_t sub_100043BF8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100043C24 + 4 * byte_10006EB00[a1]))(1701606770, 0xE400000000000000);
}

unint64_t sub_100043C2C()
{
  return 0xD000000000000012;
}

uint64_t sub_100043C48(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100043C74 + 4 * byte_10006EB04[a1]))(1701606770, 0xE400000000000000);
}

unint64_t sub_100043C7C()
{
  return 0xD000000000000012;
}

void sub_100043C98(char *a1)
{
  sub_10005A788(*a1);
}

void sub_100043CA4()
{
  unsigned __int8 *v0;

  sub_100040D4C(*v0);
}

void sub_100043CAC(uint64_t a1)
{
  char *v1;

  sub_100041118(a1, *v1);
}

void sub_100043CB4(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_100041234(a1, *v1);
}

unint64_t sub_100043CBC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100043BB4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100043CE8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100043BF8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100043D10()
{
  unsigned __int8 *v0;

  return sub_100043C48(*v0);
}

uint64_t sub_100043D18@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100043BF4(a1);
  *a2 = result;
  return result;
}

void sub_100043D3C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_100043D48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100044E08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100043D70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100044E08();
  return CodingKey.debugDescription.getter(a1, v2);
}

Class sub_100043D98()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  Class v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  Class v21;
  uint64_t v23;
  _QWORD __dst[11];

  v1 = sub_100043F9C();
  Dictionary.init(minimumCapacity:)(4, &type metadata for String, v1, &protocol witness table for String);
  sub_10001F508();
  sub_10001BA40();
  v2 = sub_1000180F0();
  sub_100043334(v2, 1701606770, 0xE400000000000000, v3);
  sub_10001936C();
  objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithChar:", *(char *)(v0 + 16));
  sub_10001BA40();
  v4 = sub_1000180F0();
  sub_10001D3EC(v4, 0x6E6F6973726576, v5, v6);
  sub_10001936C();
  String._bridgeToObjectiveC()();
  sub_10001BA40();
  v7 = sub_1000180F0();
  sub_10001D3EC(v7, 0x63736A5F343662, v8, v9);
  v10 = __dst[0];
  sub_10001936C();
  v11 = *(_QWORD *)(v0 + 40);
  v23 = v11;
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)(v12);
    v13 = (char *)(v11 + 32);
    do
    {
      memcpy(__dst, v13, sizeof(__dst));
      sub_100044B60(__dst);
      v14 = sub_100043FD8();
      v15 = sub_100044BD0(__dst);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      v16 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
      specialized ContiguousArray._endMutation()(v17);
      v13 += 88;
      --v12;
    }
    while (v12);
    sub_100005400(&v23);
  }
  isa = sub_100011230().super.isa;
  sub_10000A828();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
  sub_10001BC48((uint64_t)isa, v20, 0x8000000100070910, isUniquelyReferenced_nonNull_native);
  sub_10001936C();
  v21 = sub_1000106CC().super.isa;
  sub_10000A828();
  return v21;
}

unint64_t sub_100043F9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008F8C0;
  if (!qword_10008F8C0)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10008F8C0);
  }
  return result;
}

Class sub_100043FD8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  NSString v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  Class isa;
  char v29;
  NSString v30;
  char v31;
  id v32;
  Class v33;
  uint64_t v35;
  _QWORD v36[2];
  _BYTE v37[16];
  _BYTE v38[16];
  _QWORD v39[2];
  _QWORD v40[2];
  _QWORD v41[2];

  v1 = v0;
  v2 = sub_100043F9C();
  Dictionary.init(minimumCapacity:)(2, &type metadata for String, v2, &protocol witness table for String);
  sub_10001F508();
  sub_10001BA40();
  v3 = sub_10001A2B0();
  sub_10001D3EC(v3, 0x7972617262696CLL, v4, v5);
  sub_10001936C();
  String._bridgeToObjectiveC()();
  sub_10001BA40();
  v6 = sub_10001A2B0();
  sub_100043334(v6, 7496054, 0xE300000000000000, v7);
  v8 = v41[0];
  v35 = v41[0];
  sub_10001936C();
  sub_100044C40(v1 + 32, (uint64_t)v38);
  sub_100044C40((uint64_t)v38, (uint64_t)v39);
  if (v39[1])
  {
    String._bridgeToObjectiveC()();
    sub_10001BA40();
    v41[0] = v8;
    v9 = sub_100010DC8();
    sub_100043334(v9, v10, v11, v12);
    v35 = v41[0];
    sub_10001936C();
  }
  else
  {
    sub_100043220();

  }
  sub_100044C40(v1 + 48, (uint64_t)v37);
  sub_100044C40((uint64_t)v37, (uint64_t)v40);
  if (v40[1])
  {
    String._bridgeToObjectiveC()();
    sub_1000121A4();
    v41[0] = v35;
    v14 = sub_100010DC8();
    sub_10001BC48(v14, v15, v16, v17);
    v35 = v41[0];
    sub_10001936C();
  }
  else
  {
    sub_100043220();

  }
  v19 = *(_QWORD *)(v1 + 64);
  if (v19)
  {
    v41[0] = _swiftEmptyArrayStorage;
    v20 = *(_QWORD *)(v19 + 16);
    swift_bridgeObjectRetain();
    sub_10004350C(v20, 0);
    ((void (*)(void))specialized Array._endMutation())();
    if (v20)
    {
      v21 = (uint64_t *)(v19 + 40);
      do
      {
        v22 = *v21;
        swift_bridgeObjectRetain();
        v23 = String._bridgeToObjectiveC()();
        v24 = swift_bridgeObjectRelease(v22);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v24);
        v26 = *(_QWORD *)((v41[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
        v25 = *(_QWORD *)((v41[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v26 >= v25 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v21 += 2;
        v27 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v23);
        specialized Array._endMutation()(v27);
        --v20;
      }
      while (v20);
    }
    swift_bridgeObjectRelease(v19);
    isa = sub_100011230().super.isa;
    sub_10000A828();
    v29 = sub_1000121A4();
    v36[0] = v35;
    sub_100043334((uint64_t)isa, 0xD000000000000011, 0x8000000100070970, v29);
    sub_10001936C();
  }
  sub_100044C40(v1 + 72, (uint64_t)v36);
  sub_100044C40((uint64_t)v36, (uint64_t)v41);
  if (v41[1])
  {
    v30 = String._bridgeToObjectiveC()();
    v31 = sub_1000121A4();
    sub_100043334((uint64_t)v30, 0x69745F7261646172, 0xEB00000000656C74, v31);
    sub_10001936C();
  }
  else
  {
    sub_100043220();

  }
  v33 = sub_1000106CC().super.isa;
  sub_10000A828();
  return v33;
}

void sub_100044370(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _BYTE v20[2];
  _BYTE v21[2];

  v5 = sub_10001AAC8(&qword_10008F9B0);
  __chkstk_darwin(v5);
  sub_10001C730();
  v6 = a1[3];
  v7 = a1[4];
  sub_10001D44C(a1, v6);
  v8 = sub_100044E08();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1000887C0, &unk_1000887C0, v8, v6, v7);
  if (v2)
  {
    sub_10001934C();
  }
  else
  {
    v21[1] = 0;
    v9 = sub_10001A1F0();
    v11 = v10;
    v21[0] = 1;
    v12 = swift_bridgeObjectRetain(v10);
    v19 = KeyedDecodingContainer.decode(_:forKey:)(v21, v5, v12);
    v20[1] = 2;
    v16 = sub_10001A1F0();
    v14 = v13;
    v17 = sub_10001AAC8(&qword_10008F9C0);
    v20[0] = 3;
    v15 = sub_100044E44();
    sub_100018040();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v20, v5, v17, v15);
    sub_10001DFE0();
    sub_100018040();
    sub_10001B194();
    swift_bridgeObjectRelease(v14);
    sub_10000A820();
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v11;
    *(_BYTE *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 24) = v16;
    *(_QWORD *)(a2 + 32) = v14;
    *(_QWORD *)(a2 + 40) = v18;
  }
  sub_10000A840();
}

unint64_t sub_100044558(Swift::String string)
{
  unint64_t v1;
  void *object;
  Swift::String v3;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100085B40, v3);
  sub_10000B124();
  if (v1 >= 6)
    return 6;
  else
    return v1;
}

uint64_t sub_10004459C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000445D0 + 4 * byte_10006EB08[a1]))(0x7972617262696CLL, 0xE700000000000000);
}

void sub_1000445D4()
{
  sub_10000AF58();
}

unint64_t sub_100044604()
{
  return sub_100010584();
}

uint64_t sub_100044610()
{
  return 0x69745F7261646172;
}

uint64_t sub_100044630(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100044664 + 4 * byte_10006EB0E[a1]))(0x7972617262696CLL, 0xE700000000000000);
}

void sub_100044668()
{
  sub_10000AF58();
}

unint64_t sub_100044698()
{
  return sub_100010584();
}

uint64_t sub_1000446A4()
{
  return 0x69745F7261646172;
}

void sub_1000446C4(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  _BYTE v34[3];

  v6 = sub_10001AAC8(&qword_10008F9F0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10001C730();
  v8 = a1[3];
  v9 = a1[4];
  sub_10001D44C(a1, v8);
  v10 = sub_100045348();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1000888E0, &unk_1000888E0, v10, v8, v9);
  if (v2)
  {
    sub_10001934C();
  }
  else
  {
    v34[2] = 0;
    v11 = sub_10001A1F0();
    v34[1] = 1;
    sub_10001B2D8(v11, v12);
    v29 = v8;
    v26 = sub_10001A1F0();
    v34[0] = 2;
    sub_10001B2D8(v26, v13);
    v14 = sub_100012CEC((uint64_t)v34);
    v27 = v15;
    v28 = v8;
    v25 = v14;
    v33 = 3;
    sub_10001B2D8(v14, v15);
    v24 = sub_100012CEC((uint64_t)&v33);
    v17 = v16;
    v18 = sub_10001AAC8(&qword_10008E798);
    v32 = 4;
    v19 = sub_100045384();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v18, &v32, v6, v18, v19);
    v31 = 5;
    swift_bridgeObjectRetain();
    v20 = sub_100012CEC((uint64_t)&v31);
    v22 = v21;
    v23 = v20;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
    sub_100018040();
    sub_10001B194();
    sub_10000BDE4();
    sub_1000120B4();
    sub_10000A820();
    swift_bridgeObjectRelease(v28);
    sub_1000120B4();
    *a2 = v11;
    a2[1] = v29;
    a2[2] = v26;
    a2[3] = v28;
    a2[4] = v25;
    a2[5] = v27;
    a2[6] = v24;
    a2[7] = v17;
    a2[8] = v30;
    a2[9] = v23;
    a2[10] = v22;
  }
  sub_10000A840();
}

double sub_1000449D8@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_100044370(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

void sub_100044A18(char *a1)
{
  sub_10005A1A4(*a1);
}

void sub_100044A24()
{
  unsigned __int8 *v0;

  sub_100040D74(*v0);
}

void sub_100044A2C(uint64_t a1)
{
  char *v1;

  sub_100040DEC(a1, *v1);
}

void sub_100044A34(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1000412F0(a1, *v1);
}

unint64_t sub_100044A3C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100044558(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100044A68@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10004459C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100044A90()
{
  unsigned __int8 *v0;

  return sub_100044630(*v0);
}

uint64_t sub_100044A98@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100044598(a1);
  *a2 = result;
  return result;
}

void sub_100044ABC(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_100044AC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100045348();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100044AF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100045348();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100044B18(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t __src[11];

  sub_1000446C4(a1, __src);
  if (!v2)
    memcpy(a2, __src, 0x58uLL);
}

_QWORD *sub_100044B60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[8];
  swift_bridgeObjectRetain(a1[10]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *sub_100044BD0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[5];
  v4 = a1[7];
  v5 = a1[8];
  v6 = a1[10];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_100044C40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001AAC8(&qword_10008E7C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100044C88(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t sub_100044CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_100044D14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_100044DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  v6 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  return a1;
}

void type metadata accessor for StorebagSectionRule()
{
  sub_10000B0C0();
}

unint64_t sub_100044E08()
{
  unint64_t result;

  result = qword_10008F9B8;
  if (!qword_10008F9B8)
  {
    result = swift_getWitnessTable(&unk_10006ECC0, &unk_1000887C0);
    atomic_store(result, (unint64_t *)&qword_10008F9B8);
  }
  return result;
}

unint64_t sub_100044E44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008F9C8;
  if (!qword_10008F9C8)
  {
    v1 = sub_100027598(&qword_10008F9C0);
    sub_100044EA8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008F9C8);
  }
  return result;
}

unint64_t sub_100044EA8()
{
  unint64_t result;

  result = qword_10008F9D0;
  if (!qword_10008F9D0)
  {
    result = swift_getWitnessTable(&unk_10006EC98, &unk_100088838);
    atomic_store(result, (unint64_t *)&qword_10008F9D0);
  }
  return result;
}

uint64_t sub_100044EE4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100044F30 + 4 * byte_10006EB19[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100044F64 + 4 * byte_10006EB14[v4]))();
}

uint64_t sub_100044F64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100044F6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100044F74);
  return result;
}

uint64_t sub_100044F80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100044F88);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100044F8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100044F94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for StorebagSectionRule.CodingKeys()
{
  sub_10000B0C0();
}

uint64_t sub_100044FAC(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[8]);
  return swift_bridgeObjectRelease(a1[10]);
}

_QWORD *sub_100044FF4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v8 = a2[8];
  v7 = a2[9];
  a1[8] = v8;
  a1[9] = v7;
  v9 = a2[10];
  a1[10] = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

_QWORD *sub_100045080(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a1[8];
  v13 = a2[8];
  a1[8] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  a1[9] = a2[9];
  v14 = a2[10];
  v15 = a1[10];
  a1[10] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

_QWORD *sub_100045164(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = a1[5];
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  a1[6] = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(a1[7]);
  v10 = a1[8];
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 80);
  v12 = a1[10];
  a1[9] = *(_QWORD *)(a2 + 72);
  a1[10] = v11;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_1000451E8(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100045228(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for StorebagSectionRuleRequiredLibraries()
{
  sub_10000B0C0();
}

unint64_t sub_10004528C()
{
  unint64_t result;

  result = qword_10008F9D8;
  if (!qword_10008F9D8)
  {
    result = swift_getWitnessTable(&unk_10006EC70, &unk_1000887C0);
    atomic_store(result, (unint64_t *)&qword_10008F9D8);
  }
  return result;
}

unint64_t sub_1000452CC()
{
  unint64_t result;

  result = qword_10008F9E0;
  if (!qword_10008F9E0)
  {
    result = swift_getWitnessTable(&unk_10006EBA8, &unk_1000887C0);
    atomic_store(result, (unint64_t *)&qword_10008F9E0);
  }
  return result;
}

unint64_t sub_10004530C()
{
  unint64_t result;

  result = qword_10008F9E8;
  if (!qword_10008F9E8)
  {
    result = swift_getWitnessTable(&unk_10006EBD0, &unk_1000887C0);
    atomic_store(result, (unint64_t *)&qword_10008F9E8);
  }
  return result;
}

unint64_t sub_100045348()
{
  unint64_t result;

  result = qword_10008F9F8;
  if (!qword_10008F9F8)
  {
    result = swift_getWitnessTable(&unk_10006EE00, &unk_1000888E0);
    atomic_store(result, (unint64_t *)&qword_10008F9F8);
  }
  return result;
}

unint64_t sub_100045384()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008FA00;
  if (!qword_10008FA00)
  {
    v1 = sub_100027598(&qword_10008E798);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008FA00);
  }
  return result;
}

uint64_t sub_1000453E0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 5) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v5 = v6 - 6;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_100045468(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000454B4 + 4 * byte_10006EB23[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000454E8 + 4 * byte_10006EB1E[v4]))();
}

uint64_t sub_1000454E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000454F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000454F8);
  return result;
}

uint64_t sub_100045504(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004550CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100045510(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100045518(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for StorebagSectionRuleRequiredLibraries.CodingKeys()
{
  sub_10000B0C0();
}

unint64_t sub_100045534()
{
  unint64_t result;

  result = qword_10008FA08;
  if (!qword_10008FA08)
  {
    result = swift_getWitnessTable(&unk_10006EDD8, &unk_1000888E0);
    atomic_store(result, (unint64_t *)&qword_10008FA08);
  }
  return result;
}

unint64_t sub_100045574()
{
  unint64_t result;

  result = qword_10008FA10;
  if (!qword_10008FA10)
  {
    result = swift_getWitnessTable(&unk_10006ED10, &unk_1000888E0);
    atomic_store(result, (unint64_t *)&qword_10008FA10);
  }
  return result;
}

unint64_t sub_1000455B4()
{
  unint64_t result;

  result = qword_10008FA18;
  if (!qword_10008FA18)
  {
    result = swift_getWitnessTable(&unk_10006ED38, &unk_1000888E0);
    atomic_store(result, (unint64_t *)&qword_10008FA18);
  }
  return result;
}

uint64_t *sub_1000455F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for StorebagSharedValue(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *sub_100045624(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  return a1;
}

uint64_t *sub_100045670(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  return a1;
}

void type metadata accessor for StorebagSectionPerCountrySampling()
{
  sub_10000B0C0();
}

void type metadata accessor for StorebagBool()
{
  sub_10000B0C0();
}

void sub_1000456C4(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
  sub_10000BF94();
}

uint64_t sub_1000456E4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100085BF0, a1, a2, &unk_10008E0D0);
  sub_10000B124();
  if (v2 >= 0x18)
    return 24;
  else
    return v2;
}

uint64_t sub_100045730(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x7972746E756F63 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7972746E756F63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease(0xE900000000000064);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F687365726874, 0xE900000000000064, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100045828()
{
  return 2;
}

void sub_100045830(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  Hasher._combine(_:)(a1 & 1);
  Hasher._finalize()();
  sub_100010D30();
}

unint64_t sub_10004586C(Swift::String string)
{
  unint64_t v1;
  void *object;
  Swift::String v3;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100085E50, v3);
  sub_10000B124();
  if (v1 >= 8)
    return 8;
  else
    return v1;
}

uint64_t sub_1000458B0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100010DDC();
  return ((uint64_t (*)(uint64_t))((char *)sub_1000458D4 + 4 * byte_10006EE68[v1]))(v0);
}

unint64_t sub_1000458D8()
{
  return sub_100018EF0();
}

uint64_t sub_1000458F4()
{
  return sub_10001D90C();
}

uint64_t sub_100045904()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100010DDC();
  return ((uint64_t (*)(uint64_t))((char *)sub_100045928 + 4 * byte_10006EE70[v1]))(v0);
}

unint64_t sub_10004592C()
{
  return sub_100018EF0();
}

uint64_t sub_100045948()
{
  return sub_10001D90C();
}

void sub_100045958(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  int v46;
  char v47;

  v5 = sub_10001AAC8(&qword_10008FAA8);
  __chkstk_darwin(v5);
  sub_10000BE50();
  v6 = a1[3];
  v7 = a1[4];
  sub_10001D44C(a1, v6);
  v8 = sub_100046EC4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_100088D40, &unk_100088D40, v8, v6, v7);
  if (v2)
  {
    sub_10001A2C4();
  }
  else
  {
    v9 = sub_10001123C();
    v11 = v10;
    sub_10001C748(v9, v10);
    v36 = sub_10001123C();
    v37 = v9;
    LOBYTE(v43) = 2;
    v13 = v12;
    sub_10001C748(v36, v12);
    v42 = v13;
    v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v43);
    v33 = v15;
    v34 = v14;
    v16 = sub_10001AAC8(&qword_10008FA40);
    v47 = 3;
    sub_100019594(&qword_10008FA88, &qword_10008FA40);
    v17 = sub_100019540();
    sub_10001AF3C(v17, v18, v19, v16, v20);
    v35 = v43;
    LOBYTE(v16) = v45;
    v39 = v44;
    v40 = sub_10001AAC8(&qword_10008FAB8);
    v47 = 4;
    v32 = v16;
    sub_100018DCC(v35, v39, v16);
    v21 = sub_100019594(&qword_10008FAC0, &qword_10008FAB8);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v40, &v47, v5, v40, v21);
    v47 = 5;
    v41 = v43;
    v38 = v44;
    v46 = v45;
    sub_100018DFC(v43, v44, v45);
    v22 = sub_100018F84();
    sub_10001AF3C((uint64_t)&unk_100088AB0, (uint64_t)&v47, v5, (uint64_t)&unk_100088AB0, v22);
    v29 = v43;
    v23 = sub_10001AAC8(&qword_10008FA78);
    v47 = 6;
    sub_100018E08(&qword_10008FA80, &qword_10008FA78);
    v24 = sub_100019540();
    v30 = v25;
    sub_10001AF3C(v24, v26, v27, v23, v25);
    v47 = 7;
    v28 = v43;
    swift_bridgeObjectRetain();
    sub_10001AF3C(v23, (uint64_t)&v47, v5, v23, v30);
    sub_10001DFE0();
    v31 = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100018DCC(v35, v39, v32);
    LOBYTE(v13) = v46;
    sub_100018DFC(v41, v38, v46);
    swift_bridgeObjectRetain();
    sub_100018DC0(v41, v38, v13);
    sub_100018DE4(v35, v39, v32);
    sub_1000120B4();
    sub_100010678();
    sub_10001A2C4();
    sub_100010678();
    sub_1000120B4();
    sub_100018DE4(v35, v39, v32);
    sub_100018DC0(v41, v38, v13);
    sub_10000BDE4();
    swift_bridgeObjectRelease(v28);
    *(_QWORD *)a2 = v37;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v36;
    *(_QWORD *)(a2 + 24) = v42;
    *(_QWORD *)(a2 + 32) = v34;
    *(_BYTE *)(a2 + 40) = v33 & 1;
    *(_QWORD *)(a2 + 48) = v35;
    *(_QWORD *)(a2 + 56) = v39;
    *(_BYTE *)(a2 + 64) = v32;
    *(_QWORD *)(a2 + 72) = v41;
    *(_QWORD *)(a2 + 80) = v38;
    *(_BYTE *)(a2 + 88) = v13;
    *(_BYTE *)(a2 + 89) = v29;
    *(_QWORD *)(a2 + 96) = v28;
    *(_QWORD *)(a2 + 104) = v31;
  }
  sub_10000A840();
}

void sub_100045ED8()
{
  char *v0;

  sub_100045830(*v0);
}

void sub_100045EF0(uint64_t a1)
{
  char *v1;

  sub_1000456C4(a1, *v1);
}

unint64_t sub_100045F00()
{
  unint64_t result;

  result = qword_10008FA20;
  if (!qword_10008FA20)
  {
    result = swift_getWitnessTable(&unk_10006EF54, &unk_100088AB0);
    atomic_store(result, (unint64_t *)&qword_10008FA20);
  }
  return result;
}

void sub_100045F3C()
{
  sub_10005A334();
}

void sub_100045F48()
{
  unsigned __int8 *v0;

  sub_100040D80(*v0);
}

uint64_t sub_100045F50(uint64_t a1)
{
  return sub_100040EF8(a1);
}

void sub_100045F58(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_100041274(a1, *v1);
}

uint64_t sub_100045F60@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1000456E4(*a1, a1[1]);
  *a2 = result;
  return result;
}

void sub_100045F8C(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_10001AC7C();
  a1[1] = v2;
  sub_10000BF94();
}

uint64_t sub_100045FB0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10004572C();
  *a1 = result;
  return result;
}

void sub_100045FD4(_BYTE *a1@<X8>)
{
  *a1 = 24;
}

uint64_t sub_100045FE0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100018F48();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100046008(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100018F48();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100046030(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  Hasher._finalize()();
  sub_100010D30();
}

uint64_t sub_100046068@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100045730(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10004608C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100045828();
  *a1 = result;
  return result;
}

uint64_t sub_1000460B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000A954();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000460D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000A954();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100046100(uint64_t a1)
{
  int v2;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v2 = *(unsigned __int8 *)(a1 + 64);
  if (v2 != 255)
    sub_100018DC0(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v2 & 1);
  sub_100018DC0(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 104));
}

uint64_t sub_10004615C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(unsigned __int8 *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  }
  else
  {
    v7 = v6 & 1;
    v8 = *(_QWORD *)(a2 + 48);
    v9 = *(_QWORD *)(a2 + 56);
    sub_100018DFC(v8, v9, v7);
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v9;
    *(_BYTE *)(a1 + 64) = v7;
  }
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_BYTE *)(a2 + 88);
  sub_100018DFC(v10, v11, v12);
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v11;
  *(_BYTE *)(a1 + 88) = v12;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v13 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100046240(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  int v9;
  char v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = (__int128 *)(a1 + 48);
  v8 = (__int128 *)(a2 + 48);
  v9 = *(unsigned __int8 *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 64) == 255)
  {
    if (v9 == 255)
    {
      v11 = *v8;
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *v7 = v11;
    }
    else
    {
      v18 = v9 & 1;
      v19 = *(_QWORD *)(a2 + 48);
      v20 = *(_QWORD *)(a2 + 56);
      sub_100018DFC(v19, v20, v9 & 1);
      *(_QWORD *)(a1 + 48) = v19;
      *(_QWORD *)(a1 + 56) = v20;
      *(_BYTE *)(a1 + 64) = v18;
    }
  }
  else if (v9 == 255)
  {
    sub_1000463D0(a1 + 48);
    v10 = *(_BYTE *)(a2 + 64);
    *v7 = *v8;
    *(_BYTE *)(a1 + 64) = v10;
  }
  else
  {
    v12 = v9 & 1;
    v13 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    sub_100018DFC(v13, v14, v9 & 1);
    v15 = *(_QWORD *)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    v17 = *(_BYTE *)(a1 + 64);
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v14;
    *(_BYTE *)(a1 + 64) = v12;
    sub_100018DC0(v15, v16, v17);
  }
  v21 = *(_QWORD *)(a2 + 72);
  v22 = *(_QWORD *)(a2 + 80);
  v23 = *(_BYTE *)(a2 + 88);
  sub_100018DFC(v21, v22, v23);
  v24 = *(_QWORD *)(a1 + 72);
  v25 = *(_QWORD *)(a1 + 80);
  v26 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = v21;
  *(_QWORD *)(a1 + 80) = v22;
  *(_BYTE *)(a1 + 88) = v23;
  sub_100018DC0(v24, v25, v26);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v27 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v27);
  v28 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v28);
  return a1;
}

uint64_t sub_1000463D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001AAC8(&qword_10008FA40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_100046410(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t sub_100046418(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = (_OWORD *)(a2 + 48);
  v9 = *(unsigned __int8 *)(a1 + 64);
  if (v9 != 255)
  {
    v10 = *(unsigned __int8 *)(a2 + 64);
    if (v10 != 255)
    {
      v11 = *(_QWORD *)(a1 + 48);
      v12 = *(_QWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 48) = *v8;
      *(_BYTE *)(a1 + 64) = v10 & 1;
      sub_100018DC0(v11, v12, v9 & 1);
      goto LABEL_6;
    }
    sub_1000463D0(a1 + 48);
  }
  *(_OWORD *)(a1 + 48) = *v8;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
LABEL_6:
  v13 = *(_BYTE *)(a2 + 88);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 80);
  v16 = *(_BYTE *)(a1 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = v13;
  sub_100018DC0(v14, v15, v16);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_100046510(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 112))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100046564(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void type metadata accessor for StorebagSectionClientTTR()
{
  sub_10000B0C0();
}

uint64_t sub_1000465E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  v9 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v9;
  v10 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v10;
  v11 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v11;
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
  v16 = *(unsigned __int8 *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v16 == 255)
  {
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 160);
    v13 = *(_QWORD *)(a2 + 168);
    sub_100018DFC(v12, v13, v16 & 1);
    *(_QWORD *)(a1 + 160) = v12;
    *(_QWORD *)(a1 + 168) = v13;
    *(_BYTE *)(a1 + 176) = v16 & 1;
  }
  v14 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v14;
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10004677C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  int v18;
  char v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v9;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v10 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v12 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v15;
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
  v16 = (__int128 *)(a1 + 160);
  v17 = (__int128 *)(a2 + 160);
  v18 = *(unsigned __int8 *)(a2 + 176);
  if (*(unsigned __int8 *)(a1 + 176) == 255)
  {
    if (v18 == 255)
    {
      v20 = *v17;
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
      *v16 = v20;
    }
    else
    {
      v27 = v18 & 1;
      v28 = *(_QWORD *)(a2 + 160);
      v29 = *(_QWORD *)(a2 + 168);
      sub_100018DFC(v28, v29, v18 & 1);
      *(_QWORD *)(a1 + 160) = v28;
      *(_QWORD *)(a1 + 168) = v29;
      *(_BYTE *)(a1 + 176) = v27;
    }
  }
  else if (v18 == 255)
  {
    sub_1000463D0(a1 + 160);
    v19 = *(_BYTE *)(a2 + 176);
    *v16 = *v17;
    *(_BYTE *)(a1 + 176) = v19;
  }
  else
  {
    v21 = v18 & 1;
    v22 = *(_QWORD *)(a2 + 160);
    v23 = *(_QWORD *)(a2 + 168);
    sub_100018DFC(v22, v23, v18 & 1);
    v24 = *(_QWORD *)(a1 + 160);
    v25 = *(_QWORD *)(a1 + 168);
    v26 = *(_BYTE *)(a1 + 176);
    *(_QWORD *)(a1 + 160) = v22;
    *(_QWORD *)(a1 + 168) = v23;
    *(_BYTE *)(a1 + 176) = v21;
    sub_100018DC0(v24, v25, v26);
  }
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v30 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v30);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  v31 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v31);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
  v32 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v32);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  return a1;
}

uint64_t sub_100046A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  v12 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 120);
  v15 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_WORD *)(a1 + 153) = *(_WORD *)(a2 + 153);
  v18 = (_OWORD *)(a2 + 160);
  v19 = *(unsigned __int8 *)(a1 + 176);
  if (v19 != 255)
  {
    v20 = *(unsigned __int8 *)(a2 + 176);
    if (v20 != 255)
    {
      v21 = *(_QWORD *)(a1 + 160);
      v22 = *(_QWORD *)(a1 + 168);
      *(_OWORD *)(a1 + 160) = *v18;
      *(_BYTE *)(a1 + 176) = v20 & 1;
      sub_100018DC0(v21, v22, v19 & 1);
      goto LABEL_6;
    }
    sub_1000463D0(a1 + 160);
  }
  *(_OWORD *)(a1 + 160) = *v18;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
LABEL_6:
  v23 = *(_QWORD *)(a2 + 192);
  v24 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v23;
  swift_bridgeObjectRelease(v24);
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  v25 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRelease(v25);
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  v26 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRelease(v26);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  return a1;
}

void type metadata accessor for StorebagSectionClientHTTP()
{
  sub_10000B0C0();
}

uint64_t _s13rtcreportingd33StorebagSectionPerCountrySamplingV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100046C04 + 4 * byte_10006EE7D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100046C38 + 4 * byte_10006EE78[v4]))();
}

uint64_t sub_100046C38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100046C40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100046C48);
  return result;
}

uint64_t sub_100046C54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100046C5CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100046C60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100046C68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionPerCountrySampling.CodingKeys()
{
  return &type metadata for StorebagSectionPerCountrySampling.CodingKeys;
}

unint64_t sub_100046C88()
{
  unint64_t result;

  result = qword_10008FA48;
  if (!qword_10008FA48)
  {
    result = swift_getWitnessTable(&unk_10006F064, &type metadata for StorebagSectionPerCountrySampling.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008FA48);
  }
  return result;
}

void sub_100046CC4(char *a1)
{
  sub_10005A398(*a1);
}

void sub_100046CD0()
{
  unsigned __int8 *v0;

  sub_100040D8C(*v0);
}

void sub_100046CD8(uint64_t a1)
{
  char *v1;

  sub_100040F34(a1, *v1);
}

void sub_100046CE0(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_100041268(a1, *v1);
}

unint64_t sub_100046CE8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10004586C(*a1);
  *a2 = result;
  return result;
}

void sub_100046D14(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_1000458B0();
  a1[1] = v2;
  sub_10000BF94();
}

uint64_t sub_100046D38()
{
  return sub_100045904();
}

uint64_t sub_100046D40@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1000458AC(a1);
  *a2 = result;
  return result;
}

void sub_100046D64(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_100046D70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046EC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100046D98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046EC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100046DC0(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _BYTE v4[112];

  sub_100045958(a1, (uint64_t)v4);
  if (!v2)
    memcpy(a2, v4, 0x70uLL);
}

unint64_t sub_100046E0C()
{
  unint64_t result;

  result = qword_10008FA50;
  if (!qword_10008FA50)
  {
    result = swift_getWitnessTable(&unk_10006EFD4, &type metadata for StorebagSectionPerCountrySampling.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008FA50);
  }
  return result;
}

unint64_t sub_100046E4C()
{
  unint64_t result;

  result = qword_10008FA58;
  if (!qword_10008FA58)
  {
    result = swift_getWitnessTable(&unk_10006EFFC, &type metadata for StorebagSectionPerCountrySampling.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008FA58);
  }
  return result;
}

unint64_t sub_100046E88()
{
  unint64_t result;

  result = qword_10008FAA0;
  if (!qword_10008FAA0)
  {
    result = swift_getWitnessTable(&unk_10006EF7C, &unk_100088A18);
    atomic_store(result, (unint64_t *)&qword_10008FAA0);
  }
  return result;
}

unint64_t sub_100046EC4()
{
  unint64_t result;

  result = qword_10008FAB0;
  if (!qword_10008FAB0)
  {
    result = swift_getWitnessTable(&unk_10006F30C, &unk_100088D40);
    atomic_store(result, (unint64_t *)&qword_10008FAB0);
  }
  return result;
}

uint64_t sub_100046F00(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 7) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v5 = v6 - 8;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_100046F88(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100046FD4 + 4 * byte_10006EE87[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100047008 + 4 * byte_10006EE82[v4]))();
}

uint64_t sub_100047008(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047010(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100047018);
  return result;
}

uint64_t sub_100047024(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004702CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100047030(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047038(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for StorebagSectionClientTTR.CodingKeys()
{
  sub_10000B0C0();
}

uint64_t sub_100047050(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE9)
  {
    if (a2 + 23 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 23) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 24;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x18;
  v5 = v6 - 24;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1000470D8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 23 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 23) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE8)
    return ((uint64_t (*)(void))((char *)&loc_100047124 + 4 * byte_10006EE91[v4]))();
  *a1 = a2 + 23;
  return ((uint64_t (*)(void))((char *)sub_100047158 + 4 * byte_10006EE8C[v4]))();
}

uint64_t sub_100047158(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047160(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100047168);
  return result;
}

uint64_t sub_100047174(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004717CLL);
  *(_BYTE *)result = a2 + 23;
  return result;
}

uint64_t sub_100047180(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047188(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for StorebagSectionClientHTTP.CodingKeys()
{
  sub_10000B0C0();
}

unint64_t sub_1000471A4()
{
  unint64_t result;

  result = qword_10008FAC8;
  if (!qword_10008FAC8)
  {
    result = swift_getWitnessTable(&unk_10006F1F4, &unk_100088DD0);
    atomic_store(result, (unint64_t *)&qword_10008FAC8);
  }
  return result;
}

unint64_t sub_1000471E4()
{
  unint64_t result;

  result = qword_10008FAD0;
  if (!qword_10008FAD0)
  {
    result = swift_getWitnessTable(&unk_10006F2E4, &unk_100088D40);
    atomic_store(result, (unint64_t *)&qword_10008FAD0);
  }
  return result;
}

unint64_t sub_100047224()
{
  unint64_t result;

  result = qword_10008FAD8;
  if (!qword_10008FAD8)
  {
    result = swift_getWitnessTable(&unk_10006F21C, &unk_100088D40);
    atomic_store(result, (unint64_t *)&qword_10008FAD8);
  }
  return result;
}

unint64_t sub_100047264()
{
  unint64_t result;

  result = qword_10008FAE0;
  if (!qword_10008FAE0)
  {
    result = swift_getWitnessTable(&unk_10006F244, &unk_100088D40);
    atomic_store(result, (unint64_t *)&qword_10008FAE0);
  }
  return result;
}

unint64_t sub_1000472A4()
{
  unint64_t result;

  result = qword_10008FAE8;
  if (!qword_10008FAE8)
  {
    result = swift_getWitnessTable(&unk_10006F12C, &unk_100088DD0);
    atomic_store(result, (unint64_t *)&qword_10008FAE8);
  }
  return result;
}

unint64_t sub_1000472E4()
{
  unint64_t result;

  result = qword_10008FAF0;
  if (!qword_10008FAF0)
  {
    result = swift_getWitnessTable(&unk_10006F154, &unk_100088DD0);
    atomic_store(result, (unint64_t *)&qword_10008FAF0);
  }
  return result;
}

uint64_t sub_100047330()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
}

uint64_t sub_100047338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  const char **v11;
  _QWORD *v12;
  const char **v13;
  _QWORD *v14;
  uint64_t v15;
  const char **v16;
  _BYTE *v17;
  uint64_t result;
  _QWORD *v19;
  _BYTE *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int64_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _BYTE *v30;
  uint64_t v31;
  unint64_t v32;

  v0 = sub_10001AAC8(&qword_10008F350);
  v1 = sub_10001AAC8(&qword_10008F358);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v0, v5 + 11 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_10006F3B0;
  v7 = v6 + v5;
  v8 = (_BYTE *)(v6 + v5 + *(int *)(v1 + 48));
  *(_QWORD *)(v6 + v5) = XPC_ACTIVITY_REPEATING;
  *v8 = 1;
  v9 = type metadata accessor for XPCObject(0);
  swift_storeEnumTagMultiPayload(v8, v9, 2);
  v10 = (_QWORD *)(v7 + v3 + *(int *)(v1 + 48));
  *(_QWORD *)(v7 + v3) = XPC_ACTIVITY_DELAY;
  *v10 = 86400;
  swift_storeEnumTagMultiPayload(v10, v9, 3);
  v11 = (const char **)(v7 + 2 * v3);
  v12 = (const char **)((char *)v11 + *(int *)(v1 + 48));
  *v11 = XPC_ACTIVITY_GRACE_PERIOD;
  *v12 = 43200;
  swift_storeEnumTagMultiPayload(v12, v9, 3);
  v13 = (const char **)(v7 + 3 * v3);
  v14 = (const char **)((char *)v13 + *(int *)(v1 + 48));
  *v13 = XPC_ACTIVITY_PRIORITY;
  *v14 = String.init(cString:)(XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  v14[1] = v15;
  swift_storeEnumTagMultiPayload(v14, v9, 8);
  v16 = (const char **)(v7 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = XPC_ACTIVITY_ALLOW_BATTERY;
  *v17 = 0;
  result = swift_storeEnumTagMultiPayload(v17, v9, 2);
  if (!XPC_ACTIVITY_POWER_NAP)
  {
    __break(1u);
    goto LABEL_9;
  }
  v19 = (_QWORD *)(v7 + 5 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = XPC_ACTIVITY_POWER_NAP;
  *v20 = 1;
  result = swift_storeEnumTagMultiPayload(v20, v9, 2);
  if (!XPC_ACTIVITY_RANDOM_INITIAL_DELAY)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v21 = (_QWORD *)(v7 + 6 * v3);
  v22 = (_QWORD *)((char *)v21 + *(int *)(v1 + 48));
  *v21 = XPC_ACTIVITY_RANDOM_INITIAL_DELAY;
  *v22 = 43200;
  result = swift_storeEnumTagMultiPayload(v22, v9, 4);
  if (!XPC_ACTIVITY_EXPECTED_DURATION)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v23 = (_QWORD *)(v7 - v3 + 8 * v3);
  v24 = (_QWORD *)((char *)v23 + *(int *)(v1 + 48));
  *v23 = XPC_ACTIVITY_EXPECTED_DURATION;
  *v24 = XPC_ACTIVITY_INTERVAL_1_MIN;
  result = swift_storeEnumTagMultiPayload(v24, v9, 3);
  if (!XPC_ACTIVITY_GROUP_NAME)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v25 = (_QWORD *)(v7 + 8 * v3);
  v26 = (_QWORD *)((char *)v25 + *(int *)(v1 + 48));
  *v25 = XPC_ACTIVITY_GROUP_NAME;
  *v26 = 0xD00000000000001DLL;
  v26[1] = 0x8000000100071D30;
  result = swift_storeEnumTagMultiPayload(v26, v9, 8);
  if (!XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v27 = (_QWORD *)(v7 + 9 * v3);
  v28 = (_QWORD *)((char *)v27 + *(int *)(v1 + 48));
  *v27 = XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT;
  *v28 = 1;
  result = swift_storeEnumTagMultiPayload(v28, v9, 4);
  if (XPC_ACTIVITY_DISK_INTENSIVE)
  {
    v29 = (_QWORD *)(v7 + 10 * v3);
    v30 = (char *)v29 + *(int *)(v1 + 48);
    *v29 = XPC_ACTIVITY_DISK_INTENSIVE;
    *v30 = 1;
    swift_storeEnumTagMultiPayload(v30, v9, 2);
    v31 = sub_10001AAC8(&qword_10008F360);
    v32 = sub_100038A2C();
    result = Dictionary.init(dictionaryLiteral:)(v6, v31, v9, v32);
    qword_100097340 = result;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t *sub_10004767C()
{
  if (qword_10008E020 != -1)
    swift_once(&qword_10008E020, sub_100047338);
  return &qword_100097340;
}

uint64_t sub_1000476BC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026B1C(v0, qword_100097348);
  sub_100015718(v0, (uint64_t)qword_100097348);
  return Logger.init(subsystem:category:)(0xD000000000000017, 0x8000000100071220, 0x6E61656C632D6264, 0xEA00000000007075);
}

uint64_t sub_100047734()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[7] = v0;
  v2 = type metadata accessor for Date(0);
  v1[8] = v2;
  v1[9] = *(_QWORD *)(v2 - 8);
  v1[10] = sub_10000BFD4();
  v1[11] = sub_10000BFD4();
  return sub_100012104();
}

void sub_100047798()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = qword_1000973C8;
  v0[12] = qword_1000973C8;
  if (v1)
  {
    v2 = v0[10];
    v3 = v0[8];
    v4 = v0[9];
    v5 = swift_retain(v1);
    v6 = static Date.now.getter(v5);
    Date.addingTimeInterval(_:)(v6, -172800.0);
    v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v0[13] = v7;
    v7(v2, v3);
    v8 = (_QWORD *)swift_task_alloc(dword_10008F5FC);
    v0[14] = v8;
    *v8 = v0;
    v8[1] = sub_10004784C;
    sub_10003CCAC(v0[11]);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10004784C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 104);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  v3(v5, v6);
  swift_release(v4);
  return sub_100012104();
}

void sub_1000478D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = qword_1000973C8;
  *(_QWORD *)(v0 + 128) = qword_1000973C8;
  if (v1)
  {
    swift_retain(v1);
    v2 = (_QWORD *)sub_10000BFD4();
    *(_QWORD *)(v0 + 136) = v2;
    *v2 = v0;
    v2[1] = sub_100047938;
    sub_10003D494();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100047938()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 136);
  v3 = *v1;
  *(_QWORD *)(v3 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return sub_100012104();
  swift_release(*(_QWORD *)(v3 + 128));
  swift_task_dealloc(*(_QWORD *)(v3 + 88));
  sub_100010D58();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000479B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  os_log_type_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (qword_10008E028 != -1)
    swift_once(&qword_10008E028, sub_1000476BC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100015718(v2, (uint64_t)qword_100097348);
  sub_100011200();
  v4 = sub_100011200();
  v5 = (void *)Logger.logObject.getter(v4);
  v6 = static os_log_type_t.fault.getter();
  if (sub_10000A8A8(v6))
  {
    sub_10001DFF0();
    v24 = sub_10001D2D4();
    sub_10001CC90(4.8751e-34);
    v7 = sub_100010540();
    v11 = sub_10001B29C(v7, v8, v9, v10);
    sub_10001A1CC(v11, v12, v13, v14, v15, v16, v17, v18, v22, v23);
    swift_bridgeObjectRelease(v3);
    sub_10000BE9C();
    sub_10000BE9C();
    sub_100012CAC((void *)&_mh_execute_header, v19, v20, "failed to delete outdated sessions: %{public}s");
    sub_1000180D8();
    sub_1000120F8(v24);
    sub_1000120F8(v1);

    sub_10000BE9C();
  }
  else
  {
    sub_10000BE9C();
    sub_10000BE9C();
    sub_10000BE9C();

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  sub_100010D58();
  return sub_10000A858(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100047AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  os_log_type_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_release(*(_QWORD *)(v0 + 128));
  if (qword_10008E028 != -1)
    swift_once(&qword_10008E028, sub_1000476BC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100015718(v2, (uint64_t)qword_100097348);
  sub_100011200();
  v4 = sub_100011200();
  v5 = (void *)Logger.logObject.getter(v4);
  v6 = static os_log_type_t.fault.getter();
  if (sub_10000A8A8(v6))
  {
    sub_10001DFF0();
    v24 = sub_10001D2D4();
    sub_10001CC90(4.8751e-34);
    v7 = sub_100010540();
    v11 = sub_10001B29C(v7, v8, v9, v10);
    sub_10001A1CC(v11, v12, v13, v14, v15, v16, v17, v18, v22, v23);
    swift_bridgeObjectRelease(v3);
    sub_10000BE9C();
    sub_10000BE9C();
    sub_100012CAC((void *)&_mh_execute_header, v19, v20, "failed to delete outdated sessions: %{public}s");
    sub_1000180D8();
    sub_1000120F8(v24);
    sub_1000120F8(v1);

    sub_10000BE9C();
  }
  else
  {
    sub_10000BE9C();
    sub_10000BE9C();
    sub_10000BE9C();

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  sub_100010D58();
  return sub_10000A858(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t type metadata accessor for CacheCleanupActivity()
{
  return objc_opt_self(_TtC13rtcreportingd20CacheCleanupActivity);
}

uint64_t sub_100047C1C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10008FB24);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10002C490;
  return sub_100047734();
}

double sub_100047C60()
{
  double result;

  sub_10004767C();
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_100047C7C()
{
  return 0x6E61656C632D6264;
}

unint64_t sub_100047C98(uint64_t a1)
{
  unint64_t result;

  result = sub_100047CBC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100047CBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008FBB0;
  if (!qword_10008FBB0)
  {
    v1 = type metadata accessor for CacheCleanupActivity();
    result = swift_getWitnessTable(&unk_10006F404, v1);
    atomic_store(result, (unint64_t *)&qword_10008FBB0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for StorebagSharedValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for StorebagSharedValue(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t *assignWithTake for StorebagSharedValue(uint64_t *a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;

  v3 = *((_BYTE *)a2 + 8);
  v4 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_100047DA4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_100047DAC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSharedValue()
{
  return &type metadata for StorebagSharedValue;
}

unint64_t sub_100047DC4()
{
  return 0xD000000000000032;
}

unint64_t sub_100047DE0()
{
  sub_100047DC4();
  return 0xD000000000000032;
}

unint64_t sub_100047DFC()
{
  unint64_t result;

  result = qword_10008FBC0;
  if (!qword_10008FBC0)
  {
    result = swift_getWitnessTable(&unk_10006EB44, &unk_100088720);
    atomic_store(result, (unint64_t *)&qword_10008FBC0);
  }
  return result;
}

unint64_t sub_100047E38()
{
  unint64_t result;

  result = qword_10008FBC8;
  if (!qword_10008FBC8)
  {
    result = swift_getWitnessTable(&unk_10006F534, &type metadata for StorebagSharedValue.Error);
    atomic_store(result, (unint64_t *)&qword_10008FBC8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for StorebagSharedValue.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100047EB4 + 4 * byte_10006F430[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100047ED4 + 4 * byte_10006F435[v4]))();
}

_BYTE *sub_100047EB4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100047ED4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100047EDC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100047EE4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100047EEC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100047EF4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSharedValue.Error()
{
  return &type metadata for StorebagSharedValue.Error;
}

unint64_t sub_100047F18()
{
  unint64_t result;

  result = qword_10008FBD0;
  if (!qword_10008FBD0)
  {
    result = swift_getWitnessTable(&unk_10006F50C, &type metadata for StorebagSharedValue.Error);
    atomic_store(result, (unint64_t *)&qword_10008FBD0);
  }
  return result;
}

uint64_t sub_100047F58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE *v12;
  _QWORD *v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;

  v0 = sub_10001AAC8(&qword_10008F350);
  v1 = sub_10001AAC8(&qword_10008F358);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v0, v5 + 3 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_10006D1A0;
  v7 = v6 + v5;
  v8 = (_QWORD *)(v6 + v5 + *(int *)(v1 + 48));
  *(_QWORD *)(v6 + v5) = XPC_ACTIVITY_PRIORITY;
  *v8 = String.init(cString:)(XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  v8[1] = v9;
  v10 = type metadata accessor for XPCObject(0);
  result = swift_storeEnumTagMultiPayload(v8, v10, 8);
  if (XPC_ACTIVITY_POWER_NAP)
  {
    v12 = (_BYTE *)(v7 + v3 + *(int *)(v1 + 48));
    *(_QWORD *)(v7 + v3) = XPC_ACTIVITY_POWER_NAP;
    *v12 = 1;
    result = swift_storeEnumTagMultiPayload(v12, v10, 2);
    if (XPC_ACTIVITY_POST_INSTALL)
    {
      v13 = (_QWORD *)(v7 + 2 * v3);
      v14 = (char *)v13 + *(int *)(v1 + 48);
      *v13 = XPC_ACTIVITY_POST_INSTALL;
      *v14 = 1;
      swift_storeEnumTagMultiPayload(v14, v10, 2);
      v15 = sub_10001AAC8(&qword_10008F360);
      v16 = sub_100038A2C();
      result = Dictionary.init(dictionaryLiteral:)(v6, v15, v10, v16);
      qword_100097360 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_1000480C0()
{
  if (qword_10008E030 != -1)
    swift_once(&qword_10008E030, sub_100047F58);
  return &qword_100097360;
}

uint64_t sub_100048100()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026B1C(v0, qword_100097368);
  sub_100015718(v0, (uint64_t)qword_100097368);
  return Logger.init(subsystem:category:)(0xD000000000000017, 0x8000000100071220, 0x736E692D74736F70, 0xEC0000006C6C6174);
}

void sub_10004817C()
{
  qword_100097380 = (uint64_t)&off_100085F30;
}

void sub_100048190()
{
  uint64_t v0;

  sub_100067DA0((uint64_t)&off_100085F80);
  qword_100097388 = v0;
}

void sub_1000481B4()
{
  qword_100097390 = (uint64_t)&off_100085FD0;
}

uint64_t sub_1000481C8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for URL.DirectoryHint(0);
  v1[11] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[12] = v3;
  v1[13] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v1[14] = v4;
  v1[15] = *(_QWORD *)(v4 - 8);
  v1[16] = sub_10000BFD4();
  v1[17] = sub_10000BFD4();
  v1[18] = sub_10000BFD4();
  v1[19] = sub_10000BFD4();
  v1[20] = sub_10000BFD4();
  return swift_task_switch(sub_1000482A0, v0, 0);
}

uint64_t sub_1000482A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  Swift::Bool v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSURL *v48;
  void *v49;
  void *v50;
  unsigned int v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  id *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int64_t v84;
  unint64_t v85;
  BOOL v86;
  int64_t v87;
  unint64_t v88;
  char v89;
  int64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void **v108;
  uint64_t v109;
  void *v110;
  Swift::String v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint64_t v115;
  id *v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  NSString v120;
  id v121;
  NSString v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  os_log_type_t type;
  _QWORD *v138;
  uint64_t (*v139)(uint64_t, uint64_t, uint64_t);
  id v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  int64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  int64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155[3];

  v140 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  if (qword_10008E040 != -1)
    goto LABEL_84;
LABEL_2:
  v2 = *(_QWORD *)(qword_100097380 + 16);
  v3 = &unk_10006D000;
  v148 = v0;
  if (v2)
  {
    v135 = v0 + 2;
    v149 = v0 + 5;
    v138 = v0 + 7;
    v133 = v0 + 9;
    v134 = v0 + 8;
    v132 = v0 + 10;
    v144 = v0[12];
    v146 = v0[15];
    v142 = enum case for URL.DirectoryHint.isDirectory(_:);
    v131 = v0 + 11;
    swift_bridgeObjectRetain();
    v130 = v4;
    v5 = (_QWORD *)(v4 + 40);
    while (1)
    {
      v151 = v5;
      v153 = v2;
      v6 = v0[19];
      v8 = v0[13];
      v7 = v0[14];
      v9 = v0[11];
      v10 = *(v5 - 1);
      v11 = *v5;
      swift_bridgeObjectRetain();
      v12 = NSHomeDirectory();
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      URL.init(fileURLWithPath:isDirectory:)(v13, v15, 1);
      sub_10001B144();
      v148[5] = v10;
      v0 = v148;
      v148[6] = v11;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v144 + 104))(v8, v142, v9);
      v16 = sub_100019414();
      URL.appending<A>(path:directoryHint:)(v149, v8, &type metadata for String, v16);
      (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v8, v9);
      v17 = *(void (**)(uint64_t, uint64_t))(v146 + 8);
      v17(v6, v7);
      swift_bridgeObjectRelease(v11);
      v18 = URL.checkResourceIsReachable()();
      if (v19)
      {
        swift_errorRelease(v19);
      }
      else if (v18)
      {
        if (qword_10008E038 != -1)
          swift_once(&qword_10008E038, sub_100048100);
        v20 = v148[20];
        v21 = v148[18];
        v22 = v148[14];
        v23 = sub_10000F3D0();
        v24 = sub_100015718(v23, (uint64_t)qword_100097368);
        v139 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v146 + 16);
        v25 = v139(v21, v20, v22);
        v26 = Logger.logObject.getter(v25);
        v27 = static os_log_type_t.default.getter();
        v28 = os_log_type_enabled(v26, v27);
        v1 = v148[14];
        if (v28)
        {
          v29 = sub_100012C5C(12);
          v30 = sub_100012C5C(32);
          v155[0] = v30;
          *(_DWORD *)v29 = 136446210;
          v31 = URL.path.getter();
          *(_QWORD *)(v29 + 4) = sub_10001810C(v31, v32);
          swift_bridgeObjectRelease(v24);
          sub_10001B400();
          sub_100010670((void *)&_mh_execute_header, v26, v27, "removing %{public}s", (uint8_t *)v29);
          swift_arrayDestroy(v30, 1);
          sub_1000120F8(v30);
          sub_1000120F8(v29);
        }
        else
        {
          sub_10001B400();
        }

        URL._bridgeToObjectiveC()(v48);
        v50 = v49;
        v148[7] = 0;
        v51 = objc_msgSend(v140, "removeItemAtURL:error:", v49, v138);

        v52 = (void *)v148[7];
        v53 = v148[20];
        if (v51)
        {
          v54 = v148[14];
          v55 = v52;
          v46 = v53;
          v47 = v54;
        }
        else
        {
          v56 = v148[16];
          v57 = v148[14];
          v58 = v52;
          v59 = _convertNSErrorToError(_:)(v52);

          swift_willThrow(v60, v61, v62, v63, v64, v65, v66, v67);
          v139(v56, v53, v57);
          swift_errorRetain(v59);
          v68 = swift_errorRetain(v59);
          v69 = Logger.logObject.getter(v68);
          LOBYTE(v1) = static os_log_type_t.error.getter();
          v70 = os_log_type_enabled(v69, (os_log_type_t)v1);
          v71 = v148[20];
          v72 = v148[14];
          if (v70)
          {
            type = v1;
            v1 = sub_100012C5C(22);
            v136 = sub_100012C5C(64);
            v155[0] = v136;
            *(_DWORD *)v1 = 136446466;
            v73 = URL.path.getter();
            v148[8] = sub_10001810C(v73, v74);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v134, v133, v1 + 4, v1 + 12);
            sub_10001B144();
            sub_10001CF1C();
            *(_WORD *)(v1 + 12) = 2082;
            swift_getErrorValue(v59, v133, v135);
            v75 = Error.localizedDescription.getter(v148[3], v148[4]);
            v77 = v76;
            v148[10] = sub_100014F94(v75, v76, v155);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v132, v131, v1 + 14, v1 + 22);
            swift_bridgeObjectRelease(v77);
            sub_1000121D0();
            sub_1000121D0();
            _os_log_impl((void *)&_mh_execute_header, v69, type, "failed removing %{public}s: %{public}s", (uint8_t *)v1, 0x16u);
            swift_arrayDestroy(v136, 2);
            sub_1000120F8(v136);
            sub_1000120F8(v1);

          }
          else
          {

            sub_1000121D0();
            sub_1000121D0();
            sub_10001CF1C();
          }
          sub_1000121D0();
          v46 = v71;
          v47 = v72;
        }
        goto LABEL_17;
      }
      if (qword_10008E038 != -1)
        swift_once(&qword_10008E038, sub_100048100);
      v33 = v148[20];
      v34 = v148[17];
      v35 = v148[14];
      v36 = sub_10000F3D0();
      sub_100015718(v36, (uint64_t)qword_100097368);
      v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v146 + 16))(v34, v33, v35);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.debug.getter();
      v40 = os_log_type_enabled(v38, v39);
      v1 = v148[20];
      v41 = v148[14];
      if (v40)
      {
        v42 = sub_100012C5C(12);
        v43 = sub_100012C5C(32);
        v155[0] = v43;
        *(_DWORD *)v42 = 136446210;
        v44 = URL.path.getter();
        *(_QWORD *)(v42 + 4) = sub_10001810C(v44, v45);
        sub_10001B144();
        sub_10001D930();
        sub_100010670((void *)&_mh_execute_header, v38, v39, "skipping %{public}s", (uint8_t *)v42);
        sub_10000BE60(v43);
        sub_1000120F8(v43);
        sub_1000120F8(v42);

      }
      else
      {

        sub_10001D930();
      }
      v46 = v1;
      v47 = v41;
LABEL_17:
      v17(v46, v47);
      v5 = v151 + 2;
      v2 = v153 - 1;
      if (v153 == 1)
      {
        swift_bridgeObjectRelease(v130);
        v3 = (_QWORD *)&unk_10006D000;
        break;
      }
    }
  }
  if (qword_10008E088 != -1)
    swift_once(&qword_10008E088, sub_1000584D4);
  v78 = (id *)&unk_100097000;
  v79 = objc_msgSend((id)qword_1000973F8, "dictionaryRepresentation");
  v80 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v79, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v141 = v80 + 64;
  v81 = -1;
  v82 = -1 << *(_BYTE *)(v80 + 32);
  if (-v82 < 64)
    v81 = ~(-1 << -(char)v82);
  v83 = v81 & *(_QWORD *)(v80 + 64);
  v145 = (unint64_t)(63 - v82) >> 6;
  v147 = v80;
  swift_bridgeObjectRetain();
  v84 = 0;
  v154 = v3[277];
  if (v83)
  {
LABEL_31:
    v150 = (v83 - 1) & v83;
    v152 = v84;
    v85 = __clz(__rbit64(v83)) | (v84 << 6);
    goto LABEL_52;
  }
  while (1)
  {
    v86 = __OFADD__(v84, 1);
    v87 = v84 + 1;
    if (v86)
    {
      __break(1u);
LABEL_84:
      swift_once(&qword_10008E040, sub_10004817C);
      goto LABEL_2;
    }
    if (v87 >= v145)
      goto LABEL_82;
    v88 = *(_QWORD *)(v141 + 8 * v87);
    if (!v88)
      break;
LABEL_51:
    v150 = (v88 - 1) & v88;
    v152 = v87;
    v85 = __clz(__rbit64(v88)) + (v87 << 6);
LABEL_52:
    v91 = (uint64_t *)(*(_QWORD *)(v147 + 48) + 16 * v85);
    v93 = *v91;
    v92 = v91[1];
    v94 = qword_10008E038;
    swift_bridgeObjectRetain();
    if (v94 != -1)
      swift_once(&qword_10008E038, sub_100048100);
    v95 = sub_10000F3D0();
    sub_100015718(v95, (uint64_t)qword_100097368);
    v96 = sub_10001CCFC();
    v97 = Logger.logObject.getter(v96);
    v98 = static os_log_type_t.debug.getter();
    if (sub_1000105A0(v98))
    {
      v99 = sub_100012C5C(12);
      v100 = sub_100012C5C(32);
      v155[0] = v100;
      *(_DWORD *)v99 = v154;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v99 + 4) = sub_10001CDE0();
      sub_100012D04();
      sub_100010670((void *)&_mh_execute_header, v97, (os_log_type_t)v1, "default set: %{public}s", (uint8_t *)v99);
      sub_10000BE60(v100);
      sub_1000120F8(v100);
      sub_1000120F8(v99);
    }
    else
    {
      sub_10001A204();
    }

    if (qword_10008E048 != -1)
      swift_once(&qword_10008E048, sub_100048190);
    sub_100020584(v93, v92, qword_100097388);
    if ((v101 & 1) != 0)
    {
      v102 = sub_10001CCFC();
      v103 = Logger.logObject.getter(v102);
      v104 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v103, v104))
      {
        v105 = sub_100012C5C(12);
        v1 = sub_100012C5C(32);
        sub_10001B0C0(v1);
        *(_QWORD *)(v105 + 4) = sub_10001CDE0();
        sub_100012D04();
        sub_100010670((void *)&_mh_execute_header, v103, v104, "removing default %{public}s", (uint8_t *)v105);
        sub_10000BE60(v1);
        sub_1000120F8(v1);
        sub_1000120F8(v105);
      }
      else
      {
        sub_10001A204();
      }

      v121 = v78[127];
      v122 = sub_10001937C();
      sub_10001B144();
      objc_msgSend(v121, "removeObjectForKey:", v122);

    }
    else
    {
      if (qword_10008E050 != -1)
        swift_once(&qword_10008E050, sub_1000481B4);
      v106 = *(_QWORD *)(qword_100097390 + 16);
      if (v106)
      {
        swift_bridgeObjectRetain();
        v143 = v107;
        v108 = (void **)(v107 + 40);
        do
        {
          v109 = (uint64_t)*(v108 - 1);
          v110 = *v108;
          swift_bridgeObjectRetain();
          v111._countAndFlagsBits = v109;
          v111._object = v110;
          LOBYTE(v109) = String.hasPrefix(_:)(v111);
          swift_bridgeObjectRelease(v110);
          if ((v109 & 1) != 0)
          {
            v112 = sub_10001CCFC();
            v113 = Logger.logObject.getter(v112);
            v114 = static os_log_type_t.default.getter();
            if (sub_1000105A0(v114))
            {
              v115 = sub_100012C5C(12);
              v116 = v78;
              v117 = sub_100012C5C(32);
              sub_10001B0C0(v117);
              *(_QWORD *)(v115 + 4) = sub_10001CDE0();
              sub_100012D04();
              sub_100010670((void *)&_mh_execute_header, v113, (os_log_type_t)v1, "removing default %{public}s", (uint8_t *)v115);
              sub_10000BE60(v117);
              v118 = v117;
              v78 = v116;
              sub_1000120F8(v118);
              sub_1000120F8(v115);
            }
            else
            {
              sub_10001A204();
            }

            v119 = v78[127];
            v120 = sub_10001937C();
            objc_msgSend(v119, "removeObjectForKey:", v120);

          }
          v108 += 2;
          --v106;
        }
        while (v106);
        swift_bridgeObjectRelease(v143);
        sub_10001B144();
        v0 = v148;
      }
      else
      {
        sub_10001B144();
      }
    }
    v83 = v150;
    v84 = v152;
    if (v150)
      goto LABEL_31;
  }
  sub_10001B2EC();
  if (v89 == v86)
    goto LABEL_82;
  sub_10001B1E0();
  if (v88)
    goto LABEL_50;
  sub_10001B2EC();
  if (v89 == v86)
    goto LABEL_82;
  sub_10001B1E0();
  if (v88)
    goto LABEL_50;
  sub_10001B2EC();
  if (v89 == v86)
    goto LABEL_82;
  sub_10001B1E0();
  if (v88)
    goto LABEL_50;
  sub_10001B2EC();
  if (v89 == v86)
    goto LABEL_82;
  sub_10001B1E0();
  if (v88)
    goto LABEL_50;
  sub_10001B2EC();
  if (v89 == v86)
    goto LABEL_82;
  sub_10001B1E0();
  if (v88)
  {
LABEL_50:
    v87 = v90;
    goto LABEL_51;
  }
  while (1)
  {
    v87 = v90 + 1;
    if (__OFADD__(v90, 1))
      __break(1u);
    if (v87 >= v145)
      break;
    v88 = *(_QWORD *)(v141 + 8 * v87);
    ++v90;
    if (v88)
      goto LABEL_51;
  }
LABEL_82:
  swift_release(v147);
  swift_bridgeObjectRelease(v147);
  v123 = v0[19];
  v124 = v0[20];
  v126 = v0[17];
  v125 = v0[18];
  v127 = v0[16];
  v128 = v0[13];

  swift_task_dealloc(v124);
  swift_task_dealloc(v123);
  swift_task_dealloc(v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v127);
  swift_task_dealloc(v128);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t type metadata accessor for PostInstallActivity()
{
  return objc_opt_self(_TtC13rtcreportingd19PostInstallActivity);
}

uint64_t sub_100048F00()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10008FC04);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10002C490;
  return sub_1000481C8();
}

double sub_100048F44()
{
  double result;

  sub_1000480C0();
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_100048F60()
{
  return 0x74736E6974736F70;
}

unint64_t sub_100048F80(uint64_t a1)
{
  unint64_t result;

  result = sub_100048FA4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100048FA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008FC90;
  if (!qword_10008FC90)
  {
    v1 = type metadata accessor for PostInstallActivity();
    result = swift_getWitnessTable(&unk_10006F5B0, v1);
    atomic_store(result, (unint64_t *)&qword_10008FC90);
  }
  return result;
}

uint64_t sub_100048FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a3;
  return swift_task_switch(sub_100048FF8, 0, 0);
}

uint64_t sub_100048FF8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = v0[2];
  if (type metadata accessor for SubmitEventsActivity() == v1)
  {
    v3 = sub_10001CDF0();
    v0[4] = v3;
    sub_100014530();
    sub_1000105B0();
    v4 = sub_100049168;
  }
  else if (type metadata accessor for RefreshStorebagsActivity() == v1)
  {
    v3 = sub_10001CDF0();
    v0[5] = v3;
    sub_100014530();
    sub_1000105B0();
    v4 = sub_1000491B0;
  }
  else if (type metadata accessor for SubmitEagerEventsActivity() == v1)
  {
    v3 = sub_10001CDF0();
    v0[6] = v3;
    sub_100014530();
    sub_1000105B0();
    v4 = sub_1000491F8;
  }
  else if (type metadata accessor for CacheCleanupActivity() == v1)
  {
    v3 = sub_10001CDF0();
    v0[7] = v3;
    sub_100014530();
    sub_1000105B0();
    v4 = sub_100049240;
  }
  else
  {
    if (type metadata accessor for PostInstallActivity() != v1)
      return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "rtcreportingd/XPCActivity.swift", 31, 2);
    v3 = sub_10001CDF0();
    v0[8] = v3;
    sub_100014530();
    sub_1000105B0();
    v4 = sub_100049288;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_100049168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001CF28();
  v2 = sub_10001B0D4(&qword_10008FEB0, v1, (uint64_t (*)(uint64_t))type metadata accessor for SubmitEventsActivity, (uint64_t)&unk_10006F978);
  return sub_10001BA78(*(_QWORD *)(v0 + 32), v2, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000491B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001CF28();
  v2 = sub_10001B0D4(&qword_10008FEA8, v1, (uint64_t (*)(uint64_t))type metadata accessor for RefreshStorebagsActivity, (uint64_t)&unk_10006E47C);
  return sub_10001BA78(*(_QWORD *)(v0 + 40), v2, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000491F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001CF28();
  v2 = sub_10001B0D4(&qword_10008FEA0, v1, (uint64_t (*)(uint64_t))type metadata accessor for SubmitEagerEventsActivity, (uint64_t)&unk_10006E74C);
  return sub_10001BA78(*(_QWORD *)(v0 + 48), v2, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100049240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001CF28();
  v2 = sub_10001B0D4(&qword_10008FE98, v1, (uint64_t (*)(uint64_t))type metadata accessor for CacheCleanupActivity, (uint64_t)&unk_10006F3E8);
  return sub_10001BA78(*(_QWORD *)(v0 + 56), v2, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100049288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001CF28();
  v2 = sub_10001B0D4(&qword_10008FE90, v1, (uint64_t (*)(uint64_t))type metadata accessor for PostInstallActivity, (uint64_t)&unk_10006F594);
  return sub_10001BA78(*(_QWORD *)(v0 + 64), v2, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000492D0(xpc_object_t criteria)
{
  uint64_t v1;
  _xpc_activity_s *v2;
  xpc_object_t v3;

  v2 = *(_xpc_activity_s **)(v1 + 16);
  if (!criteria)
    criteria = xpc_dictionary_create_empty();
  v3 = criteria;
  xpc_activity_set_criteria(v2, criteria);
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_100049308()
{
  uint64_t v0;

  sub_100010680();
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for XPCActivityHandle()
{
  return objc_opt_self(_TtC13rtcreportingd17XPCActivityHandle);
}

uint64_t sub_100049348()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026B1C(v0, qword_10008FCA0);
  sub_100015718(v0, (uint64_t)qword_10008FCA0);
  return Logger.init(subsystem:category:)(0xD000000000000017, 0x8000000100071220, 0x7974697669746361, 0xE800000000000000);
}

void sub_1000493BC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  Swift::String v5;
  void *object;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void **aBlock;
  unint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void *v22;
  uint64_t (*v23)();
  uint64_t v24;

  if (a1 != 2)
    *(_BYTE *)(v1 + 136) = a1 & 1;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease(0xE000000000000000);
  aBlock = (void **)0xD000000000000018;
  v20 = 0x8000000100071840;
  v2 = *(_QWORD *)(v1 + 112);
  v3 = *(_QWORD *)(v1 + 120);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 32);
  v5._countAndFlagsBits = v4(v2, v3);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v23 = sub_10004AB68;
  v24 = v1;
  aBlock = _NSConcreteStackBlock;
  v20 = 1107296256;
  v21 = sub_10001092C;
  v22 = &unk_100089190;
  v7 = _Block_copy(&aBlock);
  v8 = v24;
  sub_100014530();
  swift_release(v8);
  v9 = String.utf8CString.getter(0xD000000000000018, 0x8000000100071840);
  swift_bridgeObjectRelease(0x8000000100071840);
  xpc_activity_register((const char *)(v9 + 32), XPC_ACTIVITY_CHECK_IN, v7);
  swift_release(v9);
  _Block_release(v7);
  if (qword_10008E058 != -1)
    swift_once(&qword_10008E058, sub_100049348);
  v10 = sub_10000F3D0();
  sub_100015718(v10, (uint64_t)qword_10008FCA0);
  v11 = sub_10001B1EC();
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (sub_10001A2CC(v13))
  {
    v14 = (uint8_t *)sub_10001D190();
    v15 = sub_100012C5C(32);
    aBlock = (void **)v15;
    *(_DWORD *)v14 = 136315138;
    v16 = v4(v2, v3);
    v18 = sub_100014F94(v16, v17, (uint64_t *)&aBlock);
    sub_100015C3C((uint64_t)&v18, (uint64_t)&aBlock);
    sub_10000A828();
    sub_1000121D8();
    sub_100010670((void *)&_mh_execute_header, v12, (os_log_type_t)v7, "registered: %s", v14);
    sub_10000BE60(v15);
    sub_1000120F8(v15);
    sub_1000120F8((uint64_t)v14);
  }
  else
  {
    sub_1000121D8();
  }

}

uint64_t sub_100049620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  xpc_object_t v41;

  sub_10001AAC8(&qword_10008FEE0);
  sub_100012C34();
  __chkstk_darwin(v1);
  v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for XPCObject(0);
  v38 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  sub_10000CA58();
  sub_10001AAC8(&qword_10008FEE8);
  sub_100012C34();
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v34 - v8);
  v10 = sub_100011124();
  v11 = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRelease(v10);
  if (!v11)
    return 0;
  v41 = RTCXPCDictionary.init()();
  result = sub_100011124();
  v13 = 0;
  v14 = *(_QWORD *)(result + 64);
  v36 = result + 64;
  v39 = result;
  v15 = 1 << *(_BYTE *)(result + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v37 = (unint64_t)(v15 + 63) >> 6;
  v35 = v37 - 1;
  if ((v16 & v14) == 0)
    goto LABEL_7;
LABEL_5:
  v18 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  v19 = v18 | (v13 << 6);
  while (2)
  {
    v20 = *(_QWORD *)(v39 + 56);
    *v7 = *(_QWORD *)(*(_QWORD *)(v39 + 48) + 8 * v19);
    v21 = v20 + *(_QWORD *)(v38 + 72) * v19;
    v22 = sub_10001B08C();
    sub_10004AADC(v21, (uint64_t)v7 + *(int *)(v22 + 48));
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v7, 0, 1, v22);
    while (1)
    {
      sub_10004AB20((uint64_t)v7, (uint64_t)v9);
      v29 = sub_10001B08C();
      if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v9, 1, v29) == 1)
      {
        swift_release(v39);
        return (uint64_t)v41;
      }
      v30 = *v9;
      sub_10001CE4C((uint64_t)v9 + *(int *)(v29 + 48), v0);
      v31 = String.init(cString:)(v30);
      v33 = v32;
      sub_10004AADC(v0, (uint64_t)v3);
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v3, 0, 1, v40);
      RTCXPCDictionary.subscript.setter((uint64_t)v3, v31, v33);
      result = sub_10002FCCC(v0);
      if (v17)
        goto LABEL_5;
LABEL_7:
      v23 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (v23 < v37)
      {
        v24 = *(_QWORD *)(v36 + 8 * v23);
        if (v24)
          goto LABEL_10;
        v25 = v13 + 2;
        ++v13;
        if (v23 + 1 < v37)
        {
          v24 = *(_QWORD *)(v36 + 8 * v25);
          if (v24)
            goto LABEL_13;
          v13 = v23 + 1;
          if (v23 + 2 < v37)
          {
            v24 = *(_QWORD *)(v36 + 8 * (v23 + 2));
            if (v24)
            {
              v23 += 2;
              goto LABEL_10;
            }
            v25 = v23 + 3;
            v13 = v23 + 2;
            if (v23 + 3 < v37)
              break;
          }
        }
      }
LABEL_24:
      v26 = sub_10001B08C();
      sub_10001BC54((uint64_t)v7, v27, v28, v26);
      v17 = 0;
    }
    v24 = *(_QWORD *)(v36 + 8 * v25);
    if (v24)
    {
LABEL_13:
      v23 = v25;
LABEL_10:
      v17 = (v24 - 1) & v24;
      v19 = __clz(__rbit64(v24)) + (v23 << 6);
      v13 = v23;
      continue;
    }
    break;
  }
  while (1)
  {
    v23 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v23 >= v37)
    {
      v13 = v35;
      goto LABEL_24;
    }
    v24 = *(_QWORD *)(v36 + 8 * v23);
    ++v25;
    if (v24)
      goto LABEL_10;
  }
LABEL_31:
  __break(1u);
  return result;
}

void sub_10004997C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _xpc_activity_s *v10;
  xpc_activity_state_t state;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  xpc_object_t v40;
  void *v41;
  _xpc_activity_s *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  NSObject *v48;
  xpc_activity_state_t v49;
  uint64_t v50;

  v5 = v1;
  sub_10001AAC8((uint64_t *)&unk_1000903E0);
  sub_100012C34();
  __chkstk_darwin(v7);
  sub_10000CA58();
  v8 = type metadata accessor for XPCActivityHandle();
  v9 = sub_100018E5C(v8, 24);
  *(_QWORD *)(v9 + 16) = a1;
  v10 = (_xpc_activity_s *)swift_unknownObjectRetain(a1);
  state = xpc_activity_get_state(v10);
  if (state == 2)
  {
    if (qword_10008E058 != -1)
      swift_once(&qword_10008E058, sub_100049348);
    v23 = sub_10000F3D0();
    sub_100015718(v23, (uint64_t)qword_10008FCA0);
    v24 = sub_10000B038();
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    if (sub_10001A2CC(v26))
    {
      v27 = (uint8_t *)sub_10001D190();
      v28 = sub_100012C5C(32);
      *(_DWORD *)v27 = 136315138;
      v49 = v28;
      v29 = sub_10001B2F8(*(_QWORD *)(v5 + 112), *(_QWORD *)(v5 + 120));
      v31 = sub_10001F4EC(v29, v30);
      v32 = sub_10001B000(v31);
      sub_100015C3C(v32, v33);
      sub_10000A828();
      sub_100018064(v5);
      sub_100010670((void *)&_mh_execute_header, v25, v4, "run: %s", v27);
      sub_10000BE60(v28);
      sub_1000120F8(v28);
      sub_1000120F8((uint64_t)v27);
    }
    else
    {
      sub_100018064(v5);
    }

    v42 = *(_xpc_activity_s **)(v9 + 16);
    if (!xpc_activity_should_defer(v42))
    {
      xpc_activity_set_state(v42, 4);
      v44 = type metadata accessor for TaskPriority(0);
      sub_10001BC54(v2, v45, v46, v44);
      v47 = (_QWORD *)sub_100018E5C((uint64_t)&unk_100089178, 48);
      v47[2] = 0;
      v47[3] = 0;
      v47[4] = v5;
      v47[5] = v9;
      swift_retain(v5);
      v43 = sub_10002E7AC(v2, (uint64_t)&unk_10008FED8, (uint64_t)v47);
      goto LABEL_26;
    }
    xpc_activity_set_state(v42, 3);
  }
  else if (state)
  {
    if (qword_10008E058 != -1)
      swift_once(&qword_10008E058, sub_100049348);
    v34 = sub_10000F3D0();
    sub_100015718(v34, (uint64_t)qword_10008FCA0);
    v35 = sub_100014530();
    v48 = Logger.logObject.getter(v35);
    v36 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v48, v36))
    {
      sub_1000121D8();

      return;
    }
    v37 = (uint8_t *)sub_100012C5C(12);
    *(_DWORD *)v37 = 134217984;
    v49 = xpc_activity_get_state(*(xpc_activity_t *)(v9 + 16));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v37 + 4, v37 + 12);
    swift_release(v9);
    sub_100010670((void *)&_mh_execute_header, v48, v36, "unrecognized XPC activity state: %ld", v37);
    sub_1000120F8((uint64_t)v37);

  }
  else
  {
    if (qword_10008E058 != -1)
      swift_once(&qword_10008E058, sub_100049348);
    v12 = sub_10000F3D0();
    sub_100015718(v12, (uint64_t)qword_10008FCA0);
    v13 = sub_10000B038();
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.debug.getter();
    if (sub_100011250(v15))
    {
      v16 = (uint8_t *)sub_10001D190();
      v17 = sub_100012C5C(32);
      *(_DWORD *)v16 = 136315138;
      v49 = v17;
      v18 = sub_10001B2F8(*(_QWORD *)(v5 + 112), *(_QWORD *)(v5 + 120));
      v20 = sub_10001F4EC(v18, v19);
      v21 = sub_10001B000(v20);
      sub_1000078B8(v21, v22);
      sub_10000A828();
      sub_100018064(v5);
      sub_100010670((void *)&_mh_execute_header, v14, v3, "checkin: %s", v16);
      sub_10000BE60(v17);
      sub_1000120F8(v17);
      sub_1000120F8((uint64_t)v16);
    }
    else
    {
      sub_100018064(v5);
    }

    v38 = sub_100049620();
    if (v38)
    {
      v39 = v38;
      v40 = xpc_activity_copy_criteria(*(xpc_activity_t *)(v9 + 16));
      swift_unknownObjectRelease(v40);
      if (!v40)
      {
        v41 = (void *)swift_unknownObjectRetain(v39);
        sub_1000492D0(v41);
      }
      swift_unknownObjectRelease(v39);
    }
  }
  v43 = v9;
LABEL_26:
  swift_release(v43);
}

uint64_t sub_100049DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_100049DCC, a4, 0);
}

uint64_t sub_100049DCC()
{
  uint64_t v0;

  sub_100049F8C(*(_QWORD *)(v0 + 24));
  return sub_10000BD38(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100049DF4()
{
  uint64_t *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v0[16];
  if (v2)
  {
    v3 = v0;
    v4 = qword_10008E058;
    swift_retain(v2);
    if (v4 != -1)
      swift_once(&qword_10008E058, sub_100049348);
    v5 = sub_10000F3D0();
    sub_100015718(v5, (uint64_t)qword_10008FCA0);
    v6 = sub_10001B1EC();
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (sub_100011250(v8))
    {
      v9 = (uint8_t *)sub_10001D190();
      v10 = sub_100012C5C(32);
      *(_DWORD *)v9 = 136315138;
      v15 = v10;
      v11 = sub_10001B2F8(v3[14], v3[15]);
      v14 = sub_100014F94(v11, v12, &v15);
      sub_1000078B8((uint64_t)&v14, (uint64_t)&v15);
      sub_1000121D8();
      sub_10000A828();
      sub_100010670((void *)&_mh_execute_header, v7, v1, "cancel: %s", v9);
      sub_10000BE60(v10);
      sub_1000120F8(v10);
      sub_1000120F8((uint64_t)v9);

    }
    else
    {

      sub_1000121D8();
    }
    sub_10001AAC8(&qword_10008E7E8);
    Task.cancel()();
    swift_release(v2);
    v13 = v3[16];
    v3[16] = 0;
    swift_release(v13);
  }
}

void sub_100049F8C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t aBlock[5];
  uint64_t *v31;

  v2 = v1;
  v4 = *v2;
  sub_10001AAC8((uint64_t *)&unk_1000903E0);
  sub_100012C34();
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  if (*((_BYTE *)v2 + 136) == 1)
  {
    xpc_activity_set_state(*(xpc_activity_t *)(a1 + 16), 5);
    if (qword_10008E058 != -1)
      swift_once(&qword_10008E058, sub_100049348);
    v9 = sub_10000F3D0();
    v10 = sub_100015718(v9, (uint64_t)qword_10008FCA0);
    v11 = sub_10001B1EC();
    v28 = Logger.logObject.getter(v11);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v12))
    {
      v13 = (uint8_t *)sub_10001D190();
      v14 = sub_100012C5C(32);
      *(_DWORD *)v13 = 136315138;
      aBlock[0] = v14;
      v15 = sub_10001B2F8(v2[14], v2[15]);
      v29 = sub_100014F94(v15, v16, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, aBlock, v13 + 4, &v13[v10]);
      sub_10000A828();
      sub_1000121D8();
      sub_100010670((void *)&_mh_execute_header, v28, v12, "disabled: skipping %s", v13);
      sub_10000BE60(v14);
      sub_1000120F8(v14);
      sub_1000120F8((uint64_t)v13);
    }
    else
    {
      sub_1000121D8();
    }

  }
  else
  {
    aBlock[4] = (uint64_t)sub_10004A7C4;
    v31 = v2;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10001092C;
    aBlock[3] = (uint64_t)&unk_1000890F0;
    v17 = _Block_copy(aBlock);
    v18 = v31;
    sub_100014530();
    swift_release(v18);
    v19 = xpc_activity_add_eligibility_changed_handler(v8, v17);
    _Block_release(v17);
    v20 = type metadata accessor for TaskPriority(0);
    sub_10001BC54((uint64_t)v7, v21, v22, v20);
    v24 = sub_1000095E0(&qword_10008FE78, v23, (uint64_t (*)(uint64_t))type metadata accessor for XPCActivity, (uint64_t)&unk_10006F654);
    v25 = (_QWORD *)sub_100018E5C((uint64_t)&unk_100089128, 64);
    v25[2] = v2;
    v25[3] = v24;
    v25[4] = v19;
    v25[5] = a1;
    v25[6] = v2;
    v25[7] = v4;
    sub_10001B1EC();
    swift_retain(a1);
    v26 = sub_10005A888((uint64_t)v7, (uint64_t)&unk_10008FE80, (uint64_t)v25);
    v27 = v2[16];
    v2[16] = v26;
    swift_release(v27);
  }
}

uint64_t sub_10004A244(_xpc_activity_s *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = sub_10001AAC8((uint64_t *)&unk_1000903E0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = xpc_activity_should_defer(a1);
  if ((_DWORD)result)
  {
    v8 = type metadata accessor for TaskPriority(0);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v6, 1, 1, v8);
    v9 = (_QWORD *)swift_allocObject(&unk_100089150, 40, 7);
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = a2;
    swift_retain(a2);
    v10 = sub_10002E7AC((uint64_t)v6, (uint64_t)&unk_10008FEC0, (uint64_t)v9);
    return swift_release(v10);
  }
  return result;
}

uint64_t sub_10004A310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_10004A328, a4, 0);
}

uint64_t sub_10004A328()
{
  uint64_t v0;

  sub_100049DF4();
  return sub_10000BD38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004A350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  return swift_task_switch(sub_10004A36C, a6, 0);
}

uint64_t sub_10004A36C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v1 + 112);
  v2 = *(_QWORD *)(v1 + 120);
  v4 = (_QWORD *)swift_task_alloc(dword_10008FE8C);
  *(_QWORD *)(v0 + 72) = v4;
  *v4 = v0;
  v4[1] = sub_10004A3C4;
  return sub_100048FE0(v3, v2, *(_QWORD *)(v0 + 56));
}

uint64_t sub_10004A3C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = a2;
  v4 = v3[9];
  v3[10] = a1;
  swift_task_dealloc(v4);
  return sub_100010514();
}

uint64_t sub_10004A424()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t ObjectType;
  int *v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  static Task<>.checkCancellation()();
  v1 = v0[4];
  ObjectType = swift_getObjectType(v0[10]);
  v3 = *(int **)(v1 + 16);
  v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)v3 + *v3);
  v4 = (_QWORD *)swift_task_alloc(v3[1]);
  v0[11] = v4;
  *v4 = v0;
  v4[1] = sub_10004A4E8;
  return v6(ObjectType, v1);
}

uint64_t sub_10004A4E8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  return sub_100010514();
}

uint64_t sub_10004A538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 80));
  sub_100010DF8(v2, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10004A588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
    xpc_activity_remove_eligibility_changed_handler();
  xpc_activity_set_state(*(xpc_activity_t *)(a2 + 16), 5);
  if (qword_10008E058 != -1)
    swift_once(&qword_10008E058, sub_100049348);
  v5 = type metadata accessor for Logger(0);
  sub_100015718(v5, (uint64_t)qword_10008FCA0);
  v6 = swift_retain_n(a3, 2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    *(_DWORD *)v9 = 136315138;
    v15 = v10;
    v11 = (*(uint64_t (**)(void))(*(_QWORD *)(a3 + 120) + 32))();
    v13 = v12;
    v14 = sub_100014F94(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v9 + 4, v9 + 12);
    swift_release_n(a3, 2);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "done: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_release_n(a3, 2);
  }
}

uint64_t sub_10004A744(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000105B0();
  *(_QWORD *)(v2 + 120) = a2;
  *(_QWORD *)(v2 + 128) = 0;
  *(_BYTE *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 112) = a1;
  return v2;
}

uint64_t sub_10004A780()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 128));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for XPCActivity()
{
  return objc_opt_self(_TtC13rtcreportingd11XPCActivity);
}

uint64_t sub_10004A7C4(_xpc_activity_s *a1)
{
  uint64_t v1;

  return sub_10004A244(a1, v1);
}

uint64_t sub_10004A7CC()
{
  uint64_t v0;

  sub_100010680();
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10004A7FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v0[5];
  v4 = v0[6];
  v3 = v0[7];
  v5 = (_QWORD *)swift_task_alloc(dword_10008FE74);
  *(_QWORD *)(v1 + 16) = v5;
  v6 = sub_10001AF48(v5);
  return sub_10004A350(v6, v7, v8, v9, v2, v4, v3);
}

uint64_t sub_10004A874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v1 = sub_10001AAC8(&qword_10008EC18);
  v2 = sub_100018E5C(v1, 56);
  *(_OWORD *)(v2 + 16) = xmmword_10006F5E0;
  type metadata accessor for SubmitEventsActivity();
  sub_10001B0D4(&qword_10008FEB0, v3, (uint64_t (*)(uint64_t))type metadata accessor for SubmitEventsActivity, (uint64_t)&unk_10006F978);
  v4 = type metadata accessor for XPCActivity();
  sub_100012D10(v4, 137);
  sub_10001C750();
  *(_QWORD *)(v2 + 32) = v0;
  type metadata accessor for PostInstallActivity();
  sub_10001B0D4(&qword_10008FE90, v5, (uint64_t (*)(uint64_t))type metadata accessor for PostInstallActivity, (uint64_t)&unk_10006F594);
  sub_100012D10(v4, 137);
  sub_10001C750();
  *(_QWORD *)(v2 + 40) = v0;
  v6 = type metadata accessor for CacheCleanupActivity();
  v8 = sub_10001B0D4(&qword_10008FE98, v7, (uint64_t (*)(uint64_t))type metadata accessor for CacheCleanupActivity, (uint64_t)&unk_10006F3E8);
  v9 = sub_100012D10(v4, 137);
  v10 = sub_10004A744(v6, v8);
  *(_QWORD *)(v2 + 48) = v9;
  result = specialized Array._endMutation()(v10);
  qword_100097398 = v2;
  return result;
}

uint64_t sub_10004A9B4()
{
  uint64_t v0;

  sub_100010680();
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10004A9DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10008FEBC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003A400;
  return sub_10004A310(a1, v4, v5, v6);
}

uint64_t sub_10004AA48()
{
  uint64_t v0;

  sub_100010680();
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004AA78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc(dword_10008FED4);
  *(_QWORD *)(v1 + 16) = v3;
  v4 = sub_10001AF48(v3);
  return sub_100049DB4(v4, v5, v6, v7, v2);
}

uint64_t sub_10004AADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for XPCObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004AB20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001AAC8(&qword_10008FEE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004AB74(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t *sub_10004ABB4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  v7 = a2[4];
  a1[4] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *sub_10004AC20(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[4];
  v13 = a1[4];
  a1[4] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

_QWORD *sub_10004ACC4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  v6 = a1[4];
  a1[4] = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  return a1;
}

void type metadata accessor for EventAllowFilter()
{
  sub_10000B0C0();
}

void type metadata accessor for EventRemoveFilter()
{
  sub_10000B0C0();
}

void type metadata accessor for EventSHA256KeyFilter()
{
  sub_10000B0C0();
}

void type metadata accessor for EventAllowValuesFilter()
{
  sub_10000B0C0();
}

void type metadata accessor for EventDenyValuesFilter()
{
  sub_10000B0C0();
}

void type metadata accessor for EventInsertStringKeyFilter()
{
  sub_10000B0C0();
}

void type metadata accessor for EventAppendToKeyFilter()
{
  sub_10000B0C0();
}

void type metadata accessor for EventPrependToKeyFilter()
{
  sub_10000B0C0();
}

uint64_t sub_10004ADA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int EnumCaseMultiPayload;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  char v42;
  uint64_t v43;

  sub_10001AAC8(&qword_10008E740);
  sub_100012C34();
  __chkstk_darwin(v10);
  sub_10000CA40();
  v13 = (uint64_t *)(v11 - v12);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v43 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (uint64_t *)((char *)&v43 - v19);
  __chkstk_darwin(v18);
  v22 = (char *)&v43 - v21;
  if (*(_QWORD *)(a6 + 16))
  {
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_8;
    v23 = sub_10001A120(0x646F6874656D5FLL, 0xE700000000000000);
    if ((v24 & 1) == 0)
      goto LABEL_8;
    v25 = v23;
    v26 = *(_QWORD *)(a3 + 56);
    v27 = sub_1000192F4();
    sub_100033A4C(v26 + *(_QWORD *)(*(_QWORD *)(v27 - 8) + 72) * v25, (uint64_t)v22);
    v28 = sub_100019490();
    _s10RTCUtility9XPCObjectOwst_0(v28, v29, v30, v27);
    sub_10004DE90((uint64_t)v22, (uint64_t)v20);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v27);
    if (EnumCaseMultiPayload == 1)
    {
      v32 = *v20;
    }
    else
    {
      if (EnumCaseMultiPayload != 2)
      {
        sub_100033B1C((uint64_t)v20);
        goto LABEL_9;
      }
      v32 = *v20;
      if (v32 < 0)
      {
        __break(1u);
LABEL_8:
        sub_1000192F4();
        v33 = sub_10004E10C();
        _s10RTCUtility9XPCObjectOwst_0(v33, v34, v35, v36);
LABEL_9:
        v37 = (uint64_t)v22;
LABEL_23:
        sub_10002DAA8(v37, &qword_10008E740);
        return 0;
      }
    }
    sub_10002DAA8((uint64_t)v22, &qword_10008E740);
    sub_10005FF8C(v32, a6);
    if ((v38 & 1) == 0)
      return 0;
  }
  if (!*(_QWORD *)(a7 + 16))
    return 1;
  sub_10005A134(0x7375746174735FLL, 0xE700000000000000, a3, (uint64_t)v17);
  v39 = sub_1000192F4();
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v17, 1, v39) == 1)
    goto LABEL_22;
  sub_10004DE90((uint64_t)v17, (uint64_t)v13);
  result = swift_getEnumCaseMultiPayload(v13, v39);
  if ((_DWORD)result != 2)
  {
    if ((_DWORD)result == 1)
    {
      v41 = *v13;
      goto LABEL_19;
    }
    sub_100033B1C((uint64_t)v13);
LABEL_22:
    v37 = (uint64_t)v17;
    goto LABEL_23;
  }
  v41 = *v13;
  if (*v13 < 0)
  {
    __break(1u);
    return result;
  }
LABEL_19:
  sub_10002DAA8((uint64_t)v17, &qword_10008E740);
  sub_10005FF8C(v41, a7);
  return (v42 & 1) != 0;
}

void sub_10004B00C()
{
  uint64_t v0;

  sub_100067DA0((uint64_t)&off_100085830);
  qword_1000973A0 = v0;
}

uint64_t sub_10004B030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  if (qword_10008E068 != -1)
    swift_once(&qword_10008E068, sub_10004B00C);
  v10 = qword_1000973A0;
  swift_bridgeObjectRetain(qword_1000973A0);
  v11 = sub_10000CEB0();
  result = sub_10004B0BC(v11, v10);
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  a5[4] = result;
  return result;
}

uint64_t sub_10004B0BC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[2];
  uint64_t v18;

  v2 = result;
  v3 = 0;
  v18 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v9 | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain(v16);
    sub_100006354(v17, v15, v16);
    result = swift_bridgeObjectRelease(v17[1]);
    if (v7)
      goto LABEL_4;
LABEL_5:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_20:
    v7 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return v18;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

BOOL sub_10004B23C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;

  sub_100020584(a1, a2, *(_QWORD *)(v2 + 32));
  return (v3 & 1) == 0;
}

void sub_10004B25C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  uint64_t v37;
  Swift::Int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  BOOL v49;
  unint64_t i;
  unint64_t v51;
  char v52;
  uint64_t *v53;
  uint64_t v54;
  BOOL v55;
  _QWORD *v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[2];
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD v83[9];
  unint64_t v84;

  sub_10001B0DC();
  v3 = v2;
  sub_10001AAC8(&qword_10008E740);
  sub_100012C34();
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v0 + 16);
  v9 = *(_QWORD *)(v0 + 24);
  v82 = v0;
  v10 = *(_QWORD *)(v3 + 16);
  if ((sub_10004ADA0(v5, v11, v10, v12, v13, v8, v9) & 1) != 0)
  {
    v77[0] = v3;
    v77[1] = v1;
    v14 = *(_QWORD *)(v10 + 64);
    v79 = v7;
    v80 = v10 + 64;
    v15 = 1 << *(_BYTE *)(v10 + 32);
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v17 = v16 & v14;
    v81 = (unint64_t)(v15 + 63) >> 6;
    sub_10000BD20(v10);
    v18 = 0;
    v78 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v17)
      {
        v19 = __clz(__rbit64(v17));
        v20 = (v17 - 1) & v17;
        v21 = v19 | (v18 << 6);
      }
      else
      {
        if (__OFADD__(v18, 1))
        {
          __break(1u);
LABEL_72:
          __break(1u);
          return;
        }
        sub_100019558();
        if (v22 == v23)
          goto LABEL_62;
        sub_100015CA8();
        v18 = v24;
        if (!v25)
        {
          v18 = v24 + 1;
          sub_10001E518();
          if (v22 == v23)
            goto LABEL_62;
          sub_10001E568();
          if (!v25)
          {
            v18 = v26 + 2;
            sub_10001E518();
            if (v22 == v23)
              goto LABEL_62;
            sub_10001E568();
            if (!v25)
            {
              v18 = v27 + 3;
              sub_10001E518();
              if (v22 == v23)
                goto LABEL_62;
              sub_10001E568();
              if (!v25)
              {
                v18 = v28 + 4;
                sub_10001E518();
                if (v22 == v23)
                  goto LABEL_62;
                sub_10001E568();
                if (!v25)
                {
                  sub_100019558();
                  if (v22 == v23)
                  {
LABEL_62:
                    swift_release(v10);
                    v59 = v78;
                    v60 = v78[2];
                    if (v60)
                    {
                      v61 = v78 + 5;
                      do
                      {
                        v62 = *(v61 - 1);
                        v63 = *v61;
                        sub_100007840();
                        swift_bridgeObjectRetain();
                        v64 = sub_10001A120(v62, v63);
                        v66 = v65;
                        swift_bridgeObjectRelease(v10);
                        if ((v66 & 1) != 0)
                        {
                          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
                          v83[0] = v10;
                          v68 = *(_QWORD *)(v10 + 24);
                          sub_10001AAC8((uint64_t *)&unk_10008F860);
                          _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v68);
                          v10 = v83[0];
                          sub_1000103F4(*(_QWORD *)(v83[0] + 48) + 16 * v64);
                          v69 = *(_QWORD *)(v10 + 56);
                          v70 = sub_1000192F4();
                          v71 = v69 + *(_QWORD *)(*(_QWORD *)(v70 - 8) + 72) * v64;
                          v72 = (uint64_t)v79;
                          sub_100033AD8(v71, (uint64_t)v79);
                          _NativeDictionary._delete(at:)(v64, v10);
                          sub_10001936C();
                          v73 = v72;
                          v74 = 0;
                          v75 = v70;
                        }
                        else
                        {
                          v75 = sub_1000192F4();
                          v72 = (uint64_t)v79;
                          v73 = (uint64_t)v79;
                          v74 = 1;
                        }
                        _s10RTCUtility9XPCObjectOwst_0(v73, v74, 1, v75);
                        v61 += 2;
                        sub_10002DAA8(v72, &qword_10008E740);
                        sub_10000A818();
                        --v60;
                      }
                      while (v60);
                      v59 = v78;
                    }
                    swift_bridgeObjectRelease(v59);
                    v76 = v77[0];
                    sub_10001F5AC();
                    *(_QWORD *)(v76 + 16) = v10;
                    goto LABEL_70;
                  }
                  sub_100015CA8();
                  if (!v25)
                  {
                    while (1)
                    {
                      v18 = v29 + 1;
                      if (__OFADD__(v29, 1))
                        goto LABEL_72;
                      sub_10001E518();
                      if (v22 == v23)
                        goto LABEL_62;
                      sub_10001E568();
                      v29 = v30 + 1;
                      if (v25)
                        goto LABEL_32;
                    }
                  }
                  v18 = v29;
                }
              }
            }
          }
        }
LABEL_32:
        v20 = (v25 - 1) & v25;
        v21 = __clz(__rbit64(v25)) + (v18 << 6);
      }
      v84 = v20;
      v31 = v10;
      v32 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v21);
      v34 = *v32;
      v33 = v32[1];
      v35 = *(_QWORD *)(v82 + 32);
      if (!*(_QWORD *)(v35 + 16))
        break;
      Hasher.init(_seed:)(v83, *(_QWORD *)(v35 + 40));
      sub_1000111DC();
      String.hash(into:)(v83, v34, v33);
      v36 = Hasher._finalize()();
      v37 = -1 << *(_BYTE *)(v35 + 32);
      v38 = v36 & ~v37;
      v39 = v35 + 56;
      sub_10001E47C();
      if ((v40 & 1) == 0)
        goto LABEL_56;
      v41 = *(_QWORD *)(v35 + 48);
      v42 = (uint64_t *)(v41 + 16 * v38);
      v43 = v42[1];
      v44 = *v42 == v34 && v43 == v33;
      if (v44 || (sub_10001DA14(*v42, v43) & 1) != 0)
      {
LABEL_46:
        sub_10001B144();
        v10 = v31;
        v17 = v84;
      }
      else
      {
        v45 = ~v37;
        v46 = (v38 + 1) & ~v37;
        if (((*(_QWORD *)(v39 + ((v46 >> 3) & 0xFFFFFFFFFFFFF8)) >> v46) & 1) != 0)
        {
          v47 = (uint64_t *)(v41 + 16 * v46);
          v48 = v47[1];
          v49 = *v47 == v34 && v48 == v33;
          if (v49 || (sub_10001DA14(*v47, v48) & 1) != 0)
            goto LABEL_46;
          for (i = v46 + 1; ; i = v51 + 1)
          {
            v51 = i & v45;
            sub_10001E47C();
            if ((v52 & 1) == 0)
              break;
            v53 = (uint64_t *)(v41 + 16 * v51);
            v54 = v53[1];
            v55 = *v53 == v34 && v54 == v33;
            if (v55 || (sub_10001DA14(*v53, v54) & 1) != 0)
              goto LABEL_46;
          }
        }
LABEL_56:
        if ((swift_isUniquelyReferenced_nonNull_native(v78) & 1) != 0)
        {
          v10 = v31;
          v56 = v78;
        }
        else
        {
          sub_10000F444();
          v10 = v31;
        }
        v17 = v84;
        v57 = v56[2];
        if (v57 >= v56[3] >> 1)
          sub_100012D78();
        v56[2] = v57 + 1;
        v78 = v56;
        v58 = &v56[2 * v57];
        v58[4] = v34;
        v58[5] = v33;
      }
    }
    sub_1000111DC();
    goto LABEL_56;
  }
LABEL_70:
  sub_10000A840();
}

double sub_10004B6C0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double result;
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;

  sub_10004B030(a1, a2, a3, a4, v8);
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a5 = v8[0];
  *(_OWORD *)(a5 + 16) = v7;
  *(_QWORD *)(a5 + 32) = v9;
  return result;
}

void sub_10004B700()
{
  sub_10004B25C();
}

void sub_10004B718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  char v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  Swift::Int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  sub_10001B0DC();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  sub_10001AAC8(&qword_10008E740);
  sub_100012C34();
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD **)(v9 + 16);
  if ((sub_10004ADA0(v11, v15, (uint64_t)v14, v16, v17, v5, v3) & 1) == 0)
  {
LABEL_24:
    sub_10000A840();
    return;
  }
  v46 = v9;
  v47 = v0;
  v48 = v7 + 56;
  sub_10001BC60();
  v49 = v18;
  sub_100018040();
  sub_10000CEB0();
  v19 = 0;
  v20 = &qword_10008E740;
  if (!v1)
    goto LABEL_4;
LABEL_3:
  sub_10000C060();
  for (i = v21 | (v19 << 6); ; i = v25 + (v19 << 6))
  {
    v26 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * i);
    v28 = *v26;
    v27 = v26[1];
    sub_100010644();
    sub_100018040();
    v29 = sub_10001A120(v28, v27);
    v31 = v30;
    sub_10000A828();
    if ((v31 & 1) != 0)
    {
      v32 = sub_1000121A4();
      v50 = v19;
      v33 = v13;
      v34 = v7;
      v35 = v20;
      v36 = v14[3];
      sub_10001AAC8((uint64_t *)&unk_10008F860);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(v32, v36);
      sub_1000103F4(v14[6] + 16 * v29);
      v37 = v14[7];
      v38 = sub_1000192F4();
      v39 = v37 + *(_QWORD *)(*(_QWORD *)(v38 - 8) + 72) * v29;
      v20 = v35;
      v7 = v34;
      v13 = v33;
      v19 = v50;
      sub_100033AD8(v39, (uint64_t)v13);
      _NativeDictionary._delete(at:)(v29, v14);
      sub_10001936C();
      v40 = sub_100019490();
      v43 = v38;
    }
    else
    {
      sub_1000192F4();
      v40 = sub_10004E10C();
    }
    _s10RTCUtility9XPCObjectOwst_0(v40, v41, v42, v43);
    sub_10002DAA8((uint64_t)v13, v20);
    sub_10000781C();
    if (v1)
      goto LABEL_3;
LABEL_4:
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v23 >= v49)
      goto LABEL_23;
    ++v19;
    if (!*(_QWORD *)(v48 + 8 * v23))
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v49)
        goto LABEL_23;
      if (!*(_QWORD *)(v48 + 8 * v19))
      {
        v19 = v23 + 2;
        if (v23 + 2 >= v49)
          goto LABEL_23;
        if (!*(_QWORD *)(v48 + 8 * v19))
          break;
      }
    }
LABEL_17:
    sub_10004E14C();
  }
  v24 = v23 + 3;
  if (v24 >= v49)
  {
LABEL_23:
    sub_10000BDB4();
    v44 = v46;
    sub_10001F5AC();
    *(_QWORD *)(v44 + 16) = v14;
    goto LABEL_24;
  }
  if (*(_QWORD *)(v48 + 8 * v24))
  {
    v19 = v24;
    goto LABEL_17;
  }
  while (1)
  {
    v19 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v19 >= v49)
      goto LABEL_23;
    ++v24;
    if (*(_QWORD *)(v48 + 8 * v19))
      goto LABEL_17;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_10004B9B0@<X0>(uint64_t *a1@<X8>)
{
  return sub_10004DE08(XPCIncomingConnection.init(conn:), a1);
}

void sub_10004B9BC()
{
  sub_10004B718();
}

uint64_t sub_10004B9D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  return sub_10004B9AC(a1, a2, *v2);
}

void sub_10004B9E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v70;
  Swift::Int v71;
  uint64_t v72;
  Swift::Int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[2];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  int64_t v103;
  char *v104;
  uint64_t *v105;
  int64_t v106;
  uint64_t v107;
  _QWORD *v108;

  sub_10001B0DC();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v94 = type metadata accessor for SHA256(0);
  v9 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  sub_10001D17C();
  v93 = v10;
  v11 = type metadata accessor for String.Encoding(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_10001D17C();
  v91 = v13;
  v14 = type metadata accessor for SHA256Digest(0);
  v97 = *(_QWORD *)(v14 - 8);
  v98 = v14;
  sub_1000192FC();
  __chkstk_darwin(v15);
  sub_10001065C();
  v90 = v16;
  sub_100015684();
  __chkstk_darwin(v17);
  sub_1000156F4();
  v96 = v18;
  v19 = sub_1000192F4();
  v99 = *(_QWORD *)(v19 - 8);
  v100 = v19;
  sub_1000192FC();
  __chkstk_darwin(v20);
  sub_10001065C();
  v95 = v21;
  sub_100015684();
  __chkstk_darwin(v22);
  sub_1000156F4();
  v89 = v23;
  sub_10001AAC8(&qword_10008E740);
  sub_100012C34();
  __chkstk_darwin(v24);
  sub_10000CA40();
  v27 = v25 - v26;
  __chkstk_darwin(v28);
  v104 = (char *)v84 - v29;
  sub_100015684();
  __chkstk_darwin(v30);
  sub_1000156F4();
  v105 = (uint64_t *)v31;
  v92 = v8;
  v32 = *(_QWORD **)(v8 + 16);
  if ((sub_10004ADA0(v33, v34, (uint64_t)v32, v35, v36, v4, v2) & 1) != 0)
  {
    v88 = v0;
    v85 = v12;
    v86 = v11;
    v84[1] = v9;
    v37 = *(_QWORD *)(v6 + 56);
    v102 = v6 + 56;
    v38 = 1 << *(_BYTE *)(v6 + 32);
    v39 = -1;
    if (v38 < 64)
      v39 = ~(-1 << v38);
    v40 = v39 & v37;
    v103 = (unint64_t)(v38 + 63) >> 6;
    sub_1000111DC();
    swift_bridgeObjectRetain();
    v41 = 0;
    v101 = xmmword_10006D0C0;
    v43 = v99;
    v42 = v100;
    v87 = v27;
    v44 = (uint64_t)v104;
LABEL_5:
    v45 = v105;
    if (v40)
    {
LABEL_6:
      v46 = __clz(__rbit64(v40));
      v40 &= v40 - 1;
      v106 = v41;
      v47 = v46 | (v41 << 6);
      goto LABEL_21;
    }
    while (1)
    {
      v48 = v41 + 1;
      if (__OFADD__(v41, 1))
      {
        __break(1u);
        JUMPOUT(0x10004C540);
      }
      if (v48 >= v103)
        break;
      v49 = *(_QWORD *)(v102 + 8 * v48);
      v50 = v41 + 1;
      if (!v49)
      {
        v50 = v41 + 2;
        if (v41 + 2 >= v103)
          break;
        v49 = *(_QWORD *)(v102 + 8 * v50);
        if (!v49)
        {
          v50 = v41 + 3;
          if (v41 + 3 >= v103)
            break;
          v49 = *(_QWORD *)(v102 + 8 * v50);
          if (!v49)
          {
            v51 = v41 + 4;
            if (v41 + 4 >= v103)
              break;
            v49 = *(_QWORD *)(v102 + 8 * v51);
            if (!v49)
            {
              while (1)
              {
                v50 = v51 + 1;
                if (__OFADD__(v51, 1))
                {
                  __break(1u);
                  JUMPOUT(0x10004C54CLL);
                }
                if (v50 >= v103)
                  goto LABEL_47;
                v49 = *(_QWORD *)(v102 + 8 * v50);
                ++v51;
                if (v49)
                  goto LABEL_20;
              }
            }
            v50 = v41 + 4;
          }
        }
      }
LABEL_20:
      v40 = (v49 - 1) & v49;
      v106 = v50;
      v47 = __clz(__rbit64(v49)) + (v50 << 6);
LABEL_21:
      v52 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v47);
      v54 = *v52;
      v53 = v52[1];
      v55 = v32[2];
      v107 = v54;
      if (v55)
      {
        sub_10000BD20(v53);
        v56 = sub_10001A2DC(v54);
        v45 = v105;
        if ((v57 & 1) != 0)
        {
          sub_100033A4C(v32[7] + *(_QWORD *)(v43 + 72) * v56, (uint64_t)v105);
          v58 = (uint64_t)v45;
          v59 = 0;
        }
        else
        {
          v58 = (uint64_t)v105;
          v59 = 1;
        }
        _s10RTCUtility9XPCObjectOwst_0(v58, v59, 1, v42);
        sub_10000A818();
        v44 = (uint64_t)v104;
      }
      else
      {
        sub_100010EE4((uint64_t)v45);
        sub_100007840();
      }
      if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v45, 1, v42) == 1)
      {
        sub_10002DAA8((uint64_t)v45, &qword_10008E740);
      }
      else
      {
        if (!swift_getEnumCaseMultiPayload(v45, v42))
        {
          v84[0] = v6;
          v76 = *v45;
          v77 = v45[1];
          v78 = v91;
          static String.Encoding.utf8.getter(v60);
          String.data(using:allowLossyConversion:)(v78, 0, v76, v77);
          v80 = v79;
          swift_bridgeObjectRelease(v77);
          (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v78, v86);
          if (v80 >> 60 == 15)
            v81 = 0xC000000000000000;
          else
            v81 = v80;
          sub_100023D98((unint64_t *)&unk_1000904B0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
          dispatch thunk of HashFunction.init()(v94, v82);
          __asm { BR              X9 }
        }
        sub_100033B1C((uint64_t)v45);
      }
      v61 = v107;
      if (v32[2])
      {
        sub_100007840();
        v62 = sub_10001A2DC(v61);
        if ((v63 & 1) != 0)
        {
          v44 = (uint64_t)v104;
          v62 = sub_1000199F4(v32[7] + *(_QWORD *)(v43 + 72) * v62);
          v64 = 0;
        }
        else
        {
          v64 = 1;
          v44 = (uint64_t)v104;
        }
        sub_10000BFDC(v62, v64);
        sub_10000A818();
        if (_s10RTCUtility9XPCObjectOwet_0(v44, 1, v42) != 1)
        {
          sub_10002DAA8(v44, &qword_10008E740);
          sub_1000111DC();
          v65 = sub_10001A2DC(v61);
          v67 = v66;
          v68 = sub_10001B144();
          if ((v67 & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v32);
            v108 = v32;
            v70 = v6;
            v71 = v32[3];
            sub_10001AAC8((uint64_t *)&unk_10008F860);
            v72 = v87;
            v73 = v71;
            v6 = v70;
            _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v73);
            v74 = v72;
            v32 = v108;
            sub_1000103F4(v108[6] + 16 * v65);
            sub_100033AD8(v32[7] + *(_QWORD *)(v99 + 72) * v65, v72);
            v42 = v100;
            _NativeDictionary._delete(at:)(v65, v32);
            v68 = sub_10001936C();
            v75 = 0;
          }
          else
          {
            v75 = 1;
            v42 = v100;
            v74 = v87;
          }
          sub_10000BFDC(v68, v75);
          sub_10002DAA8(v74, &qword_10008E740);
          sub_10000A818();
          v43 = v99;
          v44 = (uint64_t)v104;
          v41 = v106;
          goto LABEL_5;
        }
      }
      else
      {
        sub_100010EE4(v44);
      }
      sub_10000A818();
      sub_10002DAA8(v44, &qword_10008E740);
      v45 = v105;
      v41 = v106;
      if (v40)
        goto LABEL_6;
    }
LABEL_47:
    swift_release(v6);
    v83 = v92;
    sub_1000111DC();
    sub_10000AF70();
    *(_QWORD *)(v83 + 16) = v32;
    sub_10001B144();
  }
  sub_10000A840();
}

uint64_t sub_10004C58C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10004DE08(j___s10RTCUtility21XPCIncomingConnectionV4connACSo13OS_xpc_object_p_tcfC, a1);
}

void sub_10004C598()
{
  sub_10004B9E0();
}

void sub_10004C5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  _QWORD *v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103[2];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  _QWORD *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD v126[2];
  uint64_t v127;
  uint64_t v128;

  sub_10001B0DC();
  a19 = v22;
  a20 = v23;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v116 = sub_10001AAC8((uint64_t *)&unk_10008F9A0);
  sub_100012C34();
  __chkstk_darwin(v32);
  sub_10001CFE0(v33, v103[0]);
  sub_10001AAC8(&qword_10008E740);
  sub_100012C34();
  __chkstk_darwin(v34);
  v114 = (char *)v103 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100015684();
  __chkstk_darwin(v36);
  sub_1000156F4();
  v107 = v37;
  v38 = sub_1000192F4();
  v118 = *(_QWORD *)(v38 - 8);
  sub_1000192FC();
  __chkstk_darwin(v39);
  v113 = (char *)v103 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100015684();
  __chkstk_darwin(v41);
  v112 = (char *)v103 - v42;
  sub_100015684();
  __chkstk_darwin(v43);
  v111 = (char *)v103 - v44;
  sub_100015684();
  __chkstk_darwin(v45);
  v110 = (char *)v103 - v46;
  sub_100015684();
  __chkstk_darwin(v47);
  sub_10001FD00();
  __chkstk_darwin(v48);
  v122 = (uint64_t)v103 - v49;
  sub_100015684();
  v51 = __chkstk_darwin(v50);
  if ((sub_10001D93C(v51, v52, v53, v54, v55, v56, v57, v58, v103[0]) & 1) == 0)
    goto LABEL_69;
  v108 = v21;
  v106 = v27;
  sub_1000121E4((uint64_t)&a12);
  v59 = 0;
  v109 = _swiftEmptyArrayStorage;
  v60 = &qword_10008E740;
  v61 = v107;
  v123 = v29;
  while (v21)
  {
    sub_10004E1A8();
LABEL_21:
    sub_10001D080();
    v124 = v31;
    if (v68)
    {
      sub_10000BD20(v29);
      v69 = sub_1000103FC();
      if ((v70 & 1) != 0)
      {
        v71 = sub_10004E194(v69);
        sub_10004E12C(v71);
        v72 = v61;
        v73 = 0;
      }
      else
      {
        v72 = v61;
        v73 = 1;
      }
      _s10RTCUtility9XPCObjectOwst_0(v72, v73, 1, v38);
      sub_100010678();
    }
    else
    {
      _s10RTCUtility9XPCObjectOwst_0(v61, 1, 1, v38);
      sub_10001CEBC();
    }
    sub_10000B048(v61);
    if (v81)
    {
      sub_100010678();
      sub_10002DAA8(v61, v60);
      v29 = v123;
    }
    else
    {
      sub_100033AD8(v61, v117);
      v74 = *(_QWORD *)(v106 + 16);
      if (v74)
      {
        sub_100011134(v106);
        v115 = *(_QWORD *)(v20 + 72);
        while (2)
        {
          v121 = v74;
          v74 = (uint64_t)v21;
          v75 = v59;
          v76 = v60;
          v77 = v122;
          sub_100033A4C(v31, v122);
          sub_10004E0F4();
          v78 = v77;
          v60 = v76;
          v59 = v75;
          v21 = (uint64_t *)v74;
          sub_10001C5B4(v78);
          sub_1000199F4(v117);
          switch(sub_10004E11C())
          {
            case 0u:
              v79 = v108;
              sub_10004E12C(a10);
              v74 = v79[1];
              if (sub_10001BA84())
              {
                sub_10000781C();
                goto LABEL_47;
              }
              v104 = sub_10001FECC(*v79);
              v83 = v82;
              v105 = v82;
              sub_10000A828();
              v127 = v104;
              v128 = v83;
              v84 = sub_10004E188();
              v86 = v85;
              sub_10000781C();
              v126[0] = v84;
              v126[1] = v86;
              v87 = sub_100019414();
              v25 = sub_1000145B8((uint64_t)v126, (uint64_t)&type metadata for String, v88, v87);
              sub_100018F0C((uint64_t)&a15);
              sub_10000A818();
              goto LABEL_49;
            case 1u:
              sub_10000BE78();
              if (sub_10001BA84() != 1)
                goto LABEL_47;
              v80 = v110;
              goto LABEL_39;
            case 2u:
              sub_10000BEC0();
              if (sub_10001BA84() != 2)
                goto LABEL_47;
              v80 = v111;
LABEL_39:
              v81 = *v80 == *(_QWORD *)v25;
              goto LABEL_42;
            case 3u:
              sub_100010888();
              if (sub_10001BA84() != 3)
                goto LABEL_47;
              sub_10004E160();
LABEL_42:
              v25 = v81;
              goto LABEL_49;
            case 4u:
              sub_100015750();
              if (sub_10001BA84() != 4)
                goto LABEL_47;
              sub_100014618();
LABEL_49:
              sub_100033B1C(a10);
              sub_100015B3C();
              if ((v25 & 1) == 0)
                goto LABEL_50;
              sub_100018F0C((uint64_t)&a16);
              sub_100010678();
              v61 = v107;
              goto LABEL_58;
            default:
LABEL_47:
              sub_10002DAA8(a10, (uint64_t *)&unk_10008F9A0);
              sub_100015B3C();
LABEL_50:
              sub_10000BE1C();
              if (!v81)
                continue;
              sub_100018F0C((uint64_t)&a16);
              v61 = v107;
              break;
          }
          break;
        }
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v109) & 1) == 0)
      {
        sub_10000F444();
        v109 = v93;
      }
      v90 = v109[2];
      v89 = v109[3];
      v25 = v90 + 1;
      v31 = v124;
      if (v90 >= v89 >> 1)
      {
        sub_100015640(v89);
        sub_100012D78();
        v109 = v94;
      }
      v91 = v109;
      v109[2] = v25;
      v92 = &v91[2 * v90];
      v92[4] = v31;
      v92[5] = v29;
LABEL_58:
      sub_100033B1C(v117);
      v29 = v123;
    }
  }
  if (__OFADD__(v59, 1))
  {
    __break(1u);
    goto LABEL_71;
  }
  sub_100019558();
  if (v62 == v63)
    goto LABEL_60;
  sub_100015CA8();
  v59 = v64;
  if (v65)
    goto LABEL_20;
  v59 = v64 + 1;
  if (v64 + 1 >= v120)
    goto LABEL_60;
  if (*(_QWORD *)(v119 + 8 * v59))
    goto LABEL_20;
  v59 = v64 + 2;
  if (v64 + 2 >= v120)
    goto LABEL_60;
  if (*(_QWORD *)(v119 + 8 * v59))
  {
LABEL_20:
    sub_10000D240();
    goto LABEL_21;
  }
  sub_100019558();
  if (v62 != v63)
  {
    sub_100015CA8();
    if (!v67)
    {
      while (1)
      {
        v59 = v66 + 1;
        if (__OFADD__(v66, 1))
          break;
        if (v59 >= v120)
          goto LABEL_60;
        ++v66;
        if (*(_QWORD *)(v119 + 8 * v59))
          goto LABEL_20;
      }
LABEL_71:
      __break(1u);
      JUMPOUT(0x10004CBE0);
    }
    v59 = v66;
    goto LABEL_20;
  }
LABEL_60:
  sub_10001AF98();
  v95 = *(_QWORD *)(v125 + 16);
  v96 = v109[2];
  if (v96)
  {
    sub_100018040();
    do
    {
      sub_10001FE00();
      sub_100018040();
      v97 = sub_100019B60();
      v99 = v98;
      v100 = sub_10000A828();
      if ((v99 & 1) != 0)
      {
        sub_1000121A4();
        v127 = v95;
        sub_10001AAC8((uint64_t *)&unk_10008F860);
        sub_10001F514();
        sub_10001D3F4();
        sub_10001B014();
        _NativeDictionary._delete(at:)(v97, v95);
        v100 = sub_10001936C();
        v101 = 0;
      }
      else
      {
        v101 = 1;
      }
      sub_100010E04(v100, v101);
      swift_bridgeObjectRelease(0);
      --v96;
    }
    while (v96);
  }
  else
  {
    sub_100018040();
  }
  swift_bridgeObjectRelease(v109);
  v102 = v125;
  sub_10001F5AC();
  *(_QWORD *)(v102 + 16) = v95;
LABEL_69:
  sub_10000A840();
}

#error "10004CC04: call analysis failed (funcsize=7)"

void sub_10004CC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  _QWORD *v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[2];
  uint64_t v124;
  uint64_t v125;

  sub_10001B0DC();
  a19 = v22;
  a20 = v23;
  v25 = v24;
  v105 = v26;
  v28 = v27;
  v30 = v29;
  v113 = sub_10001AAC8((uint64_t *)&unk_10008F9A0);
  sub_100012C34();
  __chkstk_darwin(v31);
  sub_10001CFE0(v32, v101);
  sub_10001AAC8(&qword_10008E740);
  sub_100012C34();
  __chkstk_darwin(v33);
  v111 = (char *)&v101 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100015684();
  __chkstk_darwin(v35);
  v37 = (char *)&v101 - v36;
  v38 = sub_1000192F4();
  v115 = *(_QWORD *)(v38 - 8);
  sub_1000192FC();
  __chkstk_darwin(v39);
  v110 = (char *)&v101 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100015684();
  __chkstk_darwin(v41);
  v109 = (char *)&v101 - v42;
  sub_100015684();
  __chkstk_darwin(v43);
  v108 = (char *)&v101 - v44;
  sub_100015684();
  __chkstk_darwin(v45);
  v107 = (char *)&v101 - v46;
  sub_100015684();
  __chkstk_darwin(v47);
  sub_10001FD00();
  __chkstk_darwin(v48);
  v119 = (uint64_t)&v101 - v49;
  sub_100015684();
  v51 = __chkstk_darwin(v50);
  if ((sub_10001D93C(v51, v52, v53, v54, v55, v56, v57, v58, v101) & 1) == 0)
    goto LABEL_69;
  v106 = v21;
  sub_1000121E4((uint64_t)&a13);
  v59 = 0;
  v104 = _swiftEmptyArrayStorage;
  v121 = v28;
  while (v21)
  {
    sub_10004E1A8();
LABEL_21:
    sub_10001D080();
    v120 = v30;
    if (v66)
    {
      sub_10000BD20(v28);
      v67 = sub_1000103FC();
      if ((v68 & 1) != 0)
      {
        v69 = sub_10004E194(v67);
        sub_100033A4C(v69, (uint64_t)v37);
        v70 = (uint64_t)v37;
        v71 = 0;
      }
      else
      {
        v70 = (uint64_t)v37;
        v71 = 1;
      }
      _s10RTCUtility9XPCObjectOwst_0(v70, v71, 1, v38);
      sub_100010678();
    }
    else
    {
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v37, 1, 1, v38);
      sub_10001CEBC();
    }
    sub_10000B048((uint64_t)v37);
    if (v79)
    {
      sub_100010678();
      sub_10002DAA8((uint64_t)v37, &qword_10008E740);
      v28 = v121;
    }
    else
    {
      sub_100033AD8((uint64_t)v37, v114);
      v72 = *(_QWORD *)(v105 + 16);
      if (v72)
      {
        sub_100011134(v105);
        v112 = *(_QWORD *)(v20 + 72);
        while (2)
        {
          v118 = v72;
          v72 = (uint64_t)v21;
          v73 = v59;
          v74 = v37;
          v75 = v119;
          sub_100033A4C(v30, v119);
          sub_10004E0F4();
          v76 = v75;
          v37 = v74;
          v59 = v73;
          v21 = (uint64_t *)v72;
          sub_10001C5B4(v76);
          sub_1000199F4(v114);
          switch(sub_10004E11C())
          {
            case 0u:
              v77 = v106;
              sub_10004E12C(a10);
              v72 = v77[1];
              if (sub_10001BA84())
              {
                sub_10000781C();
                goto LABEL_47;
              }
              v102 = sub_10001FECC(*v77);
              v81 = v80;
              v103 = v80;
              sub_10000A828();
              v124 = v102;
              v125 = v81;
              v82 = sub_10004E188();
              v84 = v83;
              sub_10000781C();
              v123[0] = v82;
              v123[1] = v84;
              v85 = sub_100019414();
              v25 = sub_1000145B8((uint64_t)v123, (uint64_t)&type metadata for String, v86, v85);
              sub_100018F0C((uint64_t)&a16);
              sub_10000A818();
              goto LABEL_49;
            case 1u:
              sub_10000BE78();
              if (sub_10001BA84() != 1)
                goto LABEL_47;
              v78 = v107;
              goto LABEL_39;
            case 2u:
              sub_10000BEC0();
              if (sub_10001BA84() != 2)
                goto LABEL_47;
              v78 = v108;
LABEL_39:
              v79 = *v78 == *(_QWORD *)v25;
              goto LABEL_42;
            case 3u:
              sub_100010888();
              if (sub_10001BA84() != 3)
                goto LABEL_47;
              sub_10004E160();
LABEL_42:
              v25 = v79;
              goto LABEL_49;
            case 4u:
              sub_100015750();
              if (sub_10001BA84() != 4)
                goto LABEL_47;
              sub_100014618();
LABEL_49:
              sub_100033B1C(a10);
              sub_100015B3C();
              if ((v25 & 1) == 0)
                goto LABEL_50;
              sub_100018F0C((uint64_t)&a18);
              if ((swift_isUniquelyReferenced_nonNull_native(v104) & 1) == 0)
              {
                sub_100012D78();
                v104 = v91;
              }
              v88 = v104[2];
              v87 = v104[3];
              v25 = v88 + 1;
              v30 = v120;
              if (v88 >= v87 >> 1)
              {
                sub_100015640(v87);
                sub_100012D78();
                v104 = v92;
              }
              v89 = v104;
              v104[2] = v25;
              v90 = &v89[2 * v88];
              v90[4] = v30;
              v90[5] = v28;
              goto LABEL_54;
            default:
LABEL_47:
              sub_10002DAA8(a10, (uint64_t *)&unk_10008F9A0);
              sub_100015B3C();
LABEL_50:
              sub_10000BE1C();
              if (!v79)
                continue;
              sub_100018F0C((uint64_t)&a18);
              break;
          }
          break;
        }
      }
      sub_100010678();
LABEL_54:
      sub_100033B1C(v114);
      v28 = v121;
    }
  }
  if (__OFADD__(v59, 1))
  {
    __break(1u);
    goto LABEL_71;
  }
  sub_100019558();
  if (v60 == v61)
    goto LABEL_60;
  sub_100015CA8();
  v59 = v62;
  if (v63)
    goto LABEL_20;
  v59 = v62 + 1;
  if (v62 + 1 >= v117)
    goto LABEL_60;
  if (*(_QWORD *)(v116 + 8 * v59))
    goto LABEL_20;
  v59 = v62 + 2;
  if (v62 + 2 >= v117)
    goto LABEL_60;
  if (*(_QWORD *)(v116 + 8 * v59))
  {
LABEL_20:
    sub_10000D240();
    goto LABEL_21;
  }
  sub_100019558();
  if (v60 != v61)
  {
    sub_100015CA8();
    if (!v65)
    {
      while (1)
      {
        v59 = v64 + 1;
        if (__OFADD__(v64, 1))
          break;
        if (v59 >= v117)
          goto LABEL_60;
        ++v64;
        if (*(_QWORD *)(v116 + 8 * v59))
          goto LABEL_20;
      }
LABEL_71:
      __break(1u);
      JUMPOUT(0x10004D25CLL);
    }
    v59 = v64;
    goto LABEL_20;
  }
LABEL_60:
  sub_10001AF98();
  v93 = *(_QWORD *)(v122 + 16);
  v94 = v104[2];
  if (v94)
  {
    sub_100018040();
    do
    {
      sub_10001FE00();
      sub_100018040();
      v95 = sub_100019B60();
      v97 = v96;
      v98 = sub_10000A828();
      if ((v97 & 1) != 0)
      {
        sub_1000121A4();
        v124 = v93;
        sub_10001AAC8((uint64_t *)&unk_10008F860);
        sub_10001F514();
        sub_10001D3F4();
        sub_10001B014();
        _NativeDictionary._delete(at:)(v95, v93);
        v98 = sub_10001936C();
        v99 = 0;
      }
      else
      {
        v99 = 1;
      }
      sub_100010E04(v98, v99);
      swift_bridgeObjectRelease(0);
      --v94;
    }
    while (v94);
  }
  else
  {
    sub_100018040();
  }
  sub_100018F0C((uint64_t)&a17);
  v100 = v122;
  sub_10001F5AC();
  *(_QWORD *)(v100 + 16) = v93;
LABEL_69:
  sub_10000A840();
}

#error "10004D280: call analysis failed (funcsize=7)"

void sub_10004D28C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  Swift::Int v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  sub_10001B0DC();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  sub_10001AAC8(&qword_10008E740);
  sub_100012C34();
  __chkstk_darwin(v11);
  sub_10000CA40();
  v14 = v12 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v66 - v16;
  v18 = sub_1000192F4();
  v71 = *(_QWORD *)(v18 - 8);
  sub_1000192FC();
  __chkstk_darwin(v19);
  sub_10001065C();
  v73 = v20;
  sub_100015684();
  __chkstk_darwin(v21);
  sub_1000156F4();
  v72 = v22;
  v69 = v10;
  v23 = *(_QWORD **)(v10 + 16);
  if ((sub_10004ADA0(v24, v25, (uint64_t)v23, v26, v27, v4, v2) & 1) == 0)
    goto LABEL_34;
  sub_10004D63C(v6, (uint64_t)v17);
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v17, 1, v18) == 1)
  {
    sub_10002DAA8((uint64_t)v17, &qword_10008E740);
LABEL_34:
    sub_10000A840();
    return;
  }
  v28 = v18;
  v66 = v0;
  sub_100033AD8((uint64_t)v17, v72);
  v74 = v8 + 56;
  sub_10001BC60();
  v75 = v29;
  sub_100018040();
  sub_1000111DC();
  v30 = 0;
  v31 = v71;
  v67 = v18;
  v68 = v8;
  while (1)
  {
    if (v18)
    {
      sub_10000C060();
      v33 = v32 | (v30 << 6);
      goto LABEL_21;
    }
    v34 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v34 >= v75)
      goto LABEL_33;
    ++v30;
    if (!*(_QWORD *)(v74 + 8 * v34))
    {
      v30 = v34 + 1;
      if (v34 + 1 >= v75)
        goto LABEL_33;
      if (!*(_QWORD *)(v74 + 8 * v30))
      {
        v30 = v34 + 2;
        if (v34 + 2 >= v75)
          goto LABEL_33;
        if (!*(_QWORD *)(v74 + 8 * v30))
          break;
      }
    }
LABEL_20:
    sub_10004E14C();
    v33 = v36 + (v30 << 6);
LABEL_21:
    v37 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v33);
    v39 = *v37;
    v38 = v37[1];
    v40 = v23[2];
    sub_100010644();
    if (v40 && (v41 = sub_10001D1D8(), (v42 & 1) != 0))
    {
      sub_10001C5B4(v23[7] + *(_QWORD *)(v31 + 72) * v41);
      v43 = sub_100019490();
      _s10RTCUtility9XPCObjectOwst_0(v43, v44, v45, v28);
      sub_10000781C();
      sub_10002DAA8(v14, &qword_10008E740);
    }
    else
    {
      v46 = sub_10004E10C();
      _s10RTCUtility9XPCObjectOwst_0(v46, v47, v48, v28);
      sub_10002DAA8(v14, &qword_10008E740);
      sub_100033A4C(v72, v73);
      v70 = sub_1000121A4();
      v49 = sub_10001D1D8();
      v51 = v23[2];
      v52 = (v50 & 1) == 0;
      v53 = v51 + v52;
      if (__OFADD__(v51, v52))
        goto LABEL_37;
      v54 = v49;
      v31 = v50;
      sub_10001AAC8((uint64_t *)&unk_10008F860);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v70, v53))
      {
        v55 = sub_10001D1D8();
        if ((v31 & 1) != (v56 & 1))
          goto LABEL_39;
        v54 = v55;
      }
      if ((v31 & 1) != 0)
      {
        v57 = sub_10001FE3C();
        sub_10004DE4C(v57, v58);
      }
      else
      {
        v23[(v54 >> 6) + 8] |= 1 << v54;
        v59 = (_QWORD *)(v23[6] + 16 * v54);
        *v59 = v39;
        v59[1] = v38;
        v60 = sub_10001FE3C();
        sub_100033AD8(v60, v61);
        v62 = v23[2];
        v63 = __OFADD__(v62, 1);
        v64 = v62 + 1;
        if (v63)
          goto LABEL_38;
        v23[2] = v64;
        sub_100010644();
      }
      sub_10000781C();
      sub_10001936C();
      v28 = v67;
      v8 = v68;
    }
  }
  v35 = v34 + 3;
  if (v35 >= v75)
  {
LABEL_33:
    swift_release(v8);
    sub_100033B1C(v72);
    v65 = v69;
    sub_100018040();
    sub_10000AF70();
    *(_QWORD *)(v65 + 16) = v23;
    sub_10000A828();
    goto LABEL_34;
  }
  if (*(_QWORD *)(v74 + 8 * v35))
  {
    v30 = v35;
    goto LABEL_20;
  }
  while (1)
  {
    v30 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v30 >= v75)
      goto LABEL_33;
    ++v35;
    if (*(_QWORD *)(v74 + 8 * v30))
      goto LABEL_20;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10004D63C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for EventValue(0);
  v6 = v5;
  if (v4)
  {
    v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
    sub_100033A4C(a1 + ((v7 + 32) & ~v7), a2);
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  return _s10RTCUtility9XPCObjectOwst_0(a2, v8, 1, v6);
}

void sub_10004D6AC()
{
  sub_10004D28C();
}

void sub_10004D6C8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BOOL8 v34;
  Swift::Int v35;
  Swift::Bool v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[12];
  int isUniquelyReferenced_nonNull_native;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  sub_10001B0DC();
  sub_10004E174();
  v56 = v4;
  v6 = v5;
  v55 = *(_QWORD *)(sub_1000192F4() - 8);
  sub_1000192FC();
  __chkstk_darwin(v7);
  sub_10001065C();
  v54 = v8;
  sub_100015684();
  __chkstk_darwin(v9);
  v53 = &v45[-v10];
  sub_100015684();
  __chkstk_darwin(v11);
  v13 = (uint64_t *)&v45[-v12];
  sub_10001AAC8(&qword_10008E740);
  sub_100012C34();
  v15 = __chkstk_darwin(v14);
  if ((sub_10001B304(v15, v16, v17, v18, v19) & 1) == 0)
    goto LABEL_39;
  sub_10004E140();
  sub_10000B048((uint64_t)v0);
  if (v20)
  {
    sub_10002DAA8((uint64_t)v0, &qword_10008E740);
LABEL_39:
    sub_10000A840();
    return;
  }
  if (sub_10001BA84())
  {
    sub_100033B1C((uint64_t)v0);
    goto LABEL_39;
  }
  v50 = v6;
  v51 = v1;
  v49 = *v0;
  v52 = (void *)v0[1];
  v22 = v56;
  v57 = v56 + 56;
  sub_1000105B8();
  v58 = v23;
  sub_10001CEBC();
  sub_10000CEB0();
  v24 = 0;
  while (v2)
  {
    sub_10001548C();
LABEL_24:
    if (*(_QWORD *)(v3 + 16))
    {
      sub_100010644();
      v27 = sub_10001C4BC();
      if ((v28 & 1) != 0)
      {
        sub_10001A428(v27, *(_QWORD *)(v3 + 56));
        if (sub_10004E134())
        {
          sub_10000781C();
          sub_100033B1C((uint64_t)v13);
          v22 = v56;
        }
        else
        {
          v29 = v13[1];
          v59 = *v13;
          v60 = v29;
          v30._countAndFlagsBits = v49;
          v30._object = v52;
          String.append(_:)(v30);
          v31 = (uint64_t)v53;
          sub_100019A90(v59);
          sub_100033AD8(v31, v54);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
          v61 = v3;
          v47 = sub_10001C4BC();
          v32 = *(_QWORD *)(v3 + 16);
          v48 = v33;
          v34 = (v33 & 1) == 0;
          v35 = v32 + v34;
          if (__OFADD__(v32, v34))
            goto LABEL_42;
          sub_10001AAC8((uint64_t *)&unk_10008F860);
          v36 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v35);
          v37 = v47;
          if (v36)
          {
            v38 = sub_10001D1D8();
            if ((v48 & 1) != (v39 & 1))
              goto LABEL_44;
            v37 = v38;
          }
          v3 = v61;
          if ((v48 & 1) != 0)
          {
            sub_10004DE4C(v54, *(_QWORD *)(v61 + 56) + v37 * v22);
          }
          else
          {
            sub_10001D2E4();
            sub_100033AD8(v54, v40);
            v41 = *(_QWORD *)(v61 + 16);
            v42 = __OFADD__(v41, 1);
            v43 = v41 + 1;
            if (v42)
              goto LABEL_43;
            *(_QWORD *)(v61 + 16) = v43;
            sub_100010644();
          }
          v22 = v56;
          sub_10000781C();
          sub_10001936C();
        }
      }
      else
      {
        sub_10000781C();
      }
    }
  }
  v25 = v24 + 1;
  if (__OFADD__(v24, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v25 >= v58)
    goto LABEL_38;
  ++v24;
  if (*(_QWORD *)(v57 + 8 * v25))
    goto LABEL_23;
  v24 = v25 + 1;
  if (v25 + 1 >= v58)
    goto LABEL_38;
  if (*(_QWORD *)(v57 + 8 * v24))
    goto LABEL_23;
  v24 = v25 + 2;
  if (v25 + 2 >= v58)
    goto LABEL_38;
  if (*(_QWORD *)(v57 + 8 * v24))
  {
LABEL_23:
    sub_100019B04();
    goto LABEL_24;
  }
  v26 = v25 + 3;
  if (v26 >= v58)
  {
LABEL_38:
    swift_bridgeObjectRelease(v52);
    sub_10000BDB4();
    v44 = v50;
    sub_10001CEBC();
    sub_10000AF70();
    *(_QWORD *)(v44 + 16) = v3;
    sub_100010678();
    goto LABEL_39;
  }
  if (*(_QWORD *)(v57 + 8 * v26))
  {
    v24 = v26;
    goto LABEL_23;
  }
  while (1)
  {
    v24 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v24 >= v58)
      goto LABEL_38;
    ++v26;
    if (*(_QWORD *)(v57 + 8 * v24))
      goto LABEL_23;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10004DA34()
{
  sub_10004D6C8();
}

void sub_10004DA50()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _BOOL8 v35;
  Swift::Int v36;
  Swift::Bool v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[4];
  int isUniquelyReferenced_nonNull_native;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  uint64_t v62;

  sub_10001B0DC();
  sub_10004E174();
  v57 = v4;
  v6 = v5;
  v56 = *(_QWORD *)(sub_1000192F4() - 8);
  sub_1000192FC();
  __chkstk_darwin(v7);
  sub_10001065C();
  v55 = v8;
  sub_100015684();
  __chkstk_darwin(v9);
  v54 = &v46[-v10];
  sub_100015684();
  __chkstk_darwin(v11);
  v13 = (uint64_t *)&v46[-v12];
  sub_10001AAC8(&qword_10008E740);
  sub_100012C34();
  v15 = __chkstk_darwin(v14);
  if ((sub_10001B304(v15, v16, v17, v18, v19) & 1) == 0)
    goto LABEL_39;
  sub_10004E140();
  sub_10000B048((uint64_t)v0);
  if (v20)
  {
    sub_10002DAA8((uint64_t)v0, &qword_10008E740);
LABEL_39:
    sub_10000A840();
    return;
  }
  if (sub_10001BA84())
  {
    sub_100033B1C((uint64_t)v0);
    goto LABEL_39;
  }
  v51 = v6;
  v52 = v1;
  v50 = *v0;
  v53 = v0[1];
  v22 = v57;
  v58 = v57 + 56;
  sub_1000105B8();
  v62 = v23;
  sub_10001CEBC();
  sub_10000CEB0();
  v24 = 0;
  while (v2)
  {
    sub_10001548C();
LABEL_24:
    if (*(_QWORD *)(v3 + 16))
    {
      sub_100010644();
      v27 = sub_10001C4BC();
      if ((v28 & 1) != 0)
      {
        sub_10001A428(v27, *(_QWORD *)(v3 + 56));
        if (sub_10004E134())
        {
          sub_10000781C();
          sub_100033B1C((uint64_t)v13);
          v22 = v57;
        }
        else
        {
          v29 = *v13;
          v49 = v13[1];
          v61[0] = v29;
          v61[1] = v49;
          v59 = v50;
          v60 = v53;
          v30 = swift_bridgeObjectRetain();
          v59 = String.init<A>(_:)(&v59, &type metadata for String, &protocol witness table for String, &protocol witness table for String, v30);
          v60 = v31;
          String.append<A>(contentsOf:)(v61, &type metadata for String, &protocol witness table for String);
          swift_bridgeObjectRelease(v49);
          v32 = (uint64_t)v54;
          sub_100019A90(v59);
          sub_100033AD8(v32, v55);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
          v61[0] = v3;
          v48 = sub_10001C4BC();
          v33 = *(_QWORD *)(v3 + 16);
          LODWORD(v49) = v34;
          v35 = (v34 & 1) == 0;
          v36 = v33 + v35;
          if (__OFADD__(v33, v35))
            goto LABEL_42;
          sub_10001AAC8((uint64_t *)&unk_10008F860);
          v37 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v36);
          v38 = v48;
          if (v37)
          {
            v39 = sub_10001D1D8();
            if ((v49 & 1) != (v40 & 1))
              goto LABEL_44;
            v38 = v39;
          }
          v3 = v61[0];
          if ((v49 & 1) != 0)
          {
            sub_10004DE4C(v55, *(_QWORD *)(v61[0] + 56) + v38 * v22);
          }
          else
          {
            sub_10001D2E4();
            sub_100033AD8(v55, v41);
            v42 = *(_QWORD *)(v3 + 16);
            v43 = __OFADD__(v42, 1);
            v44 = v42 + 1;
            if (v43)
              goto LABEL_43;
            *(_QWORD *)(v3 + 16) = v44;
            sub_100010644();
          }
          v22 = v57;
          sub_10000781C();
          sub_10001936C();
        }
      }
      else
      {
        sub_10000781C();
      }
    }
  }
  v25 = v24 + 1;
  if (__OFADD__(v24, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v25 >= v62)
    goto LABEL_38;
  ++v24;
  if (*(_QWORD *)(v58 + 8 * v25))
    goto LABEL_23;
  v24 = v25 + 1;
  if (v25 + 1 >= v62)
    goto LABEL_38;
  if (*(_QWORD *)(v58 + 8 * v24))
    goto LABEL_23;
  v24 = v25 + 2;
  if (v25 + 2 >= v62)
    goto LABEL_38;
  if (*(_QWORD *)(v58 + 8 * v24))
  {
LABEL_23:
    sub_100019B04();
    goto LABEL_24;
  }
  v26 = v25 + 3;
  if (v26 >= v62)
  {
LABEL_38:
    swift_bridgeObjectRelease(v53);
    sub_10000BDB4();
    v45 = v51;
    sub_10001CEBC();
    sub_10000AF70();
    *(_QWORD *)(v45 + 16) = v3;
    sub_100010678();
    goto LABEL_39;
  }
  if (*(_QWORD *)(v58 + 8 * v26))
  {
    v24 = v26;
    goto LABEL_23;
  }
  while (1)
  {
    v24 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v24 >= v62)
      goto LABEL_38;
    ++v26;
    if (*(_QWORD *)(v58 + 8 * v24))
      goto LABEL_23;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10004DE08@<X0>(uint64_t (*a1)(void)@<X6>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = a1();
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return result;
}

void sub_10004DE30()
{
  sub_10004DA50();
}

uint64_t sub_10004DE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004DE90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001AAC8(&qword_10008E740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10004DED8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008E7A0;
  if (!qword_10008E7A0)
  {
    v1 = sub_100027598(&qword_10008E798);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008E7A0);
  }
  return result;
}

uint64_t sub_10004DF1C(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

void sub_10004DF54(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  v3 = a2[3];
  a1[2] = a2[2];
  a1[3] = v3;
  swift_bridgeObjectRetain();
  sub_100018040();
  swift_bridgeObjectRetain();
  sub_100007840();
  sub_10000AF64();
}

void sub_10004DF98(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  sub_10000AF70();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  sub_10000AF70();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_10000AF70();
  v4 = a2[3];
  v5 = a1[3];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v5);
  sub_10000AF64();
}

void sub_10004E010(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v5);
  sub_10000BF94();
}

uint64_t sub_10004E060(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10004E0A0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for EventFilterMatcher()
{
  sub_10000B0C0();
}

uint64_t sub_10004E10C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10004E11C()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_10004E12C(uint64_t a1)
{
  uint64_t v1;

  return sub_100033A4C(a1, v1);
}

uint64_t sub_10004E134()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_10004E140()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10004D63C(v0, v1);
}

double sub_10004E160()
{
  uint64_t v0;

  return **(double **)(v0 - 232);
}

uint64_t sub_10004E188()
{
  return String.lowercased()()._countAndFlagsBits;
}

uint64_t sub_10004E194(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return *(_QWORD *)(v1 + 56) + *(_QWORD *)(*(_QWORD *)(v2 - 184) + 72) * a1;
}

uint64_t sub_10004E1BC(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t sub_10004E1EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v5 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *sub_10004E248(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  return a1;
}

__n128 sub_10004E2D4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10004E2E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t sub_10004E344(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 41))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10004E384(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for SessionConfiguration()
{
  sub_10000B0C0();
}

Swift::Int sub_10004E3DC(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return sub_10001C484();
}

Swift::Int sub_10004E41C()
{
  unsigned __int8 *v0;

  return sub_10004E3DC(*v0);
}

uint64_t sub_10004E424(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v8 | (v2 << 6); ; i = __clz(__rbit64(v11)) + (v2 << 6))
  {
    result = sub_10004E608(&v13, *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * i), &qword_10008FEF8, (uint64_t)&type metadata for Int);
    if (v6)
      goto LABEL_4;
LABEL_5:
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      return swift_release(v1);
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        return swift_release(v1);
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          return swift_release(v1);
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            return swift_release(v1);
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_20:
    v6 = (v11 - 1) & v11;
  }
  v12 = v10 + 4;
  if (v12 >= v7)
    return swift_release(v1);
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      return swift_release(v1);
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10004E590(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) > *(_QWORD *)(a2 + 16) >> 3)
    return sub_100051354(a1, a2);
  sub_1000511F0(a1);
  return (void *)a2;
}

uint64_t sub_10004E5E0(uint64_t *a1, uint64_t a2)
{
  return sub_10004E608(a1, a2, &qword_10008FEF8, (uint64_t)&type metadata for Int);
}

uint64_t sub_10004E5F4(uint64_t *a1, uint64_t a2)
{
  return sub_10004E608(a1, a2, &qword_10008FF00, (uint64_t)&type metadata for Int64);
}

uint64_t sub_10004E608(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;

  v7 = v4;
  v10 = *v4;
  v11 = static Hasher._hash(seed:_:)(*(_QWORD *)(v10 + 40), a2);
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v19 = *v7;
    *v7 = 0x8000000000000000;
    sub_10004F42C(a2, v13, isUniquelyReferenced_nonNull_native, a3, a4);
    v18 = *v7;
    *v7 = v19;
    swift_bridgeObjectRelease(v18);
    result = 1;
    goto LABEL_8;
  }
  v14 = *(_QWORD *)(v10 + 48);
  if (*(_QWORD *)(v14 + 8 * v13) != a2)
  {
    v15 = ~v12;
    do
    {
      v13 = (v13 + 1) & v15;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v14 + 8 * v13) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_10004E718(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  Swift::Int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30[9];
  uint64_t v31;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = sub_100014528();
    v9 = __CocoaSet.member(for:)(v8, v7);
    sub_10000AF94();
    if (v9)
    {
      sub_1000120B4();
      sub_10000AF94();
      v31 = v9;
      v10 = sub_100010408();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(v30, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v30[0];
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v24 = sub_10004E974(v7, result + 1);
    v30[0] = v24;
    v25 = *(_QWORD *)(v24 + 16);
    if (*(_QWORD *)(v24 + 24) <= v25)
    {
      v27 = v25 + 1;
      sub_100014528();
      sub_10004F08C(v27);
      v26 = v30[0];
    }
    else
    {
      v26 = v24;
      sub_100014528();
    }
    sub_10004F35C(a2, v26);
    v28 = *v3;
    *v3 = v26;
    swift_bridgeObjectRelease(v28);
    *a1 = a2;
  }
  else
  {
    Hasher.init(_seed:)(v30, *(_QWORD *)(v6 + 40));
    sub_100010408();
    sub_100051930();
    swift_bridgeObjectRetain();
    v11 = sub_10001A210();
    Hasher._combine(_:)(v11);
    v12 = Hasher._finalize()();
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    sub_10001D09C();
    if ((v15 & 1) != 0)
    {
      sub_10000A920();
      v16 = (uint64_t *)sub_10001DA24();
      sub_10001A210();
      sub_10001A438();
      if (v16 == v30)
      {
LABEL_12:
        sub_10000AF94();
        sub_1000120B4();
        v20 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v14);
        *a1 = v20;
        swift_retain(v20);
        return 0;
      }
      v17 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v17;
        sub_10001D09C();
        if ((v18 & 1) == 0)
          break;
        sub_10000A920();
        v19 = (uint64_t *)sub_10001DA24();
        sub_10001A210();
        sub_10001A438();
        if (v19 == v30)
          goto LABEL_12;
      }
    }
    sub_1000120B4();
    v22 = sub_10001D3E4();
    v30[0] = *v2;
    *v2 = 0x8000000000000000;
    v23 = sub_100014528();
    sub_10004F560(v23, v14, v22);
    sub_1000078C4(v30[0]);
    *a1 = a2;
  }
  return 1;
}

Swift::Int sub_10004E974(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::UInt v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[9];
  uint64_t v24;
  uint64_t v25;

  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  sub_10001AAC8((uint64_t *)&unk_100090AB0);
  v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
  v25 = v4;
  v5 = __CocoaSet.makeIterator()(a1);
  v6 = __CocoaSet.Iterator.next()();
  if (!v6)
  {
LABEL_16:
    swift_release(v5);
    return v4;
  }
  v7 = v6;
  v8 = type metadata accessor for Client();
  while (1)
  {
    v23[0] = v7;
    swift_dynamicCast(&v24, v23, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
    v4 = v25;
    v9 = *(_QWORD *)(v25 + 16);
    if (*(_QWORD *)(v25 + 24) <= v9)
    {
      sub_10004F08C(v9 + 1);
      v4 = v25;
    }
    v10 = v24;
    Hasher.init(_seed:)(v23, *(_QWORD *)(v4 + 40));
    v11 = sub_100051930();
    v12 = Identifiable<>.id.getter(v8, v11);
    Hasher._combine(_:)(v12);
    result = Hasher._finalize()();
    v14 = v4 + 56;
    v15 = -1 << *(_BYTE *)(v4 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v4 + 56 + 8 * (v16 >> 6))) == 0)
      break;
    v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 56 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v18) = v10;
    ++*(_QWORD *)(v4 + 16);
    v7 = __CocoaSet.Iterator.next()();
    if (!v7)
      goto LABEL_16;
  }
  v19 = 0;
  v20 = (unint64_t)(63 - v15) >> 6;
  while (++v17 != v20 || (v19 & 1) == 0)
  {
    v21 = v17 == v20;
    if (v17 == v20)
      v17 = 0;
    v19 |= v21;
    v22 = *(_QWORD *)(v14 + 8 * v17);
    if (v22 != -1)
    {
      v18 = __clz(__rbit64(~v22)) + (v17 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

Swift::Int sub_10004EB78(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001AAC8(&qword_10008FF08);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    if (!v9)
      goto LABEL_10;
LABEL_9:
    v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v20, v21);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          v28 = v24 == v27;
          if (v24 == v27)
            v24 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      v30 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v25);
      *v30 = v20;
      v30[1] = v21;
      ++*(_QWORD *)(v6 + 16);
      if (v9)
        goto LABEL_9;
LABEL_10:
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_41;
      if (v16 >= v10)
        goto LABEL_35;
      v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        v13 = v16 + 1;
        if (v16 + 1 >= v10)
          goto LABEL_35;
        v17 = v33[v13];
        if (!v17)
        {
          v13 = v16 + 2;
          if (v16 + 2 >= v10)
            goto LABEL_35;
          v17 = v33[v13];
          if (!v17)
          {
            v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release(v3);
              v2 = v32;
              v31 = 1 << *(_BYTE *)(v3 + 32);
              if (v31 > 63)
                sub_1000204B8(0, (unint64_t)(v31 + 63) >> 6, v33);
              else
                *v33 = -1 << v31;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_42;
                if (v13 >= v10)
                  goto LABEL_35;
                v17 = v33[v13];
                ++v18;
                if (v17)
                  goto LABEL_23;
              }
            }
            v13 = v18;
          }
        }
      }
LABEL_23:
      v9 = (v17 - 1) & v17;
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

void sub_10004EE50(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  sub_100012D18(a1, a2);
  v5 = static _SetStorage.resize(original:capacity:move:)(v4, v3, 1);
  v6 = v5;
  if (*(_QWORD *)(v4 + 16))
  {
    v7 = 0;
    v9 = (uint64_t *)(v4 + 56);
    v8 = *(_QWORD *)(v4 + 56);
    v10 = 1 << *(_BYTE *)(v4 + 32);
    v27 = -1 << v10;
    v28 = v2;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & v8;
    v29 = 1 << *(_BYTE *)(v4 + 32);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = v5 + 56;
    if ((v11 & v8) == 0)
      goto LABEL_7;
LABEL_6:
    v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    for (i = v15 | (v7 << 6); ; i = __clz(__rbit64(v18)) + (v7 << 6))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * i);
      v21 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20) & ~(-1 << *(_BYTE *)(v6 + 32));
      if (((-1 << v21) & ~*(_QWORD *)(v14 + 8 * (v21 >> 6))) == 0)
      {
        sub_1000154A4();
        while (++v24 != v25 || (v23 & 1) == 0)
        {
          v26 = v24 == v25;
          if (v24 == v25)
            v24 = 0;
          v23 |= v26;
          if (*(_QWORD *)(v14 + 8 * v24) != -1)
          {
            sub_100010894();
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return;
      }
      sub_10000B130();
LABEL_30:
      *(_QWORD *)(v14 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v22) = v20;
      ++*(_QWORD *)(v6 + 16);
      if (v12)
        goto LABEL_6;
LABEL_7:
      v17 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_38;
      if (v17 >= v13)
        goto LABEL_32;
      v18 = v9[v17];
      ++v7;
      if (!v18)
      {
        v7 = v17 + 1;
        if (v17 + 1 >= v13)
          goto LABEL_32;
        v18 = v9[v7];
        if (!v18)
        {
          v7 = v17 + 2;
          if (v17 + 2 >= v13)
            goto LABEL_32;
          v18 = v9[v7];
          if (!v18)
          {
            v19 = v17 + 3;
            if (v19 >= v13)
            {
LABEL_32:
              if (v29 > 63)
                sub_1000204B8(0, v13, (_QWORD *)(v4 + 56));
              else
                *v9 = v27;
              v2 = v28;
              *(_QWORD *)(v4 + 16) = 0;
              break;
            }
            v18 = v9[v19];
            if (!v18)
            {
              while (1)
              {
                v7 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_39;
                if (v7 >= v13)
                  goto LABEL_32;
                v18 = v9[v7];
                ++v19;
                if (v18)
                  goto LABEL_20;
              }
            }
            v7 = v19;
          }
        }
      }
LABEL_20:
      v12 = (v18 - 1) & v18;
    }
  }
  sub_10000AF94();
  *v2 = v6;
}

Swift::Int sub_10004F08C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001AAC8((uint64_t *)&unk_100090AB0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v33 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain(v3);
    v14 = 0;
    if (!v10)
      goto LABEL_10;
LABEL_9:
    v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * i);
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      v21 = type metadata accessor for Client();
      v22 = sub_100051930();
      v23 = Identifiable<>.id.getter(v21, v22);
      Hasher._combine(_:)(v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) == 0)
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v24) >> 6;
        while (++v26 != v29 || (v28 & 1) == 0)
        {
          v30 = v26 == v29;
          if (v26 == v29)
            v26 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v26);
          if (v31 != -1)
          {
            v27 = __clz(__rbit64(~v31)) + (v26 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
      v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v12 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v27) = v20;
      ++*(_QWORD *)(v6 + 16);
      if (v10)
        goto LABEL_9;
LABEL_10:
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_41;
      if (v17 >= v11)
        goto LABEL_35;
      v18 = v8[v17];
      ++v14;
      if (!v18)
      {
        v14 = v17 + 1;
        if (v17 + 1 >= v11)
          goto LABEL_35;
        v18 = v8[v14];
        if (!v18)
        {
          v14 = v17 + 2;
          if (v17 + 2 >= v11)
            goto LABEL_35;
          v18 = v8[v14];
          if (!v18)
          {
            v19 = v17 + 3;
            if (v19 >= v11)
            {
LABEL_35:
              swift_release(v3);
              v2 = v33;
              v32 = 1 << *(_BYTE *)(v3 + 32);
              if (v32 > 63)
                sub_1000204B8(0, (unint64_t)(v32 + 63) >> 6, (_QWORD *)(v3 + 56));
              else
                *v8 = -1 << v32;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v18 = v8[v19];
            if (!v18)
            {
              while (1)
              {
                v14 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_42;
                if (v14 >= v11)
                  goto LABEL_35;
                v18 = v8[v14];
                ++v19;
                if (v18)
                  goto LABEL_23;
              }
            }
            v14 = v19;
          }
        }
      }
LABEL_23:
      v10 = (v18 - 1) & v18;
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

unint64_t sub_10004F35C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  Swift::UInt v6;
  Swift::Int v7;
  unint64_t result;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9, *(_QWORD *)(a2 + 40));
  v4 = type metadata accessor for Client();
  v5 = sub_100051930();
  v6 = Identifiable<>.id.getter(v4, v5);
  Hasher._combine(_:)(v6);
  v7 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v7 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void sub_10004F418(uint64_t a1, unint64_t a2, char a3)
{
  sub_10004F42C(a1, a2, a3, &qword_10008FEF8, (uint64_t)&type metadata for Int);
}

void sub_10004F42C(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v9 = *(_QWORD *)(*v5 + 16);
  v10 = *(_QWORD *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0)
    goto LABEL_14;
  v11 = v9 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10004EE50(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      sub_10004F8FC(a4);
      goto LABEL_14;
    }
    sub_10004FECC(v11, a4);
  }
  v12 = *v5;
  v13 = static Hasher._hash(seed:_:)(*(_QWORD *)(*v5 + 40), a1);
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    if (*(_QWORD *)(v15 + 8 * a2) == a1)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(a5);
      __break(1u);
    }
    else
    {
      v16 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v15 + 8 * a2) == a1)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v17 = *v5;
  *(_QWORD *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * a2) = a1;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    *(_QWORD *)(v17 + 16) = v20;
}

uint64_t sub_10004F560(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::UInt v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD v26[9];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10004F08C(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_10004FA7C();
      goto LABEL_14;
    }
    sub_1000500E0(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v26, *(_QWORD *)(*v3 + 40));
  v10 = type metadata accessor for Client();
  v11 = sub_100051930();
  v12 = Identifiable<>.id.getter(v10, v11);
  Hasher._combine(_:)(v12);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v13;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * a2);
    swift_retain(v14);
    v15 = Identifiable<>.id.getter(v10, v11);
    v16 = Identifiable<>.id.getter(v10, v11);
    result = swift_release(v14);
    if (v15 == v16)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
      __break(1u);
    }
    else
    {
      v17 = ~v13;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v18 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * a2);
        swift_retain(v18);
        v19 = Identifiable<>.id.getter(v10, v11);
        v20 = Identifiable<>.id.getter(v10, v11);
        result = swift_release(v18);
        if (v19 == v20)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v21 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v21 + 48) + 8 * a2) = v5;
  v22 = *(_QWORD *)(v21 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v21 + 16) = v24;
  return result;
}

void *sub_10004F74C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0;
  sub_10001AAC8(&qword_10008FF08);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v21 = v20[1];
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * i);
    *v22 = *v20;
    v22[1] = v21;
    result = (void *)swift_bridgeObjectRetain(v21);
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_10004F8FC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  sub_10001AAC8(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    sub_10000AF94();
    *v2 = v5;
    sub_10000AF64();
    return;
  }
  v6 = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 56 + 8 * v8)
    memmove(v6, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  if (!v13)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v10 << 6); ; i = __clz(__rbit64(v18)) + (v10 << 6))
  {
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * i) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * i);
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v7 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void *sub_10004FA7C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v1 = v0;
  sub_10001AAC8((uint64_t *)&unk_100090AB0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * i) = v20;
    result = (void *)swift_retain(v20);
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_10004FC24(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001AAC8(&qword_10008FF08);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_37:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  if (!v10)
    goto LABEL_10;
LABEL_9:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v33, v20, v21);
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v25);
    *v30 = v20;
    v30[1] = v21;
    ++*(_QWORD *)(v6 + 16);
    if (v10)
      goto LABEL_9;
LABEL_10:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_39;
    if (v16 >= v32)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v32)
        goto LABEL_35;
      v17 = *(_QWORD *)(v8 + 8 * v13);
      if (!v17)
      {
        v13 = v16 + 2;
        if (v16 + 2 >= v32)
          goto LABEL_35;
        v17 = *(_QWORD *)(v8 + 8 * v13);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v10 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v32)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_10004FECC(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t *v26;

  sub_100012D18(a1, a2);
  v5 = static _SetStorage.resize(original:capacity:move:)(v4, v3, 0);
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
    sub_10000AF94();
LABEL_34:
    *v2 = v6;
    return;
  }
  v26 = v2;
  v7 = 0;
  v8 = v4 + 56;
  v9 = 1 << *(_BYTE *)(v4 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v4 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v5 + 56;
  if (!v11)
    goto LABEL_7;
LABEL_6:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v7 << 6); ; i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * i);
    v20 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v19) & ~(-1 << *(_BYTE *)(v6 + 32));
    if (((-1 << v20) & ~*(_QWORD *)(v13 + 8 * (v20 >> 6))) == 0)
    {
      sub_1000154A4();
      while (++v23 != v24 || (v22 & 1) == 0)
      {
        v25 = v23 == v24;
        if (v23 == v24)
          v23 = 0;
        v22 |= v25;
        if (*(_QWORD *)(v13 + 8 * v23) != -1)
        {
          sub_100010894();
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    sub_10000B130();
LABEL_30:
    *(_QWORD *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v21) = v19;
    ++*(_QWORD *)(v6 + 16);
    if (v11)
      goto LABEL_6;
LABEL_7:
    v16 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_36;
    if (v16 >= v12)
      goto LABEL_32;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v7;
    if (!v17)
    {
      v7 = v16 + 1;
      if (v16 + 1 >= v12)
        goto LABEL_32;
      v17 = *(_QWORD *)(v8 + 8 * v7);
      if (!v17)
      {
        v7 = v16 + 2;
        if (v16 + 2 >= v12)
          goto LABEL_32;
        v17 = *(_QWORD *)(v8 + 8 * v7);
        if (!v17)
          break;
      }
    }
LABEL_20:
    v11 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v12)
  {
LABEL_32:
    sub_10000AF94();
    v2 = v26;
    goto LABEL_34;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v7 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v12)
      goto LABEL_32;
    v17 = *(_QWORD *)(v8 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
}

Swift::Int sub_1000500E0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  Swift::UInt v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001AAC8((uint64_t *)&unk_100090AB0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_37:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  if (!v10)
    goto LABEL_10;
LABEL_9:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * i);
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    v20 = type metadata accessor for Client();
    v21 = sub_100051930();
    swift_retain(v19);
    v22 = Identifiable<>.id.getter(v20, v21);
    Hasher._combine(_:)(v22);
    result = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6))) == 0)
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v28 || (v27 & 1) == 0)
      {
        v29 = v25 == v28;
        if (v25 == v28)
          v25 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v25);
        if (v30 != -1)
        {
          v26 = __clz(__rbit64(~v30)) + (v25 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v26 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v26) = v19;
    ++*(_QWORD *)(v6 + 16);
    if (v10)
      goto LABEL_9;
LABEL_10:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_39;
    if (v16 >= v32)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v32)
        goto LABEL_35;
      v17 = *(_QWORD *)(v8 + 8 * v13);
      if (!v17)
      {
        v13 = v16 + 2;
        if (v16 + 2 >= v32)
          goto LABEL_35;
        v17 = *(_QWORD *)(v8 + 8 * v13);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v10 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v32)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10005039C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SessionConfiguration.Backend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000503E0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = *v2;
  v5 = static Hasher._hash(seed:_:)(*(_QWORD *)(*v2 + 40), a1);
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v8 + 8 * v7) != a1)
  {
    v9 = ~v6;
    do
    {
      v7 = (v7 + 1) & v9;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v8 + 8 * v7) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v11 = *v2;
  v15 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10004F8FC(&qword_10008FEF8);
    v11 = v15;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
  sub_10005089C(v7);
  v13 = *v2;
  *v2 = v15;
  swift_bridgeObjectRelease(v13);
  return v12;
}

uint64_t sub_1000504F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  _QWORD v22[9];

  v4 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
  {
    sub_10001CFD8(*(_QWORD *)(v4 + 40), a2);
    sub_100010408();
    sub_100051930();
    swift_bridgeObjectRetain(v4);
    v10 = sub_10001CD08();
    Hasher._combine(_:)(v10);
    v11 = sub_10001C484();
    v12 = -1 << *(_BYTE *)(v4 + 32);
    v13 = v11 & ~v12;
    sub_10001114C();
    if ((v14 & 1) != 0)
    {
      sub_1000105E4();
      v15 = (_QWORD *)sub_10001B40C();
      sub_10001CD08();
      sub_10001FF44();
      if (v15 == v22)
      {
LABEL_12:
        swift_bridgeObjectRelease(v4);
        sub_10001D3E4();
        sub_100010E2C();
        if (!v20)
        {
          sub_10004FA7C();
          v19 = v22[0];
        }
        v8 = *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * v13);
        sub_100050A14(v13);
        v9 = *v2;
        *v2 = v22[0];
        goto LABEL_15;
      }
      v16 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v16;
        sub_10001114C();
        if ((v17 & 1) == 0)
          break;
        sub_1000105E4();
        v18 = (_QWORD *)sub_10001B40C();
        sub_10001CD08();
        sub_10001FF44();
        if (v18 == v22)
          goto LABEL_12;
      }
    }
LABEL_16:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (v4 < 0)
    v5 = *v2;
  else
    v5 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v6 = swift_retain(a1);
  v7 = __CocoaSet.contains(_:)(v6, v5);
  swift_release(a1);
  if ((v7 & 1) == 0)
    goto LABEL_16;
  v8 = sub_100050690(v5);
  v9 = v4;
LABEL_15:
  swift_bridgeObjectRelease(v9);
  return v8;
}

uint64_t sub_100050690(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  unint64_t v7;
  Swift::UInt v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  Swift::Int *v21;
  uint64_t v22[9];
  Swift::Int v23;

  swift_bridgeObjectRelease(*v1);
  v3 = __CocoaSet.count.getter(a1);
  v4 = swift_unknownObjectRetain(a1);
  v5 = sub_10004E974(v4, v3);
  v23 = v5;
  Hasher.init(_seed:)(v22, *(_QWORD *)(v5 + 40));
  v6 = type metadata accessor for Client();
  v7 = sub_100051930();
  swift_retain(v5);
  v8 = Identifiable<>.id.getter(v6, v7);
  Hasher._combine(_:)(v8);
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v5 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v5 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v11);
    swift_retain(v12);
    v13 = Identifiable<>.id.getter(v6, v7);
    v14 = Identifiable<>.id.getter(v6, v7);
    swift_release(v12);
    if (v13 == v14)
    {
LABEL_6:
      swift_release(v5);
      v5 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v11);
      sub_100050A14(v11);
      v19 = Identifiable<>.id.getter(v6, v7);
      if (v19 == Identifiable<>.id.getter(v6, v7))
      {
        *v21 = v23;
        return v5;
      }
      __break(1u);
    }
    else
    {
      v15 = ~v10;
      while (1)
      {
        v11 = (v11 + 1) & v15;
        if (((*(_QWORD *)(v5 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
          break;
        v16 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v11);
        swift_retain(v16);
        v17 = Identifiable<>.id.getter(v6, v7);
        v18 = Identifiable<>.id.getter(v6, v7);
        swift_release(v16);
        if (v17 == v18)
          goto LABEL_6;
      }
    }
    swift_release(v5);
    __break(1u);
  }
  result = swift_release(v5);
  __break(1u);
  return result;
}

unint64_t sub_10005089C(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(v3);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        v12 = static Hasher._hash(seed:_:)(*(_QWORD *)(v3 + 40), *v11) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_15:
            v15 = (_QWORD *)(v10 + 8 * v2);
            v16 = v2 != v6 || v15 >= v11 + 1;
            v2 = v6;
            if (v16)
            {
              *v15 = *v11;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v17 = *(_QWORD *)(v3 + 16);
  v18 = __OFSUB__(v17, 1);
  v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v19;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_100050A14(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::UInt v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v25, *(_QWORD *)(v3 + 40));
        v11 = type metadata accessor for Client();
        v12 = sub_100051930();
        swift_retain(v10);
        v13 = Identifiable<>.id.getter(v11, v12);
        Hasher._combine(_:)(v13);
        v14 = Hasher._finalize()();
        swift_release(v10);
        v15 = v14 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v15 >= v9 && v2 >= v15)
          {
LABEL_15:
            v18 = *(_QWORD *)(v3 + 48);
            v19 = (_QWORD *)(v18 + 8 * v2);
            v20 = (_QWORD *)(v18 + 8 * v6);
            v21 = v2 != v6 || v19 >= v20 + 1;
            v2 = v6;
            if (v21)
            {
              *v19 = *v20;
              v2 = v6;
            }
          }
        }
        else if (v15 >= v9 || v2 >= v15)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v22 = *(_QWORD *)(v3 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v24;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_100050BEC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  unint64_t v26;
  BOOL v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v45;
  unint64_t *v46;

  v46 = (unint64_t *)result;
  v6 = 0;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v7 = 0;
    v8 = a4 + 56;
    v9 = 1 << *(_BYTE *)(a4 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(a4 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = a3 + 56;
    while (1)
    {
LABEL_6:
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v7 << 6);
      }
      else
      {
        v16 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        if (v16 >= v12)
          goto LABEL_56;
        v17 = *(_QWORD *)(v8 + 8 * v16);
        ++v7;
        if (!v17)
        {
          v7 = v16 + 1;
          if (v16 + 1 >= v12)
            goto LABEL_56;
          v17 = *(_QWORD *)(v8 + 8 * v7);
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v12)
            {
LABEL_56:
              swift_retain(a3);
              return sub_100050FB4(v46, a2, v6, a3);
            }
            v17 = *(_QWORD *)(v8 + 8 * v18);
            if (!v17)
            {
              while (1)
              {
                v7 = v18 + 1;
                if (__OFADD__(v18, 1))
                  break;
                if (v7 >= v12)
                  goto LABEL_56;
                v17 = *(_QWORD *)(v8 + 8 * v7);
                ++v18;
                if (v17)
                  goto LABEL_19;
              }
LABEL_59:
              __break(1u);
              goto LABEL_60;
            }
            v7 = v18;
          }
        }
LABEL_19:
        v11 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v7 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v15);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(a3 + 40), v19);
      v20 = -1 << *(_BYTE *)(a3 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      v23 = 1 << v21;
      if (((1 << v21) & *(_QWORD *)(v13 + 8 * (v21 >> 6))) != 0)
      {
        v24 = *(_QWORD *)(a3 + 48);
        if (*(_QWORD *)(v24 + 8 * v21) != v19)
        {
          for (i = v21 + 1; ; i = v26 + 1)
          {
            v26 = i & ~v20;
            if (((*(_QWORD *)(v13 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
              goto LABEL_6;
            if (*(_QWORD *)(v24 + 8 * v26) == v19)
              break;
          }
          v22 = v26 >> 6;
          v23 = 1 << v26;
        }
        v46[v22] |= v23;
        v27 = __OFADD__(v6++, 1);
        if (v27)
          break;
      }
    }
    __break(1u);
  }
  v28 = 0;
  v29 = a3 + 56;
  v30 = 1 << *(_BYTE *)(a3 + 32);
  if (v30 < 64)
    v31 = ~(-1 << v30);
  else
    v31 = -1;
  v32 = v31 & *(_QWORD *)(a3 + 56);
  v45 = (unint64_t)(v30 + 63) >> 6;
  v33 = a4 + 56;
  while (v32)
  {
    v34 = __clz(__rbit64(v32));
    v32 &= v32 - 1;
    v35 = v34 | (v28 << 6);
LABEL_48:
    v39 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v35);
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(a4 + 40), v39);
    v40 = -1 << *(_BYTE *)(a4 + 32);
    v41 = result & ~v40;
    if (((*(_QWORD *)(v33 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) != 0)
    {
      v42 = *(_QWORD *)(a4 + 48);
      if (*(_QWORD *)(v42 + 8 * v41) == v39)
      {
LABEL_53:
        *(unint64_t *)((char *)v46 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
        v27 = __OFADD__(v6++, 1);
        if (v27)
        {
          __break(1u);
          goto LABEL_56;
        }
      }
      else
      {
        v43 = ~v40;
        while (1)
        {
          v41 = (v41 + 1) & v43;
          if (((*(_QWORD *)(v33 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) == 0)
            break;
          if (*(_QWORD *)(v42 + 8 * v41) == v39)
            goto LABEL_53;
        }
      }
    }
  }
  v36 = v28 + 1;
  if (__OFADD__(v28, 1))
    goto LABEL_58;
  if (v36 >= v45)
    goto LABEL_56;
  v37 = *(_QWORD *)(v29 + 8 * v36);
  ++v28;
  if (v37)
    goto LABEL_47;
  v28 = v36 + 1;
  if (v36 + 1 >= v45)
    goto LABEL_56;
  v37 = *(_QWORD *)(v29 + 8 * v28);
  if (v37)
  {
LABEL_47:
    v32 = (v37 - 1) & v37;
    v35 = __clz(__rbit64(v37)) + (v28 << 6);
    goto LABEL_48;
  }
  v38 = v36 + 2;
  if (v38 >= v45)
    goto LABEL_56;
  v37 = *(_QWORD *)(v29 + 8 * v38);
  if (v37)
  {
    v28 = v38;
    goto LABEL_47;
  }
  while (1)
  {
    v28 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v28 >= v45)
      goto LABEL_56;
    v37 = *(_QWORD *)(v29 + 8 * v28);
    ++v38;
    if (v37)
      goto LABEL_47;
  }
LABEL_60:
  __break(1u);
  return result;
}

uint64_t sub_100050F70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SessionConfiguration.BackendHTTP(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100050FB4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release(v4);
    return (uint64_t)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_10001AAC8(&qword_10008FEF8);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)result;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_35;
    v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_35;
      v16 = a1[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_35;
        v16 = a1[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = static Hasher._hash(seed:_:)(v9[5], v18);
    v19 = -1 << *((_BYTE *)v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) == 0)
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      while (++v21 != v24 || (v23 & 1) == 0)
      {
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
        if (v26 != -1)
        {
          v22 = __clz(__rbit64(~v26)) + (v21 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(v9[6] + 8 * v22) = v18;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
      goto LABEL_38;
    if (!v5)
      goto LABEL_35;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_35;
  v16 = a1[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_35;
    v16 = a1[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_1000511F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  if (!v6)
    goto LABEL_6;
LABEL_5:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    sub_1000503E0(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i));
    if (v6)
      goto LABEL_5;
LABEL_6:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_24;
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          goto LABEL_24;
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            goto LABEL_24;
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_21:
    v6 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v7)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
}

void *sub_100051354(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t isStackAllocationSafe;
  __n128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[2];
  uint64_t v35[5];

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = 0;
    v6 = a1 + 56;
    v5 = *(_QWORD *)(a1 + 56);
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v34[0] = ~v7;
    if (-v7 < 64)
      v8 = ~(-1 << -(char)v7);
    else
      v8 = -1;
    v9 = v8 & v5;
    v10 = (unint64_t)(63 - v7) >> 6;
    v11 = a2 + 56;
    while (1)
    {
      do
      {
        if (v9)
        {
          v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          v13 = v12 | (v4 << 6);
        }
        else
        {
          v14 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
            __break(1u);
            goto LABEL_36;
          }
          if (v14 >= v10)
            goto LABEL_33;
          v15 = *(_QWORD *)(v6 + 8 * v14);
          v16 = v4 + 1;
          if (!v15)
          {
            v16 = v4 + 2;
            if (v4 + 2 >= v10)
              goto LABEL_33;
            v15 = *(_QWORD *)(v6 + 8 * v16);
            if (!v15)
            {
              v16 = v4 + 3;
              if (v4 + 3 >= v10)
                goto LABEL_33;
              v15 = *(_QWORD *)(v6 + 8 * v16);
              if (!v15)
              {
                v16 = v4 + 4;
                if (v4 + 4 >= v10)
                  goto LABEL_33;
                v15 = *(_QWORD *)(v6 + 8 * v16);
                if (!v15)
                {
                  v17 = v4 + 5;
                  if (v4 + 5 >= v10)
                  {
LABEL_33:
                    swift_bridgeObjectRetain(a1);
                    sub_100051928(v32);
                    return (void *)v2;
                  }
                  v15 = *(_QWORD *)(v6 + 8 * v17);
                  if (!v15)
                  {
                    while (1)
                    {
                      v16 = v17 + 1;
                      if (__OFADD__(v17, 1))
                        break;
                      if (v16 >= v10)
                        goto LABEL_33;
                      v15 = *(_QWORD *)(v6 + 8 * v16);
                      ++v17;
                      if (v15)
                        goto LABEL_23;
                    }
LABEL_36:
                    __break(1u);
                  }
                  v16 = v4 + 5;
                }
              }
            }
          }
LABEL_23:
          v9 = (v15 - 1) & v15;
          v13 = __clz(__rbit64(v15)) + (v16 << 6);
          v4 = v16;
        }
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v13);
        v19 = static Hasher._hash(seed:_:)(*(_QWORD *)(v2 + 40), v18);
        v20 = -1 << *(_BYTE *)(v2 + 32);
        v21 = v19 & ~v20;
      }
      while (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0);
      v22 = *(_QWORD *)(v2 + 48);
      if (*(_QWORD *)(v22 + 8 * v21) == v18)
        break;
      while (1)
      {
        v21 = (v21 + 1) & ~v20;
        if (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        if (*(_QWORD *)(v22 + 8 * v21) == v18)
          goto LABEL_28;
      }
    }
LABEL_28:
    v35[0] = a1;
    v35[1] = v6;
    v35[2] = v34[0];
    v35[3] = v4;
    v35[4] = v9;
    v23 = (unint64_t)(63 - v20) >> 6;
    v24 = 8 * v23;
    v26 = swift_bridgeObjectRetain(a1);
    if (v23 < 0x81
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v24, 8, v26), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      v28 = (char *)v34 - v27;
      memcpy((char *)v34 - v27, (const void *)(v2 + 56), v24);
      v29 = sub_1000516F0((uint64_t)v28, v23, v2, v21, v35);
      swift_release(v2);
      sub_100051928(v35[0]);
      return (void *)v29;
    }
    else
    {
      v30 = (void *)swift_slowAlloc(v24, -1);
      memcpy(v30, (const void *)(v2 + 56), v24);
      v31 = sub_1000516F0((uint64_t)v30, v23, v2, v21, v35);
      swift_release(v2);
      sub_100051928(v35[0]);
      swift_slowDealloc(v30, -1, -1);
      return (void *)v31;
    }
  }
  else
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
}

uint64_t sub_1000516F0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t i;
  unint64_t v29;
  unint64_t v30;

  v8 = (unint64_t *)result;
  v9 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v10 = v9 - 1;
  v11 = a3 + 56;
  while (1)
  {
    v12 = a5[3];
    v13 = a5[4];
    if (!v13)
      break;
    v14 = (v13 - 1) & v13;
    v15 = __clz(__rbit64(v13)) | (v12 << 6);
LABEL_20:
    v22 = *(_QWORD *)(*(_QWORD *)(*a5 + 48) + 8 * v15);
    a5[3] = v12;
    a5[4] = v14;
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(a3 + 40), v22);
    v23 = -1 << *(_BYTE *)(a3 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    v26 = 1 << v24;
    if (((1 << v24) & *(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      v27 = *(_QWORD *)(a3 + 48);
      if (*(_QWORD *)(v27 + 8 * v24) == v22)
      {
LABEL_27:
        v30 = v8[v25];
        v8[v25] = v30 & ~v26;
        if ((v26 & v30) != 0)
        {
          if (__OFSUB__(v10--, 1))
            goto LABEL_34;
          if (!v10)
            return (uint64_t)&_swiftEmptySetSingleton;
        }
      }
      else
      {
        for (i = v24 + 1; ; i = v29 + 1)
        {
          v29 = i & ~v23;
          if (((*(_QWORD *)(v11 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
            break;
          if (*(_QWORD *)(v27 + 8 * v29) == v22)
          {
            v25 = v29 >> 6;
            v26 = 1 << v29;
            goto LABEL_27;
          }
        }
      }
    }
  }
  v16 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    v17 = (unint64_t)(a5[2] + 64) >> 6;
    v18 = a5[3];
    if (v16 >= v17)
      goto LABEL_32;
    v19 = a5[1];
    v20 = *(_QWORD *)(v19 + 8 * v16);
    if (!v20)
    {
      v18 = v12 + 1;
      if (v12 + 2 >= v17)
        goto LABEL_32;
      v20 = *(_QWORD *)(v19 + 8 * (v12 + 2));
      if (v20)
      {
        v16 = v12 + 2;
      }
      else
      {
        v18 = v12 + 2;
        if (v12 + 3 >= v17)
          goto LABEL_32;
        v20 = *(_QWORD *)(v19 + 8 * (v12 + 3));
        if (v20)
        {
          v16 = v12 + 3;
        }
        else
        {
          v16 = v12 + 4;
          v18 = v12 + 3;
          if (v12 + 4 >= v17)
            goto LABEL_32;
          v20 = *(_QWORD *)(v19 + 8 * v16);
          if (!v20)
          {
            v21 = v12 + 5;
            while (v21 < v17)
            {
              v20 = *(_QWORD *)(v19 + 8 * v21++);
              if (v20)
              {
                v16 = v21 - 1;
                goto LABEL_19;
              }
            }
            v18 = v17 - 1;
LABEL_32:
            a5[3] = v18;
            a5[4] = 0;
            swift_retain(a3);
            return sub_100050FB4(v8, a2, v10, a3);
          }
        }
      }
    }
LABEL_19:
    v14 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v16 << 6);
    v12 = v16;
    goto LABEL_20;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_100051928(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

unint64_t sub_100051930()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008EBC8;
  if (!qword_10008EBC8)
  {
    v1 = type metadata accessor for Client();
    result = swift_getWitnessTable(&unk_10006DC6C, v1);
    atomic_store(result, &qword_10008EBC8);
  }
  return result;
}

uint64_t sub_100051970(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000519BC + 4 * byte_10006F835[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000519F0 + 4 * asc_10006F830[v4]))();
}

uint64_t sub_1000519F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000519F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100051A00);
  return result;
}

uint64_t sub_100051A0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100051A14);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100051A18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100051A20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for SessionConfiguration.Availability()
{
  sub_10000B0C0();
}

_QWORD *sub_100051A38(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    v8 = a3[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = a3[7];
    v14 = a3[8];
    v15 = *(_QWORD *)((char *)a2 + v13);
    *(_QWORD *)((char *)v4 + v13) = v15;
    *((_BYTE *)v4 + v14) = *((_BYTE *)a2 + v14);
    v16 = a3[9];
    v17 = a3[10];
    v18 = *(_QWORD *)((char *)a2 + v16);
    *(_QWORD *)((char *)v4 + v16) = v18;
    v19 = *(_QWORD *)((char *)a2 + v17);
    *(_QWORD *)((char *)v4 + v17) = v19;
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
  }
  return v4;
}

uint64_t sub_100051B34(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10]));
}

_QWORD *sub_100051BA8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[7];
  v13 = a3[8];
  v14 = *(_QWORD *)((char *)a2 + v12);
  *(_QWORD *)((char *)a1 + v12) = v14;
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  v15 = a3[9];
  v16 = a3[10];
  v17 = *(_QWORD *)((char *)a2 + v15);
  *(_QWORD *)((char *)a1 + v15) = v17;
  v18 = *(_QWORD *)((char *)a2 + v16);
  *(_QWORD *)((char *)a1 + v16) = v18;
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  return a1;
}

_QWORD *sub_100051C78(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[7];
  v13 = *(_QWORD *)((char *)a2 + v12);
  v14 = *(_QWORD *)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v15 = a3[9];
  v16 = *(_QWORD *)((char *)a2 + v15);
  v17 = *(_QWORD *)((char *)a1 + v15);
  *(_QWORD *)((char *)a1 + v15) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a3[10];
  v19 = *(_QWORD *)((char *)a2 + v18);
  v20 = *(_QWORD *)((char *)a1 + v18);
  *(_QWORD *)((char *)a1 + v18) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

uint64_t sub_100051D70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  return a1;
}

_QWORD *sub_100051E18(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  v13 = *(_QWORD *)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  swift_bridgeObjectRelease(v13);
  v14 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v15 = *(_QWORD *)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  swift_bridgeObjectRelease(v15);
  v16 = a3[10];
  v17 = *(_QWORD *)((char *)a1 + v16);
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  swift_bridgeObjectRelease(v17);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

uint64_t sub_100051EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100051EF0);
}

uint64_t sub_100051EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for URL(0);
    return _s10RTCUtility9XPCObjectOwet_0(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_100051F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100051F70);
}

void sub_100051F70(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    sub_10000AF64();
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    _s10RTCUtility9XPCObjectOwst_0(a1 + *(int *)(a4 + 24), a2, a2, v7);
  }
}

uint64_t sub_100051FD4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_10006F890;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = &unk_10006F8A8;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[7] = &unk_10006F8A8;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_100052070(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t, __n128);
  __n128 v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      v8 = a2[2];
      a1[1] = a2[1];
      a1[2] = v8;
      v10 = a2[3];
      v9 = a2[4];
      a1[3] = v10;
      a1[4] = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11 = a1;
      v12 = a3;
      v13 = 1;
    }
    else
    {
      v15 = a2[2];
      a1[1] = a2[1];
      a1[2] = v15;
      v16 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0);
      v17 = v16[6];
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = type metadata accessor for URL(0);
      v21 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v20 - 8) + 16);
      v22 = swift_bridgeObjectRetain();
      v21(v18, v19, v20, v22);
      *(_QWORD *)((char *)a1 + v16[7]) = *(_QWORD *)((char *)a2 + v16[7]);
      *((_BYTE *)a1 + v16[8]) = *((_BYTE *)a2 + v16[8]);
      *(_QWORD *)((char *)a1 + v16[9]) = *(_QWORD *)((char *)a2 + v16[9]);
      *(_QWORD *)((char *)a1 + v16[10]) = *(_QWORD *)((char *)a2 + v16[10]);
      *((_BYTE *)a1 + v16[11]) = *((_BYTE *)a2 + v16[11]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11 = a1;
      v12 = a3;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_1000521E8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  int *v4;
  char *v5;
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    swift_bridgeObjectRelease(a1[1]);
    swift_bridgeObjectRelease(a1[2]);
    swift_bridgeObjectRelease(a1[3]);
    v3 = a1 + 4;
  }
  else
  {
    swift_bridgeObjectRelease(a1[1]);
    v4 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0);
    v5 = (char *)a1 + v4[6];
    v6 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v4[7]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v4[9]));
    v3 = (_QWORD *)((char *)a1 + v4[10]);
  }
  return swift_bridgeObjectRelease(*v3);
}

_QWORD *sub_100052294(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t, __n128);
  __n128 v17;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    v8 = a2[4];
    a1[3] = a2[3];
    a1[4] = v8;
    swift_bridgeObjectRetain();
    v9 = 1;
  }
  else
  {
    v10 = a2[2];
    a1[1] = a2[1];
    a1[2] = v10;
    v11 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0);
    v12 = v11[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for URL(0);
    v16 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v15 - 8) + 16);
    v17 = swift_bridgeObjectRetain();
    v16(v13, v14, v15, v17);
    v9 = 0;
    *(_QWORD *)((char *)a1 + v11[7]) = *(_QWORD *)((char *)a2 + v11[7]);
    *((_BYTE *)a1 + v11[8]) = *((_BYTE *)a2 + v11[8]);
    *(_QWORD *)((char *)a1 + v11[9]) = *(_QWORD *)((char *)a2 + v11[9]);
    *(_QWORD *)((char *)a1 + v11[10]) = *(_QWORD *)((char *)a2 + v11[10]);
    *((_BYTE *)a1 + v11[11]) = *((_BYTE *)a2 + v11[11]);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload(a1, a3, v9);
  return a1;
}

_QWORD *sub_1000523C8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t, __n128);
  __n128 v14;

  if (a1 != a2)
  {
    sub_10003D6E8((uint64_t)a1, type metadata accessor for SessionConfiguration.Backend);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    if (EnumCaseMultiPayload == 1)
    {
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      v7 = 1;
    }
    else
    {
      v8 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0);
      v9 = v8[6];
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for URL(0);
      v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
      v14 = swift_bridgeObjectRetain();
      v13(v10, v11, v12, v14);
      v7 = 0;
      *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
      *((_BYTE *)a1 + v8[8]) = *((_BYTE *)a2 + v8[8]);
      *(_QWORD *)((char *)a1 + v8[9]) = *(_QWORD *)((char *)a2 + v8[9]);
      *(_QWORD *)((char *)a1 + v8[10]) = *(_QWORD *)((char *)a2 + v8[10]);
      *((_BYTE *)a1 + v8[11]) = *((_BYTE *)a2 + v8[11]);
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload(a1, a3, v7);
  }
  return a1;
}

_QWORD *sub_10005252C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v6 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0);
    v7 = v6[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
    *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
    *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
    *(_QWORD *)((char *)a1 + v6[10]) = *(_QWORD *)((char *)a2 + v6[10]);
    *((_BYTE *)a1 + v6[11]) = *((_BYTE *)a2 + v6[11]);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

_QWORD *sub_100052620(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_10003D6E8((uint64_t)a1, type metadata accessor for SessionConfiguration.Backend);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      v6 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0);
      v7 = v6[6];
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
      *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
      *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
      *(_QWORD *)((char *)a1 + v6[10]) = *(_QWORD *)((char *)a2 + v6[10]);
      *((_BYTE *)a1 + v6[11]) = *((_BYTE *)a2 + v6[11]);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_10005272C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for SessionConfiguration.BackendHTTP(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

unint64_t sub_10005279C()
{
  unint64_t result;

  result = qword_100090060;
  if (!qword_100090060)
  {
    result = swift_getWitnessTable(&unk_10006F920, &unk_100089860);
    atomic_store(result, (unint64_t *)&qword_100090060);
  }
  return result;
}

uint64_t sub_1000527D8(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[4]);
}

_QWORD *sub_100052810(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  v6 = a2[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *sub_10005286C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[4];
  v11 = a1[4];
  a1[4] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

_QWORD *sub_100052900(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[3]);
  v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  return a1;
}

void type metadata accessor for SessionConfiguration.BackendTTR()
{
  sub_10000B0C0();
}

_QWORD *sub_10005297C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *result;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD v38[2];
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;

  sub_10001AAC8(&qword_10008E740);
  sub_100012C34();
  v8 = __chkstk_darwin(v7);
  v10 = (_QWORD *)((char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v39 = (uint64_t)v38 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
  {
    sub_10000A818();
    return _swiftEmptyArrayStorage;
  }
  v38[1] = v3;
  sub_100018040();
  v38[0] = a1;
  v13 = (uint64_t *)(a1 + 56);
  v40 = _swiftEmptyArrayStorage;
  v14 = v39;
  while (1)
  {
    v16 = *(v13 - 1);
    v15 = *v13;
    if (!*(_QWORD *)(*v13 + 16))
    {
      v28 = sub_1000192F4();
      _s10RTCUtility9XPCObjectOwst_0(v14, 1, 1, v28);
      sub_10001CEBC();
      sub_100018040();
      goto LABEL_19;
    }
    v41 = *(v13 - 1);
    sub_10001CEBC();
    sub_100018040();
    swift_bridgeObjectRetain(a3);
    v17 = sub_10001A120(a2, a3);
    if ((v18 & 1) != 0)
    {
      v19 = v17;
      v20 = v10;
      v21 = a3;
      v22 = a2;
      v23 = *(_QWORD *)(v15 + 56);
      v24 = sub_1000192F4();
      v25 = v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v19;
      a2 = v22;
      a3 = v21;
      v10 = v20;
      v14 = v39;
      sub_10001B93C(v25, v39, type metadata accessor for EventValue);
      v26 = v14;
      v27 = 0;
    }
    else
    {
      v24 = sub_1000192F4();
      v26 = v14;
      v27 = 1;
    }
    _s10RTCUtility9XPCObjectOwst_0(v26, v27, 1, v24);
    sub_10000A818();
    sub_1000192F4();
    v29 = _s10RTCUtility9XPCObjectOwet_0(v14, 1, v24);
    v16 = v41;
    if (v29 == 1)
      goto LABEL_19;
    sub_10004DE90(v14, (uint64_t)v10);
    result = (_QWORD *)swift_getEnumCaseMultiPayload(v10, v24);
    if ((_DWORD)result == 2)
      break;
    if ((_DWORD)result == 1)
    {
      v31 = *v10;
LABEL_13:
      sub_100056A68(v14);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v16);
      v32 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
      {
        sub_100022DC4(0, v32[2] + 1, 1, (uint64_t)v32);
        v32 = v36;
      }
      v34 = v32[2];
      v33 = v32[3];
      v40 = v32;
      if (v34 >= v33 >> 1)
      {
        sub_100022DC4(v33 > 1, v34 + 1, 1, (uint64_t)v40);
        v40 = v37;
      }
      v35 = v40;
      v40[2] = v34 + 1;
      v35[v34 + 4] = v31;
      v14 = v39;
      goto LABEL_20;
    }
    sub_100023458((uint64_t)v10, type metadata accessor for EventValue);
LABEL_19:
    sub_100056A68(v14);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v16);
LABEL_20:
    v13 += 4;
    if (!--v12)
    {
      sub_10000A818();
      swift_bridgeObjectRelease(v38[0]);
      return v40;
    }
  }
  v31 = *v10;
  if ((*v10 & 0x8000000000000000) == 0)
    goto LABEL_13;
  __break(1u);
  return result;
}

uint64_t sub_100052C5C(uint64_t a1)
{
  return sub_100052C94(a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int, (void (*)(uint64_t *, uint64_t))sub_10004E5E0);
}

uint64_t sub_100052C78(uint64_t a1)
{
  return sub_100052C94(a1, (uint64_t)&type metadata for Int64, (uint64_t)&protocol witness table for Int64, (void (*)(uint64_t *, uint64_t))sub_10004E5F4);
}

uint64_t sub_100052C94(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v6 = Set.init(minimumCapacity:)(*(_QWORD *)(a1 + 16), a2, a3);
  v13 = v6;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      v9 = *(_QWORD *)(a1 + 8 * i + 32);
      a4(&v12, v9);
    }
    sub_10000781C();
    return v13;
  }
  else
  {
    v10 = v6;
    sub_10000781C();
  }
  return v10;
}

uint64_t sub_100052D1C()
{
  uint64_t v0;

  sub_100015060((_QWORD *)(v0 + 64));
  return sub_10000BD38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100052D48(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 112) = a2;
  *(_QWORD *)(v4 + 120) = v3;
  *(_BYTE *)(v4 + 57) = a3;
  *(_QWORD *)(v4 + 104) = a1;
  v5 = type metadata accessor for CachedSession(0);
  *(_QWORD *)(v4 + 128) = v5;
  *(_QWORD *)(v4 + 136) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100052DAC, v3, 0);
}

uint64_t sub_100052DAC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, uint64_t);

  v1 = *(_QWORD *)(v0[15] + 112);
  v0[18] = v1;
  v2 = (_QWORD *)sub_1000582FC((uint64_t)&unk_100090170);
  v0[19] = v2;
  *v2 = v0;
  v2[1] = sub_100052E0C;
  return v4(v0[14], v1);
}

uint64_t sub_100052E0C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001575C();
  sub_1000108A8();
  *(_BYTE *)(v1 + 58) = v0;
  sub_100030350(v2);
  sub_10000F3E8();
  return sub_100010514();
}

uint64_t sub_100052E4C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t (*v11)(void);

  v1 = *(unsigned __int8 *)(v0 + 58);
  sub_10001B93C(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 136), type metadata accessor for CachedSession);
  v2 = *(_QWORD *)(v0 + 136);
  if (v1 == 3)
  {
    sub_100023458(v2, type metadata accessor for CachedSession);
LABEL_7:
    v6 = *(_QWORD *)(v0 + 112);
    *(_QWORD *)(v0 + 88) = *(_QWORD *)(v0 + 128);
    *(_QWORD *)(v0 + 96) = &off_100089B20;
    v7 = sub_100027AC4((_QWORD *)(v0 + 64));
    sub_10001B93C(v6, (uint64_t)v7, type metadata accessor for CachedSession);
    v8 = (_QWORD *)swift_task_alloc(dword_10008EC94);
    *(_QWORD *)(v0 + 160) = v8;
    *v8 = v0;
    v8[1] = sub_100052F74;
    return sub_100015B44(v0 + 16, v0 + 64);
  }
  v3 = *(unsigned __int8 *)(v0 + 57);
  v4 = *(unsigned __int8 *)(v2 + 72);
  sub_100023458(v2, type metadata accessor for CachedSession);
  if (v4 == 1 || v3 != 0)
    goto LABEL_7;
  v10 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  *(_QWORD *)v10 = _swiftEmptyArrayStorage;
  *(_QWORD *)(v10 + 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v10 + 16) = 1;
  *(_QWORD *)(v10 + 24) = 1701736302;
  *(_QWORD *)(v10 + 32) = 0xE400000000000000;
  *(_BYTE *)(v10 + 40) = 2;
  v11 = (uint64_t (*)(void))sub_10001C704();
  return sub_10001B084(v11);
}

uint64_t sub_100052F74()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  sub_10000B0F0();
  sub_10000F498(v2);
  v0[21] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    v4 = v0[15];
    v5 = sub_100053040;
  }
  else
  {
    v6 = v0[15];
    sub_100015060(v0 + 8);
    v5 = sub_100052FD4;
    v4 = v6;
  }
  return sub_10001A1B0((uint64_t)v5, v4, 0);
}

uint64_t sub_100052FD4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  __int128 v8;

  v1 = *(_BYTE *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_BYTE *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 104);
  v8 = *(_OWORD *)(v0 + 16);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  *(_OWORD *)v5 = v8;
  *(_BYTE *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v2;
  *(_QWORD *)(v5 + 32) = v3;
  *(_BYTE *)(v5 + 40) = v1;
  v6 = (uint64_t (*)(void))sub_10001C704();
  return v6();
}

uint64_t sub_100053040()
{
  uint64_t v0;

  sub_100015060((_QWORD *)(v0 + 64));
  sub_100010D58();
  return sub_10000BD38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100053074(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = v1;
  return swift_task_switch(sub_10005308C, v1, 0);
}

void sub_10005308C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(uint64_t, uint64_t, char);

  v1 = qword_1000973D8;
  v0[18] = qword_1000973D8;
  if (v1)
  {
    v2 = unk_10009015C;
    v4 = (void (*)(uint64_t, uint64_t, char))((char *)&dword_100090158 + dword_100090158);
    sub_100019A20();
    v3 = (_QWORD *)swift_task_alloc(v2);
    v0[19] = v3;
    *v3 = v0;
    v3[1] = sub_10005311C;
    v4((uint64_t)(v0 + 2), v0[16], 1);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10005311C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD *, _QWORD);
  _QWORD *v7;

  v7 = (_QWORD *)*v1;
  v2 = v7;
  sub_10000F498(&v7);
  v2[20] = v0;
  swift_task_dealloc(v3);
  if (v0)
    return sub_10001808C((uint64_t)sub_1000532AC, v2[17], 0);
  swift_release(v2[18]);
  v5 = (_QWORD *)sub_1000582FC((uint64_t)&unk_100090160);
  v2[21] = v5;
  *v5 = v1;
  v5[1] = sub_1000531B8;
  return v6(v2 + 2, v2[16]);
}

uint64_t sub_1000531B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v11;

  v11 = *v3;
  v6 = v11;
  sub_10000F498(&v11);
  swift_task_dealloc(v7);
  v8 = *(_QWORD *)(v6 + 16);
  v9 = (_OWORD *)(v6 + 40);
  if (v2)
  {
    *(_QWORD *)(v6 + 96) = v8;
    sub_100005400((_QWORD *)(v6 + 96));
    *(_QWORD *)(v6 + 112) = *(_QWORD *)(v6 + 24);
    sub_100005400((_QWORD *)(v6 + 112));
    *(_OWORD *)(v6 + 80) = *v9;
    sub_100007884();
    return ((uint64_t (*)(void))v3[1])();
  }
  else
  {
    *(_QWORD *)(v6 + 120) = v8;
    sub_100005400((_QWORD *)(v6 + 120));
    *(_QWORD *)(v6 + 104) = *(_QWORD *)(v6 + 24);
    sub_100005400((_QWORD *)(v6 + 104));
    *(_OWORD *)(v6 + 64) = *v9;
    sub_10001EFD0(v6 + 64);
    return ((uint64_t (*)(uint64_t, uint64_t))v3[1])(a1, a2);
  }
}

uint64_t sub_1000532AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000532E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[28] = a2;
  v3[29] = v2;
  v3[27] = a1;
  v3[30] = *(_QWORD *)(type metadata accessor for SessionConfiguration.Backend(0) - 8);
  v3[31] = sub_10000BFD4();
  v3[32] = sub_10000BFD4();
  sub_10000F3E8();
  return sub_10001A1B0(v4, v5, v6);
}

uint64_t sub_10005333C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  sub_10000A874();
  sub_100058408();
  *(_QWORD *)(v2 + 56) = v0;
  v3 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v2 + 64) = v3;
  if (v3 == 1)
  {
    v8 = (_OWORD *)(v2 - 192);
    v9 = *(_QWORD *)(v1 + 224);
    v10 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 240) + 80);
    sub_10001B93C(v0 + ((v10 + 32) & ~v10), *(_QWORD *)(v1 + 256), type metadata accessor for SessionConfiguration.Backend);
    v11 = *(_OWORD *)(v9 + 224);
    v12 = *(_OWORD *)(v9 + 192);
    v8[1] = *(_OWORD *)(v9 + 208);
    v8[2] = v11;
    *v8 = v12;
    sub_10005837C(*(__n128 *)(v9 + 192));
    swift_retain(v9);
    sub_10000A8E4();
    sub_10001DA0C();
    sub_10000BE30();
    v13 = (_QWORD *)swift_task_alloc(dword_10008F76C);
    *(_QWORD *)(v1 + 280) = v13;
    v14 = sub_1000583A8(v13, (uint64_t)sub_1000534CC);
  }
  else
  {
    if (!v3)
    {
      sub_1000583E4();
      sub_100010D58();
      v4 = sub_100058460();
      return sub_1000106E0(v4, v5, v6);
    }
    v15 = (_OWORD *)(v2 - 144);
    v16 = (_OWORD *)(v2 - 80);
    v17 = (_OWORD *)(v2 - 64);
    v18 = (_OWORD *)(v2 - 48);
    v19 = *(_QWORD *)(v1 + 240);
    v20 = *(_OWORD **)(v1 + 224);
    sub_10000D284();
    v21 = v20[14];
    v22 = v20[12];
    v15[1] = v20[13];
    v15[2] = v21;
    *v15 = v22;
    *v18 = v20[12];
    v23 = *(_OWORD *)(v1 + 96);
    *v17 = *(_OWORD *)(v1 + 80);
    *v16 = v23;
    v24 = *(_DWORD *)(v19 + 80);
    *(_DWORD *)(v1 + 360) = v24;
    *(_QWORD *)(v1 + 312) = v25;
    *(_QWORD *)(v1 + 320) = 1;
    v26 = *(_QWORD *)(v1 + 224);
    v27 = *(_QWORD *)(v1 + 264) + ((v24 + 32) & ~(unint64_t)v24);
    sub_100010644();
    sub_100058360(v27, v28, type metadata accessor for SessionConfiguration.Backend);
    swift_retain(v26);
    sub_10000BE30();
    sub_10001DA0C();
    sub_10000A8E4();
    v29 = (_QWORD *)swift_task_alloc(dword_10008F76C);
    *(_QWORD *)(v1 + 328) = v29;
    sub_10001FE54(v29, (uint64_t)sub_1000535F8);
    v14 = (uint64_t)v15;
  }
  return sub_100018F20(v14);
}

uint64_t sub_1000534CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000154B8();
  sub_1000194A0();
  sub_10000F498(v4);
  v3[36] = v0;
  swift_task_dealloc(v5);
  if (v0)
  {
    sub_100023458(v3[32], type metadata accessor for SessionConfiguration.Backend);
  }
  else
  {
    v3[37] = v2;
    v3[38] = v1;
  }
  sub_1000180E8();
  sub_100007884();
  sub_10001D0B0();
  sub_10000F3E8();
  return sub_1000156C8(v6, v7, v8);
}

uint64_t sub_100053550()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_10001454C();
  v1 = v0[28];
  sub_100056F58(v1, v0[32], v0[38], v0[37], *(_BYTE *)(v1 + 240) == 1, v0[29]);
  v2 = sub_10000A828();
  sub_100058340(v2, type metadata accessor for SessionConfiguration.Backend);
  swift_release(v1);
  sub_1000583E4();
  sub_100010D58();
  v3 = sub_100058474();
  return sub_100010410(v3, v4, v5);
}

uint64_t sub_1000535C4()
{
  uint64_t v0;

  sub_100058488();
  sub_10000F3D8();
  sub_1000111E4();
  return sub_100011260(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000535F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  sub_1000154B8();
  sub_10001E574();
  sub_10000F498(v4);
  v3[42] = v0;
  swift_task_dealloc(v5);
  if (v0)
  {
    v6 = v3[29];
    sub_10000BE84();
    sub_100007884();
    sub_10001D0B0();
    sub_100005400(v3 + 26);
    sub_10000AF70();
    v7 = sub_1000537DC;
    v8 = v6;
  }
  else
  {
    v9 = v3[29];
    v3[43] = v2;
    v3[44] = v1;
    sub_10000BE84();
    sub_100007884();
    sub_10001D0B0();
    v7 = sub_100053688;
    v8 = v9;
  }
  return sub_1000156C8((uint64_t)v7, v8, 0);
}

void sub_100053688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  sub_1000154B8();
  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = sub_1000583BC();
  sub_100056F58(v3, v4, v5, v6, v7, v8);
  sub_10000A828();
  swift_release(v2);
  v9 = *(_QWORD *)(v0 + 312);
  if (*(_QWORD *)(v1 + 16) >= *(_QWORD *)(v1 + 24) >> 1)
  {
    sub_10000BD7C();
    v9 = v20;
  }
  v10 = *(_QWORD *)(v0 + 320);
  v11 = *(_QWORD *)(v0 + 272);
  v12 = sub_10005841C();
  sub_100023458(v12, type metadata accessor for SessionConfiguration.Backend);
  if (v10 == v11)
  {
    sub_100005400((_QWORD *)(v0 + 208));
    v13 = type metadata accessor for BackendGroup();
    v14 = sub_100012D10(v13, 120);
    swift_defaultActor_initialize(v14);
    *(_QWORD *)(v14 + 112) = v9;
    sub_1000583E4();
    sub_100010D58();
    sub_100010DA4(v14, (uint64_t)&off_100087F80, *(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 320);
    *(_QWORD *)(v0 + 312) = v9;
    *(_QWORD *)(v0 + 320) = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
    }
    else
    {
      v16 = *(_QWORD *)(v0 + 224);
      v17 = sub_10000D2D0(v15);
      sub_10001B93C(v17, v18, type metadata accessor for SessionConfiguration.Backend);
      swift_retain(v16);
      sub_10001DA0C();
      sub_10000A8E4();
      sub_10001E08C(v0 + 128);
      v19 = (_QWORD *)swift_task_alloc(dword_10008F76C);
      *(_QWORD *)(v0 + 328) = v19;
      sub_10001FE54(v19, (uint64_t)sub_1000535F8);
      sub_10001B034(v0 + 64);
    }
  }
}

uint64_t sub_1000537DC()
{
  uint64_t v0;

  sub_100023458(*(_QWORD *)(v0 + 248), type metadata accessor for SessionConfiguration.Backend);
  sub_100058488();
  sub_10000F3D8();
  sub_1000111E4();
  return sub_100011260(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100053820(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3[28] = a2;
  v3[29] = v2;
  v3[27] = a1;
  v4 = *(_QWORD *)(type metadata accessor for SessionConfiguration.Backend(0) - 8);
  v3[30] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[31] = swift_task_alloc(v5);
  v3[32] = swift_task_alloc(v5);
  v6 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CachedSession(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[33] = swift_task_alloc(v6);
  v3[34] = swift_task_alloc(v6);
  return swift_task_switch(sub_1000538C0, v2, 0);
}

uint64_t sub_1000538C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  __n128 v13;
  _QWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;

  sub_10000A874();
  sub_100058408();
  *(_QWORD *)(v2 + 72) = v0;
  v3 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v2 + 80) = v3;
  if (v3 == 1)
  {
    v8 = (__n128 *)(v2 - 192);
    v9 = *(_QWORD *)(v1 + 240);
    v10 = *(_QWORD *)(v1 + 224);
    sub_10001B93C(v10, *(_QWORD *)(v1 + 272), type metadata accessor for CachedSession);
    sub_100058360(v0 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v11, type metadata accessor for SessionConfiguration.Backend);
    v12 = *(__n128 *)(v10 + 32);
    v13 = *(__n128 *)v10;
    v8[1] = *(__n128 *)(v10 + 16);
    v8[2] = v12;
    *v8 = v13;
    sub_10005837C(*(__n128 *)v10);
    sub_10000A8E4();
    sub_10001DA0C();
    sub_10000BE30();
    v14 = (_QWORD *)swift_task_alloc(dword_10008F76C);
    *(_QWORD *)(v1 + 296) = v14;
    sub_10001FE54(v14, (uint64_t)sub_100053A78);
    return sub_100018F20((uint64_t)v8);
  }
  else if (v3)
  {
    v15 = (_OWORD *)(v2 - 144);
    v16 = (_OWORD *)(v2 - 80);
    v17 = (_OWORD *)(v2 - 64);
    v18 = (__int128 *)(v2 - 48);
    v19 = *(_QWORD *)(v1 + 240);
    sub_10000D284();
    v20 = *(_DWORD *)(v19 + 80);
    *(_DWORD *)(v1 + 376) = v20;
    *(_QWORD *)(v1 + 328) = v21;
    *(_QWORD *)(v1 + 336) = 1;
    v22 = *(_QWORD *)(v1 + 248);
    v23 = *(__int128 **)(v1 + 224);
    v24 = *(_QWORD *)(v1 + 280) + ((v20 + 32) & ~(unint64_t)v20);
    sub_100010644();
    sub_10001B93C(v24, v22, type metadata accessor for SessionConfiguration.Backend);
    sub_100058360((uint64_t)v23, v25, type metadata accessor for CachedSession);
    v26 = v23[2];
    v27 = *v23;
    v15[1] = v23[1];
    v15[2] = v26;
    *v15 = v27;
    *v18 = *v23;
    v28 = *(_OWORD *)(v1 + 96);
    *v17 = *(_OWORD *)(v1 + 80);
    *v16 = v28;
    sub_10000BE30();
    sub_10001DA0C();
    sub_10001E08C((uint64_t)v16);
    v29 = (_QWORD *)swift_task_alloc(dword_10008F76C);
    *(_QWORD *)(v1 + 344) = v29;
    sub_10001FE54(v29, (uint64_t)sub_100053BD0);
    return sub_100018F20((uint64_t)v15);
  }
  else
  {
    sub_10005839C();
    sub_100010D58();
    sub_10000F3D8();
    sub_1000111E4();
    v4 = sub_100058460();
    return sub_1000106E0(v4, v5, v6);
  }
}

uint64_t sub_100053A78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000154B8();
  sub_1000194A0();
  sub_10000F498(v4);
  v3[38] = v0;
  swift_task_dealloc(v5);
  if (v0)
  {
    sub_100023458(v3[32], type metadata accessor for SessionConfiguration.Backend);
  }
  else
  {
    v3[39] = v2;
    v3[40] = v1;
  }
  sub_1000180E8();
  sub_100007884();
  sub_10001D0B0();
  sub_10000F3E8();
  return sub_1000156C8(v6, v7, v8);
}

uint64_t sub_100053AFC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_10001454C();
  v1 = v0[32];
  sub_10005721C(v0[34], v1, v0[40], v0[39], *(unsigned __int8 *)(v0[28] + 72) == 1, v0[29]);
  sub_10000A828();
  sub_100023458(v1, type metadata accessor for SessionConfiguration.Backend);
  sub_100058340(v2, type metadata accessor for CachedSession);
  sub_10005839C();
  sub_100010D58();
  sub_10000F3D8();
  sub_1000111E4();
  v3 = sub_100058474();
  return sub_100010410(v3, v4, v5);
}

uint64_t sub_100053B84()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001454C();
  sub_100058340(v1, type metadata accessor for CachedSession);
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  sub_10001210C();
  return sub_100012164(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100053BD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  sub_1000154B8();
  sub_10001E574();
  sub_10000F498(v4);
  v3[44] = v0;
  swift_task_dealloc(v5);
  if (v0)
  {
    v6 = v3[29];
    sub_10000BE84();
    sub_100007884();
    sub_10001D0B0();
    sub_100005400(v3 + 26);
    sub_10000AF70();
    v7 = sub_100053E00;
    v8 = v6;
  }
  else
  {
    v9 = v3[29];
    v3[45] = v2;
    v3[46] = v1;
    sub_10000BE84();
    sub_100007884();
    sub_10001D0B0();
    v7 = sub_100053C60;
    v8 = v9;
  }
  return sub_1000156C8((uint64_t)v7, v8, 0);
}

void sub_100053C60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  sub_1000154B8();
  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = sub_1000583BC();
  sub_10005721C(v3, v4, v5, v6, v7, v8);
  sub_10000A828();
  sub_100023458(v2, type metadata accessor for CachedSession);
  v9 = *(_QWORD *)(v0 + 328);
  if (*(_QWORD *)(v1 + 16) >= *(_QWORD *)(v1 + 24) >> 1)
  {
    sub_10000BD7C();
    v9 = v25;
  }
  v10 = *(_QWORD *)(v0 + 336);
  v11 = *(_QWORD *)(v0 + 288);
  v12 = sub_10005841C();
  sub_100023458(v12, type metadata accessor for SessionConfiguration.Backend);
  if (v10 == v11)
  {
    sub_100005400((_QWORD *)(v0 + 208));
    v13 = type metadata accessor for BackendGroup();
    v14 = sub_100012D10(v13, 120);
    swift_defaultActor_initialize(v14);
    *(_QWORD *)(v14 + 112) = v9;
    swift_task_dealloc(*(_QWORD *)(v0 + 272));
    sub_100010D58();
    sub_1000111E4();
    sub_10000BFB0();
    sub_100010DA4(v14, (uint64_t)&off_100087F80, *(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 336);
    *(_QWORD *)(v0 + 328) = v9;
    *(_QWORD *)(v0 + 336) = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
    }
    else
    {
      v16 = *(_QWORD *)(v0 + 264);
      v17 = *(__int128 **)(v0 + 224);
      v18 = sub_10000D2D0(v15);
      sub_10001B93C(v18, v19, type metadata accessor for SessionConfiguration.Backend);
      sub_10001B93C((uint64_t)v17, v16, type metadata accessor for CachedSession);
      v20 = v17[2];
      v21 = *v17;
      *(_OWORD *)(v0 + 80) = v17[1];
      *(_OWORD *)(v0 + 96) = v20;
      *(_OWORD *)(v0 + 64) = v21;
      *(_OWORD *)(v0 + 160) = *v17;
      v22 = *(_OWORD *)(v0 + 96);
      *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 80);
      *(_OWORD *)(v0 + 128) = v22;
      sub_10001DA0C();
      sub_10000A8E4();
      sub_10001E08C(v0 + 128);
      v23 = (_QWORD *)swift_task_alloc(dword_10008F76C);
      *(_QWORD *)(v0 + 344) = v23;
      v24 = sub_1000583A8(v23, (uint64_t)sub_100053BD0);
      sub_10001B034(v24);
    }
  }
}

uint64_t sub_100053E00()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001454C();
  sub_100023458(*(_QWORD *)(v0 + 248), type metadata accessor for SessionConfiguration.Backend);
  sub_100058340(v1, type metadata accessor for CachedSession);
  sub_1000111E4();
  sub_10000F3D8();
  sub_10000BFB0();
  sub_10001210C();
  return sub_100012164(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100053E5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  const char **v11;
  _QWORD *v12;
  const char **v13;
  _QWORD *v14;
  uint64_t v15;
  const char **v16;
  _BYTE *v17;
  uint64_t result;
  _QWORD *v19;
  _BYTE *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE *v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  int64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;

  v0 = sub_10001AAC8(&qword_10008F350);
  v1 = sub_10001AAC8(&qword_10008F358);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v0, v5 + 13 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_10006E450;
  v7 = v6 + v5;
  v8 = (_BYTE *)(v6 + v5 + *(int *)(v1 + 48));
  *(_QWORD *)(v6 + v5) = XPC_ACTIVITY_REPEATING;
  *v8 = 1;
  v9 = type metadata accessor for XPCObject(0);
  swift_storeEnumTagMultiPayload(v8, v9, 2);
  v10 = (_QWORD *)(v7 + v3 + *(int *)(v1 + 48));
  *(_QWORD *)(v7 + v3) = XPC_ACTIVITY_DELAY;
  *v10 = 86400;
  swift_storeEnumTagMultiPayload(v10, v9, 3);
  v11 = (const char **)(v7 + 2 * v3);
  v12 = (const char **)((char *)v11 + *(int *)(v1 + 48));
  *v11 = XPC_ACTIVITY_GRACE_PERIOD;
  *v12 = 3600;
  swift_storeEnumTagMultiPayload(v12, v9, 3);
  v13 = (const char **)(v7 + 3 * v3);
  v14 = (const char **)((char *)v13 + *(int *)(v1 + 48));
  *v13 = XPC_ACTIVITY_PRIORITY;
  *v14 = String.init(cString:)(XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  v14[1] = v15;
  swift_storeEnumTagMultiPayload(v14, v9, 8);
  v16 = (const char **)(v7 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = XPC_ACTIVITY_ALLOW_BATTERY;
  *v17 = 0;
  result = swift_storeEnumTagMultiPayload(v17, v9, 2);
  if (!XPC_ACTIVITY_POWER_NAP)
  {
    __break(1u);
    goto LABEL_11;
  }
  v19 = (_QWORD *)(v7 + 5 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = XPC_ACTIVITY_POWER_NAP;
  *v20 = 1;
  result = swift_storeEnumTagMultiPayload(v20, v9, 2);
  if (!XPC_ACTIVITY_RANDOM_INITIAL_DELAY)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v21 = (_QWORD *)(v7 + 6 * v3);
  v22 = (_QWORD *)((char *)v21 + *(int *)(v1 + 48));
  *v21 = XPC_ACTIVITY_RANDOM_INITIAL_DELAY;
  *v22 = 43200;
  result = swift_storeEnumTagMultiPayload(v22, v9, 4);
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v23 = (_QWORD *)(v7 - v3 + 8 * v3);
  v24 = (char *)v23 + *(int *)(v1 + 48);
  *v23 = XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY;
  *v24 = 1;
  result = swift_storeEnumTagMultiPayload(v24, v9, 2);
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v25 = (_QWORD *)(v7 + 8 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY;
  *v26 = 1;
  result = swift_storeEnumTagMultiPayload(v26, v9, 2);
  if (!XPC_ACTIVITY_NETWORK_UPLOAD_SIZE)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v27 = (_QWORD *)(v7 + 9 * v3);
  v28 = (_QWORD *)((char *)v27 + *(int *)(v1 + 48));
  *v27 = XPC_ACTIVITY_NETWORK_UPLOAD_SIZE;
  *v28 = 5242880;
  result = swift_storeEnumTagMultiPayload(v28, v9, 4);
  if (!XPC_ACTIVITY_EXPECTED_DURATION)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v29 = (_QWORD *)(v7 + 10 * v3);
  v30 = (_QWORD *)((char *)v29 + *(int *)(v1 + 48));
  *v29 = XPC_ACTIVITY_EXPECTED_DURATION;
  *v30 = XPC_ACTIVITY_INTERVAL_5_MIN;
  result = swift_storeEnumTagMultiPayload(v30, v9, 3);
  if (!XPC_ACTIVITY_GROUP_NAME)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v31 = (_QWORD *)(v7 + 11 * v3);
  v32 = (_QWORD *)((char *)v31 + *(int *)(v1 + 48));
  *v31 = XPC_ACTIVITY_GROUP_NAME;
  *v32 = 0xD00000000000001DLL;
  v32[1] = 0x8000000100071D30;
  result = swift_storeEnumTagMultiPayload(v32, v9, 8);
  if (XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT)
  {
    v33 = (_QWORD *)(v7 + 12 * v3);
    v34 = (_QWORD *)((char *)v33 + *(int *)(v1 + 48));
    *v33 = XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT;
    *v34 = 1;
    swift_storeEnumTagMultiPayload(v34, v9, 4);
    v35 = sub_10001AAC8(&qword_10008F360);
    v36 = sub_100038A2C();
    result = Dictionary.init(dictionaryLiteral:)(v6, v35, v9, v36);
    qword_1000973A8 = result;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t *sub_100054218()
{
  if (qword_10008E070 != -1)
    swift_once(&qword_10008E070, sub_100053E5C);
  return &qword_1000973A8;
}

uint64_t sub_100054258()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026B1C(v0, qword_1000973B0);
  sub_100015718(v0, (uint64_t)qword_1000973B0);
  return Logger.init(subsystem:category:)(0xD000000000000017, 0x8000000100071220, 0x74696D627573, 0xE600000000000000);
}

uint64_t sub_1000542C8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[9] = a1;
  v2[10] = v1;
  type metadata accessor for CachedSession(0);
  v2[11] = sub_10000BFD4();
  v2[12] = sub_10000BFD4();
  sub_10000F3E8();
  return sub_10001A1B0(v3, v4, v5);
}

void sub_10005431C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  sub_1000110BC();
  v20 = v1;
  v21 = v2;
  v19 = v0;
  if (qword_10008E078 != -1)
    swift_once(&qword_10008E078, sub_100054258);
  v3 = v0[9];
  v4 = v0[12];
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100015718(v5, (uint64_t)qword_1000973B0);
  v0[13] = v6;
  sub_10001B93C(v3, v4, type metadata accessor for CachedSession);
  Logger.logObject.getter(v7);
  v8 = sub_10000BFB8();
  v9 = sub_1000112C4(v8);
  v10 = v0[12];
  if (v9)
  {
    v11 = (uint8_t *)sub_100012C5C(12);
    v12 = sub_100012C5C(32);
    v18 = v12;
    *(_DWORD *)v11 = 136446210;
    v13 = sub_10001CEBC();
    v0[8] = sub_10000F4C0(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v11 + 4, v11 + 12);
    sub_100010678();
    sub_100023458(v10, type metadata accessor for CachedSession);
    sub_100010670((void *)&_mh_execute_header, v6, (os_log_type_t)v6, "sending events for session: %{public}s", v11);
    sub_10000BE60(v12);
    sub_1000120F8(v12);
    sub_1000120F8((uint64_t)v11);
  }
  else
  {
    sub_100023458(v0[12], type metadata accessor for CachedSession);
  }

  v15 = qword_1000973E0;
  v0[14] = qword_1000973E0;
  if (v15)
  {
    v17 = (void (*)(uint64_t))((char *)&dword_100090148 + dword_100090148);
    sub_100019A20();
    v16 = (_QWORD *)sub_10000BFD4();
    v0[15] = v16;
    *v16 = v0;
    v16[1] = sub_1000544FC;
    v17(v0[9]);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000544FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  sub_10000B0F0();
  sub_10001F59C();
  v0[16] = v2;
  v0[17] = v3;
  v0[18] = v1;
  sub_100030350(v4);
  if (v1)
  {
    v5 = v0[10];
    v6 = sub_100054D70;
  }
  else
  {
    v7 = v0[10];
    swift_release(v0[14]);
    v6 = sub_100054560;
    v5 = v7;
  }
  return sub_10001A1B0((uint64_t)v6, v5, 0);
}

void sub_100054560()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  if (*(_QWORD *)(v0 + 128))
  {
    if (qword_1000973C8)
    {
      *(_QWORD *)(v0 + 152) = qword_1000973C8;
      sub_100019A20();
      v1 = (_QWORD *)sub_1000156A4();
      *(_QWORD *)(v0 + 160) = v1;
      v2 = sub_100019B34(v1, (uint64_t)sub_10005460C);
      sub_10003C834(v2, v3, v4, v5);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v6 = sub_100056A2C();
    sub_10000A7FC((uint64_t)&type metadata for SubmissionError, v6);
    *v7 = 0;
    sub_1000199C4();
    sub_1000584A8();
    sub_10000F3D8();
    sub_100019388(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_10005460C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  sub_10000B0F0();
  sub_10001F59C();
  v0[21] = v2;
  v0[22] = v1;
  sub_100030350(v3);
  if (v1)
  {
    v4 = v0[10];
    v5 = sub_100054DA8;
  }
  else
  {
    v6 = v0[10];
    swift_release(v0[19]);
    v5 = sub_10005466C;
    v4 = v6;
  }
  return sub_10001A1B0((uint64_t)v5, v4, 0);
}

uint64_t sub_10005466C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t ObjectType;
  int *v43;
  _QWORD *v44;
  os_log_type_t type;
  uint64_t v46;
  NSObject *loga;
  os_log_t log[2];
  int *logb;
  uint64_t v50[2];

  v2 = v1[21];
  if (!*(_QWORD *)(v2 + 16))
  {
    sub_10000781C();
    sub_100019ABC();
    sub_1000111E4();
    sub_10000BFB0();
    v8 = (uint64_t (*)(void))sub_10001C704();
    return v8();
  }
  v3 = static Task<>.isCancelled.getter(a1);
  v4 = v1[21];
  if ((v3 & 1) != 0)
  {
    sub_10000AF70();
    v5 = sub_100056A2C();
    v6 = sub_10000A7FC((uint64_t)&type metadata for SubmissionError, v5);
    sub_10001E524(v6, v7);
    sub_100019ABC();
    sub_100058494();
    sub_100010D58();
    v8 = (uint64_t (*)(void))v1[1];
    return v8();
  }
  sub_10001B93C(v1[9], v1[11], type metadata accessor for CachedSession);
  v10 = swift_bridgeObjectRetain_n(v4, 4);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    loga = v11;
    v13 = v1[21];
    v14 = sub_100012C5C(42);
    v46 = sub_100012C5C(96);
    v50[0] = v46;
    *(_DWORD *)v14 = 134349826;
    v1[4] = *(_QWORD *)(v2 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 4, v1 + 5, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain();
    v1[5] = sub_100058368(v15, v16, v50);
    sub_1000583F4((uint64_t)(v1 + 5), v17, v18, v14 + 22);
    v19 = sub_10000BDE4();
    sub_100058374(v19, type metadata accessor for CachedSession);
    *(_WORD *)(v14 + 22) = 2082;
    v20 = sub_10005297C(v13, 0x646F6874656D5FLL, 0xE700000000000000);
    v21 = sub_100052C94((uint64_t)v20, (uint64_t)&type metadata for Int64, (uint64_t)&protocol witness table for Int64, (void (*)(uint64_t *, uint64_t))sub_10004E5F4);
    v22 = Set.description.getter(v21, &type metadata for Int64, &protocol witness table for Int64);
    type = v12;
    v24 = v23;
    sub_10000BDE4();
    v1[6] = sub_100014F94(v22, v24, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 6, v1 + 7, v14 + 24, v14 + 32);
    sub_10000A828();
    sub_10000F3C8(v13);
    *(_WORD *)(v14 + 32) = 2082;
    v25 = sub_10005297C(v13, 0x7375746174735FLL, 0xE700000000000000);
    v26 = sub_100052C94((uint64_t)v25, (uint64_t)&type metadata for Int64, (uint64_t)&protocol witness table for Int64, (void (*)(uint64_t *, uint64_t))sub_10004E5F4);
    v27 = Set.description.getter(v26, &type metadata for Int64, &protocol witness table for Int64);
    v29 = v28;
    sub_10000AF70();
    v1[7] = sub_100014F94(v27, v29, v50);
    sub_10000BEB8((uint64_t)(v1 + 7), (uint64_t)(v1 + 8), v30, v14 + 42);
    swift_bridgeObjectRelease(v29);
    sub_10000F3C8(v13);
    _os_log_impl((void *)&_mh_execute_header, loga, type, "sending %{public}ld events for session %s with categories [%{public}s] types [%{public}s]", (uint8_t *)v14, 0x2Au);
    swift_arrayDestroy(v46, 3);
    sub_1000120F8(v46);
    sub_1000120F8(v14);

  }
  else
  {
    v31 = v1[21];
    sub_100023458(v1[11], type metadata accessor for CachedSession);
    swift_bridgeObjectRelease_n(v31, 4);

  }
  v32 = *(_QWORD *)(v2 + 16);
  v1[23] = v32;
  v33 = _swiftEmptyArrayStorage;
  if (v32)
  {
    v34 = v1 + 2;
    v35 = v1[21];
    v1[2] = _swiftEmptyArrayStorage;
    sub_10005EC70(0, v32, 0);
    v33 = (_QWORD *)v1[2];
    v36 = (_OWORD *)(v35 + 48);
    do
    {
      v37 = *((_QWORD *)v36 - 1);
      *(_OWORD *)log = *v36;
      *v34 = v33;
      v38 = v33[2];
      v39 = v33[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v38 >= v39 >> 1)
      {
        sub_10005EC70((char *)(v39 > 1), v38 + 1, 1);
        v33 = (_QWORD *)*v34;
      }
      v33[2] = v38 + 1;
      v40 = &v33[3 * v38];
      v40[4] = v37;
      *(_OWORD *)(v40 + 5) = *(_OWORD *)log;
      v36 += 2;
      --v32;
    }
    while (v32);
  }
  v1[24] = v33;
  v41 = v1[17];
  ObjectType = swift_getObjectType(v1[16]);
  v43 = *(int **)(v41 + 24);
  logb = (int *)((char *)v43 + *v43);
  v44 = (_QWORD *)swift_task_alloc(v43[1]);
  v1[25] = v44;
  *v44 = v1;
  v44[1] = sub_100054B04;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))logb)(v33, ObjectType, v41);
}

uint64_t sub_100054B04()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  sub_10000B0F0();
  sub_10000F498(v2);
  v0[26] = v1;
  swift_task_dealloc(v3);
  v4 = v0[24];
  if (v1)
  {
    v5 = v0[10];
    swift_bridgeObjectRelease(v4);
    sub_10000A828();
    v6 = sub_100054DE8;
    v7 = v5;
  }
  else
  {
    v8 = v0[10];
    swift_bridgeObjectRelease(v4);
    v6 = sub_100054B74;
    v7 = v8;
  }
  return sub_10001A1B0((uint64_t)v6, v7, 0);
}

void sub_100054B74()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = qword_1000973C8;
  v0[27] = qword_1000973C8;
  if (v1)
  {
    v2 = v0[23];
    v3 = v0[21];
    if (v2)
    {
      v4 = v0 + 3;
      v0[3] = _swiftEmptyArrayStorage;
      sub_100014530();
      sub_10005ECB8(0, v2, 0);
      v5 = 0;
      v6 = (_QWORD *)v0[3];
      v7 = (uint64_t *)(v3 + 32);
      v8 = v6[2];
      do
      {
        v10 = *v7;
        v7 += 4;
        v9 = v10;
        *v4 = v6;
        v11 = v6[3];
        if (v8 >= v11 >> 1)
        {
          sub_10005ECB8((char *)(v11 > 1), v8 + 1, 1);
          v6 = (_QWORD *)*v4;
        }
        v12 = v0[23];
        ++v5;
        v6[2] = v8 + 1;
        v6[v8++ + 4] = v9;
      }
      while (v5 != v12);
      swift_bridgeObjectRelease(v0[21]);
    }
    else
    {
      sub_100014530();
      sub_1000120B4();
      v6 = _swiftEmptyArrayStorage;
    }
    v0[28] = v6;
    v13 = (_QWORD *)swift_task_alloc(dword_10008F5B4);
    v0[29] = v13;
    *v13 = v0;
    v13[1] = sub_100054CA4;
    sub_10003CA1C((uint64_t)v6);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100054CA4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  sub_10000B0F0();
  sub_10000F498(v2);
  v0[30] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    v4 = v0[10];
    v5 = sub_100054E74;
  }
  else
  {
    v6 = v0[28];
    v7 = v0[10];
    swift_bridgeObjectRelease(v6);
    sub_10000CEA8();
    v5 = sub_100054D08;
    v4 = v7;
  }
  return sub_10001A1B0((uint64_t)v5, v4, 0);
}

void sub_100054D08()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (qword_1000973C8)
  {
    *(_QWORD *)(v0 + 152) = qword_1000973C8;
    sub_100019A20();
    v1 = (_QWORD *)sub_1000156A4();
    *(_QWORD *)(v0 + 160) = v1;
    v2 = sub_100019B34(v1, (uint64_t)sub_10005460C);
    sub_10003C834(v2, v3, v4, v5);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100054D70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  sub_1000584A8();
  sub_10000F3D8();
  return sub_10001B084(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100054DA8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 152));
  sub_100019ABC();
  sub_1000584A8();
  sub_10000F3D8();
  return sub_10001B084(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100054DE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v1 + 208);
  if ((static Task<>.isCancelled.getter(a1) & 1) != 0)
  {
    v3 = sub_100056A2C();
    v4 = sub_10000A7FC((uint64_t)&type metadata for SubmissionError, v3);
    sub_10001E524(v4, v5);
    sub_10000BE9C();
  }
  else
  {
    v6 = sub_100056A2C();
    sub_10000A7FC((uint64_t)&type metadata for SubmissionError, v6);
    *v7 = v2;
    sub_1000199C4();
  }
  sub_100019ABC();
  sub_100058494();
  sub_100010D58();
  return sub_100019388(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100054E74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 224));
  v1 = sub_10000CEA8();
  v2 = *(_QWORD *)(v0 + 240);
  if ((static Task<>.isCancelled.getter(v1) & 1) != 0)
  {
    v3 = sub_100056A2C();
    v4 = sub_10000A7FC((uint64_t)&type metadata for SubmissionError, v3);
    sub_10001E524(v4, v5);
    sub_10000BE9C();
  }
  else
  {
    v6 = sub_100056A2C();
    sub_10000A7FC((uint64_t)&type metadata for SubmissionError, v6);
    *v7 = v2;
    sub_1000199C4();
  }
  sub_100019ABC();
  sub_100058494();
  sub_100010D58();
  return sub_100019388(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100054F0C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[32] = v0;
  v2 = sub_10001AAC8((uint64_t *)&unk_1000903E0);
  v1[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[34] = *(_QWORD *)(type metadata accessor for CachedSession(0) - 8);
  v1[35] = sub_10000BFD4();
  v1[36] = sub_10000BFD4();
  v1[37] = sub_10000BFD4();
  v1[38] = sub_10000BFD4();
  v1[39] = sub_10000BFD4();
  v1[40] = sub_10000BFD4();
  v1[41] = sub_10000BFD4();
  v1[42] = sub_10000BFD4();
  sub_10000F3E8();
  return sub_10001A1B0(v3, v4, v5);
}

uint64_t sub_100054FB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  if (qword_10008E078 != -1)
    swift_once(&qword_10008E078, sub_100054258);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100015718(v1, (uint64_t)qword_1000973B0);
  *(_QWORD *)(v0 + 344) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)sub_100012C5C(2);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "starting submission activity", v5, 2u);
    sub_1000120F8((uint64_t)v5);
  }

  result = static Task<>.isCancelled.getter(v6);
  if ((result & 1) != 0)
  {
    result = static Task<>.isCancelled.getter(result);
    if ((result & 1) != 0)
    {
      sub_100014630();
      sub_10001E010();
      sub_100010D58();
      sub_10000F3D8();
      sub_1000111E4();
      sub_10000BFB0();
      sub_10001210C();
      sub_10000B0DC();
      sub_100010384();
      sub_10000BD30();
      return sub_10001D408(*(uint64_t (**)(void))(v0 + 8));
    }
    v11 = qword_1000973C8;
    *(_QWORD *)(v0 + 536) = qword_1000973C8;
    if (v11)
    {
      sub_100019A20();
      v12 = (_QWORD *)sub_10000BFD4();
      *(_QWORD *)(v0 + 544) = v12;
      *v12 = v0;
      v12[1] = sub_100055A9C;
      return sub_10003D494();
    }
  }
  else
  {
    v8 = qword_1000973C8;
    *(_QWORD *)(v0 + 352) = qword_1000973C8;
    if (v8)
    {
      sub_100019A20();
      v9 = (_QWORD *)sub_10000BFD4();
      *(_QWORD *)(v0 + 360) = v9;
      v10 = sub_10001FD14(v9, (uint64_t)sub_100055164);
      return sub_10003C58C(v10);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100055164()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  sub_10000B0F0();
  sub_10001F59C();
  v0[46] = v2;
  v0[47] = v1;
  sub_100030350(v3);
  if (v1)
  {
    v4 = v0[32];
    v5 = sub_100055B50;
  }
  else
  {
    v6 = v0[32];
    swift_release(v0[44]);
    v5 = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000551C4;
    v4 = v6;
  }
  return sub_10001A1B0((uint64_t)v5, v4, 0);
}

#error "1000552F0: call analysis failed (funcsize=120)"

uint64_t sub_1000553B8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[32];
  sub_10003607C(v0[49], v0[50]);
  sub_10000CEA8();
  return sub_10001A1B0((uint64_t)sub_1000553F8, v1, 0);
}

void sub_1000553F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = qword_1000973C8;
  swift_bridgeObjectRetain();
  if (v1)
  {
    *(_QWORD *)(v0 + 424) = v1;
    sub_100019A20();
    v2 = (_QWORD *)sub_10000BFD4();
    *(_QWORD *)(v0 + 432) = v2;
    v3 = sub_10001FF50(v2, (uint64_t)sub_100055450);
    sub_10001BC98(v3, v4, v5);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100055450()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (_QWORD *)*v1;
  sub_10001F59C();
  v2[55] = v3;
  v2[56] = v0;
  sub_100030350(v4);
  if (v0)
  {
    v5 = v2[46];
    v6 = v2[32];
    swift_bridgeObjectRelease(v5);
    sub_10000A828();
    sub_1000104E8();
    v7 = sub_100055C84;
    v8 = v6;
  }
  else
  {
    v9 = v2[32];
    sub_1000104E8();
    v7 = sub_1000554D4;
    v8 = v9;
  }
  return sub_10001808C((uint64_t)v7, v8, 0);
}

uint64_t sub_1000554D4(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v2 = static Task<>.isCancelled.getter(a1);
  v3 = *(_QWORD *)(v1 + 440);
  if ((v2 & 1) != 0 || (v4 = *(_QWORD *)(v3 + 16), (*(_QWORD *)(v1 + 456) = v4) == 0))
  {
    result = swift_bridgeObjectRelease(v3);
    v13 = qword_1000973D8;
    *(_QWORD *)(v1 + 528) = qword_1000973D8;
    if (v13)
    {
      sub_100019A20();
      sub_10000781C();
      sub_10000F3E8();
      return sub_10001A1B0(v14, v15, v16);
    }
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 272);
    v6 = *(_DWORD *)(v5 + 80);
    *(_DWORD *)(v1 + 560) = v6;
    *(_QWORD *)(v1 + 464) = *(_QWORD *)(v5 + 72);
    *(_QWORD *)(v1 + 472) = 0;
    sub_10001B93C(v3 + ((v6 + 32) & ~(unint64_t)v6), *(_QWORD *)(v1 + 336), type metadata accessor for CachedSession);
    if ((static Task<>.isCancelled.getter(v7) & 1) == 0)
    {
      v17 = (_QWORD *)swift_task_alloc(dword_100090094);
      *(_QWORD *)(v1 + 480) = v17;
      v18 = sub_100058318(v17, (uint64_t)sub_1000555F0);
      return sub_10001E490(v18);
    }
    sub_100023458(*(_QWORD *)(v1 + 336), type metadata accessor for CachedSession);
    result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 440));
    if (qword_1000973C8)
    {
      *(_QWORD *)(v1 + 424) = qword_1000973C8;
      sub_100019A20();
      v9 = (_QWORD *)sub_10000BFD4();
      *(_QWORD *)(v1 + 432) = v9;
      v10 = sub_10001FF50(v9, (uint64_t)sub_100055450);
      return sub_10001BC98(v10, v11, v12);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000555F0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)();

  sub_10000B0F0();
  sub_10000F498(v2);
  *(_QWORD *)(v0 + 488) = v1;
  swift_task_dealloc(v3);
  if (v1)
    v4 = sub_100055DE4;
  else
    v4 = sub_100055640;
  return sub_10001A1B0((uint64_t)v4, *(_QWORD *)(v0 + 256), 0);
}

void sub_100055640()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = qword_1000973C8;
  v0[62] = qword_1000973C8;
  if (v1)
  {
    v0[63] = *(_QWORD *)(v0[42] + 56);
    sub_100019A20();
    swift_bridgeObjectRetain();
    v2 = (_QWORD *)sub_1000156A4();
    v0[64] = v2;
    v3 = sub_10001D8D0(v2, (uint64_t)sub_1000556B4);
    sub_10003BFDC(v3, v4);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000556B4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  sub_10001454C();
  v13 = v2;
  v14 = v3;
  v12 = v1;
  v12 = (_QWORD *)*v1;
  v4 = v12;
  sub_10000F498(&v12);
  v4[65] = v0;
  swift_task_dealloc(v5);
  v6 = v4[63];
  if (v0)
  {
    v7 = v4[32];
    swift_bridgeObjectRelease(v6);
    sub_10000AF70();
    sub_10000A828();
    sub_1000120B4();
    sub_1000104E8();
    v8 = sub_100056540;
    v9 = v7;
  }
  else
  {
    v10 = v4[32];
    swift_bridgeObjectRelease(v6);
    sub_1000104E8();
    v8 = sub_100055758;
    v9 = v10;
  }
  return swift_task_switch(v8, v9, 0);
}

uint64_t sub_100055758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 472) + 1;
  sub_100023458(*(_QWORD *)(v0 + 336), type metadata accessor for CachedSession);
  if (v2 != v1)
  {
    v3 = *(_QWORD *)(v0 + 464);
    v4 = *(_QWORD *)(v0 + 472) + 1;
    *(_QWORD *)(v0 + 472) = v4;
    sub_10001B93C(*(_QWORD *)(v0 + 440)+ ((*(unsigned __int8 *)(v0 + 560) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 560))+ v3 * v4, *(_QWORD *)(v0 + 336), type metadata accessor for CachedSession);
    if ((static Task<>.isCancelled.getter(v5) & 1) == 0)
    {
      v11 = (_QWORD *)swift_task_alloc(dword_100090094);
      *(_QWORD *)(v0 + 480) = v11;
      v12 = sub_100058318(v11, (uint64_t)sub_1000555F0);
      return sub_10001E490(v12);
    }
    sub_100023458(*(_QWORD *)(v0 + 336), type metadata accessor for CachedSession);
  }
  result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 440));
  if (qword_1000973C8)
  {
    *(_QWORD *)(v0 + 424) = qword_1000973C8;
    sub_100019A20();
    v7 = (_QWORD *)sub_10000BFD4();
    *(_QWORD *)(v0 + 432) = v7;
    v8 = sub_10001FF50(v7, (uint64_t)sub_100055450);
    return sub_10001BC98(v8, v9, v10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100055844()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[32];
  sub_10000E4D8(v0[49], v0[50], 0);
  sub_10000781C();
  sub_10000CEA8();
  return sub_10001808C((uint64_t)sub_100055894, v1, 0);
}

#error "1000559D0: call analysis failed (funcsize=125)"

uint64_t sub_100055A9C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  sub_10000B0F0();
  sub_10000F498(v2);
  v0[69] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    v4 = v0[32];
    v5 = (uint64_t (*)())sub_1000566B0;
  }
  else
  {
    v6 = v0[32];
    swift_release(v0[67]);
    v5 = sub_100055AFC;
    v4 = v6;
  }
  return sub_10001A1B0((uint64_t)v5, v4, 0);
}

uint64_t sub_100055AFC()
{
  uint64_t v0;

  sub_100014630();
  sub_10001E010();
  sub_100010D58();
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  sub_10001210C();
  sub_10000B0DC();
  sub_100010384();
  sub_10000BD30();
  return sub_10001D408(*(uint64_t (**)(void))(v0 + 8));
}

#error "100055BE0: call analysis failed (funcsize=75)"

uint64_t sub_100055C84()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  sub_1000110BC();
  v2 = *(_QWORD *)(v0 + 400);
  sub_10000CA70();
  v3 = sub_10000CA70();
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (sub_10001A2CC(v5))
  {
    v17 = v2;
    v6 = (uint8_t *)sub_100012C5C(12);
    v18 = sub_100012C5C(32);
    sub_1000582B8(4.8149e-34);
    v7 = sub_10000C054();
    v11 = sub_10001B29C(v7, v8, v9, v10);
    sub_100010EF4(v11);
    sub_10000A828();
    sub_10000A8B8();
    sub_10000A8B8();
    sub_100010670((void *)&_mh_execute_header, v4, v1, "error running submission: %s", v6);
    sub_10000BE60(v18);
    sub_1000120F8(v18);
    sub_1000120F8((uint64_t)v6);

    sub_10000A8B8();
    if (!v17)
      goto LABEL_6;
    goto LABEL_5;
  }
  sub_10000A8B8();
  sub_10000A8B8();
  sub_10000A8B8();

  if (v2)
  {
LABEL_5:
    v12 = sub_10005849C();
    sub_10000D20C(v12);
    v13 = (_QWORD *)sub_10001CE18((uint64_t)&unk_100089978);
    v14 = sub_1000582E8(v13);
    v15 = sub_100058448(v14, (uint64_t)&unk_100090140);
    swift_release(v15);
    sub_10000A820();
  }
LABEL_6:
  sub_10001E010();
  sub_100010D58();
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  sub_10001210C();
  sub_10000B0DC();
  sub_100010384();
  sub_10000BD30();
  return sub_10000A858(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100055DE4()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t *v2;
  uint64_t v3;
  char v4;
  NSObject *v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL8 v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *log;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;

  v1 = v0[61];
  v0[17] = v1;
  v2 = v0 + 14;
  swift_errorRetain(v1);
  v3 = sub_10001AAC8(&qword_10008E7E8);
  v4 = swift_dynamicCast(v0 + 14, v0 + 17, v3, &type metadata for SubmissionError, 0);
  v5 = v0[61];
  if ((v4 & 1) != 0)
  {
    sub_10000A8B8();
    v6 = *v2;
    if (*v2)
    {
      if (v6 != 1)
      {
        sub_10001B93C(v0[42], v0[36], type metadata accessor for CachedSession);
        swift_errorRetain(v6);
        v78 = swift_errorRetain(v6);
        Logger.logObject.getter(v78);
        v79 = sub_10000CA38();
        if (sub_100010924(v5))
        {
          v80 = sub_100012C5C(22);
          v102 = sub_100012C5C(64);
          *(_DWORD *)v80 = 136446466;
          v105 = v102;
          v81 = sub_10001CEBC();
          v0[19] = sub_10000F4C0(v81, v82, &v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v0 + 20, v80 + 4, v80 + 12);
          v83 = sub_100010678();
          sub_10000B144(v83, type metadata accessor for CachedSession);
          *(_WORD *)(v80 + 12) = 2082;
          swift_getErrorValue(v6, v0 + 20, v0 + 2);
          v84 = Error.localizedDescription.getter(v0[3], v0[4]);
          v0[22] = sub_100058390(v84, v85, v86, v87, v88, v89, v90, v91, v97, v98);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v80 + 14, v80 + 22);
          sub_10000A828();
          sub_100056A1C(v6);
          sub_100058310();
          _os_log_impl((void *)&_mh_execute_header, v5, v79, "failed to send events for session %{public}s: %{public}s", (uint8_t *)v80, 0x16u);
          sub_10005843C();
          sub_1000120F8(v102);
          sub_1000120F8(v80);

          sub_100058310();
        }
        else
        {
          v92 = sub_100058310();
          sub_10000B144(v92, type metadata accessor for CachedSession);
          sub_100056A1C(v6);
          sub_100058310();

        }
        goto LABEL_18;
      }
      sub_10001B93C(v0[42], v0[41], type metadata accessor for CachedSession);
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.error.getter();
      v10 = sub_1000112C4(v9);
      if (!v10)
      {
        sub_100058374(v10, type metadata accessor for CachedSession);
        goto LABEL_15;
      }
      v11 = (uint8_t *)sub_100012C5C(12);
      v12 = sub_100012C5C(32);
      v105 = v12;
      *(_DWORD *)v11 = 136446210;
      v13 = sub_10001CEBC();
      v0[27] = sub_10000F4C0(v13, v14, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 27, v0 + 28, v11 + 4, v11 + 12);
      v15 = sub_100010678();
      sub_100058374(v15, type metadata accessor for CachedSession);
      sub_100010670((void *)&_mh_execute_header, v8, (os_log_type_t)((_BYTE)v0 - 104), "submission activity cancelled while session %{public}s was in-flight; some events will not be sent",
        v11);
      sub_10000BE60(v12);
      sub_1000120F8(v12);
      v16 = (uint64_t)v11;
    }
    else
    {
      v104 = v0 + 23;
      v39 = v0[42];
      v40 = v0[39];
      v42 = v0[37];
      v41 = v0[38];
      sub_100058358(v39, v0[40]);
      sub_100058358(v39, v40);
      sub_100058358(v39, v41);
      sub_100058358(v39, v42);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.error.getter();
      v46 = os_log_type_enabled(v44, v45);
      v48 = (uint64_t *)v0[39];
      v47 = v0[40];
      v49 = v0[37];
      v50 = v0[38];
      if (!v46)
      {
        sub_100015654(v0[40]);
        sub_100015654((uint64_t)v48);
        sub_100015654(v50);
        sub_100015654(v49);

        goto LABEL_18;
      }
      v99 = v0[37];
      v51 = sub_100012C5C(42);
      v101 = sub_100012C5C(128);
      v105 = v101;
      *(_DWORD *)v51 = 136446978;
      log = v44;
      v53 = *(_QWORD *)(v47 + 48);
      v52 = *(_QWORD *)(v47 + 56);
      swift_bridgeObjectRetain();
      *v104 = sub_100014F94(v53, v52, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v104, v0 + 24, v51 + 4, v51 + 12);
      v54 = sub_10000A820();
      sub_10000B144(v54, type metadata accessor for CachedSession);
      *(_WORD *)(v51 + 12) = 2082;
      v55 = *v48;
      v56 = v48[1];
      swift_bridgeObjectRetain();
      v0[24] = sub_100014F94(v55, v56, &v105);
      sub_10000BEB8((uint64_t)(v0 + 24), (uint64_t)(v0 + 25), v57, v51 + 22);
      swift_bridgeObjectRelease(v56);
      sub_1000583EC((uint64_t)v48);
      *(_WORD *)(v51 + 22) = 2082;
      *(_QWORD *)&v58 = swift_bridgeObjectRetain().n128_u64[0];
      v0[25] = sub_100058348(v59, v60, v61, v62, v63, v64, v65, v66, v58);
      sub_10000BEB8((uint64_t)(v0 + 25), (uint64_t)(v0 + 26), v67, v51 + 32);
      sub_1000120B4();
      sub_1000583EC(v50);
      *(_WORD *)(v51 + 32) = 2082;
      *(_QWORD *)&v68 = swift_bridgeObjectRetain().n128_u64[0];
      v0[26] = sub_100058348(v69, v70, v71, v72, v73, v74, v75, v76, v68);
      sub_10000BEB8((uint64_t)(v0 + 26), (uint64_t)(v0 + 27), v77, v51 + 42);
      sub_1000120B4();
      sub_1000583EC(v99);
      v8 = log;
      _os_log_impl((void *)&_mh_execute_header, log, v45, "no backend available for session %{public}s - %{public}s:%{public}s:%{public}s", (uint8_t *)v51, 0x2Au);
      swift_arrayDestroy(v101, 4);
      sub_1000120F8(v101);
      v16 = v51;
    }
    sub_1000120F8(v16);
LABEL_15:

LABEL_18:
    v37 = v0[17];
    goto LABEL_19;
  }
  v17 = v0[42];
  swift_errorRelease(v0[17]);
  sub_100058360(v17, v18, type metadata accessor for CachedSession);
  sub_10000CA70();
  v19 = sub_10000CA70();
  Logger.logObject.getter(v19);
  v20 = sub_10000CA38();
  v21 = os_log_type_enabled(v5, v20);
  v22 = v0[61];
  if (!v21)
  {
    v38 = sub_10001E19C();
    sub_10000B144(v38, type metadata accessor for CachedSession);
    sub_10001E19C();
    sub_10001E19C();

    goto LABEL_20;
  }
  v23 = sub_100012C5C(22);
  v103 = sub_100012C5C(64);
  v105 = v103;
  *(_DWORD *)v23 = 136446466;
  swift_bridgeObjectRetain();
  v0[15] = sub_100058368(v24, v25, &v105);
  sub_1000583F4((uint64_t)(v0 + 15), v26, v27, v23 + 12);
  v28 = sub_10000BDE4();
  sub_10000B144(v28, type metadata accessor for CachedSession);
  *(_WORD *)(v23 + 12) = 2082;
  swift_getErrorValue(v22, v0 + 16, v0 + 11);
  v29 = Error.localizedDescription.getter(v0[12], v0[13]);
  v0[18] = sub_100058390(v29, v30, v31, v32, v33, v34, v35, v36, v97, v98);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v23 + 14, v23 + 22);
  sub_10000A828();
  sub_10001E19C();
  sub_10001E19C();
  _os_log_impl((void *)&_mh_execute_header, v5, v20, "failed to process events for session %{public}s: %{public}s", (uint8_t *)v23, 0x16u);
  sub_10005843C();
  sub_1000120F8(v103);
  sub_1000120F8(v23);

  v37 = v22;
LABEL_19:
  swift_errorRelease(v37);
LABEL_20:
  v93 = qword_1000973C8;
  v0[62] = qword_1000973C8;
  if (v93)
  {
    v0[63] = *(_QWORD *)(v0[42] + 56);
    sub_100019A20();
    swift_bridgeObjectRetain();
    v94 = (_QWORD *)sub_1000156A4();
    v0[64] = v94;
    v95 = sub_10001D8D0(v94, (uint64_t)sub_1000556B4);
    sub_10003BFDC(v95, v96);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100056540()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  sub_1000110BC();
  sub_100023458(*(_QWORD *)(v0 + 336), type metadata accessor for CachedSession);
  v2 = *(_QWORD *)(v0 + 400);
  sub_10000CA70();
  v3 = sub_10000CA70();
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (sub_10001A2CC(v5))
  {
    v17 = v2;
    v6 = (uint8_t *)sub_100012C5C(12);
    v18 = sub_100012C5C(32);
    sub_1000582B8(4.8149e-34);
    v7 = sub_10000C054();
    v11 = sub_10001B29C(v7, v8, v9, v10);
    sub_100010EF4(v11);
    sub_10000A828();
    sub_10000A8B8();
    sub_10000A8B8();
    sub_100010670((void *)&_mh_execute_header, v4, v1, "error running submission: %s", v6);
    sub_10000BE60(v18);
    sub_1000120F8(v18);
    sub_1000120F8((uint64_t)v6);

    sub_10000A8B8();
    if (!v17)
      goto LABEL_6;
    goto LABEL_5;
  }
  sub_10000A8B8();
  sub_10000A8B8();
  sub_10000A8B8();

  if (v2)
  {
LABEL_5:
    v12 = sub_10005849C();
    sub_10000D20C(v12);
    v13 = (_QWORD *)sub_10001CE18((uint64_t)&unk_100089978);
    v14 = sub_1000582E8(v13);
    v15 = sub_100058448(v14, (uint64_t)&unk_100090140);
    swift_release(v15);
    sub_10000A820();
  }
LABEL_6:
  sub_10001E010();
  sub_100010D58();
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  sub_10001210C();
  sub_10000B0DC();
  sub_100010384();
  sub_10000BD30();
  return sub_10000A858(*(uint64_t (**)(void))(v0 + 8));
}

#error "100056750: call analysis failed (funcsize=81)"

uint64_t type metadata accessor for SubmitEventsActivity()
{
  return objc_opt_self(_TtC13rtcreportingd20SubmitEventsActivity);
}

uint64_t sub_10005681C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10009009C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000582B0;
  return sub_100054F0C();
}

double sub_100056860()
{
  double result;

  sub_100054218();
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_10005687C()
{
  return 0x74696D627573;
}

unint64_t sub_100056890(uint64_t a1)
{
  unint64_t result;

  result = sub_1000568B4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000568B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100090130;
  if (!qword_100090130)
  {
    v1 = type metadata accessor for SubmitEventsActivity();
    result = swift_getWitnessTable(&unk_10006F994, v1);
    atomic_store(result, &qword_100090130);
  }
  return result;
}

uint64_t sub_1000568F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_100056908, 0, 0);
}

uint64_t sub_100056908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = qword_1000973D8;
  *(_QWORD *)(v0 + 32) = qword_1000973D8;
  if (v1)
  {
    sub_100019A20();
    sub_10000F3E8();
    return sub_100010514();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100056948()
{
  uint64_t v0;

  sub_10000E4D8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 0);
  sub_10000CEA8();
  return sub_10000BD38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005697C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000569A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  sub_10001454C();
  v3 = v2;
  v4 = v0[2];
  v5 = v0[3];
  v7 = v0[4];
  v6 = v0[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10009013C);
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_10003AA44;
  return sub_1000568F0(v3, v4, v5, v7, v6);
}

unint64_t sub_100056A1C(unint64_t result)
{
  if (result >= 2)
    return swift_errorRelease(result);
  return result;
}

unint64_t sub_100056A2C()
{
  unint64_t result;

  result = qword_100090150;
  if (!qword_100090150)
  {
    result = swift_getWitnessTable(&unk_10006F9CC, &type metadata for SubmissionError);
    atomic_store(result, (unint64_t *)&qword_100090150);
  }
  return result;
}

uint64_t sub_100056A68(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001AAC8(&qword_10008E740);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_100056AA8(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  Class v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  _BYTE v26[32];
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  sub_10001AAC8(&qword_100090168);
  result = (_QWORD *)static _DictionaryStorage.copy(original:)(a1);
  v3 = result;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 64);
  v24 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v25 = (unint64_t)(v6 + 63) >> 6;
  v9 = result + 8;
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v17 = *v15;
    v16 = v15[1];
    v18 = (__int128 *)(*(_QWORD *)(a1 + 56) + 48 * i);
    *(_OWORD *)v26 = v18[1];
    *(_OWORD *)&v26[16] = v18[2];
    v27 = *v18;
    v28 = *(_OWORD *)&v26[8];
    v29 = *(_QWORD *)&v26[24];
    swift_bridgeObjectRetain();
    sub_10001E08C((uint64_t)&v27);
    sub_10001E08C((uint64_t)&v28);
    sub_10001E698(&v29);
    v19 = sub_100043D98();
    sub_10001EFD0((uint64_t)&v27);
    sub_10001EFD0((uint64_t)&v28);
    result = sub_100005400(&v29);
    *(_QWORD *)((char *)v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v20 = (_QWORD *)(v3[6] + 16 * i);
    *v20 = v17;
    v20[1] = v16;
    *(_QWORD *)(v3[7] + 8 * i) = v19;
    v21 = v3[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v23;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v12 >= v25)
      return v3;
    v13 = *(_QWORD *)(v24 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v25)
        return v3;
      v13 = *(_QWORD *)(v24 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v25)
          return v3;
        v13 = *(_QWORD *)(v24 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v25)
    return v3;
  v13 = *(_QWORD *)(v24 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v25)
      return v3;
    v13 = *(_QWORD *)(v24 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100056D00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 16) = a2;
  v5 = type metadata accessor for CachedSession(0);
  v6 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v2 + 24) = v6;
  sub_10001B93C(a1, v6, type metadata accessor for CachedSession);
  return swift_task_switch(sub_100056D80, a2, 0);
}

uint64_t sub_100056D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100010644();
  v1 = sub_100058454();
  v3 = v2;
  v4 = sub_10000781C();
  *(_QWORD *)(v0 + 32) = v3;
  if (v3)
  {
    v5 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v0 + 40) = v1;
    v6 = *(_QWORD *)(v5 + 128);
    *(_QWORD *)(v0 + 48) = v6;
    return sub_10001808C((uint64_t)sub_100056E10, v6, 0);
  }
  else
  {
    sub_10000B144(v4, type metadata accessor for CachedSession);
    sub_100010D58();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(3);
  }
}

uint64_t sub_100056E10()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  *(_BYTE *)(v0 + 64) = sub_10001F044() & 1;
  sub_10000781C();
  return sub_10001808C((uint64_t)sub_100056E60, v1, 0);
}

uint64_t sub_100056E60(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  if ((*(_BYTE *)(v1 + 64) & 1) != 0)
  {
    sub_10000B144(a1, type metadata accessor for CachedSession);
    sub_100010D58();
    return (*(uint64_t (**)(uint64_t))(v1 + 8))(3);
  }
  else
  {
    v3 = (_QWORD *)swift_task_alloc(dword_10008EC8C);
    *(_QWORD *)(v1 + 56) = v3;
    *v3 = v1;
    v3[1] = sub_100056ED4;
    return sub_10000CEF4();
  }
}

uint64_t sub_100056ED4()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001575C();
  sub_1000108A8();
  *(_BYTE *)(v1 + 65) = v0;
  sub_100030350(v2);
  sub_10000F3E8();
  return sub_100010514();
}

uint64_t sub_100056F14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(v1 + 65);
  sub_10000B144(a1, type metadata accessor for CachedSession);
  sub_100010D58();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v2);
}

uint64_t sub_100056F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD **v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[5];
  _QWORD v43[5];
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v41 = a3;
  type metadata accessor for SessionConfiguration.BackendHTTP(0);
  sub_100012C34();
  v12 = __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  v16 = (char *)&v40 - v15;
  v17 = type metadata accessor for SessionConfiguration.Backend(0);
  sub_100012C34();
  __chkstk_darwin(v18);
  sub_10000BE50();
  v21 = v20 - v19;
  v43[3] = sub_100058400();
  v43[4] = &off_100089B78;
  v43[0] = a1;
  sub_10001B93C(a2, v21, type metadata accessor for SessionConfiguration.Backend);
  if (swift_getEnumCaseMultiPayload(v21, v17) == 1)
  {
    v22 = *(_OWORD *)(v21 + 16);
    v44 = *(_OWORD *)v21;
    v45 = v22;
    v46 = *(_QWORD *)(v21 + 32);
    sub_10005802C((uint64_t)v43, (uint64_t)v42);
    v23 = type metadata accessor for BackendTTR();
    v24 = (_QWORD *)sub_100012D10(v23, 168);
    v25 = sub_10001B44C((uint64_t)v42, v42[3]);
    __chkstk_darwin(v25);
    sub_10000BE50();
    v28 = (uint64_t *)(v27 - v26);
    (*(void (**)(uint64_t))(v29 + 16))(v27 - v26);
    v30 = *v28;
    swift_retain(a1);
    v31 = (uint64_t)sub_100057AC8(&v44, v30, v24);
    sub_100015060(v42);
  }
  else
  {
    sub_10001B968(v21, (uint64_t)v16, type metadata accessor for SessionConfiguration.BackendHTTP);
    sub_10005802C((uint64_t)v43, (uint64_t)&v44);
    sub_10001B93C((uint64_t)v16, (uint64_t)v14, type metadata accessor for SessionConfiguration.BackendHTTP);
    swift_retain(a1);
    sub_100019A20();
    sub_100010644();
    sub_100040654(a5 & 1, v42);
    v32 = type metadata accessor for BackendHTTP(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v34 = sub_10001B44C((uint64_t)&v44, *((uint64_t *)&v45 + 1));
    __chkstk_darwin(v34);
    sub_10000BE50();
    v37 = (_QWORD **)(v36 - v35);
    (*(void (**)(uint64_t))(v38 + 16))(v36 - v35);
    v31 = sub_100057528(*v37, a6, v14, v41, a4, (uint64_t)v42, v33);
    sub_100015060(&v44);
    sub_100023458((uint64_t)v16, type metadata accessor for SessionConfiguration.BackendHTTP);
  }
  sub_100015060(v43);
  return v31;
}

uint64_t sub_10005721C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  _BYTE v36[4];
  int v37;
  uint64_t v38;
  _QWORD v39[5];
  _QWORD v40[5];
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v37 = a5;
  v38 = a3;
  v10 = type metadata accessor for SessionConfiguration.BackendHTTP(0);
  v11 = __chkstk_darwin(v10);
  v13 = &v36[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v15 = &v36[-v14];
  v16 = type metadata accessor for SessionConfiguration.Backend(0);
  __chkstk_darwin(v16);
  v18 = &v36[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v40[3] = type metadata accessor for CachedSession(0);
  v40[4] = &off_100089B20;
  v19 = sub_100027AC4(v40);
  sub_10001B93C(a1, (uint64_t)v19, type metadata accessor for CachedSession);
  sub_10001B93C(a2, (uint64_t)v18, type metadata accessor for SessionConfiguration.Backend);
  if (swift_getEnumCaseMultiPayload(v18, v16) == 1)
  {
    v20 = *((_OWORD *)v18 + 1);
    v41 = *(_OWORD *)v18;
    v42 = v20;
    v43 = *((_QWORD *)v18 + 4);
    sub_10005802C((uint64_t)v40, (uint64_t)v39);
    v21 = type metadata accessor for BackendTTR();
    v22 = (_QWORD *)swift_allocObject(v21, 168, 15);
    v23 = sub_10001B44C((uint64_t)v39, v39[3]);
    __chkstk_darwin(v23);
    v25 = &v36[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(_BYTE *))(v26 + 16))(v25);
    v27 = (uint64_t)sub_100057D58(&v41, (uint64_t)v25, v22);
    sub_100015060(v39);
  }
  else
  {
    sub_10001B968((uint64_t)v18, (uint64_t)v15, type metadata accessor for SessionConfiguration.BackendHTTP);
    sub_10005802C((uint64_t)v40, (uint64_t)&v41);
    sub_10001B93C((uint64_t)v15, (uint64_t)v13, type metadata accessor for SessionConfiguration.BackendHTTP);
    swift_retain(a6);
    v28 = a4;
    swift_bridgeObjectRetain();
    sub_100040654(v37 & 1, v39);
    v29 = type metadata accessor for BackendHTTP(0);
    v30 = swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    v31 = sub_10001B44C((uint64_t)&v41, *((uint64_t *)&v42 + 1));
    __chkstk_darwin(v31);
    v33 = &v36[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(_BYTE *))(v34 + 16))(v33);
    v27 = sub_1000577D0((uint64_t)v33, a6, v13, v38, v28, v39, v30);
    sub_100015060(&v41);
    sub_100023458((uint64_t)v15, type metadata accessor for SessionConfiguration.BackendHTTP);
  }
  sub_100015060(v40);
  return v27;
}

uint64_t sub_100057528(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;
  int *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  swift_defaultActor_initialize(a7);
  v14 = (_QWORD *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_clientID);
  *v14 = a4;
  v14[1] = a5;
  *(_QWORD *)(a7 + 112) = a2;
  v15 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0);
  v16 = (char *)a3 + v15[6];
  v17 = a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_url;
  v18 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v17, v16, v18);
  v36 = (_QWORD *)a6;
  sub_10005802C(a6, a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_target);
  v19 = a1[15];
  v20 = a1[25];
  v34 = a1[24];
  v35 = a1[14];
  v21 = a1[27];
  v22 = a1[29];
  v32 = a1[28];
  v33 = a1[26];
  v31 = *((_BYTE *)a3 + v15[8]);
  v23 = qword_10008E080;
  swift_retain(a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v23 != -1)
    swift_once(&qword_10008E080, sub_1000584B0);
  if (byte_1000973F0 == 1)
  {
    if (qword_10008E098 != -1)
      swift_once(&qword_10008E098, sub_1000585B8);
    v24 = byte_100097401;
    swift_release(a2);
    if (v24)
      v25 = 5;
    else
      v25 = 1;
  }
  else
  {
    swift_release(a2);
    v25 = 0;
  }
  sub_100015060(v36);
  v26 = a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_extraHeaders;
  *(_QWORD *)v26 = v25;
  *(_QWORD *)(v26 + 8) = v34;
  *(_QWORD *)(v26 + 16) = v20;
  *(_QWORD *)(v26 + 24) = v33;
  *(_QWORD *)(v26 + 32) = v21;
  *(_QWORD *)(v26 + 40) = v32;
  *(_QWORD *)(v26 + 48) = v22;
  *(_BYTE *)(v26 + 56) = v31;
  *(_QWORD *)(v26 + 64) = v35;
  *(_QWORD *)(v26 + 72) = v19;
  *(_QWORD *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_filters) = *(_QWORD *)((char *)a3 + v15[7]);
  v27 = a3[1];
  v28 = (_QWORD *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_name);
  *v28 = *a3;
  v28[1] = v27;
  *(_QWORD *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_allowedCategories) = *(_QWORD *)((char *)a3 + v15[9]);
  *(_QWORD *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_deniedCategories) = *(_QWORD *)((char *)a3 + v15[10]);
  v29 = *((_BYTE *)a3 + v15[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100023458((uint64_t)a3, type metadata accessor for SessionConfiguration.BackendHTTP);
  *(_BYTE *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_skipLogging) = v29;
  swift_release(a1);
  return a7;
}

uint64_t sub_1000577D0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t (*v17)(_QWORD);
  _QWORD *v18;
  int *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  v14 = type metadata accessor for CachedSession(0);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001B968(a1, (uint64_t)v16, v17);
  swift_defaultActor_initialize(a7);
  v18 = (_QWORD *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_clientID);
  *v18 = a4;
  v18[1] = a5;
  *(_QWORD *)(a7 + 112) = a2;
  v19 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0);
  v20 = (char *)a3 + v19[6];
  v21 = a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_url;
  v22 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, v20, v22);
  v45 = a6;
  sub_10005802C((uint64_t)a6, a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_target);
  v23 = v16[6];
  v24 = v16[7];
  v25 = v16[1];
  v43 = *v16;
  v44 = v23;
  v26 = v16[2];
  v27 = v16[3];
  v28 = v16[5];
  v41 = v16[4];
  v42 = v26;
  HIDWORD(v40) = *((unsigned __int8 *)a3 + v19[8]);
  v29 = qword_10008E080;
  swift_retain(a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v29 != -1)
    swift_once(&qword_10008E080, sub_1000584B0);
  if (byte_1000973F0 == 1)
  {
    if (qword_10008E098 != -1)
      swift_once(&qword_10008E098, sub_1000585B8);
    v30 = byte_100097401;
    swift_release(a2);
    if (v30)
      v31 = 5;
    else
      v31 = 1;
  }
  else
  {
    swift_release(a2);
    v31 = 0;
  }
  sub_100015060(v45);
  v32 = a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_extraHeaders;
  v33 = v43;
  *(_QWORD *)v32 = v31;
  *(_QWORD *)(v32 + 8) = v33;
  v34 = v42;
  *(_QWORD *)(v32 + 16) = v25;
  *(_QWORD *)(v32 + 24) = v34;
  v35 = v41;
  *(_QWORD *)(v32 + 32) = v27;
  *(_QWORD *)(v32 + 40) = v35;
  *(_QWORD *)(v32 + 48) = v28;
  *(_BYTE *)(v32 + 56) = BYTE4(v40);
  *(_QWORD *)(v32 + 64) = v44;
  *(_QWORD *)(v32 + 72) = v24;
  *(_QWORD *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_filters) = *(_QWORD *)((char *)a3 + v19[7]);
  v36 = a3[1];
  v37 = (_QWORD *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_name);
  *v37 = *a3;
  v37[1] = v36;
  *(_QWORD *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_allowedCategories) = *(_QWORD *)((char *)a3 + v19[9]);
  *(_QWORD *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_deniedCategories) = *(_QWORD *)((char *)a3 + v19[10]);
  v38 = *((_BYTE *)a3 + v19[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100023458((uint64_t)a3, type metadata accessor for SessionConfiguration.BackendHTTP);
  *(_BYTE *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_skipLogging) = v38;
  sub_100023458((uint64_t)v16, type metadata accessor for CachedSession);
  return a7;
}

_QWORD *sub_100057AC8(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  swift_defaultActor_initialize(a3);
  v7 = a1[2];
  v6 = a1[3];
  v24 = a1[4];
  v8 = v24;
  v25 = v6;
  a3[14] = v6;
  a3[15] = v8;
  v23 = v7;
  sub_10001E698(&v25);
  sub_10001E698(&v24);
  v9 = sub_100056AA8(v7);
  v10 = a1[1];
  a3[18] = v9;
  a3[19] = v10;
  sub_100005400(&v23);
  sub_100005400(&v25);
  sub_100005400(&v24);
  v11 = *(_QWORD *)(a2 + 200);
  a3[16] = *(_QWORD *)(a2 + 192);
  a3[17] = v11;
  v12 = qword_10008E080;
  swift_bridgeObjectRetain();
  if (v12 != -1)
    swift_once(&qword_10008E080, sub_1000584B0);
  if (byte_1000973F0 == 1)
  {
    if (qword_10008E0B0 != -1)
      swift_once(&qword_10008E0B0, sub_10006020C);
    if (off_100097420)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR____TtC13rtcreportingd7Session_user + 4))
        v13 = 0;
      else
        v13 = *(unsigned int *)(a2 + OBJC_IVAR____TtC13rtcreportingd7Session_user);
      a3[20] = (id)off_100097420(v13);
      if (qword_10008E0B8 != -1)
        swift_once(&qword_10008E0B8, sub_100060228);
      v14 = type metadata accessor for Logger(0);
      v15 = sub_100015718(v14, (uint64_t)qword_100097428);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v16, v17))
        goto LABEL_20;
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      v19 = "initialized RTCTTR framework";
    }
    else
    {
      a3[20] = 0;
      if (qword_10008E0B8 != -1)
        swift_once(&qword_10008E0B8, sub_100060228);
      v20 = type metadata accessor for Logger(0);
      v21 = sub_100015718(v20, (uint64_t)qword_100097428);
      v16 = Logger.logObject.getter(v21);
      v17 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v16, v17))
        goto LABEL_20;
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      v19 = "failed to initialize RTCTTR framework";
    }
    _os_log_impl((void *)&_mh_execute_header, v16, v17, v19, v18, 2u);
    swift_slowDealloc(v18, -1, -1);
LABEL_20:
    swift_release(a2);

    return a3;
  }
  a3[20] = 0;
  swift_release(a2);
  return a3;
}

_QWORD *sub_100057D58(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for CachedSession(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001B968(a2, (uint64_t)v8, v9);
  swift_defaultActor_initialize(a3);
  v11 = a1[2];
  v10 = a1[3];
  v30 = a1[4];
  v12 = v30;
  v31 = v10;
  a3[14] = v10;
  a3[15] = v12;
  v29 = v11;
  sub_10001E698(&v31);
  sub_10001E698(&v30);
  v13 = sub_100056AA8(v11);
  v14 = a1[1];
  a3[18] = v13;
  a3[19] = v14;
  sub_100005400(&v29);
  sub_100005400(&v31);
  sub_100005400(&v30);
  v15 = v8[1];
  a3[16] = *v8;
  a3[17] = v15;
  v16 = qword_10008E080;
  swift_bridgeObjectRetain();
  if (v16 != -1)
    swift_once(&qword_10008E080, sub_1000584B0);
  if (byte_1000973F0 == 1)
  {
    if (qword_10008E0B0 != -1)
      swift_once(&qword_10008E0B0, sub_10006020C);
    if (off_100097420)
    {
      v17 = (unsigned int *)((char *)v8 + *(int *)(v6 + 36));
      if (*((_BYTE *)v17 + 4))
        v18 = 0;
      else
        v18 = *v17;
      a3[20] = (id)off_100097420(v18);
      if (qword_10008E0B8 != -1)
        swift_once(&qword_10008E0B8, sub_100060228);
      v19 = type metadata accessor for Logger(0);
      v20 = sub_100015718(v19, (uint64_t)qword_100097428);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v21, v22))
        goto LABEL_20;
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      v24 = "initialized RTCTTR framework";
    }
    else
    {
      a3[20] = 0;
      if (qword_10008E0B8 != -1)
        swift_once(&qword_10008E0B8, sub_100060228);
      v25 = type metadata accessor for Logger(0);
      v26 = sub_100015718(v25, (uint64_t)qword_100097428);
      v21 = Logger.logObject.getter(v26);
      v22 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v21, v22))
        goto LABEL_20;
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      v24 = "failed to initialize RTCTTR framework";
    }
    _os_log_impl((void *)&_mh_execute_header, v21, v22, v24, v23, 2u);
    swift_slowDealloc(v23, -1, -1);
LABEL_20:

    goto LABEL_21;
  }
  a3[20] = 0;
LABEL_21:
  sub_100023458((uint64_t)v8, type metadata accessor for CachedSession);
  return a3;
}

void sub_10005802C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_10000BF94();
}

_QWORD *initializeBufferWithCopyOfBuffer for SubmissionError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2;
  if (*a2 >= 0xFFFFFFFFuLL)
    swift_errorRetain(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for SubmissionError(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_errorRelease(result);
  return result;
}

unint64_t *assignWithCopy for SubmissionError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
      swift_errorRetain(*a2);
    *a1 = v4;
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain(*a2);
    v5 = *a1;
    *a1 = v4;
    swift_errorRelease(v5);
  }
  return a1;
}

_QWORD *initializeWithTake for SubmissionError(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for SubmissionError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubmissionError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SubmissionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_100058268(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_100058280(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SubmissionError()
{
  return &type metadata for SubmissionError;
}

uint64_t sub_1000582B8(float a1)
{
  uint64_t v1;
  uint64_t v2;
  float *v3;
  uint64_t v4;

  *v3 = a1;
  return swift_getErrorValue(v2, v1, v4);
}

uint64_t sub_1000582D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a1 + 8, v2, v1);
}

uint64_t sub_1000582E8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  a1[2] = 0;
  a1[3] = 0;
  a1[4] = v2;
  a1[5] = v1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_1000582FC@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

unint64_t sub_100058310()
{
  unint64_t v0;

  return sub_100056A1C(v0);
}

uint64_t sub_100058318@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 336);
}

uint64_t sub_100058330(uint64_t a1, uint64_t a2, ...)
{
  unint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  return sub_100014F94(v3, v2, (uint64_t *)va);
}

void sub_100058340(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_100023458(v2, a2);
}

uint64_t sub_100058348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  unint64_t v9;
  va_list va;

  va_start(va, a8);
  return sub_100014F94(v8, v9, (uint64_t *)va);
}

void sub_100058358(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10001B93C(a1, a2, v2);
}

void sub_100058360(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10001B93C(a1, v3, a3);
}

uint64_t sub_100058368(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return sub_100014F94(v3, v4, a3);
}

void sub_100058374(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_100023458(v2, a2);
}

__n128 sub_10005837C(__n128 a1)
{
  __n128 *v1;
  uint64_t v2;
  __n128 *v3;
  _OWORD *v4;
  __n128 result;
  __int128 v6;

  *v1 = a1;
  result = *(__n128 *)(v2 + 32);
  v6 = *(_OWORD *)(v2 + 48);
  *v3 = result;
  *v4 = v6;
  return result;
}

uint64_t sub_100058390(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  return sub_100014F94(a1, a2, (uint64_t *)va);
}

uint64_t sub_10005839C()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 272));
}

uint64_t sub_1000583A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_1000583BC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000583D0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 3);
}

uint64_t sub_1000583DC()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 112));
}

uint64_t sub_1000583E4()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 256));
}

void sub_1000583EC(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_100023458(a1, v1);
}

uint64_t sub_1000583F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v4, v5, a4);
}

uint64_t sub_100058400()
{
  return type metadata accessor for Session(0);
}

void sub_100058408()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 208) = **(_QWORD **)(v0 + 216);
}

uint64_t sub_10005841C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  result = *(_QWORD *)(v3 + 248);
  *(_QWORD *)(v1 + 16) = v4;
  v7 = v1 + 16 * v5;
  *(_QWORD *)(v7 + 32) = v0;
  *(_QWORD *)(v7 + 40) = v2;
  return result;
}

uint64_t sub_100058430(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_getErrorValue(a1, v1, v2);
}

uint64_t sub_10005843C()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 2);
}

uint64_t sub_100058448(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return sub_10002E7AC(v3, a2, v2);
}

uint64_t sub_100058454()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10000D36C(v1, v0);
}

uint64_t sub_100058460()
{
  return 0;
}

uint64_t sub_100058474()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100058488()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 224));
}

uint64_t sub_100058494()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 96));
}

uint64_t sub_10005849C()
{
  return type metadata accessor for TaskPriority(0);
}

uint64_t sub_1000584A8()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 96));
}

uint64_t sub_1000584B0()
{
  uint64_t result;

  result = os_variant_has_internal_diagnostics("com.apple.rtcreporting");
  byte_1000973F0 = result;
  return result;
}

id sub_1000584D4()
{
  id v0;
  id result;

  v0 = objc_allocWithZone((Class)NSUserDefaults);
  result = sub_100059F28(0xD000000000000016, 0x8000000100072CC0);
  if (result)
    qword_1000973F8 = (uint64_t)result;
  else
    __break(1u);
  return result;
}

void sub_100058528()
{
  id v0;
  NSString v1;
  unsigned __int8 v2;

  if (qword_10008E088 != -1)
    swift_once(&qword_10008E088, sub_1000584D4);
  v0 = (id)qword_1000973F8;
  v1 = String._bridgeToObjectiveC()();
  v2 = sub_10005A090((uint64_t)v1, "BOOLForKey:");

  byte_100097400 = v2;
  sub_10000AF64();
}

void sub_1000585B8()
{
  id v0;
  NSString v1;
  unsigned __int8 v2;
  BOOL v3;
  id v4;
  NSString v5;
  id v6;

  if (qword_10008E088 != -1)
    swift_once(&qword_10008E088, sub_1000584D4);
  v0 = (id)qword_1000973F8;
  v1 = String._bridgeToObjectiveC()();
  v2 = sub_10005A090((uint64_t)v1, "BOOLForKey:");

  if ((v2 & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    v4 = (id)qword_1000973F8;
    v5 = sub_10001A220();
    v6 = objc_msgSend(v4, "integerForKey:", v5);

    v3 = v6 == (id)5;
  }
  byte_100097401 = v3;
  sub_10000AF64();
}

void sub_100058690()
{
  id v0;
  NSString v1;
  unsigned __int8 v2;

  if (qword_10008E080 != -1)
    swift_once(&qword_10008E080, sub_1000584B0);
  if (byte_1000973F0 == 1)
  {
    if (qword_10008E088 != -1)
      swift_once(&qword_10008E088, sub_1000584D4);
    v0 = (id)qword_1000973F8;
    v1 = String._bridgeToObjectiveC()();
    v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  }
  else
  {
    v2 = 0;
  }
  byte_100097402 = v2;
  sub_10000AF64();
}

void sub_100058768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  unsigned int v14;
  id v15;
  NSString v16;
  id v17;
  id v18;
  NSString v19;
  id v20;
  _QWORD *v21;
  NSObject *v22;
  os_log_type_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Swift::String v36;
  void *v37;
  Swift::String v38;
  _QWORD v39[3];
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;

  v0 = sub_10000F3D0();
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001AAC8((uint64_t *)&unk_1000903E0);
  __chkstk_darwin(v4);
  v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = String._bridgeToObjectiveC()();
  _CFPreferencesSetBackupDisabled(v7, kCFPreferencesCurrentUser, kCFPreferencesAnyHost, 0, 1);

  v8 = type metadata accessor for TaskPriority(0);
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)v6, 1, 1, v8);
  type metadata accessor for MainActor(0);
  v9 = static MainActor.shared.getter();
  v10 = swift_allocObject(&unk_100089A78, 32, 7);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = &protocol witness table for MainActor;
  v11 = sub_10005A888((uint64_t)v6, (uint64_t)&unk_100090190, v10);
  swift_release(v11);
  v43 = &_swiftEmptySetSingleton;
  if (qword_10008E090 != -1)
    swift_once(&qword_10008E090, sub_100058528);
  if (byte_100097400 == 1)
  {
    sub_100006354((uint64_t *)&v41, 0xD000000000000011, 0x8000000100072CA0);
    sub_10001B338();
  }
  if (qword_10008E088 != -1)
    swift_once(&qword_10008E088, sub_1000584D4);
  v12 = sub_10001B04C();
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v12, "BOOLForKey:", v13);

  if (v14)
  {
    sub_100006354((uint64_t *)&v41, 0x50656C6261736964, 0xEB0000000054534FLL);
    sub_10001B338();
  }
  v15 = sub_10001B04C();
  v16 = sub_10001A220();
  v17 = sub_100011270();

  if (v17)
  {
    sub_10000C000();
    swift_unknownObjectRelease(v17);
    sub_10001A304();
    sub_10000A930(0xD000000000000013, (uint64_t)"environmentOverride");
    sub_10001B338();
  }
  else
  {
    v41 = 0u;
    v42 = 0u;
    sub_10001A304();
  }
  if (qword_10008E098 != -1)
    swift_once(&qword_10008E098, sub_1000585B8);
  if (byte_100097401 == 1)
  {
    sub_100006354((uint64_t *)&v41, 0x6976654474736574, 0xEA00000000006563);
    sub_10001B338();
  }
  v18 = sub_10001B04C();
  v19 = String._bridgeToObjectiveC()();
  v20 = sub_100011270();

  if (v20)
  {
    sub_10000C000();
    swift_unknownObjectRelease(v20);
    sub_10001A304();
    sub_100006354((uint64_t *)&v41, 0x436465776F6C6C61, 0xEE0073746E65696CLL);
    sub_10001B338();
  }
  else
  {
    v41 = 0u;
    v42 = 0u;
    sub_10001A304();
  }
  if (qword_10008E0A0 != -1)
    swift_once(&qword_10008E0A0, sub_100058690);
  if (byte_100097402 == 1)
  {
    sub_10000A930(0xD000000000000014, (uint64_t)"ignoreCacheSizeLimit");
    sub_10001B338();
  }
  sub_1000106FC();
  v21 = v43;
  swift_bridgeObjectRetain_n(v43, 2);
  v22 = sub_100018E8C();
  v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (_DWORD *)sub_100012C5C(12);
    v25 = sub_100012C5C(32);
    v40 = v25;
    *v24 = 136315138;
    if (v21[2])
    {
      *(_QWORD *)&v41 = 0x6769666E6F632820;
      *((_QWORD *)&v41 + 1) = 0xEA0000000000203ALL;
      v39[2] = v21;
      swift_bridgeObjectRetain();
      v28 = sub_10001AAC8(&qword_100090198);
      v29 = sub_10005A010();
      v39[1] = v3;
      v30 = v1;
      v31 = v29;
      v32 = sub_100019414();
      v33 = Sequence<>.joined(separator:)(44, 0xE100000000000000, v28, v31, v32);
      v35 = v34;
      swift_bridgeObjectRelease(v21);
      v36._countAndFlagsBits = v33;
      v36._object = v35;
      String.append(_:)(v36);
      v37 = v35;
      v1 = v30;
      swift_bridgeObjectRelease(v37);
      v38._countAndFlagsBits = 41;
      v38._object = (void *)0xE100000000000000;
      String.append(_:)(v38);
      v27 = *((_QWORD *)&v41 + 1);
      v26 = v41;
    }
    else
    {
      v26 = 0;
      v27 = 0xE000000000000000;
    }
    *(_QWORD *)&v41 = sub_100014F94(v26, v27, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, (char *)&v41 + 8, v24 + 1, v24 + 3);
    sub_100010E40();
    sub_10000A828();
    sub_10001D970((void *)&_mh_execute_header, v22, v23, "starting rtcreportingd%s");
    sub_10001DA34();
    sub_1000120F8(v25);
    sub_1000120F8((uint64_t)v24);

  }
  else
  {

    sub_100010E40();
  }
  sub_100011160(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  dispatch_main();
}

uint64_t sub_100058D10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = type metadata accessor for URL(0);
  v0[9] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[10] = v2;
  v3 = (*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[11] = swift_task_alloc(v3);
  v0[12] = swift_task_alloc(v3);
  v4 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for SQLiteDB.Location(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[13] = swift_task_alloc(v4);
  v0[14] = swift_task_alloc(v4);
  v5 = type metadata accessor for Logger(0);
  v0[15] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[16] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[17] = swift_task_alloc(v7);
  v0[18] = swift_task_alloc(v7);
  v0[19] = type metadata accessor for MainActor(0);
  v0[20] = static MainActor.shared.getter();
  v8 = type metadata accessor for TransparencyLog();
  swift_allocObject(v8, 136, 15);
  v9 = (_QWORD *)swift_task_alloc(dword_10008E9E4);
  v0[21] = v9;
  *v9 = v0;
  v9[1] = sub_100058E50;
  return sub_10002A7A4();
}

uint64_t sub_100058E50(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 168));
  if (v1)
    swift_errorRelease(v1);
  else
    *(_QWORD *)(v4 + 176) = a1;
  sub_100010424();
  return sub_1000105F4();
}

uint64_t sub_100058F38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = qword_1000973E8;
  qword_1000973E8 = v0[22];
  swift_release(v1);
  v2 = type metadata accessor for DiskCache();
  v0[23] = v2;
  sub_100012D10(v2, 120);
  v3 = (_QWORD *)swift_task_alloc(dword_10008F65C);
  v0[24] = v3;
  sub_10000B064(v3, (uint64_t)sub_10005905C);
  return sub_10001D1E4(0);
}

uint64_t sub_100058FCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = qword_1000973E8;
  qword_1000973E8 = 0;
  swift_release(v1);
  v2 = type metadata accessor for DiskCache();
  *(_QWORD *)(v0 + 184) = v2;
  sub_100012D10(v2, 120);
  v3 = (_QWORD *)swift_task_alloc(dword_10008F65C);
  *(_QWORD *)(v0 + 192) = v3;
  sub_10000B064(v3, (uint64_t)sub_10005905C);
  return sub_10001D1E4(0);
}

uint64_t sub_10005905C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 192);
  *(_QWORD *)(*(_QWORD *)v2 + 200) = v1;
  swift_task_dealloc(v5);
  v6 = v4[19];
  if (v1)
  {
    v4[27] = dispatch thunk of Actor.unownedExecutor.getter(v6);
    v4[28] = v7;
  }
  else
  {
    v4[26] = a1;
    dispatch thunk of Actor.unownedExecutor.getter(v6);
  }
  return sub_1000105F4();
}

uint64_t sub_10005914C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char v6;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = v0[26];
  v0[29] = v2;
  v3 = qword_1000973C8;
  qword_1000973C8 = v2;
  swift_retain(v2);
  swift_release(v3);
  v5 = qword_1000973E8 == 0;
  v4 = qword_1000973C8;
  v0[30] = qword_1000973E8;
  v0[31] = v4;
  v5 = v5 || v4 == 0;
  v6 = v5;
  if (v5)
  {
    v7 = sub_10001C79C();
    Logger.logObject.getter(v7);
    v8 = sub_100015CB4();
    if (sub_1000108D4(v8))
    {
      v9 = (_WORD *)sub_100012C5C(2);
      sub_1000078D0(v9);
      sub_10001CD18((void *)&_mh_execute_header, v10, v11, "reporting disabled due to startup failure");
      sub_1000120F8(v1);
    }
    sub_10001AF74();
    sub_10001D318();
  }
  v12 = sub_10001D0B8();
  sub_100012D10(v12, 128);
  v13 = sub_10001956C();
  sub_10001B0F4(v13);
  v14 = sub_10001CFFC();
  sub_100012D10(v14, 176);
  v15 = (_QWORD *)swift_task_alloc(dword_10008F27C);
  v0[32] = v15;
  sub_10000B064(v15, (uint64_t)sub_1000596A0);
  return sub_10001BAA4(v6);
}

void sub_100059264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSURL *v23;
  void *v24;
  void *v25;
  void (*v26)(uint64_t, uint64_t);
  id v27;
  _QWORD *v28;
  char v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 40) = v1;
  swift_errorRetain(v1);
  v2 = sub_10001AAC8(&qword_10008E7E8);
  if (!swift_dynamicCast(v0 + 352, v0 + 40, v2, &type metadata for DiskCacheError, 6)
    || (*(_BYTE *)(v0 + 352) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + 200);
    sub_1000106FC();
    swift_errorRetain(v3);
    swift_errorRetain(v3);
    v4 = sub_100018E8C();
    v5 = static os_log_type_t.error.getter();
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 128);
    v8 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 120);
    if (v6)
    {
      v43 = *(_QWORD *)(v0 + 120);
      v42 = *(_QWORD *)(v0 + 128);
      v11 = (_DWORD *)sub_100012C5C(12);
      v12 = sub_100012C5C(32);
      v44 = v12;
      *v11 = 136446210;
      swift_getErrorValue(v7, v0 + 56, v0 + 16);
      v13 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
      *(_QWORD *)(v0 + 64) = sub_100014F94(v13, v14, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v11 + 1, v11 + 3);
      sub_10000A828();
      sub_1000121D0();
      sub_1000121D0();
      sub_10001D970((void *)&_mh_execute_header, v4, v5, "failed to open database file: %{public}s");
      swift_arrayDestroy(v12, 1);
      sub_1000120F8(v12);
      sub_1000120F8((uint64_t)v11);

      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v8, v43);
    }
    else
    {
      sub_1000121D0();
      sub_1000121D0();

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    }
  }
  sub_10003AA84(0, *(_QWORD *)(v0 + 112));
  v17 = *(_QWORD *)(v0 + 104);
  v18 = *(_QWORD *)(v0 + 72);
  sub_100023414(*(_QWORD *)(v0 + 112), v17);
  if (_s10RTCUtility9XPCObjectOwet_0(v17, 1, v18) == 1)
  {
    sub_10005A054(*(_QWORD *)(v0 + 104));
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "rtcreportingd/Main.swift", 24, 2);
    sub_100019ADC();
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 88);
    v20 = *(_QWORD *)(v0 + 72);
    v21 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v21 + 32))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), v20);
    v22 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    URL.deletingLastPathComponent()();
    URL._bridgeToObjectiveC()(v23);
    v25 = v24;
    v26 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    *(_QWORD *)(v0 + 320) = v26;
    v26(v19, v20);
    *(_QWORD *)(v0 + 48) = 0;
    LODWORD(v19) = objc_msgSend(v22, "removeItemAtURL:error:", v25, v0 + 48);

    v27 = *(id *)(v0 + 48);
    if (!(_DWORD)v19)
    {
      v30 = v27;
      v31 = *(_QWORD *)(v0 + 112);
      v32 = *(_QWORD *)(v0 + 96);
      v33 = *(_QWORD *)(v0 + 72);
      swift_release(*(_QWORD *)(v0 + 160));
      _convertNSErrorToError(_:)(v30);

      swift_willThrow(v34, v35, v36, v37, v38, v39, v40, v41);
      sub_10000D2B4();
      v26(v32, v33);
      sub_10005A054(v31);
      v15 = *(_QWORD *)(v0 + 136);
      swift_task_dealloc(*(_QWORD *)(v0 + 144));
      swift_task_dealloc(v15);
      sub_1000111E4();
      sub_10000BFB0();
      sub_10001210C();
      sub_10000B0DC();
      sub_100019ADC();
      __asm { BR              X0 }
    }
    sub_100012D10(*(_QWORD *)(v0 + 184), 120);
    v28 = (_QWORD *)swift_task_alloc(dword_10008F65C);
    *(_QWORD *)(v0 + 328) = v28;
    *v28 = v0;
    v28[1] = sub_100059A70;
    sub_100019ADC();
    sub_10003AFB0(v29);
  }
}

uint64_t sub_1000596A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000154D0();
  v1 = v0[32];
  v2 = v0[19];
  v0[33] = v3;
  swift_task_dealloc(v1);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2);
  v0[34] = v4;
  v0[35] = v5;
  return sub_10001808C((uint64_t)sub_100059734, v4, v5);
}

uint64_t sub_100059734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  __n128 v15;

  if (*(_QWORD *)(v0 + 240))
    v3 = *(_QWORD *)(v0 + 248) == 0;
  else
    v3 = 1;
  v4 = v3;
  v5 = qword_1000973D8;
  qword_1000973D8 = *(_QWORD *)(v0 + 264);
  swift_release(v5);
  v6 = type metadata accessor for Listener();
  swift_allocObject(v6, 49, 7);
  v7 = sub_100061D2C(v4);
  v8 = qword_1000973D0;
  qword_1000973D0 = v7;
  swift_release(v8);
  if (qword_10008E060 != -1)
    swift_once(&qword_10008E060, sub_10004A874);
  v9 = qword_100097398;
  *(_QWORD *)(v0 + 288) = qword_100097398;
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v14 = v9;
    else
      v14 = v9 & 0xFFFFFFFFFFFFFF8;
    v15 = swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter(v14, v15);
  }
  else
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)(v0 + 296) = v10;
  if (v10)
  {
    if (v10 < 1)
      __break(1u);
    *(_QWORD *)(v0 + 304) = 0;
    v11 = *(_QWORD *)(v0 + 288);
    if ((v11 & 0xC000000000000001) != 0)
    {
      v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v11);
    }
    else
    {
      v12 = *(_QWORD *)(v11 + 32);
      sub_100019A20();
    }
    *(_QWORD *)(v0 + 312) = v12;
    return sub_10001E028((uint64_t)sub_1000598F4, v12, 0);
  }
  else
  {
    sub_10001C4E4();
    sub_10000A828();
    sub_1000104E8();
    sub_1000111E4();
    sub_10000BFB0();
    sub_10001210C();
    sub_10000B0DC();
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    return sub_100012228(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_1000598F4()
{
  _QWORD *v0;
  BOOL v1;
  char v2;

  if (v0[30])
    v1 = v0[31] == 0;
  else
    v1 = 1;
  v2 = v1;
  sub_1000493BC(v2);
  return swift_task_switch(sub_100059968, v0[34], v0[35]);
}

uint64_t sub_100059968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 296);
  swift_release(*(_QWORD *)(v0 + 312));
  if (v3 + 1 == v4)
  {
    sub_10001C4E4();
    sub_10000A828();
    sub_1000104E8();
    sub_1000111E4();
    sub_10000BFB0();
    sub_10001210C();
    sub_10000B0DC();
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    return sub_100012228(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 304) + 1;
    *(_QWORD *)(v0 + 304) = v6;
    v7 = *(_QWORD *)(v0 + 288);
    if ((v7 & 0xC000000000000001) != 0)
    {
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      v8 = *(_QWORD *)(v7 + 8 * v6 + 32);
      sub_100019A20();
    }
    *(_QWORD *)(v0 + 312) = v8;
    return sub_10001E028((uint64_t)sub_1000598F4, v8, 0);
  }
}

uint64_t sub_100059A70(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;

  sub_1000154D0();
  v5 = v2[41];
  *v6 = *v3;
  v2[42] = v1;
  swift_task_dealloc(v5);
  if (v1)
    return sub_10001808C((uint64_t)sub_100059C40, v2[27], v2[28]);
  v2[43] = a1;
  return sub_10001808C((uint64_t)sub_100059B10, v2[27], v2[28]);
}

uint64_t sub_100059B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char v6;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = *(_QWORD *)(v0 + 344);
  swift_errorRelease(*(_QWORD *)(v0 + 200));
  v3 = *(_QWORD *)(v0 + 112);
  sub_10000B14C(*(uint64_t (**)(_QWORD, _QWORD))(v0 + 320));
  sub_10005A054(v3);
  *(_QWORD *)(v0 + 232) = v2;
  qword_1000973C8 = v2;
  sub_100019A20();
  sub_1000104E8();
  v5 = qword_1000973E8 == 0;
  v4 = qword_1000973C8;
  *(_QWORD *)(v0 + 240) = qword_1000973E8;
  *(_QWORD *)(v0 + 248) = v4;
  v5 = v5 || v4 == 0;
  v6 = v5;
  if (v5)
  {
    v7 = sub_10001C79C();
    Logger.logObject.getter(v7);
    v8 = sub_100015CB4();
    if (sub_1000108D4(v8))
    {
      v9 = (_WORD *)sub_100012C5C(2);
      sub_1000078D0(v9);
      sub_10001CD18((void *)&_mh_execute_header, v10, v11, "reporting disabled due to startup failure");
      sub_1000120F8(v1);
    }
    sub_10001AF74();
    sub_10001D318();
  }
  v12 = sub_10001D0B8();
  sub_100012D10(v12, 128);
  v13 = sub_10001956C();
  sub_10001B0F4(v13);
  v14 = sub_10001CFFC();
  sub_100012D10(v14, 176);
  v15 = (_QWORD *)swift_task_alloc(dword_10008F27C);
  *(_QWORD *)(v0 + 256) = v15;
  sub_10000B064(v15, (uint64_t)sub_1000596A0);
  return sub_10001BAA4(v6);
}

uint64_t sub_100059C40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t v9;
  os_log_type_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 200);
  sub_100059D80(v2);
  swift_errorRelease(v2);
  swift_errorRelease(v3);
  v4 = *(_QWORD *)(v0 + 112);
  sub_10000B14C(*(uint64_t (**)(_QWORD, _QWORD))(v0 + 320));
  sub_10005A054(v4);
  *(_QWORD *)(v0 + 232) = 0;
  v5 = qword_1000973C8;
  qword_1000973C8 = 0;
  swift_release(v5);
  v7 = qword_1000973E8 == 0;
  v6 = qword_1000973C8;
  *(_QWORD *)(v0 + 240) = qword_1000973E8;
  *(_QWORD *)(v0 + 248) = v6;
  v7 = v7 || v6 == 0;
  v8 = v7;
  if (v7)
  {
    v9 = sub_10001C79C();
    Logger.logObject.getter(v9);
    v10 = sub_100015CB4();
    if (sub_1000108D4(v10))
    {
      v11 = (_WORD *)sub_100012C5C(2);
      sub_1000078D0(v11);
      sub_10001CD18((void *)&_mh_execute_header, v12, v13, "reporting disabled due to startup failure");
      sub_1000120F8(v1);
    }
    sub_10001AF74();
    sub_10001D318();
  }
  v14 = sub_10001D0B8();
  sub_100012D10(v14, 128);
  v15 = sub_10001956C();
  sub_10001B0F4(v15);
  v16 = sub_10001CFFC();
  sub_100012D10(v16, 176);
  v17 = (_QWORD *)swift_task_alloc(dword_10008F27C);
  *(_QWORD *)(v0 + 256) = v17;
  sub_10000B064(v17, (uint64_t)sub_1000596A0);
  return sub_10001BAA4(v8);
}

uint64_t sub_100059D80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  _BYTE v18[8];
  uint64_t v19;

  v2 = sub_10000F3D0();
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000106FC();
  swift_errorRetain(a1);
  swift_errorRetain(a1);
  v6 = sub_100018E8C();
  v7 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = sub_100012C5C(12);
    v15 = v2;
    v9 = (_DWORD *)v8;
    v10 = sub_100012C5C(32);
    v19 = v10;
    *v9 = 136446210;
    swift_getErrorValue(a1, v18, v17);
    v11 = Error.localizedDescription.getter(v17[1], v17[2]);
    v16 = sub_100014F94(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17, v9 + 1, v9 + 3);
    sub_10000A828();
    sub_10000D2B4();
    sub_10000D2B4();
    sub_10001D970((void *)&_mh_execute_header, v6, v7, "failed to create disk cache: %{public}s");
    sub_10001DA34();
    sub_1000120F8(v10);
    sub_1000120F8((uint64_t)v9);

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v15);
  }
  else
  {
    sub_10000D2B4();
    sub_10000D2B4();

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

int main(int argc, const char **argv, const char **envp)
{
  sub_100058768();
}

id sub_100059F28(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSString v4;
  id v5;

  if (a2)
  {
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v4 = 0;
  }
  v5 = objc_msgSend(v2, "initWithSuiteName:", v4);

  return v5;
}

uint64_t sub_100059F88()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100059FAC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10009018C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10002C490;
  return sub_100058D10();
}

unint64_t sub_10005A010()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000901A0;
  if (!qword_1000901A0)
  {
    v1 = sub_100027598(&qword_100090198);
    result = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000901A0);
  }
  return result;
}

uint64_t sub_10005A054(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SQLiteDB.Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_10005A090(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

double sub_10005A09C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  char v7;
  double result;

  if (*(_QWORD *)(a3 + 16) && (v6 = sub_10005F90C(a1, a2), (v7 & 1) != 0))
  {
    sub_1000151D4(*(_QWORD *)(v4 + 56) + 32 * v6, (uint64_t)a4);
  }
  else
  {
    result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t sub_10005A0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16) && (v4 = sub_10005F90C(a1, a2), (v5 & 1) != 0))
    return swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v3 + 56) + 16 * v4));
  else
    return 0;
}

uint64_t sub_10005A134@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100015584(a1, a2, a3, type metadata accessor for EventValue, a4);
}

void sub_10005A140(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 == v6 && v5 == v7)
    sub_10005F8D4();
  else
    sub_10001AF80(v3, v7, v6);
  sub_10000781C();
  sub_10000A828();
  sub_10000AF64();
}

void sub_10005A1A4(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_10005A20C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10005A298 + 4 * byte_10006FA26[a2]))(7496054);
}

void sub_10005A298(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 == 7496054 && v2 == 0xE300000000000000)
    sub_10005F8D4();
  else
    sub_10001AF80(a1, a2, 7496054);
  sub_10000781C();
  sub_10000A828();
  sub_10000AF64();
}

void sub_10005A334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_10001AC7C();
  v2 = v1;
  v3 = sub_10001AC7C();
  if (v0 == v3 && v2 == v4)
    sub_10005F8D4();
  else
    sub_10001AF80(v0, v4, v3);
  sub_10000781C();
  sub_10000A828();
  sub_10000AF64();
}

void sub_10005A398(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10005A3E8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10005A4B0 + 4 * byte_10006FA34[a2]))(0x65636976726573);
}

void sub_10005A4B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 == 0x65636976726573 && v2 == 0xE700000000000000)
    sub_10005F8D4();
  else
    sub_10001AF80(a1, a2, 0x65636976726573);
  sub_10000781C();
  sub_10000A828();
  sub_10000AF64();
}

void sub_10005A588(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10005A5C8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10005A6A0 + 4 * byte_10006FA46[a2]))(7955819);
}

void sub_10005A6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 == 7955819 && v2 == 0xE300000000000000)
    sub_10005F8D4();
  else
    sub_10001AF80(a1, a2, 7955819);
  sub_10000781C();
  sub_10000A828();
  sub_10000AF64();
}

void sub_10005A788(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10005A7D0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10005A824 + 4 * byte_10006FA54[a2]))(0x6E6F6973726576);
}

void sub_10005A824(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 == 0x6E6F6973726576 && v2 == 0xE700000000000000)
    sub_10005F8D4();
  else
    sub_10001AF80(a1, a2, 0x6E6F6973726576);
  sub_10000781C();
  sub_10000A828();
  sub_10000AF64();
}

uint64_t sub_10005A888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v17[4];

  v6 = sub_100030348();
  v7 = _s10RTCUtility9XPCObjectOwet_0(a1, 1, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_10005FA40(v7, (uint64_t *)&unk_1000903E0);
    v8 = 7168;
  }
  else
  {
    v9 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v8 = v9 | 0x1C00;
  }
  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType);
    v14 = v13;
    swift_unknownObjectRelease(v10);
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  if (v14 | v12)
  {
    v17[0] = 0;
    v17[1] = 0;
    v15 = v17;
    v17[2] = v12;
    v17[3] = v14;
  }
  else
  {
    v15 = 0;
  }
  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_10005A9A8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_10000B0F0();
  sub_10000F498(v2);
  *(_QWORD *)(v0 + 128) = v1;
  swift_task_dealloc(v3);
  if (v1)
    v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10005ABA8;
  else
    v4 = sub_10005A9F8;
  return sub_10001A1B0((uint64_t)v4, *(_QWORD *)(v0 + 104), 0);
}

uint64_t sub_10005A9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v48;
  _QWORD *v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;

  sub_10005F9AC();
  a23 = v25;
  a24 = v26;
  a22 = v24;
  swift_unknownObjectRelease(*(_QWORD *)(v24 + 112));
  v27 = *(_QWORD *)(v24 + 104);
  sub_10005FB28();
  v54 = v28;
  if (!v29)
    sub_10005F994();
  v53 = *(_BYTE *)(v24 + 184);
  sub_10001AAC8(&qword_10008E748);
  v30 = sub_10001AAC8(&qword_10008E750);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(_QWORD *)(v31 + 72);
  v33 = *(unsigned __int8 *)(v31 + 80);
  v34 = (v33 + 32) & ~v33;
  v35 = sub_10005FB1C(v34 + 2 * v32, v33);
  *(_OWORD *)(v35 + 16) = xmmword_10006D0D0;
  v36 = (_QWORD *)(v35 + v34);
  v37 = (_QWORD *)(v35 + v34 + *(int *)(v30 + 48));
  sub_10005FB08();
  *v36 = v38;
  v36[1] = 0xE700000000000000;
  *v37 = 0;
  v39 = sub_1000192F4();
  sub_1000199FC((uint64_t)v37, v39);
  v40 = (_QWORD *)sub_10005F964((uint64_t)v36 + v32);
  *v41 = v42;
  v41[1] = 0xE700000000000000;
  *v40 = 1;
  sub_1000199FC((uint64_t)v40, v39);
  v43 = Dictionary.init(dictionaryLiteral:)(v35, &type metadata for String, v39, &protocol witness table for String);
  v44 = *(_QWORD *)(v27 + 160);
  v45 = *(_QWORD *)(v27 + 168);
  sub_1000108E4();
  v46 = (_QWORD *)sub_10000CA88(v53, v44, v45);
  sub_100019460();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v43);
  a12 = v43;
  sub_10000CF18(v46, (uint64_t)sub_10001D810, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&a12);
  if (v54)
  {
    sub_100010EA8();
    return swift_bridgeObjectRelease(v48);
  }
  else
  {
    sub_10005F880();
    sub_100010644();
    v50 = (_QWORD *)sub_10000B10C();
    *(_QWORD *)(v24 + 144) = v50;
    sub_10005F810(v50, (uint64_t)sub_100006D50);
    sub_100010EA8();
    return sub_1000107D0(v51, v52);
  }
}

uint64_t sub_10005ABA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, os_log_type_t type, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  __n128 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char v57;
  uint64_t v58;
  _QWORD *v60;
  uint64_t v61;
  os_log_type_t typea;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;

  sub_10005F9C8();
  a28 = v30;
  a29 = v31;
  a27 = v29;
  if (qword_10008E0A8 != -1)
    swift_once(&qword_10008E0A8, sub_10005B758);
  v32 = *(_QWORD *)(v29 + 128);
  v33 = sub_10000F3D0();
  sub_100015718(v33, (uint64_t)qword_1000901B0);
  swift_errorRetain(v32);
  swift_errorRetain(v32);
  v34 = sub_100019A20();
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.error.getter();
  v37 = v36;
  v38 = os_log_type_enabled(v35, v36);
  v39 = *(_QWORD *)(v29 + 128);
  v40 = *(_QWORD *)(v29 + 104);
  if (v38)
  {
    v65 = *(_QWORD *)(v29 + 112);
    v41 = swift_slowAlloc(22, -1);
    v63 = sub_100012C5C(64);
    a17 = v63;
    *(_DWORD *)v41 = 136315394;
    typea = v37;
    v42 = *(_QWORD *)(v40 + 112);
    sub_1000108E4();
    *(_QWORD *)(v29 + 72) = sub_10005FAF4(v42, v43, &a17);
    sub_10005F93C(v29 + 72, v29 + 80, v44, v41 + 12);
    sub_10000CEA8();
    sub_100019460();
    *(_WORD *)(v41 + 12) = 2080;
    v37 = v41 + 14;
    swift_getErrorValue(v39, v29 + 80, v29 + 16);
    v45 = sub_100010540();
    *(_QWORD *)(v29 + 96) = sub_100014F94(v45, v46, &a17);
    sub_10005F93C(v29 + 96, v29 + 104, v47, v41 + 22);
    sub_10000A828();
    sub_10000D2B4();
    sub_10000D2B4();
    _os_log_impl((void *)&_mh_execute_header, v35, typea, "failed to send cached non-realtime events for session %s on session end: %s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy(v63, 2);
    sub_1000120F8(v63);
    sub_1000120F8(v41);

    swift_unknownObjectRelease(v65);
    sub_10000D2B4();
  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v29 + 112));
    sub_10000D2B4();
    sub_10000CEA8();
    sub_10000D2B4();
    sub_10000D2B4();

  }
  sub_10005FB28();
  if (v48)
  {
    v64 = 0;
  }
  else
  {
    sub_10005F994();
    v64 = v49;
  }
  v66 = *(_BYTE *)(v29 + 184);
  sub_10001AAC8(&qword_10008E748);
  v50 = sub_10001AAC8(&qword_10008E750);
  v51 = (__n128 *)sub_10001D004(v50);
  v52 = sub_10001BBD0(v51, (__n128)xmmword_10006D0D0);
  sub_1000199FC(v37, v52);
  v53 = sub_10001F53C();
  v55 = sub_10005FB90(v53, (uint64_t)&type metadata for String, v54, (uint64_t)&protocol witness table for String);
  sub_1000111A4();
  v56 = (_QWORD *)sub_10005FAD4(v66);
  sub_10000A820();
  v57 = sub_10005FBB4();
  a17 = v55;
  sub_10005F8A8(v56, (uint64_t)sub_10001D810, v58, v57, (uint64_t)&a17);
  if (v55)
    return sub_1000154E4(0x8000000000000000);
  sub_10005F880();
  sub_100010644();
  v60 = (_QWORD *)sub_10000B10C();
  *(_QWORD *)(v29 + 144) = v60;
  v61 = sub_10005F810(v60, (uint64_t)sub_100006D50);
  return sub_10000C00C(v61, v64);
}

uint64_t sub_10005AE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  sub_1000110BC();
  a21 = v23;
  a22 = v24;
  a20 = v22;
  swift_release(v22[19]);
  if (qword_10008E0A8 != -1)
    swift_once(&qword_10008E0A8, sub_10005B758);
  v25 = sub_10000F3D0();
  sub_100015718(v25, (uint64_t)qword_1000901B0);
  sub_10005FA38();
  sub_10005FA38();
  v26 = sub_100015738();
  v27 = static os_log_type_t.fault.getter();
  v28 = sub_10005F98C(v26);
  v29 = v22[21];
  if (v28)
  {
    v30 = (uint8_t *)sub_100012C5C(12);
    v31 = sub_100012C5C(32);
    a11 = v31;
    *(_DWORD *)v30 = 136446210;
    swift_getErrorValue(v29, v22 + 11, v22 + 5);
    v32 = Error.localizedDescription.getter(v22[6], v22[7]);
    v22[8] = sub_100014F94(v32, v33, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22 + 8, v22 + 9, v30 + 4, v30 + 12);
    sub_10000A828();
    sub_10000A8B8();
    sub_10000A8B8();
    sub_100010670((void *)&_mh_execute_header, v26, v27, "failed to mark session closed: %{public}s", v30);
    sub_10000BE60(v31);
    sub_1000120F8(v31);
    sub_1000120F8((uint64_t)v30);

    sub_10000A8B8();
  }
  else
  {
    sub_10000A8B8();
    sub_10000A8B8();
    sub_10000A8B8();

  }
  v22[22] = *(_QWORD *)(v22[13] + 184);
  return sub_10000AFD0();
}

void sub_10005B02C()
{
  sub_100018040();
  sub_100014638();
  sub_10000BF94();
}

void sub_10005B04C()
{
  sub_100018040();
  sub_100014638();
  sub_10000BF94();
}

void sub_10005B06C()
{
  sub_100018040();
  sub_100014638();
  sub_10000BF94();
}

uint64_t sub_10005B08C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  v3[28] = a2;
  v3[29] = v2;
  v3[27] = a1;
  v4 = *(_QWORD *)(type metadata accessor for SessionConfiguration.Backend(0) - 8);
  v3[30] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[31] = swift_task_alloc(v5);
  v3[32] = swift_task_alloc(v5);
  return swift_task_switch(sub_10005B0FC, v2, 0);
}

uint64_t sub_10005B0FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 216) + 8);
  *(_QWORD *)(v0 + 208) = v1;
  *(_QWORD *)(v0 + 264) = v1;
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 272) = v2;
  if (v2 == 1)
  {
    v4 = *(_OWORD **)(v0 + 224);
    v5 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 240) + 80);
    sub_10001B93C(v1 + ((v5 + 32) & ~v5), *(_QWORD *)(v0 + 256), type metadata accessor for SessionConfiguration.Backend);
    v6 = v4[14];
    v7 = v4[12];
    *(_OWORD *)(v0 + 32) = v4[13];
    *(_OWORD *)(v0 + 48) = v6;
    *(_OWORD *)(v0 + 16) = v7;
    *(_OWORD *)(v0 + 112) = v4[12];
    v8 = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 192) = v8;
    swift_retain(v4);
    sub_10000A8E4();
    sub_10001DA0C();
    sub_10000BE30();
    v9 = (_QWORD *)swift_task_alloc(dword_10008F76C);
    *(_QWORD *)(v0 + 280) = v9;
    sub_10001FE54(v9, (uint64_t)sub_10005B304);
    v10 = v0 + 16;
  }
  else
  {
    if (!v2)
    {
      sub_1000583E4();
      sub_100010D58();
      return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(0, 0);
    }
    v11 = *(_QWORD *)(v0 + 240);
    v12 = *(_OWORD **)(v0 + 224);
    sub_100022D70();
    v13 = v12[14];
    v14 = v12[12];
    *(_OWORD *)(v0 + 80) = v12[13];
    *(_OWORD *)(v0 + 96) = v13;
    *(_OWORD *)(v0 + 64) = v14;
    *(_OWORD *)(v0 + 160) = v12[12];
    v15 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 128) = v15;
    v16 = *(_DWORD *)(v11 + 80);
    *(_DWORD *)(v0 + 360) = v16;
    *(_QWORD *)(v0 + 312) = v17;
    *(_QWORD *)(v0 + 320) = 1;
    v18 = *(_QWORD *)(v0 + 248);
    v19 = *(_QWORD *)(v0 + 224);
    v20 = *(_QWORD *)(v0 + 264) + ((v16 + 32) & ~(unint64_t)v16);
    sub_100010644();
    sub_10001B93C(v20, v18, type metadata accessor for SessionConfiguration.Backend);
    swift_retain(v19);
    sub_10000BE30();
    sub_10001DA0C();
    sub_10000A8E4();
    v21 = (_QWORD *)swift_task_alloc(dword_10008F76C);
    *(_QWORD *)(v0 + 328) = v21;
    sub_10001FE54(v21, (uint64_t)sub_10005B43C);
    v10 = v0 + 64;
  }
  return sub_10000A46C(v10);
}

uint64_t sub_10005B304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_1000154B8();
  a17 = v20;
  a18 = v21;
  a16 = (uint64_t *)v19;
  v23 = v22;
  v25 = v24;
  a16 = *v19;
  v26 = a16;
  sub_10000F498(&a16);
  v26[36] = v18;
  swift_task_dealloc(v27);
  if (v18)
  {
    sub_10001C614(v26[32], type metadata accessor for SessionConfiguration.Backend);
  }
  else
  {
    v26[37] = v23;
    v26[38] = v25;
  }
  sub_10001EFD0((uint64_t)(v26 + 14));
  sub_100007884();
  sub_10001D0B0();
  sub_10000F3E8();
  return sub_1000156C8(v28, v29, v30);
}

uint64_t sub_10005B3AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_100056F58(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 296), *(_BYTE *)(*(_QWORD *)(v0 + 224) + 240) == 1, *(_QWORD *)(v0 + 232));
  v3 = v2;
  v4 = sub_10000A828();
  sub_10001A2A8(v4, type metadata accessor for SessionConfiguration.Backend);
  sub_10000AF94();
  sub_1000583E4();
  sub_100010D58();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v3);
}

uint64_t sub_10005B43C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;

  sub_1000154B8();
  a17 = v20;
  a18 = v21;
  a16 = v19;
  v23 = v22;
  v25 = v24;
  a16 = (_QWORD *)*v19;
  v26 = a16;
  sub_10000F498(&a16);
  v26[42] = v18;
  swift_task_dealloc(v27);
  if (v18)
  {
    v28 = v26[29];
    sub_10000BE84();
    sub_100007884();
    sub_10001D0B0();
    sub_100005400(v26 + 26);
    sub_10000AF70();
    v29 = sub_10005B698;
    v30 = v28;
  }
  else
  {
    v31 = v26[29];
    v26[43] = v23;
    v26[44] = v25;
    sub_10000BE84();
    sub_100007884();
    sub_10001D0B0();
    v29 = sub_10005B4E8;
    v30 = v31;
  }
  return sub_1000156C8((uint64_t)v29, v30, 0);
}

void sub_10005B4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  sub_1000154B8();
  v1 = *(_QWORD *)(v0 + 312);
  v2 = sub_100056F58(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 344), *(_BYTE *)(*(_QWORD *)(v0 + 224) + 240) == 1, *(_QWORD *)(v0 + 232));
  v4 = v3;
  sub_10000A828();
  sub_10000BDB4();
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v0 + 312);
  if (v5 >= *(_QWORD *)(v1 + 24) >> 1)
  {
    sub_10005FA18();
    sub_100022D70();
    v6 = v16;
  }
  v7 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 272);
  v9 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v6 + 16) = v5 + 1;
  v10 = v6 + 16 * v5;
  *(_QWORD *)(v10 + 32) = v2;
  *(_QWORD *)(v10 + 40) = v4;
  sub_10001C614(v9, type metadata accessor for SessionConfiguration.Backend);
  if (v7 == v8)
  {
    sub_100005400((_QWORD *)(v0 + 208));
    v11 = type metadata accessor for BackendGroup();
    v12 = swift_allocObject(v11, 120, 15);
    swift_defaultActor_initialize(v12);
    *(_QWORD *)(v12 + 112) = v6;
    sub_1000583E4();
    sub_100010D58();
    (*(void (**)(uint64_t, char **))(v0 + 8))(v12, &off_100087F80);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 320);
    *(_QWORD *)(v0 + 312) = v6;
    *(_QWORD *)(v0 + 320) = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
    }
    else
    {
      v14 = *(_QWORD *)(v0 + 224);
      sub_10001B93C(*(_QWORD *)(v0 + 264)+ ((*(unsigned __int8 *)(v0 + 360) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 360))+ *(_QWORD *)(*(_QWORD *)(v0 + 240) + 72) * v13, *(_QWORD *)(v0 + 248), type metadata accessor for SessionConfiguration.Backend);
      swift_retain(v14);
      sub_10001DA0C();
      sub_10000A8E4();
      sub_10001E08C(v0 + 128);
      v15 = (_QWORD *)swift_task_alloc(dword_10008F76C);
      *(_QWORD *)(v0 + 328) = v15;
      sub_10001FE54(v15, (uint64_t)sub_10005B43C);
      sub_10000A46C(v0 + 64);
    }
  }
}

uint64_t sub_10005B698()
{
  uint64_t v0;

  sub_10001C614(*(_QWORD *)(v0 + 248), type metadata accessor for SessionConfiguration.Backend);
  sub_100058488();
  sub_10000F3D8();
  sub_1000111E4();
  return sub_100011260(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005B6DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 1;
}

unint64_t sub_10005B700(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000013;
  else
    return 0xD000000000000015;
}

unint64_t sub_10005B73C()
{
  char *v0;

  return sub_10005B700(*v0);
}

double sub_10005B750()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

uint64_t sub_10005B758()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026B1C(v0, qword_1000901B0);
  sub_100015718(v0, (uint64_t)qword_1000901B0);
  return Logger.init(subsystem:category:)(0xD000000000000017, 0x8000000100071220, 0x6E6F6973736573, 0xE700000000000000);
}

#error "10005BA10: call analysis failed (funcsize=151)"

#error "10005BC4C: call analysis failed (funcsize=141)"

uint64_t *sub_10005BC98@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result && (unint64_t)(a2 - (_QWORD)result + 7) >= 0xF)
  {
    v3 = 0;
    v4 = 8 * ((a2 - (uint64_t)result) / 8);
    do
    {
      v5 = *result++;
      v3 ^= v5;
      v4 -= 8;
    }
    while (v4);
  }
  else
  {
    v3 = 0;
  }
  *a3 = v3;
  return result;
}

uint64_t sub_10005BCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  sub_10005F9AC();
  a23 = v25;
  a24 = v26;
  a22 = v24;
  v27 = v24[57];
  sub_100014528();
  sub_100011200();
  sub_100014528();
  v28 = sub_100011200();
  Logger.logObject.getter(v28);
  v29 = sub_10005FAB4();
  if (sub_10005F98C(v27))
  {
    a10 = v24 + 32;
    a11 = v24[57];
    v30 = v24[52];
    v31 = v24[53];
    v32 = (_QWORD *)v24[44];
    v33 = sub_100012C5C(32);
    a12 = sub_100012C5C(96);
    a13 = a12;
    *(_DWORD *)v33 = 136446722;
    sub_10001CEBC();
    v24[31] = sub_100014F94(v30, v31, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 31, v24 + 32, v33 + 4, v33 + 12);
    sub_100010678();
    *(_WORD *)(v33 + 12) = 2082;
    v34 = v32[25];
    v35 = v32[26];
    v36 = v32[27];
    v37 = v32[28];
    v38 = v32[29];
    v24[20] = v32[24];
    v24[21] = v34;
    v24[22] = v35;
    v24[23] = v36;
    v24[24] = v37;
    v24[25] = v38;
    sub_1000108E4();
    sub_10000B0D4();
    sub_10001CEBC();
    v39 = sub_1000159D4();
    sub_100019460();
    sub_10000BDE4();
    sub_100010678();
    v24[29] = sub_100014578(v39, v40, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 29, v24 + 30, v33 + 14, v33 + 22);
    sub_10000AF70();
    sub_100018064((uint64_t)v32);
    *(_WORD *)(v33 + 22) = 2082;
    swift_getErrorValue(a11, v24 + 30, v24 + 26);
    v41 = Error.localizedDescription.getter(v24[27], v24[28]);
    v24[32] = sub_100014F94(v41, v42, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 32, v24 + 33, v33 + 24, v33 + 32);
    sub_10000A828();
    sub_10001B02C();
    sub_10001B02C();
    sub_10005FB48((void *)&_mh_execute_header, v27, v29, "session %{public}s (%{public}s): failed to cache event: %{public}s");
    swift_arrayDestroy(a12, 3);
    sub_1000120F8(a12);
    sub_1000120F8(v33);

    sub_10001B02C();
  }
  else
  {
    v43 = v24[44];
    sub_10001ABD4();
    sub_100018064(v43);
    sub_10001ABD4();
    sub_10001ABD4();

  }
  sub_10005F7CC();
  sub_100010D58();
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  sub_100010EA8();
  return v44(v44, v45, v46, v47, v48, v49, v50, v51, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_10005BF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v9 = type metadata accessor for SessionConfiguration.BackendHTTP(0);
  v7[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SessionConfiguration.Backend(0);
  v7[7] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[8] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[9] = swift_task_alloc(v12);
  v7[10] = swift_task_alloc(v12);
  return swift_task_switch(sub_10005BFB0, a4, 0);
}

void sub_10005BFB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 136);
  *(_QWORD *)(v0 + 88) = v2;
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v0 + 96) = v3;
  if (v3)
  {
    v4 = *(_QWORD *)(v0 + 64);
    *(_DWORD *)(v0 + 184) = *(_DWORD *)(v4 + 80);
    v5 = *(_QWORD *)(v4 + 72);
    *(_QWORD *)(v0 + 112) = 0;
    *(_QWORD *)(v0 + 120) = 0;
    *(_QWORD *)(v0 + 104) = v5;
    swift_bridgeObjectRetain();
    v6 = sub_100014638();
    sub_10001B93C(v6, v7, v8);
    v9 = qword_1000973E8;
    *(_QWORD *)(v0 + 128) = qword_1000973E8;
    if (v9)
    {
      sub_10001B93C(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 72), type metadata accessor for SessionConfiguration.Backend);
      v10 = sub_10005FBFC();
      v11 = *(_QWORD *)(v0 + 72);
      if (v10 == 1)
      {
        v12 = sub_100019A20();
        sub_10001A2A8(v12, type metadata accessor for SessionConfiguration.Backend);
        sub_10005F88C();
      }
      else
      {
        v14 = *(uint64_t **)(v0 + 48);
        sub_10005FA58();
        v1 = *v14;
        v11 = v14[1];
        sub_100019A20();
        sub_100010644();
        sub_10005FBA8();
      }
      *(_QWORD *)(v0 + 136) = v1;
      *(_QWORD *)(v0 + 144) = v11;
      goto LABEL_9;
    }
    __break(1u);
  }
  else
  {
    v13 = qword_1000973E8;
    *(_QWORD *)(v0 + 160) = 0;
    *(_QWORD *)(v0 + 168) = v13;
    if (v13)
    {
      sub_100019A20();
LABEL_9:
      sub_10000F3E8();
      sub_10005F7B8(v15, v16, v17);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_10005C0D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(v0 + 112);
  sub_10002BAD4(*(_QWORD *)(v0 + 136), *(void **)(v0 + 144), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
  *(_QWORD *)(v0 + 152) = v1;
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
    sub_10000781C();
    sub_10000CEA8();
    v3 = sub_10005C34C;
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 16);
    sub_10000781C();
    sub_10000CEA8();
    v3 = sub_10005C15C;
  }
  return sub_10001B170((uint64_t)v3, v2, 0);
}

void sub_10005C15C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 120) + 1;
  sub_10001C614(*(_QWORD *)(v0 + 80), type metadata accessor for SessionConfiguration.Backend);
  if (v3 == v2)
  {
    v4 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
    if (*(_QWORD *)(*(_QWORD *)(v4 + 136) + 16))
    {
      sub_10005FC3C();
      sub_100010D58();
      sub_10000F3D8();
      (*(void (**)(void))(v0 + 8))();
      return;
    }
    v11 = qword_1000973E8;
    *(_QWORD *)(v0 + 160) = *(_QWORD *)(v0 + 152);
    *(_QWORD *)(v0 + 168) = v11;
    if (v11)
    {
      sub_100019A20();
LABEL_11:
      sub_10000F3E8();
      sub_10005F7B8(v12, v13, v14);
      return;
    }
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 120) + 1;
    *(_QWORD *)(v0 + 112) = *(_QWORD *)(v0 + 152);
    *(_QWORD *)(v0 + 120) = v5;
    sub_10001B93C(*(_QWORD *)(v0 + 88)+ ((*(unsigned __int8 *)(v0 + 184) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 184))+ *(_QWORD *)(v0 + 104) * v5, *(_QWORD *)(v0 + 80), type metadata accessor for SessionConfiguration.Backend);
    v6 = qword_1000973E8;
    *(_QWORD *)(v0 + 128) = qword_1000973E8;
    if (v6)
    {
      sub_10001B93C(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 72), type metadata accessor for SessionConfiguration.Backend);
      v7 = sub_10005FBFC();
      v8 = *(_QWORD *)(v0 + 72);
      if (v7 == 1)
      {
        v9 = sub_100019A20();
        sub_10001A2A8(v9, type metadata accessor for SessionConfiguration.Backend);
        sub_10005F88C();
      }
      else
      {
        v10 = *(uint64_t **)(v0 + 48);
        sub_10005FA58();
        v1 = *v10;
        v8 = v10[1];
        sub_100019A20();
        sub_100010644();
        sub_10005FBA8();
      }
      *(_QWORD *)(v0 + 136) = v1;
      *(_QWORD *)(v0 + 144) = v8;
      goto LABEL_11;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10005C2CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  sub_10002BAD4(0x6B6E756C7073, (void *)0xE600000000000000, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
  *(_QWORD *)(v0 + 176) = v1;
  if (v1)
    return sub_10001B170((uint64_t)sub_10005C390, *(_QWORD *)(v0 + 16), 0);
  swift_release(*(_QWORD *)(v0 + 168));
  sub_10005FC3C();
  sub_100010D58();
  sub_10000F3D8();
  return sub_100011260(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005C34C()
{
  uint64_t v0;

  sub_10001C614(*(_QWORD *)(v0 + 80), type metadata accessor for SessionConfiguration.Backend);
  sub_10005FABC();
  sub_10000F3D8();
  sub_1000111E4();
  return sub_100011260(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005C390()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 168));
  sub_10005FABC();
  sub_10000F3D8();
  sub_1000111E4();
  return sub_100011260(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005C3CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[19] = a8;
  v8[20] = v10;
  v8[17] = a6;
  v8[18] = a7;
  v8[15] = a4;
  v8[16] = a5;
  return ((uint64_t (*)(uint64_t (*)(), _QWORD))swift_task_switch)(sub_10005C3F0, 0);
}

uint64_t sub_10005C3F0()
{
  _QWORD *v0;
  uint64_t v1;
  __n128 *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  swift_getObjectType(v0[15]);
  v1 = sub_10001AAC8(&qword_100090428);
  v2 = (__n128 *)sub_100018E5C(v1, 56);
  v0[21] = v2;
  sub_10001C500(v2, (__n128)xmmword_10006D0C0);
  sub_100018040();
  v3 = (_QWORD *)sub_10005F9A4();
  v0[22] = v3;
  *v3 = v0;
  v3[1] = sub_10005C474;
  v4 = sub_100015B68();
  return sub_10001BCA4(v4, v5, v6, v7);
}

uint64_t sub_10005C474()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  sub_10000B0F0();
  sub_10000F498(v3);
  v0[23] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return sub_10001A1B0((uint64_t)sub_10005C4D0, v0[20], 0);
  swift_bridgeObjectRelease(v0[21]);
  return sub_10001B084(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10005C4D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27[9];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_10005F9C8();
  v29 = v1;
  v30 = v2;
  v28 = v0;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168));
  if (qword_10008E0A8 != -1)
    swift_once(&qword_10008E0A8, sub_10005B758);
  v3 = *(NSObject **)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = sub_10000F3D0();
  sub_100015718(v5, (uint64_t)qword_1000901B0);
  sub_100014530();
  sub_10005FA38();
  sub_100014530();
  sub_10005FA38();
  sub_100018E8C();
  v6 = sub_100010E94();
  v7 = sub_100019A28(v6);
  v8 = *(_QWORD **)(v0 + 160);
  if (v7)
  {
    v26 = v3;
    v9 = sub_100012C5C(32);
    v25 = sub_100012C5C(96);
    v27[0] = v25;
    *(_DWORD *)v9 = 136446722;
    v11 = v8[14];
    v10 = v8[15];
    sub_10000CEB0();
    *(_QWORD *)(v0 + 88) = sub_100014F94(v11, v10, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v9 + 4, v9 + 12);
    sub_1000120B4();
    *(_WORD *)(v9 + 12) = 2082;
    v12 = v8[25];
    v13 = v8[26];
    v14 = v8[27];
    v15 = v8[28];
    v16 = v8[29];
    *(_QWORD *)(v0 + 16) = v8[24];
    *(_QWORD *)(v0 + 24) = v12;
    *(_QWORD *)(v0 + 32) = v13;
    *(_QWORD *)(v0 + 40) = v14;
    *(_QWORD *)(v0 + 48) = v15;
    *(_QWORD *)(v0 + 56) = v16;
    sub_1000108E4();
    sub_10000B0D4();
    sub_10001CEBC();
    v17 = sub_1000159D4();
    sub_100019460();
    sub_10000BDE4();
    sub_100010678();
    *(_QWORD *)(v0 + 96) = sub_10005FC48(v17, v18, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v9 + 14, v9 + 22);
    sub_10000781C();
    sub_100018064((uint64_t)v8);
    *(_WORD *)(v9 + 22) = 2082;
    v19 = sub_10005F8E0();
    swift_getErrorValue(v19, v20, v0 + 64);
    v21 = sub_100014540();
    *(_QWORD *)(v0 + 112) = sub_100014F94(v21, v22, v27);
    sub_10001F4F8(v0 + 112, v0 + 120, v23, v9 + 32);
    sub_10000A828();
    sub_10000A8B8();
    sub_10000A8B8();
    sub_10005FB48((void *)&_mh_execute_header, v26, (os_log_type_t)v4, "session %{public}s (%{public}s): immediate backend failed to send events: %{public}s");
    swift_arrayDestroy(v25, 3);
    sub_1000120F8(v25);
    sub_1000120F8(v9);

    sub_10000A8B8();
  }
  else
  {
    sub_10000A8B8();
    sub_100018064((uint64_t)v8);
    sub_10000A8B8();
    sub_10000A8B8();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005C744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[19] = a8;
  v8[20] = v10;
  v8[17] = a6;
  v8[18] = a7;
  v8[15] = a4;
  v8[16] = a5;
  return swift_task_switch(sub_10005C76C, a4, 0);
}

uint64_t sub_10005C76C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __n128 *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);

  if (*(_BYTE *)(v0[15] + OBJC_IVAR____TtC13rtcreportingd7Session_haveNonRealtimeEvents) == 1)
  {
    v1 = (_QWORD *)swift_task_alloc(dword_100090434);
    v0[21] = v1;
    *v1 = v0;
    v1[1] = sub_10005C840;
    v2 = sub_10001E1FC(v0[16]);
    return sub_10005CCEC(v2, v3);
  }
  else
  {
    sub_10005FA28();
    v5 = sub_10001AAC8(&qword_100090428);
    v6 = (__n128 *)sub_100018E5C(v5, 56);
    v0[23] = v6;
    sub_10001C500(v6, (__n128)xmmword_10006D0C0);
    sub_100018040();
    v7 = (_QWORD *)sub_10005F9A4();
    v0[24] = v7;
    *v7 = v0;
    v7[1] = sub_10005C8F8;
    v8 = sub_100015B68();
    return sub_10001BCA4(v8, v9, v10, v11);
  }
}

uint64_t sub_10005C840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  sub_10001FE64();
  if (v1)
    v2 = sub_10005C954;
  else
    v2 = sub_10005C880;
  return sub_10001A1B0((uint64_t)v2, *(_QWORD *)(v0 + 120), 0);
}

uint64_t sub_10005C880()
{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_10005FA28();
  v1 = sub_10001AAC8(&qword_100090428);
  v2 = (__n128 *)sub_100018E5C(v1, 56);
  *(_QWORD *)(v0 + 184) = v2;
  sub_10001C500(v2, (__n128)xmmword_10006D0C0);
  sub_100018040();
  v3 = (_QWORD *)sub_10005F9A4();
  *(_QWORD *)(v0 + 192) = v3;
  *v3 = v0;
  v3[1] = sub_10005C8F8;
  v4 = sub_100015B68();
  return sub_10001BCA4(v4, v5, v6, v7);
}

uint64_t sub_10005C8F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  sub_10000B0F0();
  sub_10000F498(v3);
  v0[25] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return sub_10001A1B0((uint64_t)sub_10005CB1C, v0[15], 0);
  swift_bridgeObjectRelease(v0[23]);
  return sub_10001B084(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10005C954()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  int v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  os_log_type_t type;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *log;
  uint64_t v100;

  if (qword_10008E0A8 != -1)
    swift_once(&qword_10008E0A8, sub_10005B758);
  v1 = *(NSObject **)(v0 + 120);
  v2 = sub_10000F3D0();
  v3 = sub_100015718(v2, (uint64_t)qword_1000901B0);
  sub_100019A20();
  sub_100011200();
  sub_100019A20();
  sub_100011200();
  sub_100018E8C();
  v4 = sub_100010E94();
  v5 = sub_1000108D4(v4);
  v6 = *(_QWORD *)(v0 + 120);
  if (v5)
  {
    log = v1;
    v7 = (_DWORD *)sub_100012C5C(32);
    v97 = sub_100012C5C(96);
    v100 = v97;
    *v7 = 136446722;
    HIDWORD(v91) = v3;
    v8 = *(_QWORD *)(v6 + 112);
    sub_10000CA18();
    v10 = sub_100014578(v8, v9, &v100);
    sub_10005F7F8(v10);
    sub_10000AF70();
    sub_1000078DC();
    sub_10000B0D4();
    sub_1000111DC();
    v11 = (void *)sub_1000159D4();
    v13 = v12;
    sub_10000A820();
    sub_10000BDE4();
    swift_bridgeObjectRelease(v7 + 1);
    v15 = sub_100014578((uint64_t)v11, v14, &v100);
    sub_10001565C(v15, v16, v17, v18, v19, v20, v21, v22, v62, v68, v0 + 96, v0 + 16, v0 + 104);
    sub_10000AF70();
    v23 = sub_100018064(v6);
    sub_10005F7DC(v23, v24, v25, v26, v27, v28, v29, v30, v63, v69, v74, v79, v84, v0 + 64);
    v31 = sub_100014540();
    v39 = sub_10005FC30(v31, v32, v33, v34, v35, v36, v37, v38, v64, v70, v75, v80);
    sub_10001FCD0(v39, v40, v41, v42, v43, v44, v45, v46, v65, v71, v76, v81, v85, v88, v91, v0 + 112);
    sub_10000A828();
    sub_10000BE9C();
    sub_10000BE9C();
    sub_10001FD24((void *)&_mh_execute_header, v47, v48, "session %{public}s (%{public}s): failed to send realtime events: %{public}s", v49, v50, v51, v52, v66, v72, v77, v82, v86, v89, v92, type, v95, v97, log);
    sub_10005F8B4(v53, v54, v55, v56, v57, v58, v59, v60, v67, v73, v78, v83, v87, v90, v93, v96, v98);
    sub_1000120F8(v13);
    sub_1000120F8((uint64_t)v7);

    sub_10000BE9C();
  }
  else
  {
    sub_10000BE9C();
    sub_100018064(v6);
    sub_10000BE9C();
    sub_10000BE9C();

  }
  return sub_10005F79C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005CB1C()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  int v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  os_log_type_t type;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *log;
  uint64_t v100;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 184));
  if (qword_10008E0A8 != -1)
    swift_once(&qword_10008E0A8, sub_10005B758);
  v1 = *(NSObject **)(v0 + 120);
  v2 = sub_10000F3D0();
  v3 = sub_100015718(v2, (uint64_t)qword_1000901B0);
  sub_100019A20();
  sub_100011200();
  sub_100019A20();
  sub_100011200();
  sub_100018E8C();
  v4 = sub_100010E94();
  v5 = sub_1000108D4(v4);
  v6 = *(_QWORD *)(v0 + 120);
  if (v5)
  {
    log = v1;
    v7 = (_DWORD *)sub_100012C5C(32);
    v97 = sub_100012C5C(96);
    v100 = v97;
    *v7 = 136446722;
    HIDWORD(v91) = v3;
    v8 = *(_QWORD *)(v6 + 112);
    sub_10000CA18();
    v10 = sub_100014578(v8, v9, &v100);
    sub_10005F7F8(v10);
    sub_10000AF70();
    sub_1000078DC();
    sub_10000B0D4();
    sub_1000111DC();
    v11 = (void *)sub_1000159D4();
    v13 = v12;
    sub_10000A820();
    sub_10000BDE4();
    swift_bridgeObjectRelease(v7 + 1);
    v15 = sub_100014578((uint64_t)v11, v14, &v100);
    sub_10001565C(v15, v16, v17, v18, v19, v20, v21, v22, v62, v68, v0 + 96, v0 + 16, v0 + 104);
    sub_10000AF70();
    v23 = sub_100018064(v6);
    sub_10005F7DC(v23, v24, v25, v26, v27, v28, v29, v30, v63, v69, v74, v79, v84, v0 + 64);
    v31 = sub_100014540();
    v39 = sub_10005FC30(v31, v32, v33, v34, v35, v36, v37, v38, v64, v70, v75, v80);
    sub_10001FCD0(v39, v40, v41, v42, v43, v44, v45, v46, v65, v71, v76, v81, v85, v88, v91, v0 + 112);
    sub_10000A828();
    sub_10000BE9C();
    sub_10000BE9C();
    sub_10001FD24((void *)&_mh_execute_header, v47, v48, "session %{public}s (%{public}s): failed to send realtime events: %{public}s", v49, v50, v51, v52, v66, v72, v77, v82, v86, v89, v92, type, v95, v97, log);
    sub_10005F8B4(v53, v54, v55, v56, v57, v58, v59, v60, v67, v73, v78, v83, v87, v90, v93, v96, v98);
    sub_1000120F8(v13);
    sub_1000120F8((uint64_t)v7);

    sub_10000BE9C();
  }
  else
  {
    sub_10000BE9C();
    sub_100018064(v6);
    sub_10000BE9C();
    sub_10000BE9C();

  }
  return sub_10005F79C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005CCEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  return swift_task_switch(sub_10005CD08, v2, 0);
}

void sub_10005CD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  sub_1000110BC();
  a21 = v24;
  a22 = v25;
  a20 = v23;
  v26 = *(_QWORD *)(v23 + 88);
  v27 = OBJC_IVAR____TtC13rtcreportingd7Session_sendingNonRealtimeEvents;
  *(_QWORD *)(v23 + 96) = OBJC_IVAR____TtC13rtcreportingd7Session_sendingNonRealtimeEvents;
  if ((*(_BYTE *)(v26 + v27) & 1) != 0
    || (v28 = OBJC_IVAR____TtC13rtcreportingd7Session_haveNonRealtimeEvents,
        *(_QWORD *)(v23 + 104) = OBJC_IVAR____TtC13rtcreportingd7Session_haveNonRealtimeEvents,
        *(_BYTE *)(v26 + v28) != 1))
  {
    sub_10000A858(*(uint64_t (**)(void))(v23 + 8));
  }
  else
  {
    *(_BYTE *)(v26 + v27) = 1;
    if (qword_10008E0A8 != -1)
      swift_once(&qword_10008E0A8, sub_10005B758);
    v29 = sub_10000F3D0();
    *(_QWORD *)(v23 + 112) = sub_100015718(v29, (uint64_t)qword_1000901B0);
    sub_100019A20();
    v30 = sub_100015738();
    v31 = static os_log_type_t.info.getter();
    v32 = sub_1000108D4(v31);
    v33 = *(_QWORD *)(v23 + 88);
    if (v32)
    {
      v34 = (uint8_t *)sub_100012C5C(12);
      v35 = sub_100012C5C(32);
      a11 = v35;
      *(_DWORD *)v34 = 136446210;
      v36 = *(_QWORD *)(v33 + 112);
      sub_1000108E4();
      *(_QWORD *)(v23 + 64) = sub_10005FAF4(v36, v37, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v23 + 64, v23 + 72, v34 + 4, v34 + 12);
      sub_100019460();
      sub_10000BDB4();
      sub_100010670((void *)&_mh_execute_header, v30, v22, "session %{public}s: triggering send for cached events in realtime mode", v34);
      sub_10000BE60(v35);
      sub_1000120F8(v35);
      sub_1000120F8((uint64_t)v34);
    }
    else
    {
      sub_10000BDB4();
    }

    if (qword_1000973C8)
    {
      *(_QWORD *)(v23 + 120) = qword_1000973C8;
      v38 = dword_10008F5C4;
      sub_100019A20();
      v39 = (_QWORD *)swift_task_alloc(v38);
      *(_QWORD *)(v23 + 128) = v39;
      sub_100019B34(v39, (uint64_t)sub_10005CED8);
      sub_10001CFAC();
      sub_10003C834(v40, v41, v42, v43);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_10005CED8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10000B0F0();
  v2 = v0[16];
  v0[17] = v3;
  v0[18] = v1;
  swift_task_dealloc(v2);
  swift_release(v0[15]);
  sub_10000CEB8();
  return sub_10001A1B0(v4, v5, v6);
}

uint64_t sub_10005CF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  int64_t v26;
  char v27;
  uint64_t v28;
  int *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;

  sub_1000110BC();
  v15 = *(_QWORD *)(v14 + 136);
  v16 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v14 + 152) = v16;
  if (v16)
  {
    v17 = (uint64_t *)(v14 + 40);
    *(_QWORD *)(v14 + 40) = _swiftEmptyArrayStorage;
    sub_10005EC70(0, v16, 0);
    v18 = *(_QWORD *)(v14 + 40);
    v19 = (_OWORD *)(v15 + 48);
    do
    {
      v20 = *((_QWORD *)v19 - 1);
      v43 = *v19;
      v21 = *v19;
      *v17 = v18;
      v22 = *(_QWORD *)(v18 + 16);
      v23 = *(_QWORD *)(v18 + 24);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(*((_QWORD *)&v43 + 1));
      if (v22 >= v23 >> 1)
      {
        v25 = sub_10005FA18();
        sub_10005EC70((char *)v25, v26, v27);
        v18 = *v17;
      }
      *(_QWORD *)(v14 + 160) = v18;
      *(_QWORD *)(v18 + 16) = v22 + 1;
      v24 = v18 + 24 * v22;
      *(_QWORD *)(v24 + 32) = v20;
      *(_OWORD *)(v24 + 40) = v43;
      v19 += 2;
      --v16;
    }
    while (v16);
    v28 = *(_QWORD *)(v14 + 80);
    swift_getObjectType(*(_QWORD *)(v14 + 72));
    v29 = *(int **)(v28 + 24);
    *(_QWORD *)&v43 = (char *)v29 + *v29;
    v30 = (_QWORD *)swift_task_alloc(v29[1]);
    *(_QWORD *)(v14 + 168) = v30;
    *v30 = v14;
    v30[1] = sub_10005D07C;
    sub_10001BAB8();
    sub_10001CFAC();
    return v34(v31, v32, v33, v34, v35, v36, v37, v38, v43, *((_QWORD *)&v43 + 1), a11, a12, a13, a14);
  }
  else
  {
    v40 = *(_QWORD *)(v14 + 96);
    v41 = *(_QWORD *)(v14 + 104);
    v42 = *(_QWORD *)(v14 + 88);
    sub_1000120B4();
    *(_BYTE *)(v42 + v41) = 0;
    *(_BYTE *)(v42 + v40) = 0;
    return sub_10000A858(*(uint64_t (**)(void))(v14 + 8));
  }
}

uint64_t sub_10005D07C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)();
  uint64_t v4;

  sub_10001FE64();
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 88);
    v3 = sub_10005D274;
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 88);
    swift_release(*(_QWORD *)(v0 + 160));
    v3 = sub_10005D0CC;
    v2 = v4;
  }
  return sub_10001A1B0((uint64_t)v3, v2, 0);
}

void sub_10005D0CC()
{
  _QWORD *v0;
  int64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = qword_1000973C8;
  v0[23] = qword_1000973C8;
  if (v2)
  {
    v0[6] = _swiftEmptyArrayStorage;
    sub_100014530();
    sub_10005F914();
    sub_10005FB68();
    do
    {
      sub_10005F864();
      if (v4)
        sub_10005ECB8((char *)(v3 > 1), v1, 1);
      sub_10000C074();
    }
    while (!v5);
    swift_bridgeObjectRelease(v0[17]);
    v6 = (_QWORD *)swift_task_alloc(dword_10008F5B4);
    v0[25] = v6;
    v7 = sub_10005FB7C(v6, (uint64_t)sub_10005D190);
    sub_10003CA1C(v7);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10005D190()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  sub_10000B0F0();
  sub_10000F498(v2);
  v0[26] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    v4 = v0[11];
    v5 = sub_10005D434;
  }
  else
  {
    v6 = v0[24];
    v7 = v0[11];
    swift_release(v6);
    sub_10000CEA8();
    v5 = sub_10005D1F4;
    v4 = v7;
  }
  return sub_10001A1B0((uint64_t)v5, v4, 0);
}

void sub_10005D1F4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_1000973C8)
  {
    *(_QWORD *)(v0 + 120) = qword_1000973C8;
    v1 = dword_10008F5C4;
    sub_100019A20();
    v2 = (_QWORD *)swift_task_alloc(v1);
    *(_QWORD *)(v0 + 128) = v2;
    v3 = sub_100019B34(v2, (uint64_t)sub_10005CED8);
    sub_10003C834(v3, v4, v5, v6);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10005D260()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 88) + *(_QWORD *)(v0 + 96)) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10005D274()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  _BOOL8 v12;
  int64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0[22];
  swift_release(v0[20]);
  sub_100011200();
  v2 = sub_100011200();
  Logger.logObject.getter(v2);
  v3 = sub_10005FAB4();
  if (os_log_type_enabled(v1, v3))
  {
    v4 = v0[22];
    v5 = sub_100012C5C(12);
    v6 = sub_100012C5C(32);
    v17 = v6;
    *(_DWORD *)v5 = 136446210;
    swift_getErrorValue(v4, v0 + 7, v0 + 2);
    v7 = sub_100010540();
    *(_QWORD *)(v5 + 4) = sub_100014F94(v7, v8, &v17);
    sub_10000A828();
    sub_10000A8B8();
    sub_10000A8B8();
    sub_100010670((void *)&_mh_execute_header, v1, v3, "failed to send events: %{public}s", (uint8_t *)v5);
    sub_10000BE60(v6);
    sub_1000120F8(v6);
    sub_1000120F8(v5);

    sub_10000A8B8();
  }
  else
  {
    sub_10001ABD4();
    sub_10001ABD4();
    sub_10001ABD4();

  }
  v9 = qword_1000973C8;
  v0[23] = qword_1000973C8;
  if (v9)
  {
    v0[6] = _swiftEmptyArrayStorage;
    sub_100014530();
    sub_10005F914();
    sub_10005FB68();
    do
    {
      sub_10005F864();
      if (v10)
      {
        v12 = sub_10005FA18();
        sub_10005ECB8((char *)v12, v13, v14);
      }
      sub_10000C074();
    }
    while (!v11);
    swift_bridgeObjectRelease(v0[17]);
    v15 = (_QWORD *)swift_task_alloc(dword_10008F5B4);
    v0[25] = v15;
    v16 = sub_10005FB7C(v15, (uint64_t)sub_10005D190);
    sub_10003CA1C(v16);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10005D434()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 192));
  sub_10000CEA8();
  *(_BYTE *)(*(_QWORD *)(v0 + 88) + *(_QWORD *)(v0 + 96)) = 0;
  return sub_10000BD38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005D46C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[17];

  v4[1] = &unk_10006FAD8;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = &unk_10006FAF0;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = &unk_10006FB08;
  v4[6] = &unk_10006FB20;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(result - 8) + 64;
    v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[9] = &unk_10006FB38;
    v4[10] = &unk_10006FB38;
    v4[11] = &unk_10006FB50;
    v4[12] = &unk_10006FB50;
    v4[13] = &unk_10006FB68;
    v4[14] = &unk_10006FB50;
    v4[15] = &unk_10006FB38;
    v4[16] = &unk_10006FB80;
    return swift_updateClassMetadata2(a1, 256, 17, v4, a1 + 80);
  }
  return result;
}

uint64_t sub_10005D554(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t sub_10005D568(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10005D588(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_10005D5B4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10005D5D0(uint64_t result, int a2)
{
  char v2;

  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  *(_BYTE *)(result + 4) = v2;
  return result;
}

void type metadata accessor for SessionUser()
{
  sub_10000B0C0();
}

_QWORD *sub_10005D5FC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v9;
    v10 = a2[6];
    v11 = a2[7];
    v12 = a2[8];
    *(_QWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 64) = v12;
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    v13 = *(int *)(a3 + 32);
    v22 = a1 + v13;
    v14 = (uint64_t)a2 + v13;
    *(_QWORD *)(a1 + 48) = v10;
    v15 = type metadata accessor for Date(0);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    v16(v22, v14, v15);
    v17 = *(int *)(a3 + 36);
    v18 = (char *)v4 + v17;
    v19 = (uint64_t)a2 + v17;
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = *(_BYTE *)(v19 + 4);
  }
  return v4;
}

uint64_t sub_10005D718(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  v4 = (char *)a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_10005D778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v11 = *(int *)(a3 + 32);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)(a1 + 48) = v8;
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  v15(v12, v13, v14);
  v16 = *(int *)(a3 + 36);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  return a1;
}

uint64_t sub_10005D868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v14 = *(int *)(a3 + 32);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = *(int *)(a3 + 36);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_BYTE *)(v20 + 4);
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = v21;
  return a1;
}

uint64_t sub_10005D978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v9 = *(int *)(a3 + 32);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = *(int *)(a3 + 36);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  return a1;
}

uint64_t sub_10005DA18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v14 = *(int *)(a3 + 32);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = *(int *)(a3 + 36);
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  return a1;
}

void sub_10005DAE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_10000AF64();
  }
  else
  {
    v6 = sub_1000112E0();
    _s10RTCUtility9XPCObjectOwet_0(a1 + *(int *)(a3 + 32), a2, v6);
  }
}

uint64_t sub_10005DB50(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000112E0();
    return _s10RTCUtility9XPCObjectOwst_0(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_10005DBB8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_10006FB08;
  v4[1] = &unk_10006FAD8;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = &unk_10006FB20;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = &unk_10006FB80;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

char *sub_10005DC54(char *__src, size_t __len, char *__dst)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if ((__len & 0x8000000000000000) != 0)
  {
    sub_10001B9A8();
    __src = (char *)sub_10001CE24((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

char *sub_10005DCB4(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001B9A8();
    result = (char *)sub_10001CE24((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_100012244(a3, result);
  }
  return result;
}

uint64_t sub_10005DD14(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10005DDB0(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for EventValue);
}

char *sub_10005DD20(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[64 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, a2 << 6);
  }
  return __src;
}

uint64_t sub_10005DDA4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10005DDB0(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for SessionConfiguration.Backend);
}

uint64_t sub_10005DDB0(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD))
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  if (a2 < 0)
  {
    sub_10001B9A8();
    result = sub_10001CE24((uint64_t)"Fatal error", v14, v15, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v16, v17, (uint64_t)"Swift/UnsafePointer.swift", v18, v19, v20, v21);
    __break(1u);
  }
  else if (a3 < a1
         || (result = ((uint64_t (*)(_QWORD))a4)(0),
             a1 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * a2 <= a3))
  {
    a4(0);
    v10 = sub_10005FBE8();
    return swift_arrayInitWithTakeFrontToBack(v10, v11, v12, v13);
  }
  else if (a3 != a1)
  {
    v9 = sub_10005FBE8();
    return swift_arrayInitWithTakeBackToFront(v9);
  }
  return result;
}

uint64_t sub_10005DE78(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10005DDB0(a1, a2, a3, (void (*)(_QWORD))&type metadata accessor for URL);
}

char *sub_10005DE84(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001B9A8();
    result = (char *)sub_10001CE24((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_100012244(a3, result);
  }
  return result;
}

char *sub_10005DEE4(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001B9A8();
    result = (char *)sub_10001CE24((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_100012244(a3, result);
  }
  return result;
}

char *sub_10005DF3C(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

char *sub_10005DFC8(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001B9A8();
    result = (char *)sub_10001CE24((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_100012244(a3, result);
  }
  return result;
}

uint64_t sub_10005E024(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  char v8;

  if (a2 < 0)
  {
    v8 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v8, 1046, 0);
    __break(1u);
  }
  else if (a3 < a1
         || (result = sub_10001AAC8(&qword_10008E7F8), a1 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * a2 <= a3))
  {
    v7 = sub_10001AAC8(&qword_10008E7F8);
    return swift_arrayInitWithTakeFrontToBack(a3, a1, a2, v7);
  }
  else if (a3 != a1)
  {
    return swift_arrayInitWithTakeBackToFront(a3);
  }
  return result;
}

uint64_t sub_10005E128(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10005DDB0(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CachedSession);
}

uint64_t sub_10005E134(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  if (a2 < 0)
  {
    sub_10001B9A8();
    sub_10005F854();
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
      return swift_arrayInitWithCopy(a3);
    sub_10001B9A8();
    sub_10005F844();
  }
  result = sub_100010378(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_10005E1D0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + (a2 << 6) <= a1 || a1 + (a2 << 6) <= a3)
    {
      sub_10001AAC8(&qword_1000904D8);
      return swift_arrayInitWithCopy(a3);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10005E2BC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;

  if (a2 < 0)
  {
    sub_10001B9A8();
    sub_10005F854();
  }
  else
  {
    sub_10005FBC8();
    v7 = *(_QWORD *)(*(_QWORD *)(v6(0) - 8) + 72) * v3;
    v8 = a3 + v7;
    v9 = v4 + v7;
    if (v8 <= v4 || v9 <= a3)
    {
      v11 = sub_10005FBD4();
      return sub_10000D254(v11);
    }
    sub_10001B9A8();
    sub_10005F844();
  }
  result = sub_100010378(v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23);
  __break(1u);
  return result;
}

uint64_t sub_10005E364(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3)
      return swift_arrayInitWithCopy(a3);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10005E434(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  if (a2 < 0)
  {
    sub_10001B9A8();
    sub_10005F854();
  }
  else
  {
    sub_10005FBC8();
    v6 = v4 + 8 * v5;
    if (v2 + 8 * v5 > v4)
    {
      v7 = v6 >= v2;
      v8 = v6 == v2;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    if (v8 || !v7)
    {
      sub_10001AAC8(v3);
      v9 = sub_10005FBD4();
      return sub_10000D254(v9);
    }
    sub_10001B9A8();
    sub_10005F844();
  }
  result = sub_100010378(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

uint64_t sub_10005E4D0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(sub_10001AAC8(&qword_10008E7F8) - 8) + 72) * a2;
    v6 = a3 + v5;
    v7 = a1 + v5;
    if (v6 <= a1 || v7 <= a3)
      return swift_arrayInitWithCopy(a3);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

void *sub_10005E5CC(char *__src, uint64_t a2, char *__dst)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  if (a2 < 0)
  {
    sub_10001B9A8();
    sub_10005F854();
  }
  else
  {
    if (&__dst[8 * a2] <= __src || &__src[8 * a2] <= __dst)
      return memcpy(__dst, __src, 8 * a2);
    sub_10001B9A8();
    sub_10005F844();
  }
  result = (void *)sub_100010378(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_10005E664()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10005E688()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10005E698(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42[9];

  v4 = v2;
  sub_10005FAE0();
  sub_10001AAC8((uint64_t *)&unk_1000904F0);
  v6 = sub_10005F8E0();
  v8 = sub_10005FAC8(v6, v7);
  v9 = v8;
  if (*(_QWORD *)(v3 + 16))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v3 + 64);
    v41 = v3 + 64;
    v12 = 1 << *(_BYTE *)(v3 + 32);
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v14 = v13 & v11;
    v40 = (unint64_t)(v12 + 63) >> 6;
    v15 = v8 + 64;
    if ((v13 & v11) == 0)
      goto LABEL_7;
LABEL_6:
    v16 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    for (i = v16 | (v10 << 6); ; i = v22 + (v10 << 6))
    {
      v23 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + i);
      v24 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * i);
      if ((a2 & 1) == 0)
        sub_1000108E4();
      Hasher.init(_seed:)(v42, *(_QWORD *)(v9 + 40));
      Hasher._combine(_:)(v23 + 1);
      v25 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v9 + 32));
      if (((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6))) == 0)
      {
        sub_1000154A4();
        while (++v27 != v28 || (v26 & 1) == 0)
        {
          v29 = v27 == v28;
          if (v27 == v28)
            v27 = 0;
          v26 |= v29;
          if (*(_QWORD *)(v15 + 8 * v27) != -1)
          {
            sub_100010894();
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      sub_10000B130();
LABEL_30:
      sub_10005FAA0();
      *(_QWORD *)(v15 + v30) |= v31;
      *(_BYTE *)(*(_QWORD *)(v9 + 48) + v32) = v23;
      *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v32) = v24;
      sub_10005F97C();
      if (v14)
        goto LABEL_6;
LABEL_7:
      v18 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_41;
      if (v18 >= v40)
        goto LABEL_32;
      ++v10;
      if (!*(_QWORD *)(v41 + 8 * v18))
      {
        v10 = v18 + 1;
        if (v18 + 1 >= v40)
          goto LABEL_32;
        if (!*(_QWORD *)(v41 + 8 * v10))
        {
          v19 = v18 + 2;
          if (v19 >= v40)
          {
LABEL_32:
            if ((a2 & 1) == 0)
            {
              sub_10000AF94();
              v4 = v2;
              goto LABEL_39;
            }
            sub_10001C5D8();
            if (v35 != v36)
            {
              *v33 = -1 << v34;
            }
            else
            {
              v37 = sub_10005FA68();
              sub_1000204B8(v37, v38, v39);
            }
            v4 = v2;
            *(_QWORD *)(v3 + 16) = 0;
            break;
          }
          if (!*(_QWORD *)(v41 + 8 * v19))
          {
            while (1)
            {
              v10 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v10 >= v40)
                goto LABEL_32;
              ++v19;
              if (*(_QWORD *)(v41 + 8 * v10))
                goto LABEL_18;
            }
          }
          v10 = v19;
        }
      }
LABEL_18:
      sub_10005F954();
      v14 = v21 & v20;
    }
  }
  sub_10000AF94();
LABEL_39:
  *v4 = v9;
}

void sub_10005E8E4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  _QWORD *v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char v50;
  uint64_t v51;
  __int128 v52;
  _QWORD v53[9];

  v4 = v2;
  sub_10005FAE0();
  sub_10001AAC8(&qword_10008E7D8);
  v6 = sub_10005F8E0();
  v50 = a2;
  v8 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  if (v3[2])
  {
    sub_10005FA88();
    v48 = v9;
    sub_10005FC14();
    v12 = v11 & v10;
    v47 = (unint64_t)(v13 + 63) >> 6;
    v14 = v8 + 8;
    sub_100014528();
    v15 = 0;
    v16 = 48;
    v49 = v3;
    if (!v12)
      goto LABEL_4;
LABEL_3:
    v17 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    for (i = v17 | (v15 << 6); ; i = v23 + (v15 << 6))
    {
      v24 = (uint64_t *)(v3[6] + 16 * i);
      v26 = *v24;
      v25 = v24[1];
      v27 = v3[7] + i * v16;
      v28 = *(_QWORD *)v27;
      v29 = *(_QWORD *)(v27 + 8);
      v30 = *(_BYTE *)(v27 + 16);
      v51 = *(_QWORD *)(v27 + 24);
      v52 = *(_OWORD *)(v27 + 32);
      if ((v50 & 1) == 0)
      {
        sub_10000B0D4();
        sub_1000108E4();
        swift_bridgeObjectRetain(v52);
        swift_bridgeObjectRetain(*((_QWORD *)&v52 + 1));
      }
      Hasher.init(_seed:)(v53, v8[5]);
      String.hash(into:)(v53, v26, v25);
      Hasher._finalize()();
      sub_10005F924();
      if (((v33 << v32) & ~v14[v31]) == 0)
      {
        sub_1000154A4();
        while (++v37 != v38 || (v36 & 1) == 0)
        {
          v39 = v37 == v38;
          if (v37 == v38)
            v37 = 0;
          v36 |= v39;
          if (v14[v37] != -1)
          {
            sub_100010894();
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }
      sub_10000B130();
      v35 = 48;
LABEL_27:
      *(_QWORD *)((char *)v14 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
      v40 = (_QWORD *)(v8[6] + 16 * v34);
      *v40 = v26;
      v40[1] = v25;
      v41 = v8[7] + v34 * v35;
      *(_QWORD *)v41 = v28;
      *(_QWORD *)(v41 + 8) = v29;
      *(_BYTE *)(v41 + 16) = v30;
      *(_QWORD *)(v41 + 24) = v51;
      *(_OWORD *)(v41 + 32) = v52;
      sub_10005F97C();
      v3 = v49;
      if (v12)
        goto LABEL_3;
LABEL_4:
      v19 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_36;
      if (v19 >= v47)
        goto LABEL_29;
      ++v15;
      if (!v48[v19])
      {
        v15 = v19 + 1;
        if (v19 + 1 >= v47)
          goto LABEL_29;
        if (!v48[v15])
        {
          v20 = v19 + 2;
          if (v20 >= v47)
          {
LABEL_29:
            sub_10000AF94();
            v4 = v2;
            if ((v50 & 1) != 0)
            {
              sub_10001C5D8();
              if (v43 != v44)
              {
                *v48 = -1 << v42;
              }
              else
              {
                v45 = sub_10005FA68();
                sub_1000204B8(v45, v46, v48);
              }
              v3[2] = 0;
            }
            break;
          }
          if (!v48[v20])
          {
            while (1)
            {
              v15 = v20 + 1;
              if (__OFADD__(v20, 1))
                goto LABEL_37;
              if (v15 >= v47)
                goto LABEL_29;
              ++v20;
              if (v48[v15])
                goto LABEL_15;
            }
          }
          v15 = v20;
        }
      }
LABEL_15:
      sub_10005F954();
      v12 = v22 & v21;
    }
  }
  sub_10000AF94();
  *v4 = v8;
}

void sub_10005EBA0(uint64_t a1, int a2)
{
  sub_1000196FC(a1, a2, type metadata accessor for CachedSession, &qword_10008E7F0);
}

size_t sub_10005EBB4(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = sub_10005EDD0(a1, a2, a3, *v3, (uint64_t *)&unk_10008E4A0, (void (*)(_QWORD))type metadata accessor for EventValue);
  *v3 = result;
  return result;
}

char *sub_10005EBE0(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_10005ECF0(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

size_t sub_10005EBFC(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = sub_10005EDD0(a1, a2, a3, *v3, &qword_10008E510, (void (*)(_QWORD))&type metadata accessor for URL);
  *v3 = result;
  return result;
}

char *sub_10005EC28(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_10005EF08(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void sub_10005EC44(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_10005F0D0(a1, a2, a3, *v3, &qword_100090460);
  *v3 = v4;
}

char *sub_10005EC70(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_10005EFE8(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void sub_10005EC8C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_10005F0D0(a1, a2, a3, *v3, (uint64_t *)&unk_1000904C0);
  *v3 = v4;
}

char *sub_10005ECB8(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_10005F1A8(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

size_t sub_10005ECD4(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = sub_10005F288(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_10005ECF0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001AAC8(&qword_1000904D0);
    v11 = (char *)swift_allocObject(v10, (v9 << 6) | 0x20, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 64);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10005DD20(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10005E1D0((unint64_t)v14, v8, (unint64_t)v13);
  }
  swift_release(a4);
  return v11;
}

size_t sub_10005EDD0(size_t result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD))
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v8 = result;
  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v17 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10001AAC8(a5);
  v13 = *(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = *(unsigned __int8 *)(v13 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = (_QWORD *)sub_10005FB1C(v16 + v14 * v12, v15);
  result = j__malloc_size(v17);
  if (!v14)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v16 == 0x8000000000000000 && v14 == -1)
    goto LABEL_24;
  v17[2] = v11;
  v17[3] = 2 * ((uint64_t)(result - v16) / v14);
LABEL_19:
  v19 = *(unsigned __int8 *)(*(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8) + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = (unint64_t)v17 + v20;
  v22 = a4 + v20;
  if ((v8 & 1) != 0)
  {
    sub_10005DDB0(v22, v11, v21, a6);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10005E2BC(v22, v11, v21);
  }
  sub_1000104E8();
  return (size_t)v17;
}

char *sub_10005EF08(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001AAC8(&qword_100090480);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1000204D4(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10005E134((unint64_t)v14, v8, (unint64_t)v13);
  }
  swift_release(a4);
  return v11;
}

char *sub_10005EFE8(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001AAC8(&qword_100090428);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10005DF3C(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10005E364((unint64_t)v14, v8, (unint64_t)v13);
  }
  swift_release(a4);
  return v11;
}

void sub_10005F0D0(char a1, int64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v7 = *(_QWORD *)(a4 + 24);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (v8 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_10001AAC8(a5);
    v12 = (char *)sub_100018E5C(v11, 8 * v10 + 32);
    v13 = j__malloc_size(v12);
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 8);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    sub_10005DFC8(v14, v9, v12 + 32);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10005E434((uint64_t)v14, v9);
  }
  sub_1000104E8();
  sub_10000BF84();
}

char *sub_10005F1A8(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001AAC8(&qword_10008E4C0);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 8);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10005DFC8(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10005E5CC(v14, v8, v13);
  }
  swift_release(a4);
  return v11;
}

size_t sub_10005F288(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_10001AAC8(&qword_1000904E0);
  v11 = *(_QWORD *)(sub_10001AAC8(&qword_10008E7F8) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_24;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001AAC8(&qword_10008E7F8) - 8) + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = (unint64_t)v15 + v18;
  v20 = a4 + v18;
  if ((v5 & 1) != 0)
  {
    sub_10005E024(v20, v8, v19);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10005E4D0(v20, v8, v19);
  }
  swift_release(a4);
  return (size_t)v15;
}

uint64_t sub_10005F3D0()
{
  _QWORD *v0;

  sub_100010680();
  swift_release(v0[4]);
  swift_unknownObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[9]);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10005F410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = swift_task_alloc(dword_1000903F4);
  v5 = *(_OWORD *)(v0 + 32);
  v6 = *(_OWORD *)(v0 + 64);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_10005F798;
  *(_OWORD *)(v4 + 152) = v6;
  *(_QWORD *)(v4 + 136) = v2;
  *(_QWORD *)(v4 + 144) = v3;
  *(_OWORD *)(v4 + 120) = v5;
  v7 = sub_10001E1FC((uint64_t)sub_10005C76C);
  return sub_10001B170(v7, v8, 0);
}

uint64_t sub_10005F47C()
{
  _QWORD *v0;

  sub_100010680();
  swift_unknownObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[8]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10005F4BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = swift_task_alloc(dword_10009040C);
  v5 = *(_OWORD *)(v0 + 32);
  v6 = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_10005F52C;
  *(_QWORD *)(v4 + 160) = v3;
  *(_OWORD *)(v4 + 144) = v6;
  *(_QWORD *)(v4 + 136) = v2;
  *(_OWORD *)(v4 + 120) = v5;
  sub_10001E1FC((uint64_t)sub_10005C3F0);
  sub_10000CEB8();
  return sub_10001B170(v7, v8, v9);
}

uint64_t sub_10005F52C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = *v0;
  v1 = *v0;
  sub_10000B158(*(_QWORD *)(v3 + 16), &v3);
  return sub_10000BD38(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10005F568()
{
  _QWORD *v0;

  sub_100010680();
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10005F5A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  sub_1000154B8();
  v3 = v2;
  v4 = v0[2];
  v5 = v0[3];
  v6 = v0[4];
  v7 = v0[5];
  v9 = v0[6];
  v8 = v0[7];
  v10 = (_QWORD *)swift_task_alloc(dword_10009041C);
  *(_QWORD *)(v1 + 16) = v10;
  *v10 = v1;
  v10[1] = sub_10005F52C;
  return sub_10005BF18(v3, v4, v5, v6, v7, v9, v8);
}

void sub_10005F624(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_10005FA48(a1, a2, a3);
  sub_10001C724(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_10000BF94();
}

unint64_t sub_10005F650()
{
  unint64_t result;

  result = qword_1000904A8;
  if (!qword_1000904A8)
  {
    result = swift_getWitnessTable(&unk_10006FCF0, &unk_100089D40);
    atomic_store(result, (unint64_t *)&qword_1000904A8);
  }
  return result;
}

uint64_t sub_10005F68C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10005F6D8 + 4 * byte_10006FA5D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10005F70C + 4 * byte_10006FA58[v4]))();
}

uint64_t sub_10005F70C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005F714(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005F71CLL);
  return result;
}

uint64_t sub_10005F728(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005F730);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10005F734(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005F73C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for SessionError()
{
  sub_10000B0C0();
}

unint64_t sub_10005F75C()
{
  unint64_t result;

  result = qword_1000904E8;
  if (!qword_1000904E8)
  {
    result = swift_getWitnessTable(&unk_10006FCC8, &unk_100089D40);
    atomic_store(result, (unint64_t *)&qword_1000904E8);
  }
  return result;
}

uint64_t sub_10005F79C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10005F7B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10005F7CC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 400));
}

uint64_t sub_10005F7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_WORD *)(v16 + 22) = 2082;
  return swift_getErrorValue(v14, v15, a14);
}

uint64_t sub_10005F7F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v4, v5, v3 + 12);
}

uint64_t sub_10005F810@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void sub_10005F864()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = v0;
}

uint64_t sub_10005F880()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = v0;
  return swift_bridgeObjectRelease(0x8000000000000000);
}

uint64_t sub_10005F8A8(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return sub_10000CF18(a1, a2, 0, a4, a5);
}

uint64_t sub_10005F8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return swift_arrayDestroy(a17, 3);
}

uint64_t sub_10005F8C8()
{
  uint64_t v0;

  return swift_retain_n(v0, 2);
}

uint64_t sub_10005F8E0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10005F8EC(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_10005F900()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1000229EC(v0, v1);
}

unint64_t sub_10005F90C(uint64_t a1, uint64_t a2)
{
  return sub_10001A120(a1, a2);
}

char *sub_10005F914()
{
  int64_t v0;

  return sub_10005ECB8(0, v0, 0);
}

uint64_t sub_10005F93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

unint64_t sub_10005F944()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10001A120(v1, v0);
}

uint64_t sub_10005F964@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return a1 + v1;
}

void sub_10005F97C()
{
  uint64_t v0;

  ++*(_QWORD *)(v0 + 16);
}

BOOL sub_10005F98C(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10005F9A4()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

_QWORD *sub_10005F9E4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_10005FA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_task_dealloc(a10);
}

BOOL sub_10005FA18()
{
  char v0;
  char v1;

  return (!v1 & v0) != 0;
}

uint64_t sub_10005FA28()
{
  uint64_t v0;

  return swift_getObjectType(*(_QWORD *)(v0 + 128));
}

uint64_t sub_10005FA38()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

void sub_10005FA40(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10001D7E8(v2, a2);
}

uint64_t sub_10005FA48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10001AAC8(a3);
}

void sub_10005FA58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_10001B968(v0, v1, v2);
}

uint64_t sub_10005FA68()
{
  return 0;
}

uint64_t sub_10005FA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a21 + 8))(v22, a22);
}

uint64_t sub_10005FAB4()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_10005FABC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 80));
}

uint64_t sub_10005FAC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return static _DictionaryStorage.resize(original:capacity:move:)(a1, a2, v2);
}

uint64_t sub_10005FAD4(char a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_10000CA88(a1, v1, v2);
}

uint64_t sub_10005FAF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_100014F94(a1, v3, a3);
}

uint64_t sub_10005FAFC()
{
  uint64_t v0;

  return sub_10001D49C(v0);
}

uint64_t sub_10005FB1C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return swift_allocObject(v2, a1, a2 | 7);
}

unint64_t sub_10005FB34()
{
  return 0xD000000000000012;
}

void sub_10005FB48(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0x20u);
}

uint64_t sub_10005FB7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10005FB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return Dictionary.init(dictionaryLiteral:)(v4, a2, v5, a4);
}

uint64_t sub_10005FB9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return sub_10002E7AC(v2, a2, v3);
}

void sub_10005FBA8()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_10001C614(v0, v1);
}

uint64_t sub_10005FBB4()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_10005FBBC()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_10005FBD4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10005FBE8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10005FBFC()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_10005FC08()
{
  uint64_t v0;

  return sub_10000FE64(v0, 16);
}

uint64_t sub_10005FC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_task_dealloc(a9);
}

uint64_t sub_10005FC30(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  return sub_100014F94(a1, a2, (uint64_t *)va);
}

uint64_t sub_10005FC3C()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 80));
}

uint64_t sub_10005FC48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_100014F94(a1, v3, a3);
}

uint64_t sub_10005FC50(uint64_t a1)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * a1));
}

_QWORD *sub_10005FC5C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int64_t v24;

  v3 = v2;
  v4 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    sub_10005EC70(0, v5, 0);
    v7 = _swiftEmptyArrayStorage;
    v8 = (uint64_t *)(a1 + 48);
    while (1)
    {
      v24 = v5;
      v9 = v7;
      v10 = *(v8 - 2);
      v11 = *(v8 - 1);
      v12 = *v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13 = v4;
      v7 = v4;
      v14 = sub_1000602A0(v10, v11, v12);
      if (v3)
        break;
      v17 = v14;
      v18 = v15;
      v19 = v16;
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v11);
      v7 = v9;
      v21 = v9[2];
      v20 = v9[3];
      if (v21 >= v20 >> 1)
      {
        sub_10005EC70((char *)(v20 > 1), v21 + 1, 1);
        v7 = v9;
      }
      v7[2] = v21 + 1;
      v22 = &v7[3 * v21];
      v22[4] = v17;
      v22[5] = v18;
      v22[6] = v19;
      v8 += 3;
      v3 = 0;
      v5 = v24 - 1;
      v4 = v13;
      if (v24 == 1)
      {
        swift_release(v13);
        return v7;
      }
    }
    swift_release(v4);
    swift_release(v9);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    swift_release(a2);
    return _swiftEmptyArrayStorage;
  }
  return v7;
}

uint64_t sub_10005FDE8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = 0;
    v6 = (_OWORD *)(result + 40);
    v7 = _swiftEmptyArrayStorage;
    while (v5 < *(_QWORD *)(v3 + 16))
    {
      v8 = *((_QWORD *)v6 - 1);
      v15 = *v6;
      v16 = v8;
      v17 = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = sub_100061138(&v16, a2);
      if (v2)
      {
        swift_release(a2);
        swift_release(v7);
        swift_bridgeObjectRelease(v3);
        swift_bridgeObjectRelease(*((_QWORD *)&v15 + 1));
        v13 = v15;
        goto LABEL_17;
      }
      if ((v9 & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native(v7);
        v18 = v7;
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_10005EC70(0, v7[2] + 1, 1);
          v7 = v18;
        }
        v11 = v7[2];
        v10 = v7[3];
        if (v11 >= v10 >> 1)
        {
          result = (uint64_t)sub_10005EC70((char *)(v10 > 1), v11 + 1, 1);
          v7 = v18;
        }
        v7[2] = v11 + 1;
        v12 = &v7[3 * v11];
        v12[4] = v8;
        *(_OWORD *)(v12 + 5) = v15;
      }
      else
      {
        swift_bridgeObjectRelease(*((_QWORD *)&v15 + 1));
        result = swift_bridgeObjectRelease(v15);
      }
      ++v5;
      v6 = (_OWORD *)((char *)v6 + 24);
      if (v4 == v5)
        goto LABEL_15;
    }
    __break(1u);
  }
  else
  {
    v7 = _swiftEmptyArrayStorage;
LABEL_15:
    swift_release(a2);
    v13 = v3;
LABEL_17:
    swift_bridgeObjectRelease(v13);
    return (uint64_t)v7;
  }
  return result;
}

void sub_10005FF8C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  if (*(_QWORD *)(a2 + 16))
  {
    v4 = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), a1) & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0
      && *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v4) != a1)
    {
      sub_10001B340();
      if ((v7 & 1) != 0)
      {
        do
        {
          if (*(_QWORD *)(v5 + 8 * v6) == a1)
            break;
          sub_10001B340();
        }
        while ((v8 & 1) != 0);
      }
    }
  }
  sub_10000BF94();
}

void *sub_100060028()
{
  void *v0;
  char *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v0 = dlopen("../../AppleInternal/Library/Frameworks/RTCLocalBackend.framework/RTCLocalBackend", 1);
  if (v0)
    return dlsym(v0, "initLocalBackend");
  v2 = dlerror();
  if (v2)
  {
    v3 = String.init(cString:)(v2);
    v5 = v4;
  }
  else
  {
    v5 = 0xE700000000000000;
    v3 = 0x6E776F6E6B6E75;
  }
  if (qword_10008E0B8 != -1)
    swift_once(&qword_10008E0B8, sub_100060228);
  v6 = type metadata accessor for Logger(0);
  sub_100015718(v6, (uint64_t)qword_100097428);
  swift_bridgeObjectRetain();
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v13 = v11;
    *(_DWORD *)v10 = 136446210;
    swift_bridgeObjectRetain();
    v12 = sub_100014F94(v3, v5, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(v5, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "failed to load RTCTTR framework: %{public}s", v10, 0xCu);
    swift_arrayDestroy(v11, 1);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v5, 2);
  }
  return 0;
}

void *sub_10006020C()
{
  void *result;

  result = sub_100060028();
  off_100097420 = result;
  return result;
}

uint64_t sub_100060228()
{
  uint64_t v0;

  v0 = sub_10000F3D0();
  sub_100026B1C(v0, qword_100097428);
  sub_100015718(v0, (uint64_t)qword_100097428);
  return Logger.init(subsystem:category:)(0xD000000000000017, 0x8000000100071220, 0x2D646E656B636162, 0xEB00000000727474);
}

uint64_t sub_1000602A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = a3;
  v14 = a1;
  v15 = a2;
  v5 = *(_QWORD *)(v3 + 152);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = v5 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10000A19C(v7, (uint64_t)v11);
      v8 = v12;
      v9 = v13;
      sub_10001D44C(v11, v12);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(&v14, v8, v9);
      if (v4)
        break;
      sub_100015060(v11);
      v7 += 40;
      if (!--v6)
      {
        swift_bridgeObjectRelease(v5);
        return v14;
      }
    }
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v16);
    sub_100015060(v11);
  }
  else
  {
    v7 = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_1000603C0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;

  v2[4] = a1;
  v2[5] = v1;
  v2[6] = *v1;
  v3 = *(_QWORD *)(type metadata accessor for EventValue(0) - 8);
  v2[7] = v3;
  v2[8] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_10001AAC8(&qword_10008EF68) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v4);
  v2[10] = swift_task_alloc(v4);
  return swift_task_switch(sub_100060458, v1, 0);
}

uint64_t sub_100060458()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  os_log_type_t v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  if (qword_10008E080 != -1)
LABEL_72:
    swift_once(&qword_10008E080, sub_1000584B0);
  if (byte_1000973F0 != 1)
    goto LABEL_63;
  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD **)(v0 + 40);
  swift_retain(v2);
  v3 = sub_10005FC5C(v1, v2);
  v4 = *(_QWORD *)(v0 + 40);
  swift_retain(v4);
  v5 = sub_10005FDE8((uint64_t)v3, v4);
  v6 = v5;
  *(_QWORD *)(v0 + 88) = v5;
  v7 = *(void **)(v4 + 160);
  *(_QWORD *)(v0 + 96) = v7;
  if (!v7)
    goto LABEL_62;
  v8 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v0 + 104) = v8;
  if (!v8)
    goto LABEL_62;
  *(_QWORD *)(v0 + 112) = 0;
  v9 = *(_QWORD *)(v5 + 16);
  v10 = v7;
  if (!v9)
    goto LABEL_61;
  v11 = (_QWORD *)(v0 + 16);
  v12 = sub_100043F9C();
  v13 = 0;
  v104 = v12;
  v105 = v0 + 16;
  while (2)
  {
    v14 = *(_QWORD *)(v6 + 24 * v13 + 48);
    v15 = *(_QWORD *)(v14 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *v11 = Dictionary.init(minimumCapacity:)(v15, &type metadata for String, v12, &protocol witness table for String);
    v16 = *(_QWORD *)(v14 + 64);
    v106 = v14 + 64;
    v108 = v14;
    v17 = -1 << *(_BYTE *)(v14 + 32);
    v18 = sub_10000A828();
    v109 = 0;
    if (-v17 < 64)
      v26 = ~(-1 << -(char)v17);
    else
      v26 = -1;
    v27 = v26 & v16;
    v107 = (unint64_t)(63 - v17) >> 6;
    v103 = v107 - 1;
    while (1)
    {
      if (v27)
      {
        v27 &= v27 - 1;
LABEL_13:
        v28 = sub_10001ABF4(v18, v19, v20, v21, v22, v23, v24, v25, v103, v104, v105, v106, v107, v108);
        sub_10001C528(v28);
        sub_10001D1F0();
        goto LABEL_33;
      }
      if (__OFADD__(v109, 1))
      {
        __break(1u);
        goto LABEL_72;
      }
      sub_10001A30C();
      if (v30 != v31)
      {
        v32 = *(_QWORD *)(v106 + 8 * v29);
        if (v32)
          goto LABEL_18;
        v33 = v29 + 1;
        v109 = v29;
        if (v29 + 1 < v107)
        {
          v32 = *(_QWORD *)(v106 + 8 * v33);
          if (v32)
            goto LABEL_21;
          v109 = v29 + 1;
          if (v29 + 2 < v107)
          {
            v32 = *(_QWORD *)(v106 + 8 * (v29 + 2));
            if (v32)
            {
              v29 += 2;
LABEL_18:
              v27 = (v32 - 1) & v32;
              v109 = v29;
              goto LABEL_13;
            }
            v33 = v29 + 3;
            v109 = v29 + 2;
            if (v29 + 3 < v107)
            {
              v32 = *(_QWORD *)(v106 + 8 * v33);
              if (!v32)
              {
                while (!__OFADD__(v33, 1))
                {
                  sub_10001A30C();
                  if (v30 == v31)
                  {
                    v109 = v103;
                    goto LABEL_32;
                  }
                  v32 = *(_QWORD *)(v106 + 8 * v29);
                  v33 = v34 + 1;
                  if (v32)
                    goto LABEL_18;
                }
                __break(1u);
                goto LABEL_82;
              }
LABEL_21:
              v29 = v33;
              goto LABEL_18;
            }
          }
        }
      }
LABEL_32:
      v35 = sub_10001B08C();
      sub_10000D20C(v35);
      v27 = 0;
LABEL_33:
      sub_10001D420();
      v36 = sub_10001B08C();
      v37 = sub_100010E4C(v36);
      if (v45)
        break;
      v46 = *(uint64_t **)(v0 + 80);
      v47 = *v46;
      v48 = v46[1];
      sub_10001C7A8((uint64_t)v46);
      sub_1000425E0();
      v50 = v49;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 16));
      v52 = *(_QWORD *)(v0 + 16);
      *(_QWORD *)(v0 + 16) = 0x8000000000000000;
      *(_QWORD *)(v0 + 24) = v52;
      sub_1000103FC();
      sub_10000B00C();
      if (v31)
      {
        __break(1u);
        goto LABEL_68;
      }
      v56 = v53;
      v57 = v54;
      sub_10001AAC8(&qword_10008F8C8);
      v53 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v52);
      if ((v53 & 1) != 0)
      {
        v53 = sub_1000103FC();
        if ((v57 & 1) != (v58 & 1))
          return sub_10001E044();
        v56 = v53;
      }
      v59 = *(_QWORD **)(v0 + 24);
      if ((v57 & 1) != 0)
      {
        v60 = v59[7];

        *(_QWORD *)(v60 + 8 * v56) = v50;
      }
      else
      {
        v59[(v56 >> 6) + 8] |= 1 << v56;
        v61 = (_QWORD *)(v59[6] + 16 * v56);
        *v61 = v47;
        v61[1] = v48;
        *(_QWORD *)(v59[7] + 8 * v56) = v50;
        v62 = v59[2];
        v31 = __OFADD__(v62, 1);
        v55 = v62 + 1;
        if (v31)
        {
          __break(1u);
LABEL_70:
          v79 = 2;
LABEL_75:
          v77 = (v55 - 1) & v55;
          v76 = __clz(__rbit64(v55)) + (v79 << 6);
LABEL_76:
          *(_QWORD *)(v0 + 128) = v79;
          *(_QWORD *)(v0 + 136) = v77;
          *(_QWORD *)(v0 + 144) = *(_QWORD *)(*(_QWORD *)(v53 + 48) + 16 * v76 + 8);
          v80 = *(void **)(*(_QWORD *)(v53 + 56) + 8 * v76);
          *(_QWORD *)(v0 + 152) = v80;
          v81 = qword_10008E0B8;
          sub_100010644();
          v82 = v80;
          if (v81 == -1)
          {
LABEL_77:
            v83 = sub_10000F3D0();
            sub_100015718(v83, (uint64_t)qword_100097428);
            v84 = sub_10000A944();
            v85 = (void *)Logger.logObject.getter(v84);
            v86 = static os_log_type_t.default.getter();
            if (sub_10001AEC4(v86))
            {
              v87 = (_DWORD *)sub_100012C5C(12);
              v88 = sub_100012C5C(32);
              v110 = v88;
              *v87 = 136446210;
              v89 = sub_100010644();
              v91 = sub_10001D02C(v89, v90, &v110);
              sub_10001939C(v91);
              sub_10001D328((void *)&_mh_execute_header, v92, v93, "running TTR rule \"%{public}s\"");
              sub_10001DA34();
              sub_1000120F8(v88);
              sub_1000120F8((uint64_t)v87);
            }
            else
            {
              sub_100018F3C();
            }

            sub_10001D0C0();
            v94 = (_QWORD *)sub_10001116C();
            sub_100018130(v94, v95, v96, v97, v98, v99, v100, v101, v103, v104, v105);
            v102 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
            *(_QWORD *)(v0 + 168) = v102;
            *v102 = v0;
            v102[1] = sub_100060AEC;
            sub_10001BAC4();
            return sub_100012254();
          }
LABEL_82:
          swift_once(&qword_10008E0B8, sub_100060228);
          goto LABEL_77;
        }
        v59[2] = v55;
        swift_bridgeObjectRetain();
      }
      v63 = *(_QWORD *)(v0 + 64);
      v64 = *(_QWORD *)(v0 + 16);
      *(_QWORD *)(v0 + 16) = v59;
      swift_bridgeObjectRelease(v64);
      swift_bridgeObjectRelease(v48);
      v18 = sub_100033B1C(v63);
    }
    sub_10000790C(v37, v38, v39, v40, v41, v42, v43, v44, v103, v104, v105, v106, v107, v108);
    v65 = sub_10001B054();
    v67 = -1 << v66;
    if (-(-1 << v66) < 64)
      v68 = ~(-1 << -(char)v67);
    else
      v68 = -1;
    v69 = v68 & *(_QWORD *)(v65 + 64);
    swift_bridgeObjectRetain();
    if (v69)
    {
      v79 = 0;
      v76 = __clz(__rbit64(v69));
      v77 = (v69 - 1) & v69;
      goto LABEL_76;
    }
    v70 = 63 - v67;
    v12 = v104;
    if ((unint64_t)(63 - v67) > 0x7F)
    {
      v55 = *(_QWORD *)(v53 + 72);
      if (v55)
      {
LABEL_68:
        v79 = 1;
        goto LABEL_75;
      }
      if (v70 >= 0xC0)
      {
        v55 = *(_QWORD *)(v53 + 80);
        if (v55)
          goto LABEL_70;
        if (v70 >= 0x100)
        {
          v55 = *(_QWORD *)(v53 + 88);
          if (v55)
          {
            v79 = 3;
            goto LABEL_75;
          }
          if (v70 >= 0x140)
          {
            v55 = *(_QWORD *)(v53 + 96);
            if (v55)
            {
              v79 = 4;
              goto LABEL_75;
            }
            v71 = v70 >> 6;
            v72 = 13;
            while (v72 - 8 < v71)
            {
              v55 = *(_QWORD *)(v53 + 8 * v72++);
              if (v55)
              {
                v79 = v72 - 9;
                goto LABEL_75;
              }
            }
          }
        }
      }
    }
    v74 = *(_QWORD *)(v0 + 104);
    v73 = *(_QWORD *)(v0 + 112);
    swift_release(v53);
    sub_10001BC04();
    if (v73 == v74)
    {
      v78 = *(void **)(v0 + 96);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));

      goto LABEL_63;
    }
    v13 = *(_QWORD *)(v0 + 112) + 1;
    *(_QWORD *)(v0 + 112) = v13;
    v6 = *(_QWORD *)(v0 + 88);
    v11 = (_QWORD *)v105;
    if (v13 < *(_QWORD *)(v6 + 16))
      continue;
    break;
  }
LABEL_61:
  __break(1u);
LABEL_62:
  sub_10000A828();
LABEL_63:
  sub_10001B1F8();
  sub_100010D58();
  sub_10000F3D8();
  return sub_10001BCB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100060AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  sub_10000BDC4(*(_QWORD *)(*(_QWORD *)v0 + 168));
  swift_bridgeObjectRelease(v1);
  sub_100010D58();
  return swift_task_switch(sub_100060B50, v2, 0);
}

void sub_100060B50()
{
  uint64_t v0;
  int64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  os_log_type_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  void *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  char v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  int64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v100 = (_QWORD *)(v0 + 16);

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 120);
    goto LABEL_3;
  }
  v20 = &unk_10008F8A0;
LABEL_8:
  v21 = __OFADD__(v1++, 1);
  if (v21)
    goto LABEL_73;
  v22 = (1 << *(_BYTE *)(v0 + 176)) + 63;
  v3 = *(_QWORD *)(v0 + 120);
  if (v1 < (uint64_t)(v22 >> 6))
  {
    v23 = v3 + 64;
    v24 = *(_QWORD *)(v3 + 64 + 8 * v1);
    if (v24)
      goto LABEL_68;
    v25 = v22 >> 6;
    v26 = v1 + 1;
    if (v1 + 1 < v25)
    {
      v24 = *(_QWORD *)(v23 + 8 * v26);
      if (v24)
        goto LABEL_67;
      v26 = v1 + 2;
      if (v1 + 2 < v25)
      {
        v24 = *(_QWORD *)(v23 + 8 * v26);
        if (v24)
        {
LABEL_67:
          v1 = v26;
          goto LABEL_68;
        }
        v1 += 3;
        if (v1 < v25)
        {
          v24 = *(_QWORD *)(v23 + 8 * v1);
          if (!v24)
          {
            while (1)
            {
              v26 = v1 + 1;
              if (__OFADD__(v1, 1))
                goto LABEL_75;
              if (v26 >= v25)
                goto LABEL_21;
              v24 = *(_QWORD *)(v23 + 8 * v26);
              ++v1;
              if (v24)
                goto LABEL_67;
            }
          }
LABEL_68:
          v4 = (v24 - 1) & v24;
          v5 = __clz(__rbit64(v24)) + (v1 << 6);
LABEL_4:
          *(_QWORD *)(v0 + 128) = v1;
          *(_QWORD *)(v0 + 136) = v4;
          *(_QWORD *)(v0 + 144) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v5 + 8);
          v6 = *(void **)(*(_QWORD *)(v3 + 56) + 8 * v5);
          *(_QWORD *)(v0 + 152) = v6;
          v7 = qword_10008E0B8;
          sub_100010644();
          v8 = v6;
          if (v7 != -1)
            goto LABEL_76;
          goto LABEL_5;
        }
      }
    }
  }
LABEL_21:
  v28 = *(_QWORD *)(v0 + 104);
  v27 = *(_QWORD *)(v0 + 112);
  swift_release(v3);
  sub_10001BC04();
  if (v27 == v28)
  {
    v97 = *(void **)(v0 + 96);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));

    sub_10001B1F8();
    sub_100010D58();
    sub_10000F3D8();
    sub_10001BCB8(*(uint64_t (**)(void))(v0 + 8));
    return;
  }
  v29 = *(_QWORD *)(v0 + 112) + 1;
  *(_QWORD *)(v0 + 112) = v29;
  v30 = *(_QWORD *)(v0 + 88);
  if (v29 >= *(_QWORD *)(v30 + 16))
    goto LABEL_74;
  v31 = *(_QWORD *)(v30 + 24 * v29 + 48);
  v32 = *(_QWORD *)(v31 + 16);
  v33 = sub_100043F9C();
  swift_bridgeObjectRetain();
  sub_100010644();
  *v100 = Dictionary.init(minimumCapacity:)(v32, &type metadata for String, v33, &protocol witness table for String);
  v34 = *(_QWORD *)(v31 + 64);
  v101 = v31 + 64;
  v103 = v31;
  v35 = -1 << *(_BYTE *)(v31 + 32);
  v36 = sub_10000A828();
  v104 = 0;
  if (-v35 < 64)
    v44 = ~(-1 << -(char)v35);
  else
    v44 = -1;
  v45 = v44 & v34;
  v102 = (unint64_t)(63 - v35) >> 6;
  v99 = v102 - 1;
  if ((v44 & v34) != 0)
  {
LABEL_27:
    v45 &= v45 - 1;
LABEL_28:
    v46 = sub_10001ABF4(v36, v37, v38, v39, v40, v41, v42, v43, v98, v99, (uint64_t)v100, v101, v102, v103);
    sub_10001C528(v46);
    sub_10001D1F0();
    goto LABEL_48;
  }
  while (1)
  {
    if (__OFADD__(v104, 1))
      goto LABEL_72;
    sub_10001A30C();
    if (v48 != v21)
    {
      v49 = *(_QWORD *)(v101 + 8 * v47);
      if (v49)
        goto LABEL_33;
      v50 = v47 + 1;
      v104 = v47;
      if (v47 + 1 < v102)
      {
        v49 = *(_QWORD *)(v101 + 8 * v50);
        if (v49)
          goto LABEL_36;
        v104 = v47 + 1;
        if (v47 + 2 < v102)
        {
          v49 = *(_QWORD *)(v101 + 8 * (v47 + 2));
          if (v49)
          {
            v47 += 2;
            goto LABEL_33;
          }
          v50 = v47 + 3;
          v104 = v47 + 2;
          if (v47 + 3 < v102)
          {
            v49 = *(_QWORD *)(v101 + 8 * v50);
            if (!v49)
            {
              while (!__OFADD__(v50, 1))
              {
                sub_10001A30C();
                if (v48 == v21)
                {
                  v104 = v99;
                  goto LABEL_47;
                }
                v49 = *(_QWORD *)(v101 + 8 * v47);
                v50 = v51 + 1;
                if (v49)
                  goto LABEL_33;
              }
              __break(1u);
              return;
            }
LABEL_36:
            v47 = v50;
LABEL_33:
            v45 = (v49 - 1) & v49;
            v104 = v47;
            goto LABEL_28;
          }
        }
      }
    }
LABEL_47:
    v52 = sub_10001B08C();
    sub_10000D20C(v52);
    v45 = 0;
LABEL_48:
    sub_10001D420();
    v53 = sub_10001B08C();
    v54 = sub_100010E4C(v53);
    if (v62)
    {
      sub_10000790C(v54, v55, v56, v57, v58, v59, v60, v61, v98, v99, (uint64_t)v100, v101, v102, v103);
      v84 = sub_10001B054();
      v86 = 1 << v85;
      if (v86 < 64)
        v87 = ~(-1 << v86);
      else
        v87 = -1;
      v2 = v87 & *(_QWORD *)(v84 + 64);
      swift_bridgeObjectRetain();
      v1 = 0;
      if (v2)
      {
LABEL_3:
        v4 = (v2 - 1) & v2;
        v5 = __clz(__rbit64(v2)) | (v1 << 6);
        goto LABEL_4;
      }
      goto LABEL_8;
    }
    v63 = v20;
    v64 = *(uint64_t **)(v0 + 80);
    v66 = *v64;
    v65 = v64[1];
    sub_10001C7A8((uint64_t)v64);
    sub_1000425E0();
    v68 = v67;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 16));
    v70 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v0 + 16) = 0x8000000000000000;
    *(_QWORD *)(v0 + 24) = v70;
    sub_100010ED8();
    sub_10000B00C();
    if (v21)
      break;
    v73 = v71;
    v74 = v72;
    sub_10001AAC8(&qword_10008F8C8);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v70))
    {
      v75 = sub_100010ED8();
      if ((v74 & 1) != (v76 & 1))
      {
        sub_10001E044();
        return;
      }
      v73 = v75;
    }
    v77 = *(_QWORD **)(v0 + 24);
    if ((v74 & 1) != 0)
    {
      v78 = v77[7];

      *(_QWORD *)(v78 + 8 * v73) = v68;
    }
    else
    {
      v77[(v73 >> 6) + 8] |= 1 << v73;
      v79 = (_QWORD *)(v77[6] + 16 * v73);
      *v79 = v66;
      v79[1] = v65;
      *(_QWORD *)(v77[7] + 8 * v73) = v68;
      v80 = v77[2];
      v21 = __OFADD__(v80, 1);
      v81 = v80 + 1;
      if (v21)
        goto LABEL_71;
      v77[2] = v81;
      swift_bridgeObjectRetain();
    }
    v82 = *(_QWORD *)(v0 + 64);
    v83 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v77;
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(v65);
    v36 = sub_100033B1C(v82);
    v20 = v63;
    if (v45)
      goto LABEL_27;
  }
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  swift_once(&qword_10008E0B8, sub_100060228);
LABEL_5:
  v9 = sub_10000F3D0();
  sub_100015718(v9, (uint64_t)qword_100097428);
  v10 = sub_10000A944();
  v11 = (void *)Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (sub_10001AEC4(v12))
  {
    v13 = (_DWORD *)sub_100012C5C(12);
    v14 = sub_100012C5C(32);
    v105 = v14;
    *v13 = 136446210;
    v15 = sub_100010644();
    v17 = sub_10001D02C(v15, v16, &v105);
    sub_10001939C(v17);
    sub_10001D328((void *)&_mh_execute_header, v18, v19, "running TTR rule \"%{public}s\"");
    sub_10001DA34();
    sub_1000120F8(v14);
    sub_1000120F8((uint64_t)v13);
  }
  else
  {
    sub_100018F3C();
  }

  sub_10001D0C0();
  v88 = (_QWORD *)sub_10001116C();
  sub_100018130(v88, v89, v90, v91, v92, v93, v94, v95, v98, v99, (uint64_t)v100);
  v96 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 168) = v96;
  *v96 = v0;
  v96[1] = sub_100060AEC;
  sub_10001BAC4();
  sub_100012254();
}

uint64_t sub_100061138(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = sub_100041344(*a1, a1[1], a1[2]);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v3;
  v6 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(v6 + 16))
  {
    sub_10005FF8C(v3, v6);
    if ((v7 & 1) == 0)
    {
      if (qword_10008E0B8 != -1)
        swift_once(&qword_10008E0B8, sub_100060228);
      v20 = type metadata accessor for Logger(0);
      sub_100015718(v20, (uint64_t)qword_100097428);
      v21 = swift_retain_n(a2, 2);
      v12 = Logger.logObject.getter(v21);
      v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = swift_slowAlloc(22, -1);
        v25 = swift_slowAlloc(32, -1);
        v26 = v5;
        v28 = v25;
        *(_DWORD *)v14 = 134218242;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 4, v14 + 12);
        *(_WORD *)(v14 + 12) = 2082;
        swift_retain(a2);
        v22 = sub_100061994();
        v24 = v23;
        swift_release(a2);
        v26 = sub_100014F94(v22, v24, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 14, v14 + 22);
        swift_release_n(a2, 2);
        swift_bridgeObjectRelease(v24);
        v18 = "removing event with category %ld from submission to %{public}s due to allowlist";
        goto LABEL_15;
      }
LABEL_16:

      swift_release_n(a2, 2);
      return 0;
    }
  }
  v8 = *(_QWORD *)(a2 + 120);
  if (!*(_QWORD *)(v8 + 16))
    return 1;
  sub_10005FF8C(v5, v8);
  if ((v9 & 1) == 0)
    return 1;
  if (qword_10008E0B8 != -1)
    swift_once(&qword_10008E0B8, sub_100060228);
  v10 = type metadata accessor for Logger(0);
  sub_100015718(v10, (uint64_t)qword_100097428);
  v11 = swift_retain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v12, v13))
    goto LABEL_16;
  v14 = swift_slowAlloc(22, -1);
  v25 = swift_slowAlloc(32, -1);
  v26 = v5;
  v28 = v25;
  *(_DWORD *)v14 = 134218242;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 4, v14 + 12);
  *(_WORD *)(v14 + 12) = 2082;
  swift_retain(a2);
  v15 = sub_100061994();
  v17 = v16;
  swift_release(a2);
  v26 = sub_100014F94(v15, v17, &v28);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 14, v14 + 22);
  swift_release_n(a2, 2);
  swift_bridgeObjectRelease(v17);
  v18 = "removing event with category %ld from submission to %{public}s due to denylist";
LABEL_15:
  _os_log_impl((void *)&_mh_execute_header, v12, v13, v18, (uint8_t *)v14, 0x16u);
  swift_arrayDestroy(v25, 1);
  swift_slowDealloc(v25, -1, -1);
  swift_slowDealloc(v14, -1, -1);

  return 0;
}

void sub_1000614A4(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _QWORD aBlock[5];
  uint64_t v35;

  v31 = a8;
  v32 = a7;
  v33 = a3;
  v13 = sub_10001AAC8(&qword_1000905F8);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_opt_self(NSDictionary);
  v18 = swift_dynamicCastObjCClassUnconditional(a2, v17, 0, 0, 0);
  aBlock[0] = 0;
  v19 = sub_100043F9C();
  static Dictionary._forceBridgeFromObjectiveC(_:result:)(v18, aBlock, &type metadata for String, v19, &protocol witness table for String);
  v20 = aBlock[0];
  if (aBlock[0])
  {
    v21 = *a4;
    v22 = *(_QWORD *)(a5 + 128);
    v23 = *(_QWORD *)(a5 + 136);
    v30 = v22;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13);
    v24 = *(unsigned __int8 *)(v14 + 80);
    v25 = (v24 + 32) & ~v24;
    v26 = (v15 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
    v27 = swift_allocObject(&unk_100089E38, v26 + 8, v24 | 7);
    *(_QWORD *)(v27 + 16) = a6;
    *(_QWORD *)(v27 + 24) = v32;
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v27 + v25, v16, v13);
    *(_QWORD *)(v27 + v26) = v31;
    aBlock[4] = sub_100061B10;
    v35 = v27;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100061888;
    aBlock[3] = &unk_100089E50;
    v28 = _Block_copy(aBlock);
    v29 = v35;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release(v29);
    sub_100061B68(v21, v30, v23, v20, (uint64_t)v28, v33);
    swift_bridgeObjectRelease(v23);
    _Block_release(v28);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000616A8(char a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  if (qword_10008E0B8 != -1)
    swift_once(&qword_10008E0B8, sub_100060228);
  v6 = type metadata accessor for Logger(0);
  sub_100015718(v6, (uint64_t)qword_100097428);
  v7 = swift_bridgeObjectRetain_n(a3, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(18, -1);
    v11 = swift_slowAlloc(32, -1);
    v15 = v11;
    *(_DWORD *)v10 = 136446466;
    swift_bridgeObjectRetain();
    v14 = sub_100014F94(a2, a3, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v10 + 12) = 1026;
    LODWORD(v14) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, (char *)&v14 + 4, v10 + 14, v10 + 18);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "TTR rule \"%{public}s\" processed event with status: %{BOOL,public}d", (uint8_t *)v10, 0x12u);
    swift_arrayDestroy(v11, 1);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  v12 = sub_10001AAC8(&qword_1000905F8);
  return CheckedContinuation.resume(returning:)(v12, v12);
}

uint64_t sub_100061888(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_1000618C4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));

  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100061910()
{
  uint64_t v0;

  sub_1000618C4();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for BackendTTR()
{
  return objc_opt_self(_TtC13rtcreportingd10BackendTTR);
}

uint64_t sub_100061948(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10009052C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100037EE0;
  return sub_1000603C0(a1);
}

unint64_t sub_100061994()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;

  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(void **)(v0 + 136);
  sub_100010644();
  v3._countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v1);
  return 0xD000000000000016;
}

unint64_t sub_100061A1C()
{
  return sub_100061994();
}

unint64_t sub_100061A3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000905F0;
  if (!qword_1000905F0)
  {
    v1 = type metadata accessor for BackendTTR();
    result = swift_getWitnessTable(&unk_10006FDCC, v1);
    atomic_store(result, (unint64_t *)&qword_1000905F0);
  }
  return result;
}

void sub_100061A78(uint64_t a1)
{
  uint64_t v1;

  sub_1000614A4(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(uint64_t **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_100061A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10001AAC8(&qword_1000905F8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100061B10(char a1)
{
  uint64_t v1;

  sub_10001AAC8(&qword_1000905F8);
  return sub_1000616A8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100061B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  Class isa;
  NSString v11;
  Class v12;

  sub_100043F9C();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v11 = String._bridgeToObjectiveC()();
  v12 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a4);
  objc_msgSend(a6, "handleEvent:sender:ruleConfig:withReplyBlock:", isa, v11, v12, a5);

}

uint64_t sub_100061C58(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + 40);
  sub_100019A20();
  os_unfair_lock_lock(v3 + 6);
  sub_10006264C((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 6);
  return swift_release(v3);
}

uint64_t sub_100061CB8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026B1C(v0, qword_100090600);
  sub_100015718(v0, (uint64_t)qword_100090600);
  return Logger.init(subsystem:category:)(0xD000000000000017, 0x8000000100071220, 0x72656E657473696CLL, 0xE800000000000000);
}

uint64_t sub_100061D2C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  _QWORD *v32;
  uint64_t v33;
  void *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v3 = v1;
  v4 = type metadata accessor for DispatchQoS.QoSClass(0);
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  __chkstk_darwin(v4);
  v5 = sub_10001BAF8();
  v37 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(v5);
  v6 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  sub_10000BE50();
  v9 = v8 - v7;
  v10 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  sub_100012C34();
  __chkstk_darwin(v11);
  sub_10000BE50();
  v14 = v13 - v12;
  type metadata accessor for DispatchQoS(0);
  sub_100012C34();
  __chkstk_darwin(v15);
  sub_10000BE50();
  v18 = v17 - v16;
  sub_1000301F8();
  static DispatchQoS.background.getter();
  v40 = _swiftEmptyArrayStorage;
  v19 = sub_1000627EC();
  v20 = sub_10001AAC8(&qword_10008EC40);
  v21 = sub_100030234();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v20, v21, v10, v19);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v37);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v38 + 104))(v2, enum case for DispatchQoS.QoSClass.background(_:), v39);
  v22 = static OS_dispatch_queue.global(qos:)(v2);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v2, v39);
  v23 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ELL, 0x8000000100073110, v18, v14, v9, v22);
  *(_QWORD *)(v3 + 16) = v23;
  *(_QWORD *)(v3 + 24) = 0;
  v24 = sub_10001AAC8(&qword_1000906E8);
  v25 = sub_100018E5C(v24, 20);
  *(_DWORD *)(v25 + 16) = 0;
  *(_QWORD *)(v3 + 32) = v25;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage, v26))
  {
    sub_100067F28((unint64_t)_swiftEmptyArrayStorage);
    v27 = v35;
  }
  else
  {
    v27 = &_swiftEmptySetSingleton;
  }
  v28 = sub_10001AAC8(&qword_1000906F0);
  v29 = sub_100018E5C(v28, 28);
  *(_DWORD *)(v29 + 24) = 0;
  *(_QWORD *)(v29 + 16) = v27;
  *(_QWORD *)(v3 + 40) = v29;
  *(_BYTE *)(v3 + 48) = a1 & 1;
  v30 = type metadata accessor for XPCConnection();
  sub_100018E5C(v30, 48);
  v31 = v23;
  swift_retain(v3);
  v32 = XPCConnection.init(machService:targetQ:listen:delegate:)(0xD000000000000017, 0x8000000100071220, v31, 1, v3, (uint64_t)&off_100089EA0);
  v33 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v32;
  swift_release(v33);
  return v3;
}

void sub_100061FF4(void *a1)
{
  char *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;

  v1 = xpc_copy_description(a1);
  v2 = String.init(cString:)(v1);
  v4 = v3;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease(0xE000000000000000);
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000022, 0x80000001000730E0, "rtcreportingd/Listener.swift", 28, 2);
  __break(1u);
}

uint64_t sub_100062098(_xpc_connection_s *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  pid_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  pid_t pid;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  pid_t v37;
  pid_t v38;
  uint64_t v39;

  sub_10001AAC8((uint64_t *)&unk_1000903E0);
  sub_100012C34();
  __chkstk_darwin(v4);
  v5 = sub_10001BAF8();
  v6 = type metadata accessor for XPCObject(v5);
  sub_100012C34();
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v36 - v11;
  sub_10001AAC8(&qword_10008FEE0);
  sub_100012C34();
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v36 - v17;
  swift_unknownObjectRetain(a1);
  XPCIncomingConnection.entitlementValue(forKey:)(0xD00000000000001FLL, 0x80000001000730A0, (uint64_t)a1, (uint64_t)v18);
  sub_10002FE50((uint64_t)v18, (uint64_t)v16);
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v16, 1, v6) == 1)
  {
    sub_100062700((uint64_t)v16);
LABEL_14:
    pid = xpc_connection_get_pid(a1);
    if (qword_10008E0C0 != -1)
      swift_once(&qword_10008E0C0, sub_100061CB8);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_100015718(v27, (uint64_t)qword_100090600);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)sub_100012270();
      *(_DWORD *)v31 = 67240192;
      v38 = pid;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v31 + 4, v31 + 8);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "connection attempted by unentitled process %{public}d", v31, 8u);
      sub_1000120F8((uint64_t)v31);
    }

    xpc_connection_cancel(a1);
    sub_10001A244();
    return sub_100062700((uint64_t)v18);
  }
  sub_10001CE4C((uint64_t)v16, (uint64_t)v12);
  sub_10004AADC((uint64_t)v12, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload(v10, v6) != 2)
  {
    sub_10002FCCC((uint64_t)v12);
    v25 = (uint64_t)v10;
LABEL_13:
    sub_10002FCCC(v25);
    goto LABEL_14;
  }
  if ((*v10 & 1) == 0)
  {
    v25 = (uint64_t)v12;
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v1 + 48) & 1) != 0)
  {
    v19 = xpc_connection_get_pid(a1);
    if (qword_10008E0C0 != -1)
      swift_once(&qword_10008E0C0, sub_100061CB8);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_100015718(v20, (uint64_t)qword_100090600);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)sub_100012270();
      *(_DWORD *)v24 = 67240192;
      v37 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v24 + 4, v24 + 8);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "rejecting connection from %{public}d while reporting is disabled", v24, 8u);
      sub_1000120F8((uint64_t)v24);
    }

    xpc_connection_cancel(a1);
    sub_10001A244();
  }
  else
  {
    v33 = type metadata accessor for TaskPriority(0);
    _s10RTCUtility9XPCObjectOwst_0(v2, 1, 1, v33);
    v34 = (_QWORD *)sub_100018E5C((uint64_t)&unk_100089EC8, 48);
    v34[2] = 0;
    v34[3] = 0;
    v34[4] = v1;
    v34[5] = a1;
    swift_unknownObjectRetain(a1);
    sub_100019A20();
    v35 = sub_10002E7AC(v2, (uint64_t)&unk_1000906E0, (uint64_t)v34);
    sub_10001A244();
    swift_release(v35);
  }
  sub_10002FCCC((uint64_t)v12);
  return sub_100062700((uint64_t)v18);
}

uint64_t sub_100062470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  *(_QWORD *)(v5 + 16) = a4;
  v8 = type metadata accessor for Client();
  swift_allocObject(v8, 160, 15);
  v9 = dword_10008EC2C;
  swift_retain(a4);
  swift_unknownObjectRetain(a5);
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v5 + 24) = v10;
  *v10 = v5;
  v10[1] = sub_100062500;
  return sub_10002DF80();
}

uint64_t sub_100062500(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10006255C, 0, 0);
}

uint64_t sub_10006255C()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 16) + 40);
  sub_100019A20();
  os_unfair_lock_lock(v2 + 6);
  sub_100062600((uint64_t)&v2[4], v1);
  v3 = *(_QWORD *)(v0 + 32);
  os_unfair_lock_unlock(v2 + 6);
  swift_release(v3);
  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100062600(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_retain(a2);
  sub_10004E718(&v4, a2);
  return swift_release(v4);
}

uint64_t sub_10006264C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_1000504F0(a2, a2);
  return swift_release(v2);
}

uint64_t sub_10006267C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return v0;
}

uint64_t sub_1000626B0()
{
  uint64_t v0;

  sub_10006267C();
  return swift_deallocClassInstance(v0, 49, 7);
}

uint64_t type metadata accessor for Listener()
{
  return objc_opt_self(_TtC13rtcreportingd8Listener);
}

void sub_1000626F0(void *a1)
{
  sub_100061FF4(a1);
}

uint64_t sub_100062700(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001AAC8(&qword_10008FEE0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100062740()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_unknownObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100062774(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1000906DC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10002C490;
  return sub_100062470(a1, v4, v5, v7, v6);
}

unint64_t sub_1000627EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008EC38;
  if (!qword_10008EC38)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_10008EC38);
  }
  return result;
}

uint64_t destroy for RawStorebag._EncodedRawStorebag(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for RawStorebag._EncodedRawStorebag(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for RawStorebag._EncodedRawStorebag(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for RawStorebag._EncodedRawStorebag(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for RawStorebag._EncodedRawStorebag(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RawStorebag._EncodedRawStorebag(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RawStorebag._EncodedRawStorebag()
{
  return &type metadata for RawStorebag._EncodedRawStorebag;
}

uint64_t sub_1000629D0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 6775138 && a2 == 0xE300000000000000)
  {
    v5 = 0xE300000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6775138, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x727574616E676973 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x727574616E676973, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100062AB8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x727574616E676973;
  else
    return 6775138;
}

uint64_t sub_100062AEC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  v3 = sub_10001AAC8(&qword_1000906F8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001D44C(a1, v7);
  v9 = sub_100062D40();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RawStorebag._EncodedRawStorebag.CodingKeys, &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_100015060(a1);
  }
  else
  {
    v17 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
    v12 = v11;
    v16 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_100015060(a1);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v12);
  }
  return v8;
}

uint64_t sub_100062C98()
{
  char *v0;

  return sub_100062AB8(*v0);
}

uint64_t sub_100062CA0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000629D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100062CC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100062D40();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100062CEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100062D40();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100062D14@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_100062AEC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

unint64_t sub_100062D40()
{
  unint64_t result;

  result = qword_100090700;
  if (!qword_100090700)
  {
    result = swift_getWitnessTable(&unk_10006FF6C, &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100090700);
  }
  return result;
}

uint64_t destroy for RawStorebag(uint64_t a1)
{
  sub_100010720(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return sub_100010720(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t *initializeWithCopy for RawStorebag(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_100021264(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v7 = a2[2];
  v6 = a2[3];
  sub_100021264(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for RawStorebag(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  sub_100021264(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100010720(v6, v7);
  v9 = a2[2];
  v8 = a2[3];
  sub_100021264(v9, v8);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_100010720(v10, v11);
  return a1;
}

uint64_t *assignWithTake for RawStorebag(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100010720(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100010720(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for RawStorebag(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0xD && *(_BYTE *)(a1 + 32))
    {
      v2 = *(_DWORD *)a1 + 12;
    }
    else
    {
      v2 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for RawStorebag(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RawStorebag()
{
  return &type metadata for RawStorebag;
}

uint64_t storeEnumTagSinglePayload for RawStorebag._EncodedRawStorebag.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100062FA0 + 4 * byte_10006FE45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100062FD4 + 4 * byte_10006FE40[v4]))();
}

uint64_t sub_100062FD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100062FDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100062FE4);
  return result;
}

uint64_t sub_100062FF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100062FF8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100062FFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100063004(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RawStorebag._EncodedRawStorebag.CodingKeys()
{
  return &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys;
}

unint64_t sub_100063024()
{
  unint64_t result;

  result = qword_100090708;
  if (!qword_100090708)
  {
    result = swift_getWitnessTable(&unk_10006FF44, &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100090708);
  }
  return result;
}

unint64_t sub_100063064()
{
  unint64_t result;

  result = qword_100090710;
  if (!qword_100090710)
  {
    result = swift_getWitnessTable(&unk_10006FEB4, &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100090710);
  }
  return result;
}

unint64_t sub_1000630A4()
{
  unint64_t result;

  result = qword_100090718[0];
  if (!qword_100090718[0])
  {
    result = swift_getWitnessTable(&unk_10006FEDC, &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys);
    atomic_store(result, qword_100090718);
  }
  return result;
}

uint64_t sub_1000630E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_1000630E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100070050;
    swift_initEnumMetadataMultiPayload(a1, 0, 2, v4);
    return 0;
  }
  return result;
}

uint64_t *sub_100063158(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain(v8);
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 == 1)
    {
      v11 = a2[1];
      *v3 = *a2;
      v3[1] = v11;
      *((_BYTE *)v3 + v5) = 1;
      swift_bridgeObjectRetain(v11);
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
    }
  }
  return v3;
}

uint64_t sub_100063270(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 0x10)
    v3 = 16;
  v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)
      return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    else
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_1000632B8 + 4 * byte_10006FFC5[v5]))();
  }
}

_QWORD *sub_100063310(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_bridgeObjectRetain(v8);
    v9 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v9 = 0;
  }
  *((_BYTE *)a1 + v5) = v9;
  return a1;
}

_QWORD *sub_1000633E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_bridgeObjectRelease(a1[1]);
    else
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      v12 = a2[1];
      a1[1] = v12;
      *((_BYTE *)a1 + v7) = 1;
      swift_bridgeObjectRetain(v12);
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  return a1;
}

_OWORD *sub_100063580(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *a1 = *a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

uint64_t sub_100063654(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if ((_OWORD *)a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    else
      (*(void (**)(uint64_t, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *(_OWORD *)a1 = *a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *(_BYTE *)(a1 + v7) = v12;
  }
  return a1;
}

uint64_t sub_1000637E0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 0x10uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1000638A4 + 4 * byte_10006FFE8[(v4 - 1)]))();
}

void sub_1000638F0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v6 = v5 + 1;
  v7 = 8 * (v5 + 1);
  if (a3 < 0xFF)
  {
    v8 = 0;
  }
  else if (v6 <= 3)
  {
    v10 = ((a3 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v10))
    {
      v8 = &dword_100000004;
    }
    else if (v10 >= 0x100)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 > 1;
    }
  }
  else
  {
    v8 = &_mh_execute_header.magic + 1;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v9 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v11 = v9 & ~(-1 << v7);
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v11;
        *((_BYTE *)a1 + 2) = BYTE2(v11);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v11;
      }
      else
      {
        *(_BYTE *)a1 = v11;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v9;
  }
  __asm { BR              X10 }
}

uint64_t sub_100063A94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 0x10uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_100063ADC + 4 * byte_10006FFF6[v3]))();
}

void sub_100063B24(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 0x10uLL)
    v4 = 16;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

_QWORD *sub_100063BEC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  a1[2] = v6;
  a1[3] = v7;
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  v9 = a2[7];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (v9)
  {
    a1[6] = a2[6];
    a1[7] = v9;
    v10 = a2[8];
    v11 = a2[9];
    a1[8] = v10;
    a1[9] = v11;
    v12 = a2[10];
    a1[10] = v12;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
  }
  else
  {
    v13 = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 4) = v13;
    a1[10] = a2[10];
  }
  return a1;
}

_QWORD *sub_100063CC0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  v7 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a1[5];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v8);
  v9 = a1 + 6;
  v10 = a2 + 6;
  v11 = a1[7];
  v12 = a2[7];
  if (v11)
  {
    if (v12)
    {
      a1[6] = a2[6];
      a1[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v11);
      v13 = a1[8];
      a1[8] = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v13);
      v14 = a1[9];
      a1[9] = a2[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v14);
      v15 = a1[10];
      a1[10] = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v15);
    }
    else
    {
      sub_100063E6C(a1 + 6);
      v16 = a2[10];
      v17 = *((_OWORD *)a2 + 4);
      *v9 = *v10;
      *((_OWORD *)a1 + 4) = v17;
      a1[10] = v16;
    }
  }
  else if (v12)
  {
    a1[6] = a2[6];
    a1[7] = a2[7];
    a1[8] = a2[8];
    a1[9] = a2[9];
    a1[10] = a2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v18 = *v10;
    v19 = *((_OWORD *)a2 + 4);
    a1[10] = a2[10];
    *v9 = v18;
    *((_OWORD *)a1 + 4) = v19;
  }
  return a1;
}

_QWORD *sub_100063E6C(_QWORD *a1)
{
  sub_1000527D8(a1);
  return a1;
}

uint64_t *sub_100063E98(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v6);
  v7 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a1[7];
  if (!v10)
    goto LABEL_5;
  v11 = a2[7];
  if (!v11)
  {
    sub_100063E6C(a1 + 6);
LABEL_5:
    v15 = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 4) = v15;
    a1[10] = a2[10];
    return a1;
  }
  a1[6] = a2[6];
  a1[7] = v11;
  swift_bridgeObjectRelease(v10);
  v12 = a1[8];
  a1[8] = a2[8];
  swift_bridgeObjectRelease(v12);
  v13 = a1[9];
  a1[9] = a2[9];
  swift_bridgeObjectRelease(v13);
  v14 = a1[10];
  a1[10] = a2[10];
  swift_bridgeObjectRelease(v14);
  return a1;
}

void type metadata accessor for StorebagSectionFilter()
{
  sub_10000B0C0();
}

_QWORD *sub_100063F90(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  v8 = a1[3];
  v9 = a2[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  v10 = a1[4];
  v11 = a2[4];
  a1[4] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  return a1;
}

_QWORD *sub_100064024(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[3]);
  v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  return a1;
}

void type metadata accessor for StorebagSectionCondition()
{
  sub_10000B0C0();
}

unint64_t sub_10006408C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100086020, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

uint64_t sub_1000640D8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100064104 + 4 * byte_10006FFFB[a1]))(1937335659, 0xE400000000000000);
}

uint64_t sub_100064124()
{
  return 0x6F697469646E6F63;
}

void sub_100064140(char *a1)
{
  sub_10005A588(*a1);
}

void sub_10006414C()
{
  unsigned __int8 *v0;

  sub_100040D98(*v0);
}

void sub_100064154(uint64_t a1)
{
  char *v1;

  sub_100041018(a1, *v1);
}

void sub_10006415C(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_10004125C(a1, *v1);
}

unint64_t sub_100064164@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10006408C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100064190@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000640D8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000641B8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1000640D4(a1);
  *a2 = result;
  return result;
}

void sub_1000641DC(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_1000641E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100012B40();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100064210(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!swift_isUniquelyReferenced_nonNull_native(*v1) || v4 + v2 > *(_QWORD *)(v3 + 24) >> 1)
  {
    sub_100012D78();
    v3 = v6;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    if (!v2)
      goto LABEL_11;
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_10005E134(a1 + 32, v2, v3 + 16 * v7 + 32);
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_1000642E8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v5 > *(_QWORD *)(v3 + 24) >> 1)
  {
    if (v4 <= v5)
      v8 = v4 + v2;
    else
      v8 = v4;
    sub_100022DD8(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v3 = v9;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
  v10 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v10 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_10005E5C8(a1 + 32, v2, v3 + 8 * v10 + 32);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = *(_QWORD *)(v3 + 16);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *(_QWORD *)(v3 + 16) = v13;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

uint64_t sub_1000643C0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  char v12;

  if (a1 == 0x6E6F69746361 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F69746361, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1937335659 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1937335659, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x7365756C6176 && a2 == 0xE600000000000000)
  {
    v10 = 0xE600000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7365756C6176, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x6F697469646E6F63 && a2 == 0xEA0000000000736ELL)
  {
    swift_bridgeObjectRelease(0xEA0000000000736ELL);
    return 3;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F697469646E6F63, 0xEA0000000000736ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100064558()
{
  return 4;
}

uint64_t sub_100064560(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100064590 + 4 * byte_10007000F[a1]))(0x6E6F69746361, 0xE600000000000000);
}

uint64_t sub_100064590()
{
  return 1937335659;
}

uint64_t sub_1000645A0()
{
  return 0x7365756C6176;
}

uint64_t sub_1000645B0()
{
  return 0x6F697469646E6F63;
}

void sub_1000645CC(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_10001AAC8(&qword_1000907C0);
  __chkstk_darwin(v5);
  v6 = a1[3];
  v7 = a1[4];
  sub_10001D44C(a1, v6);
  v8 = sub_100064940();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for StorebagSectionCondition.CodingKeys, &type metadata for StorebagSectionCondition.CodingKeys, v8, v6, v7);
  if (v2)
  {
    sub_100019A88();
  }
  else
  {
    LOBYTE(v17) = 0;
    v9 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v5);
    v11 = v10;
    v16 = v9;
    sub_100018F04();
    sub_10000B030((unint64_t *)&qword_10008FA00);
    sub_10000CEB0();
    sub_10001D33C();
    sub_100010704();
    v15 = v17;
    swift_bridgeObjectRetain();
    sub_10001D33C();
    sub_100010704();
    v12 = v17;
    sub_10001AAC8(&qword_1000907D0);
    v13 = sub_10006497C();
    sub_1000111DC();
    sub_100010704();
    sub_10001BB14();
    if (v13)
    {
      sub_1000120B4();
      sub_10000A820();
      sub_10001B144();
      sub_100015060(a1);
      sub_1000120B4();
      sub_10000A820();
      sub_10001B144();
    }
    else
    {
      v14 = v17;
      swift_bridgeObjectRetain();
      sub_100019A88();
      sub_10000A828();
      sub_10001B144();
      swift_bridgeObjectRelease(v15);
      sub_1000120B4();
      *a2 = v16;
      a2[1] = v11;
      a2[2] = v15;
      a2[3] = v12;
      a2[4] = v14;
    }
  }
  sub_10000A840();
}

uint64_t sub_10006481C()
{
  unsigned __int8 *v0;

  return sub_100064560(*v0);
}

uint64_t sub_100064824@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000643C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100064848@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100064558();
  *a1 = result;
  return result;
}

uint64_t sub_10006486C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100064940();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100064894(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100064940();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000648BC@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1000645CC(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100064900(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001AAC8(&qword_1000907B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100064940()
{
  unint64_t result;

  result = qword_1000907C8;
  if (!qword_1000907C8)
  {
    result = swift_getWitnessTable(&unk_1000702E8, &type metadata for StorebagSectionCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000907C8);
  }
  return result;
}

unint64_t sub_10006497C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000907D8;
  if (!qword_1000907D8)
  {
    v1 = sub_100027598(&qword_1000907D0);
    sub_100012F28();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000907D8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for StorebagSectionCondition.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100064A2C + 4 * byte_100070018[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100064A60 + 4 * byte_100070013[v4]))();
}

uint64_t sub_100064A60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100064A68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100064A70);
  return result;
}

uint64_t sub_100064A7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100064A84);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100064A88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100064A90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionCondition.CodingKeys()
{
  return &type metadata for StorebagSectionCondition.CodingKeys;
}

uint64_t sub_100064AAC(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 9) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v5 = v6 - 10;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_100064B34(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_100064B80 + 4 * byte_100070022[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100064BB4 + 4 * byte_10007001D[v4]))();
}

uint64_t sub_100064BB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100064BBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100064BC4);
  return result;
}

uint64_t sub_100064BD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100064BD8);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_100064BDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100064BE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for StorebagSectionFilter.CodingKeys()
{
  sub_10000B0C0();
}

unint64_t sub_100064C00()
{
  unint64_t result;

  result = qword_1000907E0;
  if (!qword_1000907E0)
  {
    result = swift_getWitnessTable(&unk_100070208, &unk_10008A3B0);
    atomic_store(result, (unint64_t *)&qword_1000907E0);
  }
  return result;
}

unint64_t sub_100064C40()
{
  unint64_t result;

  result = qword_1000907E8;
  if (!qword_1000907E8)
  {
    result = swift_getWitnessTable(&unk_1000702C0, &type metadata for StorebagSectionCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000907E8);
  }
  return result;
}

unint64_t sub_100064C80()
{
  unint64_t result;

  result = qword_1000907F0;
  if (!qword_1000907F0)
  {
    result = swift_getWitnessTable(&unk_100070230, &type metadata for StorebagSectionCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000907F0);
  }
  return result;
}

unint64_t sub_100064CC0()
{
  unint64_t result;

  result = qword_1000907F8;
  if (!qword_1000907F8)
  {
    result = swift_getWitnessTable(&unk_100070258, &type metadata for StorebagSectionCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000907F8);
  }
  return result;
}

unint64_t sub_100064D00()
{
  unint64_t result;

  result = qword_100090800;
  if (!qword_100090800)
  {
    result = swift_getWitnessTable(&unk_100070140, &unk_10008A3B0);
    atomic_store(result, (unint64_t *)&qword_100090800);
  }
  return result;
}

unint64_t sub_100064D40()
{
  unint64_t result;

  result = qword_100090808;
  if (!qword_100090808)
  {
    result = swift_getWitnessTable(&unk_100070168, &unk_10008A3B0);
    atomic_store(result, (unint64_t *)&qword_100090808);
  }
  return result;
}

void sub_100064D7C()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;

  sub_100012CD4();
  sub_100068330();
  sub_100068528();
  __chkstk_darwin(v3);
  sub_10006837C();
  __chkstk_darwin(v4);
  v5 = sub_10000F3D0();
  v15 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10001CD2C();
  sub_10001D214();
  sub_10000F490();
  v6 = sub_10006848C();
  if (sub_1000682D8(v6))
  {
    v7 = (uint8_t *)sub_100012C5C(12);
    v16 = sub_100012C5C(32);
    *(_DWORD *)v7 = 136446210;
    sub_100023D98((unint64_t *)&unk_10008EA00, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError, (uint64_t)&protocol conformance descriptor for CocoaError);
    v9 = sub_1000682C8(v8);
    v11 = sub_100019AA4(v9, v10);
    sub_10001E070(v11);
    sub_10000A828();
    sub_10001CE3C();
    sub_100010670((void *)&_mh_execute_header, v1, v2, "unable to write storebag cache (OOS): %{public}s", v7);
    sub_10000BE60(v16);
    sub_1000120F8(v16);
    sub_1000120F8((uint64_t)v7);
  }
  else
  {
    sub_10001CE3C();
  }

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v0, v5);
  sub_10001070C();
  _StringGuts.grow(_:)(40);
  sub_100068570();
  sub_100023D98((unint64_t *)&unk_10008EA00, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError, (uint64_t)&protocol conformance descriptor for CocoaError);
  v17._countAndFlagsBits = sub_10001FF68(v12);
  sub_1000682E8(v17);
  sub_10000781C();
  sub_10001A268((uint64_t)"Fatal error", v13, v14, 0xD000000000000026, 0x8000000100073290, (uint64_t)"rtcreportingd/StorebagCache.swift");
  __break(1u);
}

void sub_100064F94()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;

  sub_100012CD4();
  sub_100068330();
  sub_100068528();
  __chkstk_darwin(v3);
  sub_10006837C();
  __chkstk_darwin(v4);
  v5 = sub_10000F3D0();
  v15 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10001CD2C();
  sub_10001D214();
  sub_10000F490();
  v6 = sub_10006848C();
  if (sub_1000682D8(v6))
  {
    v7 = (uint8_t *)sub_100012C5C(12);
    v16 = sub_100012C5C(32);
    *(_DWORD *)v7 = 136446210;
    sub_100023D98((unint64_t *)&unk_10008EA00, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError, (uint64_t)&protocol conformance descriptor for CocoaError);
    v9 = sub_1000682C8(v8);
    v11 = sub_100019AA4(v9, v10);
    sub_10001E070(v11);
    sub_10000A828();
    sub_10001CE3C();
    sub_100010670((void *)&_mh_execute_header, v1, v2, "unable to access storebag cache (PERM): %{public}s", v7);
    sub_10000BE60(v16);
    sub_1000120F8(v16);
    sub_1000120F8((uint64_t)v7);
  }
  else
  {
    sub_10001CE3C();
  }

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v0, v5);
  sub_10001070C();
  _StringGuts.grow(_:)(42);
  sub_100068570();
  sub_100023D98((unint64_t *)&unk_10008EA00, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError, (uint64_t)&protocol conformance descriptor for CocoaError);
  v17._countAndFlagsBits = sub_10001FF68(v12);
  sub_1000682E8(v17);
  sub_10000781C();
  sub_10001A268((uint64_t)"Fatal error", v13, v14, 0xD000000000000028, 0x8000000100073260, (uint64_t)"rtcreportingd/StorebagCache.swift");
  __break(1u);
}

void sub_1000651AC()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;

  sub_100012CD4();
  sub_100068330();
  sub_100068528();
  __chkstk_darwin(v3);
  sub_10006837C();
  __chkstk_darwin(v4);
  v5 = sub_10000F3D0();
  v16 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10001CD2C();
  sub_10001D214();
  sub_10000F490();
  v6 = sub_10006848C();
  if (sub_1000682D8(v6))
  {
    v7 = (uint8_t *)sub_100012C5C(12);
    v17 = sub_100012C5C(32);
    *(_DWORD *)v7 = 136446210;
    sub_100023D98((unint64_t *)&unk_10008EA00, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError, (uint64_t)&protocol conformance descriptor for CocoaError);
    v9 = sub_1000682C8(v8);
    v11 = sub_100019AA4(v9, v10);
    sub_10001E070(v11);
    sub_10000A828();
    sub_10001CE3C();
    sub_100010670((void *)&_mh_execute_header, v1, v2, "unable to access storebag cache (WRITE-UNKNOWN): %{public}s", v7);
    sub_10000BE60(v17);
    sub_1000120F8(v17);
    sub_1000120F8((uint64_t)v7);
  }
  else
  {
    sub_10001CE3C();
  }

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v0, v5);
  sub_10001070C();
  _StringGuts.grow(_:)(51);
  v12._object = (void *)0x80000001000732C0;
  v12._countAndFlagsBits = 0xD000000000000031;
  String.append(_:)(v12);
  sub_100023D98((unint64_t *)&unk_10008EA00, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError, (uint64_t)&protocol conformance descriptor for CocoaError);
  v18._countAndFlagsBits = sub_10001FF68(v13);
  sub_1000682E8(v18);
  sub_10000781C();
  sub_10001A268((uint64_t)"Fatal error", v14, v15, 0, 0xE000000000000000, (uint64_t)"rtcreportingd/StorebagCache.swift");
  __break(1u);
}

void sub_1000653C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;

  sub_100012CD4();
  v2 = v1;
  v3 = sub_10000F3D0();
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10000CA58();
  Logger.init()(v5);
  sub_100011200();
  v6 = sub_100011200();
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.fault.getter();
  if (sub_100068494(v7))
  {
    v15 = v3;
    v9 = (uint8_t *)sub_100012C5C(12);
    v10 = sub_100012C5C(32);
    v21 = v10;
    *(_DWORD *)v9 = 136446210;
    swift_getErrorValue(v2, &v18, v17);
    v11 = Error.localizedDescription.getter(v17[1], v17[2]);
    v16 = sub_100019AA4(v11, v12);
    sub_100007864((uint64_t)&v16, (uint64_t)v17, (uint64_t)(v9 + 4));
    sub_10000A828();
    sub_10000BE9C();
    sub_10000BE9C();
    sub_100010670((void *)&_mh_execute_header, v7, v8, "unable to access storebag cache (UNKNOWN): %{public}s", v9);
    sub_10000BE60(v10);
    sub_1000120F8(v10);
    sub_1000120F8((uint64_t)v9);

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v15);
  }
  else
  {
    sub_10000BE9C();
    sub_10000BE9C();

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v3);
  }
  v21 = 0;
  v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  sub_100068570();
  v21 = 0xD00000000000002BLL;
  v22 = 0x8000000100073300;
  swift_getErrorValue(v2, &v20, v19);
  v23._countAndFlagsBits = Error.localizedDescription.getter(v19[1], v19[2]);
  sub_1000682E8(v23);
  sub_10000781C();
  sub_10001A268((uint64_t)"Fatal error", v13, v14, v21, v22, (uint64_t)"rtcreportingd/StorebagCache.swift");
  __break(1u);
}

void sub_1000655B8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(_QWORD);
  char v34;
  NSString *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t inited;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  NSURL *v45;
  void *v46;
  void *v47;
  unsigned int v48;
  id v49;
  int v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106[2];
  uint64_t v107;

  sub_100012CD4();
  v3 = v0;
  v103 = v4;
  v96 = type metadata accessor for CocoaError.Code(0);
  v92 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  sub_10001065C();
  v95 = v5;
  sub_100015684();
  __chkstk_darwin(v6);
  v94 = (char *)&v89 - v7;
  v99 = type metadata accessor for CocoaError(0);
  v93 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  sub_10001065C();
  v90 = v8;
  sub_100015684();
  __chkstk_darwin(v9);
  v91 = (uint64_t)&v89 - v10;
  sub_100015684();
  __chkstk_darwin(v11);
  v97 = (uint64_t)&v89 - v12;
  sub_100015684();
  __chkstk_darwin(v13);
  v98 = (char *)&v89 - v14;
  v15 = type metadata accessor for URLResourceValues(0);
  v101 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_10000BE50();
  v100 = v17 - v16;
  sub_10001AAC8(&qword_10008EA70);
  sub_100012C34();
  __chkstk_darwin(v18);
  sub_100068398();
  v19 = sub_10000F3C0();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = sub_10006850C();
  type metadata accessor for StorebagCache.Location(v24);
  sub_100012C34();
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v30 = (char *)&v89 - v29;
  v102 = v3;
  v31 = sub_100068414();
  sub_1000211D4(v31, v32, v33);
  sub_10006855C((uint64_t)v30, 1, v19);
  if (v34)
  {
    v35 = NSHomeDirectory();
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    URL.init(fileURLWithPath:isDirectory:)(v36, v38, 1);
    sub_10000781C();
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000031, 0x80000001000731F0, 1);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    v30 = v2;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v103, v30, v19);
  v39 = sub_10001AAC8(&qword_10008EA78);
  inited = swift_initStackObject(v39, &v107);
  *(_OWORD *)(inited + 16) = xmmword_10006D0C0;
  sub_100068520(inited, NSURLIsDirectoryKey);
  sub_100068438();
  v42 = v41;
  URL.resourceValues(forKeys:)();
  swift_bridgeObjectRelease(v42);
  sub_100068550(v1, 0);
  v43 = sub_10006855C(v1, 1, v15);
  if (v34)
  {
    sub_10001D7E8(v1, &qword_10008EA70);
  }
  else
  {
    v54 = URLResourceValues.isDirectory.getter(v43);
    sub_100068300(v1, *(uint64_t (**)(uint64_t, uint64_t))(v101 + 8));
    if ((v54 & 1) != 0)
      goto LABEL_10;
  }
  v44 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v45);
  v47 = v46;
  v106[0] = 0;
  v48 = objc_msgSend(v44, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v46, 1, 0, v106);

  v49 = v106[0];
  if (!v48)
  {
    v55 = v106[0];
    v56 = (void *)sub_10000C09C();

    swift_willThrow(v57, v58, v59, v60, v61, v62, v63, v64);
    v106[0] = v56;
    sub_100011200();
    v65 = sub_10001AAC8(&qword_10008E7E8);
    if (swift_dynamicCast(v98, v106, v65, v99, 0))
    {
      v66 = *(void (**)(uint64_t, char *, uint64_t))(v93 + 16);
      v66(v97, v98, v99);
      sub_100023D98(&qword_10008E9F0, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError, (uint64_t)&protocol conformance descriptor for CocoaError);
      v68 = v67;
      v69 = sub_1000683D8();
      v71 = _BridgedStoredNSError.code.getter(v69, v70);
      v72 = v95;
      static CocoaError.fileWriteNoPermission.getter(v71);
      sub_100023D98(&qword_10008E9F8, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code, (uint64_t)&protocol conformance descriptor for CocoaError.Code);
      sub_100015B54();
      sub_100015B54();
      v74 = v104;
      v73 = v105;
      v75 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
      sub_10001C5BC(v72);
      sub_10001C5BC(v42);
      if (v73 == v74)
        sub_100064F94();
      v76 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
      sub_10000D29C(v97);
      v66(v91, v98, v73);
      v77 = sub_1000683D8();
      v79 = _BridgedStoredNSError.code.getter(v77, v78);
      v80 = v95;
      static CocoaError.fileWriteOutOfSpace.getter(v79);
      sub_100015B54();
      sub_100015B54();
      v82 = v104;
      v81 = v105;
      sub_10001C5BC(v80);
      sub_10001C5BC(v42);
      if (v81 == v82)
        sub_100064D7C();
      sub_10000D29C(v91);
      (*(void (**)(uint64_t, char *, uint64_t))(v93 + 32))(v90, v98, v81);
      v83 = v94;
      v84 = _BridgedStoredNSError.code.getter(v81, v68);
      v85 = v95;
      static CocoaError.fileWriteUnknown.getter(v84);
      v86 = v96;
      sub_10006845C();
      sub_10006845C();
      v88 = v104;
      v87 = v105;
      v75(v85, v86);
      v75((uint64_t)v83, v86);
      if (v87 == v88)
        sub_1000651AC();
      v76(v90, v99);
    }
    swift_errorRelease(v106[0]);
    sub_1000653C8();
  }
  sub_1000211D4(v102, (uint64_t)v28, type metadata accessor for StorebagCache.Location);
  v50 = _s10RTCUtility9XPCObjectOwet_0((uint64_t)v28, 1, v19);
  v51 = v49;
  sub_10001C614((uint64_t)v28, type metadata accessor for StorebagCache.Location);
  if (v50 == 1)
  {
    v53 = v100;
    URLResourceValues.init()(v52);
    URLResourceValues.isExcludedFromBackup.setter(1);
    URL.setResourceValues(_:)(v53);
    sub_1000145DC();
  }
LABEL_10:
  sub_1000120D4();
}

uint64_t sub_100065C74()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026B1C(v0, qword_100097440);
  sub_100015718(v0, (uint64_t)qword_100097440);
  return Logger.init(subsystem:category:)(0xD000000000000017, 0x8000000100071220, 0x67616265726F7473, 0xED00006568636163);
}

uint64_t sub_100065CF4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_10000F3C0();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[4] = v5;
  swift_defaultActor_initialize(v1);
  v6 = OBJC_IVAR____TtC13rtcreportingd13StorebagCache_cache;
  v7 = type metadata accessor for CachedStorebag(0);
  *(_QWORD *)(v1 + v6) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v7, &protocol witness table for String);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction) = 0;
  sub_1000655B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v1 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_location, v5, v3);
  return sub_100012104();
}

uint64_t sub_100065DDC()
{
  uint64_t v0;

  sub_10001C614(*(_QWORD *)(v0 + 16), type metadata accessor for StorebagCache.Location);
  sub_100010D58();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100065E20()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  sub_10000B0F0();
  v2 = v0 + 17;
  sub_10000F498(v3);
  v0[55] = v1;
  swift_task_dealloc(v4);
  v5 = v0[36];
  sub_100015060(v2);
  if (v1)
    v6 = sub_100066750;
  else
    v6 = sub_100065ECC;
  return sub_10001B170((uint64_t)v6, v5, 0);
}

uint64_t sub_100065ECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  unsigned __int8 v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  char v16;
  _QWORD *v17;
  NSObject *v18;
  uint64_t v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  NSURL *v63;
  uint64_t v64;
  void *v65;
  id v66;
  id v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v4 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD **)(v0 + 320);
  v6 = sub_10001AAC8(&qword_10008EA78);
  inited = swift_initStackObject(v6, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_10006D0C0;
  sub_100068520(inited, NSURLContentModificationDateKey);
  sub_100068438();
  v9 = v8;
  URL.resourceValues(forKeys:)();
  if (v4)
  {
    sub_1000194C4();
    swift_bridgeObjectRelease(v9);
LABEL_5:
    sub_10001D42C();
    sub_100010D58();
    sub_1000111E4();
    sub_10000BFB0();
    sub_10001210C();
    sub_10000B0DC();
    sub_100010384();
    sub_10000BD30();
    sub_10000BDD4();
    sub_10000F3D8();
    v14 = (uint64_t (*)(void))sub_100015B7C();
    return sub_1000193C0(v14);
  }
  v10 = sub_10006831C();
  URLResourceValues.contentModificationDate.getter(v10);
  sub_1000683B0();
  result = sub_10006855C(v1, 1, v2);
  if (v12)
  {
    __break(1u);
  }
  else
  {
    sub_10000CF00();
    sub_1000683EC();
    v13 = sub_100015674();
    sub_100068308(v13);
    v15 = sub_100019574();
    static Date.now.getter(v15);
    v16 = sub_100068420();
    v17 = (_QWORD *)v5[1];
    *(_QWORD *)(v0 + 448) = v17;
    ((void (*)(_QWORD, uint64_t))v17)(0, v9);
    if ((v16 & 1) == 0)
    {
      v119 = v3;
      v121 = v2;
      v107 = (uint64_t)v17;
      v27 = *(_QWORD *)(v0 + 408);
      v26 = *(_QWORD *)(v0 + 416);
      v28 = *(_QWORD *)(v0 + 392);
      v29 = *(_QWORD *)(v0 + 280);
      v30 = *(_QWORD *)(v0 + 288);
      v112 = *(_QWORD *)(v0 + 272);
      v31 = *(_QWORD *)(v0 + 96);
      v32 = *(_QWORD *)(v0 + 120);
      v117 = *(_QWORD *)(v0 + 112);
      v33 = *(_QWORD *)(v0 + 128);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 336) + 16))(v26 + *(int *)(v27 + 20), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 328));
      v34 = *(_QWORD *)(v1 + 32);
      v35 = *(_OWORD *)(v1 + 16);
      *(_OWORD *)v26 = *(_OWORD *)v1;
      *(_OWORD *)(v26 + 16) = v35;
      *(_QWORD *)(v26 + 32) = v34;
      sub_1000211D4(v26, v28, type metadata accessor for CachedStorebag);
      _s10RTCUtility9XPCObjectOwst_0(v28, 0, 1, v27);
      sub_100010430(v30 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_cache, v0 + 176);
      sub_10000CA18();
      sub_100010644();
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v33);
      sub_1000054D8(v28, v112, v29, v36, v37, v38, v39, v40, v91, v93, v96, v100, v103, v107, v0 + 176, v112, v31, v33, v32,
        v117);
      swift_endAccess(v0 + 176);
      if (qword_10008E0C8 != -1)
        swift_once(&qword_10008E0C8, sub_100065C74);
      v41 = sub_10000F3D0();
      sub_100018168(v41, (uint64_t)qword_100097440);
      v42 = sub_100015738();
      v43 = static os_log_type_t.debug.getter();
      v44 = os_log_type_enabled(v42, v43);
      v45 = *(_QWORD *)(v0 + 416);
      v47 = *(_QWORD *)(v0 + 376);
      v46 = *(_QWORD *)(v0 + 384);
      v48 = *(_QWORD *)(v0 + 360);
      v113 = *(_QWORD *)(v0 + 352);
      v49 = *(_QWORD *)(v0 + 328);
      v50 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
      if (v44)
      {
        v102 = *(_QWORD *)(v0 + 416);
        v51 = *(_QWORD *)(v0 + 272);
        v110 = *(_QWORD *)(v0 + 368);
        v52 = (uint8_t *)sub_100012C5C(12);
        v98 = v46;
        v53 = sub_100012C5C(32);
        v123 = v53;
        *(_DWORD *)v52 = 136446210;
        sub_100018040();
        *(_QWORD *)(v0 + 240) = sub_100014F94(v51, (unint64_t)v50, &v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v121, v52 + 4, v52 + 12);
        sub_1000110B4((uint64_t)v50);
        sub_100010670((void *)&_mh_execute_header, v42, v43, "storing storebag %{public}s in cache", v52);
        sub_10000BE60(v53);
        sub_1000120F8(v53);
        sub_1000120F8((uint64_t)v52);

        sub_10001C614(v102, type metadata accessor for CachedStorebag);
        sub_100014560(v54, v55, v56, v57, v58, v59, v60, v61, v0 + 240, v47, v98, v102, v48, v108, v110, v113);
        v50(v105, v49);
        (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v99, v111);
      }
      else
      {
        sub_10000F3C8(*(_QWORD *)(v0 + 280));

        sub_10001C614(v45, type metadata accessor for CachedStorebag);
        sub_100014560(v69, v70, v71, v72, v73, v74, v75, v76, v92, v94, v97, v101, v104, v108, v109, v113);
        sub_100068468();
        v77 = sub_100068414();
        v79(v77, v78);
      }
      v80 = sub_10000BD94();
      v122 = v81;
      v82 = *(_QWORD *)(v0 + 264);
      swift_task_dealloc(v80);
      sub_100010D58();
      sub_10000F3D8();
      sub_1000111E4();
      sub_10000BFB0();
      sub_10001210C();
      sub_10000B0DC();
      sub_100010384();
      sub_10000BD30();
      swift_task_dealloc(v122);
      *(_QWORD *)v82 = v114;
      *(_DWORD *)(v82 + 8) = v119;
      *(_QWORD *)(v82 + 16) = v118;
      *(_QWORD *)(v82 + 24) = v116;
      *(_QWORD *)(v82 + 32) = v115;
      v14 = (uint64_t (*)(void))sub_100015B7C();
      return sub_1000193C0(v14);
    }
    sub_10001FEDC();
    sub_10000BE38();
    sub_1000108B8();
    if (qword_10008E0C8 != -1)
      swift_once(&qword_10008E0C8, sub_100065C74);
    v18 = *(NSObject **)(v0 + 280);
    v19 = sub_10000F3D0();
    sub_100018168(v19, (uint64_t)qword_100097440);
    sub_100015738();
    v20 = sub_10000BFB8();
    v21 = sub_1000108D4(v20);
    v22 = *(_QWORD *)(v0 + 280);
    if (v21)
    {
      v1 = *(_QWORD *)(v0 + 272);
      v5 = v17;
      v23 = (uint8_t *)sub_100012C5C(12);
      v120 = v2;
      v24 = sub_100012C5C(32);
      v123 = v24;
      sub_100019A04(4.8751e-34);
      *(_QWORD *)(v0 + 256) = sub_10006833C();
      sub_100007864(v0 + 256, v0 + 264, 12);
      sub_1000110B4(v22);
      sub_100010670((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "removing expired storebag %{public}s", v23);
      sub_10000BE60(v24);
      v25 = v24;
      v2 = v120;
      sub_1000120F8(v25);
      sub_1000120F8((uint64_t)v23);

    }
    else
    {

      sub_10000F3C8(v22);
    }
    v62 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    URL._bridgeToObjectiveC()(v63);
    v65 = (void *)v64;
    *(_QWORD *)(v0 + 248) = 0;
    v66 = sub_10000BE8C(v64, "removeItemAtURL:error:");

    if (!(_DWORD)v66)
    {
      sub_10001E1C0();
      sub_10000C09C();

      sub_1000684A8(v83, v84, v85, v86, v87, v88, v89, v90, v91, v93, v96, v100, v103, v106);
      ((void (*)(uint64_t, uint64_t))v17)(v2, v3);
      ((void (*)(uint64_t, uint64_t))v17)(v1, v3);
      (*((void (**)(uint64_t, _QWORD *))v62 + 1))(v22, v5);
      goto LABEL_5;
    }
    v67 = *(id *)(v0 + 248);
    v68 = (_QWORD *)sub_10000BFD4();
    *(_QWORD *)(v0 + 456) = v68;
    sub_1000684CC(v68);
    return sub_100010614();
  }
  return result;
}

uint64_t sub_1000665C8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  sub_10000B0F0();
  sub_10000F498(v2);
  *(_QWORD *)(v0 + 464) = v1;
  swift_task_dealloc(v3);
  if (v1)
    v4 = sub_1000667E0;
  else
    v4 = sub_100066664;
  return sub_10001B170((uint64_t)v4, *(_QWORD *)(v0 + 288), 0);
}

uint64_t sub_100066664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  sub_100010F10();
  sub_1000682F4();
  sub_10001C7C8(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  v11 = *(_QWORD *)(v1 + 72);
  v10 = *(_DWORD *)(v1 + 64);
  v9 = *(_QWORD *)(v1 + 56);
  v3 = sub_10000BD94();
  v7 = v4;
  v5 = *(_QWORD *)(v1 + 264);
  v8 = *(_OWORD *)(v1 + 80);
  swift_task_dealloc(v3);
  sub_100010D58();
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  sub_10001210C();
  sub_10000B0DC();
  sub_100010384();
  sub_10000BD30();
  swift_task_dealloc(v7);
  *(_QWORD *)v5 = v9;
  *(_DWORD *)(v5 + 8) = v10;
  *(_QWORD *)(v5 + 16) = v11;
  *(_OWORD *)(v5 + 24) = v8;
  return sub_10001BCB8(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100066750()
{
  uint64_t v0;

  sub_1000194C4();
  sub_100010E70();
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  sub_10001210C();
  sub_10000B0DC();
  sub_100010384();
  sub_10000BD30();
  sub_10000BDD4();
  sub_100010D58();
  return sub_10000A858(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000667E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100010F10();
  sub_1000682F4();
  sub_10001C7C8(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_100010E70();
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  sub_10001210C();
  sub_10000B0DC();
  sub_100010384();
  sub_10000BD30();
  sub_10000BDD4();
  sub_100010D58();
  return sub_10000A858(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100066880(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v5 + 65) = a4;
  *(_QWORD *)(v5 + 88) = a3;
  *(_QWORD *)(v5 + 96) = v4;
  *(_QWORD *)(v5 + 72) = a1;
  *(_QWORD *)(v5 + 80) = a2;
  *(_QWORD *)(v5 + 104) = *v4;
  v6 = sub_10001AAC8((uint64_t *)&unk_1000903E0);
  *(_QWORD *)(v5 + 112) = sub_100007830(*(_QWORD *)(v6 - 8));
  return swift_task_switch(sub_1000668E0, v4, 0);
}

uint64_t sub_1000668E0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v2 = v1[12];
  v3 = OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask;
  v1[15] = OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask;
  v4 = *(_QWORD *)(v2 + v3);
  if (v4)
  {
    v1[16] = v4;
    v5 = async function pointer to Task.result.getter[1];
    swift_retain(v4);
    v6 = (_QWORD *)swift_task_alloc(v5);
    v1[17] = v6;
    sub_10001AAC8(&qword_10008E7E8);
    *v6 = v1;
    v6[1] = sub_100066A60;
    return sub_10001B430();
  }
  else
  {
    sub_10006853C();
    v8 = os_transaction_create("com.apple.rtcreportingd.storebag-download");
    sub_10001E208(v8);
    v9 = type metadata accessor for TaskPriority(0);
    sub_10001F5B4(v9);
    sub_100023D98(&qword_100090A78, type metadata accessor for StorebagCache, (uint64_t)&unk_100070400);
    v10 = sub_100068578((uint64_t)&unk_10008A490);
    sub_10001C554(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    v18 = sub_10000CA18();
    v19 = sub_10006842C(v18, (uint64_t)&unk_100090A80);
    sub_10000D264(v19);
    swift_release(v0);
    v20 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v1[19] = v20;
    sub_10001AAC8(&qword_10008E7E8);
    *v20 = v1;
    v20[1] = sub_100066C30;
    return sub_10001CF6C();
  }
}

uint64_t sub_100066A60()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_10000B0F0();
  sub_10000F498(v1);
  swift_task_dealloc(v2);
  sub_100067D58(*(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  return sub_100012104();
}

uint64_t sub_100066AB0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v2 = v1[15];
  v3 = v1[12];
  swift_release(v1[16]);
  v4 = *(_QWORD *)(v3 + v2);
  if (v4)
  {
    v1[16] = v4;
    v5 = async function pointer to Task.result.getter[1];
    swift_retain(v4);
    v6 = (_QWORD *)swift_task_alloc(v5);
    v1[17] = v6;
    sub_10001AAC8(&qword_10008E7E8);
    *v6 = v1;
    v6[1] = sub_100066A60;
    return sub_10001B430();
  }
  else
  {
    sub_10006853C();
    v8 = os_transaction_create("com.apple.rtcreportingd.storebag-download");
    sub_10001E208(v8);
    v9 = type metadata accessor for TaskPriority(0);
    sub_10001F5B4(v9);
    sub_100023D98(&qword_100090A78, type metadata accessor for StorebagCache, (uint64_t)&unk_100070400);
    v10 = sub_100068578((uint64_t)&unk_10008A490);
    sub_10001C554(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    v18 = sub_10000CA18();
    v19 = sub_10006842C(v18, (uint64_t)&unk_100090A80);
    sub_10000D264(v19);
    swift_release(v0);
    v20 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v1[19] = v20;
    sub_10001AAC8(&qword_10008E7E8);
    *v20 = v1;
    v20[1] = sub_100066C30;
    return sub_10001CF6C();
  }
}

uint64_t sub_100066C30()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10000B0F0();
  sub_10000F498(v2);
  *(_QWORD *)(v0 + 160) = v1;
  swift_task_dealloc(v3);
  return sub_100012104();
}

uint64_t sub_100066C84()
{
  uint64_t v0;

  sub_1000684F4();
  sub_100010D58();
  return sub_10000BD38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100066CB0()
{
  uint64_t v0;

  sub_1000684F4();
  sub_100010D58();
  return sub_10000BD38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100066CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  *(_QWORD *)(v8 + 72) = a8;
  *(_QWORD *)(v8 + 80) = v14;
  *(_BYTE *)(v8 + 176) = a7;
  *(_QWORD *)(v8 + 56) = a5;
  *(_QWORD *)(v8 + 64) = a6;
  *(_QWORD *)(v8 + 48) = a4;
  v10 = type metadata accessor for URL(0);
  *(_QWORD *)(v8 + 88) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 96) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 104) = swift_task_alloc(v12);
  *(_QWORD *)(v8 + 112) = swift_task_alloc(v12);
  *(_QWORD *)(v8 + 120) = swift_task_alloc(v12);
  *(_QWORD *)(v8 + 128) = swift_task_alloc(v12);
  return swift_task_switch(sub_100066D7C, a4, 0);
}

uint64_t sub_100066D7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  id v8;
  _QWORD *v9;

  v1 = v0[15];
  v2 = v0[12];
  v4 = v0[7];
  v3 = v0[8];
  v5 = sub_100020C80();
  sub_100024AF8(v5, v1);
  URL.appendingPathComponent(_:)(v4, v3);
  v0[17] = *(_QWORD *)(v2 + 8);
  v6 = sub_100068414();
  v7(v6);
  v8 = objc_msgSend((id)objc_opt_self(NSURLSessionConfiguration), "ephemeralSessionConfiguration");
  v0[18] = objc_msgSend((id)objc_opt_self(NSURLSession), "sessionWithConfiguration:", v8);

  v9 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.download(from:delegate:)[1]);
  v0[19] = v9;
  *v9 = v0;
  v9[1] = sub_100066E78;
  return NSURLSession.download(from:delegate:)(v0[14], v0[16], 0);
}

uint64_t sub_100066E78()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10000B0F0();
  v2 = v0[19];
  v0[20] = v3;
  v0[21] = v1;
  swift_task_dealloc(v2);
  return sub_100012104();
}

uint64_t sub_100066ED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = objc_opt_self(NSHTTPURLResponse);
  if (swift_dynamicCastObjCClass(v1, v2))
  {
    v3 = *(id *)(v0 + 160);
    v4 = sub_100068448();
    v5 = *(void **)(v0 + 160);
    if (v4 != (id)200)
    {
      v14 = *(void (**)(uint64_t, uint64_t))(v0 + 136);
      v13 = *(void **)(v0 + 144);
      v68 = *(_QWORD *)(v0 + 128);
      v15 = *(_QWORD *)(v0 + 112);
      v16 = *(_QWORD *)(v0 + 88);
      v17 = *(_QWORD *)(v0 + 48);
      v18 = sub_100068448();
      v19 = sub_1000282B8();
      v20 = sub_10000A7FC((uint64_t)&unk_100086DF8, v19);
      *(_QWORD *)v21 = v18;
      *(_BYTE *)(v21 + 8) = 0;
      swift_willThrow(v20, v21, v22, v23, v24, v25, v26, v27);

      sub_100067474();
      v14(v15, v16);
      objc_msgSend(v13, "finishTasksAndInvalidate");

      v14(v68, v16);
LABEL_14:
      v46 = *(_QWORD *)(v17 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask);
      *(_QWORD *)(v17 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask) = 0;
      swift_release(v46);
      v47 = *(_QWORD *)(v17 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction);
      *(_QWORD *)(v17 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction) = 0;
      swift_unknownObjectRelease(v47);
      swift_task_dealloc(*(_QWORD *)(v0 + 128));
      sub_100010D58();
      sub_1000111E4();
      sub_10000BFB0();
      return sub_10001BCB8(*(uint64_t (**)(void))(v0 + 8));
    }

  }
  v6 = *(_QWORD *)(v0 + 168);
  v7 = Data.init(contentsOf:options:)(*(_QWORD *)(v0 + 112), 8);
  if (v6)
  {
LABEL_13:
    v39 = *(void **)(v0 + 160);
    v41 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 136);
    v40 = *(void **)(v0 + 144);
    v42 = *(_QWORD *)(v0 + 128);
    v43 = *(_QWORD *)(v0 + 112);
    v44 = *(_QWORD *)(v0 + 88);
    v17 = *(_QWORD *)(v0 + 48);
    sub_100067474();

    v45 = v41(v43, v44);
    sub_1000683F8(v45, "finishTasksAndInvalidate");

    v41(v42, v44);
    goto LABEL_14;
  }
  v9 = v7;
  v10 = v8;
  v11 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  PropertyListDecoder.init()();
  v70 = 100;
  v12 = sub_100067D64();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:)((_QWORD *)(v0 + 16), &type metadata for RawStorebag._EncodedRawStorebag, v9, v10, &v70, &type metadata for RawStorebag._EncodedRawStorebag, v12);
  v28 = *(_QWORD *)(v0 + 24);
  v29 = *(_QWORD *)(v0 + 32);
  v30 = *(_QWORD *)(v0 + 40);
  v69 = Data.init(base64Encoded:options:)(*(_QWORD *)(v0 + 16), v28, 1);
  v32 = v31;
  v33 = Data.init(base64Encoded:options:)(v29, v30, 1);
  v35 = v34;
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v30);
  if (v32 >> 60 == 15 || v35 >> 60 == 15)
  {
    v37 = sub_1000282B8();
    sub_10000A7FC((uint64_t)&unk_100086DF8, v37);
    *v38 = 0;
    sub_10001C5EC((uint64_t)v38, 1);
    sub_10000CEA8();
    sub_1000229EC(v33, v35);
    sub_1000229EC(v69, v32);
    sub_100068500();
    goto LABEL_13;
  }
  v49 = *(_BYTE *)(v0 + 176);
  sub_10000CEA8();
  sub_100068500();
  if ((v49 & 1) == 0)
  {
    sub_10001D44C(*(_QWORD **)(v0 + 72), *(_QWORD *)(*(_QWORD *)(v0 + 72) + 24));
    if (!sub_100068154())
    {
      v52 = *(void **)(v0 + 144);
      v62 = *(void **)(v0 + 160);
      v65 = *(void (**)(uint64_t, uint64_t))(v0 + 136);
      v67 = *(_QWORD *)(v0 + 128);
      v53 = *(_QWORD *)(v0 + 112);
      v54 = *(_QWORD *)(v0 + 88);
      v17 = *(_QWORD *)(v0 + 48);
      v55 = sub_1000282B8();
      sub_10000A7FC((uint64_t)&unk_100086DF8, v55);
      *v56 = 1;
      sub_10001C5EC((uint64_t)v56, 1);
      sub_10000F4CC();
      sub_100068440(v33);
      sub_1000684B4();

      v65(v53, v54);
      objc_msgSend(v52, "finishTasksAndInvalidate");

      v65(v67, v54);
      goto LABEL_14;
    }
  }
  v50 = *(_QWORD *)(v0 + 104);
  sub_10001F150(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  Data.write(to:options:)(v50, 0, v69, v32);
  v51 = *(void **)(v0 + 144);
  v64 = *(void **)(v0 + 160);
  v66 = *(_QWORD *)(v0 + 128);
  v60 = *(_QWORD *)(v0 + 112);
  v61 = *(_QWORD *)(v0 + 120);
  v63 = *(_QWORD *)(v0 + 104);
  v57 = *(_QWORD *)(v0 + 48);
  sub_100068454(v63);
  sub_10000F4CC();
  sub_100068440(v33);
  sub_100067474();

  sub_100068454(v60);
  objc_msgSend(v51, "finishTasksAndInvalidate");

  sub_100068454(v66);
  v58 = *(_QWORD *)(v57 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask);
  *(_QWORD *)(v57 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask) = 0;
  swift_release(v58);
  v59 = *(_QWORD *)(v57 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction);
  *(_QWORD *)(v57 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction) = 0;
  swift_unknownObjectRelease(v59);
  sub_10000BFB0();
  swift_task_dealloc(v61);
  sub_10000F3D8();
  swift_task_dealloc(v63);
  return sub_10001BCB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000673D0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(void (**)(uint64_t))(v1 + 136);
  v2 = *(void **)(v1 + 144);
  v4 = *(_QWORD *)(v1 + 48);
  sub_1000683F8(a1, "finishTasksAndInvalidate");

  v5 = sub_100068414();
  v3(v5);
  v6 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask) = 0;
  swift_release(v6);
  v7 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction) = 0;
  swift_unknownObjectRelease(v7);
  swift_task_dealloc(*(_QWORD *)(v1 + 128));
  sub_10000F3D8();
  sub_1000111E4();
  sub_10000BFB0();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100067474()
{
  id v0;
  NSURL *v1;
  void *v2;
  void *v3;
  unsigned int v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  _QWORD v27[3];
  _BYTE v28[16];
  id v29;

  v0 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  v29 = 0;
  v4 = objc_msgSend(v0, "removeItemAtURL:error:", v2, &v29);

  if (v4)
  {
    v5 = v29;
  }
  else
  {
    v25 = v29;
    v6 = v29;
    v7 = _convertNSErrorToError(_:)(v25);

    swift_willThrow(v8, v9, v10, v11, v12, v13, v14, v15);
    if (qword_10008E0C8 != -1)
      swift_once(&qword_10008E0C8, sub_100065C74);
    v16 = type metadata accessor for Logger(0);
    sub_100015718(v16, (uint64_t)qword_100097440);
    swift_errorRetain(v7);
    v17 = swift_errorRetain(v7);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (void *)swift_slowAlloc(32, -1);
      v29 = v21;
      *(_DWORD *)v20 = 136446210;
      swift_getErrorValue(v7, v28, v27);
      v22 = Error.localizedDescription.getter(v27[1], v27[2]);
      v24 = v23;
      v26 = sub_100014F94(v22, v23, (uint64_t *)&v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v24);
      swift_errorRelease(v7);
      swift_errorRelease(v7);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "failed to remove temporary storebag download: %{public}s", v20, 0xCu);
      swift_arrayDestroy(v21, 1);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      swift_errorRelease(v7);
    }
    else
    {
      swift_errorRelease(v7);
      swift_errorRelease(v7);
      swift_errorRelease(v7);

    }
  }
}

void sub_100067720()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10000F3C0();
  sub_10001AFDC(v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_cache));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction));
  swift_defaultActor_destroy(v0);
  sub_10000BF94();
}

uint64_t sub_100067784()
{
  uint64_t v0;

  sub_100067720();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10006779C()
{
  return type metadata accessor for StorebagCache(0);
}

uint64_t type metadata accessor for StorebagCache(uint64_t a1)
{
  return sub_10001030C(a1, (uint64_t *)&unk_100090838, (uint64_t)&nominal type descriptor for StorebagCache);
}

uint64_t sub_1000677B8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = &unk_1000703B8;
    v4[4] = &unk_1000703B8;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100067848(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    v7 = a2[4];
    *(_QWORD *)(a1 + 32) = v7;
    v8 = *(int *)(a3 + 20);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
  }
  return v5;
}

uint64_t *sub_100067910(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[4];
  v11 = a1[4];
  a1[4] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 20);
  v13 = (uint64_t)a1 + v12;
  v14 = (uint64_t)a2 + v12;
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

uint64_t sub_1000679C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 20);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_100067A28(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  v7 = a2[3];
  v8 = a1[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease(v8);
  v9 = a1[4];
  a1[4] = a2[4];
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 20);
  v11 = (uint64_t)a1 + v10;
  v12 = (uint64_t)a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_100067ABC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000112E0();
    return _s10RTCUtility9XPCObjectOwet_0((uint64_t)a1 + *(int *)(a3 + 20), a2, v8);
  }
}

_QWORD *sub_100067B2C(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    v7 = sub_1000112E0();
    return (_QWORD *)sub_100015700((uint64_t)v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100067B8C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "(";
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

Swift::Int sub_100067C00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100067C74()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  sub_100015060(v0 + 8);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100067CB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_BYTE *)(v1 + 56);
  v10 = (_QWORD *)swift_task_alloc(dword_100090A74);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003AA44;
  return sub_100066CDC(a1, v4, v5, v6, v7, v8, v9, v1 + 64);
}

uint64_t sub_100067D58(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(result);
  return result;
}

unint64_t sub_100067D64()
{
  unint64_t result;

  result = qword_100090A90;
  if (!qword_100090A90)
  {
    result = swift_getWitnessTable(&unk_10006FE80, &type metadata for RawStorebag._EncodedRawStorebag);
    atomic_store(result, (unint64_t *)&qword_100090A90);
  }
  return result;
}

void sub_100067DA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];

  if (!*(_QWORD *)(a1 + 16)
    || (sub_10001AAC8(&qword_10008FF08), v2 = sub_10000C028(), v3 = v2, (v27 = *(_QWORD *)(a1 + 16)) == 0))
  {
LABEL_23:
    sub_10000781C();
    sub_100015500();
    return;
  }
  v4 = 0;
  v5 = v2 + 56;
  while (v4 < *(_QWORD *)(a1 + 16))
  {
    v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    v8 = *v6;
    v7 = v6[1];
    Hasher.init(_seed:)(v28, *(_QWORD *)(v3 + 40));
    sub_100007840();
    String.hash(into:)(v28, v8, v7);
    v9 = Hasher._finalize()();
    v10 = -1 << *(_BYTE *)(v3 + 32);
    v11 = v9 & ~v10;
    v12 = v11 >> 6;
    v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
    v14 = 1 << v11;
    if (((1 << v11) & v13) != 0)
    {
      v15 = *(_QWORD *)(v3 + 48);
      v16 = (uint64_t *)(v15 + 16 * v11);
      v17 = v16[1];
      v18 = *v16 == v8 && v17 == v7;
      if (v18 || (sub_10001BC88(*v16, v17) & 1) != 0)
      {
LABEL_11:
        swift_bridgeObjectRelease(v7);
        goto LABEL_22;
      }
      v19 = ~v10;
      while (1)
      {
        v11 = (v11 + 1) & v19;
        v12 = v11 >> 6;
        v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
        v14 = 1 << v11;
        if ((v13 & (1 << v11)) == 0)
          break;
        v20 = (uint64_t *)(v15 + 16 * v11);
        v21 = v20[1];
        v22 = *v20 == v8 && v21 == v7;
        if (v22 || (sub_10001BC88(*v20, v21) & 1) != 0)
          goto LABEL_11;
      }
    }
    *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
    v23 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    *v23 = v8;
    v23[1] = v7;
    v24 = *(_QWORD *)(v3 + 16);
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_25;
    *(_QWORD *)(v3 + 16) = v26;
LABEL_22:
    if (++v4 == v27)
      goto LABEL_23;
  }
  __break(1u);
LABEL_25:
  __break(1u);
}

void sub_100067F28(unint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __n128 v7;
  __n128 v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  Swift::UInt v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD v29[9];

  v2 = a1;
  v3 = a1 >> 62;
  if (a1 >> 62)
  {
    sub_10001E49C();
    v4 = _CocoaArrayWrapper.endIndex.getter(v1, v7);
    sub_100019460();
    if (v4)
    {
LABEL_3:
      sub_10001AAC8((uint64_t *)&unk_100090AB0);
      v5 = (_QWORD *)sub_10000C028();
      if (!v3)
        goto LABEL_4;
LABEL_8:
      sub_10001E49C();
      v6 = _CocoaArrayWrapper.endIndex.getter(v4, v8);
      sub_100019460();
      if (!v6)
      {
LABEL_25:
        sub_100019460();
        return;
      }
      goto LABEL_9;
    }
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
  }
  v5 = &_swiftEmptySetSingleton;
  if (v3)
    goto LABEL_8;
LABEL_4:
  v6 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
    goto LABEL_25;
LABEL_9:
  v9 = 0;
  v28 = v2 & 0xC000000000000001;
  v24 = v2 + 32;
  v25 = v2 & 0xFFFFFFFFFFFFFF8;
  v26 = v6;
  v27 = v2;
  while (1)
  {
    if (v28)
    {
      v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v2);
    }
    else
    {
      if (v9 >= *(_QWORD *)(v25 + 16))
        goto LABEL_28;
      v10 = *(_QWORD *)(v24 + 8 * v9);
      swift_retain(v10);
    }
    v11 = __OFADD__(v9++, 1);
    if (v11)
      break;
    Hasher.init(_seed:)(v29, v5[5]);
    type metadata accessor for Client();
    sub_100023D98(&qword_10008EBC8, (uint64_t (*)(uint64_t))type metadata accessor for Client, (uint64_t)&unk_10006DC6C);
    v12 = sub_10001E5C0();
    Hasher._combine(_:)(v12);
    v13 = Hasher._finalize()();
    v14 = -1 << *((_BYTE *)v5 + 32);
    v15 = v13 & ~v14;
    sub_1000683C0();
    if ((v18 & v17) != 0)
    {
      sub_10006834C();
      v19 = (_QWORD *)sub_10006836C();
      sub_10001E5C0();
      sub_1000684C0();
      if (v19 == v29)
      {
LABEL_20:
        swift_release(v10);
        v6 = v26;
        v2 = v27;
        goto LABEL_24;
      }
      v20 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v20;
        sub_1000683C0();
        if ((v17 & v18) == 0)
          break;
        sub_10006834C();
        v21 = (_QWORD *)sub_10006836C();
        sub_10001E5C0();
        sub_1000684C0();
        if (v21 == v29)
          goto LABEL_20;
      }
      v6 = v26;
      v2 = v27;
    }
    v5[v16 + 7] = v18 | v17;
    *(_QWORD *)(v5[6] + 8 * v15) = v10;
    v22 = v5[2];
    v11 = __OFADD__(v22, 1);
    v23 = v22 + 1;
    if (v11)
      goto LABEL_27;
    v5[2] = v23;
LABEL_24:
    if (v9 == v6)
      goto LABEL_25;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

BOOL sub_100068154()
{
  __SecKey *v0;
  const __CFData *isa;
  const __CFData *v2;
  int v3;

  if (qword_10008DFD0 != -1)
    swift_once(&qword_10008DFD0, sub_100025FD4);
  v0 = (__SecKey *)(id)qword_10008E768;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v2 = Data._bridgeToObjectiveC()().super.isa;
  v3 = SecKeyVerifySignature(v0, kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1, isa, v2, 0);

  return v3 != 0;
}

uint64_t type metadata accessor for StorebagCache.Location(uint64_t a1)
{
  return sub_10001030C(a1, qword_100090B38, (uint64_t)&nominal type descriptor for StorebagCache.Location);
}

uint64_t sub_100068234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100068240);
}

uint64_t sub_100068240(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_10000F3C0();
  v5 = _s10RTCUtility9XPCObjectOwet_0(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t sub_100068280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006828C);
}

uint64_t sub_10006828C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = sub_10000F3C0();
  return sub_100015700(a1, v5, a3, v6);
}

uint64_t sub_1000682C8(uint64_t a1)
{
  uint64_t v1;

  return Error.localizedDescription.getter(v1, a1);
}

BOOL sub_1000682D8(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_1000682E8(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_1000682F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_100068300@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100068308(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_100006560(v1, v2, a1, v3);
}

uint64_t sub_10006831C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100068330()
{
  return type metadata accessor for CocoaError(0);
}

uint64_t sub_10006833C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_100014F94(v1, v0, (uint64_t *)(v2 - 88));
}

uint64_t sub_10006834C()
{
  uint64_t v0;
  uint64_t v1;

  return swift_retain(*(_QWORD *)(*(_QWORD *)(v0 + 48) + 8 * v1));
}

uint64_t sub_10006835C()
{
  uint64_t v0;

  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_10006836C()
{
  uint64_t v0;
  uint64_t v1;

  return Identifiable<>.id.getter(v1, v0);
}

uint64_t sub_1000683B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_1000683D8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000683EC()
{
  uint64_t v0;

  return Data.init(contentsOf:options:)(v0, 8);
}

id sub_1000683F8(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_100068414()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100068420()
{
  uint64_t v0;
  uint64_t v1;

  return static Date.< infix(_:_:)(v0, v1);
}

uint64_t sub_10006842C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return sub_10005A888(v2, a2, v3);
}

void sub_100068438()
{
  uint64_t v0;

  sub_100005900(v0);
}

uint64_t sub_100068440(uint64_t a1)
{
  unint64_t v1;

  return sub_100010720(a1, v1);
}

id sub_100068448()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 3768));
}

uint64_t sub_100068454(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10006845C()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_100068468()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_100068474()
{
  uint64_t v0;
  uint64_t v1;

  return static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v0 + 48) + 8 * v1));
}

uint64_t sub_100068480()
{
  uint64_t v0;

  return _convertNSErrorToError(_:)(v0);
}

uint64_t sub_10006848C()
{
  return static os_log_type_t.fault.getter();
}

BOOL sub_100068494(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10006849C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10001F150(v1, v0);
}

uint64_t sub_1000684A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void sub_1000684B4()
{
  sub_100067474();
}

uint64_t sub_1000684C0()
{
  uint64_t v0;

  return swift_release(v0);
}

_QWORD *sub_1000684CC(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  *result = v2;
  result[1] = v1;
  return result;
}

uint64_t sub_1000684F4()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 144));
}

uint64_t sub_100068500()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100010720(v1, v0);
}

uint64_t sub_10006850C()
{
  return 0;
}

id sub_100068520@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(_QWORD *)(a1 + 32) = a2;
  return a2;
}

uint64_t sub_100068550(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s10RTCUtility9XPCObjectOwst_0(a1, a2, 1, v2);
}

uint64_t sub_10006855C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s10RTCUtility9XPCObjectOwet_0(a1, a2, a3);
}

uint64_t sub_100068570()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 88));
}

uint64_t sub_100068578(uint64_t a1)
{
  return swift_allocObject(a1, 112, 7);
}

void XPCObject.obj.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  __chkstk_darwin(v2);
  sub_10000BE50();
  v3 = sub_100012114();
  sub_100012C34();
  __chkstk_darwin(v4);
  sub_10000BE50();
  v7 = v6 - v5;
  sub_10004AADC(v1, v6 - v5);
  v8 = (char *)&loc_100068628 + dword_100068854[swift_getEnumCaseMultiPayload(v7, v3)];
  __asm { BR              X10 }
}

uint64_t sub_100068638()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

BOOL static XPCObject.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  xpc_object_t v5;
  _BOOL8 v6;

  XPCObject.obj.getter();
  v1 = v0;
  XPCObject.obj.getter();
  v3 = v2;
  v4 = (void *)sub_10001BAB8();
  v6 = xpc_equal(v4, v5);
  swift_unknownObjectRelease(v1);
  swift_unknownObjectRelease(v3);
  return v6;
}

xpc_object_t RTCXPCDictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  char *v49;
  xpc_object_t empty;

  sub_10001AAC8(&qword_10008FEE0);
  sub_100012C34();
  __chkstk_darwin(v2);
  sub_10000CA40();
  v5 = v3 - v4;
  __chkstk_darwin(v6);
  v49 = (char *)&v41 - v7;
  v8 = sub_10001AAC8(&qword_100090B58);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10000CA40();
  v48 = (_QWORD *)(v10 - v11);
  v13 = __chkstk_darwin(v12);
  v47 = (uint64_t *)((char *)&v41 - v14);
  v15 = __chkstk_darwin(v13);
  v17 = (uint64_t *)((char *)&v41 - v16);
  __chkstk_darwin(v15);
  v19 = (uint64_t *)((char *)&v41 - v18);
  empty = xpc_dictionary_create_empty();
  v20 = *(_QWORD *)(a1 + 16);
  if (v20)
  {
    v41 = a1;
    v42 = v5;
    v45 = v19;
    v46 = v8;
    v44 = (uint64_t)v19 + *(int *)(v8 + 48);
    v21 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v43 = *(_QWORD *)(v9 + 72);
    v22 = (uint64_t)v49;
    do
    {
      sub_10006921C(v21, (uint64_t)v19, &qword_100090B58);
      v23 = v46;
      v24 = (uint64_t)v17 + *(int *)(v46 + 48);
      v26 = *v19;
      v25 = v19[1];
      *v17 = v26;
      v17[1] = v25;
      sub_10001CE4C(v44, v24);
      v27 = *(int *)(v23 + 48);
      v28 = v47;
      v29 = (uint64_t)v47 + v27;
      *v47 = v26;
      v28[1] = v25;
      sub_10004AADC(v24, (uint64_t)v28 + v27);
      v30 = *(int *)(v23 + 48);
      v31 = v48;
      v32 = (uint64_t)v48 + v30;
      *v48 = v26;
      v31[1] = v25;
      sub_10004AADC(v24, (uint64_t)v31 + v30);
      sub_10001CE4C(v32, v22);
      v33 = sub_100012114();
      sub_10001CD48();
      v34 = v22;
      v35 = v42;
      sub_10006921C(v34, v42, &qword_10008FEE0);
      LODWORD(v33) = _s10RTCUtility9XPCObjectOwet_0(v35, 1, v33);
      swift_bridgeObjectRetain();
      if ((_DWORD)v33 == 1)
      {
        sub_10001B21C();
        v36 = 0;
      }
      else
      {
        XPCObject.obj.getter();
        v36 = v37;
        sub_10002FCCC(v35);
      }
      v38 = String.utf8CString.getter(v26, v25);
      swift_bridgeObjectRelease(v25);
      xpc_dictionary_set_value(empty, (const char *)(v38 + 32), v36);
      swift_unknownObjectRelease(v36);
      v22 = (uint64_t)v49;
      sub_10001B21C();
      swift_release(v38);
      sub_10001D7AC((uint64_t)v17, &qword_100090B58);
      sub_10002FCCC(v29);
      v21 += v43;
      --v20;
      v19 = v45;
    }
    while (v20);
    v39 = v41;
  }
  else
  {
    v39 = a1;
  }
  swift_bridgeObjectRelease(v39);
  return empty;
}

uint64_t RTCXPCDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;

  sub_10001AAC8(&qword_10008FEE0);
  sub_100012C34();
  __chkstk_darwin(v6);
  sub_10000BE50();
  v9 = v8 - v7;
  v10 = *v3;
  sub_10006921C(a1, v8 - v7, &qword_10008FEE0);
  v11 = sub_100012114();
  if (_s10RTCUtility9XPCObjectOwet_0(v9, 1, v11) == 1)
  {
    sub_10001D7AC(v9, &qword_10008FEE0);
    v12 = 0;
  }
  else
  {
    XPCObject.obj.getter();
    v12 = v13;
    sub_10002FCCC(v9);
  }
  v14 = sub_10001B374();
  swift_bridgeObjectRelease(a3);
  xpc_dictionary_set_value(v10, (const char *)(v14 + 32), v12);
  swift_unknownObjectRelease(v12);
  sub_10001D7AC(a1, &qword_10008FEE0);
  return swift_release(v14);
}

uint64_t RTCXPCDictionary.keys.getter(void *a1)
{
  int64_t count;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD *v11;
  _QWORD aBlock[5];
  uint64_t v13;
  _QWORD *v14;

  count = xpc_dictionary_get_count(a1);
  v3 = _swiftEmptyArrayStorage;
  if (!swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage)
    || count > _swiftEmptyArrayStorage[3] >> 1)
  {
    sub_100012D78();
    v3 = v4;
  }
  v14 = v3;
  v5 = swift_allocObject(&unk_10008A4F0, 24, 7);
  *(_QWORD *)(v5 + 16) = &v14;
  v6 = swift_allocObject(&unk_10008A518, 32, 7);
  *(_QWORD *)(v6 + 16) = sub_10006926C;
  *(_QWORD *)(v6 + 24) = v5;
  aBlock[4] = sub_1000112F0;
  v13 = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100011280;
  aBlock[3] = &unk_10008A530;
  v7 = _Block_copy(aBlock);
  v8 = v13;
  swift_retain(v6);
  swift_release(v8);
  xpc_dictionary_apply(a1, v7);
  _Block_release(v7);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v6, "", 81, 136, 40, 1);
  result = sub_10000AF94();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v11 = v14;
    swift_release(v5);
    return (uint64_t)v11;
  }
  return result;
}

uint64_t sub_100068E3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = String.init(cString:)(a1);
  v6 = v5;
  sub_100069788();
  v7 = *(_QWORD *)(*a3 + 16);
  sub_1000697D0(v7);
  v8 = *a3;
  *(_QWORD *)(v8 + 16) = v7 + 1;
  v9 = v8 + 16 * v7;
  *(_QWORD *)(v9 + 32) = v4;
  *(_QWORD *)(v9 + 40) = v6;
  return 1;
}

void (*RTCXPCDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  xpc_object_t v13;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = *(_QWORD *)(*(_QWORD *)(sub_10001AAC8(&qword_10008FEE0) - 8) + 64);
  v7[3] = malloc(v8);
  v9 = malloc(v8);
  v7[4] = v9;
  v10 = sub_10001BAB8();
  v12 = String.utf8CString.getter(v10, v11);
  v13 = sub_100010630(v12);
  swift_release(v12);
  XPCObject.init(_:)(v13, (uint64_t)v9);
  return sub_100068F54;
}

void sub_100068F54(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    sub_10006921C(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)v3, &qword_10008FEE0);
    swift_bridgeObjectRetain();
    sub_10001D35C((uint64_t)v3);
    sub_10001D7AC((uint64_t)v4, &qword_10008FEE0);
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_10001D35C((uint64_t)v4);
  }
  free(v4);
  free(v3);
  free(v2);
}

Swift::Bool __swiftcall RTCXPCDictionary.contains(key:)(Swift::String key)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  uint64_t v7;

  sub_10001AAC8(&qword_10008FEE0);
  sub_100012C34();
  __chkstk_darwin(v1);
  sub_10000BE50();
  v4 = v3 - v2;
  v5 = sub_10001B374();
  v6 = sub_100010630(v5);
  sub_10000AF94();
  XPCObject.init(_:)(v6, v4);
  v7 = sub_100012114();
  LOBYTE(v6) = _s10RTCUtility9XPCObjectOwet_0(v4, 1, v7) != 1;
  sub_10001D7AC(v4, &qword_10008FEE0);
  return (char)v6;
}

xpc_object_t sub_1000690AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t result;

  result = RTCXPCDictionary.init(dictionaryLiteral:)(a1);
  *a2 = result;
  return result;
}

xpc_object_t sub_1000690D0(uint64_t a1, uint64_t a2)
{
  uint64_t bytes;
  __int16 v4;
  char v5;
  char v6;
  char v7;
  char v8;

  bytes = a1;
  v4 = a2;
  v5 = BYTE2(a2);
  v6 = BYTE3(a2);
  v7 = BYTE4(a2);
  v8 = BYTE5(a2);
  return xpc_data_create(&bytes, BYTE6(a2));
}

char *sub_100069198(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;

  result = (char *)__DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = (char *)__DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - (_QWORD)result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  if (v5)
    v10 = v9;
  else
    v10 = 0;
  return (char *)xpc_data_create(v5, v10);
}

uint64_t sub_10006921C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10001AAC8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100069260()
{
  uint64_t v0;

  return sub_100012CCC(v0, 24);
}

uint64_t sub_10006926C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100068E3C(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_100069274()
{
  uint64_t v0;

  return sub_100012CCC(v0, 32);
}

uint64_t *initializeBufferWithCopyOfBuffer for XPCObject(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v12);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v8);
        v9 = a1;
        v10 = a3;
        v11 = 0;
        goto LABEL_13;
      case 1u:
        v13 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v13);
        v9 = a1;
        v10 = a3;
        v11 = 1;
        goto LABEL_13;
      case 7u:
        v15 = *a2;
        v14 = a2[1];
        sub_100021264(v15, v14);
        *a1 = v15;
        a1[1] = v14;
        v9 = a1;
        v10 = a3;
        v11 = 7;
        goto LABEL_13;
      case 8u:
        v16 = a2[1];
        *a1 = *a2;
        a1[1] = v16;
        swift_bridgeObjectRetain();
        v9 = a1;
        v10 = a3;
        v11 = 8;
        goto LABEL_13;
      case 9u:
        v17 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a1, a2, v17);
        v9 = a1;
        v10 = a3;
        v11 = 9;
        goto LABEL_13;
      case 0xAu:
        v18 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v18);
        v9 = a1;
        v10 = a3;
        v11 = 10;
        goto LABEL_13;
      case 0xBu:
        v19 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v19);
        v9 = a1;
        v10 = a3;
        v11 = 11;
        goto LABEL_13;
      case 0xCu:
        v20 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v20);
        v9 = a1;
        v10 = a3;
        v11 = 12;
LABEL_13:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t *assignWithCopy for XPCObject(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_10002FCCC((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_12;
      case 1u:
        v10 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v10);
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_12;
      case 7u:
        v12 = *a2;
        v11 = a2[1];
        sub_100021264(v12, v11);
        *a1 = v12;
        a1[1] = v11;
        v7 = a1;
        v8 = a3;
        v9 = 7;
        goto LABEL_12;
      case 8u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        v7 = a1;
        v8 = a3;
        v9 = 8;
        goto LABEL_12;
      case 9u:
        v13 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v7 = a1;
        v8 = a3;
        v9 = 9;
        goto LABEL_12;
      case 0xAu:
        v14 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v14);
        v7 = a1;
        v8 = a3;
        v9 = 10;
        goto LABEL_12;
      case 0xBu:
        v15 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v15);
        v7 = a1;
        v8 = a3;
        v9 = 11;
        goto LABEL_12;
      case 0xCu:
        v16 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v16);
        v7 = a1;
        v8 = a3;
        v9 = 12;
LABEL_12:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for XPCObject(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 9)
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 9);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for XPCObject(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_10002FCCC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 9)
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 9);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000696D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = "\b";
  v4[1] = "\b";
  v4[2] = &unk_100070518;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = &unk_100070530;
  v4[8] = &unk_100070548;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[9] = *(_QWORD *)(result - 8) + 64;
    v4[10] = "\b";
    v4[11] = "\b";
    v4[12] = "\b";
    swift_initEnumMetadataMultiPayload(a1, 256, 13, v4);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RTCXPCDictionary()
{
  return &type metadata for RTCXPCDictionary;
}

void sub_100069788()
{
  _QWORD *v0;
  uint64_t v1;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v3;

  v1 = *v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  *v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100012D78();
    *v0 = v3;
  }
}

void sub_1000697D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 + 1 > *(_QWORD *)(*(_QWORD *)v1 + 24) >> 1)
  {
    sub_100012D78();
    *(_QWORD *)v1 = v2;
  }
}

void static MessageKeys.clientName.getter()
{
  sub_10001AC4C();
}

void static MessageKeys.serviceName.getter()
{
  sub_10001AC4C();
}

void static MessageKeys.clientType.getter()
{
  sub_10001AC4C();
}

void *MessageKeys.legacyClient.unsafeMutableAddressor()
{
  return &static MessageKeys.legacyClient;
}

void static MessageKeys.legacyClient.getter()
{
  sub_10001AC4C();
}

void static MessageKeys.payload.getter()
{
  sub_10001AC4C();
}

void static MessageKeys.sessionID.getter()
{
  sub_10001AC4C();
}

void static MessageKeys.realtime.getter()
{
  sub_10001AC4C();
}

void static MessageKeys.hierarchyLevel.getter()
{
  sub_10001BB24();
}

void static MessageKeys.hierarchyToken.getter()
{
  sub_10001BB24();
}

uint64_t static MessageKeys.samplingUUID.getter()
{
  return 0x6469757573;
}

uint64_t static MessageKeys.eager.getter()
{
  return 0x7265676165;
}

const char *MessageKeys.allowed.unsafeMutableAddressor()
{
  return "allowed";
}

uint64_t static MessageKeys.allowed.getter()
{
  return 0x6465776F6C6C61;
}

const char *MessageKeys.denied.unsafeMutableAddressor()
{
  return "denied";
}

uint64_t static MessageKeys.denied.getter()
{
  return 0x6465696E6564;
}

void static MessageKeys.overrideSampling.getter()
{
  sub_10001BB24();
}

ValueMetadata *type metadata accessor for MessageKeys()
{
  return &type metadata for MessageKeys;
}

uint64_t XPCError.errorDescription.getter(void *a1)
{
  const char *string;

  string = xpc_dictionary_get_string(a1, "XPCErrorDescription");
  if (string)
    return String.init(cString:)(string);
  else
    return sub_10001BB2C();
}

uint64_t sub_10006991C()
{
  void **v0;

  return XPCError.errorDescription.getter(*v0);
}

uint64_t XPCIncomingConnection.auditToken.getter(uint64_t a1)
{
  _OWORD v2[2];

  memset(v2, 0, sizeof(v2));
  xpc_connection_get_audit_token(a1, v2);
  return *(_QWORD *)&v2[0];
}

unsigned __int8 *XPCIncomingConnection.entitlementValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  void *v7;

  v6 = String.utf8CString.getter(a1, a2);
  v7 = (void *)xpc_connection_copy_entitlement_value(a3, v6 + 32);
  swift_release(v6);
  return XPCObject.init(_:)(v7, a4);
}

void XPCIncomingConnection.makeConnection(targetQ:delegate:)(void *a1, uint64_t a2, uint64_t a3, _xpc_connection_s *a4)
{
  uint64_t v8;

  v8 = type metadata accessor for XPCConnection();
  sub_10001CE18(v8);
  sub_10001A190();
  swift_unknownObjectRetain(a4);
  XPCConnection.init(conn:targetQ:delegate:)(a4, a1, a2, a3);
  sub_10000BF84();
}

void XPCConnection.__allocating_init(conn:targetQ:delegate:)(_xpc_connection_s *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_10001CE18(v4);
  XPCConnection.init(conn:targetQ:delegate:)(a1, a2, a3, a4);
  sub_10000BF84();
}

uint64_t type metadata accessor for XPCConnection()
{
  return objc_opt_self(_TtC10RTCUtility13XPCConnection);
}

uint64_t XPCConnection.conn.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t XPCConnection.delegate.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 24);
}

uint64_t XPCConnection.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v6[24];

  sub_10001AC54(v2 + 24, (uint64_t)v6);
  *(_QWORD *)(v2 + 32) = a2;
  swift_unknownObjectWeakAssign(v2 + 24, a1);
  return sub_10001A3C8();
}

void (*XPCConnection.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t Strong;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess(v1 + 24, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_100069BB0;
}

void sub_100069BB0(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign(v5 + 24, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

uint64_t XPCConnection.__allocating_init(machService:targetQ:listen:delegate:)(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;

  v13 = sub_10001CE18(v6);
  XPCConnection.init(machService:targetQ:listen:delegate:)(a1, a2, a3, a4, a5, a6);
  return v13;
}

_QWORD *XPCConnection.init(machService:targetQ:listen:delegate:)(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _xpc_connection_s *mach_service;
  NSObject *v17;
  _xpc_connection_s *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];

  v6[4] = 0;
  swift_unknownObjectWeakInit(v6 + 3, 0);
  if ((a4 & 1) != 0)
    v13 = 1;
  else
    v13 = 2;
  v14 = String.utf8CString.getter(a1, a2);
  v15 = a3;
  swift_bridgeObjectRelease(a2);
  mach_service = xpc_connection_create_mach_service((const char *)(v14 + 32), v15, v13);

  swift_release(v14);
  sub_10001AC54((uint64_t)(v6 + 3), (uint64_t)v23);
  v6[4] = a6;
  swift_unknownObjectWeakAssign(v6 + 3, a5);
  v6[2] = mach_service;
  v6[5] = v15;
  v17 = v15;
  v18 = (_xpc_connection_s *)sub_10001A190();
  xpc_connection_set_target_queue(v18, v17);
  sub_100018184((uint64_t)sub_10001092C, v20, (char)_NSConcreteStackBlock, 1107296256, v21, v22);
  sub_10001227C();
  swift_release(a2);
  sub_100012D6C();
  _Block_release(v15);
  xpc_connection_activate(mach_service);
  sub_10001A3C8();

  sub_10001A244();
  return v6;
}

_QWORD *XPCConnection.init(conn:targetQ:delegate:)(_xpc_connection_s *a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  NSObject *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  v4[4] = 0;
  v9 = swift_unknownObjectWeakInit(v4 + 3, 0);
  v4[2] = a1;
  sub_10001AC54(v9, (uint64_t)v15);
  v4[4] = a4;
  swift_unknownObjectWeakAssign(v4 + 3, a3);
  v4[5] = a2;
  sub_10001A190();
  v10 = a2;
  xpc_connection_set_target_queue(a1, v10);
  sub_100018184((uint64_t)sub_10001092C, v12, (char)_NSConcreteStackBlock, 1107296256, v13, v14);
  sub_10001227C();
  swift_release(v4 + 3);
  sub_100012D6C();
  _Block_release(a2);
  xpc_connection_activate(a1);
  sub_10001A3C8();

  sub_10001A244();
  return v4;
}

void XPCConnection.send(_:)(xpc_object_t message)
{
  uint64_t v1;

  xpc_connection_send_message(*(xpc_connection_t *)(v1 + 16), message);
}

uint64_t XPCConnection.sendWithReply(_:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 + 64) = a2;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = v2;
  return swift_task_switch(sub_100069F20, 0, 0);
}

uint64_t sub_100069F20()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_BYTE *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 40);
  v6 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 40) = v6;
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v3;
  *(_BYTE *)(v6 + 32) = v1;
  *(_QWORD *)(v6 + 40) = v5;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v7;
  *v7 = v0;
  v7[1] = sub_100069FE4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000011, 0x8000000100073350, sub_10006A1E4, v6, &type metadata for RTCXPCDictionary);
}

uint64_t sub_100069FE4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10006A05C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 40));
    v4 = sub_10006A050;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10006A050()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10006A05C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006A090(uint64_t a1, _xpc_connection_s *a2, void *a3, uint64_t a4, NSObject *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD aBlock[5];
  uint64_t v19;

  v9 = sub_10001AAC8(&qword_100090D38);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = swift_allocObject(&unk_10008A6F0, v13 + v11, v12 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_10006A468;
  v19 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001092C;
  aBlock[3] = &unk_10008A708;
  v15 = _Block_copy(aBlock);
  v16 = v19;
  swift_unknownObjectRetain(a3);
  swift_release(v16);
  xpc_connection_send_message_with_reply(a2, a3, a5, v15);
  _Block_release(v15);
  return swift_unknownObjectRelease(a3);
}

uint64_t sub_10006A1E4(uint64_t a1)
{
  uint64_t v1;

  return sub_10006A090(a1, *(_xpc_connection_s **)(v1 + 16), *(void **)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t sub_10006A1F4(void *a1)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_error)
  {
    v4 = sub_10006A3A8();
    v5 = swift_allocError(&type metadata for XPCError, v4, 0, 0);
    *v6 = a1;
    v8 = v5;
    swift_unknownObjectRetain(a1);
    v7 = sub_10001AAC8(&qword_100090D38);
    return CheckedContinuation.resume(throwing:)(&v8, v7);
  }
  else
  {
    v8 = (uint64_t)a1;
    swift_unknownObjectRetain(a1);
    v2 = sub_10001AAC8(&qword_100090D38);
    return CheckedContinuation.resume(returning:)(&v8, v2);
  }
}

Swift::Bool __swiftcall OS_xpc_object.isError()()
{
  void *v0;

  return xpc_get_type(v0) == (xpc_type_t)&_xpc_type_error;
}

uint64_t XPCConnection.auditToken.getter()
{
  uint64_t v0;
  _OWORD v2[2];

  memset(v2, 0, sizeof(v2));
  xpc_connection_get_audit_token(*(_QWORD *)(v0 + 16), v2);
  return *(_QWORD *)&v2[0];
}

uint64_t XPCConnection.deinit()
{
  uint64_t v0;

  xpc_connection_cancel(*(xpc_connection_t *)(v0 + 16));
  sub_10001A244();
  sub_10006A380(v0 + 24);

  return v0;
}

uint64_t XPCConnection.__deallocating_deinit()
{
  uint64_t v0;

  XPCConnection.deinit();
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_10006A380(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

unint64_t sub_10006A3A8()
{
  unint64_t result;

  result = qword_100090C78;
  if (!qword_100090C78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for XPCError, &type metadata for XPCError);
    atomic_store(result, (unint64_t *)&qword_100090C78);
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCError()
{
  return &type metadata for XPCError;
}

ValueMetadata *type metadata accessor for XPCIncomingConnection()
{
  return &type metadata for XPCIncomingConnection;
}

uint64_t sub_10006A404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001AAC8(&qword_100090D38);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10006A468(void *a1)
{
  sub_10001AAC8(&qword_100090D38);
  return sub_10006A1F4(a1);
}

Swift::Int sub_10006A4B8()
{
  unsigned __int8 *v0;

  return sub_10006A4C0(*v0);
}

Swift::Int sub_10006A4C0(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

void sub_10006A504(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_10006A50C(a1, *v1);
}

void sub_10006A50C(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int sub_10006A530(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_10006A538(a1, *v1);
}

Swift::Int sub_10006A538(uint64_t a1, unsigned __int8 a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

RTCUtility::XPCMessage::MessageType_optional sub_10006A578@<W0>(Swift::Int64 *a1@<X0>, RTCUtility::XPCMessage::MessageType_optional *a2@<X8>)
{
  RTCUtility::XPCMessage::MessageType_optional result;

  result.value = XPCMessage.MessageType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t XPCMessage.ty.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *XPCMessage.init(ty:payload:)(unsigned __int8 a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  xpc_object_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v15;

  sub_10001AAC8(&qword_10008FEE0);
  sub_100012C34();
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v15 - v8;
  swift_unknownObjectRetain(a2);
  v10 = xpc_int64_create(a1);
  XPCObject.init(_:)(v10, (uint64_t)v9);
  sub_10002FE50((uint64_t)v9, (uint64_t)v7);
  v11 = sub_100012114();
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v7, 1, v11) == 1)
  {
    sub_100062700((uint64_t)v7);
    v12 = 0;
  }
  else
  {
    XPCObject.obj.getter();
    v12 = v13;
    sub_10002FCCC((uint64_t)v7);
  }
  xpc_dictionary_set_value(a2, "type", v12);
  swift_unknownObjectRelease(v12);
  sub_100062700((uint64_t)v9);
  swift_unknownObjectRelease(a2);
  return a2;
}

uint64_t XPCMessage.description.getter(void *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  xpc_object_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _BOOL8 v23;
  Swift::Int v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD v48[2];

  v46 = sub_100012114();
  __chkstk_darwin(v46);
  sub_10000BE50();
  isUniquelyReferenced_nonNull_native = v5 - v4;
  sub_10001AAC8(&qword_10008FEE0);
  sub_100012C34();
  __chkstk_darwin(v7);
  sub_10000BE50();
  v10 = v9 - v8;
  v48[0] = 0;
  v48[1] = 0xE000000000000000;
  LOBYTE(v47) = a2;
  _print_unlocked<A, B>(_:_:)(&v47, v48, &type metadata for XPCMessage.MessageType, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v11._countAndFlagsBits = 2683;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  v45 = a1;
  v12 = RTCXPCDictionary.keys.getter(a1);
  v13 = *(_QWORD *)(v12 + 16);
  v43 = v12;
  if (v13)
  {
    v14 = (_QWORD *)(v12 + 40);
    v15 = &_swiftEmptyDictionarySingleton;
    v44 = v10;
    while (1)
    {
      v17 = *(v14 - 1);
      v16 = *v14;
      v18 = String.utf8CString.getter(v17, *v14);
      swift_bridgeObjectRetain();
      v19 = xpc_dictionary_get_value(v45, (const char *)(v18 + 32));
      swift_release(v18);
      XPCObject.init(_:)(v19, v10);
      if (_s10RTCUtility9XPCObjectOwet_0(v10, 1, v46) == 1)
        break;
      sub_10001CE4C(v10, isUniquelyReferenced_nonNull_native);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
      v47 = v15;
      v20 = sub_10001228C();
      v22 = v15[2];
      v23 = (v21 & 1) == 0;
      v24 = v22 + v23;
      if (__OFADD__(v22, v23))
      {
        __break(1u);
LABEL_17:
        __break(1u);
        break;
      }
      v25 = v20;
      v26 = v21;
      sub_10001AAC8(&qword_100090D40);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v24))
      {
        v27 = sub_10001228C();
        if ((v26 & 1) != (v28 & 1))
          goto LABEL_19;
        v25 = v27;
      }
      v15 = v47;
      if ((v26 & 1) != 0)
      {
        v29 = sub_10001AC60();
        sub_10006A9C0(v29, v30);
      }
      else
      {
        v47[(v25 >> 6) + 8] |= 1 << v25;
        v31 = (_QWORD *)(v15[6] + 16 * v25);
        *v31 = v17;
        v31[1] = v16;
        v32 = sub_10001AC60();
        sub_10001CE4C(v32, v33);
        v34 = v15[2];
        v35 = __OFADD__(v34, 1);
        v36 = v34 + 1;
        if (v35)
          goto LABEL_17;
        v15[2] = v36;
        swift_bridgeObjectRetain();
      }
      v14 += 2;
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(0x8000000000000000);
      --v13;
      v10 = v44;
      if (!v13)
        goto LABEL_15;
    }
    __break(1u);
LABEL_19:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }
  else
  {
    v15 = &_swiftEmptyDictionarySingleton;
LABEL_15:
    swift_bridgeObjectRelease(v43);
    v37 = Dictionary.description.getter(v15, &type metadata for String, v46, &protocol witness table for String);
    v39 = v38;
    swift_bridgeObjectRelease(v15);
    v40._countAndFlagsBits = v37;
    v40._object = v39;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(v39);
    v41._countAndFlagsBits = 125;
    v41._object = (void *)0xE100000000000000;
    String.append(_:)(v41);
    return v48[0];
  }
  return result;
}

uint64_t sub_10006A9B4()
{
  uint64_t v0;

  return XPCMessage.description.getter(*(void **)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_10006A9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for XPCObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_10006AA08()
{
  unint64_t result;

  result = qword_100090D48;
  if (!qword_100090D48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for XPCMessage.MessageType, &type metadata for XPCMessage.MessageType);
    atomic_store(result, (unint64_t *)&qword_100090D48);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for XPCMessage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  swift_unknownObjectRetain(v3);
  return a1;
}

uint64_t destroy for XPCMessage(_QWORD *a1)
{
  return swift_unknownObjectRelease(*a1);
}

uint64_t *assignWithCopy for XPCMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t *assignWithTake for XPCMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_unknownObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCMessage(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 9))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCMessage()
{
  return &type metadata for XPCMessage;
}

uint64_t getEnumTagSinglePayload for XPCMessage.MessageType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 4) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCMessage.MessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10006AC6C + 4 * byte_10007079D[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10006ACA0 + 4 * byte_100070798[v4]))();
}

uint64_t sub_10006ACA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006ACA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006ACB0);
  return result;
}

uint64_t sub_10006ACBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006ACC4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10006ACC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006ACD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCMessage.MessageType()
{
  return &type metadata for XPCMessage.MessageType;
}

uint64_t sub_10006ACF0()
{
  return sub_10006AE88(1);
}

uint64_t sub_10006ACF8(int a1, int a2, int a3, int a4)
{
  BOOL v9;
  _DWORD v10[2];

  if (qword_100097268 == -1)
  {
    if (qword_100097270)
    {
LABEL_3:
      v10[0] = a1;
      v10[1] = (a2 << 16) | (a3 << 8) | a4;
      return _availability_version_check(1, v10);
    }
  }
  else
  {
    dispatch_once_f(&qword_100097268, 0, (dispatch_function_t)sub_10006AE80);
    if (qword_100097270)
      goto LABEL_3;
  }
  if (qword_100097260 == -1)
  {
    v9 = dword_100097250 < a2;
    if (dword_100097250 > a2)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_100097260, 0, (dispatch_function_t)sub_10006ACF0);
    v9 = dword_100097250 < a2;
    if (dword_100097250 > a2)
      return 1;
  }
  if (v9)
    return 0;
  if (dword_100097254 > a3)
    return 1;
  return dword_100097254 >= a3 && dword_100097258 >= a4;
}

uint64_t sub_10006AE80()
{
  return sub_10006AE88(0);
}

uint64_t sub_10006AE88(uint64_t result)
{
  void *v1;
  BOOL v2;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  unint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t (*v8)(_QWORD, const char *, uint64_t, unsigned __int8 *);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(void);
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  FILE *v27;
  unsigned int (*v28)(uint64_t, char *, uint64_t, uint64_t);
  char v29[32];

  v1 = (void *)qword_100097270;
  if (qword_100097270)
    v2 = (_DWORD)result == 0;
  else
    v2 = 0;
  if (!v2)
  {
    if (&__availability_version_check)
    {
      qword_100097270 = (uint64_t)&__availability_version_check;
      v1 = &__availability_version_check;
    }
    if (!v1 || (_DWORD)result != 0)
    {
      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        v4 = *(unsigned __int8 **)result;
        result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          v5 = (uint64_t (*)(_QWORD))result;
          v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            v7 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))result;
            result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              v8 = (uint64_t (*)(_QWORD, const char *, uint64_t, unsigned __int8 *))result;
              result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  v10 = (uint64_t (*)(uint64_t))result;
                  result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    v11 = (uint64_t (*)(void))result;
                    result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        v12 = (FILE *)result;
                        result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          v13 = (FILE *)result;
                          v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          v14 = ftell(v13);
                          if (v14 < 0)
                          {
                            v16 = 0;
                          }
                          else
                          {
                            v15 = v14;
                            rewind(v13);
                            v16 = malloc(v15);
                            if (v16)
                            {
                              v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                v17 = v5(0);
                                if (v17)
                                {
                                  v18 = v17;
                                  v19 = v13;
                                  if (v6)
                                    v20 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))v6)(0, v17, 0, 0, 0);
                                  else
                                    v20 = v7(0, v17, 0, 0);
                                  v21 = v20;
                                  if (v20)
                                  {
                                    v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      v23 = v22;
                                      v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984))
                                            sscanf(v29, "%d.%d.%d", &dword_100097250, &dword_100097254, &dword_100097258);
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  v19 = v13;
                                }
                                v16 = v26;
                              }
                              else
                              {
                                v16 = v26;
                                v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

