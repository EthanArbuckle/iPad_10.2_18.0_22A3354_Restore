void sub_1000A030C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000A7200(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A0330(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100181FF8);
  sub_1000A7200(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000A0370(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B15A8((uint64_t)a1, a2);
  *a1 = off_100182150;
  a1[45] = &off_100182250;
  a1[46] = &off_100182278;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100182150;
  a1[45] = off_1001821D8;
  a1[46] = off_100182200;
  return a1;
}

void sub_1000A03F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000A77EC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A0418(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100182218);
  sub_1000A77EC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000A0458(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B1804((uint64_t)a1, a2);
  *a1 = off_100182370;
  a1[45] = &off_100182470;
  a1[46] = &off_100182498;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100182370;
  a1[45] = off_1001823F8;
  a1[46] = off_100182420;
  return a1;
}

void sub_1000A04DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000A8F40(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A0500(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100182438);
  sub_1000A8F40(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000A0540(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B1880((uint64_t)a1, a2);
  *a1 = off_100182590;
  a1[45] = &off_100182690;
  a1[46] = &off_1001826B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100182590;
  a1[45] = off_100182618;
  a1[46] = off_100182640;
  return a1;
}

void sub_1000A05C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000A952C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A05E8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100182658);
  sub_1000A952C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000A0628(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v6[6];
  __int128 v7;
  int v8;
  void **v9[45];
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_100180A68;
  *(_QWORD *)&v7 = "DiskImageSparseBundle::~DiskImageSparseBundle()";
  *((_QWORD *)&v7 + 1) = 45;
  v8 = 0;
  sub_1000A07AC(v9, &v7);
  sub_100005A0C(&v10, (uint64_t)"Closing bands", 13);
  std::ostream::~ostream(&v10, off_100182878);
  sub_1000A9B18((uint64_t)v9);
  std::ios::~ios(&v11);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = 8;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 712) + v4))
      {
        v6[0] = _NSConcreteStackBlock;
        v6[1] = 0x40000000;
        v6[2] = sub_1000A0894;
        v6[3] = &unk_100180B80;
        v6[4] = a1;
        v6[5] = v3;
        sub_1000419EC((dispatch_group_t *)(a1 + 416), v6);
        v2 = *(_QWORD *)(a1 + 16);
      }
      ++v3;
      v4 += 24;
    }
    while (v3 < v2);
  }
  sub_100041B00(a1 + 416, 0xFFFFFFFFFFFFFFFFLL);
  v9[0] = (void **)(a1 + 712);
  sub_1000A3F6C(v9);
  v9[0] = (void **)(a1 + 664);
  sub_10001A2E4(v9);
  if (*(char *)(a1 + 663) < 0)
    operator delete(*(void **)(a1 + 640));
  std::mutex::~mutex((std::mutex *)(a1 + 576));
  sub_100012168(a1 + 560);
  sub_1000A3FDC(a1 + 24);
  return a1;
}

_QWORD *sub_1000A07AC(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B18FC((uint64_t)a1, a2);
  *a1 = off_1001827B0;
  a1[45] = &off_1001828B0;
  a1[46] = &off_1001828D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001827B0;
  a1[45] = off_100182838;
  a1[46] = off_100182860;
  return a1;
}

void sub_1000A0830(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000A9B18(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A0854(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100182878);
  sub_1000A9B18(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_1000A0894(uint64_t a1)
{
  __int128 v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v2 = "DiskImageSparseBundle::~DiskImageSparseBundle()_block_invoke";
    *((_QWORD *)&v2 + 1) = 45;
    v3 = 2;
    sub_1000A0A40(&v4, &v2);
    sub_100005A0C(&v5, (uint64_t)"Background close of band at index ", 34);
    std::ostream::operator<<(&v5, *(_QWORD *)(a1 + 40));
    std::ostream::~ostream(&v5, off_100182A98);
    sub_1000AA104((uint64_t)&v4);
    std::ios::~ios(&v6);
  }
  operator new();
}

void sub_1000A0A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000A0BD0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000A0A40(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B1978((uint64_t)a1, a2);
  *a1 = off_1001829D0;
  a1[45] = &off_100182AD0;
  a1[46] = &off_100182AF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001829D0;
  a1[45] = off_100182A58;
  a1[46] = off_100182A80;
  return a1;
}

void sub_1000A0AC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000AA104(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A0AE8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100182A98);
  sub_1000AA104(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000A0B28(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B19F4((uint64_t)a1, a2);
  *a1 = off_100182BF0;
  a1[45] = &off_100182CF0;
  a1[46] = &off_100182D18;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100182BF0;
  a1[45] = off_100182C78;
  a1[46] = off_100182CA0;
  return a1;
}

void sub_1000A0BAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000AA6F0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A0BD0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100182CB8);
  sub_1000AA6F0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_1000A0C14(uint64_t a1)
{
  sub_1000A0628(a1);
  operator delete();
}

uint64_t sub_1000A0C38(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  char v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v66;
  char v69[8];
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  __int128 v72;
  int v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  size_t v79;
  unint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  void *__p;
  uint64_t v85;
  uint64_t v86;
  _BYTE v87[72];
  std::__shared_weak_count *v88;
  uint64_t v89;
  _QWORD v90[7];
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;

  v7 = 0;
  v8 = *(_QWORD *)(a1 + 64);
  v10 = a4[2];
  v9 = a4[3];
  v11 = v9 / v8;
  v66 = v8;
  v12 = v9 % v8;
  while (v10)
  {
    if (v10 >= v66 - v12)
      v13 = v66 - v12;
    else
      v13 = v10;
    v14 = a4[4];
    v15 = (std::__shared_weak_count *)a4[1];
    v77 = *a4 + v7;
    v78 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v79 = v13;
    v80 = v12;
    v81 = v14 - v7;
    v82 = 0;
    sub_10009F4A0(a1, v11, a3, (uint64_t)&v75);
    v18 = v76;
    if (!v76)
    {
      if (sub_1000BF0D4())
      {
        *(_QWORD *)&v72 = "DiskImageSparseBundle::perform_io(ContextSparseBundle &, BOOL, const sg_entry &)";
        *((_QWORD *)&v72 + 1) = 33;
        v73 = 2;
        sub_1000A15C0(&v83, &v72);
        sub_100005A0C(&v89, (uint64_t)"Band ", 5);
        *(_DWORD *)((char *)v90 + *(_QWORD *)(v89 - 24)) = *(_DWORD *)((_BYTE *)v90 + *(_QWORD *)(v89 - 24)) & 0xFFFFFFB5 | 8;
        std::ostream::operator<<(&v89, v11);
        *(_DWORD *)((char *)v90 + *(_QWORD *)(v89 - 24)) = *(_DWORD *)((_BYTE *)v90 + *(_QWORD *)(v89 - 24)) & 0xFFFFFFB5 | 2;
        sub_100005A0C(&v89, (uint64_t)" doesn't exist, returning zeros", 31);
        std::ostream::~ostream(&v89, off_100182ED8);
        sub_1000AACDC((uint64_t)&v83);
        std::ios::~ios(v90);
      }
      bzero((void *)(*a4 + v7), v13);
      goto LABEL_92;
    }
    v19 = *(_QWORD *)(v75 + 24);
    if (!*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * v19))
      goto LABEL_13;
    if (sub_1000A1534(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * v19)))
    {
      v18 = v76;
LABEL_13:
      sub_10007739C(v18, &v83);
    }
    sub_10002E7FC(&v77, &v83);
    v20 = *(_QWORD **)(*(_QWORD *)(a2 + 16) + 16 * v19);
    if (a3)
    {
      sub_10002CA7C((uint64_t)v87, (uint64_t)&v72);
      sub_10002C64C((uint64_t)v87, (uint64_t)v69);
      v4 = sub_100013598(v20);
      v21 = v71;
      if (v71)
      {
        v22 = (unint64_t *)&v71->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = v70;
      if (v70)
      {
        v25 = (unint64_t *)&v70->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = v74;
      if (v74)
      {
        v28 = (unint64_t *)&v74->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
      if (*((_QWORD *)&v72 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        goto LABEL_55;
      }
    }
    else
    {
      sub_10002CA7C((uint64_t)v87, (uint64_t)&v72);
      sub_10002C64C((uint64_t)v87, (uint64_t)v69);
      v4 = sub_1000134D4((uint64_t)v20);
      v33 = v71;
      if (v71)
      {
        v34 = (unint64_t *)&v71->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = v70;
      if (v70)
      {
        v37 = (unint64_t *)&v70->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = v74;
      if (v74)
      {
        v40 = (unint64_t *)&v74->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
      if (*((_QWORD *)&v72 + 1))
      {
        v42 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
        do
          v32 = __ldaxr(v42);
        while (__stlxr(v32 - 1, v42));
LABEL_55:
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
    v43 = v94;
    if (v94)
    {
      v44 = (unint64_t *)&v94->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = v93;
    if (v93)
    {
      v47 = (unint64_t *)&v93->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = v92;
    if (v92)
    {
      v50 = (unint64_t *)&v92->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = v91;
    if (v91)
    {
      v53 = (unint64_t *)&v91->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = (std::__shared_weak_count *)v90[0];
    if (v90[0])
    {
      v56 = (unint64_t *)(v90[0] + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = v88;
    if (v88)
    {
      v59 = (unint64_t *)&v88->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (v85 && &v86 != __p)
      operator delete(__p);
    sub_100015C2C((uint64_t)&v83);
    if (v4 == v13)
    {
      v4 = v13;
LABEL_92:
      v12 = 0;
      v10 -= v13;
      v7 += v13;
      ++v11;
      v61 = 1;
      goto LABEL_94;
    }
    v61 = 0;
LABEL_94:
    sub_100077734((uint64_t)&v75);
    v62 = v78;
    if (v78)
    {
      v63 = (unint64_t *)&v78->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    if ((v61 & 1) == 0)
      return v4;
  }
  return a4[2];
}

void sub_1000A12BC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,__int128 a39,int a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t v67;
  unsigned int *v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  size_t v74;

  if (a2)
  {
    sub_100077734((uint64_t)&a58);
    sub_100012168((uint64_t)&a61);
    if (a2 == 2)
    {
      v70 = (unsigned int *)__cxa_begin_catch(a1);
      *(_QWORD *)&a39 = "DiskImageSparseBundle::perform_io(ContextSparseBundle &, BOOL, const sg_entry &)";
      *((_QWORD *)&a39 + 1) = 33;
      a40 = 16;
      sub_1000A16A8(&a67, &a39);
      if (a18)
        v71 = "Write error: ";
      else
        v71 = "Read error: ";
      if (a18)
        v72 = 13;
      else
        v72 = 12;
      sub_100005A0C(&STACK[0x338], (uint64_t)v71, v72);
      v73 = (const char *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v70 + 16))(v70);
      v74 = strlen(v73);
      sub_100005A0C(&STACK[0x338], (uint64_t)v73, v74);
      sub_100005A0C(&STACK[0x338], (uint64_t)" (band ", 7);
      *(_DWORD *)((char *)&STACK[0x338] + *(_QWORD *)(STACK[0x338] - 24) + 8) = *(_DWORD *)((_BYTE *)&STACK[0x338]
                                                                                          + *(_QWORD *)(STACK[0x338] - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<(&STACK[0x338], v67);
      *(_DWORD *)((char *)&STACK[0x338] + *(_QWORD *)(STACK[0x338] - 24) + 8) = *(_DWORD *)((_BYTE *)&STACK[0x338]
                                                                                          + *(_QWORD *)(STACK[0x338] - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 2;
      sub_100005A0C(&STACK[0x338], (uint64_t)", err ", 6);
      std::ostream::operator<<(&STACK[0x338], v70[2]);
      sub_100005A0C(&STACK[0x338], (uint64_t)")", 1);
      sub_1000A1750((uint64_t)&a67);
      __cxa_end_catch();
      JUMPOUT(0x1000A1278);
    }
    sub_1000054BC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000A1524(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1000A1514);
  JUMPOUT(0x1000A13C0);
}

uint64_t sub_1000A1534(uint64_t a1)
{
  uint64_t result;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    if (result)
    {
      v3 = *(std::__shared_weak_count **)(a1 + 24);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      return 1;
    }
  }
  return result;
}

_QWORD *sub_1000A15C0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B1A70((uint64_t)a1, a2);
  *a1 = off_100182E10;
  a1[45] = &off_100182F10;
  a1[46] = &off_100182F38;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100182E10;
  a1[45] = off_100182E98;
  a1[46] = off_100182EC0;
  return a1;
}

void sub_1000A1644(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000AACDC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A1668(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100182ED8);
  sub_1000AACDC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000A16A8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B1AEC((uint64_t)a1, a2);
  *a1 = off_100183030;
  a1[45] = &off_100183130;
  a1[46] = &off_100183158;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100183030;
  a1[45] = off_1001830B8;
  a1[46] = off_1001830E0;
  return a1;
}

void sub_1000A172C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000AB2C8(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A1750(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001830F8);
  sub_1000AB2C8(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000A1790(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  _QWORD v5[2];
  unsigned int v6;
  _QWORD **v7;
  _QWORD *v8;

  v6 = 0;
  v2 = (unint64_t *)(a1 + 704);
  v5[0] = a1;
  v5[1] = &v6;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v8 = v5;
    v7 = &v8;
    std::__call_once(v2, &v7, (void (__cdecl *)(void *))sub_1000B1B68);
  }
  return v6;
}

uint64_t sub_1000A17EC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1000A1790(a1);
  if (v6)
  {
    if (v6 >= 0)
      v7 = v6;
    else
      v7 = -v6;
    return -v7;
  }
  else
  {
    v9 = sub_1000A0C38(a1, a2, 1, a3);
    v8 = v9;
    if (v9 < 0 && (_DWORD)v9)
      sub_1000A1868(a2);
  }
  return v8;
}

uint64_t sub_1000A1868(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  int v4;
  _QWORD v5[45];
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v3 = "DiskImage::terminate()";
  *((_QWORD *)&v3 + 1) = 20;
  v4 = 16;
  sub_1000AB6C0(v5, &v3);
  sub_100005A0C(&v6, (uint64_t)"Encountered an inrecoverable I/O error, all future I/Os will be invalidated", 75);
  std::ostream::~ostream(&v6, off_100183318);
  sub_1000AB824((uint64_t)v5);
  std::ios::~ios(&v7);
  atomic_store(1u, (unsigned __int8 *)(v1 + 8));
  return sub_10012086C();
}

void sub_1000A1904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  uint64_t v58;

  std::ostream::~ostream(v58, off_100183318);
  sub_1000AB824((uint64_t)&a12);
  std::ios::~ios(&a58);
  _Unwind_Resume(a1);
}

unint64_t sub_1000A1934(_QWORD **a1)
{
  unint64_t v2;
  void *exception;
  void *v5;

  v2 = (*(uint64_t (**)(_QWORD *))(*a1[70] + 40))(a1[70]);
  if (v2 % ((uint64_t (*)(_QWORD **))(*a1)[3])(a1))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v5 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Size is not a multiple of block size", 0x16u);
  }
  return v2 / ((uint64_t (*)(_QWORD **))(*a1)[3])(a1);
}

uint64_t sub_1000A19C0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _BOOL8 v8;
  _BYTE v10[8];
  uint64_t v11;

  sub_10007780C(v10, *(_QWORD *)(a1 + 712) + 24 * a2);
  v8 = v11 != 0;
  if (v11 && sub_1000762D8(v11, a4))
  {
    sub_100077734((uint64_t)v10);
    return sub_10007802C(*(_QWORD *)(a1 + 712) + 24 * a2, a3);
  }
  else
  {
    sub_100077734((uint64_t)v10);
  }
  return v8;
}

void sub_1000A1A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100077734((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A1A74(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[152];

  v6 = a1 + 208;
  v7 = sub_10003EB68(a1 + 208, a2);
  if ((_DWORD)v7)
  {
    v8 = a1 + 24;
    if (sub_1000B23DC(a3) != *(_QWORD *)(a1 + 64))
    {
      if (sub_1000BF0D4())
      {
        *(_QWORD *)&v10 = "DiskImageSparseBundle::try_unmap_band_extents_without_list(uint64_t, const extents_set_t &)";
        *((_QWORD *)&v10 + 1) = 58;
        v11 = 2;
        sub_1000A1F40(&v12, &v10);
        sub_100005A0C(&v13, (uint64_t)"Unmapping band ", 15);
        *(_DWORD *)&v14[*(_QWORD *)(v13 - 24)] = *(_DWORD *)&v14[*(_QWORD *)(v13 - 24)] & 0xFFFFFFB5 | 8;
        std::ostream::operator<<(&v13, a2);
        *(_DWORD *)&v14[*(_QWORD *)(v13 - 24)] = *(_DWORD *)&v14[*(_QWORD *)(v13 - 24)] & 0xFFFFFFB5 | 2;
        sub_100005A0C(&v13, (uint64_t)" directly (without list)", 24);
        std::ostream::~ostream(&v13, off_100183758);
        sub_1000AC5F0((uint64_t)&v12);
        std::ios::~ios(v14);
      }
      sub_10011BE68((uint64_t)&v12, v8, a2);
    }
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v10 = "DiskImageSparseBundle::try_unmap_band_extents_without_list(uint64_t, const extents_set_t &)";
      *((_QWORD *)&v10 + 1) = 58;
      v11 = 2;
      sub_1000A1E58(&v12, &v10);
      sub_100005A0C(&v13, (uint64_t)"Unmapping band ", 15);
      *(_DWORD *)&v14[*(_QWORD *)(v13 - 24)] = *(_DWORD *)&v14[*(_QWORD *)(v13 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<(&v13, a2);
      *(_DWORD *)&v14[*(_QWORD *)(v13 - 24)] = *(_DWORD *)&v14[*(_QWORD *)(v13 - 24)] & 0xFFFFFFB5 | 2;
      sub_100005A0C(&v13, (uint64_t)" completely", 11);
      std::ostream::~ostream(&v13, off_100183538);
      sub_1000AC004((uint64_t)&v12);
      std::ios::~ios(v14);
    }
    sub_1000765AC(v8, a2);
    sub_10003F07C(v6, a2);
  }
  return v7;
}

void sub_1000A1D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *exception;

  if (a2 == 1)
  {
    v16 = __cxa_begin_catch(exception_object);
    sub_10003F07C(v15, v14);
    exception = __cxa_allocate_exception(0x40uLL);
    sub_1000A2028((uint64_t)exception, (uint64_t)v16);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000A1E58(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B24C4((uint64_t)a1, a2);
  *a1 = off_100183470;
  a1[45] = &off_100183570;
  a1[46] = &off_100183598;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100183470;
  a1[45] = off_1001834F8;
  a1[46] = off_100183520;
  return a1;
}

void sub_1000A1EDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000AC004(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A1F00(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100183538);
  sub_1000AC004(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000A1F40(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B2540((uint64_t)a1, a2);
  *a1 = off_100183690;
  a1[45] = &off_100183790;
  a1[46] = &off_1001837B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100183690;
  a1[45] = off_100183718;
  a1[46] = off_100183740;
  return a1;
}

void sub_1000A1FC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000AC5F0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A1FE8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100183758);
  sub_1000AC5F0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000A2028(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1001924F8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_1000AC9E8(a1 + 24, (__int128 *)(a2 + 24));
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

void sub_1000A2074(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A2088(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;

  do
  {
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 16);
      if (!v6)
        break;
      v7 = 0;
      v8 = (uint64_t *)(*(_QWORD *)(a1 + 712) + 16);
      while (1)
      {
        v9 = *v8;
        v8 += 3;
        if (v9 == a2)
          break;
        if (v6 == ++v7)
          goto LABEL_9;
      }
      if (v7 < 0)
        break;
      result = sub_1000A19C0(a1, v7, a2, a3);
      if ((result & 1) != 0)
        return result;
      usleep(0x3E8u);
    }
LABEL_9:
    result = sub_1000A1A74(a1, a2, a3);
  }
  while (!(_DWORD)result);
  return result;
}

uint64_t sub_1000A211C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v23;
  _QWORD v24[8];
  __int128 v25;
  int v26;
  uint64_t *v27;
  _QWORD *v28[2];
  unsigned int v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  _QWORD *(*v33)(_QWORD *, _QWORD *);
  void (*v34)(uint64_t);
  _QWORD *v35[40];
  uint64_t v36;
  _BYTE v37[152];
  __int128 v38;
  int v39;

  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v38 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
    *((_QWORD *)&v38 + 1) = 32;
    v39 = 2;
    sub_1000A285C(&v30, &v38);
    sub_100005A0C(&v36, (uint64_t)"Starting unmap of ", 18);
    std::ostream::operator<<(&v36, a4);
    sub_100005A0C(&v36, (uint64_t)" extents", 8);
    std::ostream::~ostream(&v36, off_100183978);
    sub_1000ACC7C((uint64_t)&v30);
    std::ios::~ios(v37);
  }
  v6 = a1[8];
  v29 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v27 = (uint64_t *)v28;
  if (a1[43])
  {
    v7 = sub_1000A1790((uint64_t)a1);
    if (!(_DWORD)v7)
    {
      sub_100041BCC((uint64_t)(a1 + 80), 0, (uint64_t)&v38);
      if (a4)
      {
        v8 = 0;
        v9 = 0;
        v21 = a3;
        do
        {
          v10 = *(_QWORD *)(a3 + 16 * v8);
          v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
          v23 = v8;
          v12 = *(_QWORD *)(a3 + 16 * v8 + 8);
          v13 = v11 * v10;
          v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1) * v12;
          if (sub_1000BF0D4())
          {
            *(_QWORD *)&v25 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
            *((_QWORD *)&v25 + 1) = 32;
            v26 = 2;
            sub_1000A2A2C(&v30, &v25);
            sub_100005A0C(&v36, (uint64_t)"Extent ", 7);
            std::ostream::operator<<(&v36, v23);
            sub_100005A0C(&v36, (uint64_t)": [", 3);
            v15 = v36;
            *(_DWORD *)&v37[*(_QWORD *)(v36 - 24)] |= 0x200u;
            *(_DWORD *)&v37[*(_QWORD *)(v15 - 24)] = *(_DWORD *)&v37[*(_QWORD *)(v15 - 24)] & 0xFFFFFFB5 | 8;
            std::ostream::operator<<(&v36, v13);
            sub_100005A0C(&v36, (uint64_t)"-", 1);
            std::ostream::operator<<(&v36, v13 + v14 - 1);
            sub_100005A0C(&v36, (uint64_t)"]", 1);
            v16 = v36;
            *(_DWORD *)&v37[*(_QWORD *)(v36 - 24)] &= ~0x200u;
            *(_DWORD *)&v37[*(_QWORD *)(v16 - 24)] = *(_DWORD *)&v37[*(_QWORD *)(v16 - 24)] & 0xFFFFFFB5 | 2;
            std::ostream::~ostream(&v36, off_100183DB8);
            sub_1000AD854((uint64_t)&v30);
            std::ios::~ios(v37);
          }
          if (v14)
          {
            v17 = v13 / v6;
            v18 = v13 % v6;
            do
            {
              if (v17 != v9 && v27 != (uint64_t *)v28)
              {
                v30 = 0;
                v31 = &v30;
                v32 = 0x4002000000;
                v33 = sub_1000A2B14;
                v34 = sub_1000A2B50;
                sub_1000B2730((uint64_t)v35, (uint64_t)&v27);
                v24[0] = _NSConcreteStackBlock;
                v24[1] = 0x40000000;
                v24[2] = sub_1000A2B60;
                v24[3] = &unk_100180BA8;
                v24[4] = &v30;
                v24[5] = a1;
                v24[6] = v9;
                v24[7] = &v29;
                sub_1000419EC((dispatch_group_t *)&v38, v24);
                sub_1000B2910(&v27, v27, (uint64_t *)v28);
                _Block_object_dispose(&v30, 8);
                sub_100027D5C((uint64_t)v35, v35[1]);
              }
              if (v14 >= v6 - v18)
                v19 = v6 - v18;
              else
                v19 = v14;
              if (sub_100094914(a1[43], v17))
              {
                v30 = v18;
                v31 = (unint64_t *)(v19 + v18);
                LOBYTE(v32) = 2;
                sub_1000B296C(&v27, (uint64_t)&v30);
                v9 = v17;
              }
              v18 = 0;
              ++v17;
              v14 -= v19;
            }
            while (v14);
          }
          v8 = v23 + 1;
          a3 = v21;
        }
        while (v23 + 1 != a4);
      }
      else
      {
        v9 = 0;
      }
      if (v27 != (uint64_t *)v28)
        sub_1000A2088((uint64_t)a1, v9, &v27);
      sub_100041B4C(&v38);
      if (sub_1000BF0D4())
      {
        *(_QWORD *)&v38 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
        *((_QWORD *)&v38 + 1) = 32;
        v39 = 2;
        sub_1000A2ED0(&v30, &v38);
        sub_100005A0C(&v36, (uint64_t)"Unmap done", 10);
        std::ostream::~ostream(&v36, off_100184418);
        sub_1000AEA18((uint64_t)&v30);
        std::ios::~ios(v37);
      }
      v7 = atomic_load(&v29);
    }
  }
  else
  {
    *(_QWORD *)&v38 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
    *((_QWORD *)&v38 + 1) = 32;
    v39 = 16;
    sub_1000A2944(&v30, &v38);
    sub_100005A0C(&v36, (uint64_t)"Unexpected unmap command received on read only image", 52);
    std::ostream::~ostream(&v36, off_100183B98);
    sub_1000AD268((uint64_t)&v30);
    std::ios::~ios(v37);
    v7 = 4294967277;
  }
  sub_100027D5C((uint64_t)&v27, v28[0]);
  return v7;
}

void sub_1000A263C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,_QWORD *a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_1000A2F78((uint64_t)&a30);
  sub_100027D5C((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000A285C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B25BC((uint64_t)a1, a2);
  *a1 = off_1001838B0;
  a1[45] = &off_1001839B0;
  a1[46] = &off_1001839D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001838B0;
  a1[45] = off_100183938;
  a1[46] = off_100183960;
  return a1;
}

void sub_1000A28E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000ACC7C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A2904(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100183978);
  sub_1000ACC7C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000A2944(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B2638((uint64_t)a1, a2);
  *a1 = off_100183AD0;
  a1[45] = &off_100183BD0;
  a1[46] = &off_100183BF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100183AD0;
  a1[45] = off_100183B58;
  a1[46] = off_100183B80;
  return a1;
}

void sub_1000A29C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000AD268(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A29EC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100183B98);
  sub_1000AD268(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000A2A2C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B26B4((uint64_t)a1, a2);
  *a1 = off_100183CF0;
  a1[45] = &off_100183DF0;
  a1[46] = &off_100183E18;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100183CF0;
  a1[45] = off_100183D78;
  a1[46] = off_100183DA0;
  return a1;
}

void sub_1000A2AB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000AD854(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A2AD4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100183DB8);
  sub_1000AD854(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000A2B14(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = a2[5];
  v2 = a2 + 6;
  v3 = a2[6];
  result[6] = v3;
  v4 = result + 6;
  v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[5] = v2;
    *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void sub_1000A2B50(uint64_t a1)
{
  sub_100027D5C(a1 + 40, *(_QWORD **)(a1 + 48));
}

uint64_t sub_1000A2B60(_QWORD *a1)
{
  return sub_1000A2088(a1[5], a1[6], (_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40));
}

_QWORD *sub_1000A2D00(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B2894((uint64_t)a1, a2);
  *a1 = off_100183F10;
  a1[45] = &off_100184010;
  a1[46] = &off_100184038;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100183F10;
  a1[45] = off_100183F98;
  a1[46] = off_100183FC0;
  return a1;
}

void sub_1000A2D84(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000ADE40(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A2DA8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100183FD8);
  sub_1000ADE40(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000A2DE8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B318C((uint64_t)a1, a2);
  *a1 = off_100184130;
  a1[45] = &off_100184230;
  a1[46] = &off_100184258;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100184130;
  a1[45] = off_1001841B8;
  a1[46] = off_1001841E0;
  return a1;
}

void sub_1000A2E6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000AE42C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A2E90(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001841F8);
  sub_1000AE42C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000A2ED0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B3208((uint64_t)a1, a2);
  *a1 = off_100184350;
  a1[45] = &off_100184450;
  a1[46] = &off_100184478;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100184350;
  a1[45] = off_1001843D8;
  a1[46] = off_100184400;
  return a1;
}

void sub_1000A2F54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000AEA18(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A2F78(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100184418);
  sub_1000AEA18(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000A2FB8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE v5[24];
  __int128 v6;
  int v7;
  _QWORD v8[45];
  uint64_t v9;
  _BYTE v10[152];

  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v6 = "void DiskImageSparseBundle::on_eject()";
    *((_QWORD *)&v6 + 1) = 36;
    v7 = 2;
    sub_1000A3118(v8, &v6);
    sub_100005A0C(&v9, (uint64_t)"Evicting all bands for eject", 28);
    std::ostream::~ostream(&v9, off_100184638);
    sub_1000AF004((uint64_t)v8);
    std::ios::~ios(v10);
  }
  if (*(_QWORD *)(a1 + 16))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      sub_100077878((std::chrono::steady_clock::time_point **)(*(_QWORD *)(a1 + 712) + v2), 0, (uint64_t)v5);
      sub_100077734((uint64_t)v5);
      ++v3;
      v2 += 24;
    }
    while (v3 < *(_QWORD *)(a1 + 16));
  }
  sub_100041B00(a1 + 416, 0xFFFFFFFFFFFFFFFFLL);
  *(_QWORD *)&v6 = "void DiskImageSparseBundle::on_eject()";
  *((_QWORD *)&v6 + 1) = 36;
  v7 = 0;
  sub_1000A3200(v8, &v6);
  sub_100005A0C(&v9, (uint64_t)"Sparse bundle ejected", 21);
  std::ostream::~ostream(&v9, off_100184858);
  sub_1000AF5F0((uint64_t)v8);
  return std::ios::~ios(v10);
}

void sub_1000A30F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_1000A31C0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000A3118(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B3284((uint64_t)a1, a2);
  *a1 = off_100184570;
  a1[45] = &off_100184670;
  a1[46] = &off_100184698;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100184570;
  a1[45] = off_1001845F8;
  a1[46] = off_100184620;
  return a1;
}

void sub_1000A319C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000AF004(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A31C0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100184638);
  sub_1000AF004(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000A3200(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B3300((uint64_t)a1, a2);
  *a1 = off_100184790;
  a1[45] = &off_100184890;
  a1[46] = &off_1001848B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100184790;
  a1[45] = off_100184818;
  a1[46] = off_100184840;
  return a1;
}

void sub_1000A3284(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000AF5F0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A32A8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100184858);
  sub_1000AF5F0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000A32E8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  __int128 v6;
  int v7;
  _QWORD v8[45];
  uint64_t v9;
  uint64_t v10;

  result = sub_1000A3408(a1, a2);
  if (!(_DWORD)result)
  {
    v5 = (a2 + 4095) & 0xFFFFFFFFFFFFF000;
    if (v5 < 0x200000000000001)
    {
      return (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 560) + 56))(*(_QWORD *)(a1 + 560), v5);
    }
    else
    {
      *(_QWORD *)&v6 = "int DiskImageSparseBundle::set_size(uint64_t)";
      *((_QWORD *)&v6 + 1) = 35;
      v7 = 16;
      sub_1000A3528(v8, &v6);
      std::ostream::operator<<(&v9, v5);
      sub_100005A0C(&v9, (uint64_t)" bytes are above the sparsebundle limit of ", 43);
      std::ostream::operator<<(&v9, 0x200000000000000);
      sub_100005A0C(&v9, (uint64_t)" bytes", 6);
      std::ostream::~ostream(&v9, off_100184A78);
      sub_1000AFBDC((uint64_t)v8);
      std::ios::~ios(&v10);
      return 4294967269;
    }
  }
  return result;
}

void sub_1000A33F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000A35D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3408(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) * v4;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v7 = (a2 + v6 - 1) / v6 * v6;
  if (v5 <= v7)
    return 0;
  v11[0] = v7 / (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v11[1] = (v5 - v7) / (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 184))(a1, v8, v11, 1);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  return v9;
}

void sub_1000A3508(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000A3528(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B337C((uint64_t)a1, a2);
  *a1 = off_1001849B0;
  a1[45] = &off_100184AB0;
  a1[46] = &off_100184AD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001849B0;
  a1[45] = off_100184A38;
  a1[46] = off_100184A60;
  return a1;
}

void sub_1000A35AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000AFBDC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A35D0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100184A78);
  sub_1000AFBDC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000A3618(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_1000A3620(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 560) + 48))(*(_QWORD *)(a1 + 560));
}

void sub_1000A3630()
{
  operator new();
}

void sub_1000A368C()
{
  operator delete();
}

uint64_t sub_1000A36B0()
{
  return 1;
}

void sub_1000A36B8()
{
  operator new();
}

void sub_1000A36FC()
{
  operator delete();
}

uint64_t sub_1000A3720(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return sub_1000A0C38(a1, a2, 0, a3);
}

uint64_t sub_1000A372C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1000A37A0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000A37A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 24;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 24;
    sub_10007780C(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_1000A3830(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_100077734(i - 24);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1000A387C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100017E44();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100051F8C(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v16 = &v10[24 * v9];
  sub_100077810((uint64_t)v14, a2);
  v15 = v14 + 24;
  sub_1000A372C(a1, &v13);
  v11 = a1[1];
  sub_1000A3830((uint64_t)&v13);
  return v11;
}

void sub_1000A396C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000A3830((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3980(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100180CD8);
  sub_1000A3B74(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A39B8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100180CD8);
  sub_1000A3B74(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A39F8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100180CD8);
  sub_1000A3B74(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000A3A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000A3A80(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000A3ACC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100180CD8);
  sub_1000A3B74(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000A3B1C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100180CD8);
  sub_1000A3B74(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000A3B74(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100180DA8;
  sub_1000A3C10(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A3C10(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000A3D88((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000A3D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000A3D64(uint64_t a1)
{
  sub_1000A3B74(a1);
  operator delete();
}

int *sub_1000A3D88(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 46;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 46;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void sub_1000A3F6C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_100077734(v4 - 24);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1000A3FDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;

  sub_100041B4C(a1 + 392);
  v6 = (void **)(a1 + 352);
  sub_10001A2E4(&v6);
  if (*(char *)(a1 + 351) < 0)
    operator delete(*(void **)(a1 + 328));
  v2 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 320) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 272));
  std::mutex::~mutex((std::mutex *)(a1 + 208));
  sub_100027D5C(a1 + 184, *(_QWORD **)(a1 + 192));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 136));
  std::mutex::~mutex((std::mutex *)(a1 + 64));
  sub_100012168(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return a1;
}

uint64_t sub_1000A40AC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100180EF8);
  sub_1000A42A0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A40E4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100180EF8);
  sub_1000A42A0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A4124(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100180EF8);
  sub_1000A42A0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000A4178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000A41AC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000A41F8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100180EF8);
  sub_1000A42A0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000A4248(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100180EF8);
  sub_1000A42A0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000A42A0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100180FC8;
  sub_1000A433C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A433C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000A44B4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000A4464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000A4490(uint64_t a1)
{
  sub_1000A42A0(a1);
  operator delete();
}

int *sub_1000A44B4(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 59;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 59;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000A4698(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181118);
  sub_1000A488C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A46D0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100181118);
  sub_1000A488C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A4710(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100181118);
  sub_1000A488C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000A4764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000A4798(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000A47E4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181118);
  sub_1000A488C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000A4834(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100181118);
  sub_1000A488C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000A488C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001811E8;
  sub_1000A4928(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A4928(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000A4AA0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000A4A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000A4A7C(uint64_t a1)
{
  sub_1000A488C(a1);
  operator delete();
}

int *sub_1000A4AA0(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 80;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 80;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000A4C84(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181338);
  sub_1000A4E78(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A4CBC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100181338);
  sub_1000A4E78(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A4CFC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100181338);
  sub_1000A4E78(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000A4D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000A4D84(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000A4DD0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181338);
  sub_1000A4E78(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000A4E20(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100181338);
  sub_1000A4E78(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000A4E78(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100181408;
  sub_1000A4F14(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A4F14(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000A508C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000A503C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000A5068(uint64_t a1)
{
  sub_1000A4E78(a1);
  operator delete();
}

int *sub_1000A508C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 101;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 101;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000A5270(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181558);
  sub_1000A5464(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A52A8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100181558);
  sub_1000A5464(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A52E8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100181558);
  sub_1000A5464(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000A533C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000A5370(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000A53BC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181558);
  sub_1000A5464(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000A540C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100181558);
  sub_1000A5464(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000A5464(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100181628;
  sub_1000A5500(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A5500(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000A5678((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000A5628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000A5654(uint64_t a1)
{
  sub_1000A5464(a1);
  operator delete();
}

int *sub_1000A5678(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 107;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 107;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000A585C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181778);
  sub_1000A5A50(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A5894(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100181778);
  sub_1000A5A50(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A58D4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100181778);
  sub_1000A5A50(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000A5928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000A595C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000A59A8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181778);
  sub_1000A5A50(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000A59F8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100181778);
  sub_1000A5A50(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000A5A50(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100181848;
  sub_1000A5AEC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A5AEC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000A5C64((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000A5C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000A5C40(uint64_t a1)
{
  sub_1000A5A50(a1);
  operator delete();
}

int *sub_1000A5C64(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 111;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 111;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000A5E48(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181998);
  sub_1000A603C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A5E80(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100181998);
  sub_1000A603C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A5EC0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100181998);
  sub_1000A603C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000A5F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000A5F48(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000A5F94(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181998);
  sub_1000A603C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000A5FE4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100181998);
  sub_1000A603C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000A603C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100181A68;
  sub_1000A60D8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A60D8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000A6250((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000A6200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000A622C(uint64_t a1)
{
  sub_1000A603C(a1);
  operator delete();
}

int *sub_1000A6250(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 154;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 154;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000A6434(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181BB8);
  sub_1000A6628(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A646C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100181BB8);
  sub_1000A6628(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A64AC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100181BB8);
  sub_1000A6628(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000A6500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000A6534(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000A6580(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181BB8);
  sub_1000A6628(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000A65D0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100181BB8);
  sub_1000A6628(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000A6628(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100181C88;
  sub_1000A66C4(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A66C4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000A683C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000A67EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000A6818(uint64_t a1)
{
  sub_1000A6628(a1);
  operator delete();
}

int *sub_1000A683C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 165;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 165;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000A6A20(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181DD8);
  sub_1000A6C14(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A6A58(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100181DD8);
  sub_1000A6C14(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A6A98(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100181DD8);
  sub_1000A6C14(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000A6AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000A6B20(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000A6B6C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181DD8);
  sub_1000A6C14(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000A6BBC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100181DD8);
  sub_1000A6C14(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000A6C14(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100181EA8;
  sub_1000A6CB0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A6CB0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000A6E28((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000A6DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000A6E04(uint64_t a1)
{
  sub_1000A6C14(a1);
  operator delete();
}

int *sub_1000A6E28(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 172;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 172;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000A700C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181FF8);
  sub_1000A7200(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A7044(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100181FF8);
  sub_1000A7200(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A7084(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100181FF8);
  sub_1000A7200(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000A70D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000A710C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000A7158(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181FF8);
  sub_1000A7200(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000A71A8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100181FF8);
  sub_1000A7200(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000A7200(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001820C8;
  sub_1000A729C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A729C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000A7414((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000A73C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000A73F0(uint64_t a1)
{
  sub_1000A7200(a1);
  operator delete();
}

int *sub_1000A7414(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 190;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 190;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000A75F8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182218);
  sub_1000A77EC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A7630(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100182218);
  sub_1000A77EC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A7670(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100182218);
  sub_1000A77EC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000A76C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000A76F8(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000A7744(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182218);
  sub_1000A77EC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000A7794(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100182218);
  sub_1000A77EC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000A77EC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001822E8;
  sub_1000A7888(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A7888(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000A7A00((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000A79B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000A79DC(uint64_t a1)
{
  sub_1000A77EC(a1);
  operator delete();
}

int *sub_1000A7A00(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 194;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 194;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000A7BE4(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t *v23;
  char v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v26 = *(a2 - 2);
        v27 = *v9;
        v28 = -1;
        if (v26 >= *v9)
          v28 = 1;
        if (v26 == *v9)
        {
          v29 = *(a2 - 1);
          v30 = v9[1];
          v31 = v29 >= v30;
          v32 = v29 == v30;
          v28 = -1;
          if (v31)
            v28 = 1;
          if (v32)
            v28 = 0;
        }
        if (v28 < 0)
        {
          v33 = v9[1];
          v34 = *(a2 - 1);
          *v9 = v26;
          v9[1] = v34;
          *(a2 - 2) = v27;
          *(a2 - 1) = v33;
        }
        return result;
      case 3uLL:
        return sub_1000A80C8(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return sub_1000A86EC(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return sub_1000A87F8(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)sub_1000A7F64(v9, a2);
          else
            return (uint64_t)sub_1000A8024(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            sub_1000A80C8(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_22;
          }
          else
          {
            sub_1000A80C8(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            sub_1000A80C8(v9 + 2, v15 - 2, a2 - 4);
            sub_1000A80C8(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            sub_1000A80C8(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_22;
          }
          v17 = *(v9 - 2);
          v18 = v17 == *v9;
          if (v17 >= *v9)
            v19 = 1;
          else
            v19 = -1;
          if (v18)
          {
            v20 = *(v9 - 1);
            v21 = v9[1];
            v22 = v20 == v21;
            v19 = v20 >= v21 ? 1 : -1;
            if (v22)
              v19 = 0;
          }
          if ((v19 & 0x80) == 0)
          {
            result = (uint64_t)sub_1000A821C(v9, a2);
            v9 = (uint64_t *)result;
            goto LABEL_27;
          }
LABEL_22:
          v23 = sub_1000A83A4(v9, a2);
          if ((v24 & 1) == 0)
            goto LABEL_25;
          v25 = sub_1000A850C(v9, v23);
          v9 = v23 + 2;
          result = sub_1000A850C(v23 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v25)
              continue;
LABEL_25:
            result = sub_1000A7BE4(v8, v23, a3, -v11, a5 & 1);
            v9 = v23 + 2;
LABEL_27:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v23;
          if (v25)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)sub_1000A8958((char *)v9, (char *)a2, (char *)a2, a3);
        return result;
    }
  }
}

uint64_t *sub_1000A7F64(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  BOOL v18;
  uint64_t *v19;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = v4[2];
        v7 = *v4;
        if (v6 >= *v4)
          v8 = 1;
        else
          v8 = -1;
        if (v6 == *v4)
        {
          v9 = v4[3];
          v10 = v4[1];
          v11 = v9 == v10;
          v8 = v9 >= v10 ? 1 : -1;
          if (v11)
            v8 = 0;
        }
        if (v8 < 0)
        {
          v12 = v4[3];
          v13 = v3;
          while (1)
          {
            v14 = (char *)result + v13;
            v15 = *(uint64_t *)((char *)result + v13 + 8);
            *((_QWORD *)v14 + 2) = v7;
            *((_QWORD *)v14 + 3) = v15;
            if (!v13)
              break;
            v7 = *((_QWORD *)v14 - 2);
            if (v6 >= v7)
              v16 = 1;
            else
              v16 = -1;
            if (v6 == v7)
            {
              v17 = *(uint64_t *)((char *)result + v13 - 8);
              v18 = v12 == v17;
              if (v12 >= v17)
                v16 = 1;
              else
                v16 = -1;
              if (v18)
                v16 = 0;
            }
            v13 -= 16;
            if ((v16 & 0x80) == 0)
            {
              v19 = (uint64_t *)((char *)result + v13 + 16);
              goto LABEL_28;
            }
          }
          v19 = result;
LABEL_28:
          *v19 = v6;
          v19[1] = v12;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t *sub_1000A8024(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  unint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t *v12;
  char v13;
  unint64_t v14;
  BOOL v15;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = (unint64_t *)(result + 3);
      do
      {
        v4 = v2;
        v5 = result[2];
        v6 = *result;
        if (v5 >= *result)
          v7 = 1;
        else
          v7 = -1;
        if (v5 == *result)
        {
          v8 = result[3];
          v9 = result[1];
          v10 = v8 == v9;
          v7 = v8 >= v9 ? 1 : -1;
          if (v10)
            v7 = 0;
        }
        if (v7 < 0)
        {
          v11 = result[3];
          v12 = v3;
          do
          {
            *(v12 - 1) = v6;
            *v12 = *(v12 - 2);
            v6 = *(v12 - 5);
            if (v5 >= v6)
              v13 = 1;
            else
              v13 = -1;
            if (v5 == v6)
            {
              v14 = *(v12 - 4);
              v15 = v11 == v14;
              if (v11 >= v14)
                v13 = 1;
              else
                v13 = -1;
              if (v15)
                v13 = 0;
            }
            v12 -= 2;
          }
          while (v13 < 0);
          *(v12 - 1) = v5;
          *v12 = v11;
        }
        v2 = v4 + 2;
        v3 += 2;
        result = v4;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1000A80C8(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char v16;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1)
    v5 = 1;
  else
    v5 = -1;
  if (*a2 == *a1)
  {
    v6 = a2[1];
    v7 = a1[1];
    v8 = v6 >= v7;
    v9 = v6 == v7;
    v10 = -1;
    if (v8)
      v10 = 1;
    if (v9)
      v5 = 0;
    else
      v5 = v10;
  }
  v11 = *a3;
  v12 = -1;
  if (*a3 >= v3)
    v12 = 1;
  if (v5 < 0)
  {
    if (v11 == v3)
    {
      v18 = a3[1];
      v19 = a2[1];
      v8 = v18 >= v19;
      v20 = v18 == v19;
      v12 = -1;
      if (v8)
        v12 = 1;
      if (v20)
        v12 = 0;
    }
    if (v12 < 0)
    {
      v36 = a1[1];
      v37 = a3[1];
      *a1 = v11;
      a1[1] = v37;
      *a3 = v4;
      a3[1] = v36;
    }
    else
    {
      v21 = a1[1];
      v22 = a2[1];
      *a1 = v3;
      a1[1] = v22;
      *a2 = v4;
      a2[1] = v21;
      v23 = -1;
      if (*a3 >= v4)
        v23 = 1;
      if (*a3 == v4)
      {
        v24 = a3[1];
        v8 = v24 >= v21;
        v25 = v24 == v21;
        v23 = -1;
        if (v8)
          v23 = 1;
        if (v25)
          v23 = 0;
      }
      if (v23 < 0)
      {
        v26 = a3[1];
        *a2 = *a3;
        a2[1] = v26;
        *a3 = v4;
        a3[1] = v21;
        return 2;
      }
    }
  }
  else
  {
    if (v11 == v3)
    {
      v13 = a3[1];
      v14 = a2[1];
      v8 = v13 >= v14;
      v15 = v13 == v14;
      v16 = -1;
      if (v8)
        v16 = 1;
      if (v15)
        v12 = 0;
      else
        v12 = v16;
    }
    if ((v12 & 0x80) == 0)
      return 0;
    *a2 = v11;
    *a3 = v3;
    v27 = *a2;
    v28 = a2[1];
    a2[1] = a3[1];
    a3[1] = v28;
    v29 = *a1;
    v30 = -1;
    if (v27 >= *a1)
      v30 = 1;
    if (v27 == *a1)
    {
      v31 = a2[1];
      v32 = a1[1];
      v8 = v31 >= v32;
      v33 = v31 == v32;
      v30 = -1;
      if (v8)
        v30 = 1;
      if (v33)
        v30 = 0;
    }
    if (v30 < 0)
    {
      v34 = a1[1];
      v35 = a2[1];
      *a1 = v27;
      a1[1] = v35;
      *a2 = v29;
      a2[1] = v34;
      return 2;
    }
  }
  return 1;
}

_QWORD *sub_1000A821C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  char v6;
  unint64_t v7;
  BOOL v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  BOOL v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  _QWORD *v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  unint64_t v41;
  BOOL v42;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(a2 - 2);
  v5 = *a1 == v4;
  if (*a1 >= v4)
    v6 = 1;
  else
    v6 = -1;
  if (v5)
  {
    v7 = *(a2 - 1);
    v8 = v3 >= v7;
    v9 = v3 == v7;
    v6 = -1;
    if (v8)
      v6 = 1;
    if (v9)
      v6 = 0;
  }
  if (v6 < 0)
  {
    v15 = a1;
    v11 = a1;
    do
    {
      v16 = v11[2];
      v11 += 2;
      v17 = v2 == v16;
      if (v2 >= v16)
        v18 = 1;
      else
        v18 = -1;
      if (v17)
      {
        v19 = v15[3];
        v20 = v3 == v19;
        v18 = v3 >= v19 ? 1 : -1;
        if (v20)
          v18 = 0;
      }
      v15 = v11;
    }
    while ((v18 & 0x80) == 0);
  }
  else
  {
    v10 = a1 + 2;
    do
    {
      v11 = v10;
      if (v10 >= a2)
        break;
      if (v2 >= *v10)
        v12 = 1;
      else
        v12 = -1;
      if (v2 == *v10)
      {
        v13 = v10[1];
        v14 = v3 == v13;
        v12 = v3 >= v13 ? 1 : -1;
        if (v14)
          v12 = 0;
      }
      v10 += 2;
    }
    while ((v12 & 0x80) == 0);
  }
  if (v11 >= a2)
  {
    v21 = a2;
  }
  else
  {
    v21 = a2;
    do
    {
      v22 = *(v21 - 2);
      v21 -= 2;
      v23 = v2 == v22;
      if (v2 >= v22)
        v24 = 1;
      else
        v24 = -1;
      if (v23)
      {
        v25 = *(a2 - 1);
        v26 = v3 == v25;
        v24 = v3 >= v25 ? 1 : -1;
        if (v26)
          v24 = 0;
      }
      a2 = v21;
    }
    while (v24 < 0);
  }
  if (v11 < v21)
  {
    v27 = *v11;
    v28 = *v21;
    do
    {
      v29 = v11[1];
      v30 = v21[1];
      *v11 = v28;
      v11[1] = v30;
      *v21 = v27;
      v21[1] = v29;
      v31 = v11;
      do
      {
        v32 = v11[2];
        v11 += 2;
        v27 = v32;
        v33 = v2 == v32;
        if (v2 >= v32)
          v34 = 1;
        else
          v34 = -1;
        if (v33)
        {
          v35 = v31[3];
          v36 = v3 == v35;
          v34 = v3 >= v35 ? 1 : -1;
          if (v36)
            v34 = 0;
        }
        v31 = v11;
      }
      while ((v34 & 0x80) == 0);
      v37 = v21;
      do
      {
        v38 = *(v21 - 2);
        v21 -= 2;
        v28 = v38;
        v39 = v2 == v38;
        if (v2 >= v38)
          v40 = 1;
        else
          v40 = -1;
        if (v39)
        {
          v41 = *(v37 - 1);
          v42 = v3 == v41;
          v40 = v3 >= v41 ? 1 : -1;
          if (v42)
            v40 = 0;
        }
        v37 = v21;
      }
      while (v40 < 0);
    }
    while (v11 < v21);
  }
  if (v11 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v11 - 1);
  *(v11 - 2) = v2;
  *(v11 - 1) = v3;
  return v11;
}

uint64_t *sub_1000A83A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  char v35;
  unint64_t v36;
  BOOL v37;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  do
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3)
      v6 = 1;
    else
      v6 = -1;
    if (v5 == v3)
    {
      v7 = a1[v2 + 3];
      v8 = v7 == v4;
      v6 = v7 >= v4 ? 1 : -1;
      if (v8)
        v6 = 0;
    }
    v2 += 2;
  }
  while (v6 < 0);
  v9 = &a1[v2];
  if (v2 == 2)
  {
    while (v9 < a2)
    {
      v10 = a2 - 2;
      v16 = *(a2 - 2);
      v17 = v16 == v3;
      if (v16 >= v3)
        v18 = 1;
      else
        v18 = -1;
      if (v17)
      {
        v19 = *(a2 - 1);
        v20 = v19 == v4;
        v18 = v19 >= v4 ? 1 : -1;
        if (v20)
          v18 = 0;
      }
      a2 -= 2;
      if (v18 < 0)
        goto LABEL_39;
    }
    v10 = a2;
  }
  else
  {
    v10 = a2;
    do
    {
      v11 = *(v10 - 2);
      v10 -= 2;
      v12 = v11 == v3;
      if (v11 >= v3)
        v13 = 1;
      else
        v13 = -1;
      if (v12)
      {
        v14 = *(a2 - 1);
        v15 = v14 == v4;
        v13 = v14 >= v4 ? 1 : -1;
        if (v15)
          v13 = 0;
      }
      a2 = v10;
    }
    while ((v13 & 0x80) == 0);
  }
LABEL_39:
  if (v9 >= v10)
  {
    v22 = v9;
  }
  else
  {
    v21 = *v10;
    v22 = v9;
    v23 = v10;
    do
    {
      v24 = v22[1];
      v25 = v23[1];
      *v22 = v21;
      v22[1] = v25;
      *v23 = v5;
      v23[1] = v24;
      v26 = v22;
      do
      {
        v27 = v22[2];
        v22 += 2;
        v5 = v27;
        v28 = v27 == v3;
        if (v27 >= v3)
          v29 = 1;
        else
          v29 = -1;
        if (v28)
        {
          v30 = v26[3];
          v31 = v30 == v4;
          v29 = v30 >= v4 ? 1 : -1;
          if (v31)
            v29 = 0;
        }
        v26 = v22;
      }
      while (v29 < 0);
      v32 = v23;
      do
      {
        v33 = *(v23 - 2);
        v23 -= 2;
        v21 = v33;
        v34 = v33 == v3;
        if (v33 >= v3)
          v35 = 1;
        else
          v35 = -1;
        if (v34)
        {
          v36 = *(v32 - 1);
          v37 = v36 == v4;
          v35 = v36 >= v4 ? 1 : -1;
          if (v37)
            v35 = 0;
        }
        v32 = v23;
      }
      while ((v35 & 0x80) == 0);
    }
    while (v22 < v23);
  }
  if (v22 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v22 - 1);
  *(v22 - 2) = v3;
  *(v22 - 1) = v4;
  return v22 - 2;
}

BOOL sub_1000A850C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t *v32;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      v8 = -1;
      if (v6 >= *a1)
        v8 = 1;
      if (v6 == *a1)
      {
        v9 = *(a2 - 1);
        v10 = a1[1];
        v11 = v9 >= v10;
        v12 = v9 == v10;
        v8 = -1;
        if (v11)
          v8 = 1;
        if (v12)
          v8 = 0;
      }
      if (v8 < 0)
      {
        v13 = a1[1];
        v14 = *(a2 - 1);
        *a1 = v6;
        a1[1] = v14;
        *(a2 - 2) = v7;
        *(a2 - 1) = v13;
      }
      return result;
    case 3:
      sub_1000A80C8(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1000A86EC(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1000A87F8(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v15 = a1 + 4;
      sub_1000A80C8(a1, a1 + 2, a1 + 4);
      v16 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v17 = 0;
      v18 = 0;
      break;
  }
  while (1)
  {
    v19 = *v16;
    v20 = *v15;
    if (*v16 >= *v15)
      v21 = 1;
    else
      v21 = -1;
    if (*v16 == *v15)
    {
      v22 = v16[1];
      v23 = v15[1];
      v24 = v22 == v23;
      v21 = v22 >= v23 ? 1 : -1;
      if (v24)
        v21 = 0;
    }
    if (v21 < 0)
    {
      v25 = v16[1];
      v26 = v17;
      while (1)
      {
        v27 = (uint64_t *)((char *)a1 + v26);
        v28 = *(uint64_t *)((char *)a1 + v26 + 40);
        v27[6] = v20;
        v27[7] = v28;
        if (v26 == -32)
          break;
        v20 = v27[2];
        if (v19 >= v20)
          v29 = 1;
        else
          v29 = -1;
        if (v19 == v20)
        {
          v30 = *(uint64_t *)((char *)a1 + v26 + 24);
          v31 = v25 == v30;
          v29 = v25 >= v30 ? 1 : -1;
          if (v31)
            v29 = 0;
        }
        v26 -= 16;
        if ((v29 & 0x80) == 0)
        {
          v32 = (uint64_t *)((char *)a1 + v26 + 48);
          goto LABEL_38;
        }
      }
      v32 = a1;
LABEL_38:
      *v32 = v19;
      v32[1] = v25;
      if (++v18 == 8)
        return v16 + 2 == a2;
    }
    v15 = v16;
    v17 += 16;
    v16 += 2;
    if (v16 == a2)
      return 1;
  }
}

uint64_t sub_1000A86EC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  result = sub_1000A80C8(a1, a2, a3);
  v9 = *a3;
  v10 = -1;
  if (*a4 >= *a3)
    v10 = 1;
  if (*a4 == *a3)
  {
    v11 = a4[1];
    v12 = a3[1];
    v13 = v11 >= v12;
    v14 = v11 == v12;
    v10 = -1;
    if (v13)
      v10 = 1;
    if (v14)
      v10 = 0;
  }
  if (v10 < 0)
  {
    *a3 = *a4;
    *a4 = v9;
    v15 = *a3;
    v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    v17 = *a2;
    v18 = -1;
    if (v15 >= *a2)
      v18 = 1;
    if (v15 == *a2)
    {
      v19 = a3[1];
      v20 = a2[1];
      v13 = v19 >= v20;
      v21 = v19 == v20;
      v18 = -1;
      if (v13)
        v18 = 1;
      if (v21)
        v18 = 0;
    }
    if (v18 < 0)
    {
      *a2 = v15;
      *a3 = v17;
      v22 = *a2;
      v23 = a2[1];
      a2[1] = a3[1];
      a3[1] = v23;
      v24 = *a1;
      v25 = -1;
      if (v22 >= *a1)
        v25 = 1;
      if (v22 == *a1)
      {
        v26 = a2[1];
        v27 = a1[1];
        v13 = v26 >= v27;
        v28 = v26 == v27;
        v25 = -1;
        if (v13)
          v25 = 1;
        if (v28)
          v25 = 0;
      }
      if (v25 < 0)
      {
        v29 = a1[1];
        v30 = a2[1];
        *a1 = v22;
        a1[1] = v30;
        *a2 = v24;
        a2[1] = v29;
      }
    }
  }
  return result;
}

uint64_t sub_1000A87F8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;

  result = sub_1000A86EC(a1, a2, a3, a4);
  v11 = *a4;
  v12 = -1;
  if (*a5 >= *a4)
    v12 = 1;
  if (*a5 == *a4)
  {
    v13 = a5[1];
    v14 = a4[1];
    v15 = v13 >= v14;
    v16 = v13 == v14;
    v12 = -1;
    if (v15)
      v12 = 1;
    if (v16)
      v12 = 0;
  }
  if (v12 < 0)
  {
    *a4 = *a5;
    *a5 = v11;
    v17 = *a4;
    v18 = a4[1];
    a4[1] = a5[1];
    a5[1] = v18;
    v19 = *a3;
    v20 = -1;
    if (v17 >= *a3)
      v20 = 1;
    if (v17 == *a3)
    {
      v21 = a4[1];
      v22 = a3[1];
      v15 = v21 >= v22;
      v23 = v21 == v22;
      v20 = -1;
      if (v15)
        v20 = 1;
      if (v23)
        v20 = 0;
    }
    if (v20 < 0)
    {
      *a3 = v17;
      *a4 = v19;
      v24 = *a3;
      v25 = a3[1];
      a3[1] = a4[1];
      a4[1] = v25;
      v26 = *a2;
      v27 = -1;
      if (v24 >= *a2)
        v27 = 1;
      if (v24 == *a2)
      {
        v28 = a3[1];
        v29 = a2[1];
        v15 = v28 >= v29;
        v30 = v28 == v29;
        v27 = -1;
        if (v15)
          v27 = 1;
        if (v30)
          v27 = 0;
      }
      if (v27 < 0)
      {
        *a2 = v24;
        *a3 = v26;
        v31 = *a2;
        v32 = a2[1];
        a2[1] = a3[1];
        a3[1] = v32;
        v33 = *a1;
        v34 = -1;
        if (v31 >= *a1)
          v34 = 1;
        if (v31 == *a1)
        {
          v35 = a2[1];
          v36 = a1[1];
          v15 = v35 >= v36;
          v37 = v35 == v36;
          v34 = -1;
          if (v15)
            v34 = 1;
          if (v37)
            v34 = 0;
        }
        if (v34 < 0)
        {
          v38 = a1[1];
          v39 = a2[1];
          *a1 = v31;
          a1[1] = v39;
          *a2 = v33;
          a2[1] = v38;
        }
      }
    }
  }
  return result;
}

char *sub_1000A8958(char *a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[16 * v10];
      do
      {
        sub_1000A8AC8((uint64_t)a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *(_QWORD *)v14;
        if (*(_QWORD *)v14 >= *(_QWORD *)a1)
          v16 = 1;
        else
          v16 = -1;
        if (*(_QWORD *)v14 == *(_QWORD *)a1)
        {
          v17 = *((_QWORD *)v14 + 1);
          v18 = *((_QWORD *)a1 + 1);
          v19 = v17 == v18;
          v16 = v17 >= v18 ? 1 : -1;
          if (v19)
            v16 = 0;
        }
        if (v16 < 0)
        {
          v20 = *((_QWORD *)v14 + 1);
          v21 = *((_QWORD *)a1 + 1);
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *((_QWORD *)v14 + 1) = v21;
          *(_QWORD *)a1 = v15;
          *((_QWORD *)a1 + 1) = v20;
          sub_1000A8AC8((uint64_t)a1, a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v22 = (unint64_t)v8 >> 4;
      v23 = a2 - 16;
      do
      {
        v25 = *(_QWORD *)a1;
        v24 = *((_QWORD *)a1 + 1);
        v26 = (char *)sub_1000A8C1C(a1, a4, v22);
        if (v23 == v26)
        {
          *(_QWORD *)v26 = v25;
          *((_QWORD *)v26 + 1) = v24;
        }
        else
        {
          *(_OWORD *)v26 = *(_OWORD *)v23;
          *(_QWORD *)v23 = v25;
          *((_QWORD *)v23 + 1) = v24;
          sub_1000A8CB0((uint64_t)a1, (uint64_t)(v26 + 16), a4, (v26 + 16 - a1) >> 4);
        }
        v23 -= 16;
      }
      while (v22-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1000A8AC8(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  char v33;
  unint64_t v34;
  BOOL v35;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (_QWORD *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        v11 = *v8 == v10;
        if (*v8 >= v10)
          v12 = 1;
        else
          v12 = -1;
        if (v11)
        {
          v13 = *(_QWORD *)(result + 16 * v7 + 8);
          v14 = v8[3];
          v15 = v13 >= v14;
          v16 = v13 == v14;
          v12 = -1;
          if (v15)
            v12 = 1;
          if (v16)
            v12 = 0;
        }
        if (v12 < 0)
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v17 = *v8;
      v18 = *a4;
      v19 = -1;
      if (*v8 >= *a4)
        v19 = 1;
      if (*v8 == *a4)
      {
        v20 = v8[1];
        v21 = a4[1];
        v15 = v20 >= v21;
        v22 = v20 == v21;
        v19 = -1;
        if (v15)
          v19 = 1;
        if (v22)
          v19 = 0;
      }
      if ((v19 & 0x80) == 0)
      {
        v23 = a4[1];
        do
        {
          v24 = a4;
          a4 = v8;
          v25 = v8[1];
          *v24 = v17;
          v24[1] = v25;
          if (v5 < v7)
            break;
          v26 = (2 * v7) | 1;
          v8 = (_QWORD *)(result + 16 * v26);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v7 = v26;
          }
          else
          {
            v27 = v8[2];
            v28 = *v8 == v27;
            if (*v8 >= v27)
              v29 = 1;
            else
              v29 = -1;
            if (v28)
            {
              v30 = *(_QWORD *)(result + 16 * v26 + 8);
              v31 = v8[3];
              v32 = v30 == v31;
              v29 = v30 >= v31 ? 1 : -1;
              if (v32)
                v29 = 0;
            }
            if (v29 < 0)
              v8 += 2;
            else
              v7 = v26;
          }
          v17 = *v8;
          if (*v8 >= v18)
            v33 = 1;
          else
            v33 = -1;
          if (*v8 == v18)
          {
            v34 = v8[1];
            v35 = v34 == v23;
            if (v34 >= v23)
              v33 = 1;
            else
              v33 = -1;
            if (v35)
              v33 = 0;
          }
        }
        while ((v33 & 0x80) == 0);
        *a4 = v18;
        a4[1] = v23;
      }
    }
  }
  return result;
}

_QWORD *sub_1000A8C1C(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char v16;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = v3 + 1;
    v7 = &a1[v3 + 1];
    v8 = (2 * v3) | 1;
    v9 = 2 * v3 + 2;
    if (v9 < a3)
    {
      v10 = v7[2];
      v11 = *v7 == v10;
      if (*v7 >= v10)
        v12 = 1;
      else
        v12 = -1;
      if (v11)
      {
        v13 = *((_QWORD *)&a1[v6] + 1);
        v14 = v7[3];
        v15 = v13 == v14;
        if (v13 >= v14)
          v16 = 1;
        else
          v16 = -1;
        if (v15)
          v12 = 0;
        else
          v12 = v16;
      }
      if (v12 < 0)
      {
        v7 += 2;
        v8 = v9;
      }
    }
    *a1 = *(_OWORD *)v7;
    a1 = v7;
    v3 = v8;
  }
  while (v8 <= v5);
  return v7;
}

uint64_t sub_1000A8CB0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  BOOL v20;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_QWORD *)(result + 16 * (v4 >> 1));
    v7 = (_QWORD *)(a2 - 16);
    v8 = *(_QWORD *)(a2 - 16);
    v9 = *v6;
    v10 = -1;
    if (*v6 >= v8)
      v10 = 1;
    if (*v6 == v8)
    {
      v11 = v6[1];
      v12 = *(_QWORD *)(a2 - 8);
      v13 = v11 >= v12;
      v14 = v11 == v12;
      v10 = -1;
      if (v13)
        v10 = 1;
      if (v14)
        v10 = 0;
    }
    if (v10 < 0)
    {
      v15 = *(_QWORD *)(a2 - 8);
      do
      {
        v16 = v7;
        v7 = v6;
        v17 = v6[1];
        *v16 = v9;
        v16[1] = v17;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_QWORD *)(result + 16 * v5);
        v9 = *v6;
        if (*v6 >= v8)
          v18 = 1;
        else
          v18 = -1;
        if (*v6 == v8)
        {
          v19 = v6[1];
          v20 = v19 == v15;
          if (v19 >= v15)
            v18 = 1;
          else
            v18 = -1;
          if (v20)
            v18 = 0;
        }
      }
      while (v18 < 0);
      *v7 = v8;
      v7[1] = v15;
    }
  }
  return result;
}

uint64_t sub_1000A8D4C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182438);
  sub_1000A8F40(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A8D84(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100182438);
  sub_1000A8F40(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A8DC4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100182438);
  sub_1000A8F40(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000A8E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000A8E4C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000A8E98(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182438);
  sub_1000A8F40(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000A8EE8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100182438);
  sub_1000A8F40(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000A8F40(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100182508;
  sub_1000A8FDC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A8FDC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000A9154((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000A9104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000A9130(uint64_t a1)
{
  sub_1000A8F40(a1);
  operator delete();
}

int *sub_1000A9154(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 213;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 213;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000A9338(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182658);
  sub_1000A952C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A9370(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100182658);
  sub_1000A952C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A93B0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100182658);
  sub_1000A952C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000A9404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000A9438(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000A9484(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182658);
  sub_1000A952C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000A94D4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100182658);
  sub_1000A952C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000A952C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100182728;
  sub_1000A95C8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A95C8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000A9740((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000A96F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000A971C(uint64_t a1)
{
  sub_1000A952C(a1);
  operator delete();
}

int *sub_1000A9740(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 222;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 222;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000A9924(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182878);
  sub_1000A9B18(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A995C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100182878);
  sub_1000A9B18(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A999C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100182878);
  sub_1000A9B18(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000A99F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000A9A24(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000A9A70(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182878);
  sub_1000A9B18(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000A9AC0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100182878);
  sub_1000A9B18(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000A9B18(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100182948;
  sub_1000A9BB4(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A9BB4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000A9D2C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000A9CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000A9D08(uint64_t a1)
{
  sub_1000A9B18(a1);
  operator delete();
}

int *sub_1000A9D2C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 231;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 231;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000A9F10(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182A98);
  sub_1000AA104(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A9F48(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100182A98);
  sub_1000AA104(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A9F88(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100182A98);
  sub_1000AA104(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000A9FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000AA010(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000AA05C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182A98);
  sub_1000AA104(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000AA0AC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100182A98);
  sub_1000AA104(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000AA104(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100182B68;
  sub_1000AA1A0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AA1A0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000AA318((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000AA2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000AA2F4(uint64_t a1)
{
  sub_1000AA104(a1);
  operator delete();
}

int *sub_1000AA318(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 235;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 235;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000AA4FC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182CB8);
  sub_1000AA6F0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AA534(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100182CB8);
  sub_1000AA6F0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AA574(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100182CB8);
  sub_1000AA6F0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000AA5C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000AA5FC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000AA648(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182CB8);
  sub_1000AA6F0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000AA698(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100182CB8);
  sub_1000AA6F0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000AA6F0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100182D88;
  sub_1000AA78C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AA78C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000AA904((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000AA8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000AA8E0(uint64_t a1)
{
  sub_1000AA6F0(a1);
  operator delete();
}

int *sub_1000AA904(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 237;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 237;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000AAAE8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182ED8);
  sub_1000AACDC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AAB20(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100182ED8);
  sub_1000AACDC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AAB60(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100182ED8);
  sub_1000AACDC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000AABB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000AABE8(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000AAC34(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182ED8);
  sub_1000AACDC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000AAC84(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100182ED8);
  sub_1000AACDC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000AACDC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100182FA8;
  sub_1000AAD78(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AAD78(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000AAEF0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000AAEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000AAECC(uint64_t a1)
{
  sub_1000AACDC(a1);
  operator delete();
}

int *sub_1000AAEF0(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 284;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 284;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000AB0D4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001830F8);
  sub_1000AB2C8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AB10C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001830F8);
  sub_1000AB2C8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AB14C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001830F8);
  sub_1000AB2C8(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000AB1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000AB1D4(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000AB220(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001830F8);
  sub_1000AB2C8(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000AB270(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001830F8);
  sub_1000AB2C8(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000AB2C8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001831C8;
  sub_1000AB364(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AB364(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000AB4DC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000AB48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000AB4B8(uint64_t a1)
{
  sub_1000AB2C8(a1);
  operator delete();
}

int *sub_1000AB4DC(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 295;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 295;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_1000AB6C0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000AB7A8((uint64_t)a1, a2);
  *a1 = off_100183250;
  a1[45] = &off_100183350;
  a1[46] = &off_100183378;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100183250;
  a1[45] = off_1001832D8;
  a1[46] = off_100183300;
  return a1;
}

void sub_1000AB744(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000AB824(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AB768(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100183318);
  sub_1000AB824(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000AB7A8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001833E8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000AB810(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AB824(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001833E8;
  sub_1000ABADC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000AB8C0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100183318);
  sub_1000AB824(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000AB914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000AB948(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000AB994(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183318);
  sub_1000AB824(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000AB9CC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183318);
  sub_1000AB824(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_1000ABA1C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100183318);
  sub_1000AB824(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000ABA5C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100183318);
  sub_1000AB824(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1000ABAB8(uint64_t a1)
{
  sub_1000AB824(a1);
  operator delete();
}

uint64_t sub_1000ABADC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000ABC2C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000ABC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_1000ABC2C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 241;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 241;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000ABE10(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183538);
  sub_1000AC004(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000ABE48(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100183538);
  sub_1000AC004(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000ABE88(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100183538);
  sub_1000AC004(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000ABEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000ABF10(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000ABF5C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183538);
  sub_1000AC004(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000ABFAC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100183538);
  sub_1000AC004(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000AC004(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100183608;
  sub_1000AC0A0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AC0A0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000AC218((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000AC1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000AC1F4(uint64_t a1)
{
  sub_1000AC004(a1);
  operator delete();
}

int *sub_1000AC218(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 387;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 387;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000AC3FC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183758);
  sub_1000AC5F0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AC434(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100183758);
  sub_1000AC5F0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AC474(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100183758);
  sub_1000AC5F0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000AC4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000AC4FC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000AC548(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183758);
  sub_1000AC5F0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000AC598(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100183758);
  sub_1000AC5F0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000AC5F0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100183828;
  sub_1000AC68C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AC68C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000AC804((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000AC7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000AC7E0(uint64_t a1)
{
  sub_1000AC5F0(a1);
  operator delete();
}

int *sub_1000AC804(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 390;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 390;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000AC9E8(uint64_t a1, __int128 *a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_1000ACA30((_OWORD *)a1, a2);
  return a1;
}

void sub_1000ACA14(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    sub_1001237F0(v1);
  _Unwind_Resume(exception_object);
}

_OWORD *sub_1000ACA30(_OWORD *__dst, __int128 *a2)
{
  _BYTE *v2;
  __int128 v3;

  if (*((_BYTE *)a2 + 24))
  {
    v2 = __dst;
    if (*((char *)a2 + 23) < 0)
    {
      __dst = sub_100041DD0(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *__dst = v3;
    }
    v2[24] = 1;
  }
  return __dst;
}

uint64_t sub_1000ACA88(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183978);
  sub_1000ACC7C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000ACAC0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100183978);
  sub_1000ACC7C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000ACB00(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100183978);
  sub_1000ACC7C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000ACB54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000ACB88(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000ACBD4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183978);
  sub_1000ACC7C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000ACC24(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100183978);
  sub_1000ACC7C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000ACC7C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100183A48;
  sub_1000ACD18(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000ACD18(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000ACE90((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000ACE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000ACE6C(uint64_t a1)
{
  sub_1000ACC7C(a1);
  operator delete();
}

int *sub_1000ACE90(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 434;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 434;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000AD074(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183B98);
  sub_1000AD268(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AD0AC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100183B98);
  sub_1000AD268(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AD0EC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100183B98);
  sub_1000AD268(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000AD140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000AD174(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000AD1C0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183B98);
  sub_1000AD268(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000AD210(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100183B98);
  sub_1000AD268(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000AD268(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100183C68;
  sub_1000AD304(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AD304(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000AD47C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000AD42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000AD458(uint64_t a1)
{
  sub_1000AD268(a1);
  operator delete();
}

int *sub_1000AD47C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 443;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 443;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000AD660(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183DB8);
  sub_1000AD854(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AD698(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100183DB8);
  sub_1000AD854(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AD6D8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100183DB8);
  sub_1000AD854(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000AD72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000AD760(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000AD7AC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183DB8);
  sub_1000AD854(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000AD7FC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100183DB8);
  sub_1000AD854(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000AD854(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100183E88;
  sub_1000AD8F0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AD8F0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000ADA68((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000ADA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000ADA44(uint64_t a1)
{
  sub_1000AD854(a1);
  operator delete();
}

int *sub_1000ADA68(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 460;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 460;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000ADC4C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183FD8);
  sub_1000ADE40(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000ADC84(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100183FD8);
  sub_1000ADE40(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000ADCC4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100183FD8);
  sub_1000ADE40(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000ADD18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000ADD4C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000ADD98(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183FD8);
  sub_1000ADE40(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000ADDE8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100183FD8);
  sub_1000ADE40(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000ADE40(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001840A8;
  sub_1000ADEDC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000ADEDC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000AE054((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000AE004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000AE030(uint64_t a1)
{
  sub_1000ADE40(a1);
  operator delete();
}

int *sub_1000AE054(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 469;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 469;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000AE238(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001841F8);
  sub_1000AE42C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AE270(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001841F8);
  sub_1000AE42C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AE2B0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001841F8);
  sub_1000AE42C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000AE304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000AE338(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000AE384(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001841F8);
  sub_1000AE42C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000AE3D4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001841F8);
  sub_1000AE42C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000AE42C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001842C8;
  sub_1000AE4C8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AE4C8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000AE640((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000AE5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000AE61C(uint64_t a1)
{
  sub_1000AE42C(a1);
  operator delete();
}

int *sub_1000AE640(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 492;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 492;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000AE824(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100184418);
  sub_1000AEA18(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AE85C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100184418);
  sub_1000AEA18(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AE89C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100184418);
  sub_1000AEA18(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000AE8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000AE924(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000AE970(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100184418);
  sub_1000AEA18(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000AE9C0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100184418);
  sub_1000AEA18(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000AEA18(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001844E8;
  sub_1000AEAB4(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AEAB4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000AEC2C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000AEBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000AEC08(uint64_t a1)
{
  sub_1000AEA18(a1);
  operator delete();
}

int *sub_1000AEC2C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 498;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 498;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000AEE10(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100184638);
  sub_1000AF004(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AEE48(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100184638);
  sub_1000AF004(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AEE88(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100184638);
  sub_1000AF004(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000AEEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000AEF10(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000AEF5C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100184638);
  sub_1000AF004(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000AEFAC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100184638);
  sub_1000AF004(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000AF004(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100184708;
  sub_1000AF0A0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AF0A0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000AF218((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000AF1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000AF1F4(uint64_t a1)
{
  sub_1000AF004(a1);
  operator delete();
}

int *sub_1000AF218(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 505;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 505;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000AF3FC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100184858);
  sub_1000AF5F0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AF434(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100184858);
  sub_1000AF5F0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AF474(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100184858);
  sub_1000AF5F0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000AF4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000AF4FC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000AF548(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100184858);
  sub_1000AF5F0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000AF598(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100184858);
  sub_1000AF5F0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000AF5F0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100184928;
  sub_1000AF68C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AF68C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000AF804((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000AF7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000AF7E0(uint64_t a1)
{
  sub_1000AF5F0(a1);
  operator delete();
}

int *sub_1000AF804(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 511;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 511;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000AF9E8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100184A78);
  sub_1000AFBDC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AFA20(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100184A78);
  sub_1000AFBDC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AFA60(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100184A78);
  sub_1000AFBDC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000AFAB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000AFAE8(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000AFB34(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100184A78);
  sub_1000AFBDC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000AFB84(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100184A78);
  sub_1000AFBDC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000AFBDC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100184B48;
  sub_1000AFC78(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AFC78(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000AFDF0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000AFDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000AFDCC(uint64_t a1)
{
  sub_1000AFBDC(a1);
  operator delete();
}

int *sub_1000AFDF0(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 523;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 523;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_1000AFFD4(_QWORD *a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;

  *a1 = off_100184BC8;
  a1[1] = a2;
  sub_1000B01E0(a1 + 2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 720) - *(_QWORD *)(a2 + 712)) >> 3));
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v4 = "DiskImageSparseBundle::ContextSparseBundle::ContextSparseBundle(DiskImageSparseBundle &)";
    *((_QWORD *)&v4 + 1) = 63;
    v5 = 2;
    sub_1000B00D0(v6, &v4);
    sub_100005A0C(&v7, (uint64_t)"Constructing sb context", 23);
    std::ostream::~ostream(&v7, off_100184CF0);
    sub_1000B02D8((uint64_t)v6);
    std::ios::~ios(&v8);
  }
  return a1;
}

void sub_1000B00A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000B0178((uint64_t)va);
  sub_100017FB8((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000B00D0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B025C((uint64_t)a1, a2);
  *a1 = off_100184C28;
  a1[45] = &off_100184D28;
  a1[46] = &off_100184D50;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100184C28;
  a1[45] = off_100184CB0;
  a1[46] = off_100184CD8;
  return a1;
}

void sub_1000B0154(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000B02D8(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B0178(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100184CF0);
  sub_1000B02D8(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_1000B01BC(uint64_t a1)
{
  sub_1000B08C4(a1);
  operator delete();
}

_QWORD *sub_1000B01E0(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100017F78(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1000B0248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_100017FB8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B025C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100184DC0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B02C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B02D8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100184DC0;
  sub_1000B0590(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000B0374(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100184CF0);
  sub_1000B02D8(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000B03C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000B03FC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000B0448(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100184CF0);
  sub_1000B02D8(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000B0480(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100184CF0);
  sub_1000B02D8(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_1000B04D0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100184CF0);
  sub_1000B02D8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000B0510(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100184CF0);
  sub_1000B02D8(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1000B056C(uint64_t a1)
{
  sub_1000B02D8(a1);
  operator delete();
}

uint64_t sub_1000B0590(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000B06E0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000B06B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_1000B06E0(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 37;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 37;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000B08C4(uint64_t a1)
{
  __int128 v3;
  int v4;
  void **v5[45];
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_100184BC8;
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v3 = "DiskImageSparseBundle::ContextSparseBundle::~ContextSparseBundle()";
    *((_QWORD *)&v3 + 1) = 64;
    v4 = 2;
    sub_1000B0980(v5, &v3);
    sub_100005A0C(&v6, (uint64_t)"Destructing sb context", 22);
    std::ostream::~ostream(&v6, off_100184F10);
    sub_1000B0AE4((uint64_t)v5);
    std::ios::~ios(&v7);
  }
  v5[0] = (void **)(a1 + 16);
  sub_100017FB8(v5);
  return a1;
}

_QWORD *sub_1000B0980(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B0A68((uint64_t)a1, a2);
  *a1 = off_100184E48;
  a1[45] = &off_100184F48;
  a1[46] = &off_100184F70;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100184E48;
  a1[45] = off_100184ED0;
  a1[46] = off_100184EF8;
  return a1;
}

void sub_1000B0A04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000B0AE4(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B0A28(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100184F10);
  sub_1000B0AE4(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000B0A68(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100184FE0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B0AD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B0AE4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100184FE0;
  sub_1000B0D9C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000B0B80(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100184F10);
  sub_1000B0AE4(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000B0BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000B0C08(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000B0C54(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100184F10);
  sub_1000B0AE4(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000B0C8C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100184F10);
  sub_1000B0AE4(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_1000B0CDC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100184F10);
  sub_1000B0AE4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000B0D1C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100184F10);
  sub_1000B0AE4(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1000B0D78(uint64_t a1)
{
  sub_1000B0AE4(a1);
  operator delete();
}

uint64_t sub_1000B0D9C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000B0EEC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000B0EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_1000B0EEC(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 41;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 41;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000B10D0(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100180DA8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B1138(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B114C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100180FC8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B11B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B11C8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001811E8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B1230(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B1244(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100181408;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B12AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B12C0(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100181628;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B1328(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B133C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100181848;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B13A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B13B8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100181A68;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B1420(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B1434(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100181C88;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B149C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B14B0(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100181EA8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B1518(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B152C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001820C8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B1594(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B15A8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001822E8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B1610(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_1000B1624(void **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE *v10;
  unint64_t v11;
  char *v12;
  _OWORD *v13;

  v10 = *a1;
  v11 = sub_1000B16C0((uint64_t)a1, a3);
  if (v11 >> 59)
    sub_1000158AC("get_next_capacity, allocator's max size reached");
  v12 = (char *)v11;
  v13 = operator new(16 * v11);
  sub_1000B1734(a1, v13, v12, a2, a3, a4);
  *a5 = (char *)*a1 + a2 - v10;
}

unint64_t sub_1000B16C0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = 0x7FFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0x7FFFFFFFFFFFFFFLL - v4 < a2 - v4 + v3)
    sub_1000158AC("get_next_capacity, allocator's max size reached");
  v5 = v4 >> 61;
  v6 = 8 * v4;
  if (v5 > 4)
    v7 = -1;
  else
    v7 = v6;
  v8 = v6 / 5;
  if (v5)
    v8 = v7;
  v9 = v3 + a2;
  if (v8 < 0x7FFFFFFFFFFFFFFLL)
    v2 = v8;
  if (v9 <= v2)
    return v2;
  else
    return v9;
}

void sub_1000B1734(void **a1, _OWORD *__dst, char *a3, char *__src, uint64_t a5, _OWORD *a6)
{
  char *v12;
  char *v13;
  BOOL v14;
  BOOL v15;
  _OWORD *v16;
  char *v17;
  char *v19;

  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (*a1)
    v14 = __dst == 0;
  else
    v14 = 1;
  v15 = v14 || v12 == __src;
  v16 = __dst;
  if (!v15)
  {
    memmove(__dst, v12, __src - v12);
    v16 = (_OWORD *)((char *)__dst + __src - v12);
  }
  *v16 = *a6;
  if (__src)
  {
    v17 = &v12[16 * (_QWORD)v13];
    if (v17 != __src && v16 != 0)
      memmove(&v16[a5], __src, v17 - __src);
  }
  if (v12 && a1 + 3 != *a1)
    operator delete(*a1);
  v19 = (char *)a1[1] + a5;
  *a1 = __dst;
  a1[1] = v19;
  a1[2] = a3;
}

uint64_t sub_1000B1804(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100182508;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B186C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B1880(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100182728;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B18E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B18FC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100182948;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B1964(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B1978(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100182B68;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B19E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B19F4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100182D88;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B1A5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B1A70(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100182FA8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B1AD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B1AEC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001831C8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B1B54(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_1000B1B68(uint64_t ***a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = **a1;
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 560);
  *(_QWORD *)(v3 + 136) = sub_100120770();
  *(_QWORD *)(v3 + 144) = v4;
  sub_10006C054(*(_QWORD *)(v2 + 560));
}

void sub_1000B1BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;
  unsigned int *v61;
  int v62;
  int v63;
  uint64_t v64;

  v64 = v60;
  if (a2 == 1)
  {
    v61 = (unsigned int *)__cxa_begin_catch(exception_object);
    *(_QWORD *)&a11 = "DiskImageSparseBundle::void_stackable_identifier()::(anonymous class)::operator()() const";
    *((_QWORD *)&a11 + 1) = 81;
    a12 = 16;
    sub_1000B1C8C(&a14, &a11);
    sub_1001206CC(&a59, v61);
    std::ostream::~ostream(&a59, off_100185130);
    sub_1000B1DF0((uint64_t)&a14);
    std::ios::~ios(&a60);
    v62 = v61[2];
    if (v62 < 0)
      v63 = v61[2];
    else
      v63 = -v62;
    **(_DWORD **)(v64 + 8) = v63;
    __cxa_end_catch();
    JUMPOUT(0x1000B1B9CLL);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000B1C8C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B1D74((uint64_t)a1, a2);
  *a1 = off_100185068;
  a1[45] = &off_100185168;
  a1[46] = &off_100185190;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100185068;
  a1[45] = off_1001850F0;
  a1[46] = off_100185118;
  return a1;
}

void sub_1000B1D10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000B1DF0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B1D34(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100185130);
  sub_1000B1DF0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000B1D74(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100185200;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B1DDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B1DF0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100185200;
  sub_1000B20A8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000B1E8C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100185130);
  sub_1000B1DF0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000B1EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000B1F14(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000B1F60(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100185130);
  sub_1000B1DF0(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000B1F98(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100185130);
  sub_1000B1DF0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_1000B1FE8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100185130);
  sub_1000B1DF0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000B2028(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100185130);
  sub_1000B1DF0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1000B2084(uint64_t a1)
{
  sub_1000B1DF0(a1);
  operator delete();
}

uint64_t sub_1000B20A8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000B21F8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000B21D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_1000B21F8(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 307;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 307;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000B23DC(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v1 = qword_1001A0710;
  v2 = a1 + 1;
  v3 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      v4 = sub_1000B245C(v3 + 4);
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v1 += v4;
      v3 = v6;
    }
    while (v6 != v2);
  }
  return v1;
}

uint64_t sub_1000B245C(unint64_t *a1)
{
  unsigned int v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *((unsigned __int8 *)a1 + 16);
  if (*((_BYTE *)a1 + 16))
  {
    if (v1 == 3)
    {
      v3 = *a1;
      v2 = a1[1];
      if (v2 >= *a1)
        return (v1 & 1) + (uint64_t)(int)(((v1 >> 1) & 1) - 1) + v2 - v3;
    }
    else
    {
      v3 = *a1;
      v2 = a1[1];
      if (*a1 < v2)
        return (v1 & 1) + (uint64_t)(int)(((v1 >> 1) & 1) - 1) + v2 - v3;
    }
  }
  else
  {
    v3 = *a1;
    v2 = a1[1];
    if (*a1 < v2 && *a1 + 1 < v2)
      return (v1 & 1) + (uint64_t)(int)(((v1 >> 1) & 1) - 1) + v2 - v3;
  }
  return qword_1001A0710;
}

uint64_t sub_1000B24C4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100183608;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B252C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B2540(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100183828;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B25A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B25BC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100183A48;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B2624(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B2638(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100183C68;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B26A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B26B4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100183E88;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B271C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B2730(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  sub_1000B2784((_OWORD *)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1000B276C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100027D5C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_1000B2784(_OWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)result + 1;
    do
    {
      result = sub_1000B2808(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *sub_1000B2808(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t *v10;
  uint64_t *v11;

  v6 = sub_100028330(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    sub_1000284A8(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t sub_1000B2894(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001840A8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B28FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000B2910(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v6;

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = sub_100040DA8(a1, v4);
      operator delete(v4);
      v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

uint64_t **sub_1000B296C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unint64_t v11;
  uint64_t *v13;

  if (!*(_BYTE *)(a2 + 16))
  {
    v11 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 < v11 && *(_QWORD *)a2 + 1 < v11)
      goto LABEL_4;
    return a1 + 1;
  }
  if (*(_BYTE *)(a2 + 16) == 3)
  {
    if (*(_QWORD *)(a2 + 8) >= *(_QWORD *)a2)
      goto LABEL_4;
    return a1 + 1;
  }
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
    return a1 + 1;
LABEL_4:
  v4 = (uint64_t *)sub_1000B2AA0(a1, a2, a2);
  if ((v5 & 1) != 0)
  {
    v13 = v4;
    sub_1000B2B28(a1, &v13);
    return sub_1000B2C24(a1, (uint64_t ***)&v13);
  }
  else
  {
    v6 = (_QWORD *)sub_1000B2E1C((uint64_t)a1, a2);
    v7 = (_QWORD *)*v6;
    if (*v6)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)v7[1];
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v6[2];
        v9 = *v8 == (_QWORD)v6;
        v6 = v8;
      }
      while (v9);
    }
    return sub_1000B2A5C(a1, (unint64_t *)a2, (uint64_t)v8);
  }
}

uint64_t **sub_1000B2A5C(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)sub_1000B2E64(a1, a2, a3);
  sub_1000B2B28(a1, &v5);
  return sub_1000B2C24(a1, (uint64_t ***)&v5);
}

_OWORD *sub_1000B2AA0(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_1000284FC((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    sub_1000284A8(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *sub_1000B2B28(uint64_t **a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  __int128 v14;
  uint64_t v15;

  v2 = *a2;
  if (*a2 == *a1)
    return *a1;
  v4 = *v2;
  if (*v2)
  {
    do
    {
      v5 = v4;
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
  }
  else
  {
    v6 = (uint64_t)*a2;
    do
    {
      v5 = *(_QWORD *)(v6 + 16);
      v7 = *(_QWORD *)v5 == v6;
      v6 = v5;
    }
    while (v7);
  }
  v8 = v2[4];
  if ((v2[6] & 2) == 0)
    ++v8;
  if (v8 == (*(_BYTE *)(v5 + 48) & 1) + *(_QWORD *)(v5 + 40))
  {
    v14 = *((_OWORD *)v2 + 2);
    v15 = v2[6];
    sub_100040DA8(a1, v2);
    operator delete(v2);
    v10 = *(_OWORD *)(v5 + 32);
    v11 = *(_QWORD *)(v5 + 48);
    sub_1000B2D28((unint64_t *)&v10, (unint64_t *)&v14, (uint64_t)&v12);
    *(_OWORD *)(v5 + 32) = v12;
    *(_BYTE *)(v5 + 48) = v13;
    *a2 = (uint64_t *)v5;
    return (uint64_t *)v5;
  }
  return v2;
}

uint64_t **sub_1000B2C24(uint64_t **a1, uint64_t ***a2)
{
  uint64_t **v3;
  uint64_t **result;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  __int128 v13;
  uint64_t *v14;
  __int128 v15;
  char v16;
  __int128 v17;
  uint64_t *v18;

  v3 = a1 + 1;
  result = *a2;
  if (*a2 == v3)
    return v3;
  v6 = result[1];
  if (v6)
  {
    do
    {
      v7 = (uint64_t **)v6;
      v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  else
  {
    v8 = *a2;
    do
    {
      v7 = (uint64_t **)v8[2];
      v9 = *v7 == (uint64_t *)v8;
      v8 = v7;
    }
    while (!v9);
  }
  if (v7 != v3)
  {
    v10 = v7[4];
    if (((_BYTE)v7[6] & 2) == 0)
      v10 = (uint64_t *)((char *)v10 + 1);
    if (v10 == (uint64_t *)((char *)result[5] + ((_BYTE)result[6] & 1)))
    {
      v17 = *((_OWORD *)v7 + 2);
      v18 = v7[6];
      sub_100040DA8(a1, (uint64_t *)v7);
      operator delete(v7);
      v11 = *a2;
      v13 = *((_OWORD *)*a2 + 2);
      v14 = v11[6];
      sub_1000B2D28((unint64_t *)&v13, (unint64_t *)&v17, (uint64_t)&v15);
      v12 = *a2;
      *((_OWORD *)v12 + 2) = v15;
      *((_BYTE *)v12 + 48) = v16;
      return *a2;
    }
  }
  return result;
}

unint64_t *sub_1000B2D28@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  unint64_t v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t *v8;
  char v9;
  unint64_t v10;
  char v11;
  int v12;
  int v13;
  unint64_t v15;

  v3 = *((unsigned __int8 *)a2 + 16);
  if (*((_BYTE *)a2 + 16))
  {
    if (v3 == 3)
    {
      v5 = (uint64_t *)*a2;
      v4 = a2[1];
      if (v4 >= *a2)
        goto LABEL_4;
LABEL_24:
      *(_OWORD *)a3 = *(_OWORD *)result;
      v15 = result[2];
LABEL_33:
      *(_QWORD *)(a3 + 16) = v15;
      return result;
    }
    v5 = (uint64_t *)*a2;
    v4 = a2[1];
    if (*a2 >= v4)
      goto LABEL_24;
  }
  else
  {
    v5 = (uint64_t *)*a2;
    v4 = a2[1];
    if (*a2 >= v4 || *a2 + 1 >= v4)
      goto LABEL_24;
  }
LABEL_4:
  v6 = *((unsigned __int8 *)result + 16);
  if (!*((_BYTE *)result + 16))
  {
    v8 = (uint64_t *)*result;
    v7 = result[1];
    if (*result < v7 && *result + 1 < v7)
      goto LABEL_7;
    goto LABEL_32;
  }
  if (v6 != 3)
  {
    v8 = (uint64_t *)*result;
    v7 = result[1];
    if (*result < v7)
      goto LABEL_7;
    goto LABEL_32;
  }
  v8 = (uint64_t *)*result;
  v7 = result[1];
  if (v7 < *result)
  {
LABEL_32:
    *(_OWORD *)a3 = *(_OWORD *)a2;
    v15 = a2[2];
    goto LABEL_33;
  }
LABEL_7:
  v9 = v6 & 2;
  if ((v6 & 2) != 0)
    v10 = (unint64_t)v8;
  else
    v10 = (unint64_t)v8 + 1;
  v11 = v3 & 2;
  if ((v3 & 2) != 0)
    result = (unint64_t *)v5;
  else
    result = (unint64_t *)((char *)v5 + 1);
  v12 = v6 & 1;
  v13 = v3 & 1;
  if (v10 >= (unint64_t)result)
    v9 = v11;
  else
    v5 = v8;
  if (v7 + v12 - 1 >= v4 + v13 - 1)
  {
    v4 = v7;
    LOBYTE(v13) = v12;
  }
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v4;
  *(_BYTE *)(a3 + 16) = v13 | v9;
  return result;
}

uint64_t sub_1000B2E1C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  v3 = v4;
  if (v4)
  {
    v5 = (*(_BYTE *)(a2 + 16) & 1) + *(_QWORD *)(a2 + 8) - 1;
    do
    {
      v6 = *(_QWORD *)(v3 + 32);
      if ((*(_BYTE *)(v3 + 48) & 2) == 0)
        ++v6;
      v7 = v5 >= v6;
      if (v5 >= v6)
        v8 = (uint64_t *)(v3 + 8);
      else
        v8 = (uint64_t *)v3;
      if (!v7)
        result = v3;
      v3 = *v8;
    }
    while (*v8);
  }
  return result;
}

uint64_t sub_1000B2E64(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 v16;
  uint64_t v17;
  unint64_t v18[3];
  __int128 v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23[3];
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v6 = sub_1000B3144((uint64_t)a1, (uint64_t)a2);
  v7 = v6;
  v8 = *(uint64_t **)(v6 + 8);
  if (v8)
  {
    do
    {
      v9 = v8;
      v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  else
  {
    v10 = v6;
    do
    {
      v9 = *(uint64_t **)(v10 + 16);
      v11 = *v9 == v10;
      v10 = (uint64_t)v9;
    }
    while (!v11);
  }
  v12 = *(uint64_t **)(a3 + 8);
  if (v12)
  {
    do
    {
      v13 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v14 = (uint64_t *)a3;
    do
    {
      v13 = (uint64_t *)v14[2];
      v11 = *v13 == (_QWORD)v14;
      v14 = v13;
    }
    while (!v11);
  }
  v24 = *(_OWORD *)(v6 + 32);
  v25 = *(_QWORD *)(v6 + 48);
  sub_1000B2F9C((unint64_t *)&v24, (uint64_t)a2, (uint64_t)&v26);
  v21 = *(_OWORD *)(a3 + 32);
  v22 = *(_QWORD *)(a3 + 48);
  sub_1000B3070((uint64_t)&v21, (uint64_t)a2, (uint64_t)v23);
  sub_1000B2910(a1, v9, v13);
  v16 = v26;
  v17 = v27;
  sub_1000B2D28((unint64_t *)&v16, a2, (uint64_t)v18);
  sub_1000B2D28(v18, v23, (uint64_t)&v19);
  *(_OWORD *)(v7 + 32) = v19;
  *(_BYTE *)(v7 + 48) = v20;
  return v7;
}

unint64_t *sub_1000B2F9C@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;

  v3 = *((unsigned __int8 *)result + 16);
  if (*((_BYTE *)result + 16))
  {
    if (v3 == 3)
    {
      v4 = *result;
      v5 = result[1];
      if (v5 < *result)
        goto LABEL_27;
    }
    else
    {
      v4 = *result;
      v5 = result[1];
      if (*result >= v5)
        goto LABEL_27;
    }
  }
  else
  {
    v4 = *result;
    v5 = result[1];
    if (*result >= v5 || *result + 1 >= v5)
      goto LABEL_27;
  }
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a2 + 16))
  {
    v8 = *(_QWORD *)a2;
    v9 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 >= v9 || *(_QWORD *)a2 + 1 >= v9)
      goto LABEL_27;
    goto LABEL_23;
  }
  if (v7 != 3)
  {
    v8 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 < *(_QWORD *)(a2 + 8))
      goto LABEL_23;
LABEL_27:
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_QWORD *)(a3 + 16) = result[2];
    return result;
  }
  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)(a2 + 8) < *(_QWORD *)a2)
    goto LABEL_27;
LABEL_23:
  v11 = (v3 & 1) + v5 - 1;
  if ((v7 & 2) != 0)
    v12 = v8;
  else
    v12 = v8 + 1;
  if (v11 < v12)
    goto LABEL_27;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v8;
  *(_BYTE *)(a3 + 16) = v3 & 2 | ((~v7 & 2) != 0);
  return result;
}

uint64_t sub_1000B3070@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  unint64_t v4;
  int v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    if (v3 == 3)
    {
      v4 = *(_QWORD *)(a2 + 8);
      if (v4 < *(_QWORD *)a2)
        goto LABEL_26;
    }
    else
    {
      v4 = *(_QWORD *)(a2 + 8);
      if (*(_QWORD *)a2 >= v4)
        goto LABEL_26;
    }
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 >= v4 || *(_QWORD *)a2 + 1 >= v4)
      goto LABEL_26;
  }
  v6 = *(unsigned __int8 *)(result + 16);
  if (!*(_BYTE *)(result + 16))
  {
    v8 = *(_QWORD *)result;
    v7 = *(_QWORD *)(result + 8);
    if (*(_QWORD *)result >= v7 || *(_QWORD *)result + 1 >= v7)
      goto LABEL_26;
    goto LABEL_23;
  }
  if (v6 != 3)
  {
    v8 = *(_QWORD *)result;
    v7 = *(_QWORD *)(result + 8);
    if (*(_QWORD *)result < v7)
      goto LABEL_23;
LABEL_26:
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(result + 16);
    return result;
  }
  v8 = *(_QWORD *)result;
  v7 = *(_QWORD *)(result + 8);
  if (v7 < *(_QWORD *)result)
    goto LABEL_26;
LABEL_23:
  if ((v6 & 2) == 0)
    ++v8;
  if ((v3 & 1) + v4 - 1 < v8)
    goto LABEL_26;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 16) = v6 & 1 | (2 * ((v3 & 1) == 0));
  return result;
}

uint64_t sub_1000B3144(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  v3 = v4;
  if (v4)
  {
    v5 = *(_QWORD *)a2;
    if ((*(_BYTE *)(a2 + 16) & 2) == 0)
      ++v5;
    do
    {
      v6 = (*(_BYTE *)(v3 + 48) & 1) + *(_QWORD *)(v3 + 40) - 1;
      v7 = v6 >= v5;
      if (v6 >= v5)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (v7)
        result = v3;
      v3 = *v8;
    }
    while (*v8);
  }
  return result;
}

uint64_t sub_1000B318C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001842C8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B31F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B3208(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001844E8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B3270(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B3284(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100184708;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B32EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B3300(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100184928;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B3368(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B337C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100184B48;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000B33E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_1000B3460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000B34D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000B3538(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000B36F8(_Unwind_Exception *a1, int a2)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  DIError *v9;
  uint64_t v10;
  void *v11;

  v6 = v5;

  if (a2 == 1)
  {
    v9 = +[DIError errorWithDIException:description:prefix:error:](DIError, "errorWithDIException:description:prefix:error:", __cxa_begin_catch(a1), 0, 0, 0);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    v11 = (void *)v3[6];
    v3[6] = v10;

    __cxa_end_catch();
    JUMPOUT(0x1000B36D8);
  }

  _Unwind_Resume(a1);
}

void sub_1000B3784()
{
  JUMPOUT(0x1000B3728);
}

void sub_1000B378C()
{
  __cxa_end_catch();
  JUMPOUT(0x1000B3728);
}

void sub_1000B38B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000B3A50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000B3C8C(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v7;
  void *v8;

  if (a2 == 1)
  {
    v7 = objc_msgSend(objc_begin_catch(a1), "reason");
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    +[DIError failWithEnumValue:verboseInfo:error:](DIError, "failWithEnumValue:verboseInfo:error:", 150, v8, v2);

    objc_end_catch();
    JUMPOUT(0x1000B3C54);
  }
  _Unwind_Resume(a1);
}

void sub_1000B4264(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000B44D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000B4834(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000B4950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000B4B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint8_t buf, int a14, __int16 a15, uint64_t a16, __int16 a17, uint64_t a18, __int16 a19, uint64_t a20,__int16 a21,int a22)
{
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;

  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:](DIError, "failWithDIException:prefix:error:", __cxa_begin_catch(a1), CFSTR("Failed opening the shadow/cache file(s)"), v23);
    __cxa_end_catch();
    JUMPOUT(0x1000B4B20);
  }

  _Unwind_Resume(a1);
}

void sub_1000B4F1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000B4FD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000B5018(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000B5064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000B5240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100012168((uint64_t)&a9);
  sub_100012168((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1000B5370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000B53DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000B5490(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000B5520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000B5628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000B56D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000B5780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000B5854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000B58E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000B59E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000B5B60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000B5D80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000B5E40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000B5EE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000B5EF0(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint8_t buf[4];
  int v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  void *v46;

  v5 = a2;
  v6 = v5;
  v7 = 514;
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 41))
      v7 = 514;
    else
      v7 = 2562;
  }
  if (objc_msgSend(v5, "isCache"))
  {
    objc_msgSend(v6, "createBackendWithFlags:", v7);
    v8 = *__error();
    if (sub_1000BF0BC())
    {
      v40 = 0;
      v9 = sub_1000BF044();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        v11 = 3;
      else
        v11 = 2;
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "URL"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "path"));
      *(_DWORD *)buf = 68158211;
      v42 = 61;
      v43 = 2080;
      v44 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      v45 = 2113;
      v46 = v13;
      v14 = (char *)_os_log_send_and_compose_impl(v11, &v40, 0, 0, &_mh_execute_header, v10, 0, "%.*s: Cache file %{private}@ opened with RW access", buf, 28);

      if (v14)
      {
        fprintf(__stderrp, "%s\n", v14);
        free(v14);
      }
    }
    else
    {
      v17 = sub_1000BF044();
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "URL"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "path"));
        *(_DWORD *)buf = 68158211;
        v42 = 61;
        v43 = 2080;
        v44 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
        v45 = 2113;
        v46 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%.*s: Cache file %{private}@ opened with RW access", buf, 0x1Cu);

      }
    }
    goto LABEL_42;
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nodes"));
    if ((char *)objc_msgSend(v15, "count") - 1 == a3)
      v16 = v7;
    else
      v16 = 0;

  }
  else
  {
    v16 = 0;
  }
  objc_msgSend(v6, "createBackendWithFlags:", v16);
  if ((v16 & 3) != 0)
  {
    v8 = *__error();
    if (sub_1000BF0BC())
    {
      v40 = 0;
      v21 = sub_1000BF044();
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        v23 = 3;
      else
        v23 = 2;
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "URL"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "path"));
      *(_DWORD *)buf = 68158211;
      v42 = 61;
      v43 = 2080;
      v44 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      v45 = 2113;
      v46 = v25;
      v26 = (char *)_os_log_send_and_compose_impl(v23, &v40, 0, 0, &_mh_execute_header, v22, 0, "%.*s: Shadow file %{private}@ opened with RW access", buf, 28);

      if (!v26)
        goto LABEL_42;
      goto LABEL_34;
    }
    v32 = sub_1000BF044();
    v33 = objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "URL"));
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "path"));
      *(_DWORD *)buf = 68158211;
      v42 = 61;
      v43 = 2080;
      v44 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      v45 = 2113;
      v46 = v35;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "%.*s: Shadow file %{private}@ opened with RW access", buf, 0x1Cu);

    }
  }
  else
  {
    v8 = *__error();
    if (sub_1000BF0BC())
    {
      v40 = 0;
      v27 = sub_1000BF044();
      v28 = objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        v29 = 3;
      else
        v29 = 2;
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "URL"));
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "path"));
      *(_DWORD *)buf = 68158211;
      v42 = 61;
      v43 = 2080;
      v44 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      v45 = 2113;
      v46 = v31;
      v26 = (char *)_os_log_send_and_compose_impl(v29, &v40, 0, 0, &_mh_execute_header, v28, 0, "%.*s: Using an existing shadow file: %{private}@", buf, 28);

      if (!v26)
        goto LABEL_42;
LABEL_34:
      fprintf(__stderrp, "%s\n", v26);
      free(v26);
      goto LABEL_42;
    }
    v36 = sub_1000BF044();
    v37 = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "URL"));
      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "path"));
      *(_DWORD *)buf = 68158211;
      v42 = 61;
      v43 = 2080;
      v44 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      v45 = 2113;
      v46 = v39;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%.*s: Using an existing shadow file: %{private}@", buf, 0x1Cu);

    }
  }
LABEL_42:
  *__error() = v8;

}

void sub_1000B64B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint8_t buf, int a14, __int16 a15, uint64_t a16, __int16 a17, uint64_t a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1000B6C00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000B6D9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000B6E0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000B6EB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000B6F3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000B6FC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_1000B6FE0(id a1, DIShadowNode *a2, NSDictionary *a3)
{
  return !-[DIShadowNode isCache](a2, "isCache", a3);
}

void sub_1000B73D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  void *v21;

  if (a21)
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&a19);
  sub_100012168((uint64_t)&a13);

  _Unwind_Resume(a1);
}

void sub_1000B75A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1000B7668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000B76E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000B7F68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000B7F84(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  void *exception;
  _QWORD v5[33];
  uint64_t v6;

  v6 = 0;
  v3 = objc_retainAutorelease(a1);
  if (objc_msgSend(v3, "decodeBytesForKey:returnedLength:", CFSTR("crypto_header"), &v6))
  {
    if (v6 == 76)
      operator new();
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)v5);
    sub_100005A0C(v5, (uint64_t)"Unexpected crypto header length (", 33);
    std::ostream::operator<<(v5, v6);
    sub_100005A0C(v5, (uint64_t)")", 1);
    sub_100012294((uint64_t)exception, (uint64_t)v5, 0x9Au);
  }
  *a2 = 0;

}

void sub_1000B8094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_10000FE34((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1000B8140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000B8290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100012168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000B8380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_1000B847C()
{
  operator delete();
}

void sub_1000B85C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000B8848(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000B8BB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v19 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  sub_100058808((uint64_t)va);

  sub_100012168((uint64_t)va1);
  sub_100012168((uint64_t)va2);

  _Unwind_Resume(a1);
}

void sub_1000B8D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100012168((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1000B9010(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000B91D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_100012168((uint64_t)va1);
  sub_100012168((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1000B9374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  void *v12;
  void *v13;

  sub_100012168((uint64_t)&a11);
  sub_100012168((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1000B94E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_100012168((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1000B97BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a7);
  sub_100012168((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1000B9824()
{
  JUMPOUT(0x1000B9814);
}

void sub_1000B982C(void *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  id v6;
  id v7;
  id v8;
  const void *v9;
  uint64_t v10;
  void *v11[3];
  void *v12;
  void *v13;
  uint64_t v14;
  void *__p;
  void *v16;
  __n128 v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  size_t v22;
  size_t v23;

  v22 = 0;
  v23 = 0;
  v5 = objc_retainAutorelease(a1);
  v6 = objc_msgSend(v5, "decodeBytesForKey:returnedLength:", CFSTR("encKeys"), &v23);
  v7 = objc_retainAutorelease(v5);
  v8 = objc_msgSend(v7, "decodeBytesForKey:returnedLength:", CFSTR("prngKeys"), &v22);
  if (v6 && (v9 = v8) != 0)
  {
    v20 = 0;
    v21 = 0;
    v19 = 0;
    sub_1000BD878(&v19, v6, (uint64_t)v6 + v23, v23);
    v18 = 0;
    v17 = 0uLL;
    sub_1000BD878(&v17, v9, (uint64_t)v9 + v22, v22);
    sub_100116A0C(v11, (uint64_t)&v19, &v17, a2);
    sub_10005AAD0(a3);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    v10 = v14;
    v14 = 0;
    if (v10)
      operator delete();
    if (v12)
    {
      v13 = v12;
      operator delete(v12);
    }
    if (v11[0])
    {
      v11[1] = v11[0];
      operator delete(v11[0]);
    }
    if (v17.n128_u64[0])
    {
      v17.n128_u64[1] = v17.n128_u64[0];
      operator delete((void *)v17.n128_u64[0]);
    }
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }

}

void sub_1000B9988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;
  uint64_t v22;
  void *v24;

  sub_100058808((uint64_t)&a10);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  v24 = *(void **)(v22 - 96);
  if (v24)
  {
    *(_QWORD *)(v22 - 88) = v24;
    operator delete(v24);
  }

  _Unwind_Resume(a1);
}

void sub_1000B9BDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  sub_100012168(v4 - 48);
  _Unwind_Resume(a1);
}

void sub_1000B9C34(void *a1, _QWORD *a2)
{
  id v3;

  v3 = a1;
  objc_msgSend(v3, "encodeBytes:length:forKey:", a2[6], 76, CFSTR("crypto_header"));
  objc_msgSend(v3, "encodeBytes:length:forKey:", *a2, a2[1] - *a2, CFSTR("encKeys"));
  objc_msgSend(v3, "encodeBytes:length:forKey:", a2[3], a2[4] - a2[3], CFSTR("prngKeys"));

}

void sub_1000B9CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000B9DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_100012168((uint64_t)va1);
  sub_100012168((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1000B9F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_100012168((uint64_t)va1);
  sub_100012168((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1000B9FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100012168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000BA12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  sub_100012168((uint64_t)va);
  sub_100012168(v6 - 32);

  _Unwind_Resume(a1);
}

void sub_1000BA2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  sub_100012168((uint64_t)&a9);
  sub_100012168((uint64_t)&a13);

  _Unwind_Resume(a1);
}

void sub_1000BA3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  sub_100012168((uint64_t)&a11);
  sub_100012168((uint64_t)&a9);

  _Unwind_Resume(a1);
}

#error "1000BA6E4: call analysis failed (funcsize=120)"

void sub_1000BA980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  void *v12;
  void *v13;

  sub_100012168((uint64_t)&a11);
  sub_100012168((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1000BAAB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000BABB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000BAD50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000BAFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a8);
  sub_100012168((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1000BB14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  sub_100012168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000BB290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_100012168((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1000BB45C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000BB630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000BB6F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000BB8C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000BBB60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000BBC4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000BBEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_100012168((uint64_t)va2);
  sub_100012168((uint64_t)va1);
  sub_100012168((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1000BC1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_100012168((uint64_t)va1);
  sub_100012168((uint64_t)va);
  sub_100012168((uint64_t)va2);

  _Unwind_Resume(a1);
}

void sub_1000BC2AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000BC568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  void *v16;

  sub_100012168((uint64_t)&a11);
  sub_100012168((uint64_t)&a9);
  sub_100012168((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_1000BC82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  sub_100012168((uint64_t)va1);
  sub_100012168((uint64_t)va);
  sub_100012168((uint64_t)va2);

  _Unwind_Resume(a1);
}

uint64_t sub_1000BC89C(void *a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  NSObject *v26;
  int v28;
  uint64_t v29;
  NSObject *v30;
  _BOOL4 v31;
  id v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  NSObject *v36;
  const char *v37;
  uint64_t v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  id v44;
  __int16 v45;
  void *v46;

  if (a1 && a2 && a3)
  {
    v5 = a1;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v6));
    if (v8)
    {
      v9 = objc_opt_class(NSData, v7);
      if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0 && objc_msgSend(v8, "length"))
      {
        v10 = malloc_type_malloc((size_t)objc_msgSend(v8, "length"), 0x2E7B6484uLL);
        *a3 = v10;
        if (v10)
        {
          v11 = objc_retainAutorelease(v8);
          memcpy(v10, objc_msgSend(v11, "bytes"), (size_t)objc_msgSend(v11, "length"));
          v12 = (uint64_t)objc_msgSend(v11, "length");
        }
        else
        {
          v28 = *__error();
          if (sub_1000BF0BC())
          {
            v38 = 0;
            v29 = sub_1000BF044();
            v30 = objc_claimAutoreleasedReturnValue(v29);
            v31 = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
            v32 = objc_msgSend(v8, "length");
            *(_DWORD *)buf = 68158466;
            if (v31)
              v33 = 3;
            else
              v33 = 2;
            v40 = 59;
            v41 = 2080;
            v42 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
            v43 = 2048;
            v44 = v32;
            v45 = 2112;
            v46 = v6;
            v34 = (char *)_os_log_send_and_compose_impl(v33, &v38, 0, 0, &_mh_execute_header, v30, 16, "%.*s: Out of memory, failed to allocated %zu bytes for key %@", buf, 38);

            if (v34)
            {
              fprintf(__stderrp, "%s\n", v34);
              free(v34);
            }
          }
          else
          {
            v35 = sub_1000BF044();
            v36 = objc_claimAutoreleasedReturnValue(v35);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 68158466;
              v40 = 59;
              v41 = 2080;
              v42 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
              v43 = 2048;
              v44 = objc_msgSend(v8, "length");
              v45 = 2112;
              v46 = v6;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%.*s: Out of memory, failed to allocated %zu bytes for key %@", buf, 0x26u);
            }

          }
          *__error() = v28;
          v12 = -12;
        }
      }
      else
      {
        v20 = *__error();
        if (sub_1000BF0BC())
        {
          v38 = 0;
          v21 = sub_1000BF044();
          v22 = objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            v23 = 3;
          else
            v23 = 2;
          *(_DWORD *)buf = 68158210;
          v40 = 59;
          v41 = 2080;
          v42 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
          v43 = 2112;
          v44 = v6;
          v24 = (char *)_os_log_send_and_compose_impl(v23, &v38, 0, 0, &_mh_execute_header, v22, 16, "%.*s: Invalid key: %@", buf, 28);

          if (v24)
          {
            fprintf(__stderrp, "%s\n", v24);
            free(v24);
          }
        }
        else
        {
          v25 = sub_1000BF044();
          v26 = objc_claimAutoreleasedReturnValue(v25);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 68158210;
            v40 = 59;
            v41 = 2080;
            v42 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
            v43 = 2112;
            v44 = v6;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%.*s: Invalid key: %@", buf, 0x1Cu);
          }

        }
        *__error() = v20;
        v12 = -22;
      }
    }
    else
    {
      v12 = -2;
    }

  }
  else
  {
    v13 = *__error();
    if (sub_1000BF0BC())
    {
      v38 = 0;
      v14 = sub_1000BF044();
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        v16 = 3;
      else
        v16 = 2;
      *(_DWORD *)buf = 68157954;
      v40 = 59;
      v41 = 2080;
      v42 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
      LODWORD(v37) = 18;
      v17 = (char *)_os_log_send_and_compose_impl(v16, &v38, 0, 0, &_mh_execute_header, v15, 16, "%.*s: Missing parameters", (int)buf, v37);

      if (v17)
      {
        fprintf(__stderrp, "%s\n", v17);
        free(v17);
      }
    }
    else
    {
      v18 = sub_1000BF044();
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        v40 = 59;
        v41 = 2080;
        v42 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }

    }
    *__error() = v13;
    return -22;
  }
  return v12;
}

void sub_1000BCDFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

uint64_t sub_1000BCE58(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  const char *v24;
  uint64_t v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  void *v31;

  if (a1 && a2)
  {
    v3 = a1;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v4));
    if (v6)
    {
      v7 = objc_opt_class(NSFileHandle, v5);
      if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0)
      {
        v8 = dup((int)objc_msgSend(v6, "fileDescriptor"));
        if ((v8 & 0x80000000) != 0)
          v8 = -*__error();
      }
      else
      {
        v16 = *__error();
        if (sub_1000BF0BC())
        {
          v25 = 0;
          v17 = sub_1000BF044();
          v18 = objc_claimAutoreleasedReturnValue(v17);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            v19 = 3;
          else
            v19 = 2;
          *(_DWORD *)buf = 68158210;
          v27 = 42;
          v28 = 2080;
          v29 = "int plugin_decode_fd(void *, const char *)";
          v30 = 2112;
          v31 = v4;
          v20 = (char *)_os_log_send_and_compose_impl(v19, &v25, 0, 0, &_mh_execute_header, v18, 16, "%.*s: Invalid key: %@", buf, 28);

          if (v20)
          {
            fprintf(__stderrp, "%s\n", v20);
            free(v20);
          }
        }
        else
        {
          v21 = sub_1000BF044();
          v22 = objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 68158210;
            v27 = 42;
            v28 = 2080;
            v29 = "int plugin_decode_fd(void *, const char *)";
            v30 = 2112;
            v31 = v4;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%.*s: Invalid key: %@", buf, 0x1Cu);
          }

        }
        *__error() = v16;
        v8 = 4294967274;
      }
    }
    else
    {
      v8 = 4294967294;
    }

  }
  else
  {
    v9 = *__error();
    if (sub_1000BF0BC())
    {
      v25 = 0;
      v10 = sub_1000BF044();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        v12 = 3;
      else
        v12 = 2;
      *(_DWORD *)buf = 68157954;
      v27 = 42;
      v28 = 2080;
      v29 = "int plugin_decode_fd(void *, const char *)";
      LODWORD(v24) = 18;
      v13 = (char *)_os_log_send_and_compose_impl(v12, &v25, 0, 0, &_mh_execute_header, v11, 16, "%.*s: Missing parameters", (int)buf, v24);

      if (v13)
      {
        fprintf(__stderrp, "%s\n", v13);
        free(v13);
      }
    }
    else
    {
      v14 = sub_1000BF044();
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        v27 = 42;
        v28 = 2080;
        v29 = "int plugin_decode_fd(void *, const char *)";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }

    }
    *__error() = v9;
    return 4294967274;
  }
  return v8;
}

void sub_1000BD1E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000BD308(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000BD32C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  id v17;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;

  if (a1 && a2 && a3 && a4)
  {
    v17 = a1;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a3, a4));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", v8, v7);

  }
  else
  {
    v9 = *__error();
    if (sub_1000BF0BC())
    {
      v18 = 0;
      v10 = sub_1000BF044();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        v12 = 3;
      else
        v12 = 2;
      *(_DWORD *)buf = 68157954;
      v20 = 69;
      v21 = 2080;
      v22 = "void plugin_encode_buffer(void *, const char *, const void *, size_t)";
      LODWORD(v16) = 18;
      v13 = (char *)_os_log_send_and_compose_impl(v12, &v18, 0, 0, &_mh_execute_header, v11, 16, "%.*s: Missing parameters", (int)buf, v16);

      if (v13)
      {
        fprintf(__stderrp, "%s\n", v13);
        free(v13);
      }
    }
    else
    {
      v14 = sub_1000BF044();
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        v20 = 69;
        v21 = 2080;
        v22 = "void plugin_encode_buffer(void *, const char *, const void *, size_t)";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }

    }
    *__error() = v9;
  }
}

void sub_1000BD558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1000BD58C(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  id v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  id v15;
  uint64_t v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;

  if (a1 && a2 && (a3 & 0x80000000) == 0)
  {
    v15 = a1;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
    v6 = objc_msgSend(objc_alloc((Class)NSFileHandle), "initWithFileDescriptor:", a3);
    objc_msgSend(v15, "setObject:forKeyedSubscript:", v6, v5);

  }
  else
  {
    v7 = *__error();
    if (sub_1000BF0BC())
    {
      v16 = 0;
      v8 = sub_1000BF044();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        v10 = 3;
      else
        v10 = 2;
      *(_DWORD *)buf = 68157954;
      v18 = 48;
      v19 = 2080;
      v20 = "void plugin_encode_fd(void *, const char *, int)";
      LODWORD(v14) = 18;
      v11 = (char *)_os_log_send_and_compose_impl(v10, &v16, 0, 0, &_mh_execute_header, v9, 16, "%.*s: Missing parameters", (int)buf, v14);

      if (v11)
      {
        fprintf(__stderrp, "%s\n", v11);
        free(v11);
      }
    }
    else
    {
      v12 = sub_1000BF044();
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        v18 = 48;
        v19 = 2080;
        v20 = "void plugin_encode_fd(void *, const char *, int)";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }

    }
    *__error() = v7;
  }
}

void sub_1000BD7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

_QWORD *sub_1000BD878(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = sub_1000588F0(result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1000BD8D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000BD8F0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x60uLL);
  result = sub_1000BD968(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1000BD954(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BD968(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100176CC0;
  sub_100117350((_DWORD)a1 + 24);
  return a1;
}

void sub_1000BD9A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000BD9B8(char **a1@<X1>, unsigned int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x470uLL);
  sub_1000BDA20(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_1000196D4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000BDA0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BDA20(_QWORD *a1, char **a2, unsigned int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100175730;
  sub_1000BDA68((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1000BDA54(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BDA68(uint64_t a1, char **a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v9;

  sub_100005870(__p, *a2);
  v5 = *a3;
  v6 = sub_1001017E8((uint64_t)__p, v5);
  sub_100046E20(a1, v6, (v5 & 3) != 0, 0);
  if (v9 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1000BDAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000BDAF4(unsigned int *a1@<X1>, unsigned __int8 *a2@<X2>, char *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0x470uLL);
  sub_1000BDB6C(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1000196D4((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_1000BDB58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BDB6C(_QWORD *a1, unsigned int *a2, unsigned __int8 *a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100175730;
  sub_100046E20((uint64_t)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_1000BDBAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000BDBC0(unsigned int *a1@<X1>, unsigned __int8 *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0xB0uLL);
  sub_1000BDC40(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_1000196D4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000BDC2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BDC40(_QWORD *a1, unsigned int *a2, unsigned __int8 *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100185310;
  sub_10006BF68(a1 + 3, *a2, *a3);
  return a1;
}

void sub_1000BDC7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000BDC90(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100185310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000BDCA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100185310;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000BDCD0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1000BDCE0(char **a1@<X1>, _DWORD *a2@<X2>, unint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xB0uLL);
  sub_1000BDD58(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1000196D4((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_1000BDD44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BDD58(_QWORD *a1, char **a2, _DWORD *a3, unint64_t *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100185310;
  sub_1000BDDA0((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1000BDD8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BDDA0(uint64_t a1, char **a2, _DWORD *a3, unint64_t *a4)
{
  unint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  __int128 v12;

  sub_100005870(__p, *a2);
  LODWORD(a3) = *a3;
  v7 = *a4;
  *(_QWORD *)&v12 = sub_100120770();
  *((_QWORD *)&v12 + 1) = v8;
  sub_10006BC8C(a1, (uint64_t)__p, (__int16)a3, v7, &v12);
  if (v11 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1000BDE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void sub_1000BDE6C(char **a1@<X1>, _DWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0xB0uLL);
  sub_1000BDED4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_1000196D4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000BDEC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BDED4(_QWORD *a1, char **a2, _DWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100185310;
  sub_1000BDF1C((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1000BDF08(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BDF1C(uint64_t a1, char **a2, _DWORD *a3)
{
  uint64_t v5;
  void *__p[2];
  char v8;
  __int128 v9;

  sub_100005870(__p, *a2);
  LODWORD(a3) = *a3;
  *(_QWORD *)&v9 = sub_100120770();
  *((_QWORD *)&v9 + 1) = v5;
  sub_10006BC8C(a1, (uint64_t)__p, (__int16)a3, 0, &v9);
  if (v8 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1000BDFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void sub_1000BDFD8(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x48uLL);
  sub_1000BE038(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1000196D4((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1000BE024(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BE038(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100173F20;
  v3 = *a2;
  v4 = sub_100120770();
  v6 = v5;
  sub_10011E7DC(a1 + 3);
  a1[3] = off_100173F70;
  a1[6] = v3;
  a1[7] = v4;
  a1[8] = v6;
  return a1;
}

void sub_1000BE09C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000BE0B0(size_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x80uLL);
  sub_1000BE118(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_1000196D4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000BE104(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BE118(_QWORD *a1, size_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100185360;
  sub_1000BE1BC(a1 + 3, *a2, *a3, a3[1]);
  return a1;
}

void sub_1000BE158(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000BE16C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100185360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000BE17C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100185360;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000BE1AC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1000BE1BC(_QWORD *a1, size_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  std::bad_alloc *exception;
  std::bad_alloc *v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;

  v8 = sub_10011E7DC(a1);
  *v8 = off_100190460;
  v8[3] = 0;
  v9 = v8 + 3;
  v8[7] = 0;
  v8[9] = a2;
  v8[10] = a3;
  v8[11] = a4;
  v10 = malloc_type_valloc(a2, 0xF8ED6DDuLL);
  if (!v10)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v15 = std::bad_alloc::bad_alloc(exception);
  }
  v18[0] = off_1001853B0;
  v19 = v18;
  v16 = v10;
  sub_1000181E0((uint64_t)&v17, (uint64_t)v18);
  v11 = v19;
  if (v19 == v18)
  {
    v12 = 4;
    v11 = v18;
    goto LABEL_6;
  }
  if (v19)
  {
    v12 = 5;
LABEL_6:
    (*(void (**)(_QWORD *))(*v11 + 8 * v12))(v11);
  }
  sub_100011C54(v9, (uint64_t *)&v16);
  sub_100017CC8((uint64_t *)&v16);
  a1[8] = a1[3];
  a1[12] = getpagesize();
  return a1;
}

void sub_1000BE308(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  std::__shared_weak_count *v4;

  sub_100017CC8(v2);
  v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

void sub_1000BE32C()
{
  operator delete();
}

_QWORD *sub_1000BE340()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1001853B0;
  return result;
}

void sub_1000BE364(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1001853B0;
}

void sub_1000BE37C(uint64_t a1, void **a2)
{
  free(*a2);
}

uint64_t sub_1000BE384(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_100185410))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000BE3C0()
{
  return &off_100185410;
}

void sub_1000BE3CC(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x48uLL);
  sub_1000BE434(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_1000196D4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000BE420(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BE434(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100173F20;
  v4 = *a2;
  v5 = *a3;
  v6 = a3[1];
  sub_10011E7DC(a1 + 3);
  a1[3] = off_100173F70;
  a1[6] = v4;
  a1[7] = v5;
  a1[8] = v6;
  return a1;
}

void sub_1000BE48C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000BE4A0(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0xE0uLL);
  sub_1000BE508(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_1000196D4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000BE4F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BE508(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100176D10;
  v5 = 0;
  sub_10011849C(a1 + 3, a2, a3, &v5);
  return a1;
}

void sub_1000BE54C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000BE560(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0xE0uLL);
  sub_1000BE5C8(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_1000196D4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000BE5B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BE5C8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100176D10;
  v5 = 0;
  sub_10011849C(a1 + 3, a2, a3, &v5);
  return a1;
}

void sub_1000BE60C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000BE620(_QWORD *a1@<X8>)
{
  _QWORD *v2;

  v2 = operator new(0x68uLL);
  sub_1000BE680(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  sub_1000196D4((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_1000BE66C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BE680(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100185430;
  sub_1000EDD54(a1 + 3);
  return a1;
}

void sub_1000BE6B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000BE6C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100185430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000BE6D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100185430;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000BE708(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1000BE718(_QWORD *a1@<X8>)
{
  _QWORD *v2;

  v2 = operator new(0x68uLL);
  sub_1000BE778(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  sub_1000196D4((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_1000BE764(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BE778(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100185430;
  sub_1000EDD54(a1 + 3);
  return a1;
}

void sub_1000BE7AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000BE7C0(_QWORD *a1@<X8>)
{
  _QWORD *v2;

  v2 = operator new(0x70uLL);
  sub_1000BE828(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  sub_1000196D4((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_1000BE814(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BE828(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100185480;
  sub_1000FF990(a1 + 3);
  return a1;
}

void sub_1000BE85C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000BE870(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100185480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000BE880(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100185480;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000BE8B0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1000BE8C0@<X0>(char **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = sub_1000BE918(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1000BE904(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BE918(_QWORD *a1, char **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001854D0;
  sub_100005870(a1 + 3, *a2);
  return a1;
}

void sub_1000BE954(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000BE968(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001854D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000BE97C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001854D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1000BE9B0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_1000BE9C8(uint64_t a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x50uLL);
  sub_1000BEA40(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_1000196D4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000BEA2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BEA40(_QWORD *a1, uint64_t a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100185520;
  sub_10010D9A4(a1 + 3, a2, *a3);
  return a1;
}

void sub_1000BEA78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000BEA8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100185520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000BEA9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100185520;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000BEACC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1000BEADC@<X0>(char **a1@<X1>, uint64_t *a2@<X2>, unsigned int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x40uLL);
  result = sub_1000BEB4C(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1000BEB38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BEB4C(_QWORD *a1, char **a2, uint64_t *a3, unsigned int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100185570;
  sub_1000BEBE0((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1000BEB80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000BEB94(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100185570;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000BEBA4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100185570;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000BEBD4(uint64_t a1)
{
  return sub_1000BEC78(a1 + 24);
}

uint64_t sub_1000BEBE0(uint64_t a1, char **a2, uint64_t *a3, unsigned int *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v10[3];
  void *__p[2];
  char v12;

  sub_100005870(__p, *a2);
  v7 = *a3;
  v8 = *a4;
  memset(v10, 0, sizeof(v10));
  sub_100063524(a1, __p, v7, v8 | (unint64_t)&_mh_execute_header, v10, 0);
  if (v12 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1000BEC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000BEC78(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return sub_100012168(a1);
}

void sub_1000BECA8(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x40uLL);
  sub_1000BED08(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1000196D4((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1000BECF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BED08(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001855C0;
  sub_10011E7DC(a1 + 3);
  a1[3] = off_100185610;
  v4 = a2[1];
  a1[6] = *a2;
  a1[7] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return a1;
}

void sub_1000BED6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000BED80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001855C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000BED90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001855C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000BEDC0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1000BEDD0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = off_100185610;
  sub_100012168((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_1000BEE0C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = off_100185610;
  sub_100012168((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete();
}

uint64_t sub_1000BEE58()
{
  return 4294967251;
}

uint64_t sub_1000BEE60(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 24) + 16))();
  return (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 24) + 8))() * v2;
}

_QWORD *sub_1000BEEA4(uint64_t a1)
{
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD **)(a1 + 24));
}

uint64_t sub_1000BEEB4()
{
  return 4294967251;
}

_QWORD *sub_1000BEEBC(uint64_t a1, _QWORD *a2)
{
  return sub_100005A0C(a2, (uint64_t)"BackendPlugin", 13);
}

uint64_t sub_1000BEED0()
{
  return 4294967251;
}

uint64_t sub_1000BEED8()
{
  return 4294967251;
}

uint64_t sub_1000BEEE0(uint64_t a1)
{
  return sub_10006041C(*(_QWORD *)(a1 + 24));
}

_QWORD *sub_1000BEEE8@<X0>(char **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x40uLL);
  result = sub_1000BEF70(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1000BEF5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BEF70(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100185570;
  sub_1000BEFB8((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1000BEFA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BEFB8(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  void *__p[2];
  char v11;

  sub_100005870(__p, *a2);
  sub_100063524(a1, __p, 0, 0, a5, *a6);
  if (v11 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1000BF028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000BF044()
{
  if (qword_1001A0FC8 != -1)
    dispatch_once(&qword_1001A0FC8, &stru_1001856F8);
  return qword_1001A0FC0;
}

void sub_1000BF084(id a1)
{
  qword_1001A0FC0 = (uint64_t)os_log_create("com.apple.DiskImages2", "Default");
}

uint64_t sub_1000BF0B0(uint64_t result)
{
  byte_1001A0FD0 = result;
  return result;
}

uint64_t sub_1000BF0BC()
{
  return byte_1001A0FD0;
}

uint64_t sub_1000BF0C8(uint64_t result)
{
  byte_1001A0FD1 = result;
  return result;
}

uint64_t sub_1000BF0D4()
{
  return byte_1001A0FD1;
}

const void **sub_1000BF0E0@<X0>(uint64_t a1@<X1>, char a2@<W2>, const __CFArray **a3@<X8>)
{
  const __CFArray *Mutable;
  int *v7;
  int *v8;
  CFIndex Count;
  const __CFString *v10;
  __CFArray *v11;
  uint64_t v12;
  uint64_t j;
  uint64_t i;
  char *v15;
  uint64_t v17;
  const __CFString **v18;
  uint64_t v19;
  void *value;
  const __CFString *v21;
  char *v22;
  CFArrayRef theArray;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  uint64_t v27;

  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4), &kCFTypeArrayCallBacks);
  theArray = Mutable;
  v7 = *(int **)(a1 + 16);
  v8 = *(int **)(a1 + 24);
  if (v7 != v8)
  {
    do
    {
      (*(void (**)(char **__return_ptr, _QWORD, _QWORD))(**((_QWORD **)v7 + 3) + 48))(&v22, *((_QWORD *)v7 + 3), 0);
      Count = CFArrayGetCount(theArray);
      v10 = CFSTR("Base");
      if (Count != -1 - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4))
        v10 = off_100186478[*v7];
      v21 = v10;
      v11 = theArray;
      if ((a2 & 4) != 0)
      {
        v24 = CFSTR("Role");
        v25 = v10;
        CFRetain(v10);
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 96)] + 16))(&v17);
        v26 = CFSTR("Image");
        v27 = v17;
        v17 = 0;
        v18 = &v24;
        v19 = 2;
        sub_1000FE38C((uint64_t *)&v18, (CFMutableDictionaryRef *)&value);
        CFArrayAppendValue(v11, value);
        sub_100028068((const void **)&value);
        for (i = 24; i != -8; i -= 16)
          sub_100028038((const void **)((char *)&v24 + i));
        sub_100012138((const void **)&v17);
      }
      else
      {
        v24 = CFSTR("Role");
        v25 = v10;
        CFRetain(v10);
        v12 = (*(uint64_t (**)(char *))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 96)] + 24))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 96)]);
        v26 = CFSTR("Image Format");
        v27 = v12;
        v18 = &v24;
        v19 = 2;
        sub_1000FE38C((uint64_t *)&v18, (CFMutableDictionaryRef *)&value);
        CFArrayAppendValue(v11, value);
        sub_100028068((const void **)&value);
        for (j = 24; j != -8; j -= 16)
          sub_100028038((const void **)((char *)&v24 + j));
      }
      sub_100027D2C((const void **)&v21);
      v15 = v22;
      v22 = 0;
      if (v15)
        (*(void (**)(char *))(*(_QWORD *)v15 + 8))(v15);
      v7 += 12;
    }
    while (v7 != v8);
    Mutable = theArray;
  }
  *a3 = Mutable;
  theArray = 0;
  return sub_10002815C((const void **)&theArray);
}

void sub_1000BF354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, const void *a14, const void *a15, uint64_t a16, const void *a17, char a18)
{
  uint64_t i;
  uint64_t v20;

  sub_100028068(&a14);
  for (i = 24; i != -8; i -= 16)
    sub_100028038((const void **)(&a18 + i));
  sub_100012138(&a11);
  sub_100027D2C(&a15);
  v20 = a16;
  a16 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  sub_10002815C(&a17);
  _Unwind_Resume(a1);
}

CFTypeRef *sub_1000BF420(CFTypeRef *a1, CFTypeRef *a2)
{
  if (*a2)
    CFRetain(*a2);
  if (*a1)
    CFRelease(*a1);
  *a1 = *a2;
  return a1;
}

uint64_t *sub_1000BF464(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef *v6;
  CFTypeRef *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v25;
  _QWORD v26[3];

  *a1 = (uint64_t)off_100185C50;
  a1[7] = (uint64_t)off_100185DB8;
  a1[8] = (uint64_t)off_100185E00;
  a1[9] = (uint64_t)off_100186088;
  a1[3] = (uint64_t)off_1001860E0;
  a1[4] = (uint64_t)off_100185CE0;
  *((_BYTE *)a1 + 96) = 0;
  *((_BYTE *)a1 + 104) = 0;
  *((_BYTE *)a1 + 112) = 0;
  *((_BYTE *)a1 + 120) = 0;
  a1[17] = (uint64_t)off_1001861D0;
  a1[5] = (uint64_t)off_100186228;
  a1[6] = (uint64_t)off_100185D70;
  *((_BYTE *)a1 + 144) = 0;
  *((_BYTE *)a1 + 152) = 0;
  a1[20] = 0;
  sub_1000BF7F4(a1 + 21, (uint64_t *)&off_100185BD0, a2);
  *a1 = (uint64_t)off_100185798;
  a1[3] = (uint64_t)off_1001857E0;
  a1[4] = (uint64_t)off_100185828;
  a1[5] = (uint64_t)off_100185870;
  a1[6] = (uint64_t)off_1001858B8;
  a1[7] = (uint64_t)off_100185900;
  a1[8] = (uint64_t)off_100185948;
  a1[9] = (uint64_t)off_1001859A8;
  a1[17] = (uint64_t)off_100185A18;
  a1[1] = 0;
  v6 = (CFTypeRef *)(a1 + 1);
  a1[2] = 0;
  v7 = (CFTypeRef *)(a1 + 2);
  a1[21] = (uint64_t)off_100185A88;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(v8 + 24);
  v10 = *(std::__shared_weak_count **)(v8 + 32);
  v26[1] = v9;
  v26[2] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v26, v9, a3);
  v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v26[0] + *(_QWORD *)(*(_QWORD *)v26[0] - 24)) + 16))(v26[0] + *(_QWORD *)(*(_QWORD *)v26[0] - 24));
  v14 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 112) + 16) = *(_QWORD *)(v13 + 16);
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v14 - 112) + 8) = *(_QWORD *)(v13 + 8);
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v14 - 112) + 56) = *(_QWORD *)(v13 + 56);
  v15 = (uint64_t)a1 + *(_QWORD *)(v14 - 112);
  v16 = *(_QWORD *)(v13 + 40);
  *(_BYTE *)(v15 + 48) = *(_BYTE *)(v13 + 48);
  *(_QWORD *)(v15 + 40) = v16;
  v17 = (uint64_t)a1 + *(_QWORD *)(*a1 - 112);
  v18 = *(_QWORD *)(v13 + 24);
  *(_BYTE *)(v17 + 32) = *(_BYTE *)(v13 + 32);
  *(_QWORD *)(v17 + 24) = v18;
  v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v26[0] + *(_QWORD *)(*(_QWORD *)v26[0] - 64)) + 16))(v26[0] + *(_QWORD *)(*(_QWORD *)v26[0] - 64));
  sub_1000BF420((CFTypeRef *)((char *)a1 + *(_QWORD *)(*a1 - 128) + 16), (CFTypeRef *)(v19 + 16));
  sub_1000BF420((CFTypeRef *)((char *)a1 + *(_QWORD *)(*a1 - 128) + 24), (CFTypeRef *)(v19 + 24));
  sub_1000BF0E0(a2, a3, (const __CFArray **)&v25);
  if (*v6)
    CFRelease(*v6);
  *v6 = v25;
  v25 = 0;
  sub_10009D440(&v25);
  v20 = (const void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(v26[0] + *(_QWORD *)(*(_QWORD *)v26[0] - 96))
                                                        + 24))(v26[0] + *(_QWORD *)(*(_QWORD *)v26[0] - 96));
  v25 = v20;
  if (*v7)
  {
    CFRelease(*v7);
    v20 = v25;
  }
  *v7 = v20;
  v25 = 0;
  sub_100027D2C(&v25);
  v21 = v26[0];
  v26[0] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (v10)
  {
    v22 = (unint64_t *)&v10->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return a1;
}

void sub_1000BF758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, char a11)
{
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t v16;
  uint64_t v18;

  sub_100027D2C(&a9);
  v18 = a10;
  a10 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  sub_100012168((uint64_t)&a11);
  sub_100027D2C(v14);
  sub_10009D440(v15);
  sub_1000263F0(v13, (uint64_t *)&off_100185BD0);
  *(_QWORD *)(v11 + 136) = v16;
  *(_QWORD *)(v11 + 40) = v16 + 88;
  sub_100027D2C(v12);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000BF7F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFStringRef v10;
  const __CFString *v12;
  const __CFUUID *v13;
  CFUUIDBytes v14;

  *a1 = (uint64_t)off_100170D88;
  v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v4 - 24)) = a2[2];
  v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v5 - 24)) = a2[3];
  a1[1] = 0;
  a1[2] = 0;
  v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0;
  v7 = sub_10005B13C(*(uint64_t (****)(_QWORD))(*(_QWORD *)(a3 + 16) + 24));
  v9 = v8;
  *(_QWORD *)&v14.byte0 = v7;
  *(_QWORD *)&v14.byte8 = v9;
  v13 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v14);
  v10 = CFUUIDCreateString(kCFAllocatorDefault, v13);
  v12 = v10;
  if (*v6)
  {
    CFRelease(*v6);
    v10 = v12;
  }
  a1[1] = (uint64_t)v10;
  v12 = 0;
  sub_100027D2C((const void **)&v12);
  sub_10002818C((const void **)&v13);
  return a1;
}

void sub_1000BF8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  uint64_t v10;
  const void **v11;

  sub_100027D2C(&a9);
  sub_10002818C(&a10);
  sub_100027D2C((const void **)(v10 + 24));
  sub_100027D2C((const void **)(v10 + 16));
  sub_100027D2C(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BF920(uint64_t a1)
{
  *(_QWORD *)a1 = off_100185798;
  *(_QWORD *)(a1 + 24) = off_1001857E0;
  *(_QWORD *)(a1 + 32) = off_100185828;
  *(_QWORD *)(a1 + 40) = off_100185870;
  *(_QWORD *)(a1 + 48) = off_1001858B8;
  *(_QWORD *)(a1 + 56) = off_100185900;
  *(_QWORD *)(a1 + 64) = off_100185948;
  *(_QWORD *)(a1 + 72) = off_1001859A8;
  *(_QWORD *)(a1 + 136) = off_100185A18;
  *(_QWORD *)(a1 + 168) = off_100185A88;
  sub_100027D2C((const void **)(a1 + 16));
  sub_10009D440((const void **)(a1 + 8));
  *(_QWORD *)(a1 + 168) = off_100186318;
  *(_QWORD *)(a1 + 64) = off_100186370;
  sub_100027D2C((const void **)(a1 + 192));
  sub_100027D2C((const void **)(a1 + 184));
  sub_100027D2C((const void **)(a1 + 176));
  *(_QWORD *)(a1 + 136) = off_1001861D0;
  *(_QWORD *)(a1 + 40) = off_100186228;
  sub_100027D2C((const void **)(a1 + 160));
  return a1;
}

void sub_1000BF9E0(uint64_t a1)
{
  *(_QWORD *)a1 = off_100185798;
  *(_QWORD *)(a1 + 24) = off_1001857E0;
  *(_QWORD *)(a1 + 32) = off_100185828;
  *(_QWORD *)(a1 + 40) = off_100185870;
  *(_QWORD *)(a1 + 48) = off_1001858B8;
  *(_QWORD *)(a1 + 56) = off_100185900;
  *(_QWORD *)(a1 + 64) = off_100185948;
  *(_QWORD *)(a1 + 72) = off_1001859A8;
  *(_QWORD *)(a1 + 136) = off_100185A18;
  *(_QWORD *)(a1 + 168) = off_100185A88;
  sub_100027D2C((const void **)(a1 + 16));
  sub_10009D440((const void **)(a1 + 8));
  *(_QWORD *)(a1 + 168) = off_100186318;
  *(_QWORD *)(a1 + 64) = off_100186370;
  sub_100027D2C((const void **)(a1 + 192));
  sub_100027D2C((const void **)(a1 + 184));
  sub_100027D2C((const void **)(a1 + 176));
  *(_QWORD *)(a1 + 136) = off_1001861D0;
  *(_QWORD *)(a1 + 40) = off_100186228;
  sub_100027D2C((const void **)(a1 + 160));
  operator delete();
}

const void **sub_1000BFAB0@<X0>(CFArrayRef *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  CFNumberRef v5;
  CFArrayRef v6;
  uint64_t i;
  const void *v9;
  uint64_t v10[2];
  const void *v11;
  CFIndex valuePtr;
  _QWORD v13[14];

  v4 = (*((uint64_t (**)(CFArrayRef *))*a1 + 3))(a1);
  v13[0] = CFSTR("Image Format");
  v13[1] = v4;
  v13[2] = CFSTR("Format Description");
  v13[3] = CFSTR("Stackable image");
  sub_100026A84((uint64_t)a1 + *((_QWORD *)*a1 - 14), &valuePtr);
  v13[4] = CFSTR("Size Info");
  v13[5] = valuePtr;
  valuePtr = 0;
  sub_100012138((const void **)&valuePtr);
  sub_100026DA8((uint64_t)a1 + *((_QWORD *)*a1 - 15), &valuePtr);
  v13[6] = CFSTR("Encryption Info");
  v13[7] = valuePtr;
  valuePtr = 0;
  sub_100012138((const void **)&valuePtr);
  sub_100027574((CFArrayRef *)((char *)a1 + *((_QWORD *)*a1 - 16)), &valuePtr);
  v13[8] = CFSTR("Identity Info");
  v13[9] = valuePtr;
  valuePtr = 0;
  sub_100012138((const void **)&valuePtr);
  valuePtr = CFArrayGetCount(a1[1]);
  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
  v13[10] = CFSTR("Images Count");
  v13[11] = v5;
  v9 = 0;
  v6 = a1[1];
  v13[12] = CFSTR("Stack Info");
  v13[13] = v6;
  if (v6)
    CFRetain(v6);
  v10[0] = (uint64_t)v13;
  v10[1] = 7;
  sub_1000FE38C(v10, (CFMutableDictionaryRef *)&v11);
  *a2 = v11;
  v11 = 0;
  sub_100028068(&v11);
  for (i = 13; i != -1; i -= 2)
    sub_100028038((const void **)&v13[i]);
  return sub_1000C0040(&v9);
}

void sub_1000BFC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  const void **v14;

  sub_1000C0040(&a9);
  do
  {
    sub_100028038(v14 - 1);
    v14 -= 2;
  }
  while (v14 != (const void **)&a14);
  _Unwind_Resume(a1);
}

const __CFString *sub_1000BFCE8()
{
  return CFSTR("STCK");
}

const void **sub_1000BFCF4(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = off_100185798;
  *((_QWORD *)v1 + 3) = off_1001857E0;
  *((_QWORD *)v1 + 4) = off_100185828;
  *((_QWORD *)v1 + 5) = off_100185870;
  *((_QWORD *)v1 + 6) = off_1001858B8;
  *((_QWORD *)v1 + 7) = off_100185900;
  *((_QWORD *)v1 + 8) = off_100185948;
  *((_QWORD *)v1 + 9) = off_1001859A8;
  *((_QWORD *)v1 + 17) = off_100185A18;
  *((_QWORD *)v1 + 21) = off_100185A88;
  sub_100027D2C((const void **)v1 + 2);
  sub_10009D440((const void **)v1 + 1);
  *((_QWORD *)v1 + 21) = off_100186318;
  *((_QWORD *)v1 + 8) = off_100186370;
  sub_100027D2C((const void **)v1 + 24);
  sub_100027D2C((const void **)v1 + 23);
  sub_100027D2C((const void **)v1 + 22);
  *((_QWORD *)v1 + 17) = off_1001861D0;
  *((_QWORD *)v1 + 5) = off_100186228;
  return sub_100027D2C((const void **)v1 + 20);
}

void sub_1000BFDB4(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = off_100185798;
  *((_QWORD *)v1 + 3) = off_1001857E0;
  *((_QWORD *)v1 + 4) = off_100185828;
  *((_QWORD *)v1 + 5) = off_100185870;
  *((_QWORD *)v1 + 6) = off_1001858B8;
  *((_QWORD *)v1 + 7) = off_100185900;
  *((_QWORD *)v1 + 8) = off_100185948;
  *((_QWORD *)v1 + 9) = off_1001859A8;
  *((_QWORD *)v1 + 17) = off_100185A18;
  *((_QWORD *)v1 + 21) = off_100185A88;
  sub_100027D2C((const void **)v1 + 2);
  sub_10009D440((const void **)v1 + 1);
  *((_QWORD *)v1 + 21) = off_100186318;
  *((_QWORD *)v1 + 8) = off_100186370;
  sub_100027D2C((const void **)v1 + 24);
  sub_100027D2C((const void **)v1 + 23);
  sub_100027D2C((const void **)v1 + 22);
  *((_QWORD *)v1 + 17) = off_1001861D0;
  *((_QWORD *)v1 + 5) = off_100186228;
  sub_100027D2C((const void **)v1 + 20);
  operator delete();
}

const void **sub_1000BFE8C(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 32);
  *(_QWORD *)v1 = off_100185798;
  *((_QWORD *)v1 + 3) = off_1001857E0;
  *((_QWORD *)v1 + 4) = off_100185828;
  *((_QWORD *)v1 + 5) = off_100185870;
  *((_QWORD *)v1 + 6) = off_1001858B8;
  *((_QWORD *)v1 + 7) = off_100185900;
  *((_QWORD *)v1 + 8) = off_100185948;
  *((_QWORD *)v1 + 9) = off_1001859A8;
  *((_QWORD *)v1 + 17) = off_100185A18;
  *((_QWORD *)v1 + 21) = off_100185A88;
  sub_100027D2C((const void **)v1 + 2);
  sub_10009D440((const void **)v1 + 1);
  *((_QWORD *)v1 + 21) = off_100186318;
  *((_QWORD *)v1 + 8) = off_100186370;
  sub_100027D2C((const void **)v1 + 24);
  sub_100027D2C((const void **)v1 + 23);
  sub_100027D2C((const void **)v1 + 22);
  *((_QWORD *)v1 + 17) = off_1001861D0;
  *((_QWORD *)v1 + 5) = off_100186228;
  return sub_100027D2C((const void **)v1 + 20);
}

void sub_1000BFF4C(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 32);
  *(_QWORD *)v1 = off_100185798;
  *((_QWORD *)v1 + 3) = off_1001857E0;
  *((_QWORD *)v1 + 4) = off_100185828;
  *((_QWORD *)v1 + 5) = off_100185870;
  *((_QWORD *)v1 + 6) = off_1001858B8;
  *((_QWORD *)v1 + 7) = off_100185900;
  *((_QWORD *)v1 + 8) = off_100185948;
  *((_QWORD *)v1 + 9) = off_1001859A8;
  *((_QWORD *)v1 + 17) = off_100185A18;
  *((_QWORD *)v1 + 21) = off_100185A88;
  sub_100027D2C((const void **)v1 + 2);
  sub_10009D440((const void **)v1 + 1);
  *((_QWORD *)v1 + 21) = off_100186318;
  *((_QWORD *)v1 + 8) = off_100186370;
  sub_100027D2C((const void **)v1 + 24);
  sub_100027D2C((const void **)v1 + 23);
  sub_100027D2C((const void **)v1 + 22);
  *((_QWORD *)v1 + 17) = off_1001861D0;
  *((_QWORD *)v1 + 5) = off_100186228;
  sub_100027D2C((const void **)v1 + 20);
  operator delete();
}

const void **sub_1000C0024@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000BFAB0((CFArrayRef *)((char *)a1 + *(_QWORD *)(*a1 - 40)), a2);
}

const __CFString *sub_1000C0034()
{
  return CFSTR("STCK");
}

const void **sub_1000C0040(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_1000C0070(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  std::__shared_weak_count *v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[8];
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;

  if (*(_QWORD *)sub_1000C1DBC(a2 + 32, *(_QWORD *)(a2 + 176)))
  {
    v4 = *(_QWORD *)(a2 + 352);
    v5 = *(_QWORD *)(a2 + 360);
    v28 = 0u;
    v29 = 0u;
    sub_1000C5078(a2 + 200, v26);
    v6 = a1 + 2;
    if (v4 == v5)
    {
      v11 = 0;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(v4 + 8 * v8) * *(unsigned int *)(a2 + 96);
        if (v9)
        {
          ++*(uint64_t *)((char *)v6 + *(_QWORD *)(*a1 - 136));
          sub_1000CDDC8((unint64_t *)(a2 + 200), (uint64_t)v26, v8, v9, 0, 1, (unint64_t *)buf);
          if (*(_QWORD *)buf && !*(_BYTE *)(*(_QWORD *)buf + 520))
          {
            if (*(_BYTE *)(*(_QWORD *)buf + 400))
              v10 = *(_QWORD *)buf + 40;
            else
              v10 = 0;
            sub_1000C101C(a1, v10, (uint64_t)v26, &v28);
          }
          sub_1000C1E4C((unint64_t *)buf);
        }
        ++v8;
        v7 += 8;
      }
      while (v4 + v7 != v5);
      v11 = *((_QWORD *)&v28 + 1);
    }
    v12 = *v6;
    *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 112) + 56) -= v12
                                                            + (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2)
                                                            * v11;
    v13 = *((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1) && sub_1000BF0D4())
    {
      v14 = *__error();
      if (sub_1000BF0BC())
      {
        v25 = 0;
        v15 = sub_1000BF044();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          v16 = 3;
        else
          v16 = 2;
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)&buf[4] = 71;
        v31 = 2080;
        v32 = "void info::DiskImageInfoASIF::count_used_extents(const DiskImageASIF &)";
        v33 = 2048;
        v34 = v13;
        LODWORD(v23) = 28;
        v17 = (const char *)_os_log_send_and_compose_impl(v16, &v25, 0, 0, &_mh_execute_header, v15, 2, "%.*s: WARNING: Found %llu sectors with invalid flags (has_bitmap)", (int)buf, v23, v24);
        if (v17)
        {
          v18 = (char *)v17;
          fprintf(__stderrp, "%s\n", v17);
          free(v18);
        }
      }
      else
      {
        v19 = sub_1000BF044();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68158210;
          *(_DWORD *)&buf[4] = 71;
          v31 = 2080;
          v32 = "void info::DiskImageInfoASIF::count_used_extents(const DiskImageASIF &)";
          v33 = 2048;
          v34 = v13;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "%.*s: WARNING: Found %llu sectors with invalid flags (has_bitmap)", buf, 0x1Cu);
        }
      }
      *__error() = v14;
    }
    v26[0] = off_100187458;
    v20 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_1000C0380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100012168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000C03E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;

  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  *(_QWORD *)&v26 = *a1;
  *((_QWORD *)&v26 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v24 = v3;
    v25 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v24 = v3;
    v25 = 0;
  }
  do
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v26 + 168))(v26, a2);
    sub_100027CB4(&v24, (uint64_t *)&v26);
    sub_10011EB40((uint64_t)&v26, &v23);
    v8 = v23;
    v23 = 0uLL;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    v26 = v8;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v26;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    v14 = v24;
    if (*((_QWORD *)&v23 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  while (v12 != v14);
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1000C056C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_100012168((uint64_t)va);
  sub_100012168((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C058C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  CFStringRef v6;
  CFTypeRef *v7;
  uint64_t result;
  CFUUIDBytes v9;
  CFStringRef v10;
  CFTypeRef *v11;
  const __CFString *v12;
  const void *v13[3];
  const void *v14[6];
  CFUUIDBytes v15;

  v4 = sub_1000D5128(a2);
  v14[4] = (const void *)v4;
  v14[5] = (const void *)v5;
  if (v4 | v5)
  {
    *(_QWORD *)&v15.byte8 = v5;
    *(_QWORD *)&v15.byte0 = v4;
    v14[0] = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v15);
    v6 = CFUUIDCreateString(kCFAllocatorDefault, (CFUUIDRef)v14[0]);
    v13[0] = v6;
    v7 = (CFTypeRef *)((char *)a1 + *(_QWORD *)(*a1 - 128));
    if (v7[3])
    {
      CFRelease(v7[3]);
      v6 = (CFStringRef)v13[0];
    }
    v7[3] = v6;
    v13[0] = 0;
    sub_100027D2C(v13);
    sub_10002818C(v14);
  }
  result = sub_1000D511C(a2);
  *(_QWORD *)&v9.byte8 = *(_QWORD *)&v9.byte0;
  v14[0] = (const void *)result;
  v14[1] = *(const void **)&v9.byte0;
  if (result | *(_QWORD *)&v9.byte0)
  {
    *(_QWORD *)&v9.byte0 = result;
    v13[0] = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v9);
    v10 = CFUUIDCreateString(kCFAllocatorDefault, (CFUUIDRef)v13[0]);
    v12 = v10;
    v11 = (CFTypeRef *)((char *)a1 + *(_QWORD *)(*a1 - 128));
    if (v11[2])
    {
      CFRelease(v11[2]);
      v10 = v12;
    }
    v11[2] = v10;
    v12 = 0;
    sub_100027D2C((const void **)&v12);
    return (uint64_t)sub_10002818C(v13);
  }
  return result;
}

void sub_1000C06E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  sub_100027D2C((const void **)va);
  sub_10002818C((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1000C0728(_QWORD *a1, const void *a2)
{
  CFMutableArrayRef Mutable;
  CFTypeRef *v5;
  const void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  CFMutableArrayRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  NSObject *v25;
  _QWORD *exception;
  const std::error_category *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[6];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int v36;
  _QWORD v37[3];
  std::__shared_weak_count *v38;
  void *value;
  __int16 v40;
  const char *v41;
  __int16 v42;
  uint64_t v43;
  const void *v44[3];
  char v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  _QWORD v49[3];
  _QWORD *v50;

  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v44[0] = Mutable;
  v5 = (CFTypeRef *)((char *)a1 + *(_QWORD *)(*a1 - 136));
  if (v5[10])
  {
    CFRelease(v5[10]);
    Mutable = (CFMutableArrayRef)v44[0];
  }
  v5[10] = Mutable;
  v44[0] = 0;
  sub_10002815C(v44);
  sub_1000C5078((uint64_t)a2 + 200, v37);
  v6 = *(const void **)((char *)a1 + *(_QWORD *)(*a1 - 112) + 16);
  v44[0] = a2;
  v44[1] = 0;
  v44[2] = v6;
  v45 = 2;
  v46 = 0;
  v47 = v37;
  v48 = 2;
  v7 = v49;
  v49[0] = off_100175480;
  v50 = v49;
  sub_100052388((uint64_t)v44, (uint64_t)&v32);
  sub_1000524BC((uint64_t)v44, (uint64_t)v31);
  while (sub_1000EBDF0((uint64_t)&v32, (uint64_t)v31))
  {
    if (v36 == 3)
    {
      v20 = *__error();
      if (sub_1000BF0BC())
      {
        v30 = 0;
        v21 = sub_1000BF044();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          v22 = 3;
        else
          v22 = 2;
        value = (void *)0x4B04100302;
        v40 = 2080;
        v41 = "void info::DiskImageInfoASIF::examine_mapped_extents(const DiskImageASIF &)";
        v42 = 2048;
        v43 = v33;
        LODWORD(v28) = 28;
        v23 = (const char *)_os_log_send_and_compose_impl(v22, &v30, 0, 0, &_mh_execute_header, v21, 16, "%.*s: Failed during ASIF extents enumeration on offset: %llu", (int)&value, v28, v29);
        if (v23)
        {
          v24 = (char *)v23;
          fprintf(__stderrp, "%s\n", v23);
          free(v24);
        }
      }
      else
      {
        v25 = sub_1000BF044();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          value = (void *)0x4B04100302;
          v40 = 2080;
          v41 = "void info::DiskImageInfoASIF::examine_mapped_extents(const DiskImageASIF &)";
          v42 = 2048;
          v43 = v33;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%.*s: Failed during ASIF extents enumeration on offset: %llu", (uint8_t *)&value, 0x1Cu);
        }
      }
      *__error() = v20;
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_1001924F8;
      v27 = std::generic_category();
      exception[1] = 22;
      exception[2] = v27;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "Failed during ASIF extents enumeration.";
    }
    v9 = v33;
    v8 = v34;
    v10 = v35;
    v11 = CFArrayCreateMutable(kCFAllocatorDefault, 2, &kCFTypeArrayCallBacks);
    value = v11;
    if ((v10 & 2) != 0)
      v12 = v9;
    else
      v12 = v9 + 1;
    sub_1000FDBDC(v11, v12);
    sub_1000FDBDC(value, (v10 & 1) + v8 - 1);
    CFArrayAppendValue(*(CFMutableArrayRef *)((char *)a1 + *(_QWORD *)(*a1 - 136) + 80), value);
    sub_10002815C((const void **)&value);
    sub_1000EC020(&v32);
  }
  v13 = v31[0];
  v31[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  v14 = v32;
  v32 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  if (v50 == v49)
  {
    v15 = 4;
  }
  else
  {
    if (!v50)
      goto LABEL_19;
    v15 = 5;
    v7 = v50;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v15))(v7);
LABEL_19:
  v16 = v46;
  v46 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  v37[0] = off_100187458;
  v17 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1000C0B40(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002815C((const void **)(v1 - 176));
  _Unwind_Resume(a1);
}

uint64_t *sub_1000C0C28(uint64_t *a1, _QWORD *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = (uint64_t)off_100186A68;
  a1[9] = (uint64_t)off_100186BD0;
  a1[10] = (uint64_t)off_100186C18;
  a1[11] = (uint64_t)off_100186EA0;
  a1[5] = (uint64_t)off_100186EF8;
  a1[6] = (uint64_t)off_100186AF8;
  *((_BYTE *)a1 + 112) = 0;
  *((_BYTE *)a1 + 120) = 0;
  *((_BYTE *)a1 + 128) = 0;
  *((_BYTE *)a1 + 136) = 0;
  a1[19] = (uint64_t)off_100186FE8;
  a1[7] = (uint64_t)off_100187040;
  a1[8] = (uint64_t)off_100186B88;
  *((_BYTE *)a1 + 160) = 0;
  *((_BYTE *)a1 + 168) = 0;
  a1[22] = 0;
  sub_1000C0EF4(a1 + 23, (uint64_t *)&off_1001869C8, (uint64_t)a2);
  a1[29] = 0;
  a1[37] = 0;
  *(_OWORD *)(a1 + 31) = 0u;
  *(_OWORD *)(a1 + 33) = 0u;
  *a1 = (uint64_t)off_100186518;
  a1[5] = (uint64_t)off_100186560;
  a1[6] = (uint64_t)off_1001865A8;
  a1[7] = (uint64_t)off_1001865F0;
  a1[8] = (uint64_t)off_100186638;
  a1[9] = (uint64_t)off_100186680;
  a1[10] = (uint64_t)off_1001866C8;
  a1[11] = (uint64_t)off_100186728;
  a1[19] = (uint64_t)off_100186798;
  a1[23] = (uint64_t)off_100186808;
  a1[27] = (uint64_t)off_100186878;
  *(_OWORD *)(a1 + 1) = 0u;
  *(_OWORD *)(a1 + 3) = 0u;
  v6 = (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  v7 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 112) + 16) = v6;
  v8 = *(uint64_t *)((char *)a1 + *(_QWORD *)(v7 - 112) + 16);
  v9 = (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
  v10 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 112) + 8) = v9 * v8;
  v11 = *((unsigned int *)a2 + 24);
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v10 - 136) + 24) = v11;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v10 - 136) + 64) = a2[11];
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v10 - 136) + 8) = a2[476];
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v10 - 112) + 56) = *(uint64_t *)((char *)a1 + *(_QWORD *)(v10 - 112) + 8);
  v12 = a2[13];
  if (v12)
  {
    v13 = v12 * v11;
  }
  else
  {
    v14 = a2[11];
    v13 = (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2) * v14;
    v10 = *a1;
  }
  v15 = (uint64_t)a1 + *(_QWORD *)(v10 - 112);
  *(_QWORD *)(v15 + 40) = v13;
  *(_BYTE *)(v15 + 48) = 1;
  v16 = (uint64_t)a1 + *(_QWORD *)(*a1 - 112);
  v17 = *((unsigned int *)a2 + 24);
  if (!*(_BYTE *)(v16 + 32))
    *(_BYTE *)(v16 + 32) = 1;
  *(_QWORD *)(v16 + 24) = v17;
  *((_BYTE *)a1 + *(_QWORD *)(*a1 - 136) + 72) = *((_BYTE *)a2 + 44) & 1;
  sub_1000C0070(a1, (uint64_t)a2);
  sub_1000C03E0(a2 + 2, (uint64_t)a1 + *(_QWORD *)(*a1 - 104));
  sub_1000C058C(a1, a2);
  if ((a3 & 2) != 0)
    sub_1000C0728(a1, a2);
  return a1;
}

void sub_1000C0E9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 216) = off_100187278;
  *(_QWORD *)(v1 + 72) = off_1001872D0;
  sub_10002815C((const void **)(v1 + 296));
  sub_1000263F0(v3, (uint64_t *)&off_1001869C8);
  *(_QWORD *)(v1 + 152) = v4;
  *(_QWORD *)(v1 + 56) = v4 + 88;
  sub_100027D2C(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000C0EF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFStringRef v10;
  const __CFString *v12;
  const __CFUUID *v13;
  CFUUIDBytes v14;

  *a1 = (uint64_t)off_100170D88;
  v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v4 - 24)) = a2[2];
  v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v5 - 24)) = a2[3];
  a1[1] = 0;
  a1[2] = 0;
  v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0;
  v7 = sub_1000D5134(a3);
  v9 = v8;
  *(_QWORD *)&v14.byte0 = v7;
  *(_QWORD *)&v14.byte8 = v9;
  v13 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v14);
  v10 = CFUUIDCreateString(kCFAllocatorDefault, v13);
  v12 = v10;
  if (*v6)
  {
    CFRelease(*v6);
    v10 = v12;
  }
  a1[1] = (uint64_t)v10;
  v12 = 0;
  sub_100027D2C((const void **)&v12);
  sub_10002818C((const void **)&v13);
  return a1;
}

void sub_1000C0FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  uint64_t v10;
  const void **v11;

  sub_100027D2C(&a9);
  sub_10002818C(&a10);
  sub_100027D2C((const void **)(v10 + 24));
  sub_100027D2C((const void **)(v10 + 16));
  sub_100027D2C(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C101C(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v20[5];
  _QWORD v21[10];
  _QWORD v22[11];

  result = sub_1000C609C(a2, a2, (uint64_t)v22);
  v7 = *(_QWORD *)(a2 + 352);
  v8 = a1 + 1;
  v9 = a1 + 3;
  v10 = a1 + 4;
  while (v22[0] != v22[5] || v22[1] != v22[6])
  {
    v11 = (_QWORD *)sub_1000C2EA8((uint64_t)v22);
    sub_1000C6120(a2, v11, (uint64_t)v21);
    while (v21[0] != v21[5] || v21[1] != v21[6])
    {
      *(_OWORD *)v20 = *(_OWORD *)sub_1000C2EA8((uint64_t)v21);
      v12 = sub_1000C3A64(v20);
      v13 = *a1;
      v14 = *(_QWORD *)((char *)v8 + *(_QWORD *)(*a1 - 112));
      v15 = v14 > v7;
      v16 = v14 - v7;
      if (v15)
      {
        if (v16 >= *(_QWORD *)((char *)v9 + *(_QWORD *)(v13 - 136)))
          v17 = *(_QWORD *)((char *)v9 + *(_QWORD *)(v13 - 136));
        else
          v17 = v16;
      }
      else
      {
        v17 = 0;
      }
      switch(v12)
      {
        case 0:
          ++*(_QWORD *)((char *)v10 + *(_QWORD *)(v13 - 136));
          *v8 += v17;
          break;
        case 1:
          ++*(uint64_t *)((char *)a1 + *(_QWORD *)(v13 - 136) + 40);
          a1[2] += v17;
          break;
        case 2:
          ++*(uint64_t *)((char *)a1 + *(_QWORD *)(v13 - 136) + 48);
          *v10 += v17;
          break;
        case 3:
          ++*(uint64_t *)((char *)a1 + *(_QWORD *)(v13 - 136) + 56);
          *v9 += v17;
          if (v17)
          {
            sub_1000C124C(a1, a2, a3, v20[0], v20[1], a4, v17);
            v13 = *a1;
          }
          break;
        default:
          break;
      }
      v7 += *(_QWORD *)((char *)v9 + *(_QWORD *)(v13 - 136));
      sub_1000C3070((uint64_t)v21, (uint64_t)v20);
    }
    result = sub_1000C2F60((uint64_t)v22, (uint64_t)v21);
  }
  return result;
}

_QWORD *sub_1000C121C(_QWORD *a1)
{
  *a1 = off_100187458;
  sub_100012168((uint64_t)(a1 + 2));
  return a1;
}

unint64_t *sub_1000C124C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *exception;
  const std::error_category *v26;
  unint64_t v27;
  _QWORD v28[2];

  v28[0] = a4;
  v28[1] = a5;
  v12 = sub_1000C3D20(v28);
  sub_1000C3A80(a2, a3, v12, 0, 1, &v27);
  v13 = (char *)a1 + *(_QWORD *)(*a1 - 112);
  v14 = *((_QWORD *)v13 + 1);
  v15 = *((_QWORD *)v13 + 2);
  if (v15 - 1 >= v14)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_1001924F8;
    v26 = std::generic_category();
    exception[1] = 22;
    exception[2] = v26;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Corrupted ASIF image.";
  }
  v16 = sub_1000C3E58(v28);
  v17 = v16 + a7;
  if (v16 < v17)
  {
    v18 = 0;
    v19 = v14 / v15;
    do
    {
      while (1)
      {
        if (v27)
          v20 = *(_BYTE *)(v27 + 224) ? (_QWORD *)(v27 + 40) : 0;
        else
          v20 = 0;
        v21 = sub_1000C3E80(v20, a2, v18, v16, v17);
        v22 = a6;
        v23 = (v21 - v16) / v19;
        if (v18)
        {
          v22 = a6 + 1;
          if (v18 == 2)
            break;
        }
        *v22 += v23;
        ++v18;
        v16 = v21;
      }
      v18 = 0;
      a6[2] += v23;
      v16 = v21;
    }
    while (v21 < v17);
  }
  return sub_1000C29D8(&v27);
}

void sub_1000C13E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000C29D8((unint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C1404(uint64_t a1)
{
  *(_QWORD *)a1 = off_1001876D8;
  *(_QWORD *)(a1 + 88) = off_100187730;
  sub_10002815C((const void **)(a1 + 80));
  return a1;
}

void sub_1000C1440(uint64_t a1)
{
  *(_QWORD *)a1 = off_1001876D8;
  *(_QWORD *)(a1 + 88) = off_100187730;
  sub_10002815C((const void **)(a1 + 80));
  operator delete();
}

const void **sub_1000C148C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  CFNumberRef v4;
  uint64_t v5;
  uint64_t i;
  const void *v7;
  const void *v9;
  uint64_t valuePtr;
  uint64_t **v11;
  uint64_t v12;
  const __CFString *v13;
  CFNumberRef v14;
  const __CFString *v15;
  CFNumberRef v16;
  const __CFString *v17;
  CFNumberRef v18;
  const __CFString *v19;
  CFNumberRef v20;
  const __CFString *v21;
  CFNumberRef v22;
  const __CFString *v23;
  CFNumberRef v24;
  const __CFString *v25;
  CFNumberRef v26;
  const __CFString *v27;
  CFNumberRef v28;
  uint64_t *v29;
  uint64_t v30;

  valuePtr = *(_QWORD *)(a1 + 8);
  v11 = (uint64_t **)CFSTR("Dir Pointer Version");
  v12 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  v13 = CFSTR("Num Tables");
  valuePtr = *(_QWORD *)(a1 + 16);
  v14 = 0;
  v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  v15 = CFSTR("Chunk Size");
  valuePtr = *(_QWORD *)(a1 + 24);
  v16 = 0;
  v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  v17 = CFSTR("Uninitialized Entries");
  valuePtr = *(_QWORD *)(a1 + 32);
  v18 = 0;
  v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  v19 = CFSTR("Full Entries");
  valuePtr = *(_QWORD *)(a1 + 40);
  v20 = 0;
  v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  v21 = CFSTR("Unmapped Entries");
  valuePtr = *(_QWORD *)(a1 + 48);
  v22 = 0;
  v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  v23 = CFSTR("Bitmapped Entries");
  valuePtr = *(_QWORD *)(a1 + 56);
  v24 = 0;
  v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  v25 = CFSTR("Max Sector Count");
  valuePtr = *(_QWORD *)(a1 + 64);
  v26 = 0;
  v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  v5 = *(unsigned __int8 *)(a1 + 72);
  v26 = v4;
  v27 = CFSTR("Is Cache");
  valuePtr = v5;
  v28 = 0;
  v28 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  v29 = (uint64_t *)&v11;
  v30 = 9;
  sub_1000FE38C((uint64_t *)&v29, (CFMutableDictionaryRef *)&v9);
  for (i = 17; i != -1; i -= 2)
    sub_100028038((const void **)&(&v11)[i]);
  v7 = *(const void **)(a1 + 80);
  if (v7)
  {
    v29 = (uint64_t *)CFSTR("Mapped Sectors");
    v30 = (uint64_t)v7;
    CFRetain(v7);
    v11 = &v29;
    v12 = 1;
    sub_1000FE344((CFMutableDictionaryRef *)&v9, (uint64_t *)&v11);
    sub_100028038((const void **)&v30);
  }
  *a2 = v9;
  v9 = 0;
  return sub_100028068(&v9);
}

void sub_1000C1710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void **v2;
  va_list va;

  va_start(va, a2);
  sub_100028038(v2);
  sub_100028068((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1000C1794()
{
  JUMPOUT(0x1000C178CLL);
}

const __CFString *sub_1000C179C()
{
  return CFSTR("ASIF Info");
}

const void **sub_1000C17B0(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = off_1001876D8;
  *((_QWORD *)v1 + 11) = off_100187730;
  return sub_10002815C((const void **)v1 + 10);
}

void sub_1000C17D8(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = off_1001876D8;
  *((_QWORD *)v1 + 11) = off_100187730;
  sub_10002815C((const void **)v1 + 10);
  operator delete();
}

char *sub_1000C182C(_QWORD *a1)
{
  return (char *)a1 + *(_QWORD *)(*a1 - 32);
}

char *sub_1000C183C(_QWORD *a1)
{
  return (char *)a1 + *(_QWORD *)(*a1 - 40);
}

uint64_t sub_1000C184C(uint64_t a1)
{
  *(_QWORD *)(a1 + 216) = off_100187278;
  *(_QWORD *)(a1 + 72) = off_1001872D0;
  sub_10002815C((const void **)(a1 + 296));
  *(_QWORD *)(a1 + 184) = off_100187130;
  *(_QWORD *)(a1 + 80) = off_100187188;
  sub_100027D2C((const void **)(a1 + 208));
  sub_100027D2C((const void **)(a1 + 200));
  sub_100027D2C((const void **)(a1 + 192));
  *(_QWORD *)(a1 + 152) = off_100186FE8;
  *(_QWORD *)(a1 + 56) = off_100187040;
  sub_100027D2C((const void **)(a1 + 176));
  return a1;
}

void sub_1000C18D0(uint64_t a1)
{
  *(_QWORD *)(a1 + 216) = off_100187278;
  *(_QWORD *)(a1 + 72) = off_1001872D0;
  sub_10002815C((const void **)(a1 + 296));
  *(_QWORD *)(a1 + 184) = off_100187130;
  *(_QWORD *)(a1 + 80) = off_100187188;
  sub_100027D2C((const void **)(a1 + 208));
  sub_100027D2C((const void **)(a1 + 200));
  sub_100027D2C((const void **)(a1 + 192));
  *(_QWORD *)(a1 + 152) = off_100186FE8;
  *(_QWORD *)(a1 + 56) = off_100187040;
  sub_100027D2C((const void **)(a1 + 176));
  operator delete();
}

const void **sub_1000C1964@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  const void **result;
  uint64_t v7[2];
  const void *v8;
  const void *v9;
  _QWORD v10[12];

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v10[0] = CFSTR("Image Format");
  v10[1] = v4;
  v10[2] = CFSTR("Format Description");
  v10[3] = CFSTR("Apple sparse image");
  sub_100026A84(a1 + *(_QWORD *)(*(_QWORD *)a1 - 112), &v9);
  v10[4] = CFSTR("Size Info");
  v10[5] = v9;
  v9 = 0;
  sub_100012138(&v9);
  sub_100026DA8(a1 + *(_QWORD *)(*(_QWORD *)a1 - 120), &v9);
  v10[6] = CFSTR("Encryption Info");
  v10[7] = v9;
  v9 = 0;
  sub_100012138(&v9);
  sub_1000C148C(a1 + *(_QWORD *)(*(_QWORD *)a1 - 136), &v9);
  v10[8] = CFSTR("ASIF Info");
  v10[9] = v9;
  v9 = 0;
  sub_100012138(&v9);
  sub_100027574((_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 128)), &v9);
  v10[10] = CFSTR("Identity Info");
  v10[11] = v9;
  v9 = 0;
  sub_100012138(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 6;
  sub_1000FE38C(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  v8 = 0;
  sub_100028068(&v8);
  for (i = 11; i != -1; i -= 2)
    result = sub_100028038((const void **)&v10[i]);
  return result;
}

void sub_1000C1B10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 88; i != -8; i -= 16)
    sub_100028038((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

const __CFString *sub_1000C1B54()
{
  return CFSTR("ASIF");
}

const void **sub_1000C1B60(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *((_QWORD *)v1 + 27) = off_100187278;
  *((_QWORD *)v1 + 9) = off_1001872D0;
  sub_10002815C((const void **)v1 + 37);
  *((_QWORD *)v1 + 23) = off_100187130;
  *((_QWORD *)v1 + 10) = off_100187188;
  sub_100027D2C((const void **)v1 + 26);
  sub_100027D2C((const void **)v1 + 25);
  sub_100027D2C((const void **)v1 + 24);
  *((_QWORD *)v1 + 19) = off_100186FE8;
  *((_QWORD *)v1 + 7) = off_100187040;
  return sub_100027D2C((const void **)v1 + 22);
}

void sub_1000C1BE4(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *((_QWORD *)v1 + 27) = off_100187278;
  *((_QWORD *)v1 + 9) = off_1001872D0;
  sub_10002815C((const void **)v1 + 37);
  *((_QWORD *)v1 + 23) = off_100187130;
  *((_QWORD *)v1 + 10) = off_100187188;
  sub_100027D2C((const void **)v1 + 26);
  sub_100027D2C((const void **)v1 + 25);
  sub_100027D2C((const void **)v1 + 24);
  *((_QWORD *)v1 + 19) = off_100186FE8;
  *((_QWORD *)v1 + 7) = off_100187040;
  sub_100027D2C((const void **)v1 + 22);
  operator delete();
}

const void **sub_1000C1C80(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 32);
  *((_QWORD *)v1 + 27) = off_100187278;
  *((_QWORD *)v1 + 9) = off_1001872D0;
  sub_10002815C((const void **)v1 + 37);
  *((_QWORD *)v1 + 23) = off_100187130;
  *((_QWORD *)v1 + 10) = off_100187188;
  sub_100027D2C((const void **)v1 + 26);
  sub_100027D2C((const void **)v1 + 25);
  sub_100027D2C((const void **)v1 + 24);
  *((_QWORD *)v1 + 19) = off_100186FE8;
  *((_QWORD *)v1 + 7) = off_100187040;
  return sub_100027D2C((const void **)v1 + 22);
}

void sub_1000C1D04(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 32);
  *((_QWORD *)v1 + 27) = off_100187278;
  *((_QWORD *)v1 + 9) = off_1001872D0;
  sub_10002815C((const void **)v1 + 37);
  *((_QWORD *)v1 + 23) = off_100187130;
  *((_QWORD *)v1 + 10) = off_100187188;
  sub_100027D2C((const void **)v1 + 26);
  sub_100027D2C((const void **)v1 + 25);
  sub_100027D2C((const void **)v1 + 24);
  *((_QWORD *)v1 + 19) = off_100186FE8;
  *((_QWORD *)v1 + 7) = off_100187040;
  sub_100027D2C((const void **)v1 + 22);
  operator delete();
}

const void **sub_1000C1DA0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000C1964((uint64_t)a1 + *(_QWORD *)(*a1 - 40), a2);
}

const __CFString *sub_1000C1DB0()
{
  return CFSTR("ASIF");
}

uint64_t sub_1000C1DBC(uint64_t a1, uint64_t a2)
{
  void *exception;
  void *v4;

  if (a2 == 1)
    return a1 + 24;
  if (a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v4 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"ASIF: invalid dir index to header", 0x16u);
  }
  return a1 + 16;
}

void sub_1000C1E0C(_QWORD *a1)
{
  *a1 = off_100187458;
  sub_100012168((uint64_t)(a1 + 2));
  operator delete();
}

unint64_t *sub_1000C1E4C(unint64_t *a1)
{
  unint64_t *result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  do
    result = (unint64_t *)__ldaxr(a1);
  while (__stlxr(0, a1));
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      v5 = result[4];
      result[4] = -1;
      return (unint64_t *)sub_1000C1E8C((uint64_t)result, v5, 1u);
    }
  }
  return result;
}

uint64_t sub_1000C1E8C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  __int128 v10;
  int v11;
  _QWORD v12[45];
  uint64_t v13;
  uint64_t v14;

  if (*(_BYTE *)(a1 + 520) || (v6 = atomic_load((unsigned int *)(a1 + 24)), v6 != 2))
  {
    v8 = (a3 >> 1) & 2;
    goto LABEL_9;
  }
  v7 = sub_1000C2030(a1);
  v8 = (a3 >> 1) & 2;
  if (!(_DWORD)v7)
  {
LABEL_9:
    atomic_store(0, (unsigned int *)(a1 + 24));
    sub_1000C218C((uint64_t *)(a1 + 40));
    sub_1000C2148(a1 + 408, a1, a2, v8);
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
    return 1;
  }
  if ((a3 & 2) != 0)
  {
    *(_QWORD *)&v10 = "ref::details::ctrl_blk<di_asif::details::table, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = di_asif::details::table, tag_t = unsigned long long]";
    *((_QWORD *)&v10 + 1) = 78;
    v11 = 16;
    sub_1000C2060(v12, &v10);
    sub_100005A0C(&v13, (uint64_t)"Got error when trying to close ", 31);
    std::ostream::operator<<(&v13, a2);
    sub_100005A0C(&v13, (uint64_t)" with ret ", 10);
    std::ostream::operator<<(&v13, v7);
    sub_100005A0C(&v13, (uint64_t)", Force closing.", 16);
    std::ostream::~ostream(&v13, off_100187580);
    sub_1000C2268((uint64_t)v12);
    std::ios::~ios(&v14);
    goto LABEL_9;
  }
  if ((a3 & 1) != 0)
    sub_1000C2148(a1 + 408, a1, a2, v8 | 1);
  return 0;
}

void sub_1000C2018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000C2108((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C2030(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (!*(_BYTE *)(a1 + 400))
    return 0;
  v1 = a1 + 40;
  v2 = *(_QWORD *)(a1 + 496);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, v1);
  else
    return sub_1000CCFF4(v1);
}

_QWORD *sub_1000C2060(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000C21EC((uint64_t)a1, a2);
  *a1 = off_1001874B8;
  a1[45] = &off_1001875B8;
  a1[46] = &off_1001875E0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001874B8;
  a1[45] = off_100187540;
  a1[46] = off_100187568;
  return a1;
}

void sub_1000C20E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000C2268(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C2108(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100187580);
  sub_1000C2268(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000C2148(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v8 = a4;
  v6 = a3;
  v7 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_100017C6C();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(_QWORD *)v4 + 48))(v4, &v7, &v6, &v8);
}

uint64_t *sub_1000C218C(uint64_t *result)
{
  uint64_t *v1;
  void *v2;

  if (*((_BYTE *)result + 360))
  {
    v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 35));
    sub_1000C2854(v1 + 29);
    std::mutex::~mutex((std::mutex *)(v1 + 21));
    std::mutex::~mutex((std::mutex *)(v1 + 13));
    v2 = (void *)v1[9];
    if (v2)
    {
      v1[10] = (uint64_t)v2;
      operator delete(v2);
    }
    result = sub_1000C2934(v1 + 2);
    *((_BYTE *)v1 + 360) = 0;
  }
  return result;
}

uint64_t sub_1000C21EC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100187650;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000C2254(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C2268(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100187650;
  sub_1000C2520(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000C2304(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100187580);
  sub_1000C2268(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000C2358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000C238C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000C23D8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100187580);
  sub_1000C2268(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000C2410(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100187580);
  sub_1000C2268(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_1000C2460(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100187580);
  sub_1000C2268(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000C24A0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100187580);
  sub_1000C2268(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1000C24FC(uint64_t a1)
{
  sub_1000C2268(a1);
  operator delete();
}

uint64_t sub_1000C2520(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000C2670((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000C2648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_1000C2670(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 210;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 210;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000C2854(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_1000C28E8((uint64_t)a1);
}

uint64_t sub_1000C28E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t *sub_1000C2934(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  sub_1000C298C(a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *sub_1000C298C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      sub_100017C6C();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

unint64_t *sub_1000C29D8(unint64_t *a1)
{
  unint64_t *result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  do
    result = (unint64_t *)__ldaxr(a1);
  while (__stlxr(0, a1));
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      v5 = result[4];
      result[4] = -1;
      return (unint64_t *)sub_1000C2A18((uint64_t)result, v5, 1u);
    }
  }
  return result;
}

uint64_t sub_1000C2A18(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v11;
  int v12;
  _QWORD v13[45];
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 344)
    || (v6 = atomic_load((unsigned int *)(a1 + 24)), v6 != 2)
    || !*(_BYTE *)(a1 + 224)
    || (v7 = *(_QWORD *)(a1 + 320)) == 0)
  {
    v9 = (a3 >> 1) & 2;
    goto LABEL_11;
  }
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a1 + 40);
  v9 = (a3 >> 1) & 2;
  if (!(_DWORD)v8)
  {
LABEL_11:
    atomic_store(0, (unsigned int *)(a1 + 24));
    sub_1000C2BD0((uint64_t *)(a1 + 40));
    sub_1000C2148(a1 + 232, a1, a2, v9);
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
    return 1;
  }
  if ((a3 & 2) != 0)
  {
    *(_QWORD *)&v11 = "ref::details::ctrl_blk<di_asif::details::map_element, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = di_asif::details::map_element, tag_t = unsigned long long]";
    *((_QWORD *)&v11 + 1) = 84;
    v12 = 16;
    sub_1000C2060(v13, &v11);
    sub_100005A0C(&v14, (uint64_t)"Got error when trying to close ", 31);
    std::ostream::operator<<(&v14, a2);
    sub_100005A0C(&v14, (uint64_t)" with ret ", 10);
    std::ostream::operator<<(&v14, v8);
    sub_100005A0C(&v14, (uint64_t)", Force closing.", 16);
    std::ostream::~ostream(&v14, off_100187580);
    sub_1000C2268((uint64_t)v13);
    std::ios::~ios(&v15);
    goto LABEL_11;
  }
  if ((a3 & 1) != 0)
    sub_1000C2148(a1 + 232, a1, a2, v9 | 1);
  return 0;
}

void sub_1000C2BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000C2108((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000C2BD0(uint64_t *result)
{
  uint64_t *v1;

  if (*((_BYTE *)result + 184))
  {
    v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 15));
    v1[4] = (uint64_t)off_10017B1E0;
    result = sub_100073DB8(v1 + 7);
    *((_BYTE *)v1 + 184) = 0;
  }
  return result;
}

uint64_t sub_1000C2C94(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t result;
  void *exception;
  void *v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = v1 % (*(_QWORD *)(a1 + 48) + 1);
  result = v1 - v2;
  if (v1 == v2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v5 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Invalid chunk size", 0xFFFFFFEA);
  }
  return result;
}

unint64_t sub_1000C2CEC(uint64_t *a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = (_QWORD *)a1[2];
  v2 = a1[7];
  v3 = v2 * *v1;
  v4 = a1[5];
  v5 = v3 + v4;
  v6 = v1[1] * v2;
  if (v4 < v6)
    return v5 / v2;
  a1[5] = 0;
  v7 = *a1;
  v8 = a1[1];
  if (v8 <= ((uint64_t)v1 - *a1) >> 4)
    return v5 / v2;
  a1[2] = (uint64_t)(v1 + 2);
  if (v8 != ((uint64_t)v1 - v7 + 16) >> 4)
  {
    v9 = v1[2] * v2;
    if (v9 < a1[9])
    {
      v5 = v1[2] * v2;
      return v5 / v2;
    }
  }
  return 0;
}

uint64_t *sub_1000C2DA8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = a2;
  a1[1] = a3;
  a1[5] = 0;
  a1[6] = a4;
  a1[7] = a5;
  a1[8] = a6;
  v9 = (uint64_t *)(a2 + 16 * a8);
  a1[9] = a7;
  if (a8 == a3)
  {
LABEL_6:
    a1[2] = (uint64_t)v9;
  }
  else
  {
    v10 = 16 * a3 - 16 * a8;
    while (1)
    {
      v11 = *v9;
      if ((v9[1] + *v9) * a5 >= a6)
        break;
      v9 += 2;
      v10 -= 16;
      if (!v10)
      {
        v9 = (uint64_t *)(a2 + 16 * a3);
        goto LABEL_6;
      }
    }
    a1[2] = (uint64_t)v9;
    v13 = v11 * a5;
    if (v11 * a5 < a7)
    {
      v14 = a6 >= v13;
      v15 = a6 - v13;
      if (v15 != 0 && v14)
        a1[5] = v15;
      a1[3] = sub_1000C2CEC(a1);
      a1[4] = v16;
    }
  }
  return a1;
}

uint64_t sub_1000C2E44(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  sub_1000D7130(&v4, a1, *(_QWORD *)(v2 + 48)+ (*(_QWORD *)(v2 + 48) + 1)* ((a2 / *(unsigned __int16 *)(v2 + 18) - *(_QWORD *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v2 + 18))/ (*(_QWORD *)(v2 + 48)* (unint64_t)(*(_DWORD *)(v2 + 20) / *(unsigned __int16 *)(v2 + 18)))));
  return v4;
}

uint64_t sub_1000C2EA8(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_1000C2EB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(a1 + 8)
     + *(unsigned __int16 *)(v3 + 18)
     * (unint64_t)(*(_DWORD *)(v3 + 20) / *(unsigned __int16 *)(v3 + 18))
     * *(_QWORD *)(v3 + 48);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4 >= *(_QWORD *)(v2 + 352) + *(_QWORD *)(v3 + 80))
  {
    v7 = 0;
    v6 = 0;
    v8 = 0;
  }
  else
  {
    v5 = sub_1000C2E44(v2, v4);
    v6 = v5 & 0xFFFFFFFFFFFFFF00;
    v7 = v5;
    v8 = 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) == v8)
  {
    if (*(_BYTE *)(a1 + 32))
      *(_QWORD *)(a1 + 24) = v4;
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v6 | v7;
    *(_QWORD *)(a1 + 24) = v4;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t sub_1000C2F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  return sub_1000C2EB0(a1);
}

uint64_t sub_1000C2F74(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int16 *)(v2 + 18);
  sub_1000D70C0(&v5, a1, ((a2 / v3 - *(_QWORD *)(a1 + 352) / v3) / (*(_DWORD *)(v2 + 20) / v3)+ (a2 / v3 - *(_QWORD *)(a1 + 352) / v3) / (*(_DWORD *)(v2 + 20) / v3) * *(_QWORD *)(v2 + 48))/ *(_QWORD *)(v2 + 48));
  return v5;
}

uint64_t sub_1000C2FD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(a1 + 8) + *(unsigned int *)(v3 + 20);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4 >= *(_QWORD *)(v2 + 352) + *(_QWORD *)(v3 + 80))
  {
    v7 = 0;
    v6 = 0;
    v8 = 0;
  }
  else
  {
    v5 = sub_1000C2F74(v2, v4);
    v6 = v5 & 0xFFFFFFFFFFFFFF00;
    v7 = v5;
    v8 = 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) == v8)
  {
    if (*(_BYTE *)(a1 + 32))
      *(_QWORD *)(a1 + 24) = v4;
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v6 | v7;
    *(_QWORD *)(a1 + 24) = v4;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t sub_1000C3070@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  return sub_1000C2FD0(a1);
}

void sub_1000C3084(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  unint64_t v10;
  _QWORD *exception;
  const std::error_category *v12;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  sub_1000E39A8((uint64_t *)(a1 + 16), *(_QWORD *)(a2 + 56), a6);
  sub_1000D5734((_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 64));
  *(_QWORD *)(a1 + 104) = 850045863;
  *(_DWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 101) = 1;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 168) = 850045863;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 280) = 850045863;
  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = a4;
  *(_QWORD *)(a1 + 352) = a5;
  v10 = *(unsigned int *)(a2 + 20);
  if (a4)
  {
    if (a4 % v10)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_1001924F8;
      v12 = std::generic_category();
      exception[1] = 4294967274;
      exception[2] = v12;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "ASIF: table is not aligned to chunk size";
    }
  }
  operator new[]();
}

void sub_1000C3294(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100012168((uint64_t)va);
  operator delete[]();
}

void sub_1000C3310()
{
  operator new[]();
}

void sub_1000C34F0()
{
  operator delete[]();
}

void sub_1000C3528(uint64_t a1, uint64_t a2)
{
  std::mutex *v3;
  uint64_t v4;

  v4 = a2;
  if (a2)
  {
    v3 = (std::mutex *)(a1 + 280);
    std::mutex::lock((std::mutex *)(a1 + 280));
    sub_1000C3594((_QWORD *)(a1 + 232), &v4);
    atomic_store(1u, (unsigned int *)(a1 + 96));
    std::mutex::unlock(v3);
  }
}

void sub_1000C3580(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C3594(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[4];
  v8 = a1[5];
  v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    sub_1000E3C54(a1);
    v7 = a1[4];
    v8 = a1[5];
    v5 = a1[1];
    v9 = v7 + v8;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  v10 = v8 + 1;
  a1[5] = v10;
  v11 = v7 + v10;
  v12 = (_QWORD *)(v5 + 8 * (v11 >> 9));
  v13 = v11 & 0x1FF;
  if (v13)
    v14 = *v12 + 8 * v13;
  else
    v14 = *(v12 - 1) + 4096;
  return v14 - 8;
}

uint64_t sub_1000C3644(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *exception;
  const std::error_category *v10;
  uint64_t result;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t (**v43)();
  unint64_t *v44;
  char v45;
  uint64_t v46;

  v3 = atomic_load((unint64_t *)(*(_QWORD *)(*a3 + 56) + 16 * a3[1] + 8));
  if (v3 >> 62 != 3)
    return 0;
  v7 = (unint64_t *)(*(_QWORD *)(*a3 + 56) + 16 * a3[1]);
  while (*v7)
  {
LABEL_10:
    if ((sub_1000DE050(v7, 1) & 1) == 0)
    {
      v45 = 0;
      v43 = off_100191F18;
      v44 = v7;
      v46 = 0;
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_1001924F8;
      v10 = std::generic_category();
      exception[1] = 4294967291;
      exception[2] = v10;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "Can't take exclusive lock on entry";
    }
  }
  while (1)
  {
    v8 = __ldaxr(v7);
    if (!v8)
      break;
    __clrex();
LABEL_9:
    if (v8)
      goto LABEL_10;
  }
  if (__stlxr(0xFFFFFFFFFFFFFFFFLL, v7))
    goto LABEL_9;
  v12 = 1;
  v45 = 1;
  v43 = off_100191F18;
  v44 = v7;
  v46 = 0;
  v13 = atomic_load((unint64_t *)(*(_QWORD *)(*a3 + 56) + 16 * a3[1] + 8));
  if (v13 >> 62 != 3)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    goto LABEL_32;
  }
  v14 = *(_QWORD *)(*a3 + 8);
  sub_1000C3A80(a1, a2, (*(_QWORD *)(*a3 + 352)+ (*(_QWORD *)(v14 + 48) + *(_QWORD *)(v14 + 48) * a3[1])/ (unint64_t)(*(_QWORD *)(v14 + 48) + 1)* *(unsigned int *)(v14 + 20))/ *(unsigned __int16 *)(v14 + 18), 0, 1, &v42);
  if (!v42 || *(_BYTE *)(v42 + 344))
  {
LABEL_30:
    v16 = 0;
    v17 = 0;
    v18 = 0;
    goto LABEL_31;
  }
  if (*(_BYTE *)(v42 + 224))
    v15 = v42 + 40;
  else
    v15 = 0;
  v19 = sub_1000C3DD4(a3);
  v20 = sub_1000C3D50(v15, v19);
  v21 = *(_QWORD *)(*a3 + 8);
  v22 = *(_QWORD *)(v21 + 48);
  v23 = *(unsigned int *)(v21 + 20);
  if (v42)
  {
    if (*(_BYTE *)(v42 + 224))
      v25 = (_QWORD *)(v42 + 40);
    else
      v25 = 0;
  }
  else
  {
    v25 = 0;
  }
  v24 = *(_QWORD *)(*a3 + 352) + (v22 + v22 * a3[1]) / (unint64_t)(v22 + 1) * v23;
  if (sub_1000CD2E8(v25, a1, v20, v24, v24 + v23, 0) != v24 + v23)
  {
    v12 = 0;
    goto LABEL_30;
  }
  v26 = (unint64_t *)(*(_QWORD *)(*a3 + 56) + 16 * a3[1] + 8);
  v27 = *v26;
  v28 = *(unsigned int *)(*(_QWORD *)(*a3 + 8) + 20);
  v17 = v20 == 2;
  v29 = *v26;
  v30 = __ldaxr(v26);
  if (v30 == v29)
  {
    if (!__stlxr((v20 << 62) | v29 & 0x3FFFFFFFFFFFFFFFLL, v26))
    {
      v31 = 1;
      goto LABEL_41;
    }
  }
  else
  {
    __clrex();
  }
  v31 = 0;
LABEL_41:
  v32 = v27 & 0x7FFFFFFFFFFFFFLL;
  if ((v31 & 1) == 0)
  {
    while (2)
    {
      v33 = __ldaxr(v26);
      if (v33 == v30)
      {
        if (!__stlxr(v30 & 0x3FFFFFFFFFFFFFFFLL | (v20 << 62), v26))
        {
          v34 = 1;
          goto LABEL_47;
        }
      }
      else
      {
        __clrex();
      }
      v34 = 0;
LABEL_47:
      v30 = v33;
      if (v34)
        break;
      continue;
    }
  }
  v18 = v32 * v28;
  if ((_DWORD)v20 != 1)
  {
    v35 = (unint64_t *)(*(_QWORD *)(*a3 + 56) + 16 * a3[1] + 8);
    if (*(_DWORD *)(*(_QWORD *)(*a3 + 8) + 20))
    {
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 & 0xFF80000000000000, v35));
      goto LABEL_64;
    }
    v37 = *v35;
    v38 = __ldxr(v35);
    if (v38 == v37)
    {
      if (!__stxr(v37 & 0xFF80000000000000, v35))
      {
        v39 = 1;
LABEL_57:
        if ((v39 & 1) != 0)
          goto LABEL_64;
        while (2)
        {
          v40 = __ldxr(v35);
          if (v40 == v38)
          {
            if (!__stxr(v38 & 0xFF80000000000000, v35))
            {
              v41 = 1;
              goto LABEL_63;
            }
          }
          else
          {
            __clrex();
          }
          v41 = 0;
LABEL_63:
          v38 = v40;
          if ((v41 & 1) != 0)
            goto LABEL_64;
          continue;
        }
      }
    }
    else
    {
      __clrex();
    }
    v39 = 0;
    goto LABEL_57;
  }
LABEL_64:
  v12 = 0;
  v16 = 1;
  atomic_store(1u, (unsigned int *)(a1 + 96));
LABEL_31:
  sub_1000C29D8(&v42);
LABEL_32:
  sub_10011E50C(&v43);
  if (v12)
    result = 0;
  else
    result = v16;
  if (!v12 && v17)
  {
    sub_1000C3528(a1, v18);
    return v16;
  }
  return result;
}

void sub_1000C3A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_1000C29D8((unint64_t *)va);
  sub_10011E50C(va1);
  _Unwind_Resume(a1);
}

unint64_t sub_1000C3A64(_QWORD *a1)
{
  unint64_t v1;

  v1 = atomic_load((unint64_t *)(*(_QWORD *)(*a1 + 56) + 16 * a1[1] + 8));
  return v1 >> 62;
}

void sub_1000C3A80(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  BOOL v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25[2];
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v12 = (a3 - *(_QWORD *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18))
      / (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48)
       * (unint64_t)(*(_DWORD *)(*(_QWORD *)(a1 + 8) + 20)
                          / *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18)));
  v13 = sub_1000C3F30(a1, v12);
  sub_1000C3FA0((unint64_t *)(*(_QWORD *)(a1 + 72) + 8 * v12), v13, a6);
  if (!*a6 || *(_BYTE *)(*a6 + 344))
  {
    v14 = *(_QWORD *)(a1 + 8);
    v30 = *(_QWORD *)(v14 + 48)
        + (*(_QWORD *)(v14 + 48) + 1)
        * ((a3 - *(_QWORD *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v14 + 18))
         / (*(_QWORD *)(v14 + 48)
          * (unint64_t)(*(_DWORD *)(v14 + 20) / *(unsigned __int16 *)(v14 + 18))));
    sub_1000D7130(&v27, a1, v30);
    v15 = v27;
    v16 = v28;
    if ((a4 & 1) != 0)
    {
      LOBYTE(v27) = 0;
      v29 = 0;
    }
    else
    {
      v17 = (unint64_t *)(*(_QWORD *)(v27 + 56) + 16 * v28);
      v18 = sub_1000DDFC4(v17);
      v25[0] = (uint64_t)off_100191EF8;
      v25[1] = (uint64_t)v17;
      v26 = v18;
      sub_10011E364((uint64_t)&v27, (uint64_t)v25);
      v29 = 1;
      sub_10011E3D8(v25);
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(v25, *(_QWORD *)(a1 + 8), v13, a5);
    sub_1000C4040(a6, (unint64_t *)v25);
    sub_1000C29D8((unint64_t *)v25);
    if (*a6)
    {
      if (!*(_BYTE *)(*a6 + 344))
      {
        if (!*a6 || (v19 = atomic_load((unsigned int *)(*a6 + 24)), v19 != 2))
        {
          v20 = atomic_load(a6);
          v25[0] = v20;
          v21 = *(_QWORD *)(a1 + 72);
          do
            v22 = __ldaxr((unint64_t *)v25);
          while (__stlxr(0, (unint64_t *)v25));
          atomic_store(v22, (unint64_t *)(v21 + 8 * v12));
          v25[0] = 0;
          v25[0] = (*(_QWORD *)(*(_QWORD *)(v15 + 56) + 16 * v16 + 8) & 0x7FFFFFFFFFFFFFLL)
                 * *(unsigned int *)(*(_QWORD *)(v15 + 8) + 20);
          if (v25[0])
          {
            sub_1000C4084((uint64_t *)a6, a2, a1, (unint64_t *)&v30, v25);
          }
          else
          {
            v24 = sub_1000C40F8(*(unsigned int **)(a1 + 8), a2, 1);
            v23 = 1;
            sub_1000C4224((uint64_t *)a6, a2, a1, (unint64_t *)&v30, &v24, &v23);
          }
        }
      }
    }
    if (v29)
      sub_10011E3D8(&v27);
  }
}

void sub_1000C3CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  unint64_t *v17;

  if (a17)
    sub_10011E3D8(&a14);
  sub_1000C29D8(v17);
  _Unwind_Resume(a1);
}

unint64_t sub_1000C3D20(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*a1 + 8);
  return (*(_QWORD *)(*a1 + 352)
        + (*(_QWORD *)(v1 + 48) + *(_QWORD *)(v1 + 48) * a1[1])
        / (unint64_t)(*(_QWORD *)(v1 + 48) + 1)
        * *(unsigned int *)(v1 + 20))
       / *(unsigned __int16 *)(v1 + 18);
}

uint64_t sub_1000C3D50(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  void *exception;
  void *v8;

  v3 = a1 + 32;
  v4 = sub_100094914(a1 + 32, a2);
  if (sub_100094914(v3, a2 + 1))
    v5 = 2;
  else
    v5 = 0;
  result = v5 | v4;
  if ((_DWORD)result == 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v8 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"bitmap flag value invalid", 0xFFFFFFEA);
  }
  return result;
}

unint64_t sub_1000C3DD4(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(*a1 + 352);
  v2 = *(_QWORD *)(*a1 + 8);
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(unsigned int *)(v2 + 20);
  v5 = (v3 + v3 * a1[1]) / (unint64_t)(v3 + 1) * v4;
  v6 = *(unsigned __int16 *)(v2 + 18);
  return ((2
         * ((v5
                         - ((v5 + v1) / v6 - v1 / v6)
                         / (v3
                          * (unint64_t)(v4 / v6))
                         * v3
                         * v4)
                        / v6)) | (((v4
                                  - v6
                                  + v5
                                  - ((v4 - v6 + v5 + v1) / v6 - v1 / v6)
                                  / (v3
                                   * (unint64_t)(v4 / v6))
                                  * v3
                                  * v4)
                                 / v6) << 33))
       + 0x200000000;
}

unint64_t sub_1000C3E58(_QWORD *a1)
{
  return *(_QWORD *)(*a1 + 352)
       + (*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 48) + *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 48) * a1[1])
       / (unint64_t)(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 48) + 1)
       * *(unsigned int *)(*(_QWORD *)(*a1 + 8) + 20);
}

unint64_t sub_1000C3E80(_QWORD *a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  return sub_1000CD2E8(a1, a2, a3, a4, a5, 0);
}

_QWORD *sub_1000C3E88(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;

  v2 = *(unsigned int *)(*(_QWORD *)(*result + 8) + 20);
  v3 = (unint64_t *)(*(_QWORD *)(*result + 56) + 16 * result[1] + 8);
  if (v2 > a2)
  {
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 & 0xFF80000000000000, v3));
    return result;
  }
  v5 = *v3;
  v6 = __ldxr(v3);
  v7 = a2 / v2;
  if (v6 != v5)
  {
    __clrex();
LABEL_8:
    while (1)
    {
      v8 = __ldxr(v3);
      if (v8 != v6)
        break;
      if (__stxr(v6 & 0xFF80000000000000 | v7, v3))
        goto LABEL_12;
      v9 = 1;
LABEL_13:
      v6 = v8;
      if (v9)
        return result;
    }
    __clrex();
LABEL_12:
    v9 = 0;
    goto LABEL_13;
  }
  if (__stxr(v5 & 0xFF80000000000000 | v7, v3))
    goto LABEL_8;
  return result;
}

unint64_t sub_1000C3F30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 64);
  if ((v3 & (v3 - 1)) != 0)
  {
    v4 = 0;
    v5 = 2 * v3;
    do
    {
      v5 >>= 1;
      ++v4;
    }
    while (v5 != 1);
    v3 = 1 << v4;
  }
  v6 = *(_QWORD *)(v2 + 80);
  if (v3 == 1)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v3 >>= 1;
      ++v7;
    }
    while (v3 != 1);
  }
  return ((*(_QWORD *)(a1 + 352) / v6) << v7) | a2;
}

unint64_t *sub_1000C3FA0@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = atomic_load(result);
  if (v4 && *(_QWORD *)(v4 + 32) == a2)
  {
    v6 = (unint64_t *)atomic_load(result);
    sub_1000E2700(&v9, v6, 1);
    if (v9 && !*(_BYTE *)(v9 + 344))
    {
      v7 = *(_QWORD *)(v9 + 32);
      *a3 = 0;
      if (v7 == a2)
      {
        do
          v8 = __ldaxr(&v9);
        while (__stlxr(0, &v9));
        atomic_store(v8, a3);
      }
    }
    else
    {
      *a3 = 0;
    }
    return sub_1000C29D8(&v9);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

unint64_t *sub_1000C4040(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  if (a2 != a1)
  {
    do
      v3 = __ldaxr(a2);
    while (__stlxr(0, a2));
    sub_1000C29D8(a1);
    atomic_store(v3, a1);
  }
  return a1;
}

void sub_1000C4084(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
  sub_1000E3F68(*a1, a2, a3, a4, a5);
}

void sub_1000C40B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;

  __cxa_begin_catch(a1);
  if (*v10)
  {
    v11 = *(_QWORD *)(*v10 + 288);
    if (v11)
    {
      a10 = *v10;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &a10, v10);
    }
  }
  __cxa_rethrow();
}

void sub_1000C40E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1000C40F8(unsigned int *a1, uint64_t a2, int a3)
{
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[3];
  _QWORD *v15;

  v6 = (unint64_t *)(a1 + 2);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 16))(a1);
  if (a3)
  {
    v9 = a1[5];
    v14[0] = off_100187B30;
    v14[1] = a2;
    v14[2] = v9;
    v15 = v14;
  }
  else
  {
    v15 = 0;
  }
  v10 = sub_1000D57A8(v8, (uint64_t)v14);
  v11 = v15;
  if (v15 == v14)
  {
    v12 = 4;
    v11 = v14;
    goto LABEL_10;
  }
  if (v15)
  {
    v12 = 5;
LABEL_10:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return v10;
}

void sub_1000C41E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1000C4224(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, char *a6)
{
  sub_1000E4050(*a1, a2, a3, a4, a5, a6);
}

void sub_1000C4250(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;

  __cxa_begin_catch(a1);
  if (*v10)
  {
    v11 = *(_QWORD *)(*v10 + 288);
    if (v11)
    {
      a10 = *v10;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &a10, v10);
    }
  }
  __cxa_rethrow();
}

void sub_1000C4284(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1000C4298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if ((*(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * a4 + 8) & 0x7FFFFFFFFFFFFFLL)
     * *(unsigned int *)(*(_QWORD *)(a3 + 8) + 20))
  {
    return 0;
  }
  v8 = sub_1000C40F8(*(unsigned int **)(a1 + 8), a2, 0);
  if (v8)
  {
    v9 = *(_QWORD *)(a3 + 56) + 16 * a4;
    v10 = *(_QWORD *)(v9 + 8);
    if ((v10 & 0x7FFFFFFFFFFFFFLL) == 0)
    {
      v11 = (unint64_t *)(v9 + 8);
      v12 = v8 / *(unsigned int *)(*(_QWORD *)(a3 + 8) + 20);
      while (1)
      {
        v13 = __ldxr(v11);
        if (v13 != v10)
          break;
        if (__stxr(v10 & 0xFF80000000000000 | v12, v11))
          goto LABEL_9;
        v14 = 1;
LABEL_10:
        if ((v14 & 1) != 0)
          return 0;
        v10 = v13;
        if ((v13 & 0x7FFFFFFFFFFFFFLL) != 0)
          goto LABEL_12;
      }
      __clrex();
LABEL_9:
      v14 = 0;
      goto LABEL_10;
    }
LABEL_12:
    sub_1000C4374(*(unint64_t **)(a1 + 8), v8, a2);
    return 0;
  }
  return 4294967268;
}

_QWORD *sub_1000C4374(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;

  v6 = (*(uint64_t (**)(unint64_t *))(*a1 + 16))(a1);
  v11[0] = off_100187BC0;
  v11[1] = a3;
  v12 = v11;
  sub_1000D639C(v6, a2, (uint64_t)v11);
  result = v12;
  if (v12 == v11)
  {
    v8 = 4;
    result = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v8 = 5;
LABEL_5:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  v9 = a1 + 1;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  return result;
}

void sub_1000C4440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

unint64_t *sub_1000C4478(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  BOOL v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  _QWORD *exception;
  const std::error_category *v28;
  _QWORD *v29;
  const std::error_category *v30;
  __int128 v31;
  int v32;
  _QWORD v33[2];
  __int128 v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD v38[20];

  v11 = *(_QWORD *)(*a3 + 8);
  sub_1000C3A80(a1, a2, (*(_QWORD *)(*a3 + 352)+ (*(_QWORD *)(v11 + 48) + *(_QWORD *)(v11 + 48) * a3[1])/ (unint64_t)(*(_QWORD *)(v11 + 48) + 1)* *(unsigned int *)(v11 + 20))/ *(unsigned __int16 *)(v11 + 18), 0, 1, (unint64_t *)&v31);
  if (!(_QWORD)v31 || *(_BYTE *)(v31 + 344))
  {
    *(_QWORD *)&v34 = "di_asif::details::table::set_entry_bitmap_range(ContextASIF &, data_entry_t &, const bits_range_t &, data_entry_t::flags, std::optional<data_entry_t::flags>)";
    *((_QWORD *)&v34 + 1) = 47;
    v35 = 16;
    sub_1000C4850(&v36, &v34);
    sub_100005A0C(v38, (uint64_t)"Can't load bitmap while setting range", 37);
    sub_1000C48F8((uint64_t)&v36);
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_1001924F8;
    v28 = std::generic_category();
    exception[1] = 5;
    exception[2] = v28;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Can't load bitmap while setting range";
  }
  v12 = (a6 & 0xFF00000000) == 0 || (_DWORD)a6 == 3;
  v13 = v12;
  if (!v12)
  {
    if (*(_BYTE *)(v31 + 224))
      v14 = v31 + 40;
    else
      v14 = 0;
    v36 = sub_1000C3DD4(a3);
    sub_1000C4938(v14, a1, (unsigned int *)&v36, a6);
  }
  if ((_QWORD)v31)
  {
    if (*(_BYTE *)(v31 + 224))
      v15 = v31 + 40;
    else
      v15 = 0;
  }
  else
  {
    v15 = 0;
  }
  sub_1000C4938(v15, a1, a4, a5);
  result = sub_1000C29D8((unint64_t *)&v31);
  if ((v13 & 1) != 0)
    return result;
  v17 = *(_QWORD *)(*a3 + 8);
  v18 = *(_QWORD *)(a1 + 8);
  v19 = *(_QWORD *)(v18 + 48);
  sub_1000D7130(&v36, a1, v19+ (v19 + 1)* (((*(_QWORD *)(*a3 + 352)+ (*(_QWORD *)(v17 + 48) + *(_QWORD *)(v17 + 48) * a3[1])/ (unint64_t)(*(_QWORD *)(v17 + 48) + 1)* *(unsigned int *)(v17 + 20))/ *(unsigned __int16 *)(v17 + 18)- *(_QWORD *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v18 + 18))/ (v19* (unint64_t)(*(_DWORD *)(v18 + 20) / *(unsigned __int16 *)(v18 + 18)))));
  v33[0] = v36;
  v33[1] = v37;
  v20 = (unint64_t *)(*(_QWORD *)(v36 + 56) + 16 * v37);
  v21 = sub_1000DDFC4(v20);
  *(_QWORD *)&v34 = off_100191EF8;
  *((_QWORD *)&v34 + 1) = v20;
  LOBYTE(v35) = v21;
  if (!v21)
  {
    *(_QWORD *)&v31 = "di_asif::details::table::set_entry_bitmap_range(ContextASIF &, data_entry_t &, const bits_range_t &, data_entry_t::flags, std::optional<data_entry_t::flags>)";
    *((_QWORD *)&v31 + 1) = 47;
    v32 = 16;
    sub_1000C4A50(&v36, &v31);
    sub_100005A0C(v38, (uint64_t)"Couldn't lock entry ", 20);
    sub_1000C49BC((uint64_t)&v36, v33);
    sub_1000C4AF8((uint64_t)&v36);
    v29 = __cxa_allocate_exception(0x40uLL);
    *v29 = &off_1001924F8;
    v30 = std::generic_category();
    v29[1] = 4294967282;
    v29[2] = v30;
    *((_BYTE *)v29 + 24) = 0;
    *((_BYTE *)v29 + 48) = 0;
    v29[7] = "Couldn't lock entry";
  }
  v22 = (unint64_t *)(*(_QWORD *)(*a3 + 56) + 16 * a3[1] + 8);
  v23 = *v22;
  v24 = __ldaxr(v22);
  if (v24 != v23)
  {
    __clrex();
LABEL_25:
    while (1)
    {
      v25 = __ldaxr(v22);
      if (v25 != v24)
        break;
      if (__stlxr(v24 | 0xC000000000000000, v22))
        goto LABEL_29;
      v26 = 1;
LABEL_30:
      v24 = v25;
      if (v26)
        goto LABEL_31;
    }
    __clrex();
LABEL_29:
    v26 = 0;
    goto LABEL_30;
  }
  if (__stlxr(v23 | 0xC000000000000000, v22))
    goto LABEL_25;
LABEL_31:
  atomic_store(1u, (unsigned int *)(a1 + 96));
  return (unint64_t *)sub_10011E3D8(&v34);
}

void sub_1000C47F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10011E3D8(va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000C4850(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000E411C((uint64_t)a1, a2);
  *a1 = off_100187C48;
  a1[45] = &off_100187D48;
  a1[46] = &off_100187D70;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100187C48;
  a1[45] = off_100187CD0;
  a1[46] = off_100187CF8;
  return a1;
}

void sub_1000C48D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000D66DC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C48F8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100187D10);
  sub_1000D66DC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000C4938(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *result;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[2];

  v6 = *a3;
  v7 = a3[1];
  LOWORD(v11[0]) = a4 & 1 | (((a4 >> 1) & 1) << 8);
  result = (_QWORD *)sub_10009418C(a1 + 32, v6, v7, (unsigned __int8 *)v11);
  if ((_DWORD)result)
  {
    *(_BYTE *)(a1 + 113) = 1;
    result = sub_1000D7130(v11, a2, *(_QWORD *)a1);
    v9 = (unint64_t *)(*(_QWORD *)(v11[0] + 56) + 16 * v11[1] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 | 0x8000000000000000, v9));
  }
  return result;
}

uint64_t sub_1000C49BC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = sub_100005A0C((_QWORD *)(a1 + 360), (uint64_t)"table entry map@", 16);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *(_QWORD *)(*a2 + 352)+ a2[1]/ (unint64_t)(*(_QWORD *)(*(_QWORD *)(*a2 + 8) + 48) + 1)* *(_QWORD *)(*(_QWORD *)(*a2 + 8) + 48)* *(unsigned int *)(*(_QWORD *)(*a2 + 8) + 20));
  v6 = sub_100005A0C(v5, (uint64_t)" = offset = ", 12);
  std::ostream::operator<<(v6, (*(_QWORD *)(*(_QWORD *)(*a2 + 56) + 16 * a2[1] + 8) & 0x7FFFFFFFFFFFFFLL)* *(unsigned int *)(*(_QWORD *)(*a2 + 8) + 20));
  return a1;
}

_QWORD *sub_1000C4A50(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000E4198((uint64_t)a1, a2);
  *a1 = off_100187E68;
  a1[45] = &off_100187F68;
  a1[46] = &off_100187F90;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100187E68;
  a1[45] = off_100187EF0;
  a1[46] = off_100187F18;
  return a1;
}

void sub_1000C4AD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000D6CC8(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C4AF8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100187F30);
  sub_1000D6CC8(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000C4B38(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  _QWORD v14[2];

  result = sub_1000D7130(v14, a1, a2);
  v6 = *(unsigned int *)(*(_QWORD *)(v14[0] + 8) + 20);
  v7 = (unint64_t *)(*(_QWORD *)(v14[0] + 56) + 16 * v14[1] + 8);
  if (v6 > a3)
  {
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 & 0xFF80000000000000, v7));
    goto LABEL_14;
  }
  v9 = *v7;
  v10 = __ldxr(v7);
  v11 = a3 / v6;
  if (v10 != v9)
  {
    __clrex();
LABEL_8:
    while (1)
    {
      v12 = __ldxr(v7);
      if (v12 != v10)
        break;
      if (__stxr(v10 & 0xFF80000000000000 | v11, v7))
        goto LABEL_12;
      v13 = 1;
LABEL_13:
      v10 = v12;
      if (v13)
        goto LABEL_14;
    }
    __clrex();
LABEL_12:
    v13 = 0;
    goto LABEL_13;
  }
  if (__stxr(v9 & 0xFF80000000000000 | v11, v7))
    goto LABEL_8;
LABEL_14:
  atomic_store(1u, (unsigned int *)(a1 + 96));
  return result;
}

__n128 sub_1000C4C20@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  __int128 v13;
  __n128 result;
  _OWORD v15[5];

  sub_1000C2DA8((uint64_t *)v15, a1, a2, a3, a4, a5, a6, 0);
  sub_1000C2DA8((uint64_t *)(a7 + 80), a1, a2, a3, a4, a6, a6, 0);
  v13 = v15[3];
  *(_OWORD *)(a7 + 32) = v15[2];
  *(_OWORD *)(a7 + 48) = v13;
  *(_OWORD *)(a7 + 64) = v15[4];
  result = (__n128)v15[1];
  *(_OWORD *)a7 = v15[0];
  *(__n128 *)(a7 + 16) = result;
  return result;
}

void sub_1000C4CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::chrono::steady_clock::time_point v4;
  std::chrono::steady_clock::time_point v5;
  std::chrono::system_clock::time_point v6;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8;
  unint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::unique_lock<std::mutex> __lk;
  _QWORD v18[2];
  uint64_t v19;
  std::__shared_weak_count *v20;

  v3 = *(_QWORD *)(a1 + 24);
  v18[0] = off_100187458;
  v18[1] = v3;
  (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 72))(*(_QWORD *)(v3 + 16));
  if (*(_BYTE *)(a1 + 16))
    goto LABEL_41;
  do
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 3680);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 3680));
    while (!*(_BYTE *)(a1 + 16) && !*(_BYTE *)(a1 + 3672))
      std::condition_variable::wait((std::condition_variable *)(a1 + 3624), &__lk);
    v4.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 2000000000;
    while (!*(_BYTE *)(a1 + 16) && v4.__d_.__rep_ > std::chrono::steady_clock::now().__d_.__rep_)
    {
      v5.__d_.__rep_ = v4.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
      if (v5.__d_.__rep_ >= 1)
      {
        std::chrono::steady_clock::now();
        v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v6.__d_.__rep_)
        {
          v7 = 0;
          goto LABEL_18;
        }
        if (v6.__d_.__rep_ < 1)
        {
          if ((unint64_t)v6.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
            goto LABEL_17;
          v7 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v6.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            v7 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_18;
          }
LABEL_17:
          v7 = 1000 * v6.__d_.__rep_;
LABEL_18:
          if (v7 > (v5.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v8.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_21:
            std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 3624), &__lk, v8);
            std::chrono::steady_clock::now();
            goto LABEL_22;
          }
        }
        v8.__d_.__rep_ = v7 + v5.__d_.__rep_;
        goto LABEL_21;
      }
LABEL_22:
      if (std::chrono::steady_clock::now().__d_.__rep_ >= v4.__d_.__rep_)
        break;
    }
    *(_BYTE *)(a1 + 3672) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
    {
      v9 = 0;
      v10 = 0;
      do
      {
        if (*(_BYTE *)(a1 + 16))
          break;
        v10 |= sub_1000C50A8(a1, (uint64_t)v18, v9) == 0;
        sub_1000C5400(a1, (uint64_t)v18, v9, 0, 1, (unint64_t *)&__lk);
        if (__lk.__m_ && !__lk.__m_[8].__m_.__opaque[0])
        {
          if (__lk.__m_[6].__m_.__opaque[8])
            v11 = &__lk.__m_->__m_.__opaque[32];
          else
            v11 = 0;
          v10 |= sub_1000C54FC((uint64_t)v11, (uint64_t)v18);
        }
        sub_1000C1E4C((unint64_t *)&__lk);
        ++v9;
      }
      while (v9 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 3);
      if ((v10 & 1) != 0)
      {
        if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, 0))
          sub_1000A1868((uint64_t)v18);
        v12 = *(_QWORD *)(a2 + 24);
        if (!v12)
          sub_100017C6C();
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v18);
      }
    }
  }
  while (!*(_BYTE *)(a1 + 16));
LABEL_41:
  v18[0] = off_100187458;
  v13 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1000C5028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_1000C57D0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x1000C5058);
}

void sub_1000C5054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  *(_QWORD *)(v12 - 120) = off_100187458;
  sub_100012168(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C5078@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *a2 = off_100187458;
  a2[1] = v2;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 72))(*(_QWORD *)(v2 + 16));
}

uint64_t sub_1000C50A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::bad_alloc *exception;
  std::bad_alloc *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;

  v3 = atomic_load((unint64_t *)(a1 + 8));
  v4 = *(unsigned int *)(a1 + 20);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * a3) * v4;
  v26 = v5;
  if (v5 && 3 * v5 > 4 * v3 * v4)
  {
    v9 = (unint64_t *)(*(_QWORD *)(a1 + 128) + 8 * a3);
    sub_1000CE264(v9, a3, (unint64_t *)&v25);
    if (v25 && !*(_BYTE *)(v25 + 520))
    {
      v11 = *(_QWORD *)(v25 + 464);
      if (v11)
      {
        v27 = v25;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v27, &v25);
      }
      sub_1000CE264(v9, a3, (unint64_t *)&v27);
      sub_1000CE138((unint64_t *)&v25, (unint64_t *)&v27);
      sub_1000C1E4C((unint64_t *)&v27);
      if (v25)
      {
        if (!*(_BYTE *)(v25 + 520))
        {
LABEL_15:
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
LABEL_16:
          v10 = 4294967248;
LABEL_17:
          sub_1000C1E4C((unint64_t *)&v25);
          return v10;
        }
      }
    }
    sub_1000CDF50(a1 + 280, a3, 1, (unint64_t *)&v27);
    sub_1000CE138((unint64_t *)&v25, (unint64_t *)&v27);
    sub_1000C1E4C((unint64_t *)&v27);
    if (!v25 || *(_BYTE *)(v25 + 520) || (v13 = atomic_load((unsigned int *)(v25 + 24)), v13 == 2))
    {
      if (!v25 || *(_BYTE *)(v25 + 520))
        goto LABEL_16;
      goto LABEL_15;
    }
    v14 = malloc_type_valloc(*(unsigned int *)(a1 + 20), 0xF8ED6DDuLL);
    if (!v14)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v24 = std::bad_alloc::bad_alloc(exception);
    }
    v29[0] = off_1001882A0;
    v30 = v29;
    v27 = (uint64_t)v14;
    sub_1000181E0((uint64_t)&v28, (uint64_t)v29);
    v15 = v30;
    if (v30 == v29)
    {
      v16 = 4;
      v15 = v29;
    }
    else
    {
      if (!v30)
      {
LABEL_26:
        v17 = *(unsigned int *)(a1 + 20);
        v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 40))(*(_QWORD *)(a2 + 16));
        if (v18 - v26 >= v17)
          v19 = v17;
        else
          v19 = v18 - v26;
        v10 = sub_1000C5A40((unsigned int *)a1, a2, v27, v19, v26);
        v21 = v20;
        if (v25)
        {
          v22 = *(_QWORD *)(v25 + 464);
          if (v22)
          {
            v29[0] = v25;
            (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v22 + 48))(v22, v29, &v25);
          }
        }
        if ((v10 & 0x8000000000000000) == 0)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, *(_QWORD *)(a1 + 80) * a3, v21);
          std::mutex::lock((std::mutex *)(a1 + 3792));
          sub_1000C3594((_QWORD *)(a1 + 3744), &v26);
          atomic_store(1u, (unsigned int *)(a1 + 3592));
          std::mutex::unlock((std::mutex *)(a1 + 3792));
          v10 = 0;
        }
        sub_100017CC8(&v27);
        goto LABEL_17;
      }
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
    goto LABEL_26;
  }
  return 4294967274;
}

void sub_1000C5390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::mutex *v11;

  std::mutex::unlock(v11);
  sub_100017CC8(&a11);
  sub_1000C1E4C((unint64_t *)&a9);
  _Unwind_Resume(a1);
}

unint64_t *sub_1000C5400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, unint64_t *a6@<X8>)
{
  unint64_t *result;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  result = sub_1000CE264((unint64_t *)(*(_QWORD *)(a1 + 128) + 8 * a3), a3, a6);
  if (!*a6 || *(_BYTE *)(*a6 + 520))
  {
    sub_1000CDDC8((unint64_t *)a1, a2, a3, *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * a3) * *(unsigned int *)(a1 + 20), a4, a5, &v16);
    sub_1000CE138(a6, &v16);
    result = sub_1000C1E4C(&v16);
    if (*a6 && !*(_BYTE *)(*a6 + 520))
    {
      v13 = atomic_load(a6);
      v16 = v13;
      v14 = *(_QWORD *)(a1 + 128);
      do
        v15 = __ldaxr(&v16);
      while (__stlxr(0, &v16));
      atomic_store(v15, (unint64_t *)(v14 + 8 * a3));
    }
  }
  return result;
}

void sub_1000C54E4(_Unwind_Exception *a1)
{
  unint64_t *v1;

  sub_1000C1E4C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C54FC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  BOOL i;
  int v14;
  std::bad_alloc *exception;
  std::bad_alloc *v17;
  _QWORD v18[2];
  _QWORD v19[8];
  _QWORD v20[2];
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + 8));
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 20);
  v6 = malloc_type_valloc(v5, 0xF8ED6DDuLL);
  if (!v6)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v17 = std::bad_alloc::bad_alloc(exception);
  }
  v20[0] = off_1001882A0;
  v22 = v20;
  v25 = (uint64_t)v6;
  sub_1000181E0((uint64_t)&v26, (uint64_t)v20);
  v8 = v22;
  if (v22 == v20)
  {
    v9 = 4;
    v8 = v20;
    goto LABEL_6;
  }
  if (v22)
  {
    v9 = 5;
LABEL_6:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  sub_1000C609C(a1, v7, (uint64_t)v20);
  v10 = 0;
  v11 = v4 * v5;
  while ((v20[0] != v23 || v20[1] != v24) && !*(_BYTE *)(*(_QWORD *)(a1 + 8) + 16))
  {
    v12 = sub_1000C5D10(a1, a2, &v21, v11, v25);
    sub_1000C6120(a1, &v21, (uint64_t)v18);
    for (i = v12 == 0; ; i = v14 != 0)
    {
      v10 |= i;
      if (v18[0] == v19[3] && v18[1] == v19[4])
        break;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 16))
        break;
      v14 = sub_1000C584C(a1, a2, v19, v11, v25);
      sub_1000C2FD0((uint64_t)v18);
    }
    sub_1000C2EB0((uint64_t)v20);
  }
  sub_100017CC8(&v25);
  return v10 & 1;
}

void sub_1000C5700(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100017CC8((uint64_t *)(v1 - 112));
  _Unwind_Resume(a1);
}

_QWORD *sub_1000C5728(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000E4214((uint64_t)a1, a2);
  *a1 = off_100188088;
  a1[45] = &off_100188188;
  a1[46] = &off_1001881B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100188088;
  a1[45] = off_100188110;
  a1[46] = off_100188138;
  return a1;
}

void sub_1000C57AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000D737C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C57D0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100188150);
  sub_1000D737C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_1000C5810(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 3680);
  std::mutex::lock((std::mutex *)(a1 + 3680));
  *(_BYTE *)(a1 + 3672) = 1;
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 3624));
  std::mutex::unlock(v2);
}

uint64_t sub_1000C584C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  unint64_t *v15;
  char v16;
  uint64_t v17;

  v5 = a3[1];
  v6 = *(_QWORD *)(*a3 + 56);
  v7 = (*(_QWORD *)(v6 + 16 * v5 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(*(_QWORD *)(*a3 + 8) + 20);
  if (!v7 || 3 * v7 <= (unint64_t)(4 * a4))
    return 4294967274;
  v9 = (unint64_t *)(v6 + 16 * v5);
  if (*v9)
  {
LABEL_4:
    v16 = 0;
    v14 = off_100191F18;
    v15 = v9;
    v17 = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
    sub_10011E50C(&v14);
    return 4294967282;
  }
  while (1)
  {
    v12 = __ldaxr(v9);
    if (!v12)
      break;
    __clrex();
LABEL_10:
    if (v12)
      goto LABEL_4;
  }
  if (__stlxr(0xFFFFFFFFFFFFFFFFLL, v9))
    goto LABEL_10;
  v16 = 1;
  v14 = off_100191F18;
  v15 = v9;
  v17 = 0;
  v13 = (*(_QWORD *)(*(_QWORD *)(*a3 + 56) + 16 * a3[1] + 8) & 0x7FFFFFFFFFFFFFLL)
      * *(unsigned int *)(*(_QWORD *)(*a3 + 8) + 20);
  v10 = sub_1000C59B0(a1, a2, a3, v13, a5);
  sub_10011E50C(&v14);
  if ((v10 & 0x80000000) == 0)
  {
    atomic_store(1u, (unsigned int *)(a1 + 96));
    sub_1000C3528(a1, v13);
  }
  return v10;
}

void sub_1000C599C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011E50C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C59B0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;

  if (!a4)
    return 0;
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 20);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 40))(*(_QWORD *)(a2 + 16));
  if (v11 - a4 >= v10)
    v12 = v10;
  else
    v12 = v11 - a4;
  result = sub_1000C5A40(*(unsigned int **)(a1 + 8), a2, a5, v12, a4);
  if ((result & 0x8000000000000000) == 0)
  {
    sub_1000C3E88(a3, v14);
    return 0;
  }
  return result;
}

uint64_t sub_1000C5A40(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v27;
  int v28;
  _QWORD v29[45];
  uint64_t v30;
  _BYTE v31[152];
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v10 = (std::__shared_weak_count *)*((_QWORD *)sub_1001207C0() + 1);
  v32 = a3;
  v33 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v34 = a4;
  v35 = a5;
  v36 = a4;
  v37 = 0;
  v13 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 16) + 88))(*(_QWORD *)(a2 + 16), &v32);
  if (v13 != a4)
  {
    *(_QWORD *)&v27 = "di_asif::details::dir_base::move_realloc_chunk(ContextASIF &, char *, size_t, uint64_t)";
    *((_QWORD *)&v27 + 1) = 46;
    v28 = 16;
    sub_1000CE304(v29, &v27);
    sub_100005A0C(&v30, (uint64_t)"Can't read for defrag", 21);
    std::ostream::~ostream(&v30, off_100189D70);
    sub_1000DE87C((uint64_t)v29);
    std::ios::~ios(v31);
    if (v13 < 0)
      v22 = v13;
    else
      v22 = -5;
    goto LABEL_21;
  }
  v14 = sub_1000C40F8(a1, a2, 0);
  if (!v14)
  {
    a4 = -28;
    goto LABEL_23;
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)sub_1001207C0() + 1);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = v33;
  v32 = a3;
  v33 = v15;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v34 = a4;
  v35 = v14;
  v36 = a4;
  v37 = 0;
  v21 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 16) + 80))(*(_QWORD *)(a2 + 16), &v32);
  if (v21 != a4)
  {
    *(_QWORD *)&v27 = "di_asif::details::dir_base::move_realloc_chunk(ContextASIF &, char *, size_t, uint64_t)";
    *((_QWORD *)&v27 + 1) = 46;
    v28 = 16;
    sub_1000CE3EC(v29, &v27);
    sub_100005A0C(&v30, (uint64_t)"Can't write table for defrag", 28);
    std::ostream::~ostream(&v30, off_100189F90);
    sub_1000DEE68((uint64_t)v29);
    std::ios::~ios(v31);
    sub_1000C4374((unint64_t *)a1, v14, a2);
    if (v21 < 0)
      v22 = v21;
    else
      v22 = -5;
LABEL_21:
    a4 = -(uint64_t)-v22;
  }
LABEL_23:
  v23 = v33;
  if (v33)
  {
    v24 = (unint64_t *)&v33->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return a4;
}

void sub_1000C5CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_1000CE494((uint64_t)va);
  sub_100012168(v4 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C5D10(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t (**v25)();
  unint64_t *v26;
  char v27;
  uint64_t v28;
  unint64_t v29;

  v5 = a3[1];
  v6 = *(_QWORD *)(*a3 + 56);
  v7 = (*(_QWORD *)(v6 + 16 * v5 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(*(_QWORD *)(*a3 + 8) + 20);
  if (!v7 || 3 * v7 <= (unint64_t)(4 * a4))
    return 4294967274;
  v9 = (unint64_t *)(v6 + 16 * v5);
  if (*v9)
  {
LABEL_4:
    v27 = 0;
    v25 = off_100191F18;
    v26 = v9;
    v28 = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
    sub_10011E50C(&v25);
    return 4294967274;
  }
  while (1)
  {
    v15 = __ldaxr(v9);
    if (!v15)
      break;
    __clrex();
LABEL_10:
    if (v15)
      goto LABEL_4;
  }
  if (__stlxr(0xFFFFFFFFFFFFFFFFLL, v9))
    goto LABEL_10;
  v27 = 1;
  v25 = off_100191F18;
  v26 = v9;
  v28 = 0;
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(unsigned __int16 *)(v16 + 18);
  v18 = ((*(_QWORD *)(*a3 + 352)
        + a3[1]
        / (unint64_t)(*(_QWORD *)(*(_QWORD *)(*a3 + 8) + 48) + 1)
        * *(_QWORD *)(*(_QWORD *)(*a3 + 8) + 48)
        * *(unsigned int *)(*(_QWORD *)(*a3 + 8) + 20))
       / v17
       - *(_QWORD *)(a1 + 352) / v17)
      / (*(_QWORD *)(v16 + 48)
       * (unint64_t)(*(_DWORD *)(v16 + 20) / v17));
  v19 = sub_1000C3F30(a1, v18);
  sub_1000C3FA0((unint64_t *)(*(_QWORD *)(a1 + 72) + 8 * v18), v19, &v24);
  if (!v24 || *(_BYTE *)(v24 + 344))
    goto LABEL_14;
  v20 = *(_QWORD *)(v24 + 288);
  if (v20)
  {
    v29 = v24;
    (*(void (**)(uint64_t, unint64_t *, unint64_t *))(*(_QWORD *)v20 + 48))(v20, &v29, &v24);
  }
  sub_1000C3FA0((unint64_t *)(*(_QWORD *)(a1 + 72) + 8 * v18), v19, &v29);
  sub_1000C4040(&v24, &v29);
  sub_1000C29D8(&v29);
  if (!v24 || *(_BYTE *)(v24 + 344))
  {
LABEL_14:
    (*(void (**)(unint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8)
                                                                                              + 32))(&v29, *(_QWORD *)(a1 + 8), v19, 1);
    sub_1000C4040(&v24, &v29);
    sub_1000C29D8(&v29);
    if (!v24 || *(_BYTE *)(v24 + 344) || (v22 = atomic_load((unsigned int *)(v24 + 24)), v22 == 2))
    {
      if (v24 && !*(_BYTE *)(v24 + 344))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
        v10 = 4294967248;
      }
      else
      {
        v10 = 4294967274;
      }
    }
    else
    {
      v7 = (*(_QWORD *)(*(_QWORD *)(*a3 + 56) + 16 * a3[1] + 8) & 0x7FFFFFFFFFFFFFLL)
         * *(unsigned int *)(*(_QWORD *)(*a3 + 8) + 20);
      v10 = sub_1000C59B0(a1, a2, a3, v7, a5);
    }
    if (v24)
    {
      if (!*(_BYTE *)(v24 + 344))
      {
        v23 = *(_QWORD *)(v24 + 288);
        if (v23)
        {
          v29 = v24;
          (*(void (**)(uint64_t, unint64_t *, unint64_t *))(*(_QWORD *)v23 + 48))(v23, &v29, &v24);
        }
      }
    }
    v21 = 1;
  }
  else
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
    v21 = 0;
    v10 = 4294967274;
  }
  sub_1000C29D8(&v24);
  sub_10011E50C(&v25);
  if (!v21)
    return 4294967248;
  if (!(_DWORD)v10)
  {
    atomic_store(1u, (unsigned int *)(a1 + 96));
    sub_1000C3528(a1, v7);
  }
  return v10;
}

void sub_1000C6060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10)
{
  sub_1000C29D8(&a9);
  sub_10011E50C(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C609C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  char v8;

  v5 = *(_QWORD *)(a1 + 352);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + v5;
  if (v5 >= v6)
  {
    v8 = 0;
    result = 0;
  }
  else
  {
    result = sub_1000C2E44(a1, *(_QWORD *)(a1 + 352));
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + *(_QWORD *)(a1 + 352);
    v8 = 1;
  }
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)(a3 + 16) = result;
  *(_QWORD *)(a3 + 24) = a2;
  *(_BYTE *)(a3 + 32) = v8;
  *(_QWORD *)(a3 + 40) = a1;
  *(_QWORD *)(a3 + 48) = v6;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 72) = 0;
  return result;
}

uint64_t sub_1000C6120@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  char v23;

  v6 = *(_QWORD *)(*a2 + 352)
     + a2[1]
     / (unint64_t)(*(_QWORD *)(*(_QWORD *)(*a2 + 8) + 48) + 1)
     * *(_QWORD *)(*(_QWORD *)(*a2 + 8) + 48)
     * *(unsigned int *)(*(_QWORD *)(*a2 + 8) + 20);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 352) + *(_QWORD *)(v7 + 80);
  if (v6 >= v8)
  {
    v12 = 0;
    v11 = 0;
    v17 = 0;
    v16 = *(_QWORD *)(*a2 + 352)
        + a2[1]
        / (unint64_t)(*(_QWORD *)(*(_QWORD *)(*a2 + 8) + 48) + 1)
        * *(_QWORD *)(*(_QWORD *)(*a2 + 8) + 48)
        * *(unsigned int *)(*(_QWORD *)(*a2 + 8) + 20);
  }
  else
  {
    v10 = sub_1000C2F74(a1, v6);
    v3 = a2;
    v11 = v10 & 0xFFFFFFFFFFFFFF00;
    v12 = v10;
    v13 = *(_QWORD *)(*a2 + 8);
    v14 = *(_QWORD *)(v13 + 48);
    v15 = *(unsigned int *)(v13 + 20);
    v7 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(*a2 + 352) + a2[1] / (unint64_t)(v14 + 1) * v14 * v15;
    v8 = *(_QWORD *)(a1 + 352) + *(_QWORD *)(v7 + 80);
    v17 = 1;
  }
  v18 = *(unsigned __int16 *)(v7 + 18);
  v19 = *(_DWORD *)(v7 + 20) / v18;
  v20 = *(_QWORD *)(v7 + 48);
  v21 = v16 + v18 * (unint64_t)v19 * v20;
  if (v21 >= v8)
  {
    v23 = 0;
    result = 0;
  }
  else
  {
    result = sub_1000C2F74(a1, v16 + v18 * (unint64_t)v19 * v20);
    v23 = 1;
  }
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v11 | v12;
  *(_QWORD *)(a3 + 24) = v3;
  *(_BYTE *)(a3 + 32) = v17;
  *(_QWORD *)(a3 + 40) = a1;
  *(_QWORD *)(a3 + 48) = v21;
  *(_QWORD *)(a3 + 56) = result;
  *(_QWORD *)(a3 + 64) = a2;
  *(_BYTE *)(a3 + 72) = v23;
  return result;
}

uint64_t sub_1000C6254(uint64_t a1)
{
  std::mutex *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_100187760;
  v2 = (std::mutex *)(a1 + 3680);
  std::mutex::lock((std::mutex *)(a1 + 3680));
  *(_BYTE *)(a1 + 16) = 1;
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 3624));
  std::mutex::unlock(v2);
  std::thread::join((std::thread *)(a1 + 3616));
  std::mutex::~mutex((std::mutex *)(a1 + 3792));
  sub_1000C2854((_QWORD *)(a1 + 3744));
  std::mutex::~mutex(v2);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 3624));
  std::thread::~thread((std::thread *)(a1 + 3616));
  std::mutex::~mutex((std::mutex *)(a1 + 3528));
  sub_1000E4CF4(a1 + 2080);
  sub_1000E4290(a1 + 280);
  sub_100027D5C(a1 + 248, *(_QWORD **)(a1 + 256));
  std::mutex::~mutex((std::mutex *)(a1 + 184));
  v3 = *(void **)(a1 + 152);
  if (v3)
  {
    *(_QWORD *)(a1 + 160) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(_QWORD *)(a1 + 136) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD **)(a1 + 112);
  if (v5 == (_QWORD *)(a1 + 88))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 88);
    goto LABEL_9;
  }
  if (v5)
  {
    v6 = 5;
LABEL_9:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t sub_1000C6364(uint64_t a1)
{
  sub_100027D5C(a1 + 72, *(_QWORD **)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void sub_1000C639C(uint64_t a1)
{
  sub_1000C6254(a1);
  operator delete();
}

__n128 sub_1000C63C0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v8;
  __n128 result;
  _OWORD v10[5];

  sub_1000C2DA8((uint64_t *)v10, a2, a3, *(_QWORD *)(a1 + 80), *(unsigned __int16 *)(a1 + 18), 0, *(_QWORD *)(a1 + 120), 0);
  sub_1000C2DA8((uint64_t *)(a4 + 80), a2, a3, *(_QWORD *)(a1 + 80), *(unsigned __int16 *)(a1 + 18), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 120), 0);
  v8 = v10[3];
  *(_OWORD *)(a4 + 32) = v10[2];
  *(_OWORD *)(a4 + 48) = v8;
  *(_OWORD *)(a4 + 64) = v10[4];
  result = (__n128)v10[1];
  *(_OWORD *)a4 = v10[0];
  *(__n128 *)(a4 + 16) = result;
  return result;
}

void sub_1000C6450(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void **v29;
  unint64_t *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;

  sub_1000D7130(&v39, (uint64_t)a1, a3);
  v43 = v39;
  if ((*(_QWORD *)(*(_QWORD *)(v39 + 56) + 16 * *((_QWORD *)&v39 + 1) + 8) & 0x7FFFFFFFFFFFFFLL)
     * *(unsigned int *)(*(_QWORD *)(v39 + 8) + 20))
  {
    sub_1000C6120((uint64_t)a1, &v43, (uint64_t)&v39);
    v36 = v39;
    v37 = v40;
    v38 = v41;
    while (v36 != v42)
    {
      v5 = atomic_load((unint64_t *)(*(_QWORD *)(v37 + 56) + 16 * *((_QWORD *)&v37 + 1) + 8));
      if (v5 >> 62 == 3)
        return;
      sub_1000C2FD0((uint64_t)&v36);
    }
    if ((*(_QWORD *)(*(_QWORD *)(v43 + 56) + 16 * *((_QWORD *)&v43 + 1) + 8) & 0x7FFFFFFFFFFFFFLL)
       * *(unsigned int *)(*(_QWORD *)(v43 + 8) + 20))
    {
      v36 = v39;
      if (v38 == v41)
      {
        if ((_BYTE)v38)
          *((_QWORD *)&v37 + 1) = *((_QWORD *)&v40 + 1);
      }
      else if ((_BYTE)v38)
      {
        LOBYTE(v38) = 0;
      }
      else
      {
        v37 = v40;
        LOBYTE(v38) = 1;
      }
      v33 = 0;
      v34 = 0;
      v35 = 0;
      while (v36 != v42)
      {
        v6 = (unint64_t *)(*(_QWORD *)(v37 + 56) + 16 * *((_QWORD *)&v37 + 1));
        do
        {
          if (!*v6)
          {
            do
            {
              v7 = __ldaxr(v6);
              if (v7)
              {
                __clrex();
              }
              else if (!__stlxr(0xFFFFFFFFFFFFFFFFLL, v6))
              {
                v8 = 1;
                goto LABEL_25;
              }
            }
            while (!v7);
          }
        }
        while ((sub_1000DE050(v6, 1) & 1) != 0);
        v8 = 0;
LABEL_25:
        v31 = v8;
        v29 = (void **)off_100191F18;
        v30 = v6;
        v32 = 0;
        v9 = (_QWORD *)v34;
        if (v34 >= v35)
        {
          v10 = sub_1000D7818(&v33, (uint64_t)&v29);
        }
        else
        {
          sub_10011E364(v34, (uint64_t)&v29);
          *v9 = off_100191F18;
          v9[3] = v32;
          v10 = (uint64_t)(v9 + 4);
        }
        v34 = v10;
        sub_10011E50C(&v29);
        v11 = atomic_load((unint64_t *)(*(_QWORD *)(v37 + 56) + 16 * *((_QWORD *)&v37 + 1) + 8));
        if (v11 >> 62 == 3)
          goto LABEL_54;
        sub_1000C2FD0((uint64_t)&v36);
      }
      v12 = (unint64_t *)(*(_QWORD *)(v43 + 56) + 16 * *((_QWORD *)&v43 + 1));
      if ((v12[1] & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(*(_QWORD *)(v43 + 8) + 20))
      {
        do
        {
          if (!*v12)
          {
            do
            {
              v13 = __ldaxr(v12);
              if (v13)
              {
                __clrex();
              }
              else if (!__stlxr(0xFFFFFFFFFFFFFFFFLL, v12))
              {
                v14 = 1;
                goto LABEL_40;
              }
            }
            while (!v13);
          }
        }
        while ((sub_1000DE050(v12, 1) & 1) != 0);
        v14 = 0;
LABEL_40:
        v31 = v14;
        v29 = (void **)off_100191F18;
        v30 = v12;
        v32 = 0;
        v15 = v43;
        v16 = *(_QWORD *)(v43 + 8);
        v17 = *(unsigned int *)(v16 + 20);
        if ((*(_QWORD *)(*(_QWORD *)(v43 + 56) + 16 * *((_QWORD *)&v43 + 1) + 8) & 0x7FFFFFFFFFFFFFLL) * v17)
        {
          sub_1000C3A80((uint64_t)a1, a2, (*(_QWORD *)(v43 + 352)+ *(_QWORD *)(v16 + 48) * v17 * (*((_QWORD *)&v43 + 1) / (unint64_t)(*(_QWORD *)(v16 + 48) + 1)))/ *(unsigned __int16 *)(a1[1] + 18), 1, 1, &v28);
          if (v28 && !*(_BYTE *)(v28 + 344))
          {
            if (*(_BYTE *)(v28 + 224))
              v18 = v28 + 40;
            else
              v18 = 0;
            v19 = *(_QWORD *)(v18 + 16);
            *(_QWORD *)(v18 + 16) = 0;
            *(_QWORD *)(v18 + 24) = v19;
            *(_BYTE *)(v18 + 112) = 0;
            if (v28)
            {
              v20 = *(_QWORD *)(v28 + 288);
              if (v20)
              {
                v44 = v28;
                (*(void (**)(uint64_t, unint64_t *, unint64_t *))(*(_QWORD *)v20 + 48))(v20, &v44, &v28);
              }
            }
            v21 = a1[1];
            v22 = *(unsigned __int16 *)(v21 + 18);
            v23 = (*(_QWORD *)(v15 + 352)
                 + *((_QWORD *)&v15 + 1)
                 / (unint64_t)(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 48) + 1)
                 * *(_QWORD *)(*(_QWORD *)(v15 + 8) + 48)
                 * *(unsigned int *)(*(_QWORD *)(v15 + 8) + 20))
                / v22
                - a1[44] / v22;
            v24 = *(_QWORD *)(v21 + 48) * (*(_DWORD *)(v21 + 20) / v22);
            v44 = 0;
            v25 = a1[9];
            v26 = v23 / v24;
            do
              v27 = __ldaxr(&v44);
            while (__stlxr(0, &v44));
            atomic_store(v27, (unint64_t *)(v25 + 8 * v26));
          }
          sub_1000C29D8(&v28);
        }
        sub_10011E50C(&v29);
      }
LABEL_54:
      v29 = (void **)&v33;
      sub_1000D7A94(&v29);
    }
  }
}

void sub_1000C6898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_1000C29D8(&a9);
  sub_10011E50C(&a10);
  a10 = (void **)&a14;
  sub_1000D7A94(&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000C68F4(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  int v10;

  v3 = sub_100005A0C(a1, (uint64_t)"table entry data@", 17);
  v4 = (_QWORD *)std::ostream::operator<<(v3, *(_QWORD *)(*a2 + 352)+ (*(_QWORD *)(*(_QWORD *)(*a2 + 8) + 48) + *(_QWORD *)(*(_QWORD *)(*a2 + 8) + 48) * a2[1])/ (unint64_t)(*(_QWORD *)(*(_QWORD *)(*a2 + 8) + 48) + 1)* *(unsigned int *)(*(_QWORD *)(*a2 + 8) + 20));
  v5 = sub_100005A0C(v4, (uint64_t)" = offset = ", 12);
  v6 = (_QWORD *)std::ostream::operator<<(v5, (*(_QWORD *)(*(_QWORD *)(*a2 + 56) + 16 * a2[1] + 8) & 0x7FFFFFFFFFFFFFLL)* *(unsigned int *)(*(_QWORD *)(*a2 + 8) + 20));
  v7 = sub_100005A0C(v6, (uint64_t)", flags = ", 10);
  v8 = atomic_load((unint64_t *)(*(_QWORD *)(*a2 + 56) + 16 * a2[1] + 8));
  v10 = v8 >> 62;
  return sub_1000D0A14(v7, &v10);
}

__n128 sub_1000C69B8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __n128 result;
  _QWORD *exception;
  const std::error_category *v65;
  _QWORD *v66;
  const std::error_category *v67;
  _QWORD *v68;
  const std::error_category *v69;
  std::mutex *v71;
  int v72;
  __int128 v73;
  int v74;
  unsigned int v75[90];
  _QWORD v76[20];
  uint64_t (**v77)();
  unint64_t *v78;
  char v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  char v83;
  _BYTE v84[32];
  _BYTE v85[32];
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;

  v71 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  sub_1000C4C20(a3, a4, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 20), *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18), *(_QWORD *)(a1 + 352), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + *(_QWORD *)(a1 + 352), (uint64_t)v84);
  v9 = 0;
  LOBYTE(v82) = 0;
  v83 = 0;
  v72 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 184);
LABEL_2:
  while (*(_QWORD *)v84 != v87
       || *(_OWORD *)&v84[8] != v88
       || *(_QWORD *)&v84[16] != *(_QWORD *)v84 + 16 * *(_QWORD *)&v84[8]
       && (*(_OWORD *)&v85[8] != v89 || *(_QWORD *)&v85[24] != v90))
  {
    v10 = *(_QWORD *)&v84[24];
    v11 = *(_QWORD *)v85;
    *(_QWORD *)&v85[8] += *(_QWORD *)&v85[24] * *(_QWORD *)v85;
    *(_QWORD *)&v84[24] = sub_1000C2CEC((uint64_t *)v84);
    *(_QWORD *)v85 = v12;
    v13 = v10 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18);
    v14 = sub_1000C2F74(a1, v13);
    v16 = (_QWORD *)v14;
    v17 = v15;
    *(_QWORD *)&v81 = v14;
    *((_QWORD *)&v81 + 1) = v15;
    if (v83)
    {
      v18 = v82;
      if (*(_QWORD *)(v14 + 352) != *(_QWORD *)(v82 + 352) || v15 != *((_QWORD *)&v82 + 1))
      {
        v9 |= sub_1000C3644(a1, a2, &v82);
        v20 = *(_QWORD *)(v18 + 8);
        v21 = (*(_QWORD *)(v18 + 352)
             + (*(_QWORD *)(v20 + 48) + *(_QWORD *)(v20 + 48) * *((_QWORD *)&v82 + 1))
             / (unint64_t)(*(_QWORD *)(v20 + 48) + 1)
             * *(unsigned int *)(v20 + 20))
            / *(unsigned __int16 *)(v20 + 18);
        v22 = *(_QWORD *)(a1 + 8);
        v23 = *(_QWORD *)(v22 + 48);
        v24 = *(_DWORD *)(v22 + 20);
        v25 = *(unsigned __int16 *)(v22 + 18);
        v26 = v23 * (v24 / v25);
        v27 = *(_QWORD *)(a1 + 352) / v25;
        ++v23;
        v28 = v23 + v23 * ((v21 - v27) / v26);
        v29 = v16[1];
        if (v28 != v23
                  + v23
                  * (((v16[44]
                     + (*(_QWORD *)(v29 + 48) + *(_QWORD *)(v29 + 48) * v17)
                     / (unint64_t)(*(_QWORD *)(v29 + 48) + 1)
                     * *(unsigned int *)(v29 + 20))
                    / *(unsigned __int16 *)(v29 + 18)
                    - v27)
                   / v26)
          && (v9 & 1) != 0)
        {
          sub_1000C6450((_QWORD *)a1, a2, v28 - 1);
          v9 = 0;
        }
      }
      *((_QWORD *)&v82 + 1) = v17;
    }
    else
    {
      v82 = v81;
      v83 = 1;
    }
    v30 = atomic_load((unint64_t *)(v16[7] + 16 * v17 + 8));
    v31 = v30 >> 62;
    if (v30 >> 62 != 2)
    {
      v32 = *(_QWORD *)(v81 + 8);
      v33 = *(_QWORD *)(v32 + 48);
      v34 = *(unsigned int *)(v32 + 20);
      if (*(_QWORD *)(v81 + 352) + (v33 + v33 * *((_QWORD *)&v81 + 1)) / (unint64_t)(v33 + 1) * v34 == v13
        && v11 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18) == v34)
      {
        v35 = (unint64_t *)(*(_QWORD *)(v81 + 56) + 16 * *((_QWORD *)&v81 + 1));
        while (*v35)
        {
LABEL_28:
          if ((sub_1000DE050(v35, 1) & 1) == 0)
          {
            v79 = 0;
            v78 = v35;
            v77 = off_100191F18;
            v80 = 0;
            *(_QWORD *)&v73 = "di_asif::details::table::unmap(ContextASIF &, const unmap_extent_t *, size_t)";
            *((_QWORD *)&v73 + 1) = 30;
            v74 = 16;
            sub_1000C735C(v75, &v73);
            sub_100005A0C(v76, (uint64_t)"Couldn't lock entry ", 20);
            sub_1000C68F4(v76, &v81);
            sub_1000C7404((uint64_t)v75);
            exception = __cxa_allocate_exception(0x40uLL);
            *exception = &off_1001924F8;
            v65 = std::generic_category();
            exception[1] = 4294967282;
            exception[2] = v65;
            *((_BYTE *)exception + 24) = 0;
            *((_BYTE *)exception + 48) = 0;
            exception[7] = "Couldn't lock entry";
          }
        }
        while (1)
        {
          v36 = __ldaxr(v35);
          if (!v36)
            break;
          __clrex();
LABEL_27:
          if (v36)
            goto LABEL_28;
        }
        if (__stlxr(0xFFFFFFFFFFFFFFFFLL, v35))
          goto LABEL_27;
        v79 = 1;
        v78 = v35;
        v77 = off_100191F18;
        v80 = 0;
        v42 = atomic_load((unint64_t *)(*(_QWORD *)(v81 + 56) + 16 * *((_QWORD *)&v81 + 1) + 8));
        if ((_DWORD)v31 != 1 && (v42 & 0xC000000000000000) == 0x4000000000000000)
          goto LABEL_49;
        v43 = (unint64_t *)(*(_QWORD *)(v81 + 56) + 16 * *((_QWORD *)&v81 + 1) + 8);
        v44 = *v43;
        v45 = __ldaxr(v43);
        if (v45 == v44)
        {
          if (!__stlxr(v44 & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000, v43))
            goto LABEL_56;
        }
        else
        {
          __clrex();
        }
        do
        {
          while (1)
          {
            v44 = v45;
            v45 = __ldaxr(v43);
            if (v45 == v44)
              break;
            __clrex();
          }
        }
        while (__stlxr(v44 & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000, v43));
LABEL_56:
        v48 = v44 >> 62 == 3;
        v49 = (unint64_t *)(*(_QWORD *)(v81 + 56) + 16 * *((_QWORD *)&v81 + 1) + 8);
        v50 = *v49;
        v51 = *(unsigned int *)(*(_QWORD *)(v81 + 8) + 20);
        if ((_DWORD)v51)
        {
          do
            v52 = __ldxr(v49);
          while (__stxr(v52 & 0xFF80000000000000, v49));
          goto LABEL_69;
        }
        v53 = *v49;
        v54 = __ldxr(v49);
        if (v54 != v53)
        {
          __clrex();
LABEL_63:
          while (1)
          {
            v55 = __ldxr(v49);
            if (v55 != v54)
              break;
            if (__stxr(v54 & 0xFF80000000000000, v49))
              goto LABEL_67;
            v56 = 1;
LABEL_68:
            v54 = v55;
            if (v56)
              goto LABEL_69;
          }
          __clrex();
LABEL_67:
          v56 = 0;
          goto LABEL_68;
        }
        if (__stxr(v53 & 0xFF80000000000000, v49))
          goto LABEL_63;
LABEL_69:
        v9 |= v48;
        v57 = (v50 & 0x7FFFFFFFFFFFFFLL) * v51;
        atomic_store(1u, (unsigned int *)(a1 + 96));
        sub_10011E50C(&v77);
        if (v57)
          sub_1000C3528(a1, v57);
      }
      else
      {
        if ((v30 & 0x4000000000000000) == 0)
        {
          if (v72)
            continue;
          v37 = (unint64_t *)(*(_QWORD *)(v81 + 56) + 16 * *((_QWORD *)&v81 + 1));
          while (*v37)
          {
LABEL_40:
            if ((sub_1000DE050(v37, 1) & 1) == 0)
            {
              v79 = 0;
              v78 = v37;
              v77 = off_100191F18;
              v80 = 0;
              *(_QWORD *)&v73 = "di_asif::details::table::unmap(ContextASIF &, const unmap_extent_t *, size_t)";
              *((_QWORD *)&v73 + 1) = 30;
              v74 = 16;
              sub_1000C752C(v75, &v73);
              sub_100005A0C(v76, (uint64_t)"Couldn't exclusively lock entry ", 32);
              sub_1000C68F4(v76, &v81);
              sub_1000C75D4((uint64_t)v75);
              v66 = __cxa_allocate_exception(0x40uLL);
              *v66 = &off_1001924F8;
              v67 = std::generic_category();
              v66[1] = 4294967282;
              v66[2] = v67;
              *((_BYTE *)v66 + 24) = 0;
              *((_BYTE *)v66 + 48) = 0;
              v66[7] = "Couldn't lock entry";
            }
          }
          while (1)
          {
            v38 = __ldaxr(v37);
            if (v38)
            {
              __clrex();
            }
            else if (!__stlxr(0xFFFFFFFFFFFFFFFFLL, v37))
            {
              v79 = 1;
              v78 = v37;
              v77 = off_100191F18;
              v80 = 0;
              v46 = atomic_load((unint64_t *)(*(_QWORD *)(v81 + 56) + 16 * *((_QWORD *)&v81 + 1) + 8));
              v47 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18);
              *(_QWORD *)v75 = sub_1000CD3A4(a1, v10 * v47, v11 * v47);
              sub_1000C4478(a1, a2, &v81, v75, 2u, (unint64_t)&_mh_execute_header & 0xFFFFFFFFFFFFFFFCLL | (v46 >> 62));
LABEL_49:
              sub_10011E50C(&v77);
              goto LABEL_2;
            }
            if (v38)
              goto LABEL_40;
          }
        }
        v39 = (unint64_t *)(*(_QWORD *)(v81 + 56) + 16 * *((_QWORD *)&v81 + 1));
        v40 = sub_1000DDFC4(v39);
        v77 = off_100191EF8;
        v78 = v39;
        v79 = v40;
        if (!v40)
        {
          *(_QWORD *)&v73 = "di_asif::details::table::unmap(ContextASIF &, const unmap_extent_t *, size_t)";
          *((_QWORD *)&v73 + 1) = 30;
          v74 = 16;
          sub_1000C7444(v75, &v73);
          sub_100005A0C(v76, (uint64_t)"Couldn't lock entry ", 20);
          sub_1000C68F4(v76, &v81);
          sub_1000C74EC((uint64_t)v75);
          v68 = __cxa_allocate_exception(0x40uLL);
          *v68 = &off_1001924F8;
          v69 = std::generic_category();
          v68[1] = 4294967282;
          v68[2] = v69;
          *((_BYTE *)v68 + 24) = 0;
          *((_BYTE *)v68 + 48) = 0;
          v68[7] = "Couldn't lock entry";
        }
        v41 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18);
        *(_QWORD *)v75 = sub_1000CD3A4(a1, v10 * v41, v11 * v41);
        sub_1000C4478(a1, a2, &v81, v75, 2u, v31 | (unint64_t)&_mh_execute_header);
        sub_10011E3D8(&v77);
      }
    }
  }
  if (v83 && ((sub_1000C3644(a1, a2, &v82) | v9) & 1) != 0)
  {
    v58 = *(_QWORD *)(v82 + 8);
    v59 = *(_QWORD *)(a1 + 8);
    v60 = *(_QWORD *)(v59 + 48);
    sub_1000C6450((_QWORD *)a1, a2, v60+ (v60 + 1)* (((*(_QWORD *)(v82 + 352)+ (*(_QWORD *)(v58 + 48) + *(_QWORD *)(v58 + 48) * *((_QWORD *)&v82 + 1))/ (unint64_t)(*(_QWORD *)(v58 + 48) + 1)* *(unsigned int *)(v58 + 20))/ *(unsigned __int16 *)(v58 + 18)- *(_QWORD *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v59 + 18))/ (v60* (unint64_t)(*(_DWORD *)(v59 + 20) / *(unsigned __int16 *)(v59 + 18)))));
  }
  v61 = *(_OWORD *)&v85[16];
  a5[2] = *(_OWORD *)v85;
  a5[3] = v61;
  a5[4] = v86;
  v62 = *(_OWORD *)&v84[16];
  *a5 = *(_OWORD *)v84;
  a5[1] = v62;
  std::mutex::unlock(v71);
  return result;
}

void sub_1000C72C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000C735C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000E51A8((uint64_t)a1, a2);
  *a1 = off_100188328;
  a1[45] = &off_100188428;
  a1[46] = &off_100188450;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100188328;
  a1[45] = off_1001883B0;
  a1[46] = off_1001883D8;
  return a1;
}

void sub_1000C73E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000D7D14(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C7404(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001883F0);
  sub_1000D7D14(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000C7444(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000E5224((uint64_t)a1, a2);
  *a1 = off_100188548;
  a1[45] = &off_100188648;
  a1[46] = &off_100188670;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100188548;
  a1[45] = off_1001885D0;
  a1[46] = off_1001885F8;
  return a1;
}

void sub_1000C74C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000D8300(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C74EC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100188610);
  sub_1000D8300(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000C752C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000E52A0((uint64_t)a1, a2);
  *a1 = off_100188768;
  a1[45] = &off_100188868;
  a1[46] = &off_100188890;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100188768;
  a1[45] = off_1001887F0;
  a1[46] = off_100188818;
  return a1;
}

void sub_1000C75B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000D88EC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C75D4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100188830);
  sub_1000D88EC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

BOOL sub_1000C7614(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  size_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  char v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  _BYTE *v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  size_t v38;
  uint64_t v39;
  unint64_t **v40;
  unint64_t *v41;
  char *v42;
  unint64_t *v43;
  int v44;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  const std::error_category *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  const std::error_category *v53;
  std::bad_alloc *exception;
  std::bad_alloc *v55;
  unsigned int v57;
  unint64_t v59[2];
  _QWORD v60[8];
  _QWORD v61[2];
  char v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  char v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[24];
  _BYTE *v72;
  _QWORD v73[2];
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v69 = 0u;
  v70 = 0u;
  v68 = 0u;
  v2 = (unsigned int *)(a1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(0, v2));
  v57 = v3;
  std::mutex::lock((std::mutex *)(a1 + 280));
  v4 = v68;
  v5 = v69;
  v6 = *(_OWORD *)(a1 + 248);
  v7 = *(_OWORD *)(a1 + 264);
  v68 = *(_OWORD *)(a1 + 232);
  v69 = v6;
  *(_OWORD *)(a1 + 232) = v4;
  *(_OWORD *)(a1 + 248) = v5;
  v8 = v70;
  v70 = v7;
  *(_OWORD *)(a1 + 264) = v8;
  std::mutex::unlock((std::mutex *)(a1 + 280));
  v9 = ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18)
      + 8 * *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)
      - 1)
     / *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18)
     * *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18);
  v10 = malloc_type_valloc(v9, 0xF8ED6DDuLL);
  if (!v10)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v55 = std::bad_alloc::bad_alloc(exception);
  }
  v73[0] = off_1001882A0;
  v75 = (unint64_t)v73;
  v78 = (uint64_t)v10;
  sub_1000181E0((uint64_t)&v79, (uint64_t)v73);
  v11 = (_QWORD *)v75;
  if ((_QWORD *)v75 == v73)
  {
    v12 = 4;
    v11 = v73;
    goto LABEL_8;
  }
  if (v75)
  {
    v12 = 5;
LABEL_8:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  v13 = v78;
  std::mutex::lock((std::mutex *)(a1 + 168));
  sub_1000C609C(a1, v14, (uint64_t)v73);
  v15 = 0;
  v16 = v13 + v9;
  v67 = *(_QWORD *)(a1 + 344);
  v66 = 0;
  *(_QWORD *)&v64 = a2;
  *((_QWORD *)&v64 + 1) = &v67;
  *(_QWORD *)&v65 = v13;
  *((_QWORD *)&v65 + 1) = &v66;
  v17 = (_QWORD *)v13;
  while (v73[0] != v76 || v73[1] != v77)
  {
    v18 = (unint64_t *)(v74[7] + 16 * v75 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 & 0x7FFFFFFFFFFFFFFFLL, v18));
    if ((v19 & 0x8000000000000000) != 0)
    {
      sub_1000C3A80(a1, a2, (v74[44]+ v75 / (*(_QWORD *)(v74[1] + 48) + 1) * *(_QWORD *)(v74[1] + 48) * *(unsigned int *)(v74[1] + 20))/ *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18), 0, 0, v59);
      if (v59[0] && !*(_BYTE *)(v59[0] + 344))
      {
        if (*(_BYTE *)(v59[0] + 224))
          v20 = v59[0] + 40;
        else
          v20 = 0;
        v21 = sub_1000C8068(v20, a2, a1);
        if (v21)
        {
          sub_1000A1868(a2);
          v50 = __cxa_allocate_exception(0x40uLL);
          v51 = v50;
          if (v21 < 0)
            v52 = v21;
          else
            v52 = -v21;
          *v50 = &off_1001924F8;
          v53 = std::generic_category();
          v51[1] = v52;
          v51[2] = v53;
          *((_BYTE *)v51 + 24) = 0;
          *((_BYTE *)v51 + 48) = 0;
          v51[7] = "Can't flush asif, bitmap flush failed";
        }
        v66 = 1;
      }
      sub_1000C29D8(v59);
    }
    v22 = (unint64_t *)(v74[7] + 16 * v75);
    while (*v22)
    {
LABEL_31:
      if ((sub_1000DE050(v22, 1) & 1) == 0)
      {
        v24 = 0;
        goto LABEL_33;
      }
    }
    while (1)
    {
      v23 = __ldaxr(v22);
      if (!v23)
        break;
      __clrex();
LABEL_30:
      if (v23)
        goto LABEL_31;
    }
    if (__stlxr(0xFFFFFFFFFFFFFFFFLL, v22))
      goto LABEL_30;
    v24 = 1;
LABEL_33:
    v62 = v24;
    v61[0] = off_100191F18;
    v61[1] = v22;
    v63 = 0;
    v25 = (unint64_t *)(v74[7] + 16 * v75 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 & 0x7FFFFFFFFFFFFFFFLL, v25));
    sub_1000C80DC(&v74);
    if ((v26 & 0x8000000000000000) != 0)
    {
      sub_1000C3A80(a1, a2, (v74[44]+ v75 / (*(_QWORD *)(v74[1] + 48) + 1) * *(_QWORD *)(v74[1] + 48) * *(unsigned int *)(v74[1] + 20))/ *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18), 1, 0, v59);
      if (v59[0] && !*(_BYTE *)(v59[0] + 344))
      {
        if (*(_BYTE *)(v59[0] + 224))
          v27 = v59[0] + 40;
        else
          v27 = 0;
        v28 = sub_1000C8068(v27, a2, a1);
        if (v28)
        {
          sub_1000A1868(a2);
          v46 = __cxa_allocate_exception(0x40uLL);
          v47 = v46;
          if (v28 < 0)
            v48 = v28;
          else
            v48 = -v28;
          *v46 = &off_1001924F8;
          v49 = std::generic_category();
          v47[1] = v48;
          v47[2] = v49;
          *((_BYTE *)v47 + 24) = 0;
          *((_BYTE *)v47 + 48) = 0;
          v47[7] = "Can't flush asif, bitmap flush failed";
        }
        v66 = 1;
      }
      sub_1000C29D8(v59);
    }
    ++v15;
    if (!v57)
    {
      if (v17 != (_QWORD *)v13)
        sub_1000C81CC((uint64_t)&v64, (uint64_t)v17);
      v67 = *(_QWORD *)(a1 + 344) + 8 * (v15 + v15 * *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48));
      goto LABEL_66;
    }
    sub_1000C6120(a1, &v74, (uint64_t)v59);
    while (2)
    {
      if (v59[0] != v60[3] || v59[1] != v60[4])
      {
        sub_1000C8390(v60);
        v29 = atomic_load((unint64_t *)(*(_QWORD *)(v60[0] + 56) + 16 * v60[1] + 8));
        *v17++ = bswap64(v29);
        v30 = operator new(0x28uLL);
        *(_QWORD *)v30 = off_10018AE10;
        v31 = v65;
        *(_OWORD *)(v30 + 8) = v64;
        *(_OWORD *)(v30 + 24) = v31;
        v72 = v30;
        if ((unint64_t)v17 < v16)
          goto LABEL_52;
        sub_1000C81CC((uint64_t)(v30 + 8), (uint64_t)v17);
        v30 = v72;
        v17 = (_QWORD *)v13;
        if (v72 != v71)
        {
          if (v72)
          {
            v17 = (_QWORD *)v13;
LABEL_52:
            v32 = 5;
LABEL_54:
            (*(void (**)(void))(*(_QWORD *)v30 + 8 * v32))();
          }
          sub_1000C2FD0((uint64_t)v59);
          continue;
        }
        v30 = v71;
        v32 = 4;
        goto LABEL_54;
      }
      break;
    }
    v33 = atomic_load((unint64_t *)(v74[7] + 16 * v75 + 8));
    *v17++ = bswap64(v33);
    v34 = operator new(0x28uLL);
    *(_QWORD *)v34 = off_10018AE10;
    v35 = v65;
    *(_OWORD *)(v34 + 8) = v64;
    *(_OWORD *)(v34 + 24) = v35;
    v72 = v34;
    if ((unint64_t)v17 < v16)
      goto LABEL_60;
    sub_1000C81CC((uint64_t)(v34 + 8), (uint64_t)v17);
    v34 = v72;
    v17 = (_QWORD *)v13;
    if (v72 == v71)
    {
      v34 = v71;
      v36 = 4;
      goto LABEL_65;
    }
    if (v72)
    {
      v17 = (_QWORD *)v13;
LABEL_60:
      v36 = 5;
LABEL_65:
      (*(void (**)(void))(*(_QWORD *)v34 + 8 * v36))();
    }
LABEL_66:
    sub_10011E50C(v61);
    sub_1000C2EB0((uint64_t)v73);
  }
  if (v17 != (_QWORD *)v13)
  {
    v37 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18);
    v38 = v37 + ((unint64_t)v17 - v13) / v37 * v37 - ((_QWORD)v17 - v13);
    bzero(v17, v38);
    sub_1000C81CC((uint64_t)&v64, (uint64_t)v17 + v38);
  }
  std::mutex::unlock((std::mutex *)(a1 + 168));
  sub_100017CC8(&v78);
  v39 = *((_QWORD *)&v70 + 1);
  v40 = (unint64_t **)(*((_QWORD *)&v68 + 1) + 8 * ((unint64_t)v70 >> 9));
  if ((_QWORD)v69 == *((_QWORD *)&v68 + 1))
  {
    v41 = 0;
    v43 = 0;
    v42 = (char *)(*((_QWORD *)&v68 + 1) + 8 * (((_QWORD)v70 + *((_QWORD *)&v70 + 1)) >> 9));
  }
  else
  {
    v41 = &(*v40)[v70 & 0x1FF];
    v42 = (char *)(*((_QWORD *)&v68 + 1) + 8 * (((_QWORD)v70 + *((_QWORD *)&v70 + 1)) >> 9));
    v43 = (unint64_t *)(*(_QWORD *)v42 + 8 * ((v70 + *((_QWORD *)&v70 + 1)) & 0x1FF));
  }
  sub_1000C84C8(*(unint64_t **)(a1 + 8), v40, v41, v42, v43, a2);
  if (v39)
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  v44 = *(unsigned __int8 *)(a1 + 100);
  if (*(_BYTE *)(a1 + 100))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 344));
    *(_BYTE *)(a1 + 100) = 0;
  }
  sub_1000C2854(&v68);
  return v44 != 0;
}

void sub_1000C7E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, std::mutex *a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,unint64_t a41,uint64_t a42)
{
  unsigned int *v42;
  uint64_t v43;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  unsigned int v54;

  std::mutex::unlock(a12);
  sub_100017CC8((uint64_t *)(v43 - 136));
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(a11);
    v46 = a16[33] + a16[34];
    v47 = a16[30];
    v48 = (char *)(v47 + 8 * (v46 >> 9));
    if (a16[31] == v47)
      v49 = 0;
    else
      v49 = *(_QWORD *)v48 + 8 * (v46 & 0x1FF);
    v50 = (char *)(a38 + 8 * (a41 >> 9));
    if (a39 == a38)
    {
      v51 = 0;
      v52 = 0;
      v53 = (char *)(a38 + 8 * ((a42 + a41) >> 9));
    }
    else
    {
      v51 = (char *)(*(_QWORD *)v50 + 8 * (a41 & 0x1FF));
      v53 = (char *)(a38 + 8 * ((a42 + a41) >> 9));
      v52 = (char *)(*(_QWORD *)v53 + 8 * ((a42 + a41) & 0x1FF));
    }
    sub_1000C8494(a10, v48, v49, v50, v51, v53, v52);
    std::mutex::unlock(a11);
    do
      v54 = __ldaxr(v42);
    while (__stlxr(v54 | ((_DWORD)a15 != 0), v42));
    __cxa_rethrow();
  }
  sub_1000C2854(&a37);
  _Unwind_Resume(a1);
}

void sub_1000C802C()
{
  __cxa_end_catch();
  JUMPOUT(0x1000C8048);
}

uint64_t sub_1000C8068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  uint64_t v7;

  v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v7 = sub_1000CD65C(a1, a2, a3, *(unsigned int *)(*(_QWORD *)(a3 + 8) + 20));
  std::mutex::unlock(v6);
  return v7;
}

void sub_1000C80C8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1000C80DC(_QWORD *a1)
{
  unint64_t v1;
  __int128 v3;
  int v4;
  _QWORD v5[45];
  uint64_t v6;
  uint64_t v7;

  v1 = atomic_load((unint64_t *)(*(_QWORD *)(*a1 + 56) + 16 * a1[1] + 8));
  if ((v1 & 0x7F80000000000000) != 0)
  {
    *(_QWORD *)&v3 = "di_asif::details::table_entry_map::validate() const";
    *((_QWORD *)&v3 + 1) = 43;
    v4 = 16;
    sub_10008803C(v5, &v3);
    sub_100005A0C(&v6, (uint64_t)"Diskimages2 - ASIF - bad map entry reserved bits ", 49);
    *(_DWORD *)((char *)&v6 + *(_QWORD *)(v6 - 24) + 8) = *(_DWORD *)((_BYTE *)&v6 + *(_QWORD *)(v6 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v6, v1);
    std::ostream::~ostream(&v6, off_10017F2D0);
    sub_1000881A0((uint64_t)v5);
    std::ios::~ios(&v7);
  }
  return (v1 & 0x7F80000000000000) == 0;
}

void sub_1000C81B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000880E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000C81CC(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const std::error_category *v20;
  uint64_t v21;
  int v22;
  void *exception;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  if (**(_BYTE **)(a1 + 24))
  {
    v4 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 16) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 16), 0);
    if (v4)
    {
      v21 = *(_QWORD *)a1;
      v22 = v4;
      sub_1000A1868(v21);
      exception = __cxa_allocate_exception(0x40uLL);
      if (v22 < 0)
        v24 = v22;
      else
        v24 = -v22;
      v25 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Can't flush asif, backend flush failed", v24);
    }
    **(_BYTE **)(a1 + 24) = 0;
  }
  v5 = *(_QWORD *)(a1 + 16);
  v6 = a2 - v5;
  v7 = **(_QWORD **)(a1 + 8);
  v8 = (std::__shared_weak_count *)*((_QWORD *)sub_1001207C0() + 1);
  v26 = v5;
  v27 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v28 = v6;
  v29 = v7;
  v30 = v6;
  v31 = 0;
  v11 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(*(_QWORD *)a1 + 16) + 80))(*(_QWORD *)(*(_QWORD *)a1 + 16), &v26);
  **(_QWORD **)(a1 + 8) += v6;
  if (v6 != v11)
  {
    v15 = *(_QWORD *)a1;
    v16 = v11;
    sub_1000A1868(v15);
    LODWORD(v17) = v16;
    v18 = __cxa_allocate_exception(0x40uLL);
    v19 = v18;
    if ((int)v17 < 0)
      v17 = v17;
    else
      v17 = -(int)v17;
    *v18 = &off_1001924F8;
    v20 = std::generic_category();
    v19[1] = v17;
    v19[2] = v20;
    *((_BYTE *)v19 + 24) = 0;
    *((_BYTE *)v19 + 48) = 0;
    v19[7] = "Can't flush asif";
  }
  v12 = v27;
  if (v27)
  {
    v13 = (unint64_t *)&v27->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1000C837C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1000C8390(_QWORD *a1)
{
  unint64_t v1;
  __int128 v3;
  int v4;
  _QWORD v5[45];
  uint64_t v6;
  uint64_t v7;

  atomic_load((unint64_t *)(*(_QWORD *)(*a1 + 56) + 16 * a1[1] + 8));
  v1 = atomic_load((unint64_t *)(*(_QWORD *)(*a1 + 56) + 16 * a1[1] + 8));
  if ((v1 & 0x3F80000000000000) != 0)
  {
    *(_QWORD *)&v3 = "di_asif::details::table_entry_data::validate() const";
    *((_QWORD *)&v3 + 1) = 44;
    v4 = 16;
    sub_1000D8CE4(v5, &v3);
    sub_100005A0C(&v6, (uint64_t)"Diskimages2 - ASIF - bad reserved bits ", 39);
    *(_DWORD *)((char *)&v6 + *(_QWORD *)(v6 - 24) + 8) = *(_DWORD *)((_BYTE *)&v6 + *(_QWORD *)(v6 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v6, v1);
    std::ostream::~ostream(&v6, off_100188A50);
    sub_1000D8E48((uint64_t)v5);
    std::ios::~ios(&v7);
  }
  return (v1 & 0x3F80000000000000) == 0;
}

void sub_1000C8480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000D8D8C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000C8494(void **a1, char *a2, uint64_t a3, char *a4, char *a5, char *a6, char *a7)
{
  unint64_t v7;

  if (a7 == a5)
    v7 = 0;
  else
    v7 = ((uint64_t)&a7[-*(_QWORD *)a6] >> 3) + ((a6 - a4) << 6) - ((uint64_t)&a5[-*(_QWORD *)a4] >> 3);
  return sub_1000E53F0(a1, a2, a3, a4, a5, a6, a7, v7);
}

_QWORD *sub_1000C84C8(unint64_t *a1, unint64_t **a2, unint64_t *a3, char *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;

  v12 = (*(uint64_t (**)(unint64_t *))(*a1 + 16))(a1);
  v18[0] = off_100187BC0;
  v18[1] = a6;
  v19 = v18;
  sub_1000E67B8(v12, a2, a3, (uint64_t)a4, a5, (uint64_t)v18);
  result = v19;
  if (v19 == v18)
  {
    v14 = 4;
    result = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v14 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
LABEL_6:
  if (a5 == a3)
    v15 = 0;
  else
    v15 = (((char *)a2 - a4) << 6) - (((uint64_t)a5 - *(_QWORD *)a4) >> 3) + a3 - *a2;
  v16 = a1 + 1;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + v15, v16));
  return result;
}

void sub_1000C85E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

unint64_t sub_1000C861C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *exception;
  const std::error_category *v74;
  _QWORD *v75;
  const std::error_category *v76;
  _QWORD *v77;
  const std::error_category *v78;
  unint64_t v79;
  __int128 v80;
  int v81;
  _BYTE v82[16];
  char v83;
  __int128 v84;
  _BYTE *v85;
  _QWORD **v86;
  _BYTE *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD v92[2];
  BOOL v93;
  _QWORD v94[2];
  char v95;
  uint64_t v96;
  _BYTE v97[152];
  char v98[8];
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  _BYTE v108[25];
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  char v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  __int128 v116;
  uint64_t v117;
  char v118;
  _BYTE v119[9];
  uint64_t v120;
  char v121;

  *(_WORD *)v119 = 0;
  v121 = 0;
  v7 = (std::__shared_weak_count *)a3[1];
  v106 = *a3;
  v107 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v108 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v108[9] = *(_OWORD *)((char *)a3 + 25);
  v109 = a3[6];
  v110 = *(_OWORD *)(a3 + 7);
  v111 = *(_OWORD *)(a3 + 9);
  v112 = *(_OWORD *)(a3 + 11);
  v113 = *((_BYTE *)a3 + 104);
  v10 = (std::__shared_weak_count *)a3[15];
  v114 = a3[14];
  v115 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v79 = 0;
  v116 = *((_OWORD *)a3 + 8);
  v117 = a3[18];
  v118 = *((_BYTE *)a3 + 152);
  while (!sub_10002C4A4((uint64_t)&v106, a4))
  {
    v104 = (_QWORD *)sub_1000C2F74(a1, *(unint64_t *)&v108[8]);
    v105 = v13;
    v14 = v104[1];
    v15 = *(_QWORD *)(v14 + 48);
    v16 = *(unsigned int *)(v14 + 20);
    v94[0] = v104[44] + (v15 + v15 * v13) / (unint64_t)(v15 + 1) * v16;
    v94[1] = v94[0] + v16;
    v95 = 2;
    sub_10002DB88((uint64_t)&v106, (uint64_t)v94, a4, (uint64_t)v98);
    if (sub_10002C4A4((uint64_t)v98, (uint64_t)&v101))
    {
      *(_QWORD *)&v84 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
      *((_QWORD *)&v84 + 1) = 30;
      LODWORD(v85) = 16;
      sub_1000C91E0(v94, &v84);
      sub_100005A0C(&v96, (uint64_t)"Couldn't trim entry in write ", 29);
      sub_10011E628(&v96, &v106);
      std::ostream::~ostream(&v96, off_100188C70);
      sub_1000D9628((uint64_t)v94);
      std::ios::~ios(v97);
      v17 = 1;
      v18 = -34;
      goto LABEL_73;
    }
    v19 = (unint64_t *)(v104[7] + 16 * v105);
    v20 = sub_1000DDFC4(v19);
    v92[0] = off_100191EF8;
    v92[1] = v19;
    v93 = v20;
    if (!v20)
    {
      *(_QWORD *)&v84 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
      *((_QWORD *)&v84 + 1) = 30;
      LODWORD(v85) = 16;
      sub_1000C92C8(v94, &v84);
      sub_100005A0C(&v96, (uint64_t)"Couldn't lock entry ", 20);
      sub_1000C68F4(&v96, &v104);
      sub_1000C9370((uint64_t)v94);
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_1001924F8;
      v74 = std::generic_category();
      exception[1] = 4294967282;
      exception[2] = v74;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "Couldn't lock entry";
    }
    v21 = v105;
    v22 = v104[7];
    v23 = (*(_QWORD *)(v22 + 16 * v105 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(v104[1] + 20);
    if (!v23)
    {
      v18 = sub_1000C4298(a1, a2, (uint64_t)v104, v105);
      if ((_DWORD)v18)
      {
        *(_QWORD *)&v84 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
        *((_QWORD *)&v84 + 1) = 30;
        LODWORD(v85) = 16;
        sub_1000C93B0(v94, &v84);
        sub_100005A0C(&v96, (uint64_t)"couldn't allocate space for entry ", 34);
        sub_1000C68F4(&v96, &v104);
        sub_100005A0C(&v96, (uint64_t)" ret: ", 6);
        std::ostream::operator<<(&v96, v18);
        std::ostream::~ostream(&v96, off_1001890B0);
        sub_1000DA200((uint64_t)v94);
        std::ios::~ios(v97);
        v18 = (int)v18;
        goto LABEL_71;
      }
      v21 = v105;
      v22 = v104[7];
    }
    v24 = atomic_load((unint64_t *)(v22 + 16 * v21 + 8));
    v25 = sub_1000C9498(&v104, a2, (uint64_t)v98, (uint64_t)&v101);
    v18 = v25;
    v27 = v26;
    if ((v25 & 0x8000000000000000) != 0 && (_DWORD)v25)
    {
      if (v23)
        goto LABEL_71;
      sub_10011E400((uint64_t)v92, 0, (uint64_t)v94);
      if (!v95)
        goto LABEL_70;
      v28 = atomic_load((unint64_t *)(v104[7] + 16 * v105 + 8));
      if ((v28 & 0x4000000000000000) != 0)
        goto LABEL_70;
      v29 = (unint64_t *)(v104[7] + 16 * v105 + 8);
      v30 = *v29;
      v31 = *(unsigned int *)(v104[1] + 20);
      if ((_DWORD)v31)
      {
        do
          v32 = __ldxr(v29);
        while (__stxr(v32 & 0xFF80000000000000, v29));
LABEL_66:
        v48 = (v30 & 0x7FFFFFFFFFFFFFLL) * v31;
        sub_10011E50C(v94);
        if (v48)
          sub_1000C4374(*(unint64_t **)(a1 + 8), v48, a2);
        goto LABEL_71;
      }
      v44 = *v29;
      v45 = __ldxr(v29);
      if (v45 == v44)
      {
        if (__stxr(v44 & 0xFF80000000000000, v29))
          goto LABEL_60;
LABEL_70:
        sub_10011E50C(v94);
LABEL_71:
        v17 = 1;
        goto LABEL_72;
      }
      __clrex();
LABEL_60:
      while (2)
      {
        v46 = __ldxr(v29);
        if (v46 == v45)
        {
          if (!__stxr(v45 & 0xFF80000000000000, v29))
          {
            v47 = 1;
            goto LABEL_65;
          }
        }
        else
        {
          __clrex();
        }
        v47 = 0;
LABEL_65:
        v45 = v46;
        if ((v47 & 1) != 0)
          goto LABEL_66;
        continue;
      }
    }
    v33 = v24 >> 62;
    *(_QWORD *)&v84 = &v106;
    *((_QWORD *)&v84 + 1) = a4;
    v85 = &v119[1];
    v86 = &v104;
    v87 = v119;
    v88 = a1;
    v89 = v25;
    v90 = v26;
    v91 = a2;
    if ((_DWORD)v33 == 1)
      goto LABEL_55;
    v34 = v104[1];
    v35 = *(unsigned int *)(v34 + 20);
    if (v25 == v35
      && v104[44]
       + (*(_QWORD *)(v34 + 48) + *(_QWORD *)(v34 + 48) * v105) / (unint64_t)(*(_QWORD *)(v34 + 48) + 1) * v35 == v26)
    {
      sub_10011E400((uint64_t)v92, 0, (uint64_t)v82);
      if (!v83)
      {
        *(_QWORD *)&v80 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
        *((_QWORD *)&v80 + 1) = 30;
        v81 = 16;
        sub_1000CA268(v94, &v80);
        sub_100005A0C(&v96, (uint64_t)"Couldn't upgrade lock entry ", 28);
        sub_1000C68F4(&v96, &v104);
        sub_1000CA310((uint64_t)v94);
        v75 = __cxa_allocate_exception(0x40uLL);
        *v75 = &off_1001924F8;
        v76 = std::generic_category();
        v75[1] = 4294967282;
        v75[2] = v76;
        *((_BYTE *)v75 + 24) = 0;
        *((_BYTE *)v75 + 48) = 0;
        v75[7] = "Couldn't upgrade lock entry";
      }
      v36 = atomic_load((unint64_t *)(v104[7] + 16 * v105 + 8));
      if ((_DWORD)v33 == 2 || (v36 & 0xC000000000000000) != 0x8000000000000000)
      {
        v37 = (unint64_t *)(v104[7] + 16 * v105 + 8);
        v38 = *v37;
        v39 = __ldaxr(v37);
        if (v39 == v38)
        {
          if (!__stlxr(v38 & 0x3FFFFFFFFFFFFFFFLL | 0x4000000000000000, v37))
            goto LABEL_47;
        }
        else
        {
          __clrex();
        }
        do
        {
          while (1)
          {
            v38 = v39;
            v39 = __ldaxr(v37);
            if (v39 == v38)
              break;
            __clrex();
          }
        }
        while (__stlxr(v38 & 0x3FFFFFFFFFFFFFFFLL | 0x4000000000000000, v37));
LABEL_47:
        if (v119[0])
          v42 = 1;
        else
          v42 = v38 >> 62 == 3;
        v43 = v42;
        v119[0] = v43;
        atomic_store(1u, (unsigned int *)(a1 + 96));
      }
LABEL_54:
      sub_10011E50C(v82);
LABEL_55:
      v17 = 2;
      goto LABEL_56;
    }
    if ((_DWORD)v33 == 3)
    {
      v94[0] = sub_1000CD3A4(a1, v26, v25);
      sub_1000C4478(a1, a2, &v104, (unsigned int *)v94, 1u, v33 | (unint64_t)&_mh_execute_header);
      if (!v23)
        goto LABEL_40;
    }
    else
    {
      sub_10011E400((uint64_t)v92, 0, (uint64_t)v82);
      if (!v83)
      {
        *(_QWORD *)&v80 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
        *((_QWORD *)&v80 + 1) = 30;
        v81 = 16;
        sub_1000CA350(v94, &v80);
        sub_100005A0C(&v96, (uint64_t)"Couldn't upgrade lock entry ", 28);
        sub_1000C68F4(&v96, &v104);
        sub_1000CA3F8((uint64_t)v94);
        v77 = __cxa_allocate_exception(0x40uLL);
        *v77 = &off_1001924F8;
        v78 = std::generic_category();
        v77[1] = 4294967282;
        v77[2] = v78;
        *((_BYTE *)v77 + 24) = 0;
        *((_BYTE *)v77 + 48) = 0;
        v77[7] = "Couldn't upgrade lock entry";
      }
      v40 = atomic_load((unint64_t *)(v104[7] + 16 * v105 + 8));
      if (!((*(_QWORD *)(v104[7] + 16 * v105 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(v104[1] + 20)))
        goto LABEL_54;
      v41 = v40 >> 62;
      if (v40 >> 62 == 1)
        goto LABEL_54;
      v94[0] = sub_1000CD3A4(a1, v27, v18);
      sub_1000C4478(a1, a2, &v104, (unsigned int *)v94, 1u, v41 | (unint64_t)&_mh_execute_header);
      sub_10011E50C(v82);
      if (!v23)
      {
LABEL_40:
        v17 = 0;
        atomic_store(1u, (unsigned int *)(a1 + 96));
        goto LABEL_56;
      }
    }
    v17 = 0;
LABEL_56:
    v79 += v18;
    sub_1000CA438((uint64_t *)&v84);
LABEL_72:
    sub_10011E3D8(v92);
LABEL_73:
    v49 = v103;
    if (v103)
    {
      v50 = (unint64_t *)&v103->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = v102;
    if (v102)
    {
      v53 = (unint64_t *)&v102->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = v100;
    if (v100)
    {
      v56 = (unint64_t *)&v100->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = v99;
    if (v99)
    {
      v59 = (unint64_t *)&v99->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if ((v17 | 2) != 2)
      goto LABEL_102;
  }
  if (v121)
  {
    v61 = sub_1000C3644(a1, a2, &v119[1]);
    v18 = v79;
    if (v119[0])
      v62 = 1;
    else
      v62 = v61;
    v119[0] = v62;
    if (v62 == 1)
    {
      v63 = *(_QWORD *)(*(_QWORD *)&v119[1] + 8);
      v64 = *(_QWORD *)(a1 + 8);
      v65 = *(_QWORD *)(v64 + 48);
      sub_1000C6450((_QWORD *)a1, a2, v65+ (v65 + 1)* (((*(_QWORD *)(*(_QWORD *)&v119[1] + 352)+ (*(_QWORD *)(v63 + 48) + *(_QWORD *)(v63 + 48) * v120)/ (unint64_t)(*(_QWORD *)(v63 + 48) + 1)* *(unsigned int *)(v63 + 20))/ *(unsigned __int16 *)(v63 + 18)- *(_QWORD *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v64 + 18))/ (v65* (unint64_t)(*(_DWORD *)(v64 + 20) / *(unsigned __int16 *)(v64 + 18)))));
    }
  }
  else
  {
    v18 = v79;
  }
LABEL_102:
  v66 = v115;
  if (v115)
  {
    v67 = (unint64_t *)&v115->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v107;
  if (v107)
  {
    v70 = (unint64_t *)&v107->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  return v18;
}

void sub_1000C90F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_10011E50C(&a17);
  sub_1000CA438(&a21);
  sub_10011E3D8(&a30);
  sub_10005C240((uint64_t)&STACK[0x2C8]);
  sub_100012168(a10);
  sub_100012168((uint64_t)&STACK[0x418]);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000C91E0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000E69C4((uint64_t)a1, a2);
  *a1 = off_100188BA8;
  a1[45] = &off_100188CA8;
  a1[46] = &off_100188CD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100188BA8;
  a1[45] = off_100188C30;
  a1[46] = off_100188C58;
  return a1;
}

void sub_1000C9264(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000D9628(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C9288(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100188C70);
  sub_1000D9628(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000C92C8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000E6A40((uint64_t)a1, a2);
  *a1 = off_100188DC8;
  a1[45] = &off_100188EC8;
  a1[46] = &off_100188EF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100188DC8;
  a1[45] = off_100188E50;
  a1[46] = off_100188E78;
  return a1;
}

void sub_1000C934C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000D9C14(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C9370(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100188E90);
  sub_1000D9C14(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000C93B0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000E6ABC((uint64_t)a1, a2);
  *a1 = off_100188FE8;
  a1[45] = &off_1001890E8;
  a1[46] = &off_100189110;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100188FE8;
  a1[45] = off_100189070;
  a1[46] = off_100189098;
  return a1;
}

void sub_1000C9434(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000DA200(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C9458(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001890B0);
  sub_1000DA200(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000C9498(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  _OWORD *v52;
  unint64_t v53;
  int64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  int64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  BOOL v67;
  char v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  int v89;
  unsigned int *v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void *exception;
  void *v109;
  uint64_t v110;
  _BYTE v112[25];
  __int128 v113;
  __int128 v114;
  char v115;
  _BYTE v116[25];
  __int128 v117;
  __int128 v118;
  char v119;
  __int128 v120;
  unint64_t v121;
  char v122;
  char v123[8];
  std::__shared_weak_count *v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  _OWORD v131[2];
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  char v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  __int128 v140;
  unint64_t v141;
  char v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  _OWORD v145[2];
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  char v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  __int128 v153;
  unint64_t v154;
  char v155;
  _QWORD v156[2];
  _OWORD v157[2];
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  char v162;
  _QWORD v163[2];
  __int128 v164;
  unint64_t v165;
  char v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  char v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  __int128 v173;
  _BYTE v174[248];
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  int64_t v178;
  unint64_t v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  char v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  __int128 v187;
  char v188;
  _QWORD v189[5];
  uint64_t v190;
  void *__p;
  __int128 v192;
  _BYTE v193[640];

  v4 = a1[1];
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(unsigned int *)(v5 + 20);
  if (!((*(_QWORD *)(*(_QWORD *)(*a1 + 56) + 16 * v4 + 8) & 0x7FFFFFFFFFFFFFLL) * v6))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v109 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"ASIF: No data offset found (write)", 0xFFFFFFEA);
  }
  __p = (void *)(*(_QWORD *)(*a1 + 352)
               + (*(_QWORD *)(v5 + 48) + *(_QWORD *)(v5 + 48) * v4)
               / (unint64_t)(*(_QWORD *)(v5 + 48) + 1)
               * v6);
  *(_QWORD *)&v192 = (char *)__p + v6;
  BYTE8(v192) = 2;
  sub_10002DB88(a3, (uint64_t)&__p, a4, (uint64_t)v123);
  if (sub_10002C4A4((uint64_t)v123, (uint64_t)&v126))
  {
    v10 = -34;
  }
  else
  {
    __p = v193;
    v192 = xmmword_100140690;
    v11 = *(_OWORD *)(a3 + 72);
    v181 = *(_OWORD *)(a3 + 56);
    v182 = v11;
    v183 = *(_OWORD *)(a3 + 88);
    v184 = *(_BYTE *)(a3 + 104);
    v12 = *(std::__shared_weak_count **)(a3 + 120);
    v185 = *(_QWORD *)(a3 + 112);
    v186 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v187 = *(_OWORD *)(a3 + 128);
    v15 = *(_QWORD *)(a4 + 56);
    v16 = *(_QWORD *)(a4 + 64);
    *(_QWORD *)&v167 = v15;
    *((_QWORD *)&v167 + 1) = v16;
    v17 = *(_OWORD *)(a4 + 88);
    v168 = *(_OWORD *)(a4 + 72);
    v169 = v17;
    v170 = *(_BYTE *)(a4 + 104);
    v18 = *(std::__shared_weak_count **)(a4 + 120);
    v171 = *(_QWORD *)(a4 + 112);
    v172 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = 0;
    v22 = 0;
    v110 = a3 + 128;
    v173 = *(_OWORD *)(a4 + 128);
    while (1)
    {
      v23 = (_QWORD)v181 == v15 && *((_QWORD *)&v181 + 1) == v16;
      if (v23 && (_QWORD)v182 == (_QWORD)v168)
        break;
      ++v22;
      v21 += 40;
      sub_10002BFB4((uint64_t)&v181);
    }
    if (v18)
    {
      v24 = (unint64_t *)&v18->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v26 = v186;
    if (v186)
    {
      v27 = (unint64_t *)&v186->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (*((_QWORD *)&v192 + 1) < v22)
    {
      if (v22 >= 0x333333333333334)
        sub_1000158AC("get_next_capacity, allocator's max size reached");
      v29 = operator new(v21);
      sub_10004DC58((uint64_t *)&__p, (unint64_t)v29, v22, (uint64_t)__p + 40 * v192, 0, 0);
    }
    v30 = *(_QWORD *)a3;
    v31 = *(std::__shared_weak_count **)(a3 + 8);
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    *(_OWORD *)v116 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v116[9] = *(_OWORD *)(a3 + 25);
    v117 = *(_OWORD *)(a3 + 72);
    v34 = *(_QWORD *)(a3 + 48);
    v35 = *(_QWORD *)(a3 + 56);
    v36 = *(_QWORD *)(a3 + 64);
    v118 = *(_OWORD *)(a3 + 88);
    v119 = *(_BYTE *)(a3 + 104);
    v37 = *(_QWORD *)(a3 + 112);
    v38 = *(std::__shared_weak_count **)(a3 + 120);
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v120 = *(_OWORD *)v110;
    v121 = *(_QWORD *)(a3 + 144);
    v122 = *(_BYTE *)(a3 + 152);
    v41 = *(_QWORD *)a4;
    v42 = *(std::__shared_weak_count **)(a4 + 8);
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    *(_OWORD *)v112 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v112[9] = *(_OWORD *)(a4 + 25);
    v113 = *(_OWORD *)(a4 + 72);
    v46 = *(_QWORD *)(a4 + 48);
    v45 = *(_QWORD *)(a4 + 56);
    v47 = *(_QWORD *)(a4 + 64);
    v114 = *(_OWORD *)(a4 + 88);
    v115 = *(_BYTE *)(a4 + 104);
    v49 = *(_QWORD *)(a4 + 112);
    v48 = *(std::__shared_weak_count **)(a4 + 120);
    if (v48)
    {
      v50 = (unint64_t *)&v48->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    v52 = 0;
    v145[0] = *(_OWORD *)v116;
    *(_OWORD *)((char *)v145 + 9) = *(_OWORD *)&v116[9];
    v148 = v117;
    v149 = v118;
    v153 = v120;
    v131[0] = *(_OWORD *)v112;
    *(_OWORD *)((char *)v131 + 9) = *(_OWORD *)&v112[9];
    v136 = v114;
    v143 = v30;
    v144 = v31;
    v146 = v34;
    *(_QWORD *)&v147 = v35;
    *((_QWORD *)&v147 + 1) = v36;
    v150 = v119;
    v151 = v37;
    v152 = v38;
    v154 = v121;
    v155 = v122;
    v129 = v41;
    v130 = v42;
    v132 = v46;
    v133 = v45;
    v134 = v47;
    v137 = v115;
    v135 = v113;
    v138 = v49;
    v139 = v48;
    v140 = *(_OWORD *)(a4 + 128);
    v142 = *(_BYTE *)(a4 + 152);
    v141 = *(_QWORD *)(a4 + 144);
    v53 = v141;
    LOBYTE(v181) = 0;
    v188 = 0;
    while (!sub_10002C4A4((uint64_t)&v143, (uint64_t)&v129))
    {
      if (v154 >= v53 || (_OWORD *)((char *)v52 + 1) == 0)
        break;
      if (sub_1000BF0D4())
      {
        *(_QWORD *)&v177 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1765:32)]";
        *((_QWORD *)&v177 + 1) = 104;
        LODWORD(v178) = 2;
        sub_10003722C(&v167, &v177);
        sub_100005A0C(&v175, (uint64_t)"sg: ", 4);
        sub_10011E628(&v175, &v143);
        std::ostream::~ostream(&v175, off_100171F10);
        sub_100037460((uint64_t)&v167);
        std::ios::~ios(&v176);
      }
      *(_QWORD *)&v167 = 0;
      *((_QWORD *)&v167 + 1) = v53;
      LOBYTE(v168) = 2;
      sub_100075798(&v143, (uint64_t)&v167, (uint64_t)&v177);
      v55 = v178;
      v56 = *(_QWORD *)(*(_QWORD *)(*a1 + 56) + 16 * a1[1] + 8);
      v57 = *(unsigned int *)(*(_QWORD *)(*a1 + 8) + 20);
      v58 = v179;
      v59 = v180;
      v167 = v177;
      if (*((_QWORD *)&v177 + 1))
      {
        v60 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      *(_QWORD *)&v168 = v55;
      *((_QWORD *)&v168 + 1) = v58 % v57 + (v56 & 0x7FFFFFFFFFFFFFLL) * v57;
      *(_QWORD *)&v169 = v59;
      BYTE8(v169) = 0;
      (*(void (**)(_QWORD *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a2 + 16) + 136))(v189, *(_QWORD *)(a2 + 16), &v167);
      if ((_QWORD)v192 == *((_QWORD *)&v192 + 1))
      {
        sub_10004F2CC((uint64_t *)&__p, (uint64_t)__p + 40 * v192, 1, (uint64_t)v189, &v190);
      }
      else
      {
        sub_10003DF88((unint64_t)__p + 40 * v192, (uint64_t)v189);
        *(_QWORD *)&v192 = v192 + 1;
      }
      v62 = v179;
      v63 = v178;
      v64 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
      if (*((_QWORD *)&v167 + 1))
      {
        v65 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = v63 >= 0 || (_DWORD)v63 == 0;
      v68 = v67;
      if (v67)
      {
        if (sub_10002E788((uint64_t)&v143, (uint64_t)&v129, v62, v63))
        {
          v156[0] = v143;
          v156[1] = v144;
          if (v144)
          {
            v73 = (unint64_t *)&v144->__shared_owners_;
            do
              v74 = __ldxr(v73);
            while (__stxr(v74 + 1, v73));
          }
          v157[0] = v145[0];
          *(_OWORD *)((char *)v157 + 9) = *(_OWORD *)((char *)v145 + 9);
          v159 = v147;
          v160 = v148;
          v161 = v149;
          v162 = v150;
          v158 = v146;
          v163[0] = v151;
          v163[1] = v152;
          if (v152)
          {
            v75 = (unint64_t *)&v152->__shared_owners_;
            do
              v76 = __ldxr(v75);
            while (__stxr(v76 + 1, v75));
          }
          v164 = v153;
          v165 = v154;
          v166 = v155;
          sub_10002E74C((uint64_t)v156, (uint64_t)&v129, v62, v63, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v167);
          sub_100037314((uint64_t)&v181, (uint64_t)&v167);
          sub_10002E7A4((uint64_t)&v167);
          sub_100012168((uint64_t)v163);
          sub_100012168((uint64_t)v156);
          sub_10002CA7C((uint64_t)&v181, (uint64_t)&v167);
          sub_100037358((uint64_t)&v143, (uint64_t)&v167);
          sub_100012168((uint64_t)v174);
          sub_100012168((uint64_t)&v167);
          sub_10002C64C((uint64_t)&v181, (uint64_t)&v167);
          sub_100037358((uint64_t)&v129, (uint64_t)&v167);
          sub_100012168((uint64_t)v174);
          sub_100012168((uint64_t)&v167);
        }
        sub_10002D7D4((uint64_t)&v143, v63);
        v52 = (_OWORD *)((char *)v52 + v63);
      }
      else
      {
        if ((int)v63 >= 0)
          v72 = v63;
        else
          v72 = -(int)v63;
        v110 = -v72;
      }
      v69 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
      if (*((_QWORD *)&v177 + 1))
      {
        v70 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      if ((v68 & 1) == 0)
        goto LABEL_91;
    }
    v110 = (uint64_t)v52;
LABEL_91:
    sub_10002EB64((uint64_t)&v181);
    v77 = v139;
    if (v139)
    {
      v78 = (unint64_t *)&v139->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v80 = v130;
    if (v130)
    {
      v81 = (unint64_t *)&v130->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    v83 = v152;
    v10 = v110;
    if (v152)
    {
      v84 = (unint64_t *)&v152->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v86 = v144;
    if (v144)
    {
      v87 = (unint64_t *)&v144->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    if ((v110 & 0x8000000000000000) == 0 || !(_DWORD)v110)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 144))(*(_QWORD *)(a2 + 16));
      if ((_QWORD)v192)
      {
        v89 = 0;
        v90 = (unsigned int *)__p;
        v91 = 40 * v192;
        do
        {
          v92 = sub_100039604(v90);
          if (v92 < 0)
            break;
          v89 += v92;
          v90 += 10;
          v92 = v89;
          v91 -= 40;
        }
        while (v91);
      }
      else
      {
        v92 = 0;
      }
      v93 = v92 < 0 ? v92 : -5;
      v94 = -v93;
      if (v110 != v92)
        v10 = -v94;
    }
    if (*((_QWORD *)&v192 + 1) && v193 != __p)
      operator delete(__p);
  }
  v95 = v128;
  if (v128)
  {
    v96 = (unint64_t *)&v128->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v127;
  if (v127)
  {
    v99 = (unint64_t *)&v127->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v125;
  if (v125)
  {
    v102 = (unint64_t *)&v125->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v124;
  if (v124)
  {
    v105 = (unint64_t *)&v124->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  return v10;
}

void sub_1000CA154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_100012168((uint64_t)&STACK[0x700]);
  sub_10002EB64((uint64_t)&STACK[0x730]);
  sub_100012168(a9);
  sub_100012168((uint64_t)&STACK[0x310]);
  sub_100012168(a10);
  sub_100012168((uint64_t)&STACK[0x3B0]);
  sub_100012168(a11);
  sub_100012168((uint64_t)&a27);
  sub_100012168(a12);
  sub_100012168((uint64_t)&a47);
  if (STACK[0x990])
  {
    if (a23 != STACK[0x980])
      operator delete((void *)STACK[0x980]);
  }
  sub_10005C240((uint64_t)&a67);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000CA268(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000E6B38((uint64_t)a1, a2);
  *a1 = off_100189208;
  a1[45] = &off_100189308;
  a1[46] = &off_100189330;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100189208;
  a1[45] = off_100189290;
  a1[46] = off_1001892B8;
  return a1;
}

void sub_1000CA2EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000DA7EC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CA310(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001892D0);
  sub_1000DA7EC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000CA350(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000E6BB4((uint64_t)a1, a2);
  *a1 = off_100189428;
  a1[45] = &off_100189528;
  a1[46] = &off_100189550;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100189428;
  a1[45] = off_1001894B0;
  a1[46] = off_1001894D8;
  return a1;
}

void sub_1000CA3D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000DADD8(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CA3F8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001894F0);
  sub_1000DADD8(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t *sub_1000CA438(uint64_t *a1)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  _BYTE *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (_QWORD *)a1[5];
  v2 = a1[6];
  if ((v2 & 0x8000000000000000) == 0 || !a1[6])
  {
    sub_10002D5FC(*a1, v2);
    v4 = a1[2];
    if (*(_BYTE *)(v4 + 16))
    {
      v5 = (_QWORD *)a1[3];
      if (*(_QWORD *)(*v5 + 352) != *(_QWORD *)(*(_QWORD *)v4 + 352) || v5[1] != *(_QWORD *)(v4 + 8))
      {
        v6 = sub_1000C3644((uint64_t)v3, a1[8], (_QWORD *)v4);
        v7 = (_BYTE *)a1[4];
        v8 = (v6 & 1) != 0 || *v7 != 0;
        *v7 = v8;
        v4 = a1[2];
        if (v8)
        {
          v9 = *(_QWORD *)(*(_QWORD *)v4 + 8);
          v10 = v3[1];
          v11 = *(_QWORD *)(v10 + 48);
          v12 = *(_DWORD *)(v10 + 20);
          v13 = *(unsigned __int16 *)(v10 + 18);
          v14 = v11 * (v12 / v13);
          v15 = v3[44] / v13;
          ++v11;
          v16 = v11
              + v11
              * (((*(_QWORD *)(*(_QWORD *)v4 + 352)
                 + (*(_QWORD *)(v9 + 48) + *(_QWORD *)(v9 + 48) * *(_QWORD *)(v4 + 8))
                 / (unint64_t)(*(_QWORD *)(v9 + 48) + 1)
                 * *(unsigned int *)(v9 + 20))
                / *(unsigned __int16 *)(v9 + 18)
                - v15)
               / v14);
          v17 = (_QWORD *)a1[3];
          v18 = *(_QWORD *)(*v17 + 8);
          if (v16 != v11
                    + v11
                    * (((*(_QWORD *)(*v17 + 352)
                       + (*(_QWORD *)(v18 + 48) + *(_QWORD *)(v18 + 48) * v17[1])
                       / (unint64_t)(*(_QWORD *)(v18 + 48) + 1)
                       * *(unsigned int *)(v18 + 20))
                      / *(unsigned __int16 *)(v18 + 18)
                      - v15)
                     / v14))
          {
            sub_1000C6450(v3, a1[8], v16 - 1);
            *(_BYTE *)a1[4] = 0;
            v4 = a1[2];
          }
        }
      }
    }
    v19 = a1[3];
    if (*(_BYTE *)(v4 + 16))
    {
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(v19 + 8);
    }
    else
    {
      *(_OWORD *)v4 = *(_OWORD *)v19;
      *(_BYTE *)(v4 + 16) = 1;
    }
  }
  return a1;
}

uint64_t sub_1000CA5C4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t *v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 *v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  int64_t v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  char v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  const std::error_category *v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  __n128 v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v133;
  uint64_t v136;
  uint64_t v137;
  _BYTE v138[25];
  __int128 v139;
  __int128 v140;
  char v141;
  _BYTE v142[25];
  __int128 v143;
  __int128 v144;
  char v145;
  __int128 v146;
  unint64_t v147;
  char v148;
  __int128 v149;
  unint64_t *v150;
  int v151;
  char v152[24];
  char v153;
  __int128 v154;
  _OWORD v155[2];
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  char v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  __int128 v163;
  unint64_t v164;
  char v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  _OWORD v168[2];
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  char v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  __int128 v176;
  unint64_t v177;
  char v178;
  __int128 v179;
  uint64_t v180[3];
  uint64_t v181;
  std::__shared_weak_count *v182;
  _BYTE v183[25];
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  char v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  __int128 v191;
  uint64_t v192;
  char v193;
  __int128 v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  _OWORD v197[2];
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  char v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  __int128 v205;
  unint64_t v206;
  char v207;
  __int128 v208;
  _OWORD v209[2];
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  char v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  __int128 v217;
  unint64_t v218;
  char v219;
  __int128 v220;
  _OWORD v221[2];
  uint64_t v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  char v226;
  _QWORD v227[2];
  __int128 v228;
  unint64_t v229;
  char v230;
  __int128 v231;
  int v232;
  unint64_t v233[2];
  uint64_t *v234;
  __int128 v235;
  uint64_t v236;
  char v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  _OWORD v240[2];
  uint64_t v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  char v245;
  uint64_t v246;
  std::__shared_weak_count *v247;
  __int128 v248;
  uint64_t v249;
  char v250;
  _QWORD v251[2];
  _OWORD v252[2];
  uint64_t v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  char v257;
  uint64_t v258;
  std::__shared_weak_count *v259;
  __int128 v260;
  uint64_t v261;
  char v262;
  uint64_t v263;
  uint64_t v264[3];
  uint64_t v265;
  __int128 v266;
  char v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  __int128 v273;
  _BYTE v274[25];
  uint64_t v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  char v279;
  uint64_t v280;
  std::__shared_weak_count *v281;
  __int128 v282;
  unint64_t v283;
  char v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  _OWORD v287[2];
  uint64_t v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  char v292;
  uint64_t v293;
  std::__shared_weak_count *v294;
  __int128 v295;
  unint64_t v296;
  char v297;
  uint64_t v298;
  _BYTE v299[4792];
  char v300;
  __int128 v301;
  uint64_t *v302;
  __int128 v303;
  uint64_t v304;
  _BYTE v305[248];
  uint64_t v306;
  uint64_t v307;

  v5 = a2;
  v6 = a1;
  v133 = a3[3];
  v7 = *a3;
  v8 = (std::__shared_weak_count *)a3[1];
  v181 = *a3;
  v182 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  *(_OWORD *)v183 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v183[9] = *(_OWORD *)((char *)a3 + 25);
  v184 = a3[6];
  v185 = *(_OWORD *)(a3 + 7);
  v186 = *(_OWORD *)(a3 + 9);
  v187 = *(_OWORD *)(a3 + 11);
  v188 = *((_BYTE *)a3 + 104);
  v11 = (std::__shared_weak_count *)a3[15];
  v189 = a3[14];
  v190 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v8 = v182;
  }
  v191 = *((_OWORD *)a3 + 8);
  v192 = a3[18];
  v193 = *((_BYTE *)a3 + 152);
  *(_QWORD *)&v194 = -78;
  LOBYTE(v233[0]) = 0;
  v237 = 0;
  v238 = v7;
  v239 = v8;
  if (v8)
  {
    v14 = (unint64_t *)&v8->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_OWORD *)((char *)v240 + 9) = *(_OWORD *)&v183[9];
  v240[0] = *(_OWORD *)v183;
  v242 = v185;
  v243 = v186;
  v241 = v184;
  v245 = v188;
  v244 = v187;
  v246 = v189;
  v247 = v190;
  if (v190)
  {
    v16 = (unint64_t *)&v190->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = &v266;
  v248 = v191;
  v250 = v193;
  v249 = v192;
  v251[0] = v7;
  v251[1] = v182;
  if (v182)
  {
    v19 = (unint64_t *)&v182->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *(_OWORD *)((char *)v252 + 9) = *(_OWORD *)&v183[9];
  v252[0] = *(_OWORD *)v183;
  v254 = v185;
  v255 = v186;
  v253 = v184;
  v256 = v187;
  v257 = v188;
  v258 = v189;
  v259 = v190;
  if (v190)
  {
    v21 = (unint64_t *)&v190->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v137 = 0;
  v262 = v193;
  v260 = v191;
  v261 = v192;
  v263 = a2;
  v264[0] = (uint64_t)&v265;
  v264[1] = 0;
  v264[2] = 16;
  LOBYTE(v266) = 0;
  v267 = 0;
  v268 = &v271;
  v269 = 0;
  v270 = 16;
  v272 = 0;
  v180[0] = (uint64_t)v233;
  v180[1] = (uint64_t)&v194;
  v180[2] = a2;
  while (!sub_10002C4A4((uint64_t)&v181, a4))
  {
    *(_QWORD *)&v179 = sub_1000C2F74(v6, *(unint64_t *)&v183[8]);
    *((_QWORD *)&v179 + 1) = v23;
    v24 = *(_QWORD *)(v179 + 8);
    v25 = *(_QWORD *)(v24 + 48);
    v26 = *(unsigned int *)(v24 + 20);
    *(_QWORD *)&v273 = *(_QWORD *)(v179 + 352) + (v25 + v25 * v23) / (unint64_t)(v25 + 1) * v26;
    *((_QWORD *)&v273 + 1) = v273 + v26;
    v274[0] = 2;
    sub_10002DB88((uint64_t)&v181, (uint64_t)&v273, a4, (uint64_t)&v154);
    if (sub_10002C4A4((uint64_t)&v154, (uint64_t)&v166))
    {
      *(_QWORD *)&v301 = "di_asif::details::table::read(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
      *((_QWORD *)&v301 + 1) = 29;
      LODWORD(v302) = 16;
      sub_1000CBE44(&v273, &v301);
      sub_100005A0C(&v298, (uint64_t)"Couldn't trim entry in read ", 28);
      sub_10011E628(&v298, &v181);
      std::ostream::~ostream(&v298, off_100189710);
      sub_1000DB3C4((uint64_t)&v273);
      std::ios::~ios(v299);
      *(_QWORD *)&v194 = -34;
      v27 = 3;
    }
    else
    {
      if (v267 && !sub_1000CD4C4(&v179, &v266) && (v70 = sub_1000DB7BC((uint64_t)v233), v70 < 0) && (_DWORD)v70)
      {
        *(_QWORD *)&v149 = v70;
        *((_QWORD *)&v149 + 1) = v71;
        v150 = v233;
        v151 = 0;
        v152[0] = 0;
        v153 = 0;
      }
      else
      {
        v266 = v179;
        v267 = 1;
        v28 = (unint64_t *)(*(_QWORD *)(v179 + 56) + 16 * *((_QWORD *)&v179 + 1));
        v29 = sub_1000DDFC4(v28);
        *(_QWORD *)&v301 = off_100191EF8;
        *((_QWORD *)&v301 + 1) = v28;
        LOBYTE(v302) = v29;
        if (v29)
        {
          v30 = 0;
        }
        else
        {
          *(_QWORD *)&v220 = "di_asif::details::table::read(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)::data_entries_vectorizer_t::add_data_entry(const data_entry_t &)";
          *((_QWORD *)&v220 + 1) = 139;
          LODWORD(v221[0]) = 16;
          sub_1000DB88C(&v273, &v220);
          sub_100005A0C(&v298, (uint64_t)"Couldn't lock entry ", 20);
          sub_1000C68F4(&v298, &v179);
          std::ostream::~ostream(&v298, off_100189930);
          sub_1000DBA7C((uint64_t)&v273);
          std::ios::~ios(v299);
          v30 = -5;
        }
        v31 = atomic_load((unint64_t *)(*(_QWORD *)(v266 + 56) + 16 * *((_QWORD *)&v266 + 1) + 8));
        *(_QWORD *)&v149 = v30;
        v150 = v233;
        v151 = v31 >> 62;
        sub_10011E364((uint64_t)v152, (uint64_t)&v301);
        v153 = 1;
        sub_10011E3D8(&v301);
      }
      v194 = v149;
      if ((v149 & 0x8000000000000000) != 0 && (_DWORD)v194)
      {
LABEL_171:
        v27 = 3;
      }
      else
      {
        switch(v151)
        {
          case 0:
          case 2:
            v32 = v154;
            if (*((_QWORD *)&v154 + 1))
            {
              v33 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
              do
                v34 = __ldxr(v33);
              while (__stxr(v34 + 1, v33));
            }
            *(_OWORD *)v142 = v155[0];
            *(_OWORD *)&v142[9] = *(_OWORD *)((char *)v155 + 9);
            v35 = v156;
            v36 = v157;
            v143 = v158;
            v144 = v159;
            v145 = v160;
            v37 = *((_QWORD *)&v157 + 1);
            v38 = v161;
            v39 = v162;
            if (v162)
            {
              v40 = (unint64_t *)&v162->__shared_owners_;
              do
                v41 = __ldxr(v40);
              while (__stxr(v41 + 1, v40));
            }
            v146 = v163;
            v147 = v164;
            v148 = v165;
            v42 = v166;
            v43 = v167;
            if (v167)
            {
              v44 = (unint64_t *)&v167->__shared_owners_;
              do
                v45 = __ldxr(v44);
              while (__stxr(v45 + 1, v44));
            }
            *(_OWORD *)v138 = v168[0];
            *(_OWORD *)&v138[9] = *(_OWORD *)((char *)v168 + 9);
            v46 = v169;
            v47 = v170;
            v48 = v174;
            v139 = v171;
            v140 = v172;
            v141 = v173;
            v49 = v175;
            if (v175)
            {
              v50 = (unint64_t *)&v175->__shared_owners_;
              do
                v51 = __ldxr(v50);
              while (__stxr(v51 + 1, v50));
            }
            v52 = 0;
            v53 = 0;
            v54 = 0;
            v208 = v32;
            v209[0] = *(_OWORD *)v142;
            *(_OWORD *)((char *)v209 + 9) = *(_OWORD *)&v142[9];
            v210 = v35;
            *(_QWORD *)&v211 = v36;
            v212 = v143;
            v213 = v144;
            v214 = v145;
            *((_QWORD *)&v211 + 1) = v37;
            v215 = v38;
            v216 = v39;
            v217 = v146;
            v218 = v147;
            v219 = v148;
            v195 = v42;
            v196 = v43;
            v197[0] = *(_OWORD *)v138;
            *(_OWORD *)((char *)v197 + 9) = *(_OWORD *)&v138[9];
            v198 = v46;
            v199 = v47;
            v202 = v141;
            v200 = v139;
            v201 = v140;
            v203 = v48;
            v204 = v49;
            v205 = v176;
            v207 = v178;
            v206 = v177;
            v55 = v177;
            LOBYTE(v273) = 0;
            v299[160] = 0;
            while (!sub_10002C4A4((uint64_t)&v208, (uint64_t)&v195))
            {
              if (v218 >= v55 || v54 == -1)
                break;
              if (sub_1000BF0D4())
              {
                *(_QWORD *)&v231 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1462:30)]";
                *((_QWORD *)&v231 + 1) = 104;
                v232 = 2;
                sub_10003722C(&v301, &v231);
                sub_100005A0C(&v306, (uint64_t)"sg: ", 4);
                sub_10011E628(&v306, &v208);
                std::ostream::~ostream(&v306, off_100171F10);
                sub_100037460((uint64_t)&v301);
                std::ios::~ios(&v307);
              }
              *(_QWORD *)&v301 = 0;
              *((_QWORD *)&v301 + 1) = v55;
              LOBYTE(v302) = 2;
              sub_100075798(&v208, (uint64_t)&v301, (uint64_t)&v231);
              v57 = sub_1000CD590(&v179, &v231);
              v59 = v57;
              v60 = v57 >= 0 || (_DWORD)v57 == 0;
              v61 = v60;
              if (v60)
              {
                v18 = (__int128 *)v58;
                if (!v53)
                  v52 = (__int128 *)v58;
                if (sub_10002E788((uint64_t)&v208, (uint64_t)&v195, v58, v57))
                {
                  v220 = v208;
                  if (*((_QWORD *)&v208 + 1))
                  {
                    v66 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
                    do
                      v67 = __ldxr(v66);
                    while (__stxr(v67 + 1, v66));
                  }
                  v221[0] = v209[0];
                  *(_OWORD *)((char *)v221 + 9) = *(_OWORD *)((char *)v209 + 9);
                  v223 = v211;
                  v224 = v212;
                  v225 = v213;
                  v226 = v214;
                  v222 = v210;
                  v227[0] = v215;
                  v227[1] = v216;
                  if (v216)
                  {
                    v68 = (unint64_t *)&v216->__shared_owners_;
                    do
                      v69 = __ldxr(v68);
                    while (__stxr(v69 + 1, v68));
                  }
                  v228 = v217;
                  v229 = v218;
                  v230 = v219;
                  sub_10002E74C((uint64_t)&v220, (uint64_t)&v195, (uint64_t)v18, v59, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v301);
                  sub_100037314((uint64_t)&v273, (uint64_t)&v301);
                  sub_10002E7A4((uint64_t)&v301);
                  sub_100012168((uint64_t)v227);
                  sub_100012168((uint64_t)&v220);
                  sub_10002CA7C((uint64_t)&v273, (uint64_t)&v301);
                  sub_100037358((uint64_t)&v208, (uint64_t)&v301);
                  sub_100012168((uint64_t)v305);
                  sub_100012168((uint64_t)&v301);
                  sub_10002C64C((uint64_t)&v273, (uint64_t)&v301);
                  sub_100037358((uint64_t)&v195, (uint64_t)&v301);
                  sub_100012168((uint64_t)v305);
                  sub_100012168((uint64_t)&v301);
                }
                sub_10002D7D4((uint64_t)&v208, v59);
                v54 += v59;
                v53 = 1;
              }
              else
              {
                if ((int)v57 >= 0)
                  v65 = v57;
                else
                  v65 = -(int)v57;
                v136 = -v65;
              }
              v62 = (std::__shared_weak_count *)*((_QWORD *)&v231 + 1);
              if (*((_QWORD *)&v231 + 1))
              {
                v63 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
                do
                  v64 = __ldaxr(v63);
                while (__stlxr(v64 - 1, v63));
                if (!v64)
                {
                  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                  std::__shared_weak_count::__release_weak(v62);
                }
              }
              if ((v61 & 1) == 0)
                goto LABEL_90;
            }
            if (v53)
              v18 = v52;
            else
              v18 = 0;
            v136 = v54;
LABEL_90:
            sub_10002EB64((uint64_t)&v273);
            v72 = v204;
            v6 = a1;
            if (v204)
            {
              v73 = (unint64_t *)&v204->__shared_owners_;
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
            }
            v75 = v196;
            v5 = a2;
            if (v196)
            {
              v76 = (unint64_t *)&v196->__shared_owners_;
              do
                v77 = __ldaxr(v76);
              while (__stlxr(v77 - 1, v76));
              if (!v77)
              {
                ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                std::__shared_weak_count::__release_weak(v75);
              }
            }
            v78 = v216;
            if (v216)
            {
              v79 = (unint64_t *)&v216->__shared_owners_;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            v81 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
            if (*((_QWORD *)&v208 + 1))
            {
              v82 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
            *(_QWORD *)&v194 = v136;
            *((_QWORD *)&v194 + 1) = v18;
            v18 = &v266;
            goto LABEL_169;
          case 1:
            goto LABEL_166;
          case 3:
            v84 = *(_QWORD *)(v179 + 8);
            v85 = (*(_QWORD *)(v179 + 352)
                 + (*(_QWORD *)(v84 + 48) + *(_QWORD *)(v84 + 48) * *((_QWORD *)&v179 + 1))
                 / (unint64_t)(*(_QWORD *)(v84 + 48) + 1)
                 * *(unsigned int *)(v84 + 20))
                / *(unsigned __int16 *)(v84 + 18);
            if (!v237)
            {
              v86 = 0;
LABEL_115:
              *(_QWORD *)&v301 = 0;
              *((_QWORD *)&v301 + 1) = v6;
              v302 = &v304;
              v303 = xmmword_100140690;
              sub_1000C3A80(v6, v263, v85, 0, 1, (unint64_t *)&v220);
              sub_1000C4040((unint64_t *)&v301, (unint64_t *)&v220);
              sub_1000C29D8((unint64_t *)&v220);
              v18 = &v266;
              if ((_QWORD)v301 && !*(_BYTE *)(v301 + 344))
              {
                sub_1000DCC60((unint64_t *)&v273, (unint64_t *)&v301);
                *((_QWORD *)&v273 + 1) = *((_QWORD *)&v301 + 1);
                *(_QWORD *)v274 = &v274[24];
                *(_OWORD *)&v274[8] = xmmword_100140690;
                *(_QWORD *)&v220 = v302;
                *(_QWORD *)&v208 = &v302[40 * v303];
                sub_1000DCF60((uint64_t *)v274, (uint64_t *)&v220, (uint64_t *)&v208);
                v88 = 1;
              }
              else
              {
                v87 = std::generic_category();
                v88 = 0;
                *(_QWORD *)&v273 = 5;
                *((_QWORD *)&v273 + 1) = v87;
              }
              v300 = v88;
              sub_1000DC0BC((uint64_t)&v301);
              if (!v300)
              {
                if ((int)v273 >= 0)
                  v125 = v273;
                else
                  v125 = -(int)v273;
                v86 = -v125;
                goto LABEL_164;
              }
              if (v237)
              {
                sub_1000DC0BC((uint64_t)v233);
                v237 = 0;
              }
              sub_1000DCC60(v233, (unint64_t *)&v273);
              v233[1] = *((_QWORD *)&v273 + 1);
              v234 = &v236;
              v235 = xmmword_100140690;
              *(_QWORD *)&v301 = *(_QWORD *)v274;
              *(_QWORD *)&v220 = *(_QWORD *)v274 + 320 * *(_QWORD *)&v274[8];
              sub_1000DCF60((uint64_t *)&v234, (uint64_t *)&v301, (uint64_t *)&v220);
              v237 = 1;
              if (v300)
                sub_1000DC0BC((uint64_t)&v273);
              goto LABEL_129;
            }
            if (*(_QWORD *)(v233[0] + 40) == (v85
                                             - *(_QWORD *)(v6 + 352)
                                             / (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(v6 + 8) + 18))
                                            / (*(_QWORD *)(*(_QWORD *)(v6 + 8) + 48)
                                             * (unint64_t)(*(_DWORD *)(*(_QWORD *)(v6 + 8) + 20)
                                                                / *(unsigned __int16 *)(*(_QWORD *)(v6 + 8) + 18))))
            {
              v86 = 0;
              goto LABEL_129;
            }
            v89 = sub_1000DC068((uint64_t)v233);
            v86 = v89;
            if (v89 < 0 && (_DWORD)v89)
            {
              v18 = &v266;
              goto LABEL_164;
            }
            v136 = v90;
            if (!v237)
              goto LABEL_115;
LABEL_129:
            v273 = v154;
            if (*((_QWORD *)&v154 + 1))
            {
              v91 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
              do
                v92 = __ldxr(v91);
              while (__stxr(v92 + 1, v91));
            }
            *(_OWORD *)v274 = v155[0];
            *(_OWORD *)&v274[9] = *(_OWORD *)((char *)v155 + 9);
            v276 = v157;
            v277 = v158;
            v278 = v159;
            v279 = v160;
            v275 = v156;
            v280 = v161;
            v281 = v162;
            if (v162)
            {
              v93 = (unint64_t *)&v162->__shared_owners_;
              do
                v94 = __ldxr(v93);
              while (__stxr(v94 + 1, v93));
            }
            v282 = v163;
            v283 = v164;
            v284 = v165;
            v285 = v166;
            v286 = v167;
            if (v167)
            {
              v95 = (unint64_t *)&v167->__shared_owners_;
              do
                v96 = __ldxr(v95);
              while (__stxr(v96 + 1, v95));
            }
            v287[0] = v168[0];
            *(_OWORD *)((char *)v287 + 9) = *(_OWORD *)((char *)v168 + 9);
            v289 = v170;
            v290 = v171;
            v291 = v172;
            v292 = v173;
            v288 = v169;
            v293 = v174;
            v294 = v175;
            if (v175)
            {
              v97 = (unint64_t *)&v175->__shared_owners_;
              do
                v98 = __ldxr(v97);
              while (__stxr(v98 + 1, v97));
            }
            v295 = v176;
            v296 = v177;
            v297 = v178;
            if ((_QWORD)v235 == *((_QWORD *)&v235 + 1))
            {
              sub_1000DD26C((uint64_t *)&v234, (uint64_t)&v234[40 * v235], 1, (uint64_t)&v273, &v301);
            }
            else
            {
              v99 = sub_1000DD318((uint64_t)&v234[40 * v235], (uint64_t)&v273);
              *(_QWORD *)&v235 = v235 + 1;
            }
            v100 = v294;
            if (v294)
            {
              v101 = (unint64_t *)&v294->__shared_owners_;
              do
                v102 = __ldaxr(v101);
              while (__stlxr(v102 - 1, v101));
              if (!v102)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v100->__on_zero_shared)(v100, v99);
                std::__shared_weak_count::__release_weak(v100);
              }
            }
            v103 = v286;
            if (v286)
            {
              v104 = (unint64_t *)&v286->__shared_owners_;
              do
                v105 = __ldaxr(v104);
              while (__stlxr(v105 - 1, v104));
              if (!v105)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v103->__on_zero_shared)(v103, v99);
                std::__shared_weak_count::__release_weak(v103);
              }
            }
            v106 = v281;
            if (v281)
            {
              v107 = (unint64_t *)&v281->__shared_owners_;
              do
                v108 = __ldaxr(v107);
              while (__stlxr(v108 - 1, v107));
              if (!v108)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v106->__on_zero_shared)(v106, v99);
                std::__shared_weak_count::__release_weak(v106);
              }
            }
            v109 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
            if (*((_QWORD *)&v273 + 1))
            {
              v110 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
              do
                v111 = __ldaxr(v110);
              while (__stlxr(v111 - 1, v110));
              if (!v111)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v109->__on_zero_shared)(v109, v99);
                std::__shared_weak_count::__release_weak(v109);
              }
            }
            v18 = &v266;
            v90 = v136;
LABEL_164:
            *(_QWORD *)&v194 = v86;
            *((_QWORD *)&v194 + 1) = v90;
            if ((v86 & 0x8000000000000000) == 0 || !(_DWORD)v86)
            {
LABEL_166:
              sub_1000CBF2C(&v179, v5, (uint64_t)&v154, (uint64_t)&v166, v264, (unint64_t *)&v273);
              v194 = v273;
              if ((v273 & 0x8000000000000000) == 0 || !(_DWORD)v194)
                v272 += *(_QWORD *)v274;
            }
LABEL_169:
            v112 = v194;
            if ((v194 & 0x8000000000000000) != 0 && (_DWORD)v194)
              goto LABEL_171;
            sub_10002D5FC((uint64_t)&v181, v194);
            v137 += v112;
            sub_1000DB974((uint64_t)v251, (uint64_t)&v181);
            v27 = 0;
            break;
          default:
            goto LABEL_169;
        }
      }
      sub_1000CCE4C((uint64_t)&v149);
    }
    v113 = v175;
    if (v175)
    {
      v114 = (unint64_t *)&v175->__shared_owners_;
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
    v116 = v167;
    if (v167)
    {
      v117 = (unint64_t *)&v167->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    v119 = v162;
    if (v162)
    {
      v120 = (unint64_t *)&v162->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    v122 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
    if (!*((_QWORD *)&v154 + 1))
      goto LABEL_193;
    v123 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
      if (v27)
        break;
    }
    else
    {
LABEL_193:
      if (v27)
        break;
    }
  }
  if ((v194 & 0x8000000000000000) == 0 || !(_DWORD)v194)
  {
    *(_QWORD *)&v194 = v137;
    *((_QWORD *)&v194 + 1) = v133;
  }
  sub_1000CCF0C(v180);
  sub_1000CCF5C((uint64_t)v233);
  v126 = v190;
  if (v190)
  {
    v127 = (unint64_t *)&v190->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = v182;
  if (v182)
  {
    v130 = (unint64_t *)&v182->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  return v194;
}

void sub_1000CBC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_10005C240((uint64_t)&STACK[0x2180]);
  sub_1000CCE4C((uint64_t)&STACK[0x348]);
  sub_10005C240((uint64_t)&STACK[0x388]);
  sub_1000CCF0C((uint64_t *)&STACK[0x4D8]);
  sub_1000CCF5C((uint64_t)&STACK[0x7B0]);
  sub_100012168(a12);
  sub_100012168((uint64_t)&STACK[0x4F0]);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000CBE44(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000E6C30((uint64_t)a1, a2);
  *a1 = off_100189648;
  a1[45] = &off_100189748;
  a1[46] = &off_100189770;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100189648;
  a1[45] = off_1001896D0;
  a1[46] = off_1001896F8;
  return a1;
}

void sub_1000CBEC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000DB3C4(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CBEEC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100189710);
  sub_1000DB3C4(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_1000CBF2C(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, unint64_t *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  char v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  _BYTE v129[25];
  __int128 v130;
  __int128 v131;
  char v132;
  _BYTE v133[25];
  __int128 v134;
  __int128 v135;
  char v136;
  __int128 v137;
  unint64_t v138;
  char v139;
  std::__shared_weak_count *v140;
  _BYTE v141[25];
  __int128 v142;
  __int128 v143;
  char v144;
  std::__shared_weak_count *v145;
  __int128 v146;
  unint64_t v147;
  char v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  _OWORD v151[2];
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  char v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  __int128 v160;
  unint64_t v161;
  char v162;
  __int128 v163;
  _OWORD v164[2];
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  char v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  __int128 v172;
  unint64_t v173;
  char v174;
  __int128 v175;
  _OWORD v176[2];
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  char v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  __int128 v184;
  unint64_t v185;
  char v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  _OWORD v189[2];
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  char v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  __int128 v197;
  unint64_t v198;
  char v199;
  _QWORD v200[2];
  _OWORD v201[2];
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  char v206;
  _QWORD v207[2];
  __int128 v208;
  unint64_t v209;
  char v210;
  __int128 v211;
  _BYTE v212[25];
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  char v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  __int128 v220;
  unint64_t v221;
  char v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  int64_t v226;
  unint64_t v227;
  uint64_t v228;
  __int128 v229;
  _OWORD v230[2];
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  char v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  __int128 v239;
  unint64_t v240;
  char v241;
  char v242;
  _QWORD v243[2];
  char v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;

  v9 = *(_QWORD *)(*a1 + 8);
  v10 = *(_QWORD *)(v9 + 48);
  v11 = *(unsigned int *)(v9 + 20);
  *(_QWORD *)&v229 = *(_QWORD *)(*a1 + 352) + (v10 + v10 * a1[1]) / (unint64_t)(v10 + 1) * v11;
  *((_QWORD *)&v229 + 1) = v229 + v11;
  LOBYTE(v230[0]) = 2;
  sub_10002DB88(a3, (uint64_t)&v229, a4, (uint64_t)&v149);
  if (sub_10002C4A4((uint64_t)&v149, (uint64_t)&v163))
  {
    *a6 = -34;
    a6[2] = 0;
  }
  else
  {
    v12 = v149;
    if ((*(_QWORD *)(*(_QWORD *)(*a1 + 56) + 16 * a1[1] + 8) & 0x7FFFFFFFFFFFFFLL)
       * *(unsigned int *)(*(_QWORD *)(*a1 + 8) + 20))
    {
      v13 = v150;
      if (v150)
      {
        p_shared_owners = (unint64_t *)&v150->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      *(_OWORD *)v133 = v151[0];
      *(_OWORD *)&v133[9] = *(_OWORD *)((char *)v151 + 9);
      v16 = v152;
      v17 = v153;
      v18 = v154;
      v134 = v155;
      v135 = v156;
      v136 = v157;
      v19 = v158;
      v20 = v159;
      if (v159)
      {
        v21 = (unint64_t *)&v159->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v126 = a6;
      v137 = v160;
      v138 = v161;
      v139 = v162;
      v23 = v163;
      if (*((_QWORD *)&v163 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      *(_OWORD *)v129 = v164[0];
      *(_OWORD *)&v129[9] = *(_OWORD *)((char *)v164 + 9);
      v26 = v165;
      v27 = v166;
      v130 = v167;
      v131 = v168;
      v132 = v169;
      v28 = v170;
      v29 = v171;
      if (v171)
      {
        v30 = (unint64_t *)&v171->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v127 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v189[0] = *(_OWORD *)v133;
      *(_OWORD *)((char *)v189 + 9) = *(_OWORD *)&v133[9];
      v192 = v134;
      v193 = v135;
      v197 = v137;
      v176[0] = *(_OWORD *)v129;
      *(_OWORD *)((char *)v176 + 9) = *(_OWORD *)&v129[9];
      v180 = v131;
      v179 = v130;
      v187 = v12;
      v188 = v13;
      v190 = v16;
      *(_QWORD *)&v191 = v17;
      *((_QWORD *)&v191 + 1) = v18;
      v194 = v136;
      v195 = v19;
      v196 = v20;
      v198 = v138;
      v199 = v139;
      v175 = v23;
      v177 = v26;
      v178 = v27;
      v181 = v132;
      v182 = v28;
      v183 = v29;
      v184 = v172;
      v186 = v174;
      v185 = v173;
      v35 = v173;
      LOBYTE(v229) = 0;
      v242 = 0;
      while (!sub_10002C4A4((uint64_t)&v187, (uint64_t)&v175))
      {
        if (v198 >= v35 || v34 == -1)
          break;
        if (sub_1000BF0D4())
        {
          *(_QWORD *)&v245 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1729:32)]";
          *((_QWORD *)&v245 + 1) = 104;
          LODWORD(v246) = 2;
          sub_10003722C(&v211, &v245);
          sub_100005A0C(&v223, (uint64_t)"sg: ", 4);
          sub_10011E628(&v223, &v187);
          std::ostream::~ostream(&v223, off_100171F10);
          sub_100037460((uint64_t)&v211);
          std::ios::~ios(&v224);
        }
        *(_QWORD *)&v211 = 0;
        *((_QWORD *)&v211 + 1) = v35;
        v212[0] = 2;
        sub_100075798(&v187, (uint64_t)&v211, (uint64_t)&v225);
        v37 = v226;
        v38 = *(_QWORD *)(*(_QWORD *)(*a1 + 56) + 16 * a1[1] + 8);
        v39 = *(unsigned int *)(*(_QWORD *)(*a1 + 8) + 20);
        v40 = v227;
        v41 = v228;
        v211 = v225;
        if (*((_QWORD *)&v225 + 1))
        {
          v42 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        *(_QWORD *)v212 = v37;
        *(_QWORD *)&v212[8] = v40 % v39 + (v38 & 0x7FFFFFFFFFFFFFLL) * v39;
        *(_QWORD *)&v212[16] = v41;
        v212[24] = 0;
        v44 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 40))(*(_QWORD *)(a2 + 16));
        v243[0] = 0;
        v243[1] = v44;
        v244 = 2;
        sub_100075798(&v211, (uint64_t)v243, (uint64_t)&v245);
        if (v246)
        {
          (*(void (**)(_QWORD *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a2 + 16) + 128))(v243, *(_QWORD *)(a2 + 16), &v245);
          v45 = a5[1];
          if (v45 == a5[2])
          {
            sub_10004F2CC(a5, *a5 + 40 * v45, 1, (uint64_t)v243, &v247);
          }
          else
          {
            sub_10003DF88(*a5 + 40 * v45, (uint64_t)v243);
            ++a5[1];
          }
          v127 += v246;
        }
        v46 = v227;
        v47 = v226;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v245 + 1);
        if (*((_QWORD *)&v245 + 1))
        {
          v49 = (unint64_t *)(*((_QWORD *)&v245 + 1) + 8);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
        if (*((_QWORD *)&v211 + 1))
        {
          v52 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v54 = v47 >= 0 || (_DWORD)v47 == 0;
        v55 = v54;
        if (v54)
        {
          if (!v33)
            v32 = v46;
          if (sub_10002E788((uint64_t)&v187, (uint64_t)&v175, v46, v47))
          {
            v200[0] = v187;
            v200[1] = v188;
            if (v188)
            {
              v60 = (unint64_t *)&v188->__shared_owners_;
              do
                v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
            }
            v201[0] = v189[0];
            *(_OWORD *)((char *)v201 + 9) = *(_OWORD *)((char *)v189 + 9);
            v203 = v191;
            v204 = v192;
            v205 = v193;
            v206 = v194;
            v202 = v190;
            v207[0] = v195;
            v207[1] = v196;
            if (v196)
            {
              v62 = (unint64_t *)&v196->__shared_owners_;
              do
                v63 = __ldxr(v62);
              while (__stxr(v63 + 1, v62));
            }
            v208 = v197;
            v209 = v198;
            v210 = v199;
            sub_10002E74C((uint64_t)v200, (uint64_t)&v175, v46, v47, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v211);
            sub_100037314((uint64_t)&v229, (uint64_t)&v211);
            sub_10002E7A4((uint64_t)&v211);
            sub_100012168((uint64_t)v207);
            sub_100012168((uint64_t)v200);
            sub_10002CA7C((uint64_t)&v229, (uint64_t)&v211);
            sub_100037358((uint64_t)&v187, (uint64_t)&v211);
            sub_100012168((uint64_t)&v218);
            sub_100012168((uint64_t)&v211);
            sub_10002C64C((uint64_t)&v229, (uint64_t)&v211);
            sub_100037358((uint64_t)&v175, (uint64_t)&v211);
            sub_100012168((uint64_t)&v218);
            sub_100012168((uint64_t)&v211);
          }
          sub_10002D7D4((uint64_t)&v187, v47);
          v34 += v47;
          v33 = 1;
        }
        else
        {
          if ((int)v47 >= 0)
            v59 = v47;
          else
            v59 = -(int)v47;
          v125 = -v59;
        }
        v56 = (std::__shared_weak_count *)*((_QWORD *)&v225 + 1);
        if (*((_QWORD *)&v225 + 1))
        {
          v57 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        if ((v55 & 1) == 0)
          goto LABEL_76;
      }
      if (v33)
        v46 = v32;
      else
        v46 = 0;
      v125 = v34;
LABEL_76:
      sub_10002EB64((uint64_t)&v229);
      v64 = v183;
      if (v183)
      {
        v65 = (unint64_t *)&v183->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
      if (*((_QWORD *)&v175 + 1))
      {
        v68 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = v196;
      if (v196)
      {
        v71 = (unint64_t *)&v196->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = v188;
      if (v188)
      {
        v74 = (unint64_t *)&v188->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      *v126 = v125;
      v126[1] = v46;
      if ((v125 & 0x8000000000000000) != 0 && (_DWORD)v125)
        v126[2] = 0;
      else
        v126[2] = v127;
    }
    else
    {
      v76 = v150;
      v140 = v150;
      if (v150)
      {
        v77 = (unint64_t *)&v150->__shared_owners_;
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      *(_OWORD *)v141 = v151[0];
      *(_OWORD *)&v141[9] = *(_OWORD *)((char *)v151 + 9);
      v79 = v152;
      v80 = v153;
      v81 = v154;
      v142 = v155;
      v143 = v156;
      v144 = v157;
      v82 = v158;
      v83 = v159;
      v145 = v159;
      if (v159)
      {
        v84 = (unint64_t *)&v159->__shared_owners_;
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      v146 = v160;
      v147 = v161;
      v148 = v162;
      *(_QWORD *)&v229 = v12;
      *((_QWORD *)&v229 + 1) = v76;
      if (v76)
      {
        v86 = (unint64_t *)&v76->__shared_owners_;
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
      }
      v230[0] = *(_OWORD *)v141;
      *(_OWORD *)((char *)v230 + 9) = *(_OWORD *)&v141[9];
      v234 = v142;
      v231 = v79;
      v232 = v80;
      v233 = v81;
      v235 = v143;
      v236 = v144;
      v237 = v82;
      v238 = v83;
      if (v83)
      {
        v88 = (unint64_t *)&v83->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      v239 = v146;
      v240 = v147;
      v241 = v148;
      v211 = v163;
      if (*((_QWORD *)&v163 + 1))
      {
        v90 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
      }
      *(_OWORD *)v212 = v164[0];
      *(_OWORD *)&v212[9] = *(_OWORD *)((char *)v164 + 9);
      v213 = v165;
      v214 = v166;
      v215 = v167;
      v216 = v168;
      v217 = v169;
      v218 = v170;
      v219 = v171;
      if (v171)
      {
        v92 = (unint64_t *)&v171->__shared_owners_;
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
      }
      v220 = v172;
      v221 = v173;
      v222 = v174;
      v94 = sub_1000DE13C((uint64_t (*)(__int128 *))sub_10007576C, &v229, &v211, 0xFFFFFFFFFFFFFFFFLL);
      v96 = v95;
      v97 = v219;
      if (v219)
      {
        v98 = (unint64_t *)&v219->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v100 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
      if (*((_QWORD *)&v211 + 1))
      {
        v101 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      v103 = v238;
      if (v238)
      {
        v104 = (unint64_t *)&v238->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v106 = (std::__shared_weak_count *)*((_QWORD *)&v229 + 1);
      if (*((_QWORD *)&v229 + 1))
      {
        v107 = (unint64_t *)(*((_QWORD *)&v229 + 1) + 8);
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      *a6 = v94;
      a6[1] = v96;
      a6[2] = 0;
      if (v145)
      {
        v109 = (unint64_t *)&v145->__shared_owners_;
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
      }
      if (v140)
      {
        v111 = (unint64_t *)&v140->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
    }
  }
  v113 = v171;
  if (v171)
  {
    v114 = (unint64_t *)&v171->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
  if (*((_QWORD *)&v163 + 1))
  {
    v117 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v159;
  if (v159)
  {
    v120 = (unint64_t *)&v159->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v150;
  if (v150)
  {
    v123 = (unint64_t *)&v150->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
}

void sub_1000CCD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_100012168((uint64_t)&STACK[0x7B0]);
  sub_10002EB64((uint64_t)&STACK[0x7E0]);
  sub_100012168(a10);
  sub_100012168((uint64_t)&STACK[0x3C0]);
  sub_100012168(a11);
  sub_100012168((uint64_t)&STACK[0x460]);
  sub_100012168(a12);
  sub_100012168((uint64_t)&a29);
  sub_100012168(a13);
  sub_100012168((uint64_t)&a49);
  sub_10005C240((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CCE4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(v2 + 6184) && (*(_DWORD *)(a1 + 24) | 2) != 2)
    {
      v3 = *(_QWORD *)(v2 + 6200);
      if (v3 == *(_QWORD *)(v2 + 6208))
      {
        sub_1000DD67C((uint64_t *)(v2 + 6192), *(_QWORD *)(v2 + 6192) + 24 * v3, 1, a1 + 32, &v5);
      }
      else
      {
        sub_10011E364(*(_QWORD *)(v2 + 6192) + 24 * v3, a1 + 32);
        ++*(_QWORD *)(v2 + 6200);
      }
    }
    if (*(_BYTE *)(a1 + 56))
      sub_10011E3D8(a1 + 32);
  }
  return a1;
}

uint64_t *sub_1000CCF0C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v2 = sub_1000DC068(*a1);
  if (v2 < 0)
  {
    if ((_DWORD)v2)
    {
      v4 = (uint64_t *)a1[1];
      if ((*v4 & 0x8000000000000000) == 0 || !*v4)
      {
        *v4 = v2;
        v4[1] = v3;
      }
    }
  }
  return a1;
}

uint64_t sub_1000CCF5C(uint64_t a1)
{
  void *v2;

  sub_1000DD96C(a1 + 6192);
  if (*(_QWORD *)(a1 + 5520))
  {
    v2 = *(void **)(a1 + 5504);
    if ((void *)(a1 + 5528) != v2)
      operator delete(v2);
  }
  sub_100012168(a1 + 5440);
  sub_100012168(a1 + 5328);
  sub_100012168(a1 + 5280);
  sub_100012168(a1 + 5168);
  if (*(_BYTE *)(a1 + 5160))
    sub_1000DC0BC(a1);
  return a1;
}

uint64_t sub_1000CCFF4(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *exception;
  _QWORD *v12;
  const std::error_category *v13;
  uint64_t (**v14)();
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  if (!atomic_load((unsigned int *)(a1 + 96)))
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v14 = off_100187458;
  v15 = v3;
  v4 = (uint64_t)&v16;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v3 + 16) + 72))(&v16);
  if ((*(_BYTE *)(v15 + 8) & 1) != 0)
  {
    v6 = 0;
    v4 = 4294967290;
  }
  else
  {
    LODWORD(v5) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
    if ((_DWORD)v5)
    {
      sub_1000A1868((uint64_t)&v14);
      exception = __cxa_allocate_exception(0x40uLL);
      v12 = exception;
      if ((int)v5 < 0)
        v5 = v5;
      else
        v5 = -(int)v5;
      *exception = &off_1001924F8;
      v13 = std::generic_category();
      v12[1] = v5;
      v12[2] = v13;
      *((_BYTE *)v12 + 24) = 0;
      *((_BYTE *)v12 + 48) = 0;
      v12[7] = "Can't flush asif on bitmap close, backend flush failed";
    }
    sub_1000C7614(a1, (uint64_t)&v14);
    v6 = 1;
  }
  v14 = off_100187458;
  v7 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((v6 & 1) == 0)
        return v4;
      return 0;
    }
  }
  if ((v6 & 1) != 0)
    return 0;
  return v4;
}

_QWORD *sub_1000CD200(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000E6CAC((uint64_t)a1, a2);
  *a1 = off_100189A88;
  a1[45] = &off_100189B88;
  a1[46] = &off_100189BB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100189A88;
  a1[45] = off_100189B10;
  a1[46] = off_100189B38;
  return a1;
}

void sub_1000CD284(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000DDBCC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CD2A8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100189B50);
  sub_1000DDBCC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

unint64_t sub_1000CD2E8(_QWORD *a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5, int a6)
{
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int16 v16;
  __int16 v17;

  if (a5 != a4)
  {
    v10 = sub_1000CD3A4(a2, a4, a5 - a4);
    v11 = v10;
    v12 = HIDWORD(v10);
    v13 = (uint64_t)(a1 + 4);
    if (a6)
    {
      v17 = a3 & 1 | (((a3 & 2) != 0) << 8);
      v14 = sub_1000945CC(v13, v11, v12, (unsigned __int8 *)&v17);
    }
    else
    {
      v16 = a3 & 1 | (((a3 & 2) != 0) << 8);
      v14 = sub_10009439C(v13, v11, v12, (unsigned __int8 *)&v16);
    }
    return *(_QWORD *)(a2 + 352)
         + *a1
         / (unint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 48) + 1)
         * *(_QWORD *)(*(_QWORD *)(a2 + 8) + 48)
         * *(unsigned int *)(*(_QWORD *)(a2 + 8) + 20)
         + ((v14 * *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + 18)) >> 1);
  }
  return a4;
}

unint64_t sub_1000CD3A4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int16 *)(v3 + 18);
  if (v4 <= a3)
    v5 = a3;
  else
    v5 = *(unsigned __int16 *)(v3 + 18);
  if (!a3)
    v5 = 0;
  v6 = *(unsigned int *)(v3 + 20);
  v7 = *(_QWORD *)(v3 + 48);
  return ((2
         * ((a2
                         - (*(_QWORD *)(a1 + 352)
                          + v7
                          * v6
                          * ((a2 / v4 - *(_QWORD *)(a1 + 352) / v4)
                           / (v7
                            * (unint64_t)(v6 / v4)))))
                        / v4)) | (((v5
                                  + a2
                                  - v4
                                  - (*(_QWORD *)(a1 + 352)
                                   + ((v5 + a2 - v4) / v4 - *(_QWORD *)(a1 + 352) / v4)
                                   / (v7
                                    * (unint64_t)(v6 / v4))
                                   * v7
                                   * v6))
                                 / v4) << 33))
       + 0x200000000;
}

uint64_t sub_1000CD424@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *v4;
  unint64_t v6;
  char v7;

  v4 = (unint64_t *)result;
  while (*v4)
  {
LABEL_9:
    result = sub_1000DE050(v4, 1);
    if ((result & 1) == 0)
    {
      v7 = 0;
      goto LABEL_11;
    }
  }
  while (1)
  {
    v6 = __ldaxr(v4);
    if (!v6)
      break;
    __clrex();
LABEL_8:
    if (v6)
      goto LABEL_9;
  }
  if (__stlxr(0xFFFFFFFFFFFFFFFFLL, v4))
    goto LABEL_8;
  v7 = 1;
LABEL_11:
  *(_BYTE *)(a3 + 16) = v7;
  *(_QWORD *)a3 = off_100191F18;
  *(_QWORD *)(a3 + 8) = v4;
  *(_QWORD *)(a3 + 24) = a2;
  return result;
}

BOOL sub_1000CD4C4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = *(unsigned int *)(*(_QWORD *)(*a1 + 8) + 20);
  v3 = (*(_QWORD *)(*(_QWORD *)(*a1 + 56) + 16 * a1[1] + 8) & 0x7FFFFFFFFFFFFFLL) * v2;
  v4 = (*(_QWORD *)(*(_QWORD *)(*a2 + 56) + 16 * a2[1] + 8) & 0x7FFFFFFFFFFFFFLL)
     * *(unsigned int *)(*(_QWORD *)(*a2 + 8) + 20);
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 1;
  return v5 || v3 == v4 + v2;
}

uint64_t sub_1000CD528(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  LODWORD(v2) = 0;
  v3 = *(unsigned int **)a1;
  v4 = 40 * v1;
  while (1)
  {
    v5 = sub_100039604(v3);
    if ((v5 & 0x80000000) != 0)
      break;
    v2 = (v5 + v2);
    v3 += 10;
    v4 -= 40;
    if (!v4)
      return v2;
  }
  return v5;
}

size_t sub_1000CD590(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[2];
  char v11;
  void *v12;
  std::__shared_weak_count *v13;
  size_t v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(unsigned int *)(v2 + 20);
  v10[0] = *(_QWORD *)(*a1 + 352) + (v3 + v3 * a1[1]) / (unint64_t)(v3 + 1) * v4;
  v10[1] = v10[0] + v4;
  v11 = 2;
  sub_100075798(a2, (uint64_t)v10, (uint64_t)&v12);
  if (v14)
  {
    bzero(v12, v14);
    v5 = v14;
  }
  else
  {
    v5 = -34;
  }
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

uint64_t sub_1000CD65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  if (!*(_BYTE *)(a1 + 113))
    goto LABEL_23;
  *(_BYTE *)(a1 + 113) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    goto LABEL_23;
  v9 = *(_QWORD *)(a1 + 40);
  v10 = (std::__shared_weak_count *)*((_QWORD *)sub_1001207C0() + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v22 = v9;
    v23 = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v24 = a4;
    v25 = v6;
    v26 = a4;
    v27 = 1;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    v22 = v9;
    v23 = 0;
    v24 = a4;
    v25 = v6;
    v26 = a4;
    v27 = 1;
  }
  v15 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 16) + 80))(*(_QWORD *)(a2 + 16), &v22);
  v16 = v24;
  if (v24 != v15)
  {
    *(_BYTE *)(a1 + 113) = 1;
    sub_1000A1868(a2);
    if (v15 < 0)
      a4 = v15;
    else
      a4 = -v15;
  }
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v16 == v15)
  {
LABEL_23:
    a4 = 0;
    if (a3)
    {
      if (*(_BYTE *)(a1 + 112))
      {
        *(_BYTE *)(a1 + 112) = 0;
        sub_1000C4B38(a3, *(_QWORD *)a1, *(_QWORD *)(a1 + 16));
        a4 = 0;
        if (!*(_QWORD *)(a1 + 16))
        {
          v20 = *(_QWORD *)(a1 + 24);
          if (v20)
            sub_1000C3528(a3, v20);
          return 0;
        }
      }
    }
  }
  return a4;
}

void sub_1000CD80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_1000CD820(unint64_t result, uint64_t a2, char **a3)
{
  unint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;

  v3 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + 18);
  v4 = a3[3];
  v5 = (unint64_t)v4 / v3 * v3;
  v6 = (unint64_t)&v4[(_QWORD)a3[2]];
  v7 = (v3 + v6 - 1) / v3 * v3;
  if (v5 < v7)
  {
    v9 = (_QWORD *)result;
    v10 = (unint64_t)v4 % v3;
    v11 = *a3;
    do
    {
      v12 = sub_1000CD2E8(v9, a2, 1, v5, v7, 1);
      v13 = v12;
      if (v6 >= v12)
        v14 = v12;
      else
        v14 = v6;
      v15 = v5 + v10;
      if (v14 >= v5 + v10)
      {
        if ((unint64_t)&(*a3)[a3[2] - v11] >= v14 - (v5 + v10))
          v16 = v14 - (v5 + v10);
        else
          v16 = (size_t)&(*a3)[a3[2] - v11];
        bzero(v11, v16);
      }
      result = sub_1000CD2E8(v9, a2, 1, v13, v7, 0);
      v5 = result;
      if (result < v14 + v10)
      {
        v17 = 0;
      }
      else
      {
        v10 = 0;
        v17 = result - v15;
      }
      v11 += v17;
    }
    while (result < v6);
  }
  return result;
}

void sub_1000CD940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *exception;
  _QWORD *v18;
  uint64_t v19;
  const std::error_category *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned int *)(*(_QWORD *)(a3 + 8) + 20);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = (std::__shared_weak_count *)*((_QWORD *)sub_1001207C0() + 1);
  v21 = v6;
  v22 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v23 = v7;
  v24 = v8;
  v25 = v7;
  v26 = 0;
  v12 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 16) + 88))(*(_QWORD *)(a2 + 16), &v21);
  if (v23 != v12)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v18 = exception;
    if (v12 < 0)
      v19 = v12;
    else
      v19 = -v12;
    *exception = &off_1001924F8;
    v20 = std::generic_category();
    v18[1] = v19;
    v18[2] = v20;
    *((_BYTE *)v18 + 24) = 0;
    *((_BYTE *)v18 + 48) = 0;
    v18[7] = "Can't load bitmap from backend";
  }
  if (*(_QWORD *)(*(_QWORD *)(a3 + 8) + 48)
     * (*(_DWORD *)(*(_QWORD *)(a3 + 8) + 20)
      / *(unsigned __int16 *)(*(_QWORD *)(a3 + 8) + 18)))
  {
    v13 = 0;
    do
    {
      sub_1000C3D50(a1, v13);
      v13 += 2;
    }
    while (*(_QWORD *)(*(_QWORD *)(a3 + 8) + 48)
          * (unint64_t)(*(_DWORD *)(*(_QWORD *)(a3 + 8) + 20)
                             / *(unsigned __int16 *)(*(_QWORD *)(a3 + 8) + 18)) > v13);
  }
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1000CDAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CDAD8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[2];

  *(_QWORD *)a1 = a4;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = *(_QWORD *)(v9 + 48);
  v11 = *(unsigned int *)(v9 + 20);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a3 + 352) + a4 / (v10 + 1) * v10 * v11;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = 0;
  v12 = a6 ^ 1;
  sub_100073A30((_QWORD *)(a1 + 32), 2 * v10 * (v11 / *(unsigned __int16 *)(v9 + 18)), a6 ^ 1);
  *(_QWORD *)(a1 + 120) = 850045863;
  *(_WORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  if ((v12 & 1) != 0)
  {
    sub_1000CD940(a1, a2, a3);
  }
  else
  {
    *(_WORD *)(a1 + 112) = 257;
    sub_1000D7130(v16, a3, *(_QWORD *)a1);
    v13 = (unint64_t *)(*(_QWORD *)(v16[0] + 56) + 16 * v16[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 | 0x8000000000000000, v13));
  }
  return a1;
}

void sub_1000CDBDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;

  std::mutex::~mutex(v2);
  *(_QWORD *)(v1 + 32) = off_10017B1E0;
  sub_100073DB8((uint64_t *)(v1 + 56));
  _Unwind_Resume(a1);
}

uint64_t sub_1000CDC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::mutex *v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *exception;
  _QWORD *v19;
  uint64_t v20;
  const std::error_category *v21;
  uint64_t v22;
  uint64_t v23;

  if ((*(_BYTE *)(*(_QWORD *)(a2 + 8) + 8) & 1) == 0)
  {
    v8 = (std::mutex *)(a1 + 120);
    std::mutex::lock((std::mutex *)(a1 + 120));
    v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16), 0);
    if (v9)
    {
      sub_1000A1868(a2);
      exception = __cxa_allocate_exception(0x40uLL);
      v19 = exception;
      if (v9 < 0)
        v20 = v9;
      else
        v20 = -v9;
      *exception = &off_1001924F8;
      v21 = std::generic_category();
      v19[1] = v20;
      v19[2] = v21;
      *((_BYTE *)v19 + 24) = 0;
      *((_BYTE *)v19 + 48) = 0;
      v19[7] = "Can't flush asif on bitmap close, backend flush failed";
    }
    if (!a3)
      goto LABEL_28;
    sub_1000D7130(&v22, a3, *(_QWORD *)a1);
    v10 = (unint64_t *)(*(_QWORD *)(v22 + 56) + 16 * v23 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 & 0x7FFFFFFFFFFFFFFFLL, v10));
    if ((v11 & 0x8000000000000000) != 0)
    {
      v12 = 1;
    }
    else
    {
LABEL_28:
      if (*(_BYTE *)(a1 + 113))
      {
        v12 = 0;
      }
      else
      {
        v12 = 0;
        if (!*(_BYTE *)(a1 + 112))
        {
          v13 = 0;
LABEL_20:
          std::mutex::unlock(v8);
          return v13;
        }
      }
    }
    v13 = sub_1000CD65C(a1, a2, a3, a4);
    if ((_DWORD)v13)
      v14 = v12;
    else
      v14 = 0;
    if (a3 && v14)
    {
      sub_1000D7130(&v22, a3, *(_QWORD *)a1);
      v15 = (unint64_t *)(*(_QWORD *)(v22 + 56) + 16 * v23 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 | 0x8000000000000000, v15));
    }
    goto LABEL_20;
  }
  return 4294967290;
}

void sub_1000CDDA8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t *sub_1000CDDC8@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, char a6@<W5>, unint64_t *a7@<X8>)
{
  uint64_t v10;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v10 = (uint64_t)result;
  v19 = a4;
  *a7 = 0;
  if (a4 || a5)
  {
    sub_1000CDF50((uint64_t)(result + 35), a3, a6, (unint64_t *)&v18);
    sub_1000CE138(a7, (unint64_t *)&v18);
    result = sub_1000C1E4C((unint64_t *)&v18);
    v12 = *a7;
    if (*a7)
      LOBYTE(v12) = *(_BYTE *)(v12 + 520) == 0;
    if ((v12 & 1) != 0 || (a6 & 1) != 0)
    {
      if (!*a7 || (v13 = atomic_load((unsigned int *)(*a7 + 24)), v13 != 2))
      {
        if (!*a7 || !*(_BYTE *)(*a7 + 520))
        {
          if (v19 | (*(_QWORD *)(*(_QWORD *)(v10 + 152) + 8 * a3) * *(unsigned int *)(v10 + 20)))
          {
            if (v19)
              v14 = v19;
            else
              v14 = *(_QWORD *)(*(_QWORD *)(v10 + 152) + 8 * a3) * *(unsigned int *)(v10 + 20);
            v18 = *(_QWORD *)(v10 + 80) * a3;
            v19 = v14;
            sub_1000CE1F0((uint64_t *)a7, v10, (_QWORD *)(a2 + 16), &v19, &v18);
          }
          v15 = sub_1000C40F8((unsigned int *)v10, a2, 1);
          v17 = *(_QWORD *)(v10 + 80) * a3;
          v18 = v15;
          v16 = 1;
          sub_1000CE17C((uint64_t *)a7, v10, (_QWORD *)(a2 + 16), (unint64_t *)&v18, &v17, &v16);
        }
      }
    }
  }
  return result;
}

void sub_1000CDF28(_Unwind_Exception *a1)
{
  unint64_t *v1;

  sub_1000C1E4C(v1);
  _Unwind_Resume(a1);
}

unint64_t *sub_1000CDF50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t v7;
  unint64_t *v8;
  uint64_t *v9;
  char v10;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  uint64_t v17;

  v16 = 0;
  v17 = a2;
  sub_1000E6D28(a1, a2, a3, &v14);
  if (v14 && !*(_BYTE *)(v14 + 520) || v14 && *(_BYTE *)(v14 + 520))
  {
    *a4 = 0;
    do
      v7 = __ldaxr(&v14);
    while (__stlxr(0, &v14));
LABEL_21:
    atomic_store(v7, a4);
    return sub_1000C1E4C(&v14);
  }
  if (*(_BYTE *)(a1 + 912) && v15 != (_QWORD *)(a1 + 936))
  {
    do
    {
      sub_1000E71E8(a1, a2, &v12);
      v16 = v12;
      sub_1000CE138(&v14, &v13);
      sub_1000C1E4C(&v13);
      if (v14)
      {
        if (!*(_BYTE *)(v14 + 520))
          break;
      }
      v8 = (unint64_t *)sub_1000E7374((_QWORD *)a1);
      if (v8)
      {
        v16 = v8;
        sub_1000E7418(a1, v8, a2, (unint64_t *)&v12);
        sub_1000CE138(&v14, (unint64_t *)&v12);
        sub_1000C1E4C((unint64_t *)&v12);
        break;
      }
    }
    while (*(_BYTE *)(a1 + 912));
    std::mutex::lock((std::mutex *)(a1 + 952));
    v9 = sub_1000E376C((uint64_t **)(a1 + 928), v15, (unint64_t *)&v17, &v17, (uint64_t *)&v16);
    if (!v10)
      v9[5] = (uint64_t)v16;
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 1016));
    std::mutex::unlock((std::mutex *)(a1 + 952));
    sub_1000E47C0(a1, 0, 0, 0);
    *a4 = 0;
    do
      v7 = __ldaxr(&v14);
    while (__stlxr(0, &v14));
    goto LABEL_21;
  }
  *a4 = 0;
  return sub_1000C1E4C(&v14);
}

void sub_1000CE0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1000C1E4C((unint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t *sub_1000CE138(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  if (a2 != a1)
  {
    do
      v3 = __ldaxr(a2);
    while (__stlxr(0, a2));
    sub_1000C1E4C(a1);
    atomic_store(v3, a1);
  }
  return a1;
}

void sub_1000CE17C(uint64_t *a1, uint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t *a5, unsigned __int8 *a6)
{
  sub_1000E7EDC(*a1, a2, a3, a4, a5, a6);
}

void sub_1000CE1A8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;

  __cxa_begin_catch(a1);
  if (*v10)
  {
    v11 = *(_QWORD *)(*v10 + 464);
    if (v11)
    {
      a10 = *v10;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &a10, v10);
    }
  }
  __cxa_rethrow();
}

void sub_1000CE1DC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000CE1F0(uint64_t *a1, uint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t *a5)
{
  sub_1000E8078(*a1, a2, a3, a4, a5);
}

void sub_1000CE21C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;

  __cxa_begin_catch(a1);
  if (*v10)
  {
    v11 = *(_QWORD *)(*v10 + 464);
    if (v11)
    {
      a10 = *v10;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &a10, v10);
    }
  }
  __cxa_rethrow();
}

void sub_1000CE250(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unint64_t *sub_1000CE264@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = atomic_load(result);
  if (v4 && *(_QWORD *)(v4 + 32) == a2)
  {
    v6 = (unint64_t *)atomic_load(result);
    sub_1000E76F0(&v9, v6, 1);
    if (v9 && !*(_BYTE *)(v9 + 520))
    {
      v7 = *(_QWORD *)(v9 + 32);
      *a3 = 0;
      if (v7 == a2)
      {
        do
          v8 = __ldaxr(&v9);
        while (__stlxr(0, &v9));
        atomic_store(v8, a3);
      }
    }
    else
    {
      *a3 = 0;
    }
    return sub_1000C1E4C(&v9);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

_QWORD *sub_1000CE304(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000E81DC((uint64_t)a1, a2);
  *a1 = off_100189CA8;
  a1[45] = &off_100189DA8;
  a1[46] = &off_100189DD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100189CA8;
  a1[45] = off_100189D30;
  a1[46] = off_100189D58;
  return a1;
}

void sub_1000CE388(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000DE87C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CE3AC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100189D70);
  sub_1000DE87C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000CE3EC(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000E8258((uint64_t)a1, a2);
  *a1 = off_100189EC8;
  a1[45] = &off_100189FC8;
  a1[46] = &off_100189FF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100189EC8;
  a1[45] = off_100189F50;
  a1[46] = off_100189F78;
  return a1;
}

void sub_1000CE470(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000DEE68(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CE494(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100189F90);
  sub_1000DEE68(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000CE4D4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  int v6;
  int v7;
  int v8;

  v4 = sub_1000E24E4(a1 + 2080, 0, 0, 0);
  if (v4 == -1)
    return 4294967282;
  if (v4 == 1)
  {
    LODWORD(result) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16), 0);
    v6 = result;
    result = (int)result < 0 ? result : -(int)result;
    if (v6)
      return result;
  }
  v7 = sub_1000E47C0(a1 + 280, 0, 0, 0);
  if (v7 == -1)
    return 4294967282;
  if (v7 != 1)
    return 0;
  LODWORD(result) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16), 0);
  v8 = result;
  result = (int)result < 0 ? result : -(int)result;
  if (!v8)
    return 0;
  return result;
}

uint64_t sub_1000CE590(uint64_t a1, uint64_t a2, uint64_t (***a3)())
{
  std::mutex *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  size_t v10;
  _QWORD *v11;
  uint64_t (***v12)();
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  int v26;
  unint64_t **v27;
  unint64_t *v28;
  char *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::bad_alloc *exception;
  std::bad_alloc *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t (**v47)();
  std::__shared_weak_count *v48;
  size_t v49;
  uint64_t (***v50)();
  size_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;

  v45 = 0u;
  v46 = 0u;
  v44 = 0u;
  v6 = (std::mutex *)(a1 + 3792);
  std::mutex::lock((std::mutex *)(a1 + 3792));
  v7 = *(_OWORD *)(a1 + 3744);
  *(_OWORD *)(a1 + 3744) = 0u;
  v8 = *(_OWORD *)(a1 + 3760);
  v44 = v7;
  v45 = v8;
  *(_OWORD *)(a1 + 3760) = 0u;
  v9 = v46;
  v46 = *(_OWORD *)(a1 + 3776);
  *(_OWORD *)(a1 + 3776) = v9;
  std::mutex::unlock(v6);
  v10 = (*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152) + (unint64_t)*(unsigned __int16 *)(a1 + 18) + 7)
      / *(unsigned __int16 *)(a1 + 18)
      * *(unsigned __int16 *)(a1 + 18);
  v11 = malloc_type_valloc(v10, 0xF8ED6DDuLL);
  if (!v11)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v43 = std::bad_alloc::bad_alloc(exception);
  }
  v47 = off_1001882A0;
  v50 = &v47;
  v53 = v11;
  sub_1000181E0((uint64_t)&v54, (uint64_t)&v47);
  v12 = v50;
  if (v50 == &v47)
  {
    v13 = 4;
    v12 = &v47;
    goto LABEL_6;
  }
  if (v50)
  {
    v13 = 5;
LABEL_6:
    ((void (*)(uint64_t (***)()))(*v12)[v13])(v12);
  }
  v14 = v53;
  v15 = *(_QWORD *)(a1 + 3608);
  *(_QWORD *)(a1 + 3608) = v15 + 1;
  *v14 = bswap64(v15);
  v16 = v14 + 1;
  v17 = *(unint64_t **)(a1 + 152);
  v18 = *(unint64_t **)(a1 + 160);
  while (v17 != v18)
  {
    v19 = *v17++;
    *v16++ = bswap64(v19);
  }
  bzero(v16, (size_t)v53 + v10 - (_QWORD)v16);
  sub_1000CE97C(a1 + 2080);
  sub_1000CEA24(a1 + 280);
  v20 = sub_1000CE4D4(a1, a2);
  if (!(_DWORD)v20)
  {
    v22 = (uint64_t)v53;
    v23 = (std::__shared_weak_count *)*((_QWORD *)sub_1001207C0() + 1);
    v47 = (uint64_t (**)())v22;
    v48 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    v49 = v10;
    v50 = a3;
    v51 = v10;
    v52 = 0;
    v26 = (*(uint64_t (**)(_QWORD, uint64_t (***)()))(**(_QWORD **)(a2 + 16) + 80))(*(_QWORD *)(a2 + 16), &v47);
    if (v10 == v26)
    {
      v27 = (unint64_t **)(*((_QWORD *)&v44 + 1) + 8 * ((unint64_t)v46 >> 9));
      if ((_QWORD)v45 == *((_QWORD *)&v44 + 1))
      {
        v28 = 0;
        v30 = 0;
        v29 = (char *)(*((_QWORD *)&v44 + 1) + 8 * ((*((_QWORD *)&v46 + 1) + (_QWORD)v46) >> 9));
      }
      else
      {
        v28 = &(*v27)[v46 & 0x1FF];
        v29 = (char *)(*((_QWORD *)&v44 + 1) + 8 * ((*((_QWORD *)&v46 + 1) + (_QWORD)v46) >> 9));
        v30 = (unint64_t *)(*(_QWORD *)v29 + 8 * ((*((_QWORD *)&v46 + 1) + v46) & 0x1FF));
      }
      sub_1000C84C8((unint64_t *)a1, v27, v28, v29, v30, a2);
      v20 = 1;
    }
    else
    {
      *(_QWORD *)(a1 + 3608) = v15;
      std::mutex::lock(v6);
      v31 = *(_QWORD *)(a1 + 3776) + *(_QWORD *)(a1 + 3784);
      v32 = *(_QWORD *)(a1 + 3752);
      v33 = (char *)(v32 + 8 * (v31 >> 9));
      if (*(_QWORD *)(a1 + 3760) == v32)
        v34 = 0;
      else
        v34 = *(_QWORD *)v33 + 8 * (v31 & 0x1FF);
      v35 = (char *)(*((_QWORD *)&v44 + 1) + 8 * ((unint64_t)v46 >> 9));
      if ((_QWORD)v45 == *((_QWORD *)&v44 + 1))
      {
        v36 = 0;
        v38 = 0;
        v37 = (char *)(*((_QWORD *)&v44 + 1) + 8 * ((*((_QWORD *)&v46 + 1) + (_QWORD)v46) >> 9));
      }
      else
      {
        v36 = (char *)(*(_QWORD *)v35 + 8 * (v46 & 0x1FF));
        v37 = (char *)(*((_QWORD *)&v44 + 1) + 8 * ((*((_QWORD *)&v46 + 1) + (_QWORD)v46) >> 9));
        v38 = (char *)(*(_QWORD *)v37 + 8 * ((*((_QWORD *)&v46 + 1) + v46) & 0x1FF));
      }
      sub_1000C8494((void **)(a1 + 3744), v33, v34, v35, v36, v37, v38);
      if (v26 >= 0)
        v20 = 4294967291;
      else
        v20 = v26;
      std::mutex::unlock(v6);
    }
    v39 = v48;
    if (v48)
    {
      v40 = (unint64_t *)&v48->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
  sub_100017CC8((uint64_t *)&v53);
  sub_1000C2854(&v44);
  return v20;
}

void sub_1000CE928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::mutex *v21;

  std::mutex::unlock(v21);
  sub_100012168((uint64_t)&a15);
  sub_100017CC8(&a21);
  sub_1000C2854(&a9);
  _Unwind_Resume(a1);
}

void sub_1000CE97C(uint64_t a1)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v7;
  std::unique_lock<std::mutex> v8;

  if (atomic_load((unint64_t *)(a1 + 608)))
  {
    v3 = (unint64_t *)(a1 + 616);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v8.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 624);
    v8.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 624));
    while (atomic_load((unint64_t *)(a1 + 608)))
      std::condition_variable::wait((std::condition_variable *)(a1 + 688), &v8);
    do
      v7 = __ldaxr(v3);
    while (__stlxr(v7 - 1, v3));
    if (v8.__owns_)
      std::mutex::unlock(v8.__m_);
  }
}

void sub_1000CEA24(uint64_t a1)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v7;
  std::unique_lock<std::mutex> v8;

  if (atomic_load((unint64_t *)(a1 + 784)))
  {
    v3 = (unint64_t *)(a1 + 792);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v8.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 800);
    v8.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 800));
    while (atomic_load((unint64_t *)(a1 + 784)))
      std::condition_variable::wait((std::condition_variable *)(a1 + 864), &v8);
    do
      v7 = __ldaxr(v3);
    while (__stlxr(v7 - 1, v3));
    if (v8.__owns_)
      std::mutex::unlock(v8.__m_);
  }
}

uint64_t sub_1000CEACC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  size_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v48;
  std::__shared_weak_count *v49;
  size_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  _OWORD v58[2];
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  uint64_t v67;
  char v68;

  v8 = *(_QWORD *)(a4 + 144) - a3[18];
  v9 = a3[3];
  v10 = (std::__shared_weak_count *)a3[1];
  v56 = *a3;
  v57 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v58[0] = *((_OWORD *)a3 + 1);
  v13 = v8 & ~(v8 >> 63);
  *(_OWORD *)((char *)v58 + 9) = *(_OWORD *)((char *)a3 + 25);
  v59 = a3[6];
  v60 = *(_OWORD *)(a3 + 7);
  v61 = *(_OWORD *)(a3 + 9);
  v62 = *(_OWORD *)(a3 + 11);
  v63 = *((_BYTE *)a3 + 104);
  v14 = (std::__shared_weak_count *)a3[15];
  v64 = a3[14];
  v65 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = 0;
  v66 = *((_OWORD *)a3 + 8);
  v67 = a3[18];
  v68 = *((_BYTE *)a3 + 152);
  v18 = a5 ^ 1;
  while (1)
  {
    v19 = v9 / *(_QWORD *)(a1 + 80);
    sub_1000C5400(a1, a2, v19, v18, 1, &v55);
    if (v55 && *(_BYTE *)(v55 + 520))
    {
      if ((a5 & 1) == 0)
        sub_1000A1868(a2);
      v20 = 1;
      v5 = -5;
      goto LABEL_38;
    }
    sub_10002E2B8((uint64_t)&v56, *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 80) * v19, a4, 0, (uint64_t)&v48);
    if (!v55 || *(_BYTE *)(v55 + 520))
    {
      v21 = 0;
      do
      {
        v22 = v50;
        bzero(v48, v50);
        sub_10002D7D4((uint64_t)&v48, v22);
        v21 += v22;
      }
      while (!sub_10002C4A4((uint64_t)&v48, (uint64_t)&v52));
      goto LABEL_17;
    }
    if (a5)
    {
      if (*(_BYTE *)(v55 + 400))
        v35 = v55 + 40;
      else
        v35 = 0;
      v37 = sub_1000CA5C4(v35, a2, (uint64_t *)&v48, (uint64_t)&v52);
      v5 = v37;
      if ((v37 & 0x8000000000000000) == 0 || !(_DWORD)v37)
        goto LABEL_55;
    }
    else
    {
      if (*(_BYTE *)(v55 + 400))
        v36 = v55 + 40;
      else
        v36 = 0;
      v38 = sub_1000C861C(v36, a2, (uint64_t *)&v48, (uint64_t)&v52);
      v5 = v38;
      if ((v38 & 0x8000000000000000) == 0 || !(_DWORD)v38)
      {
LABEL_55:
        v21 = v5;
LABEL_17:
        sub_10002D5FC((uint64_t)&v56, v21);
        v20 = 0;
        v9 += v21;
        v17 += v21;
        goto LABEL_18;
      }
      sub_1000A1868(a2);
    }
    v20 = 1;
LABEL_18:
    v23 = v54;
    if (v54)
    {
      v24 = (unint64_t *)&v54->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v53;
    if (v53)
    {
      v27 = (unint64_t *)&v53->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v51;
    if (v51)
    {
      v30 = (unint64_t *)&v51->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v49;
    if (v49)
    {
      v33 = (unint64_t *)&v49->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
LABEL_38:
    sub_1000C1E4C(&v55);
    if (v20)
      break;
    if (v17 == v13)
      goto LABEL_57;
  }
  v13 = v5;
LABEL_57:
  v39 = v65;
  if (v65)
  {
    v40 = (unint64_t *)&v65->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v57;
  if (v57)
  {
    v43 = (unint64_t *)&v57->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  return v13;
}

void sub_1000CEEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  sub_1000C1E4C((unint64_t *)(v10 - 256));
  sub_100012168(a10);
  sub_100012168(v10 - 248);
  _Unwind_Resume(a1);
}

double sub_1000CEF2C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  double result;
  void *exception;
  void *v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[2];
  char v11;

  v3 = (*(_BYTE *)(a1 + 32) & 1) + *(_QWORD *)(a1 + 24);
  v10[0] = *(_QWORD *)(a1 + 40);
  v10[1] = v3;
  v11 = 2;
  *(_QWORD *)&v8 = qword_1001A05E0;
  *((_QWORD *)&v8 + 1) = qword_1001A05E0;
  LOBYTE(v9) = 2;
  v4 = sub_1000CEFDC(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 56), v10, (uint64_t)&v8);
  if (v4 >= 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v7 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Can't convert ASIF flag.", 5u);
  }
  result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v4;
  return result;
}

unint64_t sub_1000CEFDC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *exception;
  const std::error_category *v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  unsigned __int8 v33;

  v7 = 0;
  *(_QWORD *)&v32 = *a3;
  *((_QWORD *)&v32 + 1) = v32;
  v29 = qword_1001A05E0;
  v30 = qword_1001A05E0;
  v33 = 2;
  v31 = 2;
  v27 = *(_OWORD *)a3;
  v28 = a3[2];
  do
  {
    if ((_BYTE)v28)
    {
      if (v28 == 3)
      {
        v9 = *((_QWORD *)&v27 + 1);
        v8 = v27;
        if (*((_QWORD *)&v27 + 1) < (unint64_t)v27)
          goto LABEL_5;
      }
      else
      {
        v9 = *((_QWORD *)&v27 + 1);
        v8 = v27;
        if ((unint64_t)v27 >= *((_QWORD *)&v27 + 1))
          goto LABEL_5;
      }
    }
    else
    {
      v9 = *((_QWORD *)&v27 + 1);
      v8 = v27;
      if ((unint64_t)v27 >= *((_QWORD *)&v27 + 1) || (unint64_t)(v27 + 1) >= *((_QWORD *)&v27 + 1))
      {
LABEL_5:
        if (!qword_1001A05E0)
          break;
        goto LABEL_12;
      }
    }
    if (!((v28 & 1) + ((v28 >> 1) & 1) - 1 - v8 + v9))
      break;
LABEL_12:
    if ((v28 & 2) != 0)
      v11 = v8;
    else
      v11 = v8 + 1;
    v12 = v11 * *(unsigned __int16 *)(a1 + 18);
    sub_1000C5400(a1, a2, v12 / *(_QWORD *)(a1 + 80), 0, 1, &v26);
    if (v26 && *(_BYTE *)(v26 + 520))
    {
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_1001924F8;
      v21 = std::generic_category();
      exception[1] = 4294967291;
      exception[2] = v21;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "Can't load table to get extents";
    }
    if (v26 && !*(_BYTE *)(v26 + 520))
    {
      if (*(_BYTE *)(v26 + 400))
        v15 = v26 + 40;
      else
        v15 = 0;
      v13 = sub_1000CF2C0(v15, a2, (uint64_t)&v27, (uint64_t)&v29);
    }
    else
    {
      v13 = 0;
      v14 = (*(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 80) * (v12 / *(_QWORD *)(a1 + 80)) + 1)
          / *(unsigned __int16 *)(a1 + 18);
      if (v14 >= v9)
        v14 = v9;
      v29 = v11;
      v30 = v14;
      v31 = 2;
    }
    if ((_DWORD)v13 == (_DWORD)v7)
    {
LABEL_36:
      *((_QWORD *)&v32 + 1) = v30;
      v33 = 2;
      v22 = v27;
      v23 = v28;
      sub_1000B3070((uint64_t)&v22, (uint64_t)&v32, (uint64_t)&v24);
      v27 = v24;
      LOBYTE(v28) = v25;
      v18 = 1;
      v7 = v13;
      goto LABEL_40;
    }
    if (v33)
    {
      if (v33 == 3)
      {
        v16 = *((_QWORD *)&v32 + 1);
        v17 = v32;
        if (*((_QWORD *)&v32 + 1) >= (unint64_t)v32)
          goto LABEL_35;
      }
      else
      {
        v16 = *((_QWORD *)&v32 + 1);
        v17 = v32;
        if ((unint64_t)v32 < *((_QWORD *)&v32 + 1))
          goto LABEL_35;
      }
    }
    else
    {
      v16 = *((_QWORD *)&v32 + 1);
      v17 = v32;
      if ((unint64_t)v32 < *((_QWORD *)&v32 + 1) && (unint64_t)(v32 + 1) < *((_QWORD *)&v32 + 1))
      {
LABEL_35:
        if (!((v33 & 1) + (uint64_t)(((v33 >> 1) & 1) - 1) - v17 + v16))
          goto LABEL_36;
        goto LABEL_39;
      }
    }
    if (!qword_1001A05E0)
      goto LABEL_36;
LABEL_39:
    v18 = 0;
LABEL_40:
    sub_1000C1E4C(&v26);
  }
  while ((v18 & 1) != 0);
  *(_OWORD *)a4 = v32;
  *(_BYTE *)(a4 + 16) = v33;
  return v7;
}

void sub_1000CF29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_1000C1E4C((unint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1000CF2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *exception;
  const std::error_category *v43;
  _QWORD *v44;
  const std::error_category *v45;
  unint64_t v49;
  unint64_t v50;
  _QWORD v51[2];
  char v52;
  _BYTE v53[7];
  unint64_t v54;
  __int128 v55;
  int v56;
  unint64_t v57[2];
  unsigned __int8 v58;
  _QWORD v59[20];
  _QWORD v60[2];
  BOOL v61;
  _QWORD *v62;
  uint64_t v63;
  _DWORD v64[4];

  v5 = *(_QWORD *)a3;
  v6 = *(_QWORD *)(a3 + 8);
  v7 = *(unsigned __int8 *)(a3 + 16);
  v64[0] = *(_DWORD *)(a3 + 17);
  *(_DWORD *)((char *)v64 + 3) = *(_DWORD *)(a3 + 20);
  if ((v7 & 2) != 0)
    v8 = v5;
  else
    v8 = v5 + 1;
  v9 = (_QWORD *)sub_1000C2F74(a1, v8 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18));
  v11 = atomic_load((unint64_t *)(v9[7] + 16 * v10 + 8));
  v49 = v11 >> 62;
  if (v11 >> 62 == 3)
  {
    v12 = v9[1];
    sub_1000C3A80(a1, a2, (v9[44]+ (*(_QWORD *)(v12 + 48) + *(_QWORD *)(v12 + 48) * v10)/ (unint64_t)(*(_QWORD *)(v12 + 48) + 1)* *(unsigned int *)(v12 + 20))/ *(unsigned __int16 *)(v12 + 18), 0, 1, v57);
    v13 = *(_QWORD *)(a1 + 8);
    if (v57[0])
    {
      if (*(_BYTE *)(v57[0] + 224))
        v15 = v57[0] + 40;
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    v14 = *(unsigned __int16 *)(v13 + 18);
    v49 = sub_1000C3D50(v15, 2* ((v8 * v14- (*(_QWORD *)(a1 + 352)+ *(_QWORD *)(v13 + 48)* *(unsigned int *)(v13 + 20)* ((v8 * v14 / v14 - *(_QWORD *)(a1 + 352) / v14)/ (*(_QWORD *)(v13 + 48)* (unint64_t)(*(_DWORD *)(v13 + 20) / v14)))))/ v14));
    sub_1000C29D8(v57);
  }
  v16 = 0;
  while (1)
  {
    if ((_BYTE)v7)
    {
      if (v7 == 3)
      {
        if (v6 >= v5)
          goto LABEL_18;
      }
      else if (v6 > v5)
      {
        goto LABEL_18;
      }
    }
    else if (v6 > v5 && v5 + 1 < v6)
    {
LABEL_18:
      if (!(v6 - v5 + (v7 & 1) + (int)(((v7 >> 1) & 1) - 1)))
        goto LABEL_42;
      goto LABEL_22;
    }
    if (!qword_1001A05E0)
      goto LABEL_42;
LABEL_22:
    if ((v7 & 2) != 0)
      v17 = v5;
    else
      v17 = v5 + 1;
    v18 = *(_QWORD *)(a1 + 8);
    v19 = v17 * *(unsigned __int16 *)(v18 + 18);
    if (v19 >= *(_QWORD *)(v18 + 80) + *(_QWORD *)(a1 + 352))
      goto LABEL_42;
    v20 = (_QWORD *)sub_1000C2F74(a1, v19);
    v22 = v20;
    v23 = v21;
    v62 = v20;
    v63 = v21;
    v24 = v7;
    v50 = v6;
    v25 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18);
    v26 = v20[1];
    v27 = (*(_QWORD *)(v26 + 48) + *(_QWORD *)(v26 + 48) * v21) / (unint64_t)(*(_QWORD *)(v26 + 48) + 1);
    v28 = *(unsigned int *)(v26 + 20);
    if (v20[44] + v28 + v27 * v28 >= v25 + v25 * (v6 + (int)((v7 & 1) - 1)))
      v29 = v25 + v25 * (v6 + (int)((v7 & 1) - 1));
    else
      v29 = v20[44] + v28 + v27 * v28;
    v30 = (unint64_t *)(v20[7] + 16 * v21);
    v31 = sub_1000DDFC4(v30);
    v60[0] = off_100191EF8;
    v60[1] = v30;
    v61 = v31;
    if (!v31)
    {
      *(_QWORD *)&v55 = "di_asif::details::table::get_next_extent(ContextASIF &, const interval_sectors &, interval_sectors &)";
      *((_QWORD *)&v55 + 1) = 40;
      v56 = 16;
      sub_1000CF880(v57, &v55);
      sub_100005A0C(v59, (uint64_t)"Couldn't lock entry ", 20);
      sub_1000C68F4(v59, &v62);
      sub_1000CF928((uint64_t)v57);
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_1001924F8;
      v43 = std::generic_category();
      exception[1] = 5;
      exception[2] = v43;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "Can't lock entry";
    }
    v32 = atomic_load((unint64_t *)(v22[7] + 16 * v23 + 8));
    v33 = v32 >> 62;
    if ((_DWORD)v49 == (_DWORD)v33)
    {
      v34 = *(_QWORD *)(a1 + 8);
      v16 = v29 / *(unsigned __int16 *)(v34 + 18);
      goto LABEL_40;
    }
    if ((_DWORD)v33 != 3)
      break;
    v35 = v62[1];
    sub_1000C3A80(a1, a2, (v62[44]+ (*(_QWORD *)(v35 + 48) + *(_QWORD *)(v35 + 48) * v63)/ (unint64_t)(*(_QWORD *)(v35 + 48) + 1)* *(unsigned int *)(v35 + 20))/ *(unsigned __int16 *)(v35 + 18), 0, 1, &v54);
    if (!v54 || *(_BYTE *)(v54 + 344))
    {
      *(_QWORD *)&v55 = "di_asif::details::table::get_next_extent(ContextASIF &, const interval_sectors &, interval_sectors &)";
      *((_QWORD *)&v55 + 1) = 40;
      v56 = 16;
      sub_1000CF968(v57, &v55);
      sub_100005A0C(v59, (uint64_t)"Can't read bitmap", 17);
      sub_1000CFA10((uint64_t)v57);
      v44 = __cxa_allocate_exception(0x40uLL);
      *v44 = &off_1001924F8;
      v45 = std::generic_category();
      v44[1] = 5;
      v44[2] = v45;
      *((_BYTE *)v44 + 24) = 0;
      *((_BYTE *)v44 + 48) = 0;
      v44[7] = "Can't read bitmap";
    }
    v36 = *(_BYTE *)(v54 + 224) ? (_QWORD *)(v54 + 40) : 0;
    v37 = sub_1000CD2E8(v36, a1, v49, v19, v29, 0);
    v38 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18);
    sub_1000C29D8(&v54);
    v16 = v37 / v38;
    if (v37 < v29)
      break;
    v34 = *(_QWORD *)(a1 + 8);
LABEL_40:
    v51[0] = v5;
    v51[1] = v50;
    v52 = v24;
    *(_DWORD *)v53 = v64[0];
    *(_DWORD *)&v53[3] = *(_DWORD *)((char *)v64 + 3);
    v39 = v29 / *(unsigned __int16 *)(v34 + 18);
    *(_QWORD *)&v55 = v17;
    *((_QWORD *)&v55 + 1) = v39;
    LOBYTE(v56) = 2;
    sub_1000B3070((uint64_t)v51, (uint64_t)&v55, (uint64_t)v57);
    v5 = v57[0];
    v6 = v57[1];
    v7 = v58;
    sub_10011E3D8(v60);
  }
  sub_10011E3D8(v60);
LABEL_42:
  v40 = *(_QWORD *)a3;
  if ((*(_BYTE *)(a3 + 16) & 2) == 0)
    ++v40;
  *(_QWORD *)a4 = v40;
  *(_QWORD *)(a4 + 8) = v16;
  *(_BYTE *)(a4 + 16) = 2;
  return v49;
}

void sub_1000CF80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_1000C29D8((unint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000CF880(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000E82D4((uint64_t)a1, a2);
  *a1 = off_10018A0E8;
  a1[45] = &off_10018A1E8;
  a1[46] = &off_10018A210;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018A0E8;
  a1[45] = off_10018A170;
  a1[46] = off_10018A198;
  return a1;
}

void sub_1000CF904(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000DF454(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CF928(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018A1B0);
  sub_1000DF454(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000CF968(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000E8350((uint64_t)a1, a2);
  *a1 = off_10018A308;
  a1[45] = &off_10018A408;
  a1[46] = &off_10018A430;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018A308;
  a1[45] = off_10018A390;
  a1[46] = off_10018A3B8;
  return a1;
}

void sub_1000CF9EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000DFA40(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CFA10(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018A3D0);
  sub_1000DFA40(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000CFA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  sub_1000C63C0(a1, a3, a4, (uint64_t)&v32);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 184);
  while (v32 != v40 || v33 != v41 || v34 != v42 || v34 != v32 + 16 * v33 && (v37 != v43 || v38 != v44 || v39 != v45))
  {
    v10 = v35 * *(unsigned __int16 *)(a1 + 18);
    sub_1000C5400(a1, a2, v10 / *(_QWORD *)(a1 + 80), v9 == 0, 1, &v31);
    if (v31 && !*(_BYTE *)(v31 + 520))
    {
      if (*(_BYTE *)(v31 + 400))
        v15 = v31 + 40;
      else
        v15 = 0;
      sub_1000C69B8(v15, a2, a3, a4, &v18);
      v34 = v19;
      v37 = v22;
      if (v33 != (v19 - v32) >> 4)
      {
        v35 = sub_1000C2CEC(&v32);
        v36 = v16;
      }
      v12 = 0;
      goto LABEL_37;
    }
    if (v31)
    {
      if (*(_BYTE *)(v31 + 520))
        v11 = 4294967291;
      else
        v11 = 0;
      if (!(*(unsigned __int8 *)(v31 + 520) | v9))
      {
LABEL_19:
        sub_1000C4C20(a3, a4, *(unsigned int *)(a1 + 20), *(unsigned __int16 *)(a1 + 18), v10 / *(_QWORD *)(a1 + 80) * *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 80) + v10 / *(_QWORD *)(a1 + 80) * *(_QWORD *)(a1 + 80), (uint64_t)&v18);
        while ((_QWORD)v18 != v25
             || *((_QWORD *)&v18 + 1) != v26
             || v19 != v27
             || v19 != (_QWORD)v18 + 16 * *((_QWORD *)&v18 + 1) && (v22 != v28 || v23 != v29 || v24 != v30))
        {
          v22 += v24 * v21;
          v20 = sub_1000C2CEC((uint64_t *)&v18);
          v21 = v13;
        }
        v34 = v19;
        v37 = v22;
        if (v33 != (v19 - v32) >> 4)
        {
          v35 = sub_1000C2CEC(&v32);
          v36 = v14;
        }
        v12 = 2;
        goto LABEL_37;
      }
      v12 = 1;
      v4 = v11;
    }
    else
    {
      if (!v9)
        goto LABEL_19;
      v4 = 0;
      v12 = 1;
    }
LABEL_37:
    sub_1000C1E4C(&v31);
    if ((v12 | 2) != 2)
      return v4;
  }
  return 0;
}

uint64_t sub_1000CFD40(uint64_t a1, uint64_t a2, uint64_t (***a3)())
{
  std::mutex *v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  unint64_t v18;

  v6 = (std::mutex *)(a1 + 3528);
  std::mutex::lock((std::mutex *)(a1 + 3528));
  sub_1000CE97C(a1 + 2080);
  sub_1000CEA24(a1 + 280);
  v7 = (unsigned int *)(a1 + 3592);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(0, v7));
  v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16), 0);
  if (v9)
    goto LABEL_4;
  v10 = sub_1000CE4D4(a1, a2);
  if ((_DWORD)v10)
  {
LABEL_10:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v13 = *(unint64_t **)(a1 + 128);
  v14 = *(unint64_t **)(a1 + 136);
  if (v13 == v14)
  {
    v10 = 0;
    if (v8)
      goto LABEL_24;
LABEL_27:
    if (*(uint64_t (****)())(a1 + 3600) == a3)
    {
LABEL_29:
      if (!v8 && (v10 & 0x80000000) == 0)
      {
        v10 = 0;
        goto LABEL_8;
      }
      goto LABEL_10;
    }
LABEL_28:
    v10 = sub_1000CE590(a1, a2, a3);
    goto LABEL_29;
  }
  v10 = 0;
  v15 = 0;
  do
  {
    sub_1000CE264(v13, v15 / *(_QWORD *)(a1 + 80), &v18);
    if (v18 && !*(_BYTE *)(v18 + 520))
    {
      if (*(_BYTE *)(v18 + 400))
        v16 = v18 + 40;
      else
        v16 = 0;
      v17 = sub_1000C7614(v16, a2);
      if (v8)
        v8 = 1;
      else
        v8 = v17;
    }
    v15 += *(_QWORD *)(a1 + 80);
    sub_1000C1E4C(&v18);
    ++v13;
  }
  while (v13 != v14);
  if (!v8)
    goto LABEL_27;
LABEL_24:
  v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16), 0);
  if (!v9)
    goto LABEL_28;
LABEL_4:
  if (v9 < 0)
    v10 = v9;
  else
    v10 = -v9;
  do
LABEL_7:
    v11 = __ldaxr(v7);
  while (__stlxr(v11 | v8, v7));
LABEL_8:
  std::mutex::unlock(v6);
  return v10;
}

void sub_1000CFF44()
{
  JUMPOUT(0x1000CFF54);
}

void sub_1000CFF64(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[4];

  v13 = (_QWORD *)sub_1000D061C(a1, a2, a4, a5);
  *v13 = off_100187760;
  v13[11] = off_10018B660;
  v13[12] = v13;
  v13[14] = v13 + 11;
  v13[15] = a3;
  sub_1000DFE38(v13 + 16, (unint64_t)(*(_QWORD *)(a1 + 80) + a3 - 1) / *(_QWORD *)(a1 + 80));
  sub_1000DFEAC((_QWORD *)(a1 + 152), (unint64_t)(*(_QWORD *)(a1 + 80) + a3 - 1) / *(_QWORD *)(a1 + 80));
  *(_QWORD *)(a1 + 176) = a4;
  v14 = (a4
       - 1
       + (a5 - 1 + (unint64_t)a6) / a5 * a5
       + (a5 + 7 + 8 * ((unint64_t)(*(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 80) - 1) / *(_QWORD *)(a1 + 80)))
       / a5
       * a5
       * a7)
      / a4;
  *(_QWORD *)(a1 + 184) = 850045863;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = v14 * a4;
  v15[3] = 0;
  sub_1000E83CC(a1 + 280, 2, 0, (uint64_t)v15);
}

void sub_1000D0474(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::condition_variable *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::thread *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::__thread_struct **v29;

  sub_1000EA640(v29, 0);
  operator delete();
}

void sub_1000D0614()
{
  JUMPOUT(0x1000D05A0);
}

uint64_t sub_1000D061C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *(_QWORD *)a1 = off_10018A520;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 18) = a4;
  *(_DWORD *)(a1 + 20) = a3;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3 >> 3;
  v5 = a3 / a4;
  v6 = 4 * a3;
  if (v6 < v5)
    v7 = 1;
  else
    v7 = v6 / v5;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v7;
  v8 = sub_1000C2C94(a1);
  v9 = (*(_QWORD *)(a1 + 48) + v8) / (unint64_t)(*(_QWORD *)(a1 + 48) + 1);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  v10 = v8 - v9;
  v11 = v10 * *(unsigned int *)(a1 + 20);
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v11;
  return a1;
}

unint64_t sub_1000D069C(uint64_t a1, uint64_t (***a2)(), unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  size_t v9;
  unint64_t *v10;
  uint64_t (***v11)();
  uint64_t v12;
  unint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::bad_alloc *exception;
  std::bad_alloc *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  const std::error_category *v30;
  uint64_t (**v31)();
  std::__shared_weak_count *v32;
  size_t v33;
  uint64_t (***v34)();
  size_t v35;
  char v36;
  unint64_t *v37;
  uint64_t v38;

  v6 = a4;
  v9 = (a3 + 8 * a4 + 7) / a3 * a3;
  v10 = (unint64_t *)malloc_type_valloc(v9, 0xF8ED6DDuLL);
  if (!v10)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v26 = std::bad_alloc::bad_alloc(exception);
  }
  v31 = off_1001882A0;
  v34 = &v31;
  v37 = v10;
  sub_1000181E0((uint64_t)&v38, (uint64_t)&v31);
  v11 = v34;
  if (v34 == &v31)
  {
    v12 = 4;
    v11 = &v31;
  }
  else
  {
    if (!v34)
      goto LABEL_7;
    v12 = 5;
  }
  (*v11)[v12]();
LABEL_7:
  v13 = v37;
  v14 = (std::__shared_weak_count *)*((_QWORD *)sub_1001207C0() + 1);
  v31 = (uint64_t (**)())v13;
  v32 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v33 = v9;
  v34 = a2;
  v35 = v9;
  v36 = 0;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)a1 + 88))(a1, &v31);
  if (v9 != v17)
  {
    v27 = __cxa_allocate_exception(0x40uLL);
    v28 = v27;
    if (v17 >= 0)
      v29 = 4294967291;
    else
      v29 = v17;
    *v27 = &off_1001924F8;
    v30 = std::generic_category();
    v28[1] = v29;
    v28[2] = v30;
    *((_BYTE *)v28 + 24) = 0;
    *((_BYTE *)v28 + 48) = 0;
    v28[7] = "Can't load asif dir table";
  }
  v18 = *v13;
  if (v6)
  {
    v19 = v13 + 1;
    do
    {
      v20 = *v19++;
      *a5++ = bswap64(v20);
      --v6;
    }
    while (v6);
  }
  v21 = v32;
  if (v32)
  {
    v22 = (unint64_t *)&v32->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  sub_100017CC8((uint64_t *)&v37);
  return bswap64(v18);
}

void sub_1000D08B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100017CC8((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1000D08D8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *exception;
  _QWORD *v13;
  const std::error_category *v14;
  unint64_t *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;

  v4 = (std::__shared_weak_count *)*((_QWORD *)sub_1001207C0() + 1);
  v15 = &v21;
  v16 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = 0;
  v17 = 8;
  v18 = a2;
  v19 = 8;
  v20 = 0;
  LODWORD(a1) = (*(uint64_t (**)(uint64_t, unint64_t **))(*(_QWORD *)a1 + 88))(a1, &v15);
  if ((_DWORD)a1 != 8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v13 = exception;
    if ((int)a1 >= 0)
      a1 = 4294967291;
    else
      a1 = a1;
    *exception = &off_1001924F8;
    v14 = std::generic_category();
    v13[1] = a1;
    v13[2] = v14;
    *((_BYTE *)v13 + 24) = 0;
    *((_BYTE *)v13 + 48) = 0;
    v13[7] = "Can't load asif dir version";
  }
  v7 = bswap64(v21);
  v21 = v7;
  v8 = v16;
  if (v16)
  {
    v9 = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v7;
}

void sub_1000D0A00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100012168((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000D0A14(_QWORD *result, _DWORD *a2)
{
  const char *v2;
  uint64_t v3;

  switch(*a2)
  {
    case 0:
      v2 = "uninit";
      v3 = 6;
      goto LABEL_3;
    case 1:
      v2 = "fully";
      v3 = 5;
      goto LABEL_3;
    case 2:
      v2 = "unmapped";
      v3 = 8;
      goto LABEL_3;
    case 3:
      v2 = "has_bitmap";
      v3 = 10;
LABEL_3:
      result = sub_100005A0C(result, (uint64_t)v2, v3);
      break;
    default:
      return result;
  }
  return result;
}

void sub_1000D0A7C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * (a2 / *(_QWORD *)(a1 + 80))) = a3 / *(unsigned int *)(a1 + 20);
  atomic_store(1u, (unsigned int *)(a1 + 3592));
}

_QWORD *sub_1000D0AA4(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;

  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v6[0] = off_100187BC0;
  v6[1] = a2;
  v7 = v6;
  sub_1000D0B84(v3, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_1000D0B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1000D0B84(_QWORD *a1, uint64_t a2)
{
  char v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  _QWORD v22[45];
  uint64_t v23;
  uint64_t v24;

  if (a1[11])
  {
    v4 = 0;
    v5 = (uint64_t **)(a1 + 9);
    v6 = (uint64_t **)(a1 + 10);
    while (1)
    {
      v7 = *v6;
      v8 = *v6;
      v9 = v6;
      if (*v6)
      {
        do
        {
          v10 = (uint64_t **)v8;
          v8 = (uint64_t *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v10 = (uint64_t **)v9[2];
          v11 = *v10 == (uint64_t *)v9;
          v9 = v10;
        }
        while (v11);
      }
      v12 = (uint64_t)v10[4] + *a1;
      v13 = a1[12];
      if (v12 != v13)
        break;
      v14 = (uint64_t *)v6;
      if (v7)
      {
        do
        {
          v15 = v7;
          v7 = (uint64_t *)v7[1];
        }
        while (v7);
      }
      else
      {
        do
        {
          v15 = (uint64_t *)v14[2];
          v11 = *v15 == (_QWORD)v14;
          v14 = v15;
        }
        while (v11);
      }
      sub_100040DA8(v5, v15);
      operator delete(v15);
      v16 = a1[11];
      v13 = a1[12] - *a1;
      a1[12] = v13;
      v4 = 1;
      if (!v16)
        goto LABEL_15;
    }
    if ((v4 & 1) == 0)
      return;
LABEL_15:
    v17 = *(_QWORD *)(a2 + 24);
    if (v17)
    {
      v22[0] = v13;
      v18 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 48))(v17, v22);
      if ((_DWORD)v18)
      {
        v19 = v18;
        *(_QWORD *)&v20 = "space_allocators::FixedSize::trim_largest(const size_changed_fn_t &)";
        *((_QWORD *)&v20 + 1) = 41;
        v21 = 16;
        sub_1000DFF20(v22, &v20);
        sub_100005A0C(&v23, (uint64_t)"trim largest: size change callback failed with ", 47);
        std::ostream::operator<<(&v23, v19);
        std::ostream::~ostream(&v23, off_10018A630);
        sub_1000E0084((uint64_t)v22);
        std::ios::~ios(&v24);
      }
    }
  }
}

void sub_1000D0D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000DFFC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000D0D24(_OWORD *a1, uint64_t a2)
{
  _QWORD *exception;
  uint64_t v4;

  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) > 0x1FF)
    operator new[]();
  exception = __cxa_allocate_exception(0x20uLL);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  *exception = &off_10018A780;
  exception[1] = "asif_header";
  exception[2] = 512;
  exception[3] = v4;
}

void sub_1000D0F28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_WORD *sub_1000D0F64(uint64_t a1, uint64_t a2)
{
  int v4;
  _WORD *result;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  void *v9;
  const char *v10;
  void *exception;
  unsigned int v12;
  void *v13;
  _QWORD v14[33];

  v4 = *(_DWORD *)a2;
  LODWORD(v14[0]) = 2003069043;
  sub_100083628((uint64_t)"header_signature", v4, v14, 1);
  *(_DWORD *)a1 = 2003069043;
  *(_DWORD *)(a1 + 4) = bswap32(*(_DWORD *)(a2 + 4));
  *(_DWORD *)(a1 + 8) = bswap32(*(_DWORD *)(a2 + 8));
  sub_1000E1A84(v14, bswap32(*(_DWORD *)(a2 + 12)));
  *(_DWORD *)(a1 + 12) = v14[0];
  *(_QWORD *)(a1 + 16) = bswap64(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 24) = bswap64(*(_QWORD *)(a2 + 24));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = bswap64(*(_QWORD *)(a2 + 48));
  *(_QWORD *)(a1 + 56) = bswap64(*(_QWORD *)(a2 + 56));
  *(_DWORD *)(a1 + 64) = bswap32(*(_DWORD *)(a2 + 64));
  *(_WORD *)(a1 + 68) = bswap32(*(unsigned __int16 *)(a2 + 68)) >> 16;
  result = sub_1000EA67C(v14, *(unsigned __int16 *)(a2 + 70));
  *(_WORD *)(a1 + 70) = v14[0];
  *(_QWORD *)(a1 + 72) = bswap64(*(_QWORD *)(a2 + 72));
  if (*(_DWORD *)(a1 + 4) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)v14);
    sub_100005A0C(v14, (uint64_t)"Unsupported ASIF version ", 25);
    std::ostream::operator<<(v14, *(unsigned int *)(a1 + 4));
    sub_100012294((uint64_t)exception, (uint64_t)v14, 0xA1u);
  }
  if ((*(_DWORD *)(a1 + 8) - 1048577) <= 0xFFF0004E)
  {
    v9 = __cxa_allocate_exception(0x40uLL);
    v10 = "Invalid ASIF header size";
LABEL_15:
    v12 = 152;
    goto LABEL_19;
  }
  v6 = *(unsigned __int16 *)(a1 + 68);
  if (!*(_WORD *)(a1 + 68))
  {
    v9 = __cxa_allocate_exception(0x40uLL);
    v10 = "Shadow block size is invalid (0)";
    goto LABEL_15;
  }
  v7 = *(_DWORD *)(a1 + 64);
  if (v7 < v6 || v7 % v6)
  {
    v9 = __cxa_allocate_exception(0x40uLL);
    v10 = "ASIF max_write size in header exceed the limit";
LABEL_18:
    v12 = 22;
LABEL_19:
    v13 = (void *)sub_100005410((uint64_t)v9, (uint64_t)v10, v12);
  }
  if ((v6 & 0x1FF) != 0)
  {
    v9 = __cxa_allocate_exception(0x40uLL);
    v10 = "ASIF block size isn't multiple of 512";
    goto LABEL_15;
  }
  v8 = *(_QWORD *)(a1 + 56);
  if (v8 >= 0xFFFFFFFFFFFFFFFFLL / v6)
  {
    v9 = __cxa_allocate_exception(0x40uLL);
    v10 = "Max sector count is too large";
    goto LABEL_18;
  }
  if (v8 < *(_QWORD *)(a1 + 48))
  {
    v9 = __cxa_allocate_exception(0x40uLL);
    v10 = "Sector count is too large";
    goto LABEL_18;
  }
  return result;
}

void sub_1000D11C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10000FE34((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1000D11FC(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  *a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  a1[3] = *(_OWORD *)(a2 + 48);
  a1[4] = v4;
  a1[1] = result;
  a1[2] = v3;
  return result;
}

uint64_t sub_1000D1228(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(a1 + 8));
  *(_DWORD *)(a2 + 12) = bswap32(*(_DWORD *)(a1 + 12));
  *(_QWORD *)(a2 + 16) = bswap64(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(a2 + 24) = bswap64(*(_QWORD *)(a1 + 24));
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = bswap64(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(a2 + 56) = bswap64(*(_QWORD *)(a1 + 56));
  *(_DWORD *)(a2 + 64) = bswap32(*(_DWORD *)(a1 + 64));
  *(_WORD *)(a2 + 68) = bswap32(*(unsigned __int16 *)(a1 + 68)) >> 16;
  *(_WORD *)(a2 + 70) = *(_WORD *)(a1 + 70);
  *(_QWORD *)(a2 + 72) = bswap64(*(_QWORD *)(a1 + 72));
  return a2 + 80;
}

uint64_t sub_1000D12C4(uint64_t a1, _DWORD *a2, _OWORD *a3, unint64_t a4, unint64_t a5, unsigned int a6, unsigned int a7)
{
  unint64_t v14;
  void *exception;
  void *v17;
  int v18;

  *(_DWORD *)a1 = 2003069043;
  v18 = 2003069043;
  sub_100083628((uint64_t)"header_signature", 2003069043, &v18, 1);
  *(_QWORD *)(a1 + 4) = 0x20000000001;
  *(_DWORD *)(a1 + 12) = *a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 64) = a6;
  *(_WORD *)(a1 + 68) = a7;
  sub_1000EA67C((_WORD *)(a1 + 70), 0);
  *(_QWORD *)(a1 + 72) = 0;
  if (!is_mul_ok(a5, a7) || !is_mul_ok(a4, a7) || (v14 = a4 * a7 + 2 * a6, __CFADD__(a4 * a7, 2 * a6)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v17 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"ASIF header calculation overflow", 0x16u);
  }
  if (v14 <= a5 * a7)
    v14 = a5 * a7;
  *(_QWORD *)(a1 + 56) = v14 / a7;
  *(_OWORD *)(a1 + 32) = *a3;
  return a1;
}

void sub_1000D13F0()
{
  operator new[]();
}

void sub_1000D14B0()
{
  operator delete[]();
}

uint64_t sub_1000D14D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v7;
  int v8;
  int v9;

  *(_DWORD *)a1 = 1635018093;
  v7 = 1635018093;
  sub_100083628((uint64_t)"header_signature", 1635018093, &v7, 1);
  *(_DWORD *)(a1 + 4) = 1;
  v8 = 1;
  sub_100083628((uint64_t)"version_t", 1, &v8, 1);
  *(_DWORD *)(a1 + 8) = 512;
  v9 = 512;
  sub_100083628((uint64_t)"header_size_t", 512, &v9, 1);
  *(_QWORD *)(a1 + 12) = a2;
  *(_QWORD *)(a1 + 20) = a3;
  return a1;
}

uint64_t *sub_1000D1588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  int64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::bad_alloc *exception;
  std::bad_alloc *v54;
  _QWORD *v55;
  const std::error_category *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  std::__shared_weak_count *v65;
  uint64_t v66[3];
  uint64_t *v67;
  void *__p;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[72];
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  _DWORD *v78;
  uint64_t v79;

  v8 = malloc_type_valloc(0x200uLL, 0xF8ED6DDuLL);
  if (!v8)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v54 = std::bad_alloc::bad_alloc(exception);
  }
  v66[0] = (uint64_t)off_1001882A0;
  v67 = v66;
  v78 = v8;
  sub_1000181E0((uint64_t)&v79, (uint64_t)v66);
  v9 = v67;
  if (v67 == v66)
  {
    v10 = 4;
    v9 = v66;
  }
  else
  {
    if (!v67)
      goto LABEL_7;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_7:
  v11 = v78;
  *v78 = *(_DWORD *)a1;
  v11[1] = bswap32(*(_DWORD *)(a1 + 4));
  v11[2] = bswap32(*(_DWORD *)(a1 + 8));
  *(_QWORD *)(v11 + 3) = bswap64(*(_QWORD *)(a1 + 12));
  *(_QWORD *)(v11 + 5) = bswap64(*(_QWORD *)(a1 + 20));
  v12 = v78;
  v13 = (char *)v78 - (char *)(v11 + 7) + 512;
  if (v13 >= 1)
    bzero(v11 + 7, v13);
  v14 = *((_QWORD *)sub_1001207C0() + 1);
  *(_QWORD *)&v60 = v12;
  *((_QWORD *)&v60 + 1) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v61 = 512;
  v62 = a4;
  v63 = 512;
  v64 = 0;
  sub_10005ACA8(v66, &v60);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  sub_10002CA7C((uint64_t)v71, (uint64_t)&v60);
  sub_10002C64C((uint64_t)v71, (uint64_t)&v57);
  v20 = sub_1000CEACC(a3, a2, (uint64_t *)&v60, (uint64_t)&v57, 0);
  v21 = v59;
  if (v59)
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v58;
  if (v58)
  {
    v25 = (unint64_t *)&v58->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v65;
  if (v65)
  {
    v28 = (unint64_t *)&v65->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (!*((_QWORD *)&v60 + 1))
    goto LABEL_36;
  v31 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    if ((v20 & 0x8000000000000000) == 0)
      goto LABEL_38;
  }
  else
  {
LABEL_36:
    if ((v20 & 0x8000000000000000) == 0)
      goto LABEL_38;
  }
  v33 = v20;
  if ((_DWORD)v20)
  {
    v55 = __cxa_allocate_exception(0x40uLL);
    *v55 = &off_1001924F8;
    v56 = std::generic_category();
    v55[1] = v33;
    v55[2] = v56;
    *((_BYTE *)v55 + 24) = 0;
    *((_BYTE *)v55 + 48) = 0;
    v55[7] = "Failed to write metadata header";
  }
LABEL_38:
  v34 = v77;
  if (v77)
  {
    v35 = (unint64_t *)&v77->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v76;
  if (v76)
  {
    v38 = (unint64_t *)&v76->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v75;
  if (v75)
  {
    v41 = (unint64_t *)&v75->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v74;
  if (v74)
  {
    v44 = (unint64_t *)&v74->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v73;
  if (v73)
  {
    v47 = (unint64_t *)&v73->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v72;
  if (v72)
  {
    v50 = (unint64_t *)&v72->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v69 && &v70 != __p)
    operator delete(__p);
  sub_100015C2C((uint64_t)v66);
  return sub_100017CC8((uint64_t *)&v78);
}

void sub_1000D1A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  sub_10001382C((uint64_t)&a49);
  sub_100017CC8((uint64_t *)(v49 - 96));
  _Unwind_Resume(a1);
}

uint64_t sub_1000D1ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __n128 v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t i;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v60;
  const std::error_category *v61;
  std::bad_alloc *exception;
  std::bad_alloc *v63;
  _QWORD *v64;
  const std::error_category *v65;
  _QWORD *v66;
  const std::error_category *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  std::__shared_weak_count *v76;
  unint64_t v77;
  uint64_t v78[3];
  uint64_t *v79;
  void *__p;
  uint64_t v81;
  uint64_t v82;
  _BYTE v83[72];
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  _BYTE *v90;
  uint64_t v91;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v8 = malloc_type_valloc(0x200uLL, 0xF8ED6DDuLL);
  if (!v8)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v63 = std::bad_alloc::bad_alloc(exception);
  }
  v78[0] = (uint64_t)off_1001882A0;
  v79 = v78;
  v90 = v8;
  sub_1000181E0((uint64_t)&v91, (uint64_t)v78);
  v9 = v79;
  if (v79 == v78)
  {
    v10 = 4;
    v9 = v78;
  }
  else
  {
    if (!v79)
      goto LABEL_7;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_7:
  v11 = (uint64_t)v90;
  v12 = *((_QWORD *)sub_1001207C0() + 1);
  *(_QWORD *)&v71 = v11;
  *((_QWORD *)&v71 + 1) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v72 = 512;
  v73 = a4;
  v74 = 512;
  v75 = 0;
  sub_10005ACA8(v78, &v71);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18.n128_f64[0] = sub_10002C64C((uint64_t)v83, (uint64_t)&v71);
  v19 = *(_QWORD *)(a3 + 120);
  v20 = v77;
  v21 = v76;
  if (v76)
  {
    p_shared_owners = (unint64_t *)&v76->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v21->__on_zero_shared)(v21, v18);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v24->__on_zero_shared)(v24, v18);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v20 > v19)
  {
    v64 = __cxa_allocate_exception(0x40uLL);
    *v64 = &off_1001924F8;
    v65 = std::generic_category();
    v64[1] = 152;
    v64[2] = v65;
    *((_BYTE *)v64 + 24) = 0;
    *((_BYTE *)v64 + 48) = 0;
    v64[7] = "Metadata offset is invalid";
  }
  sub_10002CA7C((uint64_t)v83, (uint64_t)&v71);
  sub_10002C64C((uint64_t)v83, (uint64_t)&v68);
  v27 = sub_1000CEACC(a3, a2, (uint64_t *)&v71, (uint64_t)&v68, 1);
  v28 = v70;
  if (v70)
  {
    v29 = (unint64_t *)&v70->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v69;
  if (v69)
  {
    v32 = (unint64_t *)&v69->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v76;
  if (v76)
  {
    v35 = (unint64_t *)&v76->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (!*((_QWORD *)&v71 + 1))
    goto LABEL_45;
  v38 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if ((v27 & 0x8000000000000000) == 0)
      goto LABEL_47;
  }
  else
  {
LABEL_45:
    if ((v27 & 0x8000000000000000) == 0)
      goto LABEL_47;
  }
  if ((_DWORD)v27)
  {
    v66 = __cxa_allocate_exception(0x40uLL);
    *v66 = &off_1001924F8;
    v67 = std::generic_category();
    v66[1] = v27;
    v66[2] = v67;
    *((_BYTE *)v66 + 24) = 0;
    *((_BYTE *)v66 + 48) = 0;
    v66[7] = "ASIF meta header failed to read";
  }
LABEL_47:
  sub_1000D2120(a1, (uint64_t)v90, a3);
  for (i = 28; i != 512; ++i)
  {
    if (v90[i])
    {
      v60 = __cxa_allocate_exception(0x40uLL);
      *v60 = &off_1001924F8;
      v61 = std::generic_category();
      v60[1] = 152;
      v60[2] = v61;
      *((_BYTE *)v60 + 24) = 0;
      *((_BYTE *)v60 + 48) = 0;
      v60[7] = "ASIF meta header trailer isn't equal to zero";
    }
  }
  v41 = v89;
  if (v89)
  {
    v42 = (unint64_t *)&v89->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v88;
  if (v88)
  {
    v45 = (unint64_t *)&v88->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v87;
  if (v87)
  {
    v48 = (unint64_t *)&v87->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v86;
  if (v86)
  {
    v51 = (unint64_t *)&v86->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v85;
  if (v85)
  {
    v54 = (unint64_t *)&v85->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v84;
  if (v84)
  {
    v57 = (unint64_t *)&v84->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v81 && &v82 != __p)
    operator delete(__p);
  sub_100015C2C((uint64_t)v78);
  sub_100017CC8((uint64_t *)&v90);
  return a1;
}

void sub_1000D20A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;
  uint64_t v50;

  sub_100012168(v49 + 112);
  sub_100012168((uint64_t)&a9);
  sub_100012168((uint64_t)&a43);
  sub_100012168((uint64_t)&a29);
  sub_10001382C((uint64_t)&a49);
  sub_100017CC8((uint64_t *)(v50 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_1000D2120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  int v8;
  uint64_t result;
  unint64_t v10;
  void *exception;
  const char *v12;
  void *v13;
  int v14;
  int v15;
  int v16;

  v6 = *(_DWORD *)a2;
  v14 = 1635018093;
  sub_100083628((uint64_t)"header_signature", v6, &v14, 1);
  *(_DWORD *)a1 = 1635018093;
  v7 = bswap32(*(_DWORD *)(a2 + 4));
  v15 = 1;
  sub_100083628((uint64_t)"version_t", v7, &v15, 1);
  *(_DWORD *)(a1 + 4) = 1;
  v8 = bswap32(*(_DWORD *)(a2 + 8));
  v16 = 512;
  result = sub_100083628((uint64_t)"header_size_t", v8, &v16, 1);
  *(_DWORD *)(a1 + 8) = 512;
  v10 = bswap64(*(_QWORD *)(a2 + 12));
  *(_QWORD *)(a1 + 12) = v10;
  *(_QWORD *)(a1 + 20) = bswap64(*(_QWORD *)(a2 + 20));
  if (v10 > (unint64_t)*(unsigned int *)(a3 + 20) - 512)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v12 = "ASIF meta header size exceeds its maximum";
    goto LABEL_6;
  }
  if (v10 % *(unsigned __int16 *)(a3 + 18))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v12 = "ASIF meta header data is unaligned";
LABEL_6:
    v13 = (void *)sub_100005410((uint64_t)exception, (uint64_t)v12, 0x98u);
  }
  return result;
}

uint64_t sub_1000D224C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v4;
  _BYTE *v5;

  if (!*(_QWORD *)(*a1 + 72))
    return 0;
  sub_1000D22D4(a1, a2, (uint64_t *)&v4);
  v2 = 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 2);
  if (v4)
  {
    v5 = v4;
    operator delete(v4);
  }
  return v2;
}

uint64_t sub_1000D22D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  const std::error_category *v14;
  unint64_t v15;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = a1[1];
  v15 = *(_QWORD *)(*a1 + 72) * *(unsigned int *)(v6 + 20);
  result = sub_1000E1690(a3, a2, v6, (uint64_t *)&v15);
LABEL_2:
  for (i = result; ; a3[1] = i)
  {
    a3[1] = i;
    if (!*(_QWORD *)(i - 8))
      break;
    v15 = 0;
    v10 = *a1;
    v9 = a1[1];
    v11 = *(_QWORD *)(i - 8) * *(unsigned int *)(v9 + 20);
    v15 = v11;
    v12 = *(unsigned __int16 *)(v9 + 18);
    if (v11 < *(_QWORD *)(v10 + 48) * v12 || *(_QWORD *)(v10 + 56) * v12 <= v11)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_1001924F8;
      v14 = std::generic_category();
      exception[1] = 152;
      exception[2] = v14;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "ASIF: metadata header out of range";
    }
    if (i >= a3[2])
    {
      result = sub_1000E184C(a3, a2, v9, (uint64_t *)&v15);
      goto LABEL_2;
    }
    result = sub_1000D1ABC(i, a2, v9, v11);
    i += 28;
  }
  return result;
}

void sub_1000D2408(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D2438(_QWORD *a1@<X0>, uint64_t a2@<X1>, CFMutableDictionaryRef *a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  int v41;
  CFIndex v42;
  void *v43;
  void **v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t *v47;
  int v48;
  _QWORD *exception;
  const std::error_category *v50;
  std::bad_alloc *v51;
  std::bad_alloc *v52;
  void *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  uint64_t *v57;
  void *values;
  std::__shared_weak_count *v59;
  void **p_values;
  std::__shared_weak_count *v61;
  void *keys;
  const __CFString *v63;
  void *__p;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[72];
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;

  if (!*(_QWORD *)(*a1 + 72))
  {
    keys = CFSTR("internal metadata");
    v63 = CFSTR("user metadata");
    sub_1000FDD8C((CFMutableDictionaryRef *)&v53);
    sub_1000FDD8C((CFMutableDictionaryRef *)&v56);
    values = v53;
    v59 = v56;
    sub_1000FDCF0((const void **)&keys, (const void **)&values, 2, a3);
    sub_100028068((const void **)&v56);
    sub_100028068((const void **)&v53);
    return;
  }
  sub_1000D2C6C(a1, a2, &v56);
  v6 = (uint64_t *)v56;
  v7 = v57;
  if (v56 == (std::__shared_weak_count *)v57)
  {
LABEL_65:
    v41 = 0;
    goto LABEL_66;
  }
  do
  {
    sub_100037C30((uint64_t *)&keys, v6);
    v8 = a1[1];
    sub_10002CA7C((uint64_t)v67, (uint64_t)&values);
    sub_10002C64C((uint64_t)v67, (uint64_t)&v53);
    v9 = sub_1000CEACC(v8, a2, (uint64_t *)&values, (uint64_t)&v53, 1);
    v10 = v55;
    if (v55)
    {
      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v54;
    if (v54)
    {
      v14 = (unint64_t *)&v54->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v61;
    if (v61)
    {
      v17 = (unint64_t *)&v61->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v59;
    if (!v59)
      goto LABEL_22;
    v20 = (unint64_t *)&v59->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if ((v9 & 0x8000000000000000) == 0)
        goto LABEL_24;
    }
    else
    {
LABEL_22:
      if ((v9 & 0x8000000000000000) == 0)
        goto LABEL_24;
    }
    if ((_DWORD)v9)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_1001924F8;
      v50 = std::generic_category();
      exception[1] = v9;
      exception[2] = v50;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "ASIF: failed to deserialize metadata";
    }
LABEL_24:
    v22 = v73;
    if (v73)
    {
      v23 = (unint64_t *)&v73->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v72;
    if (v72)
    {
      v26 = (unint64_t *)&v72->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = v71;
    if (v71)
    {
      v29 = (unint64_t *)&v71->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = v70;
    if (v70)
    {
      v32 = (unint64_t *)&v70->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = v69;
    if (v69)
    {
      v35 = (unint64_t *)&v69->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = v68;
    if (v68)
    {
      v38 = (unint64_t *)&v68->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v65 && &v66 != __p)
      operator delete(__p);
    sub_100015C2C((uint64_t)&keys);
    v6 += 6;
  }
  while (v6 != v7);
  v40 = (uint64_t *)v56;
  if (v56 == (std::__shared_weak_count *)v57)
    goto LABEL_65;
  v41 = 0;
  do
  {
    v41 += *((_DWORD *)v40 + 4);
    v40 += 6;
  }
  while (v40 != v57);
LABEL_66:
  v42 = v41;
  v43 = malloc_type_valloc(v41, 0xF8ED6DDuLL);
  if (!v43)
  {
    v51 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v52 = std::bad_alloc::bad_alloc(v51);
  }
  values = off_1001882A0;
  p_values = &values;
  keys = v43;
  sub_1000181E0((uint64_t)&v63, (uint64_t)&values);
  v44 = p_values;
  if (p_values == &values)
  {
    v45 = 4;
    v44 = &values;
LABEL_72:
    (*((void (**)(void))*v44 + v45))();
  }
  else if (p_values)
  {
    v45 = 5;
    goto LABEL_72;
  }
  v46 = v56;
  v47 = v57;
  if (v56 != (std::__shared_weak_count *)v57)
  {
    v48 = 0;
    do
    {
      memcpy((char *)keys + v48, v46->__vftable, v46->__shared_weak_owners_);
      v48 += LODWORD(v46->__shared_weak_owners_);
      v46 += 2;
    }
    while (v46 != (std::__shared_weak_count *)v47);
  }
  sub_1000FDF2C((UInt8 *)keys, v42, a3);
  sub_100017CC8((uint64_t *)&keys);
  keys = &v56;
  sub_1000E07D0((void ***)&keys);
}

void sub_1000D2958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,const void *a29)
{
  sub_100028068(&a29);
  sub_100028068(&a9);
  _Unwind_Resume(a1);
}

const void **sub_1000D2BA0@<X0>(CFMutableDictionaryRef *a1@<X8>)
{
  void *v3;
  void *v4;
  void *values[2];
  void *keys[2];

  keys[0] = CFSTR("internal metadata");
  keys[1] = CFSTR("user metadata");
  sub_1000FDD8C((CFMutableDictionaryRef *)&v4);
  sub_1000FDD8C((CFMutableDictionaryRef *)&v3);
  values[0] = v4;
  values[1] = v3;
  sub_1000FDCF0((const void **)keys, (const void **)values, 2, a1);
  sub_100028068((const void **)&v3);
  return sub_100028068((const void **)&v4);
}

void sub_1000D2C40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  sub_100028068((const void **)va);
  sub_100028068((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1000D2C6C(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  uint64_t v5;
  void *v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_1000D22D4(a1, a2, &v5);
  if (v6 != (void *)v5)
  {
    if (malloc_type_valloc(*(_QWORD *)(v5 + 12), 0xF1341ED1uLL))
      operator new();
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
  }
  if (v6)
    operator delete(v6);
}

void sub_1000D2E44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  __break(1u);
}

void sub_1000D2E78()
{
  __cxa_end_catch();
  JUMPOUT(0x1000D2E8CLL);
}

_QWORD *sub_1000D2EB0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000EA764((uint64_t)a1, a2);
  *a1 = off_10018A7B8;
  a1[45] = &off_10018A8B8;
  a1[46] = &off_10018A8E0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018A7B8;
  a1[45] = off_10018A840;
  a1[46] = off_10018A868;
  return a1;
}

void sub_1000D2F34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000E0A34(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D2F58(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018A880);
  sub_1000E0A34(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000D2F98(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000EA6E8((uint64_t)a1, a2);
  *a1 = off_10018A9D8;
  a1[45] = &off_10018AAD8;
  a1[46] = &off_10018AB00;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018A9D8;
  a1[45] = off_10018AA60;
  a1[46] = off_10018AA88;
  return a1;
}

void sub_1000D301C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000E1020(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D3040(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018AAA0);
  sub_1000E1020(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

const void **sub_1000D3080(const void **result, uint64_t a2, CFPropertyListRef propertyList)
{
  uint64_t *v4;
  _QWORD *v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  const void **v28;
  uint64_t v29;
  void *v30;
  const UInt8 *BytePtr;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::bad_alloc *v72;
  std::bad_alloc *v73;
  _QWORD *v74;
  const std::error_category *v75;
  void *exception;
  void *v77;
  _QWORD *v78;
  const std::error_category *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char v83[8];
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  __int128 v86;
  size_t v87;
  uint64_t v88;
  size_t v89;
  char v90;
  std::__shared_weak_count *v91;
  _BYTE v92[28];
  CFTypeRef cf;
  const void *v94[3];
  const void **v95;
  void *__p;
  uint64_t v97;
  uint64_t v98;
  _BYTE v99[72];
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  char *v106;
  uint64_t v107;

  if (propertyList)
  {
    v4 = (uint64_t *)result;
    v5 = *result;
    v6 = (unsigned int *)result[1];
    v7 = v6[5];
    v8 = *((_QWORD *)*result + 9) * v7;
    v9 = *((unsigned __int16 *)v6 + 9);
    if (!v8)
      v8 = (v5[7] * v9 - v7) / v7 * v7;
    if (v8 < v5[6] * v9)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      v77 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Not enough space for metadata", 0x1Cu);
    }
    sub_1000FDDD0(propertyList, (const __CFData **)v94);
    v10 = (unint64_t)v94[1];
    cf = v94[0];
    v94[0] = 0;
    sub_100074B5C(v94);
    v11 = *v4;
    v12 = v4[1];
    v13 = *(unsigned int *)(v12 + 20);
    v14 = v13 - 512;
    v15 = v10 + v13 - 512 - 1;
    v16 = v15 / (v13 - 512);
    if (v16 * v13 > v8 + v13 - *(_QWORD *)(*v4 + 48) * *(unsigned __int16 *)(v12 + 18))
    {
      v78 = __cxa_allocate_exception(0x40uLL);
      *v78 = &off_1001924F8;
      v79 = std::generic_category();
      v78[1] = 28;
      v78[2] = v79;
      *((_BYTE *)v78 + 24) = 0;
      *((_BYTE *)v78 + 48) = 0;
      v78[7] = "Not enough space for metadata";
    }
    if (v14 <= v15)
    {
      v17 = 0;
      v18 = v16 - 1;
      v82 = v8;
      if (v16 <= 1)
        v16 = 1;
      v80 = v16;
      v81 = v18;
      while (1)
      {
        if (v17 == v18)
        {
          v19 = 0;
          v20 = v4[1];
          v21 = v8 - v18 * *(unsigned int *)(v20 + 20);
          v22 = v10 % v14;
        }
        else
        {
          v20 = v4[1];
          v23 = *(unsigned int *)(v20 + 20);
          v21 = v8 - v17 * v23;
          v19 = (v21 - v23) / v23;
          v22 = v14;
        }
        v24 = v22 - 1;
        sub_1000D14D4((uint64_t)v92, (v22 - 1 + *(unsigned __int16 *)(v20 + 18))/ *(unsigned __int16 *)(v20 + 18)* *(unsigned __int16 *)(v20 + 18), v19);
        sub_1000D1588((uint64_t)v92, a2, v4[1], v21);
        if (v10 - v22 >= v17 * v14)
          v25 = v17 * v14;
        else
          v25 = v10 - v22;
        v26 = *(unsigned __int16 *)(v4[1] + 18);
        v27 = (char *)malloc_type_valloc((v24 + v26) / v26 * v26, 0xF8ED6DDuLL);
        if (!v27)
        {
          v72 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v73 = std::bad_alloc::bad_alloc(v72);
        }
        v94[0] = off_1001882A0;
        v95 = v94;
        v106 = v27;
        sub_1000181E0((uint64_t)&v107, (uint64_t)v94);
        v28 = v95;
        if (v95 == v94)
        {
          v28 = v94;
          v29 = 4;
        }
        else
        {
          if (!v95)
            goto LABEL_22;
          v29 = 5;
        }
        (*((void (**)(void))*v28 + v29))();
LABEL_22:
        v30 = v106;
        BytePtr = CFDataGetBytePtr((CFDataRef)cf);
        memcpy(v30, &BytePtr[v25], v22);
        v32 = *(unsigned __int16 *)(v4[1] + 18);
        if (v22 % v32)
        {
          bzero(&v106[v22], v32 - v22 % v32);
          v32 = *(unsigned __int16 *)(v4[1] + 18);
        }
        v33 = (uint64_t)v106;
        v34 = *((_QWORD *)sub_1001207C0() + 1);
        *(_QWORD *)&v86 = v33;
        *((_QWORD *)&v86 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        v87 = (v24 + v32) / v32 * v32;
        v88 = v21 + 512;
        v89 = v87;
        v90 = 0;
        sub_10005ACA8((uint64_t *)v94, &v86);
        v37 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
        if (*((_QWORD *)&v86 + 1))
        {
          v38 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v40 = v4[1];
        sub_10002CA7C((uint64_t)v99, (uint64_t)&v86);
        sub_10002C64C((uint64_t)v99, (uint64_t)v83);
        v41 = sub_1000CEACC(v40, a2, (uint64_t *)&v86, (uint64_t)v83, 0);
        v42 = v85;
        if (v85)
        {
          p_shared_owners = (unint64_t *)&v85->__shared_owners_;
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v45 = v84;
        if (v84)
        {
          v46 = (unint64_t *)&v84->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v48 = v91;
        if (v91)
        {
          v49 = (unint64_t *)&v91->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
        if (!*((_QWORD *)&v86 + 1))
          goto LABEL_51;
        v52 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
          if (v41 < 0)
          {
LABEL_52:
            if ((_DWORD)v41)
            {
              v74 = __cxa_allocate_exception(0x40uLL);
              *v74 = &off_1001924F8;
              v75 = std::generic_category();
              v74[1] = v41;
              v74[2] = v75;
              *((_BYTE *)v74 + 24) = 0;
              *((_BYTE *)v74 + 48) = 0;
              v74[7] = "Failed to write metadata";
            }
          }
        }
        else
        {
LABEL_51:
          if (v41 < 0)
            goto LABEL_52;
        }
        v54 = v105;
        if (v105)
        {
          v55 = (unint64_t *)&v105->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = v104;
        if (v104)
        {
          v58 = (unint64_t *)&v104->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = v103;
        if (v103)
        {
          v61 = (unint64_t *)&v103->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v63 = v102;
        if (v102)
        {
          v64 = (unint64_t *)&v102->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        v66 = v101;
        if (v101)
        {
          v67 = (unint64_t *)&v101->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        v69 = v100;
        if (v100)
        {
          v70 = (unint64_t *)&v100->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        if (v97 && &v98 != __p)
          operator delete(__p);
        sub_100015C2C((uint64_t)v94);
        sub_100017CC8((uint64_t *)&v106);
        ++v17;
        v18 = v81;
        v8 = v82;
        if (v17 == v80)
        {
          v11 = *v4;
          break;
        }
      }
    }
    if (!*(_QWORD *)(v11 + 72))
    {
      *(_QWORD *)(v11 + 72) = v8 / *(unsigned int *)(v4[1] + 20);
      sub_1000D13F0();
    }
    return sub_100074B5C(&cf);
  }
  return result;
}

void sub_1000D37EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,const void *a61,const void *a62)
{
  sub_100074B5C(&a62);
  sub_100074B5C(&a61);
  _Unwind_Resume(a1);
}

void sub_1000D3894(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v14 = (uint64_t *)&v15;
  if (*(_QWORD *)sub_1000C1DBC(a1 + 32, *(_QWORD *)(a1 + 176)))
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
    v5 = *(_QWORD *)(a1 + 352);
    v6 = *(_QWORD *)(a1 + 360);
    if (v5 != v6)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(v5 + 8 * v8) * *(unsigned int *)(a1 + 96);
        v13 = v9;
        if (v9)
        {
          sub_1000D3A1C((unint64_t *)(a1 + 200), v4, v8, v9, (uint64_t)&v14, (uint64_t)v14);
          sub_1000D6430(&v14, &v13, (uint64_t *)&v13);
        }
        ++v8;
        v7 += 8;
      }
      while (v5 + v7 != v6);
    }
    v10 = v15;
    *a2 = v14;
    a2[1] = v10;
    v11 = a2 + 1;
    v12 = v16;
    a2[2] = v16;
    if (v12)
    {
      v10[2] = v11;
      v14 = (uint64_t *)&v15;
      v15 = 0;
      v16 = 0;
      if (!v4)
        goto LABEL_13;
      goto LABEL_12;
    }
    *a2 = v11;
    if (v4)
LABEL_12:
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  }
  else
  {
    a2[2] = 0;
    a2[1] = 0;
    *a2 = a2 + 1;
  }
LABEL_13:
  sub_100027D5C((uint64_t)&v14, v15);
}

void sub_1000D39E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_100027D5C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

unint64_t *sub_1000D3A1C(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  unint64_t v11;

  sub_1000CDDC8(a1, a2, a3, a4, 0, 1, &v11);
  if (v11 && !*(_BYTE *)(v11 + 520))
  {
    if (*(_BYTE *)(v11 + 400))
      v9 = v11 + 40;
    else
      v9 = 0;
    sub_1000EA7E0(v9, a2, a5, a6);
  }
  return sub_1000C1E4C(&v11);
}

void sub_1000D3AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000C1E4C((unint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000D3AC4(_QWORD *result, _QWORD *a2, unint64_t a3, unsigned int a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD v23[3];
  __int128 v24;
  uint64_t v25;

  v7 = result;
  if (a2[2])
  {
    v8 = a2 + 1;
    v9 = (_QWORD *)a2[1];
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (_QWORD *)v8[2];
        v11 = *v10 == (_QWORD)v8;
        v8 = v10;
      }
      while (v11);
    }
    v12 = v10[4] + a4;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(result[25] + 16))(result + 25);
    if (result[12] <= v12)
      result[12] = v12;
  }
  v15 = (_QWORD *)*a2;
  v13 = a2 + 1;
  v14 = v15;
  if (v15 != v13)
  {
    v16 = (uint64_t)(v7 + 25);
    v17 = v7 + 26;
    do
    {
      v18 = v14[4];
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 + 1, v17));
      v24 = a3;
      v25 = a4;
      if ((v18 - a3) % a4)
        v20 = (v18 - a3) / a4 + 1;
      else
        v20 = (v18 - a3) / a4;
      v23[0] = a3;
      v23[1] = v20;
      v23[2] = a4;
      result = sub_1000D3C08(v16, &v24, (uint64_t)v23);
      v21 = (_QWORD *)v14[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v14[2];
          v11 = *v22 == (_QWORD)v14;
          v14 = v22;
        }
        while (!v11);
      }
      a3 = v18 + a4;
      v14 = v22;
    }
    while (v22 != v13);
  }
  return result;
}

_QWORD *sub_1000D3C08(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v8 = *(_OWORD *)a3;
  v9 = *(_QWORD *)(a3 + 16);
  v13 = 0;
  sub_1000EA958(v5, (uint64_t *)&v10, &v8, (uint64_t)v12);
  result = v13;
  if (v13 == v12)
  {
    v7 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_1000D3CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1000D3D04(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t *a6)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD v18[4];

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_1001877A0;
  *(_QWORD *)(a1 + 16) = *a2;
  v8 = a2[1];
  *(_QWORD *)(a1 + 24) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_DWORD *)(a1 + 32) = 2003069043;
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a3 + 4);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a3 + 12);
  v11 = *(_OWORD *)(a3 + 16);
  v12 = *(_OWORD *)(a3 + 32);
  v13 = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a1 + 94) = *(_QWORD *)(a3 + 62);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v13;
  *(_OWORD *)(a1 + 48) = v11;
  *(_WORD *)(a1 + 102) = 0;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a1 + 112) = 850045863;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a4;
  v14 = *a6;
  *(_DWORD *)(a1 + 192) = *((_DWORD *)a6 + 2);
  *(_QWORD *)(a1 + 184) = v14;
  v15 = *(_QWORD *)(a3 + 56);
  v16 = *(unsigned __int16 *)(a3 + 68);
  v17 = *(_DWORD *)(a3 + 64);
  v18[0] = off_10018AC50;
  v18[1] = a1;
  v18[3] = v18;
  sub_1000CFF64(a1 + 200, a1, v15 * v16, v17, v16, a5, 2);
}

void sub_1000D3FC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;

  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  sub_1000C6254(v3);
  std::mutex::~mutex(v2);
  sub_100012168(v1);
  _Unwind_Resume(a1);
}

void sub_1000D4054(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, _QWORD *a6, uint64_t *a7, _OWORD *a8)
{
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD v20[5];

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_1001877A0;
  *(_QWORD *)(a1 + 16) = *a6;
  v15 = a6[1];
  *(_QWORD *)(a1 + 24) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  sub_1000E1A84(&v19, *((unsigned __int8 *)a7 + 1));
  sub_1000D12C4(a1 + 32, &v19, a8, a4, a5, a3, a2);
  *(_QWORD *)(a1 + 112) = 850045863;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  v18 = *a7;
  *(_DWORD *)(a1 + 192) = *((_DWORD *)a7 + 2);
  *(_QWORD *)(a1 + 184) = v18;
  v20[0] = off_10018AC50;
  v20[1] = a1;
  v20[3] = v20;
  sub_1000CFF64(a1 + 200, a1, a2 * a5, a3, a2, 0x200u, 2);
}

void sub_1000D434C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::mutex *v10;
  uint64_t v11;

  sub_1000C6254(v11);
  std::mutex::~mutex(v10);
  sub_100012168(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D43B8(const void **a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  const void *v7;
  CFTypeID TypeID;
  uint64_t v9;
  CFIndex Count;
  CFMutableDictionaryRef MutableCopy;
  const char *v12;
  _OWORD *v13;
  BOOL v14;
  CFIndex v15;
  CFMutableDictionaryRef v16;
  unsigned int v17;
  _QWORD *exception;
  const std::error_category *v20;
  _QWORD *v21;
  CFTypeID v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  const std::error_category *v26;
  _QWORD *v27;
  const std::error_category *v28;
  _QWORD *v29;
  const std::error_category *v30;
  void *__p;
  __int128 v32;
  void *value;
  CFDictionaryRef theDict;

  v6 = (*((uint64_t (**)(const void **))*a1 + 17))(a1);
  sub_1000D2438(a1 + 507, v6, &theDict);
  v7 = CFDictionaryGetValue(theDict, CFSTR("internal metadata"));
  TypeID = CFDictionaryGetTypeID();
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_1001924F8;
    v20 = std::generic_category();
    exception[1] = 152;
    exception[2] = v20;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "ASIF: missing internal metadata key";
  }
  v9 = TypeID;
  if (CFGetTypeID(v7) != TypeID)
  {
    v21 = __cxa_allocate_exception(0x40uLL);
    v22 = CFGetTypeID(v7);
    v23 = sub_100027DA0(v21, v22, v9);
  }
  Count = CFDictionaryGetCount((CFDictionaryRef)v7);
  MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, Count + 1, (CFDictionaryRef)v7);
  value = MutableCopy;
  v12 = "ASIF: can't copy metadata to mutable copy";
  if (!MutableCopy)
  {
    v24 = 4294967284;
    goto LABEL_14;
  }
  v13 = operator new(0x28uLL);
  __p = v13;
  v32 = xmmword_1001425E0;
  *v13 = 0u;
  v13[1] = 0u;
  *(_QWORD *)((char *)v13 + 29) = 0;
  sub_100070FE8(a3, v13);
  v14 = sub_1000FE2A8(MutableCopy, a2, (uint64_t)&__p);
  if (SHIBYTE(v32) < 0)
    operator delete(__p);
  if (!v14)
  {
    v12 = "ASIF: can't set requested uuid";
    v24 = 150;
LABEL_14:
    v25 = __cxa_allocate_exception(0x40uLL);
    *v25 = &off_1001924F8;
    v26 = std::generic_category();
    v25[1] = v24;
    v25[2] = v26;
    *((_BYTE *)v25 + 24) = 0;
    *((_BYTE *)v25 + 48) = 0;
    v25[7] = v12;
  }
  v15 = CFDictionaryGetCount(theDict);
  v16 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, v15 + 1, theDict);
  __p = v16;
  if (!v16)
  {
    v27 = __cxa_allocate_exception(0x40uLL);
    *v27 = &off_1001924F8;
    v28 = std::generic_category();
    v27[1] = 4294967284;
    v27[2] = v28;
    *((_BYTE *)v27 + 24) = 0;
    *((_BYTE *)v27 + 48) = 0;
    v27[7] = "ASIF: can't copy metadata to mutable copy";
  }
  CFDictionarySetValue(v16, CFSTR("internal metadata"), value);
  sub_1000D3080(a1 + 507, v6, __p);
  v17 = (*((uint64_t (**)(const void **, uint64_t, _QWORD))*a1 + 22))(a1, v6, 0);
  if (v17)
  {
    v29 = __cxa_allocate_exception(0x40uLL);
    *v29 = &off_1001924F8;
    v30 = std::generic_category();
    v29[1] = v17;
    v29[2] = v30;
    *((_BYTE *)v29 + 24) = 0;
    *((_BYTE *)v29 + 48) = 0;
    v29[7] = "ASIF: failed to write metadata";
  }
  sub_100028068((const void **)&__p);
  sub_100028068((const void **)&value);
  sub_100012138((const void **)&theDict);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
}

void sub_1000D4704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, const void *a18)
{
  uint64_t v18;
  void *v19;

  __cxa_free_exception(v19);
  sub_100012138(&a18);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
  _Unwind_Resume(a1);
}

void sub_1000D4798(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, _QWORD *a6, uint64_t *a7, _OWORD *a8)
{
  sub_1000D4054(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1000D47A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  int64_t v11;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 1;
  do
  {
    v9 = v8;
    v10 = *(_QWORD *)sub_1000C1DBC(a2, v4);
    if (v10)
    {
      v11 = sub_1000D08D8(a1, v10);
      if (!v5 || v6 < v11)
      {
        v5 = 1;
        v7 = v4;
        v6 = v11;
      }
    }
    v8 = 0;
    v4 = 1;
  }
  while ((v9 & 1) != 0);
  return v7;
}

uint64_t sub_1000D4850(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  _QWORD **v8;
  _QWORD *v9;

  v7 = 0;
  v3 = (unint64_t *)(a1 + 4072);
  v6[0] = a1;
  v6[1] = &v7;
  v6[2] = a2;
  v4 = atomic_load(v3);
  if (v4 != -1)
  {
    v9 = v6;
    v8 = &v9;
    std::__call_once(v3, &v8, (void (__cdecl *)(void *))sub_1000EAAF8);
  }
  if (v7 < 0)
    return v7;
  else
    return -v7;
}

uint64_t sub_1000D48B8(uint64_t a1, uint64_t a2, int a3)
{
  std::mutex *v6;
  uint64_t (***v7)();
  uint64_t (***v8)();
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (std::mutex *)(a1 + 112);
  std::mutex::lock((std::mutex *)(a1 + 112));
  v7 = *(uint64_t (****)())sub_1000C1DBC(a1 + 32, *(_QWORD *)(a1 + 176));
  v8 = v7;
  if (!v7)
  {
    v9 = *(unsigned __int16 *)(a1 + 100);
    v10 = *(_QWORD *)(a1 + 176);
    v11 = *(_QWORD *)(a1 + 320);
    v12 = *(_QWORD *)(a1 + 280);
    v13 = (_QWORD *)sub_1000C1DBC(a1 + 32, v10);
    v8 = (uint64_t (***)())(v9
                                    + 511
                                    - ((int)v9 + 511) % v9
                                    + (8 * ((v11 + v12 - 1) / v12) + v9 + 7) / v9 * v9 * v10);
    *v13 = v8;
  }
  v14 = sub_1000CFD40(a1 + 200, a2, v8);
  v15 = v14;
  if ((v14 & 0x80000000) == 0)
  {
    if ((_DWORD)v14 == 1)
    {
      v16 = *(_QWORD *)(a1 + 176);
      if (v16 == 1)
        v17 = 0;
      else
        v17 = v16 + 1;
      *(_QWORD *)(a1 + 176) = v17;
    }
    if (v7)
    {
      v15 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16), 2 * (a3 == 2));
    }
    else
    {
      v15 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)v15)
        sub_1000D13F0();
    }
  }
  std::mutex::unlock(v6);
  return v15;
}

void sub_1000D4A0C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000D4A50()
{
  operator new();
}

uint64_t sub_1000D4ADC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const void *Value;
  CFTypeID TypeID;
  uint64_t v7;
  CFTypeID v8;
  _QWORD *exception;
  CFTypeID v11;
  _QWORD *v12;
  _QWORD *v13;
  CFTypeID v14;
  _QWORD *v15;
  const void *v16;
  CFDictionaryRef theDict;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 136))(a1);
  sub_1000D2438(a1 + 507, v4, &theDict);
  Value = CFDictionaryGetValue(theDict, CFSTR("user metadata"));
  TypeID = CFDictionaryGetTypeID();
  if (Value)
  {
    v7 = TypeID;
    if (CFGetTypeID(Value) != TypeID)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      v11 = CFGetTypeID(Value);
      v12 = sub_100027DA0(exception, v11, v7);
    }
    v8 = CFDictionaryGetTypeID();
    if (CFGetTypeID(Value) != v8)
    {
      v13 = __cxa_allocate_exception(0x40uLL);
      v14 = CFGetTypeID(Value);
      v15 = sub_100027DA0(v13, v14, v8);
    }
    CFRetain(Value);
    *a2 = Value;
  }
  else
  {
    sub_1000FDD8C((CFMutableDictionaryRef *)&v16);
    *a2 = v16;
    v16 = 0;
    sub_100028068(&v16);
  }
  sub_100012138((const void **)&theDict);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
}

void sub_1000D4C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  uint64_t v10;
  void *v11;

  __cxa_free_exception(v11);
  sub_100012138(&a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D4C84(const void **a1, const void *a2)
{
  uint64_t v4;
  CFIndex Count;
  CFMutableDictionaryRef MutableCopy;
  unsigned int v7;
  _QWORD *exception;
  const std::error_category *v10;
  _QWORD *v11;
  const std::error_category *v12;
  _QWORD *v13;
  const std::error_category *v14;
  CFPropertyListRef propertyList;
  CFDictionaryRef theDict;

  v4 = (*((uint64_t (**)(const void **))*a1 + 17))(a1);
  sub_1000D2438(a1 + 507, v4, &theDict);
  if (!theDict)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_1001924F8;
    v10 = std::generic_category();
    exception[1] = 4294967284;
    exception[2] = v10;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "ASIF: can't read/allocate asif metadata";
  }
  Count = CFDictionaryGetCount(theDict);
  MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, Count, theDict);
  propertyList = MutableCopy;
  if (!MutableCopy)
  {
    v11 = __cxa_allocate_exception(0x40uLL);
    *v11 = &off_1001924F8;
    v12 = std::generic_category();
    v11[1] = 4294967284;
    v11[2] = v12;
    *((_BYTE *)v11 + 24) = 0;
    *((_BYTE *)v11 + 48) = 0;
    v11[7] = "ASIF: can't copy metadata to mutable copy";
  }
  CFDictionarySetValue(MutableCopy, CFSTR("user metadata"), a2);
  sub_1000D3080(a1 + 507, v4, propertyList);
  v7 = (*((uint64_t (**)(const void **, uint64_t, uint64_t))*a1 + 22))(a1, v4, 2);
  if (v7)
  {
    v13 = __cxa_allocate_exception(0x40uLL);
    *v13 = &off_1001924F8;
    v14 = std::generic_category();
    v13[1] = v7;
    v13[2] = v14;
    *((_BYTE *)v13 + 24) = 0;
    *((_BYTE *)v13 + 48) = 0;
    v13[7] = "ASIF: failed to write metadata";
  }
  sub_100028068(&propertyList);
  sub_100012138((const void **)&theDict);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
}

void sub_1000D4E64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_100012138((const void **)va);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D4EAC(_QWORD *a1, const void *a2)
{
  uint64_t v4;
  const void *Value;
  CFTypeID TypeID;
  uint64_t v7;
  const __CFString *v8;
  CFTypeID v9;
  uint64_t v10;
  _QWORD *exception;
  const std::error_category *v13;
  _QWORD *v14;
  CFTypeID v15;
  _QWORD *v16;
  _QWORD *v17;
  CFTypeID v18;
  _QWORD *v19;
  CFDictionaryRef theDict;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 136))(a1);
  sub_1000D2438(a1 + 507, v4, &theDict);
  Value = CFDictionaryGetValue(theDict, CFSTR("internal metadata"));
  TypeID = CFDictionaryGetTypeID();
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_1001924F8;
    v13 = std::generic_category();
    exception[1] = 152;
    exception[2] = v13;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "ASIF: missing internal metadata key";
  }
  v7 = TypeID;
  if (CFGetTypeID(Value) != TypeID)
  {
    v14 = __cxa_allocate_exception(0x40uLL);
    v15 = CFGetTypeID(Value);
    v16 = sub_100027DA0(v14, v15, v7);
  }
  v8 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)Value, a2);
  v9 = CFStringGetTypeID();
  if (v8)
  {
    v10 = v9;
    if (CFGetTypeID(v8) == v9)
      sub_1000FDA04(v8);
    v17 = __cxa_allocate_exception(0x40uLL);
    v18 = CFGetTypeID(v8);
    v19 = sub_100027DA0(v17, v18, v10);
  }
  sub_100012138((const void **)&theDict);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return 0;
}

void sub_1000D50A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, const void *a17)
{
  uint64_t v17;
  void *v18;

  __cxa_free_exception(v18);
  sub_100012138(&a17);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D510C(const void **a1, uint64_t a2)
{
  return sub_1000D43B8(a1, CFSTR("source uuid"), a2);
}

uint64_t sub_1000D511C(_QWORD *a1)
{
  return sub_1000D4EAC(a1, CFSTR("stable uuid"));
}

uint64_t sub_1000D5128(_QWORD *a1)
{
  return sub_1000D4EAC(a1, CFSTR("source uuid"));
}

uint64_t sub_1000D5134(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t sub_1000D5148(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001877A0;
  v2 = a1 + 16;
  sub_1000C6254(a1 + 200);
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  sub_100012168(v2);
  return a1;
}

void sub_1000D5190(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001877A0;
  v2 = a1 + 16;
  sub_1000C6254(a1 + 200);
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  sub_100012168(v2);
  operator delete();
}

uint64_t sub_1000D51E8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 218);
}

uint64_t sub_1000D51F0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t sub_1000D51F8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

void sub_1000D5208()
{
  operator new();
}

void sub_1000D526C()
{
  operator delete();
}

uint64_t sub_1000D5290(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_1000A3408((uint64_t)a1, a2);
  if (!(_DWORD)v4)
  {
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
    v6 = (a2 + v5 - 1) / v5;
    if (v6 <= a1[11])
    {
      v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 136))(a1);
      v8 = a1[11];
      if (v8 - v6 >= sub_1000D224C(a1 + 507, v7))
      {
        a1[10] = v6;
        sub_1000D13F0();
      }
      v4 = 4294967269;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    }
    else
    {
      return 4294967269;
    }
  }
  return v4;
}

void sub_1000D536C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D538C()
{
  return 1;
}

uint64_t sub_1000D5394()
{
  return 1;
}

void sub_1000D539C()
{
  operator new();
}

void sub_1000D53F8()
{
  operator delete();
}

uint64_t sub_1000D541C(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;

  v8 = ((*(_QWORD *)(a4 + 144) - a3[18]) & ~((*(_QWORD *)(a4 + 144) - a3[18]) >> 63)) + a3[3];
  v9 = a1[10];
  if (v8 > (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1) * v9)
    return -34;
  else
    return sub_1000CEACC((uint64_t)(a1 + 25), a2, a3, a4, 1);
}

uint64_t sub_1000D54D8(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v8 = ((*(_QWORD *)(a4 + 144) - a3[18]) & ~((*(_QWORD *)(a4 + 144) - a3[18]) >> 63)) + a3[3];
  v9 = a1[10];
  if (v8 > (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1) * v9)
    return -34;
  v10 = sub_1000D4850((uint64_t)a1, a2 + 16);
  if (!v10)
    return sub_1000CEACC((uint64_t)(a1 + 25), a2, a3, a4, 0);
  if (v10 >= 0)
    v11 = v10;
  else
    v11 = -v10;
  return -v11;
}

uint64_t sub_1000D55B4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;

  if (a4)
  {
    v8 = (_QWORD *)(a3 + 8);
    v9 = a4;
    while (1)
    {
      v10 = *v8 + *(v8 - 1);
      v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1) * v10;
      v12 = a1[10];
      if (v11 > (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1) * v12)
        return 4294967262;
      v8 += 2;
      if (!--v9)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = sub_1000D4850((uint64_t)a1, a2 + 16);
    if (!(_DWORD)result)
      return sub_1000CFA50((uint64_t)(a1 + 25), a2, a3, a4);
  }
  return result;
}

void sub_1000D569C()
{
  operator new();
}

void sub_1000D5710()
{
  operator delete();
}

uint64_t sub_1000D5724(uint64_t a1)
{
  return a1 + 176;
}

unint64_t *sub_1000D572C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  return sub_1000E1AF4(a1 + 2080, a2, a3, a4);
}

_QWORD *sub_1000D5734(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10008669C(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1000D578C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D57A8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  _QWORD v11[45];
  uint64_t v12;
  uint64_t v13;
  std::mutex *v14;
  char v15;

  v14 = (std::mutex *)(a1 + 8);
  v15 = 1;
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (*(_QWORD *)(a1 + 88))
  {
    v4 = *(uint64_t **)(a1 + 72);
    v5 = v4[4];
    sub_100040DA8((uint64_t **)(a1 + 72), v4);
    operator delete(v4);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)a1 + v5;
    sub_10003DEE8((uint64_t)&v14);
    v7 = *(_QWORD *)(a2 + 24);
    if (v7)
    {
      v11[0] = *(_QWORD *)a1 + v5;
      v8 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v11);
      if ((_DWORD)v8)
      {
        *(_QWORD *)&v9 = "space_allocators::FixedSize::allocate(const size_changed_fn_t &)";
        *((_QWORD *)&v9 + 1) = 37;
        v10 = 16;
        sub_1000D5910(v11, &v9);
        sub_100005A0C(&v12, (uint64_t)"allocated: size change callback failed with ", 44);
        std::ostream::operator<<(&v12, v8);
        std::ostream::~ostream(&v12, off_1001879E0);
        sub_1000D5A74((uint64_t)v11);
        std::ios::~ios(&v13);
      }
    }
  }
  if (v15)
    std::mutex::unlock(v14);
  return v5;
}

void sub_1000D58DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;

  if (*(_BYTE *)(v12 - 40))
    std::mutex::unlock(*(std::mutex **)(v12 - 48));
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000D5910(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000D59F8((uint64_t)a1, a2);
  *a1 = off_100187918;
  a1[45] = &off_100187A18;
  a1[46] = &off_100187A40;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100187918;
  a1[45] = off_1001879A0;
  a1[46] = off_1001879C8;
  return a1;
}

void sub_1000D5994(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000D5A74(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D59B8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001879E0);
  sub_1000D5A74(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000D59F8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100187AB0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000D5A60(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D5A74(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100187AB0;
  sub_1000D5D2C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000D5B10(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001879E0);
  sub_1000D5A74(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000D5B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000D5B98(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000D5BE4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001879E0);
  sub_1000D5A74(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000D5C1C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001879E0);
  sub_1000D5A74(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_1000D5C6C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001879E0);
  sub_1000D5A74(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D5CAC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001879E0);
  sub_1000D5A74(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1000D5D08(uint64_t a1)
{
  sub_1000D5A74(a1);
  operator delete();
}

uint64_t sub_1000D5D2C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000D5E7C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000D5E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_1000D5E7C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 137;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 137;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void sub_1000D6064()
{
  operator delete();
}

__n128 sub_1000D6078(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_100187B30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1000D60B0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_100187B30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1000D60D0(uint64_t a1, uint64_t *a2)
{
  return sub_1000D6124((uint64_t *)(a1 + 8), *a2);
}

uint64_t sub_1000D60DC(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_100187BA0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000D6118()
{
  return &off_100187BA0;
}

uint64_t sub_1000D6124(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  std::bad_alloc *exception;
  std::bad_alloc *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;

  v4 = *(_QWORD *)(*a1 + 16);
  v5 = malloc_type_valloc(a1[1], 0xF8ED6DDuLL);
  if (!v5)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_alloc::bad_alloc(exception);
  }
  v15[0] = off_1001882A0;
  v16 = v15;
  v13 = v5;
  sub_1000181E0((uint64_t)&v14, (uint64_t)v15);
  v6 = v16;
  if (v16 == v15)
  {
    v7 = 4;
    v6 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_7;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_7:
  bzero(v13, a1[1]);
  v8 = sub_10003993C(v4, (uint64_t)v13, a1[1], a2 - a1[1]);
  if (a1[1] == v8)
  {
    v9 = 0;
  }
  else
  {
    if (v8 >= 0)
      v9 = 4294967291;
    else
      v9 = v8;
    sub_1000A1868(*a1);
  }
  sub_100017CC8((uint64_t *)&v13);
  return v9;
}

void sub_1000D6260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100017CC8(&a9);
  _Unwind_Resume(a1);
}

void sub_1000D627C()
{
  operator delete();
}

_QWORD *sub_1000D6290(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_100187BC0;
  result[1] = v3;
  return result;
}

uint64_t sub_1000D62C4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_100187BC0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000D62E0(uint64_t a1, unint64_t *a2)
{
  return sub_1000D6330((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_1000D62E8(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_100187C20))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000D6324()
{
  return &off_100187C20;
}

uint64_t sub_1000D6330(uint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *(_QWORD *)(*a1 + 16);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4) > v3
    && (*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v4 + 56))(v4, v3))
  {
    sub_1000A1868(*a1);
  }
  return 0;
}

void sub_1000D639C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v5;
  unint64_t v6;
  uint64_t v7;

  v7 = a2;
  v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  sub_1000D6430((uint64_t **)(a1 + 72), (unint64_t *)&v7, &v7);
  v6 = *(_QWORD *)a1 + v7;
  if (*(_QWORD *)(a1 + 96) <= v6)
    *(_QWORD *)(a1 + 96) = v6;
  sub_1000D0B84((_QWORD *)a1, a3);
  std::mutex::unlock(v5);
}

void sub_1000D641C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000D6430(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_1000284A8(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_1000D64E8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100187D10);
  sub_1000D66DC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D6520(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100187D10);
  sub_1000D66DC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D6560(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100187D10);
  sub_1000D66DC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000D65B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000D65E8(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000D6634(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100187D10);
  sub_1000D66DC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000D6684(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100187D10);
  sub_1000D66DC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000D66DC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100187DE0;
  sub_1000D6778(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D6778(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000D68F0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000D68A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000D68CC(uint64_t a1)
{
  sub_1000D66DC(a1);
  operator delete();
}

int *sub_1000D68F0(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 436;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 436;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000D6AD4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100187F30);
  sub_1000D6CC8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D6B0C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100187F30);
  sub_1000D6CC8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D6B4C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100187F30);
  sub_1000D6CC8(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000D6BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000D6BD4(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000D6C20(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100187F30);
  sub_1000D6CC8(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000D6C70(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100187F30);
  sub_1000D6CC8(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000D6CC8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100188000;
  sub_1000D6D64(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D6D64(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000D6EDC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000D6E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000D6EB8(uint64_t a1)
{
  sub_1000D6CC8(a1);
  operator delete();
}

int *sub_1000D6EDC(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 450;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 450;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_1000D70C0(_QWORD *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  void *exception;
  void *v5;

  *result = a2;
  result[1] = a3;
  atomic_load((unint64_t *)(*(_QWORD *)(a2 + 56) + 16 * a3 + 8));
  v3 = atomic_load((unint64_t *)(*(_QWORD *)(a2 + 56) + 16 * a3 + 8));
  if ((v3 & 0x3F80000000000000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v5 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"ASIF: data entry - invalid reserved bits", 0x16u);
  }
  return result;
}

_QWORD *sub_1000D7130(_QWORD *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  void *exception;
  void *v5;

  *result = a2;
  result[1] = a3;
  v3 = atomic_load((unint64_t *)(*(_QWORD *)(a2 + 56) + 16 * a3 + 8));
  if ((v3 & 0x7F80000000000000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v5 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"ASIF: data entry - invalid reserved bits", 0x16u);
  }
  return result;
}

uint64_t sub_1000D7188(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100188150);
  sub_1000D737C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D71C0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100188150);
  sub_1000D737C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D7200(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100188150);
  sub_1000D737C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000D7254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000D7288(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000D72D4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100188150);
  sub_1000D737C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000D7324(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100188150);
  sub_1000D737C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000D737C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100188220;
  sub_1000D7418(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D7418(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000D7590((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000D7540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000D756C(uint64_t a1)
{
  sub_1000D737C(a1);
  operator delete();
}

int *sub_1000D7590(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 547;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 547;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void sub_1000D7778()
{
  operator delete();
}

_QWORD *sub_1000D778C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1001882A0;
  return result;
}

void sub_1000D77B0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1001882A0;
}

void sub_1000D77C8(uint64_t a1, void **a2)
{
  free(*a2);
}

uint64_t sub_1000D77D0(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_100188300))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000D780C()
{
  return &off_100188300;
}

uint64_t sub_1000D7818(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    sub_100017E44();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100098BBC(v7, v9);
  else
    v10 = 0;
  v14 = v10;
  v15 = &v10[32 * v4];
  v16 = (uint64_t)v15;
  v17 = &v10[32 * v9];
  v11 = (_QWORD *)sub_10011E364((uint64_t)v15, a2);
  *v11 = off_100191F18;
  v11[3] = *(_QWORD *)(a2 + 24);
  v16 += 32;
  sub_1000D7914(a1, &v14);
  v12 = a1[1];
  sub_1000D7A44((uint64_t)&v14);
  return v12;
}

void sub_1000D7900(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000D7A44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D7914(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1000D7988((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000D7988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      *(_QWORD *)sub_10011E364(a7 + v11 - 32, a3 + v11 - 32) = off_100191F18;
      *(_QWORD *)(a7 + v11 - 8) = *(_QWORD *)(a3 + v11 - 8);
      v11 -= 32;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1000D7A1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 32)
    (**(void (***)(uint64_t))(v1 + v2))(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D7A44(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 32);
    *(_QWORD *)(a1 + 16) = i - 32;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1000D7A94(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 32;
      v7 = v4 - 32;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 32;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1000D7B20(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001883F0);
  sub_1000D7D14(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D7B58(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001883F0);
  sub_1000D7D14(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D7B98(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001883F0);
  sub_1000D7D14(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000D7BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000D7C20(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000D7C6C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001883F0);
  sub_1000D7D14(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000D7CBC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001883F0);
  sub_1000D7D14(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000D7D14(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001884C0;
  sub_1000D7DB0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D7DB0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000D7F28((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000D7ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000D7F04(uint64_t a1)
{
  sub_1000D7D14(a1);
  operator delete();
}

int *sub_1000D7F28(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 863;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 863;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000D810C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100188610);
  sub_1000D8300(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D8144(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100188610);
  sub_1000D8300(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D8184(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100188610);
  sub_1000D8300(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000D81D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000D820C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000D8258(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100188610);
  sub_1000D8300(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000D82A8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100188610);
  sub_1000D8300(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000D8300(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001886E0;
  sub_1000D839C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D839C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000D8514((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000D84C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000D84F0(uint64_t a1)
{
  sub_1000D8300(a1);
  operator delete();
}

int *sub_1000D8514(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 888;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 888;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000D86F8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100188830);
  sub_1000D88EC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D8730(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100188830);
  sub_1000D88EC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D8770(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100188830);
  sub_1000D88EC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000D87C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000D87F8(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000D8844(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100188830);
  sub_1000D88EC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000D8894(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100188830);
  sub_1000D88EC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000D88EC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100188900;
  sub_1000D8988(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D8988(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000D8B00((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000D8AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000D8ADC(uint64_t a1)
{
  sub_1000D88EC(a1);
  operator delete();
}

int *sub_1000D8B00(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 900;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 900;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_1000D8CE4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000D8DCC((uint64_t)a1, a2);
  *a1 = off_100188988;
  a1[45] = &off_100188A88;
  a1[46] = &off_100188AB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100188988;
  a1[45] = off_100188A10;
  a1[46] = off_100188A38;
  return a1;
}

void sub_1000D8D68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000D8E48(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D8D8C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100188A50);
  sub_1000D8E48(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000D8DCC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100188B20;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000D8E34(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D8E48(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100188B20;
  sub_1000D9100(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000D8EE4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100188A50);
  sub_1000D8E48(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000D8F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000D8F6C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000D8FB8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100188A50);
  sub_1000D8E48(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000D8FF0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100188A50);
  sub_1000D8E48(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_1000D9040(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100188A50);
  sub_1000D8E48(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D9080(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100188A50);
  sub_1000D8E48(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1000D90DC(uint64_t a1)
{
  sub_1000D8E48(a1);
  operator delete();
}

uint64_t sub_1000D9100(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000D9250((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000D9228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_1000D9250(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 258;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 258;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000D9434(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100188C70);
  sub_1000D9628(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D946C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100188C70);
  sub_1000D9628(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D94AC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100188C70);
  sub_1000D9628(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000D9500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000D9534(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000D9580(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100188C70);
  sub_1000D9628(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000D95D0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100188C70);
  sub_1000D9628(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000D9628(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100188D40;
  sub_1000D96C4(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D96C4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000D983C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000D97EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000D9818(uint64_t a1)
{
  sub_1000D9628(a1);
  operator delete();
}

int *sub_1000D983C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 1075;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 1075;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000D9A20(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100188E90);
  sub_1000D9C14(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D9A58(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100188E90);
  sub_1000D9C14(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D9A98(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100188E90);
  sub_1000D9C14(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000D9AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000D9B20(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000D9B6C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100188E90);
  sub_1000D9C14(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000D9BBC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100188E90);
  sub_1000D9C14(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000D9C14(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100188F60;
  sub_1000D9CB0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D9CB0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000D9E28((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000D9DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000D9E04(uint64_t a1)
{
  sub_1000D9C14(a1);
  operator delete();
}

int *sub_1000D9E28(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 1081;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 1081;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000DA00C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001890B0);
  sub_1000DA200(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000DA044(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001890B0);
  sub_1000DA200(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DA084(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001890B0);
  sub_1000DA200(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000DA0D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000DA10C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000DA158(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001890B0);
  sub_1000DA200(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000DA1A8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001890B0);
  sub_1000DA200(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000DA200(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100189180;
  sub_1000DA29C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000DA29C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000DA414((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000DA3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000DA3F0(uint64_t a1)
{
  sub_1000DA200(a1);
  operator delete();
}

int *sub_1000DA414(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 1090;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 1090;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000DA5F8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001892D0);
  sub_1000DA7EC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000DA630(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001892D0);
  sub_1000DA7EC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DA670(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001892D0);
  sub_1000DA7EC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000DA6C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000DA6F8(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000DA744(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001892D0);
  sub_1000DA7EC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000DA794(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001892D0);
  sub_1000DA7EC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000DA7EC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001893A0;
  sub_1000DA888(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000DA888(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000DAA00((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000DA9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000DA9DC(uint64_t a1)
{
  sub_1000DA7EC(a1);
  operator delete();
}

int *sub_1000DAA00(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 1151;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 1151;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000DABE4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001894F0);
  sub_1000DADD8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000DAC1C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001894F0);
  sub_1000DADD8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DAC5C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001894F0);
  sub_1000DADD8(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000DACB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000DACE4(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000DAD30(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001894F0);
  sub_1000DADD8(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000DAD80(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001894F0);
  sub_1000DADD8(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000DADD8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001895C0;
  sub_1000DAE74(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000DAE74(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000DAFEC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000DAF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000DAFC8(uint64_t a1)
{
  sub_1000DADD8(a1);
  operator delete();
}

int *sub_1000DAFEC(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 1188;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 1188;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000DB1D0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100189710);
  sub_1000DB3C4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000DB208(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100189710);
  sub_1000DB3C4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DB248(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100189710);
  sub_1000DB3C4(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000DB29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000DB2D0(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000DB31C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100189710);
  sub_1000DB3C4(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000DB36C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100189710);
  sub_1000DB3C4(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000DB3C4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001897E0;
  sub_1000DB460(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000DB460(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000DB5D8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000DB588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000DB5B4(uint64_t a1)
{
  sub_1000DB3C4(a1);
  operator delete();
}

int *sub_1000DB5D8(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 1441;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 1441;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000DB7BC(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  void (***v5)(void);
  void (**v6)(void);
  int v7;

  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 5496) + 16) + 144))(*(_QWORD *)(*(_QWORD *)(a1 + 5496) + 16));
  v2 = sub_1000CD528(a1 + 5504);
  v3 = *(_QWORD *)(a1 + 6600);
  if (v3 == v2)
  {
    sub_1000DB974(a1 + 5168, a1 + 5328);
    *(_QWORD *)(a1 + 5512) = 0;
    v4 = *(_QWORD *)(a1 + 6200);
    if (v4)
    {
      v5 = *(void (****)(void))(a1 + 6192);
      do
      {
        --v4;
        v6 = *v5;
        v5 += 3;
        (*v6)();
      }
      while (v4);
    }
    *(_QWORD *)(a1 + 6200) = 0;
    if (*(_BYTE *)(a1 + 6184))
      *(_BYTE *)(a1 + 6184) = 0;
    *(_QWORD *)(a1 + 6600) = 0;
  }
  else
  {
    if (v2 < 0)
      v7 = v2;
    else
      v7 = -5;
    return -(uint64_t)-v7;
  }
  return v3;
}

_QWORD *sub_1000DB88C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000DBA00((uint64_t)a1, a2);
  *a1 = off_100189868;
  a1[45] = &off_100189968;
  a1[46] = &off_100189990;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100189868;
  a1[45] = off_1001898F0;
  a1[46] = off_100189918;
  return a1;
}

void sub_1000DB910(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000DBA7C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DB934(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100189930);
  sub_1000DBA7C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000DB974(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  sub_100027CB4((_QWORD *)a1, (uint64_t *)a2);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 88) = v5;
  sub_100027CB4((_QWORD *)(a1 + 112), (uint64_t *)(a2 + 112));
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v7 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v7;
  return a1;
}

uint64_t sub_1000DBA00(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100189A00;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000DBA68(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DBA7C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100189A00;
  sub_1000DBD34(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000DBB18(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100189930);
  sub_1000DBA7C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000DBB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000DBBA0(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000DBBEC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100189930);
  sub_1000DBA7C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000DBC24(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100189930);
  sub_1000DBA7C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_1000DBC74(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100189930);
  sub_1000DBA7C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DBCB4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100189930);
  sub_1000DBA7C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1000DBD10(uint64_t a1)
{
  sub_1000DBA7C(a1);
  operator delete();
}

uint64_t sub_1000DBD34(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000DBE84((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000DBE5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_1000DBE84(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 1409;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 1409;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000DC068(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000DB7BC(a1);
  if (*(_BYTE *)(a1 + 5160))
  {
    sub_1000DC0BC(a1);
    *(_BYTE *)(a1 + 5160) = 0;
  }
  return v2;
}

uint64_t sub_1000DC0BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  char v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t *v91;
  _BYTE v92[25];
  unint64_t v93;
  char v94;
  __int128 v95;
  _BYTE v96[25];
  uint64_t v97;
  std::__shared_weak_count *v98;
  _OWORD v99[2];
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  char v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  __int128 v107;
  std::__shared_weak_count *v108;
  char v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  _OWORD v112[2];
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  char v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  __int128 v120;
  unint64_t v121;
  char v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  _OWORD v125[2];
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  char v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  __int128 v133;
  unint64_t v134;
  char v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  char v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count *v147;
  __int128 v148;
  int64_t v149;
  unint64_t v150;
  _BYTE v151[536];
  __int128 v152;
  __int128 v153;
  char v154;
  __int128 v155;
  __int128 v156;
  char v157;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v91 = &v3[40 * v2];
    do
    {
      v5 = *v3;
      v4 = (std::__shared_weak_count *)v3[1];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      *(_OWORD *)v96 = *((_OWORD *)v3 + 1);
      *(_OWORD *)&v96[9] = *(_OWORD *)((char *)v3 + 25);
      v8 = v3[6];
      v9 = *(_OWORD *)(v3 + 7);
      v10 = *(_OWORD *)(v3 + 11);
      v155 = *(_OWORD *)(v3 + 9);
      v156 = v10;
      v157 = *((_BYTE *)v3 + 104);
      v12 = v3[14];
      v11 = (std::__shared_weak_count *)v3[15];
      if (v11)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v95 = *((_OWORD *)v3 + 8);
      v93 = v3[18];
      v94 = *((_BYTE *)v3 + 152);
      v16 = v3[20];
      v15 = (std::__shared_weak_count *)v3[21];
      if (v15)
      {
        v17 = (unint64_t *)&v15->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      *(_OWORD *)v92 = *((_OWORD *)v3 + 11);
      *(_OWORD *)&v92[9] = *(_OWORD *)((char *)v3 + 185);
      v19 = v3[26];
      v20 = *(_OWORD *)(v3 + 27);
      v21 = *(_OWORD *)(v3 + 31);
      v152 = *(_OWORD *)(v3 + 29);
      v153 = v21;
      v154 = *((_BYTE *)v3 + 264);
      v23 = v3[34];
      v22 = (std::__shared_weak_count *)v3[35];
      if (v22)
      {
        v24 = (unint64_t *)&v22->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = 0;
      v108 = (std::__shared_weak_count *)v3[38];
      v109 = *((_BYTE *)v3 + 312);
      v107 = *((_OWORD *)v3 + 18);
      v110 = v5;
      v111 = v4;
      v112[0] = *(_OWORD *)v96;
      *(_OWORD *)((char *)v112 + 9) = *(_OWORD *)&v96[9];
      v114 = v9;
      v115 = v155;
      v116 = v156;
      v117 = v157;
      v113 = v8;
      v118 = v12;
      v119 = v11;
      v120 = v95;
      v122 = v94;
      v121 = v93;
      v97 = v16;
      v98 = v15;
      *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)&v92[9];
      v99[0] = *(_OWORD *)v92;
      v101 = v20;
      v104 = v154;
      v102 = v152;
      v103 = v153;
      v100 = v19;
      v105 = v23;
      v106 = v22;
      v27 = v108;
      v151[0] = 0;
      v151[528] = 0;
      while (!sub_10002C4A4((uint64_t)&v110, (uint64_t)&v97))
      {
        if (v121 >= (unint64_t)v27 || v26 == -1)
          break;
        if (sub_1000BF0D4())
        {
          *(_QWORD *)&v148 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1274:32)]";
          *((_QWORD *)&v148 + 1) = 104;
          LODWORD(v149) = 2;
          sub_10003722C(&v136, &v148);
          sub_100005A0C(&v144, (uint64_t)"sg: ", 4);
          sub_10011E628(&v144, &v110);
          std::ostream::~ostream(&v144, off_100171F10);
          sub_100037460((uint64_t)&v136);
          std::ios::~ios(&v145);
        }
        v136 = 0;
        v137 = v27;
        v138 = 2;
        sub_100075798(&v110, (uint64_t)&v136, (uint64_t)&v148);
        v29 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
        {
          if (*(_BYTE *)(v29 + 224))
            v30 = v29 + 40;
          else
            v30 = 0;
        }
        else
        {
          v30 = 0;
        }
        sub_1000CD820(v30, *(_QWORD *)(a1 + 8), (char **)&v148);
        v31 = v149;
        v32 = v149 >= 0 || (_DWORD)v149 == 0;
        v33 = v32;
        if (v32)
        {
          v34 = v150;
          if (sub_10002E788((uint64_t)&v110, (uint64_t)&v97, v150, v149))
          {
            v123 = v110;
            v124 = v111;
            if (v111)
            {
              v38 = (unint64_t *)&v111->__shared_owners_;
              do
                v39 = __ldxr(v38);
              while (__stxr(v39 + 1, v38));
            }
            v125[0] = v112[0];
            *(_OWORD *)((char *)v125 + 9) = *(_OWORD *)((char *)v112 + 9);
            v126 = v113;
            v127 = v114;
            v128 = v115;
            v129 = v116;
            v130 = v117;
            v131 = v118;
            v132 = v119;
            if (v119)
            {
              v40 = (unint64_t *)&v119->__shared_owners_;
              do
                v41 = __ldxr(v40);
              while (__stxr(v41 + 1, v40));
            }
            v133 = v120;
            v134 = v121;
            v135 = v122;
            sub_10002E74C((uint64_t)&v123, (uint64_t)&v97, v34, v31, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v136);
            sub_100037314((uint64_t)v151, (uint64_t)&v136);
            v42 = v147;
            if (v147)
            {
              v43 = (unint64_t *)&v147->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            v45 = v146;
            if (v146)
            {
              v46 = (unint64_t *)&v146->__shared_owners_;
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
            v48 = v143;
            if (v143)
            {
              v49 = (unint64_t *)&v143->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = v142;
            if (v142)
            {
              v52 = (unint64_t *)&v142->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v54 = v141;
            if (v141)
            {
              v55 = (unint64_t *)&v141->__shared_owners_;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            v57 = v139;
            if (v139)
            {
              v58 = (unint64_t *)&v139->__shared_owners_;
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            v60 = v132;
            if (v132)
            {
              v61 = (unint64_t *)&v132->__shared_owners_;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
            v63 = v124;
            if (v124)
            {
              v64 = (unint64_t *)&v124->__shared_owners_;
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
            sub_10002CA7C((uint64_t)v151, (uint64_t)&v136);
            sub_100037358((uint64_t)&v110, (uint64_t)&v136);
            v66 = v140;
            if (v140)
            {
              v67 = (unint64_t *)&v140->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            v69 = v137;
            if (v137)
            {
              v70 = (unint64_t *)&v137->__shared_owners_;
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
            sub_10002C64C((uint64_t)v151, (uint64_t)&v136);
            sub_100037358((uint64_t)&v97, (uint64_t)&v136);
            v72 = v140;
            if (v140)
            {
              v73 = (unint64_t *)&v140->__shared_owners_;
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
            }
            v75 = v137;
            if (v137)
            {
              v76 = (unint64_t *)&v137->__shared_owners_;
              do
                v77 = __ldaxr(v76);
              while (__stlxr(v77 - 1, v76));
              if (!v77)
              {
                ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                std::__shared_weak_count::__release_weak(v75);
              }
            }
          }
          sub_10002D5FC((uint64_t)&v110, v31);
          v26 += v31;
        }
        v35 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
        if (!*((_QWORD *)&v148 + 1))
          goto LABEL_42;
        v36 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
          if ((v33 & 1) == 0)
            break;
        }
        else
        {
LABEL_42:
          if ((v33 & 1) == 0)
            break;
        }
      }
      sub_10002EB64((uint64_t)v151);
      v78 = v106;
      if (v106)
      {
        v79 = (unint64_t *)&v106->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = v98;
      if (v98)
      {
        v82 = (unint64_t *)&v98->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v84 = v119;
      if (v119)
      {
        v85 = (unint64_t *)&v119->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v87 = v111;
      if (v111)
      {
        v88 = (unint64_t *)&v111->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      v3 += 40;
    }
    while (v3 != v91);
  }
  sub_1000DCBE0((void **)(a1 + 16));
  sub_1000C29D8((unint64_t *)a1);
  return a1;
}

void sub_1000DC95C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;

  if (!a2)
    _Unwind_Resume(a1);
  v59 = (std::__shared_weak_count *)STACK[0x4E0];
  if (STACK[0x4E0])
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(p_shared_owners);
    while (__stlxr(v61 - 1, p_shared_owners));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  sub_10002EB64((uint64_t)&STACK[0x508]);
  sub_100012168(a10);
  sub_100012168((uint64_t)&a38);
  sub_100012168(a11);
  sub_100012168((uint64_t)&a58);
  sub_1000054BC(a1);
}

void **sub_1000DCBE0(void **a1)
{
  char *v2;
  char *v3;

  v2 = (char *)a1[1];
  if (v2)
  {
    v3 = (char *)*a1;
    do
    {
      --v2;
      sub_100012168((uint64_t)(v3 + 272));
      sub_100012168((uint64_t)(v3 + 160));
      sub_100012168((uint64_t)(v3 + 112));
      sub_100012168((uint64_t)v3);
      v3 += 320;
    }
    while (v2);
  }
  if (a1[2] && a1 + 3 != *a1)
    operator delete(*a1);
  return a1;
}

unint64_t *sub_1000DCC60(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  *a1 = 0;
  v3 = (unint64_t *)atomic_load(a2);
  if (!v3)
    goto LABEL_9;
  v4 = atomic_load(v3);
  if (!v4)
    goto LABEL_8;
  while (1)
  {
    v5 = __ldaxr(v3);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_7;
    }
    if (!__stlxr(v4 + 1, v3))
      break;
LABEL_7:
    v4 = v5;
    if (!v5)
      goto LABEL_8;
  }
  v7 = (unint64_t *)v3[41];
  if (v7)
  {
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v3[42] = v8;
  }
  if (!sub_1000DCD30((uint64_t)v3))
  {
    do
      v9 = __ldaxr(v3);
    while (__stlxr(v9 - 1, v3));
    if (v9 == 1)
    {
      v10 = v3[4];
      v3[4] = -1;
      sub_1000C2A18((uint64_t)v3, v10, 1u);
    }
LABEL_8:
    v3 = 0;
  }
LABEL_9:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL sub_1000DCD30(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;

  v2 = (unsigned int *)(a1 + 24);
  v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
  {
    v4 = atomic_load((unint64_t *)a1);
    return v4 > 1;
  }
  else
  {
    v6 = (unint64_t *)(a1 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = atomic_load(v2);
    if (v8 != 2 && !*(_BYTE *)(a1 + 344))
      sub_1000DCDDC(a1 + 24, 1u, 5u);
    do
      v9 = __ldaxr(v6);
    while (__stlxr(v9 - 1, v6));
    v10 = atomic_load((unint64_t *)a1);
    if (v10 < 2)
    {
      return 0;
    }
    else
    {
      v11 = atomic_load(v2);
      return v11 == 2;
    }
  }
}

BOOL sub_1000DCDDC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)&v4 = a1;
  *((_QWORD *)&v4 + 1) = __PAIR64__(a3, a2);
  v5 = a1;
  v6 = v4;
  return sub_1000DCE1C((uint64_t)&v4, (uint64_t)&v5, 0);
}

BOOL sub_1000DCE1C(uint64_t a1, uint64_t a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep a3)
{
  std::chrono::steady_clock::time_point v6;
  unsigned int v7;
  unsigned int *v8;
  int v9;
  unsigned int v10;
  int v11;
  std::chrono::steady_clock::time_point v12;

  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = 0;
  while (1)
  {
    v8 = *(unsigned int **)a1;
    v9 = *(_DWORD *)(a1 + 12);
    if ((v9 - 1) < 2 || v9 == 5)
      v10 = atomic_load(v8);
    else
      v10 = *v8;
    v11 = *(_DWORD *)(a1 + 8);
    if (v10 != v11)
      break;
    if (v7 <= 0x3F)
    {
      ++v7;
    }
    else
    {
      v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - v6.__d_.__rep_;
      if (a3 && v12.__d_.__rep_ > a3 || sub_1000DCED4(a2, v12.__d_.__rep_))
        return v10 != v11;
    }
  }
  return v10 != v11;
}

uint64_t sub_1000DCED4(uint64_t a1, uint64_t a2)
{
  std::__cxx_contention_t v3;
  unsigned int *v4;
  int v5;
  unsigned int v6;

  if (a2 < 64001)
  {
    if (a2 >= 4001)
      sched_yield();
    return 0;
  }
  v3 = std::__libcpp_atomic_monitor(*(const void **)a1);
  v4 = *(unsigned int **)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 20);
  if ((v5 - 1) < 2 || v5 == 5)
    v6 = atomic_load(v4);
  else
    v6 = *v4;
  if (v6 == *(_DWORD *)(a1 + 16))
  {
    std::__libcpp_atomic_wait(*(const void **)a1, v3);
    return 0;
  }
  return 1;
}

void sub_1000DCF60(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int64_t v4;
  unint64_t v5;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a3 - *a2;
  v5 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 6);
  if (v5 <= a1[2])
  {
    v11 = *a2;
    sub_1000DD148((uint64_t)a1, &v11, v5, *a1, a1[1]);
    a1[1] = v5;
  }
  else
  {
    if (v5 >= 0x66666666666667)
      sub_1000158AC("get_next_capacity, allocator's max size reached");
    v8 = operator new(v4);
    v9 = (uint64_t *)*a1;
    if (*a1)
    {
      sub_1000DD054(a1);
      if (a1 + 3 != v9)
        operator delete(v9);
    }
    a1[1] = 0;
    a1[2] = v5;
    *a1 = (uint64_t)v8;
    v10 = *a2;
    v12 = *a3;
    v13 = v10;
    sub_1000DD0B8(a1, &v13, &v12);
  }
}

uint64_t *sub_1000DD054(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = result[1];
  if (v2)
  {
    v3 = *result;
    do
    {
      --v2;
      sub_100012168(v3 + 272);
      sub_100012168(v3 + 160);
      sub_100012168(v3 + 112);
      result = (uint64_t *)sub_100012168(v3);
      v3 += 320;
    }
    while (v2);
  }
  v1[1] = 0;
  return result;
}

void sub_1000DD0B8(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1[1];
  v5 = *a1 + 320 * v4;
  v6 = *a2;
  v7 = *a3;
  v8 = v5;
  if (*a2 != *a3)
  {
    do
    {
      sub_10002E8C4(v8, v6);
      sub_10002E8C4(v8 + 160, v6 + 160);
      v6 += 320;
      v8 += 320;
    }
    while (v6 != v7);
    v4 = a1[1];
  }
  a1[1] = v4 - 0x3333333333333333 * ((v8 - v5) >> 6);
}

void sub_1000DD148(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v9 = a5 - a3;
  if (a5 >= a3)
  {
    if (a3)
    {
      v13 = *a2;
      v14 = a3;
      do
      {
        --v14;
        sub_1000DB974(a4, v13);
        sub_1000DB974(a4 + 160, v13 + 160);
        a4 += 320;
        v13 += 320;
      }
      while (v14);
    }
    if (a5 != a3)
    {
      v15 = a3 - a5;
      do
      {
        sub_100012168(a4 + 272);
        sub_100012168(a4 + 160);
        sub_100012168(a4 + 112);
        sub_100012168(a4);
        a4 += 320;
        v12 = __CFADD__(v15++, 1);
      }
      while (!v12);
    }
  }
  else
  {
    v10 = *a2;
    if (a5)
    {
      v11 = a5;
      do
      {
        --v11;
        sub_1000DB974(a4, v10);
        sub_1000DB974(a4 + 160, v10 + 160);
        v10 += 320;
        a4 += 320;
      }
      while (v11);
    }
    *a2 = v10;
    if (a3 != a5)
    {
      do
      {
        sub_10002E8C4(a4, v10);
        sub_10002E8C4(a4 + 160, v10 + 160);
        v10 += 320;
        a4 += 320;
        v12 = __CFADD__(v9++, 1);
      }
      while (!v12);
    }
  }
}

void sub_1000DD26C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v10 = *a1;
  v11 = sub_1000DD3FC((uint64_t)a1, a3);
  if (v11 >= 0x66666666666667)
    sub_1000158AC("get_next_capacity, allocator's max size reached");
  v12 = v11;
  v13 = operator new(320 * v11);
  sub_1000DD474(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

__n128 sub_1000DD318(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v3 = *(_OWORD *)(a2 + 72);
  v4 = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v4;
  *(_OWORD *)(a1 + 72) = v3;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v5 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v5;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  *(_OWORD *)(a1 + 176) = v6;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v7 = *(_OWORD *)(a2 + 232);
  v8 = *(_OWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v8;
  *(_OWORD *)(a1 + 232) = v7;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  result = *(__n128 *)(a2 + 288);
  *(__n128 *)(a1 + 288) = result;
  v10 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v10;
  return result;
}

unint64_t sub_1000DD3FC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = 0x66666666666666;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0x66666666666666 - v4 < a2 - v4 + v3)
    sub_1000158AC("get_next_capacity, allocator's max size reached");
  v5 = v4 >> 61;
  v6 = 8 * v4;
  if (v5 > 4)
    v7 = -1;
  else
    v7 = v6;
  v8 = v6 / 5;
  if (v5)
    v8 = v7;
  v9 = v3 + a2;
  if (v8 < 0x66666666666666)
    v2 = v8;
  if (v9 <= v2)
    return v2;
  else
    return v9;
}

void sub_1000DD474(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t i;
  uint64_t v12;

  v10 = *a1;
  sub_1000DD560((uint64_t)a1, *a1, a4, *a1 + 320 * a1[1], a2, a5, a6);
  if (v10)
  {
    for (i = a1[1]; i; v10 += 320)
    {
      --i;
      sub_100012168(v10 + 272);
      sub_100012168(v10 + 160);
      sub_100012168(v10 + 112);
      sub_100012168(v10);
    }
    if (a1 + 3 != (uint64_t *)*a1)
      operator delete((void *)*a1);
  }
  v12 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v12;
  a1[2] = a3;
}

void sub_1000DD53C(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    if ((void *)(v2 + 24) != v1)
      operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1000DD560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[3];

  v11 = a3;
  v16[2] = a1;
  if (a2 != a3)
  {
    v12 = a2;
    do
    {
      sub_1000DD318(a5, v12);
      v12 += 320;
      a5 += 320;
    }
    while (v12 != v11);
  }
  sub_1000DD318(a5, a7);
  if (v11 != a4)
  {
    v13 = a5 + 320 * a6;
    do
    {
      sub_1000DD318(v13, v11);
      v11 += 320;
      v13 = v14 + 320;
    }
    while (v11 != a4);
  }
  v16[0] = 0;
  v16[1] = 0;
  return sub_1000DD610(v16);
}

uint64_t *sub_1000DD610(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      sub_100012168(v2 + 272);
      sub_100012168(v2 + 160);
      sub_100012168(v2 + 112);
      sub_100012168(v2);
      v3 = a1[1];
      v2 = *a1 + 320;
      *a1 = v2;
    }
    while (v2 != v3);
  }
  return a1;
}

void sub_1000DD67C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v10 = *a1;
  v11 = sub_10006166C((uint64_t)a1, a3);
  if (v11 >= 0x555555555555556)
    sub_1000158AC("get_next_capacity, allocator's max size reached");
  v12 = v11;
  v13 = operator new(24 * v11);
  sub_1000DD728(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

void sub_1000DD728(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  void (***v12)(uint64_t);
  void (**v13)(uint64_t);
  uint64_t v14;

  v10 = *a1;
  sub_1000DD804((uint64_t)a1, *a1, a4, *a1 + 24 * a1[1], a2, a5, a6);
  if (v10)
  {
    v11 = a1[1];
    if (v11)
    {
      v12 = (void (***)(uint64_t))v10;
      do
      {
        --v11;
        v13 = *v12;
        v12 += 3;
        (*v13)(v10);
        v10 = (uint64_t)v12;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1)
      operator delete((void *)*a1);
  }
  v14 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v14;
  a1[2] = a3;
}

void sub_1000DD7E0(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    if ((void *)(v2 + 24) != v1)
      operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000DD804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v12 = a5;
  if (a2 != a3)
  {
    v14 = 0;
    do
    {
      sub_10011E364(a5 + v14, a2 + v14);
      v14 += 24;
    }
    while (a2 + v14 != a3);
    v12 = a5 + v14;
  }
  result = sub_10011E364(v12, a7);
  if (a3 != a4)
  {
    v16 = 0;
    v17 = v12 + 24 * a6;
    do
    {
      result = sub_10011E364(v17 + v16, a3 + v16);
      v16 += 24;
    }
    while (a3 + v16 != a4);
  }
  return result;
}

void sub_1000DD8B8(_Unwind_Exception *exception_object)
{
  void (***v1)(_QWORD);
  void (***v2)(_QWORD);
  void (***v4)(_QWORD);
  void (**v5)(_QWORD);

  if (v2 != v1)
  {
    v4 = v1;
    do
    {
      v5 = *v4;
      v4 += 3;
      (*v5)(v1);
      v1 = v4;
    }
    while (v4 != v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000DD96C(uint64_t a1)
{
  uint64_t v2;
  void (***v3)(void);
  void (**v4)(void);

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(void (****)(void))a1;
    do
    {
      --v2;
      v4 = *v3;
      v3 += 3;
      (*v4)();
    }
    while (v2);
  }
  if (*(_QWORD *)(a1 + 16) && a1 + 24 != *(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1000DD9D8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100189B50);
  sub_1000DDBCC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000DDA10(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100189B50);
  sub_1000DDBCC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DDA50(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100189B50);
  sub_1000DDBCC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000DDAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000DDAD8(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000DDB24(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100189B50);
  sub_1000DDBCC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000DDB74(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100189B50);
  sub_1000DDBCC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000DDBCC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100189C20;
  sub_1000DDC68(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000DDC68(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000DDDE0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000DDD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000DDDBC(uint64_t a1)
{
  sub_1000DDBCC(a1);
  operator delete();
}

int *sub_1000DDDE0(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 1513;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 1513;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

BOOL sub_1000DDFC4(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;

  while (1)
  {
    v2 = *a1;
    if ((*a1 & 0x8000000000000000) != 0)
    {
      v3 = *a1;
    }
    else
    {
      do
      {
        v3 = __ldaxr(a1);
        if (v3 == v2)
        {
          if (!__stlxr(v2 + 1, a1))
            return v2 != -1;
        }
        else
        {
          __clrex();
        }
        v2 = v3;
      }
      while ((v3 & 0x8000000000000000) == 0);
    }
    v2 = v3;
    if (v3 != -1)
      break;
    if ((sub_1000DE050(a1, 0) & 1) == 0)
    {
      v2 = -1;
      return v2 != -1;
    }
  }
  return v2 != -1;
}

uint64_t sub_1000DE050(unint64_t *a1, int a2)
{
  unint64_t v2;
  BOOL v3;
  BOOL v4;
  char *v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  std::condition_variable *v11;
  unint64_t v12;
  _BOOL4 v13;
  _BOOL4 v14;
  std::unique_lock<std::mutex> v16;

  v2 = atomic_load(a1);
  v3 = v2 == 0;
  v4 = v2 != -1;
  if (a2)
    v4 = v3;
  if (!v4)
  {
    v16.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E1E0((unint64_t)a1);
    v16.__owns_ = 1;
    std::mutex::lock(v16.__m_);
    v7 = sub_10011E2A0((unint64_t)a1);
    v8 = atomic_load(a1);
    v9 = v8 == 0;
    v10 = v8 != -1;
    if (a2)
      v10 = v9;
    if (!v10)
    {
      v11 = (std::condition_variable *)v7;
      do
      {
        std::condition_variable::wait(v11, &v16);
        v12 = atomic_load(a1);
        v13 = v12 == 0;
        v14 = v12 != -1;
        if (a2)
          v14 = v13;
      }
      while (!v14);
    }
    if (v16.__owns_)
      std::mutex::unlock(v16.__m_);
  }
  return 1;
}

void sub_1000DE128(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1000DE13C(uint64_t (*a1)(__int128 *), __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v29;
  _OWORD v30[2];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v40 = v4;
  v41[0] = v5;
  *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)a2 + 25);
  v42 = *((_QWORD *)a2 + 6);
  v43 = *(__int128 *)((char *)a2 + 56);
  v44 = *(__int128 *)((char *)a2 + 72);
  v45 = *(__int128 *)((char *)a2 + 88);
  v46 = *((_BYTE *)a2 + 104);
  v6 = a2[7];
  v7 = a2[8];
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  v47 = v6;
  v48 = v7;
  v50 = *((_BYTE *)a2 + 152);
  v49 = *((_QWORD *)a2 + 18);
  v8 = *a3;
  v9 = a3[1];
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a3 + 25);
  v31 = *((_QWORD *)a3 + 6);
  v32 = *(__int128 *)((char *)a3 + 56);
  v10 = *(__int128 *)((char *)a3 + 72);
  v11 = *(__int128 *)((char *)a3 + 88);
  v35 = *((_BYTE *)a3 + 104);
  v34 = v11;
  v33 = v10;
  v12 = a3[7];
  v13 = a3[8];
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 15) = 0;
  v36 = v12;
  v37 = v13;
  v14 = *((_QWORD *)a3 + 18);
  v39 = *((_BYTE *)a3 + 152);
  v38 = v14;
  v15 = sub_1000DE358(a1, &v40, (uint64_t)&v29, a4, 0);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v15;
}

void sub_1000DE32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  sub_100012168(v30);
  sub_100012168((uint64_t)&a9);
  sub_100012168(v29);
  sub_100012168((uint64_t)&a29);
  _Unwind_Resume(a1);
}

unint64_t sub_1000DE358(uint64_t (*a1)(__int128 *), _QWORD *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v7;
  unint64_t v8;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v21;
  _BYTE v25[112];
  uint64_t v26;
  _QWORD v27[2];
  char v28;
  _BYTE v29[248];
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  _BYTE v34[544];

  v7 = 0;
  v8 = *(_QWORD *)(a3 + 144);
  v34[0] = 0;
  v34[528] = 0;
  while (!sub_10002C4A4((uint64_t)a2, a3))
  {
    if (a2[18] >= v8 || v7 >= a4)
      break;
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v32 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = io_result_t (&)(const sg_entry &)]";
      *((_QWORD *)&v32 + 1) = 119;
      v33 = 2;
      sub_10003722C(v27, &v32);
      sub_100005A0C(&v30, (uint64_t)"sg: ", 4);
      sub_10011E628(&v30, a2);
      std::ostream::~ostream(&v30, off_100171F10);
      sub_100037460((uint64_t)v27);
      std::ios::~ios(&v31);
    }
    v27[0] = 0;
    v27[1] = v8;
    v28 = 2;
    sub_100075798(a2, (uint64_t)v27, (uint64_t)&v32);
    v10 = a1(&v32);
    v12 = v10;
    v13 = v10 >= 0 || (_DWORD)v10 == 0;
    v14 = v13;
    if (v13)
    {
      v15 = v11;
      if (sub_10002E788((uint64_t)a2, a3, v11, v10))
      {
        sub_10002E8C4((uint64_t)v25, (uint64_t)a2);
        sub_10002E74C((uint64_t)v25, a3, v15, v12, a4, (uint64_t)v27);
        sub_100037314((uint64_t)v34, (uint64_t)v27);
        sub_10002E7A4((uint64_t)v27);
        sub_100012168((uint64_t)&v26);
        sub_100012168((uint64_t)v25);
        sub_10002CA7C((uint64_t)v34, (uint64_t)v27);
        sub_100037358((uint64_t)a2, (uint64_t)v27);
        sub_100012168((uint64_t)v29);
        sub_100012168((uint64_t)v27);
        sub_10002C64C((uint64_t)v34, (uint64_t)v27);
        sub_100037358(a3, (uint64_t)v27);
        sub_100012168((uint64_t)v29);
        sub_100012168((uint64_t)v27);
      }
      if ((a5 & 1) != 0)
        sub_10002D5FC((uint64_t)a2, v12);
      else
        sub_10002D7D4((uint64_t)a2, v12);
      v7 += v12;
    }
    else
    {
      if ((int)v10 >= 0)
        v19 = v10;
      else
        v19 = -(int)v10;
      v21 = -v19;
    }
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if ((v14 & 1) == 0)
      goto LABEL_35;
  }
  v21 = v7;
LABEL_35:
  sub_10002EB64((uint64_t)v34);
  return v21;
}

void sub_1000DE614(_Unwind_Exception *a1)
{
  sub_100012168((uint64_t)&STACK[0x2F0]);
  sub_10002EB64((uint64_t)&STACK[0x320]);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DE688(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100189D70);
  sub_1000DE87C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000DE6C0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100189D70);
  sub_1000DE87C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DE700(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100189D70);
  sub_1000DE87C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000DE754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000DE788(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000DE7D4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100189D70);
  sub_1000DE87C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000DE824(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100189D70);
  sub_1000DE87C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000DE87C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100189E40;
  sub_1000DE918(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000DE918(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000DEA90((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000DEA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000DEA6C(uint64_t a1)
{
  sub_1000DE87C(a1);
  operator delete();
}

int *sub_1000DEA90(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 2061;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 2061;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000DEC74(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100189F90);
  sub_1000DEE68(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000DECAC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100189F90);
  sub_1000DEE68(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DECEC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100189F90);
  sub_1000DEE68(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000DED40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000DED74(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000DEDC0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100189F90);
  sub_1000DEE68(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000DEE10(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100189F90);
  sub_1000DEE68(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000DEE68(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018A060;
  sub_1000DEF04(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000DEF04(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000DF07C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000DF02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000DF058(uint64_t a1)
{
  sub_1000DEE68(a1);
  operator delete();
}

int *sub_1000DF07C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 2071;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 2071;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000DF260(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018A1B0);
  sub_1000DF454(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000DF298(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018A1B0);
  sub_1000DF454(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DF2D8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018A1B0);
  sub_1000DF454(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000DF32C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000DF360(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000DF3AC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018A1B0);
  sub_1000DF454(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000DF3FC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018A1B0);
  sub_1000DF454(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000DF454(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018A280;
  sub_1000DF4F0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000DF4F0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000DF668((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000DF618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000DF644(uint64_t a1)
{
  sub_1000DF454(a1);
  operator delete();
}

int *sub_1000DF668(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 2311;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 2311;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000DF84C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018A3D0);
  sub_1000DFA40(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000DF884(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018A3D0);
  sub_1000DFA40(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DF8C4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018A3D0);
  sub_1000DFA40(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000DF918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000DF94C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000DF998(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018A3D0);
  sub_1000DFA40(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000DF9E8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018A3D0);
  sub_1000DFA40(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000DFA40(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018A4A0;
  sub_1000DFADC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000DFADC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000DFC54((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000DFC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000DFC30(uint64_t a1)
{
  sub_1000DFA40(a1);
  operator delete();
}

int *sub_1000DFC54(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 2321;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 2321;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_1000DFE38(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10008669C(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1000DFE90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000DFEAC(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10008669C(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1000DFF04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000DFF20(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000E0008((uint64_t)a1, a2);
  *a1 = off_10018A568;
  a1[45] = &off_10018A668;
  a1[46] = &off_10018A690;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018A568;
  a1[45] = off_10018A5F0;
  a1[46] = off_10018A618;
  return a1;
}

void sub_1000DFFA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000E0084(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DFFC8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018A630);
  sub_1000E0084(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000E0008(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018A700;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000E0070(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E0084(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018A700;
  sub_1000E033C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000E0120(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018A630);
  sub_1000E0084(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000E0174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000E01A8(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000E01F4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018A630);
  sub_1000E0084(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000E022C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018A630);
  sub_1000E0084(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_1000E027C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018A630);
  sub_1000E0084(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000E02BC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018A630);
  sub_1000E0084(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1000E0318(uint64_t a1)
{
  sub_1000E0084(a1);
  operator delete();
}

uint64_t sub_1000E033C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000E048C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000E0464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_1000E048C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 158;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 158;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void sub_1000E0670(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

const char *sub_1000E0694()
{
  return "File too small.";
}

void sub_1000E06A0(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13;
  _QWORD v14[10];
  char v15;
  uint64_t v16;
  void *v17[2];
  unsigned __int8 v18;

  v4 = (char *)(*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  sub_100005870(v17, v4);
  sub_100027EC8((uint64_t)v12);
  if ((v18 & 0x80u) == 0)
    v5 = v17;
  else
    v5 = (void **)v17[0];
  if ((v18 & 0x80u) == 0)
    v6 = v18;
  else
    v6 = (uint64_t)v17[1];
  v7 = sub_100005A0C(&v13, (uint64_t)v5, v6);
  v8 = sub_100005A0C(v7, (uint64_t)" header size ", 13);
  v9 = (_QWORD *)std::ostream::operator<<(v8, a1[2]);
  v10 = sub_100005A0C(v9, (uint64_t)", but file size only ", 21);
  std::ostream::operator<<(v10, a1[3]);
  sub_100005598((uint64_t)v14, a2);
  *(_QWORD *)((char *)v12
  v13 = v11;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  std::streambuf::~streambuf(v14);
  std::ios::~ios(&v16);
  if ((char)v18 < 0)
    operator delete(v17[0]);
}

void sub_1000E07D0(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_100012168(v4 - 48);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1000E0840(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018A880);
  sub_1000E0A34(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000E0878(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018A880);
  sub_1000E0A34(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000E08B8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018A880);
  sub_1000E0A34(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000E090C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000E0940(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000E098C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018A880);
  sub_1000E0A34(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000E09DC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018A880);
  sub_1000E0A34(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000E0A34(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018A950;
  sub_1000E0AD0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000E0AD0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000E0C48((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000E0BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000E0C24(uint64_t a1)
{
  sub_1000E0A34(a1);
  operator delete();
}

int *sub_1000E0C48(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 2831;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 2831;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000E0E2C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018AAA0);
  sub_1000E1020(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000E0E64(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018AAA0);
  sub_1000E1020(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000E0EA4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018AAA0);
  sub_1000E1020(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000E0EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000E0F2C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000E0F78(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018AAA0);
  sub_1000E1020(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000E0FC8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018AAA0);
  sub_1000E1020(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000E1020(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018AB70;
  sub_1000E10BC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000E10BC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000E1234((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000E11E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000E1210(uint64_t a1)
{
  sub_1000E1020(a1);
  operator delete();
}

int *sub_1000E1234(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 2828;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 2828;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void sub_1000E141C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1000E1440(uint64_t a1)
{
  free(*(void **)(a1 + 24));
}

uint64_t sub_1000E1448(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_10018AC30))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_1000E1488(uint64_t *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD v27[5];

  v6 = *a1;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v8 = v7 + 1;
  if (v7 + 1 > 0x555555555555555)
    sub_100017E44();
  v13 = (uint64_t)(a1 + 2);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v6) >> 4);
  if (2 * v14 > v8)
    v8 = 2 * v14;
  if (v14 >= 0x2AAAAAAAAAAAAAALL)
    v15 = 0x555555555555555;
  else
    v15 = v8;
  v27[4] = a1 + 2;
  if (v15)
    v16 = (char *)sub_1000605A0(v13, v15);
  else
    v16 = 0;
  v17 = &v16[48 * v7];
  v27[0] = v16;
  v27[1] = v17;
  v27[3] = &v16[48 * v15];
  v18 = *a3;
  v19 = *a4;
  v20 = *a5;
  *(_QWORD *)v17 = *a2;
  v21 = a2[1];
  *((_QWORD *)v17 + 1) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = &v16[48 * v7];
  *((_QWORD *)v24 + 2) = v18;
  *((_QWORD *)v24 + 3) = v19;
  *((_QWORD *)v24 + 4) = v20;
  v24[40] = 0;
  v27[2] = v17 + 48;
  sub_1000E15D8(a1, v27);
  v25 = a1[1];
  sub_1000E1644((uint64_t)v27);
  return v25;
}

void sub_1000E15C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000E1644((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000E15D8(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 48);
    v2 -= 48;
    *(_OWORD *)(v4 - 48) = v5;
    v4 -= 48;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v6 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v4 + 25) = *(_OWORD *)(v2 + 25);
    *(_OWORD *)(v4 + 16) = v6;
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000E1644(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    sub_100012168(i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1000E1690(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = (char *)*a1;
  v6 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 2);
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x924924924924924)
    sub_100017E44();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - (uint64_t)v5) >> 2);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x492492492492492)
    v13 = 0x924924924924924;
  else
    v13 = v7;
  if (v13)
  {
    v14 = (char *)sub_1000E1804(v11, v13);
    v16 = v15;
  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  v17 = sub_1000D1ABC((uint64_t)&v14[28 * v6], a2, a3, *a4);
  v18 = v17 + 28;
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  if (v19 != (char *)*a1)
  {
    v21 = 0;
    do
    {
      v22 = v17 + v21;
      *(_QWORD *)(v22 - 28) = 0x16174656DLL;
      *(_DWORD *)(v22 - 20) = 512;
      *(_OWORD *)(v22 - 16) = *(_OWORD *)&v19[v21 - 16];
      v21 -= 28;
    }
    while (&v19[v21] != v20);
    v19 = (char *)*a1;
    v17 += v21;
  }
  *a1 = v17;
  a1[1] = v18;
  a1[2] = (uint64_t)&v14[28 * v16];
  if (v19)
    operator delete(v19);
  return v18;
}

void sub_1000E17EC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void *sub_1000E1804(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925)
    sub_100012320();
  return operator new(28 * a2);
}

uint64_t sub_1000E184C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = (char *)*a1;
  v6 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 2);
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x924924924924924)
    sub_100017E44();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - (uint64_t)v5) >> 2);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x492492492492492)
    v13 = 0x924924924924924;
  else
    v13 = v7;
  if (v13)
  {
    v14 = (char *)sub_1000E1804(v11, v13);
    v16 = v15;
  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  v17 = sub_1000D1ABC((uint64_t)&v14[28 * v6], a2, a3, *a4);
  v18 = v17 + 28;
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  if (v19 != (char *)*a1)
  {
    v21 = 0;
    do
    {
      v22 = v17 + v21;
      *(_QWORD *)(v22 - 28) = 0x16174656DLL;
      *(_DWORD *)(v22 - 20) = 512;
      *(_OWORD *)(v22 - 16) = *(_OWORD *)&v19[v21 - 16];
      v21 -= 28;
    }
    while (&v19[v21] != v20);
    v19 = (char *)*a1;
    v17 += v21;
  }
  *a1 = v17;
  a1[1] = v18;
  a1[2] = (uint64_t)&v14[28 * v16];
  if (v19)
    operator delete(v19);
  return v18;
}

void sub_1000E19A8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_1000E19C4()
{
  operator delete();
}

_QWORD *sub_1000E19D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10018AC50;
  result[1] = v3;
  return result;
}

uint64_t sub_1000E1A0C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10018AC50;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000E1A28(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8), a2, 0);
}

uint64_t sub_1000E1A3C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000E1A78()
{
}

_DWORD *sub_1000E1A84(_DWORD *result, int a2)
{
  unsigned int v2;
  _QWORD *exception;

  *result = a2;
  if ((a2 & 0xFFFFFFFE) != 0)
  {
    v2 = a2 & 0xFFFFFFFE;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    *exception = &off_100175450;
    exception[1] = "header_flags";
    *((_DWORD *)exception + 8) = v2;
  }
  return result;
}

unint64_t *sub_1000E1AF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t v7;
  unint64_t *v8;
  uint64_t *v9;
  char v10;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  uint64_t v17;

  v16 = 0;
  v17 = a2;
  sub_1000E1CDC(a1, a2, a3, &v14);
  if (v14 && !*(_BYTE *)(v14 + 344) || v14 && *(_BYTE *)(v14 + 344))
  {
    *a4 = 0;
    do
      v7 = __ldaxr(&v14);
    while (__stlxr(0, &v14));
LABEL_21:
    atomic_store(v7, a4);
    return sub_1000C29D8(&v14);
  }
  if (*(_BYTE *)(a1 + 736) && v15 != (_QWORD *)(a1 + 760))
  {
    do
    {
      sub_1000E219C(a1, a2, &v12);
      v16 = v12;
      sub_1000C4040(&v14, &v13);
      sub_1000C29D8(&v13);
      if (v14)
      {
        if (!*(_BYTE *)(v14 + 344))
          break;
      }
      v8 = (unint64_t *)sub_1000E2324((_QWORD *)a1);
      if (v8)
      {
        v16 = v8;
        sub_1000E23C8(a1, v8, a2, (unint64_t *)&v12);
        sub_1000C4040(&v14, (unint64_t *)&v12);
        sub_1000C29D8((unint64_t *)&v12);
        break;
      }
    }
    while (*(_BYTE *)(a1 + 736));
    std::mutex::lock((std::mutex *)(a1 + 776));
    v9 = sub_1000E376C((uint64_t **)(a1 + 752), v15, (unint64_t *)&v17, &v17, (uint64_t *)&v16);
    if (!v10)
      v9[5] = (uint64_t)v16;
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 840));
    std::mutex::unlock((std::mutex *)(a1 + 776));
    sub_1000E24E4(a1, 0, 0, 0);
    *a4 = 0;
    do
      v7 = __ldaxr(&v14);
    while (__stlxr(0, &v14));
    goto LABEL_21;
  }
  *a4 = 0;
  return sub_1000C29D8(&v14);
}

void sub_1000E1C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1000C29D8((unint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E1CDC(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  std::mutex *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  char v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  std::condition_variable *v44;
  uint64_t **v45;
  std::unique_lock<std::mutex> v46;
  unint64_t v47;
  unint64_t *v48;
  std::unique_lock<std::mutex> __lk;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t *v53;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v54;

  v50 = a2;
  v7 = (std::mutex *)(a1 + 776);
  v8 = (_QWORD *)(a1 + 760);
  v9 = (unint64_t *)(a1 + 1008);
  v10 = (unint64_t *)(a1 + 592);
  v43 = (unint64_t *)(a1 + 104);
  v44 = (std::condition_variable *)(a1 + 840);
  v45 = (uint64_t **)(a1 + 752);
  while (2)
  {
    __lk.__m_ = v7;
    __lk.__owns_ = 1;
    std::mutex::lock(v7);
    if (a3)
    {
      v11 = v50;
    }
    else
    {
      v16 = (_QWORD *)*v8;
      if (!*v8)
        goto LABEL_20;
      v11 = v50;
      v17 = v8;
      do
      {
        v18 = v16[4];
        v19 = v18 >= v50;
        if (v18 >= v50)
          v20 = v16;
        else
          v20 = v16 + 1;
        if (v19)
          v17 = v16;
        v16 = (_QWORD *)*v20;
      }
      while (*v20);
      if (v17 == v8 || v50 < v17[4] || (unint64_t *)v17[5] == v9)
      {
LABEL_20:
        v51 = 0;
        *a4 = 0;
        do
          v21 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0, (unint64_t *)&v51));
        atomic_store(v21, a4);
        a4[1] = (unint64_t)v8;
        sub_1000C29D8((unint64_t *)&v51);
        goto LABEL_23;
      }
    }
    v51 = (unint64_t *)v11;
    v52 = v9;
    v12 = sub_1000E2648(v45, (unint64_t *)&v51, (uint64_t *)&v51);
    v13 = v12;
    if (v14)
    {
      v51 = 0;
      *a4 = 0;
      do
        v15 = __ldaxr((unint64_t *)&v51);
      while (__stlxr(0, (unint64_t *)&v51));
      atomic_store(v15, a4);
      a4[1] = (unint64_t)v12;
      sub_1000C29D8((unint64_t *)&v51);
LABEL_23:
      v22 = 1;
      goto LABEL_24;
    }
    v48 = (unint64_t *)v12[5];
    if (v48 == v9)
    {
      v28 = (_QWORD *)*v8;
      if (*v8)
      {
        v29 = v50;
        v30 = v8;
        while (1)
        {
          v31 = v28[4];
          v32 = v31 >= v29;
          if (v31 >= v29)
            v33 = v28;
          else
            v33 = v28 + 1;
          if (v32)
            v30 = v28;
          v28 = (_QWORD *)*v33;
          if (!*v33)
          {
            if (v30 == v8)
              break;
            if (v29 < v30[4])
              break;
            v34 = (unint64_t *)v30[5];
            if (v34 != v9)
            {
              v35 = v34[45];
              if (v35)
              {
                if (!*(_BYTE *)(v35 + 344))
                  break;
              }
            }
            if (!*(_BYTE *)(a1 + 736))
              break;
            std::condition_variable::wait(v44, &__lk);
            v28 = (_QWORD *)*v8;
            v30 = v8;
            if (!*v8)
              break;
          }
        }
      }
      v22 = 0;
      goto LABEL_24;
    }
    sub_10003DEE8((uint64_t)&__lk);
    sub_1000DCC60(&v47, v48 + 45);
    if (v47 && !*(_BYTE *)(v47 + 344))
    {
      v23 = v50;
      if (*(_QWORD *)(v47 + 32) == v50)
      {
        *a4 = 0;
        do
          v37 = __ldaxr(&v47);
        while (__stlxr(0, &v47));
        atomic_store(v37, a4);
        a4[1] = (unint64_t)v13;
        goto LABEL_84;
      }
      if (*(_QWORD *)(v47 + 32) == -1)
      {
        v24 = v43;
        if ((a3 & 1) == 0)
        {
          v51 = 0;
          *a4 = 0;
          do
            v36 = __ldaxr((unint64_t *)&v51);
          while (__stlxr(0, (unint64_t *)&v51));
          goto LABEL_83;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (!a3)
      {
        v51 = 0;
        *a4 = 0;
        do
          v36 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0, (unint64_t *)&v51));
        goto LABEL_83;
      }
      v23 = v50;
    }
    v24 = v43;
LABEL_35:
    if (sub_1000E24E4(a1, 0, v23, 1u) != -1)
    {
      do
        v25 = __ldaxr(v10);
      while (__stlxr(v25 + 1, v10));
      v46.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E1E0((unint64_t)v48);
      v46.__owns_ = 1;
      std::mutex::lock(v46.__m_);
      v26 = sub_10011E2A0((unint64_t)v48);
      v54 = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
      v51 = (unint64_t *)&v48;
      v52 = &v47;
      v53 = &v50;
      sub_1000E27D4((std::condition_variable *)v26, &v46, &v54, (uint64_t)&v51);
      do
        v27 = __ldaxr(v10);
      while (__stlxr(v27 - 1, v10));
      if (v46.__owns_)
        std::mutex::unlock(v46.__m_);
      v22 = 3;
      goto LABEL_85;
    }
    v51 = 0;
    v38 = atomic_load(v24);
    if (!v38)
      goto LABEL_81;
    while (1)
    {
      v39 = __ldaxr(v24);
      if (v39 != v38)
      {
        __clrex();
        goto LABEL_71;
      }
      if (!__stlxr(v38 + 1, v24))
        break;
LABEL_71:
      v38 = v39;
      if (!v39)
        goto LABEL_81;
    }
    v40 = *(unint64_t **)(a1 + 432);
    v38 = (unint64_t)v24;
    if (v40)
    {
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      *(_QWORD *)(a1 + 440) = v41;
      v38 = (unint64_t)v24;
    }
LABEL_81:
    atomic_store(v38, (unint64_t *)&v51);
    *a4 = 0;
    do
      v36 = __ldaxr((unint64_t *)&v51);
    while (__stlxr(0, (unint64_t *)&v51));
LABEL_83:
    atomic_store(v36, a4);
    a4[1] = (unint64_t)v8;
    sub_1000C29D8((unint64_t *)&v51);
LABEL_84:
    v22 = 1;
LABEL_85:
    sub_1000C29D8(&v47);
LABEL_24:
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (v22 != 1)
    {
      if (!*(_BYTE *)(a1 + 736))
      {
        v51 = 0;
        *a4 = 0;
        do
          v42 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0, (unint64_t *)&v51));
        atomic_store(v42, a4);
        a4[1] = (unint64_t)v8;
        sub_1000C29D8((unint64_t *)&v51);
        return;
      }
      continue;
    }
    break;
  }
}

void sub_1000E213C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, int a14, unint64_t a15, uint64_t a16, std::mutex *a17, char a18)
{
  sub_1000C29D8(&a15);
  if (a18)
    std::mutex::unlock(a17);
  _Unwind_Resume(a1);
}

unint64_t *sub_1000E219C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13[5];

  v12 = 0;
  v6 = (std::mutex *)(a1 + 520);
  std::mutex::lock((std::mutex *)(a1 + 520));
  v7 = *(_QWORD *)(a1 + 512);
  if (v7)
  {
    v8 = *(unint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 480) + ((*(_QWORD *)(a1 + 504) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * (*(_QWORD *)(a1 + 504) & 0x1FFLL));
    ++*(_QWORD *)(a1 + 504);
    *(_QWORD *)(a1 + 512) = v7 - 1;
    sub_1000E2958(a1 + 472, 1);
    sub_1000E23C8(a1, v8, a2, v13);
    sub_1000C4040(&v12, v13);
    sub_1000C29D8(v13);
  }
  else
  {
    v8 = 0;
  }
  std::mutex::unlock(v6);
  v9 = atomic_load((unint64_t *)(a1 + 608));
  if (v9 + v7 >= *(_QWORD *)(a1 + 464))
  {
    sub_1000E24E4(a1, 0, 0, 0);
  }
  else
  {
    v13[0] = (unint64_t)_NSConcreteStackBlock;
    v13[1] = 0x40000000;
    v13[2] = (unint64_t)sub_1000E29B4;
    v13[3] = (unint64_t)&unk_10018ACD0;
    v13[4] = a1;
    sub_100100C28((dispatch_queue_t *)(a1 + 744), v13);
  }
  *a3 = v8;
  a3[1] = 0;
  do
    v10 = __ldaxr(&v12);
  while (__stlxr(0, &v12));
  atomic_store(v10, (unint64_t *)a3 + 1);
  return sub_1000C29D8(&v12);
}

void sub_1000E22F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_1000C29D8(&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_1000E2324(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = atomic_load(a1 + 75);
  v2 = a1[57];
  if (!v2)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = a1[73];
    v7 = *(_QWORD *)(v6 + 8 * v3);
    if (v7 && v1 - *(_QWORD *)(v7 + 344) != -1)
    {
      v5 = *(_QWORD *)(v6 + 8 * v3);
      v4 = v3;
    }
    ++v3;
  }
  while (v2 != v3);
  if (!v5)
    return 0;
  v8 = (unint64_t *)(a1[73] + 8 * v4);
  do
  {
    v9 = __ldaxr(v8);
    if (v9 != v5)
    {
      __clrex();
      return 0;
    }
  }
  while (__stlxr(0, v8));
  if ((sub_1000E3248((uint64_t)a1, v5, 0x101uLL, 0) & 1) == 0)
    return 0;
  return v5;
}

unint64_t *sub_1000E23C8@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v15;
  unint64_t v17;

  sub_1000E3610((uint64_t)a2, a3);
  v7 = a2 + 1;
  v17 = 0;
  v8 = atomic_load(a2 + 1);
  if (!v8)
  {
LABEL_7:
    v7 = 0;
    goto LABEL_11;
  }
  while (1)
  {
    v9 = __ldaxr(v7);
    if (v9 != v8)
    {
      __clrex();
      goto LABEL_6;
    }
    if (!__stlxr(v8 + 1, v7))
      break;
LABEL_6:
    v8 = v9;
    if (!v9)
      goto LABEL_7;
  }
  v10 = (unint64_t *)a2[42];
  if (v10)
  {
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    a2[43] = v11;
  }
LABEL_11:
  atomic_store((unint64_t)v7, &v17);
  if (*(_QWORD *)(a1 + 456))
  {
    v12 = 0;
    while (2)
    {
      v13 = (unint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v12);
      while (!__ldaxr(v13))
      {
        if (!__stlxr((unint64_t)a2, v13))
        {
          *a4 = 0;
          do
            v15 = __ldaxr(&v17);
          while (__stlxr(0, &v17));
          atomic_store(v15, a4);
          return sub_1000C29D8(&v17);
        }
      }
      __clrex();
      if (*(_QWORD *)(a1 + 456) > (unint64_t)++v12)
        continue;
      break;
    }
  }
  *a4 = 0;
  return sub_1000C29D8(&v17);
}

uint64_t sub_1000E24E4(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  std::mutex *v19;

  if (!*(_QWORD *)(a1 + 968))
    return 0;
  v19 = (std::mutex *)(a1 + 888);
  std::mutex::lock((std::mutex *)(a1 + 888));
  if (*(_QWORD *)(a1 + 968))
  {
    v8 = *(uint64_t **)(a1 + 960);
    if (v8 == (uint64_t *)(a1 + 952))
    {
      v11 = 1;
    }
    else
    {
      v9 = a4;
      if (a2)
        v10 = 6;
      else
        v10 = 4;
      v11 = 1;
      do
      {
        v12 = v8[2];
        if ((sub_1000C2A18(v12 + 8, v8[3], v10) | a2) == 1)
        {
          v13 = sub_10011E1E0(v12);
          std::mutex::lock((std::mutex *)v13);
          v14 = (unsigned int *)(v12 + 368);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 & 0xFFFFFFFB, v14));
          std::mutex::unlock((std::mutex *)v13);
          v16 = *v8;
          v17 = (uint64_t *)v8[1];
          *(_QWORD *)(v16 + 8) = v17;
          *(_QWORD *)v8[1] = v16;
          --*(_QWORD *)(a1 + 968);
          operator delete(v8);
          v8 = v17;
        }
        else
        {
          if (!v9 || v8[3] == a3)
            v11 = 0xFFFFFFFFLL;
          v8 = (uint64_t *)v8[1];
        }
      }
      while (v8 != (uint64_t *)(a1 + 952));
    }
  }
  else
  {
    v11 = 0;
  }
  std::mutex::unlock(v19);
  return v11;
}

void sub_1000E2630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000E2648(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    v11 = a3[1];
    v10[4] = *a3;
    v10[5] = v11;
    sub_1000284A8(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

unint64_t *sub_1000E2700(unint64_t *a1, unint64_t *a2, int a3)
{
  unint64_t *v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = a2;
  *a1 = 0;
  if (!a2)
    goto LABEL_9;
  v5 = atomic_load(a2);
  if (!v5)
    goto LABEL_8;
  while (1)
  {
    v6 = __ldaxr(a2);
    if (v6 != v5)
    {
      __clrex();
      goto LABEL_7;
    }
    if (!__stlxr(v5 + 1, a2))
      break;
LABEL_7:
    v5 = v6;
    if (!v6)
      goto LABEL_8;
  }
  v8 = (unint64_t *)a2[41];
  if (v8)
  {
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    a2[42] = v9;
  }
  if (a3 && !sub_1000DCD30((uint64_t)a2))
  {
    do
      v10 = __ldaxr(v3);
    while (__stlxr(v10 - 1, v3));
    if (v10 == 1)
    {
      v11 = v3[4];
      v3[4] = -1;
      sub_1000C2A18((uint64_t)v3, v11, 1u);
    }
LABEL_8:
    v3 = 0;
  }
LABEL_9:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL sub_1000E27D4(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3, uint64_t a4)
{
  uint64_t v8;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9;
  std::chrono::steady_clock::time_point v10;
  std::chrono::system_clock::time_point v11;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v13;
  uint64_t v14;

  do
  {
    if ((*(_DWORD *)(**(_QWORD **)a4 + 368) & 1) != 0)
      return 1;
    v8 = *(_QWORD *)(a4 + 8);
    if (*(_QWORD *)v8)
    {
      if (!*(_BYTE *)(*(_QWORD *)v8 + 344) && *(_QWORD *)(*(_QWORD *)v8 + 32) == **(_QWORD **)(a4 + 16))
        return 1;
    }
    if (*a3 <= std::chrono::steady_clock::now().__d_.__rep_)
      break;
    v9 = *a3;
    v10.__d_.__rep_ = v9 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v11.__d_.__rep_)
      {
        if (v11.__d_.__rep_ < 1)
        {
          if ((unint64_t)v11.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v12 = 0x8000000000000000;
            goto LABEL_17;
          }
        }
        else if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v12 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_15;
        }
        v12 = 1000 * v11.__d_.__rep_;
      }
      else
      {
        v12 = 0;
      }
LABEL_15:
      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_17:
      v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
      goto LABEL_18;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a3);
  if ((*(_DWORD *)(**(_QWORD **)a4 + 368) & 1) != 0)
    return 1;
  v14 = *(_QWORD *)(a4 + 8);
  return *(_QWORD *)v14
      && !*(_BYTE *)(*(_QWORD *)v14 + 344)
      && *(_QWORD *)(*(_QWORD *)v14 + 32) == **(_QWORD **)(a4 + 16);
}

uint64_t sub_1000E2958(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x200)
    a2 = 1;
  if (v2 < 0x400)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

uint64_t sub_1000E29B4(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = sub_1000E2324(v1);
  if (v2)
    sub_1000E29F8((uint64_t)v1, v2);
  return sub_1000E24E4((uint64_t)v1, 0, 0, 0);
}

void sub_1000E29F8(uint64_t a1, uint64_t a2)
{
  std::mutex *v3;
  uint64_t v4;

  v4 = a2;
  v3 = (std::mutex *)(a1 + 520);
  std::mutex::lock((std::mutex *)(a1 + 520));
  sub_1000E2A54((_QWORD *)(a1 + 472), &v4);
  std::mutex::unlock(v3);
}

void sub_1000E2A40(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000E2A54(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1000E2AD8(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1000E2AD8(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_1000193CC(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1000E2DEC(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_1000E2F00((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_1000193CC((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_1000193CC((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_1000E301C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1000E3130((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1000E2DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1000E2DEC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)sub_1000193CC(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void sub_1000E2F00(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)sub_1000193CC(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_1000E301C(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_1000193CC(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_1000E3130(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_1000193CC(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t sub_1000E3248(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  std::condition_variable *v21;
  uint64_t v22;
  char v23;
  char *v24;
  std::chrono::system_clock::time_point v25;
  unsigned int v26;
  char v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v32;
  char v33;
  _BYTE v34[7];
  uint64_t v35;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v36;
  std::unique_lock<std::mutex> __lk;
  _BYTE v38[7];

  v8 = a3 & 0x100;
  v9 = (a3 >> 8) & 1;
  v10 = (unint64_t *)(a1 + 608);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  if ((a3 & 1) != 0)
  {
    v12 = (unint64_t *)(a1 + 592);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = (unsigned int *)(a2 + 368);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 | 2, v14));
  sub_1000C29D8((unint64_t *)(a2 + 360));
  if (a4)
    sub_1000C29D8(a4);
  if ((a3 & 1) != 0)
  {
    v16 = atomic_load(v14);
    if ((v16 & 4) == 0)
    {
      v17 = (a3 >> 16) & 1;
      do
      {
        if ((*v14 & 1) != 0)
          break;
        if ((_DWORD)v9)
        {
          std::mutex::lock((std::mutex *)(a1 + 520));
          v18 = *(_QWORD *)(a1 + 512);
          std::mutex::unlock((std::mutex *)(a1 + 520));
          if (v18)
            break;
        }
        if (sub_1000E24E4(a1, v17, 0, 0) == -1)
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E1E0(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          v24 = sub_10011E2A0(a2);
          v25.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          v35 = a1;
          v36 = v25.__d_.__rep_ + 200000;
          v32 = a2;
          v33 = v9;
          *(_DWORD *)v34 = *(_DWORD *)v38;
          *(_DWORD *)&v34[3] = *(_DWORD *)&v38[3];
          sub_1000E34A0((std::condition_variable *)v24, &__lk, &v36, (uint64_t)&v32);
        }
        else
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E1E0(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          v19 = sub_10011E2A0(a2);
          v20 = atomic_load(v14);
          if ((v20 & 4) == 0)
          {
            v21 = (std::condition_variable *)v19;
            do
            {
              if ((*v14 & 1) != 0)
                break;
              if ((_DWORD)v9)
              {
                std::mutex::lock((std::mutex *)(a1 + 520));
                v22 = *(_QWORD *)(a1 + 512);
                std::mutex::unlock((std::mutex *)(a1 + 520));
                if (v22)
                  break;
              }
              std::condition_variable::wait(v21, &__lk);
              v23 = atomic_load(v14);
            }
            while ((v23 & 4) == 0);
          }
        }
        if (__lk.__owns_)
          std::mutex::unlock(__lk.__m_);
        v26 = *v14;
        if (!v8 || (v26 & 1) != 0)
        {
          if ((v26 & 1) != 0)
            break;
        }
        else if (*(_QWORD *)(a1 + 512))
        {
          break;
        }
        v27 = atomic_load(v14);
      }
      while ((v27 & 4) == 0);
    }
    v28 = (unint64_t *)(a1 + 592);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
  }
  do
    v30 = __ldaxr(v14);
  while (__stlxr(v30 & 0xFFFFFFFD, v14));
  return v30 & 1;
}

void sub_1000E3478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000E34A0(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  std::mutex *v10;
  uint64_t v11;
  std::chrono::system_clock::time_point v12;
  uint64_t v13;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v14;
  uint64_t v15;
  char v16;
  _BOOL8 v17;

  do
  {
    v8 = *(_QWORD *)(a4 + 16);
    v9 = atomic_load((unsigned int *)(*(_QWORD *)a4 + 368));
    if ((v9 & 4) != 0)
      return 1;
    if ((*(_DWORD *)(*(_QWORD *)a4 + 368) & 1) != 0)
      return 1;
    if (*(_BYTE *)(a4 + 8))
    {
      v10 = (std::mutex *)(v8 + 520);
      std::mutex::lock((std::mutex *)(v8 + 520));
      v11 = *(_QWORD *)(v8 + 512);
      std::mutex::unlock(v10);
      if (v11)
        return 1;
    }
    v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v13 = *a3;
    if (*a3 <= v12.__d_.__rep_)
      break;
    if (!v13)
    {
      v14.__d_.__rep_ = 0;
      goto LABEL_14;
    }
    if (v13 < 1)
    {
      if ((unint64_t)v13 < 0xFFDF3B645A1CAC09)
      {
        v14.__d_.__rep_ = 0x8000000000000000;
        goto LABEL_14;
      }
    }
    else if ((unint64_t)v13 > 0x20C49BA5E353F7)
    {
      v14.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_14;
    }
    v14.__d_.__rep_ = 1000 * v13;
LABEL_14:
    std::condition_variable::__do_timed_wait(a1, a2, v14);
  }
  while (std::chrono::system_clock::now().__d_.__rep_ < *a3);
  v15 = *(_QWORD *)(a4 + 16);
  v16 = atomic_load((unsigned int *)(*(_QWORD *)a4 + 368));
  if ((v16 & 4) != 0 || (*(_DWORD *)(*(_QWORD *)a4 + 368) & 1) != 0)
    return 1;
  if (!*(_BYTE *)(a4 + 8))
    return 0;
  std::mutex::lock((std::mutex *)(v15 + 520));
  v17 = *(_QWORD *)(v15 + 512) != 0;
  std::mutex::unlock((std::mutex *)(v15 + 520));
  return v17;
}

unint64_t *sub_1000E3610(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  atomic_store(0, (unsigned int *)(a1 + 368));
  v3 = (unint64_t *)(a1 + 8);
  sub_1000E3700(a1 + 8, a2);
  v12 = 0;
  v4 = atomic_load(v3);
  if (!v4)
    goto LABEL_11;
  while (1)
  {
    v5 = __ldaxr(v3);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_6;
    }
    if (!__stlxr(v4 + 1, v3))
      break;
LABEL_6:
    v4 = v5;
    if (!v5)
      goto LABEL_11;
  }
  v6 = *(unint64_t **)(a1 + 336);
  v4 = (unint64_t)v3;
  if (v6)
  {
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    *(_QWORD *)(a1 + 344) = v7;
    v4 = (unint64_t)v3;
  }
LABEL_11:
  atomic_store(v4, &v12);
  sub_1000C4040((unint64_t *)(a1 + 360), &v12);
  result = sub_1000C29D8(&v12);
  do
  {
    v9 = __ldaxr(v3);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v3));
  if (!v10)
  {
    v11 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = -1;
    return (unint64_t *)sub_1000C2A18((uint64_t)v3, v11, 1u);
  }
  return result;
}

uint64_t *sub_1000E3700(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 344) = 0;
  atomic_store(1uLL, (unint64_t *)a1);
  atomic_store(0, (unint64_t *)(a1 + 8));
  atomic_store(0, (unint64_t *)(a1 + 16));
  result = sub_1000C2BD0((uint64_t *)(a1 + 40));
  v4 = *(unint64_t **)(a1 + 328);
  if (v4)
  {
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    *(_QWORD *)(a1 + 336) = v5;
  }
  atomic_store(1u, (unsigned int *)(a1 + 24));
  __dmb(0xBu);
  return result;
}

uint64_t *sub_1000E376C(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v8 = (uint64_t **)sub_1000E3800(a1, a2, &v14, &v13, a3);
  v9 = *v8;
  if (!*v8)
  {
    v10 = v8;
    v9 = (uint64_t *)operator new(0x30uLL);
    v11 = *a5;
    v9[4] = *a4;
    v9[5] = v11;
    sub_1000284A8(a1, v14, v10, v9);
  }
  return v9;
}

_QWORD *sub_1000E3800(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *sub_1000E39A8(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;
  _QWORD *v7;

  v4 = a2;
  result = sub_1000E39F8(a1, a2);
  result[5] = *result;
  result[6] = v4;
  if (v4 && a3)
  {
    v6 = 0;
    do
    {
      v7 = (_QWORD *)(*result + v6);
      *v7 = 0;
      v7[1] = 0;
      v6 += 16;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t *sub_1000E39F8(uint64_t *a1, uint64_t a2)
{
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  std::bad_alloc *exception;
  std::bad_alloc *v8;
  _QWORD v9[3];
  _QWORD *v10;
  void *v11;
  uint64_t v12;

  *a1 = 0;
  a1[4] = 0;
  v3 = malloc_type_valloc(16 * a2, 0x1000040451B5BE8uLL);
  if (!v3)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v8 = std::bad_alloc::bad_alloc(exception);
  }
  v9[0] = off_10018AD00;
  v10 = v9;
  v11 = v3;
  sub_1000E3BF0((uint64_t)&v12, (uint64_t)v9);
  sub_1000E3B0C(a1, (uint64_t *)&v11);
  sub_1000C2934((uint64_t *)&v11);
  v4 = v10;
  if (v10 == v9)
  {
    v5 = 4;
    v4 = v9;
    goto LABEL_6;
  }
  if (v10)
  {
    v5 = 5;
LABEL_6:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void sub_1000E3AF8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1000C2934(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000E3B0C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  sub_1000C298C(a1, v4);
  sub_100018244(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void sub_1000E3B50()
{
  operator delete();
}

_QWORD *sub_1000E3B64()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_10018AD00;
  return result;
}

void sub_1000E3B88(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10018AD00;
}

void sub_1000E3BA0(uint64_t a1, void **a2)
{
  free(*a2);
}

uint64_t sub_1000E3BA8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000E3BE4()
{
}

uint64_t sub_1000E3BF0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_1000E3C54(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_1000193CC(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1000E2DEC(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_1000E2F00((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_1000193CC((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_1000193CC((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_1000E301C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1000E3130((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1000E3F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1000E3F68(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
  uint64_t v10;

  *(_QWORD *)(a1 + 336) = **(_QWORD **)(a1 + 328);
  v10 = a1 + 40;
  sub_1000C2BD0((uint64_t *)(a1 + 40));
  sub_1000CDAD8(v10, a2, a3, *a4, *a5, 0);
  *(_BYTE *)(a1 + 224) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));
  sub_1000E4028(a1);
}

void sub_1000E3FF0(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(_BYTE *)(v1 + 344) = 1;
  sub_1000E4028(v1);
  __cxa_rethrow();
}

void sub_1000E4014(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000E4028(uint64_t a1)
{
  if (atomic_load((unint64_t *)(a1 + 8)))
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
}

void sub_1000E4050(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, char *a6)
{
  uint64_t v12;

  *(_QWORD *)(a1 + 336) = **(_QWORD **)(a1 + 328);
  v12 = a1 + 40;
  sub_1000C2BD0((uint64_t *)(a1 + 40));
  sub_1000CDAD8(v12, a2, a3, *a4, *a5, *a6);
  *(_BYTE *)(a1 + 224) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));
  sub_1000E4028(a1);
}

void sub_1000E40E4(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(_BYTE *)(v1 + 344) = 1;
  sub_1000E4028(v1);
  __cxa_rethrow();
}

void sub_1000E4108(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E411C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100187DE0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000E4184(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E4198(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100188000;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000E4200(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E4214(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100188220;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000E427C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000E4290(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  *(_BYTE *)(a1 + 912) = 0;
  if (*(_QWORD *)(a1 + 632))
  {
    v3 = 0;
    do
    {
      v4 = (unint64_t *)(*(_QWORD *)(a1 + 760) + 8 * v3);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(0, v4));
      if (v5)
      {
        sub_1000E4530(a1, v5, v1 & 0xFFFFFFFFFF000000 | 0x10001, 0);
        sub_1000C1E4C((unint64_t *)(v5 + 536));
        sub_1000E4A94((_QWORD *)(v5 + 8));
        operator delete();
      }
      ++v3;
    }
    while (*(_QWORD *)(a1 + 632) > v3);
  }
  sub_100100CB0((dispatch_queue_t *)(a1 + 920), &stru_10018ADA0);
  if (*(_QWORD *)(a1 + 760))
    operator delete[]();
  std::mutex::lock((std::mutex *)(a1 + 696));
  v6 = *(_QWORD *)(a1 + 656);
  if (*(_QWORD *)(a1 + 664) != v6)
  {
    v7 = *(_QWORD *)(a1 + 680);
    v8 = (_QWORD *)(v6 + 8 * (v7 >> 9));
    v9 = (uint64_t *)(*v8 + 8 * (v7 & 0x1FF));
    while (v9 != (uint64_t *)(*(_QWORD *)(v6 + (((*(_QWORD *)(a1 + 688) + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((*(_QWORD *)(a1 + 688) + v7) & 0x1FF)))
    {
      v10 = *v9;
      if (*v9)
      {
        sub_1000C1E4C((unint64_t *)(v10 + 536));
        sub_1000E4A94((_QWORD *)(v10 + 8));
        operator delete();
      }
      if ((uint64_t *)((char *)++v9 - *v8) == (uint64_t *)4096)
      {
        v11 = (uint64_t *)v8[1];
        ++v8;
        v9 = v11;
      }
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 696));
  v12 = *(_QWORD **)(a1 + 1792);
  if (v12 == (_QWORD *)(a1 + 1768))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 1768);
  }
  else
  {
    if (!v12)
      goto LABEL_22;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_22:
  v14 = *(_QWORD **)(a1 + 1760);
  if (v14 == (_QWORD *)(a1 + 1736))
  {
    v15 = 4;
    v14 = (_QWORD *)(a1 + 1736);
  }
  else
  {
    if (!v14)
      goto LABEL_27;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_27:
  sub_1000C1E4C((unint64_t *)(a1 + 1720));
  sub_1000E4A94((_QWORD *)(a1 + 1192));
  v16 = *(_QWORD **)(a1 + 1176);
  if (v16 == (_QWORD *)(a1 + 1152))
  {
    v17 = 4;
    v16 = (_QWORD *)(a1 + 1152);
    goto LABEL_31;
  }
  if (v16)
  {
    v17 = 5;
LABEL_31:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  sub_1000E4BAC((_QWORD *)(a1 + 1128));
  std::mutex::~mutex((std::mutex *)(a1 + 1064));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 1016));
  std::mutex::~mutex((std::mutex *)(a1 + 952));
  sub_100027D5C(a1 + 928, *(_QWORD **)(a1 + 936));
  sub_100100B68((NSObject **)(a1 + 920));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 864));
  std::mutex::~mutex((std::mutex *)(a1 + 800));
  std::mutex::~mutex((std::mutex *)(a1 + 696));
  sub_1000C2854((_QWORD *)(a1 + 648));
  return sub_1000E4C0C((_QWORD *)a1);
}

uint64_t sub_1000E4530(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  std::condition_variable *v21;
  uint64_t v22;
  char v23;
  char *v24;
  std::chrono::system_clock::time_point v25;
  unsigned int v26;
  char v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v32;
  char v33;
  _BYTE v34[7];
  uint64_t v35;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v36;
  std::unique_lock<std::mutex> __lk;
  _BYTE v38[7];

  v8 = a3 & 0x100;
  v9 = (a3 >> 8) & 1;
  v10 = (unint64_t *)(a1 + 784);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  if ((a3 & 1) != 0)
  {
    v12 = (unint64_t *)(a1 + 768);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = (unsigned int *)(a2 + 544);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 | 2, v14));
  sub_1000C1E4C((unint64_t *)(a2 + 536));
  if (a4)
    sub_1000C1E4C(a4);
  if ((a3 & 1) != 0)
  {
    v16 = atomic_load(v14);
    if ((v16 & 4) == 0)
    {
      v17 = (a3 >> 16) & 1;
      do
      {
        if ((*v14 & 1) != 0)
          break;
        if ((_DWORD)v9)
        {
          std::mutex::lock((std::mutex *)(a1 + 696));
          v18 = *(_QWORD *)(a1 + 688);
          std::mutex::unlock((std::mutex *)(a1 + 696));
          if (v18)
            break;
        }
        if (sub_1000E47C0(a1, v17, 0, 0) == -1)
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E1E0(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          v24 = sub_10011E2A0(a2);
          v25.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          v35 = a1;
          v36 = v25.__d_.__rep_ + 200000;
          v32 = a2;
          v33 = v9;
          *(_DWORD *)v34 = *(_DWORD *)v38;
          *(_DWORD *)&v34[3] = *(_DWORD *)&v38[3];
          sub_1000E4924((std::condition_variable *)v24, &__lk, &v36, (uint64_t)&v32);
        }
        else
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E1E0(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          v19 = sub_10011E2A0(a2);
          v20 = atomic_load(v14);
          if ((v20 & 4) == 0)
          {
            v21 = (std::condition_variable *)v19;
            do
            {
              if ((*v14 & 1) != 0)
                break;
              if ((_DWORD)v9)
              {
                std::mutex::lock((std::mutex *)(a1 + 696));
                v22 = *(_QWORD *)(a1 + 688);
                std::mutex::unlock((std::mutex *)(a1 + 696));
                if (v22)
                  break;
              }
              std::condition_variable::wait(v21, &__lk);
              v23 = atomic_load(v14);
            }
            while ((v23 & 4) == 0);
          }
        }
        if (__lk.__owns_)
          std::mutex::unlock(__lk.__m_);
        v26 = *v14;
        if (!v8 || (v26 & 1) != 0)
        {
          if ((v26 & 1) != 0)
            break;
        }
        else if (*(_QWORD *)(a1 + 688))
        {
          break;
        }
        v27 = atomic_load(v14);
      }
      while ((v27 & 4) == 0);
    }
    v28 = (unint64_t *)(a1 + 768);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
  }
  do
    v30 = __ldaxr(v14);
  while (__stlxr(v30 & 0xFFFFFFFD, v14));
  return v30 & 1;
}

void sub_1000E4760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000E4788(uint64_t a1)
{
  sub_1000C1E4C((unint64_t *)(a1 + 536));
  sub_1000E4A94((_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1000E47C0(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  std::mutex *v19;

  if (!*(_QWORD *)(a1 + 1144))
    return 0;
  v19 = (std::mutex *)(a1 + 1064);
  std::mutex::lock((std::mutex *)(a1 + 1064));
  if (*(_QWORD *)(a1 + 1144))
  {
    v8 = *(uint64_t **)(a1 + 1136);
    if (v8 == (uint64_t *)(a1 + 1128))
    {
      v11 = 1;
    }
    else
    {
      v9 = a4;
      if (a2)
        v10 = 6;
      else
        v10 = 4;
      v11 = 1;
      do
      {
        v12 = v8[2];
        if ((sub_1000C1E8C(v12 + 8, v8[3], v10) | a2) == 1)
        {
          v13 = sub_10011E1E0(v12);
          std::mutex::lock((std::mutex *)v13);
          v14 = (unsigned int *)(v12 + 544);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 & 0xFFFFFFFB, v14));
          std::mutex::unlock((std::mutex *)v13);
          v16 = *v8;
          v17 = (uint64_t *)v8[1];
          *(_QWORD *)(v16 + 8) = v17;
          *(_QWORD *)v8[1] = v16;
          --*(_QWORD *)(a1 + 1144);
          operator delete(v8);
          v8 = v17;
        }
        else
        {
          if (!v9 || v8[3] == a3)
            v11 = 0xFFFFFFFFLL;
          v8 = (uint64_t *)v8[1];
        }
      }
      while (v8 != (uint64_t *)(a1 + 1128));
    }
  }
  else
  {
    v11 = 0;
  }
  std::mutex::unlock(v19);
  return v11;
}

void sub_1000E490C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E4924(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  std::mutex *v10;
  uint64_t v11;
  std::chrono::system_clock::time_point v12;
  uint64_t v13;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v14;
  uint64_t v15;
  char v16;
  _BOOL8 v17;

  do
  {
    v8 = *(_QWORD *)(a4 + 16);
    v9 = atomic_load((unsigned int *)(*(_QWORD *)a4 + 544));
    if ((v9 & 4) != 0)
      return 1;
    if ((*(_DWORD *)(*(_QWORD *)a4 + 544) & 1) != 0)
      return 1;
    if (*(_BYTE *)(a4 + 8))
    {
      v10 = (std::mutex *)(v8 + 696);
      std::mutex::lock((std::mutex *)(v8 + 696));
      v11 = *(_QWORD *)(v8 + 688);
      std::mutex::unlock(v10);
      if (v11)
        return 1;
    }
    v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v13 = *a3;
    if (*a3 <= v12.__d_.__rep_)
      break;
    if (!v13)
    {
      v14.__d_.__rep_ = 0;
      goto LABEL_14;
    }
    if (v13 < 1)
    {
      if ((unint64_t)v13 < 0xFFDF3B645A1CAC09)
      {
        v14.__d_.__rep_ = 0x8000000000000000;
        goto LABEL_14;
      }
    }
    else if ((unint64_t)v13 > 0x20C49BA5E353F7)
    {
      v14.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_14;
    }
    v14.__d_.__rep_ = 1000 * v13;
LABEL_14:
    std::condition_variable::__do_timed_wait(a1, a2, v14);
  }
  while (std::chrono::system_clock::now().__d_.__rep_ < *a3);
  v15 = *(_QWORD *)(a4 + 16);
  v16 = atomic_load((unsigned int *)(*(_QWORD *)a4 + 544));
  if ((v16 & 4) != 0 || (*(_DWORD *)(*(_QWORD *)a4 + 544) & 1) != 0)
    return 1;
  if (!*(_BYTE *)(a4 + 8))
    return 0;
  std::mutex::lock((std::mutex *)(v15 + 696));
  v17 = *(_QWORD *)(v15 + 688) != 0;
  std::mutex::unlock((std::mutex *)(v15 + 696));
  return v17;
}

_QWORD *sub_1000E4A94(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 59;
  v3 = (_QWORD *)a1[62];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[58];
  if (v5 == a1 + 55)
  {
    v6 = 4;
    v5 = a1 + 55;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[54];
  if (v7 == a1 + 51)
  {
    v8 = 4;
    v7 = a1 + 51;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  sub_1000E4B4C((uint64_t)(a1 + 5));
  return a1;
}

uint64_t sub_1000E4B4C(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 360))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 280));
    sub_1000C2854((_QWORD *)(a1 + 232));
    std::mutex::~mutex((std::mutex *)(a1 + 168));
    std::mutex::~mutex((std::mutex *)(a1 + 104));
    v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(_QWORD *)(a1 + 80) = v2;
      operator delete(v2);
    }
    sub_1000C2934((uint64_t *)(a1 + 16));
  }
  return a1;
}

_QWORD *sub_1000E4BAC(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

_QWORD *sub_1000E4C0C(_QWORD *a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = a1 + 13;
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    v5 = a1[17];
    a1[17] = -1;
    sub_1000C1E8C((uint64_t)(a1 + 13), v5, 1u);
  }
  sub_1000E4A94(v2);
  v6 = (_QWORD *)a1[11];
  if (v6 == a1 + 8)
  {
    v7 = 4;
    v6 = a1 + 8;
  }
  else
  {
    if (!v6)
      goto LABEL_10;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_10:
  v8 = (_QWORD *)a1[7];
  if (v8 == a1 + 4)
  {
    v9 = 4;
    v8 = a1 + 4;
  }
  else
  {
    if (!v8)
      goto LABEL_15;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_15:
  v10 = (_QWORD *)a1[3];
  if (v10 == a1)
  {
    v11 = 4;
    v10 = a1;
    goto LABEL_19;
  }
  if (v10)
  {
    v11 = 5;
LABEL_19:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return a1;
}

_QWORD *sub_1000E4CF4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  *(_BYTE *)(a1 + 736) = 0;
  if (*(_QWORD *)(a1 + 456))
  {
    v3 = 0;
    do
    {
      v4 = (unint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v3);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(0, v4));
      if (v5)
      {
        sub_1000E3248(a1, v5, v1 & 0xFFFFFFFFFF000000 | 0x10001, 0);
        sub_1000C29D8((unint64_t *)(v5 + 360));
        sub_1000E4FC4((_QWORD *)(v5 + 8));
        operator delete();
      }
      ++v3;
    }
    while (*(_QWORD *)(a1 + 456) > v3);
  }
  sub_100100CB0((dispatch_queue_t *)(a1 + 744), &stru_10018ADE0);
  if (*(_QWORD *)(a1 + 584))
    operator delete[]();
  std::mutex::lock((std::mutex *)(a1 + 520));
  v6 = *(_QWORD *)(a1 + 480);
  if (*(_QWORD *)(a1 + 488) != v6)
  {
    v7 = *(_QWORD *)(a1 + 504);
    v8 = (_QWORD *)(v6 + 8 * (v7 >> 9));
    v9 = (uint64_t *)(*v8 + 8 * (v7 & 0x1FF));
    while (v9 != (uint64_t *)(*(_QWORD *)(v6 + (((*(_QWORD *)(a1 + 512) + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((*(_QWORD *)(a1 + 512) + v7) & 0x1FF)))
    {
      v10 = *v9;
      if (*v9)
      {
        sub_1000C29D8((unint64_t *)(v10 + 360));
        sub_1000E4FC4((_QWORD *)(v10 + 8));
        operator delete();
      }
      if ((uint64_t *)((char *)++v9 - *v8) == (uint64_t *)4096)
      {
        v11 = (uint64_t *)v8[1];
        ++v8;
        v9 = v11;
      }
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 520));
  v12 = *(_QWORD **)(a1 + 1440);
  if (v12 == (_QWORD *)(a1 + 1416))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 1416);
  }
  else
  {
    if (!v12)
      goto LABEL_22;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_22:
  v14 = *(_QWORD **)(a1 + 1408);
  if (v14 == (_QWORD *)(a1 + 1384))
  {
    v15 = 4;
    v14 = (_QWORD *)(a1 + 1384);
  }
  else
  {
    if (!v14)
      goto LABEL_27;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_27:
  sub_1000C29D8((unint64_t *)(a1 + 1368));
  sub_1000E4FC4((_QWORD *)(a1 + 1016));
  v16 = *(_QWORD **)(a1 + 1000);
  if (v16 == (_QWORD *)(a1 + 976))
  {
    v17 = 4;
    v16 = (_QWORD *)(a1 + 976);
    goto LABEL_31;
  }
  if (v16)
  {
    v17 = 5;
LABEL_31:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  sub_1000E4BAC((_QWORD *)(a1 + 952));
  std::mutex::~mutex((std::mutex *)(a1 + 888));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 840));
  std::mutex::~mutex((std::mutex *)(a1 + 776));
  sub_100027D5C(a1 + 752, *(_QWORD **)(a1 + 760));
  sub_100100B68((NSObject **)(a1 + 744));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 688));
  std::mutex::~mutex((std::mutex *)(a1 + 624));
  std::mutex::~mutex((std::mutex *)(a1 + 520));
  sub_1000C2854((_QWORD *)(a1 + 472));
  return sub_1000E50C0((_QWORD *)a1);
}

uint64_t sub_1000E4F8C(uint64_t a1)
{
  sub_1000C29D8((unint64_t *)(a1 + 360));
  sub_1000E4FC4((_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_1000E4FC4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 37;
  v3 = (_QWORD *)a1[40];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[36];
  if (v5 == a1 + 33)
  {
    v6 = 4;
    v5 = a1 + 33;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[32];
  if (v7 == a1 + 29)
  {
    v8 = 4;
    v7 = a1 + 29;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  sub_1000E507C((uint64_t)(a1 + 5));
  return a1;
}

uint64_t sub_1000E507C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 184))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 120));
    *(_QWORD *)(a1 + 32) = off_10017B1E0;
    sub_100073DB8((uint64_t *)(a1 + 56));
  }
  return a1;
}

_QWORD *sub_1000E50C0(_QWORD *a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = a1 + 13;
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    v5 = a1[17];
    a1[17] = -1;
    sub_1000C2A18((uint64_t)(a1 + 13), v5, 1u);
  }
  sub_1000E4FC4(v2);
  v6 = (_QWORD *)a1[11];
  if (v6 == a1 + 8)
  {
    v7 = 4;
    v6 = a1 + 8;
  }
  else
  {
    if (!v6)
      goto LABEL_10;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_10:
  v8 = (_QWORD *)a1[7];
  if (v8 == a1 + 4)
  {
    v9 = 4;
    v8 = a1 + 4;
  }
  else
  {
    if (!v8)
      goto LABEL_15;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_15:
  v10 = (_QWORD *)a1[3];
  if (v10 == a1)
  {
    v11 = 4;
    v10 = a1;
    goto LABEL_19;
  }
  if (v10)
  {
    v11 = 5;
LABEL_19:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return a1;
}

uint64_t sub_1000E51A8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001884C0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000E5210(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E5224(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001886E0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000E528C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E52A0(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100188900;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000E5308(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_1000E5320()
{
  operator delete();
}

__n128 sub_1000E5334(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_10018AE10;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1000E5374(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10018AE10;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1000E539C(uint64_t a1, uint64_t *a2)
{
  sub_1000C81CC(a1 + 8, *a2);
}

uint64_t sub_1000E53A8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000E53E4()
{
}

_QWORD *sub_1000E53F0(void **a1, char *a2, uint64_t a3, _QWORD *a4, char *a5, _QWORD *a6, char *a7, unint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char **v27;
  char *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  __int16 v36;
  unint64_t v37;
  __int16 v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char **v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char **v48;
  char **v49;
  char *v50;
  char **v51;
  char *v52;
  unint64_t v53;
  int64x2_t v54;
  uint64_t v55;
  char **v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char **v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char **v66;
  char *v67;
  char *v68;
  char *v69;
  char **v70;
  char *v71;
  char **v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  _QWORD *v77;
  char *v78;
  char *v79;
  char *v80;
  char **v81;
  char *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  char **v87;
  char **v88;
  char **v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;

  v8 = a8;
  v14 = (unint64_t)a1[4];
  v15 = v14 >> 9;
  v16 = a1[1];
  v17 = a1[2];
  v18 = &v16[8 * (v14 >> 9)];
  if (v17 == v16)
    v19 = 0;
  else
    v19 = *(_QWORD *)v18 + 8 * ((unint64_t)a1[4] & 0x1FF);
  if (a3 == v19)
    v20 = 0;
  else
    v20 = ((a3 - *(_QWORD *)a2) >> 3) + ((a2 - v18) << 6) - ((v19 - *(_QWORD *)v18) >> 3);
  v21 = (char *)a1[5];
  if (v20 >= (unint64_t)&v21[-v20])
  {
    v24 = ((v17 - v16) << 6) - 1;
    if (v17 == v16)
      v24 = 0;
    v25 = (unint64_t)&v21[v14];
    v26 = v24 - v25;
    if (a8 > v26)
    {
      sub_1000E5EBC(a1, a8 - v26);
      v21 = (char *)a1[5];
      v16 = a1[1];
      v17 = a1[2];
      v25 = (unint64_t)&v21[(_QWORD)a1[4]];
    }
    v88 = (char **)a6;
    v27 = (char **)&v16[8 * (v25 >> 9)];
    if (v17 == v16)
      v28 = 0;
    else
      v28 = &(*v27)[8 * (v25 & 0x1FF)];
    v90.n128_u64[0] = (unint64_t)&v16[8 * (v25 >> 9)];
    v90.n128_u64[1] = (unint64_t)v28;
    v31 = (unint64_t)&v21[-v20];
    v87 = (char **)a4;
    if ((unint64_t)&v21[-v20] >= v8)
    {
      v34 = a7;
      if (!v8)
        goto LABEL_90;
      goto LABEL_78;
    }
    if (v31 >= v8 >> 1)
    {
      v32 = (uint64_t)&v21[-v20 - v8 + ((a7 - *v88) >> 3)];
      if (v32 >= 1)
      {
        v88 += (unint64_t)v32 >> 9;
        v33 = *v88;
        goto LABEL_39;
      }
      v37 = 511 - v32;
      v38 = ~(_WORD)v37;
      v88 -= v37 >> 9;
      v39 = *v88;
    }
    else
    {
      if (!v31)
      {
        v88 = (char **)a4;
        v34 = a5;
        goto LABEL_69;
      }
      v32 = v31 + ((uint64_t)&a5[-*a4] >> 3);
      if (v32 >= 1)
      {
        v88 = (char **)&a4[(unint64_t)v32 >> 9];
        v33 = *v88;
LABEL_39:
        v34 = &v33[8 * (v32 & 0x1FF)];
        goto LABEL_69;
      }
      v64 = 511 - v32;
      v38 = ~(_WORD)v64;
      v88 = (char **)&a4[-(v64 >> 9)];
      v39 = *v88;
    }
    v34 = &v39[8 * (v38 & 0x1FF)];
LABEL_69:
    if (v34 != a7)
    {
      v65 = *v27;
      v66 = v88;
      v67 = v34;
      do
      {
        *(_QWORD *)v28 = *(_QWORD *)v67;
        v28 += 8;
        if (v28 - v65 == 4096)
        {
          v68 = v27[1];
          ++v27;
          v65 = v68;
          v28 = v68;
        }
        v67 += 8;
        if (v67 - *v66 == 4096)
        {
          v69 = v66[1];
          ++v66;
          v67 = v69;
        }
        ++v21;
      }
      while (v67 != a7);
      a1[5] = v21;
    }
    v8 = v31;
    if (!v31)
      goto LABEL_90;
LABEL_78:
    v70 = (char **)sub_1000E6444((uint64_t)&v90, v8);
    v72 = v70;
    v73 = v71;
    v74 = (char *)v90.n128_u64[1];
    if ((char *)v90.n128_u64[1] != v71)
    {
      v75 = (char *)a1[5];
      v76 = *v27;
      v77 = v70;
      v78 = v71;
      do
      {
        *(_QWORD *)v28 = *(_QWORD *)v78;
        v28 += 8;
        if (v28 - v76 == 4096)
        {
          v79 = v27[1];
          ++v27;
          v76 = v79;
          v28 = v79;
        }
        v78 += 8;
        if (&v78[-*v77] == (char *)4096)
        {
          v80 = (char *)v77[1];
          ++v77;
          v78 = v80;
        }
        ++v75;
      }
      while (v78 != v74);
      a1[5] = v75;
    }
    if (v8 >= v31)
    {
      v83 = (_QWORD *)v90.n128_u64[0];
    }
    else
    {
      v81 = (char **)sub_1000E6444((uint64_t)&v90, v31);
      sub_1000E6634(v81, v82, v72, v73, v90.n128_u64[0], (char *)v90.n128_u64[1], &v91);
      v74 = (char *)v92.n128_u64[1];
      v83 = (_QWORD *)v92.n128_u64[0];
      v90 = v92;
    }
    sub_1000E6634(v87, a5, v88, v34, v83, v74, &v91);
    goto LABEL_90;
  }
  if (a8 > v14)
  {
    sub_1000E5990(a1, a8 - v14);
    v14 = (unint64_t)a1[4];
    v16 = a1[1];
    v17 = a1[2];
    v15 = v14 >> 9;
  }
  v22 = (uint64_t *)&v16[8 * v15];
  if (v17 == v16)
    v23 = 0;
  else
    v23 = *v22 + 8 * (v14 & 0x1FF);
  v90.n128_u64[0] = (unint64_t)&v16[8 * v15];
  v90.n128_u64[1] = v23;
  if (v8 <= v20)
  {
    v30 = a5;
    if (!v8)
      goto LABEL_90;
    goto LABEL_55;
  }
  if (v20 >= v8 >> 1)
  {
    v29 = v8 - v20 + ((uint64_t)&a5[-*a4] >> 3);
    if (v29 >= 1)
    {
      a4 += (unint64_t)v29 >> 9;
      goto LABEL_36;
    }
    v35 = 511 - v29;
    v36 = ~(_WORD)v35;
    a4 -= v35 >> 9;
  }
  else
  {
    if (!v20)
    {
      a4 = a6;
      v30 = a7;
      goto LABEL_46;
    }
    v29 = ((uint64_t)&a7[-*a6] >> 3) - v20;
    if (v29 >= 1)
    {
      a4 = &a6[(unint64_t)v29 >> 9];
LABEL_36:
      v30 = (char *)(*a4 + 8 * (v29 & 0x1FF));
      goto LABEL_46;
    }
    v40 = 511 - v29;
    v36 = ~(_WORD)v40;
    a4 = &a6[-(v40 >> 9)];
  }
  v30 = (char *)(*a4 + 8 * (v36 & 0x1FF));
LABEL_46:
  if (v30 != a5)
  {
    v41 = (char *)a1[5];
    v42 = *v22;
    v43 = (char **)a4;
    v44 = v30;
    do
    {
      if (v23 == v42)
      {
        v45 = *--v22;
        v42 = v45;
        v23 = v45 + 4096;
      }
      if (v44 == *v43)
      {
        v46 = (uint64_t)*--v43;
        v44 = (char *)(v46 + 4096);
      }
      v47 = *((_QWORD *)v44 - 1);
      v44 -= 8;
      *(_QWORD *)(v23 - 8) = v47;
      v23 -= 8;
      --v14;
      ++v41;
    }
    while (v44 != a5);
    a1[4] = (void *)v14;
    a1[5] = v41;
  }
  v8 = v20;
  if (v20)
  {
LABEL_55:
    v89 = (char **)a6;
    v48 = (char **)a4;
    v49 = (char **)sub_1000E5E58((uint64_t)&v90, v8);
    v51 = v49;
    v52 = v50;
    v53 = v90.n128_u64[1];
    if ((char *)v90.n128_u64[1] != v50)
    {
      v54 = *((int64x2_t *)a1 + 2);
      v55 = *v22;
      v56 = v49;
      v57 = v50;
      do
      {
        if (v23 == v55)
        {
          v58 = *--v22;
          v55 = v58;
          v23 = v58 + 4096;
        }
        if (v57 == *v56)
        {
          v59 = (uint64_t)*--v56;
          v57 = (char *)(v59 + 4096);
        }
        v60 = *((_QWORD *)v57 - 1);
        v57 -= 8;
        *(_QWORD *)(v23 - 8) = v60;
        v23 -= 8;
        v54 = vaddq_s64(v54, (int64x2_t)xmmword_1001455F0);
      }
      while (v57 != (char *)v53);
      *((int64x2_t *)a1 + 2) = v54;
    }
    if (v8 >= v20)
    {
      v63 = v90.n128_u64[0];
    }
    else
    {
      v61 = (char **)sub_1000E5E58((uint64_t)&v90, v20);
      v91 = v90;
      sub_1000E64AC(v51, v52, v61, v62, (uint64_t)&v91);
      v53 = v91.n128_u64[1];
      v63 = v91.n128_u64[0];
      v90 = v91;
    }
    v91.n128_u64[0] = v63;
    v91.n128_u64[1] = v53;
    sub_1000E64AC(v48, v30, v89, a7, (uint64_t)&v91);
  }
LABEL_90:
  v84 = a1[1];
  if (a1[2] == v84)
    v85 = 0;
  else
    v85 = v84[(unint64_t)a1[4] >> 9] + 8 * ((unint64_t)a1[4] & 0x1FF);
  v91.n128_u64[0] = (unint64_t)&v84[(unint64_t)a1[4] >> 9];
  v91.n128_u64[1] = v85;
  return sub_1000E5E58((uint64_t)&v91, v20);
}

void sub_1000E5990(void **a1, unint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  void **v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  void **v23;
  unint64_t v24;
  char *v25;
  char *i;
  int64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  char *v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  void *v65;
  void *v66;
  void *__p[2];
  char *v68;
  char *v69;
  _QWORD *v70;

  v3 = a1[1];
  v4 = a1[2];
  v5 = v4 - v3;
  if (v4 == v3)
    v6 = a2 + 1;
  else
    v6 = a2;
  if (v4 == v3)
    v7 = 0;
  else
    v7 = ((v4 - v3) << 6) - 1;
  if ((v6 & 0x1FF) != 0)
    v8 = (v6 >> 9) + 1;
  else
    v8 = v6 >> 9;
  v9 = (uint64_t)a1[4];
  v10 = v7 - ((_QWORD)a1[5] + v9);
  if (v8 >= v10 >> 9)
    v11 = v10 >> 9;
  else
    v11 = v8;
  if (v8 <= v10 >> 9)
  {
    for (a1[4] = (void *)(v9 + (v11 << 9)); v11; --v11)
    {
      v19 = (void **)a1[2];
      __p[0] = *(v19 - 1);
      a1[2] = v19 - 1;
      sub_1000E2F00((uint64_t)a1, __p);
    }
  }
  else
  {
    v12 = (uint64_t)(a1 + 3);
    v13 = v8 - v11;
    v14 = (_BYTE *)a1[3] - (_BYTE *)*a1;
    if (v8 - v11 <= (v14 >> 3) - (v5 >> 3))
    {
      if (v13)
      {
        if (v3 == *a1)
        {
LABEL_30:
          v22 = v13;
          do
          {
            __p[0] = operator new(0x1000uLL);
            sub_1000E2DEC(a1, __p);
            --v22;
          }
          while (v22);
          v11 += v13;
          v9 = (uint64_t)a1[4];
        }
        else
        {
          while (1)
          {
            __p[0] = operator new(0x1000uLL);
            sub_1000E2F00((uint64_t)a1, __p);
            v20 = a1[1];
            v21 = (_BYTE *)a1[2] - v20 == 8 ? 511 : 512;
            v9 = (uint64_t)a1[4] + v21;
            a1[4] = (void *)v9;
            if (!--v13)
              break;
            if (v20 == *a1)
              goto LABEL_30;
          }
        }
      }
      for (a1[4] = (void *)(v9 + (v11 << 9)); v11; --v11)
      {
        v23 = (void **)a1[2];
        __p[0] = *(v23 - 1);
        a1[2] = v23 - 1;
        sub_1000E2F00((uint64_t)a1, __p);
      }
    }
    else
    {
      v15 = v4 == v3;
      v16 = v8 << 9;
      if (v14 >> 2 <= v13 + (v5 >> 3))
        v17 = v13 + (v5 >> 3);
      else
        v17 = v14 >> 2;
      v70 = a1 + 3;
      if (v17)
        v18 = (char *)sub_1000193CC(v12, v17);
      else
        v18 = 0;
      v24 = v16 - v15;
      __p[0] = v18;
      __p[1] = v18;
      v68 = v18;
      v69 = &v18[8 * v17];
      do
      {
        v66 = operator new(0x1000uLL);
        sub_1000E301C(__p, &v66);
        --v13;
      }
      while (v13);
      v25 = (char *)a1[2];
      for (i = v68; v11; --v11)
      {
        if (i == v69)
        {
          v27 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0])
              v35 = 1;
            else
              v35 = (i - (char *)__p[0]) >> 2;
            v36 = (char *)sub_1000193CC((uint64_t)v70, v35);
            v38 = (uint64_t *)__p[1];
            i = &v36[8 * (v35 >> 2)];
            v39 = v68 - (char *)__p[1];
            if (v68 != __p[1])
            {
              i = &v36[8 * (v35 >> 2) + (v39 & 0xFFFFFFFFFFFFFFF8)];
              v40 = 8 * (v39 >> 3);
              v41 = &v36[8 * (v35 >> 2)];
              do
              {
                v42 = *v38++;
                *(_QWORD *)v41 = v42;
                v41 += 8;
                v40 -= 8;
              }
              while (v40);
            }
            v43 = __p[0];
            __p[0] = v36;
            __p[1] = &v36[8 * (v35 >> 2)];
            v68 = i;
            v69 = &v36[8 * v37];
            if (v43)
            {
              operator delete(v43);
              i = v68;
            }
          }
          else
          {
            v28 = v27 >> 3;
            v29 = v27 >> 3 < -1;
            v30 = (v27 >> 3) + 2;
            if (v29)
              v31 = v30;
            else
              v31 = v28 + 1;
            v32 = (char *)__p[1] - 8 * (v31 >> 1);
            v33 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v31 >> 1), __p[1], i - (char *)__p[1]);
              i = (char *)__p[1];
            }
            v34 = &i[-8 * (v31 >> 1)];
            i = &v32[v33];
            __p[1] = v34;
            v68 = &v32[v33];
          }
        }
        *(_QWORD *)i = *((_QWORD *)v25 - 1);
        i = v68 + 8;
        v68 += 8;
        v25 = (char *)a1[2] - 8;
        a1[2] = v25;
      }
      v44 = (char *)a1[1];
      if (v44 == v25)
      {
        v44 = v25;
      }
      else
      {
        do
        {
          if (i == v69)
          {
            v45 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0])
                v52 = 1;
              else
                v52 = (i - (char *)__p[0]) >> 2;
              v53 = (char *)sub_1000193CC((uint64_t)v70, v52);
              v55 = (uint64_t *)__p[1];
              i = &v53[8 * (v52 >> 2)];
              v56 = v68 - (char *)__p[1];
              if (v68 != __p[1])
              {
                i = &v53[8 * (v52 >> 2) + (v56 & 0xFFFFFFFFFFFFFFF8)];
                v57 = 8 * (v56 >> 3);
                v58 = &v53[8 * (v52 >> 2)];
                do
                {
                  v59 = *v55++;
                  *(_QWORD *)v58 = v59;
                  v58 += 8;
                  v57 -= 8;
                }
                while (v57);
              }
              v60 = __p[0];
              __p[0] = v53;
              __p[1] = &v53[8 * (v52 >> 2)];
              v68 = i;
              v69 = &v53[8 * v54];
              if (v60)
              {
                operator delete(v60);
                i = v68;
              }
            }
            else
            {
              v46 = v45 >> 3;
              v29 = v45 >> 3 < -1;
              v47 = (v45 >> 3) + 2;
              if (v29)
                v48 = v47;
              else
                v48 = v46 + 1;
              v49 = (char *)__p[1] - 8 * (v48 >> 1);
              v50 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v48 >> 1), __p[1], i - (char *)__p[1]);
                i = (char *)__p[1];
              }
              v51 = &i[-8 * (v48 >> 1)];
              i = &v49[v50];
              __p[1] = v51;
              v68 = &v49[v50];
            }
          }
          v61 = *(_QWORD *)v44;
          v44 += 8;
          *(_QWORD *)i = v61;
          i = v68 + 8;
          v68 += 8;
        }
        while (v44 != a1[2]);
        v25 = (char *)a1[1];
      }
      v62 = v69;
      v63 = (char *)a1[3];
      v64 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v62;
      v65 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v65;
      __p[1] = v25;
      v68 = v44;
      v69 = v63;
      a1[4] = &v64[v24];
      if (v44 != v25)
        v68 = &v44[(v25 - v44 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v65)
        operator delete(v65);
    }
  }
}

void sub_1000E5DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000E5E58(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 3);
    if (v4 < 1)
      result -= (unint64_t)(511 - v4) >> 9;
    else
      result += (unint64_t)v4 >> 9;
  }
  return result;
}

void sub_1000E5EBC(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = a1[4];
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_1000193CC((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_1000E2DEC(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1000E2F00((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 511;
          else
            v64 = 512;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_1000193CC((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_1000193CC((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_1000E301C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_1000193CC((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1000E3130((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1000E63D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000E6444(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 3) - a2;
    if (v4 < 1)
      result -= (unint64_t)(511 - v4) >> 9;
    else
      result += (unint64_t)v4 >> 9;
  }
  return result;
}

double sub_1000E64AC(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  char **v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  if (a1 == a3)
  {
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
    v10 = __src;
  }
  else
  {
    v8 = a1 + 1;
    sub_1000E6578(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      v9 = *v8++;
      sub_1000E6578(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    v10 = *a3;
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
  }
  sub_1000E6578(v10, v12, a4, v11, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_1000E6578@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  void **v6;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12)
        __src = (char *)memmove(__dst, v9, 8 * v12);
      v9 += 8 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

__n128 sub_1000E6634@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_1000E6700(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
    }
    v18 = *a1 + 4096;
    v19 = a2;
  }
  sub_1000E6700(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1000E6700@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  char *v16;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 3 >= v12 >> 3)
        v13 = v12 >> 3;
      else
        v13 = (v11 - a1) >> 3;
      v11 -= 8 * v13;
      a4 -= 8 * v13;
      if (v13)
        result = memmove(a4, v11, 8 * v13);
      if (v11 == a1)
        break;
      v15 = *--v6;
      v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

void sub_1000E67B8(uint64_t a1, unint64_t **a2, unint64_t *a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t **v15;
  unint64_t *v16;

  if (a3 != a5)
  {
    v12 = *a2;
    v13 = a3;
    v14 = a3;
    v15 = a2;
    while (1)
    {
      if ((char *)++v14 - (char *)v12 == 4096)
      {
        v16 = v15[1];
        ++v15;
        v12 = v16;
        v14 = v16;
      }
      if (v14 == a5)
        break;
      if (*v13 < *v14)
        v13 = v14;
    }
    std::mutex::lock((std::mutex *)(a1 + 8));
    sub_1000E68C8((uint64_t *)(a1 + 72), a2, a3, a4, a5);
    if (*v13 >= *(_QWORD *)(a1 + 96))
      *(_QWORD *)(a1 + 96) = *(_QWORD *)a1 + *v13;
    sub_1000D0B84((_QWORD *)a1, a6);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
}

void sub_1000E68B4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000E68C8(uint64_t *result, _QWORD *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  unint64_t *v6;
  uint64_t **v8;
  _QWORD *v9;
  unint64_t *v10;

  if (a3 != a5)
  {
    v6 = a3;
    v8 = (uint64_t **)result;
    v9 = result + 1;
    do
    {
      result = sub_1000E6940(v8, v9, v6, (uint64_t *)v6);
      if ((unint64_t *)((char *)++v6 - *a2) == (unint64_t *)4096)
      {
        v10 = (unint64_t *)a2[1];
        ++a2;
        v6 = v10;
      }
    }
    while (v6 != a5);
  }
  return result;
}

uint64_t *sub_1000E6940(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)sub_1000E3800(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    sub_1000284A8(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t sub_1000E69C4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100188D40;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000E6A2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E6A40(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100188F60;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000E6AA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E6ABC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100189180;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000E6B24(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E6B38(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001893A0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000E6BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E6BB4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001895C0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000E6C1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E6C30(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001897E0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000E6C98(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E6CAC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100189C20;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000E6D14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_1000E6D28(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  std::mutex *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  char v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  std::condition_variable *v44;
  uint64_t **v45;
  std::unique_lock<std::mutex> v46;
  unint64_t v47;
  unint64_t *v48;
  std::unique_lock<std::mutex> __lk;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t *v53;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v54;

  v50 = a2;
  v7 = (std::mutex *)(a1 + 952);
  v8 = (_QWORD *)(a1 + 936);
  v9 = (unint64_t *)(a1 + 1184);
  v10 = (unint64_t *)(a1 + 768);
  v43 = (unint64_t *)(a1 + 104);
  v44 = (std::condition_variable *)(a1 + 1016);
  v45 = (uint64_t **)(a1 + 928);
  while (2)
  {
    __lk.__m_ = v7;
    __lk.__owns_ = 1;
    std::mutex::lock(v7);
    if (a3)
    {
      v11 = v50;
    }
    else
    {
      v16 = (_QWORD *)*v8;
      if (!*v8)
        goto LABEL_20;
      v11 = v50;
      v17 = v8;
      do
      {
        v18 = v16[4];
        v19 = v18 >= v50;
        if (v18 >= v50)
          v20 = v16;
        else
          v20 = v16 + 1;
        if (v19)
          v17 = v16;
        v16 = (_QWORD *)*v20;
      }
      while (*v20);
      if (v17 == v8 || v50 < v17[4] || (unint64_t *)v17[5] == v9)
      {
LABEL_20:
        v51 = 0;
        *a4 = 0;
        do
          v21 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0, (unint64_t *)&v51));
        atomic_store(v21, a4);
        a4[1] = (unint64_t)v8;
        sub_1000C1E4C((unint64_t *)&v51);
        goto LABEL_23;
      }
    }
    v51 = (unint64_t *)v11;
    v52 = v9;
    v12 = sub_1000E2648(v45, (unint64_t *)&v51, (uint64_t *)&v51);
    v13 = v12;
    if (v14)
    {
      v51 = 0;
      *a4 = 0;
      do
        v15 = __ldaxr((unint64_t *)&v51);
      while (__stlxr(0, (unint64_t *)&v51));
      atomic_store(v15, a4);
      a4[1] = (unint64_t)v12;
      sub_1000C1E4C((unint64_t *)&v51);
LABEL_23:
      v22 = 1;
      goto LABEL_24;
    }
    v48 = (unint64_t *)v12[5];
    if (v48 == v9)
    {
      v28 = (_QWORD *)*v8;
      if (*v8)
      {
        v29 = v50;
        v30 = v8;
        while (1)
        {
          v31 = v28[4];
          v32 = v31 >= v29;
          if (v31 >= v29)
            v33 = v28;
          else
            v33 = v28 + 1;
          if (v32)
            v30 = v28;
          v28 = (_QWORD *)*v33;
          if (!*v33)
          {
            if (v30 == v8)
              break;
            if (v29 < v30[4])
              break;
            v34 = (unint64_t *)v30[5];
            if (v34 != v9)
            {
              v35 = v34[67];
              if (v35)
              {
                if (!*(_BYTE *)(v35 + 520))
                  break;
              }
            }
            if (!*(_BYTE *)(a1 + 912))
              break;
            std::condition_variable::wait(v44, &__lk);
            v28 = (_QWORD *)*v8;
            v30 = v8;
            if (!*v8)
              break;
          }
        }
      }
      v22 = 0;
      goto LABEL_24;
    }
    sub_10003DEE8((uint64_t)&__lk);
    sub_1000E7534(&v47, v48 + 67);
    if (v47 && !*(_BYTE *)(v47 + 520))
    {
      v23 = v50;
      if (*(_QWORD *)(v47 + 32) == v50)
      {
        *a4 = 0;
        do
          v37 = __ldaxr(&v47);
        while (__stlxr(0, &v47));
        atomic_store(v37, a4);
        a4[1] = (unint64_t)v13;
        goto LABEL_84;
      }
      if (*(_QWORD *)(v47 + 32) == -1)
      {
        v24 = v43;
        if ((a3 & 1) == 0)
        {
          v51 = 0;
          *a4 = 0;
          do
            v36 = __ldaxr((unint64_t *)&v51);
          while (__stlxr(0, (unint64_t *)&v51));
          goto LABEL_83;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (!a3)
      {
        v51 = 0;
        *a4 = 0;
        do
          v36 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0, (unint64_t *)&v51));
        goto LABEL_83;
      }
      v23 = v50;
    }
    v24 = v43;
LABEL_35:
    if (sub_1000E47C0(a1, 0, v23, 1u) != -1)
    {
      do
        v25 = __ldaxr(v10);
      while (__stlxr(v25 + 1, v10));
      v46.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E1E0((unint64_t)v48);
      v46.__owns_ = 1;
      std::mutex::lock(v46.__m_);
      v26 = sub_10011E2A0((unint64_t)v48);
      v54 = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
      v51 = (unint64_t *)&v48;
      v52 = &v47;
      v53 = &v50;
      sub_1000E77C4((std::condition_variable *)v26, &v46, &v54, (uint64_t)&v51);
      do
        v27 = __ldaxr(v10);
      while (__stlxr(v27 - 1, v10));
      if (v46.__owns_)
        std::mutex::unlock(v46.__m_);
      v22 = 3;
      goto LABEL_85;
    }
    v51 = 0;
    v38 = atomic_load(v24);
    if (!v38)
      goto LABEL_81;
    while (1)
    {
      v39 = __ldaxr(v24);
      if (v39 != v38)
      {
        __clrex();
        goto LABEL_71;
      }
      if (!__stlxr(v38 + 1, v24))
        break;
LABEL_71:
      v38 = v39;
      if (!v39)
        goto LABEL_81;
    }
    v40 = *(unint64_t **)(a1 + 608);
    v38 = (unint64_t)v24;
    if (v40)
    {
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      *(_QWORD *)(a1 + 616) = v41;
      v38 = (unint64_t)v24;
    }
LABEL_81:
    atomic_store(v38, (unint64_t *)&v51);
    *a4 = 0;
    do
      v36 = __ldaxr((unint64_t *)&v51);
    while (__stlxr(0, (unint64_t *)&v51));
LABEL_83:
    atomic_store(v36, a4);
    a4[1] = (unint64_t)v8;
    sub_1000C1E4C((unint64_t *)&v51);
LABEL_84:
    v22 = 1;
LABEL_85:
    sub_1000C1E4C(&v47);
LABEL_24:
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (v22 != 1)
    {
      if (!*(_BYTE *)(a1 + 912))
      {
        v51 = 0;
        *a4 = 0;
        do
          v42 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0, (unint64_t *)&v51));
        atomic_store(v42, a4);
        a4[1] = (unint64_t)v8;
        sub_1000C1E4C((unint64_t *)&v51);
        return;
      }
      continue;
    }
    break;
  }
}

void sub_1000E7188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, int a14, unint64_t a15, uint64_t a16, std::mutex *a17, char a18)
{
  sub_1000C1E4C(&a15);
  if (a18)
    std::mutex::unlock(a17);
  _Unwind_Resume(a1);
}

unint64_t *sub_1000E71E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14[5];

  v13 = 0;
  v6 = (std::mutex *)(a1 + 696);
  std::mutex::lock((std::mutex *)(a1 + 696));
  v7 = *(_QWORD *)(a1 + 688);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 680);
    v9 = *(unint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 656) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
    *(_QWORD *)(a1 + 688) = v7 - 1;
    *(_QWORD *)(a1 + 680) = v8 + 1;
    sub_1000E2958(a1 + 648, 1);
    sub_1000E7418(a1, v9, a2, v14);
    sub_1000CE138(&v13, v14);
    sub_1000C1E4C(v14);
  }
  else
  {
    v9 = 0;
  }
  std::mutex::unlock(v6);
  v10 = atomic_load((unint64_t *)(a1 + 784));
  if (v10 + v7 >= *(_QWORD *)(a1 + 640))
  {
    sub_1000E47C0(a1, 0, 0, 0);
  }
  else
  {
    v14[0] = (unint64_t)_NSConcreteStackBlock;
    v14[1] = 0x40000000;
    v14[2] = (unint64_t)sub_1000E7948;
    v14[3] = (unint64_t)&unk_10018AE90;
    v14[4] = a1;
    sub_100100C28((dispatch_queue_t *)(a1 + 920), v14);
  }
  *a3 = v9;
  a3[1] = 0;
  do
    v11 = __ldaxr(&v13);
  while (__stlxr(0, &v13));
  atomic_store(v11, (unint64_t *)a3 + 1);
  return sub_1000C1E4C(&v13);
}

void sub_1000E7340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_1000C1E4C(&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_1000E7374(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = atomic_load(a1 + 97);
  v2 = a1[79];
  if (!v2)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = a1[95];
    v7 = *(_QWORD *)(v6 + 8 * v3);
    if (v7 && v1 - *(_QWORD *)(v7 + 520) != -1)
    {
      v5 = *(_QWORD *)(v6 + 8 * v3);
      v4 = v3;
    }
    ++v3;
  }
  while (v2 != v3);
  if (!v5)
    return 0;
  v8 = (unint64_t *)(a1[95] + 8 * v4);
  do
  {
    v9 = __ldaxr(v8);
    if (v9 != v5)
    {
      __clrex();
      return 0;
    }
  }
  while (__stlxr(0, v8));
  if ((sub_1000E4530((uint64_t)a1, v5, 0x101uLL, 0) & 1) == 0)
    return 0;
  return v5;
}

unint64_t *sub_1000E7418@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v15;
  unint64_t v17;

  sub_1000E7D80((uint64_t)a2, a3);
  v7 = a2 + 1;
  v17 = 0;
  v8 = atomic_load(a2 + 1);
  if (!v8)
  {
LABEL_7:
    v7 = 0;
    goto LABEL_11;
  }
  while (1)
  {
    v9 = __ldaxr(v7);
    if (v9 != v8)
    {
      __clrex();
      goto LABEL_6;
    }
    if (!__stlxr(v8 + 1, v7))
      break;
LABEL_6:
    v8 = v9;
    if (!v9)
      goto LABEL_7;
  }
  v10 = (unint64_t *)a2[64];
  if (v10)
  {
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    a2[65] = v11;
  }
LABEL_11:
  atomic_store((unint64_t)v7, &v17);
  if (*(_QWORD *)(a1 + 632))
  {
    v12 = 0;
    while (2)
    {
      v13 = (unint64_t *)(*(_QWORD *)(a1 + 760) + 8 * v12);
      while (!__ldaxr(v13))
      {
        if (!__stlxr((unint64_t)a2, v13))
        {
          *a4 = 0;
          do
            v15 = __ldaxr(&v17);
          while (__stlxr(0, &v17));
          atomic_store(v15, a4);
          return sub_1000C1E4C(&v17);
        }
      }
      __clrex();
      if (*(_QWORD *)(a1 + 632) > (unint64_t)++v12)
        continue;
      break;
    }
  }
  *a4 = 0;
  return sub_1000C1E4C(&v17);
}

unint64_t *sub_1000E7534(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  *a1 = 0;
  v3 = (unint64_t *)atomic_load(a2);
  if (!v3)
    goto LABEL_9;
  v4 = atomic_load(v3);
  if (!v4)
    goto LABEL_8;
  while (1)
  {
    v5 = __ldaxr(v3);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_7;
    }
    if (!__stlxr(v4 + 1, v3))
      break;
LABEL_7:
    v4 = v5;
    if (!v5)
      goto LABEL_8;
  }
  v7 = (unint64_t *)v3[63];
  if (v7)
  {
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v3[64] = v8;
  }
  if (!sub_1000E7604((uint64_t)v3))
  {
    do
      v9 = __ldaxr(v3);
    while (__stlxr(v9 - 1, v3));
    if (v9 == 1)
    {
      v10 = v3[4];
      v3[4] = -1;
      sub_1000C1E8C((uint64_t)v3, v10, 1u);
    }
LABEL_8:
    v3 = 0;
  }
LABEL_9:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL sub_1000E7604(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;

  v2 = (unsigned int *)(a1 + 24);
  v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
  {
    v4 = atomic_load((unint64_t *)a1);
    return v4 > 1;
  }
  else
  {
    v6 = (unint64_t *)(a1 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = atomic_load(v2);
    if (v8 != 2 && !*(_BYTE *)(a1 + 520))
      sub_1000E76B0(a1 + 24, 1u, 5u);
    do
      v9 = __ldaxr(v6);
    while (__stlxr(v9 - 1, v6));
    v10 = atomic_load((unint64_t *)a1);
    if (v10 < 2)
    {
      return 0;
    }
    else
    {
      v11 = atomic_load(v2);
      return v11 == 2;
    }
  }
}

BOOL sub_1000E76B0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)&v4 = a1;
  *((_QWORD *)&v4 + 1) = __PAIR64__(a3, a2);
  v5 = a1;
  v6 = v4;
  return sub_1000DCE1C((uint64_t)&v4, (uint64_t)&v5, 0);
}

unint64_t *sub_1000E76F0(unint64_t *a1, unint64_t *a2, int a3)
{
  unint64_t *v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = a2;
  *a1 = 0;
  if (!a2)
    goto LABEL_9;
  v5 = atomic_load(a2);
  if (!v5)
    goto LABEL_8;
  while (1)
  {
    v6 = __ldaxr(a2);
    if (v6 != v5)
    {
      __clrex();
      goto LABEL_7;
    }
    if (!__stlxr(v5 + 1, a2))
      break;
LABEL_7:
    v5 = v6;
    if (!v6)
      goto LABEL_8;
  }
  v8 = (unint64_t *)a2[63];
  if (v8)
  {
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    a2[64] = v9;
  }
  if (a3 && !sub_1000E7604((uint64_t)a2))
  {
    do
      v10 = __ldaxr(v3);
    while (__stlxr(v10 - 1, v3));
    if (v10 == 1)
    {
      v11 = v3[4];
      v3[4] = -1;
      sub_1000C1E8C((uint64_t)v3, v11, 1u);
    }
LABEL_8:
    v3 = 0;
  }
LABEL_9:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL sub_1000E77C4(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3, uint64_t a4)
{
  uint64_t v8;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9;
  std::chrono::steady_clock::time_point v10;
  std::chrono::system_clock::time_point v11;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v13;
  uint64_t v14;

  do
  {
    if ((*(_DWORD *)(**(_QWORD **)a4 + 544) & 1) != 0)
      return 1;
    v8 = *(_QWORD *)(a4 + 8);
    if (*(_QWORD *)v8)
    {
      if (!*(_BYTE *)(*(_QWORD *)v8 + 520) && *(_QWORD *)(*(_QWORD *)v8 + 32) == **(_QWORD **)(a4 + 16))
        return 1;
    }
    if (*a3 <= std::chrono::steady_clock::now().__d_.__rep_)
      break;
    v9 = *a3;
    v10.__d_.__rep_ = v9 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v11.__d_.__rep_)
      {
        if (v11.__d_.__rep_ < 1)
        {
          if ((unint64_t)v11.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v12 = 0x8000000000000000;
            goto LABEL_17;
          }
        }
        else if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v12 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_15;
        }
        v12 = 1000 * v11.__d_.__rep_;
      }
      else
      {
        v12 = 0;
      }
LABEL_15:
      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_17:
      v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
      goto LABEL_18;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a3);
  if ((*(_DWORD *)(**(_QWORD **)a4 + 544) & 1) != 0)
    return 1;
  v14 = *(_QWORD *)(a4 + 8);
  return *(_QWORD *)v14
      && !*(_BYTE *)(*(_QWORD *)v14 + 520)
      && *(_QWORD *)(*(_QWORD *)v14 + 32) == **(_QWORD **)(a4 + 16);
}

uint64_t sub_1000E7948(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = sub_1000E7374(v1);
  if (v2)
    sub_1000E798C((uint64_t)v1, v2);
  return sub_1000E47C0((uint64_t)v1, 0, 0, 0);
}

void sub_1000E798C(uint64_t a1, uint64_t a2)
{
  std::mutex *v3;
  uint64_t v4;

  v4 = a2;
  v3 = (std::mutex *)(a1 + 696);
  std::mutex::lock((std::mutex *)(a1 + 696));
  sub_1000E79E8((_QWORD *)(a1 + 648), &v4);
  std::mutex::unlock(v3);
}

void sub_1000E79D4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000E79E8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1000E7A6C(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1000E7A6C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_1000193CC(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1000E2DEC(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_1000E2F00((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_1000193CC((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_1000193CC((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_1000E301C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1000E3130((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1000E7D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t *sub_1000E7D80(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  atomic_store(0, (unsigned int *)(a1 + 544));
  v3 = (unint64_t *)(a1 + 8);
  sub_1000E7E70(a1 + 8, a2);
  v12 = 0;
  v4 = atomic_load(v3);
  if (!v4)
    goto LABEL_11;
  while (1)
  {
    v5 = __ldaxr(v3);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_6;
    }
    if (!__stlxr(v4 + 1, v3))
      break;
LABEL_6:
    v4 = v5;
    if (!v5)
      goto LABEL_11;
  }
  v6 = *(unint64_t **)(a1 + 512);
  v4 = (unint64_t)v3;
  if (v6)
  {
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    *(_QWORD *)(a1 + 520) = v7;
    v4 = (unint64_t)v3;
  }
LABEL_11:
  atomic_store(v4, &v12);
  sub_1000CE138((unint64_t *)(a1 + 536), &v12);
  result = sub_1000C1E4C(&v12);
  do
  {
    v9 = __ldaxr(v3);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v3));
  if (!v10)
  {
    v11 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = -1;
    return (unint64_t *)sub_1000C1E8C((uint64_t)v3, v11, 1u);
  }
  return result;
}

uint64_t *sub_1000E7E70(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 520) = 0;
  atomic_store(1uLL, (unint64_t *)a1);
  atomic_store(0, (unint64_t *)(a1 + 8));
  atomic_store(0, (unint64_t *)(a1 + 16));
  result = sub_1000C218C((uint64_t *)(a1 + 40));
  v4 = *(unint64_t **)(a1 + 504);
  if (v4)
  {
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    *(_QWORD *)(a1 + 512) = v5;
  }
  atomic_store(1u, (unsigned int *)(a1 + 24));
  __dmb(0xBu);
  return result;
}

void sub_1000E7EDC(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t *a5, unsigned __int8 *a6)
{
  uint64_t v11;

  *(_QWORD *)(a1 + 512) = **(_QWORD **)(a1 + 504);
  v11 = a1 + 40;
  sub_1000C218C((uint64_t *)(a1 + 40));
  sub_1000E7FD0(v11, a2, a3, a4, a5, a6);
}

void sub_1000E7F70(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(_BYTE *)(v1 + 520) = 1;
  sub_1000E7FA8(v1);
  __cxa_rethrow();
}

void sub_1000E7F94(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000E7FA8(uint64_t a1)
{
  if (atomic_load((unint64_t *)(a1 + 8)))
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
}

void sub_1000E7FD0(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t *a5, unsigned __int8 *a6)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[2];

  v6 = a3[1];
  v9[0] = *a3;
  v9[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_1000C3084(a1, a2, (uint64_t)v9, *a4, *a5, *a6);
}

void sub_1000E8064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000E8078(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t *a5)
{
  uint64_t v9;

  *(_QWORD *)(a1 + 512) = **(_QWORD **)(a1 + 504);
  v9 = a1 + 40;
  sub_1000C218C((uint64_t *)(a1 + 40));
  sub_1000E8134(v9, a2, a3, a4, a5);
}

void sub_1000E80FC(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(_BYTE *)(v1 + 520) = 1;
  sub_1000E7FA8(v1);
  __cxa_rethrow();
}

void sub_1000E8120(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000E8134(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v8[2];

  v5 = a3[1];
  v8[0] = *a3;
  v8[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_1000C3084(a1, a2, (uint64_t)v8, *a4, *a5, 0);
}

void sub_1000E81C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E81DC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100189E40;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000E8244(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E8258(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018A060;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000E82C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E82D4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018A280;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000E833C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E8350(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018A4A0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000E83B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_1000E83CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_1000E8800(a1);
  *(_QWORD *)(v8 + 632) = a2;
  *(_QWORD *)(v8 + 640) = a3;
  *(_OWORD *)(v8 + 648) = 0u;
  *(_OWORD *)(v8 + 664) = 0u;
  *(_OWORD *)(v8 + 680) = 0u;
  *(_QWORD *)(v8 + 696) = 850045863;
  *(_OWORD *)(v8 + 704) = 0u;
  *(_OWORD *)(v8 + 720) = 0u;
  *(_OWORD *)(v8 + 736) = 0u;
  *(_QWORD *)(v8 + 752) = 0;
  *(_OWORD *)(v8 + 768) = 0u;
  *(_OWORD *)(v8 + 784) = 0u;
  *(_QWORD *)(v8 + 800) = 850045863;
  *(_OWORD *)(v8 + 808) = 0u;
  *(_OWORD *)(v8 + 824) = 0u;
  *(_OWORD *)(v8 + 840) = 0u;
  *(_QWORD *)(v8 + 856) = 0;
  *(_QWORD *)(v8 + 864) = 1018212795;
  *(_QWORD *)(v8 + 904) = 0;
  *(_OWORD *)(v8 + 888) = 0u;
  *(_BYTE *)(v8 + 912) = 1;
  *(_OWORD *)(v8 + 872) = 0u;
  sub_100100C14(v8 + 920, "dealloc_queue");
  *(_QWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 928) = a1 + 936;
  *(_QWORD *)(a1 + 952) = 850045863;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_QWORD *)(a1 + 1008) = 0;
  *(_QWORD *)(a1 + 1016) = 1018212795;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_QWORD *)(a1 + 1064) = 850045863;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_QWORD *)(a1 + 1128) = a1 + 1128;
  *(_QWORD *)(a1 + 1136) = a1 + 1128;
  *(_QWORD *)(a1 + 1144) = 0;
  sub_100012568(a1 + 1152, a4);
  sub_1000E8BEC(a1 + 1184, a1);
  *(_QWORD *)(a1 + 1736) = off_10018B170;
  *(_QWORD *)(a1 + 1744) = a1;
  *(_QWORD *)(a1 + 1760) = a1 + 1736;
  *(_QWORD *)(a1 + 1768) = off_10018B200;
  *(_QWORD *)(a1 + 1776) = a1;
  *(_QWORD *)(a1 + 1792) = a1 + 1768;
  operator new[]();
}

void sub_1000E85F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD **a10, std::condition_variable *a11, _QWORD *a12, NSObject **a13)
{
  uint64_t v13;
  _QWORD *v14;
  std::mutex *v15;
  _QWORD *v16;
  _QWORD *v18;
  uint64_t v19;

  v18 = *(_QWORD **)(v13 + 1176);
  if (v18 == a12)
  {
    v19 = 4;
    v18 = a12;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  sub_1000E4BAC(v16);
  std::mutex::~mutex((std::mutex *)(v13 + 1064));
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 + 1016));
  std::mutex::~mutex((std::mutex *)(v13 + 952));
  sub_100027D5C(v13 + 928, *a10);
  sub_100100B68(a13);
  std::condition_variable::~condition_variable(a11);
  std::mutex::~mutex(v15);
  std::mutex::~mutex((std::mutex *)(v13 + 696));
  sub_1000C2854(v14);
  sub_1000E4C0C((_QWORD *)v13);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E8744(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[4];
  v8 = a1[5];
  v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    sub_1000E7A6C(a1);
    v7 = a1[4];
    v8 = a1[5];
    v5 = a1[1];
    v9 = v7 + v8;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  v10 = v7 + v8 + 1;
  v11 = a1[1];
  v12 = (_QWORD *)(v11 + 8 * (v10 >> 9));
  v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11)
    v13 = 0;
  if (v13 == *v12)
    v13 = *(v12 - 1) + 4096;
  return v13 - 8;
}

uint64_t sub_1000E8800(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = off_10018AF50;
  *(_QWORD *)(a1 + 56) = a1 + 32;
  *(_QWORD *)a1 = off_10018AEC0;
  *(_QWORD *)(a1 + 64) = off_10018AFE0;
  *(_QWORD *)(a1 + 24) = a1;
  *(_QWORD *)(a1 + 88) = a1 + 64;
  *(_QWORD *)(a1 + 96) = 0;
  v2 = sub_1000E8AD8(a1 + 104, a1, a1 + 32, a1 + 64, a1 + 96);
  sub_1000E7E70(v2, -1);
  atomic_store(0, (unsigned int *)(a1 + 128));
  *(_BYTE *)(a1 + 624) = 1;
  return a1;
}

void sub_1000E88A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 88);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = *(_QWORD **)(v1 + 88);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  sub_100123864();
  _Unwind_Resume(a1);
}

void sub_1000E88F8()
{
  operator delete();
}

_QWORD *sub_1000E890C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_10018AEC0;
  return result;
}

void sub_1000E8930(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10018AEC0;
}

uint64_t sub_1000E894C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000E8988()
{
}

void sub_1000E8998()
{
  operator delete();
}

_QWORD *sub_1000E89AC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_10018AF50;
  return result;
}

void sub_1000E89D0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10018AF50;
}

uint64_t sub_1000E89EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000E8A28()
{
}

void sub_1000E8A38()
{
  operator delete();
}

_QWORD *sub_1000E8A4C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_10018AFE0;
  return result;
}

void sub_1000E8A70(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10018AFE0;
}

uint64_t sub_1000E8A88()
{
  return 0;
}

uint64_t sub_1000E8A90(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000E8ACC()
{
}

uint64_t sub_1000E8AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = -1;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  sub_100012568(a1 + 408, a2);
  sub_100012568(a1 + 440, a3);
  sub_100012568(a1 + 472, a4);
  *(_QWORD *)(a1 + 504) = a5;
  *(_QWORD *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  return a1;
}

void sub_1000E8B6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v6 = *(_QWORD **)(v2 + 464);
  if (v6 == v4)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v4 = *(_QWORD **)(v2 + 464);
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v7))(v4);
LABEL_6:
  v8 = *(_QWORD **)(v2 + 432);
  if (v8 == v3)
  {
    v9 = 4;
    v8 = v3;
  }
  else
  {
    if (!v8)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  sub_1000E4B4C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E8BEC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;

  *(_QWORD *)a1 = a2;
  v10[0] = off_10018B070;
  v10[1] = a1;
  v11 = v10;
  v8[0] = off_10018B0F0;
  v8[1] = a1;
  v9 = v8;
  sub_1000E8AD8(a1 + 8, (uint64_t)v10, (uint64_t)v8, a2 + 1152, a2 + 776);
  v3 = v9;
  if (v9 == v8)
  {
    v4 = 4;
    v3 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = v11;
  if (v11 == v10)
  {
    v6 = 4;
    v5 = v10;
    goto LABEL_10;
  }
  if (v11)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  *(_QWORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  return a1;
}

void sub_1000E8CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_1000E8D50()
{
  operator delete();
}

_QWORD *sub_1000E8D64(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10018B070;
  result[1] = v3;
  return result;
}

uint64_t sub_1000E8D98(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10018B070;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000E8DB4(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  return sub_1000C2148(**(_QWORD **)(a1 + 8) + 1736, *(_QWORD *)(a1 + 8), *a3, *a4);
}

uint64_t sub_1000E8DCC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000E8E08()
{
}

void sub_1000E8E18()
{
  operator delete();
}

_QWORD *sub_1000E8E2C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10018B0F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1000E8E60(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10018B0F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000E8E7C(uint64_t a1)
{
  return sub_1000E8ECC((uint64_t **)(a1 + 8));
}

uint64_t sub_1000E8E84(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000E8EC0()
{
}

uint64_t sub_1000E8ECC(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;

  v1 = **a1;
  v4 = *a1;
  v2 = *(_QWORD *)(v1 + 1792);
  if (!v2)
    sub_100017C6C();
  return (*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v2 + 48))(v2, &v4);
}

void sub_1000E8F10()
{
  operator delete();
}

_QWORD *sub_1000E8F24(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10018B170;
  result[1] = v3;
  return result;
}

uint64_t sub_1000E8F58(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10018B170;
  a2[1] = v2;
  return result;
}

void sub_1000E8F74(uint64_t a1, unint64_t *a2, unint64_t *a3, _DWORD *a4)
{
  sub_1000E8FD0(*(_QWORD *)(a1 + 8), *a2, *a3, *a4);
}

uint64_t sub_1000E8F88(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000E8FC4()
{
}

void sub_1000E8FD0(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  unsigned int *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  char *v12;
  char *v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v20;
  char *v23;

  if ((*(_DWORD *)(a2 + 544) & 1) == 0)
  {
    v7 = (unsigned int *)(a2 + 544);
    if ((a4 & 3) == 1)
    {
      v8 = (char *)(a1 + 1064);
      std::mutex::lock((std::mutex *)(a1 + 1064));
      v9 = operator new(0x20uLL);
      v9[2] = a2;
      v9[3] = a3;
      v10 = *(_QWORD *)(a1 + 1128);
      *v9 = v10;
      v9[1] = a1 + 1128;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)(a1 + 1128) = v9;
      ++*(_QWORD *)(a1 + 1144);
      do
        v11 = __ldaxr(v7);
      while (__stlxr(v11 | 4, v7));
      v12 = sub_10011E1E0(a2);
      std::mutex::lock((std::mutex *)v12);
      v13 = sub_10011E2A0(a2);
      std::condition_variable::notify_all((std::condition_variable *)v13);
      std::mutex::unlock((std::mutex *)v12);
LABEL_20:
      std::mutex::unlock((std::mutex *)v8);
      return;
    }
    sub_1000E917C(a1, a3);
    sub_1000C1E4C((unint64_t *)(a2 + 536));
    do
      v14 = __ldaxr(v7);
    while (__stlxr(v14 | 1, v7));
    if ((v14 & 2) == 0)
      sub_1000E798C(a1, a2);
    v15 = (unint64_t *)(a1 + 784);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      if (atomic_load((unint64_t *)(a1 + 792)))
      {
        std::mutex::lock((std::mutex *)(a1 + 800));
        if (atomic_load((unint64_t *)(a1 + 792)))
          std::condition_variable::notify_all((std::condition_variable *)(a1 + 864));
        std::mutex::unlock((std::mutex *)(a1 + 800));
      }
    }
    v20 = (unint64_t *)(a1 + 768);
    if (atomic_load(v20))
    {
      v8 = sub_10011E1E0(a2);
      std::mutex::lock((std::mutex *)v8);
      if (atomic_load(v20))
      {
        v23 = sub_10011E2A0(a2);
        std::condition_variable::notify_all((std::condition_variable *)v23);
      }
      goto LABEL_20;
    }
  }
}

void sub_1000E9150(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000E917C(uint64_t a1, unint64_t a2)
{
  std::mutex *v3;
  unint64_t v4;

  v4 = a2;
  v3 = (std::mutex *)(a1 + 952);
  std::mutex::lock((std::mutex *)(a1 + 952));
  sub_100040D30(a1 + 928, &v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 1016));
  std::mutex::unlock(v3);
}

void sub_1000E91CC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000E91E4()
{
  operator delete();
}

_QWORD *sub_1000E91F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10018B200;
  result[1] = v3;
  return result;
}

uint64_t sub_1000E922C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10018B200;
  a2[1] = v2;
  return result;
}

void sub_1000E9248(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  sub_1000E929C(*(_QWORD *)(a1 + 8), *a2, a3);
}

uint64_t sub_1000E9254(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000E9290()
{
}

void sub_1000E929C(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v3 = *(_QWORD *)(a1 + 632);
  if (v3 >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 760);
    v8 = v7 + 8 * v3;
    while (!(v7 + v6) || *(_QWORD *)(v7 + v6) != a2)
    {
      v6 += 8;
      if (v7 + v6 >= v8)
        return;
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
      v9 = (unint64_t *)(v7 + v6);
      while (1)
      {
        v10 = __ldaxr(v9);
        if (v10 != a2)
          break;
        if (!__stlxr(0, v9))
        {
          sub_1000E4530(a1, a2, 1uLL, a3);
          sub_1000E798C(a1, a2);
          return;
        }
      }
      __clrex();
    }
  }
}

void sub_1000E9344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_1000E976C(a1);
  *(_QWORD *)(v8 + 456) = a2;
  *(_QWORD *)(v8 + 464) = a3;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_QWORD *)(v8 + 520) = 850045863;
  *(_OWORD *)(v8 + 528) = 0u;
  *(_OWORD *)(v8 + 544) = 0u;
  *(_OWORD *)(v8 + 560) = 0u;
  *(_QWORD *)(v8 + 576) = 0;
  *(_OWORD *)(v8 + 592) = 0u;
  *(_OWORD *)(v8 + 608) = 0u;
  *(_QWORD *)(v8 + 624) = 850045863;
  *(_OWORD *)(v8 + 632) = 0u;
  *(_OWORD *)(v8 + 648) = 0u;
  *(_OWORD *)(v8 + 664) = 0u;
  *(_QWORD *)(v8 + 680) = 0;
  *(_QWORD *)(v8 + 688) = 1018212795;
  *(_QWORD *)(v8 + 728) = 0;
  *(_OWORD *)(v8 + 712) = 0u;
  *(_BYTE *)(v8 + 736) = 1;
  *(_OWORD *)(v8 + 696) = 0u;
  sub_100100C14(v8 + 744, "dealloc_queue");
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 752) = a1 + 760;
  *(_QWORD *)(a1 + 776) = 850045863;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 840) = 1018212795;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 888) = 850045863;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_QWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 952) = a1 + 952;
  *(_QWORD *)(a1 + 960) = a1 + 952;
  *(_QWORD *)(a1 + 968) = 0;
  sub_100012568(a1 + 976, a4);
  sub_1000E9B58(a1 + 1008, a1);
  *(_QWORD *)(a1 + 1384) = off_10018B540;
  *(_QWORD *)(a1 + 1392) = a1;
  *(_QWORD *)(a1 + 1408) = a1 + 1384;
  *(_QWORD *)(a1 + 1416) = off_10018B5D0;
  *(_QWORD *)(a1 + 1424) = a1;
  *(_QWORD *)(a1 + 1440) = a1 + 1416;
  operator new[]();
}

void sub_1000E9564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD **a10, std::condition_variable *a11, _QWORD *a12, NSObject **a13)
{
  uint64_t v13;
  _QWORD *v14;
  std::mutex *v15;
  _QWORD *v16;
  _QWORD *v18;
  uint64_t v19;

  v18 = *(_QWORD **)(v13 + 1000);
  if (v18 == a12)
  {
    v19 = 4;
    v18 = a12;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  sub_1000E4BAC(v16);
  std::mutex::~mutex((std::mutex *)(v13 + 888));
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 + 840));
  std::mutex::~mutex((std::mutex *)(v13 + 776));
  sub_100027D5C(v13 + 752, *a10);
  sub_100100B68(a13);
  std::condition_variable::~condition_variable(a11);
  std::mutex::~mutex(v15);
  std::mutex::~mutex((std::mutex *)(v13 + 520));
  sub_1000C2854(v14);
  sub_1000E50C0((_QWORD *)v13);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E96B0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[4];
  v8 = a1[5];
  v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    sub_1000E2AD8(a1);
    v7 = a1[4];
    v8 = a1[5];
    v5 = a1[1];
    v9 = v7 + v8;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  v10 = v7 + v8 + 1;
  v11 = a1[1];
  v12 = (_QWORD *)(v11 + 8 * (v10 >> 9));
  v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11)
    v13 = 0;
  if (v13 == *v12)
    v13 = *(v12 - 1) + 4096;
  return v13 - 8;
}

uint64_t sub_1000E976C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = off_10018B320;
  *(_QWORD *)(a1 + 56) = a1 + 32;
  *(_QWORD *)a1 = off_10018B290;
  *(_QWORD *)(a1 + 64) = off_10018B3B0;
  *(_QWORD *)(a1 + 24) = a1;
  *(_QWORD *)(a1 + 88) = a1 + 64;
  *(_QWORD *)(a1 + 96) = 0;
  v2 = sub_1000E9A44(a1 + 104, a1, a1 + 32, a1 + 64, a1 + 96);
  sub_1000E3700(v2, -1);
  atomic_store(0, (unsigned int *)(a1 + 128));
  *(_BYTE *)(a1 + 448) = 1;
  return a1;
}

void sub_1000E9810(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 88);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = *(_QWORD **)(v1 + 88);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  sub_100123864();
  _Unwind_Resume(a1);
}

void sub_1000E9864()
{
  operator delete();
}

_QWORD *sub_1000E9878()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_10018B290;
  return result;
}

void sub_1000E989C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10018B290;
}

uint64_t sub_1000E98B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000E98F4()
{
}

void sub_1000E9904()
{
  operator delete();
}

_QWORD *sub_1000E9918()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_10018B320;
  return result;
}

void sub_1000E993C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10018B320;
}

uint64_t sub_1000E9958(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000E9994()
{
}

void sub_1000E99A4()
{
  operator delete();
}

_QWORD *sub_1000E99B8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_10018B3B0;
  return result;
}

void sub_1000E99DC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10018B3B0;
}

uint64_t sub_1000E99F4()
{
  return 0;
}

uint64_t sub_1000E99FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000E9A38()
{
}

uint64_t sub_1000E9A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = -1;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  sub_100012568(a1 + 232, a2);
  sub_100012568(a1 + 264, a3);
  sub_100012568(a1 + 296, a4);
  *(_QWORD *)(a1 + 328) = a5;
  *(_QWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  return a1;
}

void sub_1000E9AD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v6 = *(_QWORD **)(v2 + 288);
  if (v6 == v4)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v4 = *(_QWORD **)(v2 + 288);
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v7))(v4);
LABEL_6:
  v8 = *(_QWORD **)(v2 + 256);
  if (v8 == v3)
  {
    v9 = 4;
    v8 = v3;
  }
  else
  {
    if (!v8)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  sub_1000E507C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E9B58(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;

  *(_QWORD *)a1 = a2;
  v10[0] = off_10018B440;
  v10[1] = a1;
  v11 = v10;
  v8[0] = off_10018B4C0;
  v8[1] = a1;
  v9 = v8;
  sub_1000E9A44(a1 + 8, (uint64_t)v10, (uint64_t)v8, a2 + 976, a2 + 600);
  v3 = v9;
  if (v9 == v8)
  {
    v4 = 4;
    v3 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = v11;
  if (v11 == v10)
  {
    v6 = 4;
    v5 = v10;
    goto LABEL_10;
  }
  if (v11)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  return a1;
}

void sub_1000E9C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_1000E9CBC()
{
  operator delete();
}

_QWORD *sub_1000E9CD0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10018B440;
  result[1] = v3;
  return result;
}

uint64_t sub_1000E9D04(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10018B440;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000E9D20(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  return sub_1000C2148(**(_QWORD **)(a1 + 8) + 1384, *(_QWORD *)(a1 + 8), *a3, *a4);
}

uint64_t sub_1000E9D38(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000E9D74()
{
}

void sub_1000E9D84()
{
  operator delete();
}

_QWORD *sub_1000E9D98(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10018B4C0;
  result[1] = v3;
  return result;
}

uint64_t sub_1000E9DCC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10018B4C0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000E9DE8(uint64_t a1)
{
  return sub_1000E9E38((uint64_t **)(a1 + 8));
}

uint64_t sub_1000E9DF0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000E9E2C()
{
}

uint64_t sub_1000E9E38(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;

  v1 = **a1;
  v4 = *a1;
  v2 = *(_QWORD *)(v1 + 1440);
  if (!v2)
    sub_100017C6C();
  return (*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v2 + 48))(v2, &v4);
}

void sub_1000E9E7C()
{
  operator delete();
}

_QWORD *sub_1000E9E90(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10018B540;
  result[1] = v3;
  return result;
}

uint64_t sub_1000E9EC4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10018B540;
  a2[1] = v2;
  return result;
}

void sub_1000E9EE0(uint64_t a1, unint64_t *a2, unint64_t *a3, _DWORD *a4)
{
  sub_1000E9F3C(*(_QWORD *)(a1 + 8), *a2, *a3, *a4);
}

uint64_t sub_1000E9EF4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000E9F30()
{
}

void sub_1000E9F3C(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  unsigned int *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  char *v12;
  char *v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v20;
  char *v23;

  if ((*(_DWORD *)(a2 + 368) & 1) == 0)
  {
    v7 = (unsigned int *)(a2 + 368);
    if ((a4 & 3) == 1)
    {
      v8 = (char *)(a1 + 888);
      std::mutex::lock((std::mutex *)(a1 + 888));
      v9 = operator new(0x20uLL);
      v9[2] = a2;
      v9[3] = a3;
      v10 = *(_QWORD *)(a1 + 952);
      *v9 = v10;
      v9[1] = a1 + 952;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)(a1 + 952) = v9;
      ++*(_QWORD *)(a1 + 968);
      do
        v11 = __ldaxr(v7);
      while (__stlxr(v11 | 4, v7));
      v12 = sub_10011E1E0(a2);
      std::mutex::lock((std::mutex *)v12);
      v13 = sub_10011E2A0(a2);
      std::condition_variable::notify_all((std::condition_variable *)v13);
      std::mutex::unlock((std::mutex *)v12);
LABEL_20:
      std::mutex::unlock((std::mutex *)v8);
      return;
    }
    sub_1000EA0E8(a1, a3);
    sub_1000C29D8((unint64_t *)(a2 + 360));
    do
      v14 = __ldaxr(v7);
    while (__stlxr(v14 | 1, v7));
    if ((v14 & 2) == 0)
      sub_1000E29F8(a1, a2);
    v15 = (unint64_t *)(a1 + 608);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      if (atomic_load((unint64_t *)(a1 + 616)))
      {
        std::mutex::lock((std::mutex *)(a1 + 624));
        if (atomic_load((unint64_t *)(a1 + 616)))
          std::condition_variable::notify_all((std::condition_variable *)(a1 + 688));
        std::mutex::unlock((std::mutex *)(a1 + 624));
      }
    }
    v20 = (unint64_t *)(a1 + 592);
    if (atomic_load(v20))
    {
      v8 = sub_10011E1E0(a2);
      std::mutex::lock((std::mutex *)v8);
      if (atomic_load(v20))
      {
        v23 = sub_10011E2A0(a2);
        std::condition_variable::notify_all((std::condition_variable *)v23);
      }
      goto LABEL_20;
    }
  }
}

void sub_1000EA0BC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000EA0E8(uint64_t a1, unint64_t a2)
{
  std::mutex *v3;
  unint64_t v4;

  v4 = a2;
  v3 = (std::mutex *)(a1 + 776);
  std::mutex::lock((std::mutex *)(a1 + 776));
  sub_100040D30(a1 + 752, &v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 840));
  std::mutex::unlock(v3);
}

void sub_1000EA138(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000EA150()
{
  operator delete();
}

_QWORD *sub_1000EA164(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10018B5D0;
  result[1] = v3;
  return result;
}

uint64_t sub_1000EA198(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10018B5D0;
  a2[1] = v2;
  return result;
}

void sub_1000EA1B4(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  sub_1000EA208(*(_QWORD *)(a1 + 8), *a2, a3);
}

uint64_t sub_1000EA1C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000EA1FC()
{
}

void sub_1000EA208(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v3 = *(_QWORD *)(a1 + 456);
  if (v3 >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 584);
    v8 = v7 + 8 * v3;
    while (!(v7 + v6) || *(_QWORD *)(v7 + v6) != a2)
    {
      v6 += 8;
      if (v7 + v6 >= v8)
        return;
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
      v9 = (unint64_t *)(v7 + v6);
      while (1)
      {
        v10 = __ldaxr(v9);
        if (v10 != a2)
          break;
        if (!__stlxr(0, v9))
        {
          sub_1000E3248(a1, a2, 1uLL, a3);
          sub_1000E29F8(a1, a2);
          return;
        }
      }
      __clrex();
    }
  }
}

void sub_1000EA2B4()
{
  operator delete();
}

_QWORD *sub_1000EA2C8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10018B660;
  result[1] = v3;
  return result;
}

uint64_t sub_1000EA2FC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10018B660;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000EA318(uint64_t a1, uint64_t a2)
{
  return sub_1000EA368((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_1000EA320(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_10018B6C0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000EA35C()
{
  return &off_10018B6C0;
}

uint64_t sub_1000EA368(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v11;
  _QWORD v12[2];
  uint64_t v13;
  std::__shared_weak_count *v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 24);
  v12[0] = off_100187458;
  v12[1] = v4;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v4 + 16) + 72))(&v13);
  if (*(_BYTE *)(a2 + 113))
    sub_1000C5400(v3, (uint64_t)v12, *(_QWORD *)(a2 + 8) / *(_QWORD *)(v3 + 80), 0, 0, &v11);
  else
    v11 = 0;
  if (v11 && !*(_BYTE *)(v11 + 520))
  {
    if (*(_BYTE *)(v11 + 400))
      v5 = v11 + 40;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  v6 = sub_1000CDC08(a2, (uint64_t)v12, v5, *(unsigned int *)(v3 + 20));
  sub_1000C1E4C(&v11);
  v12[0] = off_100187458;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1000EA484(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100012168(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EA4B4(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;

  v7 = a1;
  v1 = std::__thread_local_data();
  v2 = *(const void **)v7;
  *(_QWORD *)v7 = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = *(_QWORD *)(v7 + 8);
  sub_100012568((uint64_t)v8, v7 + 16);
  sub_1000C4CC8(v3, (uint64_t)v8);
  v4 = v9;
  if (v9 == v8)
  {
    v5 = 4;
    v4 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  sub_1000EA5C0(&v7);
  return 0;
}

void sub_1000EA578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  sub_1000EA5C0(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000EA5C0(uint64_t *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = *(_QWORD **)(v1 + 40);
    if (v2 == (_QWORD *)(v1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(v1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_7:
    sub_1000EA640((std::__thread_struct **)v1, 0);
    operator delete();
  }
  return result;
}

std::__thread_struct *sub_1000EA640(std::__thread_struct **a1, std::__thread_struct *a2)
{
  std::__thread_struct *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__thread_struct::~__thread_struct(result);
    operator delete();
  }
  return result;
}

_WORD *sub_1000EA67C(_WORD *result, int a2)
{
  __int16 v2;
  _QWORD *exception;

  *result = 0;
  if (a2)
  {
    v2 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid value";
    exception[3] = "value validator";
    *exception = &off_100180748;
    exception[1] = "total_segments_t";
    *((_WORD *)exception + 16) = v2;
  }
  return result;
}

uint64_t sub_1000EA6E8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018AB70;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000EA750(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EA764(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018A950;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000EA7CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EA7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[8];
  _QWORD v14[2];

  v14[0] = a3;
  v14[1] = a4;
  result = sub_1000C609C(a1, a2, (uint64_t)v12);
  while (v12[0] != v13[3] || v12[1] != v13[4])
  {
    v7[0] = 0;
    v7[0] = (*(_QWORD *)(*(_QWORD *)(v13[0] + 56) + 16 * v13[1] + 8) & 0x7FFFFFFFFFFFFFLL)
          * *(unsigned int *)(*(_QWORD *)(v13[0] + 8) + 20);
    if (v7[0])
      sub_1000EA8F0((uint64_t)v14, v7);
    sub_1000C6120(a1, v13, (uint64_t)v7);
    while (v7[0] != v10 || v7[1] != v11)
    {
      v6 = 0;
      v6 = (*(_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v9 + 8) & 0x7FFFFFFFFFFFFFLL)
         * *(unsigned int *)(*(_QWORD *)(v8 + 8) + 20);
      if (v6)
        sub_1000EA8F0((uint64_t)v14, (unint64_t *)&v6);
      sub_1000C2FD0((uint64_t)v7);
    }
    result = sub_1000C2EB0((uint64_t)v12);
  }
  return result;
}

uint64_t sub_1000EA8F0(uint64_t a1, unint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = sub_1000E6940(*(uint64_t ***)a1, *(_QWORD **)(a1 + 8), a2, (uint64_t *)a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void sub_1000EA958(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v4 = a2[1];
  v5 = *((_QWORD *)a3 + 1);
  if (v4 != v5)
  {
    v10 = *a2;
    v11 = a2[2];
    v12 = v4 + 1;
    if (v4 + 1 != v5)
    {
      v13 = v10 + v11 * v12;
      v14 = a2[1];
      do
      {
        if (v10 + v14 * v11 < v13)
        {
          v4 = v12;
          v14 = v12;
        }
        ++v12;
        v13 += v11;
      }
      while (v5 != v12);
    }
    std::mutex::lock((std::mutex *)(a1 + 8));
    v18 = *(_OWORD *)a2;
    v19 = a2[2];
    v16 = *a3;
    v17 = *((_QWORD *)a3 + 2);
    sub_1000EAA6C((uint64_t *)(a1 + 72), &v18, (uint64_t)&v16);
    v15 = v10 + v4 * v11;
    if (v15 >= *(_QWORD *)(a1 + 96))
      *(_QWORD *)(a1 + 96) = *(_QWORD *)a1 + v15;
    sub_1000D0B84((_QWORD *)a1, a4);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
}

void sub_1000EAA58(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000EAA6C(uint64_t *result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t **v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = a2[1];
  if (v3 != *(_QWORD *)(a3 + 8))
  {
    v6 = (uint64_t **)result;
    v7 = result + 1;
    do
    {
      v8 = *a2 + a2[2] * v3;
      result = sub_1000E6940(v6, v7, (unint64_t *)&v8, &v8);
      v3 = a2[1] + 1;
      a2[1] = v3;
    }
    while (v3 != *(_QWORD *)(a3 + 8));
  }
  return result;
}

uint64_t ***sub_1000EAAF8(uint64_t ***result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **result;
  v2 = *v1;
  if (*(_DWORD *)(*v1 + 44) != 1)
  {
    *(_QWORD *)(v2 + 64) = sub_100120770();
    *(_QWORD *)(v2 + 72) = v3;
    sub_1000D13F0();
  }
  return result;
}

uint64_t sub_1000EAB48(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1000EAB50@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8 * a2))(a1);
}

void sub_1000EAC2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000EAD48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1000EAEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10)
{
  uint64_t v11;

  sub_100012138(&a9);
  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

AAByteStream *sub_1000EAF70@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  void *exception;
  void *v6;
  AEAContext v7;
  AAByteStream v8;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 176))(*a1);
  if (v3 < 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v6 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"AEAHelper: Invalid file descriptor.", 0x16u);
  }
  v7 = AAFileStreamOpenWithFD(v3, 0);
  sub_1000ED388(&v8, &v7);
  sub_1000ED45C(&v7, &v8);
  sub_1000ED6DC(a2, &v7);
  sub_1000ED460(&v7);
  return sub_1000ED38C(&v8);
}

void sub_1000EB014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, AEAContext a9, AAByteStream a10)
{
  sub_1000ED460(&a9);
  sub_1000ED38C(&a10);
  _Unwind_Resume(a1);
}

void sub_1000EB038()
{
  operator new[]();
}

void sub_1000EB430(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  operator delete[]();
}

uint64_t *sub_1000EB4F8@<X0>(AEAAuthData *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  char **v7;
  uint64_t v8;
  int v9;
  uint32_t v10;
  char *v11;
  size_t v12;
  const char *v13;
  const std::error_category *v14;
  uint64_t v15;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  const std::error_category *v20;
  char v21;
  std::bad_alloc *exception;
  std::bad_alloc *v23;
  std::bad_alloc *v24;
  std::bad_alloc *v25;
  size_t v26;
  char *__s;
  uint64_t v28;
  char **p_s;
  char *__s2;
  uint64_t v31;
  _QWORD v32[3];
  _QWORD *v33;

  v6 = (char *)malloc_type_valloc(0x800uLL, 0xF8ED6DDuLL);
  if (!v6)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v23 = std::bad_alloc::bad_alloc(exception);
  }
  __s = (char *)off_10018B6E0;
  p_s = &__s;
  __s2 = v6;
  sub_1000181E0((uint64_t)&v31, (uint64_t)&__s);
  v7 = p_s;
  if (p_s == &__s)
  {
    v8 = 4;
    v7 = &__s;
  }
  else
  {
    if (!p_s)
      goto LABEL_7;
    v8 = 5;
  }
  (*(void (**)(void))&(*v7)[8 * v8])();
LABEL_7:
  v9 = sub_1000ED70C(a1);
  if (!v9)
  {
LABEL_15:
    v14 = std::generic_category();
    v15 = 22;
    goto LABEL_16;
  }
  v10 = 0;
  v11 = __s2;
  while (1)
  {
    v26 = 0;
    bzero(v11, 0x800uLL);
    if (sub_1000ED714(a1, v10, 0x800uLL, v11, 0, 0, 0, &v26))
    {
      v14 = std::generic_category();
      *(_DWORD *)a3 = 1;
      goto LABEL_18;
    }
    if (*(char *)(a2 + 23) < 0)
    {
      v13 = *(const char **)a2;
      v12 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      v12 = *(unsigned __int8 *)(a2 + 23);
      v13 = (const char *)a2;
    }
    v11 = __s2;
    if (!strncmp(v13, __s2, v12))
      break;
    if (v9 == ++v10)
      goto LABEL_15;
  }
  if (v26 < 0x100000)
  {
    v17 = (char *)malloc_type_valloc(v26 + 1, 0xF8ED6DDuLL);
    if (!v17)
    {
      v24 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v25 = std::bad_alloc::bad_alloc(v24);
    }
    v32[0] = off_10018B6E0;
    v33 = v32;
    __s = v17;
    sub_1000181E0((uint64_t)&v28, (uint64_t)v32);
    v18 = v33;
    if (v33 == v32)
    {
      v19 = 4;
      v18 = v32;
    }
    else
    {
      if (!v33)
      {
LABEL_28:
        bzero(__s, v26 + 1);
        if (sub_1000ED714(a1, v10, 0x800uLL, __s2, 0, v26, (uint8_t *)__s, 0))
        {
          v20 = std::generic_category();
          v21 = 0;
          *(_DWORD *)a3 = 1;
          *(_QWORD *)(a3 + 8) = v20;
        }
        else
        {
          sub_100005870((_QWORD *)a3, __s);
          v21 = 1;
        }
        *(_BYTE *)(a3 + 24) = v21;
        sub_100017CC8((uint64_t *)&__s);
        return sub_100017CC8((uint64_t *)&__s2);
      }
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
    goto LABEL_28;
  }
  v14 = std::generic_category();
  v15 = 84;
LABEL_16:
  *(_QWORD *)a3 = v15;
LABEL_18:
  *(_QWORD *)(a3 + 8) = v14;
  *(_BYTE *)(a3 + 24) = 0;
  return sub_100017CC8((uint64_t *)&__s2);
}

void sub_1000EB7A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_100017CC8((uint64_t *)va);
  sub_100017CC8((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EB7D4(uint64_t a1, __int128 *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(char *)(a1 + 23);
    if (*((_BYTE *)a2 + 24))
    {
      if (v4 < 0)
        operator delete(*(void **)a1);
      v5 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v5;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
    }
    else
    {
      if (v4 < 0)
        operator delete(*(void **)a1);
      *(_OWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 24) = 0;
    }
  }
  else if (*((_BYTE *)a2 + 24))
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_OWORD *)a1 = *a2;
  }
  return a1;
}

void sub_1000EB880(uint64_t a1, _QWORD *a2)
{
  sub_1000EAF70(a2, a1);
  sub_1000EB038();
}

void sub_1000EB8B8(_Unwind_Exception *a1)
{
  AEAAuthData *v1;

  sub_1000ED6E0(v1);
  _Unwind_Resume(a1);
}

void sub_1000EB8D4()
{
  operator delete();
}

_QWORD *sub_1000EB8E8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_10018B6E0;
  return result;
}

void sub_1000EB90C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10018B6E0;
}

void sub_1000EB924(uint64_t a1, void **a2)
{
  free(*a2);
}

uint64_t sub_1000EB92C(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_10018B740))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000EB968()
{
  return &off_10018B740;
}

uint64_t sub_1000EB974(uint64_t a1)
{
  uint64_t (*v1)();
  unsigned int v2;
  __int128 v4;
  __int128 v5;

  v4 = 0u;
  v5 = 0u;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 72))(&v4);
  v1 = sub_1000388D4()[2];
  if ((unint64_t)v1 <= (unint64_t)v4)
    v1 = (uint64_t (*)())v4;
  if (*((_QWORD *)&v5 + 1) >= (unint64_t)v1)
    v2 = v1;
  else
    v2 = DWORD2(v5);
  if (*((_QWORD *)&v5 + 1))
    return v2;
  else
    return v1;
}

uint64_t sub_1000EB9CC(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v6[4];
  __int128 v7;
  __int128 v8;

  (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(v6);
  v2 = v6[0];
  v7 = 0u;
  v8 = 0u;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v7, a1);
  v3 = (unint64_t)sub_1000388D4()[2];
  if (v3 <= (unint64_t)v7)
    v3 = v7;
  if (*((_QWORD *)&v8 + 1) >= v3)
    v4 = v3;
  else
    v4 = DWORD2(v8);
  if (*((_QWORD *)&v8 + 1))
    LODWORD(v3) = v4;
  if (v2 <= v3)
    v3 = v3;
  else
    v3 = v2;
  if (v3 <= 0x1000)
    return 4096;
  else
    return v3;
}

void sub_1000EBA60()
{
  void *exception;
  void *v1;

  exception = __cxa_allocate_exception(0x40uLL);
  v1 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"User data is not supported in this image format", 0x2Du);
}

void sub_1000EBA94()
{
  void *exception;
  void *v1;

  exception = __cxa_allocate_exception(0x40uLL);
  v1 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"User data is not supported in this image format", 0x2Du);
}

_QWORD *sub_1000EBAC8(_QWORD *a1, uint64_t a2)
{
  int v4;
  char *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  void *p_p;
  uint64_t v14;
  unint64_t v15;
  char *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  void *__p;
  uint64_t v24;
  unsigned __int8 v25;
  void *v26;
  uint64_t v27;
  unsigned __int8 v28;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    if (v4 == 3)
    {
      if (*(_QWORD *)(a2 + 8) >= *(_QWORD *)a2)
      {
LABEL_4:
        if ((v4 & 2) != 0)
          v5 = "[";
        else
          v5 = "(";
        sub_100005870(&v26, v5);
        if ((v28 & 0x80u) == 0)
          v6 = &v26;
        else
          v6 = v26;
        if ((v28 & 0x80u) == 0)
          v7 = v28;
        else
          v7 = v27;
        v8 = sub_100005A0C(a1, (uint64_t)v6, v7);
        v9 = (_QWORD *)std::ostream::operator<<(v8, *(_QWORD *)a2);
        v10 = sub_100005A0C(v9, (uint64_t)",", 1);
        v11 = (_QWORD *)std::ostream::operator<<(v10, *(_QWORD *)(a2 + 8));
        if ((*(_BYTE *)(a2 + 16) & 1) != 0)
          v12 = "]";
        else
          v12 = ")";
        sub_100005870(&__p, v12);
        if ((v25 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        if ((v25 & 0x80u) == 0)
          v14 = v25;
        else
          v14 = v24;
        goto LABEL_45;
      }
    }
    else if (*(_QWORD *)a2 < *(_QWORD *)(a2 + 8))
    {
      goto LABEL_4;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 < v15 && *(_QWORD *)a2 + 1 < v15)
      goto LABEL_4;
  }
  if ((v4 & 2) != 0)
    v17 = "[";
  else
    v17 = "(";
  sub_100005870(&v26, v17);
  if ((v28 & 0x80u) == 0)
    v18 = &v26;
  else
    v18 = v26;
  if ((v28 & 0x80u) == 0)
    v19 = v28;
  else
    v19 = v27;
  v11 = sub_100005A0C(a1, (uint64_t)v18, v19);
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    v20 = "]";
  else
    v20 = ")";
  sub_100005870(&__p, v20);
  if ((v25 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v25 & 0x80u) == 0)
    v14 = v25;
  else
    v14 = v24;
LABEL_45:
  v21 = sub_100005A0C(v11, (uint64_t)p_p, v14);
  if ((char)v25 < 0)
    operator delete(__p);
  if ((char)v28 < 0)
    operator delete(v26);
  return v21;
}

void sub_1000EBCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000EBCE8(uint64_t a1, _QWORD *a2)
{
  __int128 v4;

  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 8))(*a2);
  v4 = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
  return a1;
}

BOOL sub_1000EBD38(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_1000EBD78(*(_QWORD *)a1, *(_QWORD *)a2);
  if (result)
    return *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return result;
}

BOOL sub_1000EBD78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)v2 != *(_QWORD *)v3)
    return 0;
  result = sub_100060BBC((unint64_t *)(v2 + 8), (unint64_t *)(v3 + 8));
  if (result)
  {
    if (*(_DWORD *)(v2 + 48) == *(_DWORD *)(v3 + 48))
      return *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
    return 0;
  }
  return result;
}

BOOL sub_1000EBDF0(uint64_t a1, uint64_t a2)
{
  return !sub_1000EBD78(*(_QWORD *)a1, *(_QWORD *)a2) || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40);
}

_QWORD *sub_1000EBE38@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  unint64_t v5;
  unint64_t v6;
  _BYTE v7[28];
  _BYTE v8[336];
  uint64_t v9;
  uint64_t v10;

  result = *(_QWORD **)a1;
  v5 = result[5];
  v6 = result[3];
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 3;
  if ((*(_BYTE *)(*(_QWORD *)result[1] + 8) & 1) != 0)
  {
    result = (_QWORD *)sub_1000BF0D4();
    if ((_DWORD)result)
    {
      *(_QWORD *)v7 = "DiskImage::const_extents_iterator_t::make_val() const";
      *(_QWORD *)&v7[8] = 45;
      *(_DWORD *)&v7[16] = 2;
      sub_10001365C(v8, (__int128 *)v7);
      sub_100005A0C(&v9, (uint64_t)"Disk image is terminated, skipping ...", 38);
      std::ostream::~ostream(&v9, off_10016E590);
      sub_100016EDC((uint64_t)v8);
      return (_QWORD *)std::ios::~ios(&v10);
    }
  }
  else if (v5 < v6 && a1[8] != 3)
  {
    result = (*(_QWORD *(**)(_BYTE *__return_ptr))*result)(v8);
    if (*(_DWORD *)&v8[24] != 3 && (a1[10] & (1 << v8[24])) == 0)
    {
      do
      {
        result = *(_QWORD **)a1;
        if (*(_QWORD *)(*(_QWORD *)a1 + 40) >= (unint64_t)(*(_BYTE *)(*(_QWORD *)a1 + 32) & 1)
                                                + *(_QWORD *)(*(_QWORD *)a1 + 24))
          break;
        result[5] = (v8[16] & 1) + *(_QWORD *)&v8[8];
        result = (*(_QWORD *(**)(_BYTE *__return_ptr))*result)(v7);
        *(_OWORD *)&v8[12] = *(_OWORD *)&v7[12];
        *(_OWORD *)v8 = *(_OWORD *)v7;
        if (*(_DWORD *)&v7[24] == 3)
          break;
      }
      while ((a1[10] & (1 << v7[24])) == 0);
    }
    *(_OWORD *)a2 = *(_OWORD *)v8;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v8[12];
  }
  return result;
}

void sub_1000EBFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    v15 = *(_QWORD *)(*(_QWORD *)v14 + 24);
    *(_QWORD *)v13 = *(_QWORD *)(*(_QWORD *)v14 + 40);
    *(_QWORD *)(v13 + 8) = v15;
    *(_BYTE *)(v13 + 16) = 2;
    *(_DWORD *)(v13 + 24) = 3;
    __cxa_end_catch();
    JUMPOUT(0x1000EBFB8);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_1000EC020(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  _OWORD v5[2];

  v2 = *a1;
  v3 = (a1[3] & 1) + a1[2];
  *(_QWORD *)(v2 + 40) = v3;
  if (v3 < (unint64_t)(*(_BYTE *)(v2 + 32) & 1) + *(_QWORD *)(v2 + 24))
  {
    sub_1000EBE38(a1, (uint64_t)v5);
    *(_OWORD *)(a1 + 1) = v5[0];
    *(_OWORD *)((char *)a1 + 20) = *(_OWORD *)((char *)v5 + 12);
  }
  return a1;
}

uint64_t *sub_1000EC094@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)*a1 + 8))((_QWORD *)a2);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 1);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 3);
  *(_DWORD *)(a2 + 40) = *((_DWORD *)a1 + 10);
  return sub_1000EC020(a1);
}

void sub_1000EC0E8(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000EC10C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    v5 = *(_QWORD *)(a1 + 32);
  }
  *(_QWORD *)(a1 + 40) = v5;
  sub_100018244((_QWORD *)(a1 + 56), a2 + 56);
  return a1;
}

uint64_t sub_1000EC180@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  int v13;

  v4 = qword_1001A05E0;
  *(_QWORD *)a2 = qword_1001A05E0;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 0;
  sub_100052388(a1, (uint64_t)v12);
  sub_1000524BC(a1, (uint64_t)v10);
  while (!sub_1000EBD78(v12[0], v10[0]) || v13 != v11)
  {
    sub_1000EC094(v12, (uint64_t)&v8);
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 12) = *(_OWORD *)((char *)v9 + 12);
    v5 = v8;
    v8 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  }
  v6 = v10[0];
  v10[0] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  result = v12[0];
  v12[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_1000EC264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;

  v17 = *(_QWORD *)(v15 - 64);
  *(_QWORD *)(v15 - 64) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000EC2AC(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000ECB74((uint64_t)a1, a2);
  *a1 = off_10018B790;
  a1[45] = &off_10018B890;
  a1[46] = &off_10018B8B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018B790;
  a1[45] = off_10018B818;
  a1[46] = off_10018B840;
  return a1;
}

void sub_1000EC330(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000EC77C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EC354(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018B858);
  sub_1000EC77C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000EC394(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  int v11;
  _QWORD v12[45];
  uint64_t v13;
  _BYTE v14[152];
  uint64_t input[2];

  if ((int)a4 >= 0)
    v7 = a4;
  else
    v7 = -(int)a4;
  input[0] = a3;
  input[1] = v7;
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v10 = "complete_function_uc(io_connect_t, const DIDeviceCommand &, unsigned int, int)";
    *((_QWORD *)&v10 + 1) = 20;
    v11 = 2;
    sub_10007728C(v12, &v10);
    sub_100005A0C(&v13, (uint64_t)"index=", 6);
    std::ostream::operator<<(&v13, a3);
    sub_100005A0C(&v13, (uint64_t)" status=", 8);
    std::ostream::operator<<(&v13, a4);
    std::ostream::~ostream(&v13, off_10017CEB0);
    sub_10007CAB8((uint64_t)v12);
    std::ios::~ios(v14);
  }
  result = IOConnectCallMethod(a1, 1u, input, 2u, 0, 0, 0, 0, 0, 0);
  v9 = result;
  if ((_DWORD)result)
  {
    *(_QWORD *)&v10 = "complete_function_uc(io_connect_t, const DIDeviceCommand &, unsigned int, int)";
    *((_QWORD *)&v10 + 1) = 20;
    v11 = 16;
    sub_10006A150(v12, &v10);
    sub_100005A0C(&v13, (uint64_t)"Kernel returned error for complete command, command = ", 54);
    std::ostream::operator<<(&v13, a3);
    sub_100005A0C(&v13, (uint64_t)" error = ", 9);
    std::ostream::operator<<(&v13, v9);
    std::ostream::~ostream(&v13, off_100179110);
    sub_10006A2B4((uint64_t)v12);
    return std::ios::~ios(v14);
  }
  return result;
}

void sub_1000EC55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100077334((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EC588(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018B858);
  sub_1000EC77C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000EC5C0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018B858);
  sub_1000EC77C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000EC600(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018B858);
  sub_1000EC77C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000EC654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000EC688(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000EC6D4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018B858);
  sub_1000EC77C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000EC724(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018B858);
  sub_1000EC77C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000EC77C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018B928;
  sub_1000EC818(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000EC818(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000EC990((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000EC940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000EC96C(uint64_t a1)
{
  sub_1000EC77C(a1);
  operator delete();
}

int *sub_1000EC990(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 114;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 114;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000ECB74(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018B928;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000ECBDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_1000ECEAC(id a1)
{
  int v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;

  v1 = *__error();
  if (sub_1000BF0BC())
  {
    v9 = 0;
    v2 = sub_1000BF044();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      v4 = 3;
    else
      v4 = 2;
    *(_DWORD *)buf = 68157954;
    v11 = 60;
    v12 = 2080;
    v13 = "-[DIClient2IODaemonXPCHandler createConnection]_block_invoke";
    LODWORD(v8) = 18;
    v5 = (char *)_os_log_send_and_compose_impl(v4, &v9, 0, 0, &_mh_execute_header, v3, 0, "%.*s: Reached an invalidation handler for the IO daemon connection", (int)buf, v8);

    if (v5)
    {
      fprintf(__stderrp, "%s\n", v5);
      free(v5);
    }
  }
  else
  {
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      v11 = 60;
      v12 = 2080;
      v13 = "-[DIClient2IODaemonXPCHandler createConnection]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%.*s: Reached an invalidation handler for the IO daemon connection", buf, 0x12u);
    }

  }
  *__error() = v1;
}

void sub_1000ED038(id a1)
{
  int v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;

  v1 = *__error();
  if (sub_1000BF0BC())
  {
    v9 = 0;
    v2 = sub_1000BF044();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      v4 = 3;
    else
      v4 = 2;
    *(_DWORD *)buf = 68157954;
    v11 = 60;
    v12 = 2080;
    v13 = "-[DIClient2IODaemonXPCHandler createConnection]_block_invoke";
    LODWORD(v8) = 18;
    v5 = (char *)_os_log_send_and_compose_impl(v4, &v9, 0, 0, &_mh_execute_header, v3, 0, "%.*s: Reached an interruption handler for the IO daemon connection", (int)buf, v8);

    if (v5)
    {
      fprintf(__stderrp, "%s\n", v5);
      free(v5);
    }
  }
  else
  {
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      v11 = 60;
      v12 = 2080;
      v13 = "-[DIClient2IODaemonXPCHandler createConnection]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%.*s: Reached an interruption handler for the IO daemon connection", buf, 0x12u);
    }

  }
  *__error() = v1;
}

void sub_1000ED298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000ED2C0(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "signalCommandCompletedWithXpcError:", v3);

}

uint64_t *sub_1000ED340(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  void *exception;
  void *v4;

  v2 = *a2;
  *result = *a2;
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v4 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Error opening ByteStream", 0x16u);
  }
  return result;
}

AAByteStream *sub_1000ED38C(AAByteStream *a1)
{
  AAByteStreamClose(*a1);
  return a1;
}

ssize_t sub_1000ED3B8(AAByteStream *a1, void *a2, size_t a3, off_t a4)
{
  return AAByteStreamPRead(*a1, a2, a3, a4);
}

uint64_t *sub_1000ED3C0@<X0>(AAByteStream *a1@<X0>, AEAContext *a2@<X1>, size_t a3@<X2>, AAFlagSet a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  AAByteStream v8;

  v8 = AEADecryptionRandomAccessInputStreamOpen(*a1, *a2, a3, a4, a5);
  return sub_1000ED340(a6, (uint64_t *)&v8);
}

AEAContext *sub_1000ED400(AEAContext *a1, AAByteStream *a2)
{
  AEAContext v3;
  void *exception;
  void *v6;

  v3 = AEAContextCreateWithEncryptedStream(*a2);
  *a1 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v6 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Context creation failed.", 0x16u);
  }
  return a1;
}

AEAContext *sub_1000ED460(AEAContext *a1)
{
  AEAContextDestroy(*a1);
  return a1;
}

uint64_t sub_1000ED48C(AEAContext *a1, uint8_t *buf, size_t buf_size)
{
  uint64_t result;
  void *exception;
  void *v5;

  result = AEAContextSetFieldBlob(*a1, 9u, 0, buf, buf_size);
  if ((result & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v5 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Context setup failed.", 0x16u);
  }
  return result;
}

uint64_t (**sub_1000ED4E4(AEAContext_impl **a1))()
{
  AEAContext_impl *v1;
  size_t v2;
  size_t v3;
  uint8_t *v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t (**v7)();
  uint8_t *v8;
  size_t v9;
  std::bad_alloc *exception;
  std::bad_alloc *v12;
  size_t buf_size;
  uint8_t *buf;
  uint64_t v15;
  uint64_t (**__dst)();
  uint64_t (***p_dst)();

  v1 = *a1;
  buf_size = 0;
  if (AEAContextGetFieldBlob(v1, 0x12u, 0, 0, 0, &buf_size) < 0)
    return 0;
  v2 = buf_size;
  if (buf_size >= 0x100000)
    v3 = 0x100000;
  else
    v3 = buf_size;
  v4 = (uint8_t *)malloc_type_valloc(v3, 0xF8ED6DDuLL);
  if (!v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_alloc::bad_alloc(exception);
  }
  __dst = off_10018B9E8;
  p_dst = &__dst;
  buf = v4;
  sub_1000181E0((uint64_t)&v15, (uint64_t)&__dst);
  v5 = p_dst;
  if (p_dst == &__dst)
  {
    v6 = 4;
    v5 = &__dst;
    goto LABEL_11;
  }
  if (p_dst)
  {
    v6 = 5;
LABEL_11:
    (*v5)[v6]();
  }
  v8 = buf;
  if (AEAContextGetFieldBlob(v1, 0x12u, 0, v3, buf, 0) < 0)
  {
    v7 = 0;
  }
  else
  {
    if (v2 >= 0x10)
      v9 = 16;
    else
      v9 = v2;
    memcpy(&__dst, v8, v9);
    v7 = __dst;
  }
  sub_100017CC8((uint64_t *)&buf);
  return v7;
}

void sub_1000ED664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100017CC8((uint64_t *)va);
  _Unwind_Resume(a1);
}

AEAAuthData *sub_1000ED680(AEAAuthData *a1, AEAContext *a2)
{
  AEAAuthData v3;
  void *exception;
  void *v6;

  v3 = AEAAuthDataCreateWithContext(*a2);
  *a1 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v6 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Authentication Data creation failed.", 0x16u);
  }
  return a1;
}

AEAAuthData *sub_1000ED6E0(AEAAuthData *a1)
{
  AEAAuthDataDestroy(*a1);
  return a1;
}

uint64_t sub_1000ED70C(AEAAuthData *a1)
{
  return AEAAuthDataGetEntryCount(*a1);
}

uint64_t sub_1000ED714(AEAAuthData *a1, uint32_t a2, size_t a3, char *a4, size_t *a5, size_t a6, uint8_t *a7, size_t *a8)
{
  return AEAAuthDataGetEntry(*a1, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *sub_1000ED71C(_QWORD *result, _QWORD *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v4;

  v4 = *a3;
  *result = *a2;
  *a2 = 0;
  result[1] = v4;
  *a3 = 0;
  result[2] = *a4;
  *a4 = 0;
  return result;
}

uint64_t sub_1000ED744(uint64_t a1)
{
  return AEAContextGetFieldUInt(*(AEAContext *)(a1 + 8), 4u);
}

uint64_t sub_1000ED750(uint64_t a1)
{
  return AEAContextGetFieldUInt(*(AEAContext *)(a1 + 8), 0xDu);
}

ssize_t sub_1000ED75C(uint64_t a1, void *a2, size_t a3, off_t a4)
{
  return AAByteStreamPRead(*(AAByteStream *)(a1 + 16), a2, a3, a4);
}

void sub_1000ED768()
{
  operator delete();
}

_QWORD *sub_1000ED77C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_10018B9E8;
  return result;
}

void sub_1000ED7A0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10018B9E8;
}

void sub_1000ED7B8(uint64_t a1, void **a2)
{
  free(*a2);
}

uint64_t sub_1000ED7C0(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_10018BA48))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000ED7FC()
{
  return &off_10018BA48;
}

void sub_1000ED808(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t (**v3)();
  int v4;
  int v5;
  unsigned int v6[3];
  int v7;
  char v8;

  v2 = sub_100038BC0(a1, a2);
  *v2 = off_10018BA68;
  *(_OWORD *)(v2 + 5) = 0u;
  *(_OWORD *)(v2 + 7) = 0u;
  v2[9] = 0;
  v3 = sub_1000388D4();
  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 1)
  {
    v5 = (*v3)();
  }
  else
  {
    if (v4)
      sub_100018028();
    v5 = *(_DWORD *)v3;
  }
  v6[0] = v5 + 1;
  v7 = 0;
  sub_1000EEB24((uint64_t)&v8, v6, &v7);
}

void sub_1000EDA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  va_list va;

  va_start(va, a4);
  sub_100012168((uint64_t)va);
  sub_1000EEAE4(v6);
  sub_100012168(v7);
  sub_100012168(v5);
  sub_100038C10(v4);
  _Unwind_Resume(a1);
}

unint64_t *sub_1000EDAB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t v7;
  unint64_t *v8;
  uint64_t *v9;
  char v10;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  uint64_t v17;

  v16 = 0;
  v17 = a2;
  sub_1000F0BC4(a1, a2, a3, &v14);
  if (v14 && !*(_BYTE *)(v14 + 312) || v14 && *(_BYTE *)(v14 + 312))
  {
    *a4 = 0;
    do
      v7 = __ldaxr(&v14);
    while (__stlxr(0, &v14));
LABEL_21:
    atomic_store(v7, a4);
    return sub_1000EEAE4(&v14);
  }
  if (*(_BYTE *)(a1 + 704) && v15 != (_QWORD *)(a1 + 728))
  {
    do
    {
      sub_1000F1084(a1, a2, &v12);
      v16 = v12;
      sub_1000EDC9C(&v14, &v13);
      sub_1000EEAE4(&v13);
      if (v14)
      {
        if (!*(_BYTE *)(v14 + 312))
          break;
      }
      v8 = (unint64_t *)sub_1000F120C((_QWORD *)a1);
      if (v8)
      {
        v16 = v8;
        sub_1000F12B0(a1, v8, a2, (unint64_t *)&v12);
        sub_1000EDC9C(&v14, (unint64_t *)&v12);
        sub_1000EEAE4((unint64_t *)&v12);
        break;
      }
    }
    while (*(_BYTE *)(a1 + 704));
    std::mutex::lock((std::mutex *)(a1 + 744));
    v9 = sub_1000E376C((uint64_t **)(a1 + 720), v15, (unint64_t *)&v17, &v17, (uint64_t *)&v16);
    if (!v10)
      v9[5] = (uint64_t)v16;
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 808));
    std::mutex::unlock((std::mutex *)(a1 + 744));
    sub_1000F0438(a1, 0, 0, 0);
    *a4 = 0;
    do
      v7 = __ldaxr(&v14);
    while (__stlxr(0, &v14));
    goto LABEL_21;
  }
  *a4 = 0;
  return sub_1000EEAE4(&v14);
}

void sub_1000EDC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1000EEAE4((unint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t *sub_1000EDC9C(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  if (a2 != a1)
  {
    do
      v3 = __ldaxr(a2);
    while (__stlxr(0, a2));
    sub_1000EEAE4(a1);
    atomic_store(v3, a1);
  }
  return a1;
}

void sub_1000EDCE0(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  sub_1000F1758(*a1, a2, a3);
}

void sub_1000EDD0C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;

  __cxa_begin_catch(a1);
  if (*v10)
  {
    v11 = *(_QWORD *)(*v10 + 256);
    if (v11)
    {
      a10 = *v10;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &a10, v10);
    }
  }
  __cxa_rethrow();
}

void sub_1000EDD40(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unint64_t *sub_1000EDD58@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t **v7;
  unint64_t *v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t **v12;
  unint64_t *v13;
  unint64_t *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a2[3];
  v7 = *(unint64_t ***)(a1 + 40);
  v8 = *v7;
  v9 = v7[1];
  while (v8 != v9)
  {
    sub_1000EE000(v8, v6, (unint64_t *)&v26);
    if (v26 && !*(_BYTE *)(v26 + 312))
    {
      sub_1000EE6CC((unint64_t *)&v24, (unint64_t *)&v26);
      v25 = -2;
      *(_QWORD *)a3 = 0;
      do
        v22 = __ldaxr((unint64_t *)&v24);
      while (__stlxr(0, (unint64_t *)&v24));
      atomic_store(v22, (unint64_t *)a3);
      *(_DWORD *)(a3 + 8) = v25;
      sub_1000EEAE4((unint64_t *)&v24);
      return sub_1000EEAE4((unint64_t *)&v26);
    }
    sub_1000EEAE4((unint64_t *)&v26);
    ++v8;
  }
  sub_1000EDAB4(*(_QWORD *)(a1 + 56), v6, 1, (unint64_t *)&v26);
  if (!v26 || (v10 = atomic_load((unsigned int *)(v26 + 24)), v10 != 2))
  {
    v24 = a2[3];
    sub_1000EE0A0(&v26, a2, &v24);
    v12 = *(unint64_t ***)(a1 + 40);
    v13 = *v12;
    v14 = v12[1];
    if (*v12 == v14)
    {
      v15 = 0;
      goto LABEL_37;
    }
    v15 = 0;
    while (1)
    {
      v16 = atomic_load(v13);
      while (!v16 || *(_QWORD *)(v16 + 32) == -2)
      {
        v17 = atomic_load((unint64_t *)&v26);
        v18 = __ldaxr(v13);
        if (v18 != v16)
        {
          __clrex();
LABEL_20:
          v19 = 0;
          goto LABEL_21;
        }
        if (__stlxr(v17, v13))
          goto LABEL_20;
        v19 = 1;
LABEL_21:
        v16 = v18;
        if (v19)
        {
          sub_1000EE6CC((unint64_t *)&v24, (unint64_t *)&v26);
          goto LABEL_24;
        }
      }
      v24 = 0;
      atomic_store(0, (unint64_t *)&v24);
LABEL_24:
      if (v24)
        v20 = *(unsigned __int8 *)(v24 + 312) == 0;
      else
        v20 = 0;
      if (v26)
        v21 = *(unsigned __int8 *)(v26 + 312) == 0;
      else
        v21 = 0;
      sub_1000EEAE4((unint64_t *)&v24);
      if (v20 != v21)
      {
        ++v15;
        if (++v13 != v14)
          continue;
      }
LABEL_37:
      sub_1000EE6CC((unint64_t *)a3, (unint64_t *)&v26);
      *(_DWORD *)(a3 + 8) = v15;
      return sub_1000EEAE4((unint64_t *)&v26);
    }
  }
  sub_1000EE6CC((unint64_t *)&v24, (unint64_t *)&v26);
  v25 = -2;
  *(_QWORD *)a3 = 0;
  do
    v11 = __ldaxr((unint64_t *)&v24);
  while (__stlxr(0, (unint64_t *)&v24));
  atomic_store(v11, (unint64_t *)a3);
  *(_DWORD *)(a3 + 8) = v25;
  sub_1000EEAE4((unint64_t *)&v24);
  return sub_1000EEAE4((unint64_t *)&v26);
}

void sub_1000EDFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000EEAE4((unint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t *sub_1000EE000@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = atomic_load(result);
  if (v4 && *(_QWORD *)(v4 + 32) == a2)
  {
    v6 = (unint64_t *)atomic_load(result);
    sub_1000F13CC(&v9, v6, 1);
    if (v9 && !*(_BYTE *)(v9 + 312))
    {
      v7 = *(_QWORD *)(v9 + 32);
      *a3 = 0;
      if (v7 == a2)
      {
        do
          v8 = __ldaxr(&v9);
        while (__stlxr(0, &v9));
        atomic_store(v8, a3);
      }
    }
    else
    {
      *a3 = 0;
    }
    return sub_1000EEAE4(&v9);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_1000EE0A0(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  sub_1000F18D4(*a1, a2, a3);
}

void sub_1000EE0CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;

  __cxa_begin_catch(a1);
  if (*v10)
  {
    v11 = *(_QWORD *)(*v10 + 256);
    if (v11)
    {
      a10 = *v10;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &a10, v10);
    }
  }
  __cxa_rethrow();
}

void sub_1000EE100(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1000EE114(uint64_t a1, uint64_t *a2, int *a3, void **a4)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;

  if (*(_BYTE *)(*a2 + 192))
    v4 = *a2 + 40;
  else
    v4 = 0;
  v5 = atomic_load((unsigned __int8 *)(v4 + 140));
  if ((v5 & 1) != 0)
  {
    v7 = *(_BYTE *)(*a2 + 192) ? *a2 + 40 : 0;
    v8 = atomic_load((unsigned int *)(v7 + 144));
    *a3 = v8;
    if ((v8 & 0x80000000) == 0)
    {
      v9 = *a4;
      if (*(_BYTE *)(*a2 + 192))
        v10 = *a2 + 40;
      else
        v10 = 0;
      v11 = *(const void **)v10;
      v12 = *(std::__shared_weak_count **)(v10 + 8);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        memcpy(v9, v11, *a3);
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      else
      {
        memcpy(v9, v11, v8);
      }
      v16 = *a2;
      if (*a2)
      {
        if (*(_BYTE *)(v16 + 192))
          v16 += 40;
        else
          v16 = 0;
      }
      v17 = (unsigned int *)(v16 + 136);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
    }
  }
  return v5 & 1;
}

void sub_1000EE220(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::mutex *v4;
  uint64_t v5;
  uint64_t v7;

  v3 = *a2;
  if (*a2)
  {
    if (*(_BYTE *)(v3 + 192))
      v3 += 40;
    else
      v3 = 0;
  }
  v4 = (std::mutex *)(v3 + 72);
  std::mutex::lock((std::mutex *)(v3 + 72));
  if (*(_BYTE *)(*a2 + 192))
    v5 = *a2 + 40;
  else
    v5 = 0;
  if (atomic_load((unsigned int *)(v5 + 136)))
  {
    v7 = *a2;
    if (*a2)
    {
      if (*(_BYTE *)(v7 + 192))
        v7 += 40;
      else
        v7 = 0;
    }
    std::condition_variable::notify_all((std::condition_variable *)(v7 + 24));
  }
  std::mutex::unlock(v4);
}

uint64_t sub_1000EE2A4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *a2;
  if (*a2)
  {
    if (*(_BYTE *)(v6 + 192))
      v6 += 40;
    else
      v6 = 0;
  }
  v7 = (std::mutex *)(v6 + 72);
  std::mutex::lock((std::mutex *)(v6 + 72));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24), a3);
  v9 = v8;
  if (*(_BYTE *)(*a2 + 192))
    v10 = *a2 + 40;
  else
    v10 = 0;
  atomic_store(v8, (unsigned int *)(v10 + 144));
  if (*(_BYTE *)(*a2 + 192))
    v11 = *a2 + 40;
  else
    v11 = 0;
  atomic_store(1u, (unsigned __int8 *)(v11 + 140));
  std::mutex::unlock(v7);
  return v9;
}

void sub_1000EE354(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EE368(uint64_t a1, uint64_t *a2)
{
  uint64_t p_shared_owners;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  const void *v23;
  std::__shared_weak_count *v24;
  unint64_t v25;
  unint64_t v26;
  std::unique_lock<std::mutex> __lk;
  uint64_t v29;
  int v30;
  unsigned int v31;

  p_shared_owners = (uint64_t)a2;
  v31 = 0;
  v4 = sub_1000EDD58(a1, a2, (uint64_t)&v29);
  v5 = v30;
  if (v30 != -2)
  {
    v13 = sub_1000EE2A4(a1, &v29, p_shared_owners);
    v31 = v13;
    sub_1000EE220(v13, &v29);
    if (v5 < (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) - **(_QWORD **)(a1 + 40)) >> 3)
    {
      __lk.__m_ = 0;
      v14 = atomic_load((unint64_t *)(a1 + 72));
      atomic_store(v14, (unint64_t *)&__lk);
      v15 = **(_QWORD **)(a1 + 40);
      do
        v16 = __ldaxr((unint64_t *)&__lk);
      while (__stlxr(0, (unint64_t *)&__lk));
      atomic_store(v16, (unint64_t *)(v15 + 8 * v5));
    }
    if (v29)
    {
      v17 = *(_QWORD *)(v29 + 256);
      if (v17)
      {
        __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)v29;
        (*(void (**)(uint64_t, std::unique_lock<std::mutex> *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &__lk, &v29);
      }
    }
    goto LABEL_44;
  }
  v6 = v29;
  if (v29)
  {
    if (*(_BYTE *)(v29 + 192))
      v6 = v29 + 40;
    else
      v6 = 0;
  }
  v7 = (unsigned int *)(v6 + 136);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if (sub_1000EE114((uint64_t)v4, &v29, (int *)&v31, (void **)p_shared_owners))
    goto LABEL_44;
  v9 = v29;
  if (v29)
  {
    if (*(_BYTE *)(v29 + 192))
      v9 = v29 + 40;
    else
      v9 = 0;
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v9 + 72);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v9 + 72));
  v11 = sub_1000EE114(v10, &v29, (int *)&v31, (void **)p_shared_owners);
  v12 = v11;
  if (v11)
  {
    p_shared_owners = v31;
  }
  else
  {
    v18 = v29;
    if (v29)
    {
      if (*(_BYTE *)(v29 + 192))
        v18 = v29 + 40;
      else
        v18 = 0;
    }
    std::condition_variable::wait((std::condition_variable *)(v18 + 24), &__lk);
    if (*(_BYTE *)(v29 + 192))
      v19 = v29 + 40;
    else
      v19 = 0;
    v20 = atomic_load((unsigned int *)(v19 + 144));
    v31 = v20;
    if ((int)v20 >= 1)
    {
      v21 = *(void **)p_shared_owners;
      if (*(_BYTE *)(v29 + 192))
        v22 = v29 + 40;
      else
        v22 = 0;
      v23 = *(const void **)v22;
      v24 = *(std::__shared_weak_count **)(v22 + 8);
      if (v24)
      {
        p_shared_owners = (uint64_t)&v24->__shared_owners_;
        do
          v25 = __ldxr((unint64_t *)p_shared_owners);
        while (__stxr(v25 + 1, (unint64_t *)p_shared_owners));
        memcpy(v21, v23, v20);
        do
          v26 = __ldaxr((unint64_t *)p_shared_owners);
        while (__stlxr(v26 - 1, (unint64_t *)p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      else
      {
        memcpy(v21, v23, v20);
      }
    }
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  if ((v12 & 1) == 0)
LABEL_44:
    p_shared_owners = v31;
  sub_1000EEAE4((unint64_t *)&v29);
  return p_shared_owners;
}

void sub_1000EE5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11, int a12, unint64_t a13)
{
  if (a11)
    std::mutex::unlock(a10);
  sub_1000EEAE4(&a13);
  _Unwind_Resume(a1);
}

double sub_1000EE5DC@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  double v5[3];

  sub_1000F1A40(a1, a2, v5);
  result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

void sub_1000EE620(_QWORD *a1)
{
  sub_1000EEA80(a1);
  operator delete();
}

_QWORD *sub_1000EE644(uint64_t a1, _QWORD *a2)
{
  return sub_100005A0C(a2, (uint64_t)"readSynchronizer", 16);
}

_QWORD *sub_1000EE658(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10008669C(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1000EE6B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_1000EE6CC(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  *a1 = 0;
  v3 = (unint64_t *)atomic_load(a2);
  if (!v3)
    goto LABEL_9;
  v4 = atomic_load(v3);
  if (!v4)
    goto LABEL_8;
  while (1)
  {
    v5 = __ldaxr(v3);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_7;
    }
    if (!__stlxr(v4 + 1, v3))
      break;
LABEL_7:
    v4 = v5;
    if (!v5)
      goto LABEL_8;
  }
  v7 = (unint64_t *)v3[37];
  if (v7)
  {
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v3[38] = v8;
  }
  if (!sub_1000EE79C((uint64_t)v3))
  {
    do
      v9 = __ldaxr(v3);
    while (__stlxr(v9 - 1, v3));
    if (v9 == 1)
    {
      v10 = v3[4];
      v3[4] = -1;
      sub_1000EE888((uint64_t)v3, v10, 1u);
    }
LABEL_8:
    v3 = 0;
  }
LABEL_9:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL sub_1000EE79C(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;

  v2 = (unsigned int *)(a1 + 24);
  v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
  {
    v4 = atomic_load((unint64_t *)a1);
    return v4 > 1;
  }
  else
  {
    v6 = (unint64_t *)(a1 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = atomic_load(v2);
    if (v8 != 2 && !*(_BYTE *)(a1 + 312))
      sub_1000EE848(a1 + 24, 1u, 5u);
    do
      v9 = __ldaxr(v6);
    while (__stlxr(v9 - 1, v6));
    v10 = atomic_load((unint64_t *)a1);
    if (v10 < 2)
    {
      return 0;
    }
    else
    {
      v11 = atomic_load(v2);
      return v11 == 2;
    }
  }
}

BOOL sub_1000EE848(uint64_t a1, unsigned int a2, unsigned int a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)&v4 = a1;
  *((_QWORD *)&v4 + 1) = __PAIR64__(a3, a2);
  v5 = a1;
  v6 = v4;
  return sub_1000DCE1C((uint64_t)&v4, (uint64_t)&v5, 0);
}

uint64_t sub_1000EE888(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v11;
  int v12;
  _QWORD v13[45];
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 312)
    || (v6 = atomic_load((unsigned int *)(a1 + 24)), v6 != 2)
    || !*(_BYTE *)(a1 + 192)
    || (v7 = *(_QWORD *)(a1 + 288)) == 0)
  {
    v9 = (a3 >> 1) & 2;
    goto LABEL_11;
  }
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a1 + 40);
  v9 = (a3 >> 1) & 2;
  if (!(_DWORD)v8)
  {
LABEL_11:
    atomic_store(0, (unsigned int *)(a1 + 24));
    sub_1000EEA40(a1 + 40);
    sub_1000C2148(a1 + 200, a1, a2, v9);
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
    return 1;
  }
  if ((a3 & 2) != 0)
  {
    *(_QWORD *)&v11 = "ref::details::ctrl_blk<CurrentReader, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = CurrentReader, tag_t = unsigned long long]";
    *((_QWORD *)&v11 + 1) = 68;
    v12 = 16;
    sub_1000C2060(v13, &v11);
    sub_100005A0C(&v14, (uint64_t)"Got error when trying to close ", 31);
    std::ostream::operator<<(&v14, a2);
    sub_100005A0C(&v14, (uint64_t)" with ret ", 10);
    std::ostream::operator<<(&v14, v8);
    sub_100005A0C(&v14, (uint64_t)", Force closing.", 16);
    std::ostream::~ostream(&v14, off_100187580);
    sub_1000C2268((uint64_t)v13);
    std::ios::~ios(&v15);
    goto LABEL_11;
  }
  if ((a3 & 1) != 0)
    sub_1000C2148(a1 + 200, a1, a2, v9 | 1);
  return 0;
}

void sub_1000EEA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000C2108((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EEA40(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 152))
  {
    v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 72));
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 24));
    result = sub_100012168(v1);
    *(_BYTE *)(v1 + 152) = 0;
  }
  return result;
}

_QWORD *sub_1000EEA80(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = off_10018BA68;
  sub_1000EEAE4(a1 + 9);
  sub_100012168((uint64_t)(a1 + 7));
  sub_100012168((uint64_t)(a1 + 5));
  *a1 = off_1001725B8;
  sub_100012168((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

unint64_t *sub_1000EEAE4(unint64_t *a1)
{
  unint64_t *result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  do
    result = (unint64_t *)__ldaxr(a1);
  while (__stlxr(0, a1));
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      v5 = result[4];
      result[4] = -1;
      return (unint64_t *)sub_1000EE888((uint64_t)result, v5, 1u);
    }
  }
  return result;
}

void sub_1000EEB24(uint64_t a1, unsigned int *a2, int *a3)
{
  _QWORD *v5;

  v5 = operator new(0x580uLL);
  sub_1000EEB84(v5, a2, a3);
}

void sub_1000EEB70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000EEB84(_QWORD *a1, unsigned int *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10018BB48;
  sub_1000EEC18((uint64_t)(a1 + 3), a2, a3);
}

void sub_1000EEBB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000EEBCC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10018BB48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000EEBDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10018BB48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

_QWORD *sub_1000EEC0C(uint64_t a1)
{
  return sub_1000F07F4(a1 + 24);
}

void sub_1000EEC18(uint64_t a1, unsigned int *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];
  uint64_t v6;

  v3 = *a2;
  v4 = *a3;
  v6 = 0;
  sub_1000EECE8(a1, v3, v4, (uint64_t)v5);
}

void sub_1000EECB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1000EECE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_1000EF144(a1);
  *(_QWORD *)(v8 + 424) = a2;
  *(_QWORD *)(v8 + 432) = a3;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_QWORD *)(v8 + 488) = 850045863;
  *(_OWORD *)(v8 + 496) = 0u;
  *(_OWORD *)(v8 + 512) = 0u;
  *(_OWORD *)(v8 + 528) = 0u;
  *(_QWORD *)(v8 + 544) = 0;
  *(_OWORD *)(v8 + 560) = 0u;
  *(_OWORD *)(v8 + 576) = 0u;
  *(_QWORD *)(v8 + 592) = 850045863;
  *(_OWORD *)(v8 + 600) = 0u;
  *(_OWORD *)(v8 + 616) = 0u;
  *(_OWORD *)(v8 + 632) = 0u;
  *(_QWORD *)(v8 + 648) = 0;
  *(_QWORD *)(v8 + 656) = 1018212795;
  *(_QWORD *)(v8 + 696) = 0;
  *(_OWORD *)(v8 + 680) = 0u;
  *(_BYTE *)(v8 + 704) = 1;
  *(_OWORD *)(v8 + 664) = 0u;
  sub_100100C14(v8 + 712, "dealloc_queue");
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 720) = a1 + 728;
  *(_QWORD *)(a1 + 744) = 850045863;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_QWORD *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 808) = 1018212795;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_QWORD *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 856) = 850045863;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_QWORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 920) = a1 + 920;
  *(_QWORD *)(a1 + 928) = a1 + 920;
  *(_QWORD *)(a1 + 936) = 0;
  sub_100012568(a1 + 944, a4);
  sub_1000EF694(a1 + 976, a1);
  *(_QWORD *)(a1 + 1320) = off_10018BE48;
  *(_QWORD *)(a1 + 1328) = a1;
  *(_QWORD *)(a1 + 1344) = a1 + 1320;
  *(_QWORD *)(a1 + 1352) = off_10018BED8;
  *(_QWORD *)(a1 + 1360) = a1;
  *(_QWORD *)(a1 + 1376) = a1 + 1352;
  operator new[]();
}

void sub_1000EEF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD **a10, std::condition_variable *a11, _QWORD *a12, NSObject **a13)
{
  uint64_t v13;
  _QWORD *v14;
  std::mutex *v15;
  _QWORD *v16;
  _QWORD *v18;
  uint64_t v19;

  v18 = *(_QWORD **)(v13 + 968);
  if (v18 == a12)
  {
    v19 = 4;
    v18 = a12;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  sub_1000E4BAC(v16);
  std::mutex::~mutex((std::mutex *)(v13 + 856));
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 + 808));
  std::mutex::~mutex((std::mutex *)(v13 + 744));
  sub_100027D5C(v13 + 720, *a10);
  sub_100100B68(a13);
  std::condition_variable::~condition_variable(a11);
  std::mutex::~mutex(v15);
  std::mutex::~mutex((std::mutex *)(v13 + 488));
  sub_1000C2854(v14);
  sub_1000F070C((_QWORD *)v13);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EF054(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[4];
  v8 = a1[5];
  v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    sub_1000EFD68(a1);
    v7 = a1[4];
    v8 = a1[5];
    v5 = a1[1];
    v9 = v7 + v8;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  v10 = v7 + v8 + 1;
  v11 = a1[1];
  v12 = (_QWORD *)(v11 + 8 * (v10 >> 9));
  v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11)
    v13 = 0;
  if (v13 == *v12)
    v13 = *(v12 - 1) + 4096;
  return v13 - 8;
}

uint64_t sub_1000EF110(uint64_t a1)
{
  sub_1000EEAE4((unint64_t *)(a1 + 328));
  sub_1000EF5DC((_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1000EF144(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = off_10018BC28;
  *(_QWORD *)(a1 + 56) = a1 + 32;
  *(_QWORD *)a1 = off_10018BB98;
  *(_QWORD *)(a1 + 64) = off_10018BCB8;
  *(_QWORD *)(a1 + 24) = a1;
  *(_QWORD *)(a1 + 88) = a1 + 64;
  *(_QWORD *)(a1 + 96) = 0;
  v2 = sub_1000EF488(a1 + 104, a1, a1 + 32, a1 + 64, a1 + 96);
  sub_1000EF238(v2, -1);
  atomic_store(0, (unsigned int *)(a1 + 128));
  *(_BYTE *)(a1 + 416) = 1;
  return a1;
}

void sub_1000EF1E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v7 = *(_QWORD **)(v1 + 88);
  if (v7 == v5)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v8 = 5;
    v5 = *(_QWORD **)(v1 + 88);
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v8))(v5);
LABEL_6:
  sub_1001238CC(v4, v3, v2, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EF238(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 312) = 0;
  atomic_store(1uLL, (unint64_t *)a1);
  atomic_store(0, (unint64_t *)(a1 + 8));
  atomic_store(0, (unint64_t *)(a1 + 16));
  result = sub_1000EEA40(a1 + 40);
  v4 = *(unint64_t **)(a1 + 296);
  if (v4)
  {
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    *(_QWORD *)(a1 + 304) = v5;
  }
  atomic_store(1u, (unsigned int *)(a1 + 24));
  __dmb(0xBu);
  return result;
}

void sub_1000EF2A8()
{
  operator delete();
}

_QWORD *sub_1000EF2BC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_10018BB98;
  return result;
}

void sub_1000EF2E0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10018BB98;
}

uint64_t sub_1000EF2FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000EF338()
{
}

void sub_1000EF348()
{
  operator delete();
}

_QWORD *sub_1000EF35C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_10018BC28;
  return result;
}

void sub_1000EF380(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10018BC28;
}

uint64_t sub_1000EF39C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000EF3D8()
{
}

void sub_1000EF3E8()
{
  operator delete();
}

_QWORD *sub_1000EF3FC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_10018BCB8;
  return result;
}

void sub_1000EF420(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10018BCB8;
}

uint64_t sub_1000EF438()
{
  return 0;
}

uint64_t sub_1000EF440(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000EF47C()
{
}

uint64_t sub_1000EF488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = -1;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  sub_100012568(a1 + 200, a2);
  sub_100012568(a1 + 232, a3);
  sub_100012568(a1 + 264, a4);
  *(_QWORD *)(a1 + 296) = a5;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  return a1;
}

void sub_1000EF51C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v6 = *(_QWORD **)(v2 + 256);
  if (v6 == v4)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v4 = *(_QWORD **)(v2 + 256);
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v7))(v4);
LABEL_6:
  v8 = *(_QWORD **)(v2 + 224);
  if (v8 == v3)
  {
    v9 = 4;
    v8 = v3;
  }
  else
  {
    if (!v8)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  sub_1000EF59C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EF59C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 152))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 72));
    std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 24));
    sub_100012168(a1);
  }
  return a1;
}

_QWORD *sub_1000EF5DC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 33;
  v3 = (_QWORD *)a1[36];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[32];
  if (v5 == a1 + 29)
  {
    v6 = 4;
    v5 = a1 + 29;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[28];
  if (v7 == a1 + 25)
  {
    v8 = 4;
    v7 = a1 + 25;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  sub_1000EF59C((uint64_t)(a1 + 5));
  return a1;
}

uint64_t sub_1000EF694(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;

  *(_QWORD *)a1 = a2;
  v10[0] = off_10018BD48;
  v10[1] = a1;
  v11 = v10;
  v8[0] = off_10018BDC8;
  v8[1] = a1;
  v9 = v8;
  sub_1000EF488(a1 + 8, (uint64_t)v10, (uint64_t)v8, a2 + 944, a2 + 568);
  v3 = v9;
  if (v9 == v8)
  {
    v4 = 4;
    v3 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = v11;
  if (v11 == v10)
  {
    v6 = 4;
    v5 = v10;
    goto LABEL_10;
  }
  if (v11)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  return a1;
}

void sub_1000EF78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_1000EF7F8()
{
  operator delete();
}

_QWORD *sub_1000EF80C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10018BD48;
  result[1] = v3;
  return result;
}

uint64_t sub_1000EF840(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10018BD48;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000EF85C(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  return sub_1000C2148(**(_QWORD **)(a1 + 8) + 1320, *(_QWORD *)(a1 + 8), *a3, *a4);
}

uint64_t sub_1000EF874(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000EF8B0()
{
}

void sub_1000EF8C0()
{
  operator delete();
}

_QWORD *sub_1000EF8D4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10018BDC8;
  result[1] = v3;
  return result;
}

uint64_t sub_1000EF908(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10018BDC8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000EF924(uint64_t a1)
{
  return sub_1000EF974((uint64_t **)(a1 + 8));
}

uint64_t sub_1000EF92C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000EF968()
{
}

uint64_t sub_1000EF974(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;

  v1 = **a1;
  v4 = *a1;
  v2 = *(_QWORD *)(v1 + 1376);
  if (!v2)
    sub_100017C6C();
  return (*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v2 + 48))(v2, &v4);
}

void sub_1000EF9B8()
{
  operator delete();
}

_QWORD *sub_1000EF9CC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10018BE48;
  result[1] = v3;
  return result;
}

uint64_t sub_1000EFA00(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10018BE48;
  a2[1] = v2;
  return result;
}

void sub_1000EFA1C(uint64_t a1, unint64_t *a2, unint64_t *a3, _DWORD *a4)
{
  sub_1000EFA78(*(_QWORD *)(a1 + 8), *a2, *a3, *a4);
}

uint64_t sub_1000EFA30(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000EFA6C()
{
}

void sub_1000EFA78(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  unsigned int *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  char *v12;
  char *v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v20;
  char *v23;

  if ((*(_DWORD *)(a2 + 336) & 1) == 0)
  {
    v7 = (unsigned int *)(a2 + 336);
    if ((a4 & 3) == 1)
    {
      v8 = (char *)(a1 + 856);
      std::mutex::lock((std::mutex *)(a1 + 856));
      v9 = operator new(0x20uLL);
      v9[2] = a2;
      v9[3] = a3;
      v10 = *(_QWORD *)(a1 + 920);
      *v9 = v10;
      v9[1] = a1 + 920;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)(a1 + 920) = v9;
      ++*(_QWORD *)(a1 + 936);
      do
        v11 = __ldaxr(v7);
      while (__stlxr(v11 | 4, v7));
      v12 = sub_10011E1E0(a2);
      std::mutex::lock((std::mutex *)v12);
      v13 = sub_10011E2A0(a2);
      std::condition_variable::notify_all((std::condition_variable *)v13);
      std::mutex::unlock((std::mutex *)v12);
LABEL_20:
      std::mutex::unlock((std::mutex *)v8);
      return;
    }
    sub_1000EFC24(a1, a3);
    sub_1000EEAE4((unint64_t *)(a2 + 328));
    do
      v14 = __ldaxr(v7);
    while (__stlxr(v14 | 1, v7));
    if ((v14 & 2) == 0)
      sub_1000EFC88(a1, a2);
    v15 = (unint64_t *)(a1 + 576);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      if (atomic_load((unint64_t *)(a1 + 584)))
      {
        std::mutex::lock((std::mutex *)(a1 + 592));
        if (atomic_load((unint64_t *)(a1 + 584)))
          std::condition_variable::notify_all((std::condition_variable *)(a1 + 656));
        std::mutex::unlock((std::mutex *)(a1 + 592));
      }
    }
    v20 = (unint64_t *)(a1 + 560);
    if (atomic_load(v20))
    {
      v8 = sub_10011E1E0(a2);
      std::mutex::lock((std::mutex *)v8);
      if (atomic_load(v20))
      {
        v23 = sub_10011E2A0(a2);
        std::condition_variable::notify_all((std::condition_variable *)v23);
      }
      goto LABEL_20;
    }
  }
}

void sub_1000EFBF8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000EFC24(uint64_t a1, unint64_t a2)
{
  std::mutex *v3;
  unint64_t v4;

  v4 = a2;
  v3 = (std::mutex *)(a1 + 744);
  std::mutex::lock((std::mutex *)(a1 + 744));
  sub_100040D30(a1 + 720, &v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 808));
  std::mutex::unlock(v3);
}

void sub_1000EFC74(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000EFC88(uint64_t a1, uint64_t a2)
{
  std::mutex *v3;
  uint64_t v4;

  v4 = a2;
  v3 = (std::mutex *)(a1 + 488);
  std::mutex::lock((std::mutex *)(a1 + 488));
  sub_1000EFCE4((_QWORD *)(a1 + 440), &v4);
  std::mutex::unlock(v3);
}

void sub_1000EFCD0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000EFCE4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1000EFD68(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1000EFD68(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_1000193CC(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1000E2DEC(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_1000E2F00((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_1000193CC((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_1000193CC((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_1000E301C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1000E3130((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1000F0030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1000F0080()
{
  operator delete();
}

_QWORD *sub_1000F0094(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10018BED8;
  result[1] = v3;
  return result;
}

uint64_t sub_1000F00C8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10018BED8;
  a2[1] = v2;
  return result;
}

void sub_1000F00E4(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  sub_1000F0138(*(_QWORD *)(a1 + 8), *a2, a3);
}

uint64_t sub_1000F00F0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000F012C()
{
}

void sub_1000F0138(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v3 = *(_QWORD *)(a1 + 424);
  if (v3 >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 552);
    v8 = v7 + 8 * v3;
    while (!(v7 + v6) || *(_QWORD *)(v7 + v6) != a2)
    {
      v6 += 8;
      if (v7 + v6 >= v8)
        return;
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
      v9 = (unint64_t *)(v7 + v6);
      while (1)
      {
        v10 = __ldaxr(v9);
        if (v10 != a2)
          break;
        if (!__stlxr(0, v9))
        {
          sub_1000F01E0(a1, a2, 1uLL, a3);
          sub_1000EFC88(a1, a2);
          return;
        }
      }
      __clrex();
    }
  }
}

uint64_t sub_1000F01E0(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  std::condition_variable *v21;
  uint64_t v22;
  char v23;
  char *v24;
  std::chrono::system_clock::time_point v25;
  unsigned int v26;
  char v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v32;
  char v33;
  _BYTE v34[7];
  uint64_t v35;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v36;
  std::unique_lock<std::mutex> __lk;
  _BYTE v38[7];

  v8 = a3 & 0x100;
  v9 = (a3 >> 8) & 1;
  v10 = (unint64_t *)(a1 + 576);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  if ((a3 & 1) != 0)
  {
    v12 = (unint64_t *)(a1 + 560);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = (unsigned int *)(a2 + 336);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 | 2, v14));
  sub_1000EEAE4((unint64_t *)(a2 + 328));
  if (a4)
    sub_1000EEAE4(a4);
  if ((a3 & 1) != 0)
  {
    v16 = atomic_load(v14);
    if ((v16 & 4) == 0)
    {
      v17 = (a3 >> 16) & 1;
      do
      {
        if ((*v14 & 1) != 0)
          break;
        if ((_DWORD)v9)
        {
          std::mutex::lock((std::mutex *)(a1 + 488));
          v18 = *(_QWORD *)(a1 + 480);
          std::mutex::unlock((std::mutex *)(a1 + 488));
          if (v18)
            break;
        }
        if (sub_1000F0438(a1, v17, 0, 0) == -1)
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E1E0(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          v24 = sub_10011E2A0(a2);
          v25.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          v35 = a1;
          v36 = v25.__d_.__rep_ + 200000;
          v32 = a2;
          v33 = v9;
          *(_DWORD *)v34 = *(_DWORD *)v38;
          *(_DWORD *)&v34[3] = *(_DWORD *)&v38[3];
          sub_1000F059C((std::condition_variable *)v24, &__lk, &v36, (uint64_t)&v32);
        }
        else
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E1E0(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          v19 = sub_10011E2A0(a2);
          v20 = atomic_load(v14);
          if ((v20 & 4) == 0)
          {
            v21 = (std::condition_variable *)v19;
            do
            {
              if ((*v14 & 1) != 0)
                break;
              if ((_DWORD)v9)
              {
                std::mutex::lock((std::mutex *)(a1 + 488));
                v22 = *(_QWORD *)(a1 + 480);
                std::mutex::unlock((std::mutex *)(a1 + 488));
                if (v22)
                  break;
              }
              std::condition_variable::wait(v21, &__lk);
              v23 = atomic_load(v14);
            }
            while ((v23 & 4) == 0);
          }
        }
        if (__lk.__owns_)
          std::mutex::unlock(__lk.__m_);
        v26 = *v14;
        if (!v8 || (v26 & 1) != 0)
        {
          if ((v26 & 1) != 0)
            break;
        }
        else if (*(_QWORD *)(a1 + 480))
        {
          break;
        }
        v27 = atomic_load(v14);
      }
      while ((v27 & 4) == 0);
    }
    v28 = (unint64_t *)(a1 + 560);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
  }
  do
    v30 = __ldaxr(v14);
  while (__stlxr(v30 & 0xFFFFFFFD, v14));
  return v30 & 1;
}

void sub_1000F0410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000F0438(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  std::mutex *v19;

  if (!*(_QWORD *)(a1 + 936))
    return 0;
  v19 = (std::mutex *)(a1 + 856);
  std::mutex::lock((std::mutex *)(a1 + 856));
  if (*(_QWORD *)(a1 + 936))
  {
    v8 = *(uint64_t **)(a1 + 928);
    if (v8 == (uint64_t *)(a1 + 920))
    {
      v11 = 1;
    }
    else
    {
      v9 = a4;
      if (a2)
        v10 = 6;
      else
        v10 = 4;
      v11 = 1;
      do
      {
        v12 = v8[2];
        if ((sub_1000EE888(v12 + 8, v8[3], v10) | a2) == 1)
        {
          v13 = sub_10011E1E0(v12);
          std::mutex::lock((std::mutex *)v13);
          v14 = (unsigned int *)(v12 + 336);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 & 0xFFFFFFFB, v14));
          std::mutex::unlock((std::mutex *)v13);
          v16 = *v8;
          v17 = (uint64_t *)v8[1];
          *(_QWORD *)(v16 + 8) = v17;
          *(_QWORD *)v8[1] = v16;
          --*(_QWORD *)(a1 + 936);
          operator delete(v8);
          v8 = v17;
        }
        else
        {
          if (!v9 || v8[3] == a3)
            v11 = 0xFFFFFFFFLL;
          v8 = (uint64_t *)v8[1];
        }
      }
      while (v8 != (uint64_t *)(a1 + 920));
    }
  }
  else
  {
    v11 = 0;
  }
  std::mutex::unlock(v19);
  return v11;
}

void sub_1000F0584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F059C(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  std::mutex *v10;
  uint64_t v11;
  std::chrono::system_clock::time_point v12;
  uint64_t v13;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v14;
  uint64_t v15;
  char v16;
  _BOOL8 v17;

  do
  {
    v8 = *(_QWORD *)(a4 + 16);
    v9 = atomic_load((unsigned int *)(*(_QWORD *)a4 + 336));
    if ((v9 & 4) != 0)
      return 1;
    if ((*(_DWORD *)(*(_QWORD *)a4 + 336) & 1) != 0)
      return 1;
    if (*(_BYTE *)(a4 + 8))
    {
      v10 = (std::mutex *)(v8 + 488);
      std::mutex::lock((std::mutex *)(v8 + 488));
      v11 = *(_QWORD *)(v8 + 480);
      std::mutex::unlock(v10);
      if (v11)
        return 1;
    }
    v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v13 = *a3;
    if (*a3 <= v12.__d_.__rep_)
      break;
    if (!v13)
    {
      v14.__d_.__rep_ = 0;
      goto LABEL_14;
    }
    if (v13 < 1)
    {
      if ((unint64_t)v13 < 0xFFDF3B645A1CAC09)
      {
        v14.__d_.__rep_ = 0x8000000000000000;
        goto LABEL_14;
      }
    }
    else if ((unint64_t)v13 > 0x20C49BA5E353F7)
    {
      v14.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_14;
    }
    v14.__d_.__rep_ = 1000 * v13;
LABEL_14:
    std::condition_variable::__do_timed_wait(a1, a2, v14);
  }
  while (std::chrono::system_clock::now().__d_.__rep_ < *a3);
  v15 = *(_QWORD *)(a4 + 16);
  v16 = atomic_load((unsigned int *)(*(_QWORD *)a4 + 336));
  if ((v16 & 4) != 0 || (*(_DWORD *)(*(_QWORD *)a4 + 336) & 1) != 0)
    return 1;
  if (!*(_BYTE *)(a4 + 8))
    return 0;
  std::mutex::lock((std::mutex *)(v15 + 488));
  v17 = *(_QWORD *)(v15 + 480) != 0;
  std::mutex::unlock((std::mutex *)(v15 + 488));
  return v17;
}

_QWORD *sub_1000F070C(_QWORD *a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = a1 + 13;
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    v5 = a1[17];
    a1[17] = -1;
    sub_1000EE888((uint64_t)(a1 + 13), v5, 1u);
  }
  sub_1000EF5DC(v2);
  v6 = (_QWORD *)a1[11];
  if (v6 == a1 + 8)
  {
    v7 = 4;
    v6 = a1 + 8;
  }
  else
  {
    if (!v6)
      goto LABEL_10;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_10:
  v8 = (_QWORD *)a1[7];
  if (v8 == a1 + 4)
  {
    v9 = 4;
    v8 = a1 + 4;
  }
  else
  {
    if (!v8)
      goto LABEL_15;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_15:
  v10 = (_QWORD *)a1[3];
  if (v10 == a1)
  {
    v11 = 4;
    v10 = a1;
    goto LABEL_19;
  }
  if (v10)
  {
    v11 = 5;
LABEL_19:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return a1;
}

_QWORD *sub_1000F07F4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  *(_BYTE *)(a1 + 704) = 0;
  if (*(_QWORD *)(a1 + 424))
  {
    v3 = 0;
    do
    {
      v4 = (unint64_t *)(*(_QWORD *)(a1 + 552) + 8 * v3);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(0, v4));
      if (v5)
      {
        sub_1000F01E0(a1, v5, v1 & 0xFFFFFFFFFF000000 | 0x10001, 0);
        sub_1000EEAE4((unint64_t *)(v5 + 328));
        sub_1000EF5DC((_QWORD *)(v5 + 8));
        operator delete();
      }
      ++v3;
    }
    while (*(_QWORD *)(a1 + 424) > v3);
  }
  sub_100100CB0((dispatch_queue_t *)(a1 + 712), &stru_10018BF78);
  if (*(_QWORD *)(a1 + 552))
    operator delete[]();
  std::mutex::lock((std::mutex *)(a1 + 488));
  v6 = *(_QWORD *)(a1 + 448);
  if (*(_QWORD *)(a1 + 456) != v6)
  {
    v7 = *(_QWORD *)(a1 + 472);
    v8 = (_QWORD *)(v6 + 8 * (v7 >> 9));
    v9 = (uint64_t *)(*v8 + 8 * (v7 & 0x1FF));
    while (v9 != (uint64_t *)(*(_QWORD *)(v6 + (((*(_QWORD *)(a1 + 480) + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((*(_QWORD *)(a1 + 480) + v7) & 0x1FF)))
    {
      v10 = *v9;
      if (*v9)
      {
        sub_1000EEAE4((unint64_t *)(v10 + 328));
        sub_1000EF5DC((_QWORD *)(v10 + 8));
        operator delete();
      }
      if ((uint64_t *)((char *)++v9 - *v8) == (uint64_t *)4096)
      {
        v11 = (uint64_t *)v8[1];
        ++v8;
        v9 = v11;
      }
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 488));
  v12 = *(_QWORD **)(a1 + 1376);
  if (v12 == (_QWORD *)(a1 + 1352))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 1352);
  }
  else
  {
    if (!v12)
      goto LABEL_22;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_22:
  v14 = *(_QWORD **)(a1 + 1344);
  if (v14 == (_QWORD *)(a1 + 1320))
  {
    v15 = 4;
    v14 = (_QWORD *)(a1 + 1320);
  }
  else
  {
    if (!v14)
      goto LABEL_27;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_27:
  sub_1000EEAE4((unint64_t *)(a1 + 1304));
  sub_1000EF5DC((_QWORD *)(a1 + 984));
  v16 = *(_QWORD **)(a1 + 968);
  if (v16 == (_QWORD *)(a1 + 944))
  {
    v17 = 4;
    v16 = (_QWORD *)(a1 + 944);
    goto LABEL_31;
  }
  if (v16)
  {
    v17 = 5;
LABEL_31:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  sub_1000E4BAC((_QWORD *)(a1 + 920));
  std::mutex::~mutex((std::mutex *)(a1 + 856));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 808));
  std::mutex::~mutex((std::mutex *)(a1 + 744));
  sub_100027D5C(a1 + 720, *(_QWORD **)(a1 + 728));
  sub_100100B68((NSObject **)(a1 + 712));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 656));
  std::mutex::~mutex((std::mutex *)(a1 + 592));
  std::mutex::~mutex((std::mutex *)(a1 + 488));
  sub_1000C2854((_QWORD *)(a1 + 440));
  return sub_1000F070C((_QWORD *)a1);
}

void sub_1000F0A90(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000F0AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    sub_1000F0B7C((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void sub_1000F0B10(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1000F0B34(uint64_t a1)
{
  sub_1000F0B7C(a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t sub_1000F0B3C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1000F0B7C(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

void sub_1000F0BC4(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  std::mutex *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  char v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  std::condition_variable *v44;
  uint64_t **v45;
  std::unique_lock<std::mutex> v46;
  unint64_t v47;
  unint64_t *v48;
  std::unique_lock<std::mutex> __lk;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t *v53;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v54;

  v50 = a2;
  v7 = (std::mutex *)(a1 + 744);
  v8 = (_QWORD *)(a1 + 728);
  v9 = (unint64_t *)(a1 + 976);
  v10 = (unint64_t *)(a1 + 560);
  v43 = (unint64_t *)(a1 + 104);
  v44 = (std::condition_variable *)(a1 + 808);
  v45 = (uint64_t **)(a1 + 720);
  while (2)
  {
    __lk.__m_ = v7;
    __lk.__owns_ = 1;
    std::mutex::lock(v7);
    if (a3)
    {
      v11 = v50;
    }
    else
    {
      v16 = (_QWORD *)*v8;
      if (!*v8)
        goto LABEL_20;
      v11 = v50;
      v17 = v8;
      do
      {
        v18 = v16[4];
        v19 = v18 >= v50;
        if (v18 >= v50)
          v20 = v16;
        else
          v20 = v16 + 1;
        if (v19)
          v17 = v16;
        v16 = (_QWORD *)*v20;
      }
      while (*v20);
      if (v17 == v8 || v50 < v17[4] || (unint64_t *)v17[5] == v9)
      {
LABEL_20:
        v51 = 0;
        *a4 = 0;
        do
          v21 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0, (unint64_t *)&v51));
        atomic_store(v21, a4);
        a4[1] = (unint64_t)v8;
        sub_1000EEAE4((unint64_t *)&v51);
        goto LABEL_23;
      }
    }
    v51 = (unint64_t *)v11;
    v52 = v9;
    v12 = sub_1000E2648(v45, (unint64_t *)&v51, (uint64_t *)&v51);
    v13 = v12;
    if (v14)
    {
      v51 = 0;
      *a4 = 0;
      do
        v15 = __ldaxr((unint64_t *)&v51);
      while (__stlxr(0, (unint64_t *)&v51));
      atomic_store(v15, a4);
      a4[1] = (unint64_t)v12;
      sub_1000EEAE4((unint64_t *)&v51);
LABEL_23:
      v22 = 1;
      goto LABEL_24;
    }
    v48 = (unint64_t *)v12[5];
    if (v48 == v9)
    {
      v28 = (_QWORD *)*v8;
      if (*v8)
      {
        v29 = v50;
        v30 = v8;
        while (1)
        {
          v31 = v28[4];
          v32 = v31 >= v29;
          if (v31 >= v29)
            v33 = v28;
          else
            v33 = v28 + 1;
          if (v32)
            v30 = v28;
          v28 = (_QWORD *)*v33;
          if (!*v33)
          {
            if (v30 == v8)
              break;
            if (v29 < v30[4])
              break;
            v34 = (unint64_t *)v30[5];
            if (v34 != v9)
            {
              v35 = v34[41];
              if (v35)
              {
                if (!*(_BYTE *)(v35 + 312))
                  break;
              }
            }
            if (!*(_BYTE *)(a1 + 704))
              break;
            std::condition_variable::wait(v44, &__lk);
            v28 = (_QWORD *)*v8;
            v30 = v8;
            if (!*v8)
              break;
          }
        }
      }
      v22 = 0;
      goto LABEL_24;
    }
    sub_10003DEE8((uint64_t)&__lk);
    sub_1000EE6CC(&v47, v48 + 41);
    if (v47 && !*(_BYTE *)(v47 + 312))
    {
      v23 = v50;
      if (*(_QWORD *)(v47 + 32) == v50)
      {
        *a4 = 0;
        do
          v37 = __ldaxr(&v47);
        while (__stlxr(0, &v47));
        atomic_store(v37, a4);
        a4[1] = (unint64_t)v13;
        goto LABEL_84;
      }
      if (*(_QWORD *)(v47 + 32) == -1)
      {
        v24 = v43;
        if ((a3 & 1) == 0)
        {
          v51 = 0;
          *a4 = 0;
          do
            v36 = __ldaxr((unint64_t *)&v51);
          while (__stlxr(0, (unint64_t *)&v51));
          goto LABEL_83;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (!a3)
      {
        v51 = 0;
        *a4 = 0;
        do
          v36 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0, (unint64_t *)&v51));
        goto LABEL_83;
      }
      v23 = v50;
    }
    v24 = v43;
LABEL_35:
    if (sub_1000F0438(a1, 0, v23, 1u) != -1)
    {
      do
        v25 = __ldaxr(v10);
      while (__stlxr(v25 + 1, v10));
      v46.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E1E0((unint64_t)v48);
      v46.__owns_ = 1;
      std::mutex::lock(v46.__m_);
      v26 = sub_10011E2A0((unint64_t)v48);
      v54 = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
      v51 = (unint64_t *)&v48;
      v52 = &v47;
      v53 = &v50;
      sub_1000F14A0((std::condition_variable *)v26, &v46, &v54, (uint64_t)&v51);
      do
        v27 = __ldaxr(v10);
      while (__stlxr(v27 - 1, v10));
      if (v46.__owns_)
        std::mutex::unlock(v46.__m_);
      v22 = 3;
      goto LABEL_85;
    }
    v51 = 0;
    v38 = atomic_load(v24);
    if (!v38)
      goto LABEL_81;
    while (1)
    {
      v39 = __ldaxr(v24);
      if (v39 != v38)
      {
        __clrex();
        goto LABEL_71;
      }
      if (!__stlxr(v38 + 1, v24))
        break;
LABEL_71:
      v38 = v39;
      if (!v39)
        goto LABEL_81;
    }
    v40 = *(unint64_t **)(a1 + 400);
    v38 = (unint64_t)v24;
    if (v40)
    {
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      *(_QWORD *)(a1 + 408) = v41;
      v38 = (unint64_t)v24;
    }
LABEL_81:
    atomic_store(v38, (unint64_t *)&v51);
    *a4 = 0;
    do
      v36 = __ldaxr((unint64_t *)&v51);
    while (__stlxr(0, (unint64_t *)&v51));
LABEL_83:
    atomic_store(v36, a4);
    a4[1] = (unint64_t)v8;
    sub_1000EEAE4((unint64_t *)&v51);
LABEL_84:
    v22 = 1;
LABEL_85:
    sub_1000EEAE4(&v47);
LABEL_24:
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (v22 != 1)
    {
      if (!*(_BYTE *)(a1 + 704))
      {
        v51 = 0;
        *a4 = 0;
        do
          v42 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0, (unint64_t *)&v51));
        atomic_store(v42, a4);
        a4[1] = (unint64_t)v8;
        sub_1000EEAE4((unint64_t *)&v51);
        return;
      }
      continue;
    }
    break;
  }
}

void sub_1000F1024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, int a14, unint64_t a15, uint64_t a16, std::mutex *a17, char a18)
{
  sub_1000EEAE4(&a15);
  if (a18)
    std::mutex::unlock(a17);
  _Unwind_Resume(a1);
}

unint64_t *sub_1000F1084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13[5];

  v12 = 0;
  v6 = (std::mutex *)(a1 + 488);
  std::mutex::lock((std::mutex *)(a1 + 488));
  v7 = *(_QWORD *)(a1 + 480);
  if (v7)
  {
    v8 = *(unint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 448) + ((*(_QWORD *)(a1 + 472) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * (*(_QWORD *)(a1 + 472) & 0x1FFLL));
    ++*(_QWORD *)(a1 + 472);
    *(_QWORD *)(a1 + 480) = v7 - 1;
    sub_1000E2958(a1 + 440, 1);
    sub_1000F12B0(a1, v8, a2, v13);
    sub_1000EDC9C(&v12, v13);
    sub_1000EEAE4(v13);
  }
  else
  {
    v8 = 0;
  }
  std::mutex::unlock(v6);
  v9 = atomic_load((unint64_t *)(a1 + 576));
  if (v9 + v7 >= *(_QWORD *)(a1 + 432))
  {
    sub_1000F0438(a1, 0, 0, 0);
  }
  else
  {
    v13[0] = (unint64_t)_NSConcreteStackBlock;
    v13[1] = 0x40000000;
    v13[2] = (unint64_t)sub_1000F1624;
    v13[3] = (unint64_t)&unk_10018C010;
    v13[4] = a1;
    sub_100100C28((dispatch_queue_t *)(a1 + 712), v13);
  }
  *a3 = v8;
  a3[1] = 0;
  do
    v10 = __ldaxr(&v12);
  while (__stlxr(0, &v12));
  atomic_store(v10, (unint64_t *)a3 + 1);
  return sub_1000EEAE4(&v12);
}

void sub_1000F11D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_1000EEAE4(&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_1000F120C(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = atomic_load(a1 + 71);
  v2 = a1[53];
  if (!v2)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = a1[69];
    v7 = *(_QWORD *)(v6 + 8 * v3);
    if (v7 && v1 - *(_QWORD *)(v7 + 312) != -1)
    {
      v5 = *(_QWORD *)(v6 + 8 * v3);
      v4 = v3;
    }
    ++v3;
  }
  while (v2 != v3);
  if (!v5)
    return 0;
  v8 = (unint64_t *)(a1[69] + 8 * v4);
  do
  {
    v9 = __ldaxr(v8);
    if (v9 != v5)
    {
      __clrex();
      return 0;
    }
  }
  while (__stlxr(0, v8));
  if ((sub_1000F01E0((uint64_t)a1, v5, 0x101uLL, 0) & 1) == 0)
    return 0;
  return v5;
}

unint64_t *sub_1000F12B0@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v15;
  unint64_t v17;

  sub_1000F1668((uint64_t)a2, a3);
  v7 = a2 + 1;
  v17 = 0;
  v8 = atomic_load(a2 + 1);
  if (!v8)
  {
LABEL_7:
    v7 = 0;
    goto LABEL_11;
  }
  while (1)
  {
    v9 = __ldaxr(v7);
    if (v9 != v8)
    {
      __clrex();
      goto LABEL_6;
    }
    if (!__stlxr(v8 + 1, v7))
      break;
LABEL_6:
    v8 = v9;
    if (!v9)
      goto LABEL_7;
  }
  v10 = (unint64_t *)a2[38];
  if (v10)
  {
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    a2[39] = v11;
  }
LABEL_11:
  atomic_store((unint64_t)v7, &v17);
  if (*(_QWORD *)(a1 + 424))
  {
    v12 = 0;
    while (2)
    {
      v13 = (unint64_t *)(*(_QWORD *)(a1 + 552) + 8 * v12);
      while (!__ldaxr(v13))
      {
        if (!__stlxr((unint64_t)a2, v13))
        {
          *a4 = 0;
          do
            v15 = __ldaxr(&v17);
          while (__stlxr(0, &v17));
          atomic_store(v15, a4);
          return sub_1000EEAE4(&v17);
        }
      }
      __clrex();
      if (*(_QWORD *)(a1 + 424) > (unint64_t)++v12)
        continue;
      break;
    }
  }
  *a4 = 0;
  return sub_1000EEAE4(&v17);
}

unint64_t *sub_1000F13CC(unint64_t *a1, unint64_t *a2, int a3)
{
  unint64_t *v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = a2;
  *a1 = 0;
  if (!a2)
    goto LABEL_9;
  v5 = atomic_load(a2);
  if (!v5)
    goto LABEL_8;
  while (1)
  {
    v6 = __ldaxr(a2);
    if (v6 != v5)
    {
      __clrex();
      goto LABEL_7;
    }
    if (!__stlxr(v5 + 1, a2))
      break;
LABEL_7:
    v5 = v6;
    if (!v6)
      goto LABEL_8;
  }
  v8 = (unint64_t *)a2[37];
  if (v8)
  {
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    a2[38] = v9;
  }
  if (a3 && !sub_1000EE79C((uint64_t)a2))
  {
    do
      v10 = __ldaxr(v3);
    while (__stlxr(v10 - 1, v3));
    if (v10 == 1)
    {
      v11 = v3[4];
      v3[4] = -1;
      sub_1000EE888((uint64_t)v3, v11, 1u);
    }
LABEL_8:
    v3 = 0;
  }
LABEL_9:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL sub_1000F14A0(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3, uint64_t a4)
{
  uint64_t v8;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9;
  std::chrono::steady_clock::time_point v10;
  std::chrono::system_clock::time_point v11;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v13;
  uint64_t v14;

  do
  {
    if ((*(_DWORD *)(**(_QWORD **)a4 + 336) & 1) != 0)
      return 1;
    v8 = *(_QWORD *)(a4 + 8);
    if (*(_QWORD *)v8)
    {
      if (!*(_BYTE *)(*(_QWORD *)v8 + 312) && *(_QWORD *)(*(_QWORD *)v8 + 32) == **(_QWORD **)(a4 + 16))
        return 1;
    }
    if (*a3 <= std::chrono::steady_clock::now().__d_.__rep_)
      break;
    v9 = *a3;
    v10.__d_.__rep_ = v9 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v11.__d_.__rep_)
      {
        if (v11.__d_.__rep_ < 1)
        {
          if ((unint64_t)v11.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v12 = 0x8000000000000000;
            goto LABEL_17;
          }
        }
        else if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v12 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_15;
        }
        v12 = 1000 * v11.__d_.__rep_;
      }
      else
      {
        v12 = 0;
      }
LABEL_15:
      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_17:
      v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
      goto LABEL_18;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a3);
  if ((*(_DWORD *)(**(_QWORD **)a4 + 336) & 1) != 0)
    return 1;
  v14 = *(_QWORD *)(a4 + 8);
  return *(_QWORD *)v14
      && !*(_BYTE *)(*(_QWORD *)v14 + 312)
      && *(_QWORD *)(*(_QWORD *)v14 + 32) == **(_QWORD **)(a4 + 16);
}

uint64_t sub_1000F1624(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = sub_1000F120C(v1);
  if (v2)
    sub_1000EFC88((uint64_t)v1, v2);
  return sub_1000F0438((uint64_t)v1, 0, 0, 0);
}

unint64_t *sub_1000F1668(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  atomic_store(0, (unsigned int *)(a1 + 336));
  v3 = (unint64_t *)(a1 + 8);
  sub_1000EF238(a1 + 8, a2);
  v12 = 0;
  v4 = atomic_load(v3);
  if (!v4)
    goto LABEL_11;
  while (1)
  {
    v5 = __ldaxr(v3);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_6;
    }
    if (!__stlxr(v4 + 1, v3))
      break;
LABEL_6:
    v4 = v5;
    if (!v5)
      goto LABEL_11;
  }
  v6 = *(unint64_t **)(a1 + 304);
  v4 = (unint64_t)v3;
  if (v6)
  {
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    *(_QWORD *)(a1 + 312) = v7;
    v4 = (unint64_t)v3;
  }
LABEL_11:
  atomic_store(v4, &v12);
  sub_1000EDC9C((unint64_t *)(a1 + 328), &v12);
  result = sub_1000EEAE4(&v12);
  do
  {
    v9 = __ldaxr(v3);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v3));
  if (!v10)
  {
    v11 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = -1;
    return (unint64_t *)sub_1000EE888((uint64_t)v3, v11, 1u);
  }
  return result;
}

void sub_1000F1758(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;

  *(_QWORD *)(a1 + 304) = **(_QWORD **)(a1 + 296);
  v6 = a1 + 40;
  sub_1000EEA40(a1 + 40);
  sub_1000F1824(v6, a2, a3);
  *(_BYTE *)(a1 + 192) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));
  sub_1000F17FC(a1);
}

void sub_1000F17C4(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(_BYTE *)(v1 + 312) = 1;
  sub_1000F17FC(v1);
  __cxa_rethrow();
}

void sub_1000F17E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000F17FC(uint64_t a1)
{
  if (atomic_load((unint64_t *)(a1 + 8)))
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
}

uint64_t sub_1000F1824(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v6 = *a3;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = 1018212795;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 850045863;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 125) = 0u;
  *(_DWORD *)(a1 + 144) = -1;
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void sub_1000F18D4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;

  *(_QWORD *)(a1 + 304) = **(_QWORD **)(a1 + 296);
  v6 = a1 + 40;
  sub_1000EEA40(a1 + 40);
  sub_1000F1978(v6, a2, a3);
  *(_BYTE *)(a1 + 192) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));
  sub_1000F17FC(a1);
}

void sub_1000F1940(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(_BYTE *)(v1 + 312) = 1;
  sub_1000F17FC(v1);
  __cxa_rethrow();
}

void sub_1000F1964(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1000F1978(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *a3;
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v5;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = 0;
  }
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = 1018212795;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 850045863;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 125) = 0u;
  *(_DWORD *)(a1 + 144) = -1;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void sub_1000F1A40(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x68uLL);
  sub_1000F1AA8(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_1000196D4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000F1A94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000F1AA8(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100185430;
  sub_1000F1AF0(a1 + 3, a2, a3);
  return a1;
}

void sub_1000F1ADC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000F1AF0(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = sub_100038BC0(a1, a3);
  *v5 = off_10018BA68;
  v6 = a2[6];
  v5[5] = a2[5];
  v5[6] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a2[8];
  a1[7] = a2[7];
  a1[8] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  sub_1000EE6CC(a1 + 9, a2 + 9);
  return a1;
}

void sub_1000F1B88(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_100012168(v3);
  sub_100012168(v2);
  sub_100038C10(v1);
  _Unwind_Resume(a1);
}

uLong sub_1000F1BAC(unsigned int *a1)
{
  uLong result;
  void *exception;
  void *v3;

  result = *a1;
  if ((_DWORD)result)
  {
    if ((_DWORD)result != 2)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      v3 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Unknown checksum found", 0x16u);
    }
    return crc32(0, 0, 0) << 32;
  }
  return result;
}

uint64_t sub_1000F1C14(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[136];
  const mach_header_64 *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  *(_OWORD *)(a1 + 16) = 0u;
  v4 = (_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  v5 = (_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)a1 = 0u;
  v37 = &_mh_execute_header;
  sub_100083628((uint64_t)"segment_num_t", 0, &v37, 2);
  *(_DWORD *)(a1 + 60) = 0;
  v37 = &_mh_execute_header;
  sub_100083628((uint64_t)"segment_count_t", 0, &v37, 2);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_1000FB810((_DWORD *)(a1 + 80));
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 84) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  sub_1000FB810((_DWORD *)(a1 + 352));
  *(_DWORD *)(a1 + 356) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  v37 = &_mh_execute_header;
  LODWORD(v38) = 2;
  sub_100083628((uint64_t)"image_variant_type", 0, &v37, 3);
  *(_QWORD *)(a1 + 492) = 0;
  v6 = *(_DWORD *)a2;
  LODWORD(v37) = 2037149547;
  sub_100083628((uint64_t)"header_signature", v6, &v37, 1);
  *(_DWORD *)a1 = 2037149547;
  v7 = bswap32(*(_DWORD *)(a2 + 4));
  LODWORD(v37) = 4;
  sub_100083628((uint64_t)"version_t", v7, &v37, 1);
  *(_DWORD *)(a1 + 4) = 4;
  v8 = bswap32(*(_DWORD *)(a2 + 8));
  LODWORD(v37) = 512;
  sub_100083628((uint64_t)"header_size_t", v8, &v37, 1);
  *(_DWORD *)(a1 + 8) = 512;
  sub_1000FB740(&v37, bswap32(*(_DWORD *)(a2 + 12)));
  *(_DWORD *)(a1 + 12) = (_DWORD)v37;
  *v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = bswap64(*(_QWORD *)(a2 + 24));
  *v5 = bswap64(*(_QWORD *)(a2 + 32));
  *(_QWORD *)(a1 + 40) = bswap64(*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 48) = bswap64(*(_QWORD *)(a2 + 48));
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 56));
  v37 = &_mh_execute_header;
  sub_100083628((uint64_t)"segment_num_t", (int)v5, &v37, 2);
  *(_DWORD *)(a1 + 56) = (_DWORD)v5;
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 60));
  v37 = &_mh_execute_header;
  sub_100083628((uint64_t)"segment_count_t", (int)v5, &v37, 2);
  *(_DWORD *)(a1 + 60) = (_DWORD)v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_1000FB810(v36);
  v9 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)&v36[96] = *(_OWORD *)(a2 + 176);
  *(_OWORD *)&v36[112] = v9;
  *(_QWORD *)&v36[128] = *(_QWORD *)(a2 + 208);
  v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)&v36[32] = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v36[48] = v10;
  v11 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)&v36[64] = *(_OWORD *)(a2 + 144);
  *(_OWORD *)&v36[80] = v11;
  v12 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)v36 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)&v36[16] = v12;
  v42 = *(_OWORD *)&v36[72];
  v43 = *(_OWORD *)&v36[88];
  v44 = *(_OWORD *)&v36[104];
  v45 = *(_OWORD *)&v36[120];
  v38 = *(_OWORD *)&v36[8];
  v39 = *(_OWORD *)&v36[24];
  v40 = *(_OWORD *)&v36[40];
  v41 = *(_OWORD *)&v36[56];
  v37 = *(const mach_header_64 **)v36;
  sub_1000F3408((uint64_t)&v37, (int *)&v27);
  *(_QWORD *)(a1 + 80) = v27;
  *(_OWORD *)(a1 + 152) = v32;
  *(_OWORD *)(a1 + 168) = v33;
  *(_OWORD *)(a1 + 184) = v34;
  *(_OWORD *)(a1 + 200) = v35;
  *(_OWORD *)(a1 + 88) = v28;
  *(_OWORD *)(a1 + 104) = v29;
  *(_OWORD *)(a1 + 120) = v30;
  *(_OWORD *)(a1 + 136) = v31;
  *(_QWORD *)(a1 + 216) = bswap64(*(_QWORD *)(a2 + 216));
  *(_QWORD *)(a1 + 224) = bswap64(*(_QWORD *)(a2 + 224));
  v13 = *(_OWORD *)(a2 + 232);
  v14 = *(_OWORD *)(a2 + 248);
  v15 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v15;
  *(_OWORD *)(a1 + 248) = v14;
  *(_OWORD *)(a1 + 232) = v13;
  *(_QWORD *)(a1 + 296) = bswap64(*(_QWORD *)(a2 + 296));
  *(_QWORD *)(a1 + 304) = bswap64(*(_QWORD *)(a2 + 304));
  v16 = *(_OWORD *)(a2 + 312);
  v17 = *(_OWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 312) = v16;
  *(_OWORD *)(a1 + 328) = v17;
  sub_1000FB810(v36);
  v18 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)&v36[96] = *(_OWORD *)(a2 + 448);
  *(_OWORD *)&v36[112] = v18;
  *(_QWORD *)&v36[128] = *(_QWORD *)(a2 + 480);
  v19 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)&v36[32] = *(_OWORD *)(a2 + 384);
  *(_OWORD *)&v36[48] = v19;
  v20 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)&v36[64] = *(_OWORD *)(a2 + 416);
  *(_OWORD *)&v36[80] = v20;
  v21 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)v36 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)&v36[16] = v21;
  v42 = *(_OWORD *)&v36[72];
  v43 = *(_OWORD *)&v36[88];
  v44 = *(_OWORD *)&v36[104];
  v45 = *(_OWORD *)&v36[120];
  v38 = *(_OWORD *)&v36[8];
  v39 = *(_OWORD *)&v36[24];
  v40 = *(_OWORD *)&v36[40];
  v41 = *(_OWORD *)&v36[56];
  v37 = *(const mach_header_64 **)v36;
  sub_1000F3408((uint64_t)&v37, (int *)&v27);
  *(_QWORD *)(a1 + 352) = v27;
  v22 = v33;
  *(_OWORD *)(a1 + 424) = v32;
  *(_OWORD *)(a1 + 440) = v22;
  v23 = v35;
  *(_OWORD *)(a1 + 456) = v34;
  *(_OWORD *)(a1 + 472) = v23;
  v24 = v29;
  *(_OWORD *)(a1 + 360) = v28;
  *(_OWORD *)(a1 + 376) = v24;
  v25 = v31;
  *(_OWORD *)(a1 + 392) = v30;
  *(_OWORD *)(a1 + 408) = v25;
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 488));
  v37 = &_mh_execute_header;
  LODWORD(v38) = 2;
  sub_100083628((uint64_t)"image_variant_type", (int)v5, &v37, 3);
  *(_DWORD *)(a1 + 488) = (_DWORD)v5;
  *(_QWORD *)(a1 + 492) = bswap64(*(_QWORD *)(a2 + 492));
  return a1;
}

void sub_1000F2100(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1000054BC(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F2114(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v13;
  int v14;
  _QWORD v15[45];
  uint64_t v16;
  uint64_t v17;

  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v13 = "*udif::header::write(char *)";
    *((_QWORD *)&v13 + 1) = 20;
    v14 = 2;
    sub_1000F22C8(v15, &v13);
    v4 = sub_1000F23B0(&v16, a1);
    std::ostream::~ostream(v4, off_10018C170);
    sub_1000F80B0((uint64_t)v15);
    std::ios::~ios(&v17);
  }
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(a1 + 8));
  *(_DWORD *)(a2 + 12) = bswap32(*(_DWORD *)(a1 + 12));
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 24) = bswap64(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(a2 + 32) = bswap64(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(a2 + 40) = bswap64(*(_QWORD *)(a1 + 40));
  *(_QWORD *)(a2 + 48) = bswap64(*(_QWORD *)(a1 + 48));
  *(_DWORD *)(a2 + 56) = bswap32(*(_DWORD *)(a1 + 56));
  *(_DWORD *)(a2 + 60) = bswap32(*(_DWORD *)(a1 + 60));
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  v5 = sub_1000F36A4(a1 + 80, a2 + 80);
  *(_QWORD *)v5 = bswap64(*(_QWORD *)(a1 + 216));
  *(_QWORD *)(v5 + 8) = bswap64(*(_QWORD *)(a1 + 224));
  v6 = *(_OWORD *)(a1 + 232);
  v7 = *(_OWORD *)(a1 + 248);
  v8 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)(v5 + 64) = v8;
  *(_OWORD *)(v5 + 16) = v6;
  *(_OWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 80) = bswap64(*(_QWORD *)(a1 + 296));
  *(_QWORD *)(v5 + 88) = bswap64(*(_QWORD *)(a1 + 304));
  v10 = *(_OWORD *)(a1 + 312);
  v9 = *(_OWORD *)(a1 + 328);
  *(_QWORD *)(v5 + 128) = *(_QWORD *)(a1 + 344);
  *(_OWORD *)(v5 + 96) = v10;
  *(_OWORD *)(v5 + 112) = v9;
  v11 = sub_1000F36A4(a1 + 352, v5 + 136);
  *(_DWORD *)v11 = bswap32(*(_DWORD *)(a1 + 488));
  *(_QWORD *)(v11 + 4) = bswap64(*(_QWORD *)(a1 + 492));
  return v11 + 12;
}

void sub_1000F22B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000F2370((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000F22C8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000FB8A8((uint64_t)a1, a2);
  *a1 = off_10018C0A8;
  a1[45] = &off_10018C1A8;
  a1[46] = &off_10018C1D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018C0A8;
  a1[45] = off_10018C130;
  a1[46] = off_10018C158;
  return a1;
}

void sub_1000F234C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000F80B0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F2370(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018C170);
  sub_1000F80B0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000F23B0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  const std::locale::facet *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  const std::locale::facet *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  const std::locale::facet *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  const std::locale::facet *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  const std::locale::facet *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  const std::locale::facet *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  const std::locale::facet *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  const std::locale::facet *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  const std::locale::facet *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  const std::locale::facet *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  const std::locale::facet *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  const std::locale::facet *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  uint64_t v102;
  char *v103;
  _QWORD *v104;
  uint64_t v105;
  const std::locale::facet *v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  const std::locale::facet *v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  const std::locale::facet *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t *v118;
  uint64_t v119;
  char *v120;
  _QWORD *v121;
  uint64_t v122;
  const std::locale::facet *v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  const std::locale::facet *v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  const std::locale::facet *v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  const std::locale::facet *v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  const std::locale::facet *v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  const std::locale::facet *v146;
  uint64_t v147;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  int v158;
  std::locale v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  _BYTE v183[72];
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;

  v4 = sub_100005A0C(a1, (uint64_t)"header (", 8);
  v5 = (_QWORD *)std::ostream::operator<<(v4, 500);
  v6 = sub_100005A0C(v5, (uint64_t)"):", 2);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v7 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v6, v8);
  std::ostream::flush(v6);
  v9 = *(_DWORD *)(a2 + 12);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v157 = *(_DWORD *)(a2 + 60);
  v158 = *(_DWORD *)(a2 + 56);
  v155 = *(_QWORD *)(a2 + 72);
  v156 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 80);
  v16 = *(_OWORD *)(a2 + 168);
  v179 = *(_OWORD *)(a2 + 152);
  v180 = v16;
  v17 = *(_OWORD *)(a2 + 200);
  v181 = *(_OWORD *)(a2 + 184);
  v182 = v17;
  v18 = *(_OWORD *)(a2 + 104);
  v175 = *(_OWORD *)(a2 + 88);
  v176 = v18;
  v19 = *(_OWORD *)(a2 + 136);
  v177 = *(_OWORD *)(a2 + 120);
  v178 = v19;
  v153 = *(_QWORD *)(a2 + 224);
  v154 = *(_QWORD *)(a2 + 216);
  v20 = *(_OWORD *)(a2 + 248);
  v171 = *(_OWORD *)(a2 + 232);
  v172 = v20;
  v21 = *(_OWORD *)(a2 + 280);
  v173 = *(_OWORD *)(a2 + 264);
  v174 = v21;
  v151 = *(_QWORD *)(a2 + 304);
  v152 = *(_QWORD *)(a2 + 296);
  v22 = *(_OWORD *)(a2 + 328);
  v168 = *(_OWORD *)(a2 + 312);
  v169 = v22;
  v170 = *(_QWORD *)(a2 + 344);
  v23 = *(_QWORD *)(a2 + 352);
  v24 = *(_OWORD *)(a2 + 440);
  v164 = *(_OWORD *)(a2 + 424);
  v165 = v24;
  v25 = *(_OWORD *)(a2 + 472);
  v166 = *(_OWORD *)(a2 + 456);
  v167 = v25;
  v26 = *(_OWORD *)(a2 + 376);
  v160 = *(_OWORD *)(a2 + 360);
  v161 = v26;
  v27 = *(_OWORD *)(a2 + 408);
  v162 = *(_OWORD *)(a2 + 392);
  v163 = v27;
  v150 = *(_DWORD *)(a2 + 488);
  v149 = *(_QWORD *)(a2 + 492);
  v28 = sub_100005A0C(a1, (uint64_t)"signature", 9);
  v29 = sub_100005A0C(v28, (uint64_t)": ", 2);
  v183[23] = 4;
  strcpy(v183, "koly");
  v30 = sub_100005A0C(v29, (uint64_t)v183, 4);
  if ((v183[23] & 0x80000000) != 0)
    operator delete(*(void **)v183);
  std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
  v31 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  v32 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v30, v32);
  std::ostream::flush(v30);
  v33 = sub_100005A0C(a1, (uint64_t)"version", 7);
  v34 = sub_100005A0C(v33, (uint64_t)": ", 2);
  v35 = (_QWORD *)std::ostream::operator<<(v34, 4);
  std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(*v35 - 24)));
  v36 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  v37 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v35, v37);
  std::ostream::flush(v35);
  v38 = sub_100005A0C(a1, (uint64_t)"header_size", 11);
  v39 = sub_100005A0C(v38, (uint64_t)": ", 2);
  v40 = (_QWORD *)std::ostream::operator<<(v39, 512);
  std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(_QWORD *)(*v40 - 24)));
  v41 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  v42 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v40, v42);
  std::ostream::flush(v40);
  v43 = sub_100005A0C(a1, (uint64_t)"flags", 5);
  v44 = sub_100005A0C(v43, (uint64_t)": ", 2);
  LODWORD(v159.__locale_) = v9;
  v45 = sub_1000FB924(v44, (int *)&v159);
  std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(_QWORD *)(*v45 - 24)));
  v46 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  v47 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v45, v47);
  std::ostream::flush(v45);
  v48 = sub_100005A0C(a1, (uint64_t)"run_data_fork_offset", 20);
  v49 = sub_100005A0C(v48, (uint64_t)": ", 2);
  v50 = *v49;
  v51 = (char *)v49 + *(_QWORD *)(*v49 - 24);
  LODWORD(v47) = *((_DWORD *)v51 + 2);
  *((_DWORD *)v51 + 2) = v47 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v49 + *(_QWORD *)(v50 - 24) + 8) |= 0x200u;
  v183[0] = 48;
  v52 = sub_100017554(v49, v183);
  std::ostream::operator<<(v52, v10);
  v53 = *v49;
  *(_DWORD *)((char *)v49 + *(_QWORD *)(*v49 - 24) + 8) = v47;
  std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(_QWORD *)(v53 - 24)));
  v54 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  v55 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v49, v55);
  std::ostream::flush(v49);
  v56 = sub_100005A0C(a1, (uint64_t)"data_fork_offset", 16);
  v57 = sub_100005A0C(v56, (uint64_t)": ", 2);
  v58 = *v57;
  v59 = (char *)v57 + *(_QWORD *)(*v57 - 24);
  LODWORD(v49) = *((_DWORD *)v59 + 2);
  *((_DWORD *)v59 + 2) = v49 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v57 + *(_QWORD *)(v58 - 24) + 8) |= 0x200u;
  v183[0] = 48;
  v60 = sub_100017554(v57, v183);
  std::ostream::operator<<(v60, v11);
  v61 = *v57;
  *(_DWORD *)((char *)v57 + *(_QWORD *)(*v57 - 24) + 8) = (_DWORD)v49;
  std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(_QWORD *)(v61 - 24)));
  v62 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  v63 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v57, v63);
  std::ostream::flush(v57);
  v64 = sub_100005A0C(a1, (uint64_t)"data_fork_len", 13);
  v65 = sub_100005A0C(v64, (uint64_t)": ", 2);
  v66 = (_QWORD *)std::ostream::operator<<(v65, v13);
  std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(_QWORD *)(*v66 - 24)));
  v67 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  v68 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v66, v68);
  std::ostream::flush(v66);
  v69 = sub_100005A0C(a1, (uint64_t)"rsrc_fork_offset", 16);
  v70 = sub_100005A0C(v69, (uint64_t)": ", 2);
  v71 = *v70;
  v72 = (char *)v70 + *(_QWORD *)(*v70 - 24);
  LODWORD(v68) = *((_DWORD *)v72 + 2);
  *((_DWORD *)v72 + 2) = v68 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v70 + *(_QWORD *)(v71 - 24) + 8) |= 0x200u;
  v183[0] = 48;
  v73 = sub_100017554(v70, v183);
  std::ostream::operator<<(v73, v12);
  v74 = *v70;
  *(_DWORD *)((char *)v70 + *(_QWORD *)(*v70 - 24) + 8) = v68;
  std::ios_base::getloc((const std::ios_base *)((char *)v70 + *(_QWORD *)(v74 - 24)));
  v75 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  v76 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v75->__vftable[2].~facet_0)(v75, 10);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v70, v76);
  std::ostream::flush(v70);
  v77 = sub_100005A0C(a1, (uint64_t)"rsrc_fork_len", 13);
  v78 = sub_100005A0C(v77, (uint64_t)": ", 2);
  v79 = (_QWORD *)std::ostream::operator<<(v78, v14);
  std::ios_base::getloc((const std::ios_base *)((char *)v79 + *(_QWORD *)(*v79 - 24)));
  v80 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  v81 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v80->__vftable[2].~facet_0)(v80, 10);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v79, v81);
  std::ostream::flush(v79);
  v82 = sub_100005A0C(a1, (uint64_t)"segment_num", 11);
  v83 = sub_100005A0C(v82, (uint64_t)": ", 2);
  LODWORD(v159.__locale_) = v158;
  v84 = sub_1000FB9E0(v83, &v159);
  std::ios_base::getloc((const std::ios_base *)((char *)v84 + *(_QWORD *)(*v84 - 24)));
  v85 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  v86 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v85->__vftable[2].~facet_0)(v85, 10);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v84, v86);
  std::ostream::flush(v84);
  v87 = sub_100005A0C(a1, (uint64_t)"segment_count", 13);
  v88 = sub_100005A0C(v87, (uint64_t)": ", 2);
  LODWORD(v159.__locale_) = v157;
  v89 = sub_1000FBA24(v88, &v159);
  std::ios_base::getloc((const std::ios_base *)((char *)v89 + *(_QWORD *)(*v89 - 24)));
  v90 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  v91 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 10);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v89, v91);
  std::ostream::flush(v89);
  *(_QWORD *)v183 = v156;
  *(_QWORD *)&v183[8] = v155;
  v92 = sub_100005A0C(a1, (uint64_t)"segment_id", 10);
  v93 = sub_100005A0C(v92, (uint64_t)": ", 2);
  sub_1000FBA68(v93, v183, 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(_QWORD *)(*v93 - 24)));
  v94 = std::locale::use_facet(&v159, &std::ctype<char>::id);
  v95 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10);
  std::locale::~locale(&v159);
  std::ostream::put(v93, v95);
  std::ostream::flush(v93);
  *(_QWORD *)v183 = v15;
  v184 = v179;
  v185 = v180;
  v186 = v181;
  v187 = v182;
  *(_OWORD *)&v183[8] = v175;
  *(_OWORD *)&v183[24] = v176;
  *(_OWORD *)&v183[40] = v177;
  *(_OWORD *)&v183[56] = v178;
  v96 = sub_100005A0C(a1, (uint64_t)"data_fork_checksum", 18);
  v97 = sub_100005A0C(v96, (uint64_t)": ", 2);
  sub_1000F4588(v97, v183);
  std::ios_base::getloc((const std::ios_base *)((char *)v97 + *(_QWORD *)(*v97 - 24)));
  v98 = std::locale::use_facet(&v159, &std::ctype<char>::id);
  v99 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v98->__vftable[2].~facet_0)(v98, 10);
  std::locale::~locale(&v159);
  std::ostream::put(v97, v99);
  std::ostream::flush(v97);
  v100 = sub_100005A0C(a1, (uint64_t)"xml_offset", 10);
  v101 = sub_100005A0C(v100, (uint64_t)": ", 2);
  v102 = *v101;
  v103 = (char *)v101 + *(_QWORD *)(*v101 - 24);
  LODWORD(v99) = *((_DWORD *)v103 + 2);
  *((_DWORD *)v103 + 2) = v99 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v101 + *(_QWORD *)(v102 - 24) + 8) |= 0x200u;
  v183[0] = 48;
  v104 = sub_100017554(v101, v183);
  std::ostream::operator<<(v104, v154);
  v105 = *v101;
  *(_DWORD *)((char *)v101 + *(_QWORD *)(*v101 - 24) + 8) = v99;
  std::ios_base::getloc((const std::ios_base *)((char *)v101 + *(_QWORD *)(v105 - 24)));
  v106 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  v107 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v106->__vftable[2].~facet_0)(v106, 10);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v101, v107);
  std::ostream::flush(v101);
  v108 = sub_100005A0C(a1, (uint64_t)"xml_length", 10);
  v109 = sub_100005A0C(v108, (uint64_t)": ", 2);
  v110 = (_QWORD *)std::ostream::operator<<(v109, v153);
  std::ios_base::getloc((const std::ios_base *)((char *)v110 + *(_QWORD *)(*v110 - 24)));
  v111 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  v112 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v111->__vftable[2].~facet_0)(v111, 10);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v110, v112);
  std::ostream::flush(v110);
  *(_OWORD *)v183 = v171;
  *(_OWORD *)&v183[16] = v172;
  *(_OWORD *)&v183[32] = v173;
  *(_OWORD *)&v183[48] = v174;
  v113 = sub_100005A0C(a1, (uint64_t)"external", 8);
  v114 = sub_100005A0C(v113, (uint64_t)": ", 2);
  sub_1000FBA68(v114, v183, 64);
  std::ios_base::getloc((const std::ios_base *)((char *)v114 + *(_QWORD *)(*v114 - 24)));
  v115 = std::locale::use_facet(&v159, &std::ctype<char>::id);
  v116 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v115->__vftable[2].~facet_0)(v115, 10);
  std::locale::~locale(&v159);
  std::ostream::put(v114, v116);
  std::ostream::flush(v114);
  v117 = sub_100005A0C(a1, (uint64_t)"code_sign_offset", 16);
  v118 = sub_100005A0C(v117, (uint64_t)": ", 2);
  v119 = *v118;
  v120 = (char *)v118 + *(_QWORD *)(*v118 - 24);
  LODWORD(v116) = *((_DWORD *)v120 + 2);
  *((_DWORD *)v120 + 2) = v116 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v118 + *(_QWORD *)(v119 - 24) + 8) |= 0x200u;
  v183[0] = 48;
  v121 = sub_100017554(v118, v183);
  std::ostream::operator<<(v121, v152);
  v122 = *v118;
  *(_DWORD *)((char *)v118 + *(_QWORD *)(*v118 - 24) + 8) = v116;
  std::ios_base::getloc((const std::ios_base *)((char *)v118 + *(_QWORD *)(v122 - 24)));
  v123 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  v124 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v123->__vftable[2].~facet_0)(v123, 10);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v118, v124);
  std::ostream::flush(v118);
  v125 = sub_100005A0C(a1, (uint64_t)"code_sign_length", 16);
  v126 = sub_100005A0C(v125, (uint64_t)": ", 2);
  v127 = (_QWORD *)std::ostream::operator<<(v126, v151);
  std::ios_base::getloc((const std::ios_base *)((char *)v127 + *(_QWORD *)(*v127 - 24)));
  v128 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  v129 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v128->__vftable[2].~facet_0)(v128, 10);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v127, v129);
  std::ostream::flush(v127);
  *(_OWORD *)v183 = v168;
  *(_OWORD *)&v183[16] = v169;
  *(_QWORD *)&v183[32] = v170;
  v130 = sub_100005A0C(a1, (uint64_t)"reserved", 8);
  v131 = sub_100005A0C(v130, (uint64_t)": ", 2);
  sub_1000FBA68(v131, v183, 40);
  std::ios_base::getloc((const std::ios_base *)((char *)v131 + *(_QWORD *)(*v131 - 24)));
  v132 = std::locale::use_facet(&v159, &std::ctype<char>::id);
  v133 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v132->__vftable[2].~facet_0)(v132, 10);
  std::locale::~locale(&v159);
  std::ostream::put(v131, v133);
  std::ostream::flush(v131);
  *(_QWORD *)v183 = v23;
  v184 = v164;
  v185 = v165;
  v186 = v166;
  v187 = v167;
  *(_OWORD *)&v183[8] = v160;
  *(_OWORD *)&v183[24] = v161;
  *(_OWORD *)&v183[40] = v162;
  *(_OWORD *)&v183[56] = v163;
  v134 = sub_100005A0C(a1, (uint64_t)"master_checksum", 15);
  v135 = sub_100005A0C(v134, (uint64_t)": ", 2);
  sub_1000F4588(v135, v183);
  std::ios_base::getloc((const std::ios_base *)((char *)v135 + *(_QWORD *)(*v135 - 24)));
  v136 = std::locale::use_facet(&v159, &std::ctype<char>::id);
  v137 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v136->__vftable[2].~facet_0)(v136, 10);
  std::locale::~locale(&v159);
  std::ostream::put(v135, v137);
  std::ostream::flush(v135);
  v138 = sub_100005A0C(a1, (uint64_t)"image_variant", 13);
  v139 = sub_100005A0C(v138, (uint64_t)": ", 2);
  LODWORD(v159.__locale_) = v150;
  v140 = sub_1000FBBB4(v139, &v159);
  std::ios_base::getloc((const std::ios_base *)((char *)v140 + *(_QWORD *)(*v140 - 24)));
  v141 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  v142 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v141->__vftable[2].~facet_0)(v141, 10);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v140, v142);
  std::ostream::flush(v140);
  v143 = sub_100005A0C(a1, (uint64_t)"sector_count", 12);
  v144 = sub_100005A0C(v143, (uint64_t)": ", 2);
  v145 = (_QWORD *)std::ostream::operator<<(v144, v149);
  std::ios_base::getloc((const std::ios_base *)((char *)v145 + *(_QWORD *)(*v145 - 24)));
  v146 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  v147 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v146->__vftable[2].~facet_0)(v146, 10);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v145, v147);
  std::ostream::flush(v145);
  return a1;
}

void sub_1000F3374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 233) < 0)
    operator delete(*(void **)(v18 - 256));
  _Unwind_Resume(exception_object);
}

__n128 sub_1000F3408@<Q0>(uint64_t a1@<X0>, int *a2@<X8>)
{
  __n128 result;
  int v5;
  BOOL v6;
  unsigned int v7;
  int v8;

  sub_1000F84A8(&v8, bswap32(*(_DWORD *)a1));
  *a2 = v8;
  a2[1] = 0;
  v7 = bswap32(*(_DWORD *)(a1 + 4));
  sub_1000F34CC(a2 + 1, &v7);
  v5 = *a2;
  if (*a2)
    v6 = v5 == 10;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 == 2)
    {
      a2[2] = bswap32(*(_DWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)(a2 + 18) = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a2 + 22) = *(_OWORD *)(a1 + 88);
      *(_OWORD *)(a2 + 26) = *(_OWORD *)(a1 + 104);
      *(_OWORD *)(a2 + 30) = *(_OWORD *)(a1 + 120);
      *(_OWORD *)(a2 + 2) = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a2 + 6) = *(_OWORD *)(a1 + 24);
      *(_OWORD *)(a2 + 10) = *(_OWORD *)(a1 + 40);
      result = *(__n128 *)(a1 + 56);
      *(__n128 *)(a2 + 14) = result;
    }
  }
  return result;
}

_DWORD *sub_1000F34CC(_DWORD *result, _DWORD *a2)
{
  _QWORD *exception;

  if (*a2 >= 0x408u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &off_10018C2D8;
    exception[1] = "_checksum";
    exception[2] = "field size too large";
  }
  *result = *a2;
  return result;
}

BOOL sub_1000F3528(_DWORD *a1, uint64_t a2)
{
  _DWORD v4[34];

  sub_1000F358C((uint64_t)v4, a2);
  return sub_10004BC14(a1, v4);
}

uint64_t sub_1000F358C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2 == -1)
    sub_100018028();
  v6 = &v5;
  ((void (*)(uint64_t *__return_ptr, char **, uint64_t))off_10018C2F8[v2])(&v7, &v6, a2 + 4);
  *(_QWORD *)a1 = v7;
  *(_OWORD *)(a1 + 72) = v12;
  *(_OWORD *)(a1 + 88) = v13;
  *(_OWORD *)(a1 + 104) = v14;
  *(_OWORD *)(a1 + 120) = v15;
  *(_OWORD *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 56) = v11;
  return a1;
}

unsigned int *sub_1000F3660@<X0>(unsigned int *result@<X0>, unsigned int *a2@<X8>)
{
  unsigned int v3;
  unsigned int v4;

  v3 = bswap32(*result);
  if ((v3 & 0x80000000) != 0)
  {
    result = sub_1000F89B8(&v4, v3);
    v3 = v4;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_1000F36A4(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_DWORD *)a2 = bswap32(*(_DWORD *)a1);
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  v2 = (_OWORD *)(a2 + 8);
  v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
    v4 = v3 == 10;
  else
    v4 = 1;
  if (v4)
  {
    v5 = 0;
  }
  else if (v3 == 2)
  {
    *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(a1 + 8));
    v2 = (_OWORD *)(a2 + 12);
    v5 = 4;
  }
  else
  {
    v6 = *(_OWORD *)(a1 + 8);
    v7 = *(_OWORD *)(a1 + 24);
    v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 56) = v8;
    *v2 = v6;
    *(_OWORD *)(a2 + 24) = v7;
    v9 = *(_OWORD *)(a1 + 72);
    v10 = *(_OWORD *)(a1 + 88);
    v11 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(a2 + 120) = v11;
    *(_OWORD *)(a2 + 72) = v9;
    *(_OWORD *)(a2 + 88) = v10;
    v5 = 128;
  }
  bzero(v2, 128 - v5);
  return (uint64_t)v2 - v5 + 128;
}

uint64_t sub_1000F375C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *exception;
  void *v7;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(result + 8) + v3;
  v5 = v4 + *(_QWORD *)(result + 16);
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 2;
  if (v4 < v5 && (v4 < v3 || v3 + *(_QWORD *)(a2 + 16) - 1 < v5 - 1))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v7 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Invalid UDIF, run is not within block boundary", 0x16u);
  }
  return result;
}

void sub_1000F37DC()
{
  operator new[]();
}

void sub_1000F38A8()
{
  _QWORD *v0;

  *v0 = 0;
  operator delete[]();
}

void sub_1000F38D0(uint64_t a1, void *a2)
{
  int v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  const __CFData *v11;
  const UInt8 *BytePtr;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *exception;
  const std::error_category *v21;
  int v22;
  const __CFData *v23[2];
  CFPropertyListRef propertyList;
  uint8_t buf[8];
  _BYTE v26[24];
  const __CFData *v27;
  char v28;
  void *values;
  void *keys;

  values = a2;
  keys = CFSTR("resource-fork");
  sub_1000FDCF0((const void **)&keys, (const void **)&values, 1, (CFMutableDictionaryRef *)&propertyList);
  if (sub_1000BF0D4())
  {
    v3 = *__error();
    if (sub_1000BF0BC())
    {
      v23[0] = 0;
      v4 = sub_1000BF044();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        v5 = 3;
      else
        v5 = 2;
      *(_DWORD *)buf = 68158210;
      *(_DWORD *)&buf[4] = 41;
      *(_WORD *)v26 = 2080;
      *(_QWORD *)&v26[2] = "udif::details::UDIF_base::write_resources(CFDictionaryRef)";
      *(_WORD *)&v26[10] = 2114;
      *(_QWORD *)&v26[12] = propertyList;
      v22 = 28;
      v6 = (const char *)_os_log_send_and_compose_impl(v5, v23, 0, 0, &_mh_execute_header, v4, 2, "%.*s: res_dict: %{public}@", buf, v22);
      if (v6)
      {
        v7 = (char *)v6;
        fprintf(__stderrp, "%s\n", v6);
        free(v7);
      }
    }
    else
    {
      v8 = sub_1000BF044();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)&buf[4] = 41;
        *(_WORD *)v26 = 2080;
        *(_QWORD *)&v26[2] = "udif::details::UDIF_base::write_resources(CFDictionaryRef)";
        *(_WORD *)&v26[10] = 2114;
        *(_QWORD *)&v26[12] = propertyList;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%.*s: res_dict: %{public}@", buf, 0x1Cu);
      }
    }
    *__error() = v3;
  }
  sub_1000FDDD0(propertyList, v23);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 216);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = v23[1];
  BytePtr = CFDataGetBytePtr(v23[0]);
  v13 = *((_QWORD *)sub_1001207C0() + 1);
  *(_QWORD *)buf = BytePtr;
  *(_QWORD *)v26 = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)&v26[8] = v11;
  *(_QWORD *)&v26[16] = v9;
  v27 = v11;
  v28 = 0;
  v16 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v10 + 96))(v10, buf);
  v17 = *(std::__shared_weak_count **)v26;
  if (*(_QWORD *)v26)
  {
    v18 = (unint64_t *)(*(_QWORD *)v26 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if ((v16 & 0x80000000) == 0)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 224) = v11;
    operator new[]();
  }
  exception = __cxa_allocate_exception(0x40uLL);
  *exception = &off_1001924F8;
  v21 = std::generic_category();
  exception[1] = v16;
  exception[2] = v21;
  *((_BYTE *)exception + 24) = 0;
  *((_BYTE *)exception + 48) = 0;
  exception[7] = "Can't write UDIF resource part";
}

void sub_1000F3CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100012138((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000F3D78(_QWORD *a1, _DWORD *a2)
{
  _QWORD *v3;
  _QWORD *v5;
  const char *v6;
  uint64_t v7;

  if ((*a2 & 0x80000000) != 0)
  {
    v5 = sub_100005A0C(a1, (uint64_t)"special: ", 9);
    if (*a2 == -1)
      v6 = "ddm";
    else
      v6 = "entire_device";
    if (*a2 == -1)
      v7 = 3;
    else
      v7 = 13;
    return sub_100005A0C(v5, (uint64_t)v6, v7);
  }
  else
  {
    v3 = sub_100005A0C(a1, (uint64_t)"partition_num: ", 15);
    return (_QWORD *)std::ostream::operator<<(v3, *a2);
  }
}

_QWORD *sub_1000F3DF4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  const std::locale::facet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  const std::locale::facet *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  const std::locale::facet *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  const std::locale::facet *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  const std::locale::facet *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  const std::locale::facet *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  const std::locale::facet *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  const std::locale::facet *v67;
  uint64_t v68;
  std::locale v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _BYTE v81[24];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;

  v4 = sub_100005A0C(a1, (uint64_t)"Blocks header", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet((const std::locale *)v81, &std::ctype<char>::id);
  v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale((std::locale *)v81);
  std::ostream::put(v4, v6);
  std::ostream::flush(v4);
  v8 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(unsigned int *)(a2 + 32);
  v11 = *(_DWORD *)(a2 + 36);
  v79 = *(_OWORD *)(a2 + 40);
  v80 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_OWORD *)(a2 + 152);
  v75 = *(_OWORD *)(a2 + 136);
  v76 = v13;
  v14 = *(_OWORD *)(a2 + 184);
  v77 = *(_OWORD *)(a2 + 168);
  v78 = v14;
  v15 = *(_OWORD *)(a2 + 88);
  v71 = *(_OWORD *)(a2 + 72);
  v72 = v15;
  v16 = *(_OWORD *)(a2 + 120);
  v73 = *(_OWORD *)(a2 + 104);
  v74 = v16;
  v17 = *(unsigned int *)(a2 + 200);
  v18 = sub_100005A0C(a1, (uint64_t)"signature", 9);
  v19 = sub_100005A0C(v18, (uint64_t)": ", 2);
  v81[23] = 4;
  strcpy(v81, "mish");
  v20 = sub_100005A0C(v19, (uint64_t)v81, 4);
  if ((v81[23] & 0x80000000) != 0)
    operator delete(*(void **)v81);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
  v21 = std::locale::use_facet((const std::locale *)v81, &std::ctype<char>::id);
  v22 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale((std::locale *)v81);
  std::ostream::put(v20, v22);
  std::ostream::flush(v20);
  v23 = sub_100005A0C(a1, (uint64_t)"version", 7);
  v24 = sub_100005A0C(v23, (uint64_t)": ", 2);
  v25 = (_QWORD *)std::ostream::operator<<(v24, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
  v26 = std::locale::use_facet((const std::locale *)v81, &std::ctype<char>::id);
  v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale((std::locale *)v81);
  std::ostream::put(v25, v27);
  std::ostream::flush(v25);
  v28 = sub_100005A0C(a1, (uint64_t)"first_sector_number", 19);
  v29 = sub_100005A0C(v28, (uint64_t)": ", 2);
  v30 = (_QWORD *)std::ostream::operator<<(v29, v8);
  std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
  v31 = std::locale::use_facet((const std::locale *)v81, &std::ctype<char>::id);
  v32 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
  std::locale::~locale((std::locale *)v81);
  std::ostream::put(v30, v32);
  std::ostream::flush(v30);
  v33 = sub_100005A0C(a1, (uint64_t)"sector_count", 12);
  v34 = sub_100005A0C(v33, (uint64_t)": ", 2);
  v35 = (_QWORD *)std::ostream::operator<<(v34, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(*v35 - 24)));
  v36 = std::locale::use_facet((const std::locale *)v81, &std::ctype<char>::id);
  v37 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
  std::locale::~locale((std::locale *)v81);
  std::ostream::put(v35, v37);
  std::ostream::flush(v35);
  v38 = sub_100005A0C(a1, (uint64_t)"data_start", 10);
  v39 = sub_100005A0C(v38, (uint64_t)": ", 2);
  v40 = *v39;
  v41 = (char *)v39 + *(_QWORD *)(*v39 - 24);
  LODWORD(v37) = *((_DWORD *)v41 + 2);
  *((_DWORD *)v41 + 2) = v37 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v39 + *(_QWORD *)(v40 - 24) + 8) |= 0x200u;
  v81[0] = 48;
  v42 = sub_100017554(v39, v81);
  std::ostream::operator<<(v42, v9);
  v43 = *v39;
  *(_DWORD *)((char *)v39 + *(_QWORD *)(*v39 - 24) + 8) = v37;
  std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(_QWORD *)(v43 - 24)));
  v44 = std::locale::use_facet((const std::locale *)v81, &std::ctype<char>::id);
  v45 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
  std::locale::~locale((std::locale *)v81);
  std::ostream::put(v39, v45);
  std::ostream::flush(v39);
  v46 = sub_100005A0C(a1, (uint64_t)"decompression_buffer_req", 24);
  v47 = sub_100005A0C(v46, (uint64_t)": ", 2);
  v48 = (_QWORD *)std::ostream::operator<<(v47, v10);
  std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(_QWORD *)(*v48 - 24)));
  v49 = std::locale::use_facet((const std::locale *)v81, &std::ctype<char>::id);
  v50 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
  std::locale::~locale((std::locale *)v81);
  std::ostream::put(v48, v50);
  std::ostream::flush(v48);
  LODWORD(v70.__locale_) = v11;
  v51 = sub_100005A0C(a1, (uint64_t)"descriptor", 10);
  v52 = sub_100005A0C(v51, (uint64_t)": ", 2);
  v53 = sub_1000F3D78(v52, &v70);
  std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(_QWORD *)(*v53 - 24)));
  v54 = std::locale::use_facet((const std::locale *)v81, &std::ctype<char>::id);
  v55 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
  std::locale::~locale((std::locale *)v81);
  std::ostream::put(v53, v55);
  std::ostream::flush(v53);
  *(_OWORD *)v81 = v79;
  *(_QWORD *)&v81[16] = v80;
  v56 = sub_100005A0C(a1, (uint64_t)"reserved", 8);
  v57 = sub_100005A0C(v56, (uint64_t)": ", 2);
  sub_1000FBA68(v57, v81, 24);
  std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(_QWORD *)(*v57 - 24)));
  v58 = std::locale::use_facet(&v70, &std::ctype<char>::id);
  v59 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
  std::locale::~locale(&v70);
  std::ostream::put(v57, v59);
  std::ostream::flush(v57);
  *(_QWORD *)v81 = v12;
  v85 = v75;
  v86 = v76;
  v87 = v77;
  v88 = v78;
  *(_OWORD *)&v81[8] = v71;
  v82 = v72;
  v83 = v73;
  v84 = v74;
  v60 = sub_100005A0C(a1, (uint64_t)"checksum", 8);
  v61 = sub_100005A0C(v60, (uint64_t)": ", 2);
  sub_1000F4588(v61, v81);
  std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(_QWORD *)(*v61 - 24)));
  v62 = std::locale::use_facet(&v70, &std::ctype<char>::id);
  v63 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
  std::locale::~locale(&v70);
  std::ostream::put(v61, v63);
  std::ostream::flush(v61);
  v64 = sub_100005A0C(a1, (uint64_t)"run_count", 9);
  v65 = sub_100005A0C(v64, (uint64_t)": ", 2);
  v66 = (_QWORD *)std::ostream::operator<<(v65, v17);
  std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(_QWORD *)(*v66 - 24)));
  v67 = std::locale::use_facet((const std::locale *)v81, &std::ctype<char>::id);
  v68 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
  std::locale::~locale((std::locale *)v81);
  std::ostream::put(v66, v68);
  std::ostream::flush(v66);
  return a1;
}

void sub_1000F4524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000F4588(_QWORD *a1, unsigned __int8 *a2)
{
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char v16;
  int v17;

  v4 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
  v5 = sub_100005A0C(a1, (uint64_t)"type: ", 6);
  v17 = *(_DWORD *)a2;
  v6 = sub_1000264F4(v5, &v17);
  v7 = sub_100005A0C(v6, (uint64_t)" ", 1);
  *(_DWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  v16 = 48;
  v8 = sub_100017554(v7, &v16);
  v9 = *v8;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 24) = 2;
  v10 = *(_DWORD *)((char *)v8 + *(_QWORD *)(v9 - 24) + 8);
  v11 = sub_100005A0C(v8, (uint64_t)"len: ", 5);
  v12 = (_QWORD *)std::ostream::operator<<(v11, *((unsigned int *)a2 + 1));
  v13 = sub_100005A0C(v12, (uint64_t)" data: ", 7);
  *(_DWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
  v14 = *((unsigned int *)a2 + 1);
  if ((_DWORD)v14)
    sub_1000FBA68(v8, a2 + 8, v14);
  else
    sub_100005A0C(v8, (uint64_t)"(empty)", 7);
  *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 8) = v10;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v4;
  return a1;
}

void *sub_1000F46E8()
{
  unsigned __int8 v0;
  int v2[2];
  int v3[2];
  int v4[2];
  int v5[2];

  v0 = atomic_load((unsigned __int8 *)&qword_1001A0FF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1001A0FF0))
  {
    sub_1000F8B90(v2, -2147483643);
    v2[1] = 0;
    sub_1000F8B90(v3, -2147483641);
    v3[1] = 1;
    sub_1000F8B90(v4, -2147483640);
    v4[1] = 2;
    sub_1000F8B90(v5, -2147483642);
    v5[1] = 4;
    sub_1000FBBF8((uint64_t)&unk_1001A0FD8, (unsigned int *)v2, 4);
    __cxa_atexit((void (*)(void *))sub_1000F4828, &unk_1001A0FD8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001A0FF0);
  }
  return &unk_1001A0FD8;
}

void sub_1000F4800(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1001A0FF0);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F4828(uint64_t a1)
{
  sub_100027D5C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void *sub_1000F4850@<X0>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  void *result;
  char v11;

  sub_1000F46E8();
  v4 = qword_1001A0FE0;
  if (!qword_1001A0FE0)
    goto LABEL_12;
  v5 = *a1;
  v6 = &qword_1001A0FE0;
  do
  {
    v7 = *(_DWORD *)(v4 + 28);
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (v8)
      v6 = (uint64_t *)v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != &qword_1001A0FE0 && v5 >= *((_DWORD *)v6 + 7))
  {
    result = sub_1000F46E8();
    *(_DWORD *)a2 = *((_DWORD *)v6 + 8);
    v11 = 1;
  }
  else
  {
LABEL_12:
    result = sub_1000F46E8();
    v11 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 4) = v11;
  return result;
}

uint64_t **sub_1000F48E4(uint64_t **result, uint64_t **a2, _DWORD *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  void *exception;
  _DWORD *v13[33];
  int v14;
  int v15;

  if (HIBYTE(*a3) == 128)
  {
    v9 = result;
    v14 = *a3;
    ((void (*)(_DWORD **__return_ptr, uint64_t **, int *))(*result)[2])(v13, result, &v14);
    if (!BYTE4(v13[0]))
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_100005920((uint64_t)v13);
      sub_100005A0C(v13, (uint64_t)"Unsupported compressed run (", 28);
      v15 = *a3;
      sub_100027FF4(v13, &v15);
      sub_100005A0C(v13, (uint64_t)")", 1);
      sub_100012294((uint64_t)exception, (uint64_t)v13, 0x2Du);
    }
    v13[0] = a3;
    v10 = sub_1000FBEA0(a2, a3, (uint64_t)&unk_100141000, v13)[5];
    if (v10)
    {
      v13[0] = a3;
      v10 = sub_1000FBEA0(a2, a3, (uint64_t)&unk_100141000, v13)[5];
    }
    if (v10 > a4)
      a4 = v10;
    v13[0] = a3;
    result = sub_1000FBEA0(a2, a3, (uint64_t)&unk_100141000, v13);
    result[5] = a4;
    *((_BYTE *)v9 + 88) = 1;
    v11 = v9[12];
    if (v11 <= a5)
      v11 = a5;
    v9[12] = v11;
  }
  return result;
}

void sub_1000F4A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10000FE34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000F4A98(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  int v11;
  int v12;

  sub_1000F8B90(&v12, 1);
  result = sub_1000F4B40(a1, &v12, 0);
  v7 = (_QWORD *)*a2;
  v5 = a2 + 1;
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      v11 = *((_DWORD *)v6 + 8);
      result = sub_1000F4B40(a1, &v11, v6[5]);
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != v5);
  }
  return result;
}

_QWORD *sub_1000F4B40(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v4;
  void *exception;
  void *v8;
  int v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  if (*a2 != 1)
  {
    v11 = *a2;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, int *))(*(_QWORD *)a1 + 16))(&v12, a1, &v11);
    if (BYTE4(v12))
    {
      v9 = v12;
      sub_100038AB8((_QWORD *)(a1 + 56), &v9, a3);
    }
    exception = __cxa_allocate_exception(0x40uLL);
    v8 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"UDIF: compression algo is invalid", 0x16u);
  }
  sub_1000F8B90((int *)&v13, 1);
  v10 = &v13;
  v4 = sub_10004EADC((uint64_t **)(a1 + 104), (unsigned int *)&v13, (uint64_t)&unk_100141000, (_DWORD **)&v10);
  return sub_100027CB4(v4 + 5, (uint64_t *)(a1 + 56));
}

void sub_1000F4C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100012168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000F4CAC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v4;
  const void *v5;
  _DWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t **v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t **v22;
  unsigned int *v23;
  unsigned int *v24;
  BOOL v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  _DWORD *v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  _DWORD *v37;

  v35 = 0;
  v36 = 0;
  v34 = (uint64_t *)&v35;
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 56) + 72))(&v33);
  v4 = *(unsigned int **)(a1 + 104);
  if (v4 != (unsigned int *)(a1 + 112))
  {
    do
    {
      v5 = (const void *)*((_QWORD *)v4 + 5);
      if (v5 == *(const void **)(a1 + 56))
      {
        v31 = v4 + 8;
        v22 = sub_10004EADC(&v34, v4 + 8, (uint64_t)&unk_100141000, &v31);
        sub_100027CB4(v22 + 5, (uint64_t *)&v33);
      }
      else if (v5)
      {
        if (v6)
        {
          v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 6);
          v31 = v6;
          v32 = v7;
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldxr(p_shared_owners);
            while (__stxr(v9 + 1, p_shared_owners));
          }
          v29 = v33;
          if (*((_QWORD *)&v33 + 1))
          {
            v10 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 1, v10));
          }
          (*(void (**)(__int128 *__return_ptr, _DWORD *, __int128 *))(*(_QWORD *)v6 + 176))(&v30, v6, &v29);
          v37 = v4 + 8;
          v12 = sub_10004EADC(&v34, v4 + 8, (uint64_t)&unk_100141000, &v37);
          sub_100015BC8((uint64_t)(v12 + 5), &v30);
          v13 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
          if (*((_QWORD *)&v30 + 1))
          {
            v14 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v16 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
          if (*((_QWORD *)&v29 + 1))
          {
            v17 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          v19 = v32;
          if (v32)
          {
            v20 = (unint64_t *)&v32->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
        }
      }
      v23 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = *(unsigned int **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (unsigned int *)*((_QWORD *)v4 + 2);
          v25 = *(_QWORD *)v24 == (_QWORD)v4;
          v4 = v24;
        }
        while (!v25);
      }
      v4 = v24;
    }
    while (v24 != (unsigned int *)(a1 + 112));
  }
  v26 = v35;
  *(_QWORD *)a2 = v34;
  *(_QWORD *)(a2 + 8) = v26;
  v27 = a2 + 8;
  v28 = v36;
  *(_QWORD *)(a2 + 16) = v36;
  if (v28)
  {
    v26[2] = v27;
    v34 = (uint64_t *)&v35;
    v35 = 0;
    v36 = 0;
    v26 = 0;
  }
  else
  {
    *(_QWORD *)a2 = v27;
  }
  *(_OWORD *)(a2 + 24) = v33;
  sub_10004D648((uint64_t)&v34, v26);
}

void sub_1000F4F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  sub_10004D648((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F4F88(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  void *exception;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  _QWORD v12[45];
  _QWORD v13[20];

  v1 = *(_QWORD **)(result + 8);
  if (v1 != (_QWORD *)(result + 16))
  {
    do
    {
      if (*((unsigned __int8 *)v1 + 59) == 128
        && (v1[5] - v1[4] + (unint64_t)(v1[6] & 1) + ((*((unsigned __int8 *)v1 + 48) >> 1) & 1) - 1) << 9 > 0x400000)
      {
        v7 = (v1[5] - v1[4] + (v1[6] & 1) + ((*((unsigned __int8 *)v1 + 48) >> 1) & 1) - 1) << 9;
        v8 = v1;
        *(_QWORD *)&v10 = "udif::details::UDIF_base::validate_runs()";
        *((_QWORD *)&v10 + 1) = 39;
        v11 = 16;
        sub_1000F518C(v12, &v10);
        sub_100005A0C(v13, (uint64_t)"Run interval: ", 14);
        sub_1000EBAC8(v13, (uint64_t)(v8 + 4));
        sub_100005A0C(v13, (uint64_t)" of type ", 9);
        LODWORD(v9) = *((_DWORD *)v8 + 14);
        sub_100027FF4(v13, &v9);
        sub_100005A0C(v13, (uint64_t)" has size ", 10);
        std::ostream::operator<<(v13, v7);
        sub_100005A0C(v13, (uint64_t)"which is larger than allowed ", 29);
        std::ostream::operator<<(v13, 0x400000);
        sub_100005A0C(v13, (uint64_t)" or exceeds size_t size ", 24);
        v9 = -1;
        sub_1000F5160((uint64_t)v12, &v9);
        sub_1000F5234((uint64_t)v12);
        exception = __cxa_allocate_exception(0x40uLL);
        v6 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"UDIF: compressed runs should be <= 1MB", 0x16u);
      }
      v2 = (_QWORD *)v1[1];
      if (v2)
      {
        do
        {
          v3 = v2;
          v2 = (_QWORD *)*v2;
        }
        while (v2);
      }
      else
      {
        do
        {
          v3 = (_QWORD *)v1[2];
          v4 = *v3 == (_QWORD)v1;
          v1 = v3;
        }
        while (!v4);
      }
      v1 = v3;
    }
    while (v3 != (_QWORD *)(result + 16));
  }
  return result;
}

void sub_1000F5144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_1000F5234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F5160(uint64_t a1, _QWORD *a2)
{
  std::ostream::operator<<(a1 + 360, *a2);
  return a1;
}

_QWORD *sub_1000F518C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000FBF60((uint64_t)a1, a2);
  *a1 = off_10018C368;
  a1[45] = &off_10018C468;
  a1[46] = &off_10018C490;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018C368;
  a1[45] = off_10018C3F0;
  a1[46] = off_10018C418;
  return a1;
}

void sub_1000F5210(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000F8E24(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F5234(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018C430);
  sub_1000F8E24(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t *sub_1000F5274(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t **v5;
  int v6;
  uint64_t v7;
  void *exception;
  void *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;

  v5 = (uint64_t **)(a1 + 32);
  if (a1 + 40 != sub_1000FBFDC(a1 + 32, a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v10 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Invalid UDIF format, contains intersected blocks", 0x16u);
  }
  v6 = *((_DWORD *)a3 + 2);
  v19 = *(_OWORD *)((char *)a3 + 76);
  v20 = *(_OWORD *)((char *)a3 + 92);
  v21 = *(_OWORD *)((char *)a3 + 108);
  v22 = *(_OWORD *)((char *)a3 + 124);
  v15 = *(_OWORD *)((char *)a3 + 12);
  v16 = *(_OWORD *)((char *)a3 + 28);
  v17 = *(_OWORD *)((char *)a3 + 44);
  v18 = *(_OWORD *)((char *)a3 + 60);
  v7 = *a3;
  v12 = *(_QWORD *)(a2 + 16);
  v11 = *(_OWORD *)a2;
  v13 = v7;
  v14 = v6;
  v23 = 1;
  return sub_1000FC060(v5, (uint64_t)&v11);
}

void sub_1000F5390(int a1, CFArrayRef theArray)
{
  CFArrayGetCount(theArray);
  operator new[]();
}

void sub_1000F592C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,_QWORD *a27,uint64_t a28,char a29)
{
  sub_1000F5B88((uint64_t)&a29);
  sub_100027D5C((uint64_t)&a26, a27);
  operator delete[]();
}

_QWORD *sub_1000F59F4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000FC7C4((uint64_t)a1, a2);
  *a1 = off_10018C588;
  a1[45] = &off_10018C688;
  a1[46] = &off_10018C6B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018C588;
  a1[45] = off_10018C610;
  a1[46] = off_10018C638;
  return a1;
}

void sub_1000F5A78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000F9410(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F5A9C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018C650);
  sub_1000F9410(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000F5AE0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000FD020((uint64_t)a1, a2);
  *a1 = off_10018C7A8;
  a1[45] = &off_10018C8A8;
  a1[46] = &off_10018C8D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018C7A8;
  a1[45] = off_10018C830;
  a1[46] = off_10018C858;
  return a1;
}

void sub_1000F5B64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000F99FC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F5B88(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018C870);
  sub_1000F99FC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t *sub_1000F5BC8()
{
  unsigned __int8 v0;
  int v2;
  __int128 v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v0 = atomic_load((unsigned __int8 *)&qword_1001A1010);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1001A1010))
  {
    sub_1000F8B90(&v2, 0);
    v3 = xmmword_100148D40;
    v4 = 2;
    v5 = v2;
    v6 = 0;
    v7 = 0;
    sub_1000FD09C((uint64_t)&qword_1001A0FF8, (unint64_t *)&v3, 1);
    __cxa_atexit((void (*)(void *))sub_1000F5CC8, &qword_1001A0FF8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001A1010);
  }
  return &qword_1001A0FF8;
}

void sub_1000F5CAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1001A1010);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F5CC8(uint64_t a1)
{
  sub_100027D5C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_1000F5CF0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;
  _QWORD v6[2];
  char v7;

  v6[0] = a2 / a4;
  v6[1] = (a3 + a2) / a4;
  v7 = 2;
  result = sub_1000B3144(a1 + 8, (uint64_t)v6);
  if (a1 + 16 == result)
  {
    sub_1000F5BC8();
    return qword_1001A0FF8;
  }
  return result;
}

void sub_1000F5D50(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  _QWORD *v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;

  v5 = a3;
  v8 = sub_1000F5CF0(a1, a2, a3, 0x200uLL);
  if (v5)
  {
    v9 = (_QWORD *)v8;
    v10 = a1 + 16;
    v11 = a2;
    while (v9 != (_QWORD *)v10)
    {
      v12 = v9[4];
      v13 = v12 << 9;
      if (v11 < v12 << 9)
        goto LABEL_11;
      v14 = (v9[5] - v12) << 9;
      if (v14 - (v11 - v13) >= v5)
        v15 = v5;
      else
        v15 = v14 - (v11 - v13);
      v16 = *((_DWORD *)v9 + 14);
      v29 = v16;
      if (HIBYTE(v16) == 128)
      {
        v30 = *((_OWORD *)v9 + 4);
        *(_QWORD *)&v31 = v13;
        *((_QWORD *)&v31 + 1) = v14;
        *(_QWORD *)&v32 = v11 - a2;
        *((_QWORD *)&v32 + 1) = v11 - v13;
      }
      else
      {
        *(_QWORD *)&v30 = v9[8] + v11 - v13;
        *((_QWORD *)&v30 + 1) = v15;
        *(_QWORD *)&v31 = v11;
        *((_QWORD *)&v31 + 1) = v15;
        v32 = v11 - a2;
      }
      v33 = v15;
      v22 = a4[1];
      v23 = *a4 + (v22 << 6);
      if (v22 == a4[2])
      {
        sub_1000FD33C(a4, v23, 1, (uint64_t)&v29, &v34);
      }
      else
      {
        *(_DWORD *)v23 = v16;
        v24 = v30;
        v25 = v31;
        v26 = v32;
        *(_QWORD *)(v23 + 56) = v33;
        *(_OWORD *)(v23 + 40) = v26;
        *(_OWORD *)(v23 + 24) = v25;
        *(_OWORD *)(v23 + 8) = v24;
        ++a4[1];
      }
      v27 = (_QWORD *)v9[1];
      if (v27)
      {
        do
        {
          v9 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = v9;
          v9 = (_QWORD *)v9[2];
        }
        while ((_QWORD *)*v9 != v28);
      }
LABEL_23:
      v11 += v15;
      v5 -= v15;
      if (!v5)
        return;
    }
    v13 = v11 + v5;
LABEL_11:
    if (v13 - v11 >= v5)
      v15 = v5;
    else
      v15 = v13 - v11;
    sub_1000F8B90((int *)&v29, 0);
    v30 = 0uLL;
    *(_QWORD *)&v31 = v11;
    *((_QWORD *)&v31 + 1) = v15;
    v32 = v11 - a2;
    v33 = v15;
    v17 = a4[1];
    v18 = *a4 + (v17 << 6);
    if (v17 == a4[2])
    {
      sub_1000FD33C(a4, v18, 1, (uint64_t)&v29, &v34);
    }
    else
    {
      *(_DWORD *)v18 = v29;
      v19 = v30;
      v20 = v31;
      v21 = v32;
      *(_QWORD *)(v18 + 56) = v33;
      *(_OWORD *)(v18 + 40) = v21;
      *(_OWORD *)(v18 + 24) = v20;
      *(_OWORD *)(v18 + 8) = v19;
      ++a4[1];
    }
    goto LABEL_23;
  }
}

uint64_t sub_1000F5F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 8;
  v4 = sub_1000B3144(a1 + 8, a2);
  sub_1000B2E1C(v3, a2);
  return v4;
}

uint64_t sub_1000F5FA4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1000F5FB4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  int v15;
  _QWORD v16[45];
  uint64_t v17;
  uint64_t v18;

  sub_1000F358C((uint64_t)v16, a3);
  if (sub_10004BC14(a4, v16))
  {
    *(_QWORD *)&v14 = "udif::details::UDIF_base::print_checksum_verification_status(const std::string &, const csum_any &, const details::checksum &) const";
    *((_QWORD *)&v14 + 1) = 60;
    v15 = 0;
    sub_1000F61A0(v16, &v14);
    v7 = *(char *)(a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *(_QWORD *)a2;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    sub_100005A0C(&v17, v8, v9);
    sub_100005A0C(&v17, (uint64_t)" - same ", 8);
    sub_1000FD5E0((uint64_t)&v17, a3);
    std::ostream::~ostream(&v17, off_10018CA90);
    sub_1000F9FE8((uint64_t)v16);
  }
  else
  {
    *(_QWORD *)&v14 = "udif::details::UDIF_base::print_checksum_verification_status(const std::string &, const csum_any &, const details::checksum &) const";
    *((_QWORD *)&v14 + 1) = 60;
    v15 = 0;
    sub_1000F6288(v16, &v14);
    v10 = *(char *)(a2 + 23);
    if (v10 >= 0)
      v11 = a2;
    else
      v11 = *(_QWORD *)a2;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a2 + 23);
    else
      v12 = *(_QWORD *)(a2 + 8);
    sub_100005A0C(&v17, v11, v12);
    sub_100005A0C(&v17, (uint64_t)" - different calculated: <", 26);
    sub_1000FD5E0((uint64_t)&v17, a3);
    sub_100005A0C(&v17, (uint64_t)"> real: <", 9);
    sub_1000F4588(&v17, a4);
    sub_100005A0C(&v17, (uint64_t)">", 1);
    std::ostream::~ostream(&v17, off_10018CCB0);
    sub_1000FA5D4((uint64_t)v16);
  }
  return std::ios::~ios(&v18);
}

void sub_1000F6174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000F6248((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000F61A0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000FD564((uint64_t)a1, a2);
  *a1 = off_10018C9C8;
  a1[45] = &off_10018CAC8;
  a1[46] = &off_10018CAF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018C9C8;
  a1[45] = off_10018CA50;
  a1[46] = off_10018CA78;
  return a1;
}

void sub_1000F6224(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000F9FE8(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F6248(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018CA90);
  sub_1000F9FE8(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000F6288(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000FD6D4((uint64_t)a1, a2);
  *a1 = off_10018CBE8;
  a1[45] = &off_10018CCE8;
  a1[46] = &off_10018CD10;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018CBE8;
  a1[45] = off_10018CC70;
  a1[46] = off_10018CC98;
  return a1;
}

void sub_1000F630C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000FA5D4(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F6330(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018CCB0);
  sub_1000FA5D4(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_1000F6370(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_10018C040;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a2[1];
  v3 = a2[2];
  *(_QWORD *)(a1 + 64) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 72) = v6;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  sub_1000F46E8();
  sub_1000F5BC8();
  *(_BYTE *)(a1 + 89) = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 216) >= *(_QWORD *)(*(_QWORD *)(a1 + 72) + 32)
                                                                   + *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24);
  sub_1000F6768();
}

void sub_1000F66E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v10;

  sub_1000120EC(v8 - 168);
  sub_10004D648(v5, *(_QWORD **)(v1 + 112));
  v10 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = 0;
  if (v10)
    operator delete();
  sub_100012168(v4);
  sub_100027D5C(v3, *v6);
  sub_100027D5C(v2, *v7);
  _Unwind_Resume(a1);
}

void sub_1000F6768()
{
  sub_1000F6C68();
}

void sub_1000F6948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_1000120BC((uint64_t)va);
  sub_1000120BC((uint64_t)va1);
  sub_100012168(v2 - 40);
  sub_100012138((const void **)(v2 - 24));
  _Unwind_Resume(a1);
}

_QWORD *sub_1000F6994(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000FD750((uint64_t)a1, a2);
  *a1 = off_10018CE08;
  a1[45] = &off_10018CF08;
  a1[46] = &off_10018CF30;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018CE08;
  a1[45] = off_10018CE90;
  a1[46] = off_10018CEB8;
  return a1;
}

void sub_1000F6A18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000FABC0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F6A3C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018CED0);
  sub_1000FABC0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_1000F6A7C()
{
  sub_1000F6C68();
}

void sub_1000F6C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  sub_100012138(&a10);
  _Unwind_Resume(a1);
}

void sub_1000F6C68()
{
  sub_1000F37DC();
}

void sub_1000F6F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_100012138((const void **)va);
  if (v5)
    operator delete[]();
  _Unwind_Resume(a1);
}

uint64_t sub_1000F6F84(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[136];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  *(_OWORD *)(a1 + 16) = 0u;
  v4 = (_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 32) = 0xFFFFFFFE00000000;
  v5 = (_DWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = a1 + 40;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  sub_1000FB810((_DWORD *)(a1 + 64));
  *(_DWORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  v7 = *(_DWORD *)a2;
  LODWORD(v25) = 1752394093;
  sub_100083628((uint64_t)"blocks_signature", v7, &v25, 1);
  *(_DWORD *)a1 = 1752394093;
  v8 = bswap32(*(_DWORD *)(a2 + 4));
  LODWORD(v25) = 1;
  sub_100083628((uint64_t)"version", v8, &v25, 1);
  *(_DWORD *)(a1 + 4) = 1;
  *(_QWORD *)(a1 + 8) = bswap64(*(_QWORD *)(a2 + 8));
  *v4 = bswap64(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 24) = bswap64(*(_QWORD *)(a2 + 24));
  *v5 = bswap32(*(_DWORD *)(a2 + 32));
  LODWORD(v25) = *(_DWORD *)(a2 + 36);
  sub_1000F3660((unsigned int *)&v25, (unsigned int *)v24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)v24;
  v9 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)v6 = v9;
  sub_1000FB810(v24);
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)&v24[96] = *(_OWORD *)(a2 + 160);
  *(_OWORD *)&v24[112] = v10;
  *(_QWORD *)&v24[128] = *(_QWORD *)(a2 + 192);
  v11 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v24[32] = *(_OWORD *)(a2 + 96);
  *(_OWORD *)&v24[48] = v11;
  v12 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)&v24[64] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)&v24[80] = v12;
  v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)v24 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)&v24[16] = v13;
  v30 = *(_OWORD *)&v24[72];
  v31 = *(_OWORD *)&v24[88];
  v32 = *(_OWORD *)&v24[104];
  v33 = *(_OWORD *)&v24[120];
  v26 = *(_OWORD *)&v24[8];
  v27 = *(_OWORD *)&v24[24];
  v28 = *(_OWORD *)&v24[40];
  v29 = *(_OWORD *)&v24[56];
  v25 = *(_QWORD *)v24;
  sub_1000F3408((uint64_t)&v25, (int *)&v15);
  *(_QWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 136) = v20;
  *(_OWORD *)(a1 + 152) = v21;
  *(_OWORD *)(a1 + 168) = v22;
  *(_OWORD *)(a1 + 184) = v23;
  *(_OWORD *)(a1 + 72) = v16;
  *(_OWORD *)(a1 + 88) = v17;
  *(_OWORD *)(a1 + 104) = v18;
  *(_OWORD *)(a1 + 120) = v19;
  *(_DWORD *)(a1 + 200) = bswap32(*(_DWORD *)(a2 + 200));
  return a1;
}

void sub_1000F71F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1000054BC(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F71FC(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  int v6;

  v4 = sub_1000FD8E4((_DWORD *)a1);
  v4[9] = 0;
  *(_OWORD *)(v4 + 5) = 0u;
  *(_OWORD *)(v4 + 1) = 0u;
  sub_1000F8B90(&v6, bswap32(*(_DWORD *)a2));
  *(_DWORD *)a1 = v6;
  *(_DWORD *)(a1 + 4) = bswap32(*(_DWORD *)(a2 + 4));
  *(_QWORD *)(a1 + 8) = bswap64(*(_QWORD *)(a2 + 8));
  *(_QWORD *)(a1 + 16) = bswap64(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 24) = bswap64(*(_QWORD *)(a2 + 24));
  *(_QWORD *)(a1 + 32) = bswap64(*(_QWORD *)(a2 + 32));
  return a1;
}

const void **sub_1000F7290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned __int16 *a4@<X3>, void *a5@<X4>, CFDictionaryRef *a6@<X8>)
{
  const char *v11;
  const char *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  CFIndex v16;
  CFStringRef v18;
  std::string v19;
  CFStringRef v20;
  std::string v21;
  CFTypeRef cf;
  CFStringRef v23;
  void *values[5];
  void *keys[2];
  __int128 v26;
  const __CFString *v27;
  _BYTE v28[48];
  void *__p;
  char v30;
  uint64_t v31;

  if (*(char *)(a1 + 23) >= 0)
    v11 = (const char *)a1;
  else
    v11 = *(const char **)a1;
  cf = 0;
  v23 = CFStringCreateWithCString(kCFAllocatorDefault, v11, 0x8000100u);
  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) >= 0)
      v12 = (const char *)a2;
    else
      v12 = *(const char **)a2;
    cf = CFStringCreateWithCString(kCFAllocatorDefault, v12, 0x8000100u);
  }
  else
  {
    cf = &stru_1001933A0;
  }
  keys[0] = 0;
  sub_100027D2C((const void **)keys);
  std::to_string(&v21, a3);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v21;
  else
    v13 = (std::string *)v21.__r_.__value_.__r.__words[0];
  v20 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v13, 0x600u);
  sub_100027EC8((uint64_t)keys);
  sub_100005A0C(&v26, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)&v26 + *(_QWORD *)(v26 - 24) + 8) = *(_DWORD *)((_BYTE *)&v26 + *(_QWORD *)(v26 - 24) + 8) & 0xFFFFFFB5 | 8;
  LOBYTE(values[0]) = 48;
  sub_100017554(&v26, (char *)values);
  *(_QWORD *)&v28[*(_QWORD *)(v26 - 24)] = 4;
  std::ostream::operator<<(&v26, *a4);
  sub_1000FB698((uint64_t)&v26 + 8, &v19);
  *(void **)((char *)keys
  *(_QWORD *)&v26 = v14;
  if (v30 < 0)
    operator delete(__p);
  std::streambuf::~streambuf((char *)&v26 + 8);
  std::ios::~ios(&v31);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v19;
  else
    v15 = (std::string *)v19.__r_.__value_.__r.__words[0];
  v18 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v15, 0x600u);
  *(_OWORD *)keys = *(_OWORD *)off_10018C058;
  v26 = *(_OWORD *)off_10018C068;
  v27 = CFSTR("CFName");
  values[0] = a5;
  values[1] = (void *)v23;
  values[2] = (void *)v20;
  values[3] = (void *)v18;
  if (*(_BYTE *)(a2 + 24))
    v16 = 5;
  else
    v16 = 4;
  values[4] = (void *)cf;
  *a6 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, v16, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  sub_100027D2C((const void **)&v18);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  sub_100027D2C((const void **)&v20);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  sub_100027D2C(&cf);
  return sub_100027D2C((const void **)&v23);
}

void sub_1000F7578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24,const void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,const void *a31)
{
  sub_100027D2C(&a31);
  sub_100027D2C(&a24);
  sub_100027D2C(&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F7610(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = a1 + 24;
  *(_QWORD *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf(v4);
  std::ios::~ios(a1 + 128);
  return a1;
}

_QWORD *sub_1000F7698(_QWORD *a1, int *a2)
{
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int v27;

  v4 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
  v5 = sub_100005A0C(a1, (uint64_t)"type: ", 6);
  v27 = *a2;
  v6 = sub_100027FF4(v5, &v27);
  v7 = sub_100005A0C(v6, (uint64_t)" data: ", 7);
  v8 = *v7;
  *(_DWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v7 + *(_QWORD *)(v8 - 24) + 8) |= 0x200u;
  v9 = (_QWORD *)std::ostream::operator<<(v7, *((_QWORD *)a2 + 1));
  v10 = sub_100005A0C(v9, (uint64_t)"/", 1);
  v11 = *v10;
  *(_DWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(_DWORD *)((char *)v10 + *(_QWORD *)(v11 - 24) + 8) &= ~0x200u;
  v12 = (_QWORD *)std::ostream::operator<<(v10, *((_QWORD *)a2 + 2));
  v13 = sub_100005A0C(v12, (uint64_t)" logical: ", 10);
  v14 = *v13;
  *(_DWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v13 + *(_QWORD *)(v14 - 24) + 8) |= 0x200u;
  v15 = (_QWORD *)std::ostream::operator<<(v13, *((_QWORD *)a2 + 3));
  v16 = sub_100005A0C(v15, (uint64_t)"/", 1);
  v17 = *v16;
  *(_DWORD *)((char *)v16 + *(_QWORD *)(*v16 - 24) + 8) = *(_DWORD *)((_BYTE *)v16 + *(_QWORD *)(*v16 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(_DWORD *)((char *)v16 + *(_QWORD *)(v17 - 24) + 8) &= ~0x200u;
  v18 = (_QWORD *)std::ostream::operator<<(v16, *((_QWORD *)a2 + 4));
  v19 = sub_100005A0C(v18, (uint64_t)" io: ", 5);
  v20 = *v19;
  *(_DWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v19 + *(_QWORD *)(v20 - 24) + 8) |= 0x200u;
  v21 = (_QWORD *)std::ostream::operator<<(v19, *((_QWORD *)a2 + 5));
  v22 = sub_100005A0C(v21, (uint64_t)",", 1);
  v23 = *v22;
  *(_DWORD *)((char *)v22 + *(_QWORD *)(*v22 - 24) + 8) = *(_DWORD *)((_BYTE *)v22 + *(_QWORD *)(*v22 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(_DWORD *)((char *)v22 + *(_QWORD *)(v23 - 24) + 8) &= ~0x200u;
  v24 = (_QWORD *)std::ostream::operator<<(v22, *((_QWORD *)a2 + 6));
  v25 = sub_100005A0C(v24, (uint64_t)"/", 1);
  std::ostream::operator<<(v25, *((_QWORD *)a2 + 7));
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v4;
  return a1;
}

uint64_t sub_1000F78DC(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  void *exception;
  _QWORD v5[33];

  result = sub_1000FDB18(*(const __CFString **)(*a1 + 8 * a1[4]));
  if (!(_DWORD)result)
  {
    v3 = a1;
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)v5);
    sub_100005A0C(v5, (uint64_t)"UDIF: Failed converting type array string (", 43);
    std::ostream::operator<<(v5, *(_QWORD *)(*v3 + 8 * v3[4]));
    sub_100005A0C(v5, (uint64_t)") to type", 9);
    sub_100012294((uint64_t)exception, (uint64_t)v5, 0x16u);
  }
  return result;
}

void sub_1000F799C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10000FE34((uint64_t)va);
  _Unwind_Resume(a1);
}

const void *sub_1000F79D0(uint64_t a1)
{
  const void *result;
  void *exception;
  void *v3;

  result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), *(const void **)(*(_QWORD *)a1 + 8 * *(_QWORD *)(a1 + 32)));
  if (!result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v3 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"UDIF: Can't get resource array", 0x16u);
  }
  return result;
}

BOOL sub_1000F7A28(uint64_t a1, uint64_t a2)
{
  int v3;
  BOOL v4;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v3 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a1 + 24))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 24) != 0) == (v3 != 0))
      return *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
    return 0;
  }
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  return *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
}

void sub_1000F7A94(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *a1 = 0;
  a1[1] = *a2;
  v2 = a2[1];
  a1[2] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  operator new[]();
}

void sub_1000F7CE4(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1000F7E20((uint64_t)va);
  operator delete[]();
}

_QWORD *sub_1000F7D78(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000FD988((uint64_t)a1, a2);
  *a1 = off_10018D028;
  a1[45] = &off_10018D128;
  a1[46] = &off_10018D150;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018D028;
  a1[45] = off_10018D0B0;
  a1[46] = off_10018D0D8;
  return a1;
}

void sub_1000F7DFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000FB2A0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F7E20(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018D0F0);
  sub_1000FB2A0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000F7E64(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v3 = *a2;
  *a2 = 0;
  v5 = *a3;
  v4 = a3[1];
  *result = v3;
  result[1] = v5;
  result[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_1000F7E98(uint64_t a1)
{
  sub_10004FBD0(a1);
  operator delete();
}

uint64_t sub_1000F7EBC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018C170);
  sub_1000F80B0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000F7EF4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018C170);
  sub_1000F80B0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000F7F34(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018C170);
  sub_1000F80B0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000F7F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000F7FBC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000F8008(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018C170);
  sub_1000F80B0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000F8058(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018C170);
  sub_1000F80B0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000F80B0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018C240;
  sub_1000F814C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000F814C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000F82C4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000F8274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000F82A0(uint64_t a1)
{
  sub_1000F80B0(a1);
  operator delete();
}

int *sub_1000F82C4(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 85;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 85;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

int *sub_1000F84A8(int *a1, int a2)
{
  _OWORD v4[2];
  uint64_t v5;
  int v6;

  *a1 = a2;
  v4[0] = xmmword_100148D50;
  v4[1] = xmmword_100148D60;
  v5 = 0x900000008;
  v6 = 10;
  sub_100083628((uint64_t)"checksum_type", a2, v4, 11);
  return a1;
}

void sub_1000F8540(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

uint64_t sub_1000F8564(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1000F856C@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  size_t v4;
  const char *v5;
  size_t v6;
  void (__cdecl **v7)(std::basic_stringstream<char> *__hidden);
  void (__cdecl **v8)(std::basic_stringstream<char> *__hidden);
  void (__cdecl **v9)(std::basic_stringstream<char> *__hidden);
  uint64_t v11[2];
  void (__cdecl **v12)(std::basic_stringstream<char> *__hidden);
  _QWORD v13[10];
  char v14;
  uint64_t v15;
  void (__cdecl **v16[3])(std::basic_stringstream<char> *__hidden);
  _QWORD v17[10];
  char v18;
  uint64_t v19;

  sub_100027EC8((uint64_t)v11);
  v4 = strlen(*(const char **)(a1 + 8));
  sub_100005A0C(&v12, *(_QWORD *)(a1 + 8), v4);
  sub_100005A0C(&v12, (uint64_t)" - ", 3);
  v5 = *(const char **)(a1 + 16);
  v6 = strlen(v5);
  sub_100005A0C(&v12, (uint64_t)v5, v6);
  sub_1000F86DC(v16, v11);
  *(uint64_t *)((char *)v11
  v12 = v8;
  if (v14 < 0)
    operator delete((void *)v13[8]);
  std::streambuf::~streambuf(v13);
  std::ios::~ios(&v15);
  sub_1000FB698((uint64_t)v17, a2);
  v16[0] = v7;
  *(void (__cdecl ***)(std::basic_stringstream<char> *__hidden))((char *)v16 + (_QWORD)*(v7 - 3)) = v9;
  v16[2] = v8;
  if (v18 < 0)
    operator delete((void *)v17[8]);
  std::streambuf::~streambuf(v17);
  return std::ios::~ios(&v19);
}

void (__cdecl ***sub_1000F86DC(void (__cdecl ***a1)(std::basic_stringstream<char> *__hidden this), uint64_t *a2))(std::basic_stringstream<char> *__hidden this)
{
  void (__cdecl **v4)(std::basic_stringstream<char> *__hidden);
  void (__cdecl **v5)(std::basic_stringstream<char> *__hidden);
  uint64_t v6;
  std::ios_base *v7;
  std::ios_base *v8;
  void (__cdecl **v9)(std::basic_stringstream<char> *__hidden);
  void (__cdecl **v10)(std::basic_stringstream<char> *__hidden);
  void (__cdecl **v11)(std::basic_stringstream<char> *__hidden);

  *a1 = v4;
  *(_QWORD *)((char *)*(v4 - 3) + (_QWORD)a1) = v5;
  v6 = *a2;
  a1[1] = (void (__cdecl **)(std::basic_stringstream<char> *__hidden))a2[1];
  a2[1] = 0;
  v7 = (std::ios_base *)((char *)*(*a1 - 3) + (_QWORD)a1);
  v8 = (std::ios_base *)((char *)a2 + *(_QWORD *)(v6 - 24));
  std::ios_base::move(v7, v8);
  v7[1].__vftable = v8[1].__vftable;
  v8[1].__vftable = 0;
  v7[1].__fmtflags_ = v8[1].__fmtflags_;
  a1[2] = v9;
  *(_QWORD *)((char *)*(v9 - 3) + (_QWORD)(a1 + 2)) = v10;
  *a1 = v11;
  *(_QWORD *)((char *)*(*a1 - 3) + (_QWORD)a1 + 40) = std::stringbuf::basic_stringbuf(a1 + 3, a2 + 3);
  return a1;
}

void sub_1000F87E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::iostream::~basic_iostream(v2, v3 + 8);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F8808@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F8820(a1);
}

uint64_t sub_1000F8814@<X0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1000F88C4(a2, (uint64_t)a1, a1);
}

uint64_t sub_1000F8820(uint64_t a1)
{
  unsigned int v3;
  int v4;
  _DWORD v5[33];

  sub_1000F84A8((int *)&v3, 0);
  *(_QWORD *)a1 = v3;
  v4 = 0;
  sub_1000F34CC(v5, &v4);
  *(_DWORD *)(a1 + 4) = v5[0];
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return a1;
}

uint64_t sub_1000F88C4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v6;
  int v7;
  int v8;
  _BYTE v9[128];

  sub_1000F84A8(&v6, 2);
  *(_DWORD *)a1 = v6;
  *(_DWORD *)(a1 + 4) = 0;
  LODWORD(a3) = *a3;
  v7 = 32;
  sub_1000F34CC(&v8, &v7);
  *(_DWORD *)v9 = (_DWORD)a3;
  memset(&v9[4], 0, 124);
  *(_DWORD *)(a1 + 4) = v8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)&v9[64];
  *(_OWORD *)(a1 + 88) = *(_OWORD *)&v9[80];
  *(_OWORD *)(a1 + 104) = *(_OWORD *)&v9[96];
  *(_OWORD *)(a1 + 120) = *(_OWORD *)&v9[112];
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v9[16];
  *(_OWORD *)(a1 + 40) = *(_OWORD *)&v9[32];
  *(_OWORD *)(a1 + 56) = *(_OWORD *)&v9[48];
  return a1;
}

unsigned int *sub_1000F89B8(unsigned int *result, unsigned int a2)
{
  _QWORD *exception;

  *result = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid value";
    exception[3] = "value validator";
    *exception = &off_10018C330;
    exception[1] = "descriptor_special";
    *((_DWORD *)exception + 8) = a2;
  }
  return result;
}

void sub_1000F8A2C(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

void sub_1000F8A50(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;
  _QWORD v13[10];
  char v14;
  uint64_t v15;
  void *v16[2];
  unsigned __int8 v17;

  v4 = (char *)sub_100110904(a1);
  sub_100005870(v16, v4);
  sub_100027EC8((uint64_t)v11);
  if ((v17 & 0x80u) == 0)
    v5 = v16;
  else
    v5 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v6 = v17;
  else
    v6 = (uint64_t)v16[1];
  v7 = sub_100005A0C(&v12, (uint64_t)v5, v6);
  v8 = sub_100005A0C(v7, (uint64_t)" [", 2);
  *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 8;
  v9 = (_QWORD *)std::ostream::operator<<(v8, *(unsigned int *)(a1 + 32));
  sub_100005A0C(v9, (uint64_t)"]", 1);
  sub_100005598((uint64_t)v13, a2);
  *(_QWORD *)((char *)v11
  v12 = v10;
  if (v14 < 0)
    operator delete((void *)v13[8]);
  std::streambuf::~streambuf(v13);
  std::ios::~ios(&v15);
  if ((char)v17 < 0)
    operator delete(v16[0]);
}

int *sub_1000F8B90(int *a1, int a2)
{
  _OWORD v4[3];
  unint64_t v5;
  int v6;

  *a1 = a2;
  v4[0] = xmmword_100148D70;
  v4[1] = xmmword_100148D80;
  v4[2] = xmmword_100148D90;
  v5 = 0x8000000880000007;
  v6 = -1;
  sub_100083628((uint64_t)"run_type", a2, v4, 15);
  return a1;
}

uint64_t sub_1000F8C30(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018C430);
  sub_1000F8E24(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000F8C68(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018C430);
  sub_1000F8E24(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000F8CA8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018C430);
  sub_1000F8E24(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000F8CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000F8D30(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000F8D7C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018C430);
  sub_1000F8E24(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000F8DCC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018C430);
  sub_1000F8E24(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000F8E24(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018C500;
  sub_1000F8EC0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000F8EC0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000F9038((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000F8FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000F9014(uint64_t a1)
{
  sub_1000F8E24(a1);
  operator delete();
}

int *sub_1000F9038(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 417;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 417;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000F921C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018C650);
  sub_1000F9410(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000F9254(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018C650);
  sub_1000F9410(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000F9294(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018C650);
  sub_1000F9410(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000F92E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000F931C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000F9368(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018C650);
  sub_1000F9410(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000F93B8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018C650);
  sub_1000F9410(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000F9410(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018C720;
  sub_1000F94AC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000F94AC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000F9624((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000F95D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000F9600(uint64_t a1)
{
  sub_1000F9410(a1);
  operator delete();
}

int *sub_1000F9624(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 458;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 458;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000F9808(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018C870);
  sub_1000F99FC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000F9840(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018C870);
  sub_1000F99FC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000F9880(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018C870);
  sub_1000F99FC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000F98D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000F9908(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000F9954(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018C870);
  sub_1000F99FC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000F99A4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018C870);
  sub_1000F99FC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000F99FC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018C940;
  sub_1000F9A98(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000F9A98(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000F9C10((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000F9BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000F9BEC(uint64_t a1)
{
  sub_1000F99FC(a1);
  operator delete();
}

int *sub_1000F9C10(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 500;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 500;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000F9DF4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018CA90);
  sub_1000F9FE8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000F9E2C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018CA90);
  sub_1000F9FE8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000F9E6C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018CA90);
  sub_1000F9FE8(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000F9EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000F9EF4(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000F9F40(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018CA90);
  sub_1000F9FE8(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000F9F90(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018CA90);
  sub_1000F9FE8(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000F9FE8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018CB60;
  sub_1000FA084(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000FA084(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000FA1FC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000FA1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000FA1D8(uint64_t a1)
{
  sub_1000F9FE8(a1);
  operator delete();
}

int *sub_1000FA1FC(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 601;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 601;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000FA3E0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018CCB0);
  sub_1000FA5D4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000FA418(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018CCB0);
  sub_1000FA5D4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000FA458(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018CCB0);
  sub_1000FA5D4(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000FA4AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000FA4E0(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000FA52C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018CCB0);
  sub_1000FA5D4(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000FA57C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018CCB0);
  sub_1000FA5D4(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000FA5D4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018CD80;
  sub_1000FA670(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000FA670(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000FA7E8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000FA798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000FA7C4(uint64_t a1)
{
  sub_1000FA5D4(a1);
  operator delete();
}

int *sub_1000FA7E8(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 603;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 603;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000FA9CC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018CED0);
  sub_1000FABC0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000FAA04(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018CED0);
  sub_1000FABC0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000FAA44(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018CED0);
  sub_1000FABC0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000FAA98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000FAACC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000FAB18(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018CED0);
  sub_1000FABC0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000FAB68(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018CED0);
  sub_1000FABC0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000FABC0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018CFA0;
  sub_1000FAC5C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000FAC5C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000FADD4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000FAD84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000FADB0(uint64_t a1)
{
  sub_1000FABC0(a1);
  operator delete();
}

int *sub_1000FADD4(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 638;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 638;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000FAFB8(uint64_t a1, _QWORD *a2, const void **a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  const void *v9;

  v6 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 16) = 0;
  v9 = *a3;
  *(_QWORD *)(a1 + 16) = *a3;
  if (v9)
    CFRetain(v9);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = a4;
  return a1;
}

void sub_1000FB01C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100012168(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FB030(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(result + 24) = 1;
  }
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(result + 40) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 56) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = 0;
    *(_BYTE *)(result + 64) = 1;
  }
  *(_QWORD *)(result + 72) = *(_QWORD *)(a3 + 32);
  return result;
}

uint64_t sub_1000FB0AC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018D0F0);
  sub_1000FB2A0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000FB0E4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018D0F0);
  sub_1000FB2A0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000FB124(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018D0F0);
  sub_1000FB2A0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000FB178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000FB1AC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000FB1F8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018D0F0);
  sub_1000FB2A0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000FB248(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018D0F0);
  sub_1000FB2A0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000FB2A0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018D1C0;
  sub_1000FB33C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000FB33C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000FB4B4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000FB464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000FB490(uint64_t a1)
{
  sub_1000FB2A0(a1);
  operator delete();
}

int *sub_1000FB4B4(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 898;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 898;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void sub_1000FB698(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  std::string::size_type v7;

  v4 = sub_100005634(a1);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v6 = (_QWORD *)*v6;
    v7 = v4 - (_QWORD)v6;
  }
  else
  {
    v7 = 0;
  }
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 64);
  a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::string::resize(a2, v7 + v5, 0);
  std::string::erase(a2, 0, v7);
  sub_100005760(a1);
}

void sub_1000FB724(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_1000FB740(_DWORD *result, int a2)
{
  uint64_t v2;
  int v3;
  _QWORD *exception;
  uint64_t v5;
  int v6;

  v2 = 0;
  *result = a2;
  v5 = 0x200000001;
  v6 = 4;
  do
  {
    a2 &= ~*(_DWORD *)((char *)&v5 + v2);
    v2 += 4;
  }
  while (v2 != 12);
  if (a2)
  {
    v3 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    *exception = &off_100175450;
    exception[1] = "header_flags";
    *((_DWORD *)exception + 8) = v3;
  }
  return result;
}

_DWORD *sub_1000FB810(_DWORD *a1)
{
  _OWORD v3[2];
  uint64_t v4;
  int v5;

  *a1 = 0;
  v3[0] = xmmword_100148D50;
  v3[1] = xmmword_100148D60;
  v4 = 0x900000008;
  v5 = 10;
  sub_100083628((uint64_t)"checksum_type", 0, v3, 11);
  return a1;
}

uint64_t sub_1000FB8A8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018C240;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000FB910(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000FB924(_QWORD *a1, int *a2)
{
  int v3;
  uint64_t i;
  int v5;
  char v7;

  v3 = *a2;
  if (!*a2)
    return sub_100005A0C(a1, (uint64_t)"none", 4);
  for (i = 0; i != 18; i += 6)
  {
    v5 = dword_10018D230[i];
    if ((v5 & v3) != 0)
    {
      v3 &= ~v5;
      sub_100005A0C(a1, *(_QWORD *)&dword_10018D230[i + 2], *(_QWORD *)&dword_10018D230[i + 4]);
      if (v3)
      {
        v7 = 44;
        sub_100005A0C(a1, (uint64_t)&v7, 1);
      }
    }
  }
  return a1;
}

_QWORD *sub_1000FB9E0(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;

  v2 = 0;
  while (dword_10018D278[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 12)
    {
      v3 = "no_match";
      v4 = 8;
      return sub_100005A0C(a1, (uint64_t)v3, v4);
    }
  }
  v5 = &dword_10018D278[v2];
  v3 = (const char *)*((_QWORD *)v5 + 1);
  v4 = *((_QWORD *)v5 + 2);
  return sub_100005A0C(a1, (uint64_t)v3, v4);
}

_QWORD *sub_1000FBA24(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;

  v2 = 0;
  while (dword_10018D2A8[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 12)
    {
      v3 = "no_match";
      v4 = 8;
      return sub_100005A0C(a1, (uint64_t)v3, v4);
    }
  }
  v5 = &dword_10018D2A8[v2];
  v3 = (const char *)*((_QWORD *)v5 + 1);
  v4 = *((_QWORD *)v5 + 2);
  return sub_100005A0C(a1, (uint64_t)v3, v4);
}

_QWORD *sub_1000FBA68(_QWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  char v17;
  char v18;

  v5 = a1 + 1;
  v6 = *(_QWORD *)(*a1 - 24);
  v7 = *(_DWORD *)((char *)a1 + v6 + 8);
  v8 = a3 - 1;
  if (a3 == 1)
  {
    v14 = *(_DWORD *)((char *)a1 + v6 + 8);
  }
  else
  {
    v9 = a2;
    v10 = a3 - 1;
    do
    {
      *(_DWORD *)((char *)v5 + *(_QWORD *)(*a1 - 24)) = *(_DWORD *)((_BYTE *)v5 + *(_QWORD *)(*a1 - 24)) & 0xFFFFFFB5 | 8;
      v18 = 48;
      v11 = sub_100017554(a1, &v18);
      *(_QWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 24) = 2;
      v12 = *v9++;
      v13 = (_QWORD *)std::ostream::operator<<(v11, v12);
      sub_100005A0C(v13, (uint64_t)" ", 1);
      --v10;
    }
    while (v10);
    v6 = *(_QWORD *)(*a1 - 24);
    v14 = *(_DWORD *)((char *)a1 + v6 + 8);
  }
  *(_DWORD *)((char *)a1 + v6 + 8) = v14 & 0xFFFFFFB5 | 8;
  v17 = 48;
  v15 = sub_100017554(a1, &v17);
  *(_QWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 24) = 2;
  std::ostream::operator<<(v15, a2[v8]);
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v7;
  return a1;
}

_QWORD *sub_1000FBBB4(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;

  v2 = 0;
  while (dword_10018D2D8[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 18)
    {
      v3 = "no_match";
      v4 = 8;
      return sub_100005A0C(a1, (uint64_t)v3, v4);
    }
  }
  v5 = &dword_10018D2D8[v2];
  v3 = (const char *)*((_QWORD *)v5 + 1);
  v4 = *((_QWORD *)v5 + 2);
  return sub_100005A0C(a1, (uint64_t)v3, v4);
}

uint64_t sub_1000FBBF8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      sub_1000FBC74((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_1000FBC5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100027D5C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1000FBC74(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_1000FBCF8(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_1000284A8(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_1000FBCF8(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t **sub_1000FBEA0(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    sub_1000284A8(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_1000FBF60(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018C500;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000FBFC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FBFDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t *v9;
  unint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  v3 = v4;
  if (!v4)
    return v2;
  v5 = (*(_BYTE *)(a2 + 16) & 2) != 0 ? *(_QWORD *)a2 : *(_QWORD *)a2 + 1;
  v6 = v2;
  do
  {
    v7 = (*(_BYTE *)(v3 + 48) & 1) + *(_QWORD *)(v3 + 40) - 1;
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = (uint64_t *)v3;
    else
      v9 = (uint64_t *)(v3 + 8);
    if (v8)
      v6 = v3;
    v3 = *v9;
  }
  while (*v9);
  if (v6 == v2)
    return v2;
  v10 = *(_QWORD *)(v6 + 32);
  if ((*(_BYTE *)(v6 + 48) & 2) == 0)
    ++v10;
  if ((unint64_t)(*(_BYTE *)(a2 + 16) & 1) + *(_QWORD *)(a2 + 8) - 1 < v10)
    return v2;
  return v6;
}

uint64_t *sub_1000FC060(uint64_t **a1, uint64_t a2)
{
  uint64_t *v5;
  uint64_t *result;
  char v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;

  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if ((_BYTE)v15)
  {
    if (v15 == 3)
    {
      if (*((_QWORD *)&v14 + 1) < (unint64_t)v14)
        return (uint64_t *)(a1 + 1);
    }
    else if ((unint64_t)v14 >= *((_QWORD *)&v14 + 1))
    {
      return (uint64_t *)(a1 + 1);
    }
  }
  else if ((unint64_t)v14 >= *((_QWORD *)&v14 + 1) || (unint64_t)(v14 + 1) >= *((_QWORD *)&v14 + 1))
  {
    return (uint64_t *)(a1 + 1);
  }
  v5 = (uint64_t *)(a2 + 24);
  if (sub_1000FC17C(a2 + 24))
    return (uint64_t *)(a1 + 1);
  result = sub_1000FC610(a1, a2, a2);
  if ((v7 & 1) == 0)
  {
    v8 = (uint64_t *)sub_1000B3144((uint64_t)a1, (uint64_t)&v14);
    v9 = (uint64_t **)sub_1000B2E1C((uint64_t)a1, (uint64_t)&v14);
    v10 = *v9;
    if (*v9)
    {
      do
      {
        v11 = v10;
        v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = v9[2];
        v12 = *v11 == (_QWORD)v9;
        v9 = (uint64_t **)v11;
      }
      while (v12);
    }
    v13 = v11;
    v16 = v8;
    sub_1000FC23C(a1, &v14, v5, &v16, &v13);
    return v16;
  }
  return result;
}

BOOL sub_1000FC17C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;

  LOBYTE(v2) = 0;
  v12 = 0;
  if (byte_1001A0804)
  {
    v2 = qword_1001A0778;
    v3 = dword_1001A0780;
    v8 = unk_1001A07C4;
    v9 = unk_1001A07D4;
    v10 = unk_1001A07E4;
    v11 = unk_1001A07F4;
    v4 = *(_OWORD *)algn_1001A0784;
    v5 = unk_1001A0794;
    v6 = unk_1001A07A4;
    v7 = unk_1001A07B4;
    v12 = 1;
  }
  return sub_1000FC5BC(a1, (uint64_t)&v2);
}

uint64_t sub_1000FC23C(uint64_t **a1, __int128 *a2, uint64_t *a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t result;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;

  v8 = *a5;
  v9 = (uint64_t *)(*a5)[1];
  if (v9)
  {
    do
    {
      v10 = v9;
      v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  else
  {
    v11 = *a5;
    do
    {
      v10 = (uint64_t *)v11[2];
      v12 = *v10 == (_QWORD)v11;
      v11 = v10;
    }
    while (!v12);
  }
  v13 = *a4;
  if (*a1 == *a4)
  {
    v15 = (uint64_t *)(a1 + 1);
  }
  else
  {
    v14 = (uint64_t *)*v13;
    if (*v13)
    {
      do
      {
        v15 = v14;
        v14 = (uint64_t *)v14[1];
      }
      while (v14);
    }
    else
    {
      v16 = *a4;
      do
      {
        v15 = (uint64_t *)v16[2];
        v12 = *v15 == (_QWORD)v16;
        v16 = v15;
      }
      while (v12);
    }
  }
  v39 = *a2;
  v40 = *((_QWORD *)a2 + 2);
  *(_QWORD *)&v37 = qword_1001A05E0;
  *((_QWORD *)&v37 + 1) = qword_1001A05E0;
  v38 = 2;
  v35 = *((_OWORD *)v8 + 2);
  v36 = v8[6];
  if (v13 != v10)
  {
    v17 = (__int128 *)((char *)a3 + 12);
    do
    {
      v37 = *((_OWORD *)v13 + 2);
      v38 = *((_BYTE *)v13 + 48);
      v33 = v39;
      v34 = v40;
      sub_1000B2F9C((unint64_t *)&v33, (uint64_t)&v37, (uint64_t)&v41);
      if ((_BYTE)v42)
      {
        if (v42 == 3)
        {
          if (*((_QWORD *)&v41 + 1) >= (unint64_t)v41)
            goto LABEL_24;
        }
        else if ((unint64_t)v41 < *((_QWORD *)&v41 + 1))
        {
          goto LABEL_24;
        }
      }
      else if ((unint64_t)v41 < *((_QWORD *)&v41 + 1) && (unint64_t)(v41 + 1) < *((_QWORD *)&v41 + 1))
      {
LABEL_24:
        LOBYTE(v43) = 0;
        v53 = 0;
        if (*((_BYTE *)a3 + 140))
        {
          v43 = *a3;
          v44 = *((_DWORD *)a3 + 2);
          v18 = *(_OWORD *)((char *)a3 + 92);
          v49 = *(_OWORD *)((char *)a3 + 76);
          v50 = v18;
          v19 = *(_OWORD *)((char *)a3 + 124);
          v51 = *(_OWORD *)((char *)a3 + 108);
          v52 = v19;
          v20 = *(_OWORD *)((char *)a3 + 28);
          v45 = *v17;
          v46 = v20;
          v21 = *(_OWORD *)((char *)a3 + 60);
          v47 = *(_OWORD *)((char *)a3 + 44);
          v48 = v21;
          v53 = 1;
        }
        *a4 = sub_1000FC744(a1, v15, (uint64_t)&v41, (uint64_t)&v41);
      }
      v31 = v39;
      v32 = v40;
      sub_1000B3070((uint64_t)&v31, (uint64_t)&v37, (uint64_t)&v41);
      v39 = v41;
      LOBYTE(v40) = v42;
      v15 = *a4;
      v22 = (uint64_t *)(*a4)[1];
      v23 = *a4;
      if (v22)
      {
        do
        {
          v13 = v22;
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)v23[2];
          v12 = *v13 == (_QWORD)v23;
          v23 = v13;
        }
        while (!v12);
      }
      *a4 = v13;
    }
    while (v13 != v10);
  }
  v27 = v39;
  v28 = v40;
  result = sub_1000B3070((uint64_t)&v27, (uint64_t)&v35, (uint64_t)&v29);
  if (!(_BYTE)v30)
  {
    v25 = *((_QWORD *)&v29 + 1);
    if ((unint64_t)v29 >= *((_QWORD *)&v29 + 1))
      goto LABEL_44;
    v26 = v29 + 1;
    goto LABEL_40;
  }
  if (v30 != 3)
  {
    v25 = *((_QWORD *)&v29 + 1);
    v26 = v29;
LABEL_40:
    if (v26 >= v25)
      goto LABEL_44;
    goto LABEL_41;
  }
  if (*((_QWORD *)&v29 + 1) < (unint64_t)v29)
    goto LABEL_44;
LABEL_41:
  v41 = v29;
  v42 = v30;
  LOBYTE(v43) = 0;
  v53 = 0;
  if (*((_BYTE *)a3 + 140))
  {
    v43 = *a3;
    v44 = *((_DWORD *)a3 + 2);
    v49 = *(_OWORD *)((char *)a3 + 76);
    v50 = *(_OWORD *)((char *)a3 + 92);
    v51 = *(_OWORD *)((char *)a3 + 108);
    v52 = *(_OWORD *)((char *)a3 + 124);
    v45 = *(_OWORD *)((char *)a3 + 12);
    v46 = *(_OWORD *)((char *)a3 + 28);
    v47 = *(_OWORD *)((char *)a3 + 44);
    v48 = *(_OWORD *)((char *)a3 + 60);
    v53 = 1;
  }
  result = (uint64_t)sub_1000FC744(a1, v15, (uint64_t)&v41, (uint64_t)&v41);
  v15 = (uint64_t *)result;
LABEL_44:
  *a4 = v15;
  return result;
}

BOOL sub_1000FC5BC(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_BYTE *)(a1 + 140))
    v2 = *(_BYTE *)(a2 + 140) == 0;
  else
    v2 = 1;
  if (v2)
    return (*(_BYTE *)(a1 + 140) != 0) == (*(_BYTE *)(a2 + 140) != 0);
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
    return sub_10004BC14((_DWORD *)(a1 + 4), (_DWORD *)(a2 + 4));
  return 0;
}

uint64_t *sub_1000FC610(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)sub_1000284FC((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    sub_1000FC68C((uint64_t)a1, a3, (uint64_t)&v7);
    sub_1000284A8(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_OWORD *sub_1000FC68C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *result;

  v5 = a1 + 8;
  result = operator new(0xC8uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  result[2] = *(_OWORD *)a2;
  *((_QWORD *)result + 6) = *(_QWORD *)(a2 + 16);
  *((_BYTE *)result + 56) = 0;
  *((_BYTE *)result + 196) = 0;
  if (*(_BYTE *)(a2 + 164))
  {
    *((_QWORD *)result + 7) = *(_QWORD *)(a2 + 24);
    *((_DWORD *)result + 16) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)((char *)result + 132) = *(_OWORD *)(a2 + 100);
    *(_OWORD *)((char *)result + 148) = *(_OWORD *)(a2 + 116);
    *(_OWORD *)((char *)result + 164) = *(_OWORD *)(a2 + 132);
    *(_OWORD *)((char *)result + 180) = *(_OWORD *)(a2 + 148);
    *(_OWORD *)((char *)result + 68) = *(_OWORD *)(a2 + 36);
    *(_OWORD *)((char *)result + 84) = *(_OWORD *)(a2 + 52);
    *(_OWORD *)((char *)result + 100) = *(_OWORD *)(a2 + 68);
    *(_OWORD *)((char *)result + 116) = *(_OWORD *)(a2 + 84);
    *((_BYTE *)result + 196) = 1;
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *sub_1000FC744(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_100028330(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_1000FC68C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000284A8(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t sub_1000FC7C4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018C720;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000FC82C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_1000FC840(uint64_t **a1, uint64_t a2)
{
  int *v5;
  uint64_t *v7;
  char v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;

  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if ((_BYTE)v15)
  {
    if (v15 == 3)
    {
      if (*((_QWORD *)&v14 + 1) < (unint64_t)v14)
        return a1 + 1;
    }
    else if ((unint64_t)v14 >= *((_QWORD *)&v14 + 1))
    {
      return a1 + 1;
    }
  }
  else if ((unint64_t)v14 >= *((_QWORD *)&v14 + 1) || (unint64_t)(v14 + 1) >= *((_QWORD *)&v14 + 1))
  {
    return a1 + 1;
  }
  v5 = (int *)(a2 + 24);
  if (sub_1000FC978(a2 + 24))
    return a1 + 1;
  v7 = (uint64_t *)sub_1000FCD28(a1, a2, a2);
  if ((v8 & 1) != 0)
  {
    v17 = v7;
    sub_1000FCDC0(a1, &v17);
    return sub_1000FCEEC(a1, (uint64_t ***)&v17);
  }
  else
  {
    v9 = (uint64_t *)sub_1000B3144((uint64_t)a1, (uint64_t)&v14);
    v10 = (uint64_t **)sub_1000B2E1C((uint64_t)a1, (uint64_t)&v14);
    v11 = *v10;
    if (*v10)
    {
      do
      {
        v12 = v11;
        v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      do
      {
        v12 = v10[2];
        v13 = *v12 == (_QWORD)v10;
        v10 = (uint64_t **)v12;
      }
      while (v13);
    }
    v16 = v9;
    v17 = v12;
    sub_1000FCA38(a1, &v14, v5, &v16, &v17);
    return (uint64_t **)v16;
  }
}

BOOL sub_1000FC978(uint64_t a1)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_1001A0820);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1001A0820))
  {
    sub_1000F8B90(&dword_1001A0808, 2);
    qword_1001A0810 = 0;
    qword_1001A0818 = 0;
    __cxa_guard_release(&qword_1001A0820);
  }
  return *(_DWORD *)a1 == dword_1001A0808
      && *(_QWORD *)(a1 + 8) == qword_1001A0810
      && *(_QWORD *)(a1 + 16) == qword_1001A0818;
}

void sub_1000FCA20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1001A0820);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FCA38(uint64_t **a1, __int128 *a2, int *a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  __int128 *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  __int128 v39;
  uint64_t v40;

  v8 = *a5;
  v9 = (uint64_t *)(*a5)[1];
  if (v9)
  {
    do
    {
      v10 = v9;
      v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  else
  {
    v11 = *a5;
    do
    {
      v10 = (uint64_t *)v11[2];
      v12 = *v10 == (_QWORD)v11;
      v11 = v10;
    }
    while (!v12);
  }
  v13 = *a4;
  if (*a1 == *a4)
  {
    v15 = (uint64_t *)(a1 + 1);
  }
  else
  {
    v14 = (uint64_t *)*v13;
    if (*v13)
    {
      do
      {
        v15 = v14;
        v14 = (uint64_t *)v14[1];
      }
      while (v14);
    }
    else
    {
      v16 = *a4;
      do
      {
        v15 = (uint64_t *)v16[2];
        v12 = *v15 == (_QWORD)v16;
        v16 = v15;
      }
      while (v12);
    }
  }
  v39 = *a2;
  v40 = *((_QWORD *)a2 + 2);
  *(_QWORD *)&v37 = qword_1001A05E0;
  *((_QWORD *)&v37 + 1) = qword_1001A05E0;
  v38 = 2;
  v35 = *((_OWORD *)v8 + 2);
  v36 = v8[6];
  if (v13 != v10)
  {
    v17 = (__int128 *)(a3 + 2);
    while (1)
    {
      v37 = *((_OWORD *)v13 + 2);
      v38 = *((_BYTE *)v13 + 48);
      v33 = v39;
      v34 = v40;
      sub_1000B2F9C((unint64_t *)&v33, (uint64_t)&v37, (uint64_t)&v29);
      if ((_BYTE)v30)
        break;
      if ((unint64_t)v29 < *((_QWORD *)&v29 + 1) && (unint64_t)(v29 + 1) < *((_QWORD *)&v29 + 1))
        goto LABEL_22;
LABEL_23:
      v27 = v39;
      v28 = v40;
      sub_1000B3070((uint64_t)&v27, (uint64_t)&v37, (uint64_t)&v29);
      v39 = v29;
      LOBYTE(v40) = v30;
      v15 = *a4;
      v18 = (uint64_t *)(*a4)[1];
      v19 = *a4;
      if (v18)
      {
        do
        {
          v13 = v18;
          v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)v19[2];
          v12 = *v13 == (_QWORD)v19;
          v19 = v13;
        }
        while (!v12);
      }
      *a4 = v13;
      if (v13 == v10)
        goto LABEL_32;
    }
    if (v30 == 3)
    {
      if (*((_QWORD *)&v29 + 1) < (unint64_t)v29)
        goto LABEL_23;
    }
    else if ((unint64_t)v29 >= *((_QWORD *)&v29 + 1))
    {
      goto LABEL_23;
    }
LABEL_22:
    v31 = *a3;
    v32 = *v17;
    *(_QWORD *)&v29 = sub_100028294(a1, v15, (uint64_t)&v29, (uint64_t)&v29);
    sub_1000FCDC0(a1, (uint64_t **)&v29);
    *a4 = (uint64_t *)sub_1000FCEEC(a1, (uint64_t ***)&v29);
    goto LABEL_23;
  }
LABEL_32:
  v23 = v39;
  v24 = v40;
  result = sub_1000B3070((uint64_t)&v23, (uint64_t)&v35, (uint64_t)&v25);
  if ((_BYTE)v26)
  {
    if (v26 == 3)
    {
      if (*((_QWORD *)&v25 + 1) < (unint64_t)v25)
        goto LABEL_41;
      goto LABEL_40;
    }
    v21 = *((_QWORD *)&v25 + 1);
    v22 = v25;
  }
  else
  {
    v21 = *((_QWORD *)&v25 + 1);
    if ((unint64_t)v25 >= *((_QWORD *)&v25 + 1))
      goto LABEL_41;
    v22 = v25 + 1;
  }
  if (v22 < v21)
  {
LABEL_40:
    v29 = v25;
    v30 = v26;
    v31 = *a3;
    v32 = *(_OWORD *)(a3 + 2);
    *(_QWORD *)&v29 = sub_100028294(a1, v15, (uint64_t)&v29, (uint64_t)&v29);
    sub_1000FCDC0(a1, (uint64_t **)&v29);
    result = (uint64_t)sub_1000FCEEC(a1, (uint64_t ***)&v29);
    v15 = (uint64_t *)result;
  }
LABEL_41:
  *a4 = v15;
  return result;
}

_OWORD *sub_1000FCD28(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_1000284FC((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    v6[4] = *(_OWORD *)(a3 + 32);
    sub_1000284A8(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *sub_1000FCDC0(uint64_t **a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  __int128 v14;
  uint64_t v15;

  v2 = *a2;
  if (*a2 == *a1)
    return *a1;
  v4 = *v2;
  if (*v2)
  {
    do
    {
      v5 = v4;
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
  }
  else
  {
    v6 = (uint64_t)*a2;
    do
    {
      v5 = *(_QWORD *)(v6 + 16);
      v7 = *(_QWORD *)v5 == v6;
      v6 = v5;
    }
    while (v7);
  }
  v8 = v2[4];
  if ((v2[6] & 2) == 0)
    ++v8;
  if (v8 == (*(_BYTE *)(v5 + 48) & 1) + *(_QWORD *)(v5 + 40)
    && *(_DWORD *)(v5 + 56) == *((_DWORD *)v2 + 14)
    && *(_QWORD *)(v5 + 64) == v2[8]
    && *(_QWORD *)(v5 + 72) == v2[9])
  {
    v14 = *((_OWORD *)v2 + 2);
    v15 = v2[6];
    sub_100040DA8(a1, v2);
    operator delete(v2);
    v10 = *(_OWORD *)(v5 + 32);
    v11 = *(_QWORD *)(v5 + 48);
    sub_1000B2D28((unint64_t *)&v10, (unint64_t *)&v14, (uint64_t)&v12);
    *(_OWORD *)(v5 + 32) = v12;
    *(_BYTE *)(v5 + 48) = v13;
    *a2 = (uint64_t *)v5;
    return (uint64_t *)v5;
  }
  return v2;
}

uint64_t **sub_1000FCEEC(uint64_t **a1, uint64_t ***a2)
{
  uint64_t **v3;
  uint64_t **result;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  __int128 v13;
  uint64_t *v14;
  __int128 v15;
  char v16;
  __int128 v17;
  uint64_t *v18;

  v3 = a1 + 1;
  result = *a2;
  if (*a2 == v3)
    return v3;
  v6 = result[1];
  if (v6)
  {
    do
    {
      v7 = (uint64_t **)v6;
      v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  else
  {
    v8 = *a2;
    do
    {
      v7 = (uint64_t **)v8[2];
      v9 = *v7 == (uint64_t *)v8;
      v8 = v7;
    }
    while (!v9);
  }
  if (v7 != v3)
  {
    v10 = v7[4];
    if (((_BYTE)v7[6] & 2) == 0)
      v10 = (uint64_t *)((char *)v10 + 1);
    if (v10 == (uint64_t *)((char *)result[5] + ((_BYTE)result[6] & 1))
      && *((_DWORD *)result + 14) == *((_DWORD *)v7 + 14)
      && result[8] == v7[8]
      && result[9] == v7[9])
    {
      v17 = *((_OWORD *)v7 + 2);
      v18 = v7[6];
      sub_100040DA8(a1, (uint64_t *)v7);
      operator delete(v7);
      v11 = *a2;
      v13 = *((_OWORD *)*a2 + 2);
      v14 = v11[6];
      sub_1000B2D28((unint64_t *)&v13, (unint64_t *)&v17, (uint64_t)&v15);
      v12 = *a2;
      *((_OWORD *)v12 + 2) = v15;
      *((_BYTE *)v12 + 48) = v16;
      return *a2;
    }
  }
  return result;
}

uint64_t sub_1000FD020(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018C940;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000FD088(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FD09C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      sub_1000FD11C((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_1000FD104(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100027D5C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_1000FD11C(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1000FD1B8(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a4 + 24);
    v7[4] = *(_OWORD *)(a4 + 32);
    sub_1000284A8(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_1000FD1B8(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, unint64_t *a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_10009DF24(a5, a2 + 4))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (sub_10009DF24(v12 + 4, a5))
      goto LABEL_16;
    return sub_10009DE94((uint64_t)a1, a3, a5);
  }
  if (sub_10009DF24(a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_10009DF24(a5, v15 + 4))
        return sub_10009DE94((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

void sub_1000FD33C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v10 = *a1;
  v11 = sub_1000FD3D8((uint64_t)a1, a3);
  if (v11 >> 57)
    sub_1000158AC("get_next_capacity, allocator's max size reached");
  v12 = v11;
  v13 = operator new(v11 << 6);
  sub_1000FD44C(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t sub_1000FD3D8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = 0x1FFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0x1FFFFFFFFFFFFFFLL - v4 < a2 - v4 + v3)
    sub_1000158AC("get_next_capacity, allocator's max size reached");
  v5 = v4 >> 61;
  v6 = 8 * v4;
  if (v5 > 4)
    v7 = -1;
  else
    v7 = v6;
  v8 = v6 / 5;
  if (v5)
    v8 = v7;
  v9 = v3 + a2;
  if (v8 < 0x1FFFFFFFFFFFFFFLL)
    v2 = v8;
  if (v9 <= v2)
    return v2;
  else
    return v9;
}

void sub_1000FD44C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;

  v10 = (_QWORD *)*a1;
  v11 = *a1 + (a1[1] << 6);
  v12 = a2;
  if (*a1 != a4)
  {
    v13 = (_QWORD *)*a1;
    v12 = a2;
    do
    {
      *(_DWORD *)v12 = *(_DWORD *)v13;
      v14 = *(_OWORD *)(v13 + 1);
      v15 = *(_OWORD *)(v13 + 3);
      v16 = *(_OWORD *)(v13 + 5);
      *(_QWORD *)(v12 + 56) = v13[7];
      *(_OWORD *)(v12 + 40) = v16;
      *(_OWORD *)(v12 + 24) = v15;
      *(_OWORD *)(v12 + 8) = v14;
      v12 += 64;
      v13 += 8;
    }
    while (v13 != (_QWORD *)a4);
  }
  *(_DWORD *)v12 = *(_DWORD *)a6;
  v17 = *(_OWORD *)(a6 + 8);
  v18 = *(_OWORD *)(a6 + 24);
  v19 = *(_OWORD *)(a6 + 40);
  *(_QWORD *)(v12 + 56) = *(_QWORD *)(a6 + 56);
  *(_OWORD *)(v12 + 40) = v19;
  *(_OWORD *)(v12 + 24) = v18;
  *(_OWORD *)(v12 + 8) = v17;
  if (v11 != a4)
  {
    v20 = v12 + (a5 << 6);
    do
    {
      *(_DWORD *)v20 = *(_DWORD *)a4;
      v21 = *(_OWORD *)(a4 + 8);
      v22 = *(_OWORD *)(a4 + 24);
      v23 = *(_OWORD *)(a4 + 40);
      *(_QWORD *)(v20 + 56) = *(_QWORD *)(a4 + 56);
      *(_OWORD *)(v20 + 40) = v23;
      *(_OWORD *)(v20 + 24) = v22;
      *(_OWORD *)(v20 + 8) = v21;
      a4 += 64;
      v20 += 64;
    }
    while (a4 != v11);
  }
  if (v10)
  {
    v24 = (_QWORD *)*a1;
    if (a1 + 3 != (_QWORD *)*a1)
      operator delete(v24);
  }
  v25 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v25;
  a1[2] = a3;
}

uint64_t sub_1000FD564(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018CB60;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000FD5CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FD5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a1;
  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2 == -1)
    sub_100018028();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_10018D320[v2])(&v5, a2 + 4);
}

_QWORD *sub_1000FD62C(_QWORD ***a1)
{
  return sub_1000FD644(**a1);
}

_QWORD *sub_1000FD638(_QWORD ***a1, int *a2)
{
  return sub_1000FD680(**a1, a2);
}

_QWORD *sub_1000FD644(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = sub_100005A0C(a1, (uint64_t)"none {", 6);
  v2 = sub_100005A0C(v1, (uint64_t)"[empty]", 7);
  return sub_100005A0C(v2, (uint64_t)"}", 1);
}

_QWORD *sub_1000FD680(_QWORD *a1, int *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  int v6;

  v3 = sub_100005A0C(a1, (uint64_t)"crc32 {", 7);
  v6 = *a2;
  v4 = sub_1000FBA68(v3, (unsigned __int8 *)&v6, 4);
  return sub_100005A0C(v4, (uint64_t)"}", 1);
}

uint64_t sub_1000FD6D4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018CD80;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000FD73C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FD750(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018CFA0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000FD7B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_1000FD7CC(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000FD820(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    operator delete[]();
  __cxa_rethrow();
}

void sub_1000FD848(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000FD860(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000FD884(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    operator delete[]();
  return result;
}

uint64_t sub_1000FD8A4(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

_DWORD *sub_1000FD8E4(_DWORD *a1)
{
  _OWORD v3[3];
  unint64_t v4;
  int v5;

  *a1 = 0;
  v3[0] = xmmword_100148D70;
  v3[1] = xmmword_100148D80;
  v3[2] = xmmword_100148D90;
  v4 = 0x8000000880000007;
  v5 = -1;
  sub_100083628((uint64_t)"run_type", 0, v3, 15);
  return a1;
}

uint64_t sub_1000FD988(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018D1C0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000FD9F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_1000FDA04(const __CFString *a1)
{
  CFIndex Length;

  Length = CFStringGetLength(a1);
  CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  operator new[]();
}

void sub_1000FDAF4()
{
  operator delete[]();
}

uint64_t sub_1000FDB18(const __CFString *a1)
{
  unint64_t Length;
  void *exception;
  const char *v5;
  void *v6;
  UInt8 buffer[4];
  CFRange v8;

  if (!a1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v5 = "Invalid resource key";
    goto LABEL_8;
  }
  Length = CFStringGetLength(a1);
  if (Length >= 5)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v5 = "Resource name is too long to fit uint32_t";
    goto LABEL_8;
  }
  v8.length = Length;
  *(_DWORD *)buffer = 0;
  v8.location = 0;
  if (CFStringGetBytes(a1, v8, 0, 0, 0, buffer, 4, 0) != 4)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v5 = "Can't get key in cstring format";
LABEL_8:
    v6 = (void *)sub_100005410((uint64_t)exception, (uint64_t)v5, 0x16u);
  }
  return bswap32(*(unsigned int *)buffer);
}

BOOL sub_1000FDBE0(__CFArray *a1, uint64_t a2)
{
  CFNumberRef v3;
  CFNumberRef v5;
  uint64_t valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  v5 = v3;
  if (v3)
    CFArrayAppendValue(a1, v3);
  sub_1000C0040((const void **)&v5);
  return v3 != 0;
}

void sub_1000FDC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_1000C0040(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1000FDC60(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFNumberRef v5;
  CFNumberRef v7;
  uint64_t valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  v7 = v5;
  if (v5)
    CFDictionarySetValue(a1, a2, v5);
  sub_1000C0040((const void **)&v7);
  return v5 != 0;
}

void sub_1000FDCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_1000C0040(&a9);
  _Unwind_Resume(a1);
}

__CFDictionary *sub_1000FDCF0@<X0>(const void **keys@<X0>, const void **values@<X1>, CFIndex numValues@<X2>, CFMutableDictionaryRef *a4@<X8>)
{
  __CFDictionary *result;
  CFMutableDictionaryRef Mutable;
  const void *v7;

  if (keys && values && numValues)
  {
    result = CFDictionaryCreate(kCFAllocatorDefault, keys, values, numValues, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    Mutable = result;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v7 = 0;
    result = (__CFDictionary *)sub_100028068(&v7);
  }
  *a4 = Mutable;
  return result;
}

CFMutableDictionaryRef sub_1000FDD8C@<X0>(CFMutableDictionaryRef *a1@<X8>)
{
  CFMutableDictionaryRef result;

  result = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *a1 = result;
  return result;
}

const void **sub_1000FDDD0@<X0>(CFPropertyListRef propertyList@<X0>, const __CFData **a2@<X8>)
{
  const __CFData *v3;
  const __CFData *v4;
  BOOL v5;
  CFIndex Length;
  CFTypeID TypeID;
  _QWORD *exception;
  const std::error_category *v10;
  _QWORD *v11;
  CFTypeID v12;
  _QWORD *v13;
  const void *v14;
  CFErrorRef error;

  error = 0;
  v3 = CFPropertyListCreateData(kCFAllocatorDefault, propertyList, kCFPropertyListXMLFormat_v1_0, 0, &error);
  v4 = v3;
  if (v3)
    v5 = error == 0;
  else
    v5 = 0;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_1001924F8;
    v10 = std::generic_category();
    exception[1] = 22;
    exception[2] = v10;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Can't serialize property list";
  }
  Length = CFDataGetLength(v3);
  TypeID = CFDataGetTypeID();
  if (CFGetTypeID(v4) != TypeID)
  {
    v11 = __cxa_allocate_exception(0x40uLL);
    v12 = CFGetTypeID(v4);
    v13 = sub_100027DA0(v11, v12, TypeID);
  }
  v14 = 0;
  *a2 = v4;
  a2[1] = (const __CFData *)Length;
  sub_100074B5C(&v14);
  return sub_100074F80((const void **)&error);
}

void sub_1000FDF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  sub_100074F80(&a10);
  _Unwind_Resume(a1);
}

const void **sub_1000FDF2C@<X0>(UInt8 *bytes@<X0>, CFIndex length@<X1>, _QWORD *a3@<X8>)
{
  CFDataRef v4;
  BOOL v5;
  CFPropertyListRef v6;
  BOOL v7;
  CFTypeID TypeID;
  _QWORD *exception;
  const std::error_category *v11;
  _QWORD *v12;
  unsigned int Code;
  const std::error_category *v14;
  _QWORD *v15;
  CFTypeID v16;
  _QWORD *v17;
  CFPropertyListFormat format;
  CFDataRef v19;
  CFErrorRef error;

  error = 0;
  v4 = CFDataCreate(kCFAllocatorDefault, bytes, length);
  v19 = v4;
  if (v4)
    v5 = error == 0;
  else
    v5 = 0;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_1001924F8;
    v11 = std::generic_category();
    exception[1] = 12;
    exception[2] = v11;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Can't create data for plist deserialization";
  }
  format = kCFPropertyListXMLFormat_v1_0;
  v6 = CFPropertyListCreateWithData(kCFAllocatorDefault, v4, 0, &format, &error);
  if (v6)
    v7 = error == 0;
  else
    v7 = 0;
  if (!v7)
  {
    v12 = __cxa_allocate_exception(0x40uLL);
    Code = CFErrorGetCode(error);
    *v12 = &off_1001924F8;
    v14 = std::generic_category();
    v12[1] = Code;
    v12[2] = v14;
    *((_BYTE *)v12 + 24) = 0;
    *((_BYTE *)v12 + 48) = 0;
    v12[7] = "Can't convert data to property list";
  }
  TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(v6) != TypeID)
  {
    v15 = __cxa_allocate_exception(0x40uLL);
    v16 = CFGetTypeID(v6);
    v17 = sub_100027DA0(v15, v16, TypeID);
  }
  *a3 = v6;
  sub_100074B5C((const void **)&v19);
  return sub_100074F80((const void **)&error);
}

void sub_1000FE0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12)
{
  void *v12;

  __cxa_free_exception(v12);
  sub_100074B5C(&a11);
  sub_100074F80(&a12);
  _Unwind_Resume(a1);
}

char *sub_1000FE124@<X0>(const __CFData *a1@<X0>, unsigned int a2@<W1>, size_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t Length;
  unint64_t v9;
  const UInt8 *BytePtr;
  void *exception;
  void *v13;

  Length = CFDataGetLength(a1);
  if (!a3)
    a3 = Length;
  v9 = a3 + a2;
  if (__CFADD__(a3, a2) || Length < v9)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v13 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Unable to convert data to vector.", 0x16u);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  BytePtr = CFDataGetBytePtr(a1);
  sub_1000FE200(a4, a3);
  return sub_1000FE3F4((uint64_t)a4, (char *)*a4, (char *)&BytePtr[a2], (char *)&BytePtr[v9], a3);
}

void sub_1000FE1E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FE200(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      sub_100017E44();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

BOOL sub_1000FE2A8(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  const char *v5;
  CFStringRef v6;
  CFStringRef v8;

  if (*(char *)(a3 + 23) >= 0)
    v5 = (const char *)a3;
  else
    v5 = *(const char **)a3;
  v6 = CFStringCreateWithCString(kCFAllocatorDefault, v5, 0x8000100u);
  v8 = v6;
  if (v6)
    CFDictionarySetValue(a1, a2, v6);
  sub_100027D2C((const void **)&v8);
  return v6 != 0;
}

void sub_1000FE330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100027D2C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1000FE344(CFMutableDictionaryRef *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;

  v2 = a2[1];
  if (v2)
  {
    v4 = *a2;
    v5 = *a2 + 16 * v2;
    do
    {
      v6 = *(const void **)v4;
      v7 = *(const void **)(v4 + 8);
      v4 += 16;
      CFDictionaryAddValue(*a1, v6, v7);
    }
    while (v4 != v5);
  }
}

void sub_1000FE38C(uint64_t *a1@<X0>, CFMutableDictionaryRef *a2@<X8>)
{
  *a2 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  sub_1000FE344(a2, a1);
}

void sub_1000FE3E0(_Unwind_Exception *a1)
{
  const void **v1;

  sub_100028068(v1);
  _Unwind_Resume(a1);
}

char *sub_1000FE3F4(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      sub_100017E44();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v17 = (char *)operator new(v15);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v27 = &v13[(_QWORD)v17];
    memcpy(&v13[(_QWORD)v17], __src, a5);
    v28 = &v13[(_QWORD)v17];
    v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(_QWORD)v17 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(char **)(a1 + 8);
      v28 = v17;
    }
    v30 = &v27[a5];
    v31 = &v17[v29];
    if (v10 != v5)
      memmove(v30, v5, v10 - v5);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v30[v10 - v5];
    *(_QWORD *)(a1 + 16) = v31;
    if (v32)
      operator delete(v32);
    return v27;
  }
  v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v19 = &__src[a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &v5[a5];
    v23 = &v21[-a5];
    v24 = v21;
    if (&v21[-a5] < v10)
    {
      v25 = &v10[a5] - v21;
      v24 = v21;
      do
      {
        v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&v5[a5], v5, v21 - v22);
    if (v19 != __src)
      memmove(v5, __src, v19 - __src);
    return v5;
  }
  v19 = &__src[v18];
  v20 = a4 - &__src[v18];
  if (a4 != &__src[v18])
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  v21 = &v10[v20];
  *(_QWORD *)(a1 + 8) = &v10[v20];
  if (v18 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1000FE9F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000FEA70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000FEB28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000FEB84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000FEDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1000FEFC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000FF06C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000FF0AC()
{
  operator new[]();
}

uint64_t sub_1000FF1AC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 32);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        operator delete[]();
      ++v2;
    }
    while (v2 != v3);
    v2 = *(_QWORD **)(a1 + 24);
  }
  *(_QWORD *)(a1 + 32) = v2;
  std::mutex::~mutex((std::mutex *)(a1 + 96));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 48));
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1000FF230(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  void **v6;
  unint64_t v7;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (void **)(a1 + 24);
  *(_QWORD *)(a1 + 48) = 1018212795;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 850045863;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  if (a3 <= a4)
    v7 = a4;
  else
    v7 = a3;
  *(_QWORD *)(a1 + 16) = v7;
  sub_10009D860(v6, a3);
  if (a3)
    sub_1000FF0AC();
  return a1;
}

void sub_1000FF2C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000FF1AC(v1);
  _Unwind_Resume(a1);
}

void sub_1000FF2DC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::unique_lock<std::mutex> __lk;
  uint64_t v7;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 96);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 96));
  v4 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 24) == v4)
  {
    if (*(_QWORD *)(a1 + 16) > (unint64_t)*(unsigned int *)(a1 + 8))
      sub_1000FF0AC();
    do
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 48), &__lk);
      v4 = *(_QWORD *)(a1 + 32);
    }
    while (*(_QWORD *)(a1 + 24) == v4);
  }
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(a1 + 32) = v4 - 8;
  v7 = a1;
  *a2 = v5;
  operator new();
}

void sub_1000FF3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void sub_1000FF3FC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::mutex *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v3 = *a1;
  v4 = (std::mutex *)(*a1 + 96);
  std::mutex::lock(v4);
  v5 = *(_QWORD **)(v3 + 32);
  v6 = *(_QWORD *)(v3 + 40);
  if ((unint64_t)v5 >= v6)
  {
    v8 = *(_QWORD *)(v3 + 24);
    v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_100017E44();
    v10 = v6 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_1000193CC(v3 + 40, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = v14 + 8;
    v17 = *(char **)(v3 + 24);
    v16 = *(char **)(v3 + 32);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = *(char **)(v3 + 24);
    }
    *(_QWORD *)(v3 + 24) = v14;
    *(_QWORD *)(v3 + 32) = v7;
    *(_QWORD *)(v3 + 40) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v5 = a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v3 + 32) = v7;
  std::mutex::unlock(v4);
  std::condition_variable::notify_one((std::condition_variable *)(v3 + 48));
}

void sub_1000FF4FC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000FF514(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1000FF538(uint64_t a1)
{
  sub_1000FF3FC((_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24));
}

uint64_t sub_1000FF55C(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else
    return 0;
}

void sub_1000FF59C(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;

  *sub_100038BC0(a1, a2) = off_10018D440;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  v22 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  v12 = *a3;
  v11 = (std::__shared_weak_count *)a3[1];
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = operator new(0x38uLL);
  v15[1] = 0;
  v15[2] = 0;
  *v15 = off_10018D520;
  v15[3] = 0;
  v16 = (char *)(v15 + 3);
  *((_DWORD *)v15 + 8) = v10;
  v15[5] = v12;
  v15[6] = v11;
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    a1[5] = v16;
    a1[6] = v15;
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    a1[5] = v16;
    a1[6] = v15;
  }
  if (v22)
  {
    v20 = (unint64_t *)&v22->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  a1[7] = 0;
  a1[8] = 0;
  operator new();
}

void sub_1000FF770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;

  sub_100012168(v10);
  sub_100012168((uint64_t)&a9);
  sub_100038C10(v9);
  _Unwind_Resume(a1);
}

void sub_1000FF7C8(uint64_t a1, int a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint8_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  AAByteStream v17;
  AAByteStream v18;
  std::__shared_weak_count *v19;
  AEAContext v20;
  AAByteStream v21;

  v4 = *(std::mutex **)(a1 + 72);
  std::mutex::lock(v4);
  lseek(a2, 0, 0);
  v18 = AAFileStreamOpenWithFD(a2, 0);
  sub_1000ED388(&v21, &v18);
  sub_1000ED45C(&v20, &v21);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(uint8_t **)(v5 + 16);
  v7 = *(std::__shared_weak_count **)(v5 + 24);
  v18 = (AAByteStream)v6;
  v19 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_1000ED48C(&v20, v6, 0x20uLL);
  sub_1000ED3C0(&v21, &v20, 0xFFFFFFFFFFFFFFFFLL, 0x4000000000000000uLL, 1, (uint64_t *)&v17);
  sub_1000FFD68(&v21, (uint64_t *)&v20, &v17, &v16);
  sub_100015BC8(a1 + 56, &v16);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  sub_1000ED38C(&v17);
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_1000ED460(&v20);
  sub_1000ED38C(&v21);
  std::mutex::unlock(v4);
}

void sub_1000FF93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::mutex *v3;
  AAByteStream v5;
  va_list va;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  AEAContext v10;
  va_list va2;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, AAByteStream);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, AEAContext);
  sub_1000ED38C((AAByteStream *)va);
  sub_100012168((uint64_t)va1);
  sub_1000ED460((AEAContext *)va2);
  sub_1000ED38C((AAByteStream *)va3);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000FF994(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = sub_100038BC0(a1, a3);
  *v5 = off_10018D440;
  v6 = a2[6];
  v5[5] = a2[5];
  v5[6] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a1[7] = 0;
  a1[8] = 0;
  v9 = a2[10];
  a1[9] = a2[9];
  a1[10] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  sub_1000FF7C8((uint64_t)a1, *(_DWORD *)(a1[5] + 8));
  return a1;
}

void sub_1000FFA44(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100012168(v4);
  sub_100012168(v3);
  sub_100012168(v2);
  sub_100038C10(v1);
  _Unwind_Resume(a1);
}

double sub_1000FFA70@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  double v5[3];

  sub_1000FFE98(a1, a2, v5);
  result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

ssize_t sub_1000FFAB0(uint64_t a1, uint64_t a2)
{
  return sub_1000ED75C(*(_QWORD *)(a1 + 56), *(void **)a2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t sub_1000FFAD4(uint64_t a1)
{
  return **(_QWORD **)(a1 + 40);
}

uint64_t sub_1000FFAE0(uint64_t a1)
{
  return sub_1000ED744(*(_QWORD *)(a1 + 56));
}

_QWORD *sub_1000FFAE8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = off_10018D440;
  sub_100012168((uint64_t)(a1 + 9));
  sub_100012168((uint64_t)(a1 + 7));
  sub_100012168((uint64_t)(a1 + 5));
  *a1 = off_1001725B8;
  sub_100012168((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_1000FFB48(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = off_10018D440;
  sub_100012168((uint64_t)(a1 + 9));
  sub_100012168((uint64_t)(a1 + 7));
  sub_100012168((uint64_t)(a1 + 5));
  *a1 = off_1001725B8;
  sub_100012168((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete();
}

_QWORD *sub_1000FFBB8(uint64_t a1, _QWORD *a2)
{
  return sub_100005A0C(a2, (uint64_t)"AEA", 3);
}

void sub_1000FFBCC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10018D520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000FFBDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10018D520;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000FFC0C(uint64_t a1)
{
  return sub_100012168(a1 + 40);
}

void sub_1000FFC18(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000FFC78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FFD2C((std::mutex **)va, 0);
  _Unwind_Resume(a1);
}

void sub_1000FFC94(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

std::mutex *sub_1000FFCB8(uint64_t a1)
{
  std::mutex *result;

  result = *(std::mutex **)(a1 + 24);
  if (result)
  {
    std::mutex::~mutex(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1000FFCEC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

std::mutex *sub_1000FFD2C(std::mutex **a1, std::mutex *a2)
{
  std::mutex *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::mutex::~mutex(result);
    operator delete();
  }
  return result;
}

_QWORD *sub_1000FFD68@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x30uLL);
  result = sub_1000FFDD8(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1000FFDC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000FFDD8(_QWORD *a1, _QWORD *a2, uint64_t *a3, _QWORD *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10018D5E8;
  sub_1000ED71C(a1 + 3, a2, a3, a4);
  return a1;
}

void sub_1000FFE0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000FFE20(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10018D5E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000FFE30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10018D5E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

AAByteStream *sub_1000FFE60(AAByteStream *a1)
{
  AAByteStream *v2;

  v2 = a1 + 3;
  sub_1000ED38C(a1 + 5);
  sub_1000ED460(a1 + 4);
  return sub_1000ED38C(v2);
}

void sub_1000FFE98(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x70uLL);
  sub_1000FFF00(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_1000196D4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000FFEEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000FFF00(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100185480;
  sub_1000FF994(a1 + 3, a2, a3);
  return a1;
}

void sub_1000FFF34(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

dispatch_group_t *sub_100100B40(dispatch_group_t *a1)
{
  *a1 = dispatch_group_create();
  return a1;
}

NSObject **sub_100100B68(NSObject **a1)
{
  NSObject *v2;

  v2 = *a1;
  if (v2)
    dispatch_release(v2);
  return a1;
}

intptr_t sub_100100B94(dispatch_group_t *a1, dispatch_time_t a2)
{
  return dispatch_group_wait(*a1, a2);
}

dispatch_queue_t *sub_100100B9C(dispatch_queue_t *a1, char *label, int a3)
{
  const char *v5;
  NSObject *v6;
  dispatch_queue_t v7;
  NSObject *global_queue;

  switch(a3)
  {
    case 2:
      v6 = &_dispatch_queue_attr_concurrent;
      v5 = label;
      goto LABEL_6;
    case 1:
      global_queue = dispatch_get_global_queue(21, 0);
      v7 = dispatch_queue_create_with_target_V2(label, 0, global_queue);
      goto LABEL_8;
    case 0:
      v5 = label;
      v6 = 0;
LABEL_6:
      v7 = dispatch_queue_create(v5, v6);
LABEL_8:
      *a1 = v7;
      break;
  }
  return a1;
}

_QWORD *sub_100100C18(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  *a2 = 0;
  return result;
}

void sub_100100C28(dispatch_queue_t *a1, void *a2)
{
  dispatch_async(*a1, a2);
}

void sub_100100C30(dispatch_queue_t *a1, dispatch_group_t *a2, void *a3)
{
  dispatch_group_async(*a2, *a1, a3);
}

void sub_100100C40(dispatch_queue_t *a1, dispatch_block_t *a2, uint64_t a3)
{
  dispatch_block_t v4;
  dispatch_time_t v6;

  v4 = *a2;
  if (v4)
  {
    if (a3)
    {
      v6 = dispatch_time(0, 1000 * a3);
      dispatch_after(v6, *a1, *a2);
    }
    else
    {
      dispatch_async(*a1, v4);
    }
  }
}

void sub_100100CA0(dispatch_queue_t *a1, void *a2)
{
  dispatch_sync(*a1, a2);
}

void sub_100100CA8(dispatch_queue_t *a1, void *a2)
{
  dispatch_barrier_async(*a1, a2);
}

void sub_100100CB0(dispatch_queue_t *a1, void *a2)
{
  dispatch_barrier_sync(*a1, a2);
}

void sub_100100CB8(dispatch_object_t *a1)
{
  dispatch_suspend(*a1);
}

void sub_100100CC0(dispatch_object_t *a1)
{
  dispatch_resume(*a1);
}

uint64_t sub_100100CC8(dispatch_object_t *a1, int a2)
{
  intptr_t v3;
  NSObject *global_queue;

  if ((a2 - 1) > 2)
    v3 = 5;
  else
    v3 = *(_QWORD *)&asc_100149540[8 * a2 - 8];
  global_queue = dispatch_get_global_queue(v3, 0);
  if (!global_queue)
    return 22;
  dispatch_set_target_queue(*a1, global_queue);
  return 0;
}

void sub_100100D28(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
  v5 = *(_QWORD *)(a1 + 40);
  v4 = (_QWORD *)(a1 + 40);
  v3 = v5;
  if (v5)
  {
    sub_100100D70(v3);
    sub_1000534A4(v4);
  }
}

void sub_100100D70(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (unint64_t *)(a1 + 128);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    std::mutex::lock((std::mutex *)(a1 + 64));
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 16));
    std::mutex::unlock((std::mutex *)(a1 + 64));
  }
}

uint64_t sub_100100DC8(uint64_t a1, __int128 *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t **v10;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[5];
  _BYTE v27[24];
  _BYTE *v28;
  _BYTE v29[24];
  _BYTE *v30;

  v10 = (uint64_t **)a2;
  *(_QWORD *)a1 = off_10018D638;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100041DD0((_BYTE *)(a1 + 16), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v12 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v12;
  }
  v13 = a4[1];
  *(_QWORD *)(a1 + 40) = *a4;
  *(_QWORD *)(a1 + 48) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (*((char *)v10 + 23) < 0)
    v10 = (uint64_t **)*v10;
  v16 = *a3;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 1174405120;
  v26[2] = sub_100100FE0;
  v26[3] = &unk_10018D648;
  v26[4] = a1;
  v17 = v27;
  sub_100012568((uint64_t)v27, a5);
  sub_100012568((uint64_t)v29, a6);
  *(_QWORD *)(a1 + 8) = dispatch_mach_create(v10, v16, v26);
  v22 = v30;
  if (v30 == v29)
  {
    v23 = 4;
    v22 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_14;
    v23 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v22 + 8 * v23))(v22, v18, v19, v20, v21);
LABEL_14:
  if (v28 == v27)
  {
    v24 = 4;
    goto LABEL_18;
  }
  if (v28)
  {
    v24 = 5;
    v17 = v28;
LABEL_18:
    (*(void (**)(_QWORD *))(*v17 + 8 * v24))(v17);
  }
  return a1;
}

void sub_100100F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  uint64_t v17;
  void **v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;

  if (a17 == v19)
  {
    v22 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v22 = 5;
    v19 = a17;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v22))(v19);
LABEL_6:
  sub_100012168(v20);
  if (*(char *)(v17 + 39) < 0)
    operator delete(*v18);
  _Unwind_Resume(a1);
}

void sub_100100FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t msg;
  uint64_t v5;
  uint64_t v6;

  switch(a2)
  {
    case 8:
      v5 = *(_QWORD *)(a1 + 96);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
      break;
    case 7:
      sub_100100D28(*(_QWORD *)(a1 + 32));
      break;
    case 2:
      v6 = 0;
      msg = dispatch_mach_msg_get_msg(a3, &v6);
      sub_100101074(a1 + 40, msg, v6);
      break;
  }
}

uint64_t sub_100101074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_100017C6C();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

uint64_t sub_1001010B0(uint64_t a1, uint64_t a2)
{
  sub_100012568(a1 + 40, a2 + 40);
  return sub_100012568(a1 + 72, a2 + 72);
}

void sub_1001010F4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = v2;
  v5 = *(_QWORD **)(v3 + 64);
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = v5;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100101134(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 5;
  v3 = a1 + 9;
  v4 = (_QWORD *)a1[12];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = (_QWORD *)a1[8];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

uint64_t sub_1001011BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  if (a2)
    a2 = *(unsigned int *)(a2 + 8);
  if (a3)
    a3 = *(unsigned int *)(a3 + 8);
  return dispatch_mach_connect(v3, a2, a3, 0);
}

uint64_t sub_1001011D8(uint64_t a1)
{
  return dispatch_mach_cancel(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1001011E0(uint64_t a1)
{
  NSObject *v2;

  *(_QWORD *)a1 = off_10018D638;
  v2 = *(NSObject **)(a1 + 8);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
  sub_100012168(a1 + 40);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_100101238(uint64_t a1)
{
  sub_1001011E0(a1);
  operator delete();
}

dispatch_semaphore_t *sub_10010125C(dispatch_semaphore_t *a1, intptr_t value)
{
  *a1 = dispatch_semaphore_create(value);
  return a1;
}

intptr_t sub_100101288(dispatch_semaphore_t *a1, dispatch_time_t a2)
{
  return dispatch_semaphore_wait(*a1, a2);
}

intptr_t sub_100101290(dispatch_semaphore_t *a1)
{
  return dispatch_semaphore_signal(*a1);
}

dispatch_block_t *sub_100101298(dispatch_block_t *a1, void *a2)
{
  *a1 = dispatch_block_create((dispatch_block_flags_t)0, a2);
  return a1;
}

void sub_1001012C4(void **a1)
{
  void *v1;

  v1 = *a1;
  if (v1)
    dispatch_block_cancel(v1);
}

const void **sub_1001012D4(const void **a1)
{
  void *v2;

  v2 = (void *)*a1;
  if (v2)
  {
    dispatch_block_cancel(v2);
    if (*a1)
      _Block_release(*a1);
  }
  return a1;
}

uint64_t sub_100101314@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  int *v19;
  group *v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type size;
  _QWORD *v24;
  _QWORD *v25;
  std::string *v26;
  std::string::size_type v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  std::string v36;
  uint64_t v37;
  uint64_t v38;
  std::string v39;
  stat v40;
  _QWORD v41[2];
  uint64_t v42;
  _QWORD v43[10];
  char v44;
  uint64_t v45;

  sub_100027EC8((uint64_t)v41);
  v10 = sub_100005A0C(&v42, (uint64_t)"Couldn't open ", 14);
  v11 = *(char *)(a2 + 23);
  if (v11 >= 0)
    v12 = a2;
  else
    v12 = *(_QWORD *)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  v14 = sub_100005A0C(v10, v12, v13);
  v15 = sub_100005A0C(v14, (uint64_t)"' with flags ", 13);
  v16 = *v15;
  *(_DWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v15 + *(_QWORD *)(v16 - 24) + 8) |= 0x200u;
  v17 = (_QWORD *)std::ostream::operator<<(v15, a3);
  *(_DWORD *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(*v17 - 24) + 8) & 0xFFFFFFB5 | 2;
  if (a4 == 13)
  {
    if (*(char *)(a2 + 23) >= 0)
      v18 = (const char *)a2;
    else
      v18 = *(const char **)a2;
    if (fstatat(a1, v18, &v40, 0))
    {
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)"std::string FileDescriptorWrapper::handle_open_from_error_message(int, const std::string &, int, int)";
      v39.__r_.__value_.__l.__size_ = 65;
      LODWORD(v39.__r_.__value_.__r.__words[2]) = 16;
      sub_100101700(&v36, (__int128 *)&v39);
      sub_100005A0C(&v37, (uint64_t)"fstatfs failed with err code", 28);
      v19 = __error();
      std::ostream::operator<<(&v37, *v19);
      sub_100005A0C(&v37, (uint64_t)" trying to check permission after EACCES", 40);
      std::ostream::~ostream(&v37, off_10018DA98);
      sub_100105C20((uint64_t)&v36);
      std::ios::~ios(&v38);
    }
    else
    {
      std::to_string(&v36, v40.st_gid);
      v20 = getgrgid(v40.st_gid);
      if (v20)
        sub_100040B40(&v36, v20->gr_name);
      v21 = sub_100005A0C(&v42, (uint64_t)", UID:GID(Name)=", 16);
      std::to_string(&v39, v40.st_uid);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v39;
      else
        v22 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        size = v39.__r_.__value_.__l.__size_;
      v24 = sub_100005A0C(v21, (uint64_t)v22, size);
      v25 = sub_100005A0C(v24, (uint64_t)":", 1);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &v36;
      else
        v26 = (std::string *)v36.__r_.__value_.__r.__words[0];
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      else
        v27 = v36.__r_.__value_.__l.__size_;
      sub_100005A0C(v25, (uint64_t)v26, v27);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      v28 = sub_100005A0C(&v42, (uint64_t)" mode=", 6);
      v29 = *v28;
      *(_DWORD *)((char *)v28 + *(_QWORD *)(*v28 - 24) + 8) = *(_DWORD *)((_BYTE *)v28 + *(_QWORD *)(*v28 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v28 + *(_QWORD *)(v29 - 24) + 8) |= 0x200u;
      v30 = (_QWORD *)std::ostream::operator<<(v28, v40.st_mode);
      *(_DWORD *)((char *)v30 + *(_QWORD *)(*v30 - 24) + 8) = *(_DWORD *)((_BYTE *)v30 + *(_QWORD *)(*v30 - 24) + 8) & 0xFFFFFFB5 | 2;
      v31 = sub_100005A0C(v30, (uint64_t)" (our euid is ", 14);
      v32 = geteuid();
      v33 = (_QWORD *)std::ostream::operator<<(v31, v32);
      sub_100005A0C(v33, (uint64_t)")", 1);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
    }
  }
  sub_100005598((uint64_t)v43, a5);
  *(_QWORD *)((char *)v41
  v42 = v34;
  if (v44 < 0)
    operator delete((void *)v43[8]);
  std::streambuf::~streambuf(v43);
  return std::ios::~ios(&v45);
}

void sub_10010169C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1000F7610((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

_QWORD *sub_100101700(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010C240((uint64_t)a1, a2);
  *a1 = off_10018D9D0;
  a1[45] = &off_10018DAD0;
  a1[46] = &off_10018DAF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018D9D0;
  a1[45] = off_10018DA58;
  a1[46] = off_10018DA80;
  return a1;
}

void sub_100101784(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100105C20(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001017A8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018DA98);
  sub_100105C20(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1001017E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  int v19;
  void *exception;
  uint64_t v21;
  int *v22;
  int v23;
  __int128 v24;
  int v25;
  uint8_t buf[8];
  __int16 v27;
  const char *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v3 = a1;
  if (*(char *)(a1 + 23) < 0)
    a1 = *(_QWORD *)a1;
  v4 = open((const char *)a1, a2, 438);
  if ((_DWORD)v4 == -1)
  {
    v12 = *__error();
    if (sub_1000BF0BC())
    {
      *(_QWORD *)&v24 = 0;
      v13 = sub_1000BF044();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        v14 = 3;
      else
        v14 = 2;
      if (*(char *)(v3 + 23) < 0)
        v3 = *(_QWORD *)v3;
      v15 = *__error();
      *(_DWORD *)buf = 68158467;
      *(_DWORD *)&buf[4] = 69;
      v27 = 2080;
      v28 = "static int FileDescriptorWrapper::open_file(const std::string &, int)";
      v29 = 2081;
      v30 = v3;
      v31 = 1024;
      v32 = v15;
      v23 = 34;
      v16 = (const char *)_os_log_send_and_compose_impl(v14, &v24, 0, 0, &_mh_execute_header, v13, 16, "%.*s: Failed opening %{private}s, errno %d", buf, v23);
      if (v16)
      {
        v17 = (char *)v16;
        fprintf(__stderrp, "%s\n", v16);
        free(v17);
      }
    }
    else
    {
      v18 = sub_1000BF044();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(v3 + 23) < 0)
          v3 = *(_QWORD *)v3;
        v19 = *__error();
        *(_DWORD *)buf = 68158467;
        *(_DWORD *)&buf[4] = 69;
        v27 = 2080;
        v28 = "static int FileDescriptorWrapper::open_file(const std::string &, int)";
        v29 = 2081;
        v30 = v3;
        v31 = 1024;
        v32 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%.*s: Failed opening %{private}s, errno %d", buf, 0x22u);
      }
    }
    *__error() = v12;
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)buf);
    sub_100005A0C(buf, (uint64_t)"Couldn't open file with flags ", 30);
    v21 = *(_QWORD *)buf;
    *(_DWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24) + 8] = *(_DWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24) + 8] & 0xFFFFFFB5 | 8;
    *(_DWORD *)&buf[*(_QWORD *)(v21 - 24) + 8] |= 0x200u;
    std::ostream::operator<<(buf, a2);
    v22 = __error();
    sub_100012294((uint64_t)exception, (uint64_t)buf, *v22);
  }
  v5 = v4;
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v24 = "int FileDescriptorWrapper::open_file(const std::string &, int)";
    *((_QWORD *)&v24 + 1) = 36;
    v25 = 2;
    sub_100101C1C(buf, &v24);
    sub_100005A0C(&v33, (uint64_t)"'", 1);
    v6 = *(char *)(v3 + 23);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = *(_QWORD *)v3;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(v3 + 23);
    else
      v8 = *(_QWORD *)(v3 + 8);
    sub_100005A0C(&v33, v7, v8);
    sub_100005A0C(&v33, (uint64_t)"' opened successfully with flags ", 33);
    v9 = v33;
    *(_DWORD *)((char *)&v33 + *(_QWORD *)(v33 - 24) + 8) = *(_DWORD *)((_BYTE *)&v33 + *(_QWORD *)(v33 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)&v33 + *(_QWORD *)(v9 - 24) + 8) |= 0x200u;
    std::ostream::operator<<(&v33, a2);
    v10 = v33;
    *(_DWORD *)((char *)&v33 + *(_QWORD *)(v33 - 24) + 8) &= ~0x200u;
    *(_DWORD *)((char *)&v33 + *(_QWORD *)(v10 - 24) + 8) = *(_DWORD *)((_BYTE *)&v33 + *(_QWORD *)(v10 - 24) + 8) & 0xFFFFFFB5 | 2;
    sub_100005A0C(&v33, (uint64_t)", fd=", 5);
    std::ostream::operator<<(&v33, v5);
    std::ostream::~ostream(&v33, off_10018DCB8);
    sub_10010620C((uint64_t)buf);
    std::ios::~ios(&v34);
  }
  return v5;
}

void sub_100101BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10000FE34((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100101C1C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010C2BC((uint64_t)a1, a2);
  *a1 = off_10018DBF0;
  a1[45] = &off_10018DCF0;
  a1[46] = &off_10018DD18;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018DBF0;
  a1[45] = off_10018DC78;
  a1[46] = off_10018DCA0;
  return a1;
}

void sub_100101CA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10010620C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100101CC4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018DCB8);
  sub_10010620C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100101D04(int a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *exception;
  int *v16;
  __int128 *v17;
  uint64_t v18;
  int *v19;
  _QWORD v20[45];
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  unsigned __int8 v25;
  _DWORD v26[2];
  uint64_t v27;

  v5 = a3 | 0x100u;
  if (*(char *)(a2 + 23) >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  v26[1] = 438;
  v27 = v6;
  v26[0] = a3 | 0x100;
  v7 = fcntl(a1, 56, v26);
  if ((_DWORD)v7 == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)v20);
    v16 = __error();
    sub_100101314(a1, a2, v5, *v16, &v23);
    if ((v25 & 0x80u) == 0)
      v17 = &v23;
    else
      v17 = (__int128 *)v23;
    if ((v25 & 0x80u) == 0)
      v18 = v25;
    else
      v18 = *((_QWORD *)&v23 + 1);
    sub_100005A0C(v20, (uint64_t)v17, v18);
    v19 = __error();
    sub_100012294((uint64_t)exception, (uint64_t)v20, *v19);
  }
  v8 = v7;
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v23 = "int FileDescriptorWrapper::open_from(int, const std::string &, int)";
    *((_QWORD *)&v23 + 1) = 36;
    v24 = 2;
    sub_100101FA4(v20, &v23);
    sub_100005A0C(&v21, (uint64_t)"'", 1);
    v9 = *(char *)(a2 + 23);
    if (v9 >= 0)
      v10 = a2;
    else
      v10 = *(_QWORD *)a2;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a2 + 23);
    else
      v11 = *(_QWORD *)(a2 + 8);
    sub_100005A0C(&v21, v10, v11);
    sub_100005A0C(&v21, (uint64_t)"' opened successfully with flags ", 33);
    v12 = v21;
    *(_DWORD *)((char *)&v21 + *(_QWORD *)(v21 - 24) + 8) = *(_DWORD *)((_BYTE *)&v21 + *(_QWORD *)(v21 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)&v21 + *(_QWORD *)(v12 - 24) + 8) |= 0x200u;
    std::ostream::operator<<(&v21, v5);
    v13 = v21;
    *(_DWORD *)((char *)&v21 + *(_QWORD *)(v21 - 24) + 8) &= ~0x200u;
    *(_DWORD *)((char *)&v21 + *(_QWORD *)(v13 - 24) + 8) = *(_DWORD *)((_BYTE *)&v21 + *(_QWORD *)(v13 - 24) + 8) & 0xFFFFFFB5 | 2;
    sub_100005A0C(&v21, (uint64_t)", fd=", 5);
    std::ostream::operator<<(&v21, v8);
    std::ostream::~ostream(&v21, off_10018DED8);
    sub_1001067F8((uint64_t)v20);
    std::ios::~ios(&v22);
  }
  return v8;
}

void sub_100101F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  int v4;
  uint64_t v5;
  va_list va;

  va_start(va, a3);
  if (*(char *)(v5 - 65) < 0)
  {
    operator delete(*(void **)(v5 - 88));
    sub_10000FE34((uint64_t)va);
    if ((v4 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else
  {
    sub_10000FE34((uint64_t)va);
    if (!v4)
      goto LABEL_6;
  }
  __cxa_free_exception(v3);
  goto LABEL_6;
}

_QWORD *sub_100101FA4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010C338((uint64_t)a1, a2);
  *a1 = off_10018DE10;
  a1[45] = &off_10018DF10;
  a1[46] = &off_10018DF38;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018DE10;
  a1[45] = off_10018DE98;
  a1[46] = off_10018DEC0;
  return a1;
}

void sub_100102028(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1001067F8(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010204C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018DED8);
  sub_1001067F8(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10010208C(uint64_t a1)
{
  int v2;
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_10018D698;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 != -1)
  {
    close(v2);
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v4 = "FileDescriptorWrapper::~FileDescriptorWrapper()";
      *((_QWORD *)&v4 + 1) = 45;
      v5 = 2;
      sub_100102168(v6, &v4);
      sub_100005A0C(&v7, (uint64_t)"File descriptor ", 16);
      std::ostream::operator<<(&v7, *(unsigned int *)(a1 + 8));
      sub_100005A0C(&v7, (uint64_t)" closed", 7);
      std::ostream::~ostream(&v7, off_10018E0F8);
      sub_100106DE4((uint64_t)v6);
      std::ios::~ios(&v8);
    }
  }
  return a1;
}

_QWORD *sub_100102168(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010C3B4((uint64_t)a1, a2);
  *a1 = off_10018E030;
  a1[45] = &off_10018E130;
  a1[46] = &off_10018E158;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018E030;
  a1[45] = off_10018E0B8;
  a1[46] = off_10018E0E0;
  return a1;
}

void sub_1001021EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100106DE4(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100102210(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018E0F8);
  sub_100106DE4(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_100102254(uint64_t a1)
{
  sub_10010208C(a1);
  operator delete();
}

uint64_t sub_100102278(uint64_t a1, int a2, char a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = off_100174170;
  *(_BYTE *)(a1 + 12) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  sub_1001022CC(a1);
  return a1;
}

void sub_1001022B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10010208C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001022CC(uint64_t a1)
{
  uint64_t result;
  const __CFDictionary *v3;
  io_service_t MatchingService;
  io_registry_entry_t v5;
  CFTypeRef CFProperty;
  CFTypeID TypeID;
  uint64_t v8;
  CFTypeRef v9;
  CFTypeID v10;
  uint64_t v11;
  CFTypeID v12;
  CFTypeID v13;
  __darwin_ino64_t st_ino;
  const char *v15;
  uint64_t v16;
  _QWORD *v17;
  const std::error_category *v18;
  void *exception;
  int *v20;
  void *v21;
  void *v22;
  int *v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD *v27;
  CFTypeID v28;
  _QWORD *v29;
  _QWORD *v30;
  CFTypeID v31;
  _QWORD *v32;
  CFTypeRef v33;
  CFTypeRef cf;
  stat v35;
  uint64_t valuePtr;
  char bsdName[1024];
  char v38[1024];

  memset(&v35, 0, sizeof(v35));
  result = sub_1001026E4(a1, &v35);
  if ((v35.st_mode & 0xB000) != 0x2000)
  {
    *(_QWORD *)(a1 + 16) = v35.st_size;
    goto LABEL_17;
  }
  bzero(v38, 0x400uLL);
  bzero(bsdName, 0x400uLL);
  if (fcntl(*(_DWORD *)(a1 + 8), 50, v38) < 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v20 = __error();
    v21 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"get path failed", *v20);
  }
  if (!basename_r(v38, bsdName))
  {
    v22 = __cxa_allocate_exception(0x40uLL);
    v23 = __error();
    v24 = (void *)sub_100005410((uint64_t)v22, (uint64_t)"basename_r failed", *v23);
  }
  v3 = IOBSDNameMatching(kIOMainPortDefault, 0, bsdName);
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v3);
  v5 = MatchingService;
  if (!MatchingService)
  {
    v25 = __cxa_allocate_exception(0x40uLL);
    v26 = (void *)sub_100005410((uint64_t)v25, (uint64_t)"device not found in registry", 0x13u);
  }
  CFProperty = IORegistryEntryCreateCFProperty(MatchingService, CFSTR("Size"), kCFAllocatorDefault, 0);
  TypeID = CFNumberGetTypeID();
  if (CFProperty)
  {
    v8 = TypeID;
    if (CFGetTypeID(CFProperty) != TypeID)
    {
      v27 = __cxa_allocate_exception(0x40uLL);
      v28 = CFGetTypeID(CFProperty);
      v29 = sub_10009C630(v27, v28, v8);
    }
  }
  cf = CFProperty;
  v9 = IORegistryEntryCreateCFProperty(v5, CFSTR("Preferred Block Size"), kCFAllocatorDefault, 0);
  v10 = CFNumberGetTypeID();
  if (v9)
  {
    v11 = v10;
    if (CFGetTypeID(v9) != v10)
    {
      v30 = __cxa_allocate_exception(0x40uLL);
      v31 = CFGetTypeID(v9);
      v32 = sub_100027DA0(v30, v31, v11);
    }
  }
  v33 = v9;
  IOObjectRelease(v5);
  if (!cf || (v12 = CFGetTypeID(cf), v12 != CFNumberGetTypeID()))
  {
    v15 = "device size not found in registry";
LABEL_20:
    v16 = 19;
    goto LABEL_22;
  }
  valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberLongLongType, &valuePtr))
  {
LABEL_21:
    v15 = "Failed converting CFNumber to longlong";
    v16 = 22;
LABEL_22:
    v17 = __cxa_allocate_exception(0x40uLL);
    *v17 = &off_1001924F8;
    v18 = std::generic_category();
    v17[1] = v16;
    v17[2] = v18;
    *((_BYTE *)v17 + 24) = 0;
    *((_BYTE *)v17 + 48) = 0;
    v17[7] = v15;
  }
  *(_QWORD *)(a1 + 16) = valuePtr;
  if (!v33 || (v13 = CFGetTypeID(v33), v13 != CFNumberGetTypeID()))
  {
    v15 = "device block size not found in registry";
    goto LABEL_20;
  }
  valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)v33, kCFNumberLongLongType, &valuePtr))
    goto LABEL_21;
  *(_QWORD *)(a1 + 24) = valuePtr;
  sub_1000C0040(&v33);
  result = (uint64_t)sub_1000C0040(&cf);
LABEL_17:
  st_ino = v35.st_ino;
  *(_QWORD *)(a1 + 32) = v35.st_dev;
  *(_QWORD *)(a1 + 40) = st_ino;
  return result;
}

void sub_10010268C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, const void *a13)
{
  void *v13;

  __cxa_free_exception(v13);
  sub_1000C0040(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1001026E4@<X0>(uint64_t a1@<X0>, stat *a2@<X8>)
{
  uint64_t result;
  void *exception;
  int *v4;
  void *v5;

  result = fstat(*(_DWORD *)(a1 + 8), a2);
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v4 = __error();
    v5 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"fstat failed", *v4);
  }
  return result;
}

void sub_100102744(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100102758@<X0>(uint64_t a1@<X0>, statfs *a2@<X8>)
{
  uint64_t result;
  void *exception;
  int *v4;
  void *v5;

  result = fstatfs(*(_DWORD *)(a1 + 8), a2);
  if ((result & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v4 = __error();
    v5 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"fstatfs failed", *v4);
  }
  return result;
}

void sub_1001027B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1001027CC(uint64_t a1)
{
  return (*(_WORD *)(a1 + 4) & 0xB000) == 0x2000;
}

BOOL sub_1001027E4(uint64_t a1)
{
  stat v2;

  sub_1001026E4(a1, &v2);
  return (v2.st_mode & 0xB000) == 0x2000;
}

uint64_t sub_100102818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  int v8;
  statfs __src;
  char __dst[2168];

  sub_100102758(a1, &__src);
  memcpy(__dst, &__src, sizeof(__dst));
  sub_100005870((_QWORD *)a2, &__dst[72]);
  *(_QWORD *)&v7 = "FileDescriptor::get_mounted_on_fs() const";
  *((_QWORD *)&v7 + 1) = 33;
  v8 = 2;
  sub_100015FA0(&__src, &v7);
  sub_100005A0C(&__src.f_mntonname[272], (uint64_t)"File system is ", 15);
  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = a2;
  else
    v4 = *(_QWORD *)a2;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  sub_100005A0C(&__src.f_mntonname[272], v4, v5);
  std::ostream::~ostream(&__src.f_mntonname[272], off_10016E150);
  sub_100016104((uint64_t)&__src);
  return std::ios::~ios(&__src.f_mntonname[280]);
}

void sub_100102934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;

  if (*(char *)(v12 + 23) < 0)
    operator delete(*(void **)v12);
  _Unwind_Resume(exception_object);
}

BOOL sub_1001029B0(uint64_t a1, uint64_t a2)
{
  int32_t v3;
  int32_t v4;
  statfs v7;

  sub_100102758(a1, &v7);
  v3 = v7.f_fsid.val[0];
  v4 = v7.f_fsid.val[1];
  sub_100102758(a2, &v7);
  return v3 == v7.f_fsid.val[0] && v4 == v7.f_fsid.val[1];
}

void sub_100102A50(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;

  v2 = (unint64_t *)(a1 + 144);
  v4 = a1;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))sub_10010C430);
  }
}

uint64_t sub_100102AA0(int a1, uint64_t *a2)
{
  uint64_t *v2;

  if (*((char *)a2 + 23) >= 0)
    v2 = a2;
  else
    v2 = (uint64_t *)*a2;
  if (fcntl(a1, 57, v2) < 0)
    return -*__error();
  else
    return 0;
}

off_t sub_100102AEC(int a1, uint64_t a2)
{
  uint64_t v2;
  void *exception;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD v9[33];
  stat v10;

  v2 = a2;
  if (*(char *)(a2 + 23) < 0)
    a2 = *(_QWORD *)a2;
  if (fstatat(a1, (const char *)a2, &v10, 32))
  {
    if (*__error() == 13 || *__error() == 1)
      operator new();
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)v9);
    sub_100005A0C(v9, (uint64_t)"Cannot stat ", 12);
    v5 = *(char *)(v2 + 23);
    if (v5 >= 0)
      v6 = v2;
    else
      v6 = *(_QWORD *)v2;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(v2 + 23);
    else
      v7 = *(_QWORD *)(v2 + 8);
    sub_100005A0C(v9, v6, v7);
    v8 = __error();
    sub_100012294((uint64_t)exception, (uint64_t)v9, *v8);
  }
  return v10.st_size;
}

void sub_100102C44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10000FE34((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100102CB0(uint64_t a1, uint64_t a2)
{
  ssize_t v4;
  ssize_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  __int128 v12;
  int v13;
  _QWORD v14[45];
  uint64_t v15;
  uint64_t v16;

  v4 = pwrite(**(_DWORD **)(a1 + 56), *(const void **)a2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  v5 = v4;
  if (v4 < 0 || v4 != *(_QWORD *)(a2 + 16))
  {
    *(_QWORD *)&v12 = "int FileLocal::write(const sg_entry &)";
    *((_QWORD *)&v12 + 1) = 20;
    v13 = 16;
    sub_100102E48(v14, &v12);
    sub_100005A0C(&v15, (uint64_t)"Error writing file @ ", 21);
    sub_10011E628(&v15, (_QWORD *)a2);
    sub_100005A0C(&v15, (uint64_t)". returned ", 11);
    std::ostream::operator<<(&v15, v5);
    sub_100005A0C(&v15, (uint64_t)" with errno: ", 13);
    v10 = __error();
    std::ostream::operator<<(&v15, *v10);
    std::ostream::~ostream(&v15, off_10018E318);
    sub_1001073D0((uint64_t)v14);
    std::ios::~ios(&v16);
    if (v5 == -1)
      return -*__error();
    else
      return 4294967291;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 24) + v4;
    v7 = (unint64_t *)(*(_QWORD *)(a1 + 40) + 64);
    v8 = atomic_load(v7);
    if (v8 < v6)
    {
      do
      {
        v9 = __ldaxr(v7);
        if (v9 == v8)
        {
          if (!__stlxr(v6, v7))
            return v5;
        }
        else
        {
          __clrex();
        }
        v8 = v9;
      }
      while (v9 < v6);
    }
  }
  return v5;
}

void sub_100102E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100102EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100102E48(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010CF10((uint64_t)a1, a2);
  *a1 = off_10018E250;
  a1[45] = &off_10018E350;
  a1[46] = &off_10018E378;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018E250;
  a1[45] = off_10018E2D8;
  a1[46] = off_10018E300;
  return a1;
}

void sub_100102ECC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1001073D0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100102EF0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018E318);
  sub_1001073D0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100102F30(uint64_t a1, uint64_t a2)
{
  ssize_t v3;
  ssize_t v4;
  int *v5;
  __int128 v7;
  int v8;
  _QWORD v9[45];
  uint64_t v10;
  uint64_t v11;

  v3 = pread(**(_DWORD **)(a1 + 56), *(void **)a2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  v4 = v3;
  if (v3 < 0 || v3 != *(_QWORD *)(a2 + 16))
  {
    *(_QWORD *)&v7 = "int FileLocal::read(const sg_entry &)";
    *((_QWORD *)&v7 + 1) = 19;
    v8 = 16;
    sub_10010306C(v9, &v7);
    sub_100005A0C(&v10, (uint64_t)"Error reading file @ ", 21);
    sub_10011E628(&v10, (_QWORD *)a2);
    sub_100005A0C(&v10, (uint64_t)". returned ", 11);
    std::ostream::operator<<(&v10, v4);
    sub_100005A0C(&v10, (uint64_t)" with errno: ", 13);
    v5 = __error();
    std::ostream::operator<<(&v10, *v5);
    std::ostream::~ostream(&v10, off_10018E538);
    sub_1001079BC((uint64_t)v9);
    std::ios::~ios(&v11);
    if (v4 == -1)
      return -*__error();
    else
      return 4294967291;
  }
  return v4;
}

void sub_100103058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100103114((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10010306C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010CF8C((uint64_t)a1, a2);
  *a1 = off_10018E470;
  a1[45] = &off_10018E570;
  a1[46] = &off_10018E598;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018E470;
  a1[45] = off_10018E4F8;
  a1[46] = off_10018E520;
  return a1;
}

void sub_1001030F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1001079BC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100103114(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018E538);
  sub_1001079BC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100103154(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  ssize_t v5;
  ssize_t v6;
  int *v7;
  uint64_t result;
  int *v9;
  __int128 v10;
  int v11;
  _QWORD v12[45];
  uint64_t v13;
  _BYTE v14[159];
  char __buf;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (v4 < a2)
  {
    __buf = 0;
    v5 = pwrite(**(_DWORD **)(a1 + 56), &__buf, 1uLL, a2 - 1);
    if (v5 != 1)
    {
      v6 = v5;
      *(_QWORD *)&v10 = "int FileLocal::truncate(uint64_t)";
      *((_QWORD *)&v10 + 1) = 23;
      v11 = 16;
      sub_100103338(v12, &v10);
      sub_100005A0C(&v13, (uint64_t)"Failed to increase file size, pwrite returned ", 46);
      std::ostream::operator<<(&v13, v6);
      sub_100005A0C(&v13, (uint64_t)" errno: ", 8);
      v7 = __error();
      std::ostream::operator<<(&v13, *v7);
      std::ostream::~ostream(&v13, off_10018E758);
      sub_100107FA8((uint64_t)v12);
      std::ios::~ios(v14);
      if (v6 != -1)
        return 4294967291;
      return -*__error();
    }
LABEL_7:
    result = 0;
    atomic_store(a2, (unint64_t *)(*(_QWORD *)(a1 + 40) + 64));
    return result;
  }
  if (v4 <= a2 || ftruncate(**(_DWORD **)(a1 + 56), a2) != -1)
    goto LABEL_7;
  *(_QWORD *)&v10 = "int FileLocal::truncate(uint64_t)";
  *((_QWORD *)&v10 + 1) = 23;
  v11 = 16;
  sub_100103420(v12, &v10);
  sub_100005A0C(&v13, (uint64_t)"ftruncate failed, errno: ", 25);
  v9 = __error();
  std::ostream::operator<<(&v13, *v9);
  std::ostream::~ostream(&v13, off_10018E978);
  sub_100108594((uint64_t)v12);
  std::ios::~ios(v14);
  return -*__error();
}

void sub_100103314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001034C8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100103338(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010D008((uint64_t)a1, a2);
  *a1 = off_10018E690;
  a1[45] = &off_10018E790;
  a1[46] = &off_10018E7B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018E690;
  a1[45] = off_10018E718;
  a1[46] = off_10018E740;
  return a1;
}

void sub_1001033BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100107FA8(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001033E0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018E758);
  sub_100107FA8(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100103420(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010D084((uint64_t)a1, a2);
  *a1 = off_10018E8B0;
  a1[45] = &off_10018E9B0;
  a1[46] = &off_10018E9D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018E8B0;
  a1[45] = off_10018E938;
  a1[46] = off_10018E960;
  return a1;
}

void sub_1001034A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100108594(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001034C8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018E978);
  sub_100108594(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100103508(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  int *v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t v13;
  int *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  int v18;
  _QWORD v19[45];
  uint64_t v20;
  _BYTE v21[152];

  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v17 = "int FileLocal::flush(di_flush_mode)";
    *((_QWORD *)&v17 + 1) = 20;
    v18 = 2;
    sub_10006DAF8(v19, &v17);
    sub_100005A0C(&v20, (uint64_t)"Calling ", 8);
    sub_10011E5A4(&v20, a2);
    sub_100005A0C(&v20, (uint64_t)" on ", 4);
    sub_10011E7F0((uint64_t)&v20, a1);
    std::ostream::~ostream(&v20, off_10017AE70);
    sub_100072FF0((uint64_t)v19);
    std::ios::~ios(v21);
  }
  if ((_DWORD)a2 == 1)
  {
    if (fsync(**(_DWORD **)(a1 + 56)) == -1)
    {
      v4 = -*__error();
      goto LABEL_6;
    }
    return 0;
  }
  if ((_DWORD)a2 == 2)
    v5 = 2;
  else
    v5 = 1;
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) & v5) != 0)
  {
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v17 = "int FileLocal::flush(di_flush_mode)";
      *((_QWORD *)&v17 + 1) = 20;
      v18 = 2;
      sub_100078338(v19, &v17);
      sub_10011E5A4(&v20, a2);
      sub_100005A0C(&v20, (uint64_t)" is not supported", 17);
      std::ostream::~ostream(&v20, off_10017DB70);
      sub_10007EE40((uint64_t)v19);
      std::ios::~ios(v21);
    }
    return (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)a1 + 16))(a1, (_DWORD)a2 != 2);
  }
  v7 = **(_DWORD **)(a1 + 56);
  if ((_DWORD)a2 == 2)
    v8 = fcntl(v7, 51, 0);
  else
    v8 = fcntl(v7, 85, 0);
  if (v8 != -1)
    return 0;
  v10 = __error();
  v4 = -*v10;
  v11 = 45 - *v10;
  if (v11 <= 0x17 && ((1 << v11) & 0x900001) != 0)
  {
    v12 = (unint64_t *)(*(_QWORD *)(a1 + 40) + 56);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 | v5, v12));
    *(_QWORD *)&v17 = "int FileLocal::flush(di_flush_mode)";
    *((_QWORD *)&v17 + 1) = 20;
    v18 = 0;
    sub_1001038D0(v19, &v17);
    sub_10011E5A4(&v20, a2);
    sub_100005A0C(&v20, (uint64_t)" is not supported (err code ", 28);
    v14 = __error();
    std::ostream::operator<<(&v20, *v14);
    sub_100005A0C(&v20, (uint64_t)")", 1);
    std::ostream::~ostream(&v20, off_10018EB98);
    sub_100108B80((uint64_t)v19);
    std::ios::~ios(v21);
    if ((_DWORD)a2 == 2)
      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, 0);
    v15 = (unint64_t *)(*(_QWORD *)(a1 + 40) + 56);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 | 2, v15));
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 1);
  }
LABEL_6:
  if ((_DWORD)v4)
  {
    *(_QWORD *)&v17 = "int FileLocal::flush(di_flush_mode)";
    *((_QWORD *)&v17 + 1) = 20;
    v18 = 16;
    sub_1000785F0(v19, &v17);
    sub_10011E5A4(&v20, a2);
    sub_100005A0C(&v20, (uint64_t)" failed wih error ", 18);
    std::ostream::operator<<(&v20, v4);
    std::ostream::~ostream(&v20, off_10017E1D0);
    sub_100080004((uint64_t)v19);
    std::ios::~ios(v21);
  }
  return v4;
}

void sub_10010388C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100103978((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001038D0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010D100((uint64_t)a1, a2);
  *a1 = off_10018EAD0;
  a1[45] = &off_10018EBD0;
  a1[46] = &off_10018EBF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018EAD0;
  a1[45] = off_10018EB58;
  a1[46] = off_10018EB80;
  return a1;
}

void sub_100103954(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100108B80(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100103978(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018EB98);
  sub_100108B80(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1001039B8(uint64_t a1, unint64_t a2, size_t a3)
{
  uint64_t v6;
  size_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  ssize_t v17;
  int *v19;
  size_t v20;
  int *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  size_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  int *v36;
  int *v37;
  __int128 v38;
  int v39;
  __int128 v40;
  size_t v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  _BYTE v49[152];

  v6 = *(_QWORD *)(a1 + 40);
  sub_100102A50(v6);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = *(unsigned __int8 *)(v6 + 88);
  v9 = *(_QWORD *)(a1 + 40);
  sub_100102A50(v9);
  if (!*(_BYTE *)(v9 + 136) || !v8)
  {
    *(_QWORD *)&v40 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
    *((_QWORD *)&v40 + 1) = 26;
    LODWORD(v41) = 0;
    sub_100103ED8(&v42, &v40);
    sub_100005A0C(&v48, (uint64_t)"fd block size retrieval failed (err code ", 41);
    std::ostream::operator<<(&v48, v7);
    sub_100005A0C(&v48, (uint64_t)")", 1);
    std::ostream::~ostream(&v48, off_10018EDB8);
    sub_10010916C((uint64_t)&v42);
    goto LABEL_14;
  }
  v10 = *(void **)(v9 + 96);
  v11 = (a2 + v7 - 1) / v7 * v7;
  v12 = a3 + a2;
  if (a2 <= v11 && v11 < v12)
  {
    v14 = a2 - v11 + a3;
    v15 = v14 / v7 * v7;
    v16 = v14 == v14 % v7 ? 0 : (a2 + v7 - 1) / v7 * v7;
    if (v14 != v14 % v7)
    {
      *(_QWORD *)&v40 = 0;
      *((_QWORD *)&v40 + 1) = v16;
      v41 = v14 / v7 * v7;
      v20 = fcntl(**(_DWORD **)(a1 + 56), 99, &v40);
      if (!(_DWORD)v20)
      {
        v22 = v16 - a2;
        if (v16 != a2)
        {
          v23 = (std::__shared_weak_count *)*((_QWORD *)sub_1001207C0() + 1);
          v42 = v10;
          v43 = v23;
          if (v23)
          {
            p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldxr(p_shared_owners);
            while (__stxr(v25 + 1, p_shared_owners));
          }
          v44 = v16 - a2;
          v45 = a2;
          v46 = v16 - a2;
          v47 = 0;
          v7 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, &v42);
          v26 = v43;
          if (v43)
          {
            v27 = (unint64_t *)&v43->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          if ((v7 & 0x80000000) != 0)
          {
            *(_QWORD *)&v38 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
            *((_QWORD *)&v38 + 1) = 26;
            v39 = 16;
            sub_1001040A8(&v42, &v38);
            sub_100005A0C(&v48, (uint64_t)"Write zeros to unmap unaligned start region failed (err code", 60);
            v37 = __error();
            std::ostream::operator<<(&v48, *v37);
            sub_100005A0C(&v48, (uint64_t)")", 1);
            sub_100104150((uint64_t)&v42);
            return v7;
          }
        }
        if (v15 + v16 < v12)
        {
          v29 = a3 - (v22 + v15);
          v30 = (std::__shared_weak_count *)*((_QWORD *)sub_1001207C0() + 1);
          v42 = v10;
          v43 = v30;
          if (v30)
          {
            v31 = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }
          v44 = v29;
          v45 = v15 + v16;
          v46 = v29;
          v47 = 0;
          v7 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, &v42);
          v33 = v43;
          if (v43)
          {
            v34 = (unint64_t *)&v43->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          if ((v7 & 0x80000000) != 0)
          {
            *(_QWORD *)&v38 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
            *((_QWORD *)&v38 + 1) = 26;
            v39 = 16;
            sub_100104190(&v42, &v38);
            sub_100005A0C(&v48, (uint64_t)"Write zeros to unmap unaligned end region failed (err code", 58);
            v36 = __error();
            std::ostream::operator<<(&v48, *v36);
            sub_100005A0C(&v48, (uint64_t)")", 1);
            sub_100104238((uint64_t)&v42);
            return v7;
          }
        }
        return 0;
      }
      v7 = v20;
      *(_QWORD *)&v38 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
      *((_QWORD *)&v38 + 1) = 26;
      v39 = 0;
      sub_100103FC0(&v42, &v38);
      sub_100005A0C(&v48, (uint64_t)"Punch hole is not supported (err code ", 38);
      v21 = __error();
      std::ostream::operator<<(&v48, *v21);
      sub_100005A0C(&v48, (uint64_t)")", 1);
      std::ostream::~ostream(&v48, off_10018EFD8);
      sub_100109758((uint64_t)&v42);
LABEL_14:
      std::ios::~ios(v49);
      return v7;
    }
  }
  v17 = sub_100104278(a1, a2, a3, v7, v10);
  if (v17 == a3)
    return 0;
  v7 = v17;
  *(_QWORD *)&v40 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
  *((_QWORD *)&v40 + 1) = 26;
  LODWORD(v41) = 16;
  sub_100104430(&v42, &v40);
  sub_100005A0C(&v48, (uint64_t)"Write zeros to unmap region failed (err code", 44);
  v19 = __error();
  std::ostream::operator<<(&v48, *v19);
  sub_100005A0C(&v48, (uint64_t)")", 1);
  std::ostream::~ostream(&v48, off_10018F638);
  sub_10010A91C((uint64_t)&v42);
  std::ios::~ios(v49);
  if ((v7 & 0x8000000000000000) == 0)
    return 4294967291;
  else
    return v7;
}

void sub_100103E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_100012168((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100103ED8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010D17C((uint64_t)a1, a2);
  *a1 = off_10018ECF0;
  a1[45] = &off_10018EDF0;
  a1[46] = &off_10018EE18;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018ECF0;
  a1[45] = off_10018ED78;
  a1[46] = off_10018EDA0;
  return a1;
}

void sub_100103F5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10010916C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100103F80(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018EDB8);
  sub_10010916C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100103FC0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010D1F8((uint64_t)a1, a2);
  *a1 = off_10018EF10;
  a1[45] = &off_10018F010;
  a1[46] = &off_10018F038;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018EF10;
  a1[45] = off_10018EF98;
  a1[46] = off_10018EFC0;
  return a1;
}

void sub_100104044(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100109758(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100104068(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018EFD8);
  sub_100109758(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1001040A8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010D274((uint64_t)a1, a2);
  *a1 = off_10018F130;
  a1[45] = &off_10018F230;
  a1[46] = &off_10018F258;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018F130;
  a1[45] = off_10018F1B8;
  a1[46] = off_10018F1E0;
  return a1;
}

void sub_10010412C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100109D44(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100104150(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018F1F8);
  sub_100109D44(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100104190(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010D2F0((uint64_t)a1, a2);
  *a1 = off_10018F350;
  a1[45] = &off_10018F450;
  a1[46] = &off_10018F478;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018F350;
  a1[45] = off_10018F3D8;
  a1[46] = off_10018F400;
  return a1;
}

void sub_100104214(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10010A330(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100104238(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018F418);
  sub_10010A330(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

ssize_t sub_100104278(uint64_t a1, off_t a2, size_t a3, size_t a4, void *a5)
{
  size_t v7;
  iovec *v10;
  size_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  iovec *v16;
  iovec *v17;
  iovec *v18;
  iovec *v19;
  ssize_t v20;
  iovec *v22;
  iovec *v23;
  iovec *v24;

  v7 = a3;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  sub_100104518((void **)&v22, (a3 + a4 - 1) / a4 * a4);
  if (v7)
  {
    v10 = v23;
    do
    {
      if (v7 >= a4)
        v11 = a4;
      else
        v11 = v7;
      if (v10 >= v24)
      {
        v12 = v10 - v22;
        if ((unint64_t)(v12 + 1) >> 60)
          sub_100017E44();
        v13 = ((char *)v24 - (char *)v22) >> 3;
        if (v13 <= v12 + 1)
          v13 = v12 + 1;
        if ((unint64_t)((char *)v24 - (char *)v22) >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)sub_100017E58((uint64_t)&v24, v14);
        else
          v15 = 0;
        v16 = (iovec *)&v15[16 * v12];
        v16->iov_base = a5;
        v16->iov_len = v11;
        v18 = v22;
        v17 = v23;
        v19 = v16;
        if (v23 != v22)
        {
          do
          {
            v19[-1] = v17[-1];
            --v19;
            --v17;
          }
          while (v17 != v18);
          v17 = v22;
        }
        v10 = v16 + 1;
        v22 = v19;
        v23 = v16 + 1;
        v24 = (iovec *)&v15[16 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        v10->iov_base = a5;
        v10->iov_len = v11;
        ++v10;
      }
      v23 = v10;
      v7 -= v11;
    }
    while (v7);
  }
  else
  {
    v10 = v23;
  }
  v20 = pwritev(**(_DWORD **)(a1 + 56), v22, (unint64_t)((char *)v10 - (char *)v22) >> 4, a2);
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  return v20;
}

void sub_10010440C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100104430(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010D36C((uint64_t)a1, a2);
  *a1 = off_10018F570;
  a1[45] = &off_10018F670;
  a1[46] = &off_10018F698;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018F570;
  a1[45] = off_10018F5F8;
  a1[46] = off_10018F620;
  return a1;
}

void sub_1001044B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10010A91C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001044D8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018F638);
  sub_10010A91C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_100104518(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      sub_100017E44();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_100017E58(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_1001045B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v4;
  int v5;
  const char *v6;
  uint64_t v7;
  int *v8;
  int *v9;
  __int128 v10;
  int v11;
  _QWORD v12[45];
  uint64_t v13;
  _BYTE v14[152];

  v1 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v1 + 48)
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0 && sub_1000470AC(*(_QWORD *)(a1 + 40)))
  {
    return 0;
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if (v4)
    v5 = 6;
  else
    v5 = 5;
  if (!flock(**(_DWORD **)(a1 + 56), v5))
  {
    *(_QWORD *)&v10 = "int FileLocal::lock()";
    *((_QWORD *)&v10 + 1) = 19;
    v11 = 0;
    sub_100055224(v12, &v10);
    sub_100005A0C(&v13, (uint64_t)"File (fd ", 9);
    std::ostream::operator<<(&v13, **(unsigned int **)(a1 + 56));
    sub_100005A0C(&v13, (uint64_t)") is locked", 11);
    std::ostream::~ostream(&v13, off_100175C90);
    sub_100055388((uint64_t)v12);
    std::ios::~ios(v14);
    result = 0;
    *(_BYTE *)(v1 + 48) = 1;
    return result;
  }
  if (*__error() != 35)
  {
    *(_QWORD *)&v10 = "int FileLocal::lock()";
    *((_QWORD *)&v10 + 1) = 19;
    v11 = 0;
    sub_1000A2DE8(v12, &v10);
    sub_100005A0C(&v13, (uint64_t)"flock returned errno ", 21);
    v9 = __error();
    std::ostream::operator<<(&v13, *v9);
    sub_100005A0C(&v13, (uint64_t)", keeping file unlocked", 23);
    std::ostream::~ostream(&v13, off_1001841F8);
    sub_1000AE42C((uint64_t)v12);
    std::ios::~ios(v14);
    return 0;
  }
  *(_QWORD *)&v10 = "int FileLocal::lock()";
  *((_QWORD *)&v10 + 1) = 19;
  v11 = 16;
  sub_100104868(v12, &v10);
  sub_100005A0C(&v13, (uint64_t)"Cannot acquire ", 15);
  if (v4)
    v6 = "exclusive";
  else
    v6 = "shared";
  if (v4)
    v7 = 9;
  else
    v7 = 6;
  sub_100005A0C(&v13, (uint64_t)v6, v7);
  sub_100005A0C(&v13, (uint64_t)" lock, errno ", 13);
  v8 = __error();
  std::ostream::operator<<(&v13, *v8);
  std::ostream::~ostream(&v13, off_10018F858);
  sub_10010AF08((uint64_t)v12);
  std::ios::~ios(v14);
  return -*__error();
}

void sub_100104830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100104910((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100104868(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010D3E8((uint64_t)a1, a2);
  *a1 = off_10018F790;
  a1[45] = &off_10018F890;
  a1[46] = &off_10018F8B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018F790;
  a1[45] = off_10018F818;
  a1[46] = off_10018F840;
  return a1;
}

void sub_1001048EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10010AF08(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100104910(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018F858);
  sub_10010AF08(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100104950(uint64_t a1)
{
  return sub_1001045B8(a1 - 24);
}

uint64_t sub_100104958(uint64_t a1)
{
  uint64_t v1;
  int *v3;
  uint64_t result;
  __int128 v5;
  int v6;
  _QWORD v7[45];
  uint64_t v8;
  _BYTE v9[152];

  v1 = *(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(v1 + 48))
    return 0;
  if (flock(**(_DWORD **)(a1 + 56), 8))
  {
    *(_QWORD *)&v5 = "int FileLocal::unlock_all()";
    *((_QWORD *)&v5 + 1) = 25;
    v6 = 16;
    sub_100104AF8(v7, &v5);
    sub_100005A0C(&v8, (uint64_t)"Failed unlocking file with fd ", 30);
    std::ostream::operator<<(&v8, **(unsigned int **)(a1 + 56));
    sub_100005A0C(&v8, (uint64_t)", errno ", 8);
    v3 = __error();
    std::ostream::operator<<(&v8, *v3);
    std::ostream::~ostream(&v8, off_10018FA78);
    sub_10010B4F4((uint64_t)v7);
    std::ios::~ios(v9);
    return -*__error();
  }
  else
  {
    *(_QWORD *)&v5 = "int FileLocal::unlock_all()";
    *((_QWORD *)&v5 + 1) = 25;
    v6 = 0;
    sub_1000A3118(v7, &v5);
    sub_100005A0C(&v8, (uint64_t)"File (fd ", 9);
    std::ostream::operator<<(&v8, **(unsigned int **)(a1 + 56));
    sub_100005A0C(&v8, (uint64_t)") is unlocked", 13);
    std::ostream::~ostream(&v8, off_100184638);
    sub_1000AF004((uint64_t)v7);
    std::ios::~ios(v9);
    result = 0;
    *(_BYTE *)(v1 + 48) = 0;
  }
  return result;
}

void sub_100104AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000A31C0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100104AF8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010D464((uint64_t)a1, a2);
  *a1 = off_10018F9B0;
  a1[45] = &off_10018FAB0;
  a1[46] = &off_10018FAD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018F9B0;
  a1[45] = off_10018FA38;
  a1[46] = off_10018FA60;
  return a1;
}

void sub_100104B7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10010B4F4(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100104BA0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018FA78);
  sub_10010B4F4(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100104BE0(uint64_t a1)
{
  return sub_100104958(a1 - 24);
}

uint64_t sub_100104BE8(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 48);
}

uint64_t sub_100104BF4(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 48);
}

uint64_t sub_100104C00(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 40);
  result = *(unsigned __int8 *)(v1 + 48);
  *(_BYTE *)(v1 + 48) = 0;
  return result;
}

_QWORD *sub_100104C10(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  int v12;
  off_t v13;
  ssize_t v14;
  uint64_t v15;
  int v16;
  ssize_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  size_t *p_iov_len;
  ssize_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  __int128 v39;
  iovec **v40;
  iovec *v41;
  __int128 v42;
  _QWORD v43[32];

  v1 = result[9];
  if (v1)
  {
    v2 = result;
    v38 = *(unsigned __int8 *)(result[5] + 49);
    v37 = result + 8;
    v3 = (_QWORD *)result[8];
    v4 = v3;
    while (1)
    {
      v41 = (iovec *)v43;
      v5 = v4[2];
      v43[0] = *v4;
      v43[1] = v5;
      v42 = xmmword_100149560;
      v6 = &v3[8 * v1];
      v40 = &v41;
      if (v4 == v6)
      {
        v7 = 1;
        v8 = (unint64_t)v4;
      }
      else
      {
        v7 = 1;
        v8 = (unint64_t)v4;
        if (v4 + 8 != v6)
        {
          v9 = v4;
          while (v9[2] + v9[3] == v9[11] && *((_DWORD *)v9 + 12) == *((_DWORD *)v9 + 28))
          {
            *(_QWORD *)&v39 = v9[8];
            *((_QWORD *)&v39 + 1) = v9[10];
            sub_10010D4E0((uint64_t *)&v40, &v39);
            v8 = (unint64_t)(v9 + 8);
            v10 = v9 + 16;
            v9 += 8;
            if (v10 == v6)
              goto LABEL_11;
          }
          v8 = (unint64_t)v9;
LABEL_11:
          v7 = v42;
        }
      }
      v11 = v8 + 64;
      v12 = *((_DWORD *)v4 + 12);
      if (v12 == 1)
      {
        v15 = v4[3];
        v16 = *(_DWORD *)v2[7];
        if (v7 == 1)
          v17 = pwrite(v16, v41->iov_base, v41->iov_len, v4[3]);
        else
          v17 = pwritev(v16, v41, (v11 - (unint64_t)v4) >> 6, v4[3]);
        v19 = v17;
        if (v17 < 1)
          goto LABEL_45;
        v28 = v17 + v15;
        v29 = (unint64_t *)(v2[5] + 64);
        v30 = atomic_load(v29);
        if (v30 < v17 + v15)
        {
          do
          {
            v31 = __ldaxr(v29);
            if (v31 == v30)
            {
              if (!__stlxr(v28, v29))
                goto LABEL_45;
            }
            else
            {
              __clrex();
            }
            v30 = v31;
          }
          while (v31 < v28);
          goto LABEL_45;
        }
      }
      else
      {
        if (!v12)
        {
          v13 = v4[3];
          if (v7 == 1)
          {
            v14 = pread(*(_DWORD *)v2[7], v41->iov_base, v41->iov_len, v4[3]);
LABEL_44:
            v19 = v14;
LABEL_45:
            if (v19 == -1)
              v19 = -(uint64_t)*__error();
            goto LABEL_47;
          }
          if (!v38)
          {
            v14 = preadv(*(_DWORD *)v2[7], v41, (v11 - (unint64_t)v4) >> 6, v13);
            goto LABEL_44;
          }
          v18 = v11 - (_QWORD)v4;
          if ((v11 - (_QWORD)v4) << 26)
          {
            v19 = 0;
            v20 = 0;
            v21 = *(_DWORD *)v2[7];
            v22 = 16 * (int)(v18 >> 6);
            p_iov_len = &v41->iov_len;
            do
            {
              if ((v20 & 0x8000000000000000) == 0)
              {
                v24 = pread(v21, (void *)*(p_iov_len - 1), *p_iov_len, v20 + v13);
                v25 = *p_iov_len;
                v26 = v19 + v24;
                v27 = -5;
                if (v24 == -1)
                  v27 = -1;
                if (v24 == v25)
                  v19 += v24;
                else
                  v19 = v27;
                if (v24 == v25)
                  v20 = v26;
                else
                  v20 = v27;
              }
              p_iov_len += 2;
              v22 -= 16;
            }
            while (v22);
            goto LABEL_45;
          }
        }
        v19 = 0;
      }
LABEL_47:
      v32 = v4 + 7;
      do
      {
        v33 = v19;
        if (v19 >= 1)
        {
          if (*(v32 - 5) >= v19)
            v33 = v19;
          else
            v33 = *(v32 - 5);
        }
        v34 = *v32;
        *(_DWORD *)v34 = v33;
        *(_BYTE *)(v34 + 4) = 1;
        sub_10003DF28((uint64_t)v32);
        v19 -= v33 & ~(v33 >> 63);
        v35 = v32 + 8;
        v36 = v32 + 1;
        v32 += 8;
      }
      while ((unint64_t)v36 <= v8);
      if (*((_QWORD *)&v42 + 1))
      {
        if (v43 != (_QWORD *)v41)
          operator delete(v41);
      }
      v4 = v35 - 7;
      v3 = (_QWORD *)v2[8];
      v1 = v2[9];
      if (v35 - 7 == &v3[8 * v1])
        return sub_10010D548(v37);
    }
  }
  return result;
}

void sub_100104F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18)
{
  void *v18;

  if (a18)
  {
    if (v18 != __p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100104FB0(uint64_t a1, uint64_t a2)
{
  return sub_1001029B0(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
}

uint64_t sub_100104FBC(uint64_t a1)
{
  int *v2;
  std::__shared_weak_count *v3;
  __int128 v5;
  int v6;
  _QWORD v7[45];
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_10018D6C0;
  *(_QWORD *)(a1 + 24) = off_10018D7A0;
  *(_QWORD *)(a1 + 32) = off_10018D7D8;
  if (futimes(**(_DWORD **)(a1 + 56), 0))
  {
    *(_QWORD *)&v5 = "PurgeableFileBackend::~PurgeableFileBackend()";
    *((_QWORD *)&v5 + 1) = 43;
    v6 = 16;
    sub_1001050E4(v7, &v5);
    sub_100005A0C(&v8, (uint64_t)"futimes failed on ", 18);
    sub_10011E7F0((uint64_t)&v8, a1);
    sub_100005A0C(&v8, (uint64_t)", errno ", 8);
    v2 = __error();
    std::ostream::operator<<(&v8, *v2);
    std::ostream::~ostream(&v8, off_10018FC98);
    sub_10010BAE0((uint64_t)v7);
    std::ios::~ios(&v9);
  }
  *(_QWORD *)a1 = off_10018D828;
  *(_QWORD *)(a1 + 24) = off_10018D908;
  *(_QWORD *)(a1 + 32) = off_10018D940;
  sub_100047198(a1 + 64);
  sub_100012168(a1 + 40);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

_QWORD *sub_1001050E4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010D590((uint64_t)a1, a2);
  *a1 = off_10018FBD0;
  a1[45] = &off_10018FCD0;
  a1[46] = &off_10018FCF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018FBD0;
  a1[45] = off_10018FC58;
  a1[46] = off_10018FC80;
  return a1;
}

void sub_100105168(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10010BAE0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010518C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018FC98);
  sub_10010BAE0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1001051D0(uint64_t a1)
{
  return sub_100104FBC(a1 - 24);
}

uint64_t sub_1001051D8(uint64_t a1)
{
  return sub_100104FBC(a1 - 32);
}

void sub_1001051E0(uint64_t a1)
{
  sub_100104FBC(a1);
  operator delete();
}

void sub_100105204(uint64_t a1)
{
  sub_100104FBC(a1 - 24);
  operator delete();
}

void sub_10010522C(uint64_t a1)
{
  sub_100104FBC(a1 - 32);
  operator delete();
}

uint64_t sub_100105254(uint64_t a1)
{
  const void *v1;
  uint64_t (***v3)(_QWORD);
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v1 = *(const void **)a1;
  if (!*(_QWORD *)a1)
    return 0xFFFFFFFFLL;
  if (!v3)
  {
    if (v11)
    {
      v4 = *(std::__shared_weak_count **)(a1 + 8);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v11 + 176))(v11);
      if (v4)
      {
        v14 = (unint64_t *)&v4->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
          goto LABEL_13;
      }
      return v7;
    }
    return 0xFFFFFFFFLL;
  }
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    v5 = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (**v3)(v3);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
LABEL_13:
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v7;
}

void sub_1001053A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100012168((uint64_t)&a9);
  sub_100012168((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1001053CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = off_10018D828;
  a1[3] = off_10018D908;
  a1[4] = off_10018D940;
  sub_100047198((uint64_t)(a1 + 8));
  sub_100012168((uint64_t)(a1 + 5));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete();
}

BOOL sub_100105430(uint64_t a1)
{
  return sub_100092AD4(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100105438(uint64_t a1)
{
  return atomic_load((unint64_t *)(*(_QWORD *)(a1 + 40) + 64));
}

uint64_t sub_100105448(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 12);
}

_QWORD *sub_100105454(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = sub_100005A0C(a2, (uint64_t)"file(", 5);
  v4 = (_QWORD *)std::ostream::operator<<(v3, **(unsigned int **)(a1 + 56));
  return sub_100005A0C(v4, (uint64_t)")", 1);
}

double sub_1001054A0@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_10010BED8(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

unint64_t sub_1001054DC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X8>)
{
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t result;
  uint64_t v21;
  std::__shared_weak_count *v22;
  _OWORD v23[2];
  int v24;
  uint64_t *v25;
  _BYTE v26[40];
  uint64_t *v27;
  uint64_t *v28;

  LOBYTE(v21) = 0;
  BYTE4(v21) = 0;
  v22 = 0;
  *(_QWORD *)&v23[0] = sub_10011E1E0((unint64_t)&v21);
  v6 = sub_10011E2A0((unint64_t)&v21);
  v28 = &v21;
  *((_QWORD *)&v23[0] + 1) = v6;
  *(_QWORD *)&v23[1] = &v28;
  sub_10003DF88((unint64_t)v26, (uint64_t)&v21);
  v7 = v28;
  v27 = v28;
  v28[4] = (uint64_t)&v27;
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v7 = v27;
  }
  *(_OWORD *)((char *)v23 + 9) = *(_OWORD *)((char *)a2 + 25);
  v23[0] = *((_OWORD *)a2 + 1);
  v24 = 0;
  v25 = v7;
  v27 = 0;
  v7[4] = (uint64_t)&v25;
  v12 = a1[9];
  v13 = a1[8] + (v12 << 6);
  if (v12 == a1[10])
  {
    sub_10010BFF4(a1 + 8, v13, 1, (uint64_t)&v21, &v28);
    if (v25)
      v25[4] = 0;
  }
  else
  {
    *(_QWORD *)v13 = v8;
    *(_QWORD *)(v13 + 8) = v9;
    v21 = 0;
    v22 = 0;
    v14 = v23[0];
    *(_OWORD *)(v13 + 25) = *(_OWORD *)((char *)v23 + 9);
    *(_OWORD *)(v13 + 16) = v14;
    v15 = v24;
    *(_QWORD *)(v13 + 56) = v25;
    v16 = v13 + 56;
    *(_DWORD *)(v16 - 8) = v15;
    v25 = 0;
    *(_QWORD *)(*(_QWORD *)v16 + 32) = v16;
    ++a1[9];
  }
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  result = sub_10003DF88(a3, (uint64_t)v26);
  if (v27)
    v27[4] = 0;
  return result;
}

void sub_100105678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17)
    *(_QWORD *)(a17 + 32) = 0;
  sub_100012168((uint64_t)&a10);
  if (a23)
    *(_QWORD *)(a23 + 32) = 0;
  _Unwind_Resume(a1);
}

void sub_1001056AC()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 40))
    JUMPOUT(0x1001056A4);
  JUMPOUT(0x1001056A0);
}

unint64_t sub_1001056BC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X8>)
{
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t result;
  uint64_t v21;
  std::__shared_weak_count *v22;
  _OWORD v23[2];
  int v24;
  uint64_t *v25;
  _BYTE v26[40];
  uint64_t *v27;
  uint64_t *v28;

  LOBYTE(v21) = 0;
  BYTE4(v21) = 0;
  v22 = 0;
  *(_QWORD *)&v23[0] = sub_10011E1E0((unint64_t)&v21);
  v6 = sub_10011E2A0((unint64_t)&v21);
  v28 = &v21;
  *((_QWORD *)&v23[0] + 1) = v6;
  *(_QWORD *)&v23[1] = &v28;
  sub_10003DF88((unint64_t)v26, (uint64_t)&v21);
  v7 = v28;
  v27 = v28;
  v28[4] = (uint64_t)&v27;
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v7 = v27;
  }
  *(_OWORD *)((char *)v23 + 9) = *(_OWORD *)((char *)a2 + 25);
  v23[0] = *((_OWORD *)a2 + 1);
  v24 = 1;
  v25 = v7;
  v27 = 0;
  v7[4] = (uint64_t)&v25;
  v12 = a1[9];
  v13 = a1[8] + (v12 << 6);
  if (v12 == a1[10])
  {
    sub_10010BFF4(a1 + 8, v13, 1, (uint64_t)&v21, &v28);
    if (v25)
      v25[4] = 0;
  }
  else
  {
    *(_QWORD *)v13 = v8;
    *(_QWORD *)(v13 + 8) = v9;
    v21 = 0;
    v22 = 0;
    v14 = v23[0];
    *(_OWORD *)(v13 + 25) = *(_OWORD *)((char *)v23 + 9);
    *(_OWORD *)(v13 + 16) = v14;
    v15 = v24;
    *(_QWORD *)(v13 + 56) = v25;
    v16 = v13 + 56;
    *(_DWORD *)(v16 - 8) = v15;
    v25 = 0;
    *(_QWORD *)(*(_QWORD *)v16 + 32) = v16;
    ++a1[9];
  }
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  result = sub_10003DF88(a3, (uint64_t)v26);
  if (v27)
    v27[4] = 0;
  return result;
}

void sub_10010585C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17)
    *(_QWORD *)(a17 + 32) = 0;
  sub_100012168((uint64_t)&a10);
  if (a23)
    *(_QWORD *)(a23 + 32) = 0;
  _Unwind_Resume(a1);
}

void sub_100105890()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 40))
    JUMPOUT(0x100105888);
  JUMPOUT(0x100105884);
}

uint64_t sub_1001058A0(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32);
}

uint64_t sub_1001058AC(uint64_t a1)
{
  return **(unsigned int **)(a1 + 56);
}

void sub_1001058B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *(a1 - 3) = off_10018D828;
  *a1 = off_10018D908;
  a1[1] = off_10018D940;
  sub_100047198((uint64_t)(a1 + 5));
  sub_100012168((uint64_t)(a1 + 2));
  v2 = (std::__shared_weak_count *)*(a1 - 1);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_100105904(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *(a1 - 3) = off_10018D828;
  *a1 = off_10018D908;
  a1[1] = off_10018D940;
  sub_100047198((uint64_t)(a1 + 5));
  sub_100012168((uint64_t)(a1 + 2));
  v2 = (std::__shared_weak_count *)*(a1 - 1);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete();
}

uint64_t sub_100105968(uint64_t a1)
{
  return **(unsigned int **)(a1 + 24);
}

void sub_100105974(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *(a1 - 4) = off_10018D828;
  *(a1 - 1) = off_10018D908;
  *a1 = off_10018D940;
  sub_100047198((uint64_t)(a1 + 4));
  sub_100012168((uint64_t)(a1 + 1));
  v2 = (std::__shared_weak_count *)*(a1 - 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_1001059C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *(a1 - 4) = off_10018D828;
  *(a1 - 1) = off_10018D908;
  *a1 = off_10018D940;
  sub_100047198((uint64_t)(a1 + 4));
  sub_100012168((uint64_t)(a1 + 1));
  v2 = (std::__shared_weak_count *)*(a1 - 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete();
}

uint64_t sub_100105A2C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018DA98);
  sub_100105C20(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100105A64(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018DA98);
  sub_100105C20(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100105AA4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018DA98);
  sub_100105C20(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100105AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100105B2C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100105B78(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018DA98);
  sub_100105C20(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100105BC8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018DA98);
  sub_100105C20(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100105C20(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018DB68;
  sub_100105CBC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100105CBC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100105E34((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100105DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100105E10(uint64_t a1)
{
  sub_100105C20(a1);
  operator delete();
}

int *sub_100105E34(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 66;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 66;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100106018(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018DCB8);
  sub_10010620C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100106050(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018DCB8);
  sub_10010620C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100106090(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018DCB8);
  sub_10010620C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1001060E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100106118(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100106164(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018DCB8);
  sub_10010620C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1001061B4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018DCB8);
  sub_10010620C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10010620C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018DD88;
  sub_1001062A8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1001062A8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100106420((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1001063D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001063FC(uint64_t a1)
{
  sub_10010620C(a1);
  operator delete();
}

int *sub_100106420(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 78;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 78;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100106604(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018DED8);
  sub_1001067F8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10010663C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018DED8);
  sub_1001067F8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10010667C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018DED8);
  sub_1001067F8(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1001066D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100106704(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100106750(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018DED8);
  sub_1001067F8(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1001067A0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018DED8);
  sub_1001067F8(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1001067F8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018DFA8;
  sub_100106894(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100106894(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100106A0C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1001069BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001069E8(uint64_t a1)
{
  sub_1001067F8(a1);
  operator delete();
}

int *sub_100106A0C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 95;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 95;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100106BF0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018E0F8);
  sub_100106DE4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100106C28(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018E0F8);
  sub_100106DE4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100106C68(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018E0F8);
  sub_100106DE4(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100106CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100106CF0(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100106D3C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018E0F8);
  sub_100106DE4(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100106D8C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018E0F8);
  sub_100106DE4(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100106DE4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018E1C8;
  sub_100106E80(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100106E80(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100106FF8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100106FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100106FD4(uint64_t a1)
{
  sub_100106DE4(a1);
  operator delete();
}

int *sub_100106FF8(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 103;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 103;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1001071DC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018E318);
  sub_1001073D0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100107214(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018E318);
  sub_1001073D0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100107254(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018E318);
  sub_1001073D0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1001072A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1001072DC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100107328(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018E318);
  sub_1001073D0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100107378(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018E318);
  sub_1001073D0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1001073D0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018E3E8;
  sub_10010746C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10010746C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1001075E4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100107594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001075C0(uint64_t a1)
{
  sub_1001073D0(a1);
  operator delete();
}

int *sub_1001075E4(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 298;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 298;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1001077C8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018E538);
  sub_1001079BC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100107800(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018E538);
  sub_1001079BC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100107840(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018E538);
  sub_1001079BC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100107894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1001078C8(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100107914(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018E538);
  sub_1001079BC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100107964(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018E538);
  sub_1001079BC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1001079BC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018E608;
  sub_100107A58(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100107A58(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100107BD0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100107B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100107BAC(uint64_t a1)
{
  sub_1001079BC(a1);
  operator delete();
}

int *sub_100107BD0(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 313;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 313;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100107DB4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018E758);
  sub_100107FA8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100107DEC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018E758);
  sub_100107FA8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100107E2C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018E758);
  sub_100107FA8(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100107E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100107EB4(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100107F00(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018E758);
  sub_100107FA8(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100107F50(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018E758);
  sub_100107FA8(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100107FA8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018E828;
  sub_100108044(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100108044(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1001081BC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10010816C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100108198(uint64_t a1)
{
  sub_100107FA8(a1);
  operator delete();
}

int *sub_1001081BC(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 331;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 331;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1001083A0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018E978);
  sub_100108594(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1001083D8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018E978);
  sub_100108594(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100108418(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018E978);
  sub_100108594(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10010846C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1001084A0(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1001084EC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018E978);
  sub_100108594(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10010853C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018E978);
  sub_100108594(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100108594(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018EA48;
  sub_100108630(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100108630(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1001087A8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100108758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100108784(uint64_t a1)
{
  sub_100108594(a1);
  operator delete();
}

int *sub_1001087A8(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 336;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 336;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10010898C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018EB98);
  sub_100108B80(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1001089C4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018EB98);
  sub_100108B80(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100108A04(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018EB98);
  sub_100108B80(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100108A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100108A8C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100108AD8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018EB98);
  sub_100108B80(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100108B28(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018EB98);
  sub_100108B80(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100108B80(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018EC68;
  sub_100108C1C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100108C1C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100108D94((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100108D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100108D70(uint64_t a1)
{
  sub_100108B80(a1);
  operator delete();
}

int *sub_100108D94(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 388;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 388;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100108F78(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018EDB8);
  sub_10010916C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100108FB0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018EDB8);
  sub_10010916C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100108FF0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018EDB8);
  sub_10010916C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100109044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100109078(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1001090C4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018EDB8);
  sub_10010916C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100109114(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018EDB8);
  sub_10010916C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10010916C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018EE88;
  sub_100109208(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100109208(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100109380((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100109330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10010935C(uint64_t a1)
{
  sub_10010916C(a1);
  operator delete();
}

int *sub_100109380(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 411;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 411;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100109564(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018EFD8);
  sub_100109758(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10010959C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018EFD8);
  sub_100109758(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1001095DC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018EFD8);
  sub_100109758(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100109630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100109664(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1001096B0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018EFD8);
  sub_100109758(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100109700(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018EFD8);
  sub_100109758(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100109758(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018F0A8;
  sub_1001097F4(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1001097F4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10010996C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10010991C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100109948(uint64_t a1)
{
  sub_100109758(a1);
  operator delete();
}

int *sub_10010996C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 424;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 424;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100109B50(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018F1F8);
  sub_100109D44(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100109B88(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018F1F8);
  sub_100109D44(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100109BC8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018F1F8);
  sub_100109D44(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100109C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100109C50(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100109C9C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018F1F8);
  sub_100109D44(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100109CEC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018F1F8);
  sub_100109D44(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100109D44(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018F2C8;
  sub_100109DE0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100109DE0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100109F58((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100109F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100109F34(uint64_t a1)
{
  sub_100109D44(a1);
  operator delete();
}

int *sub_100109F58(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 432;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 432;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10010A13C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018F418);
  sub_10010A330(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10010A174(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018F418);
  sub_10010A330(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10010A1B4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018F418);
  sub_10010A330(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10010A208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10010A23C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10010A288(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018F418);
  sub_10010A330(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10010A2D8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018F418);
  sub_10010A330(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10010A330(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018F4E8;
  sub_10010A3CC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10010A3CC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10010A544((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10010A4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10010A520(uint64_t a1)
{
  sub_10010A330(a1);
  operator delete();
}

int *sub_10010A544(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 441;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 441;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10010A728(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018F638);
  sub_10010A91C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10010A760(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018F638);
  sub_10010A91C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10010A7A0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018F638);
  sub_10010A91C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10010A7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10010A828(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10010A874(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018F638);
  sub_10010A91C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10010A8C4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018F638);
  sub_10010A91C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10010A91C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018F708;
  sub_10010A9B8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10010A9B8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10010AB30((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10010AAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10010AB0C(uint64_t a1)
{
  sub_10010A91C(a1);
  operator delete();
}

int *sub_10010AB30(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 449;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 449;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10010AD14(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018F858);
  sub_10010AF08(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10010AD4C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018F858);
  sub_10010AF08(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10010AD8C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018F858);
  sub_10010AF08(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10010ADE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10010AE14(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10010AE60(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018F858);
  sub_10010AF08(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10010AEB0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018F858);
  sub_10010AF08(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10010AF08(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018F928;
  sub_10010AFA4(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10010AFA4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10010B11C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10010B0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10010B0F8(uint64_t a1)
{
  sub_10010AF08(a1);
  operator delete();
}

int *sub_10010B11C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 489;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 489;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10010B300(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018FA78);
  sub_10010B4F4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10010B338(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018FA78);
  sub_10010B4F4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10010B378(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018FA78);
  sub_10010B4F4(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10010B3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10010B400(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10010B44C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018FA78);
  sub_10010B4F4(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10010B49C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018FA78);
  sub_10010B4F4(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10010B4F4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018FB48;
  sub_10010B590(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10010B590(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10010B708((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10010B6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10010B6E4(uint64_t a1)
{
  sub_10010B4F4(a1);
  operator delete();
}

int *sub_10010B708(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 502;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 502;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10010B8EC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018FC98);
  sub_10010BAE0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10010B924(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018FC98);
  sub_10010BAE0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10010B964(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018FC98);
  sub_10010BAE0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10010B9B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10010B9EC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10010BA38(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018FC98);
  sub_10010BAE0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10010BA88(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018FC98);
  sub_10010BAE0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10010BAE0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018FD68;
  sub_10010BB7C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10010BB7C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10010BCF4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10010BCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10010BCD0(uint64_t a1)
{
  sub_10010BAE0(a1);
  operator delete();
}

int *sub_10010BCF4(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 643;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 643;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void sub_10010BED8(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x470uLL);
  sub_10010BF38(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1000196D4((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_10010BF24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10010BF38(_QWORD *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100175730;
  sub_10010BF80(a1 + 3, a2);
  return a1;
}

void sub_10010BF6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

double sub_10010BF80(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  double result;

  v3 = sub_10011E7DC(a1);
  *v3 = off_10018D828;
  v3[3] = off_10018D908;
  v3[4] = off_10018D940;
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  v3[5] = v4;
  v3[6] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v4 = v3[5];
  }
  v3[7] = v4 + 8;
  v3[8] = v3 + 11;
  result = 0.0;
  *(_OWORD *)(v3 + 9) = xmmword_100140690;
  return result;
}

void sub_10010BFF4(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v10 = *a1;
  v11 = sub_1000FD3D8((uint64_t)a1, a3);
  if (v11 >> 57)
    sub_1000158AC("get_next_capacity, allocator's max size reached");
  v12 = v11;
  v13 = operator new(v11 << 6);
  sub_10010C090(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

void sub_10010C090(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;

  v10 = *a1;
  sub_10010C160((uint64_t)a1, *a1, a4, *a1 + (a1[1] << 6), a2, a5, a6);
  if (v10)
  {
    for (i = a1[1]; i; v10 += 64)
    {
      v12 = *(_QWORD *)(v10 + 56);
      if (v12)
        *(_QWORD *)(v12 + 32) = 0;
      --i;
      sub_100012168(v10);
    }
    if (a1 + 3 != (uint64_t *)*a1)
      operator delete((void *)*a1);
  }
  v13 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v13;
  a1[2] = a3;
}

void sub_10010C13C(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    if ((void *)(v2 + 24) != v1)
      operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10010C160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v7;
  int v8;
  uint64_t v9;
  __n128 result;
  uint64_t v11;
  int v12;
  uint64_t v13;

  while (a2 != a3)
  {
    *(_OWORD *)a5 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a5 + 25) = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a5 + 16) = v7;
    v8 = *(_DWORD *)(a2 + 48);
    *(_QWORD *)(a5 + 56) = *(_QWORD *)(a2 + 56);
    v9 = a5 + 56;
    *(_DWORD *)(v9 - 8) = v8;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(*(_QWORD *)v9 + 32) = v9;
    a5 = v9 + 8;
    a2 += 64;
  }
  *(_OWORD *)a5 = *(_OWORD *)a7;
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  result = *(__n128 *)(a7 + 16);
  *(_OWORD *)(a5 + 25) = *(_OWORD *)(a7 + 25);
  *(__n128 *)(a5 + 16) = result;
  *(_QWORD *)(a5 + 56) = *(_QWORD *)(a7 + 56);
  *(_DWORD *)(a5 + 48) = *(_DWORD *)(a7 + 48);
  *(_QWORD *)(a7 + 56) = 0;
  *(_QWORD *)(*(_QWORD *)(a5 + 56) + 32) = a5 + 56;
  if (a3 != a4)
  {
    v11 = a5 + (a6 << 6);
    do
    {
      *(_OWORD *)v11 = *(_OWORD *)a3;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      result = *(__n128 *)(a3 + 16);
      *(_OWORD *)(v11 + 25) = *(_OWORD *)(a3 + 25);
      *(__n128 *)(v11 + 16) = result;
      v12 = *(_DWORD *)(a3 + 48);
      *(_QWORD *)(v11 + 56) = *(_QWORD *)(a3 + 56);
      v13 = v11 + 56;
      *(_DWORD *)(v13 - 8) = v12;
      *(_QWORD *)(a3 + 56) = 0;
      *(_QWORD *)(*(_QWORD *)v13 + 32) = v13;
      a3 += 64;
      v11 = v13 + 8;
    }
    while (a3 != a4);
  }
  return result;
}

uint64_t sub_10010C240(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018DB68;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010C2A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010C2BC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018DD88;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010C324(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010C338(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018DFA8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010C3A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010C3B4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018E1C8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010C41C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_10010C430(uint64_t ***a1)
{
  uint64_t *v1;
  uint64_t v2;
  size_t f_bsize;
  void *v4;
  __int128 *v5;
  uint64_t v6;
  int *v7;
  int v8;
  const std::error_category *v9;
  int v10;
  int v11;
  const std::error_category *v12;
  const std::error_category *v13;
  int64_t v14;
  std::bad_alloc *exception;
  std::bad_alloc *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  statfs v21;
  __int128 v22;
  int v23;
  __int128 *v24;

  v1 = **a1;
  v2 = *v1;
  if ((fstatfs(*(_DWORD *)(*v1 + 8), &v21) & 0x80000000) == 0)
  {
    f_bsize = v21.f_bsize;
    if (!*(_BYTE *)(v2 + 88))
      *(_BYTE *)(v2 + 88) = 1;
    *(_QWORD *)(v2 + 72) = f_bsize;
    v4 = malloc_type_valloc(f_bsize, 0xF8ED6DDuLL);
    if (!v4)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v16 = std::bad_alloc::bad_alloc(exception);
    }
    *(_QWORD *)&v22 = off_100190008;
    v24 = &v22;
    v17 = v4;
    sub_1000181E0((uint64_t)&v18, (uint64_t)&v22);
    v5 = v24;
    if (v24 == &v22)
    {
      v6 = 4;
      v5 = &v22;
    }
    else
    {
      if (!v24)
        goto LABEL_14;
      v6 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_14:
    sub_10010C76C(v2 + 96, (uint64_t *)&v17);
    sub_100017CC8((uint64_t *)&v17);
    v14 = *(_QWORD *)(v2 + 72);
    if (v14 >= 1)
      bzero(*(void **)(v2 + 96), v14);
    return;
  }
  *(_QWORD *)&v22 = "FileLocal::shared_state_t::init_unmap_zeros()::(anonymous class)::operator()() const";
  *((_QWORD *)&v22 + 1) = 76;
  v23 = 16;
  sub_10010C684(&v17, &v22);
  sub_100005A0C(&v19, (uint64_t)"fstatfs failed with err code ", 29);
  v7 = __error();
  std::ostream::operator<<(&v19, *v7);
  std::ostream::~ostream(&v19, off_10018FEB8);
  sub_10010C830((uint64_t)&v17);
  std::ios::~ios(&v20);
  v8 = *__error();
  v9 = std::generic_category();
  v10 = *(unsigned __int8 *)(v2 + 88);
  *(_DWORD *)(v2 + 72) = v8;
  *(_QWORD *)(v2 + 80) = v9;
  if (v10)
    *(_BYTE *)(v2 + 88) = 0;
  v11 = *__error();
  v12 = std::generic_category();
  v13 = v12;
  if (*(_BYTE *)(v2 + 136))
  {
    sub_100017CC8((uint64_t *)(v2 + 96));
    *(_DWORD *)(v2 + 96) = v11;
    *(_QWORD *)(v2 + 104) = v13;
    *(_BYTE *)(v2 + 136) = 0;
  }
  else
  {
    *(_DWORD *)(v2 + 96) = v11;
    *(_QWORD *)(v2 + 104) = v12;
  }
}

void sub_10010C63C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100017CC8((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10010C684(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010C7B4((uint64_t)a1, a2);
  *a1 = off_10018FDF0;
  a1[45] = &off_10018FEF0;
  a1[46] = &off_10018FF18;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10018FDF0;
  a1[45] = off_10018FE78;
  a1[46] = off_10018FEA0;
  return a1;
}

void sub_10010C708(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10010C830(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010C72C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018FEB8);
  sub_10010C830(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10010C76C(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 40))
    sub_100011C54((uint64_t *)a1, a2);
  else
    sub_10010CEC0(a1, a1, a2);
  return a1;
}

uint64_t sub_10010C7B4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018FF88;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010C81C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010C830(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018FF88;
  sub_10010CAE8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10010C8CC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10018FEB8);
  sub_10010C830(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10010C920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10010C954(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_10010C9A0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018FEB8);
  sub_10010C830(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10010C9D8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018FEB8);
  sub_10010C830(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_10010CA28(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018FEB8);
  sub_10010C830(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10010CA68(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10018FEB8);
  sub_10010C830(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10010CAC4(uint64_t a1)
{
  sub_10010C830(a1);
  operator delete();
}

uint64_t sub_10010CAE8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10010CC38((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10010CC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10010CC38(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 236;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 236;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void sub_10010CE20()
{
  operator delete();
}

_QWORD *sub_10010CE34()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_100190008;
  return result;
}

void sub_10010CE58(uint64_t a1, _QWORD *a2)
{
  *a2 = off_100190008;
}

void sub_10010CE70(uint64_t a1, void **a2)
{
  free(*a2);
}

uint64_t sub_10010CE78(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_100190068))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10010CEB4()
{
  return &off_100190068;
}

uint64_t sub_10010CEC0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;

  if (*(_BYTE *)(a1 + 40))
    sub_100017CC8((uint64_t *)a1);
  v5 = *a3;
  *a3 = 0;
  *(_QWORD *)a1 = v5;
  result = sub_1000181E0(a1 + 8, (uint64_t)(a3 + 1));
  *(_BYTE *)(a1 + 40) = 1;
  return result;
}

uint64_t sub_10010CF10(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018E3E8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010CF78(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010CF8C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018E608;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010CFF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010D008(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018E828;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010D070(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010D084(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018EA48;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010D0EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010D100(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018EC68;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010D168(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010D17C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018EE88;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010D1E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010D1F8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018F0A8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010D260(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010D274(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018F2C8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010D2DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010D2F0(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018F4E8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010D358(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010D36C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018F708;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010D3D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010D3E8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018F928;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010D450(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010D464(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018FB48;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010D4CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10010D4E0(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *a1;
  v5 = *(_QWORD *)(v4 + 8);
  v6 = (char *)(*(_QWORD *)v4 + 16 * v5);
  if (v5 == *(_QWORD *)(v4 + 16))
  {
    sub_1000B1624((void **)v4, v6, 1, a2, &v8);
  }
  else
  {
    *(_OWORD *)v6 = *a2;
    ++*(_QWORD *)(v4 + 8);
  }
  return a1;
}

_QWORD *sub_10010D548(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = result[1];
  if (v2)
  {
    result = (_QWORD *)*result;
    do
    {
      v3 = result[7];
      if (v3)
        *(_QWORD *)(v3 + 32) = 0;
      --v2;
      result = (_QWORD *)(sub_100012168((uint64_t)result) + 64);
    }
    while (v2);
  }
  v1[1] = 0;
  return result;
}

uint64_t sub_10010D590(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10018FD68;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010D5F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10010D60C(_QWORD *__dst, __int128 *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100041DD0(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v10 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v10;
  }
  v11 = a4[1];
  __dst[4] = *a4;
  __dst[3] = a3;
  __dst[5] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *((char *)a2 + 23);
  if (v14 >= 0)
    v15 = (char *)a2;
  else
    v15 = *(char **)a2;
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)a2 + 23);
  else
    v16 = *((_QWORD *)a2 + 1);
  __dst[6] = sub_100120674(v15, v16);
  __dst[7] = v17;
  __dst[8] = a5;
  return __dst;
}

void sub_10010D6C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100012168(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

AAByteStream *sub_10010D6E8(uint64_t a1, char *a2, uint64_t a3, uint8_t **a4)
{
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  AAByteStream v12;
  AEAContext v13;
  AAByteStream v14;

  if (a2[23] >= 0)
    v6 = a2;
  else
    v6 = *(char **)a2;
  *(_QWORD *)&v11 = AAS3DownloadStreamOpen(v6, 0, 0, 0);
  sub_1000ED388(&v14, &v11);
  sub_1000ED45C(&v13, &v14);
  sub_1000ED48C(&v13, *a4, 0x20uLL);
  sub_1000ED3C0(&v14, &v13, 0xFFFFFFFFFFFFFFFFLL, 0x4000000000000000uLL, 0, (uint64_t *)&v12);
  sub_1000FFD68(&v14, (uint64_t *)&v13, &v12, &v11);
  sub_100015BC8(a1 + 40, &v11);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_1000ED38C(&v12);
  sub_1000ED460(&v13);
  return sub_1000ED38C(&v14);
}

void sub_10010D7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  AAByteStream v4;
  va_list va;
  AEAContext v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, AAByteStream);
  va_copy(va2, va1);
  v6 = va_arg(va2, AEAContext);
  sub_1000ED38C((AAByteStream *)va);
  sub_1000ED460((AEAContext *)va1);
  sub_1000ED38C((AAByteStream *)va2);
  _Unwind_Resume(a1);
}

_QWORD *sub_10010D824(_QWORD *a1, char **a2, uint64_t a3, uint8_t **a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  uint8_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint8_t *v25[2];

  v7 = sub_10011E7DC(a1);
  *(_OWORD *)(v7 + 3) = 0u;
  v9 = (uint64_t)(v7 + 3);
  *(_OWORD *)(v7 + 5) = 0u;
  v10 = v7 + 5;
  *v7 = off_100190088;
  v11 = *a2;
  v12 = a4[1];
  v25[0] = *a4;
  v25[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_10010D6E8((uint64_t)a1, v11, v8, v25);
  if (v12)
  {
    v15 = (unint64_t *)(v12 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(uint8_t *))(*(_QWORD *)v12 + 16))(v12);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v12);
    }
  }
  v17 = (__int128 *)*a2;
  v23 = sub_1000ED750(*v10);
  v22 = sub_1000ED744(*v10);
  sub_10010DBC8(v17, (uint64_t *)&v23, a4, (uint64_t *)&v22, &v24);
  sub_100015BC8(v9, &v24);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return a1;
}

void sub_10010D968(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;

  sub_100012168(v3);
  sub_100012168(v2);
  v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

ssize_t sub_10010D9A8(uint64_t a1, uint64_t a2)
{
  return sub_1000ED75C(*(_QWORD *)(a1 + 40), *(void **)a2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

void sub_10010D9D0(_QWORD *a1)
{
  sub_10010DA7C(a1);
  operator delete();
}

uint64_t sub_10010D9F4()
{
  return 4294967251;
}

uint64_t sub_10010D9FC(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
}

uint64_t sub_10010DA08()
{
  return 0;
}

uint64_t sub_10010DA10()
{
  return 4294967251;
}

_QWORD *sub_10010DA18(uint64_t a1, _QWORD *a2)
{
  return sub_100005A0C(a2, (uint64_t)"knox", 4);
}

double sub_10010DA2C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_10010DAC0(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

uint64_t sub_10010DA68()
{
  return 4294967251;
}

uint64_t sub_10010DA70(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48);
}

_QWORD *sub_10010DA7C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = off_100190088;
  sub_100012168((uint64_t)(a1 + 5));
  sub_100012168((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_10010DAC0(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x50uLL);
  sub_10010DB20(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1000196D4((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_10010DB0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10010DB20(_QWORD *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100185520;
  sub_10010DB68(a1 + 3, a2);
  return a1;
}

void sub_10010DB54(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10010DB68(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = sub_10011E7DC(a1);
  *v4 = off_100190088;
  *(_OWORD *)(v4 + 5) = 0u;
  v5 = v4 + 5;
  *(_OWORD *)(v4 + 3) = 0u;
  sub_100027CB4(v4 + 3, (uint64_t *)(a2 + 24));
  sub_100027CB4(v5, (uint64_t *)(a2 + 40));
  return a1;
}

_QWORD *sub_10010DBC8@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X3>, uint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x60uLL);
  result = sub_10010DC40(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_10010DC2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10010DC40(_QWORD *a1, __int128 *a2, uint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100190160;
  sub_10010D60C(a1 + 3, a2, *a3, a4, *a5);
  return a1;
}

void sub_10010DC7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10010DC90(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100190160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10010DCA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100190160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10010DCD0(uint64_t a1)
{
  sub_10010DCDC(a1 + 24);
}

void sub_10010DCDC(uint64_t a1)
{
  sub_100012168(a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_10010DD18(void *a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  _QWORD *exception;
  uint64_t error_code;
  uint64_t v16;
  id v17;
  char *v18;
  std::string v19;
  std::string __dst;

  v5 = a1;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v17 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "activeNode"));
  if (v6)
  {
    if ((objc_msgSend(v6, "isCache") & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "parent"));
      if (v9)
        v8 = 3;
      else
        v8 = 0;

    }
    if (*a3 != a3[1] || (a2 & 1) != 0 || !v8 || v8 == 3)
    {
      v10 = objc_opt_class(DiskImageGraphNodeNative, v7);
      if ((objc_opt_isKindOfClass(v6, v10) & 1) != 0)
      {
        v11 = objc_msgSend((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "filePath")), "path");
        v18 = (char *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v11)), "UTF8String");
        sub_10010E884(&v19, &v18);
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          sub_100041DD0(&__dst, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
        else
          __dst = v19;
        operator new();
      }
      v12 = v6;
      v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "pluginName")));
      sub_100005870(&__dst, (char *)objc_msgSend(v13, "UTF8String"));

      operator new();
    }
    exception = __cxa_allocate_exception(0x40uLL);
    error_code = make_error_code(150);
    *exception = &off_1001924F8;
    exception[1] = error_code;
    exception[2] = v16;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Stack with cache as top image cannot be opened for writing.";
  }

}

void sub_10010E21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_10004A4A8((void ***)&a11);

  _Unwind_Resume(a1);
}

void sub_10010E36C(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  DiskImageGraph *v16;
  id v17;
  _QWORD *exception;
  uint64_t error_code;
  uint64_t v20;
  _QWORD *v21;
  const std::error_category *v22;
  int v23;
  uint64_t v24;
  NSObject *v25;
  _BOOL4 v26;
  void *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  NSObject *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint8_t buf[4];
  int v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  void *v46;

  v40 = 0;
  v7 = objc_msgSend(objc_alloc((Class)NSFileHandle), "initWithFileDescriptor:closeOnDealloc:", a1, 0);
  v39 = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "readDataUpToLength:error:", 0x100000, &v39));
  v9 = v39;
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    error_code = make_error_code(154);
    *exception = &off_1001924F8;
    exception[1] = error_code;
    exception[2] = v20;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Failed to read from fd.";
  }
  v38 = 0;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v8, 0, &v40, &v38));
  v11 = v38;

  if (v10 && (v13 = objc_opt_class(NSDictionary, v12), (objc_opt_isKindOfClass(v10, v13) & 1) != 0))
  {
    if (*((char *)a2 + 23) < 0)
    {
      if (!a2[1])
        goto LABEL_14;
      a2 = (uint64_t *)*a2;
    }
    else if (!*((_BYTE *)a2 + 23))
    {
LABEL_14:
      v21 = __cxa_allocate_exception(0x40uLL);
      v22 = std::generic_category();
      *v21 = &off_1001924F8;
      v21[1] = 22;
      v21[2] = v22;
      *((_BYTE *)v21 + 24) = 0;
      *((_BYTE *)v21 + 48) = 0;
      v21[7] = "Cannot initialize pstack disk image without path.";
    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", a2, +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding")));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v14));

    v37 = v11;
    v16 = -[DiskImageGraph initWithData:pstackURL:imported:error:]([DiskImageGraph alloc], "initWithData:pstackURL:imported:error:", v10, v15, 0, &v37);
    v17 = v37;

    if (!v16)
    {
      v23 = *__error();
      if (sub_1000BF0BC())
      {
        v36 = 0;
        v24 = sub_1000BF044();
        v25 = objc_claimAutoreleasedReturnValue(v24);
        v26 = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "description"));
        if (v26)
          v28 = 3;
        else
          v28 = 2;
        *(_DWORD *)buf = 68158210;
        v42 = 127;
        v43 = 2080;
        v44 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_fd(int, const std::file"
              "system::path &, BOOL)";
        v45 = 2112;
        v46 = v27;
        v29 = (char *)_os_log_send_and_compose_impl(v28, &v36, 0, 0, &_mh_execute_header, v25, 16, "%.*s: Failed to create graph from plist: %@.", buf, 28);

        if (v29)
        {
          fprintf(__stderrp, "%s\n", v29);
          free(v29);
        }
      }
      else
      {
        v30 = sub_1000BF044();
        v31 = objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "description"));
          *(_DWORD *)buf = 68158210;
          v42 = 127;
          v43 = 2080;
          v44 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_fd(int, const std::fi"
                "lesystem::path &, BOOL)";
          v45 = 2112;
          v46 = v32;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%.*s: Failed to create graph from plist: %@.", buf, 0x1Cu);

        }
      }
      *__error() = v23;
      v33 = __cxa_allocate_exception(0x40uLL);
      v34 = make_error_code(161);
      *v33 = &off_1001924F8;
      v33[1] = v34;
      v33[2] = v35;
      *((_BYTE *)v33 + 24) = 0;
      *((_BYTE *)v33 + 48) = 0;
      v33[7] = "Failed to create graph from plist.";
    }
    sub_10010DD18(v16, a3, a4);

    v11 = v17;
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }

}

void sub_10010E7D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  __cxa_free_exception(v7);

  _Unwind_Resume(a1);
}

std::string *sub_10010E884(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  sub_10005AE08(this, v3, v4);
  return this;
}

void sub_10010E8C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_10010E8E0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a3;
  sub_100095D8C(a3, a2);
}

uint64_t sub_10010E944(uint64_t a1)
{
  io_rings_unsubscribe_dest_object(*(_QWORD *)a1, *(_DWORD *)(a1 + 8));
  io_rings_release(*(_QWORD *)a1);
  return a1;
}

void sub_10010E97C()
{
  io_rings_get_max_version(0, 0);
  io_rings_setup();
}

void sub_10010EB60(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10010EB80(uint64_t a1)
{
  io_rings_suspend(*(_QWORD *)(a1 + 48));
  io_rings_cancel(*(_QWORD *)(a1 + 48));
  std::mutex::~mutex((std::mutex *)(a1 + 136));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  sub_10010E944(a1 + 56);
  sub_10010F590((uint64_t *)(a1 + 8));
  return a1;
}

double sub_10010EBDC(uint64_t a1)
{
  unsigned int v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  double result;

  v1 = atomic_load((unsigned int *)(a1 + 76));
  v2 = (unsigned int *)(a1 + 72);
  v3 = atomic_load((unsigned int *)(a1 + 72));
  if (v3 - v1 < *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8))
  {
    do
    {
      while (1)
      {
        v4 = __ldaxr(v2);
        if (v4 == v3)
          break;
        __clrex();
        v5 = atomic_load((unsigned int *)(a1 + 76));
        v6 = v4 - v5;
        v3 = v4;
        if (v6 >= *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8))
          return result;
      }
    }
    while (__stlxr(v3 + 1, v2));
    return io_rings_sqe_allocate(*(_QWORD *)(a1 + 48));
  }
  return result;
}

void sub_10010EC60(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t cqe;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v12;

  cqe = io_rings_get_cqe(*(_QWORD *)(a1 + 48));
  if ((v5 & 0x100000000) != 0)
  {
    v7 = cqe;
    v8 = v5;
    v9 = (unsigned int *)(a1 + 76);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    if (atomic_load((unint64_t *)(a1 + 80)))
    {
      v12 = atomic_load((unsigned int *)(a1 + 72));
      if (v10 + 1 == v12)
      {
        std::mutex::lock((std::mutex *)(a1 + 136));
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
        std::mutex::unlock((std::mutex *)(a1 + 136));
      }
    }
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    v6 = 1;
  }
  else
  {
    v6 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v6;
}

uint64_t sub_10010ED10(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 64);
  return result;
}

uint64_t sub_10010ED1C(uint64_t a1)
{
  uint64_t overruns;
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;

  overruns = io_rings_cq_get_overruns(a1);
  *(_QWORD *)&v4 = "di_plugin_cq_event_callback(io_uhandle_t, void *, enum io_rings_event_type_t, struct io_rings_event_type_data_t *)";
  *((_QWORD *)&v4 + 1) = 27;
  v5 = 16;
  sub_10010EDDC(v6, &v4);
  std::ostream::operator<<(&v7, overruns);
  sub_100005A0C(&v7, (uint64_t)" overrun events occurred in the plugin's ring!", 46);
  std::ostream::~ostream(&v7, off_100190280);
  sub_10010EF40((uint64_t)v6);
  std::ios::~ios(&v8);
  return io_rings_cq_clear_overruns(a1);
}

void sub_10010EDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10010EE84((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10010EDDC(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10010EEC4((uint64_t)a1, a2);
  *a1 = off_1001901B8;
  a1[45] = &off_1001902B8;
  a1[46] = &off_1001902E0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001901B8;
  a1[45] = off_100190240;
  a1[46] = off_100190268;
  return a1;
}

void sub_10010EE60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10010EF40(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010EE84(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100190280);
  sub_10010EF40(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10010EEC4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100190350;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10010EF2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010EF40(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100190350;
  sub_10010F1F8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10010EFDC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100190280);
  sub_10010EF40(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10010F030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10010F064(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_10010F0B0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100190280);
  sub_10010EF40(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10010F0E8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100190280);
  sub_10010EF40(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_10010F138(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100190280);
  sub_10010EF40(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10010F178(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100190280);
  sub_10010EF40(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10010F1D4(uint64_t a1)
{
  sub_10010EF40(a1);
  operator delete();
}

uint64_t sub_10010F1F8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10010F348((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10010F320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10010F348(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 57;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 57;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10010F52C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t *sub_10010F590(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  sub_10010F5E8(a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *sub_10010F5E8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      sub_100017C6C();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

void sub_10010F638()
{
  operator delete();
}

_QWORD *sub_10010F64C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1001903D0;
  return result;
}

void sub_10010F670(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1001903D0;
}

uint64_t sub_10010F688(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 32))();
}

uint64_t sub_10010F694(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10010F6D0()
{
}

uint64_t sub_10010F6DC(uint64_t a1, uint64_t a2)
{
  size_t v3;
  uint64_t v4;
  __int128 v6;
  int v7;
  _QWORD v8[45];
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v3 + v4 <= *(_QWORD *)(a1 + 72))
  {
    memcpy((void *)(*(_QWORD *)(a1 + 64) + v4), *(const void **)a2, v3);
    return *(unsigned int *)(a2 + 16);
  }
  else
  {
    *(_QWORD *)&v6 = "int Ram::write(const sg_entry &)";
    *((_QWORD *)&v6 + 1) = 14;
    v7 = 16;
    sub_10010F7F8(v8, &v6);
    sub_100005A0C(&v9, (uint64_t)"Trying to write @ ", 18);
    std::ostream::operator<<(&v9, *(_QWORD *)(a2 + 24));
    sub_100005A0C(&v9, (uint64_t)" ", 1);
    std::ostream::operator<<(&v9, *(_QWORD *)(a2 + 16));
    sub_100005A0C(&v9, (uint64_t)"bytes, which is after end of ramdisk", 36);
    std::ostream::~ostream(&v9, off_100190608);
    sub_10010FDEC((uint64_t)v8);
    std::ios::~ios(&v10);
    return 4294967274;
  }
}

void sub_10010F7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10010F8A0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10010F7F8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10011080C((uint64_t)a1, a2);
  *a1 = off_100190540;
  a1[45] = &off_100190640;
  a1[46] = &off_100190668;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100190540;
  a1[45] = off_1001905C8;
  a1[46] = off_1001905F0;
  return a1;
}

void sub_10010F87C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10010FDEC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010F8A0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100190608);
  sub_10010FDEC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10010F8E0(uint64_t a1, uint64_t a2)
{
  size_t v3;
  uint64_t v4;
  __int128 v6;
  int v7;
  _QWORD v8[45];
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v3 + v4 <= *(_QWORD *)(a1 + 72))
  {
    memcpy(*(void **)a2, (const void *)(*(_QWORD *)(a1 + 64) + v4), v3);
    return *(unsigned int *)(a2 + 16);
  }
  else
  {
    *(_QWORD *)&v6 = "int Ram::read(const sg_entry &)";
    *((_QWORD *)&v6 + 1) = 13;
    v7 = 16;
    sub_10010FA00(v8, &v6);
    sub_100005A0C(&v9, (uint64_t)"Trying to read @ ", 17);
    std::ostream::operator<<(&v9, *(_QWORD *)(a2 + 24));
    sub_100005A0C(&v9, (uint64_t)" ", 1);
    std::ostream::operator<<(&v9, *(_QWORD *)(a2 + 16));
    sub_100005A0C(&v9, (uint64_t)"bytes, which is after end of ramdisk", 36);
    std::ostream::~ostream(&v9, off_100190828);
    sub_1001103D8((uint64_t)v8);
    std::ios::~ios(&v10);
    return 4294967274;
  }
}

void sub_10010F9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10010FAA8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10010FA00(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100110888((uint64_t)a1, a2);
  *a1 = off_100190760;
  a1[45] = &off_100190860;
  a1[46] = &off_100190888;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100190760;
  a1[45] = off_1001907E8;
  a1[46] = off_100190810;
  return a1;
}

void sub_10010FA84(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1001103D8(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010FAA8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100190828);
  sub_1001103D8(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_10010FAEC(_QWORD *a1)
{
  sub_1001107D0(a1);
  operator delete();
}

uint64_t sub_10010FB10()
{
  return 0;
}

uint64_t sub_10010FB18(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  unint64_t v10;

  if (a3 == -1)
    return 0;
  v3 = a1[12];
  v4 = (a2 + v3 - 1) / v3 * v3;
  if (a2 > v4 || v4 >= a3 + a2)
    return 0;
  v6 = a2 - v4 + a3;
  v7 = v6 / v3 * v3;
  if (v6 == v6 % v3)
    return 0;
  v8 = 4294967262;
  if (__CFADD__(v4, v7))
    return v8;
  v10 = a1[9];
  if (v4 > v10 || v7 + v4 > v10)
    return v8;
  return madvise((void *)(a1[8] + v4), v7, 5);
}

uint64_t sub_10010FB9C()
{
  return 1;
}

uint64_t sub_10010FBA4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_10010FBAC()
{
  return 1;
}

uint64_t sub_10010FBB4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 72) < a2)
    return 0xFFFFFFFFLL;
  result = 0;
  *(_QWORD *)(a1 + 72) = a2;
  return result;
}

_QWORD *sub_10010FBD8(uint64_t a1, _QWORD *a2)
{
  return sub_100005A0C(a2, (uint64_t)"ram", 3);
}

uint64_t sub_10010FBEC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t sub_10010FBF8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100190608);
  sub_10010FDEC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10010FC30(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100190608);
  sub_10010FDEC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10010FC70(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100190608);
  sub_10010FDEC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10010FCC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10010FCF8(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10010FD44(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100190608);
  sub_10010FDEC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10010FD94(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100190608);
  sub_10010FDEC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10010FDEC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001906D8;
  sub_10010FE88(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10010FE88(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100110000((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10010FFB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10010FFDC(uint64_t a1)
{
  sub_10010FDEC(a1);
  operator delete();
}

int *sub_100110000(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 30;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 30;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1001101E4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100190828);
  sub_1001103D8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10011021C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100190828);
  sub_1001103D8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10011025C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100190828);
  sub_1001103D8(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1001102B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1001102E4(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100110330(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100190828);
  sub_1001103D8(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100110380(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100190828);
  sub_1001103D8(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1001103D8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001908F8;
  sub_100110474(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100110474(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1001105EC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10011059C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001105C8(uint64_t a1)
{
  sub_1001103D8(a1);
  operator delete();
}

int *sub_1001105EC(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 42;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 42;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_1001107D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = off_100190460;
  sub_100017CC8(a1 + 3);
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_10011080C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001906D8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100110874(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100110888(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001908F8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1001108F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100110904(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_100112F0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100112F38(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100112F48(uint64_t a1)
{

}

void sub_100112F50(_QWORD *a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id obj;
  id v20;

  v6 = a3;
  v8 = objc_opt_class(DiskImageGraphNodeNative, v7);
  if ((objc_opt_isKindOfClass(v6, v8) & 1) != 0)
  {
    v9 = v6;
    v10 = (void *)a1[4];
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "filePath"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "lastPathComponent"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "URLByAppendingPathComponent:", v12));

    v14 = (void *)a1[5];
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "filePath"));
    v16 = *(_QWORD *)(a1[6] + 8);
    obj = *(id *)(v16 + 40);
    LOBYTE(v14) = objc_msgSend(v14, "copyItemAtURL:toURL:error:", v15, v13, &obj);
    objc_storeStrong((id *)(v16 + 40), obj);

    if ((v14 & 1) != 0)
      objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "addObject:", v13);
    else
      *a4 = 1;

  }
  else
  {
    *a4 = 1;
    v17 = *(_QWORD *)(a1[6] + 8);
    v20 = *(id *)(v17 + 40);
    +[DIError failWithPOSIXCode:verboseInfo:error:](DIError, "failWithPOSIXCode:verboseInfo:error:", 45, CFSTR("Clone of plugin nodes is not supported."), &v20);
    v18 = v20;
    v9 = *(id *)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v18;
  }

}

id sub_1001130B8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeItemAtURL:error:", a2, 0);
}

void sub_1001135FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100113614(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id obj;

  v6 = *(unsigned __int8 *)(a1 + 56);
  v7 = *(void **)(a1 + 32);
  v8 = a2;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "URLByDeletingLastPathComponent"));
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  obj = *(id *)(v10 + 40);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[DiskImageGraphNode GraphNodeWithDictionary:updateChangesToDict:workDir:error:](DiskImageGraphNode, "GraphNodeWithDictionary:updateChangesToDict:workDir:error:", v8, v6, v9, &obj));

  objc_storeStrong((id *)(v10 + 40), obj);
  if (v11)
  {
    v12 = *(void **)(a1 + 40);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "UUID"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "UUIDString"));
    objc_msgSend(v12, "setObject:forKey:", v11, v14);

  }
  else
  {
    *a4 = 1;
  }

}

void sub_1001137F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100113808(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v15 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "parentUUID"));

  if (v6)
  {
    v7 = *(void **)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "parentUUID"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "UUIDString"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", v9));

    if (v10)
    {
      objc_msgSend(v15, "setParent:", v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "parent"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "children"));
      objc_msgSend(v12, "addObject:", v15);

    }
    else
    {
      *a4 = 1;
      v13 = objc_claimAutoreleasedReturnValue(+[DIError errorWithPOSIXCode:verboseInfo:](DIError, "errorWithPOSIXCode:verboseInfo:", 22, CFSTR("Missing parent node in graph.")));
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v11 = *(void **)(v14 + 40);
      *(_QWORD *)(v14 + 40) = v13;
    }

  }
}

void sub_100113CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100113D00(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "tag"));
  v5 = objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));

  return v5;
}

uint64_t sub_100114424(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v6;

  *(_DWORD *)a1 = 1919118949;
  v6 = 1919118949;
  sub_100083628((uint64_t)"sig1_t", 1919118949, &v6, 1);
  *(_DWORD *)(a1 + 4) = 1634952291;
  v6 = 1634952291;
  sub_100083628((uint64_t)"sig2_t", 1634952291, &v6, 1);
  *(_DWORD *)(a1 + 8) = 2;
  v6 = 2;
  sub_100083628((uint64_t)"version_t", 2, &v6, 1);
  *(_DWORD *)(a1 + 12) = 16;
  v6 = 16;
  sub_100083628((uint64_t)"iv_size_t", 16, &v6, 1);
  *(_DWORD *)(a1 + 16) = 5;
  v6 = 5;
  sub_100083628((uint64_t)"encryption_mode", 5, &v6, 1);
  *(_DWORD *)(a1 + 20) = -2147483647;
  v6 = -2147483647;
  sub_100083628((uint64_t)"algorithm_type", -2147483647, &v6, 1);
  *(_DWORD *)(a1 + 24) = *a2;
  *(_DWORD *)(a1 + 28) = 91;
  v6 = 91;
  sub_100083628((uint64_t)"prng_algorithm_type", 91, &v6, 1);
  *(_DWORD *)(a1 + 32) = 160;
  v6 = 160;
  sub_100083628((uint64_t)"prng_key_bits_size_t", 160, &v6, 1);
  *(_DWORD *)(a1 + 52) = 512;
  *(_OWORD *)(a1 + 56) = xmmword_100149F70;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 36) = sub_100120770();
  *(_QWORD *)(a1 + 44) = v4;
  return a1;
}

void sub_1001145AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *exception;
  uint64_t v5;
  void *v6;
  void *v7;
  _DWORD v8[66];

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 60) = 0;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  if (v3 < 0xC
    || (sub_100034324(a2, (uint64_t)v8, 12, v3 - 12) & 0x80000000) != 0
    || v8[0] != 0x1000000
    || v8[1] != 1634952291
    || v8[2] != 1919118949)
  {
    if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) > 0x4B)
      operator new[]();
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    *exception = &off_10018A780;
    exception[1] = "crypto";
    exception[2] = 76;
    exception[3] = v5;
  }
  v6 = __cxa_allocate_exception(0x40uLL);
  v7 = (void *)sub_100005410((uint64_t)v6, (uint64_t)"The image is encrypted with obsolete encoding version 1", 0xA0u);
}

void sub_1001149C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1001149D8()
{
  operator delete[]();
}

void sub_1001149E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100114A94(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  sub_10000FE34((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x100114AD0);
}

void sub_100114AF0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1000054BC(a1);
  _Unwind_Resume(a1);
}

__n128 sub_100114B04(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 60) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100114B40(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(a1 + 8));
  *(_DWORD *)(a2 + 12) = bswap32(*(_DWORD *)(a1 + 12));
  *(_DWORD *)(a2 + 16) = bswap32(*(_DWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 20) = bswap32(*(_DWORD *)(a1 + 20));
  *(_DWORD *)(a2 + 24) = bswap32(*(_DWORD *)(a1 + 24));
  *(_DWORD *)(a2 + 28) = bswap32(*(_DWORD *)(a1 + 28));
  *(_DWORD *)(a2 + 32) = bswap32(*(_DWORD *)(a1 + 32));
  *(_OWORD *)(a2 + 36) = *(_OWORD *)(a1 + 36);
  *(_DWORD *)(a2 + 52) = bswap32(*(_DWORD *)(a1 + 52));
  *(_QWORD *)(a2 + 56) = bswap64(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(a2 + 64) = bswap64(*(_QWORD *)(a1 + 64));
  *(_DWORD *)(a2 + 72) = bswap32(*(_DWORD *)(a1 + 72));
  return a2 + 76;
}

const void **sub_100114BE4(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFStringRef v6;
  void *exception;
  void *v9;
  const __CFString *v10;
  const __CFUUID *v11;

  v3 = (*(uint64_t (**)(char *))(*(_QWORD *)&a2[*(_QWORD *)(*(_QWORD *)a2 - 40)] + 16))(&a2[*(_QWORD *)(*(_QWORD *)a2 - 40)]);
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v9 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Image contains crypto format but info class is missing EncryptionInfo", 0x16u);
  }
  v4 = v3;
  v5 = *(unsigned int *)(a1 + 24);
  if (!*(_BYTE *)(v3 + 16))
    *(_BYTE *)(v3 + 16) = 1;
  *(_QWORD *)(v3 + 8) = v5;
  v11 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, *(CFUUIDBytes *)(a1 + 36));
  v6 = CFUUIDCreateString(kCFAllocatorDefault, v11);
  v10 = v6;
  if (*(_QWORD *)(v4 + 24))
  {
    CFRelease(*(CFTypeRef *)(v4 + 24));
    v6 = v10;
  }
  *(_QWORD *)(v4 + 24) = v6;
  v10 = 0;
  sub_100027D2C((const void **)&v10);
  return sub_10002818C((const void **)&v11);
}

void sub_100114CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_100027D2C(&a9);
  sub_10002818C(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100114CF4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  int v6;
  int v7;
  unint64_t v9;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  LODWORD(v9) = 0;
  sub_100083628((uint64_t)"public_key_crypto_algo_mode", 0, &v9, 1);
  bzero((void *)(a1 + 48), 0x204uLL);
  LODWORD(v9) = bswap32(*(_DWORD *)a2);
  sub_1001152F4((_DWORD *)a1, &v9);
  v4 = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 20) = v4;
  v5 = bswap32(*(_DWORD *)(a2 + 36));
  LODWORD(v9) = 42;
  sub_100083628((uint64_t)"public_key_crypto_algo", v5, &v9, 1);
  *(_DWORD *)(a1 + 36) = v5;
  v6 = bswap32(*(_DWORD *)(a2 + 40));
  v9 = 0x800000010000000ALL;
  sub_100083628((uint64_t)"public_key_padding_algo", v6, &v9, 2);
  *(_DWORD *)(a1 + 40) = v6;
  v7 = bswap32(*(_DWORD *)(a2 + 44));
  LODWORD(v9) = 0;
  sub_100083628((uint64_t)"public_key_crypto_algo_mode", v7, &v9, 1);
  *(_DWORD *)(a1 + 44) = v7;
  LODWORD(v9) = bswap32(*(_DWORD *)(a2 + 48));
  sub_1001153C8((_DWORD *)(a1 + 48), &v9);
  memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
  return a1;
}

uint64_t sub_100114E70(uint64_t a1, uint64_t a2, SecKeyRef *a3)
{
  const UInt8 *BytePtr;
  CC_LONG Length;
  __SecKey *v8;
  const __CFString *v9;
  const __CFData *v10;
  _QWORD *exception;
  unsigned int Code;
  const std::error_category *v14;
  _QWORD *v15;
  unsigned int v16;
  const std::error_category *v17;
  int v18;
  CFDataRef v19;
  CFDataRef v20;
  CFDataRef plaintext;
  CFDataRef theData;
  CFDataRef v23;
  CFErrorRef error;
  void *__p;
  _BYTE *v26;
  CFRange v27;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0x2A00000000;
  LODWORD(__p) = 42;
  sub_100083628((uint64_t)"public_key_crypto_algo", 42, &__p, 1);
  *(_DWORD *)(a1 + 40) = 10;
  __p = (void *)0x800000010000000ALL;
  sub_100083628((uint64_t)"public_key_padding_algo", 10, &__p, 2);
  *(_DWORD *)(a1 + 44) = 0;
  LODWORD(__p) = 0;
  sub_100083628((uint64_t)"public_key_crypto_algo_mode", 0, &__p, 1);
  bzero((void *)(a1 + 48), 0x204uLL);
  sub_1001151CC(a2, &__p);
  error = 0;
  v23 = SecKeyCopyExternalRepresentation(*a3, &error);
  if (!v23)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    Code = CFErrorGetCode(error);
    *exception = &off_1001924F8;
    v14 = std::generic_category();
    exception[1] = Code;
    exception[2] = v14;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Key from the certificate is not exportable.";
  }
  sub_10011525C((uint64_t *)&v23, (uint64_t *)&theData);
  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  CC_SHA1(BytePtr, Length, (unsigned __int8 *)(a1 + 4));
  LODWORD(plaintext) = 20;
  sub_1001152F4((_DWORD *)a1, &plaintext);
  v20 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)__p, v26 - (_BYTE *)__p);
  sub_10011525C((uint64_t *)&v20, (uint64_t *)&plaintext);
  v8 = *a3;
  v9 = sub_100115350(a1);
  v20 = SecKeyCreateEncryptedData(v8, v9, plaintext, &error);
  if (!v20)
  {
    v15 = __cxa_allocate_exception(0x40uLL);
    v16 = CFErrorGetCode(error);
    *v15 = &off_1001924F8;
    v17 = std::generic_category();
    v15[1] = v16;
    v15[2] = v17;
    *((_BYTE *)v15 + 24) = 0;
    *((_BYTE *)v15 + 48) = 0;
    v15[7] = "Failed to encrypt data using public key from certificate.";
  }
  sub_10011525C((uint64_t *)&v20, (uint64_t *)&v19);
  v18 = CFDataGetLength(v19);
  sub_1001153C8((_DWORD *)(a1 + 48), &v18);
  v10 = v19;
  v27.length = CFDataGetLength(v19);
  v27.location = 0;
  CFDataGetBytes(v10, v27, (UInt8 *)(a1 + 52));
  sub_100074B5C((const void **)&v19);
  sub_100074B5C((const void **)&plaintext);
  sub_100074B5C((const void **)&theData);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_100115144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, const void *a13, const void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v18;

  __cxa_free_exception(v18);
  sub_100074B5C(&a13);
  sub_100074B5C(&a14);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void **sub_1001151CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void **result;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;

  result = (void **)sub_100118EE0(a2, *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 32) - (*(_QWORD *)a1 + *(_QWORD *)(a1 + 24)) + 5);
  v4 = (char *)*result;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = v5 - *(_QWORD *)a1;
  if (v5 != *(_QWORD *)a1)
    result = (void **)memmove(*result, *(const void **)a1, v5 - *(_QWORD *)a1);
  v7 = &v4[v6];
  v8 = *(_BYTE **)(a1 + 24);
  v9 = *(_BYTE **)(a1 + 32);
  v10 = v9 - v8;
  if (v9 != v8)
    result = (void **)memmove(v7, v8, v9 - v8);
  strcpy(&v7[v10], "CKIE");
  return result;
}

uint64_t *sub_10011525C@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  _QWORD *exception;
  const std::error_category *v4;

  v2 = *result;
  *a2 = *result;
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_1001924F8;
    v4 = std::generic_category();
    exception[1] = 22;
    exception[2] = v4;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Failed creating CFAutoRelease instance.";
  }
  return result;
}

void sub_1001152E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void **a10)
{
  sub_100074B5C(a10);
  _Unwind_Resume(a1);
}

_DWORD *sub_1001152F4(_DWORD *result, _DWORD *a2)
{
  _QWORD *exception;

  if (*a2 >= 0x21u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &off_10018C2D8;
    exception[1] = "_publicKeyHash";
    exception[2] = "field size too large";
  }
  *result = *a2;
  return result;
}

SecKeyAlgorithm sub_100115350(uint64_t a1)
{
  int v1;
  const SecKeyAlgorithm *v2;
  void *exception;
  void *v5;

  if (*(_DWORD *)(a1 + 36) != 42)
    goto LABEL_7;
  v1 = *(_DWORD *)(a1 + 40);
  if (v1 == 10)
  {
    v2 = &kSecKeyAlgorithmRSAEncryptionPKCS1;
    return *v2;
  }
  if (v1 != -2147483647)
  {
LABEL_7:
    exception = __cxa_allocate_exception(0x40uLL);
    v5 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Unsupported public key algorithm.", 0xA1u);
  }
  v2 = &kSecKeyAlgorithmRSAEncryptionOAEPSHA1;
  return *v2;
}

_DWORD *sub_1001153C8(_DWORD *result, _DWORD *a2)
{
  _QWORD *exception;

  if (*a2 >= 0x201u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &off_10018C2D8;
    exception[1] = "_encryptedBlob";
    exception[2] = "field size too large";
  }
  *result = *a2;
  return result;
}

int *sub_100115424(int *a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  unint64_t v12;

  v4 = a1 + 3;
  v5 = a1 + 12;
  v6 = a1 + 25;
  bzero(a1, 0x268uLL);
  v7 = bswap32(*(_DWORD *)a2);
  LODWORD(v12) = 103;
  sub_100083628((uint64_t)"key_derivation_algorithm_t", v7, &v12, 1);
  *a1 = v7;
  v8 = bswap32(*(_DWORD *)(a2 + 4));
  LODWORD(v12) = 0;
  sub_100083628((uint64_t)"key_derivation_prng_algorithm_t", v8, &v12, 1);
  a1[1] = v8;
  a1[2] = bswap32(*(_DWORD *)(a2 + 8));
  LODWORD(v12) = bswap32(*(_DWORD *)(a2 + 12));
  sub_100115850(v4, &v12);
  v9 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)a1 + 2) = v9;
  LODWORD(v12) = bswap32(*(_DWORD *)(a2 + 48));
  sub_1001158AC(v5, &v12);
  v10 = *(_OWORD *)(a2 + 68);
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 17) = v10;
  a1[21] = bswap32(*(_DWORD *)(a2 + 84));
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 88));
  v12 = 0x8000000100000011;
  sub_100083628((uint64_t)"wrap_key_crypto_algo", (int)v5, &v12, 2);
  a1[22] = (int)v5;
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 92));
  LODWORD(v12) = 7;
  sub_100083628((uint64_t)"wrap_key_crypto_padding_algo", (int)v5, &v12, 1);
  a1[23] = (int)v5;
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 96));
  LODWORD(v12) = 6;
  sub_100083628((uint64_t)"crypto_mode", (int)v5, &v12, 1);
  a1[24] = (int)v5;
  LODWORD(v12) = bswap32(*(_DWORD *)(a2 + 100));
  sub_100115BCC(v6, &v12);
  memcpy(a1 + 26, (const void *)(a2 + 104), 0x200uLL);
  return a1;
}

uint64_t sub_100115608(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  *(_DWORD *)a2 = bswap32(*(_DWORD *)a1);
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(a1 + 8));
  *(_DWORD *)(a2 + 12) = bswap32(*(_DWORD *)(a1 + 12));
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(_DWORD *)(a2 + 48) = bswap32(*(_DWORD *)(a1 + 48));
  v4 = *(_OWORD *)(a1 + 52);
  *(_OWORD *)(a2 + 68) = *(_OWORD *)(a1 + 68);
  *(_OWORD *)(a2 + 52) = v4;
  *(_DWORD *)(a2 + 84) = bswap32(*(_DWORD *)(a1 + 84));
  *(_DWORD *)(a2 + 88) = bswap32(*(_DWORD *)(a1 + 88));
  *(_DWORD *)(a2 + 92) = bswap32(*(_DWORD *)(a1 + 92));
  *(_DWORD *)(a2 + 96) = bswap32(*(_DWORD *)(a1 + 96));
  *(_DWORD *)(a2 + 100) = bswap32(*(_DWORD *)(a1 + 100));
  memcpy((void *)(a2 + 104), (const void *)(a1 + 104), 0x200uLL);
  return a2 + 616;
}

uint64_t sub_1001156CC(uint64_t a1)
{
  unint64_t v3;

  *(_DWORD *)a1 = 103;
  LODWORD(v3) = 103;
  sub_100083628((uint64_t)"key_derivation_algorithm_t", 103, &v3, 1);
  *(_DWORD *)(a1 + 4) = 0;
  LODWORD(v3) = 0;
  sub_100083628((uint64_t)"key_derivation_prng_algorithm_t", 0, &v3, 1);
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 84) = 0x11000000C0;
  v3 = 0x8000000100000011;
  sub_100083628((uint64_t)"wrap_key_crypto_algo", 17, &v3, 2);
  *(_DWORD *)(a1 + 92) = 7;
  LODWORD(v3) = 7;
  sub_100083628((uint64_t)"wrap_key_crypto_padding_algo", 7, &v3, 1);
  *(_DWORD *)(a1 + 96) = 6;
  LODWORD(v3) = 6;
  sub_100083628((uint64_t)"crypto_mode", 6, &v3, 1);
  bzero((void *)(a1 + 100), 0x204uLL);
  LODWORD(v3) = 20;
  sub_100115850((_DWORD *)(a1 + 12), &v3);
  LODWORD(v3) = 8;
  sub_1001158AC((_DWORD *)(a1 + 48), &v3);
  sub_100115908((void *)(a1 + 16), *(unsigned int *)(a1 + 12));
  sub_100115908((void *)(a1 + 52), *(unsigned int *)(a1 + 48));
  return a1;
}

_DWORD *sub_100115850(_DWORD *result, _DWORD *a2)
{
  _QWORD *exception;

  if (*a2 >= 0x21u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &off_10018C2D8;
    exception[1] = "_salt";
    exception[2] = "field size too large";
  }
  *result = *a2;
  return result;
}

_DWORD *sub_1001158AC(_DWORD *result, _DWORD *a2)
{
  _QWORD *exception;

  if (*a2 >= 0x21u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &off_10018C2D8;
    exception[1] = "_blob_encryption_iv";
    exception[2] = "field size too large";
  }
  *result = *a2;
  return result;
}

uint64_t sub_100115908(void *a1, size_t a2)
{
  uint64_t result;
  void *exception;
  unsigned int v4;
  _QWORD v5[33];

  result = CCRandomGenerateBytes(a1, a2);
  if ((_DWORD)result)
  {
    v4 = result;
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)v5);
    sub_100005A0C(v5, (uint64_t)"random generation failed with err code ", 39);
    std::ostream::operator<<(v5, v4);
    sub_100012294((uint64_t)exception, (uint64_t)v5, 0x9Au);
  }
  return result;
}

void sub_10011599C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10000FE34((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001159D0(uint64_t a1)
{
  int v1;
  void *exception;
  _QWORD v4[33];

  v1 = *(_DWORD *)(a1 + 88);
  if (v1 == -2147483647)
    return 0;
  if (v1 != 17)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)v4);
    sub_100005A0C(v4, (uint64_t)"Unsupported key decryption algo", 31);
    sub_100012294((uint64_t)exception, (uint64_t)v4, 0xA1u);
  }
  return 2;
}

void sub_100115A70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10000FE34((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100115AA4@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint8_t **a3@<X8>)
{
  unint64_t v4;
  size_t v7;
  uint64_t result;
  unsigned int v9;
  void *exception;
  void *v11;
  _QWORD *v12;
  const std::error_category *v13;
  char v14;

  v4 = *(unsigned int *)(a1 + 84);
  if ((v4 & 7) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v11 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"crypto_format: key size isn't a multiple of 8", 0x16u);
  }
  v14 = 0;
  sub_1001186C4(a3, v4 >> 3, &v14);
  v7 = strlen(a2);
  result = CCKeyDerivationPBKDF(2u, a2, v7, (const uint8_t *)(a1 + 16), *(unsigned int *)(a1 + 12), 1u, *(_DWORD *)(a1 + 8), *a3, a3[1] - *a3);
  v9 = result;
  if ((_DWORD)result)
  {
    v12 = __cxa_allocate_exception(0x40uLL);
    *v12 = &off_1001924F8;
    v13 = std::generic_category();
    v12[1] = v9;
    v12[2] = v13;
    *((_BYTE *)v12 + 24) = 0;
    *((_BYTE *)v12 + 48) = 0;
    v12[7] = "crypto_format: Can't derive key";
  }
  return result;
}

void sub_100115BB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_100115BCC(_DWORD *result, _DWORD *a2)
{
  _QWORD *exception;

  if (*a2 >= 0x201u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &off_10018C2D8;
    exception[1] = "_blob";
    exception[2] = "field size too large";
  }
  *result = *a2;
  return result;
}

_DWORD *sub_100115C28(_DWORD *a1, uint64_t a2, const char *a3)
{
  uint64_t v6;
  size_t v7;
  CCAlgorithm v8;
  uint64_t v9;
  void *exception;
  _QWORD v12[33];
  uint8_t *v13;
  uint8_t *v14;
  size_t dataOutMoved;
  void *v16;
  _BYTE *v17;

  v6 = sub_1001156CC((uint64_t)a1);
  LODWORD(v12[0]) = 8;
  sub_1001158AC((_DWORD *)(v6 + 48), v12);
  v7 = strlen(a3);
  a1[2] = CCCalibratePBKDF(2u, v7, a1[3], 1u, (unint64_t)a1[21] >> 3, 0x64u);
  sub_1001151CC(a2, &v16);
  dataOutMoved = 0;
  sub_100115AA4((uint64_t)a1, a3, &v13);
  v8 = sub_1001159D0((uint64_t)a1);
  v9 = CCCrypt(0, v8, 1u, v13, v14 - v13, a1 + 13, v16, v17 - (_BYTE *)v16, a1 + 26, 0x200uLL, &dataOutMoved);
  bzero(v13, v14 - v13);
  if ((_DWORD)v9)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)v12);
    sub_100005A0C(v12, (uint64_t)"Image key encoding failed with err code ", 40);
    std::ostream::operator<<(v12, v9);
    sub_100012294((uint64_t)exception, (uint64_t)v12, 0x9Au);
  }
  LODWORD(v12[0]) = dataOutMoved;
  sub_100115BCC(a1 + 25, v12);
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  return a1;
}

void sub_100115DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a5);
  sub_10000FE34((uint64_t)va);
  v7 = *(void **)(v5 - 88);
  if (v7)
  {
    *(_QWORD *)(v5 - 80) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(v5 - 56);
  if (v8)
  {
    *(_QWORD *)(v5 - 48) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100115E14(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v6;
  int v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  v4 = bswap32(*(_DWORD *)a2);
  v6 = xmmword_100148D50;
  v7 = 9;
  sub_100083628((uint64_t)"auth_table_entry_mechanism", v4, &v6, 5);
  *(_DWORD *)a1 = v4;
  *(_QWORD *)(a1 + 4) = bswap64(*(_QWORD *)(a2 + 4));
  *(_QWORD *)(a1 + 12) = bswap64(*(_QWORD *)(a2 + 12));
  return a1;
}

void sub_100115ED0(unsigned int *a1@<X1>, const char *a2@<X2>, unint64_t *a3@<X8>)
{
  CCAlgorithm v5;
  unsigned int v6;
  _QWORD *exception;
  const std::error_category *v8;
  void *__p;
  _BYTE *v10;
  size_t __sz;
  char __src[516];

  __sz = 0;
  sub_100115AA4((uint64_t)a1, a2, (uint8_t **)&__p);
  v5 = sub_1001159D0((uint64_t)a1);
  v6 = CCCrypt(1u, v5, 1u, __p, v10 - (_BYTE *)__p, a1 + 13, a1 + 26, a1[25], __src, a1[25], &__sz);
  if (v6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_1001924F8;
    v8 = std::generic_category();
    exception[1] = v6;
    exception[2] = v8;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "crypto_format: Can't decrypt wrapped key";
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_1000FE200(a3, __sz);
  sub_1000FE3F4((uint64_t)a3, (char *)*a3, __src, &__src[__sz], __sz);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_100116018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_100116058@<D0>(uint64_t a1@<X1>, const void **a2@<X2>, uint64_t a3@<X8>)
{
  const void *v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  void *exception;
  void *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  if (!sub_100116154(a1, a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v14 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"crypto_format: Cookie differs", 0x23u);
  }
  v6 = *a2;
  v7 = (unint64_t)*(unsigned int *)(a1 + 24) >> 3;
  v18 = 0;
  v17 = 0uLL;
  sub_100118740(&v17, v6, (uint64_t)v6 + v7, v7);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = (char *)*a2 + (v8 >> 3);
  v10 = (*(_DWORD *)(a1 + 32) + v8) >> 3;
  v11 = (uint64_t)*a2 + v10;
  v16 = 0;
  v15 = 0uLL;
  sub_100118740(&v15, v9, v11, v10 - (v8 >> 3));
  *(_OWORD *)a3 = v17;
  *(_QWORD *)(a3 + 16) = v18;
  result = *(double *)&v15;
  *(_OWORD *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 40) = v16;
  return result;
}

void sub_100116138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100116154(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  std::string v6;

  v2 = ((*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 24)) >> 3) + 5;
  if (a2[1] - *a2 != v2)
    return 0;
  v3 = *a2 + v2;
  *((_BYTE *)&v6.__r_.__value_.__s + 23) = 4;
  LODWORD(v6.__r_.__value_.__l.__data_) = *(_DWORD *)(v3 - 5);
  v6.__r_.__value_.__s.__data_[4] = 0;
  v4 = std::string::compare(&v6, "CKIE") == 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1001161E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *exception;
  void *v6;

  if (a5 == 616)
    operator new[]();
  exception = __cxa_allocate_exception(0x40uLL);
  v6 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"UDIF encryption: password header size mismatch", 0x16u);
}

void sub_100116378(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  operator delete[]();
}

uint64_t sub_1001163BC(uint64_t a1, uint64_t a2, uint64_t *a3, __SecKey *a4, uint64_t a5)
{
  _QWORD *v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _QWORD *exception;
  unsigned int Code;
  const std::error_category *v19;
  void *__p[3];
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  const __CFData *v25;
  CFDataRef v26;
  const __CFData *v27;
  CFErrorRef error;

  v9 = (_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  error = 0;
  *(_QWORD *)&v21 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)(a5 + 52), *(unsigned int *)(a5 + 48));
  sub_10011525C((uint64_t *)&v21, (uint64_t *)&v27);
  v10 = sub_100115350(a5);
  v26 = SecKeyCreateDecryptedData(a4, v10, v27, &error);
  if (!v26)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    Code = CFErrorGetCode(error);
    *exception = &off_1001924F8;
    v19 = std::generic_category();
    exception[1] = Code;
    exception[2] = v19;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Error while decrypting data using keychain";
  }
  sub_10011525C((uint64_t *)&v26, (uint64_t *)&v25);
  v11 = *a3;
  sub_1000FE124(v25, 0, 0, (unint64_t *)__p);
  sub_100116058(v11, (const void **)__p, (uint64_t)&v21);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v12 = *a3;
  *a3 = 0;
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  if (v13)
    operator delete();
  v14 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v14;
    operator delete(v14);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = v21;
  *(_QWORD *)(a1 + 16) = v22;
  v15 = *(void **)(a1 + 24);
  if (v15)
  {
    *(_QWORD *)(a1 + 32) = v15;
    operator delete(v15);
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
  }
  *(_OWORD *)(a1 + 24) = v23;
  *(_QWORD *)(a1 + 40) = v24;
  sub_100074B5C((const void **)&v25);
  sub_100074B5C((const void **)&v27);
  return a1;
}

void sub_100116590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  void *v20;
  void **v21;
  uint64_t v22;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;

  __cxa_free_exception(v20);
  sub_100074B5C((const void **)(v22 - 64));
  v24 = *(void **)(v19 + 56);
  if (v24)
  {
    *(_QWORD *)(v19 + 64) = v24;
    operator delete(v24);
  }
  v25 = *(_QWORD *)(v19 + 48);
  *(_QWORD *)(v19 + 48) = 0;
  if (v25)
    operator delete();
  v26 = *v21;
  if (*v21)
  {
    *(_QWORD *)(v19 + 32) = v26;
    operator delete(v26);
  }
  v27 = *(void **)v19;
  if (*(_QWORD *)v19)
  {
    *(_QWORD *)(v19 + 8) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100116638(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10011667C(_OWORD *a1)
{
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  operator new[]();
}

void sub_100116958()
{
  uint64_t v0;

  __cxa_end_catch();
  sub_100116638(&v0);
  JUMPOUT(0x10011698CLL);
}

void sub_10011697C()
{
  JUMPOUT(0x1001169B0);
}

__n128 sub_100116A0C(_QWORD *a1, uint64_t a2, __n128 *a3, uint64_t *a4)
{
  __n128 result;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  result = *a3;
  *(__n128 *)(a1 + 3) = *a3;
  a1[5] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v5 = *a4;
  *a4 = 0;
  a1[6] = v5;
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  return result;
}

const void **sub_100116A60(uint64_t a1, char *a2)
{
  return sub_100114BE4(*(_QWORD *)(a1 + 48), a2);
}

uint64_t sub_100116A68(uint64_t a1, CCOperation a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  CCCryptorStatus v11;
  unsigned int v13;
  _QWORD *exception;
  const std::error_category *v15;

  *(_QWORD *)(a1 + 24) = 0;
  v10 = a1 + 24;
  *(_DWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_100058878((_QWORD *)(a1 + 24), *(const void **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  *(_QWORD *)(v10 + 24) = a5;
  *(_QWORD *)(v10 + 32) = a4;
  v11 = CCCryptorCreate(a2, 0, 0, *(const void **)a3, *(_QWORD *)(a3 + 8) - *(_QWORD *)a3, 0, (CCCryptorRef *)(v10 - 16));
  if (v11)
  {
    v13 = v11;
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_1001924F8;
    v15 = std::generic_category();
    exception[1] = v13;
    exception[2] = v15;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "crypto_format: Can't initialize aes cryptor";
  }
  *(_BYTE *)a1 = 1;
  return a1;
}

void sub_100116B50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100116B6C(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)a1)
    CCCryptorRelease(*(CCCryptorRef *)(a1 + 8));
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_100116BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;

  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a2 + 24) = 0u;
  v3 = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  v4 = a1 + 56;
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 64) = 0;
  sub_10011B2D8(a1 + 24, &v9);
  sub_100015BC8(v4, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void sub_100116C90(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  void *v7;
  void *v8;

  v4 = v3;
  sub_100012168(v4);
  v6 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v6)
    operator delete();
  v7 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v7;
    operator delete(v7);
  }
  v8 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100116CEC(uint64_t a1, uint64_t *a2, uint64_t a3, const char *a4, __SecKey *a5)
{
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v15;
  char *v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  void *__p;
  unint64_t v26;
  unint64_t v27;
  SecKeyRef v28;
  int v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  int v34;
  _OWORD v35[32];

  v28 = a5;
  v8 = (unint64_t *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = 0;
  v10 = a1 + 56;
  *(_QWORD *)(a1 + 64) = 0;
  v11 = (unint64_t)*(unsigned int *)(v9 + 24) >> 3;
  v12 = *(char **)a1;
  v13 = *(char **)(a1 + 8);
  if (v11 <= v13 - v12)
  {
    if (v11 < v13 - v12)
    {
      v13 = &v12[v11];
      *(_QWORD *)(a1 + 8) = &v12[v11];
    }
  }
  else
  {
    sub_1001187B8((unint64_t *)a1, v11 - (v13 - v12));
    v12 = *(char **)a1;
    v13 = *(char **)(a1 + 8);
  }
  sub_100115908(v12, v13 - v12);
  v15 = (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 48) + 32) >> 3;
  v16 = *(char **)(a1 + 24);
  v17 = *(char **)(a1 + 32);
  if (v15 <= v17 - v16)
  {
    if (v15 < v17 - v16)
    {
      v17 = &v16[v15];
      *(_QWORD *)(a1 + 32) = &v16[v15];
    }
  }
  else
  {
    sub_1001187B8(v8, v15 - (v17 - v16));
    v16 = *(char **)(a1 + 24);
    v17 = *(char **)(a1 + 32);
  }
  sub_100115908(v16, v17 - v16);
  sub_10011B2D8((uint64_t)v8, &v29);
  sub_100015BC8(v10, (__int128 *)&v29);
  v18 = *(std::__shared_weak_count **)((char *)&v30 + 4);
  if (*(_QWORD *)((char *)&v30 + 4))
  {
    v19 = (unint64_t *)(*(_QWORD *)((char *)&v30 + 4) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  __p = 0;
  v26 = 0;
  v27 = 0;
  if (a4)
  {
    sub_100115C28(&v29, a1, a4);
    v26 = sub_1001188E0((uint64_t *)&__p, (uint64_t)&v29);
  }
  if (v28)
  {
    sub_100114E70((uint64_t)&v29, a1, &v28);
    v21 = v26;
    if (v26 >= v27)
    {
      v23 = sub_100118CEC((uint64_t *)&__p, (uint64_t)&v29);
    }
    else
    {
      *(_DWORD *)(v26 + 32) = 0;
      *(_OWORD *)v21 = 0u;
      *(_OWORD *)(v21 + 16) = 0u;
      *(_DWORD *)v21 = v29;
      v22 = v30;
      *(_OWORD *)(v21 + 20) = v31;
      *(_OWORD *)(v21 + 4) = v22;
      *(_QWORD *)(v21 + 36) = v32;
      *(_DWORD *)(v21 + 44) = v33;
      bzero((void *)(v21 + 48), 0x204uLL);
      *(_DWORD *)(v21 + 48) = v34;
      memcpy((void *)(v21 + 52), v35, 0x200uLL);
      *(_DWORD *)(v21 + 616) = 1;
      v23 = v21 + 620;
    }
    v26 = v23;
  }
  sub_100117080(a1, a3, (uint64_t *)&__p);
  if (__p)
  {
    v26 = (unint64_t)__p;
    operator delete(__p);
  }
  return a1;
}

void sub_100117008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  void *v16;

  if (__p)
    operator delete(__p);
  sub_100012168(v12);
  v14 = *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v10 + 48) = 0;
  if (v14)
    operator delete();
  v15 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 32) = v15;
    operator delete(v15);
  }
  v16 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

void sub_100117080(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  _BYTE *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unsigned int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  const std::error_category *v23;
  _QWORD *exception;
  const std::error_category *v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  void **p_p;
  uint64_t v29;
  int64_t v30;
  char v31;
  void *__p;
  _BYTE *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t **v36;

  v6 = (a3[1] - *a3) >> 2;
  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 72) = 1496311187 * v6;
  v35 = 76;
  v7 = 0xBDEF7BDEF7BDEF7CLL * v6 + 76;
  v34 = v7;
  v8 = sub_100117354(a1, a3);
  sub_100118F60(&__p, v8 + v7);
  sub_100114B40(*(_QWORD *)(a1 + 48), (uint64_t)__p);
  v9 = *a3;
  for (i = a3[1]; v9 != i; v9 += 620)
  {
    v26 = &v35;
    v27 = (std::__shared_weak_count *)&v34;
    p_p = &__p;
    v11 = *(unsigned int *)(v9 + 616);
    if ((_DWORD)v11 == -1)
      sub_100018028();
    v36 = &v26;
    ((void (*)(uint64_t ***, uint64_t))off_100190B68[v11])(&v36, v9);
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) < *(_QWORD *)(*(_QWORD *)(a1 + 48) + 64))
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    if (v12)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_1001924F8;
      v25 = std::generic_category();
      exception[1] = v12;
      exception[2] = v25;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "Failed truncating crypto header";
    }
  }
  v13 = (uint64_t *)__p;
  v14 = v33;
  v15 = (std::__shared_weak_count *)*((_QWORD *)sub_1001207C0() + 1);
  v26 = v13;
  v27 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  p_p = (void **)(v14 - (_BYTE *)v13);
  v29 = 0;
  v30 = v14 - (_BYTE *)v13;
  v31 = 0;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)a2 + 80))(a2, &v26);
  if (p_p != (void **)(int)v18)
  {
    v22 = __cxa_allocate_exception(0x40uLL);
    *v22 = &off_1001924F8;
    v23 = std::generic_category();
    v22[1] = v18;
    v22[2] = v23;
    *((_BYTE *)v22 + 24) = 0;
    *((_BYTE *)v22 + 48) = 0;
    v22[7] = "Failed writing crypto header";
  }
  v19 = v27;
  if (v27)
  {
    v20 = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
}

void sub_100117314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100117354(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v7;
  char *v8;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0;
  v4 = 0;
  do
  {
    v5 = *(unsigned int *)(v2 + 616);
    if ((_DWORD)v5 == -1)
      sub_100018028();
    v8 = &v7;
    v4 += ((uint64_t (*)(char **, uint64_t))off_100190B58[v5])(&v8, v2);
    v2 += 620;
  }
  while (v2 != v3);
  return v4;
}

uint64_t sub_1001173E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  int v15;
  _QWORD v16[45];
  uint64_t v17;
  uint64_t v18;

  if (!a4)
    return 0;
  v6 = a4;
  v9 = 0;
  v10 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48) + 52);
  while (1)
  {
    v11 = sub_100117530(a2, (a5 + v9) / v10, (const void *)(a3 + v9), (void *)(a3 + v9), 1);
    if ((_DWORD)v11)
      break;
    v9 += v10;
    if (!--v6)
      return 0;
  }
  v13 = v11;
  *(_QWORD *)&v14 = "crypto_format_backend::crypt_chunk(crypto::format::aes_context &, char *, size_t, uint64_t)";
  *((_QWORD *)&v14 + 1) = 34;
  v15 = 16;
  sub_1001177C8(v16, &v14);
  sub_100005A0C(&v17, (uint64_t)"Crypto operation on data of ", 28);
  std::ostream::operator<<(&v17, (a5 + v9) / v10);
  sub_100005A0C(&v17, (uint64_t)" failed with ", 13);
  std::ostream::operator<<(&v17, v13);
  std::ostream::~ostream(&v17, off_100191098);
  sub_10011A288((uint64_t)v16);
  std::ios::~ios(&v18);
  if ((int)v13 < 0)
    return v13;
  else
    return -(int)v13;
}

void sub_100117518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100117870((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100117530(uint64_t a1, uint64_t a2, const void *a3, void *a4, uint64_t a5)
{
  const void *v10;
  uint64_t v11;
  __int128 v13;
  int v14;
  CCHmacContext __dst;
  _QWORD macOut[2];
  int v17;

  macOut[0] = 0;
  macOut[1] = 0;
  v17 = 0;
  v10 = *(const void **)(a1 + 56);
  LODWORD(v13) = bswap32(a2);
  memcpy(&__dst, v10, sizeof(__dst));
  CCHmacUpdate(&__dst, &v13, 4uLL);
  CCHmacFinal(&__dst, macOut);
  v11 = CCCryptorReset(*(CCCryptorRef *)(a1 + 8), macOut);
  if ((_DWORD)v11)
  {
    *(_QWORD *)&v13 = "crypto::format::aes_context::crypt(uint32_t, const void *, void *, size_t)";
    *((_QWORD *)&v13 + 1) = 34;
    v14 = 16;
    sub_1001191F4(&__dst, &v13);
    sub_100005A0C(&__dst.ctx[90], (uint64_t)"CommonCryptoReset @ ", 20);
    std::ostream::operator<<(&__dst.ctx[90], a2);
    sub_100005A0C(&__dst.ctx[90], (uint64_t)"/", 1);
    std::ostream::operator<<(&__dst.ctx[90], *(_QWORD *)(a1 + 48) * a5);
    sub_100005A0C(&__dst.ctx[90], (uint64_t)" returned ", 10);
    std::ostream::operator<<(&__dst.ctx[90], v11);
    std::ostream::~ostream(&__dst.ctx[90], off_100190C58);
    sub_100119440((uint64_t)&__dst);
  }
  else
  {
    v11 = CCCryptorUpdate(*(CCCryptorRef *)(a1 + 8), a3, *(_QWORD *)(a1 + 48) * a5, a4, *(_QWORD *)(a1 + 48) * a5, 0);
    if (!(_DWORD)v11)
      return 0;
    *(_QWORD *)&v13 = "crypto::format::aes_context::crypt(uint32_t, const void *, void *, size_t)";
    *((_QWORD *)&v13 + 1) = 34;
    v14 = 16;
    sub_1001192DC(&__dst, &v13);
    sub_100005A0C(&__dst.ctx[90], (uint64_t)"CommonCryptoUpdate @ ", 21);
    std::ostream::operator<<(&__dst.ctx[90], a2);
    sub_100005A0C(&__dst.ctx[90], (uint64_t)"/", 1);
    std::ostream::operator<<(&__dst.ctx[90], *(_QWORD *)(a1 + 48) * a5);
    sub_100005A0C(&__dst.ctx[90], (uint64_t)" returned ", 10);
    std::ostream::operator<<(&__dst.ctx[90], v11);
    std::ostream::~ostream(&__dst.ctx[90], off_100190E78);
    sub_100119AA8((uint64_t)&__dst);
  }
  std::ios::~ios(&__dst.ctx[92]);
  if ((int)v11 < 0)
    return v11;
  else
    return -(int)v11;
}

void sub_100117794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100119384((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001177C8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10011B3CC((uint64_t)a1, a2);
  *a1 = off_100190FD0;
  a1[45] = &off_1001910D0;
  a1[46] = &off_1001910F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100190FD0;
  a1[45] = off_100191058;
  a1[46] = off_100191080;
  return a1;
}

void sub_10011784C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10011A288(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100117870(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100191098);
  sub_10011A288(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1001178B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  int v10;
  _QWORD block[10];
  int v13;
  unsigned int v14;

  if (a4 < 0x21)
    return sub_1001173E0(a1, a2, a3, a4, a5);
  v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48) + 52);
  if (qos_class_self() <= 0x14)
    return sub_1001173E0(a1, a2, a3, a4, a5);
  v14 = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10011799C;
  block[3] = &unk_100190A48;
  block[4] = a1;
  block[5] = a4;
  block[6] = a2;
  block[7] = a3;
  v13 = v10;
  block[8] = a5;
  block[9] = &v14;
  dispatch_apply((a4 + 31) >> 5, 0, block);
  return atomic_load(&v14);
}

uint64_t sub_10011799C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _BYTE v8[64];

  v3 = 32 * a2;
  v4 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(*(_QWORD *)(a1 + 40) - 32 * a2) >= 0x20)
    v5 = 32;
  else
    v5 = *(_QWORD *)(a1 + 40) - 32 * a2;
  sub_100116A68((uint64_t)v8, *(_DWORD *)(*(_QWORD *)(a1 + 48) + 16), *(_QWORD *)(a1 + 48) + 24, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 56), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 48));
  v6 = sub_1001173E0(v4, (uint64_t)v8, *(_QWORD *)(a1 + 56) + v3 * *(unsigned int *)(a1 + 80), v5, v3 * *(unsigned int *)(a1 + 80) + *(_QWORD *)(a1 + 64));
  if (v6)
    atomic_store(v6, *(unsigned int **)(a1 + 72));
  return sub_100116B6C((uint64_t)v8);
}

void sub_100117A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100116B6C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100117A44(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;
  int v17;
  _QWORD v18[45];
  uint64_t v19;
  uint64_t v20;

  if (!a3)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
  v9 = *(unsigned int *)(v8 + 52);
  if ((*(_BYTE *)(a1 + 192) & 1) != 0)
    v10 = 0;
  else
    v10 = *(_QWORD *)(v8 + 64);
  v11 = v10 + a4;
  v12 = v9 * a3;
  v13 = sub_100034324(*(_QWORD *)(a1 + 24), a2, v9 * a3, v10 + a4);
  if ((v13 & 0x80000000) == 0)
    return sub_1001178B0(a1, a1 + 120, a2, a3, a4);
  v15 = v13;
  *(_QWORD *)&v16 = "crypto_format_backend::read_aligned(char *, ssize_t, uint64_t)";
  *((_QWORD *)&v16 + 1) = 35;
  v17 = 16;
  sub_100117BB8(v18, &v16);
  sub_100005A0C(&v19, (uint64_t)"Crypto couldn't read from inner backend @ ", 42);
  std::ostream::operator<<(&v19, v11);
  sub_100005A0C(&v19, (uint64_t)"/", 1);
  std::ostream::operator<<(&v19, v12);
  std::ostream::~ostream(&v19, off_1001912B8);
  sub_10011A874((uint64_t)v18);
  std::ios::~ios(&v20);
  return v15;
}

void sub_100117BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100117C60((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100117BB8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10011B448((uint64_t)a1, a2);
  *a1 = off_1001911F0;
  a1[45] = &off_1001912F0;
  a1[46] = &off_100191318;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001911F0;
  a1[45] = off_100191278;
  a1[46] = off_1001912A0;
  return a1;
}

void sub_100117C3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10011A874(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100117C60(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001912B8);
  sub_10011A874(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100117CA0(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  size_t v12;

  v4 = *a2;
  v6 = (uint64_t)a2[2];
  v5 = a2[3];
  v7 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48) + 52);
  v8 = (unint64_t)v5 / v7 * v7;
  v9 = (unint64_t)v5 % v7;
  if ((unint64_t)v5 % v7)
  {
    result = sub_100117A44(a1, *(_QWORD *)(a1 + 184), 1uLL, (unint64_t)v5 / v7 * v7);
    if ((_DWORD)result)
      return result;
    v11 = v9;
    if (v6 >= (uint64_t)(v7 - v9))
      v12 = v7 - v9;
    else
      v12 = v6;
    memcpy(v4, (const void *)(*(_QWORD *)(a1 + 184) + v11), v12);
    v6 -= v12;
    v4 += v12;
    v8 += v7;
  }
  result = sub_100117A44(a1, (uint64_t)v4, v6 / v7, v8);
  if ((_DWORD)result)
    return result;
  if (!(v6 % v7))
    return *((unsigned int *)a2 + 4);
  result = sub_100117A44(a1, *(_QWORD *)(a1 + 184), 1uLL, v6 - v6 % v7 + v8);
  if (!(_DWORD)result)
  {
    memcpy(&v4[v6 / v7 * v7], *(const void **)(a1 + 184), v6 % v7);
    return *((unsigned int *)a2 + 4);
  }
  return result;
}

uint64_t sub_100117DAC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  int v17;
  _QWORD v18[45];
  uint64_t v19;
  uint64_t v20;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
  if ((*(_BYTE *)(a1 + 192) & 1) != 0)
    v9 = 0;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(unsigned int *)(v8 + 52);
  v11 = sub_1001178B0(a1, a1 + 56, a2, a3, a4);
  if (!(_DWORD)v11)
  {
    v12 = v9 + a4;
    v13 = v10 * a3;
    v14 = sub_10003993C(*(_QWORD *)(a1 + 24), a2, v13, v12);
    if ((v14 & 0x80000000) != 0)
    {
      v11 = v14;
      *(_QWORD *)&v16 = "crypto_format_backend::write_aligned(char *, ssize_t, uint64_t)";
      *((_QWORD *)&v16 + 1) = 36;
      v17 = 16;
      sub_100117F0C(v18, &v16);
      sub_100005A0C(&v19, (uint64_t)"Crypto couldn't write to inner backend @ ", 41);
      std::ostream::operator<<(&v19, v12);
      sub_100005A0C(&v19, (uint64_t)"/", 1);
      std::ostream::operator<<(&v19, v13);
      std::ostream::~ostream(&v19, off_1001914D8);
      sub_10011AE60((uint64_t)v18);
      std::ios::~ios(&v20);
    }
    else
    {
      return 0;
    }
  }
  return v11;
}

void sub_100117EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100117FB4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100117F0C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10011B4C4((uint64_t)a1, a2);
  *a1 = off_100191410;
  a1[45] = &off_100191510;
  a1[46] = &off_100191538;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100191410;
  a1[45] = off_100191498;
  a1[46] = off_1001914C0;
  return a1;
}

void sub_100117F90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10011AE60(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100117FB4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001914D8);
  sub_10011AE60(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100117FF4(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  char *v12;
  size_t v13;
  uint64_t v14;

  v4 = *a2;
  v6 = (int64_t)a2[2];
  v5 = a2[3];
  v7 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48) + 52);
  v8 = (unint64_t)v5 / v7 * v7;
  v9 = (unint64_t)v5 % v7;
  if ((unint64_t)v5 % v7)
  {
    result = sub_100117A44(a1, *(_QWORD *)(a1 + 184), 1uLL, (unint64_t)v5 / v7 * v7);
    if ((_DWORD)result)
      return result;
    v12 = &v4[v9];
    v13 = v6 >= (uint64_t)(v7 - v9) ? v7 - v9 : v6;
    memcpy(*(void **)(a1 + 184), v12, v13);
    result = sub_100117DAC(a1, *(_QWORD *)(a1 + 184), 1uLL, v8);
    if ((_DWORD)result)
      return result;
    v6 -= v13;
    v4 += v13;
    v8 += v13;
  }
  if (!*((_BYTE *)a2 + 40))
  {
    v10 = v6 / v7;
    result = sub_100117DAC(a1, (uint64_t)v4, v6 / v7, v8);
    if ((_DWORD)result)
      return result;
    v4 += v10 * v7;
    v8 += v10 * v7;
    v6 %= v7;
    goto LABEL_5;
  }
  if (v6 < v7)
  {
LABEL_5:
    if (!v6)
      return *((unsigned int *)a2 + 4);
    result = sub_100117A44(a1, *(_QWORD *)(a1 + 184), 1uLL, v8);
    if (!(_DWORD)result)
    {
      memcpy(*(void **)(a1 + 184), v4, v6);
      result = sub_100117DAC(a1, *(_QWORD *)(a1 + 184), 1uLL, v8);
      if (!(_DWORD)result)
        return *((unsigned int *)a2 + 4);
    }
    return result;
  }
  v14 = 0;
  while (1)
  {
    memcpy(*(void **)(a1 + 184), &v4[v14], v7);
    result = sub_100117DAC(a1, *(_QWORD *)(a1 + 184), 1uLL, v8 + v14);
    if ((_DWORD)result)
      return result;
    v6 -= v7;
    v14 += v7;
    if (v6 < v7)
    {
      v8 += v14;
      v4 += v14;
      goto LABEL_5;
    }
  }
}

uint64_t sub_100118180(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 192) & 1) != 0)
    v4 = 0;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48) + 64);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, v4 + a2);
}

uint64_t sub_1001181B4(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BYTE *v16;
  std::__shared_weak_count *v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  _BYTE v21[76];

  v3 = *(_DWORD *)(a1 + 192);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
  if ((v3 & 2) == 0)
    *(_QWORD *)(v4 + 56) = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if ((v3 & 1) != 0)
    v6 = 0;
  else
    v6 = *(_QWORD *)(v4 + 64);
  v7 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 56))(v5, (a2 + (unint64_t)*(unsigned int *)(v4 + 52) - 1)/ *(unsigned int *)(v4 + 52)* *(unsigned int *)(v4 + 52)+ v6);
  if (!(_DWORD)v7)
  {
    sub_100114B40(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48), (uint64_t)v21);
    v9 = (std::__shared_weak_count *)*((_QWORD *)sub_1001207C0() + 1);
    v16 = v21;
    v17 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v18 = xmmword_100149F80;
    v19 = 76;
    v20 = 0;
    v12 = (*(uint64_t (**)(_QWORD, _BYTE **))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24), &v16);
    v13 = v17;
    if ((_QWORD)v18 == v12)
      v7 = 0;
    else
      v7 = v12;
    if (v17)
    {
      v14 = (unint64_t *)&v17->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  return v7;
}

void sub_100118304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100012168((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **sub_100118320(uint64_t a1, char *a2)
{
  return sub_100114BE4(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48), a2);
}

void sub_10011832C(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 72))(&v11);
  sub_100038BC0(a1, &v11);
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *a1 = off_100190A78;
  a1[5] = *a3;
  v8 = a3[1];
  a1[6] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_100116A68((uint64_t)(a1 + 7), 0, *a3, *(_QWORD *)(*a3 + 56), *(unsigned int *)(*(_QWORD *)(*a3 + 48) + 52));
  sub_100116A68((uint64_t)(a1 + 15), 1u, *a3, *(_QWORD *)(*a3 + 56), *(unsigned int *)(*(_QWORD *)(*a3 + 48) + 52));
  operator new[]();
}

void sub_100118460(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100116B6C(v4);
  sub_100116B6C(v3);
  sub_100012168(v2);
  sub_100038C10(v1);
  _Unwind_Resume(a1);
}

void sub_1001184A0(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v5 = sub_100038BC0(a1, a3);
  *v5 = off_100190A78;
  v6 = *(_QWORD *)(a2 + 48);
  v5[5] = *(_QWORD *)(a2 + 40);
  v5[6] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_100116A68((uint64_t)(a1 + 7), *(_DWORD *)(a2 + 72), a2 + 80, *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 104));
  sub_100116A68((uint64_t)(a1 + 15), *(_DWORD *)(a2 + 136), a2 + 144, *(_QWORD *)(a2 + 176), *(_QWORD *)(a2 + 168));
  operator new[]();
}

void sub_10011856C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100116B6C(v4);
  sub_100116B6C(v3);
  sub_100012168(v2);
  sub_100038C10(v1);
  _Unwind_Resume(a1);
}

void sub_1001185A8(uint64_t a1, _QWORD *a2)
{
  char v2;

  sub_10011B540((uint64_t)&v2, a1, a2);
}

uint64_t sub_1001185E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 192) & 2) != 0 || (result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48) + 56)) == 0)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 192) & 1) != 0)
      v4 = 0;
    else
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48) + 64);
    if (v3 <= v4)
    {
      return 0;
    }
    else
    {
      v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 192) & 1) != 0)
        v6 = 0;
      else
        v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48) + 64);
      return v5 - v6;
    }
  }
  return result;
}

void sub_10011868C(_QWORD *a1)
{
  sub_10011B258(a1);
  operator delete();
}

_QWORD *sub_1001186B0(uint64_t a1, _QWORD *a2)
{
  return sub_100005A0C(a2, (uint64_t)"crypto", 6);
}

_QWORD *sub_1001186C4(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    sub_1000588F0(a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_100118724(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100118740(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = sub_1000588F0(result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10011879C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001187B8(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      sub_100017E44();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_1001188E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x2FE592FE592FE593 * ((a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x69B4069B4069B4)
    sub_100017E44();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2FE592FE592FE593 * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x34DA034DA034DALL)
    v9 = 0x69B4069B4069B4;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100118C1C(v7, v9);
  else
    v10 = 0;
  __p = v10;
  v14 = &v10[620 * v4];
  v15 = (uint64_t)v14;
  v16 = &v10[620 * v9];
  *(_DWORD *)(sub_100118A80((uint64_t)v14, a2) + 616) = 0;
  v15 += 620;
  sub_100118B40(a1, &__p);
  v11 = a1[1];
  if ((char *)v15 != v14)
    v15 = (uint64_t)&v14[(v15 - (uint64_t)v14 - 620) % 0x26CuLL];
  if (__p)
    operator delete(__p);
  return v11;
}

void sub_100118A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100118A80(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
  *(_OWORD *)(a1 + 52) = v5;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  bzero((void *)(a1 + 100), 0x204uLL);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  memcpy((void *)(a1 + 104), (const void *)(a2 + 104), 0x200uLL);
  return a1;
}

uint64_t *sub_100118B40(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = v6 - 620;
    do
    {
      v8 = v4 - 620;
      *(_BYTE *)v7 = 0;
      *(_DWORD *)(v7 + 616) = -1;
      v9 = *(unsigned int *)(v4 - 4);
      if ((_DWORD)v9 != -1)
      {
        result = (uint64_t *)((uint64_t (*)(char *, uint64_t, uint64_t))off_100190B48[v9])(&v13, v7, v8);
        *(_DWORD *)(v7 + 616) = v9;
      }
      v7 -= 620;
      v4 = v8;
    }
    while (v8 != v5);
    v6 = v7 + 620;
  }
  a2[1] = v6;
  v10 = *v3;
  *v3 = v6;
  a2[1] = v10;
  v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *sub_100118C1C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x69B4069B4069B5)
    sub_100012320();
  return operator new(620 * a2);
}

uint64_t sub_100118C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100118A80(a2, a3);
}

void *sub_100118C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;

  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = *(_DWORD *)a3;
  v5 = *(_OWORD *)(a3 + 4);
  *(_OWORD *)(a2 + 20) = *(_OWORD *)(a3 + 20);
  *(_OWORD *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a3 + 36);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(a3 + 44);
  bzero((void *)(a2 + 48), 0x204uLL);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  return memcpy((void *)(a2 + 52), (const void *)(a3 + 52), 0x200uLL);
}

uint64_t sub_100118CEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0x2FE592FE592FE593 * ((a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x69B4069B4069B4)
    sub_100017E44();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2FE592FE592FE593 * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x34DA034DA034DALL)
    v9 = 0x69B4069B4069B4;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100118C1C(v7, v9);
  else
    v10 = 0;
  v11 = &v10[620 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[620 * v9];
  *((_DWORD *)v11 + 8) = 0;
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *(_DWORD *)v11 = *(_DWORD *)a2;
  v12 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(v11 + 20) = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(v11 + 4) = v12;
  *((_DWORD *)v11 + 9) = *(_DWORD *)(a2 + 36);
  *((_DWORD *)v11 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v11 + 11) = *(_DWORD *)(a2 + 44);
  bzero(v11 + 48, 0x204uLL);
  *((_DWORD *)v11 + 12) = *(_DWORD *)(a2 + 48);
  memcpy(v11 + 52, (const void *)(a2 + 52), 0x200uLL);
  *((_DWORD *)v11 + 154) = 1;
  v17 = v11 + 620;
  sub_100118B40(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 620) % 0x26CuLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_100118E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100118EE0(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1000588F0(a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_100118F34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100118F50()
{
  return 616;
}

uint64_t sub_100118F58()
{
  return 564;
}

_QWORD *sub_100118F60(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1000588F0(a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_100118FB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100118FD0(_QWORD ***a1, uint64_t a2)
{
  _QWORD **v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  int v8;

  v3 = *a1;
  v7 = xmmword_100148D50;
  v8 = 9;
  sub_100083628((uint64_t)"auth_table_entry_mechanism", 1, &v7, 5);
  v4 = *v3[1];
  v5 = *v3[2] + **v3;
  *(_DWORD *)v5 = 0x1000000;
  *(_QWORD *)(v5 + 4) = bswap64(v4);
  *(_QWORD *)(v5 + 12) = 0x6802000000000000;
  **v3 += 20;
  result = sub_100115608(a2, *v3[2] + *v3[1]);
  *v3[1] += 616;
  return result;
}

void *sub_1001190B8(_QWORD ***a1, uint64_t a2)
{
  _QWORD **v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *result;
  __int128 v9;
  int v10;

  v3 = *a1;
  v9 = xmmword_100148D50;
  v10 = 9;
  sub_100083628((uint64_t)"auth_table_entry_mechanism", 2, &v9, 5);
  v4 = *v3[1];
  v5 = *v3[2] + **v3;
  *(_DWORD *)v5 = 0x2000000;
  *(_QWORD *)(v5 + 4) = bswap64(v4);
  *(_QWORD *)(v5 + 12) = 0x3402000000000000;
  **v3 += 20;
  v6 = *v3[2] + *v3[1];
  *(_DWORD *)v6 = bswap32(*(_DWORD *)a2);
  v7 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(v6 + 20) = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(v6 + 4) = v7;
  *(_DWORD *)(v6 + 36) = bswap32(*(_DWORD *)(a2 + 36));
  *(_DWORD *)(v6 + 40) = bswap32(*(_DWORD *)(a2 + 40));
  *(_DWORD *)(v6 + 44) = bswap32(*(_DWORD *)(a2 + 44));
  *(_DWORD *)(v6 + 48) = bswap32(*(_DWORD *)(a2 + 48));
  result = memcpy((void *)(v6 + 52), (const void *)(a2 + 52), 0x200uLL);
  *v3[1] += 564;
  return result;
}

_QWORD *sub_1001191F4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1001193C4((uint64_t)a1, a2);
  *a1 = off_100190B90;
  a1[45] = &off_100190C90;
  a1[46] = &off_100190CB8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100190B90;
  a1[45] = off_100190C18;
  a1[46] = off_100190C40;
  return a1;
}

void sub_100119278(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100119440(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10011929C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100190C58);
  sub_100119440(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1001192DC(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100119A2C((uint64_t)a1, a2);
  *a1 = off_100190DB0;
  a1[45] = &off_100190EB0;
  a1[46] = &off_100190ED8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100190DB0;
  a1[45] = off_100190E38;
  a1[46] = off_100190E60;
  return a1;
}

void sub_100119360(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100119AA8(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100119384(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100190E78);
  sub_100119AA8(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1001193C4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100190D28;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10011942C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100119440(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100190D28;
  sub_1001196F8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1001194DC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100190C58);
  sub_100119440(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100119530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100119564(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1001195B0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100190C58);
  sub_100119440(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1001195E8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100190C58);
  sub_100119440(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100119638(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100190C58);
  sub_100119440(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100119678(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100190C58);
  sub_100119440(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1001196D4(uint64_t a1)
{
  sub_100119440(a1);
  operator delete();
}

uint64_t sub_1001196F8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100119848((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100119820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100119848(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 564;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 564;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100119A2C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100190F48;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100119A94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100119AA8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100190F48;
  sub_100119D60(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100119B44(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100190E78);
  sub_100119AA8(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100119B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100119BCC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100119C18(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100190E78);
  sub_100119AA8(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100119C50(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100190E78);
  sub_100119AA8(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100119CA0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100190E78);
  sub_100119AA8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100119CE0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100190E78);
  sub_100119AA8(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100119D3C(uint64_t a1)
{
  sub_100119AA8(a1);
  operator delete();
}

uint64_t sub_100119D60(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100119EB0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100119E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100119EB0(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 578;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 578;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10011A094(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100191098);
  sub_10011A288(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10011A0CC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100191098);
  sub_10011A288(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10011A10C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100191098);
  sub_10011A288(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10011A160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10011A194(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10011A1E0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100191098);
  sub_10011A288(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10011A230(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100191098);
  sub_10011A288(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10011A288(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100191168;
  sub_10011A324(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10011A324(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10011A49C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10011A44C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10011A478(uint64_t a1)
{
  sub_10011A288(a1);
  operator delete();
}

int *sub_10011A49C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 690;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 690;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10011A680(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001912B8);
  sub_10011A874(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10011A6B8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001912B8);
  sub_10011A874(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10011A6F8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001912B8);
  sub_10011A874(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10011A74C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10011A780(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10011A7CC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001912B8);
  sub_10011A874(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10011A81C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001912B8);
  sub_10011A874(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10011A874(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100191388;
  sub_10011A910(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10011A910(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10011AA88((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10011AA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10011AA64(uint64_t a1)
{
  sub_10011A874(a1);
  operator delete();
}

int *sub_10011AA88(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 738;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 738;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10011AC6C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001914D8);
  sub_10011AE60(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10011ACA4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001914D8);
  sub_10011AE60(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10011ACE4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001914D8);
  sub_10011AE60(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10011AD38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10011AD6C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10011ADB8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001914D8);
  sub_10011AE60(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10011AE08(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001914D8);
  sub_10011AE60(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10011AE60(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001915A8;
  sub_10011AEFC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10011AEFC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10011B074((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10011B024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10011B050(uint64_t a1)
{
  sub_10011AE60(a1);
  operator delete();
}

int *sub_10011B074(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 806;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 806;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_10011B258(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = off_100190A78;
  if (a1[23])
    operator delete[]();
  sub_100116B6C((uint64_t)(a1 + 15));
  sub_100116B6C((uint64_t)(a1 + 7));
  sub_100012168((uint64_t)(a1 + 5));
  *a1 = off_1001725B8;
  sub_100012168((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_10011B2D8@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x198uLL);
  result = sub_10011B330((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_10011B31C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10011B330(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_100191628;
  CCHmacInit((CCHmacContext *)(a1 + 24), 0, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return a1;
}

void sub_10011B370(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10011B384(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100191628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10011B394(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100191628;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10011B3CC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100191168;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10011B434(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10011B448(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100191388;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10011B4B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10011B4C4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001915A8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10011B52C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_10011B540(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;

  v5 = operator new(0xE0uLL);
  sub_10011B5A8(v5, a2, a3);
}

void sub_10011B594(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10011B5A8(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100176D10;
  sub_1001184A0(a1 + 3, a2, a3);
}

void sub_10011B5DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10011B5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = 1;
  operator new();
}

void sub_10011B70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (a15 < 0)
    operator delete(__p);
  v17 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v15 + 16) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10011B78C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  void *exception;
  __int128 v21;
  int v22;
  _QWORD v23[45];
  uint64_t v24;
  _BYTE v25[152];
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;

  v2 = (unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 7) >> 3;
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  v4 = v3;
  v5 = v3 == v2 || v3 == v2 + 16;
  v6 = v5;
  if (v5)
  {
    v7 = v3 - v2;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    v9 = *((_QWORD *)sub_1001207C0() + 1);
    *(_QWORD *)&v26 = v8;
    *((_QWORD *)&v26 + 1) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v27 = v2;
    v28 = v7;
    v29 = v2;
    v30 = 0;
    v12 = (*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16), &v26);
    if (v2 != v12)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_100005920((uint64_t)v23);
      sub_100005A0C(v23, (uint64_t)"Failed reading ", 15);
      sub_10011C7C0(v23, (_QWORD *)a1);
      sub_100012294((uint64_t)exception, (uint64_t)v23, v12);
    }
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v21 = "sparse_bundles::mapped_blocks_t::load_file()";
      *((_QWORD *)&v21 + 1) = 42;
      v22 = 2;
      sub_10011BFC0(v23, &v21);
      sub_100005A0C(&v24, (uint64_t)"Found a valid file for ", 23);
      sub_10011C7C0(&v24, (_QWORD *)a1);
      std::ostream::~ostream(&v24, off_100191748);
      sub_10011CA34((uint64_t)v23);
      std::ios::~ios(v25);
    }
    *(_BYTE *)(a1 + 24) = 0;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else if (v3)
  {
    *(_QWORD *)&v26 = "sparse_bundles::mapped_blocks_t::load_file()";
    *((_QWORD *)&v26 + 1) = 42;
    LODWORD(v27) = 16;
    sub_10006BE80(v23, &v26);
    sub_100005A0C(&v24, (uint64_t)"invalid file size for ", 22);
    sub_10011C7C0(&v24, (_QWORD *)a1);
    sub_100005A0C(&v24, (uint64_t)", current is ", 13);
    std::ostream::operator<<(&v24, v4);
    sub_100005A0C(&v24, (uint64_t)" while expected is ", 19);
    std::ostream::operator<<(&v24, v2);
    sub_100005A0C(&v24, (uint64_t)", truncating", 12);
    std::ostream::~ostream(&v24, off_100179710);
    sub_10006EA70((uint64_t)v23);
    std::ios::~ios(v25);
    v16 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), 0);
    if (v16)
    {
      v17 = v16;
      v18 = __cxa_allocate_exception(0x40uLL);
      sub_100005920((uint64_t)v23);
      sub_100005A0C(v23, (uint64_t)"Failed truncating ", 18);
      sub_10011C7C0(v23, (_QWORD *)a1);
      sub_100012294((uint64_t)v18, (uint64_t)v23, v17);
    }
  }
  else if (sub_1000BF0D4())
  {
    *(_QWORD *)&v26 = "sparse_bundles::mapped_blocks_t::load_file()";
    *((_QWORD *)&v26 + 1) = 42;
    LODWORD(v27) = 2;
    sub_10011C0A8(v23, &v26);
    sub_100005A0C(&v24, (uint64_t)"file of ", 8);
    sub_10011C7C0(&v24, (_QWORD *)a1);
    sub_100005A0C(&v24, (uint64_t)" was just created (truncated)", 29);
    std::ostream::~ostream(&v24, off_100191968);
    sub_10011D020((uint64_t)v23);
    std::ios::~ios(v25);
  }
  return v6;
}

void sub_10011BB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10000FE34((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10011BBE4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  _QWORD v12[45];
  uint64_t v13;
  uint64_t v14;

  v6 = a2 + a3 - 1;
  result = sub_1000BF0D4();
  if ((_DWORD)result)
  {
    *(_QWORD *)&v10 = "sparse_bundles::mapped_blocks_t::map_range(uint64_t, uint64_t)";
    *((_QWORD *)&v10 + 1) = 42;
    v11 = 2;
    sub_10011C514(v12, &v10);
    sub_10011C7C0(&v13, (_QWORD *)a1);
    sub_100005A0C(&v13, (uint64_t)" - map_range: [", 15);
    v8 = v13;
    *(_DWORD *)((char *)&v13 + *(_QWORD *)(v13 - 24) + 8) |= 0x200u;
    *(_DWORD *)((char *)&v13 + *(_QWORD *)(v8 - 24) + 8) = *(_DWORD *)((_BYTE *)&v13 + *(_QWORD *)(v8 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v13, a2);
    sub_100005A0C(&v13, (uint64_t)"-", 1);
    std::ostream::operator<<(&v13, v6);
    v9 = v13;
    *(_DWORD *)((char *)&v13 + *(_QWORD *)(v13 - 24) + 8) &= ~0x200u;
    *(_DWORD *)((char *)&v13 + *(_QWORD *)(v9 - 24) + 8) = *(_DWORD *)((_BYTE *)&v13 + *(_QWORD *)(v9 - 24) + 8) & 0xFFFFFFB5 | 2;
    sub_100005A0C(&v13, (uint64_t)"]", 1);
    std::ostream::~ostream(&v13, off_100191DA8);
    sub_10011DBF8((uint64_t)v12);
    result = std::ios::~ios(&v14);
  }
  if (a3)
  {
    result = sub_100093F14(*(_QWORD *)(a1 + 8), a2 >> 12, v6 >> 12, 1);
    if ((_DWORD)result)
      *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

void sub_10011BD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10011C5BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10011BD80(_QWORD *a1, uint64_t a2)
{
  void *__p;

  (**(void (***)(_QWORD))*a1)(*a1);
  sub_10003F7D4(a2, &__p);
  operator new();
}

void sub_10011BE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10011BE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10011BD80((_QWORD *)(a2 + 16), a3);
}

void sub_10011BEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_10011BF1C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  sub_10011BD80(a4, a3);
}

void sub_10011BF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10011BFC0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10011DFF0((uint64_t)a1, a2);
  *a1 = off_100191680;
  a1[45] = &off_100191780;
  a1[46] = &off_1001917A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100191680;
  a1[45] = off_100191708;
  a1[46] = off_100191730;
  return a1;
}

void sub_10011C044(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10011CA34(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10011C068(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100191748);
  sub_10011CA34(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_10011C0A8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10011E06C((uint64_t)a1, a2);
  *a1 = off_1001918A0;
  a1[45] = &off_1001919A0;
  a1[46] = &off_1001919C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001918A0;
  a1[45] = off_100191928;
  a1[46] = off_100191950;
  return a1;
}

void sub_10011C12C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10011D020(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10011C150(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100191968);
  sub_10011D020(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10011C190(uint64_t a1, uint64_t a2)
{
  return sub_10011BBE4(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 16));
}

uint64_t sub_10011C19C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v14;
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _BYTE v23[152];

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 7;
    if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16)) == v3 >> 3
      || (v2 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), 0),
          !(_DWORD)v2))
    {
      v4 = v3 >> 3;
      *(_BYTE *)(a1 + 24) = 0;
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      v7 = (std::__shared_weak_count *)*((_QWORD *)sub_1001207C0() + 1);
      v16 = v6;
      v17 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v18 = v4;
      v19 = 0;
      v20 = v4;
      v21 = 0;
      v2 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 80))(v5, &v16);
      v10 = v17;
      if (v17)
      {
        v11 = (unint64_t *)&v17->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (v4 == (int)v2)
      {
        v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), 1);
        if ((_DWORD)v2)
          *(_BYTE *)(a1 + 24) = 1;
        if (sub_1000BF0D4())
        {
          *(_QWORD *)&v14 = "sparse_bundles::mapped_blocks_t::flush()";
          *((_QWORD *)&v14 + 1) = 38;
          v15 = 2;
          sub_10011C42C(&v16, &v14);
          sub_100005A0C(&v22, (uint64_t)"Flushed ", 8);
          sub_10011C7C0(&v22, (_QWORD *)a1);
          sub_100005A0C(&v22, (uint64_t)", res=", 6);
          std::ostream::operator<<(&v22, v2);
          std::ostream::~ostream(&v22, off_100191B88);
          sub_10011D60C((uint64_t)&v16);
          std::ios::~ios(v23);
        }
      }
      else
      {
        *(_BYTE *)(a1 + 24) = 1;
      }
    }
  }
  else
  {
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v14 = "sparse_bundles::mapped_blocks_t::flush()";
      *((_QWORD *)&v14 + 1) = 38;
      v15 = 2;
      sub_1000EC2AC(&v16, &v14);
      sub_10011C7C0(&v22, (_QWORD *)a1);
      sub_100005A0C(&v22, (uint64_t)" is clean, skipping flush", 25);
      std::ostream::~ostream(&v22, off_10018B858);
      sub_1000EC77C((uint64_t)&v16);
      std::ios::~ios(v23);
    }
    return 0;
  }
  return v2;
}

void sub_10011C3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10011C4D4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10011C42C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10011E0E8((uint64_t)a1, a2);
  *a1 = off_100191AC0;
  a1[45] = &off_100191BC0;
  a1[46] = &off_100191BE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100191AC0;
  a1[45] = off_100191B48;
  a1[46] = off_100191B70;
  return a1;
}

void sub_10011C4B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10011D60C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10011C4D4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100191B88);
  sub_10011D60C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_10011C514(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10011E164((uint64_t)a1, a2);
  *a1 = off_100191CE0;
  a1[45] = &off_100191DE0;
  a1[46] = &off_100191E08;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100191CE0;
  a1[45] = off_100191D68;
  a1[46] = off_100191D90;
  return a1;
}

void sub_10011C598(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10011DBF8(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10011C5BC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100191DA8);
  sub_10011DBF8(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10011C5FC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  int v12;
  _QWORD v13[45];
  uint64_t v14;
  uint64_t v15;

  result = sub_1000BF0D4();
  if ((_DWORD)result)
  {
    *(_QWORD *)&v11 = "sparse_bundles::mapped_blocks_t::unmap_interval(uint64_t, uint64_t)";
    *((_QWORD *)&v11 + 1) = 47;
    v12 = 2;
    sub_100016700(v13, &v11);
    sub_10011C7C0(&v14, (_QWORD *)a1);
    sub_100005A0C(&v14, (uint64_t)" - unmap_range: [", 17);
    v7 = v14;
    *(_DWORD *)((char *)&v14 + *(_QWORD *)(v14 - 24) + 8) |= 0x200u;
    *(_DWORD *)((char *)&v14 + *(_QWORD *)(v7 - 24) + 8) = *(_DWORD *)((_BYTE *)&v14 + *(_QWORD *)(v7 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v14, a2);
    sub_100005A0C(&v14, (uint64_t)"-", 1);
    std::ostream::operator<<(&v14, a3);
    v8 = v14;
    *(_DWORD *)((char *)&v14 + *(_QWORD *)(v14 - 24) + 8) &= ~0x200u;
    *(_DWORD *)((char *)&v14 + *(_QWORD *)(v8 - 24) + 8) = *(_DWORD *)((_BYTE *)&v14 + *(_QWORD *)(v8 - 24) + 8) & 0xFFFFFFB5 | 2;
    sub_100005A0C(&v14, (uint64_t)"]", 1);
    std::ostream::~ostream(&v14, off_10016E370);
    sub_100016864((uint64_t)v13);
    result = std::ios::~ios(&v15);
  }
  if (a3 != a2)
  {
    v9 = a2 >> 12;
    v10 = a3 >> 12;
    if ((a2 & 0xFFF) != 0)
    {
      if (v9 == v10)
        return result;
      ++v9;
    }
    if ((~(_WORD)a3 & 0xFFF) != 0)
    {
      if (v9 == v10)
        return result;
      --v10;
    }
    result = sub_100093F14(*(_QWORD *)(a1 + 8), v9, v10, 0);
    if ((_DWORD)result)
      *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

void sub_10011C7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000167A8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10011C7C0(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = sub_100005A0C(a1, (uint64_t)"mapped blocks of band ", 22);
  *(_DWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 8) & 0xFFFFFFB5 | 8;
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a2);
  *(_DWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 8) & 0xFFFFFFB5 | 2;
  return a1;
}

uint64_t sub_10011C840(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100191748);
  sub_10011CA34(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10011C878(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100191748);
  sub_10011CA34(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10011C8B8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100191748);
  sub_10011CA34(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10011C90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10011C940(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10011C98C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100191748);
  sub_10011CA34(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10011C9DC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100191748);
  sub_10011CA34(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10011CA34(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100191818;
  sub_10011CAD0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10011CAD0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10011CC48((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10011CBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10011CC24(uint64_t a1)
{
  sub_10011CA34(a1);
  operator delete();
}

int *sub_10011CC48(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 89;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 89;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10011CE2C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100191968);
  sub_10011D020(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10011CE64(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100191968);
  sub_10011D020(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10011CEA4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100191968);
  sub_10011D020(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10011CEF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10011CF2C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10011CF78(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100191968);
  sub_10011D020(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10011CFC8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100191968);
  sub_10011D020(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10011D020(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100191A38;
  sub_10011D0BC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10011D0BC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10011D234((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10011D1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10011D210(uint64_t a1)
{
  sub_10011D020(a1);
  operator delete();
}

int *sub_10011D234(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 99;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 99;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10011D418(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100191B88);
  sub_10011D60C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10011D450(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100191B88);
  sub_10011D60C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10011D490(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100191B88);
  sub_10011D60C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10011D4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10011D518(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10011D564(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100191B88);
  sub_10011D60C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10011D5B4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100191B88);
  sub_10011D60C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10011D60C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100191C58;
  sub_10011D6A8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10011D6A8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10011D820((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10011D7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10011D7FC(uint64_t a1)
{
  sub_10011D60C(a1);
  operator delete();
}

int *sub_10011D820(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 141;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 141;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10011DA04(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100191DA8);
  sub_10011DBF8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10011DA3C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100191DA8);
  sub_10011DBF8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10011DA7C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100191DA8);
  sub_10011DBF8(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10011DAD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10011DB04(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10011DB50(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100191DA8);
  sub_10011DBF8(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10011DBA0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100191DA8);
  sub_10011DBF8(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10011DBF8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100191E78;
  sub_10011DC94(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10011DC94(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10011DE0C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10011DDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10011DDE8(uint64_t a1)
{
  sub_10011DBF8(a1);
  operator delete();
}

int *sub_10011DE0C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 150;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 150;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10011DFF0(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100191818;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10011E058(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10011E06C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100191A38;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10011E0D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10011E0E8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100191C58;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10011E150(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10011E164(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100191E78;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10011E1CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

char *sub_10011E1E0(unint64_t a1)
{
  unsigned __int8 v1;
  unint64_t v2;
  unint64_t v3;
  int v5;
  unint64_t v6;

  v1 = atomic_load((unsigned __int8 *)&qword_1001A1018);
  if ((v1 & 1) == 0)
  {
    v6 = a1;
    v5 = __cxa_guard_acquire(&qword_1001A1018);
    a1 = v6;
    if (v5)
    {
      __cxa_atexit((void (*)(void *))sub_10011E534, 0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1001A1018);
      a1 = v6;
    }
  }
  v2 = 0x9DDFEA08EB382D69 * (((8 * a1) + 8) ^ HIDWORD(a1));
  v3 = 0x9DDFEA08EB382D69 * (HIDWORD(a1) ^ (v2 >> 47) ^ v2);
  return (char *)&unk_1001A0828
       + 64 * (unint64_t)((9 * ((v3 >> 47) ^ v3)) & 0xF);
}

char *sub_10011E2A0(unint64_t a1)
{
  unsigned __int8 v1;
  unint64_t v2;
  unint64_t v3;
  int v5;
  unint64_t v6;

  v1 = atomic_load((unsigned __int8 *)&qword_1001A1020);
  if ((v1 & 1) == 0)
  {
    v6 = a1;
    v5 = __cxa_guard_acquire(&qword_1001A1020);
    a1 = v6;
    if (v5)
    {
      __cxa_atexit((void (*)(void *))sub_10011E56C, 0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1001A1020);
      a1 = v6;
    }
  }
  v2 = 0x9DDFEA08EB382D69 * (((8 * a1) + 8) ^ HIDWORD(a1));
  v3 = 0x9DDFEA08EB382D69 * (HIDWORD(a1) ^ (v2 >> 47) ^ v2);
  return (char *)&unk_1001A0C28 + 48 * ((9 * ((v3 >> 47) ^ v3)) & 0xF);
}

uint64_t sub_10011E364(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = off_100191EF8;
  *(_QWORD *)(result + 8) = v2;
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t sub_10011E384(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;

  *(_QWORD *)a1 = off_100191EF8;
  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(unint64_t **)(a1 + 8);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stxr(v4, v2));
    if (!v4)
      sub_10011E4D4((unint64_t)v2);
  }
  return a1;
}

void sub_10011E3DC(uint64_t a1)
{
  sub_10011E384(a1);
  operator delete();
}

unint64_t *sub_10011E400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  unint64_t *result;
  unint64_t v8;
  unint64_t v9;

  v6 = *(unsigned __int8 *)(a1 + 16);
  result = *(unint64_t **)(a1 + 8);
  if (v6)
  {
    do
    {
      v8 = __ldxr(result);
      v9 = v8 - 1;
    }
    while (__stxr(v9, result));
    if (!v9)
      sub_10011E4D4((unint64_t)result);
    *(_BYTE *)(a1 + 16) = 0;
    return (unint64_t *)sub_1000CD424(*(_QWORD *)(a1 + 8), a2, a3);
  }
  else
  {
    *(_BYTE *)(a3 + 16) = 0;
    *(_QWORD *)a3 = off_100191F18;
    *(_QWORD *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 24) = a2;
  }
  return result;
}

uint64_t sub_10011E484(uint64_t a1)
{
  *(_QWORD *)a1 = off_100191F18;
  if (*(_BYTE *)(a1 + 16))
  {
    atomic_store(*(_QWORD *)(a1 + 24), *(unint64_t **)(a1 + 8));
    sub_10011E4D4(*(_QWORD *)(a1 + 8));
  }
  *(_BYTE *)(a1 + 16) = 0;
  return sub_10011E384(a1);
}

void sub_10011E4D4(unint64_t a1)
{
  char *v2;
  char *v3;

  v2 = sub_10011E1E0(a1);
  std::mutex::lock((std::mutex *)v2);
  v3 = sub_10011E2A0(a1);
  std::condition_variable::notify_all((std::condition_variable *)v3);
  std::mutex::unlock((std::mutex *)v2);
}

void sub_10011E510(uint64_t a1)
{
  sub_10011E484(a1);
  operator delete();
}

void sub_10011E534()
{
  uint64_t i;

  for (i = &stru_100000380.flags; i != -64; i -= 64)
    std::mutex::~mutex((std::mutex *)((char *)&unk_1001A0828 + i));
}

void sub_10011E56C()
{
  uint64_t i;

  for (i = &stru_100000290.flags; i != -48; i -= 48)
    std::condition_variable::~condition_variable((std::condition_variable *)((char *)&unk_1001A0C28 + i));
}

_QWORD *sub_10011E5A4(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  uint64_t v4;
  _QWORD *v5;

  if ((_DWORD)a2 == 2)
  {
    v3 = "full_fsync";
    v4 = 10;
  }
  else if ((_DWORD)a2 == 1)
  {
    v3 = "fsync";
    v4 = 5;
  }
  else if ((_DWORD)a2)
  {
    v5 = sub_100005A0C(a1, (uint64_t)"bad flush type (", 16);
    a1 = (_QWORD *)std::ostream::operator<<(v5, a2);
    v3 = ")";
    v4 = 1;
  }
  else
  {
    v3 = "barrier";
    v4 = 7;
  }
  return sub_100005A0C(a1, (uint64_t)v3, v4);
}

_QWORD *sub_10011E628(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  char v22;
  char v23;

  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v5 = *((_DWORD *)v4 + 2);
  *((_DWORD *)v4 + 2) = v5 & 0xFFFFFFB5 | 8;
  v23 = 48;
  v6 = sub_100017554(a1, &v23);
  v7 = *v6;
  *(uint64_t *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 24) = 2;
  *(_DWORD *)((char *)v6 + *(_QWORD *)(v7 - 24) + 8) |= 0x200u;
  v8 = sub_100005A0C(v6, (uint64_t)"sg: buffer = ", 13);
  v9 = (_QWORD *)std::ostream::operator<<(v8, *a2);
  v10 = sub_100005A0C(v9, (uint64_t)" [", 2);
  v11 = (_QWORD *)std::ostream::operator<<(v10, a2);
  v12 = sub_100005A0C(v11, (uint64_t)"] ", 2);
  v13 = *v12;
  *(_DWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(uint64_t *)((char *)v12 + *(_QWORD *)(v13 - 24) + 24) = 0;
  *(_DWORD *)((char *)v12 + *(_QWORD *)(v13 - 24) + 8) &= ~0x200u;
  v14 = sub_100005A0C(v12, (uint64_t)" size = ", 8);
  v15 = (_QWORD *)std::ostream::operator<<(v14, a2[2]);
  v16 = sub_100005A0C(v15, (uint64_t)" buffer_size = ", 15);
  v17 = (_QWORD *)std::ostream::operator<<(v16, a2[4]);
  *(_DWORD *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(*v17 - 24) + 8) & 0xFFFFFFB5 | 8;
  v22 = 48;
  v18 = sub_100017554(v17, &v22);
  v19 = *v18;
  *(uint64_t *)((char *)v18 + *(_QWORD *)(*v18 - 24) + 24) = 2;
  *(_DWORD *)((char *)v18 + *(_QWORD *)(v19 - 24) + 8) |= 0x200u;
  v20 = sub_100005A0C(v18, (uint64_t)" offset = ", 10);
  std::ostream::operator<<(v20, a2[3]);
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v5;
  return a1;
}

_QWORD *sub_10011E7DC(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = off_100191F70;
  return result;
}

uint64_t sub_10011E7F0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 152))(a2, a1);
}

void sub_10011E808(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[3];
  std::__shared_weak_count *v21;

  v4 = *(const void **)a1;
  if (v4
  {
    v6 = *(std::__shared_weak_count **)(a1 + 8);
    v20[2] = v5;
    v21 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)v5 + 4);
    v20[0] = *((_QWORD *)v5 + 3);
    v20[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    sub_10011E808(v20);
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v14 = v21;
    if (v21)
    {
      v15 = (unint64_t *)&v21->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    *a2 = *(_QWORD *)a1;
    a2[1] = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
  }
}

void sub_10011E938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100012168((uint64_t)&a9);
  sub_100012168((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_10011E954(uint64_t a1, const void **a2, uint64_t *a3)
{
  const void *v4;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  const void *v28;
  std::__shared_weak_count *v29;

  v4 = *(const void **)a1;
  if (v4 == *a2)
    return 4294967274;
  if (!v4)
    return 4294967294;
  if (!v7)
    return 4294967294;
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (const void *)*((_QWORD *)v7 + 3);
  v12 = (std::__shared_weak_count *)*((_QWORD *)v7 + 4);
  v28 = v11;
  v29 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (v11 == *a2)
  {
    v17 = *a3;
    v16 = a3[1];
    if (v16)
    {
      v18 = (unint64_t *)(v16 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v15 = (std::__shared_weak_count *)*((_QWORD *)v7 + 4);
    *((_QWORD *)v7 + 3) = v17;
    *((_QWORD *)v7 + 4) = v16;
    if (v15)
    {
      v20 = (unint64_t *)&v15->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      v15 = 0;
    }
  }
  else
  {
    v15 = (std::__shared_weak_count *)sub_10011E954(&v28, a2, a3);
  }
  v22 = v29;
  if (v29)
  {
    v23 = (unint64_t *)&v29->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v8)
  {
    v25 = (unint64_t *)&v8->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return (uint64_t)v15;
}

void sub_10011EAF4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (v2)
    sub_10012395C(v2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10011EB40(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(const void **)a1;
  if (*(_QWORD *)a1
  {
    v6 = *(std::__shared_weak_count **)(a1 + 8);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = v5[4];
    *a2 = v5[3];
    a2[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    if (v6)
    {
      v12 = (unint64_t *)&v6->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 8);
    *a2 = v4;
    a2[1] = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
  }
}

uint64_t sub_10011EC2C(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;

  v12 = a4;
  v13 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1001725B8;
  *(_QWORD *)(a1 + 24) = *a2;
  v7 = a2[1];
  *(_QWORD *)(a1 + 32) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)a1 = off_100192030;
  *(_QWORD *)(a1 + 40) = a3;
  v11 = 0;
  sub_1001200C8(&v13, &v11, &v12, (_QWORD *)(a1 + 48));
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_BYTE *)(a1 + 112) = a5;
  return a1;
}

void sub_10011ECD0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_100038C10(v1);
  _Unwind_Resume(a1);
}

void sub_10011ECE8(uint64_t a1)
{
  uint64_t v1;

  sub_1000FF2DC(*(_QWORD *)(a1 + 48), &v1);
}

void sub_10011EE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_10003D0F0((uint64_t)va);
  sub_100012168(v4 - 48);
  _Unwind_Resume(a1);
}

void sub_10011EEAC(uint64_t a1)
{
  uint64_t v1;

  sub_1000FF2DC(*(_QWORD *)(a1 + 48), &v1);
}

void sub_10011F064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_10011F134((uint64_t)va);
  sub_100012168(v4 - 64);
  _Unwind_Resume(a1);
}

_QWORD *sub_10011F08C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1001201D8((uint64_t)a1, a2);
  *a1 = off_1001921F8;
  a1[45] = &off_1001922F8;
  a1[46] = &off_100192320;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001921F8;
  a1[45] = off_100192280;
  a1[46] = off_1001922A8;
  return a1;
}

void sub_10011F110(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10011FC60(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10011F134(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001922C0);
  sub_10011FC60(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10011F174(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  int v14;
  __int128 v15;
  _BYTE v16[25];
  uint64_t v17;
  uint64_t v18;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
  if ((_DWORD)v4)
  {
    *(_QWORD *)&v13 = "int BackendSG::truncate(uint64_t)";
    *((_QWORD *)&v13 + 1) = 23;
    v14 = 16;
    sub_100062E0C(&v15, &v13);
    sub_100005A0C(&v17, (uint64_t)"BackendSG: truncating the inner backend failed, error = ", 56);
    std::ostream::operator<<(&v17, v4);
    std::ostream::~ostream(&v17, off_1001787D8);
    sub_100068184((uint64_t)&v15);
    std::ios::~ios(&v18);
  }
  else
  {
    v6 = *(_OWORD *)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)&v15 = *(_QWORD *)(a1 + 64);
    *((_QWORD *)&v15 + 1) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *(_QWORD *)v16 = a2;
    *(_OWORD *)&v16[8] = v6;
    v16[24] = 0;
    sub_100015BC8(a1 + 64, &v15);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v16;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)&v16[9];
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  return v4;
}

void sub_10011F2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100062EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_10011F2D0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1001725B8;
  v3 = a3[1];
  *(_QWORD *)(a1 + 24) = *a3;
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)a1 = off_100192030;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  result = *(__n128 *)(a2 + 80);
  *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
  *(__n128 *)(a1 + 80) = result;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return result;
}

double sub_10011F370@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  double v5[3];

  sub_100120254(a1, a2, v5);
  result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

uint64_t sub_10011F3B0(uint64_t a1, _QWORD *a2, size_t a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1001725B8;
  v4 = a2[1];
  *(_QWORD *)(a1 + 24) = *a2;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)a1 = off_1001920F8;
  *(_QWORD *)(a1 + 40) = 850045863;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  sub_100118F60((_QWORD *)(a1 + 104), a3);
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  return a1;
}

void sub_10011F448(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::mutex *v2;

  std::mutex::~mutex(v2);
  sub_100038C10(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10011F468(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  v4 = *(_QWORD *)(a1 + 104);
  v5 = a2 % (*(_QWORD *)(a1 + 112) - v4);
  if (!v5)
    goto LABEL_11;
  v6 = (std::__shared_weak_count *)*((_QWORD *)sub_1001207C0() + 1);
  v14 = v4;
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v16 = v5;
  v17 = a2 - v5;
  v18 = v5;
  v19 = 0;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v14);
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v5 == (int)v9)
  {
LABEL_11:
    v9 = 0;
    *(_QWORD *)(a1 + 128) = a2;
    *(_BYTE *)(a1 + 136) = 1;
  }
  return v9;
}

void sub_10011F554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_10011F568(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  size_t v30;
  std::__shared_weak_count *v31;
  unint64_t v32;
  size_t v33;
  size_t v34;
  char v35;

  v4 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (!*(_BYTE *)(a1 + 136))
  {
    v15 = sub_10011F468(a1, *(_QWORD *)(a2 + 24));
    if ((_DWORD)v15)
      goto LABEL_34;
  }
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112) - v6;
  v8 = v5 % v7;
  if (v5 % v7)
  {
    v9 = v7 - v8;
    if (v9 >= *(_QWORD *)(a2 + 16))
      v10 = *(_QWORD *)(a2 + 16);
    else
      v10 = v9;
    memcpy((void *)(v6 + v8), *(const void **)a2, v10);
    v11 = *(_QWORD *)(a1 + 104);
    v7 = *(_QWORD *)(a1 + 112) - v11;
    if (v10 + v8 == v7)
    {
      v12 = (std::__shared_weak_count *)*((_QWORD *)sub_1001207C0() + 1);
      v30 = v11;
      v31 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      v32 = v10 + v8;
      v33 = v5 - v8;
      v34 = v10 + v8;
      v35 = 0;
      v15 = (*(uint64_t (**)(_QWORD, size_t *))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24), &v30);
      v16 = v31;
      v17 = v32;
      if (v31)
      {
        v18 = (unint64_t *)&v31->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (v17 != (int)v15)
        goto LABEL_34;
      v7 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
    }
  }
  else
  {
    v10 = 0;
  }
  v15 = *(_QWORD *)(a2 + 16);
  v20 = (v15 - v10) / v7 * v7;
  if (v15 - v10 == (v15 - v10) % v7)
  {
LABEL_31:
    if (v15 > v10)
    {
      memcpy(*(void **)(a1 + 104), (const void *)(*(_QWORD *)a2 + v10), v15 - v10);
      v15 = *(_QWORD *)(a2 + 16);
    }
    *(_QWORD *)(a1 + 128) += v15;
    goto LABEL_34;
  }
  v21 = *(_QWORD *)(a2 + 32);
  v22 = *(_QWORD *)(a2 + 24) + v10;
  v23 = *(std::__shared_weak_count **)(a2 + 8);
  v30 = *(_QWORD *)a2 + v10;
  v31 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v32 = v20;
  v33 = v22;
  v34 = v21 - v10;
  v35 = 0;
  v15 = (*(uint64_t (**)(_QWORD, size_t *))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24), &v30);
  v26 = v31;
  if (v31)
  {
    v27 = (unint64_t *)&v31->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v20 == (int)v15)
  {
    v10 += v20;
    v15 = *(_QWORD *)(a2 + 16);
    goto LABEL_31;
  }
LABEL_34:
  std::mutex::unlock(v4);
  return v15;
}

void sub_10011F7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_100012168((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10011F7E0(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v4 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (*(_BYTE *)(a1 + 136))
  {
    v5 = *(_QWORD *)(a1 + 104);
    v6 = *(_QWORD *)(a1 + 112) - v5;
    v7 = *(_QWORD *)(a1 + 128) % v6;
    if (!v7)
      goto LABEL_15;
    bzero((void *)(v5 + v7), v6 - v7);
    v8 = *(_QWORD *)(a1 + 128);
    v9 = *(_QWORD *)(a1 + 104);
    v10 = *(_QWORD *)(a1 + 112);
    v11 = (std::__shared_weak_count *)*((_QWORD *)sub_1001207C0() + 1);
    v22 = v9;
    v23 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v24 = v10 - v9;
    v25 = v8 - v7;
    v26 = v10 - v9;
    v27 = 0;
    v14 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24), &v22);
    v15 = v14;
    v16 = v14 >= 0 ? 4294967291 : v14;
    v17 = v23;
    v18 = v24;
    if (v23)
    {
      v19 = (unint64_t *)&v23->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v18 == v15)
LABEL_15:
      v16 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a2);
  }
  else
  {
    v16 = 0;
  }
  std::mutex::unlock(v4);
  return v16;
}

void sub_10011F928(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10011F954(uint64_t a1)
{
  sub_100120058(a1);
  operator delete();
}

_QWORD *sub_10011F978(uint64_t a1, _QWORD *a2)
{
  return sub_100005A0C(a2, (uint64_t)"BufferedWriteBackend", 20);
}

_QWORD *sub_10011F98C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10001A1F4(a2, (_QWORD *)(a1 + 8));
}

_QWORD *sub_10011F998(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = off_100192030;
  sub_100012168((uint64_t)(a1 + 8));
  sub_100012168((uint64_t)(a1 + 6));
  *a1 = off_1001725B8;
  sub_100012168((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_10011F9F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = off_100192030;
  sub_100012168((uint64_t)(a1 + 8));
  sub_100012168((uint64_t)(a1 + 6));
  *a1 = off_1001725B8;
  sub_100012168((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete();
}

_QWORD *sub_10011FA58(uint64_t a1, _QWORD *a2)
{
  return sub_100005A0C(a2, (uint64_t)"BackendSG", 9);
}

uint64_t sub_10011FA6C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001922C0);
  sub_10011FC60(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10011FAA4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001922C0);
  sub_10011FC60(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10011FAE4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001922C0);
  sub_10011FC60(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10011FB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10011FB6C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10011FBB8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001922C0);
  sub_10011FC60(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10011FC08(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001922C0);
  sub_10011FC60(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10011FC60(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100192390;
  sub_10011FCFC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10011FCFC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10011FE74((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10011FE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10011FE50(uint64_t a1)
{
  sub_10011FC60(a1);
  operator delete();
}

int *sub_10011FE74(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 138;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 138;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100120058(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)a1 = off_1001920F8;
  sub_10011F7E0(a1, 1);
  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 40));
  *(_QWORD *)a1 = off_1001725B8;
  sub_100012168(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

_QWORD *sub_1001200C8@<X0>(uint64_t *a1@<X1>, unsigned int *a2@<X2>, unint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0xB8uLL);
  result = sub_100120138(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_100120124(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100120138(_QWORD *a1, uint64_t *a2, unsigned int *a3, unint64_t *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100192410;
  sub_1000FF230((uint64_t)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_100120178(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10012018C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100192410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10012019C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100192410;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1001201CC(uint64_t a1)
{
  return sub_1000FF2D8(a1 + 24);
}

uint64_t sub_1001201D8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100192390;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100120240(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_100120254(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x90uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = off_1001809B8;
  sub_10011F2D0((uint64_t)(v6 + 3), a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_1000196D4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1001202C8(char *__s, _QWORD *a2)
{
  std::string *v3;
  uint64_t v4;
  char v5;
  std::string::size_type v6;
  std::string::size_type size;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string v17;

  v3 = &v17;
  sub_100005870(&v17, __s);
  v4 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  v5 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  size = v17.__r_.__value_.__l.__size_;
  v6 = v17.__r_.__value_.__r.__words[0];
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = (std::string *)((char *)&v17 + HIBYTE(v17.__r_.__value_.__r.__words[2]));
  else
    v8 = (std::string *)(v17.__r_.__value_.__r.__words[0] + v17.__r_.__value_.__l.__size_);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v3 = (std::string *)v17.__r_.__value_.__r.__words[0];
  if (v3 != v8)
  {
    do
    {
      v3->__r_.__value_.__s.__data_[0] = __tolower(v3->__r_.__value_.__s.__data_[0]);
      v3 = (std::string *)((char *)v3 + 1);
    }
    while (v3 != v8);
    v4 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    size = v17.__r_.__value_.__l.__size_;
    v6 = v17.__r_.__value_.__r.__words[0];
    v5 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  }
  if (v5 >= 0)
  {
    v9 = &v17;
  }
  else
  {
    v4 = size;
    v9 = (std::string *)v6;
  }
  if (v4 >= 2)
  {
    v10 = (std::string *)((char *)v9 + v4);
    v11 = v9;
    while (1)
    {
      v12 = (std::string *)memchr(v11, 48, v4 - 1);
      if (!v12)
        goto LABEL_21;
      if (LOWORD(v12->__r_.__value_.__l.__data_) == 30768)
        break;
      v11 = (std::string *)((char *)&v12->__r_.__value_.__l.__data_ + 1);
      v4 = (char *)v10 - (char *)v11;
      if ((char *)v10 - (char *)v11 < 2)
        goto LABEL_21;
    }
    if (v12 != v10 && v12 == v9)
    {
      v13 = std::string::erase(&v17, 0, 2uLL);
      std::string::operator=(&v17, v13);
    }
  }
LABEL_21:
  v14 = 0;
  v15 = 0;
  v16 = 0;
  sub_100120600((uint64_t)&v17, &v14);
  if (a2)
    *a2 = v15 - v14;
  operator new[]();
}

void sub_100120460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *exception;
  const std::error_category *v20;
  _QWORD *v21;
  const std::error_category *v22;
  _QWORD *v23;
  const std::error_category *v24;

  if (a17 < 0)
    operator delete(__p);
  switch(a2)
  {
    case 3:
      __cxa_begin_catch(exception_object);
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_1001924F8;
      v20 = std::generic_category();
      exception[1] = 22;
      exception[2] = v20;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "Does not contain an \"even number\" of hex digits.";
    case 2:
      __cxa_begin_catch(exception_object);
      v21 = __cxa_allocate_exception(0x40uLL);
      *v21 = &off_1001924F8;
      v22 = std::generic_category();
      v21[1] = 22;
      v21[2] = v22;
      *((_BYTE *)v21 + 24) = 0;
      *((_BYTE *)v21 + 48) = 0;
      v21[7] = "Contains non-hexadecimal characters.";
    case 1:
      __cxa_begin_catch(exception_object);
      v23 = __cxa_allocate_exception(0x40uLL);
      *v23 = &off_1001924F8;
      v24 = std::generic_category();
      v23[1] = 22;
      v23[2] = v24;
      *((_BYTE *)v23 + 24) = 0;
      *((_BYTE *)v23 + 48) = 0;
      v23[7] = "Decoding error.";
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_100120600(uint64_t a1, unint64_t *a2)
{
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *(char *)(a1 + 23);
  v4 = v3 < 0;
  v5 = *(_QWORD *)a1;
  if (v3 >= 0)
    v5 = a1;
  v6 = *(unsigned __int8 *)(a1 + 23);
  if (v4)
    v6 = *(_QWORD *)(a1 + 8);
  v9 = v5;
  if (v6)
  {
    v7 = v5 + v6;
    do
      a2 = sub_1001216F0(&v9, v7, a2, (unsigned int (*)(uint64_t, uint64_t))sub_100121814);
    while (v9 != v7);
  }
  return a2;
}

uint64_t sub_100120674(char *a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  return sub_100085418((uint64_t)v3, a1, a2);
}

_QWORD *sub_1001206CC(_QWORD *a1, unsigned int *a2)
{
  const char *v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = (const char *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 16))(a2);
  v5 = strlen(v4);
  v6 = sub_100005A0C(a1, (uint64_t)v4, v5);
  v7 = sub_100005A0C(v6, (uint64_t)" (error code ", 13);
  v8 = (_QWORD *)std::ostream::operator<<(v7, a2[2]);
  sub_100005A0C(v8, (uint64_t)")", 1);
  return a1;
}

uint64_t sub_100120748(uint64_t a1)
{
  uint64_t result;

  if (!*(_BYTE *)(a1 + 48))
  {
    result = a1 + 56;
    return *(_QWORD *)result;
  }
  result = a1 + 24;
  if (*(char *)(a1 + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_100120770()
{
  uuid_t out;

  uuid_generate_random(out);
  return *(_QWORD *)out;
}

void *sub_1001207C0()
{
  unsigned __int8 v0;
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v0 = atomic_load((unsigned __int8 *)&qword_1001A1040);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1001A1040))
  {
    __cxa_atexit((void (*)(void *))sub_100120868, &unk_1001A1030, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001A1040);
  }
  v1 = atomic_load(&qword_1001A1028);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&qword_1001A1028, &v4, (void (__cdecl *)(void *))sub_100122D38);
  }
  return &unk_1001A1030;
}

uint64_t sub_10012086C()
{
  uint64_t result;
  __int128 v2;
  int v3;
  _QWORD v4[45];
  uint64_t v5;
  uint64_t v6;

  if (byte_1001A0568)
  {
    while (!__ldaxr((unsigned __int8 *)&unk_1001A1050))
    {
      if (!__stlxr(1u, (unsigned __int8 *)&unk_1001A1050))
      {
        *(_QWORD *)&v2 = "void process_terminator::terminate()";
        *((_QWORD *)&v2 + 1) = 34;
        v3 = 16;
        sub_1000D5910(v4, &v2);
        sub_100005A0C(&v5, (uint64_t)"Terminating due to unrecoverable I/O error", 42);
        std::ostream::~ostream(&v5, off_1001879E0);
        sub_1000D5A74((uint64_t)v4);
        std::ios::~ios(&v6);
        return raise(15);
      }
    }
    __clrex();
  }
  return result;
}

void sub_10012092C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000D59B8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_100120940(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  __int128 *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int64_t v64;
  int v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v129;
  void *v130;
  std::__shared_weak_count *v131;
  _BYTE v132[25];
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  char v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  __int128 v140;
  uint64_t v141;
  char v142;
  void *__src;
  std::__shared_weak_count *v144;
  _OWORD v145[2];
  uint64_t v146;
  _OWORD v147[3];
  char v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  __int128 v151;
  uint64_t v152;
  char v153;
  char v154[8];
  std::__shared_weak_count *v155;
  std::__shared_weak_count *v156;
  void *v157;
  std::__shared_weak_count *v158;
  _BYTE v159[25];
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  char v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  __int128 v167;
  uint64_t v168;
  char v169;
  void *v170;
  std::__shared_weak_count *v171;
  _OWORD v172[2];
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  char v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  __int128 v180;
  uint64_t v181;
  char v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count *v184;
  std::__shared_weak_count *v185;
  std::__shared_weak_count *v186;
  std::__shared_weak_count *v187;
  void *v188;
  std::__shared_weak_count *v189;
  _OWORD v190[2];
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  char v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  __int128 v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  __int128 v203;
  void *__dst;
  std::__shared_weak_count *v205;
  _BYTE v206[25];
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  char v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  __int128 v214;
  uint64_t v215;
  char v216;
  __int128 v217;
  int v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  std::__shared_weak_count *v221;
  uint64_t v222;
  _BYTE v223[160];

  v6 = (uint64_t *)(a1 + 144);
  v5 = *(_QWORD *)(a1 + 144);
  v7 = a4[1];
  v8 = *a4 - (v5 - v7);
  if (v8 >= a3)
    v8 = a3;
  v129 = v8;
  v9 = v5 - v7;
  if (v5 == v7)
    goto LABEL_160;
  v12 = *(std::__shared_weak_count **)(a1 + 8);
  v188 = *(void **)a1;
  v189 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v190[0] = *(_OWORD *)(a1 + 16);
  *(_OWORD *)((char *)v190 + 9) = *(_OWORD *)(a1 + 25);
  v191 = *(_QWORD *)(a1 + 48);
  v192 = *(_OWORD *)(a1 + 56);
  v193 = *(_OWORD *)(a1 + 72);
  v194 = *(_OWORD *)(a1 + 88);
  v195 = *(_BYTE *)(a1 + 104);
  v15 = *(std::__shared_weak_count **)(a1 + 120);
  v196 = *(_QWORD *)(a1 + 112);
  v197 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v198 = *(_OWORD *)(a1 + 128);
  v199 = *v6;
  v200 = *(_BYTE *)(a1 + 152);
  v18 = v8 + v9;
  sub_10002D5FC((uint64_t)&v188, v8 + v9);
  sub_10002C308(&v192);
  v19 = (_OWORD *)(a1 + 16);
  v20 = (__int128 *)(a1 + 72);
  v21 = *(std::__shared_weak_count **)(a1 + 8);
  v157 = *(void **)a1;
  v158 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_OWORD *)v159 = *v19;
  *(_OWORD *)&v159[9] = *(_OWORD *)(a1 + 25);
  v161 = *(_OWORD *)(a1 + 56);
  v24 = *(_OWORD *)(a1 + 88);
  v162 = *v20;
  v25 = (__int128 *)(a1 + 128);
  v160 = *(_QWORD *)(a1 + 48);
  v163 = v24;
  v164 = *(_BYTE *)(a1 + 104);
  v26 = *(std::__shared_weak_count **)(a1 + 120);
  v165 = *(_QWORD *)(a1 + 112);
  v166 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v167 = *v25;
  v168 = *v6;
  v169 = *((_BYTE *)v6 + 8);
  sub_10002E74C((uint64_t)&v157, a2, a4[1], v18, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v170);
  v29 = v166;
  if (v166)
  {
    v30 = (unint64_t *)&v166->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v158;
  if (v158)
  {
    v33 = (unint64_t *)&v158->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  sub_10002CA7C((uint64_t)&v170, (uint64_t)&v219);
  sub_100037358((uint64_t)&v188, (uint64_t)&v219);
  v35 = v221;
  if (v221)
  {
    v36 = (unint64_t *)&v221->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v220;
  if (v220)
  {
    v39 = (unint64_t *)&v220->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_10002D5FC((uint64_t)&v188, v9);
  sub_10002C64C((uint64_t)&v170, (uint64_t)v154);
  __src = v188;
  v144 = v189;
  if (v189)
  {
    v41 = (unint64_t *)&v189->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v145[0] = v190[0];
  *(_OWORD *)((char *)v145 + 9) = *(_OWORD *)((char *)v190 + 9);
  v147[0] = v192;
  v147[1] = v193;
  v146 = v191;
  v147[2] = v194;
  v148 = v195;
  v149 = v196;
  v150 = v197;
  if (v197)
  {
    v43 = (unint64_t *)&v197->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v151 = v198;
  v152 = v199;
  v153 = v200;
  v46 = *(void **)a1;
  v45 = *(std::__shared_weak_count **)(a1 + 8);
  v130 = *(void **)a1;
  v131 = v45;
  if (v45)
  {
    v47 = (unint64_t *)&v45->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  *(_OWORD *)v132 = *v19;
  *(_OWORD *)&v132[9] = *(_OWORD *)(a1 + 25);
  v49 = *v20;
  v50 = *(_OWORD *)(a1 + 88);
  v134 = *(_OWORD *)(a1 + 56);
  v135 = v49;
  v133 = *(_QWORD *)(a1 + 48);
  v136 = v50;
  v137 = *(_BYTE *)(a1 + 104);
  v51 = *(std::__shared_weak_count **)(a1 + 120);
  v138 = *(_QWORD *)(a1 + 112);
  v139 = v51;
  if (v51)
  {
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v140 = *v25;
  v141 = *v6;
  v142 = *((_BYTE *)v6 + 8);
  __dst = v46;
  v205 = v131;
  if (v131)
  {
    v54 = (unint64_t *)&v131->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  *(_OWORD *)v206 = *(_OWORD *)v132;
  *(_OWORD *)&v206[9] = *(_OWORD *)&v132[9];
  v208 = v134;
  v209 = v135;
  v207 = v133;
  v210 = v136;
  v211 = v137;
  v212 = v138;
  v213 = v139;
  if (v139)
  {
    v56 = (unint64_t *)&v139->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v58 = 0;
  v214 = v140;
  v215 = v141;
  v216 = 0;
  while (!sub_10002C4A4((uint64_t)&__src, (uint64_t)v154))
  {
    sub_1000174D8((uint64_t)v147);
    v59 = v150;
    v201 = v149;
    v202 = v150;
    if (v150)
    {
      v60 = (unint64_t *)&v150->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    v203 = v151;
    v62 = *((_QWORD *)&v151 + 1);
    if (*((_QWORD *)&v151 + 1))
    {
      v63 = *(_QWORD *)&v206[16];
      if (*(_QWORD *)&v145[0] < *(_QWORD *)&v206[16])
        v63 = *(_QWORD *)&v145[0];
      if (v63 >= *((_QWORD *)&v203 + 1))
        v64 = *((_QWORD *)&v203 + 1);
      else
        v64 = v63;
      if (v64)
      {
        memmove(__dst, __src, v64);
        if (v64 > 0)
        {
          sub_10002D5FC((uint64_t)&__src, v64);
          sub_10002D7D4((uint64_t)&__dst, v64);
          v65 = 0;
          v58 += v64;
          if (v59)
            goto LABEL_73;
          goto LABEL_77;
        }
      }
      else
      {
        *(_QWORD *)&v217 = "trim_data(const sg_vec::iterator &, const sg_vec::iterator &, size_t, const io_result_t &)::(anonymous class)::operator()(const auto &, const auto &, size_t) const [src:auto = sg_vec_ns::details::sg_vec_iterator, dst:auto = sg_vec_ns::details::sg_vec_iterator]";
        *((_QWORD *)&v217 + 1) = 121;
        v218 = 16;
        sub_100122ECC(&v219, &v217);
        sub_100005A0C(&v222, (uint64_t)"Trimming: Written ", 18);
        std::ostream::operator<<(&v222, v62);
        sub_100005A0C(&v222, (uint64_t)", dest buffer_size ", 19);
        std::ostream::operator<<(&v222, *(_QWORD *)&v206[16]);
        sub_100005A0C(&v222, (uint64_t)" src size ", 10);
        std::ostream::operator<<(&v222, *(_QWORD *)&v145[0]);
        sub_100005A0C(&v222, (uint64_t)", trimmed size", 14);
        std::ostream::operator<<(&v222, 0);
        std::ostream::~ostream(&v222, off_100192940);
        sub_100123030((uint64_t)&v219);
        std::ios::~ios(v223);
      }
      *(_QWORD *)&v217 = "transform(Fn &&, sg_vec_ref::iterator, const sg_vec_ref::iterator &, sg_vec_ref::iterator) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/utils.cpp:180:13)]";
      *((_QWORD *)&v217 + 1) = 97;
      v218 = 16;
      sub_1000380B0(&v219, &v217);
      sub_100005A0C(&v222, (uint64_t)"IO error with sg: ", 18);
      sub_10011E628(&v222, &__src);
      sub_100005A0C(&v222, (uint64_t)" dest ", 6);
      sub_10011E628(&v222, &__dst);
      sub_100005A0C(&v222, (uint64_t)" returned status ", 17);
      std::ostream::operator<<(&v222, v64);
      std::ostream::~ostream(&v222, off_100172130);
      sub_100038214((uint64_t)&v219);
      std::ios::~ios(v223);
      v65 = 1;
      if (v59)
      {
LABEL_73:
        v66 = (unint64_t *)&v59->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
    }
    else
    {
      sub_10002D9AC((uint64_t)&__src);
      v65 = 2;
      if (v59)
        goto LABEL_73;
    }
LABEL_77:
    if ((v65 | 2) != 2)
      goto LABEL_80;
  }
  sub_10002D7D4((uint64_t)&v130, v58);
LABEL_80:
  v68 = v213;
  if (v213)
  {
    v69 = (unint64_t *)&v213->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = v205;
  if (v205)
  {
    v72 = (unint64_t *)&v205->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = v139;
  if (v139)
  {
    v75 = (unint64_t *)&v139->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = v131;
  if (v131)
  {
    v78 = (unint64_t *)&v131->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v150;
  if (v150)
  {
    v81 = (unint64_t *)&v150->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = v144;
  if (v144)
  {
    v84 = (unint64_t *)&v144->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v156;
  if (v156)
  {
    v87 = (unint64_t *)&v156->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v155;
  if (v155)
  {
    v90 = (unint64_t *)&v155->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = v187;
  if (v187)
  {
    v93 = (unint64_t *)&v187->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v186;
  if (v186)
  {
    v96 = (unint64_t *)&v186->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v185;
  if (v185)
  {
    v99 = (unint64_t *)&v185->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v184;
  if (v184)
  {
    v102 = (unint64_t *)&v184->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v183;
  if (v183)
  {
    v105 = (unint64_t *)&v183->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = (std::__shared_weak_count *)v175;
  if ((_QWORD)v175)
  {
    v108 = (unint64_t *)(v175 + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v197;
  if (v197)
  {
    v111 = (unint64_t *)&v197->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v189;
  if (v189)
  {
    v114 = (unint64_t *)&v189->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
LABEL_160:
  v116 = *(std::__shared_weak_count **)(a1 + 8);
  v170 = *(void **)a1;
  v171 = v116;
  if (v116)
  {
    v117 = (unint64_t *)&v116->__shared_owners_;
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 1, v117));
  }
  v172[0] = *(_OWORD *)(a1 + 16);
  *(_OWORD *)((char *)v172 + 9) = *(_OWORD *)(a1 + 25);
  v173 = *(_QWORD *)(a1 + 48);
  v174 = *(_OWORD *)(a1 + 56);
  v175 = *(_OWORD *)(a1 + 72);
  v176 = *(_OWORD *)(a1 + 88);
  v177 = *(_BYTE *)(a1 + 104);
  v119 = *(std::__shared_weak_count **)(a1 + 120);
  v178 = *(_QWORD *)(a1 + 112);
  v179 = v119;
  if (v119)
  {
    v120 = (unint64_t *)&v119->__shared_owners_;
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 1, v120));
  }
  v180 = *(_OWORD *)(a1 + 128);
  v181 = *v6;
  v182 = *((_BYTE *)v6 + 8);
  sub_10002D5FC((uint64_t)&v170, v129);
  sub_10002C308(&v174);
  v122 = v179;
  if (v179)
  {
    v123 = (unint64_t *)&v179->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v171;
  if (v171)
  {
    v126 = (unint64_t *)&v171->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  return v129;
}

void sub_1001215D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;

  sub_100012168(a9);
  sub_100012168((uint64_t)&STACK[0x578]);
  sub_100012168(a10);
  sub_100012168((uint64_t)&a14);
  sub_100012168(a11);
  sub_100012168((uint64_t)&a34);
  sub_100012168((uint64_t)&a68);
  sub_100012168((uint64_t)&a54);
  sub_10002E7A4((uint64_t)&STACK[0x2A8]);
  sub_100012168((uint64_t)&STACK[0x528]);
  sub_100012168((uint64_t)&STACK[0x4B8]);
  _Unwind_Resume(a1);
}

void sub_1001216CC(std::exception *a1)
{
  sub_100005554(a1);
  operator delete();
}

unint64_t *sub_1001216F0(uint64_t *a1, uint64_t a2, unint64_t *a3, unsigned int (*a4)(uint64_t, uint64_t))
{
  int v7;
  uint64_t v8;
  char v9;
  char v10;
  int v11;
  _QWORD v13[2];
  __int128 v14;
  __int128 v15;
  char v16;
  unint64_t *v17;

  v7 = 0;
  v17 = a3;
  v16 = 0;
  v8 = *a1;
  v9 = 1;
  do
  {
    v10 = v9;
    if (a4(v8, a2))
    {
      v14 = 0u;
      v15 = 0u;
      DWORD2(v15) = -1;
      v13[0] = off_100192560;
      v13[1] = off_100192590;
      sub_100121820(v13);
    }
    v11 = sub_1001218AC(*(char *)*a1);
    v9 = 0;
    v7 = v11 + 16 * v7;
    v16 = v7;
    v8 = *a1 + 1;
    *a1 = v8;
  }
  while ((v10 & 1) != 0);
  sub_1001219A8(&v17, &v16);
  return v17;
}

void sub_1001217D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13, _UNKNOWN **a14, uint64_t a15)
{
  std::exception::~exception(&a13);
  a14 = &off_1001925B0;
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 32))(a15);
  _Unwind_Resume(a1);
}

BOOL sub_100121814(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void sub_100121820(_QWORD *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x30uLL);
  sub_100121AAC((uint64_t)exception, a1);
}

void sub_10012185C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::exception *sub_100121870(std::exception *a1)
{
  uint64_t v2;

  std::exception::~exception(a1);
  *(_QWORD *)(v2 + 8) = &off_1001925B0;
  sub_100121BF4((uint64_t *)(v2 + 16));
  return a1;
}

uint64_t sub_1001218AC(int a1)
{
  unsigned __int8 v1;

  v1 = a1 - 48;
  if ((a1 - 48) >= 0xA)
  {
    if ((a1 - 65) > 5)
    {
      if ((a1 - 97) > 5)
        sub_100121E0C();
      return (a1 - 87);
    }
    else
    {
      return (a1 - 55);
    }
  }
  return v1;
}

void sub_100121968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception a15, _UNKNOWN **a16, uint64_t a17)
{
  std::exception::~exception(&a15);
  a16 = &off_1001925B0;
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 32))(a17);
  _Unwind_Resume(a1);
}

unint64_t **sub_1001219A8(unint64_t **a1, _BYTE *a2)
{
  unint64_t *v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  char v16;

  v4 = *a1;
  v6 = (_BYTE *)(*a1)[1];
  v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = &v6[-*v4];
    v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0)
      sub_100017E44();
    v11 = v5 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (unint64_t)operator new(v12);
    else
      v13 = 0;
    v14 = (char *)(v13 + v12);
    v9[v13] = *a2;
    v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (_BYTE *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      v15 = &v6[~v8];
      do
      {
        v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (_BYTE *)v8);
      v6 = (_BYTE *)*v4;
    }
    *v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = *a2;
    v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

uint64_t sub_100121AAC(uint64_t a1, _QWORD *a2)
{
  char *v3;
  uint64_t v4;
  __int128 v5;

  v3 = (char *)a2 + *(_QWORD *)(*a2 - 40);
  v4 = *((_QWORD *)v3 + 1);
  *(_QWORD *)(a1 + 8) = &off_1001925B0;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *((_OWORD *)v3 + 1);
  *(_DWORD *)(a1 + 40) = *((_DWORD *)v3 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(_QWORD *)a1 = off_100192560;
  *(_QWORD *)(a1 + 8) = off_100192590;
  return a1;
}

void sub_100121B1C(std::exception *a1)
{
  uint64_t v1;

  std::exception::~exception(a1);
  *(_QWORD *)(v1 + 8) = &off_1001925B0;
  sub_100121BF4((uint64_t *)(v1 + 16));
  operator delete();
}

uint64_t *sub_100121B68(_QWORD *a1)
{
  uint64_t v1;

  std::exception::~exception((std::exception *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  *(_QWORD *)(v1 + 8) = &off_1001925B0;
  return sub_100121BF4((uint64_t *)(v1 + 16));
}

void sub_100121B9C(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::exception::~exception((std::exception *)v1);
  *((_QWORD *)v1 + 1) = &off_1001925B0;
  sub_100121BF4((uint64_t *)v1 + 2);
  operator delete();
}

uint64_t *sub_100121BF4(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *a1 = 0;
  return a1;
}

void sub_100121C34(_QWORD *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x30uLL);
  sub_100121CC4((uint64_t)exception, a1);
}

void sub_100121C70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::exception *sub_100121C88(std::exception *a1)
{
  uint64_t v2;

  std::exception::~exception(a1);
  *(_QWORD *)(v2 + 8) = &off_1001925B0;
  sub_100121BF4((uint64_t *)(v2 + 16));
  return a1;
}

uint64_t sub_100121CC4(uint64_t a1, _QWORD *a2)
{
  char *v3;
  uint64_t v4;
  __int128 v5;

  v3 = (char *)a2 + *(_QWORD *)(*a2 - 40);
  v4 = *((_QWORD *)v3 + 1);
  *(_QWORD *)(a1 + 8) = &off_1001925B0;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *((_OWORD *)v3 + 1);
  *(_DWORD *)(a1 + 40) = *((_DWORD *)v3 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(_QWORD *)a1 = off_1001925F8;
  *(_QWORD *)(a1 + 8) = off_100192628;
  return a1;
}

void sub_100121D34(std::exception *a1)
{
  uint64_t v1;

  std::exception::~exception(a1);
  *(_QWORD *)(v1 + 8) = &off_1001925B0;
  sub_100121BF4((uint64_t *)(v1 + 16));
  operator delete();
}

uint64_t *sub_100121D80(_QWORD *a1)
{
  uint64_t v1;

  std::exception::~exception((std::exception *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  *(_QWORD *)(v1 + 8) = &off_1001925B0;
  return sub_100121BF4((uint64_t *)(v1 + 16));
}

void sub_100121DB4(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::exception::~exception((std::exception *)v1);
  *((_QWORD *)v1 + 1) = &off_1001925B0;
  sub_100121BF4((uint64_t *)v1 + 2);
  operator delete();
}

void sub_100121E0C()
{
  operator new();
}

void sub_100121FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_100012168((uint64_t)va);
  sub_100012168((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100121FCC()
{
  operator new();
}

void sub_100122014()
{
  operator delete();
}

void sub_100122028(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  char *v4;
  std::string::const_iterator v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void *__p[2];
  unsigned __int8 v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;

  sub_100122228((char **)__p, (char *)((unint64_t)"PN5boost9algorithm9bad_char_E" & 0x7FFFFFFFFFFFFFFFLL));
  if (__p[0])
    v4 = (char *)__p[0];
  else
    v4 = (char *)((unint64_t)"PN5boost9algorithm9bad_char_E" & 0x7FFFFFFFFFFFFFFFLL);
  sub_100005870(&v14, v4);
  free(__p[0]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v14;
  else
    v5.__i_ = (std::__wrap_iter<const char *>::iterator_type)v14.__r_.__value_.__r.__words[0];
  std::string::insert(&v14, v5, 91);
  v15 = v14;
  memset(&v14, 0, sizeof(v14));
  v6 = std::string::append(&v15, "] = ", 4uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_100122274((char *)(a1 + 8), __p);
  if ((v13 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v9 = v13;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(&v16, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v17, 10);
  *a2 = v17;
  memset(&v17, 0, sizeof(v17));
  if ((char)v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_10012219C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

char **sub_100122228(char **a1, char *lpmangled)
{
  size_t v4;
  int status;

  status = 0;
  v4 = 0;
  *a1 = __cxa_demangle(lpmangled, 0, &v4, &status);
  return a1;
}

uint64_t sub_100122274@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  _QWORD v6[10];
  char v7;
  uint64_t v8;
  char v9;

  sub_100005920((uint64_t)&v5);
  v9 = *a1;
  sub_100005A0C(&v5, (uint64_t)&v9, 1);
  sub_100005598((uint64_t)v6, a2);
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf(v6);
  return std::ios::~ios(&v8);
}

void sub_100122338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10000FE34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10012234C(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1001223A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1001223C4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1001223E8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_100122400(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100122440(uint64_t a1, const char *a2)
{
  size_t v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  uint64_t result;
  void *__p[2];
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[10];
  char v18;
  uint64_t v19;

  if (a2)
  {
    sub_100005920((uint64_t)&v16);
    v4 = strlen(a2);
    sub_100005A0C(&v16, (uint64_t)a2, v4);
    v5 = *(_QWORD **)(a1 + 8);
    if (v5 != (_QWORD *)(a1 + 16))
    {
      do
      {
        (**(void (***)(void **__return_ptr))v5[5])(__p);
        if (v15 >= 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if (v15 >= 0)
          v7 = HIBYTE(v15);
        else
          v7 = (uint64_t)__p[1];
        sub_100005A0C(&v16, (uint64_t)v6, v7);
        if (SHIBYTE(v15) < 0)
          operator delete(__p[0]);
        v8 = (_QWORD *)v5[1];
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (_QWORD *)v5[2];
            v10 = *v9 == (_QWORD)v5;
            v5 = v9;
          }
          while (!v10);
        }
        v5 = v9;
      }
      while (v9 != (_QWORD *)(a1 + 16));
    }
    sub_100005598((uint64_t)v17, __p);
    v11 = v15;
    v12 = *(_OWORD *)__p;
    *(_OWORD *)__p = *(_OWORD *)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 32) = v12;
    *(_QWORD *)(a1 + 48) = v11;
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
    if (v18 < 0)
      operator delete((void *)v17[8]);
    std::streambuf::~streambuf(v17);
    std::ios::~ios(&v19);
  }
  result = a1 + 32;
  if (*(char *)(a1 + 55) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_1001225E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  sub_10000FE34((uint64_t)&a16);
  _Unwind_Resume(a1);
}

_QWORD *sub_100122614@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = sub_10012290C(a1 + 8, a2);
  if ((_QWORD *)(a1 + 16) == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v6 = result[6];
    *a3 = result[5];
    a3[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  return result;
}

_QWORD *sub_100122670(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  _QWORD *result;
  uint64_t *v7;

  v7 = a3;
  v5 = sub_1001229F0((uint64_t **)(a1 + 8), a3, (uint64_t)&unk_100141000, &v7);
  result = sub_100027CB4(v5 + 5, a2);
  if (*(char *)(a1 + 55) < 0)
  {
    **(_BYTE **)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 55) = 0;
  }
  return result;
}

uint64_t sub_1001226E8(uint64_t result)
{
  ++*(_DWORD *)(result + 56);
  return result;
}

BOOL sub_1001226F8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 56) - 1;
  *(_DWORD *)(a1 + 56) = v1;
  if (a1 && !v1)
  {
    sub_100122B54(a1);
    operator delete();
  }
  return v1 == 0;
}

void sub_100122744(_QWORD *a1@<X8>)
{
  *a1 = 0;
  operator new();
}

void sub_1001228DC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_100121BF4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10012290C(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = (_QWORD *)(a1 + 8);
  v4 = sub_10012297C(a1, a2, *(_QWORD **)(a1 + 8), (_QWORD *)(a1 + 8));
  if (v3 == v4)
    return v3;
  v5 = v4;
  v6 = v4[4];
  if (*a2 != v6
    && strcmp((const char *)(*(_QWORD *)(*a2 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL)) < 0)
  {
    return v3;
  }
  return v5;
}

_QWORD *sub_10012297C(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v5 = a3;
    v6 = *a2;
    do
    {
      v7 = v5[4];
      if (v7 == v6)
      {
        a4 = v5;
      }
      else if (strcmp((const char *)(*(_QWORD *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL)) < 0)
      {
        ++v5;
      }
      else
      {
        a4 = v5;
      }
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a4;
}

uint64_t *sub_1001229F0(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v6 = (uint64_t **)sub_100122AA0((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x38uLL);
    v10[1] = a1 + 1;
    v7[4] = **a4;
    v7[5] = 0;
    v7[6] = 0;
    v11 = 1;
    sub_1000284A8(a1, v12, v8, v7);
    v10[0] = 0;
    sub_10004EBC0((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_100122AA0(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  _QWORD *v10;

  v4 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v6 = *a3;
    v7 = v5[4];
    if (*a3 != v7)
    {
      v8 = (const char *)(*(_QWORD *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      do
      {
        v9 = (const char *)(*(_QWORD *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (strcmp(v8, v9) < 0)
        {
          v10 = (_QWORD *)*v5;
          v4 = v5;
          if (!*v5)
            break;
        }
        else
        {
          if ((strcmp(v9, v8) & 0x80000000) == 0)
            break;
          v4 = v5 + 1;
          v10 = (_QWORD *)v5[1];
          if (!v10)
            break;
        }
        v7 = v10[4];
        v5 = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    v5 = (_QWORD *)(a1 + 8);
  }
  *a2 = v5;
  return v4;
}

uint64_t sub_100122B54(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  sub_10004D648(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_100122B90(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100122BE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void sub_100122C08(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100122C2C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_100122C44(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

char *sub_100122C84(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)sub_100122AA0((uint64_t)a1, &v11, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x38uLL);
    v9[1] = a1 + 1;
    *((_QWORD *)v6 + 4) = *(_QWORD *)a3;
    *(_OWORD *)(v6 + 40) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v10 = 1;
    sub_1000284A8(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    sub_10004EBC0((uint64_t)v9, 0);
  }
  return v6;
}

void sub_100122D38()
{
  operator new();
}

void sub_100122DC4(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100122E1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    operator delete();
  _Unwind_Resume(exception_object);
}

void sub_100122E48(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100122E6C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_100122E8C(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_100122ECC(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100122FB4((uint64_t)a1, a2);
  *a1 = off_100192878;
  a1[45] = &off_100192978;
  a1[46] = &off_1001929A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100192878;
  a1[45] = off_100192900;
  a1[46] = off_100192928;
  return a1;
}

void sub_100122F50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100123030(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100122F74(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100192940);
  sub_100123030(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100122FB4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100192A10;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10012301C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100123030(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100192A10;
  sub_1001232E8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1001230CC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100192940);
  sub_100123030(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100123120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100123154(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1001231A0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100192940);
  sub_100123030(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1001231D8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100192940);
  sub_100123030(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100123228(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100192940);
  sub_100123030(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100123268(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100192940);
  sub_100123030(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1001232C4(uint64_t a1)
{
  sub_100123030(a1);
  operator delete();
}

uint64_t sub_1001232E8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100123438((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100123410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100123438(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 183;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 183;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void sub_10012361C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  if ((_QWORD *)*a1 == a2)
  {
    v2 = 4;
  }
  else
  {
    if (!*a1)
      goto LABEL_6;
    v2 = 5;
    a2 = (_QWORD *)*a1;
  }
  (*(void (**)(_QWORD *))(*a2 + 8 * v2))(a2);
LABEL_6:
  operator delete();
}

uint64_t sub_1001236F8(uint64_t a1, uint64_t a2)
{
  std::streambuf::~streambuf(a1);
  return std::ios::~ios(a2 + 112);
}

uint64_t sub_100123734(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  sub_100012168(a1);
  for (result = (uint64_t)__cxa_begin_catch(a2); a4 != a1; a4 += 104)
  {
    v8 = *(_QWORD *)(a4 + 48);
    if (v8)
      *(_QWORD *)(v8 + 32) = 0;
    result = sub_100012168(a4);
  }
  return result;
}

void sub_10012379C(void *a1)
{
  _OWORD *v1;

  v1 = sub_10005B134(a1);
  sub_10005B11C(v1);
  sub_10005B12C();
}

uint64_t sub_1001237B8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_1001237F0(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_10012381C(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
  sub_10005B12C();
}

void sub_100123864()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000EAB60();
  if (v4)
  {
    v5 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v5 = 5;
    v2 = v3;
  }
  sub_1000EAB50(v2, v5);
LABEL_6:
  if ((_QWORD *)*v1 == v0)
  {
    v6 = 4;
    goto LABEL_10;
  }
  if (*v1)
  {
    v6 = 5;
    v0 = (_QWORD *)*v1;
LABEL_10:
    sub_1000EAB48((uint64_t)v0, *(uint64_t (**)(void))(*v0 + 8 * v6));
    return;
  }
  sub_10005B12C();
}

_QWORD *sub_1001238CC(_QWORD *result, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;

  if ((_QWORD *)*result == a2)
  {
    v6 = 4;
  }
  else
  {
    if (!*result)
      goto LABEL_6;
    v6 = 5;
    a2 = (_QWORD *)*result;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 8 * v6))(a2);
LABEL_6:
  if (*a3 == a4)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
  if (*a3)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 40))(*a3);
  return result;
}

void sub_10012395C(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

id objc_msgSend_BSDName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BSDName");
}

id objc_msgSend_CLIPassphrasePrompt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CLIPassphrasePrompt");
}

id objc_msgSend_CLIVerifyPassphrasePrompt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CLIVerifyPassphrasePrompt");
}

id objc_msgSend_DI1URLWithData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "DI1URLWithData:error:");
}

id objc_msgSend_GUIAskForPassphraseWithEncryptionFrontend_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "GUIAskForPassphraseWithEncryptionFrontend:error:");
}

id objc_msgSend_GUIAskForPassphraseWithEncryptionFrontend_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "GUIAskForPassphraseWithEncryptionFrontend:reply:");
}

id objc_msgSend_GUIPassphraseLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "GUIPassphraseLabel");
}

id objc_msgSend_GUIPassphrasePrompt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "GUIPassphrasePrompt");
}

id objc_msgSend_GUIVerifyPassphraseLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "GUIVerifyPassphraseLabel");
}

id objc_msgSend_GraphNodeWithDictionary_updateChangesToDict_workDir_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "GraphNodeWithDictionary:updateChangesToDict:workDir:error:");
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_KKMSKeyWithURL_destKey_destKeySize_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "KKMSKeyWithURL:destKey:destKeySize:error:");
}

id objc_msgSend_RAMdisk(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "RAMdisk");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URL");
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathExtension:");
}

id objc_msgSend_URLByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByDeletingLastPathComponent");
}

id objc_msgSend_URLByStandardizingPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByStandardizingPath");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDString");
}

id objc_msgSend_WKMSKeyWithURL_authData_destKey_destKeySize_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "WKMSKeyWithURL:authData:destKey:destKeySize:error:");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_absoluteURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteURL");
}

id objc_msgSend_activeConnections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeConnections");
}

id objc_msgSend_activeNode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeNode");
}

id objc_msgSend_activeShadowURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeShadowURL");
}

id objc_msgSend_addBytesDownloaded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBytesDownloaded:");
}

id objc_msgSend_addDecendantsToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDecendantsToArray:");
}

id objc_msgSend_addDisappearedCallbackWithMountPoint_shadowMountPoints_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDisappearedCallbackWithMountPoint:shadowMountPoints:delegate:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRequest:");
}

id objc_msgSend_addShadowNodes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addShadowNodes:error:");
}

id objc_msgSend_addShadowURLs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addShadowURLs:error:");
}

id objc_msgSend_addToRefCountWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addToRefCountWithError:");
}

id objc_msgSend_addToRefCountWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addToRefCountWithReply:");
}

id objc_msgSend_addValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addValue:forHTTPHeaderField:");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allowOnDiskCacheWithSinkDiskImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowOnDiskCacheWithSinkDiskImage:");
}

id objc_msgSend_allowStoringInKeychain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowStoringInKeychain");
}

id objc_msgSend_anonymousListener(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anonymousListener");
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anyObject");
}

id objc_msgSend_applyMountPointsWithBSDName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyMountPointsWithBSDName:error:");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_arguments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arguments");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_askPermissionWithRememberPassword_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "askPermissionWithRememberPassword:error:");
}

id objc_msgSend_attachWithParams_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachWithParams:reply:");
}

id objc_msgSend_autoMount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoMount");
}

id objc_msgSend_backend(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backend");
}

id objc_msgSend_backendXPC(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backendXPC");
}

id objc_msgSend_baseBackendXPC(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baseBackendXPC");
}

id objc_msgSend_blockSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blockSize");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_buf(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buf");
}

id objc_msgSend_bundleWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithURL:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bytes");
}

id objc_msgSend_bytesDownloaded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bytesDownloaded");
}

id objc_msgSend_cache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cache");
}

id objc_msgSend_cacheDocument_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheDocument:");
}

id objc_msgSend_cacheLock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheLock");
}

id objc_msgSend_cacheURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheURL");
}

id objc_msgSend_callbackReached(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callbackReached");
}

id objc_msgSend_certificate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "certificate");
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_characterIsMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterIsMember:");
}

id objc_msgSend_checkBeforeSetWithIsPassphrase_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkBeforeSetWithIsPassphrase:error:");
}

id objc_msgSend_checkExistingFileWithURL_isDirectory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkExistingFileWithURL:isDirectory:error:");
}

id objc_msgSend_checkResourceIsReachableAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkResourceIsReachableAndReturnError:");
}

id objc_msgSend_checkStackValidityWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkStackValidityWithError:");
}

id objc_msgSend_checkWithHasIcloudKeychain_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkWithHasIcloudKeychain:error:");
}

id objc_msgSend_children(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "children");
}

id objc_msgSend_client2IOhandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "client2IOhandler");
}

id objc_msgSend_clientDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientDelegate");
}

id objc_msgSend_closeConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeConnection");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "code");
}

id objc_msgSend_commandSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandSize");
}

id objc_msgSend_completeCommandWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeCommandWithError:");
}

id objc_msgSend_completeRequest_data_response_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeRequest:data:response:error:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_componentsWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_connectWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectWithError:");
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection");
}

id objc_msgSend_consoleAskForPassphraseWithUseStdin_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consoleAskForPassphraseWithUseStdin:error:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsValueForKey:");
}

id objc_msgSend_conversionMethod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conversionMethod");
}

id objc_msgSend_convertPrivateKeyTox963WithPemPrivateKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPrivateKeyTox963WithPemPrivateKey:error:");
}

id objc_msgSend_convertWithParams_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertWithParams:reply:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_copyAllMountPoints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyAllMountPoints");
}

id objc_msgSend_copyBlockDeviceWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyBlockDeviceWithError:");
}

id objc_msgSend_copyDefaultLocalizedStringForDIErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyDefaultLocalizedStringForDIErrorCode:");
}

id objc_msgSend_copyDevicePathWithStatfs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyDevicePathWithStatfs:");
}

id objc_msgSend_copyDictNodesToFolder_dict_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyDictNodesToFolder:dict:error:");
}

id objc_msgSend_copyDiskImagesControllerWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyDiskImagesControllerWithError:");
}

id objc_msgSend_copyEntitiesList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyEntitiesList");
}

id objc_msgSend_copyIOMediaWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyIOMediaWithError:");
}

id objc_msgSend_copyItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemAtURL:toURL:error:");
}

id objc_msgSend_copyNextObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyNextObject");
}

id objc_msgSend_copyParentWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyParentWithError:");
}

id objc_msgSend_copyPropertyWithClass_key_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyPropertyWithClass:key:");
}

id objc_msgSend_copyUnmatchedDiskImageWithRegEntryID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyUnmatchedDiskImageWithRegEntryID:error:");
}

id objc_msgSend_copyUpdatedOutputURLWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyUpdatedOutputURLWithError:");
}

id objc_msgSend_copyWithURL_outURLStr_maxLen_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithURL:outURLStr:maxLen:error:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_createAEABackendWithBackendXPC_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAEABackendWithBackendXPC:error:");
}

id objc_msgSend_createAndResumeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAndResumeTask");
}

id objc_msgSend_createAndStoreInSystemKeychainWithCreator_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAndStoreInSystemKeychainWithCreator:account:error:");
}

id objc_msgSend_createAndStoreInSystemKeychainWithCreator_account_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAndStoreInSystemKeychainWithCreator:account:reply:");
}

id objc_msgSend_createBackendWithFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createBackendWithFlags:");
}

id objc_msgSend_createConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createConnection");
}

id objc_msgSend_createDiskImageParamsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDiskImageParamsWithError:");
}

id objc_msgSend_createDiskImageParamsXPC(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDiskImageParamsXPC");
}

id objc_msgSend_createDiskImageWithCache_shadowValidation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDiskImageWithCache:shadowValidation:");
}

id objc_msgSend_createEncryptionWithXPCHandler_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createEncryptionWithXPCHandler:error:");
}

id objc_msgSend_createListener(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createListener");
}

id objc_msgSend_createNodesConnectivityWithNodesDict_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNodesConnectivityWithNodesDict:error:");
}

id objc_msgSend_createNotificationPortWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNotificationPortWithError:");
}

id objc_msgSend_createPstackDictWithNode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPstackDictWithNode:");
}

id objc_msgSend_createPublicKeyHeaderWithBackendXPC_publicKeyHeader_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPublicKeyHeaderWithBackendXPC:publicKeyHeader:error:");
}

id objc_msgSend_createRamBackend(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRamBackend");
}

id objc_msgSend_createShadowDiskImageWithBackend_numBlocks_sinkDiskImage_cache_only_stack_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createShadowDiskImageWithBackend:numBlocks:sinkDiskImage:cache_only:stack_size:");
}

id objc_msgSend_createSinkDiskImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSinkDiskImage");
}

id objc_msgSend_createWithXpcHandler_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createWithXpcHandler:error:");
}

id objc_msgSend_cryptoHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cryptoHeader");
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentRunLoop");
}

id objc_msgSend_customCacheURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customCacheURL");
}

id objc_msgSend_daSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daSession");
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithRequest:completionHandler:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfFile:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_decimalDigitCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decimalDigitCharacterSet");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeBytesForKey_returnedLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBytesForKey:returnedLength:");
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeInt64ForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decryptKeyWithData_destKey_destKeySize_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decryptKeyWithData:destKey:destKeySize:error:");
}

id objc_msgSend_defaultCStringEncoding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCStringEncoding");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegate");
}

id objc_msgSend_deleteImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteImage");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "description");
}

id objc_msgSend_deserializationError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deserializationError");
}

id objc_msgSend_destroyNotificationPort(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destroyNotificationPort");
}

id objc_msgSend_deviceHandle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceHandle");
}

id objc_msgSend_diParams(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diParams");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_diskArbDisappear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diskArbDisappear");
}

id objc_msgSend_diskArbWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diskArbWithError:");
}

id objc_msgSend_diskImageDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diskImageDevice");
}

id objc_msgSend_diskImageParamsXPC(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diskImageParamsXPC");
}

id objc_msgSend_dispatchQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchQueue");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domain");
}

id objc_msgSend_downloadSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadSession");
}

id objc_msgSend_dupStderrWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dupStderrWithError:");
}

id objc_msgSend_dupWithStderrHandle_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dupWithStderrHandle:reply:");
}

id objc_msgSend_effectiveUserIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveUserIdentifier");
}

id objc_msgSend_embedUserDataWithParams_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "embedUserDataWithParams:reply:");
}

id objc_msgSend_emulateExternalDisk(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emulateExternalDisk");
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeBytes_length_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBytes:length:forKey:");
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt64:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encryptionMethod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptionMethod");
}

id objc_msgSend_encryptionUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptionUUID");
}

id objc_msgSend_endpoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endpoint");
}

id objc_msgSend_enqueueRequestWithSize_atOffset_destinationBuffer_destinationStream_completionSemaphore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueRequestWithSize:atOffset:destinationBuffer:destinationStream:completionSemaphore:");
}

id objc_msgSend_enterSandbox(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enterSandbox");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
}

id objc_msgSend_ephemeralSessionConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ephemeralSessionConfiguration");
}

id objc_msgSend_eraseIfExistingWithURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eraseIfExistingWithURL:error:");
}

id objc_msgSend_eraseOldCacheFiles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eraseOldCacheFiles");
}

id objc_msgSend_errorWithDIException_description_prefix_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDIException:description:prefix:error:");
}

id objc_msgSend_errorWithDomain_code_description_verboseInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:description:verboseInfo:error:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_errorWithEnumValue_verboseInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithEnumValue:verboseInfo:");
}

id objc_msgSend_errorWithPOSIXCode_verboseInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithPOSIXCode:verboseInfo:");
}

id objc_msgSend_executablePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executablePath");
}

id objc_msgSend_executeWithPath_arguments_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeWithPath:arguments:error:");
}

id objc_msgSend_exitDaemon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exitDaemon");
}

id objc_msgSend_exitTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exitTimer");
}

id objc_msgSend_exitWithUnmount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exitWithUnmount");
}

id objc_msgSend_extraInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extraInfo");
}

id objc_msgSend_failWithDIException_description_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failWithDIException:description:error:");
}

id objc_msgSend_failWithDIException_prefix_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failWithDIException:prefix:error:");
}

id objc_msgSend_failWithEnumValue_verboseInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failWithEnumValue:verboseInfo:error:");
}

id objc_msgSend_failWithNoPstackError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failWithNoPstackError:");
}

id objc_msgSend_failWithOSStatus_description_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failWithOSStatus:description:error:");
}

id objc_msgSend_failWithPOSIXCode_description_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failWithPOSIXCode:description:error:");
}

id objc_msgSend_failWithPOSIXCode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failWithPOSIXCode:error:");
}

id objc_msgSend_failWithPOSIXCode_verboseInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failWithPOSIXCode:verboseInfo:error:");
}

id objc_msgSend_fileBackend(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileBackend");
}

id objc_msgSend_fileDescriptor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileDescriptor");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileHandleForReading(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileHandleForReading");
}

id objc_msgSend_fileHandleForReadingFromURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileHandleForReadingFromURL:error:");
}

id objc_msgSend_fileMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileMode");
}

id objc_msgSend_filePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filePath");
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileSystemRepresentation");
}

id objc_msgSend_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_fileURLWithPath_relativeToURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:relativeToURL:");
}

id objc_msgSend_fillDI1InfoWithDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillDI1InfoWithDevice:error:");
}

id objc_msgSend_fillDI2InfoWithDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillDI2InfoWithDevice:error:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_flags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flags");
}

id objc_msgSend_frameworkNum(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameworkNum");
}

id objc_msgSend_getAEAKeyFromSAKSWithMetadata_key_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAEAKeyFromSAKSWithMetadata:key:error:");
}

id objc_msgSend_getAEAKeyWithHelper_keyBuffer_bufferSize_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAEAKeyWithHelper:keyBuffer:bufferSize:error:");
}

id objc_msgSend_getAuthEntryWithBackend_authTableNumEntries_mechanism_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAuthEntryWithBackend:authTableNumEntries:mechanism:error:");
}

id objc_msgSend_getAuthValueWithBackend_authTableNumEntries_mechanism_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAuthValueWithBackend:authTableNumEntries:mechanism:error:");
}

id objc_msgSend_getCFRunLoop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCFRunLoop");
}

id objc_msgSend_getCertificateWithCertificatePath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCertificateWithCertificatePath:error:");
}

id objc_msgSend_getCertificateWithEncryptionCreator_outCertificate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCertificateWithEncryptionCreator:outCertificate:error:");
}

id objc_msgSend_getCertificateWithPublicKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCertificateWithPublicKey:error:");
}

id objc_msgSend_getCryptoHeaderBackend(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCryptoHeaderBackend");
}

id objc_msgSend_getDescendants(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDescendants");
}

id objc_msgSend_getImageInfoWithExtra_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getImageInfoWithExtra:error:");
}

id objc_msgSend_getImageWithTag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getImageWithTag:error:");
}

id objc_msgSend_getPassphraseUsingSaksWithBackendXPC_passPhrase_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPassphraseUsingSaksWithBackendXPC:passPhrase:error:");
}

id objc_msgSend_getPrivateKeyWithHeader_privateKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPrivateKeyWithHeader:privateKey:error:");
}

id objc_msgSend_getPublicKeyWithCertificate_key_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPublicKeyWithCertificate:key:error:");
}

id objc_msgSend_getRequestWithURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRequestWithURL:error:");
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getResourceValue:forKey:error:");
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUUIDBytes:");
}

id objc_msgSend_handleRefCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRefCount");
}

id objc_msgSend_hasBaseImageCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasBaseImageCache");
}

id objc_msgSend_hasDirectoryPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasDirectoryPath");
}

id objc_msgSend_hasGUIaccess(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasGUIaccess");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasUnlockedBackend(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasUnlockedBackend");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hash");
}

id objc_msgSend_hintFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hintFormat:");
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "host");
}

id objc_msgSend_imageURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageURL");
}

id objc_msgSend_imagesDictsArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imagesDictsArray");
}

id objc_msgSend_imported(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imported");
}

id objc_msgSend_inPlaceConversion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inPlaceConversion");
}

id objc_msgSend_initFileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFileURLWithPath:");
}

id objc_msgSend_initWithBSDName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBSDName:error:");
}

id objc_msgSend_initWithBackend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBackend:");
}

id objc_msgSend_initWithBackend_key_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBackend:key:");
}

id objc_msgSend_initWithBackendXPC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBackendXPC:");
}

id objc_msgSend_initWithBackendXPC_blockSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBackendXPC:blockSize:");
}

id objc_msgSend_initWithBackendXPC_header_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBackendXPC:header:");
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedString:options:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_initWithClassName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClassName:error:");
}

id objc_msgSend_initWithDIIOObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDIIOObject:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithData_pstackURL_imported_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:pstackURL:imported:error:");
}

id objc_msgSend_initWithDebugServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDebugServiceName:");
}

id objc_msgSend_initWithDevName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDevName:error:");
}

id objc_msgSend_initWithDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDevice:error:");
}

id objc_msgSend_initWithDictionary_copyItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:copyItems:");
}

id objc_msgSend_initWithDictionary_updateChangesToDict_workDir_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:updateChangesToDict:workDir:error:");
}

id objc_msgSend_initWithEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEndpoint:");
}

id objc_msgSend_initWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithError:");
}

id objc_msgSend_initWithFileDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileDescriptor:");
}

id objc_msgSend_initWithFileDescriptor_closeOnDealloc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileDescriptor:closeOnDealloc:");
}

id objc_msgSend_initWithFileDescriptor_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileDescriptor:error:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithIODaemon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIODaemon:");
}

id objc_msgSend_initWithIOIterator_retain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIOIterator:retain:");
}

id objc_msgSend_initWithIOObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIOObject:");
}

id objc_msgSend_initWithInputURL_outputURL_shadowURLs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInputURL:outputURL:shadowURLs:error:");
}

id objc_msgSend_initWithIsRAM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIsRAM:");
}

id objc_msgSend_initWithIteratorNext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIteratorNext:");
}

id objc_msgSend_initWithListenerEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithListenerEndpoint:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMachServiceName_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:options:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithParams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParams:");
}

id objc_msgSend_initWithPluginName_params_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPluginName:params:");
}

id objc_msgSend_initWithPluginName_pluginParams_tag_UUID_parentNode_metadata_isCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPluginName:pluginParams:tag:UUID:parentNode:metadata:isCache:");
}

id objc_msgSend_initWithPstackURL_imported_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPstackURL:imported:error:");
}

id objc_msgSend_initWithRegEntryID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRegEntryID:");
}

id objc_msgSend_initWithRegEntryID_xpcEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRegEntryID:xpcEndpoint:");
}

id objc_msgSend_initWithRegistryEntryID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRegistryEntryID:error:");
}

id objc_msgSend_initWithServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:");
}

id objc_msgSend_initWithSession_size_atOffset_destinationBuffer_destinationStream_completionSemaphore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSession:size:atOffset:destinationBuffer:destinationStream:completionSemaphore:");
}

id objc_msgSend_initWithSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSize:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:");
}

id objc_msgSend_initWithURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:error:");
}

id objc_msgSend_initWithURL_fileOpenFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:fileOpenFlags:");
}

id objc_msgSend_initWithURL_fileOpenFlags_bandSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:fileOpenFlags:bandSize:");
}

id objc_msgSend_initWithURL_isCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:isCache:");
}

id objc_msgSend_initWithURL_key_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:key:");
}

id objc_msgSend_initWithURL_openMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:openMode:");
}

id objc_msgSend_initWithURL_shadowURLs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:shadowURLs:error:");
}

id objc_msgSend_initWithURL_streamBase_maxAttempts_pauseInterval_maxRequestsInFlight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:streamBase:maxAttempts:pauseInterval:maxRequestsInFlight:");
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUTF8String:");
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDBytes:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUnsignedInt:");
}

id objc_msgSend_initWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUnsignedLongLong:");
}

id objc_msgSend_initWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUnsignedShort:");
}

id objc_msgSend_inputMountedOnURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputMountedOnURL");
}

id objc_msgSend_inputStatFS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputStatFS");
}

id objc_msgSend_inputURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputURL");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_instanceID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instanceID");
}

id objc_msgSend_instanceId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instanceId");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidateAndCancel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateAndCancel");
}

id objc_msgSend_ioMedia(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ioMedia");
}

id objc_msgSend_ioObj(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ioObj");
}

id objc_msgSend_ioObjectWithClassName_iterateParent_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ioObjectWithClassName:iterateParent:error:");
}

id objc_msgSend_isCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCache");
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCancelled");
}

id objc_msgSend_isEmpty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEmpty");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isFileURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFileURL");
}

id objc_msgSend_isPlugin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPlugin");
}

id objc_msgSend_isPrivileged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPrivileged");
}

id objc_msgSend_isPstack(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPstack");
}

id objc_msgSend_isQuarantined(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isQuarantined");
}

id objc_msgSend_isRAM(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRAM");
}

id objc_msgSend_isSparseFormat(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSparseFormat");
}

id objc_msgSend_isUnlocked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUnlocked");
}

id objc_msgSend_isWritableFileAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWritableFileAtPath:");
}

id objc_msgSend_isWritableFormat(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWritableFormat");
}

id objc_msgSend_jsonResponseWithRequest_session_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsonResponseWithRequest:session:error:");
}

id objc_msgSend_keychainUnlockWithEncryptionUnlocker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keychainUnlockWithEncryptionUnlocker:error:");
}

id objc_msgSend_keychainUnlockWithEncryptionUnlocker_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keychainUnlockWithEncryptionUnlocker:reply:");
}

id objc_msgSend_keychainUnlockWithIsSystemKeychain_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keychainUnlockWithIsSystemKeychain:error:");
}

id objc_msgSend_keysOfEntriesPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysOfEntriesPassingTest:");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastPathComponent");
}

id objc_msgSend_launchAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchAndReturnError:");
}

id objc_msgSend_launchedTaskWithExecutableURL_arguments_error_terminationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchedTaskWithExecutableURL:arguments:error:terminationHandler:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_listener(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listener");
}

id objc_msgSend_loadImportedNodesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadImportedNodesWithError:");
}

id objc_msgSend_loadPlistDictFromURL_dict_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadPlistDictFromURL:dict:error:");
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lock");
}

id objc_msgSend_logWithHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logWithHeader:");
}

id objc_msgSend_lookupLegacyKeychainWithXpcHandler_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lookupLegacyKeychainWithXpcHandler:error:");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lowercaseString");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_makeCryptoFormatWithIsNewImage_pass_certificate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeCryptoFormatWithIsNewImage:pass:certificate:error:");
}

id objc_msgSend_makeNewImageEncryptedWithPassphrase_certificate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeNewImageEncryptedWithPassphrase:certificate:error:");
}

id objc_msgSend_maxAttempts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxAttempts");
}

id objc_msgSend_maxRawUDIFRunSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxRawUDIFRunSize");
}

id objc_msgSend_maxRequests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxRequests");
}

id objc_msgSend_mediaSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mediaSize");
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadata");
}

id objc_msgSend_mountPoints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mountPoints");
}

id objc_msgSend_mountedFrom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mountedFrom");
}

id objc_msgSend_mountedOnAPFS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mountedOnAPFS");
}

id objc_msgSend_mountedOnURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mountedOnURL");
}

id objc_msgSend_moveItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveItemAtURL:toURL:error:");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_nbyte(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nbyte");
}

id objc_msgSend_newACEndpointWithEnvironment_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newACEndpointWithEnvironment:error:");
}

id objc_msgSend_newAttachWithParams_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newAttachWithParams:error:");
}

id objc_msgSend_newDI1DevicesArrayWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newDI1DevicesArrayWithError:");
}

id objc_msgSend_newDI2DevicesArrayWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newDI2DevicesArrayWithError:");
}

id objc_msgSend_newDIURLWithNSURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newDIURLWithNSURL:");
}

id objc_msgSend_newDIURLWithPluginName_params_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newDIURLWithPluginName:params:");
}

id objc_msgSend_newDawTokenWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newDawTokenWithError:");
}

id objc_msgSend_newEntityDictWithIOMedia_mountPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newEntityDictWithIOMedia:mountPoints:");
}

id objc_msgSend_newEnvWithDictionary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newEnvWithDictionary:error:");
}

id objc_msgSend_newFileBackendWithURL_fileOpenFlags_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newFileBackendWithURL:fileOpenFlags:error:");
}

id objc_msgSend_newIteratorWithOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newIteratorWithOptions:error:");
}

id objc_msgSend_newSessionWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newSessionWithError:");
}

id objc_msgSend_newUnlockBackendXPCValidateArgsWithPassphrase_certificate_isNewImage_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newUnlockBackendXPCValidateArgsWithPassphrase:certificate:isNewImage:error:");
}

id objc_msgSend_newUnlockedBackendXPCWithPassphrase_certificate_isNewImage_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newUnlockedBackendXPCWithPassphrase:certificate:isNewImage:error:");
}

id objc_msgSend_newUrl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newUrl:");
}

id objc_msgSend_newWithCryptoFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newWithCryptoFormat:");
}

id objc_msgSend_newWithPassphrase_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newWithPassphrase:error:");
}

id objc_msgSend_newWithURL_fileOpenFlags_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newWithURL:fileOpenFlags:error:");
}

id objc_msgSend_newWithUnlockedBackendXPC_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newWithUnlockedBackendXPC:error:");
}

id objc_msgSend_newlineCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newlineCharacterSet");
}

id objc_msgSend_nilWithDIException_description_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nilWithDIException:description:error:");
}

id objc_msgSend_nilWithDIException_prefix_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nilWithDIException:prefix:error:");
}

id objc_msgSend_nilWithEnumValue_description_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nilWithEnumValue:description:error:");
}

id objc_msgSend_nilWithEnumValue_verboseInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nilWithEnumValue:verboseInfo:error:");
}

id objc_msgSend_nilWithOSStatus_verboseInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nilWithOSStatus:verboseInfo:error:");
}

id objc_msgSend_nilWithPOSIXCode_description_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nilWithPOSIXCode:description:error:");
}

id objc_msgSend_nilWithPOSIXCode_verboseInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nilWithPOSIXCode:verboseInfo:error:");
}

id objc_msgSend_nodes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nodes");
}

id objc_msgSend_nonCacheNodes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nonCacheNodes");
}

id objc_msgSend_notificationPort(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationPort");
}

id objc_msgSend_numBlocks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numBlocks");
}

id objc_msgSend_numBlocksWithSizeStr_blockSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numBlocksWithSizeStr:blockSize:");
}

id objc_msgSend_numberOfMatchesInString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfMatchesInString:options:range:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_offset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "offset");
}

id objc_msgSend_onClientInvalidateWithConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onClientInvalidateWithConnection:");
}

id objc_msgSend_onDisappearedMountPoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onDisappearedMountPoint");
}

id objc_msgSend_onDiskCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onDiskCache");
}

id objc_msgSend_onErrorCleanup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onErrorCleanup");
}

id objc_msgSend_onPeriodicWithInfo_urgency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onPeriodicWithInfo:urgency:");
}

id objc_msgSend_openEncryption(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openEncryption");
}

id objc_msgSend_openExistingImageWithFlags_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openExistingImageWithFlags:error:");
}

id objc_msgSend_openWritable_createNonExisting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openWritable:createNonExisting:");
}

id objc_msgSend_operationError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationError");
}

id objc_msgSend_outputFormat(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputFormat");
}

id objc_msgSend_outputParams(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputParams");
}

id objc_msgSend_outputURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputURL");
}

id objc_msgSend_parent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parent");
}

id objc_msgSend_parentUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parentUUID");
}

id objc_msgSend_passphrase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "passphrase");
}

id objc_msgSend_password(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "password");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "path");
}

id objc_msgSend_pauseInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseInterval");
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pid");
}

id objc_msgSend_pipe(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pipe");
}

id objc_msgSend_pluginHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pluginHeader");
}

id objc_msgSend_pluginName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pluginName");
}

id objc_msgSend_pluginParams(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pluginParams");
}

id objc_msgSend_popObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popObjectForKey:");
}

id objc_msgSend_populateNodesDictsWithArray_pstackURL_nodesDict_isTopLevelPstack_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "populateNodesDictsWithArray:pstackURL:nodesDict:isTopLevelPstack:error:");
}

id objc_msgSend_postRequestWithURL_session_data_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postRequestWithURL:session:data:error:");
}

id objc_msgSend_predicateWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithBlock:");
}

id objc_msgSend_prepareImageWithXpcHandler_fileMode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareImageWithXpcHandler:fileMode:error:");
}

id objc_msgSend_prepareParamsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareParamsWithError:");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processIdentifier");
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processInfo");
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processName");
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_pstackDB(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pstackDB");
}

id objc_msgSend_pstackDict(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pstackDict");
}

id objc_msgSend_pstackURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pstackURL");
}

id objc_msgSend_publicKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publicKey");
}

id objc_msgSend_ramSizeStr(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ramSizeStr");
}

id objc_msgSend_rawBlockSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rawBlockSize");
}

id objc_msgSend_reOpenIfWritableWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reOpenIfWritableWithError:");
}

id objc_msgSend_readDataToEndOfFileAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readDataToEndOfFileAndReturnError:");
}

id objc_msgSend_readDataUpToLength_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readDataUpToLength:error:");
}

id objc_msgSend_readPassphraseFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readPassphraseFlags");
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reason");
}

id objc_msgSend_regEntryID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regEntryID");
}

id objc_msgSend_registerPeriodicCallback(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerPeriodicCallback");
}

id objc_msgSend_registryEntryIDWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registryEntryIDWithError:");
}

id objc_msgSend_regularExpressionWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regularExpressionWithPattern:options:error:");
}

id objc_msgSend_relativePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "relativePath");
}

id objc_msgSend_relativeString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "relativeString");
}

id objc_msgSend_remainingAttempts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remainingAttempts");
}

id objc_msgSend_remoteObjectInterface(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectInterface");
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_remoteProxy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteProxy");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeLastObject");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeRequest:");
}

id objc_msgSend_removeWithNode_recursive_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeWithNode:recursive:error:");
}

id objc_msgSend_replaceWithBackendXPC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceWithBackendXPC:");
}

id objc_msgSend_requestSynchronousDataWithRequest_session_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestSynchronousDataWithRequest:session:");
}

id objc_msgSend_requestWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithURL:");
}

id objc_msgSend_requests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requests");
}

id objc_msgSend_requestsLock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestsLock");
}

id objc_msgSend_requestsSem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestsSem");
}

id objc_msgSend_requestsStatsToNSArrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestsStatsToNSArrayWithArray:");
}

id objc_msgSend_requiresRootDaemon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requiresRootDaemon");
}

id objc_msgSend_restartExitTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restartExitTimer");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resume");
}

id objc_msgSend_retrieveStatsWithParams_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveStatsWithParams:reply:");
}

id objc_msgSend_retrieveUserDataWithParams_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveUserDataWithParams:reply:");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reverseObjectEnumerator");
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "run");
}

id objc_msgSend_runIOmanager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runIOmanager");
}

id objc_msgSend_runLoopSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runLoopSource");
}

id objc_msgSend_runMode_beforeDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runMode:beforeDate:");
}

id objc_msgSend_saveToPlistWithDictionary_URL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveToPlistWithDictionary:URL:error:");
}

id objc_msgSend_scanInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanInteger:");
}

id objc_msgSend_scanUpToCharactersFromSet_intoString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanUpToCharactersFromSet:intoString:");
}

id objc_msgSend_scannerWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerWithString:");
}

id objc_msgSend_scheduledTimerWithTimeInterval_repeats_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledTimerWithTimeInterval:repeats:block:");
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheme");
}

id objc_msgSend_sem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sem");
}

id objc_msgSend_semaphore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "semaphore");
}

id objc_msgSend_serviceListener(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceListener");
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceName");
}

id objc_msgSend_sessionWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:");
}

id objc_msgSend_setActiveNode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveNode:");
}

id objc_msgSend_setAllowStoringInKeychain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowStoringInKeychain:");
}

id objc_msgSend_setArguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArguments:");
}

id objc_msgSend_setAttachedTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttachedTransaction:");
}

id objc_msgSend_setBSDName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBSDName:");
}

id objc_msgSend_setBackend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackend:");
}

id objc_msgSend_setBackendXPC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackendXPC:");
}

id objc_msgSend_setBlockSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlockSize:");
}

id objc_msgSend_setCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCache:");
}

id objc_msgSend_setCacheURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCacheURL:");
}

id objc_msgSend_setCallbackReached_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCallbackReached:");
}

id objc_msgSend_setCertificate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCertificate:");
}

id objc_msgSend_setClient2IOhandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClient2IOhandler:");
}

id objc_msgSend_setClientDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientDelegate:");
}

id objc_msgSend_setConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnection:");
}

id objc_msgSend_setConnectionMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionMode");
}

id objc_msgSend_setConversionMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConversionMethod:");
}

id objc_msgSend_setDI2PIDWithDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDI2PIDWithDevice:error:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDeserializationError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeserializationError:");
}

id objc_msgSend_setDeviceHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceHandle:");
}

id objc_msgSend_setDiskImageParamsXPC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiskImageParamsXPC:");
}

id objc_msgSend_setEncryptionMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEncryptionMethod:");
}

id objc_msgSend_setExecutableURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExecutableURL:");
}

id objc_msgSend_setExitTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExitTimer:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setFileMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileMode:");
}

id objc_msgSend_setHTTPAdditionalHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPAdditionalHeaders:");
}

id objc_msgSend_setHTTPBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPBody:");
}

id objc_msgSend_setHTTPMaximumConnectionsPerHost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPMaximumConnectionsPerHost:");
}

id objc_msgSend_setHTTPMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPMethod:");
}

id objc_msgSend_setHandleRefCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandleRefCount:");
}

id objc_msgSend_setInputMountedOnURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInputMountedOnURL:");
}

id objc_msgSend_setInputStatFS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInputStatFS:");
}

id objc_msgSend_setInputURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInputURL:");
}

id objc_msgSend_setInstanceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInstanceID:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setListener:");
}

id objc_msgSend_setNotificationPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationPort:");
}

id objc_msgSend_setNumBlocks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumBlocks:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOperationError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOperationError:");
}

id objc_msgSend_setOutputParams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutputParams:");
}

id objc_msgSend_setParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParent:");
}

id objc_msgSend_setPassphrase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPassphrase:");
}

id objc_msgSend_setPassphrase_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPassphrase:error:");
}

id objc_msgSend_setPassword_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPassword:");
}

id objc_msgSend_setPauseInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPauseInterval:");
}

id objc_msgSend_setPstackDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPstackDict:");
}

id objc_msgSend_setPublicKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPublicKey:");
}

id objc_msgSend_setReadPassphraseFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadPassphraseFlags:");
}

id objc_msgSend_setRemainingAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemainingAttempts:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRemoteProxy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteProxy:");
}

id objc_msgSend_setRunLoopSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRunLoopSource:");
}

id objc_msgSend_setSemaphore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSemaphore:");
}

id objc_msgSend_setShadowChain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShadowChain:");
}

id objc_msgSend_setShadowMountedOnURLs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShadowMountedOnURLs:");
}

id objc_msgSend_setShouldValidate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldValidate:");
}

id objc_msgSend_setSigtermHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSigtermHandler:");
}

id objc_msgSend_setSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSize:");
}

id objc_msgSend_setSizeWithDiskImage_newSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSizeWithDiskImage:newSize:");
}

id objc_msgSend_setSparseBundleBandSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSparseBundleBandSize:");
}

id objc_msgSend_setStandardOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStandardOutput:");
}

id objc_msgSend_setStartedOver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartedOver:");
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatus:");
}

id objc_msgSend_setTimeoutIntervalForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutIntervalForRequest:");
}

id objc_msgSend_setTimeoutIntervalForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutIntervalForResource:");
}

id objc_msgSend_setUserDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserDict:");
}

id objc_msgSend_setValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forHTTPHeaderField:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setXpcEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXpcEndpoint:");
}

id objc_msgSend_setXpcError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXpcError:");
}

id objc_msgSend_setupDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupDefaults");
}

id objc_msgSend_setupExitDaemonWatchdog(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupExitDaemonWatchdog");
}

id objc_msgSend_setupNewConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupNewConnection:");
}

id objc_msgSend_setupSigtermHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupSigtermHandler");
}

id objc_msgSend_setupTerminationNotificationWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupTerminationNotificationWithError:");
}

id objc_msgSend_shadowChain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shadowChain");
}

id objc_msgSend_shadowMountedOnURLs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shadowMountedOnURLs");
}

id objc_msgSend_shadowStats(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shadowStats");
}

id objc_msgSend_shadowURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shadowURL");
}

id objc_msgSend_shadowURLs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shadowURLs");
}

id objc_msgSend_sharedSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedSession");
}

id objc_msgSend_shouldPerformInplaceSquash(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPerformInplaceSquash");
}

id objc_msgSend_shouldValidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldValidate");
}

id objc_msgSend_shouldValidateShadows(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldValidateShadows");
}

id objc_msgSend_signalCommandCompletedWithXpcError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signalCommandCompletedWithXpcError:");
}

id objc_msgSend_sigtermHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sigtermHandler");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "size");
}

id objc_msgSend_sleepForTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sleepForTimeInterval:");
}

id objc_msgSend_sparseBundleBandSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sparseBundleBandSize");
}

id objc_msgSend_startXPClistener(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startXPClistener");
}

id objc_msgSend_startedOver(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startedOver");
}

id objc_msgSend_statWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statWithError:");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "status");
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusCode");
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stop");
}

id objc_msgSend_storeInKeychainWithPassphrase_forceSystemKeychain_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeInKeychainWithPassphrase:forceSystemKeychain:error:");
}

id objc_msgSend_stream(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stream");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringWithCString_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithCString:encoding:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_supportsPstack(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsPstack");
}

id objc_msgSend_syncRequests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncRequests");
}

id objc_msgSend_systemKeychainAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemKeychainAccount");
}

id objc_msgSend_tag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tag");
}

id objc_msgSend_terminationStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "terminationStatus");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceNow");
}

id objc_msgSend_toDIShadowNode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toDIShadowNode");
}

id objc_msgSend_toDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toDictionary");
}

id objc_msgSend_tryAttachWithParams_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryAttachWithParams:error:");
}

id objc_msgSend_tryCreateAEABackendWithBackendXPC_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryCreateAEABackendWithBackendXPC:error:");
}

id objc_msgSend_tryCreateUsingKeychainCertificateWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryCreateUsingKeychainCertificateWithError:");
}

id objc_msgSend_tryCreatingCryptoHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryCreatingCryptoHeader");
}

id objc_msgSend_tryResolvePstackChain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryResolvePstackChain:");
}

id objc_msgSend_tryUnlockUsingKeychainCertificateWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryUnlockUsingKeychainCertificateWithError:");
}

id objc_msgSend_tryUnlockUsingSaksWithHasSaksKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryUnlockUsingSaksWithHasSaksKey:error:");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_uniqueDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueDevice");
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unlock");
}

id objc_msgSend_unlockWithXpcHandler_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unlockWithXpcHandler:error:");
}

id objc_msgSend_unmountAll(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unmountAll");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedLongLongValue");
}

id objc_msgSend_unwrapEncryptionKeyWithWrappedKey_encapsulatedKey_privateKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unwrapEncryptionKeyWithWrappedKey:encapsulatedKey:privateKey:error:");
}

id objc_msgSend_updateBSDNameWithBlockDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBSDNameWithBlockDevice:error:");
}

id objc_msgSend_updateDiskImageParamsWithFrontend_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDiskImageParamsWithFrontend:error:");
}

id objc_msgSend_updateStatFSWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateStatFSWithError:");
}

id objc_msgSend_updateSystemKeychainAttrWithDict_isStoring_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSystemKeychainAttrWithDict:isStoring:error:");
}

id objc_msgSend_url(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "url");
}

id objc_msgSend_urlRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "urlRequest");
}

id objc_msgSend_urlSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "urlSession");
}

id objc_msgSend_useFormatMappingInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useFormatMappingInfo");
}

id objc_msgSend_userDict(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userDict");
}

id objc_msgSend_validateAndPopObjectForKey_className_isOptional_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateAndPopObjectForKey:className:isOptional:error:");
}

id objc_msgSend_validateConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateConnection");
}

id objc_msgSend_validateDeserializationWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateDeserializationWithError:");
}

id objc_msgSend_validateDeserializationWithParams_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateDeserializationWithParams:reply:");
}

id objc_msgSend_validateFileWithURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateFileWithURL:error:");
}

id objc_msgSend_validateInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateInstance");
}

id objc_msgSend_validateObjWithKey_className_isOptional_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateObjWithKey:className:isOptional:error:");
}

id objc_msgSend_validateSquashFormats(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateSquashFormats");
}

id objc_msgSend_validateSupportedFormatWithBackendXPC_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateSupportedFormatWithBackendXPC:error:");
}

id objc_msgSend_validateWithDictionary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateWithDictionary:error:");
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_verifyNodes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyNodes:error:");
}

id objc_msgSend_verifyWithParams_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyWithParams:reply:");
}

id objc_msgSend_waitForDAIdleWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitForDAIdleWithError:");
}

id objc_msgSend_waitForDeviceWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitForDeviceWithError:");
}

id objc_msgSend_waitForQuietWithService_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitForQuietWithService:error:");
}

id objc_msgSend_waitUntilExit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitUntilExit");
}

id objc_msgSend_weakDaemon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weakDaemon");
}

id objc_msgSend_writeHexKeyToBuffer_hexKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeHexKeyToBuffer:hexKey:error:");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:options:error:");
}

id objc_msgSend_xpcEndpoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcEndpoint");
}

id objc_msgSend_xpcError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcError");
}

id objc_msgSend_xpcListenerEndpoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcListenerEndpoint");
}

