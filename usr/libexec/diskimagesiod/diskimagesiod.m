uint64_t sub_1000052A0(uint64_t a1, io_connect_t a2, uint32_t a3)
{
  uint64_t v6;
  kern_return_t v7;
  kern_return_t inserted;
  unsigned int v10;
  const char *v11;
  _QWORD *exception;
  const std::error_category *v13;

  v6 = sub_100005394(a1);
  *(_QWORD *)v6 = off_10016D4A8;
  v7 = IOConnectSetNotificationPort(a2, a3, *(_DWORD *)(v6 + 8), 0);
  if (v7)
  {
    v10 = v7;
    v11 = "Can't register notification port";
    goto LABEL_6;
  }
  inserted = mach_port_insert_right(mach_task_self_, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 8), 0x14u);
  if (inserted)
  {
    v10 = inserted;
    v11 = "Can't get send rights";
LABEL_6:
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_1001924F8;
    v13 = std::generic_category();
    exception[1] = v10;
    exception[2] = v13;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = v11;
  }
  return a1;
}

void sub_100005380(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100005468(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100005394(uint64_t a1)
{
  kern_return_t v2;
  unsigned int v4;
  void *exception;
  void *v6;

  *(_QWORD *)a1 = &off_10016D4F0;
  *(_DWORD *)(a1 + 8) = 0;
  v2 = mach_port_allocate(mach_task_self_, 1u, (mach_port_name_t *)(a1 + 8));
  if (v2)
  {
    v4 = v2;
    exception = __cxa_allocate_exception(0x40uLL);
    v6 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Can't allocate mach port", v4);
  }
  return a1;
}

uint64_t sub_100005410(uint64_t a1, uint64_t a2, unsigned int a3)
{
  const std::error_category *v6;

  *(_QWORD *)a1 = &off_1001924F8;
  v6 = std::generic_category();
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a2;
  return a1;
}

uint64_t sub_100005468(uint64_t a1)
{
  mach_port_name_t v2;

  *(_QWORD *)a1 = &off_10016D4F0;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
    mach_port_mod_refs(mach_task_self_, v2, 1u, -1);
  return a1;
}

void sub_1000054BC(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t *sub_1000054CC(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  return a1;
}

void sub_100005508(uint64_t a1)
{
  sub_100005D54(a1);
  operator delete();
}

void sub_100005530(uint64_t a1)
{
  sub_100005468(a1);
  operator delete();
}

void sub_100005554(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1001924F8;
  if (LOBYTE(this[6].__vftable) && SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
  std::exception::~exception(this);
}

uint64_t sub_100005598@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = sub_100005634(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_100005680();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t sub_100005634(uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

void sub_100005680()
{
  sub_100005694("basic_string");
}

void sub_100005694(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1000056E4(exception, a1);
}

void sub_1000056D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1000056E4(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_100005708(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = a1 + 64;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)v4);
  v5 = *a2;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v4 = v5;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  sub_100005760(a1);
}

void sub_100005760(uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

_QWORD *sub_100005870(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_100005680();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_100005920(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::ios_base *v5;

  v2 = a1 + 8;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = v4;
  v5 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1000059E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::ostream::~ostream(v2, v3 + 8);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100005A0C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  std::ostream::sentry::sentry(v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_100005B70(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry(v13);
  return a1;
}

void sub_100005B14(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry(&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x100005AF4);
}

void sub_100005B5C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_100005B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      sub_100005CAC(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_100005C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100005CAC(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_100005680();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t sub_100005D54(uint64_t a1)
{
  mach_port_name_t v2;

  *(_QWORD *)a1 = off_10016D4A8;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
    mach_port_deallocate(mach_task_self_, v2);
  return sub_100005468(a1);
}

void sub_100005E94(id a1)
{
  int v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;

  v1 = *__error();
  if (sub_1000BF0BC())
  {
    v9 = 0;
    v2 = sub_1000BF044();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      v4 = 3;
    else
      v4 = 2;
    *(_DWORD *)buf = 68157954;
    v11 = 51;
    v12 = 2080;
    v13 = "-[DIIOCacheDelete setupSigtermHandler]_block_invoke";
    LODWORD(v8) = 18;
    v5 = (char *)_os_log_send_and_compose_impl(v4, &v9, 0, 0, &_mh_execute_header, v3, 16, "%.*s: Terminating cache delete instance due to SIGTERM", (int)buf, v8);

    if (v5)
    {
      fprintf(__stderrp, "%s\n", v5);
      free(v5);
    }
  }
  else
  {
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      v11 = 51;
      v12 = 2080;
      v13 = "-[DIIOCacheDelete setupSigtermHandler]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%.*s: Terminating cache delete instance due to SIGTERM", buf, 0x12u);
    }

  }
  *__error() = v1;
  exit(0);
}

void sub_10000612C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100006148(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  id v13;
  uint64_t v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;

  v13 = a2;
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_sync_enter(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "exitTimer"));

  if (v4)
  {
    v5 = *__error();
    if (sub_1000BF0BC())
    {
      v14 = 0;
      v6 = sub_1000BF044();
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        v8 = 3;
      else
        v8 = 2;
      *(_DWORD *)buf = 68157954;
      v16 = 47;
      v17 = 2080;
      v18 = "-[DIIOCacheDelete setupExitTimer:]_block_invoke";
      LODWORD(v12) = 18;
      v9 = (char *)_os_log_send_and_compose_impl(v8, &v14, 0, 0, &_mh_execute_header, v7, 0, "%.*s: Shutting down cache delete instance", (int)buf, v12);

      if (v9)
      {
        fprintf(__stderrp, "%s\n", v9);
        free(v9);
      }
    }
    else
    {
      v10 = sub_1000BF044();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68157954;
        v16 = 47;
        v17 = 2080;
        v18 = "-[DIIOCacheDelete setupExitTimer:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%.*s: Shutting down cache delete instance", buf, 0x12u);
      }

    }
    *__error() = v5;
    exit(0);
  }
  objc_sync_exit(v3);

}

void sub_10000632C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

BOOL sub_100006FD8(id a1, NSURL *a2, NSError *a3)
{
  NSURL *v4;
  NSError *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  NSURL *v21;
  __int16 v22;
  NSError *v23;

  v4 = a2;
  v5 = a3;
  v6 = *__error();
  if (sub_1000BF0BC())
  {
    v15 = 0;
    v7 = sub_1000BF044();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    *(_DWORD *)buf = 68158466;
    v17 = 50;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      v9 = 3;
    else
      v9 = 2;
    v18 = 2080;
    v19 = "-[DIIOCacheDelete eraseOldCacheFiles]_block_invoke";
    v20 = 2114;
    v21 = v4;
    v22 = 2114;
    v23 = v5;
    v14 = 38;
    v10 = (char *)_os_log_send_and_compose_impl(v9, &v15, 0, 0, &_mh_execute_header, v8, 16, "%.*s: Failed looking up %{public}@: %{public}@", buf, v14);

    if (v10)
    {
      fprintf(__stderrp, "%s\n", v10);
      free(v10);
    }
  }
  else
  {
    v11 = sub_1000BF044();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68158466;
      v17 = 50;
      v18 = 2080;
      v19 = "-[DIIOCacheDelete eraseOldCacheFiles]_block_invoke";
      v20 = 2114;
      v21 = v4;
      v22 = 2114;
      v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%.*s: Failed looking up %{public}@: %{public}@", buf, 0x26u);
    }

  }
  *__error() = v6;

  return 1;
}

void sub_1000078AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100007904(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;

  v5 = objc_loadWeakRetained((id *)(a1 + 32));
  objc_sync_enter(v5);
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "onPeriodicWithInfo:urgency:", v6, a2));

  objc_sync_exit(v5);
  return v7;
}

void sub_100007978(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100007BA4(void *a1)
{
  id v1;
  DIIOCacheDelete *v2;
  void *v3;

  v1 = a1;
  v2 = -[DIIOCacheDelete initWithDebugServiceName:]([DIIOCacheDelete alloc], "initWithDebugServiceName:", v1);

  -[DIBaseServiceDelegate enterSandbox](v2, "enterSandbox");
  if (-[DIIOCacheDelete registerPeriodicCallback](v2, "registerPeriodicCallback"))
  {
    -[DIBaseServiceDelegate startXPClistener](v2, "startXPClistener");
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](NSRunLoop, "currentRunLoop"));
    objc_msgSend(v3, "run");

  }
  return 78;
}

uint64_t start()
{
  int v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  unsigned __int8 v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uid_t v22;
  pid_t v23;
  char *v24;
  int v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __CFString *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uid_t v35;
  pid_t v36;
  DIIODaemonDelegate *v37;
  DIIODaemonDelegate *v38;
  void *v39;
  int v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  NSObject *v46;
  const char *v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v59;
  const char *v60;
  int v61;
  uint64_t v62;
  uint8_t buf[4];
  int v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  _BYTE v68[10];
  __int16 v69;
  _BOOL4 v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;

  v0 = *__error();
  if (sub_1000BF0BC())
  {
    v62 = 0;
    v1 = sub_1000BF044();
    v2 = objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v3 = 3;
    else
      v3 = 2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "executablePath"));
    *(_DWORD *)buf = 68158210;
    v64 = 28;
    v65 = 2080;
    v66 = "int main(int, const char **)";
    v67 = 2114;
    *(_QWORD *)v68 = v5;
    v6 = (char *)_os_log_send_and_compose_impl(v3, &v62, 0, 0, &_mh_execute_header, v2, 0, "%.*s: IO daemon path: %{public}@", buf, 28);

    if (v6)
    {
      fprintf(__stderrp, "%s\n", v6);
      free(v6);
    }
  }
  else
  {
    v7 = sub_1000BF044();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "executablePath"));
      *(_DWORD *)buf = 68158210;
      v64 = 28;
      v65 = 2080;
      v66 = "int main(int, const char **)";
      v67 = 2114;
      *(_QWORD *)v68 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%.*s: IO daemon path: %{public}@", buf, 0x1Cu);

    }
  }
  *__error() = v0;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "arguments"));

  v13 = objc_msgSend(v12, "count");
  if ((unint64_t)v13 >= 2)
  {
    if ((unint64_t)objc_msgSend(v12, "count") > 2
      || (v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", 1)),
          v15 = objc_msgSend(v14, "isEqualToString:", CFSTR("--ram")),
          v14,
          (v15 & 1) == 0))
    {
      v25 = *__error();
      if (sub_1000BF0BC())
      {
        v62 = 0;
        v26 = sub_1000BF044();
        v27 = objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          v28 = 3;
        else
          v28 = 2;
        *(_DWORD *)buf = 68157954;
        v64 = 28;
        v65 = 2080;
        v66 = "int main(int, const char **)";
        LODWORD(v60) = 18;
        v29 = _os_log_send_and_compose_impl(v28, &v62, 0, 0, &_mh_execute_header, v27, 16, "%.*s: Invalid arguments specified", buf, v60);
LABEL_25:
        v30 = (char *)v29;

        if (v30)
        {
          fprintf(__stderrp, "%s\n", v30);
          free(v30);
        }
        goto LABEL_46;
      }
      v45 = sub_1000BF044();
      v46 = objc_claimAutoreleasedReturnValue(v45);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        v64 = 28;
        v65 = 2080;
        v66 = "int main(int, const char **)";
        v47 = "%.*s: Invalid arguments specified";
LABEL_44:
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, v47, buf, 0x12u);
      }
LABEL_45:

LABEL_46:
      *__error() = v25;
      v32 = 1;
      goto LABEL_67;
    }
  }
  if (!getenv("LaunchInstanceID"))
  {
    if (getuid())
    {
      if ((unint64_t)v13 <= 1)
        v31 = CFSTR("com.apple.diskimagesiod");
      else
        v31 = CFSTR("com.apple.diskimagesiod.ram");
      sub_100007BA4(v31);
      v32 = 78;
      goto LABEL_67;
    }
    v25 = *__error();
    if (sub_1000BF0BC())
    {
      v62 = 0;
      v54 = sub_1000BF044();
      v27 = objc_claimAutoreleasedReturnValue(v54);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        v55 = 3;
      else
        v55 = 2;
      *(_DWORD *)buf = 68157954;
      v64 = 28;
      v65 = 2080;
      v66 = "int main(int, const char **)";
      LODWORD(v60) = 18;
      v29 = _os_log_send_and_compose_impl(v55, &v62, 0, 0, &_mh_execute_header, v27, 16, "%.*s: Root daemon must be launched with an instance", buf, v60);
      goto LABEL_25;
    }
    v59 = sub_1000BF044();
    v46 = objc_claimAutoreleasedReturnValue(v59);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      v64 = 28;
      v65 = 2080;
      v66 = "int main(int, const char **)";
      v47 = "%.*s: Root daemon must be launched with an instance";
      goto LABEL_44;
    }
    goto LABEL_45;
  }
  v16 = getiopolicy_np(0, 0);
  v17 = getiopolicy_np(0, 1);
  v18 = *__error();
  if (sub_1000BF0BC())
  {
    v62 = 0;
    v19 = sub_1000BF044();
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      v21 = 3;
    else
      v21 = 2;
    v22 = geteuid();
    v23 = getpid();
    *(_DWORD *)buf = 68159234;
    v64 = 28;
    v65 = 2080;
    v66 = "int main(int, const char **)";
    v67 = 1024;
    *(_DWORD *)v68 = v22;
    *(_WORD *)&v68[4] = 1024;
    *(_DWORD *)&v68[6] = v23;
    v69 = 1024;
    v70 = (unint64_t)v13 > 1;
    v71 = 1024;
    v72 = v16;
    v73 = 1024;
    v74 = v17;
    LODWORD(v60) = 48;
    v24 = (char *)_os_log_send_and_compose_impl(v21, &v62, 0, 0, &_mh_execute_header, v20, 0, "%.*s: IO daemon euid: %d, pid: %d, isRAM: %d, IOpolicy process=%d thread=%d", (int)buf, v60, v61);

    if (v24)
    {
      fprintf(__stderrp, "%s\n", v24);
      free(v24);
    }
  }
  else
  {
    v33 = sub_1000BF044();
    v34 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      v35 = geteuid();
      v36 = getpid();
      *(_DWORD *)buf = 68159234;
      v64 = 28;
      v65 = 2080;
      v66 = "int main(int, const char **)";
      v67 = 1024;
      *(_DWORD *)v68 = v35;
      *(_WORD *)&v68[4] = 1024;
      *(_DWORD *)&v68[6] = v36;
      v69 = 1024;
      v70 = (unint64_t)v13 > 1;
      v71 = 1024;
      v72 = v16;
      v73 = 1024;
      v74 = v17;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%.*s: IO daemon euid: %d, pid: %d, isRAM: %d, IOpolicy process=%d thread=%d", buf, 0x30u);
    }

  }
  *__error() = v18;
  v37 = -[DIIODaemonDelegate initWithIsRAM:]([DIIODaemonDelegate alloc], "initWithIsRAM:", (unint64_t)v13 > 1);
  v38 = v37;
  if (v37)
  {
    -[DIBaseServiceDelegate enterSandbox](v37, "enterSandbox");
    -[DIBaseServiceDelegate startXPClistener](v38, "startXPClistener");
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](NSRunLoop, "currentRunLoop"));
    objc_msgSend(v39, "run");

    v40 = *__error();
    if (sub_1000BF0BC())
    {
      v62 = 0;
      v41 = sub_1000BF044();
      v42 = objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        v43 = 3;
      else
        v43 = 2;
      *(_DWORD *)buf = 68157954;
      v64 = 28;
      v65 = 2080;
      v66 = "int main(int, const char **)";
      LODWORD(v60) = 18;
      v44 = (char *)_os_log_send_and_compose_impl(v43, &v62, 0, 0, &_mh_execute_header, v42, 16, "%.*s: Run loop aborted", (int)buf, v60);

      if (v44)
      {
        fprintf(__stderrp, "%s\n", v44);
        free(v44);
      }
    }
    else
    {
      v52 = sub_1000BF044();
      v53 = objc_claimAutoreleasedReturnValue(v52);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        v64 = 28;
        v65 = 2080;
        v66 = "int main(int, const char **)";
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "%.*s: Run loop aborted", buf, 0x12u);
      }

    }
    v32 = 0;
  }
  else
  {
    v40 = *__error();
    if (sub_1000BF0BC())
    {
      v62 = 0;
      v48 = sub_1000BF044();
      v49 = objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
        v50 = 3;
      else
        v50 = 2;
      *(_DWORD *)buf = 68157954;
      v64 = 28;
      v65 = 2080;
      v66 = "int main(int, const char **)";
      LODWORD(v60) = 18;
      v51 = (char *)_os_log_send_and_compose_impl(v50, &v62, 0, 0, &_mh_execute_header, v49, 16, "%.*s: IO daemon initialization failed. Quitting.", (int)buf, v60);

      if (v51)
      {
        fprintf(__stderrp, "%s\n", v51);
        free(v51);
      }
    }
    else
    {
      v56 = sub_1000BF044();
      v57 = objc_claimAutoreleasedReturnValue(v56);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        v64 = 28;
        v65 = 2080;
        v66 = "int main(int, const char **)";
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "%.*s: IO daemon initialization failed. Quitting.", buf, 0x12u);
      }

    }
    v32 = 1;
  }
  *__error() = v40;

LABEL_67:
  return v32;
}

void sub_100008FAC(uint64_t a1, uint64_t a2)
{
  DIIOObject *v3;
  DIIOObject *v4;
  DIIOObject *v5;
  id v6;
  DIIOObject *v7;
  DIIOObject *v8;
  DIIOIterator *v9;

  v9 = -[DIIOIterator initWithIOIterator:retain:]([DIIOIterator alloc], "initWithIOIterator:retain:", a2, 1);
  v3 = -[DIIOObject initWithIteratorNext:]([DIIOObject alloc], "initWithIteratorNext:", v9);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    do
    {
      v6 = -[DIIOObject newIteratorWithOptions:error:](v4, "newIteratorWithOptions:error:", 3, 0);
      if (v6)
      {
        while (1)
        {
          v7 = v5;
          v5 = -[DIIOObject initWithIteratorNext:]([DIIOObject alloc], "initWithIteratorNext:", v6);

          if (!v5 || IOObjectConformsTo(-[DIIOObject ioObj](v5, "ioObj"), "IOMedia"))
            break;
          if (IOObjectIsEqualTo(-[DIIOObject ioObj](v5, "ioObj"), *(_DWORD *)(a1 + 8)))
          {
            **(_BYTE **)a1 = 1;

            goto LABEL_9;
          }
        }
      }

      v8 = -[DIIOObject initWithIteratorNext:]([DIIOObject alloc], "initWithIteratorNext:", v9);
      v4 = v8;
    }
    while (v8);
LABEL_9:

  }
}

void sub_100009BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location,id a26)
{
  id *v26;
  id *v27;
  id *v28;
  id *v29;
  void *v30;

  objc_sync_exit(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a26);
  _Unwind_Resume(a1);
}

void sub_100009C18(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  id WeakRetained;
  void *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;

  v2 = *__error();
  if (sub_1000BF0BC())
  {
    v13 = 0;
    v3 = sub_1000BF044();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      v5 = 3;
    else
      v5 = 2;
    *(_DWORD *)buf = 68157954;
    v15 = 54;
    v16 = 2080;
    v17 = "-[DIIOClientDelegate setupNewConnection:]_block_invoke";
    LODWORD(v12) = 18;
    v6 = (char *)_os_log_send_and_compose_impl(v5, &v13, 0, 0, &_mh_execute_header, v4, 0, "%.*s: Reached an invalidation handler for an attached client", (int)buf, v12);

    if (v6)
    {
      fprintf(__stderrp, "%s\n", v6);
      free(v6);
    }
  }
  else
  {
    v7 = sub_1000BF044();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      v15 = 54;
      v16 = 2080;
      v17 = "-[DIIOClientDelegate setupNewConnection:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%.*s: Reached an invalidation handler for an attached client", buf, 0x12u);
    }

  }
  *__error() = v2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "weakDaemon"));
  v11 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v10, "onClientInvalidateWithConnection:", v11);

}

void sub_100009DE4(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  id WeakRetained;
  void *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;

  v2 = *__error();
  if (sub_1000BF0BC())
  {
    v13 = 0;
    v3 = sub_1000BF044();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      v5 = 3;
    else
      v5 = 2;
    *(_DWORD *)buf = 68157954;
    v15 = 54;
    v16 = 2080;
    v17 = "-[DIIOClientDelegate setupNewConnection:]_block_invoke";
    LODWORD(v12) = 18;
    v6 = (char *)_os_log_send_and_compose_impl(v5, &v13, 0, 0, &_mh_execute_header, v4, 0, "%.*s: Reached an interruption handler for an attached client", (int)buf, v12);

    if (v6)
    {
      fprintf(__stderrp, "%s\n", v6);
      free(v6);
    }
  }
  else
  {
    v7 = sub_1000BF044();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      v15 = 54;
      v16 = 2080;
      v17 = "-[DIIOClientDelegate setupNewConnection:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%.*s: Reached an interruption handler for an attached client", buf, 0x12u);
    }

  }
  *__error() = v2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "weakDaemon"));
  v11 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v10, "onClientInvalidateWithConnection:", v11);

}

void sub_10000A180(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10000A1F4(id a1)
{
  int v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;

  v1 = *__error();
  if (sub_1000BF0BC())
  {
    v10 = 0;
    v2 = sub_1000BF044();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      v4 = 3;
    else
      v4 = 2;
    v12 = 58;
    v13 = 2080;
    *(_DWORD *)buf = 68158210;
    v14 = "-[DIIODaemonDelegate setupExitDaemonWatchdog]_block_invoke";
    v15 = 1024;
    v16 = 8;
    LODWORD(v8) = 24;
    v5 = (char *)_os_log_send_and_compose_impl(v4, &v10, 0, 0, &_mh_execute_header, v3, 16, "%.*s: Exit daemon timeout (%d sec) expired", (int)buf, v8, v9);

    if (v5)
    {
      fprintf(__stderrp, "%s\n", v5);
      free(v5);
    }
  }
  else
  {
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68158210;
      v12 = 58;
      v13 = 2080;
      v14 = "-[DIIODaemonDelegate setupExitDaemonWatchdog]_block_invoke";
      v15 = 1024;
      v16 = 8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%.*s: Exit daemon timeout (%d sec) expired", buf, 0x18u);
    }

  }
  *__error() = v1;
  exit(0);
}

id sub_10000A41C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v10;
  uint64_t v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;

  v2 = *__error();
  if (sub_1000BF0BC())
  {
    v11 = 0;
    v3 = sub_1000BF044();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      v5 = 3;
    else
      v5 = 2;
    *(_DWORD *)buf = 68157954;
    v13 = 54;
    v14 = 2080;
    v15 = "-[DIIODaemonDelegate setupSigtermHandler]_block_invoke";
    LODWORD(v10) = 18;
    v6 = (char *)_os_log_send_and_compose_impl(v5, &v11, 0, 0, &_mh_execute_header, v4, 0, "%.*s: Terminating due to SIGTERM", (int)buf, v10);

    if (v6)
    {
      fprintf(__stderrp, "%s\n", v6);
      free(v6);
    }
  }
  else
  {
    v7 = sub_1000BF044();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      v13 = 54;
      v14 = 2080;
      v15 = "-[DIIODaemonDelegate setupSigtermHandler]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%.*s: Terminating due to SIGTERM", buf, 0x12u);
    }

  }
  *__error() = v2;
  return objc_msgSend(*(id *)(a1 + 32), "exitWithUnmount");
}

void sub_10000A7CC(void *a1, uint64_t a2)
{
  id v3;
  DIIOIterator *v4;
  DIIOObject *v5;
  DIIOObject *v6;
  id v7;
  void *v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL4 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;

  v3 = a1;
  objc_sync_enter(v3);
  v4 = -[DIIOIterator initWithIOIterator:retain:]([DIIOIterator alloc], "initWithIOIterator:retain:", a2, 1);
  v5 = 0;
  while (1)
  {
    v6 = -[DIIOObject initWithIteratorNext:]([DIIOObject alloc], "initWithIteratorNext:", v4);

    if (!v6)
      break;
    v7 = -[DIIOObject registryEntryIDWithError:](v6, "registryEntryIDWithError:", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "deviceHandle"));
    LODWORD(v7) = v7 == objc_msgSend(v8, "regEntryID");

    v5 = v6;
    if ((_DWORD)v7)
    {
      v9 = *__error();
      if (sub_1000BF0BC())
      {
        v18 = 0;
        v10 = sub_1000BF044();
        v11 = objc_claimAutoreleasedReturnValue(v10);
        v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        *(_DWORD *)buf = 68157954;
        if (v12)
          v13 = 3;
        else
          v13 = 2;
        v20 = 47;
        v21 = 2080;
        v22 = "void terminationCallback(void *, io_iterator_t)";
        LODWORD(v17) = 18;
        v14 = (char *)_os_log_send_and_compose_impl(v13, &v18, 0, 0, &_mh_execute_header, v11, 0, "%.*s: Reached termination callback, stopping the daemon.", (int)buf, v17);

        if (v14)
        {
          fprintf(__stderrp, "%s\n", v14);
          free(v14);
        }
      }
      else
      {
        v15 = sub_1000BF044();
        v16 = objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68157954;
          v20 = 47;
          v21 = 2080;
          v22 = "void terminationCallback(void *, io_iterator_t)";
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%.*s: Reached termination callback, stopping the daemon.", buf, 0x12u);
        }

      }
      *__error() = v9;

      v5 = 0;
      objc_msgSend(v3, "exitDaemon");
    }
  }

  objc_sync_exit(v3);
}

void sub_10000AA24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_10000B05C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_10000BAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_10000C0B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

intptr_t sub_10000C0F4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "unmountAll");
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

#error "10000C850: call analysis failed (funcsize=111)"

void sub_10000CFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,uint8_t buf,int a22,__int16 a23,uint64_t a24,__int16 a25,uint64_t a26,__int16 a27,int a28)
{
  void *v28;
  void *v29;
  id *v30;
  void *v31;

  objc_destroyWeak(v30);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_10000D340(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "runIOmanager");

}

void sub_10000D374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10000D410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10000D75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  void *v20;
  void *v21;

  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_10000D7CC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = WeakRetained;
    objc_sync_enter(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "deviceHandle"));

    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[DIError errorWithEnumValue:verboseInfo:](DIError, "errorWithEnumValue:verboseInfo:", 155, CFSTR("A second controller XPC service attempted to create a new device")));
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      objc_sync_exit(v4);

    }
    else
    {
      v7 = *(_QWORD *)(a1 + 32);
      v12 = 0;
      v8 = objc_msgSend(v4, "tryAttachWithParams:error:", v7, &v12);
      v9 = v12;
      v10 = *(_QWORD *)(a1 + 40);
      if (v8)
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "deviceHandle"));
        (*(void (**)(uint64_t, void *, _QWORD))(v10 + 16))(v10, v11, 0);

      }
      else
      {
        (*(void (**)(_QWORD, _QWORD, id))(v10 + 16))(*(_QWORD *)(a1 + 40), 0, v9);
        objc_msgSend(v4, "exitDaemon");
      }
      objc_sync_exit(v4);

    }
  }

}

void sub_10000D91C(_Unwind_Exception *a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v8;
  void *v9;

  if (a2 == 1)
  {
    v8 = objc_begin_catch(a1);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "reason"));
    objc_claimAutoreleasedReturnValue(+[DIError errorWithEnumValue:verboseInfo:](DIError, "errorWithEnumValue:verboseInfo:", 150, v9));

    (*(void (**)(void))(*(_QWORD *)(v4 + 40) + 16))();
    objc_msgSend(v2, "exitDaemon");

    objc_end_catch();
    JUMPOUT(0x10000D8ECLL);
  }
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_10000E1BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v3);

  _Unwind_Resume(a1);
}

void sub_10000EA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,id a25)
{
  void *v25;
  void *v26;
  void *v27;

  objc_sync_exit(v27);

  _Unwind_Resume(a1);
}

void sub_10000EB2C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  id WeakRetained;
  id v10;
  const char *v11;
  uint64_t v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;

  v2 = *__error();
  if (sub_1000BF0BC())
  {
    v12 = 0;
    v3 = sub_1000BF044();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      v5 = 3;
    else
      v5 = 2;
    *(_DWORD *)buf = 68157954;
    v14 = 54;
    v15 = 2080;
    v16 = "-[DIIODaemonDelegate setupNewConnection:]_block_invoke";
    LODWORD(v11) = 18;
    v6 = (char *)_os_log_send_and_compose_impl(v5, &v12, 0, 0, &_mh_execute_header, v4, 16, "%.*s: Reached an interruption handler for an attached controller service", (int)buf, v11);

    if (v6)
    {
      fprintf(__stderrp, "%s\n", v6);
      free(v6);
    }
  }
  else
  {
    v7 = sub_1000BF044();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      v14 = 54;
      v15 = 2080;
      v16 = "-[DIIODaemonDelegate setupNewConnection:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%.*s: Reached an interruption handler for an attached controller service", buf, 0x12u);
    }

  }
  *__error() = v2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v10 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "onClientInvalidateWithConnection:", v10);

}

void sub_10000ECE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v1;

  _Unwind_Resume(a1);
}

void sub_10000ED08(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  id WeakRetained;
  id v10;
  const char *v11;
  uint64_t v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;

  v2 = *__error();
  if (sub_1000BF0BC())
  {
    v12 = 0;
    v3 = sub_1000BF044();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      v5 = 3;
    else
      v5 = 2;
    *(_DWORD *)buf = 68157954;
    v14 = 54;
    v15 = 2080;
    v16 = "-[DIIODaemonDelegate setupNewConnection:]_block_invoke";
    LODWORD(v11) = 18;
    v6 = (char *)_os_log_send_and_compose_impl(v5, &v12, 0, 0, &_mh_execute_header, v4, 0, "%.*s: Reached an invalidation handler for an attached controller service", (int)buf, v11);

    if (v6)
    {
      fprintf(__stderrp, "%s\n", v6);
      free(v6);
    }
  }
  else
  {
    v7 = sub_1000BF044();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      v14 = 54;
      v15 = 2080;
      v16 = "-[DIIODaemonDelegate setupNewConnection:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%.*s: Reached an invalidation handler for an attached controller service", buf, 0x12u);
    }

  }
  *__error() = v2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v10 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "onClientInvalidateWithConnection:", v10);

}

void sub_10000EEC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v1;

  _Unwind_Resume(a1);
}

void sub_10000F090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_10000F260(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

void sub_10000F2B8()
{
  JUMPOUT(0x10000F2A4);
}

void sub_10000F2C0()
{
  JUMPOUT(0x10000F2A8);
}

_QWORD *sub_10000F4B8(const void **a1)
{
  const void *v1;
  _QWORD *result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *exception;
  void *v7;

  v1 = *a1;
  if (*a1
  {
    v3 = result;
    v5 = result[2];
    v4 = result[3];
    if (v5 != v4)
    {
      while (1)
      {
        if (result)
          break;
        v5 += 48;
        if (v5 == v4)
          goto LABEL_13;
      }
    }
    if (v5 != v4)
    {
      {
        sub_10000F634();
      }
      __cxa_bad_cast();
    }
LABEL_13:
    if (v4 != v3[3])
    {
      exception = __cxa_allocate_exception(0x40uLL);
      v7 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Unsupported UDIF with SLA found", 0x2Du);
    }
  }
  else
  {
    if (result)
      sub_10000F634();
  }
  return result;
}

void sub_10000F634()
{
  sub_1000F6768();
}

void sub_10000F8A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  sub_1000120BC((uint64_t)va2);
  sub_1000120BC((uint64_t)va);
  sub_1000120BC((uint64_t)va1);
  sub_1000120EC(v2 - 112);
  _Unwind_Resume(a1);
}

void sub_10000F8F4(uint64_t a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  unint64_t v13;
  void *v14;
  void *exception;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a3;
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  byte_1001A0568 = 1;
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "diskImageParamsXPC"));
  v7 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;

  v8 = *(void **)(a1 + 40);
  v9 = objc_msgSend(v5, "onDiskCache");
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "shadowChain"));
  v11 = objc_msgSend(v10, "shouldValidate");
  if (v8)
    objc_msgSend(v8, "createDiskImageWithCache:shadowValidation:", v9, v11);
  else
    v17 = 0;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "inputStatFS"));
    if (v12)
    {
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "inputStatFS"));
      LODWORD(v13) = v13 > (unint64_t)objc_msgSend(v14, "blockSize");

      if ((_DWORD)v13)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        sub_100005920((uint64_t)&v18);
        sub_100005A0C(&v18, (uint64_t)"The underlying file system doesn't support writable images with ", 64);
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
        std::ostream::operator<<(&v18, v16);
        sub_100005A0C(&v18, (uint64_t)"-bytes block size", 17);
        sub_100012294((uint64_t)exception, (uint64_t)&v18, 0x13u);
      }
    }
  }
  sub_10000F4B8((const void **)&v17);
  sub_10000FEB8((io_service_t *)a1);
  sub_1000100AC(a1, v5, v17);
}

void sub_10000FCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  uint64_t v5;
  void ***v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v11;
  va_list va;

  va_start(va, a4);
  sub_10000FE34((uint64_t)va);
  if (a4)
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
  sub_100017CC8(v8);
  sub_100017D6C((void ***)va);

  if (*(_BYTE *)(v5 + 32))
    sub_1000054CC(v7);
  sub_100017DF8(v6, 0);
  v11 = *v9;
  *v9 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);

  _Unwind_Resume(a1);
}

uint64_t sub_10000FE34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a1 + 8;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf(v3);
  std::ios::~ios(a1 + 112);
  return a1;
}

uint64_t sub_10000FEB8(io_service_t *a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  void *exception;
  void *v11;
  const char *v12;
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;

  result = IOServiceOpen(*a1, mach_task_self_, 0, a1 + 1);
  if ((_DWORD)result)
  {
    v2 = result;
    v3 = *__error();
    if (sub_1000BF0BC())
    {
      v14 = 0;
      v4 = sub_1000BF044();
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        v6 = 3;
      else
        v6 = 2;
      *(_DWORD *)buf = 68158210;
      v16 = 31;
      v17 = 2080;
      v18 = "void DIIOManager::setupDriver()";
      v19 = 1024;
      v20 = v2;
      LODWORD(v12) = 24;
      v7 = (char *)_os_log_send_and_compose_impl(v6, &v14, 0, 0, &_mh_execute_header, v5, 16, "%.*s: IOServiceOpen returned %d", (int)buf, v12, v13);

      if (v7)
      {
        fprintf(__stderrp, "%s\n", v7);
        free(v7);
      }
    }
    else
    {
      v8 = sub_1000BF044();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68158210;
        v16 = 31;
        v17 = 2080;
        v18 = "void DIIOManager::setupDriver()";
        v19 = 1024;
        v20 = v2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%.*s: IOServiceOpen returned %d", buf, 0x18u);
      }

    }
    *__error() = v3;
    exception = __cxa_allocate_exception(0x40uLL);
    v11 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"IOServiceOpen failed", 0x9Bu);
  }
  return result;
}

void sub_1000100AC(uint64_t a1, void *a2, uint64_t a3)
{
  int v5;
  unsigned __int16 v6;
  uint64_t (**v7)();
  unint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  _QWORD *exception;
  const std::error_category *v21;
  const char *v22;
  int v23;
  uint64_t input;
  uint64_t output;
  uint32_t outputCnt;
  uint8_t buf[8];
  _BYTE inputStruct[24];

  a2;
  sub_1000EB974(a3);
  v5 = sub_1000EB9CC(a3);
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a3 + 72))(inputStruct, a3);
  v6 = *(_WORD *)&inputStruct[8];
  v7 = sub_1000388D4();
  v8 = (unint64_t)v7[3];
  v9 = sub_100038800();
  if (!v9)
  {
    v10 = *((_DWORD *)v7 + 2);
    if (v10 == 1)
    {
      v9 = (*v7)();
    }
    else
    {
      if (v10)
        sub_100018028();
      v9 = *(_DWORD *)v7;
    }
  }
  v11 = v8 / (v5 + v5 * v6);
  if (v9 < v11)
    LODWORD(v11) = v9;
  if (v11 >= 0x30)
    LODWORD(v11) = 48;
  if (v11 <= 1)
    v11 = 1;
  else
    v11 = v11;
  outputCnt = 1;
  input = v11;
  output = 0;
  v12 = IOConnectCallMethod(*(_DWORD *)(a1 + 4), 2u, &input, 1u, 0, 0, &output, &outputCnt, 0, 0);
  if (!v12)
  {
    sub_100011B5C(a1, (unsigned __int16)output, (uint64_t *)inputStruct);
    sub_100018060((void **)(a1 + 48));
    *(_OWORD *)(a1 + 48) = *(_OWORD *)inputStruct;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)&inputStruct[16];
    memset(inputStruct, 0, sizeof(inputStruct));
    *(_QWORD *)buf = inputStruct;
    sub_100017D6C((void ***)buf);
    operator new();
  }
  v13 = *__error();
  if (sub_1000BF0BC())
  {
    *(_QWORD *)buf = 0;
    v14 = sub_1000BF044();
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      v16 = 3;
    else
      v16 = 2;
    *(_QWORD *)inputStruct = 0x4C04100302;
    *(_WORD *)&inputStruct[8] = 2080;
    *(_QWORD *)&inputStruct[10] = "void DIIOManager::driverConnect(DIAttachParams *__strong, const DiskImage &)";
    *(_WORD *)&inputStruct[18] = 1024;
    *(_DWORD *)&inputStruct[20] = v12;
    LODWORD(v22) = 24;
    v17 = (char *)_os_log_send_and_compose_impl(v16, buf, 0, 0, &_mh_execute_header, v15, 16, "%.*s: IOAllocatePortsArrayCallMethod returned %d", (int)inputStruct, v22, v23);

    if (v17)
    {
      fprintf(__stderrp, "%s\n", v17);
      free(v17);
    }
  }
  else
  {
    v18 = sub_1000BF044();
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_QWORD *)inputStruct = 0x4C04100302;
      *(_WORD *)&inputStruct[8] = 2080;
      *(_QWORD *)&inputStruct[10] = "void DIIOManager::driverConnect(DIAttachParams *__strong, const DiskImage &)";
      *(_WORD *)&inputStruct[18] = 1024;
      *(_DWORD *)&inputStruct[20] = v12;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%.*s: IOAllocatePortsArrayCallMethod returned %d", inputStruct, 0x18u);
    }

  }
  *__error() = v13;
  exception = __cxa_allocate_exception(0x40uLL);
  *exception = &off_1001924F8;
  v21 = std::generic_category();
  exception[1] = v12;
  exception[2] = v21;
  *((_BYTE *)exception + 24) = 0;
  *((_BYTE *)exception + 48) = 0;
  exception[7] = "Can't allocate ports array in driver";
}

void sub_100010F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_10000FE34((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_100010F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  va_list va;

  va_start(va, a10);
  sub_10000FE34((uint64_t)va);
  __cxa_free_exception(v10);

  JUMPOUT(0x1000111F0);
}

void sub_100010F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  JUMPOUT(0x1000111F0);
}

void sub_100010FB8()
{
  operator delete();
}

void sub_100010FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  JUMPOUT(0x1000111F0);
}

void sub_10001119C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  __cxa_end_catch();

  JUMPOUT(0x1000111F0);
}

void sub_1000111B4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1000054BC(a1);
  _Unwind_Resume(a1);
}

void sub_1000111F8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *i;
  void *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  void *v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  void *lpsrc;
  std::__shared_weak_count *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  _BYTE v59[128];

  v56 = 0;
  v57 = 0;
  v58 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "backendXPC"));
  v5 = v4;
  if (v4)
    objc_msgSend(v4, "backend");
  else
    v53 = 0uLL;
  sub_10011E808((uint64_t)&v53, &lpsrc);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  if (lpsrc
  {
    *(_QWORD *)&v53 = v9;
    *((_QWORD *)&v53 + 1) = v55;
    if (v55)
    {
      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    sub_1000117A4(&v56, &v53);
  }
  else
  {
    v53 = 0uLL;
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v53 = 0uLL;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "shadowChain"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "nodes"));

  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v49, v59, 16);
  if (v17)
  {
    v18 = *(_QWORD *)v50;
    do
    {
      for (i = 0; i != v17; i = (char *)i + 1)
      {
        if (*(_QWORD *)v50 != v18)
          objc_enumerationMutation(v16);
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v49 + 1) + 8 * (_QWORD)i), "fileBackend"));
        v21 = v20;
        if (v20)
          objc_msgSend(v20, "backend");
        else
          v46 = 0uLL;
        sub_10011E808((uint64_t)&v46, &v47);
        v22 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
        if (*((_QWORD *)&v46 + 1))
        {
          v23 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }

        if (v47
        {
          *(_QWORD *)&v46 = v25;
          *((_QWORD *)&v46 + 1) = v48;
          if (v48)
          {
            v26 = (unint64_t *)&v48->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }
          sub_1000117A4(&v56, &v46);
        }
        else
        {
          v46 = 0uLL;
        }
        v28 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
        if (*((_QWORD *)&v46 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v31 = v48;
        if (v48)
        {
          v32 = (unint64_t *)&v48->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
      }
      v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v49, v59, 16);
    }
    while (v17);
  }

  v43 = 0uLL;
  v44 = 0;
  sub_100017ED8((char *)&v43, v56, v57, (v57 - v56) >> 4);
  v34 = a1 + 112;
  v45 = v34;
  *(_QWORD *)(a2 + 24) = 0;
  v35 = (char *)operator new(0x28uLL);
  *(_QWORD *)v35 = off_10016F370;
  *(_OWORD *)(v35 + 8) = v43;
  v36 = v44;
  v43 = 0uLL;
  v44 = 0;
  *((_QWORD *)v35 + 3) = v36;
  *((_QWORD *)v35 + 4) = v34;
  *(_QWORD *)(a2 + 24) = v35;
  v47 = &v43;
  sub_100017FB8((void ***)&v47);
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v55;
  if (v55)
  {
    v41 = (unint64_t *)&v55->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  lpsrc = &v56;
  sub_100017FB8((void ***)&lpsrc);
}

void sub_10001163C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,void **a28,uint64_t a29,char a30)
{
  sub_100012168((uint64_t)&a26);
  sub_100012168((uint64_t)&a28);
  a28 = (void **)&a30;
  sub_100017FB8(&a28);
  _Unwind_Resume(a1);
}

void sub_10001170C()
{
  operator new();
}

void sub_10001177C()
{
  operator delete();
}

uint64_t sub_1000117A4(char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_100017E44();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)sub_100017E58(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = sub_100017E8C((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

uint64_t sub_1000118E4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  const char *v13;
  uint64_t v14;
  uint8_t buf[8];
  __int16 v16;
  const char *v17;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;

  v4 = *__error();
  if (sub_1000BF0BC())
  {
    v14 = 0;
    v5 = sub_1000BF044();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v7 = 3;
    else
      v7 = 2;
    *(_DWORD *)buf = 68157954;
    *(_DWORD *)&buf[4] = 27;
    v16 = 2080;
    v17 = "DIIOManager::~DIIOManager()";
    LODWORD(v13) = 18;
    v8 = (char *)_os_log_send_and_compose_impl(v7, &v14, 0, 0, &_mh_execute_header, v6, 0, "%.*s: Closing IO user client", (int)buf, v13);

    if (v8)
    {
      fprintf(__stderrp, "%s\n", v8);
      free(v8);
    }
  }
  else
  {
    v9 = sub_1000BF044();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)&buf[4] = 27;
      v16 = 2080;
      v17 = "DIIOManager::~DIIOManager()";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%.*s: Closing IO user client", buf, 0x12u);
    }

  }
  *__error() = v4;
  IOServiceClose(*(_DWORD *)(a1 + 4));
  if (*(_DWORD *)a1)
  {
    IOObjectRelease(*(_DWORD *)a1);
    *(_DWORD *)a1 = 0;
  }
  sub_100017CC8((uint64_t *)(a1 + 72));
  *(_QWORD *)buf = a1 + 48;
  sub_100017D6C((void ***)buf);

  if (*(_BYTE *)(a1 + 32))
    sub_1000054CC((uint64_t *)(a1 + 24));
  sub_100017DF8((void ***)(a1 + 16), 0);
  v11 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  return a1;
}

void sub_100011B0C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1000054BC(a1);
}

uint64_t *sub_100011B1C(uint64_t *result)
{
  uint64_t *v1;

  if (*((_BYTE *)result + 32))
  {
    v1 = result;
    result = sub_1000054CC(result + 3);
    *((_BYTE *)v1 + 32) = 0;
  }
  return result;
}

uint64_t sub_100011B4C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_100011B5C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_100011C94(a3, a2);
  if (a2)
  {
    v7 = 0;
    do
    {
      sub_1000054B8((uint64_t)&v10, *(_DWORD *)(a1 + 4), v7);
      v8 = a3[1];
      if (v8 >= a3[2])
      {
        v9 = sub_100018450(a3, (uint64_t)&v10);
      }
      else
      {
        sub_100005394(a3[1]);
        *(_QWORD *)v8 = off_10016D4A8;
        *(_DWORD *)(v8 + 8) = v11;
        v11 = 0;
        v9 = v8 + 16;
        a3[1] = v8 + 16;
      }
      a3[1] = v9;
      result = sub_100005D54((uint64_t)&v10);
      ++v7;
    }
    while (a2 != v7);
  }
  return result;
}

void sub_100011C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_100017D6C(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100011C54(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  sub_100017D20(a1, v4);
  sub_100018244(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t sub_100011C94(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      sub_100017E44();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_100017E58(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    sub_1000182D4(a1, v7);
    return sub_100018400((uint64_t)v7);
  }
  return result;
}

void sub_100011D10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100018400((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100011D24(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  kern_return_t v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v15;
  uint64_t v16;
  uint32_t outputCnt;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  uint64_t output[2];

  outputCnt = 2;
  v5 = IOConnectCallScalarMethod(*(_DWORD *)(a1 + 4), 3u, 0, 0, output, &outputCnt);
  if (v5)
  {
    v6 = *__error();
    if (sub_1000BF0BC())
    {
      v16 = 0;
      v7 = sub_1000BF044();
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v9 = 3;
      else
        v9 = 2;
      *(_DWORD *)buf = 68157954;
      v19 = 56;
      v20 = 2080;
      v21 = "BOOL DIIOManager::fetchCacheStat(uint64_t &, uint64_t &)";
      LODWORD(v15) = 18;
      v10 = (char *)_os_log_send_and_compose_impl(v9, &v16, 0, 0, &_mh_execute_header, v8, 0, "%.*s: fetch failed", (int)buf, v15);

      if (v10)
      {
        fprintf(__stderrp, "%s\n", v10);
        free(v10);
      }
    }
    else
    {
      v12 = sub_1000BF044();
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68157954;
        v19 = 56;
        v20 = 2080;
        v21 = "BOOL DIIOManager::fetchCacheStat(uint64_t &, uint64_t &)";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%.*s: fetch failed", buf, 0x12u);
      }

    }
    *__error() = v6;
  }
  else
  {
    v11 = output[1];
    *a2 = output[0];
    *a3 = v11;
  }
  return v5 == 0;
}

BOOL sub_100011EFC(uint64_t a1, void *outputStruct)
{
  kern_return_t v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v11;
  uint64_t v12;
  size_t outputStructCnt;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;

  outputStructCnt = 1924;
  v2 = IOConnectCallStructMethod(*(_DWORD *)(a1 + 4), 4u, 0, 0, outputStruct, &outputStructCnt);
  if (v2)
  {
    v3 = *__error();
    if (sub_1000BF0BC())
    {
      v12 = 0;
      v4 = sub_1000BF044();
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        v6 = 3;
      else
        v6 = 2;
      *(_DWORD *)buf = 68157954;
      v15 = 59;
      v16 = 2080;
      v17 = "BOOL DIIOManager::fetchRequestsStat(DIRequestsStatsArray *)";
      LODWORD(v11) = 18;
      v7 = (char *)_os_log_send_and_compose_impl(v6, &v12, 0, 0, &_mh_execute_header, v5, 0, "%.*s: fetch failed", (int)buf, v11);

      if (v7)
      {
        fprintf(__stderrp, "%s\n", v7);
        free(v7);
      }
    }
    else
    {
      v8 = sub_1000BF044();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68157954;
        v15 = 59;
        v16 = 2080;
        v17 = "BOOL DIIOManager::fetchRequestsStat(DIRequestsStatsArray *)";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%.*s: fetch failed", buf, 0x12u);
      }

    }
    *__error() = v3;
  }
  return v2 == 0;
}

uint64_t sub_1000120BC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 24))
    sub_100012138((const void **)(a1 + 16));
  return sub_100012168(a1);
}

uint64_t sub_1000120EC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 40;
  if (*(_BYTE *)(a1 + 64))
    sub_100012138((const void **)(a1 + 56));
  sub_100012168(v2);
  if (*(_BYTE *)(a1 + 24))
    sub_100012138((const void **)(a1 + 16));
  return sub_100012168(a1);
}

const void **sub_100012138(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t sub_100012168(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_1000121C0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_10001222C((_BYTE *)(a1 + 16), (uint64_t)(a2 + 2));
  *(_QWORD *)(a1 + 32) = a2[4];
  return a1;
}

void sub_100012218(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100012168(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_10001222C(_BYTE *a1, uint64_t a2)
{
  const void *v3;

  *a1 = 0;
  a1[8] = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    *(_QWORD *)a1 = 0;
    v3 = *(const void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if (v3)
      CFRetain(v3);
    a1[8] = 1;
  }
  return a1;
}

void sub_100012278(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 8))
    sub_100012138((const void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100012294(uint64_t a1, uint64_t a2, unsigned int a3)
{
  const std::error_category *v6;
  __int128 v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_1001924F8;
  v6 = std::generic_category();
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v6;
  sub_100005598(a2 + 8, &v8);
  *(_OWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = 1;
  return a1;
}

void sub_10001230C(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_100012320()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

_QWORD *sub_100012348(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  *a1 = off_10016D6F0;
  a1[1] = v4;
  sub_100012568((uint64_t)(a1 + 2), a3);
  return a1;
}

void sub_100012384(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  _Unwind_Resume(exception_object);
}

void sub_1000123A8()
{
  operator new();
}

void sub_1000123FC()
{
  operator delete();
}

_QWORD *sub_100012420(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_10016D6F0;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return a1;
}

void sub_100012494(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_10016D6F0;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  operator delete();
}

uint64_t sub_100012518(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_100012520(uint64_t a1)
{
  uint64_t result;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8));
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t sub_100012568(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1000125CC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_10016D750;
  a1[1] = a2;
  a1[2] = a3;
  a1[3] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 136))(a2);
  sub_100013118(a1 + 4);
}

void sub_10001261C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100012640(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10016D750;
  sub_100012168((uint64_t)(a1 + 4));
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  return a1;
}

void sub_100012688(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10016D750;
  sub_100012168((uint64_t)(a1 + 4));
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  operator delete();
}

uint64_t sub_1000126E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  __n128 v34;
  unint64_t i;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char v79;
  __int128 v80;
  int v81;
  __int128 v82;
  int v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  int v86;
  _QWORD v87[20];
  __int128 v88;
  int v89;
  std::__shared_weak_count *v90;
  uint64_t v91[2];
  uint64_t v92[18];
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE v96[72];
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;

  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v82 = "int CommandDispatcherImpl::CommandDispatcherContextImpl::execute(Command &)";
    *((_QWORD *)&v82 + 1) = 64;
    v83 = 2;
    sub_100013240(v92, &v82);
    v4 = v98;
    *(_DWORD *)((char *)&v98 + *(_QWORD *)(v98 - 24) + 8) = *(_DWORD *)((_BYTE *)&v98 + *(_QWORD *)(v98 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)&v98 + *(_QWORD *)(v4 - 24) + 8) |= 0x200u;
    sub_100005A0C(&v98, (uint64_t)"buffer[0]=[ptr=", 15);
    std::ostream::operator<<(&v98, *(_QWORD *)(a2 + 24));
    sub_100005A0C(&v98, (uint64_t)", size=", 7);
    std::ostream::operator<<(&v98, *(unsigned int *)(a2 + 32));
    sub_100005A0C(&v98, (uint64_t)"], cmd=", 7);
    sub_100041498(&v98, a2);
    std::ostream::~ostream(&v98, off_10016D8D0);
    sub_10001391C((uint64_t)v92);
    std::ios::~ios(&v99);
  }
  v5 = 0xFFFFFFFFLL;
  switch(*(_BYTE *)(a2 + 16))
  {
    case 0:
    case 1:
      v91[0] = a2;
      v91[1] = a1 + 32;
      v6 = a2 + 24;
      sub_100015608(v92, (uint64_t *)(a2 + 24), v91, (uint64_t *)(a2 + 24 + 16 * *(unsigned __int16 *)(a2 + 18)), (uint64_t)v91, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      v7 = *(_QWORD **)(a1 + 24);
      if (*(_BYTE *)(a2 + 16))
      {
        sub_10002CA7C((uint64_t)v96, (uint64_t)&v82);
        sub_10002C64C((uint64_t)v96, (uint64_t)&v88);
        v5 = sub_100013598(v7);
        v9 = v8;
        v10 = v90;
        if (v90)
        {
          p_shared_owners = (unint64_t *)&v90->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v13 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
        if (*((_QWORD *)&v88 + 1))
        {
          v14 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v16 = v85;
        if (v85)
        {
          v17 = (unint64_t *)&v85->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v19 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
        if (*((_QWORD *)&v82 + 1))
        {
          v20 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          goto LABEL_46;
        }
LABEL_47:
        if ((v5 & 0x8000000000000000) == 0)
          goto LABEL_49;
        goto LABEL_48;
      }
      sub_10002CA7C((uint64_t)v96, (uint64_t)&v82);
      sub_10002C64C((uint64_t)v96, (uint64_t)&v88);
      v5 = sub_1000134D4((uint64_t)v7);
      v9 = v23;
      v24 = v90;
      if (v90)
      {
        v25 = (unint64_t *)&v90->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = v85;
      if (v85)
      {
        v31 = (unint64_t *)&v85->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
      if (!*((_QWORD *)&v82 + 1))
        goto LABEL_47;
      v33 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
      do
        v21 = __ldaxr(v33);
      while (__stlxr(v21 - 1, v33));
LABEL_46:
      if (v21)
        goto LABEL_47;
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if ((v5 & 0x8000000000000000) == 0)
        goto LABEL_49;
LABEL_48:
      if ((_DWORD)v5)
      {
        *(_QWORD *)&v88 = "int CommandDispatcherImpl::CommandDispatcherContextImpl::execute(Command &)";
        *((_QWORD *)&v88 + 1) = 64;
        v89 = 16;
        sub_10001365C(&v82, &v88);
        sub_100005A0C(v87, (uint64_t)"IO returned an error for command ", 33);
        std::ostream::operator<<(v87, v5);
        sub_100013704((uint64_t)&v82);
        goto LABEL_90;
      }
LABEL_49:
      sub_10002C64C((uint64_t)v96, (uint64_t)&v88);
      v34.n128_f64[0] = sub_10002CA7C((uint64_t)v96, (uint64_t)&v82);
      for (i = a2 + 24; i < v6 + 16 * (unint64_t)*(unsigned __int16 *)(a2 + 18); i += 16)
      {
        sub_1000174D8((uint64_t)&v84);
        v36 = v85;
        if (v85)
        {
          v37 = (unint64_t *)&v85->__shared_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
          *(_DWORD *)(i + 8) = v86;
          do
            v39 = __ldaxr(v37);
          while (__stlxr(v39 - 1, v37));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        else
        {
          *(_DWORD *)(i + 8) = v86;
        }
        sub_10002D9AC((uint64_t)&v82);
      }
      v40 = v85;
      if (v85)
      {
        v41 = (unint64_t *)&v85->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v40->__on_zero_shared)(v40, v34);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
      if (*((_QWORD *)&v82 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v43->__on_zero_shared)(v43, v34);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = sub_10002C94C((uint64_t)v96);
      v47 = *(_QWORD *)a2;
      if (v101 >= *(_QWORD *)a2 + v46 - v100)
        v48 = *(_QWORD *)a2 + v46 - v100;
      else
        v48 = v101;
      if (v9 <= v47 && v48 >= *(_QWORD *)(a2 + 8))
      {
        v77 = v48 - v9;
        v78 = i - v6;
      }
      else
      {
        *(_QWORD *)&v80 = "int CommandDispatcherImpl::CommandDispatcherContextImpl::execute(Command &)";
        *((_QWORD *)&v80 + 1) = 64;
        v81 = 16;
        sub_100013744(&v82, &v80);
        sub_100005A0C(v87, (uint64_t)"Can't fulfill kernel's request. command: ", 41);
        sub_100041498(v87, a2);
        *(_DWORD *)((char *)&v87[1] + *(_QWORD *)(v87[0] - 24)) = *(_DWORD *)((_BYTE *)&v87[1]
                                                                              + *(_QWORD *)(v87[0] - 24)) & 0xFFFFFFB5 | 8;
        v79 = 48;
        sub_100017554(v87, &v79);
        v75 = v87[0];
        *(_QWORD *)((char *)&v87[3] + *(_QWORD *)(v87[0] - 24)) = 2;
        *(_DWORD *)((char *)&v87[1] + *(_QWORD *)(v75 - 24)) |= 0x200u;
        sub_100005A0C(v87, (uint64_t)" io_start_offset: ", 18);
        std::ostream::operator<<(v87, v9);
        v76 = v87[0];
        *(_DWORD *)((char *)&v87[1] + *(_QWORD *)(v87[0] - 24)) = *(_DWORD *)((_BYTE *)&v87[1]
                                                                              + *(_QWORD *)(v87[0] - 24)) & 0xFFFFFFB5 | 2;
        *(_QWORD *)((char *)&v87[3] + *(_QWORD *)(v76 - 24)) = 0;
        *(_DWORD *)((char *)&v87[1] + *(_QWORD *)(v76 - 24)) &= ~0x200u;
        sub_100005A0C(v87, (uint64_t)" io_size: ", 10);
        v77 = v48 - v9;
        std::ostream::operator<<(v87, v77 + *(_QWORD *)a2);
        sub_100005A0C(v87, (uint64_t)" num_buffers: ", 14);
        v78 = i - v6;
        std::ostream::operator<<(v87, v78 >> 4);
        sub_1000137EC((uint64_t)&v82);
        v47 = *(_QWORD *)a2;
      }
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v77 + v47;
      *(_WORD *)(a2 + 18) = (unint64_t)v78 >> 4;
      v50 = v90;
      if (v90)
      {
        v51 = (unint64_t *)&v90->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v54 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v5 = 0;
LABEL_90:
      v56 = v105;
      if (v105)
      {
        v57 = (unint64_t *)&v105->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v59 = v104;
      if (v104)
      {
        v60 = (unint64_t *)&v104->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v62 = v103;
      if (v103)
      {
        v63 = (unint64_t *)&v103->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v65 = v102;
      if (v102)
      {
        v66 = (unint64_t *)&v102->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = v99;
      if (v99)
      {
        v69 = (unint64_t *)&v99->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v71 = v97;
      if (v97)
      {
        v72 = (unint64_t *)&v97->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      if (v94 && &v95 != v93)
        operator delete(v93);
      sub_100015C2C((uint64_t)v92);
      return v5;
    case 3:
    case 4:
      return sub_100013328(*(_QWORD **)(a1 + 24));
    case 5:
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
      return 0;
    case 6:
      return sub_1000133F8(a1, a2);
    default:
      return v5;
  }
}

void sub_10001302C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000137EC((uint64_t)va);
  sub_100012168((uint64_t)&STACK[0x298]);
  sub_100012168((uint64_t)&STACK[0x228]);
  sub_10001382C((uint64_t)&STACK[0x2D8]);
  _Unwind_Resume(a1);
}

void sub_100013118(_QWORD *a1)
{
  *a1 = 0;
  operator new();
}

void sub_100013168(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_100013174(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_10001318C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000131B4(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_10016D7E0))
    return a1 + 24;
  else
    return 0;
}

BOOL sub_1000131F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

_QWORD *sub_100013240(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000138A0((uint64_t)a1, a2);
  *a1 = off_10016D808;
  a1[45] = &off_10016D908;
  a1[46] = &off_10016D930;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10016D808;
  a1[45] = off_10016D890;
  a1[46] = off_10016D8B8;
  return a1;
}

void sub_1000132C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10001391C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000132E8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016D8D0);
  sub_10001391C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100013328(_QWORD *a1)
{
  __int128 v2;
  int v3;
  _QWORD v4[45];
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1[1] + 8) & 1) == 0)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v2 = "DiskImage::Context::flush(di_flush_mode)";
    *((_QWORD *)&v2 + 1) = 25;
    v3 = 2;
    sub_100013F18(v4, &v2);
    sub_100005A0C(&v5, (uint64_t)"Disk image is terminated, skipping flush", 40);
    std::ostream::~ostream(&v5, off_10016DAF0);
    sub_10001407C((uint64_t)v4);
    std::ios::~ios(&v6);
  }
  return 4294967290;
}

void sub_1000133E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100013FC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000133F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v5;
  int v6;
  _QWORD v7[45];
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 8) >> 4;
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v5 = "CommandDispatcherImpl::CommandDispatcherContextImpl::unmap(const Command &)";
    *((_QWORD *)&v5 + 1) = 58;
    v6 = 2;
    sub_100014678(v7, &v5);
    sub_100005A0C(&v8, (uint64_t)"Num extents: ", 13);
    std::ostream::operator<<(&v8, v3);
    std::ostream::~ostream(&v8, off_10016DD10);
    sub_1000148AC((uint64_t)v7);
    std::ios::~ios(&v9);
  }
  return sub_100014760(*(_QWORD **)(a1 + 24));
}

void sub_1000134C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100014720((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000134D4(uint64_t a1)
{
  __int128 v2;
  int v3;
  _QWORD v4[45];
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 8) & 1) == 0)
    return (**(uint64_t (***)(uint64_t))a1)(a1);
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v2 = "DiskImage::Context::read(const sg_vec::iterator &, const sg_vec::iterator &)";
    *((_QWORD *)&v2 + 1) = 24;
    v3 = 2;
    sub_100015FA0(v4, &v2);
    sub_100005A0C(&v5, (uint64_t)"Disk image is terminated, skipping read", 39);
    std::ostream::~ostream(&v5, off_10016E150);
    sub_100016104((uint64_t)v4);
    std::ios::~ios(&v6);
  }
  return -6;
}

void sub_100013584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100016048((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100013598(_QWORD *a1)
{
  __int128 v2;
  int v3;
  _QWORD v4[45];
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1[1] + 8) & 1) == 0)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v2 = "DiskImage::Context::write(const sg_vec::iterator &, const sg_vec::iterator &)";
    *((_QWORD *)&v2 + 1) = 25;
    v3 = 2;
    sub_100016700(v4, &v2);
    sub_100005A0C(&v5, (uint64_t)"Disk image is terminated, skipping write", 40);
    std::ostream::~ostream(&v5, off_10016E370);
    sub_100016864((uint64_t)v4);
    std::ios::~ios(&v6);
  }
  return -6;
}

void sub_100013648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000167A8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10001365C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100016E60((uint64_t)a1, a2);
  *a1 = off_10016E4C8;
  a1[45] = &off_10016E5C8;
  a1[46] = &off_10016E5F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10016E4C8;
  a1[45] = off_10016E550;
  a1[46] = off_10016E578;
  return a1;
}

void sub_1000136E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100016EDC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100013704(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016E590);
  sub_100016EDC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100013744(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000175F4((uint64_t)a1, a2);
  *a1 = off_10016E6E8;
  a1[45] = &off_10016E7E8;
  a1[46] = &off_10016E810;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10016E6E8;
  a1[45] = off_10016E770;
  a1[46] = off_10016E798;
  return a1;
}

void sub_1000137C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100017670(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000137EC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016E7B0);
  sub_100017670(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10001382C(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1 + 576;
  sub_100012168(a1 + 688);
  sub_100012168(v2);
  sub_100012168(a1 + 528);
  sub_100012168(a1 + 416);
  sub_100012168(a1 + 360);
  sub_100012168(a1 + 272);
  if (*(_QWORD *)(a1 + 160))
  {
    v3 = *(void **)(a1 + 144);
    if ((void *)(a1 + 168) != v3)
      operator delete(v3);
  }
  return sub_100015C2C(a1);
}

uint64_t sub_1000138A0(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10016D9A0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100013908(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001391C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10016D9A0;
  sub_100013BD4(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000139B8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016D8D0);
  sub_10001391C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100013A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100013A40(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100013A8C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016D8D0);
  sub_10001391C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100013AC4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016D8D0);
  sub_10001391C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100013B14(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016D8D0);
  sub_10001391C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100013B54(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016D8D0);
  sub_10001391C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100013BB0(uint64_t a1)
{
  sub_10001391C(a1);
  operator delete();
}

uint64_t sub_100013BD4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100013D24((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100013CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100013D24(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  int *result;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v19 = 0;
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16)))
      v9 = 3;
    else
      v9 = 2;
    v10 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v21 = v4;
    v22 = 2080;
    v23 = v10;
    v24 = 2048;
    v25 = 69;
    v26 = 2082;
    v27 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(v9, &v19, 0, 0, &_mh_execute_header, v7, v8, "%.*s: <%lu> %{public}s", buf, 38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v21 = v4;
      v22 = 2080;
      v23 = v16;
      v24 = 2048;
      v25 = 69;
      v26 = 2082;
      v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_100013F18(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100014000((uint64_t)a1, a2);
  *a1 = off_10016DA28;
  a1[45] = &off_10016DB28;
  a1[46] = &off_10016DB50;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10016DA28;
  a1[45] = off_10016DAB0;
  a1[46] = off_10016DAD8;
  return a1;
}

void sub_100013F9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10001407C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100013FC0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016DAF0);
  sub_10001407C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100014000(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10016DBC0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100014068(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001407C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10016DBC0;
  sub_100014334(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100014118(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016DAF0);
  sub_10001407C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10001416C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000141A0(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000141EC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016DAF0);
  sub_10001407C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100014224(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016DAF0);
  sub_10001407C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100014274(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016DAF0);
  sub_10001407C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000142B4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016DAF0);
  sub_10001407C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100014310(uint64_t a1)
{
  sub_10001407C(a1);
  operator delete();
}

uint64_t sub_100014334(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100014484((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10001445C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100014484(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  int *result;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v19 = 0;
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16)))
      v9 = 3;
    else
      v9 = 2;
    v10 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v21 = v4;
    v22 = 2080;
    v23 = v10;
    v24 = 2048;
    v25 = 191;
    v26 = 2082;
    v27 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(v9, &v19, 0, 0, &_mh_execute_header, v7, v8, "%.*s: <%lu> %{public}s", buf, 38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v21 = v4;
      v22 = 2080;
      v23 = v16;
      v24 = 2048;
      v25 = 191;
      v26 = 2082;
      v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_100014678(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100014830((uint64_t)a1, a2);
  *a1 = off_10016DC48;
  a1[45] = &off_10016DD48;
  a1[46] = &off_10016DD70;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10016DC48;
  a1[45] = off_10016DCD0;
  a1[46] = off_10016DCF8;
  return a1;
}

void sub_1000146FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000148AC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100014720(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016DD10);
  sub_1000148AC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100014760(_QWORD *a1)
{
  __int128 v2;
  int v3;
  _QWORD v4[45];
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1[1] + 8) & 1) == 0)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v2 = "DiskImage::Context::unmap(const unmap_extent_t *, size_t)";
    *((_QWORD *)&v2 + 1) = 25;
    v3 = 2;
    sub_100014EA8(v4, &v2);
    sub_100005A0C(&v5, (uint64_t)"Disk image is terminated, skipping unmap", 40);
    std::ostream::~ostream(&v5, off_10016DF30);
    sub_10001500C((uint64_t)v4);
    std::ios::~ios(&v6);
  }
  return 4294967290;
}

void sub_10001481C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100014F50((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100014830(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10016DDE0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100014898(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000148AC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10016DDE0;
  sub_100014B64(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100014948(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016DD10);
  sub_1000148AC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10001499C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000149D0(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100014A1C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016DD10);
  sub_1000148AC(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100014A54(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016DD10);
  sub_1000148AC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100014AA4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016DD10);
  sub_1000148AC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100014AE4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016DD10);
  sub_1000148AC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100014B40(uint64_t a1)
{
  sub_1000148AC(a1);
  operator delete();
}

uint64_t sub_100014B64(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100014CB4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100014C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100014CB4(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  int *result;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v19 = 0;
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16)))
      v9 = 3;
    else
      v9 = 2;
    v10 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v21 = v4;
    v22 = 2080;
    v23 = v10;
    v24 = 2048;
    v25 = 156;
    v26 = 2082;
    v27 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(v9, &v19, 0, 0, &_mh_execute_header, v7, v8, "%.*s: <%lu> %{public}s", buf, 38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v21 = v4;
      v22 = 2080;
      v23 = v16;
      v24 = 2048;
      v25 = 156;
      v26 = 2082;
      v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_100014EA8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100014F90((uint64_t)a1, a2);
  *a1 = off_10016DE68;
  a1[45] = &off_10016DF68;
  a1[46] = &off_10016DF90;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10016DE68;
  a1[45] = off_10016DEF0;
  a1[46] = off_10016DF18;
  return a1;
}

void sub_100014F2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10001500C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100014F50(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016DF30);
  sub_10001500C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100014F90(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10016E000;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100014FF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001500C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10016E000;
  sub_1000152C4(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000150A8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016DF30);
  sub_10001500C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000150FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100015130(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_10001517C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016DF30);
  sub_10001500C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000151B4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016DF30);
  sub_10001500C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100015204(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016DF30);
  sub_10001500C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100015244(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016DF30);
  sub_10001500C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1000152A0(uint64_t a1)
{
  sub_10001500C(a1);
  operator delete();
}

uint64_t sub_1000152C4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100015414((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000153EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100015414(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  int *result;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v19 = 0;
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16)))
      v9 = 3;
    else
      v9 = 2;
    v10 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v21 = v4;
    v22 = 2080;
    v23 = v10;
    v24 = 2048;
    v25 = 173;
    v26 = 2082;
    v27 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(v9, &v19, 0, 0, &_mh_execute_header, v7, v8, "%.*s: <%lu> %{public}s", buf, 38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v21 = v4;
      v22 = 2080;
      v23 = v16;
      v24 = 2048;
      v25 = 173;
      v26 = 2082;
      v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t *sub_100015608(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v10 = sub_100015698((uint64_t)a1, a2, a3, a4);
  v11 = a1[1];
  v18 = *a1;
  v12 = v18 + 24 * v11;
  v13 = a1[19];
  v16 = (unint64_t *)a1[18];
  v17 = v12;
  v15 = &v16[v13];
  sub_10002C7AC(v10 + 208, &v18, &v17, &v16, &v15, a6, a7);
  return a1;
}

void sub_100015684(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015744(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100015698(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v5;

  *(_QWORD *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_10013FEC0;
  sub_100015780((uint64_t *)a1, a2, a3, a4);
  *(_QWORD *)(a1 + 144) = a1 + 168;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 152) = xmmword_10013FEC0;
  sub_100015C84(a1 + 144, v5);
  return a1;
}

void sub_100015710(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v3;

  if (*(_QWORD *)(v1 + 160))
  {
    if (v3 != *v2)
      operator delete(*v2);
  }
  sub_100015C2C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100015744(uint64_t a1)
{
  void *v2;

  if (*(_QWORD *)(a1 + 160))
  {
    v2 = *(void **)(a1 + 144);
    if ((void *)(a1 + 168) != v2)
      operator delete(v2);
  }
  return sub_100015C2C(a1);
}

void sub_100015780(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v7;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  if (a4 == a2)
    v7 = 0;
  else
    v7 = ((unint64_t)((char *)a4 - (char *)a2 - 16) >> 4) + 1;
  if (v7 <= a1[2])
  {
    sub_100015998((uint64_t)a1, a2, a3, v7, (_QWORD *)*a1, a1[1]);
    a1[1] = v7;
  }
  else
  {
    if (v7 >= 0x555555555555556)
      sub_1000158AC("get_next_capacity, allocator's max size reached");
    v9 = operator new(24 * v7);
    v10 = (uint64_t *)*a1;
    if (*a1)
    {
      v11 = a1[1];
      if (v11)
      {
        v12 = *a1;
        do
        {
          --v11;
          v12 = sub_100012168(v12) + 24;
        }
        while (v11);
      }
      a1[1] = 0;
      if (a1 + 3 != v10)
        operator delete(v10);
    }
    a1[1] = 0;
    a1[2] = v7;
    *a1 = (uint64_t)v9;
    sub_1000158FC(a1, a2, a3, a4);
  }
}

void sub_1000158AC(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1000056E4(exception, a1);
}

void sub_1000158E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000158FC(_QWORD *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;

  v4 = result[1];
  v5 = *result + 24 * v4;
  if (a2 == a4)
  {
    v7 = (_QWORD *)(*result + 24 * v4);
  }
  else
  {
    v6 = *a3;
    v7 = (_QWORD *)v5;
    do
    {
      _X11 = *a2;
      if (*(_BYTE *)(v6 + 16))
        __asm { PRFM            #0, [X11] }
      else
        __asm { PRFM            #0x10, [X11] }
      v15 = *(_QWORD *)(a3[1] + 8);
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        v6 = *a3;
      }
      v18 = *(unsigned int *)(v6 + 20);
      *v7 = _X11;
      v7[1] = v15;
      v7[2] = v18;
      a2 += 2;
      v7 += 3;
    }
    while (a2 != a4);
    v4 = result[1];
  }
  result[1] = v4 - 0x5555555555555555 * (((uint64_t)v7 - v5) >> 3);
  return result;
}

void sub_100015998(uint64_t a1, uint64_t *a2, _QWORD *a3, unint64_t a4, _QWORD *a5, unint64_t a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;

  v11 = a4 - a6;
  if (a4 <= a6)
  {
    if (a4)
    {
      v37 = a4;
      do
      {
        v38 = *a3;
        _X8 = *a2;
        if (*(_BYTE *)(*a3 + 16))
          __asm { PRFM            #0, [X8] }
        else
          __asm { PRFM            #0x10, [X8] }
        v42 = *(_QWORD *)(a3[1] + 8);
        if (v42)
        {
          v43 = (unint64_t *)(v42 + 8);
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
          v38 = *a3;
        }
        v45 = *(unsigned int *)(v38 + 20);
        *(_QWORD *)&v49 = _X8;
        *((_QWORD *)&v49 + 1) = v42;
        v50 = v45;
        sub_100015BC8((uint64_t)a5, &v49);
        v46 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
        a5[2] = v50;
        if (v46)
        {
          p_shared_owners = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(p_shared_owners);
          while (__stlxr(v48 - 1, p_shared_owners));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        a2 += 2;
        a5 += 3;
        --v37;
      }
      while (v37);
    }
    if (a6 != a4)
    {
      do
      {
        sub_100012168((uint64_t)a5);
        a5 += 3;
      }
      while (!__CFADD__(v11++, 1));
    }
  }
  else
  {
    if (a6)
    {
      v12 = a6;
      do
      {
        v13 = *a3;
        _X8 = *a2;
        if (*(_BYTE *)(*a3 + 16))
          __asm { PRFM            #0, [X8] }
        else
          __asm { PRFM            #0x10, [X8] }
        v21 = *(_QWORD *)(a3[1] + 8);
        if (v21)
        {
          v22 = (unint64_t *)(v21 + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v13 = *a3;
        }
        v24 = *(unsigned int *)(v13 + 20);
        *(_QWORD *)&v49 = _X8;
        *((_QWORD *)&v49 + 1) = v21;
        v50 = v24;
        sub_100015BC8((uint64_t)a5, &v49);
        v25 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
        a5[2] = v50;
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        a2 += 2;
        a5 += 3;
        --v12;
      }
      while (v12);
    }
    v28 = a4 - a6;
    if (a4 != a6)
    {
      v29 = *a3;
      do
      {
        _X10 = *a2;
        if (*(_BYTE *)(v29 + 16))
          __asm { PRFM            #0, [X10] }
        else
          __asm { PRFM            #0x10, [X10] }
        v33 = *(_QWORD *)(a3[1] + 8);
        if (v33)
        {
          v34 = (unint64_t *)(v33 + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
          v29 = *a3;
        }
        v36 = *(unsigned int *)(v29 + 20);
        *a5 = _X10;
        a5[1] = v33;
        a5[2] = v36;
        a2 += 2;
        a5 += 3;
        --v28;
      }
      while (v28);
    }
  }
}

uint64_t sub_100015BC8(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t sub_100015C2C(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(void **)a1;
    do
    {
      --v2;
      v3 = (void *)(sub_100012168((uint64_t)v3) + 24);
    }
    while (v2);
  }
  if (*(_QWORD *)(a1 + 16) && a1 + 24 != *(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100015C84(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = a2 - v3;
  if (a2 >= v3)
  {
    v5 = (char *)(*(_QWORD *)a1 + 8 * v3);
    if (*(_QWORD *)(a1 + 16) - v3 < v4)
    {
      sub_100015D04((void **)a1, v5, v4, &v6);
    }
    else
    {
      sub_100015D90(a1, v5, v5, v4);
      *(_QWORD *)(a1 + 8) += v4;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
}

void sub_100015D04(void **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE *v8;
  unint64_t v9;
  char *v10;
  char *v11;

  v8 = *a1;
  v9 = sub_100015E60((uint64_t)a1, a3);
  if (v9 >> 60)
    sub_1000158AC("get_next_capacity, allocator's max size reached");
  v10 = (char *)v9;
  v11 = (char *)operator new(8 * v9);
  sub_100015ED4(a1, v11, v10, a2, a3);
  *a4 = (char *)*a1 + a2 - v8;
}

void sub_100015D90(int a1, _BYTE *__src, _BYTE *__dst, unint64_t a4)
{
  int64_t v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  char *v12;

  if (a4)
  {
    v7 = __dst - __src;
    if (__dst == __src)
    {
      v9 = 8 * a4;
      goto LABEL_9;
    }
    if (a4 <= v7 >> 3)
    {
      v11 = 8 * a4;
      v12 = &__dst[-8 * a4];
      memmove(__dst, v12, 8 * a4);
      if (v12 != __src)
        memmove(&__dst[-(v12 - __src)], __src, v12 - __src);
      v10 = __src;
      v9 = v11;
      goto LABEL_13;
    }
    v8 = v7 >> 3;
    if (__src)
      memmove(&__src[8 * a4], __src, __dst - __src);
    bzero(__src, v7);
    if (a4 != v8)
    {
      v9 = 8 * (a4 - v8);
LABEL_9:
      v10 = __dst;
LABEL_13:
      bzero(v10, v9);
    }
  }
}

unint64_t sub_100015E60(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = 0xFFFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xFFFFFFFFFFFFFFFLL - v4 < a2 - v4 + v3)
    sub_1000158AC("get_next_capacity, allocator's max size reached");
  v5 = v4 >> 61;
  v6 = 8 * v4;
  if (v5 > 4)
    v7 = -1;
  else
    v7 = v6;
  v8 = v6 / 5;
  if (v5)
    v8 = v7;
  v9 = v3 + a2;
  if (v8 < 0xFFFFFFFFFFFFFFFLL)
    v2 = v8;
  if (v9 <= v2)
    return v2;
  else
    return v9;
}

void sub_100015ED4(void **a1, char *__dst, char *a3, char *__src, uint64_t a5)
{
  char *v10;
  char *v11;
  BOOL v12;
  BOOL v13;
  char *v14;
  char *v15;
  char *v17;

  v10 = (char *)*a1;
  v11 = (char *)a1[1];
  if (*a1)
    v12 = __dst == 0;
  else
    v12 = 1;
  v13 = v12 || v10 == __src;
  v14 = __dst;
  if (!v13)
  {
    memmove(__dst, v10, __src - v10);
    v14 = &__dst[__src - v10];
  }
  if (a5)
    bzero(v14, 8 * a5);
  if (__src)
  {
    v15 = &v10[8 * (_QWORD)v11];
    if (v15 != __src && v14 != 0)
      memmove(&v14[8 * a5], __src, v15 - __src);
  }
  if (v10 && a1 + 3 != *a1)
    operator delete(*a1);
  v17 = (char *)a1[1] + a5;
  *a1 = __dst;
  a1[1] = v17;
  a1[2] = a3;
}

_QWORD *sub_100015FA0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100016088((uint64_t)a1, a2);
  *a1 = off_10016E088;
  a1[45] = &off_10016E188;
  a1[46] = &off_10016E1B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10016E088;
  a1[45] = off_10016E110;
  a1[46] = off_10016E138;
  return a1;
}

void sub_100016024(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100016104(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100016048(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016E150);
  sub_100016104(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100016088(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10016E220;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000160F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100016104(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10016E220;
  sub_1000163BC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000161A0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016E150);
  sub_100016104(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000161F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100016228(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100016274(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016E150);
  sub_100016104(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000162AC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016E150);
  sub_100016104(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_1000162FC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016E150);
  sub_100016104(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10001633C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016E150);
  sub_100016104(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100016398(uint64_t a1)
{
  sub_100016104(a1);
  operator delete();
}

uint64_t sub_1000163BC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10001650C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000164E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10001650C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  int *result;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v19 = 0;
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16)))
      v9 = 3;
    else
      v9 = 2;
    v10 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v21 = v4;
    v22 = 2080;
    v23 = v10;
    v24 = 2048;
    v25 = 159;
    v26 = 2082;
    v27 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(v9, &v19, 0, 0, &_mh_execute_header, v7, v8, "%.*s: <%lu> %{public}s", buf, 38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v21 = v4;
      v22 = 2080;
      v23 = v16;
      v24 = 2048;
      v25 = 159;
      v26 = 2082;
      v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_100016700(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000167E8((uint64_t)a1, a2);
  *a1 = off_10016E2A8;
  a1[45] = &off_10016E3A8;
  a1[46] = &off_10016E3D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10016E2A8;
  a1[45] = off_10016E330;
  a1[46] = off_10016E358;
  return a1;
}

void sub_100016784(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100016864(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000167A8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016E370);
  sub_100016864(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000167E8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10016E440;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100016850(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100016864(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10016E440;
  sub_100016B1C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100016900(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016E370);
  sub_100016864(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100016954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100016988(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000169D4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016E370);
  sub_100016864(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100016A0C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016E370);
  sub_100016864(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100016A5C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016E370);
  sub_100016864(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100016A9C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016E370);
  sub_100016864(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100016AF8(uint64_t a1)
{
  sub_100016864(a1);
  operator delete();
}

uint64_t sub_100016B1C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100016C6C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100016C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100016C6C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  int *result;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v19 = 0;
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16)))
      v9 = 3;
    else
      v9 = 2;
    v10 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v21 = v4;
    v22 = 2080;
    v23 = v10;
    v24 = 2048;
    v25 = 166;
    v26 = 2082;
    v27 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(v9, &v19, 0, 0, &_mh_execute_header, v7, v8, "%.*s: <%lu> %{public}s", buf, 38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v21 = v4;
      v22 = 2080;
      v23 = v16;
      v24 = 2048;
      v25 = 166;
      v26 = 2082;
      v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100016E60(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10016E660;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100016EC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100016EDC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10016E660;
  sub_100017194(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100016F78(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016E590);
  sub_100016EDC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100016FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100017000(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_10001704C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016E590);
  sub_100016EDC(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100017084(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016E590);
  sub_100016EDC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_1000170D4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016E590);
  sub_100016EDC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100017114(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016E590);
  sub_100016EDC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100017170(uint64_t a1)
{
  sub_100016EDC(a1);
  operator delete();
}

uint64_t sub_100017194(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000172E4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000172BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_1000172E4(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  int *result;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v19 = 0;
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16)))
      v9 = 3;
    else
      v9 = 2;
    v10 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v21 = v4;
    v22 = 2080;
    v23 = v10;
    v24 = 2048;
    v25 = 117;
    v26 = 2082;
    v27 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(v9, &v19, 0, 0, &_mh_execute_header, v7, v8, "%.*s: <%lu> %{public}s", buf, 38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v21 = v4;
      v22 = 2080;
      v23 = v16;
      v24 = 2048;
      v25 = 117;
      v26 = 2082;
      v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

void sub_1000174D8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5[2];

  sub_10002BE54(a1, 1, (uint64_t)v5);
  sub_100015BC8(a1 + 56, v5);
  *(_OWORD *)(a1 + 72) = v5[1];
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5[0] + 1);
  if (*((_QWORD *)&v5[0] + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5[0] + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

_QWORD *sub_100017554(_QWORD *a1, char *a2)
{
  char *v3;
  int v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_1000175E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1000175F4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10016E880;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10001765C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100017670(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10016E880;
  sub_100017928(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10001770C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016E7B0);
  sub_100017670(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100017760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100017794(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000177E0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016E7B0);
  sub_100017670(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100017818(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016E7B0);
  sub_100017670(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100017868(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016E7B0);
  sub_100017670(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000178A8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016E7B0);
  sub_100017670(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100017904(uint64_t a1)
{
  sub_100017670(a1);
  operator delete();
}

uint64_t sub_100017928(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100017A78((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100017A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100017A78(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  int *result;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v19 = 0;
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16)))
      v9 = 3;
    else
      v9 = 2;
    v10 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v21 = v4;
    v22 = 2080;
    v23 = v10;
    v24 = 2048;
    v25 = 133;
    v26 = 2082;
    v27 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(v9, &v19, 0, 0, &_mh_execute_header, v7, v8, "%.*s: <%lu> %{public}s", buf, 38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v21 = v4;
      v22 = 2080;
      v23 = v16;
      v24 = 2048;
      v25 = 133;
      v26 = 2082;
      v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

void sub_100017C6C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &off_10016E918;
}

void sub_100017CA4(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

uint64_t *sub_100017CC8(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  sub_100017D20(a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *sub_100017D20(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      sub_100017C6C();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

void sub_100017D6C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 16;
      v7 = v4 - 16;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 16;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ***sub_100017DF8(void ***result, void **a2)
{
  void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    free(*v2);
    operator delete();
  }
  return result;
}

void sub_100017E44()
{
  sub_100005694("vector");
}

void *sub_100017E58(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_100012320();
  return operator new(16 * a2);
}

uint64_t sub_100017E8C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    sub_100012168(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_100017ED8(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = sub_100017F78(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_100017F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_100017FB8(&a9);
  _Unwind_Resume(a1);
}

char *sub_100017F78(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_100017E44();
  result = (char *)sub_100017E58((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_100017FB8(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_100012168(v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100018028()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void sub_100018060(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      v5 = v3 - 16;
      v6 = v3 - 16;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 16;
        (*v7)(v5);
        v8 = v5 == v1;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *sub_1000180D4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  size_t v4;
  void *v5;
  std::bad_alloc *exception;
  std::bad_alloc *v8;

  a1[1] = a3;
  a1[2] = a2;
  v4 = a3 * a2;
  v5 = malloc_type_valloc(a3 * a2, 0x901EC93FuLL);
  *a1 = v5;
  if (!v5)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v8 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v5, v4);
  return a1;
}

void sub_100018140()
{
  operator delete();
}

_QWORD *sub_100018154()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_10016E940;
  return result;
}

void sub_100018178(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10016E940;
}

void sub_100018190(uint64_t a1, void **a2)
{
  free(*a2);
}

uint64_t sub_100018198(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_10016E9B0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000181D4()
{
  return &off_10016E9B0;
}

uint64_t sub_1000181E0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *sub_100018244(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

uint64_t sub_1000182D4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100018348((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100018348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      *(_QWORD *)sub_100005394(a7 + v11 - 16) = off_10016D4A8;
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      *(_DWORD *)(a3 + v11 - 8) = 0;
      v11 -= 16;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1000183D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 16)
    (**(void (***)(uint64_t))(v1 + v2))(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100018400(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 16);
    *(_QWORD *)(a1 + 16) = i - 16;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100018450(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_100017E44();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100017E58(v7, v9);
  else
    v10 = 0;
  v14 = v10;
  v15 = &v10[16 * v4];
  v16 = (uint64_t)v15;
  v17 = &v10[16 * v9];
  v11 = sub_100005394((uint64_t)v15);
  *(_QWORD *)v11 = off_10016D4A8;
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v16 += 16;
  sub_1000182D4(a1, &v14);
  v12 = a1[1];
  sub_100018400((uint64_t)&v14);
  return v12;
}

void sub_100018534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100018400((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100018548(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  void (__cdecl **v10)(std::ostringstream *__hidden);
  void (__cdecl **v11)(std::ostringstream *__hidden);
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (__cdecl **v21)(std::ostringstream *__hidden);
  _QWORD *v22;
  void *v23[2];
  char v24;
  void (__cdecl **v25)(std::ostringstream *__hidden);
  void (__cdecl **v26)(std::stringbuf *__hidden);
  void (__cdecl **v27)(std::stringbuf *__hidden);
  char *v28;
  uint64_t v29;
  void *__p;
  char v31;
  uint64_t v32;
  void (__cdecl **v33)(std::ostringstream *__hidden);
  _QWORD v34[10];
  char v35;
  uint64_t v36;

  *(_QWORD *)a1 = off_10016E9D0;
  v7 = *a3;
  *a3 = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  v22 = (_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 64) = 1018212795;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 850045863;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = a2;
  *(_QWORD *)(a1 + 200) = a4;
  sub_100012568(a1 + 208, a5);
  *(_QWORD *)(a1 + 240) = 0;
  if (a4[1] != *a4)
  {
    v8 = 0;
    do
    {
      sub_100005920((uint64_t)&v25);
      sub_100005A0C(&v25, (uint64_t)"com.apple.diskimagesio_", 23);
      std::ostream::operator<<(&v25, v8);
      sub_100018E18(&v33, &v25);
      v25 = v10;
      *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&v25 + (_QWORD)*(v10 - 3)) = v11;
      if (v31 < 0)
        operator delete(__p);
      std::streambuf::~streambuf(&v26);
      v12 = v9;
      std::ostream::~ostream(&v25, v9 + 1);
      std::ios::~ios(&v32);
      sub_100005598((uint64_t)v34, v23);
      if (v24 >= 0)
        v13 = (char *)v23;
      else
        v13 = (char *)v23[0];
      v15 = *(_QWORD *)(a1 + 24);
      v14 = *(_QWORD *)(a1 + 32);
      if (v15 >= v14)
      {
        v17 = (uint64_t)(v15 - *v22) >> 3;
        if ((unint64_t)(v17 + 1) >> 61)
          sub_100017E44();
        v18 = v14 - *v22;
        v19 = v18 >> 2;
        if (v18 >> 2 <= (unint64_t)(v17 + 1))
          v19 = v17 + 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        v29 = a1 + 32;
        if (v20)
          v21 = (void (__cdecl **)(std::ostringstream *__hidden))sub_1000193CC(a1 + 32, v20);
        else
          v21 = 0;
        v25 = v21;
        v26 = (void (__cdecl **)(std::stringbuf *__hidden))&v21[v17];
        v27 = v26;
        v28 = (char *)&v21[v20];
        sub_100100C14((_DWORD)v21 + 8 * v17, v13);
        ++v27;
        sub_100019348(v22, &v25);
        v16 = *(_QWORD *)(a1 + 24);
        sub_100019400((uint64_t)&v25);
      }
      else
      {
        sub_100100C14(*(_QWORD *)(a1 + 24), v13);
        v16 = v15 + 8;
        *(_QWORD *)(a1 + 24) = v15 + 8;
      }
      v9 = v12;
      *(_QWORD *)(a1 + 24) = v16;
      if (v24 < 0)
        operator delete(v23[0]);
      v33 = v10;
      *(_QWORD *)((char *)&v34[-1] + (_QWORD)*(v10 - 3)) = v11;
      if (v35 < 0)
        operator delete((void *)v34[8]);
      std::streambuf::~streambuf(v34);
      std::ostream::~ostream(&v33, v12 + 1);
      std::ios::~ios(&v36);
      ++v8;
    }
    while (v8 < (uint64_t)(a4[1] - *a4) >> 4);
  }
  operator new[]();
}

void sub_100018C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::mutex *a10, std::condition_variable *a11, uint64_t a12, uint64_t *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p)
{
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  v31 = *a13;
  *a13 = 0;
  if (v31)
    sub_10001944C((uint64_t)a13, v31);
  v32 = *(_QWORD **)(v29 + 232);
  if (v32 == (_QWORD *)a9)
  {
    v33 = 4;
    v32 = (_QWORD *)a9;
  }
  else
  {
    if (!v32)
      goto LABEL_8;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_8:
  sub_100012168(a19);
  std::mutex::~mutex(a10);
  std::condition_variable::~condition_variable(a11);
  __p = a15;
  sub_10001A268((void ***)&__p);
  __p = a20;
  sub_10001A2E4((void ***)&__p);
  v34 = *(_QWORD *)(v29 + 8);
  *(_QWORD *)(v29 + 8) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
  _Unwind_Resume(a1);
}

void (__cdecl ***sub_100018E18(void (__cdecl ***a1)(std::ostringstream *__hidden this), _QWORD *a2))(std::ostringstream *__hidden this)
{
  void (__cdecl **v4)(std::ostringstream *__hidden);
  void (__cdecl **v5)(std::ostringstream *__hidden);
  std::ios_base *v6;
  std::ios_base *v7;

  *a1 = v4;
  *(_QWORD *)((char *)*(v4 - 3) + (_QWORD)a1) = v5;
  v6 = (std::ios_base *)((char *)*(*a1 - 3) + (_QWORD)a1);
  v7 = (std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24));
  std::ios_base::move(v6, v7);
  v6[1].__vftable = v7[1].__vftable;
  v7[1].__vftable = 0;
  v6[1].__fmtflags_ = v7[1].__fmtflags_;
  *(_QWORD *)((char *)*(*a1 - 3) + (_QWORD)a1 + 40) = std::stringbuf::basic_stringbuf(a1 + 1, a2 + 1);
  return a1;
}

void sub_100018EE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::ostream::~ostream(v2, v3 + 8);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100018F0C@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = result;
  v4 = **(_QWORD **)(result + 200);
  if (*(_QWORD *)(*(_QWORD *)(result + 200) + 8) != v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      result = sub_1001011BC(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8 * v6++), v4 + v5, 0);
      v4 = **(_QWORD **)(v2 + 200);
      v5 += 16;
    }
    while (v6 < (*(_QWORD *)(*(_QWORD *)(v2 + 200) + 8) - v4) >> 4);
  }
  *a2 = v2;
  return result;
}

_QWORD *sub_100018F80(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  __int128 v7;
  int v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;
  _BYTE v12[152];

  v2 = (uint64_t *)a1[5];
  v3 = (uint64_t *)a1[6];
  while (v2 != v3)
  {
    v4 = *v2++;
    sub_1001011D8(v4);
  }
  *(_QWORD *)&v7 = "void ExecutionEngineCommand<CommandQueue, MachPort>::signal_terminate() [Container = CommandQueue, Port = MachPort]";
  *((_QWORD *)&v7 + 1) = 69;
  v8 = 0;
  sub_10001A354(v9, &v7);
  sub_100005A0C(&v11, (uint64_t)"Cancelling mach ports...", 24);
  std::ostream::~ostream(&v11, off_10016EE00);
  sub_10001A710((uint64_t)v9);
  std::ios::~ios(v12);
  sub_1000195C8(a1[22]);
  *(_QWORD *)&v7 = "void ExecutionEngineCommand<CommandQueue, MachPort>::signal_terminate() [Container = CommandQueue, Port = MachPort]";
  *((_QWORD *)&v7 + 1) = 69;
  v8 = 0;
  sub_10001A43C(v9, &v7);
  sub_100005A0C(&v11, (uint64_t)"Waiting for barrier to complete", 31);
  std::ostream::~ostream(&v11, off_10016F020);
  sub_10001AD88((uint64_t)v9);
  std::ios::~ios(v12);
  v9[0] = off_10016F1F0;
  v9[1] = a1;
  v10 = v9;
  sub_10001A524((uint64_t)a1, (uint64_t)v9);
  result = v10;
  if (v10 == v9)
  {
    v6 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_1000190F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a16;
  if (a16 == v16)
  {
    v19 = 4;
    v18 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100019158(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void **v9;

  *(_QWORD *)a1 = off_10016E9D0;
  v4 = *(_QWORD *)(a1 + 240);
  v2 = (_QWORD *)(a1 + 240);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_10001944C((uint64_t)v2, v3);
  v5 = *(_QWORD **)(a1 + 232);
  if (v5 == (_QWORD *)(a1 + 208))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 208);
  }
  else
  {
    if (!v5)
      goto LABEL_8;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_8:
  sub_100012168(a1 + 176);
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));
  v9 = (void **)(a1 + 40);
  sub_10001A268(&v9);
  v9 = (void **)(a1 + 16);
  sub_10001A2E4(&v9);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  return a1;
}

void sub_10001921C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)a1 = off_10016E9D0;
  v4 = *(_QWORD *)(a1 + 240);
  v2 = (_QWORD *)(a1 + 240);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_10001944C((uint64_t)v2, v3);
  v5 = *(_QWORD **)(a1 + 232);
  if (v5 == (_QWORD *)(a1 + 208))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 208);
  }
  else
  {
    if (!v5)
      goto LABEL_8;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_8:
  sub_100012168(a1 + 176);
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));
  v8 = (void **)(a1 + 40);
  sub_10001A268(&v8);
  v8 = (void **)(a1 + 16);
  sub_10001A2E4(&v8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  operator delete();
}

void sub_1000192F4(uint64_t a1)
{
  std::unique_lock<std::mutex> v2;

  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 112);
  v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 112));
  std::condition_variable::wait((std::condition_variable *)(a1 + 64), &v2);
  if (v2.__owns_)
    std::mutex::unlock(v2.__m_);
}

_QWORD *sub_100019348(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (_QWORD *)*a1;
  v4 = (_QWORD *)a1[1];
  result = (_QWORD *)a2[1];
  while (v4 != v5)
    result = sub_100100C18(result - 1, --v4);
  a2[1] = result;
  v7 = (_QWORD *)*a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_1000193CC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_100012320();
  return operator new(8 * a2);
}

uint64_t sub_100019400(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_100100B68((NSObject **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10001944C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v3 = a2 - 8;
    v2 = *(_QWORD *)(a2 - 8);
    if (v2)
    {
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(v3 + v4);
        *(_QWORD *)(v3 + v4) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v4 -= 8;
      }
      while (v4);
    }
    operator delete[]();
  }
}

void sub_1000194BC(int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = operator new(0xA8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_10016EA30;
  v5 = *a1;
  v4[4] = 0;
  v4[5] = 1018212795;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  v4[10] = 0;
  v4[11] = 850045863;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  v4[20] = v5;
  v4[3] = 0;
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1000196D4((uint64_t)a2, v4 + 3, (uint64_t)(v4 + 3));
}

void sub_100019538(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10016EA30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100019548(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10016EA30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100019578(uint64_t a1)
{
  return sub_100019584(a1 + 24);
}

uint64_t sub_100019584(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_1000195C8(a1);
  std::mutex::~mutex((std::mutex *)(a1 + 64));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 16));
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_1000195C8(uint64_t a1)
{
  uint64_t v3;
  std::condition_variable *v4;
  std::chrono::system_clock::time_point v5;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6;
  uint64_t v7;
  uint64_t v8;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v10;
  std::unique_lock<std::mutex> v11;

  v11.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 64);
  v11.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 64));
  if (!atomic_load((unint64_t *)(a1 + 128)))
    goto LABEL_17;
  v3 = *(_QWORD *)(a1 + 136);
  if (v3 < 1)
    goto LABEL_17;
  v4 = (std::condition_variable *)(a1 + 16);
  std::chrono::steady_clock::now();
  v5.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (!v5.__d_.__rep_)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if (v5.__d_.__rep_ < 1)
  {
    if ((unint64_t)v5.__d_.__rep_ < 0xFFDF3B645A1CAC09)
    {
      v6 = 0x8000000000000000;
      goto LABEL_11;
    }
LABEL_10:
    v6 = 1000 * v5.__d_.__rep_;
    goto LABEL_11;
  }
  if ((unint64_t)v5.__d_.__rep_ <= 0x20C49BA5E353F7)
    goto LABEL_10;
  v6 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_11:
  v7 = 1000000 * v3;
  if ((unint64_t)v3 > 0x8637BD05AF6)
    v7 = 0x7FFFFFFFFFFFFFFFLL;
  v8 = v7 ^ 0x7FFFFFFFFFFFFFFFLL;
  v9 = v6 + v7;
  if (v6 <= v8)
    v10.__d_.__rep_ = v9;
  else
    v10.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
  std::condition_variable::__do_timed_wait(v4, &v11, v10);
  std::chrono::steady_clock::now();
LABEL_17:
  if (v11.__owns_)
    std::mutex::unlock(v11.__m_);
}

void sub_1000196D4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

uint64_t sub_100019784(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1000197E8()
{
  operator delete();
}

__n128 sub_1000197FC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_10016EA80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100019834(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10016EA80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100019854(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(*(_QWORD *)a2 + 20) != 1)
    return sub_1000198C4(*(_QWORD *)(result + 8), *(_DWORD *)(result + 16), 1);
  return result;
}

uint64_t sub_10001987C(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_10016ED10))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000198B8()
{
  return &off_10016ED10;
}

uint64_t sub_1000198C4(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[65];

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 240);
  v8 = **(_QWORD **)(a1 + 192) + *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) * a2;
  v9 = *(_QWORD *)(v7 + 8 * a2);
  if (!v9)
  {
    (***(void (****)(_QWORD *__return_ptr))(a1 + 8))(v15);
    v12 = v15[0];
    v15[0] = 0;
    v13 = *(_QWORD *)(v7 + 8 * v6);
    *(_QWORD *)(v7 + 8 * v6) = v12;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v14 = v15[0];
      v15[0] = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
    v9 = *(_QWORD *)(v7 + 8 * v6);
  }
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v8);
  if (a3)
    sub_100019B3C(a1 + 208, v8, a2, v10);
  return v10;
}

_QWORD *sub_100019A54(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100019B7C((uint64_t)a1, a2);
  *a1 = off_10016EB08;
  a1[45] = &off_10016EC08;
  a1[46] = &off_10016EC30;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10016EB08;
  a1[45] = off_10016EB90;
  a1[46] = off_10016EBB8;
  return a1;
}

void sub_100019AD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100019BF8(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100019AFC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016EBD0);
  sub_100019BF8(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100019B3C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v6;
  int v7;

  v7 = a3;
  v6 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_100017C6C();
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, int *))(*(_QWORD *)v4 + 48))(v4, a2, &v7, &v6);
}

uint64_t sub_100019B7C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10016ECA0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100019BE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100019BF8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10016ECA0;
  sub_100019EB0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100019C94(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016EBD0);
  sub_100019BF8(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100019CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100019D1C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100019D68(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016EBD0);
  sub_100019BF8(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100019DA0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016EBD0);
  sub_100019BF8(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100019DF0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016EBD0);
  sub_100019BF8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100019E30(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016EBD0);
  sub_100019BF8(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100019E8C(uint64_t a1)
{
  sub_100019BF8(a1);
  operator delete();
}

uint64_t sub_100019EB0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10001A000((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100019FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10001A000(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  int *result;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v19 = 0;
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16)))
      v9 = 3;
    else
      v9 = 2;
    v10 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v21 = v4;
    v22 = 2080;
    v23 = v10;
    v24 = 2048;
    v25 = 232;
    v26 = 2082;
    v27 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(v9, &v19, 0, 0, &_mh_execute_header, v7, v8, "%.*s: <%lu> %{public}s", buf, 38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v21 = v4;
      v22 = 2080;
      v23 = v16;
      v24 = 2048;
      v25 = 232;
      v26 = 2082;
      v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_10001A1F4(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    sub_10001A234();
  }
  v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4)
    goto LABEL_5;
  return a1;
}

void sub_10001A234()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void sub_10001A268(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10001A2E4(void ***a1)
{
  void **v1;
  NSObject **v2;
  NSObject **v4;
  void *v5;

  v1 = *a1;
  v2 = (NSObject **)**a1;
  if (v2)
  {
    v4 = (NSObject **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_100100B68(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_10001A354(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10001A694((uint64_t)a1, a2);
  *a1 = off_10016ED38;
  a1[45] = &off_10016EE38;
  a1[46] = &off_10016EE60;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10016ED38;
  a1[45] = off_10016EDC0;
  a1[46] = off_10016EDE8;
  return a1;
}

void sub_10001A3D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10001A710(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001A3FC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016EE00);
  sub_10001A710(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_10001A43C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10001AD0C((uint64_t)a1, a2);
  *a1 = off_10016EF58;
  a1[45] = &off_10016F058;
  a1[46] = &off_10016F080;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10016EF58;
  a1[45] = off_10016EFE0;
  a1[46] = off_10016F008;
  return a1;
}

void sub_10001A4C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10001AD88(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001A4E4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016F020);
  sub_10001AD88(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_10001A524(uint64_t a1, uint64_t a2)
{
  dispatch_queue_t *v3;
  dispatch_queue_t *i;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[5];
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v15 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
  sub_10001B404(a1, &v15, a2, &v16);
  v3 = *(dispatch_queue_t **)(a1 + 16);
  for (i = *(dispatch_queue_t **)(a1 + 24); v3 != i; ++v3)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3321888768;
    v13[2] = sub_10001B384;
    v13[3] = &unk_10016F160;
    v13[4] = v16;
    v14 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    sub_100100CA8(v3, v13);
    v7 = v14;
    if (v14)
    {
      v8 = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_10001A678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_100012168(v8);
  sub_100012168((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001A694(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10016EED0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10001A6FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001A710(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10016EED0;
  sub_10001A9C8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10001A7AC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016EE00);
  sub_10001A710(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10001A800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10001A834(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_10001A880(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016EE00);
  sub_10001A710(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10001A8B8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016EE00);
  sub_10001A710(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_10001A908(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016EE00);
  sub_10001A710(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10001A948(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016EE00);
  sub_10001A710(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10001A9A4(uint64_t a1)
{
  sub_10001A710(a1);
  operator delete();
}

uint64_t sub_10001A9C8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10001AB18((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10001AAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10001AB18(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  int *result;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v19 = 0;
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16)))
      v9 = 3;
    else
      v9 = 2;
    v10 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v21 = v4;
    v22 = 2080;
    v23 = v10;
    v24 = 2048;
    v25 = 182;
    v26 = 2082;
    v27 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(v9, &v19, 0, 0, &_mh_execute_header, v7, v8, "%.*s: <%lu> %{public}s", buf, 38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v21 = v4;
      v22 = 2080;
      v23 = v16;
      v24 = 2048;
      v25 = 182;
      v26 = 2082;
      v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10001AD0C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10016F0F0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10001AD74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001AD88(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10016F0F0;
  sub_10001B040(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10001AE24(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10016F020);
  sub_10001AD88(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10001AE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10001AEAC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_10001AEF8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016F020);
  sub_10001AD88(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10001AF30(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10016F020);
  sub_10001AD88(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_10001AF80(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016F020);
  sub_10001AD88(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10001AFC0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10016F020);
  sub_10001AD88(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10001B01C(uint64_t a1)
{
  sub_10001AD88(a1);
  operator delete();
}

uint64_t sub_10001B040(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10001B190((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10001B168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10001B190(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  int *result;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v19 = 0;
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16)))
      v9 = 3;
    else
      v9 = 2;
    v10 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v21 = v4;
    v22 = 2080;
    v23 = v10;
    v24 = 2048;
    v25 = 185;
    v26 = 2082;
    v27 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(v9, &v19, 0, 0, &_mh_execute_header, v7, v8, "%.*s: <%lu> %{public}s", buf, 38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v21 = v4;
      v22 = 2080;
      v23 = v16;
      v24 = 2048;
      v25 = 185;
      v26 = 2082;
      v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_10001B384(uint64_t a1)
{
  return sub_10001B38C(*(_QWORD **)(a1 + 32));
}

_QWORD *sub_10001B38C(_QWORD *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  v1 = (unsigned int *)(result + 5);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    v4 = result[4];
    if (!v4)
      sub_100017C6C();
    return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v4 + 48))(result[4], *result);
  }
  return result;
}

uint64_t sub_10001B3D8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_10001B3FC(uint64_t a1)
{
  return sub_100012168(a1 + 32);
}

uint64_t sub_10001B404@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  char *v8;
  uint64_t result;

  v8 = (char *)operator new(0x48uLL);
  result = sub_10001B474((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 24;
  a4[1] = v8;
  return result;
}

void sub_10001B460(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001B474(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;

  *(_QWORD *)a1 = off_10016F1A0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *a3;
  *(_QWORD *)(a1 + 24) = a2;
  sub_100012568(a1 + 32, a4);
  *(_DWORD *)(a1 + 64) = v5;
  return a1;
}

void sub_10001B4BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10001B4D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10016F1A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10001B4E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10016F1A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

_QWORD *sub_10001B510(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10001B54C()
{
  operator delete();
}

_QWORD *sub_10001B560(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10016F1F0;
  result[1] = v3;
  return result;
}

uint64_t sub_10001B594(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10016F1F0;
  a2[1] = v2;
  return result;
}

void sub_10001B5B0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v1 + 112));
  std::condition_variable::notify_all((std::condition_variable *)(v1 + 64));
  std::mutex::unlock((std::mutex *)(v1 + 112));
}

uint64_t sub_10001B5E4(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_10016F260))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10001B620()
{
  return &off_10016F260;
}

void sub_10001B630()
{
  operator delete();
}

__n128 sub_10001B644(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_10016F280;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10001B67C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10016F280;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10001B69C(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 8))(*(unsigned int *)(a1 + 16), a2, *a3, *a4);
}

uint64_t sub_10001B6B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10001B6EC()
{
}

uint64_t sub_10001B6F8(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_10016F370;
  v3 = (void **)(a1 + 8);
  sub_100017FB8(&v3);
  return a1;
}

void sub_10001B73C(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = off_10016F370;
  v1 = (void **)(a1 + 8);
  sub_100017FB8(&v1);
  operator delete();
}

void *sub_10001B794(uint64_t a1)
{
  void *v2;

  v2 = operator new(0x28uLL);
  *(_QWORD *)v2 = off_10016F370;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 1) = 0;
  sub_100017ED8((char *)v2 + 8, *(_QWORD **)(a1 + 8), *(_QWORD **)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4);
  *((_QWORD *)v2 + 4) = *(_QWORD *)(a1 + 32);
  return v2;
}

void sub_10001B7EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_10001B800(uint64_t a1, uint64_t a2)
{
  char *result;

  *(_QWORD *)a2 = off_10016F370;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = sub_100017ED8((char *)(a2 + 8), *(_QWORD **)(a1 + 8), *(_QWORD **)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  return result;
}

void sub_10001B850(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 8);
  sub_100017FB8(&v1);
}

void sub_10001B878(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  sub_100017FB8(&v2);
  operator delete(a1);
}

uint64_t sub_10001B8B4(uint64_t result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  **(_BYTE **)(result + 32) = 1;
  v1 = *(uint64_t **)(result + 8);
  v2 = *(uint64_t **)(result + 16);
  while (v1 != v2)
  {
    v3 = *v1;
    v1 += 2;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return result;
}

uint64_t sub_10001B8F8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10001B934()
{
}

id frk_unwrapped_symmetric_key_with_shipping_private_key(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  const __CFString **v25;
  NSErrorUserInfoKey *v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  id v30;
  id v31;
  id v32;
  NSErrorUserInfoKey v33;
  const __CFString *v34;
  NSErrorUserInfoKey v35;
  const __CFString *v36;
  NSErrorUserInfoKey v37;
  const __CFString *v38;
  NSErrorUserInfoKey v39;
  const __CFString *v40;
  NSErrorUserInfoKey v41;
  const __CFString *v42;

  v5 = a2;
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectForKey:", CFSTR("com.apple.wkms.fcs-response")));
  v7 = (void *)v6;
  if (!v5)
  {
    v29 = a3;
    v41 = NSLocalizedDescriptionKey;
    v42 = CFSTR("ERROR: Shipping private key is NULL.");
    v16 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v42, &v41, 1));
    v22 = 26;
LABEL_14:
    v19 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.internal.fetchrestorekeys"), v22, v16));
    v8 = 0;
    v10 = 0;
    v12 = 0;
LABEL_16:
    v18 = 0;
    v20 = 0;
    goto LABEL_17;
  }
  if (!v6)
  {
    v29 = a3;
    v39 = NSLocalizedDescriptionKey;
    v40 = CFSTR("ERROR: This archive does not contain a shipping key response.");
    v16 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v40, &v39, 1));
    v22 = 25;
    goto LABEL_14;
  }
  v32 = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", v6, 0, &v32));
  v9 = v32;
  if (!v8)
  {
    v10 = 0;
    v12 = 0;
    v18 = 0;
    v20 = 0;
    if (!a3)
      goto LABEL_19;
    goto LABEL_18;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("wrapped-key")));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("enc-request")));
  v29 = a3;
  if (!v10
    || (v13 = objc_opt_class(NSString, v11), (objc_opt_isKindOfClass(v10, v13) & 1) == 0)
    || !v12
    || (v15 = objc_opt_class(NSString, v14), (objc_opt_isKindOfClass(v12, v15) & 1) == 0))
  {
    v37 = NSLocalizedDescriptionKey;
    v38 = CFSTR("ERROR: Response dictionary is missing required keys. Will fail");
    v16 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1));
    v19 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.internal.fetchrestorekeys"), 23, v16));

    goto LABEL_16;
  }
  v16 = objc_msgSend(objc_alloc((Class)NSData), "initWithBase64EncodedString:options:", v10, 0);
  v17 = objc_msgSend(objc_alloc((Class)NSData), "initWithBase64EncodedString:options:", v12, 0);
  v28 = v17;
  if (!v16)
  {
    v35 = NSLocalizedDescriptionKey;
    v36 = CFSTR("ERROR: shipping key wrapped-key failed base64 decode");
    v25 = &v36;
    v26 = &v35;
LABEL_24:
    v19 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v25, v26, 1, v17));
    v27 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.internal.fetchrestorekeys"), 19, v19));

    v21 = (id)v27;
    v18 = 0;
    v20 = 0;
    goto LABEL_25;
  }
  if (!v17)
  {
    v33 = NSLocalizedDescriptionKey;
    v34 = CFSTR("ERROR: shipping key enc-request failed base64 decode");
    v25 = &v34;
    v26 = &v33;
    goto LABEL_24;
  }
  v31 = v9;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[CryptoKitWrapper convertPrivateKeyTox963WithPemPrivateKey:error:](_TtC16FetchRestoreKeys16CryptoKitWrapper, "convertPrivateKeyTox963WithPemPrivateKey:error:", v5, &v31));
  v19 = v31;

  if (!v18)
  {
    v20 = 0;
    goto LABEL_26;
  }
  v30 = v19;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[CryptoKitWrapper unwrapEncryptionKeyWithWrappedKey:encapsulatedKey:privateKey:error:](_TtC16FetchRestoreKeys16CryptoKitWrapper, "unwrapEncryptionKeyWithWrappedKey:encapsulatedKey:privateKey:error:", v16, v28, v18, &v30));
  v21 = v30;
LABEL_25:

  v19 = v21;
LABEL_26:

LABEL_17:
  v9 = v19;
  a3 = v29;
  if (v29)
LABEL_18:
    *a3 = objc_retainAutorelease(v9);
LABEL_19:
  v23 = v20;

  return v23;
}

id frk_metadata_from_aea_auth_data(AEAAuthData_impl *a1, _QWORD *a2)
{
  void *v4;
  uint32_t EntryCount;
  uint32_t v6;
  uint32_t v7;
  size_t v8;
  void *v9;
  void *v10;
  uint8_t *v11;
  uint8_t *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  const __CFString **v19;
  NSErrorUserInfoKey *v20;
  void *v22;
  size_t data_size;
  size_t key_length;
  NSErrorUserInfoKey v25;
  const __CFString *v26;
  NSErrorUserInfoKey v27;
  const __CFString *v28;
  NSErrorUserInfoKey v29;
  const __CFString *v30;
  NSErrorUserInfoKey v31;
  const __CFString *v32;
  NSErrorUserInfoKey v33;
  const __CFString *v34;
  NSErrorUserInfoKey v35;
  const __CFString *v36;
  NSErrorUserInfoKey v37;
  const __CFString *v38;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  EntryCount = AEAAuthDataGetEntryCount(a1);
  if (!EntryCount)
  {
LABEL_12:
    v16 = objc_msgSend(v4, "copy");
    v17 = 0;
    if (a2)
      goto LABEL_23;
    goto LABEL_24;
  }
  v6 = EntryCount;
  v7 = 0;
  while (1)
  {
    data_size = 0;
    key_length = 0;
    if (AEAAuthDataGetEntry(a1, v7, 0, 0, &key_length, 0, 0, &data_size))
    {
      v25 = NSLocalizedDescriptionKey;
      v26 = CFSTR("Failed to parse auth data blob.");
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1));
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.internal.fetchrestorekeys"), 17, v18));

      goto LABEL_22;
    }
    if (!key_length)
    {
      v37 = NSLocalizedDescriptionKey;
      v38 = CFSTR("Failed to parse key in KVS (zero size key).");
      v19 = &v38;
      v20 = &v37;
LABEL_20:
      v13 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v19, v20, 1));
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.internal.fetchrestorekeys"), 17, v13));
      goto LABEL_21;
    }
    v8 = ++key_length;
    if (!data_size)
    {
      v35 = NSLocalizedDescriptionKey;
      v36 = CFSTR("Failed to parse key in KVS (zero size data).");
      v19 = &v36;
      v20 = &v35;
      goto LABEL_20;
    }
    v9 = malloc_type_calloc(1uLL, v8, 0xA4E106D4uLL);
    if (!v9)
    {
      v33 = NSLocalizedDescriptionKey;
      v34 = CFSTR("KVS keyBuffer allocation failure.");
      v19 = &v34;
      v20 = &v33;
      goto LABEL_20;
    }
    v10 = v9;
    v11 = (uint8_t *)malloc_type_calloc(1uLL, data_size, 0xE9F1B555uLL);
    if (!v11)
    {
      free(v10);
      v31 = NSLocalizedDescriptionKey;
      v32 = CFSTR("KVS dataBuffer allocation failure.");
      v19 = &v32;
      v20 = &v31;
      goto LABEL_20;
    }
    v12 = v11;
    if (AEAAuthDataGetEntry(a1, v7, key_length, (char *)v10, &key_length, data_size, v11, &data_size))
    {
      free(v10);
      free(v12);
      v29 = NSLocalizedDescriptionKey;
      v30 = CFSTR("KVS data fetch failure.");
      v19 = &v30;
      v20 = &v29;
      goto LABEL_20;
    }
    v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", v10);
    v14 = objc_alloc((Class)NSData);
    v15 = objc_msgSend(v14, "initWithBytesNoCopy:length:freeWhenDone:", v12, data_size, 1);
    free(v10);
    if (!v13 || !v15)
      break;
    objc_msgSend(v4, "setObject:forKey:", v15, v13);

    if (v6 == ++v7)
      goto LABEL_12;
  }
  v27 = NSLocalizedDescriptionKey;
  v28 = CFSTR("KVS key value - parse failure.");
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1));
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.internal.fetchrestorekeys"), 17, v22));

LABEL_21:
LABEL_22:
  v16 = 0;
  if (a2)
LABEL_23:
    *a2 = objc_retainAutorelease(v17);
LABEL_24:

  return v16;
}

void *sub_10001C1F4(uint64_t a1, void *a2)
{
  return sub_10001C9FC(a1, a2);
}

unint64_t sub_10001C208(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001DE4C(&qword_1001A05B8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10001DF14(v7, (uint64_t)&v16);
    v8 = v16;
    v9 = v17;
    result = sub_10001C8B8(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10001DF5C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001C330(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001DE4C(&qword_1001A05B0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_10001C8B8(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

Class sub_10001C45C(uint64_t a1, uint64_t a2)
{
  return sub_10001CC80(a1, a2);
}

Class sub_10001C47C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, unint64_t))
{
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Class isa;

  v7 = a3;
  v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v10 = v9;

  v11 = a5(v8, v10);
  v13 = v12;
  sub_10001DE08(v8, v10);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10001DE08(v11, v13);
  return isa;
}

uint64_t *sub_10001C564(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  return sub_10001CEE0(a1, a2, a3, a4, a5, a6);
}

Class static CryptoKitWrapper.wrappedDataDictionaryWithCert(plainText:certificate:)(uint64_t a1, uint64_t a2, __SecCertificate *a3)
{
  return sub_10001D3D4(a1, a2, a3);
}

id CryptoKitWrapper.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id CryptoKitWrapper.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CryptoKitWrapper();
  return objc_msgSendSuper2(&v2, "init");
}

id CryptoKitWrapper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CryptoKitWrapper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_10001C8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10001C91C(a1, a2, v5);
}

unint64_t sub_10001C91C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

void *sub_10001C9FC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  unint64_t v24;
  id v25;
  NSString v26;
  Class isa;
  _BYTE v29[80];
  _QWORD v30[2];
  uint64_t v31;

  v5 = type metadata accessor for String.Encoding(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = &v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = &v29[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v30[0] = a1;
  v30[1] = a2;
  sub_10001DED0(a1, (unint64_t)a2);
  v13 = P256.KeyAgreement.PrivateKey.init<A>(x963Representation:)(v30, &type metadata for Data, &protocol witness table for Data);
  if (!v2)
  {
    v31 = v9;
    v14 = P256.KeyAgreement.PrivateKey.pemRepresentation.getter(v13);
    v16 = v15;
    static String.Encoding.ascii.getter();
    a2 = (void *)String.data(using:allowLossyConversion:)(v8, 0, v14, v16);
    v18 = v17;
    swift_bridgeObjectRelease(v16);
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    if (v18 >> 60 == 15)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("com.apple.internal.fetchrestorekeys"));
      v20 = v19;
      v21 = sub_10001DE4C(&qword_1001A0598);
      inited = swift_initStackObject(v21, v29);
      *(_OWORD *)(inited + 16) = xmmword_10013FED0;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(_QWORD *)(inited + 40) = v23;
      a2 = &type metadata for String;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      *(_QWORD *)(inited + 48) = 0xD000000000000017;
      *(_QWORD *)(inited + 56) = 0x800000010014BF20;
      v24 = sub_10001C208(inited);
      v25 = objc_allocWithZone((Class)NSError);
      v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v24);
      objc_msgSend(v25, "initWithDomain:code:userInfo:", v26, 31, isa);

      swift_willThrow();
      (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v31);
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v31);
    }
  }
  return a2;
}

Class sub_10001CC80(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  Class isa;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  unint64_t v21;
  id v22;
  NSString v23;
  uint64_t v24;
  _BYTE v26[80];

  isa = v2;
  type metadata accessor for String.Encoding(0);
  ((void (*)(void))__chkstk_darwin)();
  v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = ((uint64_t (*)(void))__chkstk_darwin)();
  v12 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  static String.Encoding.ascii.getter(v11);
  v13 = String.init(data:encoding:)(a1, a2, v7);
  if (v14)
  {
    v15 = __chkstk_darwin(v13);
    P256.KeyAgreement.PrivateKey.init(pemRepresentation:)(v15);
    if (!v2)
    {
      v24 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(&v26[-v12], &v26[-v12], v8);
      isa = (Class)P256.KeyAgreement.PrivateKey.x963Representation.getter(v24);
      (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(&v26[-v12], v8);
    }
  }
  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("com.apple.internal.fetchrestorekeys"));
    v17 = v16;
    v18 = sub_10001DE4C(&qword_1001A0598);
    inited = swift_initStackObject(v18, v26);
    *(_OWORD *)(inited + 16) = xmmword_10013FED0;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v20;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000017;
    *(_QWORD *)(inited + 56) = 0x800000010014BF20;
    v21 = sub_10001C208(inited);
    v22 = objc_allocWithZone((Class)NSError);
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v21);
    objc_msgSend(v22, "initWithDomain:code:userInfo:", v23, 31, isa);

    swift_willThrow();
  }
  return isa;
}

uint64_t *sub_10001CEE0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  unint64_t v21;
  NSString v22;
  Class isa;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t (*v33)(char *);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  char v61[88];
  uint64_t v62;

  if (&type metadata accessor for HPKE)
    v7 = &type metadata for HPKE == 0;
  else
    v7 = 1;
  if (v7 || &nominal type descriptor for HPKE == 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("com.apple.internal.fetchrestorekeys"));
    v17 = v16;
    v18 = sub_10001DE4C(&qword_1001A0598);
    inited = swift_initStackObject(v18, v61);
    *(_OWORD *)(inited + 16) = xmmword_10013FED0;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v20;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000027;
    *(_QWORD *)(inited + 56) = 0x800000010014BEF0;
    v21 = sub_10001C208(inited);
    v13 = (uint64_t *)objc_allocWithZone((Class)NSError);
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v21);
    objc_msgSend(v13, "initWithDomain:code:userInfo:", v22, 12, isa);

    swift_willThrow();
  }
  else
  {
    v57 = a2;
    v58 = (char *)a4;
    v56 = a1;
    v12 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
    v13 = &v44;
    v62 = *(_QWORD *)(v12 - 8);
    v14 = *(_QWORD *)(v62 + 64);
    __chkstk_darwin(v12);
    v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
    v59 = a5;
    v60 = a6;
    sub_10001DED0(a5, a6);
    P256.KeyAgreement.PrivateKey.init<A>(x963Representation:)(&v59, &type metadata for Data, &protocol witness table for Data);
    if (!v6)
    {
      v49 = &v44;
      v54 = type metadata accessor for HPKE.Ciphersuite(0);
      v48 = &v44;
      v24 = *(_QWORD *)(v54 - 8);
      v25 = *(_QWORD *)(v24 + 64);
      v26 = __chkstk_darwin(v54);
      v55 = a3;
      v27 = (char *)&v44 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
      static HPKE.Ciphersuite.P256_SHA256_AES_GCM_256.getter(v26);
      v28 = type metadata accessor for HPKE.Recipient(0);
      v47 = &v44;
      v45 = v28;
      v44 = *(_QWORD *)(v28 - 8);
      v29 = __chkstk_darwin(v28);
      v31 = (char *)&v44 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
      v53 = &v44;
      __chkstk_darwin(v29);
      v32 = (char *)&v44 - v15;
      v33 = *(uint64_t (**)(char *))(v62 + 16);
      v51 = v34;
      v35 = v33((char *)&v44 - v15);
      v50 = &v44;
      __chkstk_darwin(v35);
      v36 = v54;
      v52 = v24;
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v27, v27, v54);
      v37 = v55;
      v38 = (unint64_t)v58;
      sub_10001DED0(v55, (unint64_t)v58);
      v46 = v31;
      HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:)(v32, v27, 0, 0xC000000000000000, v37, v38, v12, &protocol witness table for P256.KeyAgreement.PrivateKey);
      v58 = v27;
      v39 = v51;
      v40 = v52;
      v59 = v56;
      v60 = v57;
      v41 = sub_10001DF6C();
      v42 = v46;
      v13 = (uint64_t *)HPKE.Recipient.open<A>(_:)(&v59, &type metadata for Data, v41);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v42, v45);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v58, v36);
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v39, v12);
    }
  }
  return v13;
}

Class sub_10001D3D4(uint64_t a1, uint64_t a2, SecCertificateRef certificate)
{
  uint64_t v3;
  BOOL v4;
  __SecKey *v6;
  __SecKey *v7;
  CFDataRef v8;
  CFDataRef v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  unint64_t v20;
  id v21;
  NSString v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[5];
  CFDataRef v39;
  __SecKey *v40;
  _QWORD *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  char v53[8];

  if (&type metadata accessor for HPKE)
    v4 = &type metadata for HPKE == 0;
  else
    v4 = 1;
  if (v4 || &nominal type descriptor for HPKE == 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("com.apple.internal.fetchrestorekeys"));
    v16 = v15;
    v17 = sub_10001DE4C(&qword_1001A0598);
    inited = swift_initStackObject(v17, v53);
    *(_OWORD *)(inited + 16) = xmmword_10013FED0;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v19;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000027;
    *(_QWORD *)(inited + 56) = 0x800000010014BEF0;
    v20 = sub_10001C208(inited);
    v21 = objc_allocWithZone((Class)NSError);
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v20);
    objc_msgSend(v21, "initWithDomain:code:userInfo:", v22, 12, isa);

    swift_willThrow();
    return isa;
  }
  v50 = a2;
  v49 = a1;
  v6 = SecCertificateCopyKey(certificate);
  if (!v6)
  {
    __break(1u);
    goto LABEL_18;
  }
  v7 = v6;
  v8 = SecKeyCopyExternalRepresentation(v6, 0);
  if (!v8)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x10001DDD8);
  }
  v9 = v8;
  v10 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v11 = *(_QWORD *)(v10 - 8);
  isa = *(Class *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = ((unint64_t)isa + 15) & 0xFFFFFFFFFFFFFFF0;
  v52[0] = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v52[1] = v14;
  P256.KeyAgreement.PublicKey.init<A>(x963Representation:)(v52, &type metadata for Data, &protocol witness table for Data);
  if (v3)
  {

  }
  else
  {
    v39 = v9;
    v40 = v7;
    v47 = v38;
    v48 = type metadata accessor for HPKE.Ciphersuite(0);
    v41 = v38;
    v24 = *(_QWORD *)(v48 - 8);
    v25 = v11;
    v46 = 0;
    v26 = *(_QWORD *)(v24 + 64);
    v27 = __chkstk_darwin(v48);
    v51 = v10;
    v28 = (char *)v38 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    static HPKE.Ciphersuite.P256_SHA256_AES_GCM_256.getter(v27);
    v29 = type metadata accessor for HPKE.Sender(0);
    v42 = v38;
    v38[4] = v29;
    v38[3] = *(_QWORD *)(v29 - 8);
    v30 = __chkstk_darwin(v29);
    v32 = (char *)v38 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
    v45 = v38;
    __chkstk_darwin(v30);
    isa = (Class)((char *)v38 - v13);
    v44 = v25;
    v33 = *(uint64_t (**)(char *, char *, uint64_t))(v25 + 16);
    v34 = v48;
    v43 = (char *)v38 - v13;
    v35 = v33((char *)v38 - v13, (char *)v38 - v13, v51);
    __chkstk_darwin(v35);
    v36 = v51;
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v28, v28, v34);
    v37 = v46;
    HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)((char *)v38 - v13, v28, 0, 0xC000000000000000, v36, &protocol witness table for P256.KeyAgreement.PublicKey);
    if (!v37)
    {
      v38[2] = v32;
      v38[1] = (char *)v38 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
      v46 = v24;
      __asm { BR              X10 }
    }

    (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v34);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v36);
  }
  return isa;
}

uint64_t type metadata accessor for CryptoKitWrapper()
{
  return objc_opt_self(_TtC16FetchRestoreKeys16CryptoKitWrapper);
}

uint64_t sub_10001DE08(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    ((void (*)(void))swift_release)();
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001DE4C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_10001DE8C()
{
  unint64_t result;

  result = qword_1001A05A0;
  if (!qword_1001A05A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UnsafeRawBufferPointer, &type metadata for UnsafeRawBufferPointer);
    atomic_store(result, (unint64_t *)&qword_1001A05A0);
  }
  return result;
}

uint64_t sub_10001DED0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    ((void (*)(void))swift_retain)();
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001DF14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001DE4C(&qword_1001A05C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_10001DF5C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_10001DF6C()
{
  unint64_t result;

  result = qword_1001A05C8;
  if (!qword_1001A05C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1001A05C8);
  }
  return result;
}

uint64_t sub_10001DFB0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  size_t v5;
  size_t v6;
  __int16 v7;
  void *v8;
  void *v9;
  const void *v10;
  size_t v11;
  size_t v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  const void *v16;
  size_t v17;
  size_t v18;
  void *v19;
  void *v20;
  const void *v21;
  size_t v22;
  size_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  curl_slist **p_list;
  curl_slist *v28;
  char **p_data;
  char *v30;
  _BOOL4 v31;
  curl_slist *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v38;
  curl_slist **v39;
  curl_slist *v40;
  char **v41;
  char *v42;
  _BOOL4 v43;
  curl_slist *v44;
  char v46;
  curl_slist *list;

  v2 = malloc(0xAF8uLL);
  v3 = (uint64_t)v2;
  if (!v2)
  {
    v7 = 192;
LABEL_36:
    v33 = __error();
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c", (uint64_t)"aaS3ContextClone", v7, 80, *v33, "malloc", v34, v35, v46);
    AAS3ContextDestroy(v3);
    return 0;
  }
  memset_s(v2, 0xAF8uLL, 0, 0xAF8uLL);
  if (*(_DWORD *)a1)
  {
    *(_DWORD *)v3 = 1;
    memcpy((void *)(v3 + 4), (const void *)(a1 + 4), 0xAC4uLL);
  }
  v4 = *(const void **)(a1 + 2760);
  if (v4)
  {
    v5 = strlen(*(const char **)(a1 + 2760));
    v6 = v5 + 1;
    if (v5 + 1 >= 0x2000000001)
    {
      *__error() = 12;
LABEL_13:
      v13 = (_QWORD *)(v3 + 2760);
      v7 = 198;
LABEL_35:
      *v13 = 0;
      goto LABEL_36;
    }
    v8 = malloc(v5 + 1);
    if (!v8)
      goto LABEL_13;
    v9 = v8;
    memcpy(v8, v4, v6);
    *(_QWORD *)(v3 + 2760) = v9;
  }
  v10 = *(const void **)(a1 + 2768);
  if (v10)
  {
    v11 = strlen(*(const char **)(a1 + 2768));
    v12 = v11 + 1;
    if (v11 + 1 >= 0x2000000001)
    {
      *__error() = 12;
LABEL_19:
      v13 = (_QWORD *)(v3 + 2768);
      v7 = 199;
      goto LABEL_35;
    }
    v14 = malloc(v11 + 1);
    if (!v14)
      goto LABEL_19;
    v15 = v14;
    memcpy(v14, v10, v12);
    *(_QWORD *)(v3 + 2768) = v15;
  }
  v16 = *(const void **)(a1 + 2776);
  if (v16)
  {
    v17 = strlen(*(const char **)(a1 + 2776));
    v18 = v17 + 1;
    if (v17 + 1 >= 0x2000000001)
    {
      *__error() = 12;
LABEL_25:
      v13 = (_QWORD *)(v3 + 2776);
      v7 = 200;
      goto LABEL_35;
    }
    v19 = malloc(v17 + 1);
    if (!v19)
      goto LABEL_25;
    v20 = v19;
    memcpy(v19, v16, v18);
    *(_QWORD *)(v3 + 2776) = v20;
  }
  v21 = *(const void **)(a1 + 2784);
  if (v21)
  {
    v22 = strlen(*(const char **)(a1 + 2784));
    v23 = v22 + 1;
    if (v22 + 1 >= 0x2000000001)
    {
      *__error() = 12;
LABEL_34:
      v13 = (_QWORD *)(v3 + 2784);
      v7 = 201;
      goto LABEL_35;
    }
    v24 = malloc(v22 + 1);
    if (!v24)
      goto LABEL_34;
    v25 = v24;
    memcpy(v24, v21, v23);
    *(_QWORD *)(v3 + 2784) = v25;
  }
  v26 = *(_QWORD *)(a1 + 2792);
  if (v26)
  {
    list = 0;
    p_list = &list;
    while (1)
    {
      v28 = (curl_slist *)malloc(0x10uLL);
      if (!v28)
        break;
      p_data = &v28->data;
      v28->data = 0;
      v28->next = 0;
      *p_list = v28;
      v30 = strdup(*(const char **)v26);
      *p_data = v30;
      if (!v30)
        break;
      p_list = (curl_slist **)(p_data + 1);
      v26 = *(_QWORD *)(v26 + 8);
      if (!v26)
      {
        v31 = 1;
        v32 = list;
        goto LABEL_39;
      }
    }
    curl_slist_free_all(list);
    v32 = 0;
    v31 = *(_QWORD *)(a1 + 2792) != 0;
LABEL_39:
    *(_QWORD *)(v3 + 2792) = v32;
    if (v31 && v32 == 0)
    {
      v7 = 202;
      goto LABEL_36;
    }
  }
  else
  {
    *(_QWORD *)(v3 + 2792) = 0;
  }
  v38 = *(_QWORD *)(a1 + 2800);
  if (!v38)
  {
    *(_QWORD *)(v3 + 2800) = 0;
    return v3;
  }
  list = 0;
  v39 = &list;
  while (1)
  {
    v40 = (curl_slist *)malloc(0x10uLL);
    if (!v40)
      break;
    v41 = &v40->data;
    v40->data = 0;
    v40->next = 0;
    *v39 = v40;
    v42 = strdup(*(const char **)v38);
    *v41 = v42;
    if (!v42)
      break;
    v39 = (curl_slist **)(v41 + 1);
    v38 = *(_QWORD *)(v38 + 8);
    if (!v38)
    {
      v43 = 1;
      v44 = list;
      goto LABEL_53;
    }
  }
  curl_slist_free_all(list);
  v44 = 0;
  v43 = *(_QWORD *)(a1 + 2800) != 0;
LABEL_53:
  *(_QWORD *)(v3 + 2800) = v44;
  if (v43 && v44 == 0)
  {
    v7 = 203;
    goto LABEL_36;
  }
  return v3;
}

void AAS3ContextDestroy(uint64_t a1)
{
  if (a1)
  {
    free(*(void **)(a1 + 2760));
    free(*(void **)(a1 + 2768));
    free(*(void **)(a1 + 2776));
    free(*(void **)(a1 + 2784));
    curl_slist_free_all(*(curl_slist **)(a1 + 2792));
    curl_slist_free_all(*(curl_slist **)(a1 + 2800));
    memset_s((void *)a1, 0xAF8uLL, 0, 0xAF8uLL);
    free((void *)a1);
  }
}

void *AAS3ContextCreate()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v0 = malloc(0xAF8uLL);
  v1 = v0;
  if (!v0)
  {
    v9 = __error();
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c", (uint64_t)"AAS3ContextCreate", 355, 80, *v9, "malloc", v10, v11, v13);
    goto LABEL_5;
  }
  memset_s(v0, 0xAF8uLL, 0, 0xAF8uLL);
  if ((AAS3ContextSetFieldString((uint64_t)v1, 5, "Not A Ninja/1.0", v2, v3, v4, v5, v6) & 0x80000000) != 0)
  {
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c", (uint64_t)"AAS3ContextCreate", 358, 80, 0, "set context", v7, v8, v13);
    memset_s(v1, 0xAF8uLL, 0, 0xAF8uLL);
LABEL_5:
    free(v1);
    return 0;
  }
  return v1;
}

uint64_t AAS3ContextSetFieldString(uint64_t a1, int a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void **v9;
  curl_slist **v10;
  curl_slist *v11;
  curl_slist *v12;
  uint64_t result;
  size_t v14;
  size_t v15;
  void *v16;
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  char v22;

  switch(a2)
  {
    case 0:
      v9 = (void **)(a1 + 2760);
      if (__s)
        goto LABEL_17;
      goto LABEL_20;
    case 1:
      v9 = (void **)(a1 + 2768);
      if (!__s)
        goto LABEL_20;
      goto LABEL_17;
    case 2:
      v9 = (void **)(a1 + 2776);
      if (!__s)
        goto LABEL_20;
      goto LABEL_17;
    case 3:
      v10 = (curl_slist **)(a1 + 2792);
      if (!__s)
        return 0;
      goto LABEL_12;
    case 4:
      v10 = (curl_slist **)(a1 + 2800);
      if (!__s)
        return 0;
LABEL_12:
      if (!*__s)
        return 0;
      v11 = curl_slist_append(*v10, __s);
      if (v11)
      {
        v12 = v11;
        result = 0;
        *v10 = v12;
        return result;
      }
      v18 = *__error();
      v21 = 407;
      goto LABEL_26;
    case 5:
      v9 = (void **)(a1 + 2784);
      if (!__s)
        goto LABEL_20;
LABEL_17:
      if (!*__s)
      {
LABEL_20:
        v16 = 0;
LABEL_21:
        free(*v9);
        result = 0;
        *v9 = v16;
        return result;
      }
      v14 = strlen(__s);
      v15 = v14 + 1;
      if (v14 + 1 >= 0x2000000001)
      {
        *__error() = 12;
        goto LABEL_24;
      }
      v17 = malloc(v14 + 1);
      if (v17)
      {
        v16 = v17;
        memcpy(v17, __s, v15);
        goto LABEL_21;
      }
LABEL_24:
      v18 = *__error();
      v21 = 399;
LABEL_26:
      sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c", (uint64_t)"AAS3ContextSetFieldString", v21, 80, v18, "malloc", v19, v20, v22);
      return 0xFFFFFFFFLL;
    default:
      sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c", (uint64_t)"AAS3ContextSetFieldString", 391, 80, 0, "invalid field %u", a7, a8, a2);
      return 0xFFFFFFFFLL;
  }
}

uint64_t sub_10001E5E4(uint64_t a1)
{
  double v2;
  FILE *v3;
  unint64_t v4;
  unint64_t v5;
  FILE *v6;
  unint64_t v7;
  timeval v9;

  if (a1)
  {
    if (*(_QWORD *)a1 >> 62)
    {
      v9.tv_sec = 0;
      *(_QWORD *)&v9.tv_usec = 0;
      gettimeofday(&v9, 0);
      v2 = (double)v9.tv_sec + (double)v9.tv_usec * 0.000001 - *(double *)(a1 + 40);
      fwrite("AAS3DownloadStream (curl)\n", 0x1AuLL, 1uLL, __stderrp);
      v3 = __stderrp;
      v4 = atomic_load((unint64_t *)(a1 + 32));
      v5 = atomic_load((unint64_t *)(a1 + 32));
      fprintf(v3, "%12llu bytes downloaded (%.2f MB)\n", v4, (double)v5 * 0.000000953674316);
      v6 = __stderrp;
      v7 = atomic_load((unint64_t *)(a1 + 32));
      fprintf(v6, "%12.2f MB/s download speed\n", (double)v7 / v2 * 0.000000953674316);
    }
    sub_1000203C0(a1);
    memset_s((void *)a1, 0x30uLL, 0, 0x30uLL);
    free((void *)a1);
  }
  return 0;
}

AAByteStream_impl *sub_10001E6FC(char *a1, uint64_t a2, uint64_t a3)
{
  AAByteStream_impl *v6;
  double *v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  timeval v12;

  curl_global_init(3);
  v6 = AACustomByteStreamOpen();
  v7 = (double *)malloc(0x30uLL);
  if (!v7 || (v8 = v7, memset_s(v7, 0x30uLL, 0, 0x30uLL), !v6))
  {
    perror("malloc");
    goto LABEL_7;
  }
  if ((sub_100020294(v8, a1, a2, a3) & 0x80000000) != 0)
  {
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamCurl.c", (uint64_t)"s3DownloadStreamOpen_curl", 132, 83, 0, "s3StreamBaseInit", v9, v10, v12.tv_sec);
LABEL_7:
    AAByteStreamClose(v6);
    return 0;
  }
  v12.tv_sec = 0;
  *(_QWORD *)&v12.tv_usec = 0;
  gettimeofday(&v12, 0);
  v8[5] = (double)v12.tv_sec + (double)v12.tv_usec * 0.000001;
  AACustomByteStreamSetData(v6, v8);
  AACustomByteStreamSetCloseProc(v6, (AAByteStreamCloseProc)sub_10001E5E4);
  AACustomByteStreamSetPReadProc(v6, (AAByteStreamPReadProc)sub_10001E83C);
  AACustomByteStreamSetReadProc(v6, (AAByteStreamReadProc)sub_10001EA04);
  return v6;
}

uint64_t sub_10001E83C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  useconds_t v12;
  int v13;
  uint64_t result;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  const char *v23[2];
  char __str[200];

  *(_QWORD *)&v21 = a2;
  *((_QWORD *)&v21 + 1) = a3;
  v22 = 0;
  v5 = a2;
  if (a3)
  {
    v18 = a2;
    v6 = a4 + a3;
    v7 = a4 + a3 - 1;
    while (1)
    {
      snprintf(__str, 0xC8uLL, "Range: bytes=%llu-%llu", v6 - a3, v7);
      v11 = 0;
      v23[0] = __str;
      v23[1] = 0;
      v19 = v21;
      v20 = v22;
      v12 = 125000;
      do
      {
        if (v11)
        {
          sub_100024768((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamCurl.c", (uint64_t)"downloadStreamPRead", 65, 83, "s3Perform retry after %u ms", v8, v9, v10, v12 / 0x3E8);
          usleep(v12);
          v12 *= 2;
        }
        v21 = v19;
        v22 = v20;
        v13 = sub_10001EF70(1u, *(char **)(a1 + 8), a1, 0, &v21, 0, v23);
        if ((v13 & 0x80000000) == 0)
          break;
      }
      while (v11++ < 3);
      if (v13 < 0)
        break;
      a3 = *((_QWORD *)&v21 + 1);
      if (!*((_QWORD *)&v21 + 1))
      {
        v5 = v21;
        a2 = v18;
        goto LABEL_12;
      }
    }
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamCurl.c", (uint64_t)"downloadStreamPRead", 81, 83, 0, "s3Perform failed (after retry), %s", v9, v10, (char)__str);
    return -1;
  }
  else
  {
LABEL_12:
    result = v5 - a2;
    v16 = (unint64_t *)(a1 + 32);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + result, v16));
  }
  return result;
}

uint64_t sub_10001EA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  uint64_t v4;

  v3 = (unint64_t *)(a1 + 24);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + a3, v3));
  return sub_10001E83C(a1, a2, a3, v4);
}

uint64_t sub_10001EA1C(_DWORD *a1, unsigned int *a2, const void *a3, size_t a4)
{
  CCHmacContext v8;

  memset(&v8, 0, sizeof(v8));
  CCHmacInit(&v8, 2u, a2 + 1, *a2);
  CCHmacUpdate(&v8, a3, a4);
  CCHmacFinal(&v8, a1 + 1);
  *a1 = 32;
  memset_s(a1 + 9, 0xE0uLL, 0, 0xE0uLL);
  memset_s(&v8, 0x180uLL, 0, 0x180uLL);
  return 0;
}

uint64_t sub_10001EAE8(uint64_t a1, const void *a2, CC_LONG a3)
{
  CC_SHA256_CTX v7;

  memset(&v7, 0, sizeof(v7));
  CC_SHA256_Init(&v7);
  CC_SHA256_Update(&v7, a2, a3);
  CC_SHA256_Final((unsigned __int8 *)(a1 + 4), &v7);
  *(_DWORD *)a1 = 32;
  memset_s((void *)(a1 + 36), 0xE0uLL, 0, 0xE0uLL);
  return memset_s(&v7, 0x68uLL, 0, 0x68uLL);
}

size_t sub_10001EB84(char *__src, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v10;

  v4 = __src;
  v5 = a3 * a2;
  v6 = *(_QWORD *)(a4 + 16);
  if (v6)
  {
    if (*(_QWORD *)(v6 + 24))
    {
      v7 = 0;
      if (v5)
      {
        while (1)
        {
          v8 = (*(uint64_t (**)(_QWORD, char *, size_t))(v6 + 24))(*(_QWORD *)v6, v4, v5);
          if (v8 < 1)
            break;
          v4 += v8;
          v7 += v8;
          v5 -= v8;
          if (!v5)
            return v7 & ~(v7 >> 63);
        }
        v7 = v8;
      }
    }
    else
    {
      v7 = -1;
    }
    return v7 & ~(v7 >> 63);
  }
  else
  {
    if (v5 >= *(_QWORD *)(a4 + 8))
      v5 = *(_QWORD *)(a4 + 8);
    memcpy(*(void **)a4, __src, v5);
    v10 = *(_QWORD *)(a4 + 8) - v5;
    *(_QWORD *)a4 += v5;
    *(_QWORD *)(a4 + 8) = v10;
    return v5;
  }
}

size_t sub_10001EC38(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v10;

  v4 = __dst;
  v5 = a3 * a2;
  v6 = *(_QWORD *)(a4 + 16);
  if (v6)
  {
    if (*(_QWORD *)(v6 + 16))
    {
      v7 = 0;
      if (v5)
      {
        while (1)
        {
          v8 = (*(uint64_t (**)(_QWORD, char *, size_t))(v6 + 16))(*(_QWORD *)v6, v4, v5);
          if (v8 < 0)
            break;
          if (v8)
          {
            v4 += v8;
            v7 += v8;
            v5 -= v8;
            if (v5)
              continue;
          }
          return v7 & ~(v7 >> 63);
        }
        v7 = v8;
      }
    }
    else
    {
      v7 = -1;
    }
    return v7 & ~(v7 >> 63);
  }
  else
  {
    if (v5 >= *(_QWORD *)(a4 + 8))
      v5 = *(_QWORD *)(a4 + 8);
    memcpy(__dst, *(const void **)a4, v5);
    v10 = *(_QWORD *)(a4 + 8) - v5;
    *(_QWORD *)a4 += v5;
    *(_QWORD *)(a4 + 8) = v10;
    return v5;
  }
}

uint64_t sub_10001ECEC(curl_slist **a1, char *__format, ...)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  size_t v9;
  char *v10;
  char *v11;
  const char *v12;
  __int16 v13;
  int v14;
  curl_slist *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  va_list va;

  va_start(va, __format);
  v4 = vsnprintf(0, 0, __format, va);
  if (v4 < 0)
  {
    v11 = 0;
LABEL_8:
    v12 = "vsnprintf";
    v13 = 156;
    v14 = 0;
LABEL_12:
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3HeaderAppendWithFormat", v13, 84, v14, v12, v5, v6, v20);
    v18 = 0xFFFFFFFFLL;
    v7 = v11;
  }
  else
  {
    v7 = 0;
    v8 = 1;
    while ((v8 & 1) != 0)
    {
      v9 = (v4 + 1);
      v10 = (char *)realloc(v7, v9);
      v11 = v10;
      if (!v10)
      {
        free(v7);
        v14 = *__error();
        v12 = "malloc";
        v13 = 161;
        goto LABEL_12;
      }
      v4 = vsnprintf(v10, v9, __format, va);
      v8 = 0;
      v7 = v11;
      if (v4 < 0)
        goto LABEL_8;
    }
    v15 = curl_slist_append(*a1, v7);
    if (v15)
    {
      v18 = 0;
      *a1 = v15;
    }
    else
    {
      sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3HeaderAppendWithFormat", 168, 84, 0, "curl_slist_append failed\n", v16, v17, v20);
      v18 = 0xFFFFFFFFLL;
    }
  }
  free(v7);
  return v18;
}

uint64_t sub_10001EE50(curl_slist **a1, const char *a2)
{
  curl_slist *v3;
  uint64_t v4;
  uint64_t v5;
  curl_slist *v6;
  char v8;

  v3 = curl_slist_append(*a1, a2);
  v6 = v3;
  if (v3)
    *a1 = v3;
  else
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3HeaderAppend", 182, 84, 0, "curl_slist_append failed\n", v4, v5, v8);
  if (v6)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

unint64_t sub_10001EEB4(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = a3 * a2;
  if ((*(_DWORD *)(a4 + 8) & 0x80000000) != 0)
  {
    v11 = 499;
    curl_easy_getinfo(*(CURL **)a4, CURLINFO_RESPONSE_CODE, &v11);
    v7 = v11;
    *(_DWORD *)(a4 + 8) = v11;
    if (v7 == 200)
    {
      if (*(_DWORD *)(a4 + 12))
        *(_QWORD *)(a4 + 24) = *(_QWORD *)(a4 + 16);
    }
  }
  v8 = *(_QWORD *)(a4 + 24);
  v9 = v6 - v8;
  if (v6 >= v8)
  {
    if (v8)
    {
      a1 += v8;
      *(_QWORD *)(a4 + 24) = 0;
    }
    else
    {
      v9 = v6;
    }
    sub_10001EB84(a1, v9, 1, *(_QWORD *)(a4 + 32));
  }
  else
  {
    *(_QWORD *)(a4 + 24) = v8 - v6;
  }
  return v6;
}

uint64_t sub_10001EF70(unsigned int a1, char *a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, const char **a7)
{
  uint64_t v14;
  uint64_t v15;
  CURL *v16;
  uint64_t v17;
  const char *v18;
  const char **v19;
  const char *v20;
  CURLcode v21;
  CURLcode v22;
  CURLcode v23;
  _BOOL4 v24;
  BOOL v25;
  FILE *v26;
  const char *v27;
  size_t v28;
  uint64_t v29;
  CURLcode v31;
  unsigned __int32 v32;
  CURLcode v33;
  CURLcode v34;
  const char *v35;
  uint64_t v36;
  char v37;
  const char *v38;
  int v39;
  int v40;
  char v41;
  const char *v42;
  int v43;
  int v44;
  CURLcode v45;
  CURLcode v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 *v57;
  __int128 v58;
  uint64_t v59;
  curl_slist *v60;

  v14 = *(_QWORD *)(a3 + 16);
  v60 = 0;
  if (a4)
    v15 = *(_QWORD *)(a4 + 8);
  else
    v15 = -1;
  v58 = 0uLL;
  v59 = 0;
  if (a5)
  {
    v58 = *a5;
    v59 = *((_QWORD *)a5 + 2);
  }
  v57 = 0;
  v55 = 0u;
  v56 = 0u;
  v16 = curl_easy_init();
  if (!v16)
  {
    v26 = __stderrp;
    v27 = "curl_easy_init failed\n";
    v28 = 22;
LABEL_42:
    fwrite(v27, v28, 1uLL, v26);
    goto LABEL_43;
  }
  if ((sub_10001EE50(&v60, "Content-Type:") & 0x80000000) != 0
    || (sub_10001EE50(&v60, "Transfer-Encoding:") & 0x80000000) != 0
    || (sub_10001EE50(&v60, "Accept: application/xml") & 0x80000000) != 0
    || (v15 & 0x8000000000000000) == 0 && (sub_10001ECEC(&v60, "Content-Length: %zd", v15) & 0x80000000) != 0)
  {
    goto LABEL_43;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 2792);
  if (v17)
  {
    while ((sub_10001EE50(&v60, *(const char **)v17) & 0x80000000) == 0)
    {
      v17 = *(_QWORD *)(v17 + 8);
      if (!v17)
        goto LABEL_15;
    }
    goto LABEL_43;
  }
LABEL_15:
  if (a7)
  {
    v18 = *a7;
    if (*a7)
    {
      v19 = a7 + 1;
      while ((sub_10001EE50(&v60, v18) & 0x80000000) == 0)
      {
        v20 = *v19++;
        v18 = v20;
        if (!v20)
          goto LABEL_20;
      }
      goto LABEL_43;
    }
  }
LABEL_20:
  if (*(_DWORD *)v14 && (sub_10001F594(&v60, a1, a2, v14, a4) & 0x80000000) != 0)
  {
    v26 = __stderrp;
    v27 = "Failed to sign request\n";
    v28 = 23;
    goto LABEL_42;
  }
  v21 = curl_easy_setopt(v16, CURLOPT_URL, a2);
  v22 = curl_easy_setopt(v16, CURLOPT_HTTPHEADER, v60);
  v23 = curl_easy_setopt(v16, CURLOPT_BUFFERSIZE, 102400);
  v24 = (curl_easy_setopt(v16, CURLOPT_TCP_KEEPALIVE, 1) | v23 | v22 | v21) == 0;
  if (*(_QWORD *)(v14 + 2784) && curl_easy_setopt(v16, CURLOPT_USERAGENT, *(_QWORD *)(v14 + 2784)))
    v24 = 0;
  if (*(_QWORD *)(v14 + 2760) && curl_easy_setopt(v16, CURLOPT_PROXY, *(_QWORD *)(v14 + 2760)))
    v24 = 0;
  if (*(_QWORD *)(v14 + 2768) && curl_easy_setopt(v16, CURLOPT_PINNEDPUBLICKEY, *(_QWORD *)(v14 + 2768)))
    v24 = 0;
  if (*(_QWORD *)(v14 + 2776) && curl_easy_setopt(v16, CURLOPT_PROXY_PINNEDPUBLICKEY, *(_QWORD *)(v14 + 2776)))
    v24 = 0;
  if (*(_QWORD *)(v14 + 2800) && curl_easy_setopt(v16, CURLOPT_PROXYHEADER, *(_QWORD *)(v14 + 2800)))
    v24 = 0;
  if (a1 != 2)
  {
    if (a1 == 1)
    {
      v33 = curl_easy_setopt(v16, CURLOPT_CUSTOMREQUEST, "GET");
      v25 = (curl_easy_setopt(v16, CURLOPT_FOLLOWLOCATION, 1) | v33) == 0;
    }
    else
    {
      if (a1)
        goto LABEL_53;
      v25 = curl_easy_setopt(v16, CURLOPT_PUT, 1) == CURLE_OK;
    }
    if (!v25)
      v24 = 0;
LABEL_53:
    if (!a4)
      goto LABEL_57;
    goto LABEL_54;
  }
  if (curl_easy_setopt(v16, CURLOPT_POST, 1))
    v24 = 0;
  if (!a4)
  {
    v31 = curl_easy_setopt(v16, CURLOPT_POSTFIELDS, "");
    v32 = curl_easy_setopt(v16, CURLOPT_POSTFIELDSIZE, 0) | v31;
    goto LABEL_55;
  }
LABEL_54:
  v34 = curl_easy_setopt(v16, CURLOPT_READFUNCTION, sub_10001EC38);
  v32 = curl_easy_setopt(v16, CURLOPT_READDATA, a4) | v34;
LABEL_55:
  if (v32)
    v24 = 0;
LABEL_57:
  if (a5)
  {
    *(_QWORD *)&v55 = v16;
    v57 = a5;
    DWORD2(v55) = -1;
    if (a7)
    {
      v35 = *a7;
      if (*a7)
      {
        v36 = 0;
        do
        {
          if (!strncmp(v35, "Range:", 6uLL))
          {
            v39 = *((unsigned __int8 *)v35 + 6);
            v38 = v35 + 6;
            v37 = v39;
            if (v39)
            {
              do
              {
                if (v37 < 0)
                {
                  if (!__maskrune(v37, 0x4000uLL))
                    break;
                }
                else if ((_DefaultRuneLocale.__runetype[v37] & 0x4000) == 0)
                {
                  break;
                }
                v40 = *(unsigned __int8 *)++v38;
                v37 = v40;
              }
              while (v40);
            }
            if (!strncmp(v38, "bytes=", 6uLL))
            {
              v43 = *((unsigned __int8 *)v38 + 6);
              v42 = v38 + 6;
              v41 = v43;
              if (v43)
              {
                do
                {
                  if (v41 < 0)
                  {
                    if (!__maskrune(v41, 0x4000uLL))
                      break;
                  }
                  else if ((_DefaultRuneLocale.__runetype[v41] & 0x4000) == 0)
                  {
                    break;
                  }
                  v44 = *(unsigned __int8 *)++v42;
                  v41 = v44;
                }
                while (v44);
              }
              HIDWORD(v55) = 1;
              *(_QWORD *)&v56 = strtoull(v42, 0, 0);
            }
          }
          v35 = a7[++v36];
        }
        while (v35);
      }
    }
    v45 = curl_easy_setopt(v16, CURLOPT_WRITEFUNCTION, sub_10001EEB4);
    if (curl_easy_setopt(v16, CURLOPT_WRITEDATA, &v55) | v45)
      v24 = 0;
  }
  if (a6)
  {
    if (curl_easy_setopt(v16, CURLOPT_HEADERFUNCTION, sub_10001EB84))
      v24 = 0;
    if (curl_easy_setopt(v16, CURLOPT_HEADERDATA, a6))
      goto LABEL_86;
  }
  if (!v24)
  {
LABEL_86:
    v26 = __stderrp;
    v27 = "curl_easy_setopt failed\n";
    v28 = 24;
    goto LABEL_42;
  }
  v46 = curl_easy_perform(v16);
  if (v46 == CURLE_OK)
  {
    v54 = 499;
    curl_easy_getinfo(v16, CURLINFO_RESPONSE_CODE, &v54);
    if ((unint64_t)(v54 - 400) <= 0xC7)
    {
      if (a1 != 1 || v54 != 416)
      {
        sub_100024768((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3Perform", 401, 84, "HTTP %u\n", v51, v52, v53, v54);
        goto LABEL_43;
      }
      if (a5)
      {
        v29 = 0;
        *a5 = v58;
        *((_QWORD *)a5 + 2) = v59;
        goto LABEL_44;
      }
    }
    v29 = 0;
    goto LABEL_44;
  }
  v47 = v46;
  curl_easy_strerror(v46);
  sub_100024768((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3Perform", 379, 84, "> %d %s\n", v48, v49, v50, v47);
LABEL_43:
  v29 = 0xFFFFFFFFLL;
LABEL_44:
  curl_slist_free_all(v60);
  curl_easy_cleanup(v16);
  return v29;
}

uint64_t sub_10001F594(curl_slist **a1, unsigned int a2, char *__s, uint64_t a4, uint64_t a5)
{
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v14;
  __int16 v15;
  int v16;
  _BOOL4 v17;
  uint64_t v19;
  char *v20;
  char *v21;
  const char *v22;
  char *v23;
  const char *v24;
  char *v25;
  const char *v26;
  size_t v27;
  BOOL v28;
  uint64_t v29;
  size_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  size_t v36;
  char *v37;
  int v38;
  unsigned __int8 *v39;
  size_t v40;
  char *v41;
  int v42;
  curl_slist *v43;
  uint64_t v44;
  curl_slist *v45;
  uint64_t v46;
  const char *data;
  size_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  __darwin_ct_rune_t v54;
  size_t v55;
  size_t v56;
  char *v57;
  char *v58;
  char *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  size_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  size_t v71;
  char *v72;
  size_t v73;
  size_t v74;
  size_t v75;
  char *v76;
  size_t v77;
  char *v78;
  size_t v79;
  CC_LONG v80;
  unsigned __int8 *v81;
  uint64_t v82;
  size_t v83;
  char *v84;
  int v85;
  void **v86;
  void *v87;
  size_t v88;
  size_t v89;
  unsigned __int8 *v90;
  uint64_t v91;
  size_t v92;
  char *v93;
  int v94;
  size_t v95;
  size_t v96;
  size_t v97;
  size_t v98;
  size_t v99;
  char v100;
  curl_slist **v101;
  uint64_t v102;
  char *v103;
  size_t v104;
  char *__src;
  size_t __n;
  char *v107;
  unsigned int v108;
  const char *v109;
  char *v110;
  _QWORD *v111;
  unint64_t v112[2];
  const char *v113;
  unint64_t v114[2];
  char *v115;
  unint64_t v116[2];
  char *v117;
  unint64_t v118[2];
  char *v119;
  char v120[128];
  char __str[128];
  _OWORD __sa[16];
  int v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  int v140;

  v118[0] = 0;
  v118[1] = 0;
  v119 = 0;
  v116[0] = 0;
  v116[1] = 0;
  v117 = 0;
  v114[0] = 0;
  v114[1] = 0;
  v115 = 0;
  v112[0] = 0;
  v112[1] = 0;
  v113 = 0;
  v123 = 0;
  memset(__sa, 0, sizeof(__sa));
  v10 = strlen(__s);
  if (v10 < 7)
    goto LABEL_8;
  if (*(_DWORD *)__s == 1886680168 && *(_DWORD *)(__s + 3) == 791624304)
  {
    v19 = 7;
  }
  else
  {
    if (v10 < 8 || *(_QWORD *)__s != 0x2F2F3A7370747468)
    {
LABEL_8:
      v14 = "Invalid URL";
      v15 = 486;
LABEL_9:
      v16 = 0;
LABEL_10:
      sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3Sign", v15, 84, v16, v14, v11, v12, v100);
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    v19 = 8;
  }
  v20 = &__s[v19];
  v21 = strchr(&__s[v19], 47);
  if (!v21)
  {
    v14 = "Invalid URL";
    v15 = 488;
    goto LABEL_9;
  }
  v22 = v21;
  v110 = v20;
  v108 = a2;
  v23 = strchr(v21, 63);
  v24 = "/";
  v109 = v22;
  if (!v23)
  {
    v30 = strlen(v22);
    if (v30 <= 1)
      v29 = 1;
    else
      v29 = v30;
    if (v30)
      v24 = v22;
    goto LABEL_32;
  }
  v25 = v23;
  v26 = v23 + 1;
  v27 = strlen(v23 + 1);
  v28 = v25 == v22;
  if (v25 == v22)
    v29 = 1;
  else
    v29 = v25 - v22;
  if (!v28)
    v24 = v22;
  if (!v27)
  {
LABEL_32:
    v27 = 0;
    v26 = "";
  }
  __n = v27;
  v107 = (char *)v26;
  if ((sub_10001ECEC(a1, "X-Amz-Date: %s", (const char *)(a4 + 68)) & 0x80000000) != 0
    || *(_BYTE *)(a4 + 452)
    && (sub_10001ECEC(a1, "X-Amz-Security-Token: %s", (const char *)(a4 + 452)) & 0x80000000) != 0)
  {
    goto LABEL_11;
  }
  __src = (char *)v24;
  if (a5)
  {
    v31 = *(const void **)a5;
    v32 = *(_QWORD *)(a5 + 8);
    v140 = 0;
    v138 = 0u;
    v139 = 0u;
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    sub_10001EAE8((uint64_t)&v124, v31, v32);
    if ((_DWORD)v124)
    {
      v33 = v29;
      v34 = (unsigned __int8 *)&v124 + 4;
      v35 = 2 * v124;
      v36 = v35 | 1;
      v37 = __str;
      do
      {
        v38 = *v34++;
        snprintf(v37, v36, "%02x", v38);
        v36 -= 2;
        v37 += 2;
      }
      while (v36 != 1);
LABEL_44:
      v29 = v33;
      goto LABEL_46;
    }
  }
  else
  {
    v140 = 0;
    v138 = 0u;
    v139 = 0u;
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    sub_10001EAE8((uint64_t)&v124, 0, 0);
    if ((_DWORD)v124)
    {
      v33 = v29;
      v39 = (unsigned __int8 *)&v124 + 4;
      v35 = 2 * v124;
      v40 = v35 | 1;
      v41 = __str;
      do
      {
        v42 = *v39++;
        snprintf(v41, v40, "%02x", v42);
        v40 -= 2;
        v41 += 2;
      }
      while (v40 != 1);
      goto LABEL_44;
    }
  }
  v35 = 0;
LABEL_46:
  __str[v35] = 0;
  memset_s(&v124, 0x104uLL, 0, 0x104uLL);
  if ((sub_10001ECEC(a1, "X-Amz-Content-Sha256: %s", __str) & 0x80000000) != 0)
    goto LABEL_11;
  v43 = *a1;
  if (*a1)
  {
    v44 = 0;
    do
    {
      ++v44;
      v43 = v43->next;
    }
    while (v43);
  }
  else
  {
    v44 = 0;
  }
  v111 = calloc(v44 + 1, 8uLL);
  if (!v111)
  {
    v16 = *__error();
    v14 = "malloc";
    v15 = 520;
    goto LABEL_10;
  }
  v103 = (char *)(a4 + 68);
  v104 = v29;
  v101 = a1;
  v102 = a4;
  v45 = *a1;
  if (!v45)
  {
    v46 = 0;
LABEL_77:
    v55 = v22 - v110;
    v56 = v109 - v110 + 6;
    if (v56 >= 0x2000000001)
    {
      *__error() = 12;
LABEL_82:
      v60 = *__error();
      v63 = 554;
      goto LABEL_85;
    }
    v57 = (char *)malloc(v56);
    if (!v57)
      goto LABEL_82;
    v58 = &v57[v55];
    v111[v46] = v57;
    v57[4] = 58;
    *(_DWORD *)v57 = 1953722216;
    memcpy(v57 + 5, v110, v55);
    v58[5] = 0;
    qsort(v111, v46 + 1, 8uLL, (int (__cdecl *)(const void *, const void *))sub_100020148);
    if (v108 > 3)
      v59 = "???";
    else
      v59 = off_10016F478[v108];
    v64 = strlen(v59);
    if ((sub_100020154(v118, v59, v64) & 0x80000000) == 0
      && (sub_100020154(v118, "\n", 1uLL) & 0x80000000) == 0
      && (sub_100020154(v118, __src, v104) & 0x80000000) == 0
      && (sub_100020154(v118, "\n", 1uLL) & 0x80000000) == 0
      && (sub_100020154(v118, v107, __n) & 0x80000000) == 0
      && (sub_100020154(v118, "\n", 1uLL) & 0x80000000) == 0)
    {
      if (v46 == -1)
      {
LABEL_102:
        if ((sub_100020154(v118, "\n", 1uLL) & 0x80000000) == 0)
        {
          v72 = v117;
          v73 = strlen(v117);
          if ((sub_100020154(v118, v117, v73) & 0x80000000) == 0 && (sub_100020154(v118, "\n", 1uLL) & 0x80000000) == 0)
          {
            v74 = strlen(__str);
            if ((sub_100020154(v118, __str, v74) & 0x80000000) == 0
              && (sub_100020154(v114, "AWS4-HMAC-SHA256\n", 0x11uLL) & 0x80000000) == 0)
            {
              v75 = strlen(v103);
              if ((sub_100020154(v114, v103, v75) & 0x80000000) == 0
                && (sub_100020154(v114, "\n", 1uLL) & 0x80000000) == 0)
              {
                v76 = (char *)(v102 + 4);
                v77 = strlen((const char *)(v102 + 4));
                if ((sub_100020154(v114, (void *)(v102 + 4), v77) & 0x80000000) == 0
                  && (sub_100020154(v114, "/", 1uLL) & 0x80000000) == 0)
                {
                  v78 = (char *)(v102 + 132);
                  v79 = strlen((const char *)(v102 + 132));
                  if ((sub_100020154(v114, (void *)(v102 + 132), v79) & 0x80000000) == 0
                    && (sub_100020154(v114, "/s3/aws4_request\n", 0x11uLL) & 0x80000000) == 0)
                  {
                    v140 = 0;
                    v138 = 0u;
                    v139 = 0u;
                    v136 = 0u;
                    v137 = 0u;
                    v134 = 0u;
                    v135 = 0u;
                    v132 = 0u;
                    v133 = 0u;
                    v130 = 0u;
                    v131 = 0u;
                    v128 = 0u;
                    v129 = 0u;
                    v126 = 0u;
                    v127 = 0u;
                    v124 = 0u;
                    v125 = 0u;
                    v80 = strlen(v119);
                    sub_10001EAE8((uint64_t)&v124, v119, v80);
                    if ((_DWORD)v124)
                    {
                      v81 = (unsigned __int8 *)&v124 + 4;
                      v82 = 2 * v124;
                      v83 = v82 | 1;
                      v84 = v120;
                      do
                      {
                        v85 = *v81++;
                        snprintf(v84, v83, "%02x", v85);
                        v83 -= 2;
                        v84 += 2;
                      }
                      while (v83 != 1);
                    }
                    else
                    {
                      v82 = 0;
                    }
                    v120[v82] = 0;
                    memset_s(&v124, 0x104uLL, 0, 0x104uLL);
                    v88 = strlen(v120);
                    if ((sub_100020154(v114, v120, v88) & 0x80000000) == 0)
                    {
                      v89 = strlen(v115);
                      sub_10001EA1C(__sa, (unsigned int *)(v102 + 2500), v115, v89);
                      if (LODWORD(__sa[0]))
                      {
                        v90 = (unsigned __int8 *)__sa + 4;
                        v91 = 2 * LODWORD(__sa[0]);
                        v92 = v91 | 1;
                        v93 = v120;
                        do
                        {
                          v94 = *v90++;
                          snprintf(v93, v92, "%02x", v94);
                          v92 -= 2;
                          v93 += 2;
                        }
                        while (v92 != 1);
                      }
                      else
                      {
                        v91 = 0;
                      }
                      v120[v91] = 0;
                      if ((sub_100020154(v112, "AWS4-HMAC-SHA256 Credential=", 0x1CuLL) & 0x80000000) == 0)
                      {
                        v95 = strlen((const char *)(v102 + 196));
                        if ((sub_100020154(v112, (void *)(v102 + 196), v95) & 0x80000000) == 0
                          && (sub_100020154(v112, "/", 1uLL) & 0x80000000) == 0)
                        {
                          v96 = strlen(v76);
                          if ((sub_100020154(v112, v76, v96) & 0x80000000) == 0
                            && (sub_100020154(v112, "/", 1uLL) & 0x80000000) == 0)
                          {
                            v97 = strlen(v78);
                            if ((sub_100020154(v112, v78, v97) & 0x80000000) == 0
                              && (sub_100020154(v112, "/s3/aws4_request,SignedHeaders=", 0x1FuLL) & 0x80000000) == 0)
                            {
                              v98 = strlen(v72);
                              if ((sub_100020154(v112, v72, v98) & 0x80000000) == 0
                                && (sub_100020154(v112, ",Signature=", 0xBuLL) & 0x80000000) == 0)
                              {
                                v99 = strlen(v120);
                                if ((sub_100020154(v112, v120, v99) & 0x80000000) == 0)
                                {
                                  v17 = (int)sub_10001ECEC(v101, "Authorization: %s", v113) >= 0;
                                  goto LABEL_119;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v65 = 0;
        while (1)
        {
          v66 = (char *)v111[v65];
          v67 = strchr(v66, 58);
          if (!v67)
            break;
          v70 = v67;
          v71 = strlen(v66);
          if ((sub_100020154(v118, v66, v71) & 0x80000000) != 0
            || (sub_100020154(v118, "\n", 1uLL) & 0x80000000) != 0
            || v65 && (sub_100020154(v116, ";", 1uLL) & 0x80000000) != 0
            || (sub_100020154(v116, v66, v70 - v66) & 0x80000000) != 0)
          {
            goto LABEL_118;
          }
          if (v46 + 1 == ++v65)
            goto LABEL_102;
        }
        sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3Sign", 580, 84, 0, "Invalid header: %s", v68, v69, (char)v66);
      }
    }
LABEL_118:
    v17 = 0;
LABEL_119:
    ++v46;
    goto LABEL_120;
  }
  v46 = 0;
  while (1)
  {
    data = v45->data;
    if (strncasecmp(v45->data, "x-amz-", 6uLL))
      goto LABEL_73;
    v48 = strlen(data);
    if (v48 + 1 >= 0x2000000001)
      break;
    v49 = malloc(v48 + 1);
    if (!v49)
      goto LABEL_84;
    v50 = v49;
    v111[v46] = v49;
    if (v48)
    {
      v51 = 0;
      v52 = 0;
      v53 = 1;
      while (1)
      {
        v54 = v45->data[v51];
        if (v54 < 0)
        {
          if (!__maskrune(v45->data[v51], 0x4000uLL))
          {
LABEL_64:
            if (v54 == 58)
              v53 = 0;
            if (v53)
              LOBYTE(v54) = __tolower(v54);
            v50[v52++] = v54;
          }
        }
        else if ((_DefaultRuneLocale.__runetype[v54] & 0x4000) == 0)
        {
          goto LABEL_64;
        }
        if (v48 == ++v51)
          goto LABEL_72;
      }
    }
    v52 = 0;
LABEL_72:
    ++v46;
    v50[v52] = 0;
LABEL_73:
    v45 = v45->next;
    if (!v45)
      goto LABEL_77;
  }
  *__error() = 12;
LABEL_84:
  v60 = *__error();
  v63 = 538;
LABEL_85:
  sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3Sign", v63, 84, v60, "malloc", v61, v62, v100);
  v17 = 0;
LABEL_120:
  if (v46)
  {
    v86 = (void **)v111;
    do
    {
      v87 = *v86++;
      free(v87);
      --v46;
    }
    while (v46);
  }
  free(v111);
LABEL_12:
  memset_s(__sa, 0x104uLL, 0, 0x104uLL);
  memset_s(v120, 0x80uLL, 0, 0x80uLL);
  memset_s(__str, 0x80uLL, 0, 0x80uLL);
  sub_10002025C((uint64_t)v118);
  sub_10002025C((uint64_t)v116);
  sub_10002025C((uint64_t)v114);
  sub_10002025C((uint64_t)v112);
  if (v17)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_100020148(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

uint64_t sub_100020154(unint64_t *a1, void *__src, size_t __n)
{
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  BOOL v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v7 = *a1;
  v6 = a1[1];
  v8 = v6 + __n + 1;
  v9 = v8 >= *a1;
  v10 = v8 - *a1;
  if (!v9)
    v10 = 0;
  v11 = (v10 + 255) & 0xFFFFFFFFFFFFFF00;
  v12 = v7 + v11;
  v13 = (char *)a1[2];
  if (v7 + v11 <= v7)
    goto LABEL_8;
  if (v12 < 0x2000000001)
  {
    v14 = (char *)realloc((void *)a1[2], v7 + v11);
    if (!v14)
    {
      free(v13);
      goto LABEL_10;
    }
    a1[2] = (unint64_t)v14;
    *a1 = v12;
    v13 = v14;
    v6 = a1[1];
LABEL_8:
    memcpy(&v13[v6], __src, __n);
    result = 0;
    v16 = a1[2];
    v17 = a1[1] + __n;
    a1[1] = v17;
    *(_BYTE *)(v16 + v17) = 0;
    return result;
  }
  *__error() = 12;
LABEL_10:
  a1[2] = 0;
  v18 = __error();
  sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3StringBufferAppend", 431, 84, *v18, "malloc", v19, v20, v21);
  *a1 = 0;
  a1[1] = 0;
  return 0xFFFFFFFFLL;
}

void sub_10002025C(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 16);
  if (v1)
    memset_s(*(void **)(a1 + 16), *(_QWORD *)a1, 0, *(_QWORD *)a1);
  free(v1);
}

uint64_t sub_100020294(_QWORD *__s, char *a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  size_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  char v19;

  if (__s)
    memset_s(__s, 0x18uLL, 0, 0x18uLL);
  *__s = a4;
  if (a2)
  {
    v8 = strlen(a2);
    v9 = v8 + 1;
    if (v8 + 1 >= 0x2000000001)
    {
      *__error() = 12;
LABEL_10:
      __s[1] = 0;
      v13 = *__error();
      v16 = "strdup";
      v17 = 653;
      goto LABEL_15;
    }
    v10 = malloc(v8 + 1);
    if (!v10)
      goto LABEL_10;
    v11 = v10;
    memcpy(v10, a2, v9);
    __s[1] = v11;
  }
  if (a3)
    v12 = sub_10001DFB0(a3);
  else
    v12 = (uint64_t)AAS3ContextCreate();
  __s[2] = v12;
  if (v12)
    return 0;
  v13 = *__error();
  v16 = "malloc";
  v17 = 656;
LABEL_15:
  sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3StreamBaseInit", v17, 84, v13, v16, v14, v15, v19);
  sub_1000203C0((uint64_t)__s);
  return 0xFFFFFFFFLL;
}

uint64_t sub_1000203C0(uint64_t a1)
{
  free(*(void **)(a1 + 8));
  AAS3ContextDestroy(*(_QWORD *)(a1 + 16));
  return memset_s((void *)a1, 0x18uLL, 0, 0x18uLL);
}

AAByteStream_impl *AAS3DownloadStreamOpen(char *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a2 && *(_DWORD *)a2)
    return sub_10001E6FC(a1, a2, a3);
  else
    return sub_100021CF0(a1, a2, a3, a4);
}

void sub_100020768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100020794(uint64_t a1, void *a2, void *a3, id a4)
{
  id *v6;
  id v7;
  id v8;
  id v9;
  id WeakRetained;

  v6 = (id *)(a1 + 32);
  v7 = a4;
  v8 = a3;
  v9 = a2;
  WeakRetained = objc_loadWeakRetained(v6);
  +[AAS3DownloadSession completeRequest:data:response:error:](AAS3DownloadSession, "completeRequest:data:response:error:", WeakRetained, v9, v8, v7);

}

void sub_100020834(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void sub_100020840(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

uint64_t sub_100021B60(_QWORD *a1)
{
  void *v2;
  double v3;
  FILE *v4;
  unint64_t v5;
  unint64_t v6;
  FILE *v7;
  unint64_t v8;
  timeval v10;

  if (a1)
  {
    v2 = (void *)a1[3];
    if (v2)
    {
      a1[3] = 0;
      atomic_store((unint64_t)objc_msgSend(v2, "bytesDownloaded"), a1 + 5);
      objc_msgSend(v2, "invalidateAndCancel");

    }
    if (*a1 >> 62)
    {
      v10.tv_sec = 0;
      *(_QWORD *)&v10.tv_usec = 0;
      gettimeofday(&v10, 0);
      v3 = (double)v10.tv_sec + (double)v10.tv_usec * 0.000001 - *((double *)a1 + 6);
      fwrite("AAS3DownloadStream (NSURLSession)\n", 0x22uLL, 1uLL, __stderrp);
      fprintf(__stderrp, "%12u max attempts for a request\n", *((_DWORD *)a1 + 14));
      fprintf(__stderrp, "%12u max requests in flight\n", *((_DWORD *)a1 + 16));
      fprintf(__stderrp, "%12.2f initial interval between retries (s)\n", *((float *)a1 + 15));
      v4 = __stderrp;
      v5 = atomic_load(a1 + 5);
      v6 = atomic_load(a1 + 5);
      fprintf(v4, "%12llu bytes downloaded (%.2f MB)\n", v5, (double)v6 * 0.000000953674316);
      v7 = __stderrp;
      v8 = atomic_load(a1 + 5);
      fprintf(v7, "%12.2f MB/s download speed\n", (double)v8 / v3 * 0.000000953674316);
    }
    sub_1000203C0((uint64_t)a1);
    memset_s(a1, 0x48uLL, 0, 0x48uLL);
    free(a1);
  }
  return 0;
}

AAByteStream sub_100021CF0(char *a1, uint64_t a2, uint64_t a3, int a4)
{
  AAByteStream v8;
  double *v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  AAS3DownloadSession *v14;
  NSString *v15;
  NSURL *v16;
  double v17;
  AAS3DownloadSession *v18;
  const char *v19;
  __int16 v20;
  timeval v22;

  v8 = AACustomByteStreamOpen();
  v9 = (double *)malloc(0x48uLL);
  v10 = v9;
  if (!v9 || (memset_s(v9, 0x48uLL, 0, 0x48uLL), !v8))
  {
    perror("malloc");
    goto LABEL_12;
  }
  if ((sub_100020294(v10, a1, a2, a3) & 0x80000000) != 0)
  {
    v19 = "s3StreamBaseInit";
    v20 = 697;
LABEL_11:
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamURLSession.m", (uint64_t)"s3DownloadStreamOpen_urlsession", v20, 121, 0, v19, v11, v12, v22.tv_sec);
LABEL_12:
    free(v8);
    sub_100021B60(v10);
    return 0;
  }
  v22.tv_sec = 0;
  *(_QWORD *)&v22.tv_usec = 0;
  gettimeofday(&v22, 0);
  v10[6] = (double)v22.tv_sec + (double)v22.tv_usec * 0.000001;
  v10[7] = 32.0;
  if (a4)
    v13 = a4;
  else
    v13 = 16;
  *((_DWORD *)v10 + 16) = v13;
  v14 = [AAS3DownloadSession alloc];
  v15 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1);
  v16 = +[NSURL URLWithString:](NSURL, "URLWithString:", v15);
  LODWORD(v17) = *((_DWORD *)v10 + 15);
  v18 = -[AAS3DownloadSession initWithURL:streamBase:maxAttempts:pauseInterval:maxRequestsInFlight:](v14, "initWithURL:streamBase:maxAttempts:pauseInterval:maxRequestsInFlight:", v16, v10, *((unsigned int *)v10 + 14), *((unsigned int *)v10 + 16), v17);

  if (!v18)
  {
    v19 = "creating session";
    v20 = 710;
    goto LABEL_11;
  }
  *((_QWORD *)v10 + 3) = v18;
  *(_QWORD *)v8 = v10;
  *((_QWORD *)v8 + 1) = sub_100021B60;
  *((_QWORD *)v8 + 4) = sub_100021EEC;
  *((_QWORD *)v8 + 2) = sub_100021F60;
  *((_QWORD *)v8 + 10) = sub_100021F78;
  return v8;
}

id sub_100021EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_QWORD *)a1 >> 62 == 3)
    fprintf(__stderrp, "NSURLSession read to buffer nbyte=%zx offset=%llx\n", a3, a4);
  return _objc_msgSend(*(id *)(a1 + 24), "readToBuffer:size:atOffset:", a2, a3, a4);
}

id sub_100021F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  uint64_t v4;

  v3 = (unint64_t *)(a1 + 32);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + a3, v3));
  return sub_100021EEC(a1, a2, a3, v4);
}

id sub_100021F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_QWORD *)a1 >> 62 == 3)
    fprintf(__stderrp, "NSURLSession read to stream nbyte=%zx offset=%llx\n", a3, a4);
  return _objc_msgSend(*(id *)(a1 + 24), "readToAsyncByteStream:size:atOffset:", a2, a3, a4);
}

uint64_t sub_100021FEC(char **a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  __int16 v11;
  int v13;
  char *v14;
  char *v15;
  char v16;

  v4 = malloc(0x58uLL);
  v5 = (uint64_t)v4;
  if (!v4)
  {
    v7 = *__error();
    v10 = "malloc";
    v11 = 308;
LABEL_12:
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextCreate", v11, 125, v7, v10, v8, v9, v16);
    goto LABEL_13;
  }
  memset_s(v4, 0x58uLL, 0, 0x58uLL);
  *(_QWORD *)(v5 + 80) = a2;
  if (a1)
  {
    if ((sub_100024088(v5, 0, *a1, "KNOX_APPLECONNECT_ACCOUNT") & 0x80000000) != 0
      || (sub_100024088(v5, 1u, a1[1], "KNOX_KEYTAB_FILE") & 0x80000000) != 0
      || (sub_100024088(v5, 2u, a1[2], "KNOX_DAW_TOKEN") & 0x80000000) != 0
      || (sub_100024088(v5, 3u, a1[3], "KNOX_DAW_TOKEN_FILE") & 0x80000000) != 0
      || (sub_100024088(v5, 4u, a1[4], "KNOX_WESTGATE_TOKEN") & 0x80000000) != 0
      || (sub_100024088(v5, 5u, a1[5], "KNOX_WESTGATE_TOKEN_FILE") & 0x80000000) != 0
      || (sub_100024088(v5, 8u, a1[6], "KNOX_USER_AGENT") & 0x80000000) != 0)
    {
      goto LABEL_13;
    }
    v6 = a1[7];
  }
  else
  {
    if ((sub_100024088(v5, 0, 0, "KNOX_APPLECONNECT_ACCOUNT") & 0x80000000) != 0)
      goto LABEL_13;
    if ((sub_100024088(v5, 1u, 0, "KNOX_KEYTAB_FILE") & 0x80000000) != 0)
      goto LABEL_13;
    if ((sub_100024088(v5, 2u, 0, "KNOX_DAW_TOKEN") & 0x80000000) != 0)
      goto LABEL_13;
    if ((sub_100024088(v5, 3u, 0, "KNOX_DAW_TOKEN_FILE") & 0x80000000) != 0)
      goto LABEL_13;
    if ((sub_100024088(v5, 4u, 0, "KNOX_WESTGATE_TOKEN") & 0x80000000) != 0)
      goto LABEL_13;
    if ((sub_100024088(v5, 5u, 0, "KNOX_WESTGATE_TOKEN_FILE") & 0x80000000) != 0)
      goto LABEL_13;
    v13 = sub_100024088(v5, 8u, 0, "KNOX_USER_AGENT");
    v6 = 0;
    if (v13 < 0)
      goto LABEL_13;
  }
  if ((sub_100024088(v5, 9u, v6, "KNOX_PROXY") & 0x80000000) != 0)
  {
LABEL_13:
    sub_100022FB4((char *)v5);
    return 0;
  }
  if (!*(_QWORD *)(v5 + 16))
  {
    v15 = *(char **)(v5 + 24);
    if (v15)
    {
      if ((sub_100024168(v5, 2u, v15) & 0x80000000) != 0)
      {
        v10 = "loading daw token";
        v11 = 324;
        goto LABEL_31;
      }
    }
  }
  if (!*(_QWORD *)(v5 + 32))
  {
    v14 = *(char **)(v5 + 40);
    if (v14)
    {
      if ((sub_100024168(v5, 4u, v14) & 0x80000000) != 0)
      {
        v10 = "loading westgate token";
        v11 = 327;
LABEL_31:
        v7 = 0;
        goto LABEL_12;
      }
    }
  }
  return v5;
}

uint64_t sub_1000222B0(_QWORD *a1, char *__s)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  AAByteStream_impl *v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  const char *v13;
  __int16 v14;
  int v15;
  void *v16;
  void *v17;
  size_t v18;
  size_t v19;
  void **v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  __int16 v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  AAByteStream_impl *v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  char *v51;
  void *v52;
  char *v53;
  char *v54;
  FILE *v55;
  FILE *v56;
  char *v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  const char *v62;
  __int16 v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  const char *v82;
  __int16 v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  __int16 v88;
  const char *v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  __int16 v98;
  const char *v99;
  __int16 v100;
  char *v101;
  uint64_t v102;
  __uint32_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  size_t i;
  size_t v108;
  int v109;
  char *v110;
  char *v111;
  BOOL v112;
  const char *v113;
  __int16 v114;
  char v115;
  char v116;
  char *__s1[2];
  char *__sa[2];
  __int128 v119;
  uint64_t v120;
  const char *v121[2];

  if (a1[4])
    return 0;
  v5 = (const char *)a1[2];
  if (v5)
    goto LABEL_4;
  v11 = strlen(__s);
  v12 = v11 + 200;
  if (v11 + 200 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_72:
    v64 = __error();
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetServiceName", 345, 125, *v64, "malloc", v65, v66, v115);
    v27 = 0;
    v38 = 0;
    v30 = 0;
LABEL_101:
    sub_100024E48(v38);
    AAByteStreamClose(v30);
    free(v27);
    v24 = "getting service name and realm";
    v25 = 649;
    goto LABEL_102;
  }
  v26 = malloc(v11 + 200);
  if (!v26)
    goto LABEL_72;
  v27 = v26;
  v30 = (AAByteStream_impl *)AATempStreamOpen(0x100000);
  if (!v30)
  {
    v87 = "AATempStreamOpen";
    v88 = 348;
LABEL_94:
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetServiceName", v88, 125, 0, v87, v28, v29, v115);
    v38 = 0;
    goto LABEL_101;
  }
  snprintf((char *)v27, v12, "https://%s/westgate/appinfo", __s);
  if ((sub_100022FF4((uint64_t)a1, 1u, (char *)v27, 0, (uint64_t)v30) & 0x80000000) != 0)
  {
    v115 = (char)v27;
    v87 = "Knox request failed: %s";
    v88 = 351;
    goto LABEL_94;
  }
  AAByteStreamSeek(v30, 0, 0);
  v31 = (void **)sub_100024D60((uint64_t)v30);
  v38 = v31;
  if (!v31)
  {
    v99 = "AAJSONInputStreamOpen";
    v100 = 356;
    goto LABEL_100;
  }
  v120 = 0;
  *(_OWORD *)__sa = 0u;
  v119 = 0u;
  *(_OWORD *)__s1 = 0u;
  if ((sub_100024E90((uint64_t)v31, (int *)__s1, v32, v33, v34, v35, v36, v37) & 0x80000000) != 0)
  {
LABEL_95:
    v99 = "parsing JSON";
    v100 = 363;
    goto LABEL_100;
  }
  v43 = 0;
  v44 = 0;
  while (1)
  {
    if (LODWORD(__s1[0]) < 2)
    {
      if (v44 == 1 && __s1[1] && !strcmp(__s1[1], "idms"))
        v43 = 1;
      ++v44;
      goto LABEL_41;
    }
    if (LODWORD(__s1[0]) != 2)
    {
      if (LODWORD(__s1[0]) == 3)
      {
        if (v43)
        {
          v45 = __s1[1];
          if (__s1[1])
          {
            if (strcmp(__s1[1], "realm"))
            {
LABEL_33:
              if (!strcmp(v45, "serviceName") && (sub_100024088((uint64_t)a1, 7u, __sa[0], 0) & 0x80000000) != 0)
              {
                v99 = "serviceName";
                v100 = 378;
                goto LABEL_100;
              }
              goto LABEL_41;
            }
            if ((sub_100024088((uint64_t)a1, 6u, __sa[0], 0) & 0x80000000) == 0)
            {
              v45 = __s1[1];
              goto LABEL_33;
            }
            v99 = "realm";
            v100 = 377;
LABEL_100:
            sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetServiceName", v100, 125, 0, v99, v36, v37, v116);
            goto LABEL_101;
          }
        }
      }
LABEL_41:
      if (!v44)
        break;
      goto LABEL_42;
    }
    v43 = 0;
    if (!--v44)
      break;
LABEL_42:
    v120 = 0;
    *(_OWORD *)__sa = 0u;
    v119 = 0u;
    *(_OWORD *)__s1 = 0u;
    if ((sub_100024E90((uint64_t)v38, (int *)__s1, v39, v40, v41, v42, v36, v37) & 0x80000000) != 0)
      goto LABEL_95;
  }
  if (!a1[6] || !a1[7])
  {
    v99 = "could not parse service name and realm";
    v100 = 389;
    goto LABEL_100;
  }
  sub_100024E48(v38);
  AAByteStreamClose(v30);
  free(v27);
  __s1[0] = 0;
  __s1[1] = 0;
  __sa[0] = 0;
  v48 = (const char *)a1[6];
  if (!v48 || (v49 = (const char *)a1[7]) == 0)
  {
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDAWToken", 411, 125, 0, "missing service name or realm", v46, v47, v116);
    v52 = 0;
LABEL_111:
    v93 = 0;
    v54 = 0;
    goto LABEL_156;
  }
  v50 = a1[10] >> 62;
  if (v50)
  {
    fwrite("  obtaining a DAW token from the appleconnect CLI\n", 0x32uLL, 1uLL, __stderrp);
    fprintf(__stderrp, "  - realm: %s\n", v48);
    fprintf(__stderrp, "  - service name: %s\n", v49);
  }
  v51 = (char *)malloc(0x4000uLL);
  v52 = v51;
  if (!v51)
  {
    __s1[0] = 0;
    __s1[1] = 0;
    __sa[0] = 0;
    v90 = __error();
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDAWToken", 420, 125, *v90, "malloc", v91, v92, v116);
    goto LABEL_111;
  }
  __s1[1] = (char *)0x4000;
  __sa[0] = v51;
  v53 = (char *)malloc(0x4000uLL);
  v54 = v53;
  if (!v53)
  {
    v94 = *__error();
    v97 = "malloc";
    v98 = 422;
LABEL_115:
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDAWToken", v98, 125, v94, v97, v95, v96, v116);
    v93 = 0;
    goto LABEL_156;
  }
  snprintf(v53, 0x4000uLL, "/usr/local/bin/appleconnect serviceTicket --show-signIn-dialog --dawToken --realm %s --serviceName %s", v48, v49);
  if (*a1)
  {
    if (v50)
      fprintf(__stderrp, "  - account: %s\n", (const char *)*a1);
    __strlcat_chk(v54, " --account ", 0x4000, 0x4000);
    __strlcat_chk(v54, *a1, 0x4000, 0x4000);
  }
  if (a1[1])
  {
    if (v50)
      fprintf(__stderrp, "  - keytab file: %s\n", (const char *)a1[1]);
    __strlcat_chk(v54, " --keytab ", 0x4000, 0x4000);
    __strlcat_chk(v54, a1[1], 0x4000, 0x4000);
  }
  v55 = popen(v54, "r");
  if (!v55)
  {
    v94 = *__error();
    v116 = (char)v54;
    v97 = "%s";
    v98 = 444;
    goto LABEL_115;
  }
  v56 = v55;
  v57 = 0;
  while (1)
  {
    v58 = fread(&v57[(_QWORD)v52], 1uLL, 0x4000 - (_QWORD)v57, v56);
    if (v58)
    {
      v61 = (unint64_t)&v57[v58];
      if (__CFADD__(v57, v58) || v61 > 0x4000)
      {
        __s1[0] = v57;
        v62 = "invalid read";
        v63 = 454;
        goto LABEL_153;
      }
      goto LABEL_70;
    }
    if (feof(v56))
      break;
    if (ferror(v56))
    {
      __s1[0] = v57;
      v109 = *__error();
      v62 = "fread";
      v63 = 452;
      goto LABEL_154;
    }
    v61 = (unint64_t)v57;
LABEL_70:
    v57 = (char *)v61;
    if (v61 == 0x4000)
    {
      __s1[0] = (char *)0x4000;
      v62 = "token is too long";
      v63 = 447;
      goto LABEL_153;
    }
  }
  __s1[0] = v57;
  if (v57)
  {
    v101 = (char *)v52 - 1;
    do
    {
      v102 = v57[(_QWORD)v101];
      if (v57[(_QWORD)v101] < 0)
        v103 = __maskrune(v102, 0x4000uLL);
      else
        v103 = _DefaultRuneLocale.__runetype[v102] & 0x4000;
      if (!v103)
        break;
      --v57;
    }
    while (v57);
    __s1[0] = v57;
  }
  v104 = (unint64_t)(v57 + 1);
  v105 = v57 == (char *)-1;
  v106 = v105 << 63 >> 63;
  if (v106 != v105 || v106 < 0 || (v104 & 0x8000000000000000) != 0)
    goto LABEL_152;
  if (v104 <= 0x4000)
  {
    v110 = __sa[0];
LABEL_140:
    __s1[0] = v57 + 1;
    v57[(_QWORD)v52] = 0;
    if ((unint64_t)(v57 + 1) >= 6
      && (*(_DWORD *)v110 == 1415004484 ? (v112 = *((unsigned __int16 *)v110 + 2) == 20043) : (v112 = 0), v112))
    {
      if ((sub_100024088((uint64_t)a1, 2u, v110, 0) & 0x80000000) == 0)
      {
        v93 = 1;
        goto LABEL_147;
      }
      v113 = "daw token";
      v114 = 463;
    }
    else
    {
      v113 = "invalid token format";
      v114 = 460;
    }
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDAWToken", v114, 125, 0, v113, v59, v60, v115);
    v93 = 0;
LABEL_147:
    v52 = v110;
    goto LABEL_155;
  }
  for (i = 0x4000; i < v104; i += v108)
  {
    v108 = i >> 1;
    if ((i & (i >> 1)) != 0)
      v108 = i & (i >> 1);
  }
  if (i >= 0x2000000001)
  {
    *__error() = 12;
    goto LABEL_151;
  }
  v111 = (char *)realloc(v52, i);
  if (v111)
  {
    v110 = v111;
    __s1[1] = (char *)i;
    __sa[0] = v111;
    v52 = v111;
    goto LABEL_140;
  }
  free(v52);
LABEL_151:
  v52 = 0;
  __s1[0] = 0;
  __s1[1] = 0;
  __sa[0] = 0;
LABEL_152:
  v62 = "token is too long";
  v63 = 459;
LABEL_153:
  v109 = 0;
LABEL_154:
  sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDAWToken", v63, 125, v109, v62, v59, v60, v115);
  v93 = 0;
LABEL_155:
  pclose(v56);
LABEL_156:
  free(v54);
  free(v52);
  memset_s(__s1, 0x18uLL, 0, 0x18uLL);
  if (!v93)
  {
    v24 = "getting DAW token";
    v25 = 650;
    goto LABEL_102;
  }
  if (a1[4])
    return 0;
  v5 = (const char *)a1[2];
  if (!v5)
  {
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetWestgateToken", 486, 125, 0, "missing host or DAW token", v22, v23, v115);
    v20 = 0;
    v8 = 0;
LABEL_17:
    v21 = 0;
    v17 = 0;
LABEL_18:
    sub_100024E48(v20);
    AAByteStreamClose(v8);
    free(v17);
    free(v21);
    v24 = "getting Westgate token";
    v25 = 655;
LABEL_102:
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextResolveWestgateToken", v25, 125, 0, v24, v22, v23, v115);
    return 0xFFFFFFFFLL;
  }
LABEL_4:
  if (a1[10] >> 62)
    fwrite("  requesting Westgate token from the Knox server\n", 0x31uLL, 1uLL, __stderrp);
  v8 = (AAByteStream_impl *)AATempStreamOpen(0x100000);
  if (!v8)
  {
    v13 = "AATempStreamOpen";
    v14 = 491;
    v15 = 0;
LABEL_16:
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetWestgateToken", v14, 125, v15, v13, v6, v7, v115);
    v20 = 0;
    goto LABEL_17;
  }
  v9 = strlen(__s);
  v10 = v9 + 200;
  if (v9 + 200 >= 0x2000000001)
  {
    *__error() = 12;
    goto LABEL_15;
  }
  v16 = malloc(v9 + 200);
  if (!v16)
  {
LABEL_15:
    v15 = *__error();
    v13 = "malloc";
    v14 = 495;
    goto LABEL_16;
  }
  v17 = v16;
  v18 = strlen(v5);
  v19 = v18 + 200;
  if (v18 + 200 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_91:
    v84 = __error();
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetWestgateToken", 498, 125, *v84, "malloc", v85, v86, v115);
    v20 = 0;
    v21 = 0;
    goto LABEL_18;
  }
  v67 = (char *)malloc(v18 + 200);
  if (!v67)
    goto LABEL_91;
  v21 = v67;
  snprintf(v67, v19, "Authorization: Bearer %s", v5);
  v121[0] = v21;
  v121[1] = 0;
  snprintf((char *)v17, v10, "https://%s/westgate/token", __s);
  if ((sub_100022FF4((uint64_t)a1, 2u, (char *)v17, v121, (uint64_t)v8) & 0x80000000) != 0)
  {
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetWestgateToken", 505, 125, 0, "Knox request failed: %s", v68, v69, (char)v17);
    v20 = 0;
    goto LABEL_18;
  }
  AAByteStreamSeek(v8, 0, 0);
  v70 = (void **)sub_100024D60((uint64_t)v8);
  v20 = v70;
  if (!v70)
  {
    v82 = "AAJSONInputStreamOpen";
    v83 = 510;
    goto LABEL_106;
  }
  v120 = 0;
  *(_OWORD *)__sa = 0u;
  v119 = 0u;
  *(_OWORD *)__s1 = 0u;
  if ((sub_100024E90((uint64_t)v70, (int *)__s1, v71, v72, v73, v74, v75, v76) & 0x80000000) != 0)
  {
LABEL_90:
    v82 = "parsing JSON";
    v83 = 516;
LABEL_106:
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetWestgateToken", v83, 125, 0, v82, v75, v76, v115);
    goto LABEL_18;
  }
  v81 = 0;
  while (1)
  {
    if (LODWORD(__s1[0]) < 2)
    {
      ++v81;
      goto LABEL_88;
    }
    if (LODWORD(__s1[0]) == 2)
      break;
    if (LODWORD(__s1[0]) != 3 || v81 != 1 || !__s1[1])
      goto LABEL_88;
    if (!strcasecmp(__s1[1], "password") && (sub_100024088((uint64_t)a1, 4u, __sa[0], 0) & 0x80000000) != 0)
    {
      v82 = "password";
      v83 = 529;
      goto LABEL_106;
    }
    v81 = 1;
LABEL_89:
    v120 = 0;
    *(_OWORD *)__sa = 0u;
    v119 = 0u;
    *(_OWORD *)__s1 = 0u;
    if ((sub_100024E90((uint64_t)v20, (int *)__s1, v77, v78, v79, v80, v75, v76) & 0x80000000) != 0)
      goto LABEL_90;
  }
  --v81;
LABEL_88:
  if (v81)
    goto LABEL_89;
  v89 = (const char *)a1[4];
  if (!v89 || strncmp(v89, "WGTKN", 5uLL))
  {
    v82 = "invalid/missing token";
    v83 = 537;
    goto LABEL_106;
  }
  sub_100024E48(v20);
  AAByteStreamClose(v8);
  free(v17);
  free(v21);
  if (!a1[4])
  {
    v24 = "invalid Westgate token";
    v25 = 658;
    goto LABEL_102;
  }
  return 0;
}

void sub_100022FB4(char *a1)
{
  uint64_t i;

  if (a1)
  {
    for (i = 0; i != 80; i += 8)
      free(*(void **)&a1[i]);
    free(a1);
  }
}

uint64_t sub_100022FF4(uint64_t a1, unsigned int a2, char *a3, const char **a4, uint64_t a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t (**v16)(int *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)(int *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t (*v34)(int *);
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  const char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  size_t v52;
  size_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  __int16 v58;
  uint64_t v59;
  __int16 v61;
  int v62;
  __int16 v63;
  const char *v64;
  __int16 v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char *v70;
  const char **v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t (**v76)(int *);
  _QWORD v77[2];
  uint64_t v78;

  v77[0] = 0;
  v77[1] = 0;
  v75 = 0uLL;
  v76 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v10 = AAS3ContextCreate();
  v78 = (uint64_t)v10;
  if (!v10)
  {
    v57 = "AAS3ContextCreate";
    v58 = 189;
LABEL_41:
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", v58, 125, 0, v57, v11, v12, v68);
    v22 = 0;
LABEL_42:
    v29 = 0;
    v28 = 0;
LABEL_43:
    v59 = 0xFFFFFFFFLL;
    goto LABEL_44;
  }
  v13 = (uint64_t)v10;
  v14 = malloc(0x18uLL);
  v15 = v14;
  if (!v14)
  {
    v22 = (uint64_t (**)(int *))calloc(1uLL, 0x68uLL);
    goto LABEL_40;
  }
  memset_s(v14, 0x18uLL, 0, 0x18uLL);
  v16 = (uint64_t (**)(int *))calloc(1uLL, 0x68uLL);
  v22 = v16;
  if (!v16)
  {
LABEL_40:
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxPageStreamOpen", 165, 125, 0, "malloc", v20, v21, v68);
    free(v15);
    free(v22);
    v57 = "open page stream";
    v58 = 192;
    goto LABEL_41;
  }
  *v15 = a5;
  *v16 = (uint64_t (*)(int *))v15;
  v16[1] = sub_10002438C;
  v16[3] = (uint64_t (*)(int *))sub_100024424;
  if ((AAS3ContextSetFieldString(v13, 5, *(char **)(a1 + 64), v17, v18, v19, v20, v21) & 0x80000000) != 0)
  {
    v61 = 194;
LABEL_47:
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", v61, 125, 0, "setup context", v26, v27, v68);
    goto LABEL_42;
  }
  if ((AAS3ContextSetFieldString(v13, 0, *(char **)(a1 + 72), v23, v24, v25, v26, v27) & 0x80000000) != 0)
  {
    v61 = 195;
    goto LABEL_47;
  }
  v28 = (char *)malloc(0x800uLL);
  if (!v28)
  {
    v62 = *__error();
    v63 = 200;
LABEL_53:
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", v63, 125, v62, "malloc", v55, v56, v68);
    v29 = 0;
    goto LABEL_43;
  }
  v29 = 0;
  v30 = "link:";
  v70 = a3;
  v71 = a4;
  while (2)
  {
    memset_s(v28, 0x800uLL, 0, 0x800uLL);
    v75 = 0uLL;
    v76 = v22;
    v72 = v28;
    v73 = 2047;
    v33 = a3;
    v74 = 0;
    if (v29)
    {
      if (v22[1] == sub_10002438C)
      {
        v34 = *v22;
        if (*((int *)*v22 + 2) < 1 || !*((_DWORD *)v34 + 4))
          goto LABEL_15;
        if (!*((_DWORD *)v34 + 5) || AAByteStreamWrite(*(AAByteStream *)v34, ",", 1uLL) == 1)
        {
          *(_QWORD *)((char *)v34 + 12) = 1;
LABEL_15:
          *((_DWORD *)v34 + 5) = 0;
          v33 = v29;
          goto LABEL_16;
        }
        v64 = "writing ','";
        v65 = 146;
      }
      else
      {
        v64 = "invalid stream";
        v65 = 132;
      }
      sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxPageStreamEndPage", v65, 125, 0, v64, v31, v32, v68);
      sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", 209, 125, 0, "page stream next page", v66, v67, v69);
      goto LABEL_43;
    }
LABEL_16:
    if ((sub_10001EF70(a2, v33, (uint64_t)v77, 0, &v75, (uint64_t)&v72, a4) & 0x80000000) != 0)
    {
      sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", 212, 125, 0, "request: %s", v35, v36, (char)v33);
      goto LABEL_43;
    }
    free(v29);
    v37 = strlen(v28);
    if (v37)
    {
      v38 = v37;
      v29 = 0;
      v39 = 0;
      do
      {
        if (v38 <= v39 + 1)
          v40 = v39 + 1;
        else
          v40 = v38;
        v41 = v39;
        while (v28[v41] != 10)
        {
          if (v40 == ++v41)
          {
            v41 = v40;
            break;
          }
        }
        v28[v41] = 0;
        if (v41 - v39 >= 5)
        {
          v42 = &v28[v39];
          if (!strncmp(&v28[v39], v30, 5uLL))
          {
            v43 = v30;
            v44 = strchr(v42, 60);
            v45 = strrchr(v42, 62);
            if (!v44 || (v48 = v45) == 0 || v45 <= v44)
            {
              sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", 231, 125, 0, "invalid link header (1): %s", v46, v47, (char)v42);
              goto LABEL_43;
            }
            if (!strstr(v45, "rel=\"next\""))
            {
              sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", 233, 125, 0, "invalid link header (2): %s", v49, v50, (char)v42);
              goto LABEL_43;
            }
            *v48 = 0;
            v51 = v44 + 1;
            v52 = strlen(v51);
            v53 = v52 + 1;
            if (v52 + 1 >= 0x2000000001)
            {
              *__error() = 12;
LABEL_52:
              v63 = 236;
              v62 = 0;
              goto LABEL_53;
            }
            v54 = (char *)malloc(v52 + 1);
            if (!v54)
              goto LABEL_52;
            v29 = v54;
            memcpy(v54, v51, v53);
            v30 = v43;
          }
        }
        v39 = v41 + 1;
      }
      while (v41 + 1 < v38);
      a3 = v70;
      a4 = v71;
      if (v29)
        continue;
    }
    else
    {
      v29 = 0;
    }
    break;
  }
  v59 = 0;
LABEL_44:
  free(v29);
  free(v28);
  AAByteStreamClose((AAByteStream)v22);
  AAS3ContextDestroy(v78);
  return v59;
}

uint64_t sub_100023548(uint64_t a1, const char *a2, const char *a3, const char *a4, _QWORD *a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  unint64_t v9;
  uint64_t v16;
  uint64_t v17;
  AAByteStream_impl *v18;
  size_t v19;
  size_t v20;
  void **v21;
  const char *v22;
  __int16 v23;
  int v24;
  size_t v25;
  size_t v26;
  char *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  const char *v47;
  char *v48;
  size_t v49;
  size_t v50;
  void *v51;
  void *v52;
  const char *v53;
  char *v54;
  size_t v55;
  size_t v56;
  void *v57;
  void *v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  __int16 v63;
  char v64;
  const char *v65;
  char v66;
  const char *v67;
  int v68;
  int v69;
  char *v70;
  char *__str;
  char *__s1[2];
  char *__s[2];
  __int128 v74;
  uint64_t v75;
  const char *v76[2];

  v8 = *(char **)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 80);
  *a5 = 0;
  *a6 = 0;
  if (!v8)
  {
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", 568, 125, 0, "missing Westgate token", a7, a8, v64);
    v21 = 0;
    v18 = 0;
LABEL_14:
    v27 = 0;
    goto LABEL_15;
  }
  if (v9 >> 62)
    fwrite("  requesting decryption components from the Knox server\n", 0x38uLL, 1uLL, __stderrp);
  v18 = (AAByteStream_impl *)AATempStreamOpen(0x100000);
  if (!v18)
  {
    v22 = "AATempStreamOpen";
    v23 = 573;
    v24 = 0;
LABEL_13:
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", v23, 125, v24, v22, v16, v17, v64);
    v21 = 0;
    v8 = 0;
    goto LABEL_14;
  }
  v19 = strlen(a2);
  v20 = v19 + 200;
  if (v19 + 200 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_12:
    v24 = *__error();
    v22 = "malloc";
    v23 = 577;
    goto LABEL_13;
  }
  __str = (char *)malloc(v19 + 200);
  if (!__str)
    goto LABEL_12;
  v25 = strlen(v8);
  v26 = v25 + 200;
  if (v25 + 200 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_54:
    v59 = __error();
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", 580, 125, *v59, "malloc", v60, v61, v64);
    v21 = 0;
    v8 = 0;
    v28 = 0xFFFFFFFFLL;
    v27 = __str;
    goto LABEL_16;
  }
  v30 = (char *)malloc(v25 + 200);
  if (!v30)
    goto LABEL_54;
  v65 = v8;
  v8 = v30;
  snprintf(v30, v26, "Authorization: Bearer %s", v65);
  v76[0] = v8;
  v76[1] = 0;
  v67 = a4;
  v27 = __str;
  snprintf(__str, v20, "https://%s/spaces/%s/files/%s/decryption-components", a2, a3, v67);
  if ((sub_100022FF4(a1, 2u, __str, v76, (uint64_t)v18) & 0x80000000) != 0)
  {
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", 587, 125, 0, "Knox request failed: %s", v31, v32, (char)__str);
    v21 = 0;
    goto LABEL_15;
  }
  AAByteStreamSeek(v18, 0, 0);
  v33 = (void **)sub_100024D60((uint64_t)v18);
  v21 = v33;
  if (!v33)
  {
    v62 = "AAJSONInputStreamOpen";
    v63 = 592;
    goto LABEL_62;
  }
  v75 = 0;
  *(_OWORD *)__s = 0u;
  v74 = 0u;
  *(_OWORD *)__s1 = 0u;
  if ((sub_100024E90((uint64_t)v33, (int *)__s1, v34, v35, v36, v37, v38, v39) & 0x80000000) != 0)
  {
LABEL_56:
    v62 = "parsing JSON";
    v63 = 600;
    goto LABEL_62;
  }
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v70 = v8;
  while (LODWORD(__s1[0]) >= 2)
  {
    if (LODWORD(__s1[0]) == 2)
    {
      v45 = 0;
      v44 = 0;
      --v46;
      goto LABEL_47;
    }
    if (LODWORD(__s1[0]) != 3)
      goto LABEL_47;
    v47 = __s1[1];
    if (v46 == 2 && v45 && __s1[1] && !strcmp(__s1[1], "key"))
    {
      v68 = v44;
      v48 = __s[0];
      if (!__s[0])
        goto LABEL_64;
      v49 = strlen(__s[0]);
      v50 = v49 + 1;
      if (v49 + 1 >= 0x2000000001)
      {
        *__error() = 12;
LABEL_64:
        *a6 = 0;
        sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", 618, 125, 0, "key", v38, v39, v66);
        v8 = v70;
        v27 = __str;
        goto LABEL_15;
      }
      v51 = malloc(v49 + 1);
      if (!v51)
        goto LABEL_64;
      v52 = v51;
      memcpy(v51, v48, v50);
      *a6 = v52;
      v27 = __str;
      v44 = v68;
    }
    if (v46 != 2 || !v44 || !v47)
    {
      v8 = v70;
      goto LABEL_47;
    }
    if (!strcmp(v47, "uri"))
    {
      v69 = v44;
      v54 = __s[0];
      v8 = v70;
      if (!__s[0])
        goto LABEL_66;
      v55 = strlen(__s[0]);
      v56 = v55 + 1;
      if (v55 + 1 >= 0x2000000001)
      {
        *__error() = 12;
LABEL_66:
        *a5 = 0;
        sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", 623, 125, 0, "uri", v38, v39, v66);
        v27 = __str;
        goto LABEL_15;
      }
      v57 = malloc(v55 + 1);
      if (!v57)
        goto LABEL_66;
      v58 = v57;
      memcpy(v57, v54, v56);
      *a5 = v58;
      v46 = 2;
      v27 = __str;
      v44 = v69;
    }
    else
    {
      v46 = 2;
      v8 = v70;
    }
LABEL_48:
    v75 = 0;
    *(_OWORD *)__s = 0u;
    v74 = 0u;
    *(_OWORD *)__s1 = 0u;
    if ((sub_100024E90((uint64_t)v21, (int *)__s1, v40, v41, v42, v43, v38, v39) & 0x80000000) != 0)
      goto LABEL_56;
  }
  if (v46 == 1)
  {
    v53 = __s1[1];
    if (__s1[1])
    {
      if (!strcmp(__s1[1], "encryption"))
        v45 = 1;
      if (!strcmp(v53, "location"))
        v44 = 1;
    }
  }
  ++v46;
LABEL_47:
  if (v46)
    goto LABEL_48;
  if (*a5 && *a6)
  {
    v28 = 0;
    goto LABEL_16;
  }
  v62 = "invalid/missing decryption components";
  v63 = 631;
LABEL_62:
  sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", v63, 125, 0, v62, v38, v39, v66);
LABEL_15:
  v28 = 0xFFFFFFFFLL;
LABEL_16:
  sub_100024E48(v21);
  AAByteStreamClose(v18);
  free(v27);
  free(v8);
  return v28;
}

uint64_t AAS3KnoxResolveURL(uint64_t a1, char **a2, _QWORD *a3, size_t a4, _BYTE *a5, size_t *a6, unint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  size_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  __int16 v30;
  int v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v38;
  char *v39;
  char *v40;
  size_t v41;
  size_t v42;
  char *v43;
  size_t v44;
  _BYTE *v45;
  _BYTE *v46;
  size_t v47;
  int v48;
  __uint32_t v49;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  size_t v63;
  const char *v64;
  __int16 v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  __int16 v70;
  char v71;
  size_t *v72;
  char *__s;

  __s = 0;
  if (strncmp((const char *)a1, "knox://", 7uLL))
  {
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", 854, 125, 0, "invalid Knox scheme: %s", v14, v15, a1);
LABEL_13:
    v23 = 0;
    v24 = 0;
    v20 = 0;
    goto LABEL_14;
  }
  v16 = a1 + 7;
  v17 = strchr((char *)(a1 + 7), 47);
  v20 = v17;
  if (!v17)
  {
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", 859, 125, 0, "invalid Knox host: %s", v18, v19, a1);
    v23 = 0;
    v24 = 0;
LABEL_14:
    v32 = 0;
    v26 = 0;
    goto LABEL_15;
  }
  v21 = &v17[-v16];
  v22 = (size_t)&v17[-v16 + 1];
  if (v22 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_12:
    v33 = *__error();
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", 863, 125, v33, "malloc", v34, v35, v71);
    goto LABEL_13;
  }
  v72 = a6;
  v25 = (char *)malloc(v22);
  if (!v25)
    goto LABEL_12;
  v26 = v25;
  memcpy(v25, (const void *)(a1 + 7), (size_t)&v20[-v16]);
  v21[(_QWORD)v26] = 0;
  if (strncmp(v20 + 1, "download/", 9uLL))
  {
    v71 = a1;
    v29 = "invalid Knox action: %s";
    v30 = 869;
LABEL_10:
    v31 = 0;
LABEL_11:
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", v30, 125, v31, v29, v27, v28, v71);
    v23 = 0;
    v24 = 0;
    v20 = 0;
    v32 = 0;
    goto LABEL_15;
  }
  v38 = v20 + 10;
  v39 = strchr(v38, 47);
  if (!v39)
  {
    v71 = a1;
    v29 = "invalid Knox space: %s";
    v30 = 874;
    goto LABEL_10;
  }
  v40 = v39;
  v41 = v39 - v38;
  v42 = v39 - v38 + 1;
  if (v42 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_37:
    v31 = *__error();
    v29 = "malloc";
    v30 = 878;
    goto LABEL_11;
  }
  v43 = (char *)malloc(v42);
  if (!v43)
    goto LABEL_37;
  v32 = v43;
  memcpy(v43, v38, v41);
  v44 = 0;
  v32[v41] = 0;
  v45 = v40 + 1;
  v46 = v40 + 1;
  do
  {
    v47 = v44;
    v48 = (char)v45[v44];
    if (!v45[v44])
      break;
    if (v48 < 0)
    {
      v49 = __maskrune((char)v45[v44], 0x4000uLL);
      v45 = v46;
    }
    else
    {
      v49 = _DefaultRuneLocale.__runetype[v48] & 0x4000;
    }
    if ((v48 - 127) < 0xA1u)
      break;
    if (v48 == 47 || (v48 - 37) < 2u)
      break;
    if (v48 == 35)
      break;
    v44 = v47 + 1;
  }
  while (!v49);
  if (v47 + 1 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_48:
    v66 = __error();
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", 895, 125, *v66, "malloc", v67, v68, v71);
    v23 = 0;
    v24 = 0;
    v20 = 0;
    goto LABEL_15;
  }
  v51 = (char *)malloc(v47 + 1);
  if (!v51)
    goto LABEL_48;
  v20 = v51;
  memcpy(v51, v46, v47);
  v20[v47] = 0;
  if (a7 >> 62)
  {
    fwrite("Knox resolve URL\n", 0x11uLL, 1uLL, __stderrp);
    fprintf(__stderrp, "  host: %s\n", v26);
    fprintf(__stderrp, "  space: %s\n", v32);
    fprintf(__stderrp, "  file digest: %s\n", v20);
  }
  v52 = (char *)sub_100021FEC(a2, a7);
  v24 = v52;
  if (!v52)
  {
    v69 = "contextInit failed";
    v70 = 909;
LABEL_51:
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", v70, 125, 0, v69, v53, v54, v71);
    v23 = 0;
    goto LABEL_15;
  }
  if ((sub_1000222B0(v52, v26) & 0x80000000) != 0)
  {
    v69 = "getting Westgate token";
    v70 = 912;
    goto LABEL_51;
  }
  if ((sub_100023548((uint64_t)v24, v26, v32, v20, a3, &__s, v53, v54) & 0x80000000) != 0)
  {
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", 915, 125, 0, "getting decryption credentials", v55, v56, v71);
    v36 = 0xFFFFFFFFLL;
    v23 = __s;
    goto LABEL_16;
  }
  v23 = __s;
  v57 = strlen(__s);
  if (!v57 || (v57 & 1) != 0)
  {
    v71 = v57;
    v64 = "invalid key length: %zu";
    v65 = 919;
  }
  else
  {
    v63 = v57 >> 1;
    if (v57 >> 1 <= a4)
    {
      if ((sub_100024B0C(v57 >> 1, a5, (uint64_t)__s, v58, v59, v60, v61, v62) & 0x80000000) == 0)
      {
        v36 = 0;
        *v72 = v63;
        goto LABEL_16;
      }
      v64 = "invalid hex key";
      v65 = 922;
    }
    else
    {
      v64 = "key_capacity is too low";
      v65 = 921;
    }
  }
  sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", v65, 125, 0, v64, v61, v62, v71);
LABEL_15:
  v36 = 0xFFFFFFFFLL;
LABEL_16:
  free(v26);
  free(v32);
  free(v20);
  free(v23);
  sub_100022FB4(v24);
  return v36;
}

uint64_t sub_100024088(uint64_t a1, unsigned int a2, char *__s, char *a4)
{
  char *v4;
  size_t v7;
  size_t v8;
  uint64_t result;
  void *v10;
  void *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = __s;
  if (!__s)
  {
    if (a4)
      v4 = getenv(a4);
  }
  if (!v4)
  {
    result = 0;
    *(_QWORD *)(a1 + 8 * a2) = 0;
    return result;
  }
  v7 = strlen(v4);
  v8 = v7 + 1;
  if (v7 + 1 < 0x2000000001)
  {
    v10 = malloc(v7 + 1);
    if (v10)
    {
      v11 = v10;
      memcpy(v10, v4, v8);
      result = 0;
      *(_QWORD *)(a1 + 8 * a2) = v11;
      return result;
    }
  }
  else
  {
    *__error() = 12;
  }
  *(_QWORD *)(a1 + 8 * a2) = 0;
  v12 = __error();
  sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextSetString", 259, 125, *v12, "malloc", v13, v14, v15);
  return 0xFFFFFFFFLL;
}

uint64_t sub_100024168(uint64_t a1, unsigned int a2, char *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  off_t st_size;
  BOOL v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  ssize_t v18;
  uint64_t v19;
  uint64_t v20;
  off_t v21;
  __darwin_ct_rune_t v22;
  __uint32_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  __int16 v29;
  const char *v30;
  char v31;
  stat v32;

  memset(&v32, 0, sizeof(v32));
  v6 = open(a3, 0);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = v6;
    if (fstat(v6, &v32) < 0
      || ((st_size = v32.st_size, (v32.st_mode & 0xF000) == 0x8000) ? (v11 = v32.st_size == 0) : (v11 = 1), v11))
    {
      sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextLoadString", 274, 125, 0, "invalid file: %s", v8, v9, (char)a3);
    }
    else
    {
      if ((unint64_t)(v32.st_size + 1) < 0x2000000001)
      {
        v16 = malloc(v32.st_size + 1);
        if (v16)
        {
          v17 = v16;
          v18 = read(v7, v16, st_size);
          if (v18 < 0)
          {
            v28 = *__error();
            v29 = 280;
            v30 = a3;
          }
          else
          {
            if (v18 == st_size)
            {
              do
              {
                v21 = st_size;
                if (!st_size)
                  break;
                v22 = (char)v17[st_size - 1];
                v23 = v22 < 0 ? __maskrune(v22, 0x4000uLL) : _DefaultRuneLocale.__runetype[v22] & 0x4000;
                --st_size;
              }
              while (v23);
              v15 = 0;
              v17[v21] = 0;
              *(_QWORD *)(a1 + 8 * a2) = v17;
              goto LABEL_24;
            }
            v30 = "truncated read";
            v29 = 281;
            v28 = 0;
          }
          sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextLoadString", v29, 125, v28, v30, v19, v20, v31);
LABEL_23:
          free(v17);
          v15 = 0xFFFFFFFFLL;
LABEL_24:
          close(v7);
          return v15;
        }
      }
      else
      {
        *__error() = 12;
      }
      v24 = *__error();
      sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextLoadString", 277, 125, v24, "malloc", v25, v26, v31);
    }
    v17 = 0;
    goto LABEL_23;
  }
  v12 = __error();
  sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextLoadString", 273, 125, *v12, a3, v13, v14, v31);
  return 0xFFFFFFFFLL;
}

uint64_t sub_10002438C(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  if (!a1)
    return 0;
  if (a1[2] >= 1 && a1[4] && AAByteStreamWrite(*(AAByteStream *)a1, "]\n", 2uLL) != 2)
  {
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxPageStreamClose", 67, 125, 0, "writing final ']'", v2, v3, v6);
    v4 = 0xFFFFFFFFLL;
  }
  else
  {
    v4 = 0;
  }
  free(a1);
  return v4;
}

uint64_t sub_100024424(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _BYTE *v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  __darwin_ct_rune_t v18;
  AAByteStream v19;
  uint64_t v20;
  char v22;

  v8 = a3;
  v9 = a2;
  v11 = *(_DWORD *)(a1 + 8);
  if (v11)
  {
    if (v11 < 1)
    {
      v12 = 0;
      goto LABEL_28;
    }
  }
  else
  {
    if (!a3 || *a2 != 91)
    {
      v12 = 0;
      *(_DWORD *)(a1 + 8) = -1;
      goto LABEL_28;
    }
    *(_DWORD *)(a1 + 8) = 1;
  }
  v12 = 0;
  if (a3 && *(_DWORD *)(a1 + 12))
  {
    if (*a2 != 91)
    {
      v14 = "expected '['";
      v15 = 93;
LABEL_41:
      sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxPageStreamWrite", v15, 125, 0, v14, a7, a8, v22);
      return -1;
    }
    *(_DWORD *)(a1 + 12) = 0;
    v9 = a2 + 1;
    v8 = a3 - 1;
    v12 = 1;
  }
  if (!v8)
    goto LABEL_35;
  if (!*(_DWORD *)(a1 + 16))
  {
    v13 = 0;
    goto LABEL_18;
  }
  if (AAByteStreamWrite(*(AAByteStream *)a1, "]", 1uLL) != 1)
  {
    v14 = "writing ']'";
    v15 = 105;
    goto LABEL_41;
  }
  *(_DWORD *)(a1 + 16) = 0;
  v13 = 1;
LABEL_18:
  v16 = v12 + 1;
  v17 = v8 - 1;
  while (1)
  {
    v18 = (char)v9[v17];
    if (v18 < 0)
      break;
    if ((_DefaultRuneLocale.__runetype[v18] & 0x4000) == 0)
      goto LABEL_25;
LABEL_23:
    ++v16;
    if (--v17 == -1)
      goto LABEL_27;
  }
  if (__maskrune(v18, 0x4000uLL))
    goto LABEL_23;
LABEL_25:
  if (v9[v17] == 93)
  {
    *(_DWORD *)(a1 + 16) = 1;
    v12 = v16;
    v8 = v17;
  }
LABEL_27:
  if (v8)
  {
LABEL_28:
    *(_DWORD *)(a1 + 20) = 1;
    v19 = *(AAByteStream *)a1;
    if (*((_QWORD *)v19 + 3))
    {
      if (v8)
      {
        v13 = 0;
        while (1)
        {
          v20 = (*((uint64_t (**)(_QWORD, _BYTE *, uint64_t))v19 + 3))(*(_QWORD *)v19, v9, v8);
          if (v20 < 1)
            break;
          v9 += v20;
          v13 += v20;
          v8 -= v20;
          if (!v8)
          {
            if ((v13 & 0x8000000000000000) == 0)
              goto LABEL_39;
            goto LABEL_37;
          }
        }
        v13 = v20;
        if (v20 < 0)
          goto LABEL_37;
        goto LABEL_39;
      }
LABEL_35:
      v13 = 0;
      goto LABEL_39;
    }
    v13 = -1;
LABEL_37:
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxPageStreamWrite", 124, 125, 0, "write", a7, a8, v22);
  }
  else
  {
LABEL_39:
    v13 += v12;
  }
  return v13;
}

size_t sub_100024658(uint64_t a1, uint64_t a2, __int16 a3, int a4, int a5, const char *a6, uint64_t a7, uint64_t a8, char a9)
{
  _WORD *v13;
  char *v14;
  size_t v15;
  char __str[1024];

  bzero(__str, 0x400uLL);
  v13 = (_WORD *)(((a3 & 0x3FFF) << 10) | (a4 << 24) | a5 & 0x3FF | 0x80000000);
  if (a5 >= 1)
  {
    v14 = strerror(a5);
    snprintf(__str, 0x400uLL, "%s: ", v14);
  }
  v15 = strlen(__str);
  vsnprintf(&__str[v15], 1024 - v15, a6, &a9);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_10002487C((uint64_t)__str, (int)v13);
  return ParallelCompressionUpdateError(v13, (size_t)__str);
}

uint64_t sub_100024768(uint64_t a1, uint64_t a2, __int16 a3, int a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12;
  size_t v13;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  char *v18;
  char __s[1024];

  bzero(__s, 0x400uLL);
  v12 = ((a3 & 0x3FFF) << 10) | (a4 << 24) | 0x80000000;
  v13 = strlen(__s);
  vsnprintf(&__s[v13], 1024 - v13, a5, &a9);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109378;
    v16 = v12;
    v17 = 2080;
    v18 = __s;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "[0x%08x](warning) %s", buf, 0x12u);
  }
  return ParallelCompressionUpdateWarning(v12, __s);
}

void sub_10002487C(uint64_t a1, int a2)
{
  _DWORD v2[2];
  __int16 v3;
  uint64_t v4;

  v2[0] = 67109378;
  v2[1] = a2;
  v3 = 2080;
  v4 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "[0x%08x] %s", (uint8_t *)v2, 0x12u);
}

size_t sub_100024904(size_t result)
{
  const void *v1;
  size_t v2;
  pthread_key_t v3;
  size_t v4;
  __int16 v5;
  uint64_t v6;
  size_t v7;
  size_t v8;

  if (result)
  {
    v1 = (const void *)result;
    result = strlen((const char *)result);
    if (result - 8193 >= 0xFFFFFFFFFFFFE000)
    {
      v2 = result;
      v3 = sub_100024A5C();
      result = (size_t)pthread_getspecific(v3);
      if (result)
      {
        v4 = result;
        v5 = v2 + 3;
        v6 = *(unsigned __int16 *)(result + 72);
        if (v6 + (unsigned __int16)(v2 + 3) <= *(unsigned __int16 *)(result + 74))
        {
          v7 = result + v6;
          *(_WORD *)(v7 + 76) = v5;
          v8 = v7 + 78;
          result = (size_t)memcpy((void *)(v7 + 78), v1, v2);
          *(_BYTE *)(v8 + v2) = 0;
          *(_WORD *)(v4 + 72) += v5;
        }
      }
    }
  }
  return result;
}

_WORD *sub_1000249A0(_WORD *result)
{
  int v1;
  pthread_key_t v2;

  if ((result & 0x80000000) != 0)
  {
    v1 = (int)result;
    v2 = sub_100024A5C();
    result = pthread_getspecific(v2);
    if (result)
    {
      if ((*(_DWORD *)result & 0x80000000) == 0)
      {
        *(_DWORD *)result = v1;
        result[3] = 0;
      }
    }
  }
  return result;
}

_DWORD *sub_1000249E0(_DWORD *result)
{
  int v1;
  pthread_key_t v2;
  uint64_t v3;

  if ((result & 0x80000000) != 0)
  {
    v1 = (int)result;
    v2 = sub_100024A5C();
    result = pthread_getspecific(v2);
    if (result)
    {
      if ((*result & 0x80000000) == 0)
      {
        v3 = *((unsigned __int16 *)result + 3);
        if (v3 <= 0xF)
        {
          result[v3 + 2] = v1;
          *((_WORD *)result + 3) = v3 + 1;
        }
      }
    }
  }
  return result;
}

size_t ParallelCompressionUpdateError(_WORD *a1, size_t a2)
{
  sub_1000249A0(a1);
  return sub_100024904(a2);
}

uint64_t sub_100024A5C()
{
  int *v0;

  if (pthread_once(&stru_1001A05D0, (void (*)(void))sub_100024AB8))
  {
    v0 = __error();
    sub_100024658("/Library/Caches/com.apple.xbs/Sources/ParallelCompression/Common/Threads.c", "getErrorContextKey", 53, 5, *v0, "pthread_once");
  }
  return qword_1001A0F28;
}

uint64_t sub_100024AB8()
{
  uint64_t result;
  int *v1;

  result = pthread_key_create((pthread_key_t *)&qword_1001A0F28, 0);
  if ((_DWORD)result)
  {
    v1 = __error();
    return sub_100024658("/Library/Caches/com.apple.xbs/Sources/ParallelCompression/Common/Threads.c", "createErrorContextKey", 42, 5, *v1, "pthread_key_create");
  }
  return result;
}

uint64_t sub_100024B0C(int a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  int v12;
  char v13;
  const char *v14;
  __int16 v15;
  char v17;

  v8 = (2 * a1);
  if (!(_DWORD)v8)
  {
LABEL_13:
    v11 = 0;
    return (v11 << 31 >> 31);
  }
  v9 = 0;
  v10 = 0;
  v11 = 1;
  while (1)
  {
    v12 = *(unsigned __int8 *)(a3 + v9);
    if (!*(_BYTE *)(a3 + v9))
    {
      v14 = "truncated hex string";
      v15 = 13;
      goto LABEL_16;
    }
    if ((v12 - 48) >= 0xA)
      break;
    v13 = -48;
LABEL_10:
    v10 = v13 + 16 * v10 + v12;
    if ((v9 & 1) != 0)
    {
      *a2++ = v10;
      v10 = 0;
    }
    v11 = ++v9 < v8;
    if (v8 == v9)
      goto LABEL_13;
  }
  if ((v12 - 97) < 6)
  {
    v13 = -87;
    goto LABEL_10;
  }
  if ((v12 - 65) < 6)
  {
    v13 = -55;
    goto LABEL_10;
  }
  v14 = "invalid hex string";
  v15 = 18;
LABEL_16:
  sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AASerialization.c", (uint64_t)"aaParseHexString", v15, 106, 0, v14, a7, a8, v17);
  return (v11 << 31 >> 31);
}

uint64_t sub_100024BF8(uint64_t a1, char a2)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  size_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = (_QWORD *)(a1 + 72);
  if (v5 >= v4)
  {
    if (v4)
      v8 = v4 + (v4 >> 1);
    else
      v8 = 256;
    *(_QWORD *)(a1 + 72) = v8;
    v7 = reallocf(*(void **)(a1 + 88), v8);
    *(_QWORD *)(a1 + 88) = v7;
    if (!v7)
    {
      v10 = __error();
      sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"jsonPushLabel", 358, 109, *v10, "malloc", v11, v12, v14);
      *v6 = 0;
      v6[1] = 0;
      return 0xFFFFFFFFLL;
    }
    v5 = *(_QWORD *)(a1 + 80);
  }
  else
  {
    v7 = *(_BYTE **)(a1 + 88);
  }
  v9 = 0;
  *(_QWORD *)(a1 + 80) = v5 + 1;
  v7[v5] = a2;
  return v9;
}

uint64_t sub_100024CAC(uint64_t a1, char a2)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  size_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = (_QWORD *)(a1 + 96);
  if (v5 >= v4)
  {
    if (v4)
      v8 = v4 + (v4 >> 1);
    else
      v8 = 256;
    *(_QWORD *)(a1 + 96) = v8;
    v7 = reallocf(*(void **)(a1 + 112), v8);
    *(_QWORD *)(a1 + 112) = v7;
    if (!v7)
    {
      v10 = __error();
      sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"jsonPushValue", 372, 109, *v10, "malloc", v11, v12, v14);
      *v6 = 0;
      v6[1] = 0;
      return 0xFFFFFFFFLL;
    }
    v5 = *(_QWORD *)(a1 + 104);
  }
  else
  {
    v7 = *(_BYTE **)(a1 + 112);
  }
  v9 = 0;
  *(_QWORD *)(a1 + 104) = v5 + 1;
  v7[v5] = a2;
  return v9;
}

_QWORD *sub_100024D60(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v2 = malloc(0x78uLL);
  v3 = v2;
  if (v2)
  {
    memset_s(v2, 0x78uLL, 0, 0x78uLL);
    v3[1] = a1;
    v3[5] = 0x10000;
    v4 = malloc(0x10000uLL);
    v3[8] = v4;
    if (v4)
    {
      *(_QWORD *)((char *)v3 + 20) = 32;
      v3[4] = calloc(0x20uLL, 4uLL);
    }
    else
    {
      v8 = __error();
      sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"AAJSONInputStreamOpen", 387, 109, *v8, "malloc", v9, v10, v12);
      sub_100024E48((void **)v3);
      return 0;
    }
  }
  else
  {
    v5 = __error();
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"AAJSONInputStreamOpen", 382, 109, *v5, "malloc", v6, v7, v12);
  }
  return v3;
}

void sub_100024E48(void **a1)
{
  if (a1)
  {
    free(a1[4]);
    free(a1[11]);
    free(a1[14]);
    free(a1[8]);
    free(a1);
  }
}

uint64_t sub_100024E90(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t result;
  unint64_t v14;
  unsigned __int8 *v15;
  ssize_t v16;
  int v17;
  char v18;
  unsigned __int8 v19;
  unint64_t v20;
  char v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  const char *v27;
  int v28;
  const char *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  _BOOL4 v34;
  int v36;
  uint64_t v37;
  int v38;
  const char *v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  if (atomic_load((unsigned int *)a1))
    return 0xFFFFFFFFLL;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10 == 9 || v10 == -1)
  {
    sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"AAJSONInputStreamRead", 418, 109, 0, "unexpected read call", a7, a8, v45);
    return 0xFFFFFFFFLL;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  while (2)
  {
    v14 = *(_QWORD *)(a1 + 56);
    v15 = *(unsigned __int8 **)(a1 + 64);
    if (v14 >= *(_QWORD *)(a1 + 48))
    {
      v16 = AAByteStreamRead(*(AAByteStream *)(a1 + 8), v15, *(_QWORD *)(a1 + 40));
      if (v16 < 0)
      {
        sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"AAJSONInputStreamRead", 430, 109, 0, "read error: %zd", a7, a8, v16);
LABEL_104:
        result = 0xFFFFFFFFLL;
        *(_DWORD *)(a1 + 16) = -1;
        return result;
      }
      if (!v16)
      {
        v29 = "EOF reached";
        v30 = 431;
        goto LABEL_103;
      }
      v14 = 0;
      *(_QWORD *)(a1 + 48) = v16;
      v15 = *(unsigned __int8 **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 56) = v14 + 1;
    v17 = v15[v14];
    v18 = v15[v14];
    switch(*(_DWORD *)(a1 + 16))
    {
      case 0:
        *(_QWORD *)(a1 + 104) = 0;
        if ((char)v17 < 0)
        {
          if (__maskrune((char)v17, 0x4000uLL))
            continue;
        }
        else if ((_DefaultRuneLocale.__runetype[(char)v17] & 0x4000) != 0)
        {
          continue;
        }
        if (v17 == 34)
          goto LABEL_68;
        if (v17 == 43 || v17 == 45 || ((char)v17 - 48) <= 9)
        {
          if ((sub_100024CAC(a1, v17) & 0x80000000) == 0)
          {
            v22 = 3;
            goto LABEL_69;
          }
          v29 = "jsonPushValue";
          v30 = 451;
          goto LABEL_103;
        }
        if (v17 == 123)
        {
          v31 = *(unsigned int *)(a1 + 24);
          if ((_DWORD)v31 == *(_DWORD *)(a1 + 20))
          {
            v29 = "max level reached";
            v30 = 465;
            goto LABEL_103;
          }
          v26 = 0;
          v43 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 24) = v31 + 1;
          *(_DWORD *)(v43 + 4 * v31) = 0;
          v36 = 6;
          goto LABEL_125;
        }
        if (v17 == 91)
        {
          v32 = *(unsigned int *)(a1 + 24);
          if ((_DWORD)v32 == *(_DWORD *)(a1 + 20))
          {
            v29 = "max level reached";
            v30 = 457;
            goto LABEL_103;
          }
          v36 = 0;
          v44 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 24) = v32 + 1;
          v26 = 1;
          *(_DWORD *)(v44 + 4 * v32) = 1;
          goto LABEL_125;
        }
        if (((char)v17 - 97) <= 0x19)
        {
          if ((sub_100024CAC(a1, v17) & 0x80000000) == 0)
          {
            v22 = 4;
            goto LABEL_69;
          }
          v29 = "jsonPushValue";
          v30 = 473;
          goto LABEL_103;
        }
        v24 = *(_DWORD *)(a1 + 24) - 1;
        v33 = (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v24) & 1) == 0 || (char)v17 != 93;
        v34 = (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v24) & 1) == 0 && (char)v17 == 125;
        if (v33 && !v34)
          goto LABEL_102;
        goto LABEL_121;
      case 1:
        if (v17 == 92)
        {
          v22 = 2;
          goto LABEL_69;
        }
        if (v17 == 34)
        {
          *(_DWORD *)(a1 + 16) = 5;
          if ((sub_100024CAC(a1, 0) & 0x80000000) == 0)
          {
            v26 = 3;
            goto LABEL_126;
          }
          v29 = "jsonPushValue";
          v30 = 499;
          goto LABEL_103;
        }
        if ((sub_100024CAC(a1, v17) & 0x80000000) != 0)
        {
          v29 = "jsonPushValue";
          v30 = 503;
          goto LABEL_103;
        }
        continue;
      case 2:
        HIDWORD(v20) = (char)v17;
        LODWORD(v20) = ((char)v17 << 24) - 1644167168;
        v19 = v20 >> 25;
        if (v19 < 0xAu && ((0x341u >> v19) & 1) != 0)
        {
          v21 = aN4info7details[(char)v19];
        }
        else if ((char)v17 == 102)
        {
          v21 = 12;
        }
        else
        {
          v21 = v18;
        }
        if ((sub_100024CAC(a1, v21) & 0x80000000) != 0)
        {
          v29 = "jsonPushValue";
          v30 = 512;
          goto LABEL_103;
        }
LABEL_68:
        v22 = 1;
        goto LABEL_69;
      case 3:
        if (((char)v17 - 48) > 9)
        {
          *(_DWORD *)(a1 + 16) = 5;
          *(_QWORD *)(a1 + 56) = v14;
          if ((sub_100024CAC(a1, 0) & 0x80000000) == 0)
          {
            v26 = 4;
            goto LABEL_126;
          }
          v29 = "jsonPushValue";
          v30 = 539;
          goto LABEL_103;
        }
        if ((sub_100024CAC(a1, v17) & 0x80000000) != 0)
        {
          v29 = "jsonPushValue";
          v30 = 533;
          goto LABEL_103;
        }
        continue;
      case 4:
        if (((char)v17 - 97) > 0x19)
        {
          *(_DWORD *)(a1 + 16) = 5;
          *(_QWORD *)(a1 + 56) = v14;
          if ((sub_100024CAC(a1, 0) & 0x80000000) == 0)
          {
            v27 = *(const char **)(a1 + 112);
            if (!strcmp(v27, "false") || !strcmp(v27, "true"))
            {
              v26 = 6;
            }
            else
            {
              if (strcmp(v27, "null"))
                goto LABEL_102;
              v26 = 7;
            }
            goto LABEL_126;
          }
          v29 = "jsonPushValue";
          v30 = 524;
          goto LABEL_103;
        }
        if ((sub_100024CAC(a1, v17) & 0x80000000) != 0)
        {
          v29 = "jsonPushValue";
          v30 = 519;
          goto LABEL_103;
        }
        continue;
      case 5:
        if ((char)v17 < 0)
        {
          if (__maskrune((char)v17, 0x4000uLL))
            continue;
        }
        else if ((_DefaultRuneLocale.__runetype[(char)v17] & 0x4000) != 0)
        {
          continue;
        }
        v23 = *(_DWORD *)(a1 + 24);
        if (!v23)
        {
          v29 = "invalid JSON state";
          v30 = 546;
          goto LABEL_103;
        }
        v24 = v23 - 1;
        v25 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v24);
        if (v17 != 44)
        {
          if (v17 == 93)
          {
            if ((v25 & 1) != 0)
              goto LABEL_121;
            v18 = 93;
          }
          else if (v17 == 125)
          {
            goto LABEL_91;
          }
LABEL_102:
          v45 = v18;
          v29 = "invalid char %c %s";
          v30 = 610;
          goto LABEL_103;
        }
        if ((v25 & 1) != 0)
          v22 = 0;
        else
          v22 = 6;
LABEL_69:
        *(_DWORD *)(a1 + 16) = v22;
        continue;
      case 6:
        *(_QWORD *)(a1 + 80) = 0;
        if (((char)v17 & 0x80000000) == 0)
        {
          if ((_DefaultRuneLocale.__runetype[(char)v17] & 0x4000) == 0)
            goto LABEL_61;
          continue;
        }
        if (__maskrune((char)v17, 0x4000uLL))
          continue;
LABEL_61:
        if (v17 == 34)
        {
          v22 = 7;
          goto LABEL_69;
        }
        if (v17 != 125)
          goto LABEL_102;
        v28 = *(_DWORD *)(a1 + 24);
        if (!v28)
          goto LABEL_92;
        v24 = v28 - 1;
        v25 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v24);
LABEL_91:
        if ((v25 & 1) != 0)
        {
LABEL_92:
          v18 = 125;
          goto LABEL_102;
        }
LABEL_121:
        *(_DWORD *)(a1 + 24) = v24;
        if (v24)
          v36 = 5;
        else
          v36 = 9;
        v26 = 2;
LABEL_125:
        *(_DWORD *)(a1 + 16) = v36;
LABEL_126:
        if (a2)
          memset_s(a2, 0x38uLL, 0, 0x38uLL);
        *a2 = v26;
        v37 = *(_QWORD *)(a1 + 80);
        if (v37)
          v37 = *(_QWORD *)(a1 + 88);
        *((_QWORD *)a2 + 1) = v37;
        a2[12] = *(_DWORD *)(a1 + 24);
        if (v26 == 6)
        {
          v38 = strcmp(*(const char **)(a1 + 112), "true");
          result = 0;
          a2[9] = v38 == 0;
        }
        else if (v26 == 4)
        {
          v39 = *(const char **)(a1 + 112);
          if (*v39 == 45)
          {
            v40 = strtoull(v39 + 1, 0, 10);
            result = 0;
            *((_QWORD *)a2 + 3) = v40;
            v41 = -1;
          }
          else
          {
            v42 = strtoull(v39, 0, 0);
            result = 0;
            *((_QWORD *)a2 + 3) = v42;
            v41 = v42 != 0;
          }
          a2[8] = v41;
        }
        else
        {
          result = 0;
          if (v26 == 3)
            *((_QWORD *)a2 + 2) = *(_QWORD *)(a1 + 112);
        }
        return result;
      case 7:
        if ((char)v17 == 34)
        {
          if ((sub_100024BF8(a1, 0) & 0x80000000) == 0)
          {
            v22 = 8;
            goto LABEL_69;
          }
          v29 = "jsonPushLabel";
          v30 = 587;
LABEL_103:
          sub_100024658((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"AAJSONInputStreamRead", v30, 109, 0, v29, a7, a8, v45);
          goto LABEL_104;
        }
        if ((sub_100024BF8(a1, v17) & 0x80000000) != 0)
        {
          v29 = "jsonPushLabel";
          v30 = 591;
          goto LABEL_103;
        }
        continue;
      case 8:
        if ((char)v17 < 0)
        {
          if (__maskrune((char)v17, 0x4000uLL))
            continue;
        }
        else if ((_DefaultRuneLocale.__runetype[(char)v17] & 0x4000) != 0)
        {
          continue;
        }
        if ((char)v17 != 58)
          goto LABEL_102;
        v22 = 0;
        goto LABEL_69;
      default:
        goto LABEL_102;
    }
  }
}

BOOL sub_1000256BC(const char *a1)
{
  return !strcmp(a1, "lifs") || strcmp(a1, "fskit") == 0;
}

uint64_t _FSGetLocationFromStatfs(uint64_t a1, char *a2, size_t a3)
{
  void *v6;
  void *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = malloc_type_calloc(1uLL, 0x400uLL, 0x1359B406uLL);
  if (v6)
  {
    v7 = v6;
    if (sub_1000256BC((const char *)(a1 + 72)))
    {
      v8 = strstr((char *)(a1 + 1112), "://");
      if (!v8 || (v9 = v8 + 3, (v10 = strchr(v8 + 3, 47)) == 0))
      {
        v12 = 22;
LABEL_20:
        free(v7);
        return v12;
      }
      if (v10 - v9 >= 1023)
        v11 = 1023;
      else
        v11 = v10 - v9;
      __memcpy_chk(v7, v9, v11, 1024);
      *((_BYTE *)v7 + v11) = 0;
      if (!a2)
      {
LABEL_19:
        v12 = 0;
        goto LABEL_20;
      }
    }
    else
    {
      if (!strncmp((const char *)(a1 + 1112), "/dev/disk", 9uLL))
      {
        v13 = a1 + 1117;
      }
      else if (!strncmp((const char *)(a1 + 1112), "/dev/rdisk", 0xAuLL))
      {
        v13 = a1 + 1118;
      }
      else
      {
        v13 = a1 + 1112;
      }
      __strlcpy_chk(v7, v13, 1024, 1024);
      if (!a2)
        goto LABEL_19;
    }
    strlcpy(a2, (const char *)v7, a3);
    goto LABEL_19;
  }
  return 12;
}

void sub_100025844(_QWORD *a1, uint64_t a2)
{
  _QWORD **v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int64_t v10;
  _QWORD *v11;
  _QWORD **v12;
  BOOL v13;
  _QWORD **v14;
  _QWORD *v15[2];

  sub_1000281BC((uint64_t)&v14, a2 + 72);
  v3 = v14;
  if (v14 != v15)
  {
    v4 = a1 + 1;
    v5 = *a1;
    do
    {
      v6 = *(_QWORD *)(v5 - 128);
      if (!*(_DWORD *)((char *)v4 + v6))
      {
        v7 = *((_DWORD *)v3 + 14) + 2147483643;
        if (v7 <= 3)
        {
          v8 = dword_100140320[v7];
          v9 = dword_100140330[v7];
          *(_DWORD *)((char *)v4 + v6) = v8;
          *v4 = v9;
        }
      }
      v10 = (char *)v3[5] - (char *)v3[4] + ((_BYTE)v3[6] & 1) + ((*((unsigned __int8 *)v3 + 48) >> 1) & 1) - 1;
      *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 128) + 16) += v3[9];
      *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 112) + 56) -= v10 << 9;
      v11 = v3[1];
      if (v11)
      {
        do
        {
          v12 = (_QWORD **)v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD **)v3[2];
          v13 = *v12 == v3;
          v3 = v12;
        }
        while (!v13);
      }
      v3 = v12;
    }
    while (v12 != v15);
  }
  sub_100027D5C((uint64_t)&v14, v15[0]);
}

uint64_t sub_100025964(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  void *__p[2];
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD v26[10];
  char v27;
  uint64_t v28;

  sub_100005920((uint64_t)&v25);
  v24 = *(_DWORD *)(*(_QWORD *)(a2 + 136) + 352);
  sub_1000264F4(&v25, &v24);
  sub_100005598((uint64_t)v26, __p);
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 136);
  v5 = v4 + 8;
  if (v4[31] < 0)
    operator delete(*(void **)v5);
  *(_OWORD *)v5 = *(_OWORD *)__p;
  *((_QWORD *)v5 + 2) = v23;
  __p[0] = 0;
  __p[1] = 0;
  v23 = 0;
  sub_100005708((uint64_t)v26, (__int128 *)__p);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  v6 = *(_QWORD *)(a2 + 136);
  v7 = *(unsigned int *)(v6 + 356);
  if (v7 >= 8)
  {
    v8 = (unsigned __int8 *)(v6 + 360);
    v9 = v7 >> 3;
    v10 = *(_QWORD *)(v25 - 24);
    v11 = *(_DWORD *)((char *)v26 + v10);
    v12 = v9 - 1;
    if (v9 == 1)
    {
      v17 = *(_DWORD *)((char *)v26 + v10);
    }
    else
    {
      v13 = v8;
      v14 = v9 - 1;
      do
      {
        *(_DWORD *)((char *)v26 + *(_QWORD *)(v25 - 24)) = *(_DWORD *)((_BYTE *)v26 + *(_QWORD *)(v25 - 24)) & 0xFFFFFFB5 | 8;
        LOBYTE(__p[0]) = 48;
        v15 = sub_100017554(&v25, (char *)__p);
        *(_QWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 24) = 2;
        v16 = (_QWORD *)std::ostream::operator<<(v15, *v13);
        sub_100005A0C(v16, (uint64_t)" ", 1);
        ++v13;
        --v14;
      }
      while (v14);
      v10 = *(_QWORD *)(v25 - 24);
      v17 = *(_DWORD *)((char *)v26 + v10);
    }
    *(_DWORD *)((char *)v26 + v10) = v17 & 0xFFFFFFB5 | 8;
    LOBYTE(__p[0]) = 48;
    v18 = sub_100017554(&v25, (char *)__p);
    *(_QWORD *)((char *)v18 + *(_QWORD *)(*v18 - 24) + 24) = 2;
    std::ostream::operator<<(v18, v8[v12]);
    *(_DWORD *)((char *)v26 + *(_QWORD *)(v25 - 24)) = v11;
  }
  sub_100005598((uint64_t)v26, __p);
  v19 = (char *)a1 + *(_QWORD *)(*a1 - 136);
  v20 = v19 + 32;
  if (v19[55] < 0)
    operator delete(*(void **)v20);
  *(_OWORD *)v20 = *(_OWORD *)__p;
  *((_QWORD *)v20 + 2) = v23;
  if (v27 < 0)
    operator delete((void *)v26[8]);
  std::streambuf::~streambuf(v26);
  return std::ios::~ios(&v28);
}

void sub_100025BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_10000FE34((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_100025C34(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;

  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  *(_QWORD *)&v26 = *a1;
  *((_QWORD *)&v26 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v24 = v3;
    v25 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v24 = v3;
    v25 = 0;
  }
  do
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v26 + 168))(v26, a2);
    sub_100027CB4(&v24, (uint64_t *)&v26);
    sub_10011EB40((uint64_t)&v26, &v23);
    v8 = v23;
    v23 = 0uLL;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    v26 = v8;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v26;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    v14 = v24;
    if (*((_QWORD *)&v23 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  while (v12 != v14);
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_100025DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_100012168((uint64_t)va);
  sub_100012168((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100025DE0()
{
  sub_1000F6768();
}

void sub_100025F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1000120EC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100025F98(uint64_t a1)
{
  *(_QWORD *)a1 = off_10016FB40;
  *(_QWORD *)(a1 + 56) = off_10016FCA8;
  *(_QWORD *)(a1 + 64) = off_10016FCF0;
  *(_QWORD *)(a1 + 72) = off_100170098;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = off_100170240;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = off_1001703E8;
  *(_QWORD *)(a1 + 24) = off_1001700F0;
  *(_QWORD *)(a1 + 32) = off_100170440;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 200) = off_100170590;
  *(_QWORD *)(a1 + 40) = off_100170298;
  *(_QWORD *)(a1 + 48) = off_1001705E8;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  sub_1000262C8((uint64_t *)(a1 + 256), (uint64_t *)&off_10016FAC0);
}

void sub_100026260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  const void **v3;
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  va_list va;

  va_start(va, a2);
  sub_10002815C((const void **)va);
  sub_10002815C(v6);
  sub_1000263F0(v5, (uint64_t *)&off_10016FAC0);
  sub_10002643C(v4, (uint64_t *)&off_10016FAA0);
  *(_QWORD *)(v2 + 136) = v7;
  *(_QWORD *)(v2 + 40) = v7 + 88;
  sub_100027D2C(v3);
  _Unwind_Resume(a1);
}

void sub_1000262C8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = (uint64_t)off_100170D88;
  v2 = a2[1];
  *a1 = v2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v2 - 24)) = a2[2];
  v3 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v3 - 24)) = a2[3];
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  sub_1000F6A7C();
}

void sub_1000263A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  uint64_t v10;
  const void **v11;

  sub_100027D2C(&a9);
  sub_10002818C(&a10);
  sub_100027D2C((const void **)(v10 + 24));
  sub_100027D2C((const void **)(v10 + 16));
  sub_100027D2C(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1000263F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = a2[3];
  sub_100027D2C((const void **)(a1 + 24));
  sub_100027D2C((const void **)(a1 + 16));
  sub_100027D2C((const void **)(a1 + 8));
  return a1;
}

uint64_t sub_10002643C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = a2[3];
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

const __CFString *sub_100026490(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 8) - 3;
  if (v1 > 7)
    return CFSTR("UDRO");
  else
    return off_100170DA8[v1];
}

const __CFString *sub_1000264BC(_QWORD *a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 48) + 8) - 3;
  if (v1 > 7)
    return CFSTR("UDRO");
  else
    return off_100170DA8[v1];
}

_QWORD *sub_1000264F4(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;

  v2 = 0;
  while (dword_100170918[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 66)
    {
      v3 = "no_match";
      v4 = 8;
      return sub_100005A0C(a1, (uint64_t)v3, v4);
    }
  }
  v5 = &dword_100170918[v2];
  v3 = (const char *)*((_QWORD *)v5 + 1);
  v4 = *((_QWORD *)v5 + 2);
  return sub_100005A0C(a1, (uint64_t)v3, v4);
}

void sub_100026538(int a1, CFArrayRef theArray)
{
  CFArrayGetCount(theArray);
  operator new[]();
}

void sub_1000267AC()
{
  operator delete[]();
}

void sub_100026818(uint64_t a1, int *a2)
{
  __CFDictionary *Mutable;
  int v5;
  void **v6;
  CFStringRef v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  CFStringRef v11;
  int v12;
  _QWORD v13[2];
  uint64_t v14;
  _QWORD v15[10];
  char v16;
  uint64_t v17;

  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v5 = *a2;
  sub_100027EC8((uint64_t)v13);
  v12 = v5;
  sub_100027FF4(&v14, &v12);
  sub_100005598((uint64_t)v15, __p);
  if (v10 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  v7 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v6, 0x8000100u);
  v11 = v7;
  sub_100027D2C((const void **)&v11);
  if (v10 < 0)
    operator delete(__p[0]);
  *(_QWORD *)((char *)v13
  v14 = v8;
  if (v16 < 0)
    operator delete((void *)v15[8]);
  std::streambuf::~streambuf(v15);
  std::ios::~ios(&v17);
  CFDictionaryAddValue(Mutable, CFSTR("Type"), v7);
  CFRelease(v7);
  sub_1000FDC60(Mutable, CFSTR("Reserved"), a2[1]);
  sub_1000FDC60(Mutable, CFSTR("Sector Count"), *((_QWORD *)a2 + 2));
  sub_1000FDC60(Mutable, CFSTR("Start Offset"), *((_QWORD *)a2 + 1));
  sub_1000FDC60(Mutable, CFSTR("Compressed Offset"), *((_QWORD *)a2 + 3));
  sub_1000FDC60(Mutable, CFSTR("Compressed Length"), *((_QWORD *)a2 + 4));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), Mutable);
}

void sub_1000269E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void (__cdecl **a21)(std::stringbuf *__hidden this),uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v38;

  if (a15 < 0)
    operator delete(__p);
  *(uint64_t *)((char *)&a18
  a20 = v38;
  if (a34 < 0)
    operator delete(a29);
  std::streambuf::~streambuf(&a21);
  std::ios::~ios(&a37);
  _Unwind_Resume(a1);
}

void sub_100026A70()
{
  operator delete();
}

const void **sub_100026A84@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t i;
  const void *v6;
  uint64_t valuePtr;
  const __CFString **v8;
  uint64_t v9;
  const __CFString *v10;
  CFNumberRef v11;
  const __CFString *v12;
  CFNumberRef v13;
  const __CFString *v14;
  uint64_t v15;

  sub_1000FDD8C((CFMutableDictionaryRef *)&v6);
  valuePtr = *(_QWORD *)(a1 + 8);
  v8 = (const __CFString **)CFSTR("Total Bytes");
  v9 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  v10 = CFSTR("Sector Count");
  valuePtr = *(_QWORD *)(a1 + 16);
  v11 = 0;
  v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  v12 = CFSTR("Empty Bytes");
  valuePtr = *(_QWORD *)(a1 + 56);
  v13 = 0;
  v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  v14 = (const __CFString *)&v8;
  v15 = 3;
  sub_1000FE344((CFMutableDictionaryRef *)&v6, (uint64_t *)&v14);
  for (i = 5; i != -1; i -= 2)
    sub_100028038((const void **)&(&v8)[i]);
  if (*(_BYTE *)(a1 + 48))
  {
    v14 = CFSTR("Max Size Bytes");
    valuePtr = *(_QWORD *)(a1 + 40);
    v15 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
    v8 = &v14;
    v9 = 1;
    sub_1000FE344((CFMutableDictionaryRef *)&v6, (uint64_t *)&v8);
    sub_100028038((const void **)&v15);
  }
  if (*(_BYTE *)(a1 + 32))
  {
    v14 = CFSTR("Min Size Bytes");
    valuePtr = *(_QWORD *)(a1 + 24);
    v15 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
    v8 = &v14;
    v9 = 1;
    sub_1000FE344((CFMutableDictionaryRef *)&v6, (uint64_t *)&v8);
    sub_100028038((const void **)&v15);
  }
  *a2 = v6;
  v6 = 0;
  return sub_100028068(&v6);
}

void sub_100026C68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void **v2;
  va_list va;

  va_start(va, a2);
  sub_100028038(v2);
  sub_100028068((const void **)va);
  _Unwind_Resume(a1);
}

void sub_100026CE8()
{
  JUMPOUT(0x100026CE0);
}

const __CFString *sub_100026CF0()
{
  return CFSTR("Size Info");
}

void sub_100026D00()
{
  operator delete();
}

uint64_t sub_100026D20(uint64_t a1)
{
  *(_QWORD *)a1 = off_100170BE0;
  *(_QWORD *)(a1 + 32) = off_100170C38;
  sub_100027D2C((const void **)(a1 + 24));
  return a1;
}

void sub_100026D5C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100170BE0;
  *(_QWORD *)(a1 + 32) = off_100170C38;
  sub_100027D2C((const void **)(a1 + 24));
  operator delete();
}

const void **sub_100026DA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const CFBooleanRef *v4;
  CFBooleanRef v5;
  const void *v6;
  uint64_t i;
  const void *v9;
  const void *valuePtr;
  uint64_t **v11;
  uint64_t v12;
  const __CFString *v13;
  const void *v14;
  uint64_t *v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 16))
    v4 = &kCFBooleanTrue;
  else
    v4 = &kCFBooleanFalse;
  v5 = *v4;
  v15 = (uint64_t *)CFSTR("Is Encrypted");
  v16 = (uint64_t)v5;
  valuePtr = 0;
  v11 = &v15;
  v12 = 1;
  sub_1000FE38C((uint64_t *)&v11, (CFMutableDictionaryRef *)&v9);
  sub_100028038((const void **)&v16);
  sub_100028098(&valuePtr);
  if (*(_BYTE *)(a1 + 16))
  {
    valuePtr = *(const void **)(a1 + 8);
    v11 = (uint64_t **)CFSTR("Key Size");
    v12 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
    v13 = CFSTR("UUID");
    v6 = *(const void **)(a1 + 24);
    v14 = v6;
    if (v6)
      CFRetain(v6);
    v15 = (uint64_t *)&v11;
    v16 = 2;
    sub_1000FE344((CFMutableDictionaryRef *)&v9, (uint64_t *)&v15);
    for (i = 3; i != -1; i -= 2)
      sub_100028038((const void **)&(&v11)[i]);
  }
  *a2 = v9;
  v9 = 0;
  return sub_100028068(&v9);
}

void sub_100026EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void **v2;
  va_list va;

  va_start(va, a2);
  sub_100028038(v2);
  sub_100028068((const void **)va);
  _Unwind_Resume(a1);
}

const __CFString *sub_100026F58()
{
  return CFSTR("Encryption Info");
}

const void **sub_100026F64(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = off_100170BE0;
  *((_QWORD *)v1 + 4) = off_100170C38;
  return sub_100027D2C((const void **)v1 + 3);
}

void sub_100026F8C(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = off_100170BE0;
  *((_QWORD *)v1 + 4) = off_100170C38;
  sub_100027D2C((const void **)v1 + 3);
  operator delete();
}

void sub_100026FE4()
{
  operator delete();
}

const void **sub_100026FF8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v4;
  const __CFString *v5;
  uint64_t i;
  const void **result;
  uint64_t v8[2];
  const void *v9;
  uint64_t valuePtr;
  _QWORD v11[3];
  CFNumberRef v12;
  const __CFString *v13;
  const __CFString *v14;

  valuePtr = *(_QWORD *)(a1 + 16);
  v11[0] = CFSTR("Compressed Bytes");
  v11[1] = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  LODWORD(valuePtr) = *(_DWORD *)(a1 + 24);
  v11[2] = CFSTR("Compression Ratio");
  v12 = 0;
  v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
  v4 = *(_DWORD *)(a1 + 8) - 1;
  if (v4 > 3)
    v5 = CFSTR("raw");
  else
    v5 = off_100170DE8[v4];
  v13 = CFSTR("Compression Type");
  v14 = v5;
  v8[0] = (uint64_t)v11;
  v8[1] = 3;
  sub_1000FE38C(v8, (CFMutableDictionaryRef *)&v9);
  *a2 = v9;
  v9 = 0;
  sub_100028068(&v9);
  for (i = 5; i != -1; i -= 2)
    result = sub_100028038((const void **)&v11[i]);
  return result;
}

void sub_10002712C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 40; i != -8; i -= 16)
    sub_100028038((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

const __CFString *sub_100027168()
{
  return CFSTR("Compression Info");
}

void sub_100027178()
{
  operator delete();
}

uint64_t sub_100027198(uint64_t a1)
{
  *(_QWORD *)a1 = off_100170C70;
  *(_QWORD *)(a1 + 56) = off_100170CC8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1000271EC(uint64_t a1)
{
  *(_QWORD *)a1 = off_100170C70;
  *(_QWORD *)(a1 + 56) = off_100170CC8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  operator delete();
}

const void **sub_100027250@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const UInt8 *v4;
  CFIndex v5;
  const UInt8 *v6;
  CFIndex v7;
  const void *v8;
  uint64_t i;
  uint64_t v11[2];
  const void *v12;
  CFTypeRef v13;
  CFTypeRef cf;
  _QWORD v15[4];

  if (*(char *)(a1 + 55) < 0)
  {
    v4 = *(const UInt8 **)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v4 = (const UInt8 *)(a1 + 32);
    v5 = *(unsigned __int8 *)(a1 + 55);
  }
  cf = CFStringCreateWithBytes(kCFAllocatorDefault, v4, v5, 0x8000100u, 0);
  if (*(char *)(a1 + 31) < 0)
  {
    v6 = *(const UInt8 **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v6 = (const UInt8 *)(a1 + 8);
    v7 = *(unsigned __int8 *)(a1 + 31);
  }
  v8 = CFStringCreateWithBytes(kCFAllocatorDefault, v6, v7, 0x8000100u, 0);
  v13 = v8;
  v15[0] = CFSTR("Checksum Value");
  v15[1] = cf;
  if (cf)
  {
    CFRetain(cf);
    v8 = v13;
  }
  v15[2] = CFSTR("Checksum Type");
  v15[3] = v8;
  if (v8)
    CFRetain(v8);
  v11[0] = (uint64_t)v15;
  v11[1] = 2;
  sub_1000FE38C(v11, (CFMutableDictionaryRef *)&v12);
  *a2 = v12;
  v12 = 0;
  sub_100028068(&v12);
  for (i = 3; i != -1; i -= 2)
    sub_100028038((const void **)&v15[i]);
  sub_100027D2C(&v13);
  return sub_100027D2C(&cf);
}

void sub_1000273A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const void **v4;
  const void *v6;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, const void *);
  sub_100028038(v4);
  sub_100027D2C((const void **)va);
  sub_100027D2C((const void **)va1);
  _Unwind_Resume(a1);
}

const __CFString *sub_1000273FC()
{
  return CFSTR("Master Checksum Info");
}

void sub_100027408(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = off_100170C70;
  *((_QWORD *)v1 + 7) = off_100170CC8;
  if (v1[55] < 0)
    operator delete(*((void **)v1 + 4));
  if (v1[31] < 0)
    operator delete(*((void **)v1 + 1));
}

void sub_100027460(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = off_100170C70;
  *((_QWORD *)v1 + 7) = off_100170CC8;
  if (v1[55] < 0)
    operator delete(*((void **)v1 + 4));
  if (v1[31] < 0)
    operator delete(*((void **)v1 + 1));
  operator delete();
}

uint64_t sub_1000274CC(uint64_t a1)
{
  *(_QWORD *)a1 = off_100170D00;
  *(_QWORD *)(a1 + 32) = off_100170D58;
  sub_100027D2C((const void **)(a1 + 24));
  sub_100027D2C((const void **)(a1 + 16));
  sub_100027D2C((const void **)(a1 + 8));
  return a1;
}

void sub_100027518(uint64_t a1)
{
  *(_QWORD *)a1 = off_100170D00;
  *(_QWORD *)(a1 + 32) = off_100170D58;
  sub_100027D2C((const void **)(a1 + 24));
  sub_100027D2C((const void **)(a1 + 16));
  sub_100027D2C((const void **)(a1 + 8));
  operator delete();
}

const void **sub_100027574@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const __CFString **v8;
  uint64_t v9;
  const void *v10;
  const __CFString *v11;
  const void *v12;

  v4 = (const void *)a1[1];
  v11 = CFSTR("UUID");
  v12 = v4;
  if (v4)
    CFRetain(v4);
  v8 = &v11;
  v9 = 1;
  sub_1000FE38C((uint64_t *)&v8, (CFMutableDictionaryRef *)&v10);
  sub_100028038(&v12);
  v5 = (const void *)a1[3];
  if (v5)
  {
    v11 = CFSTR("Parent UUID");
    v12 = v5;
    CFRetain(v5);
    v8 = &v11;
    v9 = 1;
    sub_1000FE344((CFMutableDictionaryRef *)&v10, (uint64_t *)&v8);
    sub_100028038(&v12);
  }
  v6 = (const void *)a1[2];
  if (v6)
  {
    v11 = CFSTR("Stable UUID");
    v12 = v6;
    CFRetain(v6);
    v8 = &v11;
    v9 = 1;
    sub_1000FE344((CFMutableDictionaryRef *)&v10, (uint64_t *)&v8);
    sub_100028038(&v12);
  }
  *a2 = v10;
  v10 = 0;
  return sub_100028068(&v10);
}

void sub_100027698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void **v3;
  va_list va;

  va_start(va, a3);
  sub_100028038(v3);
  sub_100028068((const void **)va);
  _Unwind_Resume(a1);
}

const __CFString *sub_1000276E4()
{
  return CFSTR("Identity Info");
}

const void **sub_1000276F0(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = off_100170D00;
  *((_QWORD *)v1 + 4) = off_100170D58;
  sub_100027D2C((const void **)v1 + 3);
  sub_100027D2C((const void **)v1 + 2);
  return sub_100027D2C((const void **)v1 + 1);
}

void sub_10002773C(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = off_100170D00;
  *((_QWORD *)v1 + 4) = off_100170D58;
  sub_100027D2C((const void **)v1 + 3);
  sub_100027D2C((const void **)v1 + 2);
  sub_100027D2C((const void **)v1 + 1);
  operator delete();
}

uint64_t sub_1000277A0(uint64_t a1)
{
  *(_QWORD *)a1 = off_10016F558;
  *(_QWORD *)(a1 + 24) = off_10016F5A0;
  *(_QWORD *)(a1 + 32) = off_10016F5E8;
  *(_QWORD *)(a1 + 40) = off_10016F630;
  *(_QWORD *)(a1 + 48) = off_10016F678;
  *(_QWORD *)(a1 + 56) = off_10016F6C0;
  *(_QWORD *)(a1 + 64) = off_10016F708;
  *(_QWORD *)(a1 + 72) = off_10016F768;
  *(_QWORD *)(a1 + 136) = off_10016F7D8;
  *(_QWORD *)(a1 + 168) = off_10016F848;
  *(_QWORD *)(a1 + 200) = off_10016F8B8;
  *(_QWORD *)(a1 + 256) = off_10016F928;
  sub_10002815C((const void **)(a1 + 16));
  *(_QWORD *)(a1 + 256) = off_100170738;
  *(_QWORD *)(a1 + 64) = off_100170790;
  sub_100027D2C((const void **)(a1 + 280));
  sub_100027D2C((const void **)(a1 + 272));
  sub_100027D2C((const void **)(a1 + 264));
  *(_QWORD *)(a1 + 200) = off_100170590;
  *(_QWORD *)(a1 + 48) = off_1001705E8;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  *(_QWORD *)(a1 + 136) = off_100170240;
  *(_QWORD *)(a1 + 40) = off_100170298;
  sub_100027D2C((const void **)(a1 + 160));
  return a1;
}

void sub_10002789C(uint64_t a1)
{
  sub_1000277A0(a1);
  operator delete();
}

const void **sub_1000278C0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  const void *v6;
  CFTypeRef cf;
  const void *v9;
  const void *v10;
  uint64_t **v11;
  uint64_t v12;
  const __CFString *v13;
  CFTypeRef v14;
  const __CFString *v15;
  const void *v16;
  const __CFString *v17;
  const void *v18;
  const __CFString *v19;
  const void *v20;
  const __CFString *v21;
  const void *v22;
  const __CFString *v23;
  const void *v24;
  uint64_t *v25;
  uint64_t v26;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v11 = (uint64_t **)CFSTR("Image Format");
  v12 = v4;
  sub_1000280C8(a1, (CFStringRef *)&cf);
  v13 = CFSTR("Format Description");
  v14 = cf;
  if (cf)
    CFRetain(cf);
  sub_100026A84((uint64_t)a1 + *(_QWORD *)(*a1 - 112), &v10);
  v15 = CFSTR("Size Info");
  v16 = v10;
  v10 = 0;
  sub_100012138(&v10);
  sub_100026DA8((uint64_t)a1 + *(_QWORD *)(*a1 - 120), &v10);
  v17 = CFSTR("Encryption Info");
  v18 = v10;
  v10 = 0;
  sub_100012138(&v10);
  sub_100026FF8((uint64_t)a1 + *(_QWORD *)(*a1 - 128), &v10);
  v19 = CFSTR("Compression Info");
  v20 = v10;
  v10 = 0;
  sub_100012138(&v10);
  sub_100027250((uint64_t)a1 + *(_QWORD *)(*a1 - 136), &v10);
  v21 = CFSTR("Master Checksum Info");
  v22 = v10;
  v10 = 0;
  sub_100012138(&v10);
  sub_100027574((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 144)), &v10);
  v23 = CFSTR("Identity Info");
  v24 = v10;
  v10 = 0;
  sub_100012138(&v10);
  v25 = (uint64_t *)&v11;
  v26 = 7;
  sub_1000FE38C((uint64_t *)&v25, (CFMutableDictionaryRef *)&v9);
  for (i = 13; i != -1; i -= 2)
    sub_100028038((const void **)&(&v11)[i]);
  sub_100027D2C(&cf);
  v6 = (const void *)a1[2];
  if (v6)
  {
    v25 = (uint64_t *)CFSTR("Runs");
    v26 = (uint64_t)v6;
    CFRetain(v6);
    v11 = &v25;
    v12 = 1;
    sub_1000FE344((CFMutableDictionaryRef *)&v9, (uint64_t *)&v11);
    sub_100028038((const void **)&v26);
  }
  *a2 = v9;
  v9 = 0;
  return sub_100028068(&v9);
}

void sub_100027AF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void **v2;
  va_list va;

  va_start(va, a2);
  sub_100028038(v2);
  sub_100028068((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100027B84(_QWORD *a1)
{
  return sub_1000277A0((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void sub_100027B94(_QWORD *a1)
{
  sub_1000277A0((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
  operator delete();
}

uint64_t sub_100027BC4(_QWORD *a1)
{
  return sub_1000277A0((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void sub_100027BD4(_QWORD *a1)
{
  sub_1000277A0((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
  operator delete();
}

const void **sub_100027C04@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000278C0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 40)), a2);
}

char *sub_100027C14(_QWORD *a1)
{
  return (char *)a1 + *(_QWORD *)(*a1 - 32);
}

char *sub_100027C24(_QWORD *a1)
{
  return (char *)a1 + *(_QWORD *)(*a1 - 40);
}

char *sub_100027C34(_QWORD *a1)
{
  return (char *)a1 + *(_QWORD *)(*a1 - 32);
}

char *sub_100027C44(_QWORD *a1)
{
  return (char *)a1 + *(_QWORD *)(*a1 - 40);
}

char *sub_100027C54(_QWORD *a1)
{
  return (char *)a1 + *(_QWORD *)(*a1 - 32);
}

char *sub_100027C64(_QWORD *a1)
{
  return (char *)a1 + *(_QWORD *)(*a1 - 40);
}

char *sub_100027C74(_QWORD *a1)
{
  return (char *)a1 + *(_QWORD *)(*a1 - 32);
}

char *sub_100027C84(_QWORD *a1)
{
  return (char *)a1 + *(_QWORD *)(*a1 - 40);
}

char *sub_100027C94(_QWORD *a1)
{
  return (char *)a1 + *(_QWORD *)(*a1 - 32);
}

char *sub_100027CA4(_QWORD *a1)
{
  return (char *)a1 + *(_QWORD *)(*a1 - 40);
}

_QWORD *sub_100027CB4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

const void **sub_100027D2C(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_100027D5C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100027D5C(a1, *a2);
    sub_100027D5C(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *sub_100027DA0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7;
  _QWORD v8[10];
  char v9;
  uint64_t v10;

  sub_100005920((uint64_t)&v7);
  sub_100005A0C(&v7, (uint64_t)"CoreFoundation type mismatch: ", 30);
  std::ostream::operator<<(&v7, a2);
  sub_100005A0C(&v7, (uint64_t)" while expecting ", 17);
  std::ostream::operator<<(&v7, a3);
  sub_100012294((uint64_t)a1, (uint64_t)&v7, 0x16u);
  if (v9 < 0)
    operator delete((void *)v8[8]);
  std::streambuf::~streambuf(v8);
  std::ios::~ios(&v10);
  *a1 = &off_100170A48;
  return a1;
}

void sub_100027EA4(std::exception *a1)
{
  sub_100005554(a1);
  operator delete();
}

uint64_t sub_100027EC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1 + 16;
  v3 = a1 + 24;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 24));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(v2 + *(_QWORD *)(v7 - 24)) = v8;
  *(_QWORD *)a1 = v9;
  std::streambuf::basic_streambuf(v3);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_100027FCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::iostream::~basic_iostream(v2, v3 + 8);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100027FF4(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;

  v2 = 0;
  while (dword_100170A60[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 90)
    {
      v3 = "no_match";
      v4 = 8;
      return sub_100005A0C(a1, (uint64_t)v3, v4);
    }
  }
  v5 = &dword_100170A60[v2];
  v3 = (const char *)*((_QWORD *)v5 + 1);
  v4 = *((_QWORD *)v5 + 2);
  return sub_100005A0C(a1, (uint64_t)v3, v4);
}

const void **sub_100028038(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_100028068(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_100028098(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

CFStringRef sub_1000280C8@<X0>(_QWORD *a1@<X0>, CFStringRef *a2@<X8>)
{
  unsigned int v3;
  const __CFString *v4;
  CFStringRef result;

  v3 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 128) + 8);
  if (v3)
  {
    if (v3 > 4)
      v4 = CFSTR("raw");
    else
      v4 = off_100170DE8[v3 - 1];
    result = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%s (%@)"), "UDIF read-only compressed image", v4);
  }
  else
  {
    result = CFSTR("UDIF uncompressed read-only image");
  }
  *a2 = result;
  return result;
}

const void **sub_10002815C(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_10002818C(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t sub_1000281BC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  sub_100028210((_OWORD *)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1000281F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100027D5C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_100028210(_OWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)result + 1;
    do
    {
      result = sub_100028294(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *sub_100028294(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t *v10;
  uint64_t *v11;

  v6 = sub_100028330(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a4 + 24);
    v7[4] = *(_OWORD *)(a4 + 32);
    sub_1000284A8(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_100028330(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, uint64_t a5)
{
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;

  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_5;
  v5 = *(_BYTE *)(a5 + 16);
  v6 = (v5 & 1) + *(_QWORD *)(a5 + 8) - 1;
  v7 = a2[4];
  if ((a2[6] & 2) == 0)
    ++v7;
  if (v6 < v7)
  {
LABEL_5:
    v8 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v10 = a2;
LABEL_23:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v15 = a2;
      do
      {
        v10 = (uint64_t *)v15[2];
        v11 = *v10 == (_QWORD)v15;
        v15 = v10;
      }
      while (v11);
    }
    v16 = *(_QWORD *)a5;
    if ((*(_BYTE *)(a5 + 16) & 2) == 0)
      ++v16;
    if ((unint64_t)(v10[6] & 1) + v10[5] - 1 < v16)
      goto LABEL_23;
    return sub_1000284FC((uint64_t)a1, a3, a5);
  }
  v11 = (v5 & 2) == 0;
  v12 = *(_QWORD *)a5;
  if (v11)
    ++v12;
  if ((unint64_t)(a2[6] & 1) + a2[5] - 1 < v12)
  {
    v13 = a2[1];
    if (v13)
    {
      v14 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v14;
        v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      v17 = a2;
      do
      {
        a4 = (uint64_t **)v17[2];
        v11 = *a4 == v17;
        v17 = (uint64_t *)a4;
      }
      while (!v11);
    }
    if (a4 == a1 + 1)
      goto LABEL_34;
    v18 = (unint64_t)a4[4];
    if (((_BYTE)a4[6] & 2) == 0)
      ++v18;
    if (v6 < v18)
    {
LABEL_34:
      if (v13)
      {
        *a3 = (uint64_t *)a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return (uint64_t *)a4;
    }
    return sub_1000284FC((uint64_t)a1, a3, a5);
  }
  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

uint64_t *sub_1000284A8(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_100028580(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

_QWORD *sub_1000284FC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  char v8;
  unint64_t v9;

  v5 = *(_QWORD *)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    if ((*(_BYTE *)(a3 + 16) & 2) != 0)
      v6 = *(_QWORD *)a3;
    else
      v6 = *(_QWORD *)a3 + 1;
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = *(_BYTE *)(v4 + 48);
        v9 = v7[4];
        if ((v8 & 2) == 0)
          ++v9;
        if ((unint64_t)(*(_BYTE *)(a3 + 16) & 1) + *(_QWORD *)(a3 + 8) - 1 >= v9)
          break;
        v4 = *v7;
        result = v7;
        if (!*v7)
          goto LABEL_14;
      }
      if ((unint64_t)(v8 & 1) + v7[5] - 1 >= v6)
        break;
      result = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = result;
  }
LABEL_14:
  *a2 = v7;
  return result;
}

uint64_t *sub_100028580(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t sub_100028738()
{
  return 0;
}

uint64_t sub_100028740()
{
  return 0;
}

uint64_t sub_100028750()
{
  return 0;
}

uint64_t sub_100028758()
{
  return 0;
}

uint64_t sub_100028760()
{
  return 0;
}

uint64_t sub_100028768()
{
  return 0;
}

uint64_t sub_100028770()
{
  return 0;
}

uint64_t sub_100028778()
{
  return 0;
}

uint64_t sub_100028780()
{
  return 0;
}

uint64_t sub_100028788()
{
  return 0;
}

uint64_t sub_100028790()
{
  return 0;
}

uint64_t sub_100028798()
{
  return 0;
}

void sub_100028938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_10002894C(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onDiskDisappearedWithDisk:", a1);
}

id sub_100029430(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setCallbackReached:", 1);
}

void sub_100029D54(uint64_t a1, const __DADissenter *a2, void *a3)
{
  uint64_t Status;
  NSString *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  if (a2)
  {
    Status = DADissenterGetStatus(a2);
    v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Dissented with status 0x%X, pid %d"), Status, DADissenterGetProcessID(a2));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[DIError errorWithEnumValue:verboseInfo:](DIError, "errorWithEnumValue:verboseInfo:", 156, v6));
    objc_msgSend(v8, "setOperationError:", v7);

  }
  objc_msgSend(v8, "setCallbackReached:", 1);

}

uint64_t sub_10002BE54@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;

  if (*(_QWORD *)(result + 24) == *(_QWORD *)(result + 16))
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  v3 = **(_QWORD **)result + *(_QWORD *)(result + 32);
  if (*(_QWORD *)(result + 56))
    v4 = a2 == 0;
  else
    v4 = 0;
  if (!v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)result + 8);
    if (!v5)
      goto LABEL_12;
LABEL_10:
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(result + 64);
  if (v5)
    goto LABEL_10;
LABEL_12:
  *(_QWORD *)a3 = v3;
  *(_QWORD *)(a3 + 8) = v5;
  v8 = *(_QWORD *)(result + 32);
  v9 = *(_QWORD *)(*(_QWORD *)result + 16) - v8;
  if (v9 >= *(_QWORD *)(result + 24) - *(_QWORD *)(result + 16))
    v9 = *(_QWORD *)(result + 24) - *(_QWORD *)(result + 16);
  v10 = **(_QWORD **)(result + 8);
  v11 = v10 >= v8;
  v12 = v10 - v8;
  if (!v11)
    v12 = 0;
  *(_QWORD *)(a3 + 16) = v9;
  *(_QWORD *)(a3 + 24) = v12;
  return result;
}

uint64_t sub_10002BEEC(uint64_t a1, _QWORD *a2, unint64_t **a3, unint64_t a4, unint64_t a5, unint64_t a6, char a7)
{
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15[2];

  v8 = 0;
  *(_QWORD *)a1 = *a2;
  v9 = *a3;
  *(_QWORD *)(a1 + 56) = 0;
  v10 = a1 + 56;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  *(_BYTE *)(a1 + 48) = a7;
  *(_QWORD *)(a1 + 64) = 0;
  if (a4 < a5)
  {
    v8 = **a3;
    if (v8 >= a6)
      v8 = a6;
  }
  *(_QWORD *)(a1 + 40) = v8;
  sub_10002BE54(a1, 1, (uint64_t)v15);
  sub_100015BC8(v10, v15);
  *(_OWORD *)(a1 + 72) = v15[1];
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15[0] + 1);
  if (*((_QWORD *)&v15[0] + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15[0] + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

uint64_t sub_10002BFB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11[2];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  if (v2 != v3)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 16) + v2 - *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)a1 + 24;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v4 + 8;
    *(_QWORD *)(a1 + 16) = v5;
  }
  sub_10002BE54(a1, v2 != v3, (uint64_t)v11);
  sub_100015BC8(a1 + 56, v11);
  *(_OWORD *)(a1 + 72) = v11[1];
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11[0] + 1);
  if (*((_QWORD *)&v11[0] + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11[0] + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t sub_10002C070(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _BOOL4 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17[2];

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 24) - v3;
    if (*(_QWORD *)(*(_QWORD *)a1 + 16) - *(_QWORD *)(a1 + 32) < v4)
      v4 = *(_QWORD *)(*(_QWORD *)a1 + 16) - *(_QWORD *)(a1 + 32);
    v5 = v4 <= a2;
    if (v4 <= a2)
    {
      v6 = *(unsigned __int8 *)(a1 + 48);
      v7 = *(_QWORD *)(a1 + 8) + 8;
      v8 = *(_QWORD *)a1 + 24;
      do
      {
        v9 = v7;
        v10 = v8;
        if (v6)
        {
          *(_QWORD *)(v7 - 8) = *(_QWORD *)(a1 + 40) + v4;
          v3 = *(_QWORD *)(a1 + 16);
        }
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        v3 += v4;
        *(_QWORD *)(a1 + 16) = v3;
        a2 -= v4;
        if (!a2)
          break;
        v4 = *(_QWORD *)(v8 + 16);
        if (v4 >= *(_QWORD *)(a1 + 24) - v3)
          v4 = *(_QWORD *)(a1 + 24) - v3;
        v7 += 8;
        v8 += 24;
        v11 = v4 > a2;
        if (v4 >= a2)
          v4 = a2;
      }
      while (!v11);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v9;
    }
  }
  else
  {
    v5 = 0;
  }
  v12 = *(_QWORD *)(a1 + 40) + a2;
  *(_QWORD *)(a1 + 40) = v12;
  if (v12 && *(_BYTE *)(a1 + 48))
    **(_QWORD **)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) += a2;
  *(_QWORD *)(a1 + 32) += a2;
  sub_10002BE54(a1, v5, (uint64_t)v17);
  sub_100015BC8(a1 + 56, v17);
  *(_OWORD *)(a1 + 72) = v17[1];
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v17[0] + 1);
  if (*((_QWORD *)&v17[0] + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v17[0] + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a1;
}

uint64_t sub_10002C1D4(uint64_t a1, unint64_t a2)
{
  char v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v22[2];

  v3 = 0;
  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
    v7 = *(_QWORD *)(a1 + 8) + 8;
    v8 = *(_QWORD *)a1 + 24;
    while (1)
    {
      v9 = v6 - v5;
      if (*(_QWORD *)(v8 - 8) - v4 < v6 - v5)
        v9 = *(_QWORD *)(v8 - 8) - v4;
      v10 = *(_QWORD *)(v7 - 8);
      v11 = v10 >= v4;
      v12 = v10 - v4;
      v13 = v11 ? v12 : 0;
      v14 = v13 >= v9 ? v9 : v13;
      if (v14 >= a2 && (v9 > v13 || a2 != v14))
        break;
      v4 = 0;
      v5 += v9;
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)a1 = v8;
      if (a2 >= v14)
        v16 = a2 - v14;
      else
        v16 = 0;
      v7 += 8;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      v3 = 1;
      v8 += 24;
      v11 = v14 >= a2;
      a2 = v16;
      if (v11)
        goto LABEL_22;
    }
    v17 = *(_QWORD *)(a1 + 40) + a2;
    *(_QWORD *)(a1 + 16) = v5 + a2;
    *(_QWORD *)(a1 + 32) = v4 + a2;
    *(_QWORD *)(a1 + 40) = v17;
  }
LABEL_22:
  sub_10002BE54(a1, v3 & 1, (uint64_t)v22);
  sub_100015BC8(a1 + 56, v22);
  *(_OWORD *)(a1 + 72) = v22[1];
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v22[0] + 1);
  if (*((_QWORD *)&v22[0] + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v22[0] + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return a1;
}

_QWORD *sub_10002C308(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = result[2];
  if (v1 != result[3])
  {
    v2 = result[4];
    v3 = (_QWORD *)result[1];
    v4 = (uint64_t *)(*result + 16);
    do
    {
      *v3++ = v2;
      v5 = *v4;
      v4 += 3;
      v6 = result[3];
      v7 = v5 - v2;
      if (v7 >= v6 - v1)
        v7 = v6 - v1;
      v1 += v7;
      v2 = 0;
    }
    while (v1 != v6);
  }
  return result;
}

void sub_10002C350(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;

  v6 = a1[6];
  if (sub_10002C4A4((uint64_t)a1, a2))
  {
    *(_OWORD *)(a3 + 25) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    sub_1000174D8((uint64_t)(a1 + 7));
    v7 = a1[14];
    v8 = (std::__shared_weak_count *)a1[15];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a1[16];
      v12 = a1[18];
      v13 = *(_QWORD *)(a2 + 144) - v12;
      if (v13 >= v11)
        v13 = a1[16];
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      v15 = *(_BYTE *)(v6 + 200);
      *(_QWORD *)a3 = v7;
      *(_QWORD *)(a3 + 8) = v8;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      *(_QWORD *)(a3 + 16) = v13;
      *(_QWORD *)(a3 + 24) = v12;
      *(_QWORD *)(a3 + 32) = v11;
      *(_BYTE *)(a3 + 40) = v15;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v19 = a1[16];
      v20 = a1[18];
      v21 = *(_QWORD *)(a2 + 144) - v20;
      if (v21 >= v19)
        v21 = a1[16];
      v22 = *(_BYTE *)(v6 + 200);
      *(_QWORD *)a3 = v7;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = v21;
      *(_QWORD *)(a3 + 24) = v20;
      *(_QWORD *)(a3 + 32) = v19;
      *(_BYTE *)(a3 + 40) = v22;
    }
  }
}

BOOL sub_10002C4A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BOOL8 v3;
  BOOL v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  v2 = *(_QWORD **)(a1 + 48);
  if (v2 != *(_QWORD **)(a2 + 48))
    return 0;
  if (*(_BYTE *)(a1 + 152))
    v4 = *(_BYTE *)(a2 + 152) == 0;
  else
    v4 = 1;
  if (v4)
    return *(_QWORD *)(a1 + 144) == *(_QWORD *)(a2 + 144);
  v5 = (std::__shared_weak_count *)v2[27];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = v2[33];
  v9 = v2[34];
  v10 = v2[35];
  v11 = (std::__shared_weak_count *)v2[41];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(_QWORD *)(a1 + 56);
  v15 = v14 == v8 && *(_QWORD *)(a1 + 64) == v9 && *(_QWORD *)(a1 + 72) == v10;
  v17 = *(_QWORD *)(a2 + 56);
  v16 = *(_QWORD *)(a2 + 64);
  if (v17 == v8 && v16 == v9)
  {
    v20 = v15 ^ (*(_QWORD *)(a2 + 72) != v10);
    if (v14 != v8 || v20 == 0)
      goto LABEL_34;
  }
  else
  {
    v19 = v14 != v17 || v15;
    if ((v19 & 1) != 0)
      goto LABEL_34;
  }
  if (*(_QWORD *)(a1 + 64) == v16 && *(_QWORD *)(a1 + 72) == *(_QWORD *)(a2 + 72))
  {
    v3 = *(_QWORD *)(a1 + 144) == *(_QWORD *)(a2 + 144);
    goto LABEL_35;
  }
LABEL_34:
  v3 = 0;
LABEL_35:
  if (v11)
  {
    v22 = (unint64_t *)&v11->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v5)
  {
    v24 = (unint64_t *)&v5->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v3;
}

double sub_10002C64C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_10002E8C4(a2, a1 + 208).n128_u64[0];
  return result;
}

uint64_t sub_10002C658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v7 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
  v8 = (uint64_t *)(a1 + 8);
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = v7 - *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  v10 = *(_OWORD *)(a2 + 16);
  v11 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 40) = v11;
  *(_OWORD *)(a1 + 24) = v10;
  v12 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a3 + 8);
  v15 = *(_OWORD *)(a3 + 16);
  v16 = *(_OWORD *)(a3 + 32);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a3 + 48);
  *(_OWORD *)(a1 + 112) = v15;
  *(_OWORD *)(a1 + 128) = v16;
  v17 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 160) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(a1 + 184) = a4;
  *(_QWORD *)(a1 + 192) = a5;
  *(_BYTE *)(a1 + 200) = a6;
  sub_10002E2D4(a1 + 208, a1, (uint64_t *)(a1 + 96), 0);
  sub_10002E2D4(a1 + 368, a1, v8, 1);
  return a1;
}

void sub_10002C770(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100012168(v2 + 320);
  sub_100012168(v4);
  sub_100012168(v3);
  sub_100012168(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10002C7AC(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t **a4, unint64_t **a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v12 = *a2;
  v13 = *a3;
  if (*a2 == *a3)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = *(std::__shared_weak_count **)(v12 + 8);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        v18 = *(_QWORD *)(v12 + 16);
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        v18 = *(_QWORD *)(v12 + 16);
      }
      v14 += v18;
      v12 += 24;
    }
    while (v12 != v13);
  }
  *(_QWORD *)a1 = v14;
  sub_10002BEEC(a1 + 8, a2, a4, 0, v14, 0, 1);
  sub_10002BEEC(a1 + 96, a3, a5, *(_QWORD *)a1, *(_QWORD *)a1, 0, 1);
  *(_QWORD *)(a1 + 184) = a6;
  *(_QWORD *)(a1 + 192) = a7;
  *(_BYTE *)(a1 + 200) = 0;
  sub_10002E2D4(a1 + 208, a1, (uint64_t *)(a1 + 96), 0);
  sub_10002E2D4(a1 + 368, a1, (uint64_t *)(a1 + 8), 1);
  return a1;
}

void sub_10002C910(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100012168(v1 + 320);
  sub_100012168(v2);
  sub_100012168(v1 + 152);
  sub_100012168(v1 + 64);
  _Unwind_Resume(a1);
}

uint64_t sub_10002C94C(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[32];
  __int128 v15;
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;

  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)v14 = v2;
  *(_OWORD *)&v14[16] = v3;
  v15 = *(_OWORD *)(a1 + 40);
  v16 = *(_BYTE *)(a1 + 56);
  v4 = *(std::__shared_weak_count **)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 64);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = 0;
  v19 = *(_OWORD *)(a1 + 80);
  for (i = v2; i != *(_QWORD *)(a1 + 96) || *(_OWORD *)&v14[8] != *(_OWORD *)(a1 + 104); i = *(_QWORD *)v14)
  {
    sub_1000174D8((uint64_t)v14);
    v9 = *((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
      sub_10002C1D4((uint64_t)v14, *((unint64_t *)&v19 + 1));
    else
      sub_10002BFB4((uint64_t)v14);
    v7 += v9;
  }
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v7;
}

void sub_10002CA68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100012168(v1);
  _Unwind_Resume(a1);
}

double sub_10002CA7C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_10002E8C4(a2, a1 + 368).n128_u64[0];
  return result;
}

void sub_10002CA88(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BOOL4 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __n128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  __int128 v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  __int128 v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  __int128 v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  __int128 v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  __n128 *v125;
  __int128 v126;
  _OWORD v127[2];
  uint64_t v128;
  std::__shared_weak_count *v129;
  _OWORD v130[2];
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  char v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  __n128 v138;
  unint64_t v139;
  char v140;
  __int128 v141;
  _OWORD v142[2];
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  char v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  __n128 v150;
  unint64_t v151;
  char v152;

  v10 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)&v141 = *(_QWORD *)(a1 + 208);
  *((_QWORD *)&v141 + 1) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v142[0] = *(_OWORD *)(a1 + 224);
  *(_OWORD *)((char *)v142 + 9) = *(_OWORD *)(a1 + 233);
  v13 = (__int128 *)(a1 + 264);
  v144 = *(_OWORD *)(a1 + 264);
  v14 = *(_OWORD *)(a1 + 296);
  v145 = *(_OWORD *)(a1 + 280);
  v143 = *(_QWORD *)(a1 + 256);
  v147 = *(_BYTE *)(a1 + 312);
  v146 = v14;
  v15 = *(std::__shared_weak_count **)(a1 + 328);
  v148 = *(_QWORD *)(a1 + 320);
  v149 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v150 = *(__n128 *)(a1 + 336);
  v151 = *(_QWORD *)(a1 + 352);
  v152 = *(_BYTE *)(a1 + 360);
  v18 = sub_10002C4A4(a2, (uint64_t)&v141);
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (_OWORD *)(a1 + 224);
  v25 = (__int128 *)(a1 + 280);
  v125 = (__n128 *)(a1 + 336);
  v26 = (uint64_t *)(a1 + 352);
  if (v18)
  {
    v27 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)&v141 = *(_QWORD *)(a1 + 208);
    *((_QWORD *)&v141 + 1) = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v142[0] = *v24;
    *(_OWORD *)((char *)v142 + 9) = *(_OWORD *)(a1 + 233);
    v144 = *v13;
    v30 = *(_OWORD *)(a1 + 296);
    v145 = *v25;
    v143 = *(_QWORD *)(a1 + 256);
    v146 = v30;
    v147 = *(_BYTE *)(a1 + 312);
    v31 = *(std::__shared_weak_count **)(a1 + 328);
    v148 = *(_QWORD *)(a1 + 320);
    v149 = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v150 = *v125;
    v151 = *v26;
    v152 = *(_BYTE *)(a1 + 360);
    v34 = *(std::__shared_weak_count **)(a1 + 216);
    v128 = *(_QWORD *)(a1 + 208);
    v129 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v130[0] = *v24;
    *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)(a1 + 233);
    v132 = *v13;
    v37 = *(_OWORD *)(a1 + 296);
    v133 = *v25;
    v131 = *(_QWORD *)(a1 + 256);
    v134 = v37;
    v135 = *(_BYTE *)(a1 + 312);
    v38 = *(std::__shared_weak_count **)(a1 + 328);
    v136 = *(_QWORD *)(a1 + 320);
    v137 = v38;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v138 = *v125;
    v139 = *v26;
    v140 = *(_BYTE *)(a1 + 360);
    v41 = sub_10002E960(a5, (uint64_t)&v141, (uint64_t)&v128);
    v42 = v137;
    if (v137)
    {
      v43 = (unint64_t *)&v137->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v42->__on_zero_shared)(v42, v41);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = v129;
    if (v129)
    {
      v46 = (unint64_t *)&v129->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v45->__on_zero_shared)(v45, v41);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = v149;
    if (v149)
    {
      v49 = (unint64_t *)&v149->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v48->__on_zero_shared)(v48, v41);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
    if (*((_QWORD *)&v141 + 1))
    {
      v52 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
LABEL_144:
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v51->__on_zero_shared)(v51, v41);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
  }
  else
  {
    v54 = *(_QWORD *)(a1 + 192);
    if (v54 + *(_QWORD *)(a1 + 184) >= a3)
      v55 = a3;
    else
      v55 = v54 + *(_QWORD *)(a1 + 184);
    if (v55 >= *(_QWORD *)(a2 + 144))
    {
      v80 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)&v141 = *(_QWORD *)a2;
      *((_QWORD *)&v141 + 1) = v80;
      if (v80)
      {
        v81 = (unint64_t *)(v80 + 8);
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      v142[0] = *(_OWORD *)(a2 + 16);
      *(_OWORD *)((char *)v142 + 9) = *(_OWORD *)(a2 + 25);
      v143 = *(_QWORD *)(a2 + 48);
      v144 = *(_OWORD *)(a2 + 56);
      v145 = *(_OWORD *)(a2 + 72);
      v146 = *(_OWORD *)(a2 + 88);
      v147 = *(_BYTE *)(a2 + 104);
      v83 = *(std::__shared_weak_count **)(a2 + 120);
      v148 = *(_QWORD *)(a2 + 112);
      v149 = v83;
      if (v83)
      {
        v84 = (unint64_t *)&v83->__shared_owners_;
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      v150 = *(__n128 *)(a2 + 128);
      v151 = *(_QWORD *)(a2 + 144);
      v152 = *(_BYTE *)(a2 + 152);
      if (a4)
      {
        v86 = sub_10002D4A4(&v144, a1 + 96);
        v87 = v86;
        if (v86 >= a4)
          v88 = a4;
        else
          v88 = v86;
        if (v88)
          sub_10002D5FC((uint64_t)&v141, v88);
        if (v87 < a4)
          sub_10002D7D4((uint64_t)&v141, a4 - v88);
      }
      v89 = *(std::__shared_weak_count **)(a1 + 216);
      v128 = *(_QWORD *)(a1 + 208);
      v129 = v89;
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
      }
      v130[0] = *v24;
      *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)(a1 + 233);
      v132 = *v13;
      v92 = *(_OWORD *)(a1 + 296);
      v133 = *v25;
      v131 = *(_QWORD *)(a1 + 256);
      v134 = v92;
      v135 = *(_BYTE *)(a1 + 312);
      v93 = *(std::__shared_weak_count **)(a1 + 328);
      v136 = *(_QWORD *)(a1 + 320);
      v137 = v93;
      if (v93)
      {
        v94 = (unint64_t *)&v93->__shared_owners_;
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
      }
      v138 = *v125;
      v140 = *(_BYTE *)(a1 + 360);
      v139 = v55;
      sub_10002C350(&v141, (uint64_t)&v128, (uint64_t)&v126);
      v96 = v126;
      v126 = 0uLL;
      v97 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
      v141 = v96;
      if (v97)
      {
        v98 = (unint64_t *)&v97->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v142[0] = v127[0];
      *(_OWORD *)((char *)v142 + 9) = *(_OWORD *)((char *)v127 + 9);
      v100 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
      if (*((_QWORD *)&v126 + 1))
      {
        v101 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      v103 = *((_QWORD *)&v141 + 1);
      *(_QWORD *)a5 = v141;
      *(_QWORD *)(a5 + 8) = v103;
      if (v103)
      {
        v104 = (unint64_t *)(v103 + 8);
        do
          v105 = __ldxr(v104);
        while (__stxr(v105 + 1, v104));
      }
      *(_OWORD *)(a5 + 16) = v142[0];
      *(_OWORD *)(a5 + 25) = *(_OWORD *)((char *)v142 + 9);
      *(_OWORD *)(a5 + 56) = v144;
      v106 = v146;
      *(_OWORD *)(a5 + 72) = v145;
      *(_QWORD *)(a5 + 48) = v143;
      *(_OWORD *)(a5 + 88) = v106;
      *(_BYTE *)(a5 + 104) = v147;
      v107 = v149;
      *(_QWORD *)(a5 + 112) = v148;
      *(_QWORD *)(a5 + 120) = v107;
      if (v107)
      {
        v108 = (unint64_t *)&v107->__shared_owners_;
        do
          v109 = __ldxr(v108);
        while (__stxr(v109 + 1, v108));
      }
      *(__n128 *)(a5 + 128) = v150;
      *(_QWORD *)(a5 + 144) = v151;
      *(_BYTE *)(a5 + 152) = v152;
      v110 = v129;
      *(_QWORD *)(a5 + 160) = v128;
      *(_QWORD *)(a5 + 168) = v110;
      if (v110)
      {
        v111 = (unint64_t *)&v110->__shared_owners_;
        do
          v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
      }
      *(_OWORD *)(a5 + 176) = v130[0];
      *(_OWORD *)(a5 + 185) = *(_OWORD *)((char *)v130 + 9);
      *(_OWORD *)(a5 + 216) = v132;
      v113 = v134;
      *(_OWORD *)(a5 + 232) = v133;
      *(_QWORD *)(a5 + 208) = v131;
      *(_OWORD *)(a5 + 248) = v113;
      *(_BYTE *)(a5 + 264) = v135;
      v114 = v137;
      *(_QWORD *)(a5 + 272) = v136;
      *(_QWORD *)(a5 + 280) = v114;
      if (v114)
      {
        v115 = (unint64_t *)&v114->__shared_owners_;
        do
          v116 = __ldxr(v115);
        while (__stxr(v116 + 1, v115));
        v41 = v138;
        *(__n128 *)(a5 + 288) = v138;
        *(_QWORD *)(a5 + 304) = v139;
        *(_BYTE *)(a5 + 312) = v140;
        do
          v117 = __ldaxr(v115);
        while (__stlxr(v117 - 1, v115));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      else
      {
        v41 = v138;
        *(__n128 *)(a5 + 288) = v138;
        *(_QWORD *)(a5 + 304) = v139;
        *(_BYTE *)(a5 + 312) = v140;
      }
      v118 = v129;
      if (v129)
      {
        v119 = (unint64_t *)&v129->__shared_owners_;
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
      v121 = v149;
      if (v149)
      {
        v122 = (unint64_t *)&v149->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      v51 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
      if (*((_QWORD *)&v141 + 1))
      {
        v124 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
        do
          v53 = __ldaxr(v124);
        while (__stlxr(v53 - 1, v124));
        goto LABEL_144;
      }
    }
    else
    {
      v56 = *(_QWORD *)(a1 + 216);
      *(_QWORD *)&v141 = *(_QWORD *)(a1 + 208);
      *((_QWORD *)&v141 + 1) = v56;
      if (v56)
      {
        v57 = (unint64_t *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v142[0] = *v24;
      *(_OWORD *)((char *)v142 + 9) = *(_OWORD *)(a1 + 233);
      v144 = *v13;
      v59 = *(_OWORD *)(a1 + 296);
      v145 = *v25;
      v143 = *(_QWORD *)(a1 + 256);
      v146 = v59;
      v147 = *(_BYTE *)(a1 + 312);
      v60 = *(std::__shared_weak_count **)(a1 + 328);
      v148 = *(_QWORD *)(a1 + 320);
      v149 = v60;
      if (v60)
      {
        v61 = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      v150 = *v125;
      v151 = *v26;
      v152 = *(_BYTE *)(a1 + 360);
      v63 = *(std::__shared_weak_count **)(a1 + 216);
      v128 = *(_QWORD *)(a1 + 208);
      v129 = v63;
      if (v63)
      {
        v64 = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
      }
      v130[0] = *v24;
      *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)(a1 + 233);
      v132 = *v13;
      v66 = *(_OWORD *)(a1 + 296);
      v133 = *v25;
      v131 = *(_QWORD *)(a1 + 256);
      v134 = v66;
      v135 = *(_BYTE *)(a1 + 312);
      v67 = *(std::__shared_weak_count **)(a1 + 328);
      v136 = *(_QWORD *)(a1 + 320);
      v137 = v67;
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      v138 = *v125;
      v139 = *v26;
      v140 = *(_BYTE *)(a1 + 360);
      v41 = sub_10002E960(a5, (uint64_t)&v141, (uint64_t)&v128);
      v70 = v137;
      if (v137)
      {
        v71 = (unint64_t *)&v137->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v41);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = v129;
      if (v129)
      {
        v74 = (unint64_t *)&v129->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v73->__on_zero_shared)(v73, v41);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = v149;
      if (v149)
      {
        v77 = (unint64_t *)&v149->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v76->__on_zero_shared)(v76, v41);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v51 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
      if (*((_QWORD *)&v141 + 1))
      {
        v79 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
        do
          v53 = __ldaxr(v79);
        while (__stlxr(v53 - 1, v79));
        goto LABEL_144;
      }
    }
  }
}

void sub_10002D45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  sub_100012168((uint64_t)&a51);
  sub_100012168((uint64_t)&a37);
  _Unwind_Resume(a1);
}

uint64_t sub_10002D4A4(__int128 *a1, uint64_t a2)
{
  __int128 *v2;
  unint64_t v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 v21;

  v2 = a1 + 1;
  v3 = *(_QWORD *)(a2 + 16);
  if (*((_QWORD *)a1 + 2) > v3)
    return 0;
  v6 = *v2;
  v7 = a1[2];
  v15 = *a1;
  v16 = v6;
  v17 = v7;
  v18 = *((_BYTE *)a1 + 48);
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 8);
  v19 = *((_QWORD *)a1 + 7);
  v20 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v3 = *(_QWORD *)(a2 + 16);
  }
  v21 = *(__int128 *)((char *)a1 + 72);
  if ((unint64_t)v16 >= v3)
  {
    v4 = 0;
    if (!v8)
      return v4;
    goto LABEL_19;
  }
  v4 = 0;
  do
  {
    sub_1000174D8((uint64_t)&v15);
    if (*(_QWORD *)(a2 + 16) - *(_QWORD *)v2 >= *((_QWORD *)&v21 + 1))
      v11 = *((_QWORD *)&v21 + 1);
    else
      v11 = *(_QWORD *)(a2 + 16) - *(_QWORD *)v2;
    if (v11)
      sub_10002C1D4((uint64_t)&v15, v11);
    else
      sub_10002BFB4((uint64_t)&v15);
    v4 += v11;
  }
  while ((unint64_t)v16 < *(_QWORD *)(a2 + 16));
  v8 = v20;
  if (v20)
  {
LABEL_19:
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v4;
}

void sub_10002D5E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100012168(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10002D5FC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  _OWORD v22[2];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  _OWORD v34[2];

  *(_QWORD *)(a1 + 144) += a2;
  sub_10002C1D4(a1 + 56, a2);
  if (*(_QWORD *)(a1 + 80) != *(_QWORD *)(a1 + 72))
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(std::__shared_weak_count **)(v3 + 216);
    v20 = *(_QWORD *)(v3 + 208);
    v21 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v22[0] = *(_OWORD *)(v3 + 224);
    *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)(v3 + 233);
    v23 = *(_QWORD *)(v3 + 256);
    v24 = *(_OWORD *)(v3 + 264);
    v27 = *(_BYTE *)(v3 + 312);
    v25 = *(_OWORD *)(v3 + 280);
    v26 = *(_OWORD *)(v3 + 296);
    v7 = *(std::__shared_weak_count **)(v3 + 328);
    v28 = *(_QWORD *)(v3 + 320);
    v29 = v7;
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v30 = *(_OWORD *)(v3 + 336);
    v31 = *(_QWORD *)(v3 + 352);
    v32 = *(_BYTE *)(v3 + 360);
    sub_10002C350((_QWORD *)a1, (uint64_t)&v20, (uint64_t)&v33);
    sub_100015BC8(a1, &v33);
    *(_OWORD *)(a1 + 16) = v34[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v34 + 9);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v29;
    if (v29)
    {
      v14 = (unint64_t *)&v29->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v21;
    if (v21)
    {
      v17 = (unint64_t *)&v21->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  return a1;
}

void sub_10002D7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100012168(v9);
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10002D7D4(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  _OWORD v22[2];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  _OWORD v34[2];

  *(_QWORD *)(a1 + 144) += a2;
  sub_10002C070(a1 + 56, a2);
  if (*(_QWORD *)(a1 + 80) != *(_QWORD *)(a1 + 72))
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(std::__shared_weak_count **)(v3 + 216);
    v20 = *(_QWORD *)(v3 + 208);
    v21 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v22[0] = *(_OWORD *)(v3 + 224);
    *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)(v3 + 233);
    v23 = *(_QWORD *)(v3 + 256);
    v24 = *(_OWORD *)(v3 + 264);
    v27 = *(_BYTE *)(v3 + 312);
    v25 = *(_OWORD *)(v3 + 280);
    v26 = *(_OWORD *)(v3 + 296);
    v7 = *(std::__shared_weak_count **)(v3 + 328);
    v28 = *(_QWORD *)(v3 + 320);
    v29 = v7;
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v30 = *(_OWORD *)(v3 + 336);
    v31 = *(_QWORD *)(v3 + 352);
    v32 = *(_BYTE *)(v3 + 360);
    sub_10002C350((_QWORD *)a1, (uint64_t)&v20, (uint64_t)&v33);
    sub_100015BC8(a1, &v33);
    *(_OWORD *)(a1 + 16) = v34[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v34 + 9);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v29;
    if (v29)
    {
      v14 = (unint64_t *)&v29->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v21;
    if (v21)
    {
      v17 = (unint64_t *)&v21->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  return a1;
}

void sub_10002D990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100012168(v9);
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10002D9AC(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  _OWORD v21[2];
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  _OWORD v33[2];

  sub_10002BFB4(a1 + 56);
  if (*(_QWORD *)(a1 + 80) != *(_QWORD *)(a1 + 72))
  {
    v2 = *(_QWORD *)(a1 + 48);
    v3 = *(std::__shared_weak_count **)(v2 + 216);
    v19 = *(_QWORD *)(v2 + 208);
    v20 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v21[0] = *(_OWORD *)(v2 + 224);
    *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)(v2 + 233);
    v22 = *(_QWORD *)(v2 + 256);
    v23 = *(_OWORD *)(v2 + 264);
    v26 = *(_BYTE *)(v2 + 312);
    v24 = *(_OWORD *)(v2 + 280);
    v25 = *(_OWORD *)(v2 + 296);
    v6 = *(std::__shared_weak_count **)(v2 + 328);
    v27 = *(_QWORD *)(v2 + 320);
    v28 = v6;
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v29 = *(_OWORD *)(v2 + 336);
    v30 = *(_QWORD *)(v2 + 352);
    v31 = *(_BYTE *)(v2 + 360);
    sub_10002C350((_QWORD *)a1, (uint64_t)&v19, (uint64_t)&v32);
    sub_100015BC8(a1, &v32);
    *(_OWORD *)(a1 + 16) = v33[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v33 + 9);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v28;
    if (v28)
    {
      v13 = (unint64_t *)&v28->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v20;
    if (v20)
    {
      v16 = (unint64_t *)&v20->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  return a1;
}

void sub_10002DB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100012168(v9);
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_10002DB78(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 72);
}

void sub_10002DB88(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  unsigned int v7;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 *v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _BOOL4 v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _OWORD *v37;
  __int128 *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  __int128 *v43;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  __n128 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  _BYTE v95[25];
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  char v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  __int128 v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  _OWORD v108[2];
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  char v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  __int128 v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  _OWORD v121[2];
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  char v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  __int128 v129;
  uint64_t v130;
  char v131;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (v6 >= (unint64_t)(v7 & 1) + *(_QWORD *)(a2 + 8) - 1)
  {
    sub_10002E8C4(a4, a3);
    sub_10002E8C4(a4 + 160, a3);
    return;
  }
  v10 = *(_QWORD *)(a1 + 16) + v6;
  v11 = v7 & 2;
  v12 = *(_QWORD *)a2;
  if ((v7 & 2) != 0)
    v13 = *(_QWORD *)a2;
  else
    v13 = v12 + 1;
  if (v10 > v13)
  {
LABEL_91:
    if (v11)
      v81 = v12;
    else
      v81 = v12 + 1;
    v82 = v81 - v6;
    if (v81 < v6)
    {
      if (v7)
      {
        if (v7 == 3)
        {
          v83 = *(_QWORD *)(a2 + 8);
          if (v83 < v12)
            goto LABEL_107;
        }
        else
        {
          v83 = *(_QWORD *)(a2 + 8);
          if (v12 >= v83)
          {
LABEL_107:
            v85 = qword_1001A05E0;
            goto LABEL_108;
          }
        }
      }
      else
      {
        v83 = *(_QWORD *)(a2 + 8);
        if (v12 >= v83 || v12 + 1 >= v83)
          goto LABEL_107;
      }
      v85 = (v7 & 1) - v12 + (int)(((v7 >> 1) & 1) - 1) + v83;
LABEL_108:
      v86 = v85 + v81;
      v87 = *(_QWORD *)(a1 + 48);
      if (*(_QWORD *)(a3 + 144) >= v86)
        v88 = v86;
      else
        v88 = *(_QWORD *)(a3 + 144);
      v89 = a4;
      v90 = a1;
      v82 = 0;
LABEL_121:
      sub_10002CA88(v87, v90, v88, v82, v89);
      return;
    }
    if (v7)
    {
      if (v7 == 3)
      {
        v84 = *(_QWORD *)(a2 + 8);
        if (v84 < v12)
          goto LABEL_116;
      }
      else
      {
        v84 = *(_QWORD *)(a2 + 8);
        if (v12 >= v84)
        {
LABEL_116:
          v91 = qword_1001A05E0;
          goto LABEL_117;
        }
      }
    }
    else
    {
      v84 = *(_QWORD *)(a2 + 8);
      if (v12 >= v84 || v12 + 1 >= v84)
        goto LABEL_116;
    }
    v91 = (v7 & 1) - v12 + (int)(((v7 >> 1) & 1) - 1) + v84;
LABEL_117:
    v92 = v91 + v81;
    v87 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a3 + 144) >= v92)
      v88 = v92;
    else
      v88 = *(_QWORD *)(a3 + 144);
    v89 = a4;
    v90 = a1;
    goto LABEL_121;
  }
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(std::__shared_weak_count **)(a1 + 8);
  v119 = *(_QWORD *)a1;
  v120 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v18 = v14;
  }
  v121[0] = *(_OWORD *)(a1 + 16);
  *(_OWORD *)((char *)v121 + 9) = *(_OWORD *)(a1 + 25);
  v122 = v18;
  v123 = *(_OWORD *)(a1 + 56);
  v124 = *(_OWORD *)(a1 + 72);
  v125 = *(_OWORD *)(a1 + 88);
  v126 = *(_BYTE *)(a1 + 104);
  v19 = *(std::__shared_weak_count **)(a1 + 120);
  v127 = *(_QWORD *)(a1 + 112);
  v128 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v129 = *(_OWORD *)(a1 + 128);
  v130 = *(_QWORD *)(a1 + 144);
  v131 = *(_BYTE *)(a1 + 152);
  while (!sub_10002C4A4((uint64_t)&v119, a3))
  {
    v10 += *(_QWORD *)&v121[0];
    v22 = *(_QWORD *)a2;
    if ((*(_BYTE *)(a2 + 16) & 2) == 0)
      ++v22;
    if (v10 >= v22)
      break;
    sub_10002D9AC((uint64_t)&v119);
  }
  v23 = *(std::__shared_weak_count **)(v14 + 216);
  v106 = *(_QWORD *)(v14 + 208);
  v107 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v108[0] = *(_OWORD *)(v14 + 224);
  *(_OWORD *)((char *)v108 + 9) = *(_OWORD *)(v14 + 233);
  v26 = (__int128 *)(v14 + 264);
  v110 = *(_OWORD *)(v14 + 264);
  v27 = *(_OWORD *)(v14 + 296);
  v111 = *(_OWORD *)(v14 + 280);
  v109 = *(_QWORD *)(v14 + 256);
  v113 = *(_BYTE *)(v14 + 312);
  v112 = v27;
  v28 = *(std::__shared_weak_count **)(v14 + 328);
  v114 = *(_QWORD *)(v14 + 320);
  v115 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v116 = *(_OWORD *)(v14 + 336);
  v117 = *(_QWORD *)(v14 + 352);
  v118 = *(_BYTE *)(v14 + 360);
  v31 = sub_10002C4A4((uint64_t)&v119, (uint64_t)&v106);
  if (v28)
  {
    v32 = (unint64_t *)&v28->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = v107;
  if (v107)
  {
    v35 = (unint64_t *)&v107->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if (v31)
        goto LABEL_37;
      goto LABEL_80;
    }
  }
  if (!v31)
  {
LABEL_80:
    v75 = v128;
    if (v128)
    {
      v76 = (unint64_t *)&v128->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    v78 = v120;
    if (v120)
    {
      v79 = (unint64_t *)&v120->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v7 = *(unsigned __int8 *)(a2 + 16);
    v12 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a1 + 24);
    v11 = v7 & 2;
    goto LABEL_91;
  }
LABEL_37:
  v37 = (_OWORD *)(v14 + 224);
  v38 = (__int128 *)(v14 + 280);
  v39 = *(std::__shared_weak_count **)(v14 + 216);
  v106 = *(_QWORD *)(v14 + 208);
  v107 = v39;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v108[0] = *v37;
  *(_OWORD *)((char *)v108 + 9) = *(_OWORD *)(v14 + 233);
  v110 = *v26;
  v42 = *(_OWORD *)(v14 + 296);
  v111 = *v38;
  v43 = (__int128 *)(v14 + 336);
  v44 = (uint64_t *)(v14 + 352);
  v109 = *(_QWORD *)(v14 + 256);
  v112 = v42;
  v113 = *(_BYTE *)(v14 + 312);
  v45 = *(std::__shared_weak_count **)(v14 + 328);
  v114 = *(_QWORD *)(v14 + 320);
  v115 = v45;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v116 = *v43;
  v117 = *v44;
  v118 = *(_BYTE *)(v14 + 360);
  v48 = *(std::__shared_weak_count **)(v14 + 216);
  v93 = *(_QWORD *)(v14 + 208);
  v94 = v48;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  *(_OWORD *)v95 = *v37;
  *(_OWORD *)&v95[9] = *(_OWORD *)(v14 + 233);
  v51 = *v38;
  v52 = *(_OWORD *)(v14 + 296);
  v97 = *v26;
  v98 = v51;
  v96 = *(_QWORD *)(v14 + 256);
  v99 = v52;
  v100 = *(_BYTE *)(v14 + 312);
  v53 = *(std::__shared_weak_count **)(v14 + 328);
  v101 = *(_QWORD *)(v14 + 320);
  v102 = v53;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v103 = *v43;
  v104 = *v44;
  v105 = *(_BYTE *)(v14 + 360);
  v56 = sub_10002E960(a4, (uint64_t)&v106, (uint64_t)&v93);
  v57 = v102;
  if (v102)
  {
    v58 = (unint64_t *)&v102->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v57->__on_zero_shared)(v57, v56);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v94;
  if (v94)
  {
    v61 = (unint64_t *)&v94->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v60->__on_zero_shared)(v60, v56);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = v115;
  if (v115)
  {
    v64 = (unint64_t *)&v115->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v63->__on_zero_shared)(v63, v56);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v107;
  if (v107)
  {
    v67 = (unint64_t *)&v107->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v66->__on_zero_shared)(v66, v56);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v128;
  if (v128)
  {
    v70 = (unint64_t *)&v128->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v56);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v120;
  if (v120)
  {
    v73 = (unint64_t *)&v120->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v72->__on_zero_shared)(v72, v56);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
}

void sub_10002E284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  sub_100012168(v30);
  sub_100012168((uint64_t)&a30);
  sub_100012168(a9);
  sub_100012168(v31 - 248);
  _Unwind_Resume(a1);
}

void sub_10002E2B8(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  unint64_t v7;

  v6 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a3 + 144) >= a2)
    v7 = a2;
  else
    v7 = *(_QWORD *)(a3 + 144);
  sub_10002CA88(v6, a1, v7, a4, a5);
}

uint64_t sub_10002E2D4(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v50;
  std::__shared_weak_count *v51;
  _OWORD v52[2];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  __int128 v63;
  _OWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  char v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  __int128 v79;

  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = *a3;
  *(_QWORD *)(a1 + 64) = a3[1];
  v6 = *((_OWORD *)a3 + 1);
  v7 = *((_OWORD *)a3 + 2);
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a3 + 48);
  *(_OWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 112) = a3[7];
  v8 = a3[8];
  *(_QWORD *)(a1 + 120) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (__int128 *)(a3 + 2);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a3 + 9);
  *(_BYTE *)(a1 + 152) = a4;
  v12 = *a3;
  if (*a3 == *(_QWORD *)(a2 + 96) && a3[1] == *(_QWORD *)(a2 + 104) && *(_QWORD *)v11 == *(_QWORD *)(a2 + 112))
  {
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 184) + *(_QWORD *)(a2 + 192);
  }
  else
  {
    v73 = *(_OWORD *)(a2 + 8);
    v74 = *(_OWORD *)(a2 + 24);
    v75 = *(_OWORD *)(a2 + 40);
    v76 = *(_BYTE *)(a2 + 56);
    v13 = *(std::__shared_weak_count **)(a2 + 72);
    v77 = *(_QWORD *)(a2 + 64);
    v78 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v12 = *a3;
    }
    v79 = *(_OWORD *)(a2 + 80);
    v16 = a3[1];
    v65 = v12;
    v66 = v16;
    v17 = *((_OWORD *)a3 + 2);
    v67 = *v11;
    v68 = v17;
    v69 = *((_BYTE *)a3 + 48);
    v18 = (std::__shared_weak_count *)a3[8];
    v70 = a3[7];
    v71 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = 0;
    v72 = *(_OWORD *)(a3 + 9);
    while ((_QWORD)v73 != v65 || *((_QWORD *)&v73 + 1) != v66 || (_QWORD)v74 != (_QWORD)v67)
    {
      sub_1000174D8((uint64_t)&v73);
      v22 = v78;
      if (v78)
      {
        v23 = (unint64_t *)&v78->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        v25 = DWORD2(v79);
        do
          v26 = __ldaxr(v23);
        while (__stlxr(v26 - 1, v23));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      else
      {
        v25 = DWORD2(v79);
      }
      v21 += v25;
      sub_10002BFB4((uint64_t)&v73);
    }
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 184) + v21;
    if (v71)
    {
      v27 = &v71->__shared_owners_;
      do
        v28 = __ldaxr((unint64_t *)v27);
      while (__stlxr(v28 - 1, (unint64_t *)v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v29 = v78;
    if (v78)
    {
      v30 = (unint64_t *)&v78->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = *(std::__shared_weak_count **)(a2 + 216);
    v50 = *(_QWORD *)(a2 + 208);
    v51 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v52[0] = *(_OWORD *)(a2 + 224);
    *(_OWORD *)((char *)v52 + 9) = *(_OWORD *)(a2 + 233);
    v53 = *(_QWORD *)(a2 + 256);
    v35 = *(_OWORD *)(a2 + 264);
    v57 = *(_BYTE *)(a2 + 312);
    v36 = *(_OWORD *)(a2 + 280);
    v54 = v35;
    v55 = v36;
    v56 = *(_OWORD *)(a2 + 296);
    v37 = *(std::__shared_weak_count **)(a2 + 328);
    v58 = *(_QWORD *)(a2 + 320);
    v59 = v37;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v60 = *(_OWORD *)(a2 + 336);
    v61 = *(_QWORD *)(a2 + 352);
    v62 = *(_BYTE *)(a2 + 360);
    sub_10002C350((_QWORD *)a1, (uint64_t)&v50, (uint64_t)&v63);
    sub_100015BC8(a1, &v63);
    *(_OWORD *)(a1 + 16) = v64[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v64 + 9);
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
    if (*((_QWORD *)&v63 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v59;
    if (v59)
    {
      v44 = (unint64_t *)&v59->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = v51;
    if (v51)
    {
      v47 = (unint64_t *)&v51->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  return a1;
}

void sub_10002E700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  sub_100012168(v4);
  sub_100012168((uint64_t)va);
  sub_100012168(v3);
  sub_100012168(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10002E740(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 200);
}

uint64_t sub_10002E74C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v6;

  v6 = *(_QWORD *)(a2 + 144) - a3;
  if (v6 <= a4)
    v6 = a4;
  if (v6 < a5)
    a5 = v6;
  return sub_10002C658(a6, a1 + 56, a2 + 56, a3, a5, *(_BYTE *)(*(_QWORD *)(a1 + 48) + 200));
}

BOOL sub_10002E788(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a1 + 144);
  return v4 > a3 || *(_QWORD *)(a2 + 144) - v4 < a4;
}

uint64_t sub_10002E7A4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 368;
  sub_100012168(a1 + 480);
  sub_100012168(v2);
  sub_100012168(a1 + 320);
  sub_100012168(a1 + 208);
  sub_100012168(a1 + 152);
  sub_100012168(a1 + 64);
  return a1;
}

uint64_t sub_10002E7FC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  __int128 v12;
  _QWORD v13[15];

  v5 = *a1;
  v4 = a1[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a1[3];
  v9 = a1[4];
  v11 = v13;
  v13[0] = v5;
  v13[1] = v4;
  v13[2] = v9;
  v12 = xmmword_100140350;
  sub_10002EBC4(a2, (uint64_t *)&v11, v8, a1[2]);
  return sub_100015C2C((uint64_t)&v11);
}

void sub_10002E8A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100015C2C((uint64_t)va1);
  sub_100012168((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_10002E8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 result;
  uint64_t v12;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 72);
  v7 = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  v8 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  result = *(__n128 *)(a2 + 128);
  *(__n128 *)(a1 + 128) = result;
  v12 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v12;
  return result;
}

__n128 sub_10002E960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 72);
  v5 = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v6 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a3 + 25);
  *(_OWORD *)(a1 + 176) = v7;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a3 + 64);
  v8 = *(_OWORD *)(a3 + 72);
  v9 = *(_OWORD *)(a3 + 88);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a3 + 104);
  *(_OWORD *)(a1 + 248) = v9;
  *(_OWORD *)(a1 + 232) = v8;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  result = *(__n128 *)(a3 + 128);
  *(__n128 *)(a1 + 288) = result;
  v11 = *(_QWORD *)(a3 + 144);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a3 + 152);
  *(_QWORD *)(a1 + 304) = v11;
  return result;
}

uint64_t sub_10002EA44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  sub_10002E2D4(a1 + 208, a1, (uint64_t *)(a1 + 96), 0);
  sub_10002E2D4(a1 + 368, a1, v4, 1);
  return a1;
}

void sub_10002EB30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100012168(v2 + 320);
  sub_100012168(v4);
  sub_100012168(v3);
  sub_100012168(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10002EB64(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 528))
  {
    sub_100012168(a1 + 480);
    sub_100012168(a1 + 368);
    sub_100012168(a1 + 320);
    sub_100012168(a1 + 208);
    sub_100012168(a1 + 152);
    sub_100012168(a1 + 64);
  }
  return a1;
}

uint64_t *sub_10002EBC4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v7 = sub_10002EC54((uint64_t)a1, a2);
  v8 = a1[1];
  v15 = *a1;
  v9 = v15 + 24 * v8;
  v10 = a1[19];
  v13 = (unint64_t *)a1[18];
  v14 = v9;
  v12 = &v13[v10];
  sub_10002C7AC(v7 + 208, &v15, &v14, &v13, &v12, a3, a4);
  return a1;
}

void sub_10002EC40(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015744(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10002EC54(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;

  *(_QWORD *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_10013FEC0;
  sub_10002ECFC((_QWORD *)a1, a2);
  *(_QWORD *)(a1 + 144) = a1 + 168;
  v3 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 152) = xmmword_10013FEC0;
  sub_100015C84(a1 + 144, v3);
  return a1;
}

void sub_10002ECCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v3;

  if (*(_QWORD *)(v1 + 160))
  {
    if (v3 != *v2)
      operator delete(*v2);
  }
  sub_100015C2C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10002ECFC(_QWORD *result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v4 = a2 + 3;
  v3 = *a2;
  if (v4 == (uint64_t *)v3)
  {
    result = sub_10002ED74(result, v3, v3 + 24 * a2[1]);
    v5 = a2[1];
    if (v5)
    {
      result = (_QWORD *)*a2;
      do
      {
        --v5;
        result = (_QWORD *)(sub_100012168((uint64_t)result) + 24);
      }
      while (v5);
    }
    a2[1] = 0;
  }
  else
  {
    *result = v3;
    *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 1);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

_QWORD *sub_10002ED74(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
  if (v5 <= a1[2])
  {
    result = (_QWORD *)sub_10002EED4((uint64_t)a1, a2, 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3), *a1, a1[1]);
    a1[1] = v5;
  }
  else
  {
    if (v5 >= 0x555555555555556)
      sub_1000158AC("get_next_capacity, allocator's max size reached");
    v7 = operator new(a3 - a2);
    v8 = (uint64_t *)*a1;
    if (*a1)
    {
      v9 = a1[1];
      if (v9)
      {
        v10 = *a1;
        do
        {
          --v9;
          v10 = sub_100012168(v10) + 24;
        }
        while (v9);
      }
      a1[1] = 0;
      if (a1 + 3 != v8)
        operator delete(v8);
    }
    a1[1] = 0;
    a1[2] = v5;
    *a1 = (uint64_t)v7;
    return sub_10002EE78(a1, a2, a3);
  }
  return result;
}

_QWORD *sub_10002EE78(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result[1];
  v4 = *result + 24 * v3;
  v5 = v4;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)v5 = *(_OWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
      v5 += 24;
      a2 += 24;
    }
    while (a2 != a3);
    v3 = result[1];
  }
  result[1] = v3 - 0x5555555555555555 * ((v5 - v4) >> 3);
  return result;
}

uint64_t sub_10002EED4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;

  v8 = a2;
  v9 = a5 - a3;
  if (a5 >= a3)
  {
    if (a3)
    {
      v14 = a3;
      do
      {
        --v14;
        result = sub_100015BC8(a4, (__int128 *)v8);
        *(_QWORD *)(a4 + 16) = *(_QWORD *)(v8 + 16);
        a4 += 24;
        v8 += 24;
      }
      while (v14);
    }
    if (a5 != a3)
    {
      v15 = a3 - a5;
      do
      {
        result = sub_100012168(a4);
        a4 += 24;
        v13 = __CFADD__(v15++, 1);
      }
      while (!v13);
    }
  }
  else
  {
    if (a5)
    {
      v10 = a2;
      v8 = a2 + 24 * a5;
      v11 = a5;
      do
      {
        --v11;
        result = sub_100015BC8(a4, (__int128 *)v10);
        *(_QWORD *)(a4 + 16) = *(_QWORD *)(v10 + 16);
        a4 += 24;
        v10 += 24;
      }
      while (v11);
    }
    if (a3 != a5)
    {
      do
      {
        *(_OWORD *)a4 = *(_OWORD *)v8;
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(a4 + 16) = *(_QWORD *)(v8 + 16);
        v8 += 24;
        a4 += 24;
        v13 = __CFADD__(v9++, 1);
      }
      while (!v13);
    }
  }
  return result;
}

void sub_10002F738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;
  id v24;
  void *v25;

  if (a2 == 1)
  {
    v24 = objc_begin_catch(exception_object);
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "reason"));
    +[DIError failWithEnumValue:verboseInfo:error:](DIError, "failWithEnumValue:verboseInfo:error:", 150, v25, v23);

    objc_end_catch();
    JUMPOUT(0x10002F6FCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002F804(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002F814(uint64_t a1)
{

}

void sub_10002F81C(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;

  v7 = a2;
  v6 = a3;
  if (!v6)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "signalCommandCompletedWithXpcError:", v6);

}

void sub_10002FBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  id v18;
  void *v19;

  if (a2 == 1)
  {
    v18 = objc_begin_catch(exception_object);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "reason"));
    +[DIError failWithEnumValue:verboseInfo:error:](DIError, "failWithEnumValue:verboseInfo:error:", 150, v19, v17);

    objc_end_catch();
    JUMPOUT(0x10002FB78);
  }
  _Unwind_Resume(exception_object);
}

id sub_10002FC60(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "signalCommandCompletedWithXpcError:", a2);
}

void sub_10002FCAC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = 0;
  v4 = 0;
  v2 = (unint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 560) + 120) + *(_QWORD *)(*(_QWORD *)(a2 + 560) + 128) - 1)
     / *(_QWORD *)(*(_QWORD *)(a2 + 560) + 128);
  sub_10006DE94();
}

void sub_10002FDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 16))(a13);
  _Unwind_Resume(exception_object);
}

void sub_10002FE68(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;

  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  *(_QWORD *)&v26 = *a1;
  *((_QWORD *)&v26 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v24 = v3;
    v25 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v24 = v3;
    v25 = 0;
  }
  do
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v26 + 168))(v26, a2);
    sub_100027CB4(&v24, (uint64_t *)&v26);
    sub_10011EB40((uint64_t)&v26, &v23);
    v8 = v23;
    v23 = 0uLL;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    v26 = v8;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v26;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    v14 = v24;
    if (*((_QWORD *)&v23 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  while (v12 != v14);
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_10002FFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_100012168((uint64_t)va);
  sub_100012168((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100030014(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = off_1001714B0;
  *(_QWORD *)(a1 + 40) = off_1001714F8;
  *(_QWORD *)(a1 + 48) = off_100171540;
  *(_QWORD *)(a1 + 56) = off_1001717C8;
  *(_QWORD *)a1 = off_100171390;
  *(_QWORD *)(a1 + 8) = off_100171820;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 120) = off_100171910;
  *(_QWORD *)(a1 + 16) = off_100171420;
  *(_QWORD *)(a1 + 24) = off_100171968;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_1000302E8((uint64_t *)(a1 + 152), (uint64_t *)&off_100171310, a2);
  *(_QWORD *)a1 = off_100170ED8;
  *(_QWORD *)(a1 + 8) = off_100170F20;
  *(_QWORD *)(a1 + 16) = off_100170F68;
  *(_QWORD *)(a1 + 24) = off_100170FB0;
  *(_QWORD *)(a1 + 32) = off_100170FF8;
  *(_QWORD *)(a1 + 40) = off_100171040;
  *(_QWORD *)(a1 + 48) = off_100171088;
  *(_QWORD *)(a1 + 56) = off_1001710E8;
  *(_QWORD *)(a1 + 120) = off_100171158;
  *(_QWORD *)(a1 + 152) = off_1001711C8;
  *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 112) + 8) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 560)
                                                                                               + 40))(*(_QWORD *)(a2 + 560));
  sub_10002FCAC(a1, a2);
}

void sub_100030290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;

  sub_100012168((uint64_t)&a9);
  sub_1000263F0(v11, (uint64_t *)&off_100171310);
  *(_QWORD *)(v9 + 120) = v12;
  *(_QWORD *)(v9 + 24) = v12 + 88;
  sub_100027D2C(v10);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000302E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  CFStringRef v7;
  const __CFString *v9;
  const __CFUUID *v10;

  *a1 = (uint64_t)off_100170D88;
  v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v4 - 24)) = a2[2];
  v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v5 - 24)) = a2[3];
  a1[1] = 0;
  a1[2] = 0;
  v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0;
  v10 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, *(CFUUIDBytes *)(*(_QWORD *)(a3 + 560) + 136));
  v7 = CFUUIDCreateString(kCFAllocatorDefault, v10);
  v9 = v7;
  if (*v6)
  {
    CFRelease(*v6);
    v7 = v9;
  }
  a1[1] = (uint64_t)v7;
  v9 = 0;
  sub_100027D2C((const void **)&v9);
  sub_10002818C((const void **)&v10);
  return a1;
}

void sub_1000303B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  uint64_t v10;
  const void **v11;

  sub_100027D2C(&a9);
  sub_10002818C(&a10);
  sub_100027D2C((const void **)(v10 + 24));
  sub_100027D2C((const void **)(v10 + 16));
  sub_100027D2C(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1000303FC(uint64_t a1)
{
  *(_QWORD *)(a1 + 152) = off_100171A58;
  *(_QWORD *)(a1 + 48) = off_100171AB0;
  sub_100027D2C((const void **)(a1 + 176));
  sub_100027D2C((const void **)(a1 + 168));
  sub_100027D2C((const void **)(a1 + 160));
  *(_QWORD *)(a1 + 120) = off_100171910;
  *(_QWORD *)(a1 + 24) = off_100171968;
  sub_100027D2C((const void **)(a1 + 144));
  return a1;
}

void sub_100030464(uint64_t a1)
{
  *(_QWORD *)(a1 + 152) = off_100171A58;
  *(_QWORD *)(a1 + 48) = off_100171AB0;
  sub_100027D2C((const void **)(a1 + 176));
  sub_100027D2C((const void **)(a1 + 168));
  sub_100027D2C((const void **)(a1 + 160));
  *(_QWORD *)(a1 + 120) = off_100171910;
  *(_QWORD *)(a1 + 24) = off_100171968;
  sub_100027D2C((const void **)(a1 + 144));
  operator delete();
}

const void **sub_1000304DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  const void **result;
  uint64_t v7[2];
  const void *v8;
  const void *v9;
  _QWORD v10[10];

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v10[0] = CFSTR("Image Format");
  v10[1] = v4;
  v10[2] = CFSTR("Format Description");
  v10[3] = CFSTR("Sparse bundle image");
  sub_100026A84(a1 + *(_QWORD *)(*(_QWORD *)a1 - 112), &v9);
  v10[4] = CFSTR("Size Info");
  v10[5] = v9;
  v9 = 0;
  sub_100012138(&v9);
  sub_100026DA8(a1 + *(_QWORD *)(*(_QWORD *)a1 - 120), &v9);
  v10[6] = CFSTR("Encryption Info");
  v10[7] = v9;
  v9 = 0;
  sub_100012138(&v9);
  sub_100027574((_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 128)), &v9);
  v10[8] = CFSTR("Identity Info");
  v10[9] = v9;
  v9 = 0;
  sub_100012138(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 5;
  sub_1000FE38C(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  v8 = 0;
  sub_100028068(&v8);
  for (i = 9; i != -1; i -= 2)
    result = sub_100028038((const void **)&v10[i]);
  return result;
}

void sub_100030654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t i;

  for (i = 72; i != -8; i -= 16)
    sub_100028038((const void **)(&a14 + i));
  _Unwind_Resume(a1);
}

const __CFString *sub_10003069C()
{
  return CFSTR("UDSB");
}

const void **sub_1000306A8(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *((_QWORD *)v1 + 19) = off_100171A58;
  *((_QWORD *)v1 + 6) = off_100171AB0;
  sub_100027D2C((const void **)v1 + 22);
  sub_100027D2C((const void **)v1 + 21);
  sub_100027D2C((const void **)v1 + 20);
  *((_QWORD *)v1 + 15) = off_100171910;
  *((_QWORD *)v1 + 3) = off_100171968;
  return sub_100027D2C((const void **)v1 + 18);
}

void sub_100030710(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *((_QWORD *)v1 + 19) = off_100171A58;
  *((_QWORD *)v1 + 6) = off_100171AB0;
  sub_100027D2C((const void **)v1 + 22);
  sub_100027D2C((const void **)v1 + 21);
  sub_100027D2C((const void **)v1 + 20);
  *((_QWORD *)v1 + 15) = off_100171910;
  *((_QWORD *)v1 + 3) = off_100171968;
  sub_100027D2C((const void **)v1 + 18);
  operator delete();
}

const void **sub_100030790(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 32);
  *((_QWORD *)v1 + 19) = off_100171A58;
  *((_QWORD *)v1 + 6) = off_100171AB0;
  sub_100027D2C((const void **)v1 + 22);
  sub_100027D2C((const void **)v1 + 21);
  sub_100027D2C((const void **)v1 + 20);
  *((_QWORD *)v1 + 15) = off_100171910;
  *((_QWORD *)v1 + 3) = off_100171968;
  return sub_100027D2C((const void **)v1 + 18);
}

void sub_1000307F8(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 32);
  *((_QWORD *)v1 + 19) = off_100171A58;
  *((_QWORD *)v1 + 6) = off_100171AB0;
  sub_100027D2C((const void **)v1 + 22);
  sub_100027D2C((const void **)v1 + 21);
  sub_100027D2C((const void **)v1 + 20);
  *((_QWORD *)v1 + 15) = off_100171910;
  *((_QWORD *)v1 + 3) = off_100171968;
  sub_100027D2C((const void **)v1 + 18);
  operator delete();
}

const void **sub_100030878@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000304DC((uint64_t)a1 + *(_QWORD *)(*a1 - 40), a2);
}

const __CFString *sub_100030888()
{
  return CFSTR("UDSB");
}

void sub_100030898()
{
  operator delete();
}

__n128 sub_1000308AC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = off_100171BC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_1000308F4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = off_100171BC8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100030924(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *exception;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a3;
  if (**(_QWORD **)(result + 8) <= (unint64_t)*a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)&v12);
    sub_100005A0C(&v12, (uint64_t)"Bands folder contains an out of range band (", 44);
    v9 = *(char *)(a2 + 23);
    if (v9 >= 0)
      v10 = a2;
    else
      v10 = *(_QWORD *)a2;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a2 + 23);
    else
      v11 = *(_QWORD *)(a2 + 8);
    sub_100005A0C(&v12, v10, v11);
    sub_100005A0C(&v12, (uint64_t)")", 1);
    sub_100012294((uint64_t)exception, (uint64_t)&v12, 0x16u);
  }
  v4 = *(_QWORD **)(result + 16);
  if (*v4)
    sub_10011BF1C((uint64_t)&v12, *(_QWORD *)(result + 24) + 24, *a3, v4);
  v5 = *(_QWORD *)(result + 24);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v5 + 560) + 120) + *(_QWORD *)(*(_QWORD *)(v5 + 560) + 128) - 1)
     / *(_QWORD *)(*(_QWORD *)(v5 + 560) + 128)
     - 1 == v3)
    v6 = *(_QWORD *)(*(_QWORD *)(result + 40) + *(_QWORD *)(**(_QWORD **)(result + 40) - 112) + 8)
       - *(_QWORD *)(v5 + 64) * v3;
  else
    v6 = *(_QWORD *)(v5 + 64);
  **(_QWORD **)(result + 32) += v6;
  return result;
}

void sub_100030ABC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  __break(1u);
}

void sub_100030C44()
{
  __cxa_end_catch();
  JUMPOUT(0x100030B78);
}

uint64_t sub_100030C54(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100030C90()
{
}

uint64_t sub_100030C9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return std::ostream::~ostream(v1, a1 + 8);
}

void sub_100030D4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100030DD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100030F6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000313BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100031848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100031C08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100031FCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100032114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1000321E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100032274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000322D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100032414(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000324C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100032D9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100032FD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100033270(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100033350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100033410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100033528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000336D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1000337A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100033824(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100033EEC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void *v13;
  void *v14;
  id v17;
  void *v18;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 16))(a12);

  if (a2 == 1)
  {
    v17 = objc_msgSend(objc_begin_catch(a1), "reason");
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    +[DIError failWithEnumValue:verboseInfo:error:](DIError, "failWithEnumValue:verboseInfo:error:", 150, v18, v12);

    objc_end_catch();
    JUMPOUT(0x100033A50);
  }
  _Unwind_Resume(a1);
}

void sub_1000342D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100012168((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100034324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v8 = (std::__shared_weak_count *)*((_QWORD *)sub_1001207C0() + 1);
  v16 = a2;
  v17 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v18 = a3;
  v19 = a4;
  v20 = a3;
  v21 = 0;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v16);
  v12 = v17;
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_1000343E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100034528()
{
  operator delete[]();
}

void sub_100034728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a7);

  sub_100012168((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100034B68(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  if (*(_BYTE *)(a1 + 564))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v4 = *(_OWORD *)(a2 + 4);
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 4) = v4;
    v5 = *(_QWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    *(_QWORD *)(a1 + 36) = v5;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
  }
  else
  {
    *(_DWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v6 = *(_OWORD *)(a2 + 4);
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 4) = v6;
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    bzero((void *)(a1 + 48), 0x204uLL);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
    *(_BYTE *)(a1 + 564) = 1;
  }
  return a1;
}

void sub_100034DA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100034EA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100034EB4()
{
  operator delete();
}

_QWORD *sub_100034EC8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_100171C58;
  return result;
}

void sub_100034EEC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_100171C58;
}

void sub_100034F04(uint64_t a1, void **a2)
{
  free(*a2);
}

uint64_t sub_100034F0C(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_100171CB8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100034F48()
{
  return &off_100171CB8;
}

int64_t sub_100034F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  _QWORD v11[2];

  result = sub_1000134D4(*(_QWORD *)(a1 + 16));
  v11[0] = result;
  v11[1] = v6;
  if (result <= 0)
  {
    if ((int)result >= 0)
      v10 = result;
    else
      v10 = -(int)result;
    return -v10;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 144);
    v8 = (*(_QWORD *)(a3 + 144) - v7) & ~((uint64_t)(*(_QWORD *)(a3 + 144) - v7) >> 63);
    if (v7 > v6 || v8 < result)
      return sub_100120940(a2, a3, v8, v11);
  }
  return result;
}

int64_t sub_100034FCC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _BYTE *v37;
  uint64_t v38;
  void *v39;
  unint64_t *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  int64_t v77;
  int v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  int v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v137;
  int64_t v138;
  void *v139;
  std::__shared_weak_count *v140;
  _OWORD v141[2];
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  char v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  __int128 v149;
  uint64_t v150;
  char v151;
  unint64_t *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;
  void *__src;
  std::__shared_weak_count *v156;
  unint64_t v157;
  _QWORD v158[8];
  unint64_t *v159;
  __int128 v160;
  int64_t v161;
  uint64_t v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  void *v166;
  std::__shared_weak_count *v167;
  _BYTE v168[25];
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  char v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  __int128 v176;
  uint64_t v177;
  char v178;
  __int128 v179;
  int v180;
  void *v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t *v186[2];
  __int128 v187;
  void *__dst;
  std::__shared_weak_count *v189;
  _BYTE v190[25];
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  char v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  __int128 v198;
  uint64_t v199;
  char v200;
  void *__p;
  __int128 v202;
  _BYTE v203[120];
  void *v204;
  __int128 v205;
  _BYTE v206[40];
  _BYTE v207[72];
  std::__shared_weak_count *v208;
  std::__shared_weak_count *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v212;
  std::__shared_weak_count *v213;

  v4 = a4;
  v6 = a2;
  if (!*(_BYTE *)(a1 + 56))
  {
    if (!a2[6]
      || (v7 = *(_QWORD *)(a4 + 144) - *(_QWORD *)(a3 + 144),
          *(_QWORD *)(a4 + 72) - *(_QWORD *)(a3 + 72) >= (v7 & (unint64_t)~(v7 >> 63)) + a2[8]))
    {
      sub_1000134D4(a2[2]);
    }
  }
  v8 = *(std::__shared_weak_count **)(a3 + 8);
  v166 = *(void **)a3;
  v167 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  *(_OWORD *)v168 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v168[9] = *(_OWORD *)(a3 + 25);
  v169 = *(_QWORD *)(a3 + 48);
  v170 = *(_OWORD *)(a3 + 56);
  v171 = *(_OWORD *)(a3 + 72);
  v172 = *(_OWORD *)(a3 + 88);
  v173 = *(_BYTE *)(a3 + 104);
  v11 = *(std::__shared_weak_count **)(a3 + 120);
  v174 = *(_QWORD *)(a3 + 112);
  v175 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v16 = *(_QWORD *)(a3 + 144);
  v14 = a3 + 144;
  v15 = v16;
  v176 = *(_OWORD *)(v14 - 16);
  v177 = v16;
  v178 = *(_BYTE *)(v14 + 8);
  if (((*(_QWORD *)(v4 + 144) - v16) & (unint64_t)~((*(_QWORD *)(v4 + 144) - v16) >> 63)) + v6[8] <= *(_QWORD *)&v168[16])
  {
    v17 = sub_100034F54((uint64_t)v6, (uint64_t)&v166, v4);
    v15 = v18;
    sub_10002D5FC((uint64_t)&v166, v17);
    if (v17 < 0)
    {
      v19 = v17;
      goto LABEL_188;
    }
  }
  else
  {
    v17 = 0;
  }
  v19 = v17;
  v135 = v4;
  v137 = v6;
  do
  {
    v20 = *(_QWORD *)(v4 + 144);
    if (v19 == ((v20 - *(_QWORD *)v14) & ~((v20 - *(_QWORD *)v14) >> 63)))
      break;
    v161 = v17;
    v162 = v15;
    v21 = *(std::__shared_weak_count **)(a1 + 72);
    v163 = *(_QWORD *)(a1 + 64);
    v164 = v21;
    v138 = v19;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v20 = *(_QWORD *)(v4 + 144);
    }
    v25 = v6[6];
    v24 = v6[7];
    v165 = v25;
    v27 = (char *)v6[3];
    v26 = (char *)v6[4];
    v28 = v177;
    v29 = (unint64_t)(v26 - v27 - 8) >> 3;
    if (v26 == v27)
      v30 = 0;
    else
      v30 = v29 + 1;
    v31 = (v20 - v177) & ~((v20 - v177) >> 63);
    v32 = v24 * v25;
    if (v32 >= v31)
      v33 = v31;
    else
      v33 = v32;
    __p = v203;
    v202 = xmmword_10013FEC0;
    if (v30 < 6)
    {
      if (v27 == v26)
      {
        v30 = 0;
      }
      else
      {
        v45 = v29 + 1;
        v46 = (unint64_t *)&v21->__shared_owners_;
        v47 = v203;
        do
        {
          v48 = *(_QWORD *)v27;
          if (v21)
          {
            do
              v49 = __ldxr(v46);
            while (__stxr(v49 + 1, v46));
          }
          *v47 = v48;
          v47[1] = v21;
          v27 += 8;
          v47[2] = v25;
          v47 += 3;
          --v45;
        }
        while (v45);
      }
    }
    else
    {
      v134 = v177;
      if (v30 >= 0x555555555555556)
        sub_1000158AC("get_next_capacity, allocator's max size reached");
      v34 = v33;
      v35 = v14;
      v36 = operator new(24 * v30);
      v37 = __p;
      if (__p)
      {
        v38 = v202;
        if ((_QWORD)v202)
        {
          v39 = __p;
          do
          {
            --v38;
            v39 = (void *)(sub_100012168((uint64_t)v39) + 24);
          }
          while (v38);
        }
        *(_QWORD *)&v202 = 0;
        if (v203 != v37)
          operator delete(v37);
      }
      *((_QWORD *)&v202 + 1) = v30;
      __p = v36;
      *(_QWORD *)&v202 = 0;
      if (v27 == v26)
      {
        v44 = 0;
        v41 = (char *)v36;
        v14 = v35;
        v6 = v137;
        v33 = v34;
        v28 = v134;
      }
      else
      {
        v40 = (unint64_t *)&v21->__shared_owners_;
        v41 = (char *)v36;
        v14 = v35;
        v6 = v137;
        v33 = v34;
        v28 = v134;
        do
        {
          v42 = *(_QWORD *)v27;
          if (v21)
          {
            do
              v43 = __ldxr(v40);
            while (__stxr(v43 + 1, v40));
          }
          *(_QWORD *)v41 = v42;
          *((_QWORD *)v41 + 1) = v21;
          *((_QWORD *)v41 + 2) = v25;
          v27 += 8;
          v41 += 24;
        }
        while (v27 != v26);
        v44 = v202;
      }
      v30 = v44 - 0x5555555555555555 * ((v41 - (_BYTE *)v36) >> 3);
    }
    v4 = v135;
    v19 = v138;
    *(_QWORD *)&v202 = v30;
    v204 = v206;
    v205 = xmmword_10013FEC0;
    sub_100015C84((uint64_t)&v204, v30);
    v181 = __p;
    __dst = (char *)__p + 24 * v202;
    v152 = (unint64_t *)v204;
    v186[0] = (unint64_t *)((char *)v204 + 8 * v205);
    sub_10002C7AC((uint64_t)v207, (uint64_t *)&v181, (uint64_t *)&__dst, &v152, v186, v28, v33);
    sub_10002CA7C((uint64_t)v207, (uint64_t)&v181);
    sub_10002C64C((uint64_t)v207, (uint64_t)&__dst);
    v17 = sub_100034F54((uint64_t)v6, (uint64_t)&v181, (uint64_t)&__dst);
    v15 = v50;
    v51 = v197;
    if (v197)
    {
      v52 = (unint64_t *)&v197->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = v189;
    if (v189)
    {
      v55 = (unint64_t *)&v189->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = v183;
    if (v183)
    {
      v58 = (unint64_t *)&v183->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = v182;
    if (v182)
    {
      v61 = (unint64_t *)&v182->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    if ((v17 & 0x8000000080000000) == 0x8000000080000000)
      goto LABEL_147;
    sub_10002CA7C((uint64_t)v207, (uint64_t)&__src);
    sub_10002C64C((uint64_t)v207, (uint64_t)&v152);
    v63 = v166;
    v139 = v166;
    v140 = v167;
    if (v167)
    {
      v64 = (unint64_t *)&v167->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    v141[0] = *(_OWORD *)v168;
    *(_OWORD *)((char *)v141 + 9) = *(_OWORD *)&v168[9];
    v142 = v169;
    v143 = v170;
    v144 = v171;
    v145 = v172;
    v146 = v173;
    v147 = v174;
    v148 = v175;
    if (v175)
    {
      v66 = (unint64_t *)&v175->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    v149 = v176;
    v150 = v177;
    v151 = v178;
    __dst = v63;
    v189 = v140;
    if (v140)
    {
      v68 = (unint64_t *)&v140->__shared_owners_;
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }
    v195 = v146;
    v191 = v142;
    v196 = v147;
    *(_OWORD *)v190 = v141[0];
    *(_OWORD *)&v190[9] = *(_OWORD *)((char *)v141 + 9);
    v192 = v143;
    v193 = v144;
    v194 = v145;
    v197 = v148;
    if (v148)
    {
      v70 = (unint64_t *)&v148->__shared_owners_;
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    v72 = 0;
    v198 = v149;
    v199 = v150;
    v200 = 0;
    while (!sub_10002C4A4((uint64_t)&__src, (uint64_t)&v152))
    {
      sub_1000174D8((uint64_t)v158);
      v73 = (std::__shared_weak_count *)v159;
      v186[0] = (unint64_t *)v158[7];
      v186[1] = v159;
      if (v159)
      {
        v74 = v159 + 1;
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }
      v187 = v160;
      if (*((_QWORD *)&v160 + 1))
      {
        v76 = *(_QWORD *)&v190[16];
        if (v157 < *(_QWORD *)&v190[16])
          v76 = v157;
        if (v76 >= *((_QWORD *)&v187 + 1))
          v77 = *((_QWORD *)&v187 + 1);
        else
          v77 = v76;
        memmove(__dst, __src, v77);
        if (v77 <= 0)
        {
          *(_QWORD *)&v179 = "transform(Fn &&, sg_vec_ref::iterator, const sg_vec_ref::iterator &, sg_vec_ref::iterator) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/io_breaker.cpp:76:13)]";
          *((_QWORD *)&v179 + 1) = 97;
          v180 = 16;
          sub_1000380B0(&v181, &v179);
          sub_100005A0C(&v184, (uint64_t)"IO error with sg: ", 18);
          sub_10011E628(&v184, &__src);
          sub_100005A0C(&v184, (uint64_t)" dest ", 6);
          sub_10011E628(&v184, &__dst);
          sub_100005A0C(&v184, (uint64_t)" returned status ", 17);
          std::ostream::operator<<(&v184, v77);
          std::ostream::~ostream(&v184, off_100172130);
          sub_100038214((uint64_t)&v181);
          std::ios::~ios(&v185);
          v78 = 1;
          if (v73)
          {
LABEL_97:
            v79 = (unint64_t *)&v73->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
        }
        else
        {
          sub_10002D5FC((uint64_t)&__src, v77);
          sub_10002D7D4((uint64_t)&__dst, v77);
          v78 = 0;
          v72 += v77;
          if (v73)
            goto LABEL_97;
        }
      }
      else
      {
        sub_10002D9AC((uint64_t)&__src);
        v78 = 2;
        if (v73)
          goto LABEL_97;
      }
      if ((v78 | 2) != 2)
        goto LABEL_106;
    }
    sub_10002D7D4((uint64_t)&v139, v72);
LABEL_106:
    v81 = v197;
    if (v197)
    {
      v82 = (unint64_t *)&v197->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    v84 = v189;
    if (v189)
    {
      v85 = (unint64_t *)&v189->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    v87 = v148;
    if (v148)
    {
      v88 = (unint64_t *)&v148->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    v90 = v140;
    if (v140)
    {
      v91 = (unint64_t *)&v140->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    v93 = v154;
    if (v154)
    {
      v94 = (unint64_t *)&v154->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    v96 = v153;
    if (v153)
    {
      v97 = (unint64_t *)&v153->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    v99 = (std::__shared_weak_count *)v159;
    if (v159)
    {
      v100 = v159 + 1;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    v102 = v156;
    if (v156)
    {
      v103 = (unint64_t *)&v156->__shared_owners_;
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    sub_10002D5FC((uint64_t)&v166, v17);
    sub_10002C308(&v170);
    v19 = v17 + v138;
LABEL_147:
    v105 = v213;
    if (v213)
    {
      v106 = (unint64_t *)&v213->__shared_owners_;
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    v108 = v212;
    if (v212)
    {
      v109 = (unint64_t *)&v212->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
    v111 = v211;
    if (v211)
    {
      v112 = (unint64_t *)&v211->__shared_owners_;
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
    v114 = v210;
    if (v210)
    {
      v115 = (unint64_t *)&v210->__shared_owners_;
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    v117 = v209;
    if (v209)
    {
      v118 = (unint64_t *)&v209->__shared_owners_;
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    v120 = v208;
    if (v208)
    {
      v121 = (unint64_t *)&v208->__shared_owners_;
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    if (*((_QWORD *)&v205 + 1) && v206 != v204)
      operator delete(v204);
    sub_100015C2C((uint64_t)&__p);
    v123 = v164;
    if (v164)
    {
      v124 = (unint64_t *)&v164->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    v6 = v137;
  }
  while ((v17 & 0x8000000080000000) != 0x8000000080000000);
LABEL_188:
  v126 = v175;
  if (v175)
  {
    v127 = (unint64_t *)&v175->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = v167;
  if (v167)
  {
    v130 = (unint64_t *)&v167->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  if (v17 < 0)
    v132 = v17;
  else
    v132 = 0;
  if (v132 >= 0)
    return v19;
  else
    return v132;
}

void sub_100035D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  sub_100012168((uint64_t)&STACK[0x5D0]);
  sub_100012168(a10);
  sub_100012168((uint64_t)&STACK[0x5F0]);
  sub_100012168(a11);
  sub_100012168((uint64_t)&a42);
  sub_100012168((uint64_t)&STACK[0x218]);
  sub_100012168((uint64_t)&a62);
  sub_100012168(a12);
  sub_100012168((uint64_t)&STACK[0x248]);
  sub_10001382C((uint64_t)&STACK[0x690]);
  sub_100012168(a13);
  sub_100012168((uint64_t)&STACK[0x380]);
  sub_100012168((uint64_t)&STACK[0x310]);
  _Unwind_Resume(a1);
}

uint64_t sub_100035E98(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
}

_QWORD *sub_100035EB0(_QWORD *a1)
{
  *a1 = off_100171CD8;
  sub_100012168((uint64_t)(a1 + 8));
  return a1;
}

void sub_100035EE0(_QWORD *a1)
{
  *a1 = off_100171CD8;
  sub_100012168((uint64_t)(a1 + 8));
  operator delete();
}

uint64_t sub_100035F20(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_100035F30(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_100035F40(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

void sub_100035F50()
{
  void *exception;
  void *v1;

  exception = __cxa_allocate_exception(0x40uLL);
  v1 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Image info is not supported for the given image type", 0x16u);
}

uint64_t sub_100035F84()
{
  return 4294967218;
}

double sub_100035F8C@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_100035F98(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_100035FA8()
{
  return 0;
}

uint64_t sub_100035FB0()
{
  return 0;
}

uint64_t sub_100035FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16), a2, *(_QWORD *)(a3 + 16));
}

uint64_t sub_100035FD0(uint64_t a1)
{
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 136))(*(_QWORD *)(a1 + 16)))
    operator new();
  return 0;
}

void sub_100036064()
{
  operator delete();
}

unint64_t sub_1000360B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v30;
  _OWORD v31[2];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  _OWORD v43[2];
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v54 = xmmword_100140580;
  v55 = a1;
  v56 = a2;
  v4 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v42 = *(_QWORD *)a3;
  *((_QWORD *)&v42 + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v43[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v43 + 9) = *(_OWORD *)(a3 + 25);
  v44 = *(_QWORD *)(a3 + 48);
  v45 = *(_OWORD *)(a3 + 56);
  v46 = *(_OWORD *)(a3 + 72);
  v47 = *(_OWORD *)(a3 + 88);
  v48 = *(_BYTE *)(a3 + 104);
  v7 = *(std::__shared_weak_count **)(a3 + 120);
  v49 = *(_QWORD *)(a3 + 112);
  v50 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v51 = *(_OWORD *)(a3 + 128);
  v52 = *(_QWORD *)(a3 + 144);
  v53 = *(_BYTE *)(a3 + 152);
  v10 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)&v30 = *(_QWORD *)a4;
  *((_QWORD *)&v30 + 1) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v31[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)(a4 + 25);
  v32 = *(_QWORD *)(a4 + 48);
  v33 = *(_OWORD *)(a4 + 56);
  v34 = *(_OWORD *)(a4 + 72);
  v35 = *(_OWORD *)(a4 + 88);
  v36 = *(_BYTE *)(a4 + 104);
  v13 = *(std::__shared_weak_count **)(a4 + 120);
  v37 = *(_QWORD *)(a4 + 112);
  v38 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v39 = *(_OWORD *)(a4 + 128);
  v40 = *(_QWORD *)(a4 + 144);
  v41 = *(_BYTE *)(a4 + 152);
  v16 = sub_100036CC0((uint64_t)&v54, &v42, &v30, 0xFFFFFFFFFFFFFFFFLL);
  v17 = v38;
  if (v38)
  {
    v18 = (unint64_t *)&v38->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v50;
  if (v50)
  {
    v24 = (unint64_t *)&v50->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  return v16;
}

void sub_100036324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  sub_100012168(v30);
  sub_100012168((uint64_t)&a9);
  sub_100012168(v29);
  sub_100012168((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_100036350(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _BYTE v38[8];
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  _BYTE v41[8];
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  uint64_t v44[18];
  void *__p;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[72];
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;

  sub_100037C30(v44, a3);
  sub_10002CA7C((uint64_t)v48, (uint64_t)v41);
  v5 = sub_10002C64C((uint64_t)v48, (uint64_t)v38);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _BYTE *, double))(*(_QWORD *)a1 + 144))(a1, a2, v41, v38, v5);
  v7 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v39;
  if (v39)
  {
    v11 = (unint64_t *)&v39->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v43;
  if (v43)
  {
    v14 = (unint64_t *)&v43->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v42;
  if (v42)
  {
    v17 = (unint64_t *)&v42->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v54;
  if (v54)
  {
    v20 = (unint64_t *)&v54->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v53;
  if (v53)
  {
    v23 = (unint64_t *)&v53->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v52;
  if (v52)
  {
    v26 = (unint64_t *)&v52->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v51;
  if (v51)
  {
    v29 = (unint64_t *)&v51->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v50;
  if (v50)
  {
    v32 = (unint64_t *)&v50->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v49;
  if (v49)
  {
    v35 = (unint64_t *)&v49->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v46 && &v47 != __p)
    operator delete(__p);
  sub_100015C2C((uint64_t)v44);
  return v6;
}

void sub_100036660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;

  sub_100012168(v50 + 112);
  sub_100012168((uint64_t)&a10);
  sub_100012168((uint64_t)&a44);
  sub_100012168((uint64_t)&a30);
  sub_10001382C((uint64_t)&a50);
  _Unwind_Resume(a1);
}

uint64_t sub_1000366B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;

  v4 = a2;
  return sub_100037D5C((uint64_t)&v4, a3);
}

uint64_t sub_1000366D8(uint64_t a1, uint64_t a2)
{
  return sub_100013328(*(_QWORD **)(a2 + 16));
}

uint64_t sub_1000366E4(uint64_t a1, uint64_t a2)
{
  return sub_100014760(*(_QWORD **)(a2 + 16));
}

_QWORD *sub_1000366F4(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *result = off_100171DD8;
  result[1] = a2;
  v3 = *a3;
  *a3 = 0;
  result[3] = 0;
  result[2] = v3;
  result[4] = 0;
  result[5] = 0;
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  result[7] = v4 + 1;
  result[8] = v5;
  v6 = v5 + v4;
  result[6] = v6 / (v4 + 1);
  if (v4 < v6)
    operator new[]();
  return result;
}

void sub_100036860()
{
  operator delete[]();
}

uint64_t sub_1000368C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8), a1, a2, a3);
}

uint64_t sub_1000368E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8), a1, a2, a3);
}

uint64_t sub_1000368FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8), a1, a2, a3);
}

uint64_t sub_100036918(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8), a1, a2);
}

uint64_t sub_100036930(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_100171DD8;
  v4 = (void **)(a1 + 24);
  sub_100036C20(&v4);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  return a1;
}

void sub_10003698C(uint64_t a1)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)a1 = off_100171DD8;
  v3 = (void **)(a1 + 24);
  sub_100036C20(&v3);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  operator delete();
}

uint64_t sub_1000369FC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100036A70((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100036A70(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = (_QWORD *)(a7 - 8);
    v9 = (_QWORD *)(a7 - 8);
    do
    {
      v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 8;
      v8 = v9;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_100036B04((uint64_t)v13);
  return v11;
}

uint64_t sub_100036B04(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100036B38(a1);
  return a1;
}

uint64_t sub_100036B38(uint64_t result)
{
  uint64_t *v1;
  uint64_t *v2;

  v1 = *(uint64_t **)(*(_QWORD *)(result + 16) + 8);
  v2 = *(uint64_t **)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    result = *v1;
    *v1 = 0;
    if (result)
      operator delete[]();
    ++v1;
  }
  return result;
}

uint64_t sub_100036B8C(uint64_t a1)
{
  sub_100036BC0(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100036BC0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v3 = result;
    do
    {
      *(_QWORD *)(v3 + 16) = v2 - 8;
      result = *(_QWORD *)(v2 - 8);
      *(_QWORD *)(v2 - 8) = 0;
      if (result)
        operator delete[]();
      v2 = *(_QWORD *)(v3 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void sub_100036C20(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100036C60((uint64_t)v2, *v2);
    operator delete(**a1);
  }
}

uint64_t sub_100036C60(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = result;
  v3 = *(_QWORD **)(result + 8);
  while (v3 != a2)
  {
    v4 = *--v3;
    result = v4;
    *v3 = 0;
    if (v4)
      operator delete[]();
  }
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

unint64_t sub_100036CC0(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v29;
  _OWORD v30[2];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v40 = v4;
  v41[0] = v5;
  *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)a2 + 25);
  v42 = *((_QWORD *)a2 + 6);
  v43 = *(__int128 *)((char *)a2 + 56);
  v44 = *(__int128 *)((char *)a2 + 72);
  v45 = *(__int128 *)((char *)a2 + 88);
  v46 = *((_BYTE *)a2 + 104);
  v6 = a2[7];
  v7 = a2[8];
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  v47 = v6;
  v48 = v7;
  v50 = *((_BYTE *)a2 + 152);
  v49 = *((_QWORD *)a2 + 18);
  v8 = *a3;
  v9 = a3[1];
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a3 + 25);
  v31 = *((_QWORD *)a3 + 6);
  v32 = *(__int128 *)((char *)a3 + 56);
  v10 = *(__int128 *)((char *)a3 + 72);
  v11 = *(__int128 *)((char *)a3 + 88);
  v35 = *((_BYTE *)a3 + 104);
  v34 = v11;
  v33 = v10;
  v12 = a3[7];
  v13 = a3[8];
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 15) = 0;
  v36 = v12;
  v37 = v13;
  v14 = *((_QWORD *)a3 + 18);
  v39 = *((_BYTE *)a3 + 152);
  v38 = v14;
  v15 = sub_100036EDC(a1, &v40, (uint64_t)&v29, a4, 0);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v15;
}

void sub_100036EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  sub_100012168(v30);
  sub_100012168((uint64_t)&a9);
  sub_100012168(v29);
  sub_100012168((uint64_t)&a29);
  _Unwind_Resume(a1);
}

unint64_t sub_100036EDC(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t (*v12)(_QWORD *, _QWORD, __int128 *);
  _QWORD *v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v25;
  _BYTE v28[112];
  uint64_t v29;
  _QWORD v30[2];
  char v31;
  _BYTE v32[248];
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  _BYTE v37[544];

  v8 = 0;
  v9 = *(_QWORD *)(a3 + 144);
  v37[0] = 0;
  v37[528] = 0;
  while (!sub_10002C4A4((uint64_t)a2, a3))
  {
    if (a2[18] >= v9 || v8 >= a4)
      break;
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v35 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &, const sg_entry &), DiskImage *, std::reference_wrapper<DiskImage::Context>, const std::placeholders::__ph<1> &>]";
      *((_QWORD *)&v35 + 1) = 142;
      v36 = 2;
      sub_10003722C(v30, &v35);
      sub_100005A0C(&v33, (uint64_t)"sg: ", 4);
      sub_10011E628(&v33, a2);
      std::ostream::~ostream(&v33, off_100171F10);
      sub_100037460((uint64_t)v30);
      std::ios::~ios(&v34);
    }
    v30[0] = 0;
    v30[1] = v9;
    v31 = 2;
    sub_100075798(a2, (uint64_t)v30, (uint64_t)&v35);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(uint64_t (**)(_QWORD *, _QWORD, __int128 *))a1;
    v13 = (_QWORD *)(*(_QWORD *)(a1 + 16) + (v11 >> 1));
    if ((v11 & 1) != 0)
      v12 = *(uint64_t (**)(_QWORD *, _QWORD, __int128 *))(*v13 + v12);
    v14 = v12(v13, *(_QWORD *)(a1 + 24), &v35);
    v16 = v14;
    v17 = v14 >= 0 || (_DWORD)v14 == 0;
    v18 = v17;
    if (v17)
    {
      v19 = v15;
      if (sub_10002E788((uint64_t)a2, a3, v15, v14))
      {
        sub_10002E8C4((uint64_t)v28, (uint64_t)a2);
        sub_10002E74C((uint64_t)v28, a3, v19, v16, a4, (uint64_t)v30);
        sub_100037314((uint64_t)v37, (uint64_t)v30);
        sub_10002E7A4((uint64_t)v30);
        sub_100012168((uint64_t)&v29);
        sub_100012168((uint64_t)v28);
        sub_10002CA7C((uint64_t)v37, (uint64_t)v30);
        sub_100037358((uint64_t)a2, (uint64_t)v30);
        sub_100012168((uint64_t)v32);
        sub_100012168((uint64_t)v30);
        sub_10002C64C((uint64_t)v37, (uint64_t)v30);
        sub_100037358(a3, (uint64_t)v30);
        sub_100012168((uint64_t)v32);
        sub_100012168((uint64_t)v30);
      }
      if ((a5 & 1) != 0)
        sub_10002D5FC((uint64_t)a2, v16);
      else
        sub_10002D7D4((uint64_t)a2, v16);
      v8 += v16;
    }
    else
    {
      if ((int)v14 >= 0)
        v23 = v14;
      else
        v23 = -(int)v14;
      v25 = -v23;
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if ((v18 & 1) == 0)
      goto LABEL_37;
  }
  v25 = v8;
LABEL_37:
  sub_10002EB64((uint64_t)v37);
  return v25;
}

void sub_1000371B8(_Unwind_Exception *a1)
{
  sub_100012168((uint64_t)&STACK[0x2F0]);
  sub_10002EB64((uint64_t)&STACK[0x320]);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003722C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000373E4((uint64_t)a1, a2);
  *a1 = off_100171E48;
  a1[45] = &off_100171F48;
  a1[46] = &off_100171F70;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100171E48;
  a1[45] = off_100171ED0;
  a1[46] = off_100171EF8;
  return a1;
}

void sub_1000372B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100037460(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000372D4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100171F10);
  sub_100037460(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100037314(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 528))
  {
    sub_100037A4C(a1, a2);
  }
  else
  {
    sub_10002EA44(a1, a2);
    *(_BYTE *)(a1 + 528) = 1;
  }
  return a1;
}

uint64_t sub_100037358(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  sub_100015BC8(a1, (__int128 *)a2);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 88) = v5;
  sub_100015BC8(a1 + 112, (__int128 *)(a2 + 112));
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v7 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v7;
  return a1;
}

uint64_t sub_1000373E4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100171FE0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10003744C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100037460(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100171FE0;
  sub_100037718(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000374FC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100171F10);
  sub_100037460(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100037550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100037584(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000375D0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100171F10);
  sub_100037460(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100037608(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100171F10);
  sub_100037460(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100037658(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100171F10);
  sub_100037460(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100037698(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100171F10);
  sub_100037460(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1000376F4(uint64_t a1)
{
  sub_100037460(a1);
  operator delete();
}

uint64_t sub_100037718(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100037868((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100037840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100037868(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 545;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 545;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100037A4C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  sub_100015BC8(a1 + 64, (__int128 *)(a2 + 64));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v8 = *(_OWORD *)(a2 + 112);
  v7 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = v7;
  sub_100015BC8(a1 + 152, (__int128 *)(a2 + 152));
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  sub_10002C7A4((uint64_t)&v22, a1, v4, 1);
  sub_100037358(a1 + 368, (uint64_t)&v22);
  v9 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v23;
  if (v23)
  {
    v13 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  sub_10002C7A4((uint64_t)&v22, a1, (uint64_t *)(a1 + 96), 0);
  sub_100037358(a1 + 208, (uint64_t)&v22);
  v15 = v24;
  if (v24)
  {
    v16 = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return a1;
}

uint64_t *sub_100037C30(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v16;
  unint64_t *v17[2];
  uint64_t v18[3];
  _QWORD *v19;
  __int128 v20;
  _QWORD v21[15];

  v4 = sub_1001207C0();
  v5 = *a2;
  v6 = v4[1];
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a2[4];
  v17[0] = 0;
  v17[1] = 0;
  v18[2] = v9;
  v19 = v21;
  v21[0] = v5;
  v21[1] = v6;
  v18[0] = 0;
  v18[1] = 0;
  v21[2] = v9;
  v20 = xmmword_100140350;
  sub_10002EC54((uint64_t)a1, (uint64_t *)&v19);
  sub_100015C2C((uint64_t)&v19);
  v11 = a2[2];
  v10 = a2[3];
  v13 = (unint64_t *)a1[18];
  v12 = a1[19];
  v14 = a1[1];
  v19 = (_QWORD *)*a1;
  v18[0] = (uint64_t)&v19[3 * v14];
  v16 = &v13[v12];
  v17[0] = v13;
  sub_10002C7AC((uint64_t)(a1 + 26), (uint64_t *)&v19, v18, v17, &v16, v10, v11);
  return a1;
}

void sub_100037D28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015744(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100037D5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _BYTE v35[8];
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  _BYTE v38[8];
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  uint64_t v41[18];
  void *__p;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[72];
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;

  sub_10002E7FC(a2, v41);
  sub_10002CA7C((uint64_t)v45, (uint64_t)v38);
  sub_10002C64C((uint64_t)v45, (uint64_t)v35);
  v3 = sub_100013598(*(_QWORD **)(*(_QWORD *)a1 + 16));
  v4 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v36;
  if (v36)
  {
    v8 = (unint64_t *)&v36->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v40;
  if (v40)
  {
    v11 = (unint64_t *)&v40->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v39;
  if (v39)
  {
    v14 = (unint64_t *)&v39->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v51;
  if (v51)
  {
    v17 = (unint64_t *)&v51->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v50;
  if (v50)
  {
    v20 = (unint64_t *)&v50->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v49;
  if (v49)
  {
    v23 = (unint64_t *)&v49->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v48;
  if (v48)
  {
    v26 = (unint64_t *)&v48->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v47;
  if (v47)
  {
    v29 = (unint64_t *)&v47->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v46;
  if (v46)
  {
    v32 = (unint64_t *)&v46->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v43 && &v44 != __p)
    operator delete(__p);
  sub_100015C2C((uint64_t)v41);
  return v3;
}

void sub_100038060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;

  sub_100012168(v50 + 112);
  sub_100012168((uint64_t)&a10);
  sub_100012168((uint64_t)&a44);
  sub_100012168((uint64_t)&a30);
  sub_10001382C((uint64_t)&a50);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000380B0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100038198((uint64_t)a1, a2);
  *a1 = off_100172068;
  a1[45] = &off_100172168;
  a1[46] = &off_100172190;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100172068;
  a1[45] = off_1001720F0;
  a1[46] = off_100172118;
  return a1;
}

void sub_100038134(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100038214(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100038158(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100172130);
  sub_100038214(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100038198(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100172200;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100038200(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100038214(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100172200;
  sub_1000384CC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000382B0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100172130);
  sub_100038214(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100038304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100038338(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100038384(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172130);
  sub_100038214(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000383BC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172130);
  sub_100038214(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_10003840C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100172130);
  sub_100038214(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003844C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100172130);
  sub_100038214(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1000384A8(uint64_t a1)
{
  sub_100038214(a1);
  operator delete();
}

uint64_t sub_1000384CC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10003861C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000385F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10003861C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 615;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 615;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100038800()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&qword_1001A0F30);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&qword_1001A0F30, &v3, (void (__cdecl *)(void *))sub_100038A1C);
  }
  return dword_1001A0F38;
}

uint64_t sub_10003885C()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&qword_1001A0F40);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&qword_1001A0F40, &v3, (void (__cdecl *)(void *))sub_100038A68);
  }
  return dword_1001A0F48;
}

uint64_t sub_1000388B8()
{
  return 2 * sub_10003885C();
}

uint64_t (**sub_1000388D4())()
{
  unsigned __int8 v0;
  uint64_t (**v1)();

  v0 = atomic_load((unsigned __int8 *)&qword_1001A0F58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1001A0F58))
  {
    qword_1001A0F50 = (unint64_t)(sub_100038978() + 0x3FFFFFFF) >> 30;
    __cxa_guard_release(&qword_1001A0F58);
  }
  v1 = (uint64_t (**)())&unk_100140668;
  if ((unint64_t)qword_1001A0F50 > 3)
    v1 = &off_100172298;
  if ((unint64_t)qword_1001A0F50 <= 8)
    return v1;
  else
    return &off_100172270;
}

void sub_100038960(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1001A0F58);
  _Unwind_Resume(a1);
}

uint64_t sub_100038978()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&qword_1001A0F60);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&qword_1001A0F60, &v3, (void (__cdecl *)(void *))sub_1000389D4);
  }
  return qword_1001A0F68;
}

uint64_t sub_1000389D4()
{
  uint64_t result;
  size_t v1;
  uint64_t v2;

  v1 = 8;
  v2 = 0;
  result = sysctlbyname("hw.memsize", &v2, &v1, 0, 0);
  qword_1001A0F68 = v2;
  return result;
}

uint64_t sub_100038A1C()
{
  uint64_t result;
  size_t v1;
  int v2;

  v2 = 0;
  v1 = 4;
  result = sysctlbyname("debug.didevice_queue_depth", &v2, &v1, 0, 0);
  dword_1001A0F38 = v2;
  return result;
}

uint64_t sub_100038A68()
{
  uint64_t result;
  size_t v1;
  int v2;

  v2 = 1;
  v1 = 4;
  result = sysctlbyname("hw.logicalcpu", &v2, &v1, 0, 0);
  dword_1001A0F48 = v2;
  return result;
}

void sub_100038AB8(_QWORD *a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  v3 = a3;
  if (*a2 == 4)
    sub_10003DFFC((uint64_t)&v4, a1, &v3);
  sub_10003E120((uint64_t)&v4, a1, a2, &v3);
}

void sub_100038B24(_QWORD *a1, _QWORD *a2, _DWORD *a3, uint64_t a4)
{
  _QWORD *v6;

  v6 = sub_100038BC0(a1, a2);
  *v6 = off_1001722D0;
  *((_DWORD *)v6 + 10) = *a3;
  v6[6] = a4;
  operator new[]();
}

void sub_100038BAC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_100038C10(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100038BC0(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = sub_10011E7DC(a1);
  *result = off_1001725B8;
  v4 = a2[1];
  result[3] = *a2;
  result[4] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

_QWORD *sub_100038C10(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = off_1001725B8;
  sub_100012168((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_100038C4C(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;

  v4 = sub_100038BC0(a1, a3);
  *v4 = off_1001722D0;
  *((_DWORD *)v4 + 10) = *(_DWORD *)(a2 + 40);
  v4[6] = *(_QWORD *)(a2 + 48);
  operator new[]();
}

void sub_100038CD8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_100038C10(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100038CEC(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = off_1001722D0;
  sub_10003A9DC((uint64_t)(a1 + 9));
  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    operator delete[]();
  *a1 = off_1001725B8;
  sub_100012168((uint64_t)(a1 + 3));
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t sub_100038D64(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const std::locale::facet *v8;
  uint64_t v9;
  __int128 v11;
  int v12;
  _QWORD v13[45];
  uint64_t v14;
  _BYTE v15[152];
  std::locale v16;

  v4 = a1[8];
  if (v4 != a1[7])
  {
    (*(void (**)(uint64_t *))(*a1 + 144))(a1);
    v4 = a1[7];
  }
  v5 = sub_100034324(a1[3], v4, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  if ((v5 & 0x80000000) != 0)
  {
    v7 = v5;
    *(_QWORD *)&v11 = "int CompressedBackend::read(const sg_entry &)";
    *((_QWORD *)&v11 + 1) = 27;
    v12 = 16;
    sub_100038F50(v13, &v11);
    sub_100005A0C(&v14, (uint64_t)"Internal backend read() failed. ret=", 36);
    std::ostream::operator<<(&v14, v7);
    std::ios_base::getloc((const std::ios_base *)&v15[*(_QWORD *)(v14 - 24) - 8]);
    v8 = std::locale::use_facet(&v16, &std::ctype<char>::id);
    v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v16);
    std::ostream::put(&v14, v9);
    std::ostream::flush(&v14);
    std::ostream::~ostream(&v14, off_100172750);
    sub_10003AC34((uint64_t)v13);
    std::ios::~ios(v15);
  }
  else
  {
    v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 192))(a1, a2, a1[7]);
    if (v6)
    {
      return v6;
    }
    else
    {
      *(_QWORD *)&v11 = "int CompressedBackend::read(const sg_entry &)";
      *((_QWORD *)&v11 + 1) = 27;
      v12 = 16;
      sub_100039038(v13, &v11);
      sub_100005A0C(&v14, (uint64_t)"Decompression failed", 20);
      std::ostream::~ostream(&v14, off_100172970);
      sub_10003B220((uint64_t)v13);
      std::ios::~ios(v15);
      return 4294967291;
    }
  }
  return v7;
}

void sub_100038F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000390E0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100038F50(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10003E248((uint64_t)a1, a2);
  *a1 = off_100172688;
  a1[45] = &off_100172788;
  a1[46] = &off_1001727B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100172688;
  a1[45] = off_100172710;
  a1[46] = off_100172738;
  return a1;
}

void sub_100038FD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10003AC34(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100038FF8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100172750);
  sub_10003AC34(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100039038(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10003E2C4((uint64_t)a1, a2);
  *a1 = off_1001728A8;
  a1[45] = &off_1001729A8;
  a1[46] = &off_1001729D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001728A8;
  a1[45] = off_100172930;
  a1[46] = off_100172958;
  return a1;
}

void sub_1000390BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10003B220(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000390E0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100172970);
  sub_10003B220(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

unint64_t sub_100039120@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  BOOL v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t result;
  __int128 v32;
  _BYTE v33[25];
  __int128 *v34;
  _BYTE v35[40];
  uint64_t v36;
  _BYTE v37[40];
  __int128 *v38;
  _QWORD v39[5];
  __int128 *v40;

  v6 = a1[8];
  v7 = a2 + 2;
  v8 = a2[2];
  if (a1[6] - v6 + a1[7] < v8)
  {
    (*(void (**)(uint64_t *))(*a1 + 144))(a1);
    v6 = a1[8];
    v8 = *v7;
  }
  v9 = a1[3];
  v10 = a2[3];
  v11 = *((_QWORD *)sub_1001207C0() + 1);
  *(_QWORD *)&v32 = v6;
  *((_QWORD *)&v32 + 1) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)v33 = v8;
  *(_QWORD *)&v33[8] = v10;
  *(_QWORD *)&v33[16] = v8;
  v33[24] = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v9 + 128))(v39, v9, &v32);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (BYTE4(v39[0]))
    v17 = 0;
  else
    v17 = v39[4] == 0;
  if (v17)
    return sub_10003DF88(a3, (uint64_t)v39);
  LOBYTE(v32) = 0;
  BYTE4(v32) = 0;
  *((_QWORD *)&v32 + 1) = 0;
  *(_QWORD *)v33 = sub_10011E1E0((unint64_t)&v32);
  v18 = sub_10011E2A0((unint64_t)&v32);
  v40 = &v32;
  *(_QWORD *)&v33[8] = v18;
  *(_QWORD *)&v33[16] = &v40;
  sub_10003DF88((unint64_t)v37, (uint64_t)&v32);
  v19 = v40;
  v38 = v40;
  *((_QWORD *)v40 + 4) = &v38;
  v20 = a2[1];
  *(_QWORD *)&v32 = *a2;
  *((_QWORD *)&v32 + 1) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v19 = v38;
  }
  *(_OWORD *)&v33[9] = *(_OWORD *)((char *)v7 + 9);
  *(_OWORD *)v33 = *(_OWORD *)v7;
  v34 = v19;
  v38 = 0;
  *((_QWORD *)v19 + 4) = &v34;
  sub_10003DF88((unint64_t)v35, (uint64_t)v39);
  v23 = a1[9];
  v36 = a1[8];
  v24 = a1[10];
  v25 = (_OWORD *)(v23 + 104 * v24);
  if (v24 == a1[11])
  {
    sub_10003E340(a1 + 9, (_QWORD *)(v23 + 104 * v24), 1, (uint64_t)&v32, &v40);
  }
  else
  {
    *v25 = v32;
    v32 = 0uLL;
    v26 = *(_OWORD *)v33;
    *(_OWORD *)((char *)v25 + 25) = *(_OWORD *)&v33[9];
    v25[1] = v26;
    v27 = (_QWORD *)(v23 + 104 * v24);
    v27[6] = v34;
    v27 += 6;
    v34 = 0;
    *(_QWORD *)(*v27 + 32) = v27;
    sub_10003DF88((unint64_t)(v27 + 1), (uint64_t)v35);
    *(_QWORD *)(v23 + 104 * v24 + 96) = v36;
    ++a1[10];
  }
  if (v34)
    *((_QWORD *)v34 + 4) = 0;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  a1[8] += *v7;
  result = sub_10003DF88(a3, (uint64_t)v37);
  if (v38)
    *((_QWORD *)v38 + 4) = 0;
  return result;
}

void sub_100039400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a15)
    *(_QWORD *)(a15 + 32) = 0;
  sub_100012168((uint64_t)&a9);
  if (a28)
    *(_QWORD *)(a28 + 32) = 0;
  _Unwind_Resume(a1);
}

_QWORD *sub_100039474(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  __int128 v16;
  int v17;
  _QWORD v18[45];
  uint64_t v19;
  uint64_t v20;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 144))(*(_QWORD *)(a1 + 24));
  v3 = *(_QWORD *)(a1 + 72);
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    v4 = v3 + 48;
    v5 = 104 * v2;
    do
    {
      v6 = sub_100039604((unsigned int *)(v4 + 8));
      v7 = v6;
      if ((v6 & 0x80000000) != 0)
      {
        v10 = v3 + 48;
        v11 = *(unsigned int **)v4;
        *v11 = v7;
        v9 = v11 + 1;
      }
      else if (*(_QWORD *)(v4 - 32) <= (unint64_t)v6)
      {
        v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 192))(a1, v4 - 48, *(_QWORD *)(v4 + 48));
        if (v12)
        {
          v13 = v12;
          v10 = v3 + 48;
          v14 = *(unsigned int **)v4;
          **(_DWORD **)v4 = v13;
        }
        else
        {
          *(_QWORD *)&v16 = "void CompressedBackend::run_futures()";
          *((_QWORD *)&v16 + 1) = 35;
          v17 = 16;
          sub_1000396D4(v18, &v16);
          sub_100005A0C(&v19, (uint64_t)"Decompression failed", 20);
          std::ostream::~ostream(&v19, off_100172B90);
          sub_10003B80C((uint64_t)v18);
          std::ios::~ios(&v20);
          v10 = v3 + 48;
          v14 = *(unsigned int **)v4;
          **(_DWORD **)v4 = -5;
        }
        v9 = v14 + 1;
      }
      else
      {
        v8 = *(unsigned int **)v4;
        *v8 = -5;
        v9 = v8 + 1;
        v10 = v4;
      }
      *v9 = 1;
      sub_10003DF28(v10);
      v3 += 104;
      v4 += 104;
      v5 -= 104;
    }
    while (v5);
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
  return sub_10003E7B4((_QWORD *)(a1 + 72));
}

void sub_1000395F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10003977C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100039604(unsigned int *a1)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t v5;
  std::mutex *v6;
  std::condition_variable *v7;
  unint64_t v8;
  std::unique_lock<std::mutex> v9;

  if (*((_BYTE *)a1 + 4))
    return *a1;
  v4 = (unint64_t *)(a1 + 2);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = (std::mutex *)*((_QWORD *)a1 + 2);
  v9.__m_ = (std::unique_lock<std::mutex>::mutex_type *)*((_QWORD *)a1 + 2);
  v9.__owns_ = 1;
  std::mutex::lock(v6);
  if (!*((_BYTE *)a1 + 4))
  {
    v7 = (std::condition_variable *)*((_QWORD *)a1 + 3);
    do
      std::condition_variable::wait(v7, &v9);
    while (!*((_BYTE *)a1 + 4));
  }
  do
    v8 = __ldaxr(v4);
  while (__stlxr(v8 - 1, v4));
  sub_10003DEE8((uint64_t)&v9);
  v2 = *a1;
  if (v9.__owns_)
    std::mutex::unlock(v9.__m_);
  return v2;
}

void sub_1000396B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000396D4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10003E738((uint64_t)a1, a2);
  *a1 = off_100172AC8;
  a1[45] = &off_100172BC8;
  a1[46] = &off_100172BF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100172AC8;
  a1[45] = off_100172B50;
  a1[46] = off_100172B78;
  return a1;
}

void sub_100039758(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10003B80C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003977C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100172B90);
  sub_10003B80C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000397BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const std::locale::facet *v8;
  uint64_t v9;
  __int128 v11;
  int v12;
  _QWORD v13[45];
  uint64_t v14;
  uint64_t v15;
  std::locale v16;

  if (a1[8] != a1[7])
    (*(void (**)(uint64_t *))(*a1 + 144))(a1);
  v4 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 184))(a1, a2);
  if (!v4)
    return 4294967291;
  v5 = v4;
  v6 = sub_10003993C(a1[3], a1[7], v4, *(_QWORD *)(a2 + 24));
  if ((v6 & 0x80000000) == 0)
    return v5;
  v7 = v6;
  *(_QWORD *)&v11 = "int CompressedBackend::write(const sg_entry &)";
  *((_QWORD *)&v11 + 1) = 28;
  v12 = 16;
  sub_10001365C(v13, &v11);
  sub_100005A0C(&v14, (uint64_t)"Internal backend write() failed. ret=", 37);
  std::ostream::operator<<(&v14, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)&v14 + *(_QWORD *)(v14 - 24)));
  v8 = std::locale::use_facet(&v16, &std::ctype<char>::id);
  v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v16);
  std::ostream::put(&v14, v9);
  std::ostream::flush(&v14);
  std::ostream::~ostream(&v14, off_10016E590);
  sub_100016EDC((uint64_t)v13);
  std::ios::~ios(&v15);
  return v7;
}

void sub_100039918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::locale::~locale((std::locale *)(v5 - 40));
  sub_100013704((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003993C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v8 = (std::__shared_weak_count *)*((_QWORD *)sub_1001207C0() + 1);
  v16 = a2;
  v17 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v18 = a3;
  v19 = a4;
  v20 = a3;
  v21 = 0;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 96))(a1, &v16);
  v12 = v17;
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_1000399F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_100039A0C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  int v6;

  v3 = sub_100005A0C(a2, (uint64_t)"Compressed(", 11);
  v6 = *(_DWORD *)(a1 + 40);
  v4 = sub_100039A68(v3, &v6);
  return sub_100005A0C(v4, (uint64_t)")", 1);
}

_QWORD *sub_100039A68(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;

  v2 = 0;
  while (dword_100172CD0[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 30)
    {
      v3 = "no_match";
      v4 = 8;
      return sub_100005A0C(a1, (uint64_t)v3, v4);
    }
  }
  v5 = &dword_100172CD0[v2];
  v3 = (const char *)*((_QWORD *)v5 + 1);
  v4 = *((_QWORD *)v5 + 2);
  return sub_100005A0C(a1, (uint64_t)v3, v4);
}

void sub_100039AAC(_QWORD *a1, _QWORD *a2, int *a3, uint64_t a4)
{
  int v4;

  v4 = *a3;
  sub_100038B24(a1, a2, &v4, a4);
}

void sub_100039B98(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[222];
  v1[222] = 0;
  if (v3)
    operator delete();
  v4 = v1[221];
  v1[221] = 0;
  if (v4)
    operator delete[]();
  sub_100038CEC(v1);
  _Unwind_Resume(a1);
}

void sub_100039C08(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  sub_100038C4C(a1, a2, a3);
}

void sub_100039CC0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[222];
  v1[222] = 0;
  if (v3)
    operator delete();
  v4 = v1[221];
  v1[221] = 0;
  if (v4)
    operator delete[]();
  sub_100038CEC(v1);
  _Unwind_Resume(a1);
}

size_t sub_100039D1C(uint64_t a1, uint64_t a2, const uint8_t *a3)
{
  return compression_decode_buffer(*(uint8_t **)a2, *(_QWORD *)(a2 + 32), a3, *(_QWORD *)(a2 + 16), *(void **)(a1 + 1768), (compression_algorithm)**(_DWORD **)(a1 + 1776));
}

size_t sub_100039D40(uint64_t a1, uint64_t a2)
{
  return compression_encode_buffer(*(uint8_t **)(a1 + 56), *(_QWORD *)(a2 + 16), *(const uint8_t **)a2, *(_QWORD *)(a2 + 16), *(void **)(a1 + 1768), (compression_algorithm)**(_DWORD **)(a1 + 1776));
}

void sub_100039D64(uint64_t a1, _QWORD *a2)
{
  char v2;

  sub_10003E7FC((uint64_t)&v2, a1, a2);
}

uint64_t sub_100039DA4(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  int v7;
  _QWORD v8[45];
  uint64_t v9;
  uint64_t v10;
  unsigned int destLen;

  destLen = *(_QWORD *)(a2 + 32);
  v3 = BZ2_bzBuffToBuffDecompress(*(char **)a2, &destLen, a3, *(_DWORD *)(a2 + 16), 0, 0);
  if (!(_DWORD)v3)
    return destLen;
  v4 = v3;
  *(_QWORD *)&v6 = "size_t BZIPCompressedBackend::decompress(const sg_entry &, char *) const";
  *((_QWORD *)&v6 + 1) = 40;
  v7 = 16;
  sub_100039E84(v8, &v6);
  sub_100005A0C(&v9, (uint64_t)"BZIP decompression failed, res=", 31);
  std::ostream::operator<<(&v9, v4);
  std::ostream::~ostream(&v9, off_100173048);
  sub_10003C664((uint64_t)v8);
  std::ios::~ios(&v10);
  return 0;
}

void sub_100039E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100039F2C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100039E84(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10003E8AC((uint64_t)a1, a2);
  *a1 = off_100172F80;
  a1[45] = &off_100173080;
  a1[46] = &off_1001730A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100172F80;
  a1[45] = off_100173008;
  a1[46] = off_100173030;
  return a1;
}

void sub_100039F08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10003C664(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100039F2C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100173048);
  sub_10003C664(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100039F6C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  int v8;
  _QWORD v9[45];
  uint64_t v10;
  uint64_t v11;
  unsigned int destLen;

  v2 = *(_QWORD *)(a2 + 16);
  destLen = v2;
  v3 = v2 / 0x186A0;
  if ((int)(v2 / 0x186A0) >= 8)
    LODWORD(v3) = 8;
  v4 = BZ2_bzBuffToBuffCompress(*(char **)(a1 + 56), &destLen, *(char **)a2, v2, v3 + 1, 0, 0);
  if ((_DWORD)v4 != -8)
  {
    v5 = v4;
    if (!(_DWORD)v4)
      return destLen;
    *(_QWORD *)&v7 = "size_t BZIPCompressedBackend::compress(const sg_entry &) const";
    *((_QWORD *)&v7 + 1) = 38;
    v8 = 16;
    sub_10003A080(v9, &v7);
    sub_100005A0C(&v10, (uint64_t)"BZIP compression failed, res=", 29);
    std::ostream::operator<<(&v10, v5);
    std::ostream::~ostream(&v10, off_100173268);
    sub_10003CC50((uint64_t)v9);
    std::ios::~ios(&v11);
  }
  return 0;
}

void sub_10003A06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10003A128((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003A080(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10003E928((uint64_t)a1, a2);
  *a1 = off_1001731A0;
  a1[45] = &off_1001732A0;
  a1[46] = &off_1001732C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001731A0;
  a1[45] = off_100173228;
  a1[46] = off_100173250;
  return a1;
}

void sub_10003A104(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10003CC50(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003A128(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100173268);
  sub_10003CC50(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_10003A168(uint64_t a1, _QWORD *a2)
{
  char v2;

  sub_10003E9A4((uint64_t)&v2, a1, a2);
}

_QWORD *sub_10003A1A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1001723A8;
  v2 = a1[222];
  a1[222] = 0;
  if (v2)
    operator delete();
  v3 = a1[221];
  a1[221] = 0;
  if (v3)
    operator delete[]();
  return sub_100038CEC(a1);
}

void sub_10003A218(_QWORD *a1)
{
  sub_10003A1A8(a1);
  operator delete();
}

uint64_t sub_10003A23C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_10003A24C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_10003A25C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_10003A26C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_10003A27C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_10003A28C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
}

void sub_10003A29C(_QWORD **a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  (*(void (**)(uint64_t *__return_ptr))(*a1[3] + 72))(&v5);
  ((void (*)(_QWORD **, uint64_t *))(*a1)[22])(a1, &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_10003A328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10003A33C(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;
  _OWORD v10[2];

  v2 = *a2;
  v3 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v9 = v2;
  v10[0] = v3;
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)a2 + 25);
  v4 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 80))(a1, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_10003A3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10003A3D4(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;
  _OWORD v10[2];

  v2 = *a2;
  v3 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v9 = v2;
  v10[0] = v3;
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)a2 + 25);
  v4 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_10003A458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10003A46C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  int v10;
  _QWORD v11[45];
  uint64_t v12;
  uint64_t v13;

  v2 = a2[1];
  if (!v2)
    return 0;
  v4 = *a2;
  v5 = 48 * v2;
  while (1)
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, v4);
    if ((v6 & 0x80000000) != 0)
      break;
    v4 += 48;
    v5 -= 48;
    if (!v5)
      return 0;
  }
  v7 = v6;
  *(_QWORD *)&v9 = "int Backend::read(const elements_t &)";
  *((_QWORD *)&v9 + 1) = 17;
  v10 = 16;
  sub_10003D048(v11, &v9);
  sub_100005A0C(&v12, (uint64_t)"Backend: failed reading element in vector", 41);
  std::ostream::~ostream(&v12, off_100173488);
  sub_10003D1AC((uint64_t)v11);
  std::ios::~ios(&v13);
  return v7;
}

void sub_10003A548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10003D0F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003A55C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  int v10;
  _QWORD v11[45];
  uint64_t v12;
  uint64_t v13;

  v2 = a2[1];
  if (!v2)
    return 0;
  v4 = *a2;
  v5 = 48 * v2;
  while (1)
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v4);
    if ((v6 & 0x80000000) != 0)
      break;
    v4 += 48;
    v5 -= 48;
    if (!v5)
      return 0;
  }
  v7 = v6;
  *(_QWORD *)&v9 = "int Backend::write(const elements_t &)";
  *((_QWORD *)&v9 + 1) = 18;
  v10 = 16;
  sub_10003D798(v11, &v9);
  sub_100005A0C(&v12, (uint64_t)"Backend: failed writing element in vector", 41);
  std::ostream::~ostream(&v12, off_1001736A8);
  sub_10003D8FC((uint64_t)v11);
  std::ios::~ios(&v13);
  return v7;
}

void sub_10003A638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10003D840((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10003A64C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  int v6;
  _BYTE *v7;
  unint64_t result;
  _BYTE v9[40];
  _BYTE *v10;
  _BYTE *v11;
  _BYTE v12[8];
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;

  v12[0] = 0;
  v12[4] = 0;
  v13 = 0;
  v14 = sub_10011E1E0((unint64_t)v12);
  v11 = v12;
  v15 = sub_10011E2A0((unint64_t)v12);
  v16 = &v11;
  sub_10003DF88((unint64_t)v9, (uint64_t)v12);
  v10 = v11;
  *((_QWORD *)v11 + 4) = &v10;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2);
  v7 = v10;
  *(_DWORD *)v10 = v6;
  v7[4] = 1;
  sub_10003DF28((uint64_t)&v10);
  result = sub_10003DF88(a3, (uint64_t)v9);
  if (v10)
    *((_QWORD *)v10 + 4) = 0;
  return result;
}

void sub_10003A714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    *(_QWORD *)(a14 + 32) = 0;
  _Unwind_Resume(a1);
}

_QWORD *sub_10003A734(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (_QWORD *)((uint64_t (*)(_QWORD **))(*a1)[8])(a1);
  v3 = sub_100005A0C(v2, (uint64_t)"(", 1);
  v4 = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*a1[3] + 64))(a1[3], v3);
  return sub_100005A0C(v4, (uint64_t)")", 1);
}

uint64_t sub_10003A78C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 160))(*(_QWORD *)(a1 + 24));
}

void sub_10003A7A0(uint64_t a1)
{
  void *exception;
  _QWORD v3[33];

  exception = __cxa_allocate_exception(0x40uLL);
  sub_100005920((uint64_t)v3);
  sub_100005A0C(v3, (uint64_t)"Unexpected context construction by ", 35);
  sub_10011E7F0((uint64_t)v3, a1);
  sub_100012294((uint64_t)exception, (uint64_t)v3, 0x16u);
}

void sub_10003A828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void (__cdecl **a11)(std::stringbuf *__hidden this), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  void *v27;
  uint64_t v28;
  int v29;
  uint64_t v31;

  v31 = v28 + 8;
  if (a24 < 0)
    operator delete(__p);
  std::streambuf::~streambuf(v31);
  std::ios::~ios(&a27);
  if (v29)
    __cxa_free_exception(v27);
  _Unwind_Resume(a1);
}

void sub_10003A8AC(_QWORD *a1)
{
  sub_100038CEC(a1);
  operator delete();
}

uint64_t sub_10003A8D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_10003A8E0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24));
}

unint64_t sub_10003A8F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  int v6;
  _BYTE *v7;
  unint64_t result;
  _BYTE v9[40];
  _BYTE *v10;
  _BYTE *v11;
  _BYTE v12[8];
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;

  v12[0] = 0;
  v12[4] = 0;
  v13 = 0;
  v14 = sub_10011E1E0((unint64_t)v12);
  v11 = v12;
  v15 = sub_10011E2A0((unint64_t)v12);
  v16 = &v11;
  sub_10003DF88((unint64_t)v9, (uint64_t)v12);
  v10 = v11;
  *((_QWORD *)v11 + 4) = &v10;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
  v7 = v10;
  *(_DWORD *)v10 = v6;
  v7[4] = 1;
  sub_10003DF28((uint64_t)&v10);
  result = sub_10003DF88(a3, (uint64_t)v9);
  if (v10)
    *((_QWORD *)v10 + 4) = 0;
  return result;
}

void sub_10003A9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    *(_QWORD *)(a14 + 32) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_10003A9DC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD **)a1;
    do
    {
      v4 = v3[6];
      if (v4)
        *(_QWORD *)(v4 + 32) = 0;
      --v2;
      v3 = (_QWORD *)(sub_100012168((uint64_t)v3) + 104);
    }
    while (v2);
  }
  if (*(_QWORD *)(a1 + 16) && a1 + 24 != *(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_10003AA40(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172750);
  sub_10003AC34(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10003AA78(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100172750);
  sub_10003AC34(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003AAB8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100172750);
  sub_10003AC34(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10003AB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10003AB40(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10003AB8C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172750);
  sub_10003AC34(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10003ABDC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100172750);
  sub_10003AC34(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10003AC34(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100172820;
  sub_10003ACD0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10003ACD0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10003AE48((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10003ADF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10003AE24(uint64_t a1)
{
  sub_10003AC34(a1);
  operator delete();
}

int *sub_10003AE48(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 49;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 49;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10003B02C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172970);
  sub_10003B220(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10003B064(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100172970);
  sub_10003B220(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003B0A4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100172970);
  sub_10003B220(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10003B0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10003B12C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10003B178(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172970);
  sub_10003B220(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10003B1C8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100172970);
  sub_10003B220(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10003B220(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100172A40;
  sub_10003B2BC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10003B2BC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10003B434((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10003B3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10003B410(uint64_t a1)
{
  sub_10003B220(a1);
  operator delete();
}

int *sub_10003B434(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 55;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 55;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10003B618(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172B90);
  sub_10003B80C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10003B650(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100172B90);
  sub_10003B80C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003B690(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100172B90);
  sub_10003B80C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10003B6E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10003B718(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10003B764(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172B90);
  sub_10003B80C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10003B7B4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100172B90);
  sub_10003B80C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10003B80C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100172C60;
  sub_10003B8A8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10003B8A8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10003BA20((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10003B9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10003B9FC(uint64_t a1)
{
  sub_10003B80C(a1);
  operator delete();
}

int *sub_10003BA20(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 94;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 94;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_DWORD *sub_10003BC04(_DWORD *a1, int *a2)
{
  __int128 v5;
  int v6;
  _QWORD v7[45];
  uint64_t v8;
  uint64_t v9;
  int v10;

  *a1 = dword_100140814[*a2];
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v5 = "StandardCompressedBackend::pimpl::pimpl(algo_t)";
    *((_QWORD *)&v5 + 1) = 39;
    v6 = 2;
    sub_10003BD20(v7, &v5);
    sub_100005A0C(&v8, (uint64_t)"Using compression ", 18);
    v10 = *a2;
    sub_100039A68(&v8, &v10);
    *(_DWORD *)((char *)&v8 + *(_QWORD *)(v8 - 24) + 8) = *(_DWORD *)((_BYTE *)&v8 + *(_QWORD *)(v8 - 24) + 8) & 0xFFFFFFB5 | 8;
    sub_100005A0C(&v8, (uint64_t)" constant ", 10);
    std::ostream::operator<<(&v8, *a1);
    std::ostream::~ostream(&v8, off_100172E28);
    sub_10003BE84((uint64_t)v7);
    std::ios::~ios(&v9);
  }
  return a1;
}

void sub_10003BD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10003BDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003BD20(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10003BE08((uint64_t)a1, a2);
  *a1 = off_100172D60;
  a1[45] = &off_100172E60;
  a1[46] = &off_100172E88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100172D60;
  a1[45] = off_100172DE8;
  a1[46] = off_100172E10;
  return a1;
}

void sub_10003BDA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10003BE84(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003BDC8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100172E28);
  sub_10003BE84(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10003BE08(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100172EF8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10003BE70(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003BE84(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100172EF8;
  sub_10003C13C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10003BF20(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100172E28);
  sub_10003BE84(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10003BF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10003BFA8(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_10003BFF4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172E28);
  sub_10003BE84(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10003C02C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172E28);
  sub_10003BE84(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_10003C07C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100172E28);
  sub_10003BE84(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003C0BC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100172E28);
  sub_10003BE84(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10003C118(uint64_t a1)
{
  sub_10003BE84(a1);
  operator delete();
}

uint64_t sub_10003C13C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10003C28C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10003C264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10003C28C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 175;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 175;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10003C470(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173048);
  sub_10003C664(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10003C4A8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100173048);
  sub_10003C664(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003C4E8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100173048);
  sub_10003C664(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10003C53C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10003C570(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10003C5BC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173048);
  sub_10003C664(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10003C60C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100173048);
  sub_10003C664(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10003C664(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100173118;
  sub_10003C700(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10003C700(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10003C878((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10003C828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10003C854(uint64_t a1)
{
  sub_10003C664(a1);
  operator delete();
}

int *sub_10003C878(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 242;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 242;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10003CA5C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173268);
  sub_10003CC50(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10003CA94(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100173268);
  sub_10003CC50(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003CAD4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100173268);
  sub_10003CC50(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10003CB28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10003CB5C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10003CBA8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173268);
  sub_10003CC50(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10003CBF8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100173268);
  sub_10003CC50(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10003CC50(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100173338;
  sub_10003CCEC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10003CCEC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10003CE64((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10003CE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10003CE40(uint64_t a1)
{
  sub_10003CC50(a1);
  operator delete();
}

int *sub_10003CE64(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 265;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 265;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_10003D048(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10003D130((uint64_t)a1, a2);
  *a1 = off_1001733C0;
  a1[45] = &off_1001734C0;
  a1[46] = &off_1001734E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001733C0;
  a1[45] = off_100173448;
  a1[46] = off_100173470;
  return a1;
}

void sub_10003D0CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10003D1AC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D0F0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100173488);
  sub_10003D1AC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10003D130(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100173558;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10003D198(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D1AC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100173558;
  sub_10003D464(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10003D248(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100173488);
  sub_10003D1AC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10003D29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10003D2D0(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_10003D31C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173488);
  sub_10003D1AC(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10003D354(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173488);
  sub_10003D1AC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_10003D3A4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100173488);
  sub_10003D1AC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003D3E4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100173488);
  sub_10003D1AC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10003D440(uint64_t a1)
{
  sub_10003D1AC(a1);
  operator delete();
}

uint64_t sub_10003D464(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10003D5B4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10003D58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10003D5B4(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 124;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 124;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_10003D798(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10003D880((uint64_t)a1, a2);
  *a1 = off_1001735E0;
  a1[45] = &off_1001736E0;
  a1[46] = &off_100173708;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001735E0;
  a1[45] = off_100173668;
  a1[46] = off_100173690;
  return a1;
}

void sub_10003D81C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10003D8FC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D840(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001736A8);
  sub_10003D8FC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10003D880(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100173778;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10003D8E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D8FC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100173778;
  sub_10003DBB4(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10003D998(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001736A8);
  sub_10003D8FC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10003D9EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10003DA20(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_10003DA6C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001736A8);
  sub_10003D8FC(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10003DAA4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001736A8);
  sub_10003D8FC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_10003DAF4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001736A8);
  sub_10003D8FC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003DB34(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001736A8);
  sub_10003D8FC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10003DB90(uint64_t a1)
{
  sub_10003D8FC(a1);
  operator delete();
}

uint64_t sub_10003DBB4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10003DD04((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10003DCDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10003DD04(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 135;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 135;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void sub_10003DEE8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::mutex::unlock(*(std::mutex **)a1);
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    sub_10003DF28();
  }
}

void sub_10003DF28(uint64_t a1)
{
  std::mutex *v2;

  if (*(_QWORD *)(*(_QWORD *)a1 + 8))
  {
    v2 = *(std::mutex **)(*(_QWORD *)a1 + 16);
    std::mutex::lock(v2);
    if (atomic_load((unint64_t *)(*(_QWORD *)a1 + 8)))
      std::condition_variable::notify_all(*(std::condition_variable **)(*(_QWORD *)a1 + 24));
    std::mutex::unlock(v2);
  }
}

unint64_t sub_10003DF88(unint64_t a1, uint64_t a2)
{
  unint64_t *v4;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = sub_10011E1E0(a1);
  *(_QWORD *)(a1 + 24) = sub_10011E2A0(a1);
  if (*(_BYTE *)(a2 + 4))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_BYTE *)(a1 + 4) = 1;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v4 = *(unint64_t **)(a1 + 32);
  if (v4)
    *v4 = a1;
  return a1;
}

void sub_10003DFFC(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = operator new(0x6F8uLL);
  sub_10003E064(v5, a2, a3);
}

void sub_10003E050(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10003E064(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001737F8;
  v3 = *a3;
  v4 = 4;
  sub_100038B24(a1 + 3, a2, &v4, v3);
}

void sub_10003E0BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003E0D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001737F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003E0E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001737F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003E110(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_10003E120(uint64_t a1, _QWORD *a2, int *a3, uint64_t *a4)
{
  _QWORD *v7;

  v7 = operator new(0x710uLL);
  sub_10003E198(v7, a2, a3, a4);
}

void sub_10003E184(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10003E198(_QWORD *a1, _QWORD *a2, int *a3, uint64_t *a4)
{
  int v4;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100173848;
  v4 = *a3;
  sub_100039AAC(a1 + 3, a2, &v4, *a4);
}

void sub_10003E1E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003E1F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100173848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003E208(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100173848;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003E238(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10003E248(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100172820;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10003E2B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003E2C4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100172A40;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10003E32C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_10003E340(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v10 = *a1;
  v11 = sub_10003E3F0((uint64_t)a1, a3);
  if (v11 >= 0x13B13B13B13B13CLL)
    sub_1000158AC("get_next_capacity, allocator's max size reached");
  v12 = v11;
  v13 = operator new(104 * v11);
  sub_10003E470((uint64_t)a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = (char *)a2 + *a1 - v10;
}

unint64_t sub_10003E3F0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = 0x13B13B13B13B13BLL;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0x13B13B13B13B13BLL - v4 < a2 - v4 + v3)
    sub_1000158AC("get_next_capacity, allocator's max size reached");
  v5 = v4 >> 61;
  v6 = 8 * v4;
  if (v5 > 4)
    v7 = -1;
  else
    v7 = v6;
  v8 = v6 / 5;
  if (v5)
    v8 = v7;
  v9 = v3 + a2;
  if (v8 < 0x13B13B13B13B13BLL)
    v2 = v8;
  if (v9 <= v2)
    return v2;
  else
    return v9;
}

void sub_10003E470(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;

  v10 = *(_QWORD *)a1;
  sub_10003E544(a1, *(_QWORD **)a1, a4, (_QWORD *)(*(_QWORD *)a1 + 104 * *(_QWORD *)(a1 + 8)), a2, a5, a6);
  if (v10)
  {
    for (i = *(_QWORD *)(a1 + 8); i; v10 += 104)
    {
      v12 = *(_QWORD *)(v10 + 48);
      if (v12)
        *(_QWORD *)(v12 + 32) = 0;
      --i;
      sub_100012168(v10);
    }
    if (a1 + 24 != *(_QWORD *)a1)
      operator delete(*(void **)a1);
  }
  v13 = *(_QWORD *)(a1 + 8) + a5;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = a3;
}

void sub_10003E520(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    if ((void *)(v2 + 24) != v1)
      operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003E544(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  __int128 v13;

  v12 = sub_10003E654(a1, a2, a3, a5);
  *(_OWORD *)v12 = *(_OWORD *)a7;
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  v13 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(v12 + 25) = *(_OWORD *)(a7 + 25);
  *(_OWORD *)(v12 + 16) = v13;
  *(_QWORD *)(v12 + 48) = *(_QWORD *)(a7 + 48);
  *(_QWORD *)(a7 + 48) = 0;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 32) = v12 + 48;
  sub_10003DF88(v12 + 56, a7 + 56);
  *(_QWORD *)(v12 + 96) = *(_QWORD *)(a7 + 96);
  return sub_10003E654(a1, a3, a4, v12 + 104 * a6);
}

void sub_10003E600(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (*(_QWORD *)v3)
    *(_QWORD *)(*(_QWORD *)v3 + 32) = 0;
  sub_100012168(v2);
  for (; v1 != v2; v1 += 104)
  {
    v5 = *(_QWORD *)(v1 + 48);
    if (v5)
      *(_QWORD *)(v5 + 32) = 0;
    sub_100012168(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10003E654(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = &a2[v7];
      v9 = a4 + v7 * 8;
      *(_OWORD *)v9 = *(_OWORD *)&a2[v7];
      *v8 = 0;
      v8[1] = 0;
      v10 = *(_OWORD *)&a2[v7 + 2];
      *(_OWORD *)(v9 + 25) = *(_OWORD *)((char *)&a2[v7 + 3] + 1);
      *(_OWORD *)(v9 + 16) = v10;
      *(_QWORD *)(a4 + v7 * 8 + 48) = a2[v7 + 6];
      v8[6] = 0;
      *(_QWORD *)(*(_QWORD *)(a4 + v7 * 8 + 48) + 32) = a4 + v7 * 8 + 48;
      sub_10003DF88(a4 + v7 * 8 + 56, (uint64_t)&a2[v7 + 7]);
      *(_QWORD *)(v9 + 96) = a2[v7 + 12];
      v7 += 13;
    }
    while (v8 + 13 != a3);
    a4 += v7 * 8;
  }
  return a4;
}

void sub_10003E6FC(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 + 48);
  if (v4)
    *(_QWORD *)(v4 + 32) = 0;
  sub_100123734(v3, a1, a2, v2);
  __cxa_rethrow();
}

void sub_10003E724(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_10003E738(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100172C60;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10003E7A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003E7B4(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = result[1];
  if (v2)
  {
    result = (_QWORD *)*result;
    do
    {
      v3 = result[6];
      if (v3)
        *(_QWORD *)(v3 + 32) = 0;
      --v2;
      result = (_QWORD *)(sub_100012168((uint64_t)result) + 104);
    }
    while (v2);
  }
  v1[1] = 0;
  return result;
}

void sub_10003E7FC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;

  v5 = operator new(0x710uLL);
  sub_10003E864(v5, a2, a3);
}

void sub_10003E850(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10003E864(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100173848;
  sub_100039C08(a1 + 3, a2, a3);
}

void sub_10003E898(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003E8AC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100173118;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10003E914(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003E928(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100173338;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10003E990(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_10003E9A4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;

  v5 = operator new(0x6F8uLL);
  sub_10003EA0C(v5, a2, a3);
}

void sub_10003E9F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10003EA0C(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001737F8;
  sub_100038C4C(a1 + 3, a2, a3);
}

void sub_10003EA4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

unint64_t *sub_10003EA60(unint64_t *result)
{
  unint64_t v1;

  do
    v1 = __ldaxr(result);
  while (__stlxr(v1 + 1, result));
  return result;
}

void sub_10003EA74(uint64_t a1)
{
  std::mutex *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  do
  {
    v3 = __ldaxr((unint64_t *)a1);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unint64_t *)a1));
  if (!v4 && *(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 72) = 0;
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 80));
  }
  std::mutex::unlock(v2);
}

uint64_t sub_10003EAC8(uint64_t result)
{
  unint64_t v1;

  do
    v1 = __ldaxr((unint64_t *)result);
  while (__stlxr(v1 + 1, (unint64_t *)result));
  *(_BYTE *)(result + 72) = 1;
  return result;
}

void sub_10003EAE4(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  std::unique_lock<std::mutex> v4;

  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 8);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 8));
  do
  {
    v2 = __ldaxr((unint64_t *)a1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, (unint64_t *)a1));
  if (v3)
  {
    while (*(_BYTE *)(a1 + 72))
      std::condition_variable::wait((std::condition_variable *)(a1 + 80), &v4);
  }
  else
  {
    *(_BYTE *)(a1 + 72) = 0;
  }
  if (v4.__owns_)
    std::mutex::unlock(v4.__m_);
}

uint64_t sub_10003EB68(uint64_t a1, unint64_t a2)
{
  char v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  __int128 v13;
  int v14;
  _QWORD v15[45];
  uint64_t v16;
  _BYTE v17[152];
  std::unique_lock<std::mutex> __lk;
  unint64_t v19;

  v19 = a2;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  LOBYTE(v15[0]) = 0;
  sub_100040B74((uint64_t **)a1, &v19, &v19, v15);
  v4 = v3;
  if ((v3 & 1) == 0)
  {
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v13 = "sparse_bundles::open_bands_t::insert(uint64_t)";
      *((_QWORD *)&v13 + 1) = 36;
      v14 = 2;
      sub_10003EE20(v15, &v13);
      sub_100005A0C(&v16, (uint64_t)"Band ", 5);
      *(_DWORD *)&v17[*(_QWORD *)(v16 - 24)] = *(_DWORD *)&v17[*(_QWORD *)(v16 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<(&v16, v19);
      *(_DWORD *)&v17[*(_QWORD *)(v16 - 24)] = *(_DWORD *)&v17[*(_QWORD *)(v16 - 24)] & 0xFFFFFFB5 | 2;
      sub_100005A0C(&v16, (uint64_t)" was opened in the background, waiting for it to become available", 65);
      std::ostream::~ostream(&v16, off_100173990);
      sub_10003FAB4((uint64_t)v15);
      std::ios::~ios(v17);
    }
    v7 = *(_QWORD **)(a1 + 8);
    v6 = a1 + 8;
    v5 = v7;
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)v6;
        do
        {
          v9 = v5[4];
          v10 = v9 >= v19;
          if (v9 >= v19)
            v11 = v5;
          else
            v11 = v5 + 1;
          if (v10)
            v8 = v5;
          v5 = (_QWORD *)*v11;
        }
        while (*v11);
        if (v8 == (_QWORD *)v6)
          break;
        if (v19 < v8[4])
          break;
        if (*((_BYTE *)v8 + 40))
          break;
        std::condition_variable::wait((std::condition_variable *)(v6 + 80), &__lk);
        v5 = *(_QWORD **)v6;
      }
      while (*(_QWORD *)v6);
    }
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v13 = "sparse_bundles::open_bands_t::insert(uint64_t)";
      *((_QWORD *)&v13 + 1) = 36;
      v14 = 2;
      sub_10003EF08(v15, &v13);
      sub_100005A0C(&v16, (uint64_t)"Band ", 5);
      *(_DWORD *)&v17[*(_QWORD *)(v16 - 24)] = *(_DWORD *)&v17[*(_QWORD *)(v16 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<(&v16, v19);
      *(_DWORD *)&v17[*(_QWORD *)(v16 - 24)] = *(_DWORD *)&v17[*(_QWORD *)(v16 - 24)] & 0xFFFFFFB5 | 2;
      sub_100005A0C(&v16, (uint64_t)" is now available", 17);
      std::ostream::~ostream(&v16, off_100173BB0);
      sub_1000400A0((uint64_t)v15);
      std::ios::~ios(v17);
    }
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  return v4 & 1;
}

void sub_10003EDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  if (*(_BYTE *)(v13 - 64))
    std::mutex::unlock(*(std::mutex **)(v13 - 72));
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10003EE20(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100040C38((uint64_t)a1, a2);
  *a1 = off_1001738C8;
  a1[45] = &off_1001739C8;
  a1[46] = &off_1001739F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001738C8;
  a1[45] = off_100173950;
  a1[46] = off_100173978;
  return a1;
}

void sub_10003EEA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10003FAB4(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003EEC8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100173990);
  sub_10003FAB4(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_10003EF08(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100040CB4((uint64_t)a1, a2);
  *a1 = off_100173AE8;
  a1[45] = &off_100173BE8;
  a1[46] = &off_100173C10;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100173AE8;
  a1[45] = off_100173B70;
  a1[46] = off_100173B98;
  return a1;
}

void sub_10003EF8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000400A0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003EFB0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100173BB0);
  sub_1000400A0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_10003EFF0(uint64_t a1, unint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = *(_QWORD **)(a1 + 8);
  if (!v5)
    goto LABEL_12;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = v5[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v5;
    else
      v9 = v5 + 1;
    if (v8)
      v6 = v5;
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == (_QWORD *)(a1 + 8) || v6[4] > a2)
LABEL_12:
    v6 = (_QWORD *)(a1 + 8);
  *((_BYTE *)v6 + 40) = 1;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_10003F07C(uint64_t a1, unint64_t a2)
{
  std::mutex *v3;
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v9 = a2;
  v3 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  sub_100040D30(a1, &v9);
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v4 = "sparse_bundles::open_bands_t::remove(uint64_t)";
    *((_QWORD *)&v4 + 1) = 36;
    v5 = 2;
    sub_10003F1CC(v6, &v4);
    sub_100005A0C(&v7, (uint64_t)"Band ", 5);
    *(_DWORD *)((char *)&v7 + *(_QWORD *)(v7 - 24) + 8) = *(_DWORD *)((_BYTE *)&v7 + *(_QWORD *)(v7 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v7, v9);
    *(_DWORD *)((char *)&v7 + *(_QWORD *)(v7 - 24) + 8) = *(_DWORD *)((_BYTE *)&v7 + *(_QWORD *)(v7 - 24) + 8) & 0xFFFFFFB5 | 2;
    sub_100005A0C(&v7, (uint64_t)" is closed, notifying waiters", 29);
    std::ostream::~ostream(&v7, off_100173DD0);
    sub_10004068C((uint64_t)v6);
    std::ios::~ios(&v8);
  }
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v3);
}

void sub_10003F1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::mutex *v13;

  std::mutex::unlock(v13);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003F1CC(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10004119C((uint64_t)a1, a2);
  *a1 = off_100173D08;
  a1[45] = &off_100173E08;
  a1[46] = &off_100173E30;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100173D08;
  a1[45] = off_100173D90;
  a1[46] = off_100173DB8;
  return a1;
}

void sub_10003F250(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10004068C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003F274(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100173DD0);
  sub_10004068C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10003F2B4(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  void *__p[2];
  char v6;
  int v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = 0;
  sub_100041218(&v7, __p);
  v3 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_QWORD *)(a1 + 136) = 1018212795;
  *(_OWORD *)(a1 + 56) = xmmword_100140A90;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 113) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 850045863;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 1018212795;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_100005870(__p, "com.apple.diskimages.band_management");
  sub_10003885C();
  sub_1000418E8((void *)(a1 + 328));
  if (v6 < 0)
    operator delete(__p[0]);
  sub_100041BCC(a1 + 328, 0, a1 + 392);
  sub_1000418EC(a1 + 328, 3);
  return a1;
}

void sub_10003F3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  std::condition_variable *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_100041B4C(v18);
  sub_10003F498(v17);
  v21 = *(_QWORD *)(v14 + 320);
  *(_QWORD *)(v14 + 320) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  sub_10003F4E0(v15);
  std::condition_variable::~condition_variable(v16);
  std::mutex::~mutex((std::mutex *)(v15 - 120));
  sub_100012168(v14 + 24);
  v22 = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v14 + 16) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  v23 = *v19;
  *v19 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_10003F498(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_10001A2E4(&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_10003F4E0(uint64_t a1)
{
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  sub_100027D5C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_10003F520(uint64_t a1, uint64_t a2)
{
  char *exception;
  uint64_t *v4;
  uint64_t v5;
  const std::error_category *v6;
  uint64_t v7;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __n128 (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  void *__p;
  uint64_t v15;
  uint64_t v16;
  int v17;
  dispatch_group_t v18[18];

  v9 = 0;
  v10 = &v9;
  v11 = 0x4802000000;
  v12 = sub_10003F6C8;
  v13 = sub_10003F6EC;
  v15 = 0;
  v16 = 0;
  __p = 0;
  v17 = 0;
  sub_100041BCC(a1 + 328, 0, (uint64_t)v18);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  v8[2] = sub_10003F700;
  v8[3] = &unk_100173890;
  v8[4] = a2;
  v8[5] = &v9;
  sub_1000419EC(v18, v8);
  sub_100041B4C(v18);
  if (*((_DWORD *)v10 + 16))
  {
    exception = (char *)__cxa_allocate_exception(0x40uLL);
    v4 = v10;
    v5 = *((unsigned int *)v10 + 16);
    *(_QWORD *)exception = &off_1001924F8;
    v6 = std::generic_category();
    *((_QWORD *)exception + 1) = v5;
    *((_QWORD *)exception + 2) = v6;
    v7 = v4[7];
    *(_OWORD *)(exception + 24) = *(_OWORD *)(v4 + 5);
    *((_QWORD *)exception + 5) = v7;
    v4[6] = 0;
    v4[7] = 0;
    v4[5] = 0;
    exception[48] = 1;
  }
  _Block_object_dispose(&v9, 8);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
}

void sub_10003F68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a15, 8);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_10003F6C8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

void sub_10003F6EC(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

uint64_t sub_10003F700(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10003F7D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  sub_100005920((uint64_t)&v5);
  *(_DWORD *)((char *)v6 + *(_QWORD *)(v5 - 24)) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(v5 - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<(&v5, a1);
  sub_100005598((uint64_t)v6, a2);
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf(v6);
  return std::ios::~ios(&v8);
}

void sub_10003F8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10000FE34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10003F8C0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173990);
  sub_10003FAB4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10003F8F8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100173990);
  sub_10003FAB4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003F938(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100173990);
  sub_10003FAB4(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10003F98C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10003F9C0(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10003FA0C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173990);
  sub_10003FAB4(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10003FA5C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100173990);
  sub_10003FAB4(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10003FAB4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100173A60;
  sub_10003FB50(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10003FB50(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10003FCC8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10003FC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10003FCA4(uint64_t a1)
{
  sub_10003FAB4(a1);
  operator delete();
}

int *sub_10003FCC8(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 72;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 72;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10003FEAC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173BB0);
  sub_1000400A0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10003FEE4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100173BB0);
  sub_1000400A0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10003FF24(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100173BB0);
  sub_1000400A0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10003FF78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10003FFAC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10003FFF8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173BB0);
  sub_1000400A0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100040048(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100173BB0);
  sub_1000400A0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000400A0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100173C80;
  sub_10004013C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10004013C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000402B4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100040264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100040290(uint64_t a1)
{
  sub_1000400A0(a1);
  operator delete();
}

int *sub_1000402B4(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 79;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 79;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100040498(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173DD0);
  sub_10004068C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000404D0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100173DD0);
  sub_10004068C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100040510(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100173DD0);
  sub_10004068C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100040564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100040598(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000405E4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173DD0);
  sub_10004068C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100040634(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100173DD0);
  sub_10004068C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10004068C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100173EA0;
  sub_100040728(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100040728(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000408A0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100040850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10004087C(uint64_t a1)
{
  sub_10004068C(a1);
  operator delete();
}

int *sub_1000408A0(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 96;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 96;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

std::string *sub_100040A84(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  std::string::size_type v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = __dst->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = __dst;
    if (__len > 0x16)
    {
      size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0, size, __len, __src);
      return __dst;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((_BYTE *)&__dst->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    __dst->__r_.__value_.__l.__size_ = __len;
  else
    *((_BYTE *)&__dst->__r_.__value_.__s + 23) = __len & 0x7F;
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

std::string *sub_100040B40(std::string *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_100040A84(a1, __s, v4);
}

uint64_t **sub_100040B74(uint64_t **a1, unint64_t *a2, _QWORD *a3, _BYTE *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  _QWORD *v12;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = v7[4];
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = operator new(0x30uLL);
    v12[4] = *a3;
    *((_BYTE *)v12 + 40) = *a4;
    sub_1000284A8(a1, (uint64_t)v10, v8, v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t sub_100040C38(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100173A60;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100040CA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100040CB4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100173C80;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100040D1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100040D30(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  sub_100040DA8((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t *sub_100040DA8(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_100040E18(v6, a2);
  return v3;
}

uint64_t *sub_100040E18(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t sub_10004119C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100173EA0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100041204(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_100041218(int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x48uLL);
  sub_100041278(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1000196D4((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_100041264(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100041278(_QWORD *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100173F20;
  v3 = *a2;
  v4 = sub_100120770();
  v6 = v5;
  sub_10011E7DC(a1 + 3);
  a1[3] = off_100173F70;
  a1[6] = v3;
  a1[7] = v4;
  a1[8] = v6;
  return a1;
}

void sub_1000412DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000412F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100173F20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100041300(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100173F20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100041330(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_100041340(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_10004136C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  operator delete();
}

uint64_t sub_1000413A8()
{
  return 0;
}

uint64_t sub_1000413B0()
{
  return 4294967251;
}

uint64_t sub_1000413B8()
{
  return 0;
}

uint64_t sub_1000413C0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_1000413C8()
{
  return 1;
}

uint64_t sub_1000413D0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 24) = a2;
  return 0;
}

_QWORD *sub_1000413DC(uint64_t a1, _QWORD *a2)
{
  return sub_100005A0C(a2, (uint64_t)"BackendNull", 11);
}

_QWORD *sub_1000413F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10001A1F4(a2, (_QWORD *)(a1 + 8));
}

uint64_t sub_1000413FC(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t sub_100041404(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t sub_10004140C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t sub_100041418(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_100041424(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_100041440 + 4 * byte_100140C08[a2]))();
}

_QWORD *sub_100041440(_QWORD *a1)
{
  return sub_100005A0C(a1, (uint64_t)"read", 4);
}

_QWORD *sub_100041450(_QWORD *a1)
{
  return sub_100005A0C(a1, (uint64_t)"write", 5);
}

_QWORD *sub_100041498(_QWORD *a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  char v20;

  v4 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
  v5 = sub_100005A0C(a1, (uint64_t)"device_command: ", 16);
  *(_DWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 8) & 0xFFFFFFB5 | 8;
  v20 = 48;
  v6 = sub_100017554(v5, &v20);
  v7 = *v6;
  *(uint64_t *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 24) = 2;
  *(_DWORD *)((char *)v6 + *(_QWORD *)(v7 - 24) + 8) |= 0x200u;
  v8 = sub_100005A0C(v6, (uint64_t)"[start: ", 8);
  v9 = (uint64_t *)std::ostream::operator<<(v8, *(_QWORD *)a2);
  v10 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(uint64_t *)((char *)v9 + *(_QWORD *)(v10 - 24) + 24) = 0;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(v10 - 24) + 8) &= ~0x200u;
  v11 = sub_100005A0C(v9, (uint64_t)" size: ", 7);
  v12 = (_QWORD *)std::ostream::operator<<(v11, *(_QWORD *)(a2 + 8));
  v13 = sub_100005A0C(v12, (uint64_t)" op_code: ", 10);
  v14 = (_QWORD *)sub_100041424((uint64_t)v13, *(unsigned __int8 *)(a2 + 16));
  v15 = sub_100005A0C(v14, (uint64_t)" num_buffers: ", 14);
  v16 = (_QWORD *)std::ostream::operator<<(v15, *(unsigned __int16 *)(a2 + 18));
  v17 = sub_100005A0C(v16, (uint64_t)" buffer_size: ", 14);
  v18 = (_QWORD *)std::ostream::operator<<(v17, *(unsigned int *)(a2 + 20));
  sub_100005A0C(v18, (uint64_t)"]", 1);
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v4;
  return a1;
}

char *sub_100041618(char *__dst, __int128 *a2, unint64_t a3)
{
  __int128 v5;
  char *v6;
  char *v7;
  NSObject *v9;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100041DD0(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  *(_OWORD *)(__dst + 24) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  __dst[56] = a3 != 0;
  if (a3)
  {
    sub_100041754((_QWORD *)__dst + 3, a3);
    do
    {
      v6 = __dst;
      if (__dst[23] < 0)
        v6 = *(char **)__dst;
      sub_100100C14((int)&v9, v6);
      sub_1000417E4((_QWORD *)__dst + 3, &v9);
      sub_100100B68(&v9);
      --a3;
    }
    while (a3);
  }
  else
  {
    v7 = __dst;
    if (__dst[23] < 0)
      v7 = *(char **)__dst;
    sub_100100C14((int)&v9, v7);
    sub_1000417E4((_QWORD *)__dst + 3, &v9);
    sub_100100B68(&v9);
  }
  return __dst;
}

void sub_100041710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_100100B68((NSObject **)va);
  sub_10001A2E4((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100041754(_QWORD *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      sub_100017E44();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1000193CC(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 8 * v6;
    sub_100019348(a1, v7);
    return sub_100019400((uint64_t)v7);
  }
  return result;
}

void sub_1000417D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100019400((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1000417E4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_100017E44();
    v10 = v5 - *a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v13 = (char *)sub_1000193CC(v4, v12);
    else
      v13 = 0;
    v15 = v13;
    v16 = &v13[8 * v9];
    v18 = &v13[8 * v12];
    sub_100100C18(v16, a2);
    v17 = v16 + 8;
    sub_100019348(a1, &v15);
    v8 = a1[1];
    sub_100019400((uint64_t)&v15);
  }
  else
  {
    sub_100100C18(*(_QWORD **)(v4 - 8), a2);
    v8 = v7 + 8;
    a1[1] = v7 + 8;
  }
  a1[1] = v8;
  return v8 - 8;
}

void sub_1000418D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100019400((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000418EC(uint64_t result, int a2)
{
  dispatch_object_t *v2;
  dispatch_object_t *i;

  v2 = *(dispatch_object_t **)(result + 24);
  for (i = *(dispatch_object_t **)(result + 32); v2 != i; ++v2)
    result = sub_100100CC8(v2, a2);
  return result;
}

void sub_100041934(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 owns;
  std::unique_lock<std::mutex> v5;

  v5.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 48);
  v5.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 48));
  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2 - 1;
LABEL_5:
    std::mutex::unlock(v5.__m_);
    return;
  }
  do
  {
    std::condition_variable::wait((std::condition_variable *)a1, &v5);
    v3 = *(_QWORD *)(a1 + 112);
  }
  while (!v3);
  owns = v5.__owns_;
  *(_QWORD *)(a1 + 112) = v3 - 1;
  if (owns)
    goto LABEL_5;
}

void sub_1000419AC(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  ++*(_QWORD *)(a1 + 112);
  std::condition_variable::notify_one((std::condition_variable *)a1);
  std::mutex::unlock(v2);
}

void sub_1000419EC(dispatch_group_t *a1, void *a2)
{
  dispatch_group_t v4;
  unint64_t *v5;
  unint64_t v6;
  Class isa;
  NSObject *v8;
  unint64_t v9;
  dispatch_group_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[6];

  if (*((_BYTE *)a1 + 136))
  {
    sub_100041934((uint64_t)(a1 + 2));
    v4 = *a1;
    v5 = (unint64_t *)&(*a1)[6];
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v8 = v4 + 3;
    isa = v4[3].isa;
    v9 = v6 % ((v8[1].isa - isa) >> 3);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 0x40000000;
    v13[2] = sub_100041AD8;
    v13[3] = &unk_100174040;
    v13[4] = a2;
    v13[5] = a1;
    sub_100100C30((dispatch_queue_t *)isa + v9, a1 + 1, v13);
  }
  else
  {
    v10 = *a1;
    v11 = (unint64_t *)&(*a1)[6];
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    sub_100100C30((dispatch_queue_t *)v10[3].isa + v12 % ((v10[4].isa - v10[3].isa) >> 3), a1 + 1, a2);
  }
}

void sub_100041AD8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  sub_1000419AC(v1 + 16);
}

intptr_t sub_100041B00(uint64_t a1, dispatch_time_t a2)
{
  return sub_100100B94((dispatch_group_t *)(a1 + 8), a2);
}

uint64_t sub_100041B08(uint64_t a1)
{
  NSObject **v2;

  v2 = (NSObject **)(a1 + 8);
  sub_100100B94((dispatch_group_t *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL);
  sub_100041E5C(a1 + 16);
  sub_100100B68(v2);
  return a1;
}

uint64_t sub_100041B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = a2;
  sub_100100B40((dispatch_group_t *)(a1 + 8));
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (a3)
  {
    sub_100041E94(a1 + 16);
    *(_QWORD *)(a1 + 16) = 1018212795;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 850045863;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = a3;
    *(_BYTE *)(a1 + 136) = 1;
  }
  return a1;
}

uint64_t sub_100041BCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100041B50(a3, a1, a2);
}

uint64_t sub_100041BDC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100041BF0(a4, a1, a2, a3);
}

uint64_t sub_100041BF0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[7];

  *(_QWORD *)a1 = a2;
  v6 = a2 + 6;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *(_QWORD *)(a1 + 8) = a2[3] + 8 * (v7 % ((uint64_t)(a2[4] - a2[3]) >> 3));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  v9[2] = sub_100041CD4;
  v9[3] = &unk_100174068;
  v9[4] = a3;
  v9[5] = a1;
  v9[6] = a4;
  sub_100101298((dispatch_block_t *)(a1 + 16), v9);
  if (*(_QWORD *)(a1 + 16) && *(_BYTE *)(*(_QWORD *)a1 + 56))
    sub_100100C40(*(dispatch_queue_t **)(a1 + 8), (dispatch_block_t *)(a1 + 16), a4);
  return a1;
}

void sub_100041CC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100101310(v1);
  _Unwind_Resume(a1);
}

void sub_100041CD4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[5];
  (*(void (**)(void))(a1[4] + 16))();
  sub_100100C40(*(dispatch_queue_t **)(v2 + 8), (dispatch_block_t *)(v2 + 16), a1[6]);
}

uint64_t sub_100041D08(uint64_t a1)
{
  sub_100041D38(a1);
  sub_100101310(a1 + 16);
  return a1;
}

void sub_100041D38(uint64_t a1)
{
  dispatch_queue_t *v2;
  _QWORD v3[5];

  if (*(_QWORD *)(a1 + 16))
  {
    if (*(_BYTE *)(*(_QWORD *)a1 + 56))
    {
      v2 = *(dispatch_queue_t **)(a1 + 8);
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 0x40000000;
      v3[2] = sub_100041DC0;
      v3[3] = &unk_100174088;
      v3[4] = a1;
      sub_100100C28(v2, v3);
      sub_100100CA0(*(dispatch_queue_t **)(a1 + 8), &stru_1001740C8);
    }
  }
}

void sub_100041DC0(uint64_t a1)
{
  sub_1001012C4((void **)(*(_QWORD *)(a1 + 32) + 16));
}

void *sub_100041DD0(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_100005680();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_100041E5C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 48));
    std::condition_variable::~condition_variable((std::condition_variable *)a1);
  }
  return a1;
}

void sub_100041E94(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 48));
    std::condition_variable::~condition_variable((std::condition_variable *)a1);
    *(_BYTE *)(a1 + 120) = 0;
  }
}

void sub_100041FB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100042068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100042350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000426D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_100042980(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100042AF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100042C44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100042D98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100042ED0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_100042F4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100042F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

#error "100043738: call analysis failed (funcsize=223)"

void sub_100043C0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000441B8(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v10;
  void *v11;

  v7 = v5;

  if (a2 == 1)
  {
    v10 = objc_msgSend(objc_begin_catch(a1), "reason");
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    objc_claimAutoreleasedReturnValue(+[DIError nilWithEnumValue:verboseInfo:error:](DIError, "nilWithEnumValue:verboseInfo:error:", 150, v11, v2));

    objc_end_catch();
    JUMPOUT(0x100044170);
  }

  _Unwind_Resume(a1);
}

void sub_100044400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10004463C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000446D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000447F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1000448A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10004499C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100044A80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100044D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  void *v20;
  void *v21;
  void *v22;

  sub_100012168((uint64_t)&__p);
  sub_100044E08(&a20);

  _Unwind_Resume(a1);
}

_QWORD *sub_100044E08(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = off_10018D828;
  a1[3] = off_10018D908;
  a1[4] = off_10018D940;
  sub_100047198((uint64_t)(a1 + 8));
  sub_100012168((uint64_t)(a1 + 5));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_1000454A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100045628(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100045760(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000457A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000457F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000458F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000459B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100045D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  id v25;

  sub_100044E08(&a22);
  if (a2 == 1)
  {
    v25 = +[DIError nilWithDIException:prefix:error:](DIError, "nilWithDIException:prefix:error:", __cxa_begin_catch(a1), CFSTR("failed to open existing output file"), v22);
    objc_claimAutoreleasedReturnValue(v25);
    __cxa_end_catch();
    JUMPOUT(0x100045BF0);
  }
  _Unwind_Resume(a1);
}

void sub_100046884(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v30;
  void *v31;

  _Block_object_dispose(&a17, 8);
  if (a2 == 1)
  {
    v30 = objc_msgSend(objc_begin_catch(a1), "reason");
    v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    +[DIError failWithEnumValue:verboseInfo:error:](DIError, "failWithEnumValue:verboseInfo:error:", 150, v31, v22);

    objc_end_catch();
    JUMPOUT(0x100045EB8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100046B80(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100046B90(uint64_t a1)
{

}

id sub_100046B98(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "signalCommandCompletedWithXpcError:", a2);
}

void sub_100046C1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100046E20(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  char v9;
  _BYTE v10[48];

  v9 = a4;
  v7 = sub_10011E7DC((_QWORD *)a1);
  *v7 = off_10018D828;
  v7[3] = off_10018D908;
  v7[4] = off_10018D940;
  sub_1001026E0(v10, a2, a3);
  sub_100046F1C((uint64_t)v10, &v9, (_QWORD *)(a1 + 40));
  sub_10010208C((uint64_t)v10);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40) + 8;
  *(_QWORD *)(a1 + 64) = a1 + 88;
  *(_OWORD *)(a1 + 72) = xmmword_100140690;
  return a1;
}

void sub_100046EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  va_list va;

  va_start(va, a2);
  sub_10010208C((uint64_t)va);
  v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

_QWORD *sub_100046F1C@<X0>(uint64_t a1@<X1>, char *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0xB0uLL);
  result = sub_100046F7C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100046F68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100046F7C(_QWORD *a1, uint64_t a2, char *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100174120;
  sub_100047014((uint64_t)(a1 + 3), a2, *a3);
  return a1;
}

void sub_100046FB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100046FC8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100174120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100046FD8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100174120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100047008(uint64_t a1)
{
  return sub_100047168(a1 + 24);
}

uint64_t sub_100047014(uint64_t a1, uint64_t a2, char a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = -1;
  *(_QWORD *)a1 = off_100174170;
  v4 = *(_OWORD *)(a2 + 12);
  v5 = *(_OWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 28) = v5;
  *(_OWORD *)(a1 + 12) = v4;
  *(_BYTE *)(a1 + 48) = a3;
  *(_BYTE *)(a1 + 49) = sub_1000470AC(a1);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 1;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

void sub_100047098(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10010208C(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1000470AC(uint64_t a1)
{
  unint64_t v1;
  void **v2;
  int v3;
  int v4;
  _BOOL8 v6;
  void *__p[2];
  unsigned __int8 v9;

  sub_100102818(a1, (uint64_t)__p);
  v1 = v9;
  if ((v9 & 0x80u) != 0)
    v1 = (unint64_t)__p[1];
  if (v1 == 5)
  {
    v2 = (void **)__p[0];
    if ((v9 & 0x80u) == 0)
      v2 = __p;
    v3 = *(_DWORD *)v2;
    v4 = *((unsigned __int8 *)v2 + 4);
    v6 = v3 == 1717726579 && v4 == 115;
    if ((char)v9 < 0)
      goto LABEL_15;
  }
  else
  {
    v6 = 0;
    if ((char)v9 < 0)
LABEL_15:
      operator delete(__p[0]);
  }
  return v6;
}

uint64_t sub_10004713C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_100047144(uint64_t a1)
{
  sub_10010208C(a1);
  operator delete();
}

uint64_t sub_100047168(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 136))
    sub_100017CC8((uint64_t *)(a1 + 96));
  return sub_10010208C(a1);
}

uint64_t sub_100047198(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD **)a1;
    do
    {
      v4 = v3[7];
      if (v4)
        *(_QWORD *)(v4 + 32) = 0;
      --v2;
      v3 = (_QWORD *)(sub_100012168((uint64_t)v3) + 64);
    }
    while (v2);
  }
  if (*(_QWORD *)(a1 + 16) && a1 + 24 != *(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1000479CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_100047E7C(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", CFSTR("/System/Library/PrivateFrameworks/DiskImages2.framework")));
  v1 = objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithURL:](NSBundle, "bundleWithURL:"));
  v2 = (void *)qword_1001A0F70;
  qword_1001A0F70 = v1;

}

void sub_100047EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10004800C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100048468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004848C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "signalCommandCompletedWithXpcError:", v3);

}

void sub_1000488A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000488C8(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "signalCommandCompletedWithXpcError:", v3);

}

uint64_t make_error_code(uint64_t result)
{
  unsigned __int8 v1;
  int v2;
  int v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1001A0F80);
  if ((v1 & 1) == 0)
  {
    v3 = result;
    v2 = __cxa_guard_acquire(&qword_1001A0F80);
    LODWORD(result) = v3;
    if (v2)
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_1001A05E8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1001A0F80);
      LODWORD(result) = v3;
    }
  }
  return result;
}

void diskimage_uio::diskimage_open_params::diskimage_open_params()
{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_100048FC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const std::error_category *sub_100048FD4@<X0>(std::__fs::filesystem::path *a1@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  const std::error_category *result;
  void **v10;
  uint64_t v11;
  void *__p[2];
  int64_t v13;
  __int128 v14;
  int v15;
  _QWORD v16[45];
  uint64_t v17;
  uint64_t v18;

  std::__fs::filesystem::__status(a1, 0);
  if (LOBYTE(v16[0]) == 255 || LOBYTE(v16[0]) == 0)
  {
    *(_QWORD *)&v14 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_path(const std::filesystem::path &, const diskimage_open_params::mode)";
    *((_QWORD *)&v14 + 1) = 75;
    v15 = 16;
    sub_10005255C(v16, &v14);
    sub_100005A0C(&v17, (uint64_t)"Diskimageuio: path ", 19);
    if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100041DD0(__p, a1->__pn_.__r_.__value_.__l.__data_, a1->__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)&a1->__pn_.__r_.__value_.__l.__data_;
      v13 = a1->__pn_.__r_.__value_.__r.__words[2];
    }
    if (v13 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if (v13 >= 0)
      v11 = HIBYTE(v13);
    else
      v11 = (uint64_t)__p[1];
    sub_100005A0C(&v17, (uint64_t)v10, v11);
    sub_100005A0C(&v17, (uint64_t)" doesn't exist", 14);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
    std::ostream::~ostream(&v17, off_1001755E0);
    sub_100052EB8((uint64_t)v16);
    std::ios::~ios(&v18);
    result = std::generic_category();
    *(_QWORD *)a4 = 2;
    *(_QWORD *)(a4 + 8) = result;
    *(_BYTE *)(a4 + 16) = 0;
  }
  else
  {
    *(_DWORD *)(a2 + 564) = a3;
    std::string::operator=((std::string *)a2, &a1->__pn_);
    return (const std::error_category *)sub_100052644(a2, 0, 1);
  }
  return result;
}

void sub_100049140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_100052604((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100049170(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 16))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_1001742A8;
  }
  return result;
}

void sub_100049294(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000492A8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _BYTE *a5@<X8>)
{
  const mach_header_64 *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;
  _QWORD v15[3];

  memset(v15, 0, sizeof(v15));
  if (a4 == 1)
    v7 = &_mh_execute_header + 2;
  else
    v7 = &_mh_execute_header;
  sub_100063524(&v11, a2, a3, v7, v15, 0);
  sub_10004AB64(a1 + 48, a1 + 48, (uint64_t)&v11);
  if (v14 < 0)
    operator delete(__p);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)(a1 + 560) = 12;
  *a5 = 0;
  a5[16] = 1;
}

void sub_1000494E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000494FC(uint64_t a1, unsigned int a2, int a3, char a4)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  __int128 v9;
  char v10;
  unsigned int v11;

  v11 = a2;
  v10 = a4;
  *(_DWORD *)(a1 + 564) = a3;
  *(_DWORD *)(a1 + 568) = a3;
  v8 = 2 * ((a3 - 1) < 2);
  sub_100058734(&v11, &v8, &v10, &v9);
  sub_100015BC8(a1 + 24, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator new();
}

void sub_100049614()
{
  operator delete();
}

void diskimage_uio::diskimage_open_params::create()
{
  diskimage_uio::diskimage_open_params::diskimage_open_params();
}

{
  diskimage_uio::diskimage_open_params::diskimage_open_params();
}

{
  diskimage_uio::diskimage_open_params::diskimage_open_params();
}

uint64_t *diskimage_uio::diskimage_open_params::operator=(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  if (*result)
  {
    sub_100012168(v2 + 608);
    sub_100012168(v2 + 592);
    sub_100012168(v2 + 576);
    sub_10004B46C(v2 + 48);
    v3 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v3)
      operator delete();
    sub_100012168(v2 + 24);
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  *result = *a2;
  *a2 = 0;
  return result;
}

void diskimage_uio::diskimage_open_params::~diskimage_open_params(diskimage_uio::diskimage_open_params *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    sub_100012168(v1 + 608);
    sub_100012168(v1 + 592);
    sub_100012168(v1 + 576);
    sub_10004B46C(v1 + 48);
    v2 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;
    if (v2)
      operator delete();
    sub_100012168(v1 + 24);
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  *(_QWORD *)this = 0;
}

_OWORD *sub_100049924@<X0>(const std::error_category *a1@<X0>, BOOL *a2@<X8>)
{
  _OWORD *result;
  char v5;
  _BYTE v6[24];

  result = sub_100051684(a1, (uint64_t)v6);
  if (v6[16])
  {
    *a2 = a1[5].__vftable != 0;
    v5 = 1;
  }
  else
  {
    result = (_OWORD *)sub_100049170((uint64_t)v6);
    v5 = 0;
    *(_OWORD *)a2 = *result;
  }
  a2[16] = v5;
  return result;
}

double diskimage_uio::diskimage_open_params::get_nr_blocks@<D0>(diskimage_uio::diskimage_open_params *this@<X0>, __n128 *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_100049994(*(_QWORD *)this, a2).n128_u64[0];
  return result;
}

__n128 sub_100049994@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  unsigned int *v6;
  __n128 *v7;
  __int128 v8;
  int v9;
  _QWORD v10[45];
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];

  sub_100058A38((const std::error_category *)a1, (uint64_t)v13);
  if (v13[16])
  {
    v4 = *(unsigned int *)(a1 + 552);
    if ((_DWORD)v4 == -1)
      sub_100018028();
    v10[0] = &v8;
    ((void (*)(_QWORD *, uint64_t))off_1001773B0[v4])(v10, a1 + 48);
  }
  else
  {
    *(_QWORD *)&v8 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_nr_blocks() const";
    *((_QWORD *)&v8 + 1) = 80;
    v9 = 16;
    sub_100059AAC(v10, &v8);
    sub_100005A0C(&v11, (uint64_t)"Diskimageuio: query format failed ", 34);
    v6 = (unsigned int *)sub_100049170((uint64_t)v13);
    sub_100053500((uint64_t)v10, v6);
    std::ostream::~ostream(&v11, off_100177270);
    sub_100059C10((uint64_t)v10);
    std::ios::~ios(&v12);
    v7 = (__n128 *)sub_100049170((uint64_t)v13);
    result = *v7;
    *a2 = *v7;
    a2[1].n128_u8[0] = 0;
  }
  return result;
}

void sub_100049A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100059B54((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *diskimage_uio::operator<<(_QWORD *a1, int a2)
{
  const char *v2;
  uint64_t v3;

  if (a2 == 2)
  {
    v2 = "auto";
    v3 = 4;
  }
  else if (a2 == 1)
  {
    v2 = "read write";
    v3 = 10;
  }
  else if (a2)
  {
    v2 = "unknown";
    v3 = 7;
  }
  else
  {
    v2 = "read only";
    v3 = 9;
  }
  return sub_100005A0C(a1, (uint64_t)v2, v3);
}

{
  const char *v2;
  uint64_t v3;

  switch(a2)
  {
    case 1:
      v2 = "raw";
      v3 = 3;
      return sub_100005A0C(a1, (uint64_t)v2, v3);
    case 2:
      v2 = "udro";
      goto LABEL_11;
    case 3:
      v2 = "udzo";
      goto LABEL_11;
    case 4:
      v2 = "ulfo";
      goto LABEL_11;
    case 5:
      v2 = "ulmo";
      goto LABEL_11;
    case 6:
      v2 = "udzo_max";
      v3 = 8;
      return sub_100005A0C(a1, (uint64_t)v2, v3);
    case 7:
      v2 = "udsb";
      goto LABEL_11;
    case 8:
      v2 = "asif";
LABEL_11:
      v3 = 4;
      break;
    case 11:
      v2 = "pstack";
      v3 = 6;
      break;
    default:
      v2 = "unknown";
      v3 = 7;
      break;
  }
  return sub_100005A0C(a1, (uint64_t)v2, v3);
}

void sub_100049BB0(_QWORD *a1, const void **a2, char *a3, char a4)
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  const std::error_category *v9;
  _QWORD *exception;
  const std::error_category *v11;
  _QWORD v12[6];
  std::string __p;

  *a1 = 0;
  if (*a2)
  {
    if (v6)
    {
      memset(&v12[3], 0, 24);
      v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 176))(v6);
      sub_10005ADA4(&__p, a3);
      sub_10010E36C(v7, (uint64_t *)&__p, a4, v12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v12[0] != v12[1])
        operator new();
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_1001924F8;
      v11 = std::generic_category();
      exception[1] = 22;
      exception[2] = v11;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "pstack_header";
      *exception = &off_100177610;
    }
  }
  v8 = __cxa_allocate_exception(0x40uLL);
  *v8 = &off_1001924F8;
  v9 = std::generic_category();
  v8[1] = 22;
  v8[2] = v9;
  *((_BYTE *)v8 + 24) = 0;
  *((_BYTE *)v8 + 48) = 0;
  v8[7] = "pstack_header";
  *v8 = &off_100177610;
}

void sub_100049FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char **a16, uint64_t a17, char a18, char *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,char a27,int a28,__int16 a29,char a30)
{
  void ***v30;

  a16 = &a19;
  sub_10004A4A8((void ***)&a16);
  a19 = &a22;
  sub_10005AC34((void ***)&a19);
  sub_10005AB94(v30, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10004A0E8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  const std::error_category *v6;

  *(_QWORD *)a1 = &off_1001924F8;
  v6 = std::generic_category();
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)a1 = &off_100177610;
  return a1;
}

uint64_t sub_10004A14C(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  int v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      sub_100017E44();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)sub_100017E58(result, a2);
    v9 = *a1;
    v8 = (unint64_t)a1[1];
    if ((char *)v8 == *a1)
    {
      v12 = vdupq_n_s64(v8);
      v10 = &v6[v5];
    }
    else
    {
      v10 = &v6[v5];
      do
      {
        v11 = *(_DWORD *)(v8 - 16);
        v8 -= 16;
        *((_DWORD *)v10 - 4) = v11;
        v10 -= 16;
        *((_QWORD *)v10 + 1) = *(_QWORD *)(v8 + 8);
        *(_QWORD *)(v8 + 8) = 0;
      }
      while ((char *)v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[16 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return sub_10005ABE4((uint64_t)&v14);
  }
  return result;
}

diskimage_uio::diskimage_open_params *sub_10004A208(diskimage_uio::diskimage_open_params *a1, __int128 *a2)
{
  __int128 v4;
  char v5;

  v5 = *((_BYTE *)a2 + 16);
  if (v5)
  {
    *(_QWORD *)&v4 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
  }
  else
  {
    v4 = *a2;
  }
  sub_10005B020((diskimage_uio::diskimage_open_params *)&v4, a1);
  if (v5)
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v4);
  return a1;
}

void sub_10004A270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&a9);
  _Unwind_Resume(exception_object);
}

uint64_t diskimage_uio::stack_image_node::stack_image_node(uint64_t a1, int a2, int a3, __int128 *a4, __int128 *a5, CFTypeRef cf)
{
  __int128 v9;
  __int128 v10;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    sub_100041DD0((_BYTE *)(a1 + 8), *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v9 = *a4;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 8) = v9;
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_100041DD0((_BYTE *)(a1 + 32), *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v10 = *a5;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 32) = v10;
  }
  *(_QWORD *)(a1 + 56) = cf;
  if (cf)
    CFRetain(cf);
  return a1;
}

void sub_10004A330(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void diskimage_uio::stack_image_node::~stack_image_node(diskimage_uio::stack_image_node *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 7);
  if (v2)
    CFRelease(v2);
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void sub_10004A3C0(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  operator delete();
}

const char *sub_10004A3E4()
{
  return "disk image";
}

_QWORD *sub_10004A3F0@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((a1 - 150) > 0x10)
    v2 = "(unrecognized error)";
  else
    v2 = off_100177628[a1 - 150];
  return sub_100005870(a2, v2);
}

uint64_t sub_10004A41C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_10004A46C((diskimage_uio::stack_image_node **)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

diskimage_uio::stack_image_node *sub_10004A46C(diskimage_uio::stack_image_node **a1, diskimage_uio::stack_image_node *a2)
{
  diskimage_uio::stack_image_node *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    diskimage_uio::stack_image_node::~stack_image_node(result);
    operator delete();
  }
  return result;
}

void sub_10004A4A8(void ***a1)
{
  void **v1;
  diskimage_uio::stack_image_node **v2;
  diskimage_uio::stack_image_node **v4;
  void *v5;

  v1 = *a1;
  v2 = (diskimage_uio::stack_image_node **)**a1;
  if (v2)
  {
    v4 = (diskimage_uio::stack_image_node **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_10004A46C(--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10004A520(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

uint64_t sub_10004A544(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 504);
  v4 = *(unsigned int *)(a2 + 504);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1001742C0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 504) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1001742F0[v4])(&v5, result, a2);
}

void ***sub_10004A5E0(uint64_t a1, void ***a2)
{
  return sub_10005AB94(a2, 0);
}

uint64_t sub_10004A5EC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
  return sub_100012168(a2);
}

uint64_t sub_10004A61C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 504))
    return sub_10004A6A4(result);
  return result;
}

void sub_10004A634(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_10004A6F8(*a1, a2, a3);
}

uint64_t sub_10004A63C(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  result = *a1;
  if (*(_DWORD *)(result + 504) != 2)
    return sub_10004A9C4(result, (uint64_t)a3);
  *a2 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  v6 = a3[4];
  a2[3] = a3[3];
  a2[4] = v6;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_10004A670(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 504) != 3)
    return sub_10004AA68(result, a3);
  *a2 = *a3;
  return result;
}

void ***sub_10004A694(uint64_t *a1, void ***a2, uint64_t *a3)
{
  return sub_10004AAD4(*a1, a2, a3);
}

void sub_10004A69C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_10004AB64(*a1, a2, a3);
}

uint64_t sub_10004A6A4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1001742C0[v2])(&v4, a1);
  *(_DWORD *)(a1 + 504) = 0;
  return a1;
}

void sub_10004A6F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  if (*(_DWORD *)(a1 + 504) == 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)a3;
    v3 = *(_OWORD *)(a3 + 16);
    v4 = *(_OWORD *)(a3 + 32);
    v5 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v5;
    *(_OWORD *)(a2 + 16) = v3;
    *(_OWORD *)(a2 + 32) = v4;
    *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
    *(_DWORD *)(a2 + 84) = *(_DWORD *)(a3 + 84);
    v6 = *(_OWORD *)(a3 + 88);
    v7 = *(_OWORD *)(a3 + 104);
    v8 = *(_OWORD *)(a3 + 120);
    *(_OWORD *)(a2 + 136) = *(_OWORD *)(a3 + 136);
    *(_OWORD *)(a2 + 120) = v8;
    *(_OWORD *)(a2 + 104) = v7;
    *(_OWORD *)(a2 + 88) = v6;
    v9 = *(_OWORD *)(a3 + 152);
    v10 = *(_OWORD *)(a3 + 168);
    v11 = *(_OWORD *)(a3 + 184);
    *(_OWORD *)(a2 + 200) = *(_OWORD *)(a3 + 200);
    *(_OWORD *)(a2 + 184) = v11;
    *(_OWORD *)(a2 + 168) = v10;
    *(_OWORD *)(a2 + 152) = v9;
    v12 = *(_OWORD *)(a3 + 248);
    v13 = *(_OWORD *)(a3 + 264);
    v14 = *(_OWORD *)(a3 + 280);
    *(_OWORD *)(a2 + 232) = *(_OWORD *)(a3 + 232);
    *(_OWORD *)(a2 + 264) = v13;
    *(_OWORD *)(a2 + 280) = v14;
    *(_OWORD *)(a2 + 248) = v12;
    v16 = *(_OWORD *)(a3 + 312);
    v15 = *(_OWORD *)(a3 + 328);
    v17 = *(_OWORD *)(a3 + 296);
    *(_QWORD *)(a2 + 344) = *(_QWORD *)(a3 + 344);
    *(_OWORD *)(a2 + 312) = v16;
    *(_OWORD *)(a2 + 328) = v15;
    *(_OWORD *)(a2 + 296) = v17;
    *(_OWORD *)(a2 + 216) = *(_OWORD *)(a3 + 216);
    *(_DWORD *)(a2 + 352) = *(_DWORD *)(a3 + 352);
    *(_DWORD *)(a2 + 356) = *(_DWORD *)(a3 + 356);
    v18 = *(_OWORD *)(a3 + 360);
    v19 = *(_OWORD *)(a3 + 376);
    v20 = *(_OWORD *)(a3 + 392);
    *(_OWORD *)(a2 + 408) = *(_OWORD *)(a3 + 408);
    *(_OWORD *)(a2 + 392) = v20;
    *(_OWORD *)(a2 + 376) = v19;
    *(_OWORD *)(a2 + 360) = v18;
    v21 = *(_OWORD *)(a3 + 424);
    v22 = *(_OWORD *)(a3 + 440);
    v23 = *(_OWORD *)(a3 + 456);
    *(_OWORD *)(a2 + 472) = *(_OWORD *)(a3 + 472);
    *(_OWORD *)(a2 + 456) = v23;
    *(_OWORD *)(a2 + 440) = v22;
    *(_OWORD *)(a2 + 424) = v21;
    v24 = *(_QWORD *)(a3 + 488);
    *(_DWORD *)(a2 + 496) = *(_DWORD *)(a3 + 496);
    *(_QWORD *)(a2 + 488) = v24;
  }
  else
  {
    sub_10004A820(a1, a3);
  }
}

void sub_10004A820(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1001742C0[v4])(&v5, a1);
  *(_DWORD *)(a1 + 504) = -1;
  sub_10004A88C(a1, a2);
  *(_DWORD *)(a1 + 504) = 1;
}

__n128 sub_10004A88C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  __int128 v20;
  __int128 v21;

  *(_QWORD *)a1 = 0x4796C6F6BLL;
  *(_DWORD *)(a1 + 8) = 512;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 88);
  v5 = *(_OWORD *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 88) = v4;
  v7 = *(_OWORD *)(a2 + 152);
  v8 = *(_OWORD *)(a2 + 168);
  v9 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  *(_OWORD *)(a1 + 152) = v7;
  v10 = *(_OWORD *)(a2 + 248);
  v11 = *(_OWORD *)(a2 + 264);
  v12 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 264) = v11;
  *(_OWORD *)(a1 + 280) = v12;
  *(_OWORD *)(a1 + 248) = v10;
  v14 = *(_OWORD *)(a2 + 312);
  v13 = *(_OWORD *)(a2 + 328);
  v15 = *(_OWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 312) = v14;
  *(_OWORD *)(a1 + 328) = v13;
  *(_OWORD *)(a1 + 296) = v15;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  v16 = *(_OWORD *)(a2 + 360);
  v17 = *(_OWORD *)(a2 + 376);
  v18 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 392) = v18;
  *(_OWORD *)(a1 + 376) = v17;
  *(_OWORD *)(a1 + 360) = v16;
  result = *(__n128 *)(a2 + 424);
  v20 = *(_OWORD *)(a2 + 440);
  v21 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = v21;
  *(_OWORD *)(a1 + 440) = v20;
  *(__n128 *)(a1 + 424) = result;
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 492) = *(_QWORD *)(a2 + 492);
  return result;
}

uint64_t sub_10004A9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v9;

  v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1001742C0[v4])(&v9, a1);
  *(_DWORD *)(a1 + 504) = -1;
  *(_DWORD *)a1 = 2003069043;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v5 = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 62) = *(_QWORD *)(a2 + 62);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 70) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 504) = 2;
  return a1;
}

uint64_t sub_10004AA68(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1001742C0[v4])(&v6, a1);
  *(_DWORD *)(a1 + 504) = -1;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 504) = 3;
  return a1;
}

void ***sub_10004AAD4(uint64_t a1, void ***a2, uint64_t *a3)
{
  void **v3;

  if (*(_DWORD *)(a1 + 504) != 4)
    return (void ***)sub_10004AAFC(a1, a3);
  v3 = (void **)*a3;
  *a3 = 0;
  return sub_10005AB94(a2, v3);
}

uint64_t sub_10004AAFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1001742C0[v4])(&v7, a1);
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 504) = 4;
  return a1;
}

void sub_10004AB64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  __int128 v6;

  if (*(_DWORD *)(a1 + 504) == 5)
  {
    sub_100015BC8(a2, (__int128 *)a3);
    v5 = (void **)(a2 + 16);
    if (*(char *)(a2 + 39) < 0)
      operator delete(*v5);
    v6 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)v5 = v6;
    *(_BYTE *)(a3 + 39) = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  else
  {
    sub_10004ABE4(a1, a3);
  }
}

uint64_t sub_10004ABE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1001742C0[v4])(&v7, a1);
  *(_DWORD *)(a1 + 504) = -1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 504) = 5;
  return a1;
}

void sub_10004AC6C(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  sub_1000F7E60(&v23, a1);
  v1 = *(_OWORD *)(v23 + 32);
  v20 = *(_OWORD *)(v23 + 16);
  v21 = v1;
  v22 = *(_QWORD *)(v23 + 48);
  v2 = *(_OWORD *)(v23 + 64);
  v3 = *(_OWORD *)(v23 + 88);
  v4 = *(_OWORD *)(v23 + 104);
  v5 = *(_OWORD *)(v23 + 136);
  v43 = *(_OWORD *)(v23 + 120);
  v44 = v5;
  v41 = v3;
  v42 = v4;
  v6 = *(_OWORD *)(v23 + 152);
  v7 = *(_OWORD *)(v23 + 168);
  v8 = *(_OWORD *)(v23 + 184);
  v48 = *(_OWORD *)(v23 + 200);
  v49 = v2;
  v46 = v7;
  v47 = v8;
  v45 = v6;
  v9 = *(_OWORD *)(v23 + 216);
  v10 = *(_OWORD *)(v23 + 232);
  v11 = *(_OWORD *)(v23 + 264);
  v12 = *(_OWORD *)(v23 + 280);
  v34 = *(_OWORD *)(v23 + 248);
  v35 = v11;
  v32 = v9;
  v33 = v10;
  v13 = *(_OWORD *)(v23 + 296);
  v14 = *(_OWORD *)(v23 + 312);
  v15 = *(_OWORD *)(v23 + 328);
  v40 = *(_QWORD *)(v23 + 344);
  v38 = v14;
  v39 = v15;
  v36 = v12;
  v37 = v13;
  v16 = *(_OWORD *)(v23 + 440);
  v28 = *(_OWORD *)(v23 + 424);
  v29 = v16;
  v17 = *(_OWORD *)(v23 + 472);
  v30 = *(_OWORD *)(v23 + 456);
  v31 = v17;
  v18 = *(_OWORD *)(v23 + 376);
  v24 = *(_OWORD *)(v23 + 360);
  v25 = v18;
  v19 = *(_OWORD *)(v23 + 408);
  v26 = *(_OWORD *)(v23 + 392);
  v27 = v19;
  operator new();
}

void sub_10004AFE0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  if (a2)
  {
    sub_10004B46C((uint64_t)&STACK[0x258]);
    sub_10004B46C((uint64_t)va1);
    if (a4)
      (*(void (**)(uint64_t))(*(_QWORD *)a4 + 8))(a4);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    sub_10004B0C8((uint64_t *)va);
    __cxa_begin_catch(a1);
    sub_10004B110();
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10004B0C8(uint64_t *a1)
{
  uint64_t v2;

  sub_100012168((uint64_t)(a1 + 1));
  v2 = *a1;
  *a1 = 0;
  if (v2)
    operator delete();
  return a1;
}

void sub_10004B110()
{
  __cxa_rethrow();
}

void sub_10004B140(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  int v7;
  _QWORD v8[45];
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (!a2)
    goto LABEL_8;
  if (a2 != 3 && a2 != 2)
  {
    if (a2 == 1)
    {
      v3 = (unsigned int *)__cxa_begin_catch(a1);
      *(_QWORD *)&v5 = "expected<std::pair<hdr_variant, image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions()";
      *((_QWORD *)&v5 + 1) = 146;
      v6 = 16;
      sub_10004B4C4(v8, &v5);
      sub_1001206CC(&v9, v3);
      std::ostream::~ostream(&v9, off_100174448);
      sub_10004B628((uint64_t)v8);
      std::ios::~ios(&v10);
      *(_QWORD *)v2 = make_error_code(161);
      *(_QWORD *)(v2 + 8) = v4;
      *(_BYTE *)(v2 + 520) = 0;
      goto LABEL_7;
    }
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  v7 = 0;
  sub_10004B304((uint64_t)v8, (uint64_t)&v5);
  v11 = 0;
  sub_10004B304(v2, (uint64_t)v8);
  *(_DWORD *)(v2 + 512) = v11;
  *(_BYTE *)(v2 + 520) = 1;
  sub_10004B46C((uint64_t)v8);
  sub_10004B46C((uint64_t)&v5);
LABEL_7:
  __cxa_end_catch();
}

uint64_t sub_10004B304(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 504) = -1;
  sub_10004B348(a1, a2);
  return a1;
}

void sub_10004B334(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10004B46C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004B348(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 504);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1001742C0[v4])(&v7, result);
  *(_DWORD *)(v3 + 504) = -1;
  v5 = *(unsigned int *)(a2 + 504);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_100174320[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 504) = v5;
  }
  return result;
}

double sub_10004B3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = sub_10004A88C(a2, a3).n128_u64[0];
  return result;
}

__n128 sub_10004B3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_DWORD *)a2 = 2003069043;
  *(_QWORD *)(a2 + 4) = *(_QWORD *)(a3 + 4);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
  result = *(__n128 *)(a3 + 16);
  v4 = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 62) = *(_QWORD *)(a3 + 62);
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)(a2 + 16) = result;
  *(_WORD *)(a2 + 70) = 0;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
  return result;
}

__n128 sub_10004B428(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void sub_10004B434(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

__n128 sub_10004B444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = *(__n128 *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t sub_10004B46C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1001742C0[v2])(&v4, a1);
  *(_DWORD *)(a1 + 504) = -1;
  return a1;
}

_QWORD *sub_10004B4C4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10004B5AC((uint64_t)a1, a2);
  *a1 = off_100174380;
  a1[45] = &off_100174480;
  a1[46] = &off_1001744A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100174380;
  a1[45] = off_100174408;
  a1[46] = off_100174430;
  return a1;
}

void sub_10004B548(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10004B628(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004B56C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100174448);
  sub_10004B628(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10004B5AC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100174518;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10004B614(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004B628(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100174518;
  sub_10004B8E0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10004B6C4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100174448);
  sub_10004B628(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10004B718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10004B74C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_10004B798(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100174448);
  sub_10004B628(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10004B7D0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100174448);
  sub_10004B628(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_10004B820(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100174448);
  sub_10004B628(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10004B860(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100174448);
  sub_10004B628(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10004B8BC(uint64_t a1)
{
  sub_10004B628(a1);
  operator delete();
}

uint64_t sub_10004B8E0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10004BA30((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10004BA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10004BA30(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 393;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 393;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

BOOL sub_10004BC14(_DWORD *a1, _DWORD *a2)
{
  unint64_t v2;

  if (*a1 == *a2 && (v2 = a1[1], (_DWORD)v2 == a2[1]))
    return memcmp(a1 + 2, a2 + 2, v2 >> 3) == 0;
  else
    return 0;
}

void sub_10004BC64(uint64_t a1, uint64_t *a2)
{
  _QWORD v2[17];

  sub_1000F6370((uint64_t)v2, a2);
}

void sub_10004BCCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10004FBD0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10004BCE0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1001745D8;
  v5 = a3[1];
  *(_QWORD *)(a1 + 48) = *a3;
  *(_QWORD *)(a1 + 56) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)sub_10004D31C(a1 + 64, a2) = &off_100174598;
  if (*(_BYTE *)(a2 + 88))
  {
    v8 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 32) = 2 * v8;
    *(_QWORD *)(a1 + 40) = 0;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }
  return a1;
}

void sub_10004BD84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100012168(v1);
  _Unwind_Resume(a1);
}

void sub_10004BD9C(uint64_t a1)
{
  sub_10004FBD0(a1);
  operator delete();
}

uint64_t sub_10004BDC8()
{
  return 512;
}

uint64_t sub_10004BDD0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144);
}

uint64_t sub_10004BDD8()
{
  return 1;
}

__n128 sub_10004BDE0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_10004BDEC()
{
  return 0;
}

uint64_t sub_10004BDF4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

void sub_10004BDFC()
{
  operator new();
}

void sub_10004BE78()
{
  operator new();
}

void sub_10004BEBC()
{
  operator delete();
}

uint64_t sub_10004BEE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  const std::locale::facet *v34;
  uint64_t v35;
  int v36;
  int8x16_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t **v41;
  char v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t **v49;
  int v50;
  const std::locale::facet *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  char v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  const std::locale::facet *v96;
  uint64_t v97;
  const std::locale::facet *v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  BOOL v103;
  unsigned int *v104;
  unsigned int *v105;
  _DWORD *v106;
  int v107;
  int v108;
  const std::locale::facet *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v124;
  uint64_t v126;
  uint64_t **v127;
  char *v128;
  uint64_t v129;
  _DWORD *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count *v140;
  __int128 v141;
  int v142;
  __int128 v143;
  int8x16_t v144;
  uint64_t v145;
  char v146;
  __int128 v147;
  _BYTE v148[25];
  __int128 v149;
  _BYTE v150[25];
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  char v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  __int128 v158;
  uint64_t v159;
  char v160;
  _BYTE v161[297];
  char v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  _OWORD v165[2];
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  char v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  __int128 v173;
  uint64_t v174;
  char v175;
  std::locale v176;
  void *__p;
  __int128 v178;
  _BYTE v179[393];
  void *v180;
  __int128 v181;
  _BYTE v182[1024];

  v180 = v182;
  v181 = xmmword_100140690;
  __p = v179;
  v178 = xmmword_100140690;
  v7 = sub_10004D690(a3, a4);
  v8 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334)
      sub_1000158AC("get_next_capacity, allocator's max size reached");
    v9 = operator new(40 * v7);
    sub_10004DC58((uint64_t *)&__p, (unint64_t)v9, v8, (uint64_t)__p + 40 * v178, 0, 0);
  }
  v10 = *(_QWORD *)(a4 + 144) - *(_QWORD *)(a3 + 144);
  sub_1000F5D50(a1 + 64, *(_QWORD *)(a3 + 24), v10 & ~(v10 >> 63), (uint64_t *)&v180);
  v11 = *(std::__shared_weak_count **)(a4 + 8);
  v163 = *(_QWORD *)a4;
  v164 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *(_OWORD *)(a4 + 56);
  v165[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v165 + 9) = *(_OWORD *)(a4 + 25);
  v166 = *(_QWORD *)(a4 + 48);
  v167 = v14;
  v15 = *(_OWORD *)(a4 + 88);
  v168 = *(_OWORD *)(a4 + 72);
  v169 = v15;
  v170 = *(_BYTE *)(a4 + 104);
  v16 = *(std::__shared_weak_count **)(a4 + 120);
  v171 = *(_QWORD *)(a4 + 112);
  v172 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v173 = *(_OWORD *)(a4 + 128);
  v174 = *(_QWORD *)(a4 + 144);
  v175 = *(_BYTE *)(a4 + 152);
  v161[0] = 0;
  v162 = 0;
  v19 = (char *)v180;
  v126 = *((_QWORD *)v180 + 3);
  v20 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v149 = *(_QWORD *)a3;
  *((_QWORD *)&v149 + 1) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)v150 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v150[9] = *(_OWORD *)(a3 + 25);
  v151 = *(_QWORD *)(a3 + 48);
  v152 = v23;
  v24 = *(_OWORD *)(a3 + 88);
  v153 = *(_OWORD *)(a3 + 72);
  v154 = v24;
  v155 = *(_BYTE *)(a3 + 104);
  v25 = *(std::__shared_weak_count **)(a3 + 120);
  v156 = *(_QWORD *)(a3 + 112);
  v157 = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v158 = *(_OWORD *)(a3 + 128);
  v159 = *(_QWORD *)(a3 + 144);
  v160 = *(_BYTE *)(a3 + 152);
  v124 = a2;
  if (!(_QWORD)v181)
  {
    v28 = 0;
    v129 = 0;
    goto LABEL_126;
  }
  v28 = 0;
  v128 = &v19[64 * (_QWORD)v181];
  v129 = 0;
  v127 = (uint64_t **)(a2 + 16);
  while (1)
  {
    v29 = *((_QWORD *)v19 + 4);
    if (v29)
    {
      if (sub_10002C4A4((uint64_t)&v149, (uint64_t)&v163))
        break;
    }
    if (v29 > *(_QWORD *)&v150[16])
      sub_10002D9AC((uint64_t)&v149);
    if (sub_10002C4A4((uint64_t)&v149, (uint64_t)&v163))
    {
      *(_QWORD *)&v147 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
      *((_QWORD *)&v147 + 1) = 75;
      *(_DWORD *)v148 = 16;
      sub_10004D824(&v130, &v147);
      sub_100005A0C(&v137, (uint64_t)"Udif: advanced buffer, needs to read ", 37);
      sub_1000F7698(&v137, (int *)v19);
      sub_100005A0C(&v137, (uint64_t)" but buffer is full", 19);
      std::ios_base::getloc((const std::ios_base *)((char *)&v137 + *(_QWORD *)(v137 - 24)));
      v96 = std::locale::use_facet((const std::locale *)&v143, &std::ctype<char>::id);
      v97 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v96->__vftable[2].~facet_0)(v96, 10);
      std::locale::~locale((std::locale *)&v143);
      std::ostream::put(&v137, v97);
      std::ostream::flush(&v137);
      std::ostream::~ostream(&v137, off_100174870);
      sub_10004DE88((uint64_t)&v130);
      goto LABEL_125;
    }
    v30 = v149;
    v147 = v149;
    if (*((_QWORD *)&v149 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    *(_OWORD *)&v148[9] = *(_OWORD *)&v150[9];
    *(_OWORD *)v148 = *(_OWORD *)v150;
    v33 = *(_OWORD *)&v150[9] >> 56;
    if (v29 > v33)
    {
      *(_QWORD *)&v143 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
      *((_QWORD *)&v143 + 1) = 75;
      v144.i32[0] = 16;
      sub_10004D90C(&v130, &v143);
      sub_100005A0C(&v137, (uint64_t)"Udif: needs to read ", 20);
      sub_1000F7698(&v137, (int *)v19);
      sub_100005A0C(&v137, (uint64_t)" but buffer is too small ", 25);
      std::ostream::operator<<(&v137, v33);
      std::ios_base::getloc((const std::ios_base *)((char *)&v137 + *(_QWORD *)(v137 - 24)));
      v34 = std::locale::use_facet((const std::locale *)&v141, &std::ctype<char>::id);
      v35 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
      std::locale::~locale((std::locale *)&v141);
      std::ostream::put(&v137, v35);
      std::ostream::flush(&v137);
      std::ostream::~ostream(&v137, off_100174A90);
      sub_10004E4F0((uint64_t)&v130);
      std::ios::~ios(&v138);
      v36 = 2;
      v28 = -28;
      goto LABEL_45;
    }
    if (!*(_DWORD *)v19)
    {
      bzero((void *)v30, v29);
      sub_10002D7D4((uint64_t)&v149, v29);
LABEL_44:
      v36 = 0;
      v129 += v29;
      goto LABEL_45;
    }
    v37 = *(int8x16_t *)(v19 + 8);
    v38 = *((_QWORD *)v19 + 4);
    v143 = v30;
    if (*((_QWORD *)&v30 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v144 = vextq_s8(v37, v37, 8uLL);
    v145 = v38;
    v146 = 0;
    if (v129)
    {
      *(_QWORD *)&v141 = v19;
      v41 = sub_10004EADC(v127, (unsigned int *)v19, (uint64_t)&unk_100141000, (_DWORD **)&v141);
      (*(void (**)(_DWORD **__return_ptr, uint64_t *, __int128 *))(*v41[5] + 128))(&v130, v41[5], &v143);
      if ((_QWORD)v178 == *((_QWORD *)&v178 + 1))
      {
        sub_10004F2CC((uint64_t *)&__p, (uint64_t)__p + 40 * v178, 1, (uint64_t)&v130, &v141);
      }
      else
      {
        sub_10003DF88((unint64_t)__p + 40 * v178, (uint64_t)&v130);
        *(_QWORD *)&v178 = v178 + 1;
      }
      sub_10002D7D4((uint64_t)&v149, v29);
    }
    else
    {
      v130 = v19;
      v49 = sub_10004EADC(v127, (unsigned int *)v19, (uint64_t)&unk_100141000, &v130);
      v50 = (*(uint64_t (**)(uint64_t *, __int128 *))(*v49[5] + 88))(v49[5], &v143);
      v28 = v50;
      if (v50 < 0)
      {
        v42 = 0;
        v36 = 2;
        goto LABEL_37;
      }
      if (*(_BYTE *)(v124 + 56) && *((int *)v19 + 8) > (uint64_t)v50)
      {
        *(_QWORD *)&v141 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
        *((_QWORD *)&v141 + 1) = 75;
        v142 = 16;
        sub_10004D9F4(&v130, &v141);
        sub_100005A0C(&v137, (uint64_t)"Error: Not enough data read. expected: ", 39);
        std::ostream::operator<<(&v137, *((_QWORD *)v19 + 4));
        sub_100005A0C(&v137, (uint64_t)" read: ", 7);
        std::ostream::operator<<(&v137, v28);
        sub_100005A0C(&v137, (uint64_t)" backend: ", 10);
        std::ostream::operator<<(&v137, *(_QWORD *)(a1 + 48));
        std::ios_base::getloc((const std::ios_base *)((char *)&v137 + *(_QWORD *)(v137 - 24)));
        v51 = std::locale::use_facet(&v176, &std::ctype<char>::id);
        v52 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
        std::locale::~locale(&v176);
        std::ostream::put(&v137, v52);
        std::ostream::flush(&v137);
        std::ostream::~ostream(&v137, off_100174CB0);
        sub_10004EC80((uint64_t)&v130);
        std::ios::~ios(&v138);
        v42 = 0;
        v36 = 2;
        v28 = -5;
        goto LABEL_37;
      }
      v53 = sub_10004DADC(a1, (void **)&v143, (uint64_t)v19, &v180, v33);
      v29 -= v53;
      sub_10002D7D4((uint64_t)&v149, v29);
      if ((_QWORD)v181)
      {
        v54 = 0;
        v55 = 0;
        v56 = (_QWORD)v181 << 6;
        v57 = (uint64_t *)((char *)v180 + 32);
        do
        {
          v59 = *v57;
          v57 += 8;
          v58 = v59;
          v60 = v59 + v54;
          v61 = v59 + v55;
          v62 = v33 - v55;
          v63 = v59 + v55 > v33;
          if (v59 + v55 >= v33)
            v55 = 0;
          else
            v55 = v61;
          if (v63)
          {
            v55 = v58;
            v64 = v62;
          }
          else
          {
            v64 = 0;
          }
          v54 = v60 + v64;
          v56 -= 64;
        }
        while (v56);
      }
      else
      {
        v54 = 0;
      }
      v65 = sub_10002E740(a3);
      v126 += v53;
      sub_10002C7A8((uint64_t)&v130, a3 + 56, a4 + 56, v126, v54 - v53, v65);
      sub_10004F26C((uint64_t)v161);
      sub_10002EA44((uint64_t)v161, (uint64_t)&v130);
      v162 = 1;
      v66 = v140;
      if (v140)
      {
        v67 = (unint64_t *)&v140->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      v69 = v139;
      if (v139)
      {
        v70 = (unint64_t *)&v139->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = v136;
      if (v136)
      {
        v73 = (unint64_t *)&v136->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v75 = v135;
      if (v135)
      {
        v76 = (unint64_t *)&v135->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v78 = v134;
      if (v134)
      {
        v79 = (unint64_t *)&v134->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = v132;
      if (v132)
      {
        v82 = (unint64_t *)&v132->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      sub_10002CA7C((uint64_t)v161, (uint64_t)&v130);
      sub_100037358((uint64_t)&v149, (uint64_t)&v130);
      v84 = v133;
      if (v133)
      {
        v85 = (unint64_t *)&v133->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v87 = v131;
      if (v131)
      {
        v88 = (unint64_t *)&v131->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      sub_10002D5FC((uint64_t)&v149, v29);
      sub_10002C64C((uint64_t)v161, (uint64_t)&v130);
      sub_100037358((uint64_t)&v163, (uint64_t)&v130);
      v90 = v133;
      if (v133)
      {
        v91 = (unint64_t *)&v133->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      v93 = v131;
      if (v131)
      {
        v94 = (unint64_t *)&v131->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
    }
    v36 = 0;
    v42 = 1;
LABEL_37:
    v43 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
    if (!*((_QWORD *)&v143 + 1))
      goto LABEL_41;
    v44 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
      if ((v42 & 1) != 0)
        goto LABEL_44;
    }
    else
    {
LABEL_41:
      if ((v42 & 1) != 0)
        goto LABEL_44;
    }
LABEL_45:
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
    if (*((_QWORD *)&v147 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (!v36)
    {
      v19 += 64;
      if (v19 != v128)
        continue;
    }
    goto LABEL_126;
  }
  *(_QWORD *)&v147 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
  *((_QWORD *)&v147 + 1) = 75;
  *(_DWORD *)v148 = 16;
  sub_10003BD20(&v130, &v147);
  sub_100005A0C(&v137, (uint64_t)"Udif: needs to read ", 20);
  sub_1000F7698(&v137, (int *)v19);
  sub_100005A0C(&v137, (uint64_t)" but buffer is full", 19);
  std::ios_base::getloc((const std::ios_base *)((char *)&v137 + *(_QWORD *)(v137 - 24)));
  v98 = std::locale::use_facet((const std::locale *)&v143, &std::ctype<char>::id);
  v99 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v98->__vftable[2].~facet_0)(v98, 10);
  std::locale::~locale((std::locale *)&v143);
  std::ostream::put(&v137, v99);
  std::ostream::flush(&v137);
  std::ostream::~ostream(&v137, off_100172E28);
  sub_10003BE84((uint64_t)&v130);
LABEL_125:
  std::ios::~ios(&v138);
  v28 = -28;
LABEL_126:
  v100 = *(_QWORD **)(v124 + 16);
  if (v100 != (_QWORD *)(v124 + 24))
  {
    do
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v100[5] + 144))(v100[5]);
      v101 = (_QWORD *)v100[1];
      if (v101)
      {
        do
        {
          v102 = v101;
          v101 = (_QWORD *)*v101;
        }
        while (v101);
      }
      else
      {
        do
        {
          v102 = (_QWORD *)v100[2];
          v103 = *v102 == (_QWORD)v100;
          v100 = v102;
        }
        while (!v103);
      }
      v100 = v102;
    }
    while (v102 != (_QWORD *)(v124 + 24));
  }
  if (v28 < 0)
  {
LABEL_144:
    v129 = v28;
  }
  else if ((_QWORD)v178)
  {
    v104 = (unsigned int *)__p;
    v105 = (unsigned int *)((char *)__p + 40 * v178);
    v106 = v180;
    while (1)
    {
      do
      {
        v107 = v106[16];
        v106 += 16;
      }
      while (!v107);
      v108 = sub_100039604(v104);
      v28 = v108;
      if (v108 < 0)
        goto LABEL_144;
      if (*(_BYTE *)(v124 + 56) && (int)v106[8] > (uint64_t)v108)
      {
        *(_QWORD *)&v147 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
        *((_QWORD *)&v147 + 1) = 75;
        *(_DWORD *)v148 = 16;
        sub_10004DB70(&v130, &v147);
        sub_100005A0C(&v137, (uint64_t)"Error: Not enough data read. expected: ", 39);
        std::ostream::operator<<(&v137, *((_QWORD *)v106 + 4));
        sub_100005A0C(&v137, (uint64_t)" read: ", 7);
        std::ostream::operator<<(&v137, v28);
        sub_100005A0C(&v137, (uint64_t)" backend: ", 10);
        std::ostream::operator<<(&v137, *(_QWORD *)(a1 + 48));
        std::ios_base::getloc((const std::ios_base *)((char *)&v137 + *(_QWORD *)(v137 - 24)));
        v109 = std::locale::use_facet((const std::locale *)&v143, &std::ctype<char>::id);
        v110 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v109->__vftable[2].~facet_0)(v109, 10);
        std::locale::~locale((std::locale *)&v143);
        std::ostream::put(&v137, v110);
        std::ostream::flush(&v137);
        std::ostream::~ostream(&v137, off_100174ED0);
        sub_10004F5E4((uint64_t)&v130);
        std::ios::~ios(&v138);
        v28 = -5;
        goto LABEL_144;
      }
      v104 += 10;
      if (v104 == v105)
      {
        if ((v108 & 0x80000000) == 0)
          break;
        goto LABEL_144;
      }
    }
  }
  v111 = v157;
  if (v157)
  {
    v112 = (unint64_t *)&v157->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  sub_10002EB64((uint64_t)v161);
  v117 = v172;
  if (v172)
  {
    v118 = (unint64_t *)&v172->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v164;
  if (v164)
  {
    v121 = (unint64_t *)&v164->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (*((_QWORD *)&v178 + 1) && v179 != __p)
    operator delete(__p);
  if (*((_QWORD *)&v181 + 1) && v182 != v180)
    operator delete(v180);
  return v129;
}

void sub_10004CE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100012168((uint64_t)&STACK[0x350]);
  sub_100012168((uint64_t)&STACK[0x2E0]);
  sub_10002EB64((uint64_t)&STACK[0x380]);
  sub_100012168((uint64_t)&STACK[0x608]);
  sub_100012168((uint64_t)&STACK[0x598]);
  if (STACK[0x650] && a11 != STACK[0x640])
    operator delete((void *)STACK[0x640]);
  if (STACK[0x8E8])
  {
    if (a12 != STACK[0x8D8])
      operator delete((void *)STACK[0x8D8]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10004CFAC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _BYTE v38[8];
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  _BYTE v41[8];
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  uint64_t v44[18];
  void *__p;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[72];
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;

  sub_100037C30(v44, a3);
  sub_10002CA7C((uint64_t)v48, (uint64_t)v41);
  v5 = sub_10002C64C((uint64_t)v48, (uint64_t)v38);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _BYTE *, double))(*(_QWORD *)a1 + 152))(a1, a2, v41, v38, v5);
  v7 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v39;
  if (v39)
  {
    v11 = (unint64_t *)&v39->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v43;
  if (v43)
  {
    v14 = (unint64_t *)&v43->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v42;
  if (v42)
  {
    v17 = (unint64_t *)&v42->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v54;
  if (v54)
  {
    v20 = (unint64_t *)&v54->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v53;
  if (v53)
  {
    v23 = (unint64_t *)&v53->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v52;
  if (v52)
  {
    v26 = (unint64_t *)&v52->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v51;
  if (v51)
  {
    v29 = (unint64_t *)&v51->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v50;
  if (v50)
  {
    v32 = (unint64_t *)&v50->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v49;
  if (v49)
  {
    v35 = (unint64_t *)&v49->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v46 && &v47 != __p)
    operator delete(__p);
  sub_100015C2C((uint64_t)v44);
  return v6;
}

void sub_10004D2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;

  sub_100012168(v50 + 112);
  sub_100012168((uint64_t)&a10);
  sub_100012168((uint64_t)&a44);
  sub_100012168((uint64_t)&a30);
  sub_10001382C((uint64_t)&a50);
  _Unwind_Resume(a1);
}

uint64_t sub_10004D30C()
{
  return 4294967251;
}

uint64_t sub_10004D314()
{
  return 4294967251;
}

uint64_t sub_10004D31C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = off_10018C040;
  *(_QWORD *)(result + 8) = v2;
  v3 = (_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 16) = v4;
  v5 = result + 16;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 24) = v6;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    *(_QWORD *)(a2 + 8) = v3;
    *v3 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    *(_QWORD *)(result + 8) = v5;
  }
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  v7 = (_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 40) = v8;
  v9 = result + 40;
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 48) = v10;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    *(_QWORD *)(a2 + 32) = v7;
    *v7 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    *(_QWORD *)(result + 32) = v9;
  }
  *(_OWORD *)(result + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(result + 72) = v11;
  v12 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(result + 80) = v12;
  *(_QWORD *)(result + 104) = *(_QWORD *)(a2 + 104);
  v13 = (_QWORD *)(a2 + 112);
  v14 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(result + 112) = v14;
  v15 = result + 112;
  v16 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(result + 120) = v16;
  if (v16)
  {
    *(_QWORD *)(v14 + 16) = v15;
    *(_QWORD *)(a2 + 104) = v13;
    *v13 = 0;
    *(_QWORD *)(a2 + 120) = 0;
  }
  else
  {
    *(_QWORD *)(result + 104) = v15;
  }
  return result;
}

__n128 sub_10004D3FC@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[1];
  *a2 = result;
  a2[1].n128_u64[0] = a1[2].n128_u64[0];
  a2[1].n128_u32[2] = 1;
  return result;
}

void sub_10004D418()
{
  operator new();
}

void sub_10004D484()
{
  operator delete();
}

uint64_t sub_10004D498(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD **v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;

  *(_QWORD *)a1 = off_100174748;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = a1 + 24;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  v4 = (_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v5 = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  sub_1000F4CAC(a2 + 64, (uint64_t)&v12);
  sub_10004D648((uint64_t)v4, *(_QWORD **)(a1 + 24));
  v6 = v13;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = v14;
  *(_QWORD *)(a1 + 32) = v14;
  if (v7)
  {
    v6[2] = v3;
    v12 = &v13;
    v13 = 0;
    v14 = 0;
  }
  else
  {
    *v4 = v3;
  }
  sub_100015BC8(v5, &v15);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  sub_10004D648((uint64_t)&v12, v13);
  *(_BYTE *)(a1 + 56) = 1;
  return a1;
}

void sub_10004D5A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  sub_100012168(v1);
  sub_10004D648(v2, *v3);
  _Unwind_Resume(a1);
}

uint64_t sub_10004D5C0(uint64_t a1)
{
  *(_QWORD *)a1 = off_100174748;
  sub_100012168(a1 + 40);
  sub_10004D648(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void sub_10004D5FC(uint64_t a1)
{
  *(_QWORD *)a1 = off_100174748;
  sub_100012168(a1 + 40);
  sub_10004D648(a1 + 16, *(_QWORD **)(a1 + 24));
  operator delete();
}

void sub_10004D648(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10004D648(a1, *a2);
    sub_10004D648(a1, a2[1]);
    sub_100012168((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

uint64_t sub_10004D690(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t i;
  BOOL v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;

  v2 = *(_OWORD *)(a1 + 72);
  v20 = *(_OWORD *)(a1 + 56);
  v21 = v2;
  v22 = *(_OWORD *)(a1 + 88);
  v23 = *(_BYTE *)(a1 + 104);
  v3 = *(std::__shared_weak_count **)(a1 + 120);
  v24 = *(_QWORD *)(a1 + 112);
  v25 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v26 = *(_OWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  v19 = *(_OWORD *)(a2 + 72);
  v8 = *(std::__shared_weak_count **)(a2 + 120);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  for (i = 0; ; ++i)
  {
    v12 = (_QWORD)v20 == v6 && *((_QWORD *)&v20 + 1) == v7;
    if (v12 && (_QWORD)v21 == (_QWORD)v19)
      break;
    sub_10002BFB4((uint64_t)&v20);
  }
  if (v8)
  {
    v13 = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v15 = v25;
  if (v25)
  {
    v16 = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return i;
}

void sub_10004D808(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100012168(v2);
  sub_100012168(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10004D824(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10004DE0C((uint64_t)a1, a2);
  *a1 = off_1001747A8;
  a1[45] = &off_1001748A8;
  a1[46] = &off_1001748D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001747A8;
  a1[45] = off_100174830;
  a1[46] = off_100174858;
  return a1;
}

void sub_10004D8A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10004DE88(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004D8CC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100174870);
  sub_10004DE88(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_10004D90C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10004E474((uint64_t)a1, a2);
  *a1 = off_1001749C8;
  a1[45] = &off_100174AC8;
  a1[46] = &off_100174AF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001749C8;
  a1[45] = off_100174A50;
  a1[46] = off_100174A78;
  return a1;
}

void sub_10004D990(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10004E4F0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004D9B4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100174A90);
  sub_10004E4F0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_10004D9F4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10004EC04((uint64_t)a1, a2);
  *a1 = off_100174BE8;
  a1[45] = &off_100174CE8;
  a1[46] = &off_100174D10;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100174BE8;
  a1[45] = off_100174C70;
  a1[46] = off_100174C98;
  return a1;
}

void sub_10004DA78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10004EC80(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004DA9C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100174CB0);
  sub_10004EC80(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10004DADC(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v5 = a4[1];
  if (!v5)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = v5 << 6;
  v9 = (uint64_t *)(*a4 + 32);
  do
  {
    v11 = *v9;
    v9 += 8;
    v10 = v11;
    v12 = v11 + v6;
    v13 = v11 + v7;
    v14 = a5 - v7;
    v15 = v11 + v7 > a5;
    if (v11 + v7 >= a5)
      v7 = 0;
    else
      v7 = v13;
    if (v15)
    {
      v7 = v10;
      v16 = v14;
    }
    else
    {
      v16 = 0;
    }
    v6 = v12 + v16;
    v8 -= 64;
  }
  while (v8);
  if (v6 <= a5 + a5 * *(_QWORD *)(a1 + 24))
    return 0;
  v17 = *(_QWORD *)(a3 + 48);
  memmove(*a2, (char *)*a2 + v17, *(_QWORD *)(a3 + 32) - v17);
  return v17;
}

_QWORD *sub_10004DB70(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10004F568((uint64_t)a1, a2);
  *a1 = off_100174E08;
  a1[45] = &off_100174F08;
  a1[46] = &off_100174F30;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100174E08;
  a1[45] = off_100174E90;
  a1[46] = off_100174EB8;
  return a1;
}

void sub_10004DBF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10004F5E4(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004DC18(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100174ED0);
  sub_10004F5E4(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_10004DC58(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;

  v10 = *a1;
  sub_10004DD04((uint64_t)a1, *a1, a4, *a1 + 40 * a1[1], a2, a5, a6);
  if (v10 && a1 + 3 != (uint64_t *)*a1)
    operator delete((void *)*a1);
  v11 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v11;
  a1[2] = a3;
}

void sub_10004DCE0(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    if ((void *)(v2 + 24) != v1)
      operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004DD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v11 = a3;
  if (a2 != a3)
  {
    v12 = a2;
    do
    {
      sub_10003DF88(a5, v12);
      v12 += 40;
      a5 += 40;
    }
    while (v12 != v11);
  }
  if (a6)
  {
    v13 = a6;
    v14 = a5;
    do
    {
      v15 = sub_10003DF88(v14, a7);
      a7 += 40;
      v14 = v15 + 40;
      --v13;
    }
    while (v13);
  }
  if (v11 != a4)
  {
    v16 = a5 + 40 * a6;
    do
    {
      v17 = sub_10003DF88(v16, v11);
      v11 += 40;
      v16 = v17 + 40;
    }
    while (v11 != a4);
  }
}

void sub_10004DDB4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_10004DDBC()
{
  __break(1u);
}

void sub_10004DDF8()
{
  __cxa_end_catch();
  JUMPOUT(0x10004DE00);
}

uint64_t sub_10004DE0C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100174940;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10004DE74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004DE88(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100174940;
  sub_10004E140(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10004DF24(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100174870);
  sub_10004DE88(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10004DF78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10004DFAC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_10004DFF8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100174870);
  sub_10004DE88(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10004E030(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100174870);
  sub_10004DE88(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_10004E080(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100174870);
  sub_10004DE88(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10004E0C0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100174870);
  sub_10004DE88(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10004E11C(uint64_t a1)
{
  sub_10004DE88(a1);
  operator delete();
}

uint64_t sub_10004E140(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10004E290((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10004E268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10004E290(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 184;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 184;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10004E474(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100174B60;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10004E4DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004E4F0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100174B60;
  sub_10004E7A8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10004E58C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100174A90);
  sub_10004E4F0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10004E5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10004E614(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_10004E660(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100174A90);
  sub_10004E4F0(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10004E698(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100174A90);
  sub_10004E4F0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_10004E6E8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100174A90);
  sub_10004E4F0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10004E728(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100174A90);
  sub_10004E4F0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10004E784(uint64_t a1)
{
  sub_10004E4F0(a1);
  operator delete();
}

uint64_t sub_10004E7A8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10004E8F8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10004E8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10004E8F8(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 193;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 193;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t **sub_10004EADC(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0x38uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((_QWORD *)v12 + 5) = 0;
    *((_QWORD *)v12 + 6) = 0;
    v15 = 1;
    sub_1000284A8(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    sub_10004EBC0((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_10004EBC0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100012168((uint64_t)v2 + 40);
    operator delete(v2);
  }
}

uint64_t sub_10004EC04(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100174D80;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10004EC6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004EC80(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100174D80;
  sub_10004EF38(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10004ED1C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100174CB0);
  sub_10004EC80(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10004ED70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10004EDA4(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_10004EDF0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100174CB0);
  sub_10004EC80(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10004EE28(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100174CB0);
  sub_10004EC80(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_10004EE78(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100174CB0);
  sub_10004EC80(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10004EEB8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100174CB0);
  sub_10004EC80(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10004EF14(uint64_t a1)
{
  sub_10004EC80(a1);
  operator delete();
}

uint64_t sub_10004EF38(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10004F088((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10004F060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10004F088(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 214;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 214;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10004F26C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(result + 528))
  {
    v1 = result;
    v2 = result + 368;
    sub_100012168(result + 480);
    sub_100012168(v2);
    sub_100012168(v1 + 320);
    sub_100012168(v1 + 208);
    sub_100012168(v1 + 152);
    result = sub_100012168(v1 + 64);
    *(_BYTE *)(v1 + 528) = 0;
  }
  return result;
}

void sub_10004F2CC(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v10 = *a1;
  v11 = sub_10004F378((uint64_t)a1, a3);
  if (v11 >= 0x333333333333334)
    sub_1000158AC("get_next_capacity, allocator's max size reached");
  v12 = v11;
  v13 = operator new(40 * v11);
  sub_10004F3F0(a1, (unint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t sub_10004F378(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = 0x333333333333333;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0x333333333333333 - v4 < a2 - v4 + v3)
    sub_1000158AC("get_next_capacity, allocator's max size reached");
  v5 = v4 >> 61;
  v6 = 8 * v4;
  if (v5 > 4)
    v7 = -1;
  else
    v7 = v6;
  v8 = v6 / 5;
  if (v5)
    v8 = v7;
  v9 = v3 + a2;
  if (v8 < 0x333333333333333)
    v2 = v8;
  if (v9 <= v2)
    return v2;
  else
    return v9;
}

void sub_10004F3F0(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;

  v10 = *a1;
  sub_10004F49C((uint64_t)a1, *a1, a4, *a1 + 40 * a1[1], a2, a5, a6);
  if (v10 && a1 + 3 != (uint64_t *)*a1)
    operator delete((void *)*a1);
  v11 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v11;
  a1[2] = a3;
}

void sub_10004F478(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    if ((void *)(v2 + 24) != v1)
      operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10004F49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t result;
  unint64_t v15;

  v11 = a3;
  if (a2 != a3)
  {
    v12 = a2;
    do
    {
      v13 = sub_10003DF88(a5, v12);
      v12 += 40;
      a5 = v13 + 40;
    }
    while (v12 != v11);
  }
  result = sub_10003DF88(a5, a7);
  if (v11 != a4)
  {
    result += 40 * a6;
    do
    {
      v15 = sub_10003DF88(result, v11);
      v11 += 40;
      result = v15 + 40;
    }
    while (v11 != a4);
  }
  return result;
}

void sub_10004F52C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_10004F534()
{
  __break(1u);
}

void sub_10004F554()
{
  __cxa_end_catch();
  JUMPOUT(0x10004F55CLL);
}

uint64_t sub_10004F568(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100174FA0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10004F5D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004F5E4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100174FA0;
  sub_10004F89C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10004F680(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100174ED0);
  sub_10004F5E4(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10004F6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10004F708(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_10004F754(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100174ED0);
  sub_10004F5E4(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10004F78C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100174ED0);
  sub_10004F5E4(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_10004F7DC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100174ED0);
  sub_10004F5E4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10004F81C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100174ED0);
  sub_10004F5E4(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10004F878(uint64_t a1)
{
  sub_10004F5E4(a1);
  operator delete();
}

uint64_t sub_10004F89C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10004F9EC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10004F9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10004F9EC(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 254;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 254;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10004FBD0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10018C040;
  sub_10004D648(a1 + 104, *(_QWORD **)(a1 + 112));
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    operator delete();
  sub_100012168(a1 + 56);
  sub_100027D5C(a1 + 32, *(_QWORD **)(a1 + 40));
  sub_100027D5C(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_10004FC48@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[12];
  int v5;
  __int128 v6;
  __int128 v7;
  _BYTE v8[22];
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[22];
  __int16 v16;
  uint64_t v17;
  int v18;
  int v19;

  sub_1000D11F8(v4, *a1);
  v10 = 2003069043;
  v11 = *(_QWORD *)&v4[4];
  v12 = v5;
  v13 = v6;
  v14 = v7;
  *(_OWORD *)v15 = *(_OWORD *)v8;
  *(_QWORD *)&v15[14] = *(_QWORD *)&v8[14];
  v16 = 0;
  v17 = v9;
  v18 = 2;
  v19 = 8;
  sub_10004B304(a2, (uint64_t)&v10);
  *(_DWORD *)(a2 + 512) = v19;
  *(_BYTE *)(a2 + 520) = 1;
  return sub_10004B46C((uint64_t)&v10);
}

void sub_10004FD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
  {
    sub_10004B46C((uint64_t)&a19);
    __cxa_begin_catch(exception_object);
    sub_10004B110();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004FD80@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  _OWORD v6[31];
  int v7;
  _BYTE v8[512];
  int v9;

  sub_10004FEA8((unint64_t *)&v5, *a1, a2);
  v6[0] = v5;
  v7 = 3;
  sub_10004B304((uint64_t)v8, (uint64_t)v6);
  v9 = 1;
  sub_10004B304(a3, (uint64_t)v8);
  *(_DWORD *)(a3 + 512) = v9;
  *(_BYTE *)(a3 + 520) = 1;
  sub_10004B46C((uint64_t)v8);
  return sub_10004B46C((uint64_t)v6);
}

void sub_10004FE34(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  if (a2)
  {
    sub_10004B46C((uint64_t)&STACK[0x210]);
    sub_10004B46C((uint64_t)va);
    __cxa_begin_catch(a1);
    sub_10004B110();
  }
  _Unwind_Resume(a1);
}

unint64_t *sub_10004FEA8(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  void *exception;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v6 = 512;
  if (a3)
    v6 = a3;
  if (v5 % v6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_10004A0E8((uint64_t)exception, (uint64_t)"raw_header", 0x16u);
  }
  *a1 = v6;
  a1[1] = v5 / v6;
  return a1;
}

void sub_10004FF2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004FF40(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *exception;
  const std::error_category *v9;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_100175020;
  v4 = a2[1];
  *(_QWORD *)(a1 + 16) = *a2;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 32) = a3;
  if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2) % a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_1001924F8;
    v9 = std::generic_category();
    exception[1] = 152;
    exception[2] = v9;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Size is not a multiple of block size";
  }
  return a1;
}

void sub_100050018(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100012168(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100050034(_QWORD *a1)
{
  *a1 = off_100175020;
  sub_100012168((uint64_t)(a1 + 2));
  return a1;
}

void sub_100050064(_QWORD *a1)
{
  *a1 = off_100175020;
  sub_100012168((uint64_t)(a1 + 2));
  operator delete();
}

uint64_t sub_1000500A4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

unint64_t sub_1000500AC(uint64_t a1)
{
  return (unint64_t)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16))
       / *(_QWORD *)(a1 + 32);
}

uint64_t sub_1000500E0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

void sub_1000500F0()
{
  operator new();
}

void sub_10005014C()
{
  operator delete();
}

uint64_t sub_100050170(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_100050180(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

void sub_100050190()
{
  operator new();
}

void sub_1000501EC()
{
  operator delete();
}

uint64_t sub_100050210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  unsigned int *v35;
  uint64_t v36;
  int v37;
  int v38;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  _OWORD v53[2];
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  __int128 v61;
  uint64_t v62;
  char v63;
  _QWORD v64[2];
  void *__p;
  __int128 v66;
  _BYTE v67[640];

  __p = v67;
  v66 = xmmword_100140690;
  v7 = sub_10004D690(a3, a4);
  v8 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334)
      sub_1000158AC("get_next_capacity, allocator's max size reached");
    v9 = operator new(40 * v7);
    sub_10004DC58((uint64_t *)&__p, (unint64_t)v9, v8, (uint64_t)__p + 40 * v66, 0, 0);
  }
  v64[0] = &__p;
  v64[1] = a2;
  v10 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v52 = *(_QWORD *)a3;
  *((_QWORD *)&v52 + 1) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v53[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)(a3 + 25);
  v54 = *(_QWORD *)(a3 + 48);
  v55 = *(_OWORD *)(a3 + 56);
  v56 = *(_OWORD *)(a3 + 72);
  v57 = *(_OWORD *)(a3 + 88);
  v58 = *(_BYTE *)(a3 + 104);
  v13 = *(std::__shared_weak_count **)(a3 + 120);
  v59 = *(_QWORD *)(a3 + 112);
  v60 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v61 = *(_OWORD *)(a3 + 128);
  v62 = *(_QWORD *)(a3 + 144);
  v63 = *(_BYTE *)(a3 + 152);
  v16 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)&v40 = *(_QWORD *)a4;
  *((_QWORD *)&v40 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v41[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v41 + 9) = *(_OWORD *)(a4 + 25);
  v42 = *(_QWORD *)(a4 + 48);
  v43 = *(_OWORD *)(a4 + 56);
  v44 = *(_OWORD *)(a4 + 72);
  v45 = *(_OWORD *)(a4 + 88);
  v46 = *(_BYTE *)(a4 + 104);
  v19 = *(std::__shared_weak_count **)(a4 + 120);
  v47 = *(_QWORD *)(a4 + 112);
  v48 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v49 = *(_OWORD *)(a4 + 128);
  v50 = *(_QWORD *)(a4 + 144);
  v51 = *(_BYTE *)(a4 + 152);
  sub_100050AE8((uint64_t)v64, &v52, &v40, 0xFFFFFFFFFFFFFFFFLL);
  v22 = v48;
  if (v48)
  {
    v23 = (unint64_t *)&v48->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v60;
  if (v60)
  {
    v29 = (unint64_t *)&v60->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 144))(*(_QWORD *)(a2 + 16));
  if ((_QWORD)v66)
  {
    v34 = 0;
    v35 = (unsigned int *)__p;
    v36 = 40 * v66;
    do
    {
      v37 = sub_100039604(v35);
      v38 = v37;
      if (v37 < 0)
        break;
      v34 += v37;
      v35 += 10;
      v38 = v34;
      v36 -= 40;
    }
    while (v36);
  }
  else
  {
    v38 = 0;
  }
  if (*((_QWORD *)&v66 + 1) && v67 != __p)
    operator delete(__p);
  return v38;
}

void sub_1000505B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53)
{
  uint64_t v53;
  uint64_t v54;
  void *v55;

  sub_100012168(v54);
  sub_100012168((uint64_t)&a9);
  sub_100012168(v53);
  sub_100012168((uint64_t)&a29);
  if (a53)
  {
    if (v55 != __p)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100050600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  unsigned int *v35;
  uint64_t v36;
  int v37;
  int v38;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  _OWORD v53[2];
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  __int128 v61;
  uint64_t v62;
  char v63;
  _QWORD v64[2];
  void *__p;
  __int128 v66;
  _BYTE v67[640];

  __p = v67;
  v66 = xmmword_100140690;
  v7 = sub_10004D690(a3, a4);
  v8 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334)
      sub_1000158AC("get_next_capacity, allocator's max size reached");
    v9 = operator new(40 * v7);
    sub_10004DC58((uint64_t *)&__p, (unint64_t)v9, v8, (uint64_t)__p + 40 * v66, 0, 0);
  }
  v64[0] = &__p;
  v64[1] = a2;
  v10 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v52 = *(_QWORD *)a3;
  *((_QWORD *)&v52 + 1) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v53[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)(a3 + 25);
  v54 = *(_QWORD *)(a3 + 48);
  v55 = *(_OWORD *)(a3 + 56);
  v56 = *(_OWORD *)(a3 + 72);
  v57 = *(_OWORD *)(a3 + 88);
  v58 = *(_BYTE *)(a3 + 104);
  v13 = *(std::__shared_weak_count **)(a3 + 120);
  v59 = *(_QWORD *)(a3 + 112);
  v60 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v61 = *(_OWORD *)(a3 + 128);
  v62 = *(_QWORD *)(a3 + 144);
  v63 = *(_BYTE *)(a3 + 152);
  v16 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)&v40 = *(_QWORD *)a4;
  *((_QWORD *)&v40 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v41[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v41 + 9) = *(_OWORD *)(a4 + 25);
  v42 = *(_QWORD *)(a4 + 48);
  v43 = *(_OWORD *)(a4 + 56);
  v44 = *(_OWORD *)(a4 + 72);
  v45 = *(_OWORD *)(a4 + 88);
  v46 = *(_BYTE *)(a4 + 104);
  v19 = *(std::__shared_weak_count **)(a4 + 120);
  v47 = *(_QWORD *)(a4 + 112);
  v48 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v49 = *(_OWORD *)(a4 + 128);
  v50 = *(_QWORD *)(a4 + 144);
  v51 = *(_BYTE *)(a4 + 152);
  sub_1000510A0((uint64_t)v64, &v52, &v40, 0xFFFFFFFFFFFFFFFFLL);
  v22 = v48;
  if (v48)
  {
    v23 = (unint64_t *)&v48->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v60;
  if (v60)
  {
    v29 = (unint64_t *)&v60->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 144))(*(_QWORD *)(a2 + 16));
  if ((_QWORD)v66)
  {
    v34 = 0;
    v35 = (unsigned int *)__p;
    v36 = 40 * v66;
    do
    {
      v37 = sub_100039604(v35);
      v38 = v37;
      if (v37 < 0)
        break;
      v34 += v37;
      v35 += 10;
      v38 = v34;
      v36 -= 40;
    }
    while (v36);
  }
  else
  {
    v38 = 0;
  }
  if (*((_QWORD *)&v66 + 1) && v67 != __p)
    operator delete(__p);
  return v38;
}

void sub_1000509A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53)
{
  uint64_t v53;
  uint64_t v54;
  void *v55;

  sub_100012168(v54);
  sub_100012168((uint64_t)&a9);
  sub_100012168(v53);
  sub_100012168((uint64_t)&a29);
  if (a53)
  {
    if (v55 != __p)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000509F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16), a3);
}

uint64_t sub_100050A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *i;
  uint64_t result;

  if (!a4)
    return 0;
  v4 = a4;
  for (i = (_QWORD *)(a3 + 8); ; i += 2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a2 + 16) + 24))(*(_QWORD *)(a2 + 16), *(_QWORD *)(a1 + 32) * *(i - 1), *i * *(_QWORD *)(a1 + 32));
    if ((_DWORD)result)
      break;
    if (!--v4)
      return 0;
  }
  return result;
}

_QWORD *sub_100050A78(_QWORD *a1)
{
  *a1 = off_100175120;
  sub_100012168((uint64_t)(a1 + 2));
  return a1;
}

void sub_100050AA8(_QWORD *a1)
{
  *a1 = off_100175120;
  sub_100012168((uint64_t)(a1 + 2));
  operator delete();
}

uint64_t sub_100050AE8(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v29;
  _OWORD v30[2];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v40 = v4;
  v41[0] = v5;
  *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)a2 + 25);
  v42 = *((_QWORD *)a2 + 6);
  v43 = *(__int128 *)((char *)a2 + 56);
  v44 = *(__int128 *)((char *)a2 + 72);
  v45 = *(__int128 *)((char *)a2 + 88);
  v46 = *((_BYTE *)a2 + 104);
  v6 = a2[7];
  v7 = a2[8];
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  v47 = v6;
  v48 = v7;
  v50 = *((_BYTE *)a2 + 152);
  v49 = *((_QWORD *)a2 + 18);
  v8 = *a3;
  v9 = a3[1];
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a3 + 25);
  v31 = *((_QWORD *)a3 + 6);
  v32 = *(__int128 *)((char *)a3 + 56);
  v10 = *(__int128 *)((char *)a3 + 72);
  v11 = *(__int128 *)((char *)a3 + 88);
  v35 = *((_BYTE *)a3 + 104);
  v34 = v11;
  v33 = v10;
  v12 = a3[7];
  v13 = a3[8];
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 15) = 0;
  v36 = v12;
  v37 = v13;
  v14 = *((_QWORD *)a3 + 18);
  v39 = *((_BYTE *)a3 + 152);
  v38 = v14;
  v15 = sub_100050D04(a1, &v40, (uint64_t)&v29, a4, 0);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v15;
}

void sub_100050CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  sub_100012168(v30);
  sub_100012168((uint64_t)&a9);
  sub_100012168(v29);
  sub_100012168((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_100050D04(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  _BYTE v25[112];
  uint64_t v26;
  _QWORD v27[2];
  char v28;
  _BYTE v29[248];
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int64_t v33;
  unint64_t v34;
  _BYTE v35[536];
  uint64_t v36;

  v7 = 0;
  v8 = *(_QWORD *)(a3 + 144);
  v35[0] = 0;
  v35[528] = 0;
  while (!sub_10002C4A4((uint64_t)a2, a3))
  {
    if (a2[18] >= v8 || v7 >= a4)
      break;
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v32 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at app/disk_images/formats/raw.h:54:22)]";
      *((_QWORD *)&v32 + 1) = 104;
      LODWORD(v33) = 2;
      sub_10003722C(v27, &v32);
      sub_100005A0C(&v30, (uint64_t)"sg: ", 4);
      sub_10011E628(&v30, a2);
      std::ostream::~ostream(&v30, off_100171F10);
      sub_100037460((uint64_t)v27);
      std::ios::~ios(&v31);
    }
    v27[0] = 0;
    v27[1] = v8;
    v28 = 2;
    sub_100075798(a2, (uint64_t)v27, (uint64_t)&v32);
    v10 = *(uint64_t **)a1;
    (*(void (**)(_QWORD *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 128))(v27, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), &v32);
    v11 = v10[1];
    if (v11 == v10[2])
    {
      sub_10004F2CC(v10, *v10 + 40 * v11, 1, (uint64_t)v27, &v36);
    }
    else
    {
      sub_10003DF88(*v10 + 40 * v11, (uint64_t)v27);
      ++v10[1];
    }
    v12 = (int)v33;
    if ((v33 & 0x80000000) != 0)
      v13 = (int)v33;
    else
      v13 = v33;
    v14 = v13 >= 0 || (_DWORD)v13 == 0;
    v15 = v14;
    if (v14)
    {
      v16 = v34;
      if (sub_10002E788((uint64_t)a2, a3, v34, v13))
      {
        sub_10002E8C4((uint64_t)v25, (uint64_t)a2);
        sub_10002E74C((uint64_t)v25, a3, v16, v13, a4, (uint64_t)v27);
        sub_100037314((uint64_t)v35, (uint64_t)v27);
        sub_10002E7A4((uint64_t)v27);
        sub_100012168((uint64_t)&v26);
        sub_100012168((uint64_t)v25);
        sub_10002CA7C((uint64_t)v35, (uint64_t)v27);
        sub_100037358((uint64_t)a2, (uint64_t)v27);
        sub_100012168((uint64_t)v29);
        sub_100012168((uint64_t)v27);
        sub_10002C64C((uint64_t)v35, (uint64_t)v27);
        sub_100037358(a3, (uint64_t)v27);
        sub_100012168((uint64_t)v29);
        sub_100012168((uint64_t)v27);
      }
      if ((a5 & 1) != 0)
        sub_10002D5FC((uint64_t)a2, v13);
      else
        sub_10002D7D4((uint64_t)a2, v13);
      v7 += v13;
    }
    else
    {
      if ((int)v33 >= 0)
        v12 = -(uint64_t)(int)v33;
      v21 = v12;
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if ((v15 & 1) == 0)
      goto LABEL_40;
  }
  v21 = v7;
LABEL_40:
  sub_10002EB64((uint64_t)v35);
  return v21;
}

void sub_10005102C(_Unwind_Exception *a1)
{
  sub_100012168((uint64_t)&STACK[0x2E8]);
  sub_10002EB64((uint64_t)&STACK[0x318]);
  _Unwind_Resume(a1);
}

uint64_t sub_1000510A0(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v29;
  _OWORD v30[2];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v40 = v4;
  v41[0] = v5;
  *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)a2 + 25);
  v42 = *((_QWORD *)a2 + 6);
  v43 = *(__int128 *)((char *)a2 + 56);
  v44 = *(__int128 *)((char *)a2 + 72);
  v45 = *(__int128 *)((char *)a2 + 88);
  v46 = *((_BYTE *)a2 + 104);
  v6 = a2[7];
  v7 = a2[8];
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  v47 = v6;
  v48 = v7;
  v50 = *((_BYTE *)a2 + 152);
  v49 = *((_QWORD *)a2 + 18);
  v8 = *a3;
  v9 = a3[1];
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a3 + 25);
  v31 = *((_QWORD *)a3 + 6);
  v32 = *(__int128 *)((char *)a3 + 56);
  v10 = *(__int128 *)((char *)a3 + 72);
  v11 = *(__int128 *)((char *)a3 + 88);
  v35 = *((_BYTE *)a3 + 104);
  v34 = v11;
  v33 = v10;
  v12 = a3[7];
  v13 = a3[8];
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 15) = 0;
  v36 = v12;
  v37 = v13;
  v14 = *((_QWORD *)a3 + 18);
  v39 = *((_BYTE *)a3 + 152);
  v38 = v14;
  v15 = sub_1000512BC(a1, &v40, (uint64_t)&v29, a4, 0);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v15;
}

void sub_100051290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  sub_100012168(v30);
  sub_100012168((uint64_t)&a9);
  sub_100012168(v29);
  sub_100012168((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_1000512BC(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  _BYTE v25[112];
  uint64_t v26;
  _QWORD v27[2];
  char v28;
  _BYTE v29[248];
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int64_t v33;
  unint64_t v34;
  _BYTE v35[536];
  uint64_t v36;

  v7 = 0;
  v8 = *(_QWORD *)(a3 + 144);
  v35[0] = 0;
  v35[528] = 0;
  while (!sub_10002C4A4((uint64_t)a2, a3))
  {
    if (a2[18] >= v8 || v7 >= a4)
      break;
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v32 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at app/disk_images/formats/raw.h:67:22)]";
      *((_QWORD *)&v32 + 1) = 104;
      LODWORD(v33) = 2;
      sub_10003722C(v27, &v32);
      sub_100005A0C(&v30, (uint64_t)"sg: ", 4);
      sub_10011E628(&v30, a2);
      std::ostream::~ostream(&v30, off_100171F10);
      sub_100037460((uint64_t)v27);
      std::ios::~ios(&v31);
    }
    v27[0] = 0;
    v27[1] = v8;
    v28 = 2;
    sub_100075798(a2, (uint64_t)v27, (uint64_t)&v32);
    v10 = *(uint64_t **)a1;
    (*(void (**)(_QWORD *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 136))(v27, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), &v32);
    v11 = v10[1];
    if (v11 == v10[2])
    {
      sub_10004F2CC(v10, *v10 + 40 * v11, 1, (uint64_t)v27, &v36);
    }
    else
    {
      sub_10003DF88(*v10 + 40 * v11, (uint64_t)v27);
      ++v10[1];
    }
    v12 = (int)v33;
    if ((v33 & 0x80000000) != 0)
      v13 = (int)v33;
    else
      v13 = v33;
    v14 = v13 >= 0 || (_DWORD)v13 == 0;
    v15 = v14;
    if (v14)
    {
      v16 = v34;
      if (sub_10002E788((uint64_t)a2, a3, v34, v13))
      {
        sub_10002E8C4((uint64_t)v25, (uint64_t)a2);
        sub_10002E74C((uint64_t)v25, a3, v16, v13, a4, (uint64_t)v27);
        sub_100037314((uint64_t)v35, (uint64_t)v27);
        sub_10002E7A4((uint64_t)v27);
        sub_100012168((uint64_t)&v26);
        sub_100012168((uint64_t)v25);
        sub_10002CA7C((uint64_t)v35, (uint64_t)v27);
        sub_100037358((uint64_t)a2, (uint64_t)v27);
        sub_100012168((uint64_t)v29);
        sub_100012168((uint64_t)v27);
        sub_10002C64C((uint64_t)v35, (uint64_t)v27);
        sub_100037358(a3, (uint64_t)v27);
        sub_100012168((uint64_t)v29);
        sub_100012168((uint64_t)v27);
      }
      if ((a5 & 1) != 0)
        sub_10002D5FC((uint64_t)a2, v13);
      else
        sub_10002D7D4((uint64_t)a2, v13);
      v7 += v13;
    }
    else
    {
      if ((int)v33 >= 0)
        v12 = -(uint64_t)(int)v33;
      v21 = v12;
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if ((v15 & 1) == 0)
      goto LABEL_40;
  }
  v21 = v7;
LABEL_40:
  sub_10002EB64((uint64_t)v35);
  return v21;
}

void sub_1000515E4(_Unwind_Exception *a1)
{
  sub_100012168((uint64_t)&STACK[0x2E8]);
  sub_10002EB64((uint64_t)&STACK[0x318]);
  _Unwind_Resume(a1);
}

void sub_10005165C(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

const std::error_category *sub_100051684@<X0>(const std::error_category *result@<X0>, uint64_t a2@<X8>)
{
  char v3;
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;

  if (LODWORD(result[70].__vftable) == 12 || result[3].__vftable)
  {
    *(_BYTE *)a2 = 0;
    v3 = 1;
  }
  else
  {
    *(_QWORD *)&v4 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::verify_backend() const";
    *((_QWORD *)&v4 + 1) = 81;
    v5 = 16;
    sub_100051758(v6, &v4);
    sub_100005A0C(&v7, (uint64_t)"Diskimageuio: backend doesn't exist", 35);
    std::ostream::~ostream(&v7, off_100175288);
    sub_1000518BC((uint64_t)v6);
    std::ios::~ios(&v8);
    result = std::generic_category();
    v3 = 0;
    *(_QWORD *)a2 = 6;
    *(_QWORD *)(a2 + 8) = result;
  }
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

void sub_100051744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100051800((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100051758(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100051840((uint64_t)a1, a2);
  *a1 = off_1001751C0;
  a1[45] = &off_1001752C0;
  a1[46] = &off_1001752E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001751C0;
  a1[45] = off_100175248;
  a1[46] = off_100175270;
  return a1;
}

void sub_1000517DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000518BC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100051800(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100175288);
  sub_1000518BC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100051840(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100175358;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000518A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000518BC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100175358;
  sub_100051B74(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100051958(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100175288);
  sub_1000518BC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000519AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000519E0(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100051A2C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100175288);
  sub_1000518BC(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100051A64(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100175288);
  sub_1000518BC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100051AB4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100175288);
  sub_1000518BC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100051AF4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100175288);
  sub_1000518BC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100051B50(uint64_t a1)
{
  sub_1000518BC(a1);
  operator delete();
}

uint64_t sub_100051B74(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100051CC4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100051C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100051CC4(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 617;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 617;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void sub_100051EAC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100051ED0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_100051EE8(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

uint64_t *sub_100051F28(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 24);
    v2 -= 24;
    *(_OWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 16);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100051F8C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_100012320();
  return operator new(24 * a2);
}

uint64_t sub_100051FD0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_100012168(i - 24);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100052020(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

void sub_100052044(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;
  _QWORD v13[10];
  char v14;
  uint64_t v15;
  void *v16[2];
  unsigned __int8 v17;

  v4 = (char *)sub_100110904(a1);
  sub_100005870(v16, v4);
  sub_100027EC8((uint64_t)v11);
  if ((v17 & 0x80u) == 0)
    v5 = v16;
  else
    v5 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v6 = v17;
  else
    v6 = (uint64_t)v16[1];
  v7 = sub_100005A0C(&v12, (uint64_t)v5, v6);
  v8 = sub_100005A0C(v7, (uint64_t)" [", 2);
  *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 8;
  v9 = (_QWORD *)std::ostream::operator<<(v8, *(unsigned int *)(a1 + 32));
  sub_100005A0C(v9, (uint64_t)"]", 1);
  sub_100005598((uint64_t)v13, a2);
  *(_QWORD *)((char *)v11
  v12 = v10;
  if (v14 < 0)
    operator delete((void *)v13[8]);
  std::streambuf::~streambuf(v13);
  std::ios::~ios(&v15);
  if ((char)v17 < 0)
    operator delete(v16[0]);
}

void sub_100052184(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_100012168(v4 - 24);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1000521F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _BYTE *v6;
  __int128 v7;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_100177B28;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (_BYTE *)(a1 + 32);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100041DD0(v6, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v6 = v7;
  }
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  return a1;
}

void sub_10005228C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100012168(v1);
  _Unwind_Resume(a1);
}

void sub_1000522A4()
{
  operator delete();
}

_QWORD *sub_1000522B8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_100175480;
  return result;
}

void sub_1000522DC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_100175480;
}

_QWORD *sub_1000522F4@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, _QWORD *, _QWORD, _QWORD *, _QWORD))(*(_QWORD *)*a1 + 128))(&v5, *a1, a1, a1[5], a1 + 1, *a2);
  *a3 = v5;
  return result;
}

uint64_t sub_100052340(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_1001754F0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10005237C()
{
  return &off_1001754F0;
}

uint64_t sub_100052388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v7 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 80);
  if (!v4)
    sub_100017C6C();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(&v6, v4, a1, &v7);
  sub_100052428(a2, &v6, *(_DWORD *)(a1 + 48));
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_100052404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100052428(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD v8[2];

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = qword_1001A05E0;
  *(_QWORD *)(a1 + 8) = qword_1001A05E0;
  v6 = (_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = 2;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = a3;
  sub_1000EBE38((_DWORD *)a1, (uint64_t)v8);
  *v6 = v8[0];
  *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)((char *)v8 + 12);
  return a1;
}

void sub_100052498(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000524BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v7 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 80);
  if (!v4)
    sub_100017C6C();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(&v6, v4, a1, &v7);
  sub_100052428(a2, &v6, *(_DWORD *)(a1 + 48));
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_100052538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10005255C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100052E3C((uint64_t)a1, a2);
  *a1 = off_100175518;
  a1[45] = &off_100175618;
  a1[46] = &off_100175640;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100175518;
  a1[45] = off_1001755A0;
  a1[46] = off_1001755C8;
  return a1;
}

void sub_1000525E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100052EB8(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100052604(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001755E0);
  sub_100052EB8(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_OWORD *sub_100052644@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _OWORD *result;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  char v25;
  int v26;
  unsigned int *v27;
  const std::error_category *v28;
  __int128 v29;
  int v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  _BYTE v34[152];
  unsigned int v35[4];
  char v36;
  void *__p[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _BYTE v41[152];
  char v42;

  v8 = a1 + 24;
  if (!*(_QWORD *)(a1 + 24) || *(_DWORD *)(a1 + 568) != a2)
  {
    sub_1000534A4((_QWORD *)(a1 + 24));
    v38 = 0u;
    v39 = 0u;
    *(_OWORD *)__p = 0u;
    sub_100015BC8(a1 + 576, (__int128 *)__p);
    sub_100015BC8(a1 + 592, &v38);
    sub_100015BC8(a1 + 608, &v39);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    if (*((_QWORD *)&v38 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v16 = (unint64_t *)((char *)__p[1] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (*(char *)(a1 + 23) < 0)
    {
      sub_100041DD0(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a1;
      *(_QWORD *)&v38 = *(_QWORD *)(a1 + 16);
    }
    v35[0] = 2 * ((a2 - 1) < 2);
    sub_100053E58((uint64_t)__p, v35, &v31);
    sub_100015BC8(v8, &v31);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (SBYTE7(v38) < 0)
      operator delete(__p[0]);
    *(_DWORD *)(a1 + 568) = a2;
    operator new();
  }
  sub_100049924((const std::error_category *)a1, (BOOL *)v35);
  if (!v36)
  {
    *(_QWORD *)&v31 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((_QWORD *)&v31 + 1) = 83;
    v32 = 16;
    sub_10005357C(__p, &v31);
    sub_100005A0C(&v40, (uint64_t)"Diskimageuio: Couldn't get locked status ", 41);
    v23 = (unsigned int *)sub_100049170((uint64_t)v35);
    sub_100053500((uint64_t)__p, v23);
    std::ostream::~ostream(&v40, off_100175850);
    sub_100053FF8((uint64_t)__p);
    std::ios::~ios(v41);
    result = (_OWORD *)sub_100049170((uint64_t)v35);
    *(_OWORD *)a4 = *result;
    goto LABEL_33;
  }
  if (LOBYTE(v35[0]))
  {
    *(_QWORD *)&v31 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((_QWORD *)&v31 + 1) = 83;
    v32 = 16;
    sub_100053D70(__p, &v31);
    sub_100005A0C(&v40, (uint64_t)"Diskimageuio: decryption key missing", 36);
    std::ostream::~ostream(&v40, off_100176950);
    sub_1000579F8((uint64_t)__p);
    std::ios::~ios(v41);
    result = (_OWORD *)make_error_code(162);
    *(_QWORD *)a4 = result;
    *(_QWORD *)(a4 + 8) = v22;
LABEL_33:
    *(_BYTE *)(a4 + 16) = 0;
    return result;
  }
  *(_QWORD *)&v31 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
  *((_QWORD *)&v31 + 1) = 83;
  v32 = 2;
  sub_100053664(__p, &v31);
  sub_100005A0C(&v40, (uint64_t)"Diskimageuio: backend isn't locked", 34);
  std::ostream::~ostream(&v40, off_100175A70);
  sub_100054660((uint64_t)__p);
  std::ios::~ios(v41);
  sub_10005374C(a1, 0, (uint64_t)__p);
  if (v42)
  {
    v24 = sub_100053C34((uint64_t)__p);
    sub_10004A544(a1 + 48, v24);
    *(_DWORD *)(a1 + 560) = *(_DWORD *)(v24 + 512);
    *(_QWORD *)&v29 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((_QWORD *)&v29 + 1) = 83;
    v30 = 2;
    sub_100053C88(&v31, &v29);
    sub_100005A0C(&v33, (uint64_t)"Diskimageuio: resolved disk image format ", 41);
    diskimage_uio::operator<<(&v33, *(_DWORD *)(a1 + 560));
    std::ostream::~ostream(&v33, off_100176730);
    sub_100057390((uint64_t)&v31);
    result = (_OWORD *)std::ios::~ios(v34);
    *(_BYTE *)a4 = 0;
    v25 = 1;
  }
  else
  {
    v26 = *(_DWORD *)(a1 + 564);
    if (v26)
    {
      if (*(_DWORD *)(a1 + 568) != v26)
      {
        v27 = (unsigned int *)sub_100053A24((uint64_t)__p);
        v28 = std::generic_category();
        *(_QWORD *)&v31 = 35;
        *((_QWORD *)&v31 + 1) = v28;
        if ((*(unsigned int (**)(_QWORD, _QWORD, __int128 *))(**((_QWORD **)v27 + 1) + 32))(*((_QWORD *)v27 + 1), *v27, &v31)|| (*(unsigned int (**)(_QWORD, unsigned int *, _QWORD))(**((_QWORD **)&v31 + 1) + 40))(*((_QWORD *)&v31 + 1), v27, v31))
        {
          *(_QWORD *)&v29 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
          *((_QWORD *)&v29 + 1) = 83;
          v30 = 2;
          sub_10003722C(&v31, &v29);
          sub_100005A0C(&v33, (uint64_t)"Diskimageuio: required mode ", 28);
          diskimage_uio::operator<<(&v33, *(_DWORD *)(a1 + 564));
          sub_100005A0C(&v33, (uint64_t)" is different than current mode ", 32);
          diskimage_uio::operator<<(&v33, *(_DWORD *)(a1 + 568));
          std::ostream::~ostream(&v33, off_100171F10);
          sub_100037460((uint64_t)&v31);
          std::ios::~ios(v34);
          if (a3)
          {
            *(_QWORD *)&v29 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
            *((_QWORD *)&v29 + 1) = 83;
            v30 = 2;
            sub_100053A64(&v31, &v29);
            sub_100005A0C(&v33, (uint64_t)"Diskimageuio: reopen backend to required mode ", 46);
            diskimage_uio::operator<<(&v33, *(_DWORD *)(a1 + 564));
            sub_100053B0C((uint64_t)&v31);
            result = (_OWORD *)sub_100052644(a1, *(unsigned int *)(a1 + 564), 0);
            goto LABEL_46;
          }
          *(_QWORD *)&v29 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
          *((_QWORD *)&v29 + 1) = 83;
          v30 = 16;
          sub_100053B4C(&v31, &v29);
          sub_100005A0C(&v33, (uint64_t)"Diskimageuio: required mode ", 28);
          diskimage_uio::operator<<(&v33, *(_DWORD *)(a1 + 564));
          sub_100005A0C(&v33, (uint64_t)" is different than current mode ", 32);
          diskimage_uio::operator<<(&v33, *(_DWORD *)(a1 + 568));
          sub_100053BF4((uint64_t)&v31);
        }
      }
    }
    result = (_OWORD *)sub_100053A24((uint64_t)__p);
    v25 = 0;
    *(_OWORD *)a4 = *result;
  }
  *(_BYTE *)(a4 + 16) = v25;
LABEL_46:
  if (v42)
    return (_OWORD *)sub_10004B46C((uint64_t)__p);
  return result;
}

void sub_100052CB8(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x448]))
    sub_10004B46C((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

uint64_t sub_100052E3C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001756B0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100052EA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100052EB8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001756B0;
  sub_100053170(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100052F54(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001755E0);
  sub_100052EB8(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100052FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100052FDC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100053028(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001755E0);
  sub_100052EB8(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100053060(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001755E0);
  sub_100052EB8(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_1000530B0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001755E0);
  sub_100052EB8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000530F0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001755E0);
  sub_100052EB8(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10005314C(uint64_t a1)
{
  sub_100052EB8(a1);
  operator delete();
}

uint64_t sub_100053170(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000532C0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100053298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_1000532C0(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 573;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 573;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void sub_1000534A4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_100053500(uint64_t a1, unsigned int *a2)
{
  _QWORD *v4;
  const char *v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char v10;

  v4 = (_QWORD *)(a1 + 360);
  v5 = (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 16))(*((_QWORD *)a2 + 1));
  v6 = strlen(v5);
  v7 = sub_100005A0C(v4, (uint64_t)v5, v6);
  v10 = 58;
  v8 = sub_100005A0C(v7, (uint64_t)&v10, 1);
  std::ostream::operator<<(v8, *a2);
  return a1;
}

_QWORD *sub_10005357C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100053F7C((uint64_t)a1, a2);
  *a1 = off_100175788;
  a1[45] = &off_100175888;
  a1[46] = &off_1001758B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100175788;
  a1[45] = off_100175810;
  a1[46] = off_100175838;
  return a1;
}

void sub_100053600(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100053FF8(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100053624(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100175850);
  sub_100053FF8(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100053664(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000545E4((uint64_t)a1, a2);
  *a1 = off_1001759A8;
  a1[45] = &off_100175AA8;
  a1[46] = &off_100175AD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001759A8;
  a1[45] = off_100175A30;
  a1[46] = off_100175A58;
  return a1;
}

void sub_1000536E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100054660(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10005370C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100175A70);
  sub_100054660(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

double sub_10005374C@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  double result;
  unsigned int *v8;
  int v9;
  _QWORD *v10;
  const std::error_category *v11;
  __int128 v12;
  int v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD v19[33];
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  double v23[64];
  int v24;
  unsigned __int8 v25;

  sub_100054C4C(0, (uint64_t *)(a1 + 24), *(_DWORD *)(a1 + 564) == 0, a1, a2, (uint64_t)v23);
  if (v25)
  {
    v5 = sub_100053C34((uint64_t)v23);
    sub_10004B304((uint64_t)v19, v5);
    v22 = *(_DWORD *)(v5 + 512);
    v6 = v22 > 0xB || ((1 << v22) & 0x982) == 0;
    if (v6 || *(_DWORD *)(a1 + 568) || !*(_DWORD *)(a1 + 564))
    {
      sub_10004B304((uint64_t)&v14, (uint64_t)v19);
      v18 = v22;
      sub_10004B304(a3, (uint64_t)&v14);
      *(_DWORD *)(a3 + 512) = v18;
      *(_BYTE *)(a3 + 520) = 1;
      sub_10004B46C((uint64_t)&v14);
    }
    else
    {
      *(_QWORD *)&v12 = "image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header(size_t)";
      *((_QWORD *)&v12 + 1) = 107;
      v13 = 2;
      sub_10005513C(&v14, &v12);
      sub_100005A0C(&v16, (uint64_t)"Diskimageuio: Required read-write disk image (", 46);
      v10 = diskimage_uio::operator<<(&v16, v22);
      sub_100005A0C(v10, (uint64_t)")", 1);
      std::ostream::~ostream(&v16, off_1001760D0);
      sub_100056058((uint64_t)&v14);
      std::ios::~ios(&v17);
      v11 = std::generic_category();
      *(_QWORD *)a3 = 35;
      *(_QWORD *)(a3 + 8) = v11;
      *(_BYTE *)(a3 + 520) = 0;
    }
    sub_10004B46C((uint64_t)v19);
  }
  else
  {
    *(_QWORD *)&v14 = "image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header(size_t)";
    *((_QWORD *)&v14 + 1) = 107;
    v15 = 16;
    sub_100055054(v19, &v14);
    sub_100005A0C(&v20, (uint64_t)"Diskimageuio: Couldn't get diskimage: ", 38);
    v8 = (unsigned int *)sub_100053A24((uint64_t)v23);
    sub_100053500((uint64_t)v19, v8);
    std::ostream::~ostream(&v20, off_100175EB0);
    sub_1000559F0((uint64_t)v19);
    std::ios::~ios(&v21);
    *(_BYTE *)a3 = 0;
    v9 = v25;
    *(_BYTE *)(a3 + 520) = v25;
    if (!v9)
    {
      result = v23[0];
      *(_OWORD *)a3 = *(_OWORD *)v23;
      return result;
    }
    sub_10004B304(a3, (uint64_t)v23);
    *(_DWORD *)(a3 + 512) = v24;
  }
  if (v25)
    sub_10004B46C((uint64_t)v23);
  return result;
}

void sub_1000539B4(_Unwind_Exception *a1)
{
  sub_10004B46C((uint64_t)&STACK[0x220]);
  if (LOBYTE(STACK[0x630]))
    sub_10004B46C((uint64_t)&STACK[0x428]);
  _Unwind_Resume(a1);
}

uint64_t sub_100053A24(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 520))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_1001742A8;
  }
  return result;
}

_QWORD *sub_100053A64(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100056644((uint64_t)a1, a2);
  *a1 = off_100176228;
  a1[45] = &off_100176328;
  a1[46] = &off_100176350;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100176228;
  a1[45] = off_1001762B0;
  a1[46] = off_1001762D8;
  return a1;
}

void sub_100053AE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000566C0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100053B0C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001762F0);
  sub_1000566C0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100053B4C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100056CAC((uint64_t)a1, a2);
  *a1 = off_100176448;
  a1[45] = &off_100176548;
  a1[46] = &off_100176570;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100176448;
  a1[45] = off_1001764D0;
  a1[46] = off_1001764F8;
  return a1;
}

void sub_100053BD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100056D28(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100053BF4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100176510);
  sub_100056D28(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100053C34(uint64_t result)
{
  __int128 *v1;
  char *exception;
  __int128 v3;

  if (!*(_BYTE *)(result + 520))
  {
    v1 = (__int128 *)result;
    exception = (char *)__cxa_allocate_exception(0x18uLL);
    v3 = *v1;
    *(_QWORD *)exception = &off_100175190;
    *(_OWORD *)(exception + 8) = v3;
  }
  return result;
}

_QWORD *sub_100053C88(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100057314((uint64_t)a1, a2);
  *a1 = off_100176668;
  a1[45] = &off_100176768;
  a1[46] = &off_100176790;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100176668;
  a1[45] = off_1001766F0;
  a1[46] = off_100176718;
  return a1;
}

void sub_100053D0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100057390(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100053D30(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100176730);
  sub_100057390(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100053D70(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10005797C((uint64_t)a1, a2);
  *a1 = off_100176888;
  a1[45] = &off_100176988;
  a1[46] = &off_1001769B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100176888;
  a1[45] = off_100176910;
  a1[46] = off_100176938;
  return a1;
}

void sub_100053DF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000579F8(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100053E18(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100176950);
  sub_1000579F8(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_100053E58(uint64_t a1@<X1>, unsigned int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x470uLL);
  sub_100053EC0(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_1000196D4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_100053EAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100053EC0(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  int v4;
  uint64_t v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100175730;
  v4 = *a3;
  v5 = sub_1001017E8(a2, *a3);
  sub_100046E20((uint64_t)(a1 + 3), v5, (v4 & 3) != 0, 0);
  return a1;
}

void sub_100053F18(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100053F2C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100175730;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100053F3C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100175730;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100053F6C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_100053F7C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100175920;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100053FE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100053FF8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100175920;
  sub_1000542B0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100054094(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100175850);
  sub_100053FF8(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000540E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10005411C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100054168(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100175850);
  sub_100053FF8(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000541A0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100175850);
  sub_100053FF8(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_1000541F0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100175850);
  sub_100053FF8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100054230(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100175850);
  sub_100053FF8(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10005428C(uint64_t a1)
{
  sub_100053FF8(a1);
  operator delete();
}

uint64_t sub_1000542B0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100054400((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000543D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100054400(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 534;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 534;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000545E4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100175B40;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10005464C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100054660(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100175B40;
  sub_100054918(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000546FC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100175A70);
  sub_100054660(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100054750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100054784(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000547D0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100175A70);
  sub_100054660(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100054808(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100175A70);
  sub_100054660(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100054858(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100175A70);
  sub_100054660(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100054898(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100175A70);
  sub_100054660(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1000548F4(uint64_t a1)
{
  sub_100054660(a1);
  operator delete();
}

uint64_t sub_100054918(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100054A68((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100054A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100054A68(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 539;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 539;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100054C4C@<X0>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  int v20;
  _QWORD v21[45];
  uint64_t v22;
  uint64_t v23;
  int v24;

  switch(a1)
  {
    case 0:
      v13 = 1;
      break;
    case 1:
      return sub_10004FD80(a2, a5, a6);
    case 2:
      sub_10004AC6C((uint64_t)a2);
    case 7:
    case 9:
    case 12:
      v20 = 0;
      sub_10004B304((uint64_t)v21, (uint64_t)__p);
      v24 = 0;
      sub_10004B304(a6, (uint64_t)v21);
      *(_DWORD *)(a6 + 512) = v24;
      *(_BYTE *)(a6 + 520) = 1;
      sub_10004B46C((uint64_t)v21);
      return sub_10004B46C((uint64_t)__p);
    case 8:
      return sub_10004FC48(a2, a6);
    case 11:
      if (*(char *)(a4 + 23) < 0)
      {
        sub_100041DD0(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)a4;
        v19 = *(_QWORD *)(a4 + 16);
      }
      sub_100049BB0(&v17, (const void **)a2, (char *)__p, a3);
    default:
      __p[0] = "expected<std::pair<hdr_variant, image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr(image_format, std::shared_ptr<Backend> &, BOOL, const std::filesystem::path &, size_t)";
      __p[1] = (void *)132;
      LODWORD(v19) = 16;
      sub_100055224(v21, (__int128 *)__p);
      sub_100005A0C(&v22, (uint64_t)"Diskimageuio: Unsupported image format", 38);
      diskimage_uio::operator<<(&v22, a1);
      std::ostream::~ostream(&v22, off_100175C90);
      sub_100055388((uint64_t)v21);
      std::ios::~ios(&v23);
      result = make_error_code(161);
      *(_QWORD *)a6 = result;
      *(_QWORD *)(a6 + 8) = v16;
      *(_BYTE *)(a6 + 520) = 0;
      return result;
  }
  do
  {
    v14 = 2;
    if ((v13 - 2) >= 5)
    {
      if ((_DWORD)v13 == 1)
        goto LABEL_16;
      if ((_DWORD)v13 == 10)
        v14 = 2;
      else
        v14 = v13;
    }
    if ((_DWORD)v13 == v14)
    {
      result = sub_100054C4C(v13, a2, a3, a4, a5);
      if (!*(_BYTE *)(a6 + 520))
        return result;
      result = sub_100053C34(a6);
      v15 = *(_DWORD *)(result + 512);
      if (v15 || !*(_BYTE *)(a6 + 520))
      {
        if (v15)
          return result;
      }
      else
      {
        sub_10004B46C(a6);
      }
    }
LABEL_16:
    v13 = (v13 + 1);
  }
  while ((_DWORD)v13 != 13);
  return sub_10004FD80(a2, a5, a6);
}

void sub_100054F88(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_10004B110();
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_100055054(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100055974((uint64_t)a1, a2);
  *a1 = off_100175DE8;
  a1[45] = &off_100175EE8;
  a1[46] = &off_100175F10;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100175DE8;
  a1[45] = off_100175E70;
  a1[46] = off_100175E98;
  return a1;
}

void sub_1000550D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000559F0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000550FC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100175EB0);
  sub_1000559F0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_10005513C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100055FDC((uint64_t)a1, a2);
  *a1 = off_100176008;
  a1[45] = &off_100176108;
  a1[46] = &off_100176130;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100176008;
  a1[45] = off_100176090;
  a1[46] = off_1001760B8;
  return a1;
}

void sub_1000551C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100056058(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000551E4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001760D0);
  sub_100056058(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100055224(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10005530C((uint64_t)a1, a2);
  *a1 = off_100175BC8;
  a1[45] = &off_100175CC8;
  a1[46] = &off_100175CF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100175BC8;
  a1[45] = off_100175C50;
  a1[46] = off_100175C78;
  return a1;
}

void sub_1000552A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100055388(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000552CC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100175C90);
  sub_100055388(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10005530C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100175D60;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100055374(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100055388(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100175D60;
  sub_100055640(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100055424(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100175C90);
  sub_100055388(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100055478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000554AC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000554F8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100175C90);
  sub_100055388(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100055530(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100175C90);
  sub_100055388(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100055580(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100175C90);
  sub_100055388(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000555C0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100175C90);
  sub_100055388(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10005561C(uint64_t a1)
{
  sub_100055388(a1);
  operator delete();
}

uint64_t sub_100055640(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100055790((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100055768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100055790(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 485;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 485;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100055974(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100175F80;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000559DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000559F0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100175F80;
  sub_100055CA8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100055A8C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100175EB0);
  sub_1000559F0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100055AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100055B14(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100055B60(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100175EB0);
  sub_1000559F0(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100055B98(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100175EB0);
  sub_1000559F0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100055BE8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100175EB0);
  sub_1000559F0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100055C28(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100175EB0);
  sub_1000559F0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100055C84(uint64_t a1)
{
  sub_1000559F0(a1);
  operator delete();
}

uint64_t sub_100055CA8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100055DF8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100055DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100055DF8(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 495;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 495;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100055FDC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001761A0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100056044(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100056058(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001761A0;
  sub_100056310(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000560F4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001760D0);
  sub_100056058(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100056148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10005617C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000561C8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001760D0);
  sub_100056058(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100056200(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001760D0);
  sub_100056058(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100056250(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001760D0);
  sub_100056058(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100056290(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001760D0);
  sub_100056058(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1000562EC(uint64_t a1)
{
  sub_100056058(a1);
  operator delete();
}

uint64_t sub_100056310(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100056460((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100056438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100056460(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 503;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 503;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100056644(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001763C0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000566AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000566C0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001763C0;
  sub_100056978(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10005675C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001762F0);
  sub_1000566C0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000567B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000567E4(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100056830(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001762F0);
  sub_1000566C0(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100056868(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001762F0);
  sub_1000566C0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_1000568B8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001762F0);
  sub_1000566C0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000568F8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001762F0);
  sub_1000566C0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100056954(uint64_t a1)
{
  sub_1000566C0(a1);
  operator delete();
}

uint64_t sub_100056978(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100056AC8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100056AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100056AC8(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 551;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 551;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100056CAC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001765E0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100056D14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100056D28(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001765E0;
  sub_100056FE0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100056DC4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100176510);
  sub_100056D28(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100056E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100056E4C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100056E98(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100176510);
  sub_100056D28(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100056ED0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100176510);
  sub_100056D28(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100056F20(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100176510);
  sub_100056D28(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100056F60(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100176510);
  sub_100056D28(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100056FBC(uint64_t a1)
{
  sub_100056D28(a1);
  operator delete();
}

uint64_t sub_100056FE0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100057130((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100057108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100057130(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 554;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 554;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100057314(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100176800;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10005737C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100057390(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100176800;
  sub_100057648(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10005742C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100176730);
  sub_100057390(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100057480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000574B4(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100057500(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100176730);
  sub_100057390(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100057538(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100176730);
  sub_100057390(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100057588(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100176730);
  sub_100057390(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000575C8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100176730);
  sub_100057390(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100057624(uint64_t a1)
{
  sub_100057390(a1);
  operator delete();
}

uint64_t sub_100057648(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100057798((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100057770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100057798(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 561;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 561;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10005797C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100176A20;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000579E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000579F8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100176A20;
  sub_100057CB0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100057A94(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100176950);
  sub_1000579F8(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100057AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100057B1C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100057B68(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100176950);
  sub_1000579F8(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100057BA0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100176950);
  sub_1000579F8(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100057BF0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100176950);
  sub_1000579F8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100057C30(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100176950);
  sub_1000579F8(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100057C8C(uint64_t a1)
{
  sub_1000579F8(a1);
  operator delete();
}

uint64_t sub_100057CB0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100057E00((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100057DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100057E00(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 565;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 565;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_100057FE4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000580CC((uint64_t)a1, a2);
  *a1 = off_100176AA8;
  a1[45] = &off_100176BA8;
  a1[46] = &off_100176BD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100176AA8;
  a1[45] = off_100176B30;
  a1[46] = off_100176B58;
  return a1;
}

void sub_100058068(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100058148(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10005808C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100176B70);
  sub_100058148(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000580CC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100176C40;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100058134(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100058148(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100176C40;
  sub_100058400(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000581E4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100176B70);
  sub_100058148(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100058238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10005826C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000582B8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100176B70);
  sub_100058148(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000582F0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100176B70);
  sub_100058148(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100058340(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100176B70);
  sub_100058148(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100058380(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100176B70);
  sub_100058148(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1000583DC(uint64_t a1)
{
  sub_100058148(a1);
  operator delete();
}

uint64_t sub_100058400(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100058550((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100058528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100058550(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 610;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 610;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void sub_100058734(unsigned int *a1@<X1>, _DWORD *a2@<X2>, char *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0x470uLL);
  sub_1000587AC(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1000196D4((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_100058798(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000587AC(_QWORD *a1, unsigned int *a2, _DWORD *a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100175730;
  sub_100046E20((uint64_t)(a1 + 3), *a2, *a3 != 0, *a4);
  return a1;
}

void sub_1000587F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100058808(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    operator delete();
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

_QWORD *sub_100058878(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = sub_1000588F0(result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1000588D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1000588F0(_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    sub_100017E44();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void sub_100058930(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100176CC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100058940(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100176CC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100058970(uint64_t a1)
{
  sub_10005897C(a1 + 24);
}

void sub_10005897C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  sub_100012168(a1 + 56);
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    operator delete();
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
}

void sub_1000589E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100176D10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000589F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100176D10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100058A28(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_BYTE *sub_100058A38@<X0>(const std::error_category *a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *result;
  char v4;
  uint64_t v5;
  unsigned int *v6;
  __int128 v7;
  int v8;
  _QWORD v9[45];
  uint64_t v10;
  _BYTE v11[152];
  BOOL v12[24];

  sub_100049924(a1, v12);
  if (v12[16])
  {
    result = (_BYTE *)sub_100058CA0((uint64_t)v12);
    if (*result)
    {
      *(_QWORD *)&v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::validate_unlocked() const";
      *((_QWORD *)&v7 + 1) = 84;
      v8 = 16;
      sub_100058CF4(v9, &v7);
      sub_100005A0C(&v10, (uint64_t)"Diskimageuio: image is locked", 29);
      std::ostream::~ostream(&v10, off_100177050);
      sub_1000594C0((uint64_t)v9);
      std::ios::~ios(v11);
      result = (_BYTE *)make_error_code(162);
      v4 = 0;
      *(_QWORD *)a2 = result;
      *(_QWORD *)(a2 + 8) = v5;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      v4 = 1;
    }
  }
  else
  {
    *(_QWORD *)&v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::validate_unlocked() const";
    *((_QWORD *)&v7 + 1) = 84;
    v8 = 16;
    sub_100058BB8(v9, &v7);
    sub_100005A0C(&v10, (uint64_t)"Diskimageuio: can't get lock status ", 36);
    v6 = (unsigned int *)sub_100049170((uint64_t)v12);
    sub_100053500((uint64_t)v9, v6);
    std::ostream::~ostream(&v10, off_100176E30);
    sub_100058E58((uint64_t)v9);
    std::ios::~ios(v11);
    result = (_BYTE *)sub_100049170((uint64_t)v12);
    v4 = 0;
    *(_OWORD *)a2 = *(_OWORD *)result;
  }
  *(_BYTE *)(a2 + 16) = v4;
  return result;
}

void sub_100058B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100058D9C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100058BB8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100058DDC((uint64_t)a1, a2);
  *a1 = off_100176D68;
  a1[45] = &off_100176E68;
  a1[46] = &off_100176E90;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100176D68;
  a1[45] = off_100176DF0;
  a1[46] = off_100176E18;
  return a1;
}

void sub_100058C3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100058E58(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100058C60(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100176E30);
  sub_100058E58(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100058CA0(uint64_t result)
{
  __int128 *v1;
  char *exception;
  __int128 v3;

  if (!*(_BYTE *)(result + 16))
  {
    v1 = (__int128 *)result;
    exception = (char *)__cxa_allocate_exception(0x18uLL);
    v3 = *v1;
    *(_QWORD *)exception = &off_100175190;
    *(_OWORD *)(exception + 8) = v3;
  }
  return result;
}

_QWORD *sub_100058CF4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100059444((uint64_t)a1, a2);
  *a1 = off_100176F88;
  a1[45] = &off_100177088;
  a1[46] = &off_1001770B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100176F88;
  a1[45] = off_100177010;
  a1[46] = off_100177038;
  return a1;
}

void sub_100058D78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000594C0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100058D9C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100177050);
  sub_1000594C0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100058DDC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100176F00;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100058E44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100058E58(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100176F00;
  sub_100059110(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100058EF4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100176E30);
  sub_100058E58(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100058F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100058F7C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100058FC8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100176E30);
  sub_100058E58(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100059000(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100176E30);
  sub_100058E58(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100059050(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100176E30);
  sub_100058E58(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100059090(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100176E30);
  sub_100058E58(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1000590EC(uint64_t a1)
{
  sub_100058E58(a1);
  operator delete();
}

uint64_t sub_100059110(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100059260((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100059238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100059260(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 645;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 645;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100059444(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100177120;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000594AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000594C0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100177120;
  sub_100059778(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10005955C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100177050);
  sub_1000594C0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000595B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000595E4(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100059630(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100177050);
  sub_1000594C0(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100059668(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100177050);
  sub_1000594C0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_1000596B8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100177050);
  sub_1000594C0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000596F8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100177050);
  sub_1000594C0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100059754(uint64_t a1)
{
  sub_1000594C0(a1);
  operator delete();
}

uint64_t sub_100059778(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000598C8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000598A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_1000598C8(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 650;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 650;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_100059AAC(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100059B94((uint64_t)a1, a2);
  *a1 = off_1001771A8;
  a1[45] = &off_1001772A8;
  a1[46] = &off_1001772D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001771A8;
  a1[45] = off_100177230;
  a1[46] = off_100177258;
  return a1;
}

void sub_100059B30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100059C10(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100059B54(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100177270);
  sub_100059C10(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100059B94(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100177340;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100059BFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100059C10(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100177340;
  sub_100059EC8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100059CAC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100177270);
  sub_100059C10(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100059D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100059D34(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100059D80(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100177270);
  sub_100059C10(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100059DB8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100177270);
  sub_100059C10(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100059E08(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100177270);
  sub_100059C10(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100059E48(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100177270);
  sub_100059C10(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100059EA4(uint64_t a1)
{
  sub_100059C10(a1);
  operator delete();
}

uint64_t sub_100059EC8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10005A018((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100059FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10005A018(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 681;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 681;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

const std::error_category *sub_10005A1FC@<X0>(uint64_t a1@<X8>)
{
  const std::error_category *result;
  __int128 v3;
  int v4;
  _QWORD v5[45];
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)&v3 = "hdr_get_nr_blocks(const hdr_variant &)::(anonymous class)::operator()(const auto &) const [hdr:auto = std::monostate]";
  *((_QWORD *)&v3 + 1) = 69;
  v4 = 16;
  sub_10005A380(v5, &v3);
  sub_100005A0C(&v6, (uint64_t)"Diskimageuio: can't get Diskimage attribute, unknown header format", 66);
  std::ostream::~ostream(&v6, off_1001774C0);
  sub_10005A4E4((uint64_t)v5);
  std::ios::~ios(&v7);
  result = std::generic_category();
  *(_QWORD *)a1 = 6;
  *(_QWORD *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

void sub_10005A298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  std::ostream::~ostream(v4, off_1001774C0);
  sub_10005A4E4((uint64_t)va);
  std::ios::~ios(v5 + 368);
  _Unwind_Resume(a1);
}

void sub_10005A2C4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 492);
  *(_BYTE *)(a2 + 16) = 1;
}

void sub_10005A2DC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a2 + 16) = 1;
}

void sub_10005A2F0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a2 + 16) = 1;
}

void sub_10005A304(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __n128 v3;

  sub_100049994(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) - 8), &v3);
  *(_QWORD *)a2 = v3.n128_u64[0];
  *(_BYTE *)(a2 + 16) = 1;
}

uint64_t sub_10005A34C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

_QWORD *sub_10005A380(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10005A468((uint64_t)a1, a2);
  *a1 = off_1001773F8;
  a1[45] = &off_1001774F8;
  a1[46] = &off_100177520;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001773F8;
  a1[45] = off_100177480;
  a1[46] = off_1001774A8;
  return a1;
}

void sub_10005A404(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10005A4E4(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10005A428(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001774C0);
  sub_10005A4E4(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10005A468(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100177590;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10005A4D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10005A4E4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100177590;
  sub_10005A79C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10005A580(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001774C0);
  sub_10005A4E4(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10005A5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10005A608(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_10005A654(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001774C0);
  sub_10005A4E4(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10005A68C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001774C0);
  sub_10005A4E4(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_10005A6DC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001774C0);
  sub_10005A4E4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10005A71C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001774C0);
  sub_10005A4E4(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10005A778(uint64_t a1)
{
  sub_10005A4E4(a1);
  operator delete();
}

uint64_t sub_10005A79C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10005A8EC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10005A8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10005A8EC(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 112;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 112;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_10005AAD0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x60uLL);
  result = sub_10005AB28(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10005AB14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10005AB28(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100176CC0;
  sub_100116CE8(a1 + 3);
  return a1;
}

void sub_10005AB5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10005AB70(std::exception *a1)
{
  sub_100005554(a1);
  operator delete();
}

void ***sub_10005AB94(void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    sub_10005AC34(&v3);
    operator delete();
  }
  return result;
}

uint64_t sub_10005ABE4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10005AC34(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 16;
        diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)(v4 - 8));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_10005ACA8(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14[3];
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v4 = *((_QWORD *)a2 + 4);
  v5 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v14[2] = v4;
  v15 = &v17;
  v14[0] = 0;
  v14[1] = 0;
  v18 = v4;
  v16 = xmmword_100140350;
  v17 = v5;
  sub_10002EC54((uint64_t)a1, (uint64_t *)&v15);
  sub_100015C2C((uint64_t)&v15);
  v7 = *((_QWORD *)a2 + 2);
  v6 = *((_QWORD *)a2 + 3);
  v9 = (unint64_t *)a1[18];
  v8 = a1[19];
  v10 = a1[1];
  v15 = (__int128 *)*a1;
  v13 = v9;
  v14[0] = (uint64_t)v15 + 24 * v10;
  v12 = &v9[v8];
  sub_10002C7AC((uint64_t)(a1 + 26), (uint64_t *)&v15, v14, &v13, &v12, v6, v7);
  return a1;
}

void sub_10005AD78(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015744(v1);
  _Unwind_Resume(a1);
}

std::string *sub_10005ADA4(std::string *a1, char *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  v4 = (int)v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((int)v3 < 0)
    a2 = *(char **)a2;
  v3 = v3;
  if (v4)
    v3 = v5;
  sub_10005AE08(a1, a2, &a2[v3]);
  return a1;
}

void sub_10005ADEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_10005AE08(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    sub_10005AF7C(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_10005AF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10005AF7C(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_100005680();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

__n128 sub_10005B020(diskimage_uio::diskimage_open_params *this, diskimage_uio::diskimage_open_params *a2)
{
  BOOL v4;
  __n128 result;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9[4];

  if (*((_BYTE *)this + 16))
    v4 = *((_BYTE *)a2 + 16) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v9[0] = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    diskimage_uio::diskimage_open_params::operator=((uint64_t *)this, (uint64_t *)a2);
    diskimage_uio::diskimage_open_params::operator=((uint64_t *)a2, v9);
LABEL_11:
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)v9);
    return result;
  }
  if (*((_BYTE *)this + 16))
  {
    if (!*((_BYTE *)a2 + 16))
    {
      *(_OWORD *)v9 = *(_OWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)this;
      *(_QWORD *)this = 0;
      diskimage_uio::diskimage_open_params::~diskimage_open_params(this);
      result.n128_u64[0] = v9[0];
      *(_OWORD *)this = *(_OWORD *)v9;
      v6 = *((_BYTE *)this + 16);
      *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
      *((_BYTE *)a2 + 16) = v6;
      return result;
    }
  }
  else if (*((_BYTE *)a2 + 16))
  {
    v7 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    diskimage_uio::diskimage_open_params::~diskimage_open_params(a2);
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(_QWORD *)this = v7;
    v9[0] = 0;
    v8 = *((_BYTE *)this + 16);
    *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
    *((_BYTE *)a2 + 16) = v8;
    goto LABEL_11;
  }
  result = *(__n128 *)this;
  *(_OWORD *)this = *(_OWORD *)a2;
  *(__n128 *)a2 = result;
  return result;
}

void sub_10005B11C(_OWORD *a1)
{
  uint64_t v1;

  *(_OWORD *)v1 = *a1;
  *(_BYTE *)(v1 + 16) = 0;
  __cxa_end_catch();
}

void *sub_10005B134(void *a1)
{
  return __cxa_begin_catch(a1);
}

uint64_t sub_10005B13C(uint64_t (***a1)(_QWORD))
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;
  char *v5;

  v3[0] = (**a1)(a1);
  v3[1] = v1;
  if (v1 == 0xFFFFFFFFLL)
    sub_100018028();
  v5 = &v4;
  return ((uint64_t (*)(char **, _QWORD *))off_100177818[v1])(&v5, v3);
}

uint64_t sub_10005B198(uint64_t (***a1)(_QWORD))
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;
  char *v5;

  v3[0] = (**a1)(a1);
  v3[1] = v1;
  if (v1 == 0xFFFFFFFFLL)
    sub_100018028();
  v5 = &v4;
  return ((uint64_t (*)(char **, _QWORD *))off_100177858[v1])(&v5, v3);
}

uint64_t sub_10005B1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24) - v2;
  v4 = v3 / 48;
  if (v3 < 49)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = v4 - 1;
    v7 = (int *)(v2 + 48 * v4 - 96);
    do
    {
      v8 = *v7;
      v7 -= 12;
      if (v8 != 2)
        break;
      ++v5;
    }
    while (v6-- > 1);
  }
  v10 = v4 + ~v5;
  if (v5)
    return v10;
  else
    return 0;
}

uint64_t sub_10005B268(_DWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  _QWORD **v9;

  v6 = *(_QWORD *)(a4 + 144);
  v7 = (*((uint64_t (**)(_DWORD **))*a1 + 4))(a1);
  if (v6 > (*((uint64_t (**)(_DWORD **))*a1 + 3))(a1) * v7)
    return -5;
  if (*a1[2])
    return -78;
  v9 = *(_QWORD ***)(a2 + 16);
  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)(*v9)[1] + 40))((*v9)[1]) || *a1[2])
    return -78;
  return sub_100013598(*v9);
}

uint64_t sub_10005B324(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  _QWORD **v3;
  uint64_t v4;

  v2 = *(_QWORD ***)(a2 + 16);
  v3 = *(_QWORD ***)(a2 + 24);
  if (v2 == v3)
    return 4294967218;
  v4 = 4294967218;
  do
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)(*v2)[1] + 40))((*v2)[1]))
    {
      v4 = sub_100013328(*v2);
      if ((_DWORD)v4)
        break;
    }
    v2 += 2;
  }
  while (v2 != v3);
  return v4;
}

uint64_t sub_10005B39C(uint64_t a1, _QWORD **a2, _BYTE *a3)
{
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  uint64_t (***v13)(_QWORD);
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  const void *v40;
  uint64_t (***v41)(_QWORD);
  std::__shared_weak_count *v42;
  uint64_t (***v43)(_QWORD);
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *exception;
  const std::error_category *v62;
  _QWORD *v63;
  const std::error_category *v64;
  const char *v65;
  _QWORD v66[5];
  uint64_t (***v67)(_QWORD);
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  uint64_t (***v70)(_QWORD);
  std::__shared_weak_count *v71;
  uint64_t v72;
  uint64_t (***v73)(_QWORD);
  std::__shared_weak_count *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_1001776C0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = (uint64_t *)(a1 + 16);
  *(_BYTE *)(a1 + 56) = 0;
  v7 = (_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a2 + 24))(**a2);
  *(_BYTE *)(a1 + 48) = 0;
  if ((*a3 & 2) != 0)
  {
    v8 = a2[1];
    v67 = (uint64_t (***)(_QWORD))*(v8 - 3);
    v9 = (std::__shared_weak_count *)*(v8 - 2);
    v68 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v8 = a2[1];
    }
    v12 = v8 - 3;
    while (v12 != *a2)
    {
      v13 = (uint64_t (***)(_QWORD))*(v12 - 3);
      v12 -= 3;
      v73 = v13;
      v14 = (std::__shared_weak_count *)v12[1];
      v74 = v14;
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = sub_10005B13C(v67);
      v18 = v17;
      v77 = v17;
      v78 = v19;
      v20 = sub_10005B198(v73);
      v75 = v20;
      v76 = v21;
      if (v18)
      {
LABEL_11:
        if ((_BYTE)v20)
        {
LABEL_12:
          if (v77 != v75 || v78 != v76)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            *exception = &off_1001924F8;
            v62 = std::generic_category();
            exception[1] = 166;
            exception[2] = v62;
            *((_BYTE *)exception + 24) = 0;
            *((_BYTE *)exception + 48) = 0;
            exception[7] = "Corrupted shadow file(s) chain";
          }
        }
        else
        {
          v28 = 1;
          while (v28 != 16)
          {
            if (*((unsigned __int8 *)&v75 + v28++))
            {
              if ((unint64_t)(v28 - 2) <= 0xE)
                goto LABEL_12;
              break;
            }
          }
        }
      }
      else
      {
        v26 = 1;
        while (v26 != 16)
        {
          if (*((unsigned __int8 *)&v77 + v26++))
          {
            if ((unint64_t)(v26 - 2) <= 0xE)
              goto LABEL_11;
            break;
          }
        }
      }
      sub_100027CB4(&v67, (uint64_t *)&v73);
      v23 = v74;
      if (v74)
      {
        v24 = (unint64_t *)&v74->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    v30 = v68;
    if (v68)
    {
      v31 = (unint64_t *)&v68->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  v33 = (uint64_t)*a2;
  if (a2[1] != *a2)
  {
    v34 = 0;
    v35 = 0;
    v65 = "Block size mismatch in DiskImageStackable";
    do
    {
      v36 = (_QWORD *)(v33 + 24 * v35);
      v37 = *(_QWORD *)(a1 + 40);
      if (v37 != (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v36 + 24))(*v36))
        goto LABEL_83;
      if (*((_DWORD *)v36 + 4) == 2)
      {
        v38 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
        if (v38 >= 2 && v35 != v38 - 2)
        {
          v40 = (const void *)(*a2)[a2[1] - *a2 - 3];
          if (v40)
          {
            {
              v65 = "Currently, cache can only be added directly above plugin";
LABEL_83:
              v63 = __cxa_allocate_exception(0x40uLL);
              *v63 = &off_1001924F8;
              v64 = std::generic_category();
              v63[1] = 4294967274;
              v63[2] = v64;
              *((_BYTE *)v63 + 24) = 0;
              *((_BYTE *)v63 + 48) = 0;
              v63[7] = v65;
            }
          }
        }
      }
      v41 = (uint64_t (***)(_QWORD))*v36;
      v73 = v41;
      v42 = (std::__shared_weak_count *)v36[1];
      v74 = v42;
      v43 = v41;
      if (v42)
      {
        v44 = (unint64_t *)&v42->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        v43 = (uint64_t (***)(_QWORD))*v36;
      }
      if ((*v43)[12](v43))
      {
        LOBYTE(v75) = 1;
        sub_100061820((uint64_t)&v77, (uint64_t)v41, (char *)&v75);
      }
      LODWORD(v67) = *((_DWORD *)v36 + 4);
      v68 = (std::__shared_weak_count *)*v36;
      v46 = (std::__shared_weak_count *)v36[1];
      v69 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v70 = v73;
      v71 = v74;
      if (v74)
      {
        v49 = (unint64_t *)&v74->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      v72 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v36 + 32))(*v36);
      sub_10005BA24(v6, (uint64_t)&v67);
      if (*((_DWORD *)v36 + 4) == 2)
        v34 |= (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v36 + 40))(*v36);
      v51 = v71;
      if (v71)
      {
        v52 = (unint64_t *)&v71->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = v69;
      if (v69)
      {
        v55 = (unint64_t *)&v69->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = v74;
      if (v74)
      {
        v58 = (unint64_t *)&v74->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      ++v35;
      v33 = (uint64_t)*a2;
    }
    while (v35 < 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    if ((v34 & 1) != 0)
    {
      v66[0] = _NSConcreteStackBlock;
      v66[1] = 0x40000000;
      v66[2] = sub_10005BB48;
      v66[3] = &unk_100177780;
      v66[4] = a1;
      sub_1000607A0((uint64_t)v7);
      sub_10005FA40(v7, (uint64_t)v66, 600000000);
      *(_BYTE *)(a1 + 144) = 1;
    }
  }
  return a1;
}

void sub_10005B9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_1000607F8(v11);
  sub_100060850((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10005BA24(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    if (v9 + 1 > 0x555555555555555)
      sub_100017E44();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v13 = (char *)sub_1000605A0(v4, v12);
    else
      v13 = 0;
    v15 = v13;
    v16 = &v13[48 * v9];
    v18 = &v13[48 * v12];
    sub_1000604D8((uint64_t)v16, a2);
    v17 = v16 + 48;
    sub_10006052C(a1, &v15);
    v8 = a1[1];
    sub_100060714((uint64_t)&v15);
  }
  else
  {
    sub_1000604D8(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v8;
  return v8 - 48;
}

void sub_10005BB34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100060714((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10005BB48(uint64_t a1)
{
  return sub_10005BB50(*(_QWORD *)(a1 + 32));
}

uint64_t sub_10005BB50(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_QWORD *)(result + 24);
  while (v1 != v2)
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 40))(*(_QWORD *)(v1 + 8));
    if ((_DWORD)result)
      v3 = *(_DWORD *)v1 == 2;
    else
      v3 = 0;
    if (v3)
    {
      v4 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 136))(*(_QWORD *)(v1 + 8));
      result = sub_100013328(v4);
      if (v4)
        result = (*(uint64_t (**)(_QWORD *))(*v4 + 40))(v4);
    }
    v1 += 48;
  }
  return result;
}

void sub_10005BBD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005BBF8(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1001776C0;
  sub_10005BB50(a1);
  sub_1000607F8(a1 + 56);
  v3 = (void **)(a1 + 16);
  sub_100060850(&v3);
  return a1;
}

void sub_10005BC50(uint64_t a1)
{
  sub_10005BBF8(a1);
  operator delete();
}

unint64_t sub_10005BC74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD v34[2];
  char v35;
  _BYTE v36[8];
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;

  v15 = *(_QWORD *)(a1 + 40);
  v16 = *((unsigned __int8 *)a6 + 16);
  v17 = *a6;
  v18 = a6[1];
  if ((v16 & 2) != 0)
    v19 = *a6;
  else
    v19 = v17 + 1;
  v34[0] = v19 * v15;
  v34[1] = ((v16 & 1) + v18 - v17 + (int)(((v16 >> 1) & 1) - 1) + v19) * v15;
  v35 = 2;
  sub_10002DB88(a3, (uint64_t)v34, a4, (uint64_t)v36);
  v20 = sub_10005BE54(a1, a2, (uint64_t)v36, (uint64_t)&v39, a5, a7, a8, a9, a10);
  v21 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v40;
  if (v40)
  {
    v25 = (unint64_t *)&v40->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v38;
  if (v38)
  {
    v28 = (unint64_t *)&v38->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v37;
  if (v37)
  {
    v31 = (unint64_t *)&v37->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return v20;
}

void sub_10005BE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10005C240((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10005BE54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL4 v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  _OWORD v54[2];
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  _OWORD v67[2];
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  __int128 v75;
  uint64_t v76;
  char v77;
  _QWORD v78[2];
  char v79;
  unint64_t v80;
  unint64_t v81;

  v14 = sub_10005DC20();
  v16 = v14;
  v80 = v14;
  v81 = v15;
  if ((v14 & 0x8000000000000000) == 0 || !(_DWORD)v14)
  {
    v17 = *(_QWORD *)(a3 + 144);
    v18 = v15 < v17 || v14 > ((*(_QWORD *)(a4 + 144) - v17) & ~((uint64_t)(*(_QWORD *)(a4 + 144) - v17) >> 63));
    v19 = 0;
    if (a5 && v18)
    {
      v20 = *(_QWORD *)(a1 + 40);
      v21 = *(_QWORD *)(a4 + 144) - v17;
      v22 = v21 & ~(v21 >> 63);
      if (v22 <= v20)
        v22 = *(_QWORD *)(a1 + 40);
      if (v21 <= 0)
        v23 = 0;
      else
        v23 = v22;
      v78[0] = v17 / v20;
      v78[1] = (v17 + v20 + v23 - 1) / v20;
      v79 = 2;
      v19 = sub_10005C8A8(a1, a2, &v80, (uint64_t)v78, a5, a9);
    }
    v51 = v19;
    v24 = *(std::__shared_weak_count **)(a3 + 8);
    v65 = *(_QWORD *)a3;
    v66 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
    }
    v67[0] = *(_OWORD *)(a3 + 16);
    *(_OWORD *)((char *)v67 + 9) = *(_OWORD *)(a3 + 25);
    v68 = *(_QWORD *)(a3 + 48);
    v69 = *(_OWORD *)(a3 + 56);
    v70 = *(_OWORD *)(a3 + 72);
    v71 = *(_OWORD *)(a3 + 88);
    v72 = *(_BYTE *)(a3 + 104);
    v27 = *(std::__shared_weak_count **)(a3 + 120);
    v73 = *(_QWORD *)(a3 + 112);
    v74 = v27;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v75 = *(_OWORD *)(a3 + 128);
    v76 = *(_QWORD *)(a3 + 144);
    v77 = *(_BYTE *)(a3 + 152);
    v30 = *(std::__shared_weak_count **)(a4 + 8);
    v52 = *(_QWORD *)a4;
    v53 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v54[0] = *(_OWORD *)(a4 + 16);
    *(_OWORD *)((char *)v54 + 9) = *(_OWORD *)(a4 + 25);
    v55 = *(_QWORD *)(a4 + 48);
    v56 = *(_OWORD *)(a4 + 56);
    v57 = *(_OWORD *)(a4 + 72);
    v58 = *(_OWORD *)(a4 + 88);
    v59 = *(_BYTE *)(a4 + 104);
    v33 = *(std::__shared_weak_count **)(a4 + 120);
    v60 = *(_QWORD *)(a4 + 112);
    v61 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = *(_QWORD *)(a4 + 144);
    v62 = *(_OWORD *)(a4 + 128);
    v63 = v36;
    v64 = *(_BYTE *)(a4 + 152);
    v16 = sub_10005CE50(a1, a2, (uint64_t)&v65, (uint64_t)&v52, &v80, a5);
    v37 = v61;
    if (v61)
    {
      v38 = (unint64_t *)&v61->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = v53;
    if (v53)
    {
      v41 = (unint64_t *)&v53->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v74;
    if (v74)
    {
      v44 = (unint64_t *)&v74->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = v66;
    if (v66)
    {
      v47 = (unint64_t *)&v66->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if ((v16 & 0x8000000000000000) == 0 || !(_DWORD)v16)
    {
      v49 = *(_QWORD *)(a4 + 144);
      if (v51)
        return sub_100120940(a3, a4, (v49 - *(_QWORD *)(a3 + 144)) & ~((v49 - *(_QWORD *)(a3 + 144)) >> 63), &v80);
      else
        return v49 - v81;
    }
  }
  return v16;
}

uint64_t sub_10005C240(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 160;
  sub_100012168(a1 + 272);
  sub_100012168(v2);
  sub_100012168(a1 + 112);
  return sub_100012168(a1);
}

uint64_t sub_10005C27C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *__p;
  void *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD v38[3];
  _QWORD *v39;

  if ((*(_BYTE *)(a4 + 16) & 2) != 0)
    v8 = *(_QWORD *)a4;
  else
    v8 = *(_QWORD *)a4 + 1;
  v9 = (*(_BYTE *)(a4 + 16) & 1) + *(_QWORD *)(a4 + 8);
  v10 = *(_QWORD *)(result + 16);
  v11 = *(_QWORD *)(result + 24);
  v12 = *(_QWORD *)(v10 + 48 * a3 + 40);
  if (v12 < v9)
    v9 = *(_QWORD *)(v10 + 48 * a3 + 40);
  *(_QWORD *)&v30 = v8;
  *((_QWORD *)&v30 + 1) = v9;
  LOBYTE(v31) = 2;
  if (0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 4) - 1 <= a3 || v12 <= *(_QWORD *)(v10 + 48 * a3 + 88))
    goto LABEL_19;
  v13 = result;
  *(_QWORD *)&v28 = *(_QWORD *)(v10 + 48 * a3 + 88);
  *((_QWORD *)&v28 + 1) = v12;
  LOBYTE(v29) = 2;
  result = sub_10005C570((uint64_t)&v28, (uint64_t)&v30);
  if ((result & 1) == 0)
  {
    v10 = *(_QWORD *)(v13 + 16);
LABEL_19:
    v20 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * a3);
    *(_QWORD *)a5 = *(_QWORD *)(v10 + 48 * a3 + 8);
    *(_OWORD *)(a5 + 8) = v30;
    *(_QWORD *)(a5 + 24) = v31;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 40) = v20;
    *(_DWORD *)(a5 + 48) = 6;
    *(_QWORD *)(a5 + 56) = off_100175480;
    *(_QWORD *)(a5 + 80) = a5 + 56;
    return result;
  }
  v24 = v28;
  v25 = v29;
  sub_10005C744((unint64_t *)&v24, (unint64_t *)&v30, (uint64_t)&v26);
  v14 = v30;
  if ((v31 & 2) == 0)
    v14 = v30 + 1;
  v15 = v26;
  if ((v27 & 2) == 0)
    v15 = v26 + 1;
  *(_QWORD *)&v30 = v14;
  *((_QWORD *)&v30 + 1) = v15;
  LOBYTE(v31) = 2;
  v16 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * a3);
  v32 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 48 * a3 + 8);
  v33 = v30;
  v34 = v31;
  v35 = 0;
  v36 = v16;
  v37 = 6;
  v17 = v38;
  v38[0] = off_100175480;
  v39 = v38;
  v18 = operator new(0x20uLL);
  v22 = v18 + 4;
  v23 = (char *)(v18 + 4);
  *(_OWORD *)v18 = v26;
  v18[2] = v27;
  *((_DWORD *)v18 + 6) = 1;
  __p = v18;
  sub_100098358((uint64_t)&v32, (uint64_t)&__p, a5);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v39 == v38)
  {
    v19 = 4;
  }
  else
  {
    if (!v39)
      goto LABEL_23;
    v19 = 5;
    v17 = v39;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_23:
  result = v35;
  v35 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_10005C4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,_QWORD *a35)
{
  _QWORD *v35;
  uint64_t v37;

  if (__p)
    operator delete(__p);
  if (a35 == v35)
  {
    v37 = 4;
  }
  else
  {
    if (!a35)
      goto LABEL_8;
    v37 = 5;
    v35 = a35;
  }
  (*(void (**)(_QWORD *))(*v35 + 8 * v37))(v35);
LABEL_8:
  if (a29)
    (*(void (**)(uint64_t))(*(_QWORD *)a29 + 40))(a29);
  _Unwind_Resume(exception_object);
}

BOOL sub_10005C570(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL8 result;
  unint64_t v11;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (v2 == 3)
    {
      v3 = *(_QWORD *)a1;
      v4 = *(_QWORD *)(a1 + 8);
      if (v4 < *(_QWORD *)a1)
        return 0;
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)a1 >= v4)
        return 0;
    }
  }
  else
  {
    v3 = *(_QWORD *)a1;
    v4 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 >= v4 || *(_QWORD *)a1 + 1 >= v4)
      return 0;
  }
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    if (v6 == 3)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(_QWORD *)(a2 + 8);
      if (v7 < *(_QWORD *)a2)
        return 0;
    }
    else
    {
      v8 = *(_QWORD *)a2;
      v7 = *(_QWORD *)(a2 + 8);
      if (*(_QWORD *)a2 >= v7)
        return 0;
    }
  }
  else
  {
    v8 = *(_QWORD *)a2;
    v7 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 >= v7 || *(_QWORD *)a2 + 1 >= v7)
      return 0;
  }
  if ((_BYTE)v2)
  {
    if (*(_BYTE *)(a1 + 16) == 3)
    {
      if (v4 < v3)
        return 0;
    }
    else if (v3 >= v4)
    {
      return 0;
    }
  }
  else
  {
    result = 0;
    if (v3 >= v4 || v3 + 1 >= v4)
      return result;
  }
  if ((_BYTE)v6)
  {
    if (*(_BYTE *)(a2 + 16) == 3)
    {
      if (v7 < v8)
        return 0;
    }
    else if (v8 >= v7)
    {
      return 0;
    }
  }
  else
  {
    result = 0;
    if (v8 >= v7 || v8 + 1 >= v7)
      return result;
  }
  if ((v6 & 2) != 0)
    v11 = v8;
  else
    v11 = v8 + 1;
  if ((v2 & 1) + v4 - 1 < v11)
    return 0;
  if ((_BYTE)v6)
  {
    if (*(_BYTE *)(a2 + 16) == 3)
    {
      if (v7 < v8)
        return 0;
    }
    else if (v8 >= v7)
    {
      return 0;
    }
  }
  else
  {
    result = 0;
    if (v8 >= v7 || v8 + 1 >= v7)
      return result;
  }
  if (!(_BYTE)v2)
  {
    result = 0;
    if (v3 >= v4 || v3 + 1 >= v4)
      return result;
    goto LABEL_60;
  }
  if (v2 == 3)
  {
    if (v4 >= v3)
      goto LABEL_60;
    return 0;
  }
  if (v3 >= v4)
    return 0;
LABEL_60:
  if ((v2 & 2) == 0)
    ++v3;
  return (v6 & 1) + v7 - 1 >= v3;
}

double sub_10005C744@<D0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  int v14;
  int v15;
  unsigned __int8 v17;
  double result;
  int v19;
  uint64_t v20;

  v3 = *((unsigned __int8 *)a1 + 16);
  if (*((_BYTE *)a1 + 16))
  {
    if (v3 == 3)
    {
      v5 = *a1;
      v4 = a1[1];
      if (v4 < *a1)
        goto LABEL_31;
    }
    else
    {
      v5 = *a1;
      v4 = a1[1];
      if (*a1 >= v4)
        goto LABEL_31;
    }
  }
  else
  {
    v5 = *a1;
    v4 = a1[1];
    if (*a1 >= v4 || *a1 + 1 >= v4)
      goto LABEL_31;
  }
  v7 = *((unsigned __int8 *)a2 + 16);
  if (!*((_BYTE *)a2 + 16))
  {
    v9 = *a2;
    v8 = a2[1];
    if (*a2 < v8 && *a2 + 1 < v8)
      goto LABEL_15;
    goto LABEL_31;
  }
  if (v7 == 3)
  {
    v9 = *a2;
    v8 = a2[1];
    if (v8 >= *a2)
      goto LABEL_15;
LABEL_31:
    v17 = atomic_load((unsigned __int8 *)&qword_1001A0608);
    if ((v17 & 1) == 0)
    {
      v20 = a3;
      v19 = __cxa_guard_acquire(&qword_1001A0608);
      a3 = v20;
      if (v19)
      {
        *(_QWORD *)&xmmword_1001A05F0 = qword_1001A05E0;
        *((_QWORD *)&xmmword_1001A05F0 + 1) = qword_1001A05E0;
        LOBYTE(qword_1001A0600) = 2;
        __cxa_guard_release(&qword_1001A0608);
        a3 = v20;
      }
    }
    result = *(double *)&xmmword_1001A05F0;
    *(_OWORD *)a3 = xmmword_1001A05F0;
    *(_QWORD *)(a3 + 16) = qword_1001A0600;
    return result;
  }
  v9 = *a2;
  v8 = a2[1];
  if (*a2 >= v8)
    goto LABEL_31;
LABEL_15:
  v10 = v3 & 2;
  if ((v3 & 2) != 0)
    v11 = v5;
  else
    v11 = v5 + 1;
  v12 = v7 & 2;
  if ((v7 & 2) != 0)
    v13 = v9;
  else
    v13 = v9 + 1;
  v14 = v3 & 1;
  v15 = v7 & 1;
  if (v11 < v13)
  {
    v5 = v9;
    v10 = v12;
  }
  if (v4 + v14 - 1 >= v8 + v15 - 1)
  {
    v4 = v8;
    LOBYTE(v14) = v15;
  }
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v4;
  *(_BYTE *)(a3 + 16) = v14 | v10;
  return result;
}

BOOL sub_10005C8A8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t a5, uint64_t *a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v30;
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[2];
  char v36;
  _BYTE v37[32];
  uint64_t v38;
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[32];
  uint64_t v42;
  _BYTE v43[24];
  _BYTE *v44;

  v6 = *(_QWORD *)(a1 + 40);
  v7 = a3[1];
  if (*a3 <= v6)
    v8 = *(_QWORD *)(a1 + 40);
  else
    v8 = *a3;
  if (*a3)
    v9 = v8;
  else
    v9 = 0;
  v35[0] = v7 / v6;
  v35[1] = (v7 + v9) / v6;
  v36 = 2;
  if (a5)
  {
    v14 = 0;
    v15 = 0;
    v30 = a5 - 1;
    v16 = 1;
    while (1)
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) == 2)
        goto LABEL_37;
      if (a6 && v30 == v15)
        sub_1000608E8((uint64_t)v41, a6);
      else
        sub_10005C27C(a1, a2, v15, a4, (uint64_t)v41);
      sub_10005C27C(a1, a2, v15, (uint64_t)v35, (uint64_t)v37);
      sub_100052388((uint64_t)v37, (uint64_t)v34);
      sub_1000524BC((uint64_t)v37, (uint64_t)v33);
      sub_100052388((uint64_t)v41, (uint64_t)v32);
      sub_1000524BC((uint64_t)v41, (uint64_t)v31);
      v17 = sub_10005CC64(v34, v33, v32, v31);
      v18 = v31[0];
      v31[0] = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
      v19 = v32[0];
      v32[0] = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
      v20 = v33[0];
      v33[0] = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
      v21 = v34[0];
      v34[0] = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
      v22 = v40;
      if (v40 == v39)
      {
        v22 = v39;
        v23 = 4;
      }
      else
      {
        if (!v40)
          goto LABEL_27;
        v23 = 5;
      }
      (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_27:
      v24 = v38;
      v38 = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
      v25 = v44;
      if (v44 == v43)
      {
        v25 = v43;
        v26 = 4;
      }
      else
      {
        if (!v44)
          goto LABEL_34;
        v26 = 5;
      }
      (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_34:
      v27 = v42;
      v42 = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
      if (!v17)
        return v16;
LABEL_37:
      v16 = ++v15 < a5;
      v14 += 48;
      if (a5 == v15)
        return v16;
    }
  }
  return 0;
}

void sub_10005CB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,_QWORD *a49)
{
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 24))(a18);
  if (a24)
    (*(void (**)(uint64_t))(*(_QWORD *)a24 + 24))(a24);
  if (a30)
    (*(void (**)(uint64_t))(*(_QWORD *)a30 + 24))(a30);
  if (a49 == v50)
  {
    v53 = 4;
  }
  else
  {
    if (!a49)
      goto LABEL_14;
    v53 = 5;
    v50 = a49;
  }
  (*(void (**)(_QWORD *))(*v50 + 8 * v53))(v50);
LABEL_14:
  if (a43)
    (*(void (**)(uint64_t))(*(_QWORD *)a43 + 40))(a43);
  v54 = *(_QWORD **)(v51 - 104);
  if (v54 == v49)
  {
    v55 = 4;
  }
  else
  {
    if (!v54)
      goto LABEL_21;
    v55 = 5;
    v49 = *(_QWORD **)(v51 - 104);
  }
  (*(void (**)(_QWORD *))(*v49 + 8 * v55))(v49);
LABEL_21:
  v56 = *(_QWORD *)(v51 - 152);
  *(_QWORD *)(v51 - 152) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
  _Unwind_Resume(exception_object);
}

BOOL sub_10005CC64(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _BOOL4 v7;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[6];
  uint64_t v16;
  unint64_t v17[3];
  int v18;
  _QWORD v19[6];
  uint64_t v20;
  unint64_t v21[3];
  int v22;

  sub_1000EBCE8((uint64_t)&v20, a1);
  sub_1000EBCE8((uint64_t)v19, a2);
  sub_1000EBCE8((uint64_t)&v16, a3);
  sub_1000EBCE8((uint64_t)v15, a4);
  if (sub_1000EBDF0((uint64_t)&v20, (uint64_t)v19))
  {
    while (sub_1000EBDF0((uint64_t)&v16, (uint64_t)v15))
    {
      v7 = sub_100060BBC(v21, v17);
      if (v22 != v18 || !v7)
        goto LABEL_10;
      sub_1000EC020(&v20);
      sub_1000EC020(&v16);
      if (!sub_1000EBDF0((uint64_t)&v20, (uint64_t)v19))
        break;
    }
  }
  if (sub_1000EBD38((uint64_t)&v20, (uint64_t)v19))
    v9 = sub_1000EBD38((uint64_t)&v16, (uint64_t)v15);
  else
LABEL_10:
    v9 = 0;
  v10 = v15[0];
  v15[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  v11 = v16;
  v16 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  v12 = v19[0];
  v19[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  v13 = v20;
  v20 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return v9;
}

void sub_10005CDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v23;

  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 24))(a15);
  if (a21)
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 24))(a21);
  v23 = *(_QWORD *)(v21 - 80);
  *(_QWORD *)(v21 - 80) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005CE50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  int64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  BOOL v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  char v156[8];
  std::__shared_weak_count *v157;
  std::__shared_weak_count *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count *v161;
  char v162[8];
  std::__shared_weak_count *v163;
  std::__shared_weak_count *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  _OWORD v167[2];
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  char v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  __int128 v175;
  uint64_t v176;
  char v177;
  _BYTE v178[528];
  char v179;
  __n128 v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count *v183;
  void *__p;
  std::__shared_weak_count *v185;
  _BYTE v186[40];
  uint64_t v187;
  std::__shared_weak_count *v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count *v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count *v197;
  uint64_t *v198;
  __int128 v199;
  uint64_t v200;

  v6 = *(_QWORD *)(a1 + 40);
  v7 = *a5;
  v8 = a5[1] % v6;
  v9 = v8 == 0;
  v10 = v6 - v8;
  if (v9)
    v10 = 0;
  if (v7 < v10)
    return 0;
  v15 = a1;
  v178[0] = 0;
  v179 = 0;
  v16 = *(std::__shared_weak_count **)(a3 + 8);
  v17 = (v7 - v10) / v6 * v6;
  v165 = *(_QWORD *)a3;
  v166 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = *(_OWORD *)(a3 + 56);
  v167[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v167 + 9) = *(_OWORD *)(a3 + 25);
  v168 = *(_QWORD *)(a3 + 48);
  v169 = v20;
  v21 = *(_OWORD *)(a3 + 88);
  v170 = *(_OWORD *)(a3 + 72);
  v171 = v21;
  v172 = *(_BYTE *)(a3 + 104);
  v22 = *(std::__shared_weak_count **)(a3 + 120);
  v173 = *(_QWORD *)(a3 + 112);
  v174 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *(_QWORD *)(a3 + 144);
  v175 = *(_OWORD *)(a3 + 128);
  v176 = v25;
  v177 = *(_BYTE *)(a3 + 152);
  sub_10002E74C((uint64_t)&v165, a4, a5[1] + v10, v17, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v180);
  sub_10004F26C((uint64_t)v178);
  sub_10002EA44((uint64_t)v178, (uint64_t)&v180);
  v179 = 1;
  v26 = v194;
  if (v194)
  {
    v27 = (unint64_t *)&v194->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v192;
  if (v192)
  {
    v30 = (unint64_t *)&v192->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v190;
  if (v190)
  {
    v33 = (unint64_t *)&v190->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v188;
  if (v188)
  {
    v36 = (unint64_t *)&v188->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v185;
  if (v185)
  {
    v39 = (unint64_t *)&v185->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v182;
  if (v182)
  {
    v42 = (unint64_t *)&v182->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v174;
  if (v174)
  {
    v45 = (unint64_t *)&v174->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v166;
  if (v166)
  {
    v48 = (unint64_t *)&v166->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  sub_10002D5FC(a3, v17);
  sub_10002C308((_QWORD *)(a3 + 56));
  sub_10002CA7C((uint64_t)v178, (uint64_t)&v180);
  sub_100037358(a3, (uint64_t)&v180);
  v50 = v183;
  if (v183)
  {
    v51 = (unint64_t *)&v183->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = (std::__shared_weak_count *)v180.n128_u64[1];
  if (v180.n128_u64[1])
  {
    v54 = (unint64_t *)(v180.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  sub_10002C64C((uint64_t)v178, (uint64_t)&v180);
  sub_100037358(a4, (uint64_t)&v180);
  v56 = v183;
  if (v183)
  {
    v57 = (unint64_t *)&v183->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)v180.n128_u64[1];
  if (v180.n128_u64[1])
  {
    v60 = (unint64_t *)(v180.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = a6 - 1;
  if (v62 < 0)
  {
LABEL_192:
    v11 = (*(_QWORD *)(a4 + 144) - *(_QWORD *)(a3 + 144)) & ~((uint64_t)(*(_QWORD *)(a4 + 144) - *(_QWORD *)(a3 + 144)) >> 63);
    goto LABEL_193;
  }
  v154 = v15;
  while (1)
  {
    v63 = *(_DWORD *)(*(_QWORD *)(v15 + 16) + 48 * v62);
    if (v63 != 1)
      break;
LABEL_190:
    if (v62-- <= 0)
      goto LABEL_192;
  }
  if (!v63)
    goto LABEL_192;
  v64 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * v62) + 8);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64) & 1) == 0)
    goto LABEL_192;
  v198 = &v200;
  v199 = xmmword_10013FEC0;
  v65 = *(_QWORD *)(a3 + 24);
  v66 = *(_QWORD *)(a4 + 144) - *(_QWORD *)(a3 + 144);
  v67 = v66 & ~(v66 >> 63);
  while (!sub_10002C4A4(a3, a4))
  {
    sub_1000174D8(a3 + 56);
    v68 = *(std::__shared_weak_count **)(a3 + 120);
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v71 = *(_QWORD *)(a3 + 144);
    if (((*(_QWORD *)(a4 + 144) - v71) & (unint64_t)~((*(_QWORD *)(a4 + 144) - v71) >> 63)) >= *(_QWORD *)(a3 + 136))
      v72 = *(_QWORD *)(a3 + 136);
    else
      v72 = (*(_QWORD *)(a4 + 144) - v71) & ~((*(_QWORD *)(a4 + 144) - v71) >> 63);
    if (!v68)
      goto LABEL_88;
    v73 = (unint64_t *)&v68->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
      if (!v72)
        goto LABEL_96;
LABEL_89:
      v75 = *(_QWORD *)a3;
      v76 = *(_QWORD *)(a3 + 8);
      v180.n128_u64[0] = *(_QWORD *)a3;
      v180.n128_u64[1] = v76;
      if (v76)
      {
        v77 = (unint64_t *)(v76 + 8);
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      v181 = v72;
      v80 = (uint64_t)v198;
      v79 = v199;
      v81 = (__n128 *)&v198[3 * v199];
      if ((_QWORD)v199 == *((_QWORD *)&v199 + 1))
      {
        sub_1000615C0((uint64_t *)&v198, v81, 1, &v180, &v159);
        v88 = (std::__shared_weak_count *)v180.n128_u64[1];
        if (v180.n128_u64[1])
        {
          v89 = (unint64_t *)(v180.n128_u64[1] + 8);
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
      }
      else
      {
        v81->n128_u64[0] = v75;
        v81->n128_u64[1] = v180.n128_u64[1];
        *(_QWORD *)(v80 + 24 * v79 + 16) = v72;
        *(_QWORD *)&v199 = v79 + 1;
      }
      sub_10002D5FC(a3, v72);
    }
    else
    {
LABEL_88:
      if (v72)
        goto LABEL_89;
LABEL_96:
      sub_10005DB8C(a3, (uint64_t)v162);
      v82 = v164;
      if (v164)
      {
        v83 = (unint64_t *)&v164->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v85 = v163;
      if (v163)
      {
        v86 = (unint64_t *)&v163->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
    }
  }
  sub_10002EBC4((uint64_t *)&v180, (uint64_t *)&v198, v65, v67);
  sub_10002CA7C((uint64_t)&v187, (uint64_t)&v159);
  sub_10002C64C((uint64_t)&v187, (uint64_t)v156);
  v91 = sub_10002C4A4((uint64_t)&v159, (uint64_t)v156);
  v92 = v158;
  if (v158)
  {
    v93 = (unint64_t *)&v158->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v157;
  if (v157)
  {
    v96 = (unint64_t *)&v157->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v161;
  if (v161)
  {
    v99 = (unint64_t *)&v161->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v160;
  if (v160)
  {
    v102 = (unint64_t *)&v160->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
      if (!v91)
        goto LABEL_131;
      goto LABEL_156;
    }
  }
  if (v91)
    goto LABEL_156;
LABEL_131:
  sub_10002CA7C((uint64_t)&v187, (uint64_t)&v159);
  sub_10002C64C((uint64_t)&v187, (uint64_t)v156);
  v11 = sub_10005DBDC(a2, v62);
  v104 = v158;
  if (v158)
  {
    v105 = (unint64_t *)&v158->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v157;
  if (v157)
  {
    v108 = (unint64_t *)&v157->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v161;
  if (v161)
  {
    v111 = (unint64_t *)&v161->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v160;
  if (!v160)
    goto LABEL_150;
  v114 = (unint64_t *)&v160->__shared_owners_;
  do
    v115 = __ldaxr(v114);
  while (__stlxr(v115 - 1, v114));
  if (v115)
  {
LABEL_150:
    if (v11 < 0)
      goto LABEL_151;
    goto LABEL_156;
  }
  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
  std::__shared_weak_count::__release_weak(v113);
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_156;
LABEL_151:
  if (!(_DWORD)v11)
  {
LABEL_156:
    v116 = v197;
    v15 = v154;
    if (v197)
    {
      v117 = (unint64_t *)&v197->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    v119 = v196;
    if (v196)
    {
      v120 = (unint64_t *)&v196->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    v122 = v195;
    if (v195)
    {
      v123 = (unint64_t *)&v195->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
    v125 = v193;
    if (v193)
    {
      v126 = (unint64_t *)&v193->__shared_owners_;
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    v128 = v191;
    if (v191)
    {
      v129 = (unint64_t *)&v191->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    v131 = v189;
    if (v189)
    {
      v132 = (unint64_t *)&v189->__shared_owners_;
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
    if (v185 && v186 != __p)
      operator delete(__p);
    sub_100015C2C((uint64_t)&v180);
    sub_100015C2C((uint64_t)&v198);
    goto LABEL_190;
  }
  v136 = v197;
  if (v197)
  {
    v137 = (unint64_t *)&v197->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = v196;
  if (v196)
  {
    v140 = (unint64_t *)&v196->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = v195;
  if (v195)
  {
    v143 = (unint64_t *)&v195->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = v193;
  if (v193)
  {
    v146 = (unint64_t *)&v193->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = v191;
  if (v191)
  {
    v149 = (unint64_t *)&v191->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = v189;
  if (v189)
  {
    v152 = (unint64_t *)&v189->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  if (v185 && v186 != __p)
    operator delete(__p);
  sub_100015C2C((uint64_t)&v180);
  sub_100015C2C((uint64_t)&v198);
LABEL_193:
  sub_10002EB64((uint64_t)v178);
  return v11;
}

void sub_10005DAC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100012168((uint64_t)&STACK[0x4E0]);
  sub_100015C2C(v1 - 240);
  sub_10002EB64((uint64_t)&STACK[0x2C8]);
  _Unwind_Resume(a1);
}

uint64_t sub_10005DB8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10002E8C4(a2, a1);
  return sub_10002D9AC(a1);
}

void sub_10005DBC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100012168(v1 + 112);
  sub_100012168(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10005DBDC(uint64_t a1, unint64_t a2)
{
  if (*(_BYTE *)(a1 + 48) && *(_QWORD *)(a1 + 40) <= a2)
    return 0;
  else
    return sub_100013598(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 16 * a2));
}

unint64_t sub_10005DC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, char a6, BOOL a7, uint64_t a8)
{
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t *v248;
  unint64_t v249;
  unint64_t *v250;
  _QWORD *v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v255;
  uint64_t v256;
  __int128 v257;
  _OWORD v258[2];
  uint64_t v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  char v263;
  __int128 v264;
  __int128 v265;
  unint64_t v266;
  char v267;
  __int128 v268;
  _OWORD v269[2];
  uint64_t v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  char v274;
  __int128 v275;
  __int128 v276;
  unint64_t v277;
  char v278;
  void *__p;
  std::__shared_weak_count *v280;
  char *v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  uint64_t v286;
  std::__shared_weak_count *v287;
  uint64_t v288;
  __int128 v289;
  _BYTE v290[25];
  uint64_t v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  char v295;
  __int128 v296;
  __int128 v297;
  unint64_t v298;
  char v299;
  __int128 v300;
  _OWORD v301[2];
  uint64_t v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  char v306;
  __int128 v307;
  __int128 v308;
  unint64_t v309;
  char v310;
  unint64_t v311;
  unint64_t v312;
  unsigned __int8 v313;
  _QWORD v314[6];
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  char v318;
  __int128 v319;
  uint64_t v320;
  uint64_t v321;
  std::__shared_weak_count *v322;
  _OWORD v323[2];
  uint64_t v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  char v328;
  uint64_t v329;
  std::__shared_weak_count *v330;
  __int128 v331;
  uint64_t v332;
  char v333;
  __int128 v334;
  _OWORD v335[2];
  uint64_t v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  char v340;
  __int128 v341;
  __int128 v342;
  unint64_t v343;
  char v344;
  unint64_t v345;
  uint64_t v346;
  __int128 v347;
  _BYTE v348[25];
  uint64_t v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  char v353;
  __int128 v354;
  __int128 v355;
  unint64_t v356;
  char v357;
  std::__shared_weak_count *v358;
  std::__shared_weak_count *v359;
  std::__shared_weak_count *v360;
  std::__shared_weak_count *v361;
  std::__shared_weak_count *v362;
  uint64_t v363[4];
  uint64_t v364;
  _BYTE v365[24];
  _BYTE *v366;

  v12 = (_QWORD *)a1;
  v250 = (unint64_t *)(a3 + 144);
  v13 = *(_QWORD *)(a1 + 40);
  v253 = *(_QWORD *)(a3 + 144);
  v14 = v253 % v13;
  v15 = v13 - v253 % v13;
  v16 = *(_QWORD *)(a3 + 8);
  if (v14)
    v17 = v15;
  else
    v17 = 0;
  *(_QWORD *)&v334 = *(_QWORD *)a3;
  *((_QWORD *)&v334 + 1) = v16;
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v335[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v335 + 9) = *(_OWORD *)(a3 + 25);
  v336 = *(_QWORD *)(a3 + 48);
  v337 = *(_OWORD *)(a3 + 56);
  v338 = *(_OWORD *)(a3 + 72);
  v339 = *(_OWORD *)(a3 + 88);
  v340 = *(_BYTE *)(a3 + 104);
  v20 = *(_QWORD *)(a3 + 120);
  *(_QWORD *)&v341 = *(_QWORD *)(a3 + 112);
  *((_QWORD *)&v341 + 1) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v342 = *(_OWORD *)(a3 + 128);
  v343 = *v250;
  v344 = *(_BYTE *)(a3 + 152);
  v23 = (std::__shared_weak_count *)a4[1];
  v321 = *a4;
  v322 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  v323[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v323 + 9) = *(_OWORD *)((char *)a4 + 25);
  v324 = a4[6];
  v26 = *(_OWORD *)(a4 + 9);
  v325 = *(_OWORD *)(a4 + 7);
  v326 = v26;
  v327 = *(_OWORD *)(a4 + 11);
  v328 = *((_BYTE *)a4 + 104);
  v27 = (std::__shared_weak_count *)a4[15];
  v329 = a4[14];
  v330 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v31 = a4[18];
  v30 = a4 + 18;
  v331 = *((_OWORD *)v30 - 1);
  v332 = v31;
  v333 = *((_BYTE *)v30 + 8);
  v32 = *(_QWORD *)(a1 + 40);
  v248 = v30;
  v33 = *v250;
  v34 = *v30 - *v250;
  v35 = v34 & ~(v34 >> 63);
  if (v35 <= v32)
    v35 = *(_QWORD *)(a1 + 40);
  if (v34 <= 0)
    v36 = 0;
  else
    v36 = v35;
  *(_QWORD *)&v319 = v33 / v32;
  *((_QWORD *)&v319 + 1) = (v32 + v33 + v36 - 1) / v32;
  LOBYTE(v320) = 2;
  sub_10005C27C(a1, a2, a5, (uint64_t)&v319, (uint64_t)v363);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[3] - v12[2]) >> 4) - 1 != a5)
    goto LABEL_31;
  v37 = operator new(0x20uLL);
  v281 = (char *)(v37 + 4);
  *(_OWORD *)v37 = v319;
  v37[2] = v320;
  *((_DWORD *)v37 + 6) = 1;
  __p = v37;
  v280 = (std::__shared_weak_count *)(v37 + 4);
  sub_100098358((uint64_t)v363, (uint64_t)&__p, (uint64_t)&v347);
  sub_1000EC10C((uint64_t)v363, (uint64_t)&v347);
  v38 = (__int128 *)*((_QWORD *)&v351 + 1);
  if (*((__int128 **)&v351 + 1) == &v350)
  {
    v39 = 4;
    v38 = &v350;
    goto LABEL_26;
  }
  if (*((_QWORD *)&v351 + 1))
  {
    v39 = 5;
LABEL_26:
    (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
  }
  v40 = *(_QWORD *)&v348[16];
  *(_QWORD *)&v348[16] = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  if (__p)
  {
    v280 = (std::__shared_weak_count *)__p;
    operator delete(__p);
  }
LABEL_31:
  sub_100052388((uint64_t)v363, (uint64_t)&v315);
  v256 = a8;
  sub_1000524BC((uint64_t)v363, (uint64_t)v314);
  v255 = 0;
  v249 = a5 + 1;
  v251 = v12;
  v252 = a5;
  while (1)
  {
    if (!sub_1000EBDF0((uint64_t)&v315, (uint64_t)v314))
    {
      v124 = 2;
LABEL_267:
      v185 = v256;
      goto LABEL_268;
    }
    v41 = v316;
    v42 = v317;
    v43 = v318;
    v44 = v343;
    v45 = v12[5];
    v46 = v343 / v45;
    if ((v318 & 2) != 0)
      v47 = v316;
    else
      v47 = v316 + 1;
    v311 = v343 / v45;
    v312 = v47;
    v313 = 2;
    v48 = v47 >= v46;
    v49 = v47 - v46;
    if (v49 == 0 || !v48)
      v49 = qword_1001A05E0;
    if (v49)
      break;
LABEL_150:
    v115 = (v43 & 1) + v42 - v41 + (int)(((v43 >> 1) & 1) - 1);
    v116 = v45 * v115 - v17;
    if (v332 - v44 < v116)
      v116 = v332 - v44;
    if ((_QWORD)v326 - (_QWORD)v338 < v116)
    {
      v124 = 4;
      goto LABEL_267;
    }
    *(_QWORD *)&v347 = v45 * v47;
    *((_QWORD *)&v347 + 1) = v45 * (v115 + v47);
    v348[0] = 2;
    sub_10002DB88((uint64_t)&v334, (uint64_t)&v347, (uint64_t)&v321, (uint64_t)&__p);
    v345 = -78;
    v117 = a2;
    if (((uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 4) - 1 != v252 || *(_BYTE *)(a2 + 56) == 0 || a7)
    {
LABEL_157:
      v121 = sub_1000134D4(*(_QWORD *)(*(_QWORD *)(v117 + 16) + 16 * v252));
      v123 = v122;
      v345 = v121;
      v346 = v122;
      goto LABEL_158;
    }
    v118 = *(_QWORD *)(v12[2] + 48 * v252 + 24);
    *(_OWORD *)v348 = 0u;
    v347 = 0u;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v118 + 72))(&v347);
    if ((_QWORD)v347)
    {
      v119 = v347 + ((v288 - v284) & ~((uint64_t)(v288 - v284) >> 63)) - 1;
      v120 = 1
           - (v347
            + ((v288 - v284) & ~((uint64_t)(v288 - v284) >> 63)))
           + v119 / (unint64_t)v347 * v347
           + *((_QWORD *)&v347 + 1) * v347
           + v119;
      v117 = a2;
      if (v286 - v282 < v120)
        goto LABEL_157;
    }
    else
    {
      v117 = a2;
      if ((a6 & 1) == 0)
        goto LABEL_157;
    }
    v183 = sub_1000134D4(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v117 + 16) + 16 * v252) + 16));
    v121 = v183;
    v123 = v184;
    v345 = v183;
    v346 = v184;
    a7 = v184 < v284 || v183 > ((*v248 - *v250) & ~((uint64_t)(*v248 - *v250) >> 63));
LABEL_158:
    if (v121 < 0 && (_DWORD)v121)
    {
      v124 = 1;
    }
    else
    {
      v125 = v284;
      v126 = v288;
      if ((a6 & 1) != 0)
      {
        if (a7)
        {
          v127 = *v248 - *v250;
          if (v127 <= v121)
            v127 = v121;
          v268 = v334;
          if (*((_QWORD *)&v334 + 1))
          {
            v128 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
            do
              v129 = __ldxr(v128);
            while (__stxr(v129 + 1, v128));
          }
          v269[0] = v335[0];
          *(_OWORD *)((char *)v269 + 9) = *(_OWORD *)((char *)v335 + 9);
          v270 = v336;
          v271 = v337;
          v272 = v338;
          v273 = v339;
          v274 = v340;
          v275 = v341;
          if (*((_QWORD *)&v341 + 1))
          {
            v130 = (unint64_t *)(*((_QWORD *)&v341 + 1) + 8);
            do
              v131 = __ldxr(v130);
            while (__stxr(v131 + 1, v130));
          }
          v276 = v342;
          v277 = v343;
          v278 = v344;
          sub_10005F740((uint64_t *)&v268, (uint64_t)&v321, v127 & ~(v127 >> 63), v123, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v347);
          sub_10004F26C(v256);
          sub_10002EA44(v256, (uint64_t)&v347);
          *(_BYTE *)(v256 + 528) = 1;
          v132 = v362;
          if (v362)
          {
            v133 = (unint64_t *)&v362->__shared_owners_;
            do
              v134 = __ldaxr(v133);
            while (__stlxr(v134 - 1, v133));
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
          v135 = v361;
          if (v361)
          {
            v136 = (unint64_t *)&v361->__shared_owners_;
            do
              v137 = __ldaxr(v136);
            while (__stlxr(v137 - 1, v136));
            if (!v137)
            {
              ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
              std::__shared_weak_count::__release_weak(v135);
            }
          }
          v138 = v360;
          if (v360)
          {
            v139 = (unint64_t *)&v360->__shared_owners_;
            do
              v140 = __ldaxr(v139);
            while (__stlxr(v140 - 1, v139));
            if (!v140)
            {
              ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
              std::__shared_weak_count::__release_weak(v138);
            }
          }
          v141 = v359;
          if (v359)
          {
            v142 = (unint64_t *)&v359->__shared_owners_;
            do
              v143 = __ldaxr(v142);
            while (__stlxr(v143 - 1, v142));
            if (!v143)
            {
              ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
              std::__shared_weak_count::__release_weak(v141);
            }
          }
          v144 = v358;
          if (v358)
          {
            v145 = (unint64_t *)&v358->__shared_owners_;
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
              std::__shared_weak_count::__release_weak(v144);
            }
          }
          v147 = (std::__shared_weak_count *)v351;
          if ((_QWORD)v351)
          {
            v148 = (unint64_t *)(v351 + 8);
            do
              v149 = __ldaxr(v148);
            while (__stlxr(v149 - 1, v148));
            if (!v149)
            {
              ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
              std::__shared_weak_count::__release_weak(v147);
            }
          }
          v150 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
          if (*((_QWORD *)&v275 + 1))
          {
            v151 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
            do
              v152 = __ldaxr(v151);
            while (__stlxr(v152 - 1, v151));
            if (!v152)
            {
              ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
              std::__shared_weak_count::__release_weak(v150);
            }
          }
          v153 = (std::__shared_weak_count *)*((_QWORD *)&v268 + 1);
          if (*((_QWORD *)&v268 + 1))
          {
            v154 = (unint64_t *)(*((_QWORD *)&v268 + 1) + 8);
            do
              v155 = __ldaxr(v154);
            while (__stlxr(v155 - 1, v154));
            if (!v155)
            {
              ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
              std::__shared_weak_count::__release_weak(v153);
            }
          }
          sub_10002CA7C(v256, (uint64_t)&v347);
          sub_100037358((uint64_t)&v334, (uint64_t)&v347);
          v156 = (std::__shared_weak_count *)*((_QWORD *)&v354 + 1);
          if (*((_QWORD *)&v354 + 1))
          {
            v157 = (unint64_t *)(*((_QWORD *)&v354 + 1) + 8);
            do
              v158 = __ldaxr(v157);
            while (__stlxr(v158 - 1, v157));
            if (!v158)
            {
              ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
              std::__shared_weak_count::__release_weak(v156);
            }
          }
          v159 = (std::__shared_weak_count *)*((_QWORD *)&v347 + 1);
          if (*((_QWORD *)&v347 + 1))
          {
            v160 = (unint64_t *)(*((_QWORD *)&v347 + 1) + 8);
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
          }
          sub_10002C64C(v256, (uint64_t)&v347);
          sub_100037358((uint64_t)&v321, (uint64_t)&v347);
          v162 = (std::__shared_weak_count *)*((_QWORD *)&v354 + 1);
          if (*((_QWORD *)&v354 + 1))
          {
            v163 = (unint64_t *)(*((_QWORD *)&v354 + 1) + 8);
            do
              v164 = __ldaxr(v163);
            while (__stlxr(v164 - 1, v163));
            if (!v164)
            {
              ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
              std::__shared_weak_count::__release_weak(v162);
            }
          }
          v165 = (std::__shared_weak_count *)*((_QWORD *)&v347 + 1);
          if (*((_QWORD *)&v347 + 1))
          {
            v166 = (unint64_t *)(*((_QWORD *)&v347 + 1) + 8);
            do
              v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
          }
          a7 = 1;
          v168 = v345;
        }
        else
        {
          a7 = 0;
          v168 = v121;
        }
        v253 = v123;
      }
      else if (v123 == v343)
      {
        v168 = v121;
      }
      else
      {
        v168 = sub_100120940((uint64_t)&v334, (uint64_t)&v321, v12[5] * v115, &v345);
        v345 = v168;
        v346 = v169;
        a7 = v168 != v12[5] * v115;
      }
      v170 = v126;
      sub_10002D5FC((uint64_t)&v334, v168);
      v17 = 0;
      a6 = 0;
      v255 += v345;
      v124 = 4 * (v123 + v121 < ((v170 - v125) & ~((uint64_t)(v170 - v125) >> 63)) + v125);
    }
    v171 = v287;
    if (v287)
    {
      v172 = (unint64_t *)&v287->__shared_owners_;
      do
        v173 = __ldaxr(v172);
      while (__stlxr(v173 - 1, v172));
      if (!v173)
      {
        ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
        std::__shared_weak_count::__release_weak(v171);
      }
    }
    v174 = v285;
    if (v285)
    {
      v175 = (unint64_t *)&v285->__shared_owners_;
      do
        v176 = __ldaxr(v175);
      while (__stlxr(v176 - 1, v175));
      if (!v176)
      {
        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
        std::__shared_weak_count::__release_weak(v174);
      }
    }
    v177 = v283;
    if (v283)
    {
      v178 = (unint64_t *)&v283->__shared_owners_;
      do
        v179 = __ldaxr(v178);
      while (__stlxr(v179 - 1, v178));
      if (!v179)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
    }
    v180 = v280;
    if (v280)
    {
      v181 = (unint64_t *)&v280->__shared_owners_;
      do
        v182 = __ldaxr(v181);
      while (__stlxr(v182 - 1, v181));
      if (!v182)
      {
        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
        std::__shared_weak_count::__release_weak(v180);
      }
    }
    if (v124)
      goto LABEL_267;
    sub_1000EC020(&v315);
  }
  v50 = sub_10005BC74((uint64_t)v12, a2, (uint64_t)&v334, (uint64_t)&v321, v249, (uint64_t *)&v311, a6 & 1, a7, v256, v363);
  v345 = v50;
  v346 = v51;
  if ((v50 & 0x8000000000000000) != 0 && (_DWORD)v50)
  {
    v124 = 1;
    goto LABEL_267;
  }
  v52 = v253;
  if (v51 < v44)
    v52 = v51;
  v253 = v52;
  v53 = v343;
  if (v51 >= v343)
  {
    v54 = v51 + v50 > v12[5] * (v47 - 1);
    v55 = v256;
    if (v50 <= ((*v248 - *v250) & ~((uint64_t)(*v248 - *v250) >> 63)))
    {
      a7 = 0;
      goto LABEL_114;
    }
  }
  else
  {
    v54 = v51 + v50 > v12[5] * (v47 - 1);
    v55 = v256;
  }
  v300 = v334;
  if (*((_QWORD *)&v334 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v301[0] = v335[0];
  *(_OWORD *)((char *)v301 + 9) = *(_OWORD *)((char *)v335 + 9);
  v303 = v337;
  v304 = v338;
  v305 = v339;
  v306 = v340;
  v302 = v336;
  v307 = v341;
  if (*((_QWORD *)&v341 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v341 + 1) + 8);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v308 = v342;
  v309 = v343;
  v310 = v344;
  sub_10005F740((uint64_t *)&v300, (uint64_t)&v321, v50, v346, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v347);
  sub_10004F26C(v55);
  sub_10002EA44(v55, (uint64_t)&v347);
  *(_BYTE *)(v55 + 528) = 1;
  v60 = v362;
  if (v362)
  {
    v61 = (unint64_t *)&v362->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = v361;
  if (v361)
  {
    v64 = (unint64_t *)&v361->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v360;
  if (v360)
  {
    v67 = (unint64_t *)&v360->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v359;
  if (v359)
  {
    v70 = (unint64_t *)&v359->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v358;
  if (v358)
  {
    v73 = (unint64_t *)&v358->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)v351;
  if ((_QWORD)v351)
  {
    v76 = (unint64_t *)(v351 + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v307 + 1);
  if (*((_QWORD *)&v307 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v307 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = (std::__shared_weak_count *)*((_QWORD *)&v300 + 1);
  if (*((_QWORD *)&v300 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v300 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  sub_10002CA7C(v55, (uint64_t)&v347);
  sub_100037358((uint64_t)&v334, (uint64_t)&v347);
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v354 + 1);
  if (*((_QWORD *)&v354 + 1))
  {
    v85 = (unint64_t *)(*((_QWORD *)&v354 + 1) + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v347 + 1);
  if (*((_QWORD *)&v347 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v347 + 1) + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  sub_10002C64C(v55, (uint64_t)&v347);
  sub_100037358((uint64_t)&v321, (uint64_t)&v347);
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v354 + 1);
  if (*((_QWORD *)&v354 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v354 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v347 + 1);
  if (*((_QWORD *)&v347 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v347 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  a7 = 1;
  v53 = v343;
LABEL_114:
  v289 = v334;
  if (*((_QWORD *)&v334 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
  *(_OWORD *)v290 = v335[0];
  *(_OWORD *)&v290[9] = *(_OWORD *)((char *)v335 + 9);
  v292 = v337;
  v293 = v338;
  v294 = v339;
  v295 = v340;
  v291 = v336;
  v296 = v341;
  if (*((_QWORD *)&v341 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v341 + 1) + 8);
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
  }
  v297 = v342;
  v298 = v343;
  v299 = v344;
  if (a7)
    v100 = 0;
  else
    v100 = (v312 - v311 + (v313 & 1) + ((v313 >> 1) & 1) - 1) * v251[5];
  v101 = v100 - v346 + *(_QWORD *)&v290[8];
  if (v345 < v101)
    v101 = v345;
  if (v100)
    v102 = v101;
  else
    v102 = v345;
  sub_10002D5FC((uint64_t)&v289, v102);
  sub_10002C308(&v292);
  v347 = v289;
  v289 = 0uLL;
  *(_OWORD *)v348 = *(_OWORD *)v290;
  *(_OWORD *)&v348[9] = *(_OWORD *)&v290[9];
  v349 = v291;
  v350 = v292;
  v351 = v293;
  v352 = v294;
  v353 = v295;
  v354 = v296;
  v296 = 0uLL;
  v355 = v297;
  v357 = v299;
  v356 = v298;
  sub_100037358((uint64_t)&v334, (uint64_t)&v347);
  v103 = (std::__shared_weak_count *)*((_QWORD *)&v354 + 1);
  if (*((_QWORD *)&v354 + 1))
  {
    v104 = (unint64_t *)(*((_QWORD *)&v354 + 1) + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = (std::__shared_weak_count *)*((_QWORD *)&v347 + 1);
  if (*((_QWORD *)&v347 + 1))
  {
    v107 = (unint64_t *)(*((_QWORD *)&v347 + 1) + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = (std::__shared_weak_count *)*((_QWORD *)&v296 + 1);
  if (*((_QWORD *)&v296 + 1))
  {
    v110 = (unint64_t *)(*((_QWORD *)&v296 + 1) + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = (std::__shared_weak_count *)*((_QWORD *)&v289 + 1);
  if (*((_QWORD *)&v289 + 1))
  {
    v113 = (unint64_t *)(*((_QWORD *)&v289 + 1) + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v44 = v343;
  v255 += v343 - v53;
  if (v54)
  {
    v17 = 0;
    a6 = 0;
    v12 = v251;
    v45 = v251[5];
    goto LABEL_150;
  }
  a6 = 0;
  v124 = 4;
  v185 = v256;
  v12 = v251;
LABEL_268:
  v186 = v314[0];
  v314[0] = 0;
  if (v186)
    (*(void (**)(uint64_t))(*(_QWORD *)v186 + 24))(v186);
  v187 = v315;
  v315 = 0;
  if (v187)
    (*(void (**)(uint64_t))(*(_QWORD *)v187 + 24))(v187);
  if (v124 != 2)
  {
    if (v124 != 4)
      goto LABEL_350;
LABEL_349:
    v345 = v255;
    v346 = v253;
    goto LABEL_350;
  }
  if (sub_10002C4A4((uint64_t)&v334, (uint64_t)&v321))
    goto LABEL_349;
  if (!sub_10005F898((uint64_t)v363))
  {
    sub_1000EC180((uint64_t)v363, (uint64_t)&v347);
    if (v12[5] * *((_QWORD *)&v347 + 1) >= (unint64_t)*v248)
      goto LABEL_349;
  }
  v188 = sub_10005BE54((uint64_t)v12, a2, (uint64_t)&v334, (uint64_t)&v321, v249, a6 & 1, a7, v185, v363);
  v189 = v188;
  v191 = v190;
  v345 = v188;
  v346 = v190;
  if ((v188 & 0x8000000000000000) == 0 || !(_DWORD)v188)
  {
    if ((a6 & 1) != 0)
    {
      v257 = v334;
      if (*((_QWORD *)&v334 + 1))
      {
        v192 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
        do
          v193 = __ldxr(v192);
        while (__stxr(v193 + 1, v192));
      }
      v258[0] = v335[0];
      *(_OWORD *)((char *)v258 + 9) = *(_OWORD *)((char *)v335 + 9);
      v260 = v337;
      v261 = v338;
      v259 = v336;
      v262 = v339;
      v263 = v340;
      v264 = v341;
      if (*((_QWORD *)&v341 + 1))
      {
        v194 = (unint64_t *)(*((_QWORD *)&v341 + 1) + 8);
        do
          v195 = __ldxr(v194);
        while (__stxr(v195 + 1, v194));
      }
      v265 = v342;
      v266 = v343;
      v267 = v344;
      sub_10005F740((uint64_t *)&v257, (uint64_t)&v321, v188, v346, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v347);
      sub_10004F26C(v185);
      sub_10002EA44(v185, (uint64_t)&v347);
      *(_BYTE *)(v185 + 528) = 1;
      v196 = v362;
      if (v362)
      {
        v197 = (unint64_t *)&v362->__shared_owners_;
        do
          v198 = __ldaxr(v197);
        while (__stlxr(v198 - 1, v197));
        if (!v198)
        {
          ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
          std::__shared_weak_count::__release_weak(v196);
        }
      }
      v199 = v361;
      if (v361)
      {
        v200 = (unint64_t *)&v361->__shared_owners_;
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
      }
      v202 = v360;
      if (v360)
      {
        v203 = (unint64_t *)&v360->__shared_owners_;
        do
          v204 = __ldaxr(v203);
        while (__stlxr(v204 - 1, v203));
        if (!v204)
        {
          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
          std::__shared_weak_count::__release_weak(v202);
        }
      }
      v205 = v359;
      if (v359)
      {
        v206 = (unint64_t *)&v359->__shared_owners_;
        do
          v207 = __ldaxr(v206);
        while (__stlxr(v207 - 1, v206));
        if (!v207)
        {
          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
          std::__shared_weak_count::__release_weak(v205);
        }
      }
      v208 = v358;
      if (v358)
      {
        v209 = (unint64_t *)&v358->__shared_owners_;
        do
          v210 = __ldaxr(v209);
        while (__stlxr(v210 - 1, v209));
        if (!v210)
        {
          ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
          std::__shared_weak_count::__release_weak(v208);
        }
      }
      v211 = (std::__shared_weak_count *)v351;
      if ((_QWORD)v351)
      {
        v212 = (unint64_t *)(v351 + 8);
        do
          v213 = __ldaxr(v212);
        while (__stlxr(v213 - 1, v212));
        if (!v213)
        {
          ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
          std::__shared_weak_count::__release_weak(v211);
        }
      }
      v214 = (std::__shared_weak_count *)*((_QWORD *)&v264 + 1);
      if (*((_QWORD *)&v264 + 1))
      {
        v215 = (unint64_t *)(*((_QWORD *)&v264 + 1) + 8);
        do
          v216 = __ldaxr(v215);
        while (__stlxr(v216 - 1, v215));
        if (!v216)
        {
          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
          std::__shared_weak_count::__release_weak(v214);
        }
      }
      v217 = (std::__shared_weak_count *)*((_QWORD *)&v257 + 1);
      if (*((_QWORD *)&v257 + 1))
      {
        v218 = (unint64_t *)(*((_QWORD *)&v257 + 1) + 8);
        do
          v219 = __ldaxr(v218);
        while (__stlxr(v219 - 1, v218));
        if (!v219)
        {
          ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
          std::__shared_weak_count::__release_weak(v217);
        }
      }
      sub_10002CA7C(v185, (uint64_t)&v347);
      sub_100037358((uint64_t)&v334, (uint64_t)&v347);
      v220 = (std::__shared_weak_count *)*((_QWORD *)&v354 + 1);
      if (*((_QWORD *)&v354 + 1))
      {
        v221 = (unint64_t *)(*((_QWORD *)&v354 + 1) + 8);
        do
          v222 = __ldaxr(v221);
        while (__stlxr(v222 - 1, v221));
        if (!v222)
        {
          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
          std::__shared_weak_count::__release_weak(v220);
        }
      }
      v223 = (std::__shared_weak_count *)*((_QWORD *)&v347 + 1);
      if (*((_QWORD *)&v347 + 1))
      {
        v224 = (unint64_t *)(*((_QWORD *)&v347 + 1) + 8);
        do
          v225 = __ldaxr(v224);
        while (__stlxr(v225 - 1, v224));
        if (!v225)
        {
          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
          std::__shared_weak_count::__release_weak(v223);
        }
      }
      sub_10002C64C(v185, (uint64_t)&v347);
      sub_100037358((uint64_t)&v321, (uint64_t)&v347);
      v226 = (std::__shared_weak_count *)*((_QWORD *)&v354 + 1);
      if (*((_QWORD *)&v354 + 1))
      {
        v227 = (unint64_t *)(*((_QWORD *)&v354 + 1) + 8);
        do
          v228 = __ldaxr(v227);
        while (__stlxr(v228 - 1, v227));
        if (!v228)
        {
          ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
          std::__shared_weak_count::__release_weak(v226);
        }
      }
      v229 = (std::__shared_weak_count *)*((_QWORD *)&v347 + 1);
      if (*((_QWORD *)&v347 + 1))
      {
        v230 = (unint64_t *)(*((_QWORD *)&v347 + 1) + 8);
        do
          v231 = __ldaxr(v230);
        while (__stlxr(v231 - 1, v230));
        if (!v231)
        {
          ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
          std::__shared_weak_count::__release_weak(v229);
        }
      }
      v189 = v345;
      v253 = v191;
    }
    sub_10002D5FC((uint64_t)&v334, v189);
    v255 += v345;
    goto LABEL_349;
  }
LABEL_350:
  v232 = v366;
  if (v366 == v365)
  {
    v233 = 4;
    v232 = v365;
LABEL_354:
    (*(void (**)(void))(*v232 + 8 * v233))();
  }
  else if (v366)
  {
    v233 = 5;
    goto LABEL_354;
  }
  v234 = v364;
  v364 = 0;
  if (v234)
    (*(void (**)(uint64_t))(*(_QWORD *)v234 + 40))(v234);
  v235 = v330;
  if (v330)
  {
    v236 = (unint64_t *)&v330->__shared_owners_;
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  v238 = v322;
  if (v322)
  {
    v239 = (unint64_t *)&v322->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v241 = (std::__shared_weak_count *)*((_QWORD *)&v341 + 1);
  if (*((_QWORD *)&v341 + 1))
  {
    v242 = (unint64_t *)(*((_QWORD *)&v341 + 1) + 8);
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = (std::__shared_weak_count *)*((_QWORD *)&v334 + 1);
  if (*((_QWORD *)&v334 + 1))
  {
    v245 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
      std::__shared_weak_count::__release_weak(v244);
    }
  }
  return v345;
}

void sub_10005F530(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)(v1 - 112);
  if (v3 == (_QWORD *)(v1 - 136))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 136);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD *)(v1 - 160);
  *(_QWORD *)(v1 - 160) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  sub_100012168((uint64_t)&STACK[0x5E0]);
  sub_100012168((uint64_t)&STACK[0x570]);
  sub_100012168((uint64_t)&STACK[0x680]);
  sub_100012168((uint64_t)&STACK[0x610]);
  _Unwind_Resume(a1);
}

void sub_10005F740(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _OWORD v20[2];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  uint64_t v29;
  char v30;

  v6 = (std::__shared_weak_count *)a1[1];
  v18 = *a1;
  v19 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v20[0] = *((_OWORD *)a1 + 1);
  *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)((char *)a1 + 25);
  v21 = a1[6];
  v22 = *(_OWORD *)(a1 + 7);
  v23 = *(_OWORD *)(a1 + 9);
  v24 = *(_OWORD *)(a1 + 11);
  v25 = *((_BYTE *)a1 + 104);
  v9 = (std::__shared_weak_count *)a1[15];
  v26 = a1[14];
  v27 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v28 = *((_OWORD *)a1 + 8);
  v29 = a1[18];
  v30 = *((_BYTE *)a1 + 152);
  sub_10002E74C((uint64_t)&v18, a2, a4, a3, a5, a6);
  v12 = v27;
  if (v27)
  {
    v13 = (unint64_t *)&v27->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_10005F87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100012168(v9);
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_10005F898(uint64_t a1)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[6];
  _QWORD v7[6];

  sub_100052388(a1, (uint64_t)v7);
  sub_1000524BC(a1, (uint64_t)v6);
  v2 = sub_1000EBD38((uint64_t)v7, (uint64_t)v6);
  v3 = v6[0];
  v6[0] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v4 = v7[0];
  v7[0] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v2;
}

void sub_10005F914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 24))(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005F958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t result;
  BOOL v9;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  if (v3 == v4)
    return 1;
  v7 = v3 + 48;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 - 40) + 56))(*(_QWORD *)(v7 - 40), a2, a3);
    if ((_DWORD)result)
      v9 = v7 == v4;
    else
      v9 = 1;
    v7 += 48;
  }
  while (!v9);
  return result;
}

uint64_t sub_10005F9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)v2
    || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v2 + 8) + 80))(*(_QWORD *)(v2 + 8))
    || **(_DWORD **)(a1 + 16))
  {
    return 0;
  }
  else
  {
    return sub_100014760(**(_QWORD ***)(a2 + 16));
  }
}

_QWORD *sub_10005FA40(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *__p;
  char v8;

  sub_100005870(&__p, "com.apple.di_stackable.cache.flusher");
  sub_1000418E8(a1);
  if (v8 < 0)
    operator delete(__p);
  sub_100041BDC(a1, a2, a3, (uint64_t)(a1 + 8));
  return a1;
}

void sub_10005FABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_10003F498(v15);
  _Unwind_Resume(a1);
}

_QWORD *sub_10005FAE8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD v4[2];
  char v5;

  v2 = a1[3];
  v4[0] = a1[5];
  v4[1] = v2;
  v5 = 2;
  return sub_10005FB20(a1, (uint64_t)v4, 0, a2);
}

_QWORD *sub_10005FB20@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  char v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  void *__p;
  void *v42;
  char *v43;
  uint64_t v44[2];
  unint64_t v45;
  uint64_t v46;
  _BYTE v47[24];
  _BYTE *v48;
  _QWORD v49[3];
  char v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  _QWORD v54[3];
  _QWORD *v55;

  v6 = result[6];
  v7 = *(_QWORD *)(v6 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v6 + 24) - v7) >> 4) == a3)
    goto LABEL_22;
  v9 = result;
  v10 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a2 + 16))
  {
    v12 = *(_QWORD *)a2;
    v11 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 >= v11 || *(_QWORD *)a2 + 1 >= v11)
      goto LABEL_21;
LABEL_5:
    if ((v10 & 1) + (uint64_t)(int)(((v10 >> 1) & 1) - 1) - v12 + v11)
      goto LABEL_6;
LABEL_22:
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a4 + 24) = 0;
    return result;
  }
  if (v10 != 3)
  {
    v12 = *(_QWORD *)a2;
    v11 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 >= v11)
      goto LABEL_21;
    goto LABEL_5;
  }
  v12 = *(_QWORD *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  if (v11 >= *(_QWORD *)a2)
    goto LABEL_5;
LABEL_21:
  if (!qword_1001A05E0)
    goto LABEL_22;
LABEL_6:
  v13 = result[7];
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 48 * a3 + 8) + 32))(*(_QWORD *)(v7 + 48 * a3 + 8));
  v15 = *(_QWORD *)a2;
  v16 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v14)
    v17 = v14;
  else
    v17 = *(_QWORD *)a2;
  if (v16 >= v14)
    v18 = v14;
  else
    v18 = *(_QWORD *)(a2 + 8);
  v19 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 16 * a3);
  v49[0] = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 48 * a3 + 8);
  v49[1] = v17;
  v49[2] = v18;
  v50 = 2;
  v51 = 0;
  v52 = v19;
  v53 = 7;
  v20 = v54;
  v54[0] = off_100175480;
  v55 = v54;
  if (v14 < v16)
  {
    v21 = v14;
    v22 = operator new(0x20uLL);
    v42 = v22 + 4;
    v43 = (char *)(v22 + 4);
    *v22 = v21;
    v22[1] = v16;
    *((_BYTE *)v22 + 16) = 2;
    *((_DWORD *)v22 + 6) = 2;
    __p = v22;
    sub_100098358((uint64_t)v49, (uint64_t)&__p, (uint64_t)v44);
    sub_1000EC10C((uint64_t)v49, (uint64_t)v44);
    v23 = v48;
    if (v48 == v47)
    {
      v24 = 4;
      v23 = v47;
    }
    else
    {
      if (!v48)
      {
LABEL_27:
        v26 = v46;
        v46 = 0;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
        if (__p)
        {
          v42 = __p;
          operator delete(__p);
        }
        v15 = *(_QWORD *)a2;
        goto LABEL_32;
      }
      v24 = 5;
    }
    (*(void (**)(void))(*v23 + 8 * v24))();
    goto LABEL_27;
  }
LABEL_32:
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
    v27 = v15;
  else
    v27 = v15 + 1;
  sub_100052388((uint64_t)v49, (uint64_t)v44);
  v28 = v46;
  v29 = v44[0];
  v44[0] = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  sub_100052388((uint64_t)v49, (uint64_t)v44);
  sub_1000524BC((uint64_t)v49, (uint64_t)&__p);
  v30 = a3 + 1;
  while (sub_1000EBDF0((uint64_t)v44, (uint64_t)&__p))
  {
    v31 = v45;
    if ((_DWORD)v46)
    {
      if ((_DWORD)v46 != v28)
        break;
    }
    else
    {
      v36[0] = v27;
      v36[1] = v45;
      v37 = 2;
      sub_10005FB20(&v38, v9, v36, v30);
      if (v28)
      {
        if (v40 != v28)
          break;
      }
      else
      {
        v28 = v40;
      }
      v27 = v39;
      if (v39 != v31)
        break;
    }
    sub_1000EC020(v44);
    v27 = v31;
  }
  v32 = __p;
  __p = 0;
  if (v32)
    (*(void (**)(void *))(*(_QWORD *)v32 + 24))(v32);
  v33 = v44[0];
  v44[0] = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
  v34 = *(_QWORD *)a2;
  if ((*(_BYTE *)(a2 + 16) & 2) == 0)
    ++v34;
  *(_QWORD *)a4 = v34;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = v28;
  if (v55 == v54)
  {
    v35 = 4;
  }
  else
  {
    if (!v55)
      goto LABEL_59;
    v35 = 5;
    v20 = v55;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v35))(v20);
LABEL_59:
  result = v51;
  v51 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
  return result;
}

void sub_10005FECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *a32)
{
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v36 = a32;
  if (a32 == (_QWORD *)(v33 + 56))
  {
    v37 = 4;
    v36 = (_QWORD *)(v33 + 56);
  }
  else
  {
    if (!a32)
      goto LABEL_6;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_6:
  if (a26)
    (*(void (**)(uint64_t))(*(_QWORD *)a26 + 40))(a26);
  if (__p)
    operator delete(__p);
  v38 = *(_QWORD **)(v34 - 96);
  if (v38 == v32)
  {
    v39 = 4;
  }
  else
  {
    if (!v38)
      goto LABEL_15;
    v39 = 5;
    v32 = *(_QWORD **)(v34 - 96);
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v39))(v32);
LABEL_15:
  v40 = *(_QWORD *)(v34 - 144);
  *(_QWORD *)(v34 - 144) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  _Unwind_Resume(exception_object);
}

void sub_10005FFD4()
{
  operator new();
}

void sub_100060040()
{
  operator delete();
}

uint64_t sub_10006005C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_100060064(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 8) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
}

uint64_t sub_100060078(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 == v2)
    return 0;
  v3 = v1 + 48;
  do
  {
    LODWORD(result) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 - 40) + 40))(*(_QWORD *)(v3 - 40));
    if (*(_DWORD *)(v3 - 48))
      result = 0;
    else
      result = result;
    if ((result & 1) != 0)
      break;
    v5 = v3 == v2;
    v3 += 48;
  }
  while (!v5);
  return result;
}

void sub_1000600D8()
{
  operator new();
}

void sub_10006013C()
{
  operator delete();
}

uint64_t sub_100060160(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 24) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24));
}

uint64_t sub_100060174(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 24) - 24) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 24));
}

uint64_t sub_100060188(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 == v2)
    return 0;
  v3 = v1 + 48;
  do
  {
    LODWORD(result) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 - 40) + 80))(*(_QWORD *)(v3 - 40));
    if (*(_DWORD *)(v3 - 48))
      result = 0;
    else
      result = result;
    if ((result & 1) != 0)
      break;
    v5 = v3 == v2;
    v3 += 48;
  }
  while (!v5);
  return result;
}

uint64_t sub_1000601E8()
{
  return 1;
}

uint64_t sub_1000601F0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

void sub_1000601F8()
{
  operator new();
}

void sub_100060274()
{
  operator new();
}

void sub_1000602BC()
{
  operator delete();
}

uint64_t sub_1000602E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v12[536];

  v8 = a4[18];
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (v8 > (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) * v9)
    return -5;
  v12[0] = 0;
  v12[528] = 0;
  v10 = sub_10005DC20(a1, a2, a3, a4, 0, 1, 0, (uint64_t)v12);
  sub_10002EB64((uint64_t)v12);
  return v10;
}

void sub_1000603A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10002EB64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000603B8(uint64_t a1, uint64_t a2)
{
  return sub_10005B13C(*(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)a2 + 16) + 8));
}

void sub_1000603C8()
{
  sub_1000F6A7C();
}

uint64_t sub_1000603D4()
{
  return 0;
}

uint64_t sub_1000603E0(uint64_t a1, uint64_t *a2)
{
  return sub_1000D5134(*a2);
}

uint64_t sub_1000603E8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 560) + 136);
}

uint64_t sub_1000603F8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 72);
}

uint64_t sub_100060404()
{
  return 0;
}

uint64_t sub_100060410(uint64_t a1, _QWORD *a2)
{
  return sub_10006041C(*a2 + 16);
}

uint64_t sub_10006041C(uint64_t a1)
{
  uint64_t v1;
  const __CFUUID *v3;

  v3 = (const __CFUUID *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 48))();
  v1 = *(_OWORD *)&CFUUIDGetUUIDBytes(v3);
  sub_10002818C((const void **)&v3);
  return v1;
}

void sub_100060468(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10002818C((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006047C()
{
  return 0;
}

uint64_t sub_100060488()
{
  return 0;
}

uint64_t sub_100060494()
{
  return 0;
}

uint64_t sub_1000604A0(uint64_t a1, _QWORD **a2)
{
  return sub_1000D5128(*a2);
}

uint64_t sub_1000604A8()
{
  return 0;
}

uint64_t sub_1000604B4()
{
  return 0;
}

uint64_t sub_1000604C0()
{
  return 0;
}

uint64_t sub_1000604CC()
{
  return 0;
}

uint64_t sub_1000604D8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_DWORD *)result = *(_DWORD *)a2;
  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 32) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  return result;
}

uint64_t sub_10006052C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1000605E4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1000605A0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    sub_100012320();
  return operator new(48 * a2);
}

uint64_t sub_1000605E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      *(_DWORD *)(a7 + v7 - 48) = *(_DWORD *)(a3 + v7 - 48);
      v9 = a7 + v7 - 48;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(a3 + v7 - 40);
      *(_QWORD *)(v8 - 40) = 0;
      *(_QWORD *)(v8 - 32) = 0;
      *(_OWORD *)(v9 + 24) = *(_OWORD *)(a3 + v7 - 24);
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v9 + 40) = *(_QWORD *)(a3 + v7 - 8);
      *((_QWORD *)&v15 + 1) = v9;
      v7 -= 48;
    }
    while (a3 + v7 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_10006069C((uint64_t)v12);
  return v10;
}

uint64_t sub_10006069C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1000606D0(a1);
  return a1;
}

uint64_t sub_1000606D0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    sub_100012168(v1 + 24);
    result = sub_100012168(v1 + 8);
    v1 += 48;
  }
  return result;
}

uint64_t sub_100060714(uint64_t a1)
{
  sub_100060748(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100060748(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 48;
      sub_100012168(v2 - 24);
      result = sub_100012168(v2 - 40);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void sub_1000607A0(uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 88))
  {
    sub_100041DBC(a1 + 64);
    v2 = (void **)(a1 + 24);
    sub_10001A2E4(&v2);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 88) = 0;
  }
}

uint64_t sub_1000607F8(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 88))
  {
    sub_100041DBC(a1 + 64);
    v3 = (void **)(a1 + 24);
    sub_10001A2E4(&v3);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100060850(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100060890((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t sub_100060890(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 48)
  {
    sub_100012168(i - 24);
    result = sub_100012168(i - 40);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_1000608E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  v5 = *(_OWORD *)(a2 + 1);
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_OWORD *)(a1 + 8) = v5;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 136))(v4);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(_QWORD *)(a1 + 56) = off_100175480;
  *(_QWORD *)(a1 + 80) = a1 + 56;
  sub_1000609B0((_QWORD *)(a1 + 56), (uint64_t)(a2 + 7));
  return a1;
}

void sub_100060968(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = v3;
  v6 = *(_QWORD **)(v2 + 80);
  if (v6 == v4)
  {
    v7 = v4;
    v8 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v8 = 5;
    v7 = *(_QWORD **)(v2 + 80);
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  sub_1001237B8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000609B0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100012568((uint64_t)v6, a2);
  sub_100060A48(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_100060A48(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100060BB0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1000054BC(a1);
}

BOOL sub_100060BBC(unint64_t *a1, unint64_t *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;

  v2 = *((unsigned __int8 *)a1 + 16);
  if (*((_BYTE *)a1 + 16))
  {
    if (v2 == 3)
    {
      v4 = *a1;
      v3 = a1[1];
      if (v3 >= *a1)
        goto LABEL_21;
    }
    else
    {
      v4 = *a1;
      v3 = a1[1];
      if (*a1 < v3)
        goto LABEL_21;
    }
  }
  else
  {
    v4 = *a1;
    v3 = a1[1];
    if (*a1 < v3 && *a1 + 1 < v3)
      goto LABEL_21;
  }
  if (!*((_BYTE *)a2 + 16))
  {
    v7 = a2[1];
    if (*a2 < v7 && *a2 + 1 < v7)
      goto LABEL_21;
    return 1;
  }
  if (*((_BYTE *)a2 + 16) == 3)
  {
    if (a2[1] < *a2)
      return 1;
  }
  else if (*a2 >= a2[1])
  {
    return 1;
  }
LABEL_21:
  if ((v2 & 2) != 0)
    v9 = v4;
  else
    v9 = v4 + 1;
  v10 = *a2;
  if ((a2[2] & 2) == 0)
    ++v10;
  return v10 == v9 && (a2[2] & 1) + a2[1] == (v2 & 1) + v3;
}

uint64_t sub_100060C94(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20[2];

  *(_QWORD *)a1 = off_1001778A8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = (uint64_t *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (a3 == 1)
  {
    v7 = sub_10005B1F4(a1, a2);
    v8 = 0;
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v9;
  }
  else
  {
    *(_BYTE *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 24) - 24) + 96))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 24));
  }
  *(_BYTE *)(a1 + 56) = v8;
  v10 = *(_QWORD *)(a2 + 16);
  for (i = *(_QWORD *)(a2 + 24); v10 != i; v10 += 48)
  {
    if (a3 == 1
      && -1 - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 4) == (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4)
    {
      v12 = *(_QWORD *)(v10 + 32);
      v20[0] = *(_QWORD *)(v10 + 24);
      v20[1] = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      operator new();
    }
    v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 8) + 136))(*(_QWORD *)(v10 + 8));
    v20[0] = v15;
    v16 = *(uint64_t **)(a1 + 24);
    if ((unint64_t)v16 >= *(_QWORD *)(a1 + 32))
    {
      v17 = sub_1000613B4(v6, v20);
      v18 = v20[0];
      *(_QWORD *)(a1 + 24) = v17;
      v20[0] = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    }
    else
    {
      *v16 = v15;
      if (v15)
        operator new();
      v16[1] = 0;
      *(_QWORD *)(a1 + 24) = v16 + 2;
    }
  }
  return a1;
}

void sub_100060F1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100017FB8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100060FA0(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1001778A8;
  v3 = (void **)(a1 + 16);
  sub_100017FB8(&v3);
  return a1;
}

void sub_100060FE4(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = off_1001778A8;
  v1 = (void **)(a1 + 16);
  sub_100017FB8(&v1);
  operator delete();
}

uint64_t sub_10006103C(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_100017E44();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100017E58(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[16 * v4];
  v21 = &v10[16 * v9];
  sub_10006115C((uint64_t *)v20.i64[0], a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16;
      *v13 = 0;
      v13[1] = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  sub_100017E8C((uint64_t)&v19);
  return v12;
}

void sub_100061148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100017E8C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10006115C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *result = *a2;
  if (v2)
    operator new();
  result[1] = 0;
  *a2 = 0;
  return result;
}

void sub_1000611CC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000611F0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t sub_100061208(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

unint64_t sub_100061248(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return sub_1000649B8(a1[1], a1, a2, a3);
}

uint64_t sub_10006125C(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_100177960;
  v3 = (void **)(a1 + 16);
  sub_1000612F8(&v3);
  return a1;
}

void sub_1000612A0(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = off_100177960;
  v1 = (void **)(a1 + 16);
  sub_1000612F8(&v1);
  operator delete();
}

void sub_1000612F8(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        sub_100061368(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100061368(uint64_t a1)
{
  void *v2;
  void **v3;

  sub_100012168(a1 + 136);
  v3 = (void **)(a1 + 112);
  sub_100017FB8(&v3);
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
}

uint64_t sub_1000613B4(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_100017E44();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100017E58(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[16 * v4];
  v21 = &v10[16 * v9];
  sub_1000614D4((uint64_t *)v20.i64[0], a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16;
      *v13 = 0;
      v13[1] = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  sub_100017E8C((uint64_t)&v19);
  return v12;
}

void sub_1000614C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100017E8C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000614D4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *result = *a2;
  if (v2)
    operator new();
  result[1] = 0;
  *a2 = 0;
  return result;
}

void sub_100061544(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100061568(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t sub_100061580(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void sub_1000615C0(uint64_t *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __n128 *v13;

  v10 = *a1;
  v11 = sub_10006166C((uint64_t)a1, a3);
  if (v11 >= 0x555555555555556)
    sub_1000158AC("get_next_capacity, allocator's max size reached");
  v12 = v11;
  v13 = (__n128 *)operator new(24 * v11);
  sub_1000616E4((uint64_t)a1, v13, v12, a2, a3, a4);
  *a5 = (char *)a2 + *a1 - v10;
}

unint64_t sub_10006166C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = 0x555555555555555;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0x555555555555555 - v4 < a2 - v4 + v3)
    sub_1000158AC("get_next_capacity, allocator's max size reached");
  v5 = v4 >> 61;
  v6 = 8 * v4;
  if (v5 > 4)
    v7 = -1;
  else
    v7 = v6;
  v8 = v6 / 5;
  if (v5)
    v8 = v7;
  v9 = v3 + a2;
  if (v8 < 0x555555555555555)
    v2 = v8;
  if (v9 <= v2)
    return v2;
  else
    return v9;
}

void sub_1000616E4(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4, uint64_t a5, __n128 *a6)
{
  __n128 *v10;
  uint64_t i;
  uint64_t v12;

  v10 = *(__n128 **)a1;
  sub_1000617AC(a1, *(__n128 **)a1, a4, (__n128 *)(*(_QWORD *)a1 + 24 * *(_QWORD *)(a1 + 8)), a2, a5, a6);
  if (v10)
  {
    for (i = *(_QWORD *)(a1 + 8); i; v10 = (__n128 *)((char *)v10 + 24))
    {
      --i;
      sub_100012168((uint64_t)v10);
    }
    if (a1 + 24 != *(_QWORD *)a1)
      operator delete(*(void **)a1);
  }
  v12 = *(_QWORD *)(a1 + 8) + a5;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = a3;
}

void sub_100061788(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    if ((void *)(v2 + 24) != v1)
      operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1000617AC(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, uint64_t a6, __n128 *a7)
{
  __n128 result;
  __n128 *v8;

  while (a2 != a3)
  {
    *a5 = *a2;
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a5[1].n128_u64[0] = a2[1].n128_u64[0];
    a5 = (__n128 *)((char *)a5 + 24);
    a2 = (__n128 *)((char *)a2 + 24);
  }
  result = *a7;
  *a5 = *a7;
  a7->n128_u64[0] = 0;
  a7->n128_u64[1] = 0;
  a5[1].n128_u64[0] = a7[1].n128_u64[0];
  if (a3 != a4)
  {
    v8 = (__n128 *)((char *)a5 + 24 * a6);
    do
    {
      result = *a3;
      *v8 = *a3;
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      v8[1].n128_u64[0] = a3[1].n128_u64[0];
      a3 = (__n128 *)((char *)a3 + 24);
      v8 = (__n128 *)((char *)v8 + 24);
    }
    while (a3 != a4);
  }
  return result;
}

void sub_100061820(uint64_t a1, uint64_t a2, char *a3)
{
  void *v5;

  v5 = operator new(0x68uLL);
  sub_100061880((uint64_t)v5, a2, a3);
}

void sub_10006186C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100061880(uint64_t a1, uint64_t a2, char *a3)
{
  char v4;

  *(_QWORD *)a1 = off_100177A18;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *a3;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = off_100171CD8;
  *(_QWORD *)(a1 + 40) = a2;
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
  *(_BYTE *)(a1 + 80) = v4;
  sub_100061954((_QWORD *)(a1 + 88));
}

void sub_1000618F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100061904(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100177A18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100061914(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100177A18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100061944(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void sub_100061954(_QWORD *a1)
{
  *a1 = 0;
  operator new();
}

void sub_1000619A4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_1000619B0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000619C8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000619F0(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_100177AA8))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_100061A30()
{
  unint64_t v0;
  Block_layout *v2;
  Block_layout ***v3;
  Block_layout **v4;

  v2 = &stru_100177AD8;
  v0 = atomic_load(&qword_1001A0F88);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&qword_1001A0F88, &v3, (void (__cdecl *)(void *))sub_100069B30);
  }
  return qword_1001A1048;
}

void sub_100061A98(id a1)
{
  operator new();
}

void sub_100061AF0(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  void **v8;
  char v9;
  unsigned __int8 v10;
  uint64_t *v11;
  int v12;
  char *v13;
  unsigned int *v14;
  char *v15;
  int v16;
  void *v17;
  uint64_t v18;
  const std::error_category *v19;
  uint64_t i;
  __int128 v21;
  int v22;
  std::mutex *v23;
  char v24;
  void *v25[5];
  _QWORD v26[5];
  _QWORD v27[35];
  uint64_t v28;
  uint64_t v29;

  v23 = (std::mutex *)(a1 + 24);
  v24 = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  v8 = sub_100066C18(a1, (void **)a2);
  if ((void **)(a1 + 8) != v8)
  {
    *(_QWORD *)a4 = v8[7];
    v9 = 1;
LABEL_19:
    *(_BYTE *)(a4 + 16) = v9;
    goto LABEL_20;
  }
  sub_10003DEE8((uint64_t)&v23);
  if (!a3 || !os_variant_allows_internal_security_policies("com.apple.diskimages2"))
  {
    *(_QWORD *)&v21 = "*, diskimage_uio::diskimage_err> PluginsManager::get_plugin_ptr(const std::string &, BOOL)";
    *((_QWORD *)&v21 + 1) = 63;
    v22 = 16;
    sub_100061E74(v25, &v21);
    sub_100005A0C(&v28, (uint64_t)"Plugin ", 7);
    v16 = *(char *)(a2 + 23);
    if (v16 >= 0)
      v17 = (void *)a2;
    else
      v17 = *(void **)a2;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    sub_100005A0C(&v28, (uint64_t)v17, v18);
    sub_100005A0C(&v28, (uint64_t)" is not registered", 18);
    std::ostream::~ostream(&v28, off_100178178);
    sub_100066FC0((uint64_t)v25);
    std::ios::~ios(&v29);
    v19 = std::generic_category();
    v9 = 0;
    *(_QWORD *)a4 = 45;
    *(_QWORD *)(a4 + 8) = v19;
    goto LABEL_19;
  }
  v10 = atomic_load((unsigned __int8 *)&qword_1001A0FA8);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1001A0FA8))
  {
    sub_100005870(v25, "com.apple.raw");
    v25[3] = sub_100084B3C;
    v25[4] = 0;
    sub_100005870(v26, "com.apple.diskimage-plugin.nbd");
    v26[3] = sub_1000656D0;
    v26[4] = 0;
    sub_100005870(v27, "com.apple.diskimage-plugin.amber");
    v27[3] = sub_1000656D0;
    v27[4] = 16;
    sub_100066730((uint64_t)&qword_1001A0F90, v25, 3);
    for (i = 0; i != -15; i -= 5)
    {
      if (SHIBYTE(v27[i + 2]) < 0)
        operator delete((void *)v27[i]);
    }
    __cxa_atexit((void (*)(void *))sub_100065734, &qword_1001A0F90, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001A0FA8);
  }
  if (sub_100066C18((uint64_t)&qword_1001A0F90, (void **)a2) != (void **)&unk_1001A0F98)
  {
    v25[0] = (void *)a2;
    v11 = sub_100066C94(&qword_1001A0F90, (void **)a2, (uint64_t)&unk_100141000, (__int128 **)v25);
    v12 = *(char *)(a2 + 23);
    v13 = *(char **)a2;
    v14 = (unsigned int *)((uint64_t (*)(uint64_t))v11[7])(v11[8]);
    if (v12 >= 0)
      v15 = (char *)a2;
    else
      v15 = v13;
    di_plugin_register(v15, v14);
  }
  sub_100061AF0(a1, a2, 0);
LABEL_20:
  if (v24)
    std::mutex::unlock(v23);
}

void sub_100061DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v20;

  v20 = 0;
  while (1)
  {
    if (*(char *)(v18 + v20 + 103) < 0)
      operator delete(*(void **)(v18 + v20 + 80));
    v20 -= 40;
    if (v20 == -120)
    {
      __cxa_guard_abort(&qword_1001A0FA8);
      if (a14)
        std::mutex::unlock(a13);
      _Unwind_Resume(a1);
    }
  }
}

_QWORD *sub_100061E74(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100069B44((uint64_t)a1, a2);
  *a1 = off_1001780B0;
  a1[45] = &off_1001781B0;
  a1[46] = &off_1001781D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001780B0;
  a1[45] = off_100178138;
  a1[46] = off_100178160;
  return a1;
}

void sub_100061EF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100066FC0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100061F1C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100178178);
  sub_100066FC0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

unsigned int *sub_100061F5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  const char *v14;
  unsigned int *v15;
  unsigned int *v16;
  void *exception;
  _QWORD v19[2];
  __CFError *v20;
  uint64_t buf;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;

  v7 = *__error();
  if (sub_1000BF0BC())
  {
    v19[0] = 0;
    v8 = sub_1000BF044();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      v9 = 3;
    else
      v9 = 2;
    buf = 0x6704100402;
    v10 = "RO";
    v23 = "di_plugin_image_t *PluginsManager::create_plugin_image(const di_plugin_t &, int, const CFDictionaryRef)";
    v22 = 2080;
    if ((a3 & 3) != 0)
      v10 = "RW";
    v24 = 2080;
    v25 = v10;
    v26 = 2112;
    v27 = a4;
    v11 = (const char *)_os_log_send_and_compose_impl(v9, v19, 0, 0, &_mh_execute_header, v8, 0, "%.*s: Creating %s plugin instance with params: %@", COERCE_DOUBLE(68158466), &buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = "RW";
      buf = 0x6704100402;
      v23 = "di_plugin_image_t *PluginsManager::create_plugin_image(const di_plugin_t &, int, const CFDictionaryRef)";
      v22 = 2080;
      if ((a3 & 3) == 0)
        v14 = "RO";
      v24 = 2080;
      v25 = v14;
      v26 = 2112;
      v27 = a4;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%.*s: Creating %s plugin instance with params: %@", (uint8_t *)&buf, 0x26u);
    }
  }
  *__error() = v7;
  v19[1] = a4;
  v20 = 0;
  LODWORD(v19[0]) = 16;
  HIDWORD(v19[0]) = a3;
  v15 = (unsigned int *)(*(uint64_t (**)(_QWORD *, __CFError **))(a2 + 8))(v19, &v20);
  v16 = v15;
  if (v15 && *v15 <= 0x57)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)&buf);
    sub_100005A0C(&buf, (uint64_t)"Plugin image struct size ", 25);
    std::ostream::operator<<(&buf, *v16);
    sub_100005A0C(&buf, (uint64_t)" is incompatible with the framework, expected at least ", 55);
    std::ostream::operator<<(&buf, 88);
    sub_100012294((uint64_t)exception, (uint64_t)&buf, 0xFFFFFFA9);
  }
  sub_100062244(v15, v20);
  return v16;
}

void sub_100062204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10000FE34((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100062244(_QWORD *result, __CFError *a2)
{
  void *exception;
  const char *v3;
  unsigned int v4;
  void *v5;
  int v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  NSObject *v12;
  __CFError *v13;
  int Code;
  int v15;
  uint64_t v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  __CFError *v22;

  if (!result)
  {
    if (a2)
    {
      v7 = *__error();
      if (sub_1000BF0BC())
      {
        v16 = 0;
        v8 = sub_1000BF044();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          v9 = 3;
        else
          v9 = 2;
        *(_DWORD *)buf = 68158210;
        v18 = 71;
        v19 = 2080;
        v20 = "di_plugin_image_t *verify_plugin_image(di_plugin_image_t *, CFErrorRef)";
        v21 = 2114;
        v22 = a2;
        v10 = (const char *)_os_log_send_and_compose_impl(v9, &v16, 0, 0, &_mh_execute_header, v8, 16, "%.*s: Failed initializing plugin: %{public}@", buf, 28);
        if (v10)
        {
          v11 = (char *)v10;
          fprintf(__stderrp, "%s\n", v10);
          free(v11);
        }
      }
      else
      {
        v12 = sub_1000BF044();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68158210;
          v18 = 71;
          v19 = 2080;
          v20 = "di_plugin_image_t *verify_plugin_image(di_plugin_image_t *, CFErrorRef)";
          v21 = 2114;
          v22 = a2;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%.*s: Failed initializing plugin: %{public}@", buf, 0x1Cu);
        }
      }
      *__error() = v7;
      v13 = a2;
      Code = CFErrorGetCode(a2);
      if (Code < 0)
        v15 = Code;
      else
        v15 = -Code;
      CFRelease(v13);
      exception = __cxa_allocate_exception(0x40uLL);
      v3 = "Plugin initialization failed";
      v4 = v15;
    }
    else
    {
      exception = __cxa_allocate_exception(0x40uLL);
      v3 = "Plugin bug: returned init failure without supplying the error";
      v4 = -14;
    }
LABEL_9:
    v5 = (void *)sub_100005410((uint64_t)exception, (uint64_t)v3, v4);
  }
  if (!result[1] || !result[2] || !result[3] || !result[6] || !result[7] || !result[8])
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v3 = "Mandatory callbacks in the plugin's image struct are missing";
    v4 = -22;
    goto LABEL_9;
  }
  return result;
}

_QWORD *sub_10006248C(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  int v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  NSObject *v12;
  uint64_t (*v13)(__int128 *, uint64_t, uint8_t *);
  _QWORD *v14;
  const char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t buf[8];
  __int16 v21;
  const char *v22;

  v7 = *__error();
  if (sub_1000BF0BC())
  {
    v19 = 0;
    v8 = sub_1000BF044();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      v9 = 3;
    else
      v9 = 2;
    *(_DWORD *)buf = 68157954;
    *(_DWORD *)&buf[4] = 114;
    v21 = 2080;
    v22 = "di_plugin_image_t *PluginsManager::decode_plugin_image(const di_plugin_t &, const diskimage_decode_fn_t &, void *)";
    LODWORD(v16) = 18;
    v10 = (const char *)_os_log_send_and_compose_impl(v9, &v19, 0, 0, &_mh_execute_header, v8, 0, "%.*s: Decoding plugin instance", (int)buf, v16);
    if (v10)
    {
      v11 = (char *)v10;
      fprintf(__stderrp, "%s\n", v10);
      free(v11);
    }
  }
  else
  {
    v12 = sub_1000BF044();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)&buf[4] = 114;
      v21 = 2080;
      v22 = "di_plugin_image_t *PluginsManager::decode_plugin_image(const di_plugin_t &, const diskimage_decode_fn_t &, void *)";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%.*s: Decoding plugin instance", buf, 0x12u);
    }
  }
  *__error() = v7;
  *(_QWORD *)buf = 0;
  v13 = *(uint64_t (**)(__int128 *, uint64_t, uint8_t *))(a2 + 16);
  v17 = *a3;
  v18 = *((_QWORD *)a3 + 2);
  v14 = (_QWORD *)v13(&v17, a4, buf);
  return sub_100062244(v14, *(__CFError **)buf);
}

uint64_t sub_10006264C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  std::mutex *v7;
  int v8;
  void *v9;
  uint64_t v10;
  void *v12[2];
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[152];
  __int128 __dst;
  uint64_t v19;

  if (!a3)
    return 4294967274;
  if (a3[1] != 1)
  {
    *(_QWORD *)&__dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((_QWORD *)&__dst + 1) = 31;
    LODWORD(v19) = 16;
    sub_100062C3C(&v15, &__dst);
    sub_100005A0C(&v16, (uint64_t)"Plugin version ", 15);
    std::ostream::operator<<(&v16, a3[1]);
    sub_100005A0C(&v16, (uint64_t)" is incompatible with the framework, expected ", 46);
    std::ostream::operator<<(&v16, 1);
    std::ostream::~ostream(&v16, off_100178398);
    sub_1000675AC((uint64_t)&v15);
    goto LABEL_6;
  }
  if (*a3 <= 0x27)
  {
    *(_QWORD *)&__dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((_QWORD *)&__dst + 1) = 31;
    LODWORD(v19) = 16;
    sub_100062D24(&v15, &__dst);
    sub_100005A0C(&v16, (uint64_t)"Plugin struct size ", 19);
    std::ostream::operator<<(&v16, *a3);
    sub_100005A0C(&v16, (uint64_t)" is incompatible with the framework, expected at least ", 55);
    std::ostream::operator<<(&v16, 40);
    std::ostream::~ostream(&v16, off_1001785B8);
    sub_100067B98((uint64_t)&v15);
LABEL_6:
    std::ios::~ios(v17);
    return 4294967209;
  }
  if (!*((_QWORD *)a3 + 1) || !*((_QWORD *)a3 + 2))
  {
    *(_QWORD *)&__dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((_QWORD *)&__dst + 1) = 31;
    LODWORD(v19) = 16;
    sub_100062E0C(&v15, &__dst);
    sub_100005A0C(&v16, (uint64_t)"Mandatory callbacks in the plugin's struct are missing", 54);
    std::ostream::~ostream(&v16, off_1001787D8);
    sub_100068184((uint64_t)&v15);
    std::ios::~ios(v17);
    return 4294967274;
  }
  v7 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((void **)(a1 + 8) == sub_100066C18(a1, (void **)a2))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_100041DD0(v12, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v12 = *(_OWORD *)a2;
      v13 = *(_QWORD *)(a2 + 16);
    }
    v14 = a3;
    operator new();
  }
  *(_QWORD *)&__dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
  *((_QWORD *)&__dst + 1) = 31;
  LODWORD(v19) = 16;
  sub_100062EF4(&v15, &__dst);
  sub_100005A0C(&v16, (uint64_t)"Plugin ", 7);
  v8 = *(char *)(a2 + 23);
  if (v8 >= 0)
    v9 = (void *)a2;
  else
    v9 = *(void **)a2;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  sub_100005A0C(&v16, (uint64_t)v9, v10);
  sub_100005A0C(&v16, (uint64_t)" cannot be re-registered", 24);
  std::ostream::~ostream(&v16, off_1001789F8);
  sub_100068770((uint64_t)&v15);
  std::ios::~ios(v17);
  v4 = 4294967279;
  std::mutex::unlock(v7);
  return v4;
}

void sub_100062B1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  uint64_t v24;

  if (a23 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v23);
  if (*(char *)(v24 - 73) < 0)
    operator delete(*(void **)(v24 - 96));
  operator delete();
}

void sub_100062BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::mutex *v5;
  va_list va;

  va_start(va, a5);
  sub_100063084((uint64_t)va);
  std::mutex::unlock(v5);
  JUMPOUT(0x100062C34);
}

void sub_100062BC0()
{
  __cxa_end_catch();
  JUMPOUT(0x100062BC8);
}

void sub_100062BE0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100062BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100062EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100062BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100062F9C((uint64_t)va);
  JUMPOUT(0x100062C04);
}

void sub_100062C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100062DCC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100062C3C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100069BC0((uint64_t)a1, a2);
  *a1 = off_1001782D0;
  a1[45] = &off_1001783D0;
  a1[46] = &off_1001783F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001782D0;
  a1[45] = off_100178358;
  a1[46] = off_100178380;
  return a1;
}

void sub_100062CC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000675AC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100062CE4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100178398);
  sub_1000675AC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100062D24(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100069C3C((uint64_t)a1, a2);
  *a1 = off_1001784F0;
  a1[45] = &off_1001785F0;
  a1[46] = &off_100178618;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001784F0;
  a1[45] = off_100178578;
  a1[46] = off_1001785A0;
  return a1;
}

void sub_100062DA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100067B98(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100062DCC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001785B8);
  sub_100067B98(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100062E0C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100069CB8((uint64_t)a1, a2);
  *a1 = off_100178710;
  a1[45] = &off_100178810;
  a1[46] = &off_100178838;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100178710;
  a1[45] = off_100178798;
  a1[46] = off_1001787C0;
  return a1;
}

void sub_100062E90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100068184(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100062EB4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001787D8);
  sub_100068184(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100062EF4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100069D34((uint64_t)a1, a2);
  *a1 = off_100178930;
  a1[45] = &off_100178A30;
  a1[46] = &off_100178A58;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100178930;
  a1[45] = off_1001789B8;
  a1[46] = off_1001789E0;
  return a1;
}

void sub_100062F78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100068770(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100062F9C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001789F8);
  sub_100068770(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100062FDC(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10006A8A0((uint64_t)a1, a2);
  *a1 = off_100178B50;
  a1[45] = &off_100178C50;
  a1[46] = &off_100178C78;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100178B50;
  a1[45] = off_100178BD8;
  a1[46] = off_100178C00;
  return a1;
}

void sub_100063060(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100068D5C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100063084(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100178C18);
  sub_100068D5C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

CFStringRef sub_1000630C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t);
  const char *v7;
  uint64_t v8;
  char v9;

  sub_100061AF0(a1, a2, 1, (uint64_t)&v8);
  if (v9)
  {
    v5 = *(uint64_t (**)(uint64_t))(v8 + 24);
    if (v5)
      return (CFStringRef)v5(a3);
  }
  if (*(char *)(a2 + 23) >= 0)
    v7 = (const char *)a2;
  else
    v7 = *(const char **)a2;
  return CFStringCreateWithCString(0, v7, 0x8000100u);
}

void sub_10006313C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __int128 *a5, uint64_t a6)
{
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  char *exception;
  __int128 v20;
  uint64_t v21;
  uint64_t v22[2];
  char v23;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100041DD0((_BYTE *)(a1 + 16), *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v11 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 16) = v11;
  }
  v12 = sub_100061A30();
  sub_100061AF0(v12, a2, 1, (uint64_t)v22);
  if (!v23)
  {
    exception = (char *)__cxa_allocate_exception(0x40uLL);
    v20 = *(_OWORD *)sub_100049170((uint64_t)v22);
    *(_QWORD *)exception = &off_1001924F8;
    *(_OWORD *)(exception + 8) = v20;
    exception[24] = 0;
    exception[48] = 0;
    *((_QWORD *)exception + 7) = "Failed to get plugin instance";
  }
  v28[0] = off_100179260;
  v29 = v28;
  if (a6)
  {
    v13 = sub_100061A30();
    v14 = sub_10006248C(v13, v22[0], a5, a6);
    v15 = (uint64_t)v29;
    if (v29)
    {
      if (v29 == v28)
      {
        v27 = v26;
        (*(void (**)(uint64_t, _QWORD *))(v28[0] + 24))((uint64_t)v28, v26);
LABEL_15:
        sub_10006A9CC(&v21, (uint64_t)v14);
      }
      v15 = (*(uint64_t (**)(void))(*v29 + 16))();
    }
    v27 = (_QWORD *)v15;
    goto LABEL_15;
  }
  v16 = sub_100061A30();
  v17 = sub_100061F5C(v16, v22[0], a4, a3);
  v18 = (uint64_t)v29;
  if (v29)
  {
    if (v29 == v28)
    {
      v25 = v24;
      (*(void (**)(uint64_t, _QWORD *))(v28[0] + 24))((uint64_t)v28, v24);
LABEL_17:
      sub_10006A9CC(&v21, (uint64_t)v17);
    }
    v18 = (*(uint64_t (**)(void))(*v29 + 16))();
  }
  v25 = (_QWORD *)v18;
  goto LABEL_17;
}

void sub_10006345C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  uint64_t v25;
  void **v26;
  char *v27;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v29 = a17;
  if (a17 == v27)
  {
    v30 = 4;
    v29 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  v31 = a25;
  if (a25 == &a22)
  {
    v32 = 4;
    v31 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_11;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_11:
  if (*(char *)(v25 + 39) < 0)
    operator delete(*v26);
  sub_100012168(v25);
  _Unwind_Resume(a1);
}

void sub_100063528(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  _QWORD v4[5];
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v7;

  v2 = (unint64_t *)(a1 + 264);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_1000635AC;
  v4[3] = &unk_100177AF8;
  v4[4] = a1;
  v5 = v4;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(v2, &v6, (void (__cdecl *)(void *))sub_100069B30);
  }
}

uint64_t sub_1000635AC(uint64_t a1)
{
  return sub_1000635E8(*(_QWORD *)(a1 + 32) + 56);
}

uint64_t sub_1000635E8(uint64_t a1)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 200))
    *(_BYTE *)(sub_10010EBD8() + 200) = 0;
  result = sub_10010EB7C();
  *(_BYTE *)(result + 200) = 1;
  return result;
}

void sub_10006363C(uint64_t a1, uint64_t a2)
{
  sub_100064954(a2);
}

uint64_t sub_100063644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  int v10;
  _QWORD v11[45];
  uint64_t v12;
  uint64_t v13;

  sub_10010ED10(a1 + 56, a2);
  *(_QWORD *)(a2 + 16) = a3 + 16;
  v6 = io_rings_enter(*(_QWORD *)(a1 + 104), 1, 0);
  if ((_DWORD)v6)
  {
    v7 = v6;
    *(_QWORD *)&v9 = "DiskImagePlugin::sync_enter_and_wait(io_rings_sqe_t *, Context &)";
    *((_QWORD *)&v9 + 1) = 36;
    v10 = 16;
    sub_10006373C(v11, &v9);
    sub_100005A0C(&v12, (uint64_t)"failed to enter SQE to the ring, ret code ", 42);
    std::ostream::operator<<(&v12, v7);
    std::ostream::~ostream(&v12, off_100178E38);
    sub_100069348((uint64_t)v11);
    std::ios::~ios(&v13);
  }
  else
  {
    sub_100101288((dispatch_semaphore_t *)(a3 + 24), 0xFFFFFFFFFFFFFFFFLL);
    return *(unsigned int *)(a3 + 16);
  }
  return v7;
}

void sub_100063728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000637E4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10006373C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10006AE08((uint64_t)a1, a2);
  *a1 = off_100178D70;
  a1[45] = &off_100178E70;
  a1[46] = &off_100178E98;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100178D70;
  a1[45] = off_100178DF8;
  a1[46] = off_100178E20;
  return a1;
}

void sub_1000637C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100069348(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000637E4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100178E38);
  sub_100069348(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100063824(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(void);
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  char *v59;
  int v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78[8];
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  _OWORD v86[2];
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  char v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  __int128 v94;
  uint64_t v95;
  char v96;
  _OWORD v97[2];
  char *v98;
  char *v99;
  char *v100;

  v9 = sub_10010EBDC((uint64_t)(a1 + 7));
  if (!v8)
    return -35;
  v10 = v8;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v11 = *(_QWORD *)(a4 + 72);
  v12 = a3[9];
  v13 = (*(uint64_t (**)(_QWORD *, double))(*a1 + 24))(a1, v9);
  v76 = a2;
  memset(v97, 0, sizeof(v97));
  (*(void (**)(_OWORD *__return_ptr, _QWORD *))(*a1 + 72))(v97, a1);
  v77 = a3[18];
  v14 = (*(_QWORD *)(a4 + 144) - v77) & ~((uint64_t)(*(_QWORD *)(a4 + 144) - v77) >> 63);
  if (*(_QWORD *)&v97[0]
    && v11 - v12 >= *((_QWORD *)&v97[0] + 1) * *(_QWORD *)&v97[0]
                  + (v14 - 1 + *(_QWORD *)&v97[0]) / *(_QWORD *)&v97[0] * *(_QWORD *)&v97[0])
  {
    v15 = *(uint64_t (**)(void))(a1[2] + 32);
    if (v15)
    {
      v16 = v15();
      v17 = v77;
      v18 = v77;
      if (v16)
        v18 = v77 / v16 * v16;
    }
    else
    {
      v17 = a3[18];
      v18 = v17;
    }
    v14 = (v14 - 1 + v17 - v18 + *(_QWORD *)&v97[0]) / *(_QWORD *)&v97[0] * *(_QWORD *)&v97[0];
    v77 = v18;
  }
  v20 = (std::__shared_weak_count *)a3[1];
  v84 = *a3;
  v85 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v86[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v86 + 9) = *(_OWORD *)((char *)a3 + 25);
  v88 = *(_OWORD *)(a3 + 7);
  v23 = *(_OWORD *)(a3 + 11);
  v89 = *(_OWORD *)(a3 + 9);
  v87 = a3[6];
  v90 = v23;
  v91 = *((_BYTE *)a3 + 104);
  v24 = (std::__shared_weak_count *)a3[15];
  v92 = a3[14];
  v93 = v24;
  v75 = v14 / v13;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v94 = *((_OWORD *)a3 + 8);
  v95 = a3[18];
  v96 = *((_BYTE *)a3 + 152);
  while (!sub_10002DB78((uint64_t)&v84))
  {
    sub_1000174D8((uint64_t)&v88);
    v27 = v92;
    v28 = v93;
    v81 = v92;
    v82 = v93;
    if (v93)
    {
      v29 = (unint64_t *)&v93->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      v83 = v94;
      if (v14 >= (unint64_t)v94)
        v31 = v83;
      else
        v31 = v14;
      if (!v31)
      {
        do
          v52 = __ldaxr(v29);
        while (__stlxr(v52 - 1, v29));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        break;
      }
    }
    else
    {
      v83 = v94;
      if (v14 >= (unint64_t)v94)
        v31 = v83;
      else
        v31 = v14;
      if (!v31)
        break;
    }
    v32 = v99;
    if (v99 >= v100)
    {
      v34 = (v99 - v98) >> 4;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 60)
        sub_100017E44();
      v36 = v100 - v98;
      if ((v100 - v98) >> 3 > v35)
        v35 = v36 >> 3;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
        v37 = 0xFFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
        v38 = (char *)sub_100017E58((uint64_t)&v100, v37);
      else
        v38 = 0;
      v39 = &v38[16 * v34];
      *(_QWORD *)v39 = v27;
      *((_QWORD *)v39 + 1) = v31;
      v41 = v98;
      v40 = v99;
      v42 = v39;
      if (v99 != v98)
      {
        do
        {
          *((_OWORD *)v42 - 1) = *((_OWORD *)v40 - 1);
          v42 -= 16;
          v40 -= 16;
        }
        while (v40 != v41);
        v40 = v98;
      }
      v33 = v39 + 16;
      v98 = v42;
      v99 = v39 + 16;
      v100 = &v38[16 * v37];
      if (v40)
        operator delete(v40);
    }
    else
    {
      *(_QWORD *)v99 = v27;
      *((_QWORD *)v32 + 1) = v31;
      v33 = v32 + 16;
    }
    v99 = v33;
    v43 = v82;
    if (v82)
    {
      v44 = (unint64_t *)&v82->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    sub_10005DB8C((uint64_t)&v84, (uint64_t)v78);
    v46 = v80;
    if (v80)
    {
      v47 = (unint64_t *)&v80->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v14 -= v31;
    v49 = v79;
    if (v79)
    {
      v50 = (unint64_t *)&v79->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }
  v53 = v93;
  if (v93)
  {
    v54 = (unint64_t *)&v93->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v85;
  if (v85)
  {
    v57 = (unint64_t *)&v85->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v98;
  *(_BYTE *)v10 = 2;
  *(_QWORD *)(v10 + 24) = v59;
  *(_QWORD *)(v10 + 32) = v77 / v13;
  *(_QWORD *)(v10 + 40) = 0;
  *(_DWORD *)(v10 + 48) = v75;
  v60 = sub_100063644((uint64_t)a1, v10, v76);
  if (v60 == (unint64_t)v75)
  {
    v61 = (std::__shared_weak_count *)a3[1];
    v19 = v13 * v60;
    v84 = *a3;
    v85 = v61;
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    v86[0] = *((_OWORD *)a3 + 1);
    *(_OWORD *)((char *)v86 + 9) = *(_OWORD *)((char *)a3 + 25);
    v88 = *(_OWORD *)(a3 + 7);
    v64 = *(_OWORD *)(a3 + 11);
    v89 = *(_OWORD *)(a3 + 9);
    v87 = a3[6];
    v90 = v64;
    v91 = *((_BYTE *)a3 + 104);
    v65 = (std::__shared_weak_count *)a3[15];
    v92 = a3[14];
    v93 = v65;
    if (v65)
    {
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    v94 = *((_OWORD *)a3 + 8);
    v95 = a3[18];
    v96 = *((_BYTE *)a3 + 152);
    sub_10002D7D4((uint64_t)&v84, v19);
    v68 = v93;
    if (v93)
    {
      v69 = (unint64_t *)&v93->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = v85;
    if (v85)
    {
      v72 = (unint64_t *)&v85->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  else if (v60 < 0)
  {
    v19 = v60;
  }
  else
  {
    v19 = -5;
  }
  if (v98)
  {
    v99 = v98;
    operator delete(v98);
  }
  return v19;
}

void sub_100063E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;
  void *v45;

  v45 = *(void **)(v43 - 120);
  if (v45)
  {
    *(_QWORD *)(v43 - 112) = v45;
    operator delete(v45);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100063EB8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  int64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int64_t v48;
  BOOL v49;
  char v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v81[25];
  __int128 v82;
  __int128 v83;
  char v84;
  _BYTE v85[25];
  __int128 v86;
  __int128 v87;
  char v88;
  __int128 v89;
  unint64_t v90;
  char v91;
  char *__p;
  char *v93;
  char *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  _OWORD v97[2];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  char v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  __int128 v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  _OWORD v111[2];
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  char v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  __int128 v119;
  unint64_t v120;
  char v121;
  _QWORD v122[2];
  _OWORD v123[2];
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  char v128;
  _QWORD v129[2];
  __int128 v130;
  unint64_t v131;
  char v132;
  _QWORD v133[2];
  char v134;
  _BYTE v135[248];
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  int64_t v139;
  unint64_t v140;
  _BYTE v141[544];

  sub_10010EBDC(a1 + 56);
  if (!v8)
    return -35;
  __p = 0;
  v93 = 0;
  v94 = 0;
  v9 = *a3;
  v10 = (std::__shared_weak_count *)a3[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v78 = v8;
  *(_OWORD *)v85 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v85[9] = *(_OWORD *)((char *)a3 + 25);
  v13 = a3[6];
  v14 = a3[7];
  v15 = a3[8];
  v86 = *(_OWORD *)(a3 + 9);
  v87 = *(_OWORD *)(a3 + 11);
  v88 = *((_BYTE *)a3 + 104);
  v16 = a3[14];
  v17 = (std::__shared_weak_count *)a3[15];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v79 = a2;
  v80 = a1;
  v21 = a3[18];
  v20 = a3 + 18;
  v89 = *((_OWORD *)v20 - 1);
  v90 = v21;
  v91 = *((_BYTE *)v20 + 8);
  v22 = *a4;
  v23 = (std::__shared_weak_count *)a4[1];
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *(_OWORD *)v81 = *((_OWORD *)a4 + 1);
  *(_OWORD *)&v81[9] = *(_OWORD *)((char *)a4 + 25);
  v26 = a4[6];
  v27 = a4[7];
  v28 = a4[8];
  v82 = *(_OWORD *)(a4 + 9);
  v83 = *(_OWORD *)(a4 + 11);
  v84 = *((_BYTE *)a4 + 104);
  v29 = a4[14];
  v30 = (std::__shared_weak_count *)a4[15];
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = 0;
  v111[0] = *(_OWORD *)v85;
  *(_OWORD *)((char *)v111 + 9) = *(_OWORD *)&v85[9];
  v114 = v86;
  v115 = v87;
  v119 = v89;
  v97[0] = *(_OWORD *)v81;
  *(_OWORD *)((char *)v97 + 9) = *(_OWORD *)&v81[9];
  v102 = v83;
  v109 = v9;
  v110 = v10;
  v112 = v13;
  *(_QWORD *)&v113 = v14;
  *((_QWORD *)&v113 + 1) = v15;
  v116 = v88;
  v117 = v16;
  v118 = v17;
  v120 = v90;
  v121 = v91;
  v95 = v22;
  v96 = v23;
  v98 = v26;
  v99 = v27;
  v100 = v28;
  v103 = v84;
  v101 = v82;
  v104 = v29;
  v105 = v30;
  v106 = *((_OWORD *)a4 + 8);
  v108 = *((_BYTE *)a4 + 152);
  v107 = a4[18];
  v34 = v107;
  v141[0] = 0;
  v141[528] = 0;
  while (!sub_10002C4A4((uint64_t)&v109, (uint64_t)&v95))
  {
    if (v120 >= v34 || v33 == -1)
      break;
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v138 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/plugin_async_di.cpp:305:45)]";
      *((_QWORD *)&v138 + 1) = 104;
      LODWORD(v139) = 2;
      sub_10003722C(v133, &v138);
      sub_100005A0C(&v136, (uint64_t)"sg: ", 4);
      sub_10011E628(&v136, &v109);
      std::ostream::~ostream(&v136, off_100171F10);
      sub_100037460((uint64_t)v133);
      std::ios::~ios(&v137);
    }
    v133[0] = 0;
    v133[1] = v34;
    v134 = 2;
    sub_100075798(&v109, (uint64_t)v133, (uint64_t)&v138);
    v36 = v138;
    v37 = v139;
    if (v93 >= v94)
    {
      v39 = (v93 - __p) >> 4;
      v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 60)
        sub_100017E44();
      v41 = v94 - __p;
      if ((v94 - __p) >> 3 > v40)
        v40 = v41 >> 3;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
        v42 = 0xFFFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      if (v42)
        v43 = (char *)sub_100017E58((uint64_t)&v94, v42);
      else
        v43 = 0;
      v44 = &v43[16 * v39];
      *(_QWORD *)v44 = v36;
      *((_QWORD *)v44 + 1) = v37;
      v45 = v93;
      v46 = v44;
      if (v93 != __p)
      {
        do
        {
          *((_OWORD *)v46 - 1) = *((_OWORD *)v45 - 1);
          v46 -= 16;
          v45 -= 16;
        }
        while (v45 != __p);
        v45 = __p;
      }
      v38 = v44 + 16;
      __p = v46;
      v94 = &v43[16 * v42];
      if (v45)
        operator delete(v45);
    }
    else
    {
      *(_QWORD *)v93 = v138;
      *((_QWORD *)v93 + 1) = v37;
      v38 = v93 + 16;
    }
    v93 = v38;
    v47 = (int)v139;
    if ((v139 & 0x80000000) != 0)
      v48 = (int)v139;
    else
      v48 = v139;
    v49 = v48 >= 0 || (_DWORD)v48 == 0;
    v50 = v49;
    if (v49)
    {
      v51 = v140;
      if (sub_10002E788((uint64_t)&v109, (uint64_t)&v95, v140, v48))
      {
        v122[0] = v109;
        v122[1] = v110;
        if (v110)
        {
          v55 = (unint64_t *)&v110->__shared_owners_;
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        v123[0] = v111[0];
        *(_OWORD *)((char *)v123 + 9) = *(_OWORD *)((char *)v111 + 9);
        v124 = v112;
        v125 = v113;
        v126 = v114;
        v127 = v115;
        v128 = v116;
        v129[0] = v117;
        v129[1] = v118;
        if (v118)
        {
          v57 = (unint64_t *)&v118->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        v130 = v119;
        v131 = v120;
        v132 = v121;
        sub_10002E74C((uint64_t)v122, (uint64_t)&v95, v51, v48, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v133);
        sub_100037314((uint64_t)v141, (uint64_t)v133);
        sub_10002E7A4((uint64_t)v133);
        sub_100012168((uint64_t)v129);
        sub_100012168((uint64_t)v122);
        sub_10002CA7C((uint64_t)v141, (uint64_t)v133);
        sub_100037358((uint64_t)&v109, (uint64_t)v133);
        sub_100012168((uint64_t)v135);
        sub_100012168((uint64_t)v133);
        sub_10002C64C((uint64_t)v141, (uint64_t)v133);
        sub_100037358((uint64_t)&v95, (uint64_t)v133);
        sub_100012168((uint64_t)v135);
        sub_100012168((uint64_t)v133);
      }
      sub_10002D7D4((uint64_t)&v109, v48);
      v33 += v48;
    }
    else
    {
      if ((int)v139 >= 0)
        v47 = -(uint64_t)(int)v139;
      v77 = v47;
    }
    v52 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
    if (!*((_QWORD *)&v138 + 1))
      goto LABEL_55;
    v53 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
      if ((v50 & 1) == 0)
        goto LABEL_70;
    }
    else
    {
LABEL_55:
      if ((v50 & 1) == 0)
        goto LABEL_70;
    }
  }
  v77 = v33;
LABEL_70:
  sub_10002EB64((uint64_t)v141);
  v59 = v105;
  if (v105)
  {
    v60 = (unint64_t *)&v105->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v96;
  if (v96)
  {
    v63 = (unint64_t *)&v96->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = v118;
  if (v118)
  {
    v66 = (unint64_t *)&v118->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v110;
  if (v110)
  {
    v69 = (unint64_t *)&v110->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 24))(v80);
  v72 = *v20 / v71;
  *(_BYTE *)v78 = 4;
  *(_QWORD *)(v78 + 24) = __p;
  *(_QWORD *)(v78 + 32) = v72;
  *(_QWORD *)(v78 + 40) = 0;
  *(_DWORD *)(v78 + 48) = v77 / v71;
  v73 = sub_100063644(v80, v78, v79);
  v74 = -5;
  if (v73 < 0)
    v74 = v73;
  if (v73 == (unint64_t)(v77 / v71))
    v75 = v71 * v73;
  else
    v75 = v74;
  if (__p)
    operator delete(__p);
  return v75;
}

void sub_100064784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t a69;
  char a71;

  sub_100012168((uint64_t)&STACK[0x5E0]);
  sub_10002EB64((uint64_t)&STACK[0x610]);
  sub_100012168(a10);
  sub_100012168((uint64_t)&a71);
  sub_100012168(a11);
  sub_100012168((uint64_t)&STACK[0x290]);
  sub_100012168(a26);
  sub_100012168((uint64_t)&a28);
  sub_100012168(a12);
  sub_100012168((uint64_t)&a48);
  if (__p)
  {
    a69 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100064858(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  sub_10010EBDC(a1 + 56);
  if (!v6)
    return 4294967261;
  *(_BYTE *)v6 = 5;
  *(_DWORD *)(v6 + 24) = a3 + 1;
  return sub_100063644(a1, v6, a2);
}

uint64_t sub_1000648C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  if (!a4)
    return 0;
  v4 = a4;
  v7 = a1 + 56;
  for (i = (uint64_t *)(a3 + 8); ; i += 2)
  {
    sub_10010EBDC(v7);
    if (!v9)
      break;
    v10 = *(i - 1);
    v11 = *i;
    *(_BYTE *)v9 = 6;
    *(_QWORD *)(v9 + 24) = v10;
    *(_DWORD *)(v9 + 32) = v11;
    result = sub_100063644(a1, v9, a2);
    if ((_DWORD)result)
      return result;
    if (!--v4)
      return 0;
  }
  return 4294967261;
}

void sub_100064954(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;

  v1 = a1 + 56;
  sub_10010EC60(a1 + 56, (uint64_t)&v4);
  if (v6)
  {
    v2 = v4;
    v3 = v5;
    do
    {
      *(_DWORD *)v2 = v3;
      sub_100101290((dispatch_semaphore_t *)(v2 + 8));
      sub_10010EC60(v1, (uint64_t)&v4);
      v2 = v4;
      v3 = v5;
    }
    while (v6);
  }
}

unint64_t sub_1000649B8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  void *v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int64_t v45;
  BOOL v46;
  char v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  void *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v81;
  unint64_t *v82;
  _BYTE v85[25];
  __int128 v86;
  __int128 v87;
  char v88;
  _BYTE v89[25];
  __int128 v90;
  __int128 v91;
  char v92;
  __int128 v93;
  unint64_t v94;
  char v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  void *v101[4];
  _BYTE v102[40];
  uint64_t v103;
  std::__shared_weak_count *v104;
  _OWORD v105[2];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  char v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  __int128 v114;
  unint64_t v115;
  char v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  _OWORD v119[2];
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  char v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  __int128 v127;
  unint64_t v128;
  char v129;
  _QWORD v130[2];
  _OWORD v131[2];
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  char v136;
  _QWORD v137[2];
  __int128 v138;
  unint64_t v139;
  char v140;
  _QWORD v141[2];
  char v142;
  _BYTE v143[248];
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  int64_t v147;
  unint64_t v148;
  void **v149[66];
  char v150;

  memset(v102, 0, sizeof(v102));
  memset(v101, 0, sizeof(v101));
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v96 = 0u;
  v4 = *a3;
  v5 = (std::__shared_weak_count *)a3[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  *(_OWORD *)v89 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v89[9] = *(_OWORD *)((char *)a3 + 25);
  v8 = a3[6];
  v9 = a3[7];
  v10 = a3[8];
  v90 = *(_OWORD *)(a3 + 9);
  v91 = *(_OWORD *)(a3 + 11);
  v92 = *((_BYTE *)a3 + 104);
  v11 = a3[14];
  v12 = (std::__shared_weak_count *)a3[15];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v16 = a3[18];
  v15 = a3 + 18;
  v93 = *((_OWORD *)v15 - 1);
  v94 = v16;
  v82 = (unint64_t *)v15;
  v95 = *((_BYTE *)v15 + 8);
  v17 = *a4;
  v18 = (std::__shared_weak_count *)a4[1];
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *(_OWORD *)v85 = *((_OWORD *)a4 + 1);
  *(_OWORD *)&v85[9] = *(_OWORD *)((char *)a4 + 25);
  v21 = a4[6];
  v22 = a4[7];
  v23 = a4[8];
  v86 = *(_OWORD *)(a4 + 9);
  v87 = *(_OWORD *)(a4 + 11);
  v88 = *((_BYTE *)a4 + 104);
  v25 = a4[14];
  v24 = (std::__shared_weak_count *)a4[15];
  if (v24)
  {
    v26 = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = 0;
  v117 = v4;
  v118 = v5;
  v119[0] = *(_OWORD *)v89;
  *(_OWORD *)((char *)v119 + 9) = *(_OWORD *)&v89[9];
  v120 = v8;
  *(_QWORD *)&v121 = v9;
  *((_QWORD *)&v121 + 1) = v10;
  v122 = v90;
  v123 = v91;
  v124 = v92;
  v125 = v11;
  v126 = v12;
  v127 = v93;
  v128 = v94;
  v129 = v95;
  v103 = v17;
  v104 = v18;
  v105[0] = *(_OWORD *)v85;
  *(_OWORD *)((char *)v105 + 9) = *(_OWORD *)&v85[9];
  v106 = v21;
  v107 = v22;
  v108 = v23;
  v111 = v88;
  v109 = v86;
  v110 = v87;
  v112 = v25;
  v113 = v24;
  v114 = *((_OWORD *)a4 + 8);
  v116 = *((_BYTE *)a4 + 152);
  v115 = a4[18];
  v29 = v115;
  LOBYTE(v149[0]) = 0;
  v150 = 0;
  while (!sub_10002C4A4((uint64_t)&v117, (uint64_t)&v103))
  {
    if (v128 >= v29 || v28 == -1)
      break;
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v146 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/plugin_async_di.cpp:385:45)]";
      *((_QWORD *)&v146 + 1) = 104;
      LODWORD(v147) = 2;
      sub_10003722C(v141, &v146);
      sub_100005A0C(&v144, (uint64_t)"sg: ", 4);
      sub_10011E628(&v144, &v117);
      std::ostream::~ostream(&v144, off_100171F10);
      sub_100037460((uint64_t)v141);
      std::ios::~ios(&v145);
    }
    v141[0] = 0;
    v141[1] = v29;
    v142 = 2;
    sub_100075798(&v117, (uint64_t)v141, (uint64_t)&v146);
    sub_10006AE84((char **)v102, &v146);
    v31 = v146;
    v32 = v147;
    v33 = v101[2];
    if (v101[2] >= v101[3])
    {
      v35 = ((char *)v101[2] - (char *)v101[1]) >> 4;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 60)
        sub_100017E44();
      v37 = (char *)v101[3] - (char *)v101[1];
      if (((char *)v101[3] - (char *)v101[1]) >> 3 > v36)
        v36 = v37 >> 3;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
        v38 = 0xFFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)sub_100017E58((uint64_t)&v101[3], v38);
      else
        v39 = 0;
      v40 = &v39[16 * v35];
      *(_QWORD *)v40 = v31;
      *((_QWORD *)v40 + 1) = v32;
      v41 = (char *)v101[2];
      v42 = (char *)v101[1];
      v43 = v40;
      if (v101[2] != v101[1])
      {
        do
        {
          *((_OWORD *)v43 - 1) = *((_OWORD *)v41 - 1);
          v43 -= 16;
          v41 -= 16;
        }
        while (v41 != v42);
        v41 = (char *)v101[1];
      }
      v34 = v40 + 16;
      v101[1] = v43;
      v101[2] = v40 + 16;
      v101[3] = &v39[16 * v38];
      if (v41)
        operator delete(v41);
    }
    else
    {
      *(_QWORD *)v101[2] = v146;
      v33[1] = v32;
      v34 = v33 + 2;
    }
    v101[2] = v34;
    v44 = (int)v147;
    if ((v147 & 0x80000000) != 0)
      v45 = (int)v147;
    else
      v45 = v147;
    v46 = v45 >= 0 || (_DWORD)v45 == 0;
    v47 = v46;
    if (v46)
    {
      v48 = v148;
      if (sub_10002E788((uint64_t)&v117, (uint64_t)&v103, v148, v45))
      {
        v130[0] = v117;
        v130[1] = v118;
        if (v118)
        {
          v52 = (unint64_t *)&v118->__shared_owners_;
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        v131[0] = v119[0];
        *(_OWORD *)((char *)v131 + 9) = *(_OWORD *)((char *)v119 + 9);
        v132 = v120;
        v133 = v121;
        v134 = v122;
        v135 = v123;
        v136 = v124;
        v137[0] = v125;
        v137[1] = v126;
        if (v126)
        {
          v54 = (unint64_t *)&v126->__shared_owners_;
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }
        v138 = v127;
        v139 = v128;
        v140 = v129;
        sub_10002E74C((uint64_t)v130, (uint64_t)&v103, v48, v45, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v141);
        sub_100037314((uint64_t)v149, (uint64_t)v141);
        sub_10002E7A4((uint64_t)v141);
        sub_100012168((uint64_t)v137);
        sub_100012168((uint64_t)v130);
        sub_10002CA7C((uint64_t)v149, (uint64_t)v141);
        sub_100037358((uint64_t)&v117, (uint64_t)v141);
        sub_100012168((uint64_t)v143);
        sub_100012168((uint64_t)v141);
        sub_10002C64C((uint64_t)v149, (uint64_t)v141);
        sub_100037358((uint64_t)&v103, (uint64_t)v141);
        sub_100012168((uint64_t)v143);
        sub_100012168((uint64_t)v141);
      }
      sub_10002D7D4((uint64_t)&v117, v45);
      v28 += v45;
    }
    else
    {
      if ((int)v147 >= 0)
        v44 = -(uint64_t)(int)v147;
      v81 = v44;
    }
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
    if (*((_QWORD *)&v146 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if ((v47 & 1) == 0)
      goto LABEL_68;
  }
  v81 = v28;
LABEL_68:
  sub_10002EB64((uint64_t)v149);
  v56 = v113;
  if (v113)
  {
    v57 = (unint64_t *)&v113->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v104;
  if (v104)
  {
    v60 = (unint64_t *)&v104->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v126;
  if (v126)
  {
    v63 = (unint64_t *)&v126->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = v118;
  if (v118)
  {
    v66 = (unint64_t *)&v118->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = *v82;
  v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  LOBYTE(v96) = 2;
  *((void **)&v97 + 1) = v101[1];
  v98 = v68 / v69;
  LODWORD(v99) = v81 / v70;
  v71 = a2[3];
  if (v71 >= a2[4])
  {
    v76 = sub_100069740(a2 + 2, (uint64_t)&v96);
    v77 = *(std::__shared_weak_count **)&v102[32];
    a2[3] = v76;
    if (v77)
    {
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
  }
  else
  {
    v72 = v97;
    *(_OWORD *)v71 = v96;
    *(_OWORD *)(v71 + 16) = v72;
    v73 = v98;
    v74 = v100;
    v75 = v101[0];
    *(_OWORD *)(v71 + 48) = v99;
    *(_OWORD *)(v71 + 64) = v74;
    *(_OWORD *)(v71 + 32) = v73;
    *(_QWORD *)(v71 + 80) = v75;
    *(_QWORD *)(v71 + 88) = 0;
    *(_QWORD *)(v71 + 96) = 0;
    *(_QWORD *)(v71 + 104) = 0;
    *(_OWORD *)(v71 + 88) = *(_OWORD *)&v101[1];
    v101[1] = 0;
    v101[2] = 0;
    *(void **)(v71 + 104) = v101[3];
    *(_QWORD *)(v71 + 112) = 0;
    v101[3] = 0;
    *(_QWORD *)(v71 + 120) = 0;
    *(_QWORD *)(v71 + 128) = 0;
    *(_OWORD *)(v71 + 112) = *(_OWORD *)v102;
    *(_QWORD *)(v71 + 128) = *(_QWORD *)&v102[16];
    memset(v102, 0, 24);
    *(_OWORD *)(v71 + 136) = *(_OWORD *)&v102[24];
    *(_QWORD *)&v102[32] = 0;
    *(_QWORD *)&v102[24] = 0;
    a2[3] = v71 + 152;
  }
  v149[0] = (void **)v102;
  sub_100017FB8(v149);
  if (v101[1])
  {
    v101[2] = v101[1];
    operator delete(v101[1]);
  }
  return v81;
}

void sub_10006538C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  sub_100012168((uint64_t)&STACK[0x678]);
  sub_10002EB64((uint64_t)&STACK[0x6A8]);
  sub_100012168(a10);
  sub_100012168((uint64_t)&STACK[0x288]);
  sub_100012168(a11);
  sub_100012168((uint64_t)&STACK[0x328]);
  sub_100012168(a27);
  sub_100012168((uint64_t)&a31);
  sub_100012168(a12);
  sub_100012168((uint64_t)&a51);
  sub_100065454((uint64_t)&a71);
  _Unwind_Resume(a1);
}

uint64_t sub_100065454(uint64_t a1)
{
  void *v2;
  void **v4;

  sub_100012168(a1 + 136);
  v4 = (void **)(a1 + 112);
  sub_100017FB8(&v4);
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1000654AC(uint64_t a1)
{
  *(_QWORD *)a1 = off_100177B28;
  if (*(_BYTE *)(a1 + 256))
    sub_10010EBD8(a1 + 56);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  sub_100012168(a1 + 16);
  return a1;
}

void sub_100065500(uint64_t a1)
{
  *(_QWORD *)a1 = off_100177B28;
  if (*(_BYTE *)(a1 + 256))
    sub_10010EBD8(a1 + 56);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  sub_100012168(a1 + 16);
  operator delete();
}

uint64_t sub_100065564(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 16) + 8))();
}

uint64_t sub_100065570(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 16) + 16))();
}

uint64_t sub_10006557C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 16) + 24))();
}

uint64_t sub_100065588()
{
  return 4294967218;
}

double sub_100065590@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t (*v5)(void);
  int v6;
  uint64_t (*v7)(void);
  unsigned int v8;
  double result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(uint64_t (**)(void))(v4 + 32);
  if (v5)
  {
    v6 = v5();
    v4 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v6 = 0;
  }
  v7 = *(uint64_t (**)(void))(v4 + 40);
  if (v7 && (v8 = v7()) != 0)
  {
    v10 = v6 != 0;
    *a2 = v8;
    a2[1] = v10;
    a2[2] = v8 << v10;
    a2[3] = 0;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t sub_10006560C()
{
  return 1;
}

BOOL sub_100065614(uint64_t a1)
{
  BOOL v1;
  _QWORD v4[4];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 72))(v4);
  if (v4[0])
    v1 = 0;
  else
    v1 = v4[1] == 0;
  return !v1 || v4[2] != 0 || v4[3] != 0;
}

void sub_100065668()
{
  operator new();
}

void sub_1000656AC()
{
  operator delete();
}

uint64_t sub_1000656D0(uint64_t a1)
{
  if (qword_1001A0FB8 != -1)
    dispatch_once(&qword_1001A0FB8, &stru_100177C38);
  if (off_1001A0FB0)
    return off_1001A0FB0(a1);
  else
    return 0;
}

uint64_t sub_100065734(uint64_t a1)
{
  sub_100066BC8(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_10006575C(id a1)
{
  void *v1;
  __int128 v2;
  int v3;
  _QWORD v4[45];
  uint64_t v5;
  uint64_t v6;

  v1 = dlopen("/usr/lib/libAmber.dylib", 5);
  if (v1)
  {
    off_1001A0FB0 = (uint64_t (*)(_QWORD))dlsym(v1, "AmberDiskImagePluginCreate");
    if (off_1001A0FB0)
      return;
    *(_QWORD *)&v2 = "*amberPluginCreate(uint64_t)_block_invoke";
    *((_QWORD *)&v2 + 1) = 18;
    v3 = 16;
    sub_100065978(v4, &v2);
    sub_100005A0C(&v5, (uint64_t)"Cannot find AmberDiskImagePluginCreate in libAmber", 50);
    std::ostream::~ostream(&v5, off_100177F58);
    sub_100066144((uint64_t)v4);
  }
  else
  {
    *(_QWORD *)&v2 = "*amberPluginCreate(uint64_t)_block_invoke";
    *((_QWORD *)&v2 + 1) = 18;
    v3 = 16;
    sub_100065890(v4, &v2);
    sub_100005A0C(&v5, (uint64_t)"Cannot load libAmber", 20);
    std::ostream::~ostream(&v5, off_100177D38);
    sub_100065ADC((uint64_t)v4);
  }
  std::ios::~ios(&v6);
}

void sub_10006586C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100065A20((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100065890(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100065A60((uint64_t)a1, a2);
  *a1 = off_100177C70;
  a1[45] = &off_100177D70;
  a1[46] = &off_100177D98;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100177C70;
  a1[45] = off_100177CF8;
  a1[46] = off_100177D20;
  return a1;
}

void sub_100065914(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100065ADC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100065938(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100177D38);
  sub_100065ADC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100065978(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000660C8((uint64_t)a1, a2);
  *a1 = off_100177E90;
  a1[45] = &off_100177F90;
  a1[46] = &off_100177FB8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100177E90;
  a1[45] = off_100177F18;
  a1[46] = off_100177F40;
  return a1;
}

void sub_1000659FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100066144(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100065A20(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100177F58);
  sub_100066144(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100065A60(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100177E08;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100065AC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100065ADC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100177E08;
  sub_100065D94(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100065B78(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100177D38);
  sub_100065ADC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100065BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100065C00(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100065C4C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100177D38);
  sub_100065ADC(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100065C84(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100177D38);
  sub_100065ADC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100065CD4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100177D38);
  sub_100065ADC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100065D14(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100177D38);
  sub_100065ADC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100065D70(uint64_t a1)
{
  sub_100065ADC(a1);
  operator delete();
}

uint64_t sub_100065D94(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100065EE4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100065EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100065EE4(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 52;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 52;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000660C8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100178028;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100066130(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100066144(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100178028;
  sub_1000663FC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000661E0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100177F58);
  sub_100066144(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100066234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100066268(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000662B4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100177F58);
  sub_100066144(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000662EC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100177F58);
  sub_100066144(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_10006633C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100177F58);
  sub_100066144(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006637C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100177F58);
  sub_100066144(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_1000663D8(uint64_t a1)
{
  sub_100066144(a1);
  operator delete();
}

uint64_t sub_1000663FC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10006654C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100066524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10006654C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 58;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 58;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100066730(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 40 * a3;
    do
    {
      sub_1000667B0((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_100066798(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100066BC8(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1000667B0(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  void **v10;

  v6 = (uint64_t **)sub_100066830(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_1000669B4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000284A8(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void **sub_100066830(_QWORD *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  void **v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  _QWORD *v16;
  BOOL v17;
  void **v19;

  v9 = (void **)(a1 + 1);
  if (a1 + 1 == (_QWORD *)a2 || (sub_100066AE8(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      v12 = (_QWORD *)a2;
    }
    else
    {
      v11 = *(_QWORD **)a2;
      if (*(_QWORD *)a2)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)v11[1];
        }
        while (v11);
      }
      else
      {
        v16 = (_QWORD *)a2;
        do
        {
          v12 = (_QWORD *)v16[2];
          v17 = *v12 == (_QWORD)v16;
          v16 = v12;
        }
        while (v17);
      }
      if ((sub_100066AE8(v12 + 4, a5) & 0x80) == 0)
        return (void **)sub_100066A58((uint64_t)a1, a3, a5);
    }
    if (*(_QWORD *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((sub_100066AE8((_QWORD *)(a2 + 32), a5) & 0x80) != 0)
  {
    a4 = (uint64_t *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 8);
    if (v13)
    {
      v14 = *(void ***)(a2 + 8);
      do
      {
        v15 = v14;
        v14 = (void **)*v14;
      }
      while (v14);
    }
    else
    {
      v19 = (void **)a2;
      do
      {
        v15 = (void **)v19[2];
        v17 = *v15 == v19;
        v19 = v15;
      }
      while (!v17);
    }
    if (v15 == v9)
      goto LABEL_27;
    if ((sub_100066AE8(a5, v15 + 4) & 0x80) != 0)
    {
      v13 = *a4;
LABEL_27:
      if (v13)
      {
        *a3 = v15;
        return v15;
      }
      else
      {
        *a3 = (void **)a2;
      }
      return (void **)a4;
    }
    return (void **)sub_100066A58((uint64_t)a1, a3, a5);
  }
  *a3 = (void **)a2;
  *a4 = a2;
  return (void **)a4;
}

__n128 sub_1000669B4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  __n128 result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100041DD0(v7, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100066A3C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100066B7C(v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_100066A58(uint64_t a1, _QWORD *a2, void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((sub_100066AE8(a3, (void **)v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((sub_100066AE8(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_100066AE8(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return sub_100066B20(a1, v2, v5, v6);
}

uint64_t sub_100066B20(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

void sub_100066B7C(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_100066BC8(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_100066BC8(a1, *(_QWORD *)a2);
    sub_100066BC8(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void **sub_100066C18(uint64_t a1, void **a2)
{
  void **v2;
  _QWORD *v3;
  void **v5;
  char v6;
  _QWORD *v7;

  v2 = (void **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (void **)(a1 + 8);
  do
  {
    v6 = sub_100066AE8(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = (void **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || (sub_100066AE8(a2, v5 + 4) & 0x80) != 0)
    return v2;
  return v5;
}

uint64_t *sub_100066C94(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_100066A58((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_100066D28((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000284A8(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_BYTE *sub_100066D28@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_100041DD0(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100066DB0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100066B7C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100066DCC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100178178);
  sub_100066FC0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100066E04(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100178178);
  sub_100066FC0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100066E44(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100178178);
  sub_100066FC0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100066E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100066ECC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100066F18(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100178178);
  sub_100066FC0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100066F68(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100178178);
  sub_100066FC0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100066FC0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100178248;
  sub_10006705C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006705C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000671D4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100067184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000671B0(uint64_t a1)
{
  sub_100066FC0(a1);
  operator delete();
}

int *sub_1000671D4(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 92;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 92;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000673B8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100178398);
  sub_1000675AC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000673F0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100178398);
  sub_1000675AC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100067430(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100178398);
  sub_1000675AC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100067484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000674B8(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100067504(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100178398);
  sub_1000675AC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100067554(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100178398);
  sub_1000675AC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000675AC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100178468;
  sub_100067648(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100067648(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000677C0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100067770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10006779C(uint64_t a1)
{
  sub_1000675AC(a1);
  operator delete();
}

int *sub_1000677C0(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 147;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 147;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000679A4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001785B8);
  sub_100067B98(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000679DC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001785B8);
  sub_100067B98(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100067A1C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001785B8);
  sub_100067B98(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100067A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100067AA4(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100067AF0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001785B8);
  sub_100067B98(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100067B40(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001785B8);
  sub_100067B98(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100067B98(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100178688;
  sub_100067C34(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100067C34(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100067DAC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100067D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100067D88(uint64_t a1)
{
  sub_100067B98(a1);
  operator delete();
}

int *sub_100067DAC(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 152;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 152;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100067F90(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001787D8);
  sub_100068184(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100067FC8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001787D8);
  sub_100068184(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100068008(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001787D8);
  sub_100068184(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10006805C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100068090(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000680DC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001787D8);
  sub_100068184(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10006812C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001787D8);
  sub_100068184(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100068184(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001788A8;
  sub_100068220(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100068220(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100068398((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100068348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100068374(uint64_t a1)
{
  sub_100068184(a1);
  operator delete();
}

int *sub_100068398(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 157;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 157;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10006857C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001789F8);
  sub_100068770(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000685B4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001789F8);
  sub_100068770(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000685F4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_1001789F8);
  sub_100068770(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100068648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10006867C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000686C8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001789F8);
  sub_100068770(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100068718(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_1001789F8);
  sub_100068770(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100068770(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100178AC8;
  sub_10006880C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006880C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100068984((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100068934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100068960(uint64_t a1)
{
  sub_100068770(a1);
  operator delete();
}

int *sub_100068984(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 163;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 163;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100068B68(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100178C18);
  sub_100068D5C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100068BA0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100178C18);
  sub_100068D5C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100068BE0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100178C18);
  sub_100068D5C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100068C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100068C68(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100068CB4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100178C18);
  sub_100068D5C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100068D04(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100178C18);
  sub_100068D5C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100068D5C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100178CE8;
  sub_100068DF8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100068DF8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100068F70((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100068F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100068F4C(uint64_t a1)
{
  sub_100068D5C(a1);
  operator delete();
}

int *sub_100068F70(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 171;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 171;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100069154(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100178E38);
  sub_100069348(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006918C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100178E38);
  sub_100069348(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000691CC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100178E38);
  sub_100069348(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100069220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100069254(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000692A0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100178E38);
  sub_100069348(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000692F0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100178E38);
  sub_100069348(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100069348(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100178F08;
  sub_1000693E4(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000693E4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10006955C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10006950C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100069538(uint64_t a1)
{
  sub_100069348(a1);
  operator delete();
}

int *sub_10006955C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 243;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 243;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100069740(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v19[5];

  v3 = *a1;
  v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286)
    sub_100017E44();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xD79435E50D7943)
    v9 = 0x1AF286BCA1AF286;
  else
    v9 = v5;
  v19[4] = a1 + 2;
  v10 = (char *)sub_100069920(v7, v9);
  v11 = &v10[152 * v4];
  v19[0] = v10;
  v19[1] = v11;
  v19[3] = &v10[152 * v12];
  v13 = *(_OWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 48);
  v15 = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v11 + 10) = *(_QWORD *)(a2 + 80);
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 4) = v15;
  *((_OWORD *)v11 + 2) = v13;
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v16;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *(_OWORD *)(v11 + 88) = *(_OWORD *)(a2 + 88);
  *((_QWORD *)v11 + 13) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *((_QWORD *)v11 + 15) = 0;
  *((_QWORD *)v11 + 16) = 0;
  *((_QWORD *)v11 + 14) = 0;
  *((_OWORD *)v11 + 7) = *(_OWORD *)(a2 + 112);
  *((_QWORD *)v11 + 16) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_OWORD *)(v11 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  v19[2] = v11 + 152;
  sub_1000698AC(a1, v19);
  v17 = a1[1];
  sub_100069A10((uint64_t)v19);
  return v17;
}

void sub_100069898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100069A10((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000698AC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100069968((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *sub_100069920(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287)
    sub_100012320();
  return operator new(152 * a2);
}

__n128 sub_100069968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __n128 *v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 result;

  v7 = a7;
  if (a3 != a5)
  {
    v8 = (__n128 *)(a7 - 64);
    do
    {
      v9 = *(__n128 *)(a3 - 152);
      *(__n128 *)((char *)v8 - 72) = *(__n128 *)(a3 - 136);
      *(__n128 *)((char *)v8 - 88) = v9;
      v10 = *(__n128 *)(a3 - 120);
      v11 = *(__n128 *)(a3 - 104);
      v12 = *(__n128 *)(a3 - 88);
      v8[-1].n128_u64[1] = *(_QWORD *)(a3 - 72);
      v8->n128_u64[0] = 0;
      *(__n128 *)((char *)v8 - 24) = v12;
      *(__n128 *)((char *)v8 - 40) = v11;
      *(__n128 *)((char *)v8 - 56) = v10;
      v8->n128_u64[1] = 0;
      v8[1].n128_u64[0] = 0;
      *v8 = *(__n128 *)(a3 - 64);
      v8[1].n128_u64[0] = *(_QWORD *)(a3 - 48);
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v8[1].n128_u64[1] = 0;
      v8[2].n128_u64[0] = 0;
      v8[2].n128_u64[1] = 0;
      *(__n128 *)((char *)v8 + 24) = *(__n128 *)(a3 - 40);
      v8[2].n128_u64[1] = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      result = *(__n128 *)(a3 - 16);
      v8[3] = result;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v8 = (__n128 *)((char *)v8 - 152);
      v7 -= 152;
      a3 -= 152;
    }
    while (a3 != a5);
  }
  return result;
}

uint64_t sub_100069A10(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 152;
    sub_100061368(i - 152);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100069A5C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100178F88;
  *(_QWORD *)(a1 + 8) = a2;
  sub_10010125C((dispatch_semaphore_t *)(a1 + 24), 0);
  sub_100063528(a2);
  return a1;
}

void sub_100069AAC(_Unwind_Exception *a1)
{
  NSObject **v1;

  sub_100100B68(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100069AC0(uint64_t a1)
{
  *(_QWORD *)a1 = off_100178F88;
  sub_100100B68((NSObject **)(a1 + 24));
  return a1;
}

void sub_100069AF0(uint64_t a1)
{
  *(_QWORD *)a1 = off_100178F88;
  sub_100100B68((NSObject **)(a1 + 24));
  operator delete();
}

_QWORD *sub_100069B30(_QWORD ***a1)
{
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(***a1 + 16))(**a1);
}

uint64_t sub_100069B44(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100178248;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100069BAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100069BC0(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100178468;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100069C28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100069C3C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100178688;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100069CA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100069CB8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001788A8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100069D20(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100069D34(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100178AC8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100069D9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100069DB0(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_100066A58((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_100069E58((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000284A8(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100069EE8((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_100069E58@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_100041DD0(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100069ED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100069EE8(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100069EE8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100069F2C((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_100069F2C(uint64_t a1)
{
  sub_100012168(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_100069F68(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t (*v8)(uint64_t);
  __int128 v9;
  int v10;
  _QWORD v11[45];
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)&v9 = "PluginsManager::register_plugin(const string &, di_plugin_t *)::(anonymous class)::operator()(di_plugin_t *) const";
  *((_QWORD *)&v9 + 1) = 93;
  v10 = 0;
  sub_10006A150(v11, &v9);
  sub_100005A0C(&v12, (uint64_t)"Unregistering plugin ", 21);
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = a1;
  else
    v5 = *(_QWORD *)a1;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  sub_100005A0C(&v12, v5, v6);
  std::ostream::~ostream(&v12, off_100179110);
  sub_10006A2B4((uint64_t)v11);
  result = std::ios::~ios(&v13);
  v8 = *(uint64_t (**)(uint64_t))(a2 + 32);
  if (v8)
    return v8(a2);
  return result;
}

void sub_10006A028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10006A1F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10006A03C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100178FE0;
  if (SHIBYTE(this[2].__vftable) < 0)
    operator delete((void *)this[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10006A078(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100178FE0;
  if (SHIBYTE(this[2].__vftable) < 0)
    operator delete((void *)this[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(this);
  operator delete();
}

void sub_10006A0C8(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 32);
  sub_100069F68(a1 + 32, *(_QWORD *)(a1 + 24));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v2);
}

uint64_t sub_10006A110(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

_QWORD *sub_10006A150(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10006A238((uint64_t)a1, a2);
  *a1 = off_100179048;
  a1[45] = &off_100179148;
  a1[46] = &off_100179170;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100179048;
  a1[45] = off_1001790D0;
  a1[46] = off_1001790F8;
  return a1;
}

void sub_10006A1D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10006A2B4(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006A1F8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100179110);
  sub_10006A2B4(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10006A238(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001791E0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10006A2A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006A2B4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001791E0;
  sub_10006A56C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10006A350(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100179110);
  sub_10006A2B4(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10006A3A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10006A3D8(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_10006A424(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100179110);
  sub_10006A2B4(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10006A45C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100179110);
  sub_10006A2B4(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_10006A4AC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100179110);
  sub_10006A2B4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006A4EC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100179110);
  sub_10006A2B4(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10006A548(uint64_t a1)
{
  sub_10006A2B4(a1);
  operator delete();
}

uint64_t sub_10006A56C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10006A6BC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10006A694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10006A6BC(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 167;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 167;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10006A8A0(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100178CE8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10006A908(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_10006A920()
{
  operator delete();
}

_QWORD *sub_10006A934()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_100179260;
  return result;
}

void sub_10006A958(uint64_t a1, _QWORD *a2)
{
  *a2 = off_100179260;
}

uint64_t sub_10006A970(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t (*v3)(void);

  result = *a2;
  v3 = *(uint64_t (**)(void))(*a2 + 72);
  if (v3)
    return v3();
  return result;
}

uint64_t sub_10006A984(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10006A9C0()
{
}

void sub_10006A9CC(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10006AAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  uint64_t v14;

  if (!a2)
    _Unwind_Resume(exception_object);
  v13 = a13;
  if (a13 == &a10)
  {
    v14 = 4;
    v13 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_7;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_7:
  operator delete();
}

uint64_t sub_10006AB5C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *sub_10006ABC0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE v8[24];
  _BYTE *v9;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001792F0;
  sub_10006AB5C((uint64_t)v8, a3);
  a1[3] = a2;
  sub_10006AB5C((uint64_t)(a1 + 4), (uint64_t)v8);
  v4 = v9;
  if (v9 == v8)
  {
    v5 = 4;
    v4 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void sub_10006AC7C(std::__shared_weak_count *this)
{
  uint64_t *p_shared_owners;
  uint64_t *shared_owners;
  uint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001792F0;
  p_shared_owners = &this[1].__shared_owners_;
  shared_owners = (uint64_t *)this[2].__shared_owners_;
  if (shared_owners == p_shared_owners)
  {
    v4 = 4;
    shared_owners = p_shared_owners;
    goto LABEL_5;
  }
  if (shared_owners)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*shared_owners + 8 * v4))();
  }
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10006ACD8(std::__shared_weak_count *this)
{
  uint64_t *p_shared_owners;
  uint64_t *shared_owners;
  uint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001792F0;
  p_shared_owners = &this[1].__shared_owners_;
  shared_owners = (uint64_t *)this[2].__shared_owners_;
  if (shared_owners == p_shared_owners)
  {
    v4 = 4;
    shared_owners = p_shared_owners;
  }
  else
  {
    if (!shared_owners)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*shared_owners + 8 * v4))();
LABEL_6:
  std::__shared_weak_count::~__shared_weak_count(this);
  operator delete();
}

_QWORD *sub_10006AD48(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  v5 = a1[3];
  v2 = a1[7];
  if (!v2)
    sub_100017C6C();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  result = (_QWORD *)a1[7];
  if (result == a1 + 4)
  {
    v4 = 4;
    result = a1 + 4;
  }
  else
  {
    if (!result)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

uint64_t sub_10006ADC8(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else
    return 0;
}

uint64_t sub_10006AE08(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100178F08;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10006AE70(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

char *sub_10006AE84(char **a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_100017E44();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v32 = v4;
    v16 = (char *)sub_100017E58(v4, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v30 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v31 = v27;
    v29 = v26.i64[0];
    sub_100017E8C((uint64_t)&v29);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return v11 - 16;
}

uint64_t sub_10006AFC8(uint64_t a1, uint64_t a2, __int16 a3, unint64_t a4, _OWORD *a5)
{
  int v9;
  _BOOL4 v10;

  v9 = sub_10006B104(a2, a3);
  sub_10006B30C((_QWORD *)a1, v9, (a3 & 3) != 0);
  *(_QWORD *)a1 = off_1001793B0;
  *(_QWORD *)(a1 + 24) = off_100179488;
  *(_QWORD *)(a1 + 72) = off_1001794B0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 136) = *a5;
  if ((a3 & 0x200) != 0)
  {
    sub_10006B37C(a1, a4);
    sub_10006B470(a1);
    v10 = 1;
  }
  else if (*(_BYTE *)(a1 + 36))
  {
    v10 = faccessat(*(_DWORD *)(a1 + 32), "mapped", 0, 0) != 0;
  }
  else
  {
    v10 = 0;
  }
  if (!*(_QWORD *)(a1 + 112))
    sub_10006B6E4(a1);
  if (v10)
    sub_10006B9C4(a1, (a3 & 0x200) != 0);
  return a1;
}

void sub_10006B0C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_100012168(v1 + 96);
  sub_100012168(v2);
  sub_10006BC58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006B104(uint64_t a1, __int16 a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  void *exception;
  unsigned int v7;
  const char *v8;
  void *v9;
  _BYTE v10[520];
  stat v11;

  v2 = a1;
  if ((a2 & 0x200) != 0)
  {
    if (*(char *)(a1 + 23) < 0)
      a1 = *(_QWORD *)a1;
    if (mkdir((const char *)a1, 0x1FFu) != -1)
      return sub_1001017E8(v2, 0);
    exception = __cxa_allocate_exception(0x40uLL);
    v7 = *__error();
    v8 = "Failed creating sparsebundle folder";
LABEL_16:
    v9 = (void *)sub_100005410((uint64_t)exception, (uint64_t)v8, v7);
  }
  if ((a2 & 3) == 0 || geteuid())
    return sub_1001017E8(v2, 0);
  if (*(char *)(v2 + 23) >= 0)
    v3 = (const char *)v2;
  else
    v3 = *(const char **)v2;
  if (stat(v3, &v11))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v7 = *__error();
    v8 = "stat failed";
    goto LABEL_16;
  }
  if (!v11.st_uid)
    return sub_1001017E8(v2, 0);
  sub_10006EE68((uint64_t)v10, v11.st_uid);
  v4 = sub_1001017E8(v2, 0);
  sub_10006F708((uint64_t)v10);
  return v4;
}

void sub_10006B218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  void *v13;

  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

_QWORD *sub_10006B30C(_QWORD *a1, int a2, char a3)
{
  _QWORD *v6;

  v6 = sub_10011E7DC(a1);
  sub_100102278((uint64_t)(v6 + 3), a2, a3);
  *a1 = off_100179558;
  a1[3] = &off_100179618;
  return a1;
}

void sub_10006B364(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006B37C(uint64_t result, unint64_t a2)
{
  void *exception;
  _QWORD v4[33];

  if (a2 < 0x100000 || a2 > 0x200000000 || (a2 & 0xFFF) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)v4);
    sub_100005A0C(v4, (uint64_t)"Invalid band size (", 19);
    std::ostream::operator<<(v4, a2);
    sub_100005A0C(v4, (uint64_t)" bytes)", 7);
    sub_100012294((uint64_t)exception, (uint64_t)v4, 0x16u);
  }
  *(_QWORD *)(result + 128) = a2;
  return result;
}

void sub_10006B43C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10000FE34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10006B470(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *exception;
  int *v13;
  void *v14;
  void *v15[2];
  char v16;
  void *__p[2];
  std::__shared_weak_count *v18;
  uint64_t (**v19)();
  uint64_t (**v20)();
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t (**v23)();
  std::__shared_weak_count *v24;
  uint64_t (**v25)();
  uint64_t (**v26)();
  std::__shared_weak_count *v27;
  uint64_t v28;

  if (mkdirat(*(_DWORD *)(a1 + 32), "bands", 0x1FFu) == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v13 = __error();
    v14 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Failed creating bands folder", *v13);
  }
  sub_10006C054(a1);
  v2 = *(_DWORD *)(a1 + 32);
  sub_100005870(__p, "token");
  v3 = sub_100101D04(v2, (uint64_t)__p, 1538);
  sub_100046E20((uint64_t)&v23, v3, 1, 0);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  v4 = *(_DWORD *)(a1 + 32);
  sub_100005870(v15, "lock");
  v5 = sub_100101D04(v4, (uint64_t)v15, 1538);
  sub_100046E20((uint64_t)__p, v5, 1, 0);
  if (v16 < 0)
    operator delete(v15[0]);
  __p[0] = off_10018D828;
  v19 = off_10018D908;
  v20 = off_10018D940;
  sub_100047198((uint64_t)&v22);
  v6 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  v23 = off_10018D828;
  v25 = off_10018D908;
  v26 = off_10018D940;
  sub_100047198((uint64_t)&v28);
  v9 = v27;
  if (v27)
  {
    v10 = (unint64_t *)&v27->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
}

void sub_10006B688(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10006B6E4(uint64_t a1)
{
  void *__p;

  sub_100005870(&__p, "Info.plist");
  sub_10006C24C(a1);
}

void sub_10006B764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  void *v64;
  const char *v65;
  size_t v66;

  if (a18 < 0)
    operator delete(__p);
  if (a2 == 1)
  {
    v64 = __cxa_begin_catch(exception_object);
    *(_QWORD *)&a11 = "SparseBundleBackend::read_info()";
    *((_QWORD *)&a11 + 1) = 30;
    a12 = 16;
    sub_10006CAD4(&__p, &a11);
    sub_100005A0C(&a61, (uint64_t)"Failed to read ", 15);
    sub_100005A0C(&a61, (uint64_t)"Info.plist", 10);
    sub_100005A0C(&a61, (uint64_t)", ", 2);
    v65 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v64 + 16))(v64);
    v66 = strlen(v65);
    sub_100005A0C(&a61, (uint64_t)v65, v66);
    sub_100005A0C(&a61, (uint64_t)", reading from backup", 21);
    sub_10006CB7C((uint64_t)&__p);
    __cxa_end_catch();
    sub_100005870(&__p, "Info.bckup");
    sub_10006C24C(v61);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006B9C4(uint64_t a1, char a2)
{
  uint64_t result;
  void *exception;
  int *v6;
  void *v7;
  int *v8;
  void *v9;
  int *v10;
  stat v11;
  _QWORD v12[33];

  result = mkdirat(*(_DWORD *)(a1 + 32), "mapped", 0x1FFu);
  if ((_DWORD)result == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)v12);
    sub_100005A0C(v12, (uint64_t)"Failed creating ", 16);
    sub_100005A0C(v12, (uint64_t)"mapped", 6);
    sub_100005A0C(v12, (uint64_t)" folder", 7);
    v6 = __error();
    sub_100012294((uint64_t)exception, (uint64_t)v12, *v6);
  }
  if ((a2 & 1) == 0)
  {
    memset(&v11, 0, sizeof(v11));
    sub_1001026E4(a1 + 24, &v11);
    if (fchmodat(*(_DWORD *)(a1 + 32), "mapped", v11.st_mode & 0x1FF, 0) == -1)
    {
      v7 = __cxa_allocate_exception(0x40uLL);
      sub_100005920((uint64_t)v12);
      sub_100005A0C(v12, (uint64_t)"fchmodat failed for ", 20);
      sub_100005A0C(v12, (uint64_t)"mapped", 6);
      sub_100005A0C(v12, (uint64_t)" folder", 7);
      v8 = __error();
      sub_100012294((uint64_t)v7, (uint64_t)v12, *v8);
    }
    result = geteuid();
    if (!(_DWORD)result && v11.st_uid)
    {
      result = fchownat(*(_DWORD *)(a1 + 32), "mapped", v11.st_uid, 0xFFFFFFFF, 0);
      if ((_DWORD)result == -1)
      {
        v9 = __cxa_allocate_exception(0x40uLL);
        sub_100005920((uint64_t)v12);
        sub_100005A0C(v12, (uint64_t)"fchownat failed for ", 20);
        sub_100005A0C(v12, (uint64_t)"mapped", 6);
        sub_100005A0C(v12, (uint64_t)" folder", 7);
        v10 = __error();
        sub_100012294((uint64_t)v9, (uint64_t)v12, *v10);
      }
    }
  }
  return result;
}

void sub_10006BC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_10000FE34((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_10006BC58(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_10010208C(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_10006BC90(_QWORD *a1, int a2, char a3, _QWORD *a4)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v6 = sub_10006B30C(a1, a2, a3);
  *v6 = off_1001793B0;
  v6[3] = off_100179488;
  v6[9] = off_1001794B0;
  v6[10] = *a4;
  v7 = a4[1];
  v6[11] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  sub_10006B6E4((uint64_t)a1);
}

void sub_10006BE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;

  va_start(va, a4);
  sub_10006BF28((uint64_t)va);
  v8 = *(_QWORD *)(v4 + 112);
  *(_QWORD *)(v4 + 112) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_100012168(v6);
  sub_100012168(v5);
  sub_10006BC58(v4);
  _Unwind_Resume(a1);
}

_QWORD *sub_10006BE80(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000749E8((uint64_t)a1, a2);
  *a1 = off_100179648;
  a1[45] = &off_100179748;
  a1[46] = &off_100179770;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100179648;
  a1[45] = off_1001796D0;
  a1[46] = off_1001796F8;
  return a1;
}

void sub_10006BF04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10006EA70(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006BF28(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100179710);
  sub_10006EA70(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_10006BF6C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100074A64((uint64_t)a1, a2);
  *a1 = off_100179A88;
  a1[45] = &off_100179B88;
  a1[46] = &off_100179BB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100179A88;
  a1[45] = off_100179B10;
  a1[46] = off_100179B38;
  return a1;
}

void sub_10006BFF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10006F9BC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006C014(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100179B50);
  sub_10006F9BC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_10006C054(uint64_t a1)
{
  int v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 __p;
  int v8;
  char v9;
  _QWORD v10[2];
  std::__shared_weak_count *v11;
  uint64_t (**v12)();
  uint64_t (**v13)();
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)&__p = "SparseBundleBackend::write_info_plists()";
  *((_QWORD *)&__p + 1) = 38;
  v8 = 0;
  sub_10006D2B8(v10, &__p);
  sub_100005A0C(&v16, (uint64_t)"Updating ", 9);
  sub_100005A0C(&v16, (uint64_t)"Info.bckup", 10);
  sub_100005A0C(&v16, (uint64_t)", disk size: ", 13);
  std::ostream::operator<<(&v16, *(_QWORD *)(a1 + 120));
  std::ostream::~ostream(&v16, off_10017A5F0);
  sub_100071840((uint64_t)v10);
  std::ios::~ios(&v17);
  v2 = *(_DWORD *)(a1 + 32);
  sub_100005870(&__p, "Info.bckup");
  v3 = sub_100101D04(v2, (uint64_t)&__p, 1538);
  sub_100046E20((uint64_t)v10, v3, 1, 0);
  if (v9 < 0)
    operator delete((void *)__p);
  sub_10006CE60(a1, (uint64_t)v10);
  sub_10006CBBC(a1);
  v10[0] = off_10018D828;
  v12 = off_10018D908;
  v13 = off_10018D940;
  sub_100047198((uint64_t)&v15);
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

void sub_10006C208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  sub_100044E08(&a16);
  _Unwind_Resume(a1);
}

void sub_10006C24C(uint64_t a1)
{
  (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  operator new();
}

void sub_10006C874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t *v21;
  uint64_t v23;

  sub_10000FE34((uint64_t)&a16);
  if (__p)
    operator delete(__p);
  v23 = *v21;
  *v21 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  _Unwind_Resume(a1);
}

_QWORD *sub_10006C9EC(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100074AE0((uint64_t)a1, a2);
  *a1 = off_100179CA8;
  a1[45] = &off_100179DA8;
  a1[46] = &off_100179DD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100179CA8;
  a1[45] = off_100179D30;
  a1[46] = off_100179D58;
  return a1;
}

void sub_10006CA70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10006FFA8(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006CA94(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100179D70);
  sub_10006FFA8(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_10006CAD4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100074E88((uint64_t)a1, a2);
  *a1 = off_100179EC8;
  a1[45] = &off_100179FC8;
  a1[46] = &off_100179FF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100179EC8;
  a1[45] = off_100179F50;
  a1[46] = off_100179F78;
  return a1;
}

void sub_10006CB58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100070604(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006CB7C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100179F90);
  sub_100070604(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

const void **sub_10006CBBC(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  void *exception;
  void *v6;
  __int128 v8;
  int v9;
  void *__p[2];
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)&v8 = "SparseBundleBackend::write_primary_info_plist()";
  *((_QWORD *)&v8 + 1) = 45;
  v9 = 0;
  sub_10006D1D0(__p, &v8);
  sub_100005A0C(&v11, (uint64_t)"Updating ", 9);
  sub_100005A0C(&v11, (uint64_t)"Info.plist", 10);
  std::ostream::~ostream(&v11, off_10017A3D0);
  sub_100071254((uint64_t)__p);
  std::ios::~ios(&v12);
  v2 = *(_QWORD *)(a1 + 112);
  if (!v2)
  {
    sub_100005870(__p, "Info.plist");
    operator new();
  }
  v3 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 56))(v2, 0);
  if (v3)
  {
    v4 = v3;
    exception = __cxa_allocate_exception(0x40uLL);
    v6 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Failed truncating plist", v4);
  }
  return sub_10006CE60(a1, *(_QWORD *)(a1 + 112));
}

void sub_10006CD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10006CD78(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100074F04((uint64_t)a1, a2);
  *a1 = off_10017A0E8;
  a1[45] = &off_10017A1E8;
  a1[46] = &off_10017A210;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017A0E8;
  a1[45] = off_10017A170;
  a1[46] = off_10017A198;
  return a1;
}

void sub_10006CDFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100070BF0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006CE20(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017A1B0);
  sub_100070BF0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

const void **sub_10006CE60(uint64_t a1, uint64_t a2)
{
  __CFDictionary *v4;
  _OWORD *v5;
  CFDataRef v6;
  CFIndex Length;
  UInt8 *BytePtr;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v17;
  const std::error_category *v18;
  void *exception;
  unsigned int Code;
  void *__p;
  __int128 v22;
  uint64_t v23;
  CFIndex v24;
  char v25;
  const __CFData *v26;
  CFErrorRef error;
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(Mutable, CFSTR("diskimage-bundle-type"), CFSTR("com.apple.diskimage.sparsebundle"));
  CFDictionarySetValue(Mutable, kCFBundleInfoDictionaryVersionKey, CFSTR("6.0"));
  sub_1000FDC60(Mutable, CFSTR("bundle-backingstore-version"), 2);
  sub_1000FDC60(Mutable, CFSTR("size"), *(_QWORD *)(a1 + 120));
  sub_1000FDC60(Mutable, CFSTR("band-size"), *(_QWORD *)(a1 + 128));
  v4 = Mutable;
  v5 = operator new(0x28uLL);
  __p = v5;
  v22 = xmmword_1001425E0;
  *v5 = 0u;
  v5[1] = 0u;
  *(_QWORD *)((char *)v5 + 29) = 0;
  sub_100070FE8(a1 + 136, v5);
  sub_1000FE2A8(v4, CFSTR("uuid"), (uint64_t)&__p);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
  error = 0;
  v6 = CFPropertyListCreateData(kCFAllocatorDefault, Mutable, kCFPropertyListXMLFormat_v1_0, 0, &error);
  v26 = v6;
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)&__p);
    sub_100005A0C(&__p, (uint64_t)"Failed creating property list", 29);
    Code = CFErrorGetCode(error);
    sub_100012294((uint64_t)exception, (uint64_t)&__p, Code);
  }
  Length = CFDataGetLength(v6);
  BytePtr = (UInt8 *)CFDataGetBytePtr(v26);
  v9 = *((_QWORD *)sub_1001207C0() + 1);
  __p = BytePtr;
  *(_QWORD *)&v22 = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *((_QWORD *)&v22 + 1) = Length;
  v23 = 0;
  v24 = Length;
  v25 = 0;
  v12 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a2 + 96))(a2, &__p);
  v13 = (std::__shared_weak_count *)v22;
  if ((_QWORD)v22)
  {
    v14 = (unint64_t *)(v22 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if ((v12 & 0x80000000) != 0
    || (v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2)) != 0)
  {
    v17 = __cxa_allocate_exception(0x40uLL);
    *v17 = &off_1001924F8;
    v18 = std::generic_category();
    v17[1] = v12;
    v17[2] = v18;
    *((_BYTE *)v17 + 24) = 0;
    *((_BYTE *)v17 + 48) = 0;
    v17[7] = "Failed writing sparsebundle info";
  }
  sub_100074B5C((const void **)&v26);
  sub_100074F80((const void **)&error);
  return sub_100028068((const void **)&Mutable);
}

void sub_10006D12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  sub_10000FE34((uint64_t)&__p);
  sub_100074B5C((const void **)(v14 - 72));
  sub_100074F80((const void **)(v14 - 64));
  sub_100028068((const void **)(v14 - 56));
  _Unwind_Resume(a1);
}

_QWORD *sub_10006D1D0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100074FB0((uint64_t)a1, a2);
  *a1 = off_10017A308;
  a1[45] = &off_10017A408;
  a1[46] = &off_10017A430;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017A308;
  a1[45] = off_10017A390;
  a1[46] = off_10017A3B8;
  return a1;
}

void sub_10006D254(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100071254(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006D278(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017A3D0);
  sub_100071254(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_10006D2B8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10007502C((uint64_t)a1, a2);
  *a1 = off_10017A528;
  a1[45] = &off_10017A628;
  a1[46] = &off_10017A650;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017A528;
  a1[45] = off_10017A5B0;
  a1[46] = off_10017A5D8;
  return a1;
}

void sub_10006D33C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100071840(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006D360(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017A5F0);
  sub_100071840(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10006D3A0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 120) = (a2 + 4095) & 0xFFFFFFFFFFFFF000;
  sub_10006C054(a1);
  return 0;
}

_QWORD *sub_10006D4D4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000750A8((uint64_t)a1, a2);
  *a1 = off_10017A748;
  a1[45] = &off_10017A848;
  a1[46] = &off_10017A870;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017A748;
  a1[45] = off_10017A7D0;
  a1[46] = off_10017A7F8;
  return a1;
}

void sub_10006D558(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100071E2C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006D57C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017A810);
  sub_100071E2C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_10006D5BC(int *a1@<X0>, _QWORD *a2@<X8>)
{
  int *v3;
  int v4;
  void *__p[2];
  char v6;
  int v7;

  v3 = a1 + 8;
  if ((*(unsigned int (**)(int *))(*(_QWORD *)a1 + 48))(a1))
    v4 = 2;
  else
    v4 = 0;
  v7 = v4;
  sub_100005870(__p, "token");
  sub_100075124(v3, (uint64_t)__p, &v7, a2);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_10006D638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006D654(int *a1)
{
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v7;
  int v8;
  void *__p[2];
  char v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  if (((*(uint64_t (**)(int *))(*(_QWORD *)a1 + 192))(a1) & 1) == 0)
  {
    v13 = 0;
    if ((*(unsigned int (**)(int *))(*(_QWORD *)a1 + 48))(a1))
      v2 = 550;
    else
      v2 = 20;
    v13 = v2;
    sub_100005870(__p, "lock");
    sub_100075124(a1 + 8, (uint64_t)__p, (int *)&v13, &v7);
    sub_100015BC8((uint64_t)(a1 + 20), &v7);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (v10 < 0)
      operator delete(__p[0]);
    *(_QWORD *)&v7 = "int SparseBundleBackend::lock()";
    *((_QWORD *)&v7 + 1) = 29;
    v8 = 0;
    sub_10006D928(__p, &v7);
    sub_100005A0C(&v11, (uint64_t)"Opened bundle's lock file with flags 0x", 39);
    *(_DWORD *)((char *)&v11 + *(_QWORD *)(v11 - 24) + 8) = *(_DWORD *)((_BYTE *)&v11 + *(_QWORD *)(v11 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v11, v13);
    *(_DWORD *)((char *)&v11 + *(_QWORD *)(v11 - 24) + 8) = *(_DWORD *)((_BYTE *)&v11 + *(_QWORD *)(v11 - 24) + 8) & 0xFFFFFFB5 | 2;
    std::ostream::~ostream(&v11, off_10017AA30);
    sub_100072418((uint64_t)__p);
    std::ios::~ios(&v12);
  }
  return 0;
}

void sub_10006D7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int128 a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  unsigned int *v60;
  int v61;
  BOOL v62;

  if (a2 == 1)
  {
    v60 = (unsigned int *)__cxa_begin_catch(exception_object);
    v61 = v60[2];
    if (v61 < 0)
      v61 = -v61;
    v62 = v61 == 45 || v61 == 2;
    *(_QWORD *)&a10 = "int SparseBundleBackend::lock()";
    *((_QWORD *)&a10 + 1) = 29;
    if (v62)
    {
      a11 = 0;
      sub_10006DA10(&__p, &a10);
      sub_100005A0C(&a60, (uint64_t)"Cannot lock bundle, ignoring: ", 30);
      sub_1001206CC(&a60, v60);
      sub_10006DAB8((uint64_t)&__p);
    }
    else
    {
      a11 = 16;
      sub_10006DAF8(&__p, &a10);
      sub_1001206CC(&a60, v60);
      sub_10006DBA0((uint64_t)&__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x10006D7CCLL);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10006D928(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10007520C((uint64_t)a1, a2);
  *a1 = off_10017A968;
  a1[45] = &off_10017AA68;
  a1[46] = &off_10017AA90;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017A968;
  a1[45] = off_10017A9F0;
  a1[46] = off_10017AA18;
  return a1;
}

void sub_10006D9AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100072418(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006D9D0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017AA30);
  sub_100072418(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_10006DA10(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100075288((uint64_t)a1, a2);
  *a1 = off_10017AB88;
  a1[45] = &off_10017AC88;
  a1[46] = &off_10017ACB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017AB88;
  a1[45] = off_10017AC10;
  a1[46] = off_10017AC38;
  return a1;
}

void sub_10006DA94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100072A04(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006DAB8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017AC50);
  sub_100072A04(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_10006DAF8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100075304((uint64_t)a1, a2);
  *a1 = off_10017ADA8;
  a1[45] = &off_10017AEA8;
  a1[46] = &off_10017AED0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017ADA8;
  a1[45] = off_10017AE30;
  a1[46] = off_10017AE58;
  return a1;
}

void sub_10006DB7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100072FF0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006DBA0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017AE70);
  sub_100072FF0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10006DBE0(uint64_t a1)
{
  return sub_10006D654((int *)(a1 - 72));
}

uint64_t sub_10006DBE8(_QWORD *a1)
{
  __int128 v3;
  int v4;
  _QWORD v5[45];
  uint64_t v6;
  uint64_t v7;

  if ((*(unsigned int (**)(_QWORD *))(*a1 + 192))(a1))
  {
    sub_1000534A4(a1 + 10);
    *(_QWORD *)&v3 = "int SparseBundleBackend::unlock_all()";
    *((_QWORD *)&v3 + 1) = 35;
    v4 = 0;
    sub_10006DCA0(v5, &v3);
    sub_100005A0C(&v6, (uint64_t)"Bundle's lock file is closed", 28);
    std::ostream::~ostream(&v6, off_10017B090);
    sub_1000735DC((uint64_t)v5);
    std::ios::~ios(&v7);
  }
  return 0;
}

void sub_10006DC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10006DD48((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10006DCA0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100075380((uint64_t)a1, a2);
  *a1 = off_10017AFC8;
  a1[45] = &off_10017B0C8;
  a1[46] = &off_10017B0F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017AFC8;
  a1[45] = off_10017B050;
  a1[46] = off_10017B078;
  return a1;
}

void sub_10006DD24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000735DC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006DD48(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017B090);
  sub_1000735DC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10006DD88(uint64_t a1)
{
  sub_10006DBE8((_QWORD *)(a1 - 72));
  return 0;
}

BOOL sub_10006DDA4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80) != 0;
}

BOOL sub_10006DDB4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) != 0;
}

void sub_10006DDC4()
{
  void *__p;

  sub_100005870(&__p, "bands");
  operator new();
}

void sub_10006DE58(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete();
}

void sub_10006DE94()
{
  void *__p;

  sub_100005870(&__p, "mapped");
  operator new();
}

void sub_10006DF28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete();
}

uint64_t sub_10006DF64(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  dirent *v5;
  char *d_name;
  uint64_t v7;
  uint64_t v8;
  DIR *v10;
  void *__p[2];
  char v12;
  uint64_t v13;

  v3 = *(_DWORD *)(a1 + 32);
  sub_100005870(__p, "bands");
  v4 = sub_100101D04(v3, (uint64_t)__p, 0);
  if (v12 < 0)
    operator delete(__p[0]);
  sub_1000739D4(&v10, v4);
  while (1)
  {
    v5 = readdir(v10);
    if (!v5)
      break;
    *__error() = 0;
    d_name = v5->d_name;
    v7 = strtoll(d_name, 0, 16);
    if (!*__error())
    {
      sub_100005870(__p, d_name);
      v13 = v7;
      v8 = *(_QWORD *)(a2 + 24);
      if (!v8)
        sub_100017C6C();
      (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v8 + 48))(v8, __p, &v13);
      if (v12 < 0)
        operator delete(__p[0]);
    }
  }
  return closedir(v10);
}

void sub_10006E064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, DIR *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10006E0B8(uint64_t a1)
{
  unint64_t v1;

  v1 = (unint64_t)(*(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 128) - 1) / *(_QWORD *)(a1 + 128);
  operator new();
}

void sub_10006E2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v14;

  v14 = *(_QWORD *)(v12 - 104);
  *(_QWORD *)(v12 - 104) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10006E344(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000753FC((uint64_t)a1, a2);
  *a1 = off_10017B2C0;
  a1[45] = &off_10017B3C0;
  a1[46] = &off_10017B3E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017B2C0;
  a1[45] = off_10017B348;
  a1[46] = off_10017B370;
  return a1;
}

void sub_10006E3C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100074004(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006E3EC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017B388);
  sub_100074004(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_10006E42C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000756F0((uint64_t)a1, a2);
  *a1 = off_10017B4E0;
  a1[45] = &off_10017B5E0;
  a1[46] = &off_10017B608;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017B4E0;
  a1[45] = off_10017B568;
  a1[46] = off_10017B590;
  return a1;
}

void sub_10006E4B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000745F0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006E4D4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017B5A8);
  sub_1000745F0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_10006E514(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *a1 = off_1001793B0;
  a1[3] = off_100179488;
  v2 = (uint64_t)(a1 + 3);
  a1[9] = off_1001794B0;
  v3 = a1[14];
  a1[14] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100012168((uint64_t)(a1 + 12));
  sub_100012168((uint64_t)(a1 + 10));
  sub_10010208C(v2);
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_10006E590(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *a1 = off_1001793B0;
  a1[3] = off_100179488;
  v2 = (uint64_t)(a1 + 3);
  a1[9] = off_1001794B0;
  v3 = a1[14];
  a1[14] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100012168((uint64_t)(a1 + 12));
  sub_100012168((uint64_t)(a1 + 10));
  sub_10010208C(v2);
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete();
}

uint64_t sub_10006E61C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 16))(*(_QWORD *)(a1 + 112));
}

uint64_t sub_10006E62C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120);
}

uint64_t sub_10006E634(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 36);
}

_QWORD *sub_10006E63C(uint64_t a1, _QWORD *a2)
{
  return sub_100005A0C(a2, (uint64_t)"sparsebundle", 12);
}

uint64_t sub_10006E650()
{
  return 4294967251;
}

uint64_t sub_10006E658()
{
  return 4294967251;
}

uint64_t sub_10006E660(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

void sub_10006E66C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(a1 - 3) = off_1001793B0;
  *a1 = off_100179488;
  a1[6] = off_1001794B0;
  v2 = a1[11];
  a1[11] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_100012168((uint64_t)(a1 + 9));
  sub_100012168((uint64_t)(a1 + 7));
  sub_10010208C((uint64_t)a1);
  v3 = (std::__shared_weak_count *)*(a1 - 1);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_10006E6E0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(a1 - 3) = off_1001793B0;
  *a1 = off_100179488;
  a1[6] = off_1001794B0;
  v2 = a1[11];
  a1[11] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_100012168((uint64_t)(a1 + 9));
  sub_100012168((uint64_t)(a1 + 7));
  sub_10010208C((uint64_t)a1);
  v3 = (std::__shared_weak_count *)*(a1 - 1);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete();
}

void sub_10006E76C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(a1 - 9) = off_1001793B0;
  *(a1 - 6) = off_100179488;
  v2 = (uint64_t)(a1 - 6);
  *a1 = off_1001794B0;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100012168((uint64_t)(a1 + 3));
  sub_100012168((uint64_t)(a1 + 1));
  sub_10010208C(v2);
  v4 = (std::__shared_weak_count *)*(a1 - 7);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void sub_10006E7E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(a1 - 9) = off_1001793B0;
  *(a1 - 6) = off_100179488;
  v2 = (uint64_t)(a1 - 6);
  *a1 = off_1001794B0;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100012168((uint64_t)(a1 + 3));
  sub_100012168((uint64_t)(a1 + 1));
  sub_10010208C(v2);
  v4 = (std::__shared_weak_count *)*(a1 - 7);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete();
}

uint64_t sub_10006E87C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100179710);
  sub_10006EA70(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006E8B4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100179710);
  sub_10006EA70(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006E8F4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100179710);
  sub_10006EA70(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10006E948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10006E97C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10006E9C8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100179710);
  sub_10006EA70(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10006EA18(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100179710);
  sub_10006EA70(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10006EA70(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1001797E0;
  sub_10006EB0C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006EB0C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10006EC84((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10006EC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10006EC60(uint64_t a1)
{
  sub_10006EA70(a1);
  operator delete();
}

int *sub_10006EC84(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 93;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 93;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10006EE68(uint64_t a1, uint64_t a2)
{
  void *exception;
  __int128 v6;
  int v7;
  _QWORD v8[45];
  uint64_t v9;
  uint64_t v10;

  if (seteuid(a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)v8);
    sub_100005A0C(v8, (uint64_t)"failed to set euid to ", 22);
    std::ostream::operator<<(v8, a2);
    sub_100012294((uint64_t)exception, (uint64_t)v8, 1u);
  }
  *(_QWORD *)&v6 = "set_euid_wrapper::set_euid_wrapper(uid_t)";
  *((_QWORD *)&v6 + 1) = 34;
  v7 = 0;
  sub_10006EFB8(v8, &v6);
  sub_100005A0C(&v9, (uint64_t)"uid temporarily set to ", 23);
  std::ostream::operator<<(&v9, a2);
  std::ostream::~ostream(&v9, off_100179930);
  sub_10006F11C((uint64_t)v8);
  std::ios::~ios(&v10);
  return a1;
}

void sub_10006EF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10000FE34((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10006EFB8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10006F0A0((uint64_t)a1, a2);
  *a1 = off_100179868;
  a1[45] = &off_100179968;
  a1[46] = &off_100179990;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100179868;
  a1[45] = off_1001798F0;
  a1[46] = off_100179918;
  return a1;
}

void sub_10006F03C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10006F11C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006F060(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100179930);
  sub_10006F11C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10006F0A0(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100179A00;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10006F108(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006F11C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100179A00;
  sub_10006F3D4(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10006F1B8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100179930);
  sub_10006F11C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10006F20C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10006F240(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_10006F28C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100179930);
  sub_10006F11C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10006F2C4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100179930);
  sub_10006F11C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_10006F314(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100179930);
  sub_10006F11C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006F354(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100179930);
  sub_10006F11C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10006F3B0(uint64_t a1)
{
  sub_10006F11C(a1);
  operator delete();
}

uint64_t sub_10006F3D4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10006F524((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10006F4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10006F524(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 128;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 128;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10006F708(uint64_t a1)
{
  uint64_t v2;
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;

  v2 = seteuid(0);
  *(_QWORD *)&v4 = "set_euid_wrapper::~set_euid_wrapper()";
  *((_QWORD *)&v4 + 1) = 35;
  v5 = 0;
  sub_100013744(v6, &v4);
  sub_100005A0C(&v7, (uint64_t)"uid restored to 0 (res=", 23);
  std::ostream::operator<<(&v7, v2);
  sub_100005A0C(&v7, (uint64_t)")", 1);
  std::ostream::~ostream(&v7, off_10016E7B0);
  sub_100017670((uint64_t)v6);
  std::ios::~ios(&v8);
  return a1;
}

uint64_t sub_10006F7C8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100179B50);
  sub_10006F9BC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006F800(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100179B50);
  sub_10006F9BC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006F840(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100179B50);
  sub_10006F9BC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10006F894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10006F8C8(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10006F914(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100179B50);
  sub_10006F9BC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10006F964(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100179B50);
  sub_10006F9BC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10006F9BC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100179C20;
  sub_10006FA58(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006FA58(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10006FBD0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10006FB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10006FBAC(uint64_t a1)
{
  sub_10006F9BC(a1);
  operator delete();
}

int *sub_10006FBD0(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 161;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 161;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10006FDB4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100179D70);
  sub_10006FFA8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006FDEC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100179D70);
  sub_10006FFA8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006FE2C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100179D70);
  sub_10006FFA8(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10006FE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10006FEB4(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10006FF00(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100179D70);
  sub_10006FFA8(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10006FF50(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100179D70);
  sub_10006FFA8(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10006FFA8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100179E40;
  sub_100070044(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100070044(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000701BC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10007016C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100070198(uint64_t a1)
{
  sub_10006FFA8(a1);
  operator delete();
}

int *sub_1000701BC(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 207;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 207;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_1000703A0(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1000588F0(a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1000703F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100070410(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100179F90);
  sub_100070604(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100070448(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100179F90);
  sub_100070604(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100070488(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100179F90);
  sub_100070604(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000704DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100070510(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007055C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100179F90);
  sub_100070604(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000705AC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100179F90);
  sub_100070604(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100070604(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017A060;
  sub_1000706A0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000706A0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100070818((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000707C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000707F4(uint64_t a1)
{
  sub_100070604(a1);
  operator delete();
}

int *sub_100070818(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 263;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 263;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000709FC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017A1B0);
  sub_100070BF0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100070A34(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017A1B0);
  sub_100070BF0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100070A74(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017A1B0);
  sub_100070BF0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100070AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100070AFC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100070B48(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017A1B0);
  sub_100070BF0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100070B98(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017A1B0);
  sub_100070BF0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100070BF0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017A280;
  sub_100070C8C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100070C8C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100070E04((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100070DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100070DE0(uint64_t a1)
{
  sub_100070BF0(a1);
  operator delete();
}

int *sub_100070E04(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 270;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 270;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_BYTE *sub_100070FE8(uint64_t a1, _BYTE *a2)
{
  unint64_t i;
  _BYTE *v3;
  char v4;
  unsigned int v5;
  char v6;

  for (i = 0; i != 16; ++i)
  {
    v3 = a2;
    if (*(unsigned __int8 *)(a1 + i) >= 0xA0u)
      v4 = 87;
    else
      v4 = 48;
    *a2 = v4 + (*(_BYTE *)(a1 + i) >> 4);
    a2 += 2;
    v5 = *(_BYTE *)(a1 + i) & 0xF;
    if (v5 >= 0xA)
      v6 = 87;
    else
      v6 = 48;
    v3[1] = v6 + v5;
    if (i <= 9 && ((1 << i) & 0x2A8) != 0)
    {
      a2 = v3 + 3;
      v3[2] = 45;
    }
  }
  return a2;
}

uint64_t sub_100071060(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017A3D0);
  sub_100071254(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100071098(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017A3D0);
  sub_100071254(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000710D8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017A3D0);
  sub_100071254(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10007112C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100071160(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000711AC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017A3D0);
  sub_100071254(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000711FC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017A3D0);
  sub_100071254(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100071254(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017A4A0;
  sub_1000712F0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000712F0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100071468((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100071418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100071444(uint64_t a1)
{
  sub_100071254(a1);
  operator delete();
}

int *sub_100071468(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 304;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 304;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10007164C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017A5F0);
  sub_100071840(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100071684(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017A5F0);
  sub_100071840(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000716C4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017A5F0);
  sub_100071840(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100071718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10007174C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100071798(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017A5F0);
  sub_100071840(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000717E8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017A5F0);
  sub_100071840(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100071840(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017A6C0;
  sub_1000718DC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000718DC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100071A54((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100071A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100071A30(uint64_t a1)
{
  sub_100071840(a1);
  operator delete();
}

int *sub_100071A54(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 322;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 322;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100071C38(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017A810);
  sub_100071E2C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100071C70(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017A810);
  sub_100071E2C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100071CB0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017A810);
  sub_100071E2C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100071D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100071D38(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100071D84(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017A810);
  sub_100071E2C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100071DD4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017A810);
  sub_100071E2C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100071E2C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017A8E0;
  sub_100071EC8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100071EC8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100072040((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100071FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007201C(uint64_t a1)
{
  sub_100071E2C(a1);
  operator delete();
}

int *sub_100072040(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 340;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 340;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100072224(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017AA30);
  sub_100072418(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007225C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017AA30);
  sub_100072418(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007229C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017AA30);
  sub_100072418(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000722F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100072324(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100072370(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017AA30);
  sub_100072418(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000723C0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017AA30);
  sub_100072418(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100072418(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017AB00;
  sub_1000724B4(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000724B4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10007262C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000725DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100072608(uint64_t a1)
{
  sub_100072418(a1);
  operator delete();
}

int *sub_10007262C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 361;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 361;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100072810(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017AC50);
  sub_100072A04(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100072848(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017AC50);
  sub_100072A04(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100072888(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017AC50);
  sub_100072A04(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000728DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100072910(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007295C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017AC50);
  sub_100072A04(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_1000729AC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017AC50);
  sub_100072A04(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100072A04(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017AD20;
  sub_100072AA0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100072AA0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100072C18((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100072BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100072BF4(uint64_t a1)
{
  sub_100072A04(a1);
  operator delete();
}

int *sub_100072C18(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 367;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 367;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100072DFC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017AE70);
  sub_100072FF0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100072E34(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017AE70);
  sub_100072FF0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100072E74(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017AE70);
  sub_100072FF0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100072EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100072EFC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100072F48(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017AE70);
  sub_100072FF0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100072F98(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017AE70);
  sub_100072FF0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100072FF0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017AF40;
  sub_10007308C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007308C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100073204((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000731B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000731E0(uint64_t a1)
{
  sub_100072FF0(a1);
  operator delete();
}

int *sub_100073204(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 370;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 370;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000733E8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017B090);
  sub_1000735DC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100073420(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017B090);
  sub_1000735DC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100073460(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017B090);
  sub_1000735DC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000734B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000734E8(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100073534(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017B090);
  sub_1000735DC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100073584(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017B090);
  sub_1000735DC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000735DC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017B160;
  sub_100073678(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100073678(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000737F0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000737A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000737CC(uint64_t a1)
{
  sub_1000735DC(a1);
  operator delete();
}

int *sub_1000737F0(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 379;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 379;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

DIR **sub_1000739D4(DIR **a1, int a2)
{
  DIR *v3;
  void *exception;
  void *v6;

  v3 = fdopendir(a2);
  *a1 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v6 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Failed opening folder for entries reading", 0x13u);
  }
  return a1;
}

_QWORD *sub_100073A30(_QWORD *a1, uint64_t a2, char a3)
{
  unint64_t v5;
  void *v6;

  a1[2] = a2;
  *a1 = off_10017B1E0;
  v5 = ((unint64_t)(a2 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8;
  sub_100073B10(a1 + 3, v5);
  v6 = (void *)a1[3];
  a1[8] = v6;
  a1[9] = v5;
  if ((a3 & 1) == 0 && v5)
    bzero(v6, 8 * v5);
  a1[1] = v6;
  return a1;
}

_QWORD *sub_100073AA0(_QWORD *a1)
{
  *a1 = off_10017B1E0;
  sub_100073DB8(a1 + 3);
  return a1;
}

void sub_100073AD0(_QWORD *a1)
{
  *a1 = off_10017B1E0;
  sub_100073DB8(a1 + 3);
  operator delete();
}

uint64_t *sub_100073B10(uint64_t *a1, uint64_t a2)
{
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  std::bad_alloc *exception;
  std::bad_alloc *v8;
  _QWORD v9[3];
  _QWORD *v10;
  void *v11;
  uint64_t v12;

  *a1 = 0;
  a1[4] = 0;
  v3 = malloc_type_valloc(8 * a2, 0x100004000313F17uLL);
  if (!v3)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v8 = std::bad_alloc::bad_alloc(exception);
  }
  v9[0] = off_10017B228;
  v10 = v9;
  v11 = v3;
  sub_100073D08((uint64_t)&v12, (uint64_t)v9);
  sub_100073C24(a1, (uint64_t *)&v11);
  sub_100073DB8((uint64_t *)&v11);
  v4 = v10;
  if (v10 == v9)
  {
    v5 = 4;
    v4 = v9;
    goto LABEL_6;
  }
  if (v10)
  {
    v5 = 5;
LABEL_6:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void sub_100073C10(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_100073DB8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100073C24(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  sub_100073D6C(a1, v4);
  sub_100018244(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void sub_100073C68()
{
  operator delete();
}

_QWORD *sub_100073C7C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_10017B228;
  return result;
}

void sub_100073CA0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10017B228;
}

void sub_100073CB8(uint64_t a1, void **a2)
{
  free(*a2);
}

uint64_t sub_100073CC0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100073CFC()
{
}

uint64_t sub_100073D08(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t *sub_100073D6C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      sub_100017C6C();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

uint64_t *sub_100073DB8(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  sub_100073D6C(a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t sub_100073E10(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017B388);
  sub_100074004(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100073E48(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017B388);
  sub_100074004(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100073E88(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017B388);
  sub_100074004(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100073EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100073F10(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100073F5C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017B388);
  sub_100074004(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100073FAC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017B388);
  sub_100074004(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100074004(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017B458;
  sub_1000740A0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000740A0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100074218((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000741C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000741F4(uint64_t a1)
{
  sub_100074004(a1);
  operator delete();
}

int *sub_100074218(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 437;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 437;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000743FC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017B5A8);
  sub_1000745F0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100074434(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017B5A8);
  sub_1000745F0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100074474(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017B5A8);
  sub_1000745F0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000744C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000744FC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100074548(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017B5A8);
  sub_1000745F0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100074598(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017B5A8);
  sub_1000745F0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000745F0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017B678;
  sub_10007468C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007468C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100074804((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000747B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000747E0(uint64_t a1)
{
  sub_1000745F0(a1);
  operator delete();
}

int *sub_100074804(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 446;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 446;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000749E8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_1001797E0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100074A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100074A64(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100179C20;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100074ACC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100074AE0(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100179E40;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100074B48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

const void **sub_100074B5C(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t sub_100074B8C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  signed __int8 *v5;
  int v6;
  signed __int8 v7;
  uint64_t v8;
  int v9;
  signed __int8 v10;
  BOOL v11;
  signed __int8 v12;
  char v13;
  int v14;
  int v15;
  uint64_t v17;

  if (a2 == a3)
    goto LABEL_32;
  v5 = (signed __int8 *)(a2 + 1);
  v6 = *a2;
  if (v6 == 123)
  {
    if (v5 == (signed __int8 *)a3)
      goto LABEL_32;
    v5 = (signed __int8 *)(a2 + 2);
    v7 = a2[1];
  }
  else
  {
    v7 = *a2;
  }
  v8 = 0;
  v9 = 0;
  while (1)
  {
    do
    {
      if ((_DWORD)v8 == 4)
      {
        if (v7 == 45)
        {
          if (v5 == (signed __int8 *)a3)
            goto LABEL_32;
          v9 = 1;
LABEL_22:
          v12 = *v5++;
          v7 = v12;
          goto LABEL_24;
        }
        v9 = 0;
      }
      else
      {
        v11 = (v8 & 0x7FFFFFFD) == 8 || (_DWORD)v8 == 6;
        if (v11 && ((v9 ^ 1) & 1) == 0)
        {
          if (v7 != 45 || v5 == (signed __int8 *)a3)
            goto LABEL_32;
          goto LABEL_22;
        }
      }
LABEL_24:
      v13 = sub_100074D8C(a1, v7);
      *((_BYTE *)&v17 + v8) = v13;
      if (v5 == (signed __int8 *)a3)
        goto LABEL_32;
      v14 = *v5++;
      v7 = v14;
      *((_BYTE *)&v17 + v8++) = sub_100074D8C(a1, v14) | (16 * v13);
    }
    while (!v8);
    if (v8 == 16)
      break;
    if (v5 == (signed __int8 *)a3)
      goto LABEL_32;
    v10 = *v5++;
    v7 = v10;
  }
  if (v6 == 123 && (v5 == (signed __int8 *)a3 || (v15 = *v5, ++v5, v15 != 125))
    || v5 != (signed __int8 *)a3)
  {
LABEL_32:
    sub_100074D28();
  }
  return v17;
}

void sub_100074D28()
{
  std::runtime_error v0;

  std::runtime_error::runtime_error(&v0, "invalid uuid string");
  sub_100074E54(&v0);
}

void sub_100074D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
  std::runtime_error::~runtime_error(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100074D8C(uint64_t a1, int a2)
{
  unsigned __int8 v2;
  __objc2_class_ro **p_info;
  __objc2_class_ro *v4;
  __objc2_class_ro *v5;
  __objc2_class_ro *v6;
  unint64_t v7;
  int v9;
  int v10;

  v2 = atomic_load((unsigned __int8 *)&qword_1001A0620);
  p_info = &OBJC_METACLASS___DIClient2IODaemonXPCHandler.info;
  if ((v2 & 1) == 0)
  {
    v10 = a2;
    v9 = __cxa_guard_acquire(&qword_1001A0620);
    p_info = &OBJC_METACLASS___DIClient2IODaemonXPCHandler.info;
    a2 = v10;
    if (v9)
    {
      qword_1001A0618 = (uint64_t)&a0123456789abcd[(_QWORD)off_1001A0610];
      __cxa_guard_release(&qword_1001A0620);
      p_info = (__objc2_class_ro **)(&OBJC_METACLASS___DIClient2IODaemonXPCHandler + 32);
      a2 = v10;
    }
  }
  v4 = p_info[195];
  v5 = (__objc2_class_ro *)memchr("0123456789abcdefABCDEF", a2, (char *)v4 - "0123456789abcdefABCDEF");
  if (v5)
    v6 = v5;
  else
    v6 = v4;
  v7 = (char *)v6 - "0123456789abcdefABCDEF";
  if (v7 >= (unint64_t)off_1001A0610)
    sub_100074D28();
  return byte_100142BE7[v7];
}

void sub_100074E54(const std::runtime_error *a1)
{
  std::runtime_error *exception;
  std::runtime_error *v3;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  v3 = std::runtime_error::runtime_error(exception, a1);
}

uint64_t sub_100074E88(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017A060;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100074EF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100074F04(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017A280;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100074F6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

const void **sub_100074F80(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t sub_100074FB0(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017A4A0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100075018(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10007502C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017A6C0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100075094(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000750A8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017A8E0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100075110(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_100075124(int *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0x470uLL);
  sub_10007519C(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1000196D4((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_100075188(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10007519C(_QWORD *a1, int *a2, uint64_t a3, int *a4)
{
  int v5;
  uint64_t v6;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100175730;
  v5 = *a4;
  v6 = sub_100101D04(*a2, a3, *a4);
  sub_100046E20((uint64_t)(a1 + 3), v6, (v5 & 3) != 0, 0);
  return a1;
}

void sub_1000751F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10007520C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017AB00;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100075274(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100075288(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017AD20;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000752F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100075304(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017AF40;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10007536C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100075380(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017B160;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000753E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000753FC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017B458;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100075464(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_10007547C()
{
  operator delete();
}

__n128 sub_100075490(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_10017B6F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1000754D0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10017B6F8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1000754F8(_QWORD **a1, uint64_t a2, unint64_t *a3)
{
  _BOOL8 result;
  void *exception;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[33];

  if (*a1[1] <= *a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)v10);
    sub_100005A0C(v10, (uint64_t)"Bands folder contains an out of range band (", 44);
    v7 = *(char *)(a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *(_QWORD *)a2;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    sub_100005A0C(v10, v8, v9);
    sub_100005A0C(v10, (uint64_t)")", 1);
    sub_100012294((uint64_t)exception, (uint64_t)v10, 0x16u);
  }
  result = sub_100094A34(*a1[2], *a3, 1);
  ++*a1[3];
  return result;
}

void sub_1000755E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void (__cdecl **a11)(std::stringbuf *__hidden this), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  sub_1001236F8((uint64_t)&a11, (uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1000756A8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000756E4()
{
}

uint64_t sub_1000756F0(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017B678;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100075758(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10007576C(uint64_t a1)
{
  bzero(*(void **)a1, *(_QWORD *)(a1 + 16));
  return *(_QWORD *)(a1 + 16);
}

_QWORD *sub_100075798@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  v3 = result[3];
  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if (v3 > (v4 & 1) + v5 - 1
    || ((v6 = result[2], v7 = v6 + v3, v8 = *(_QWORD *)a2, (v4 & 2) != 0) ? (v9 = *(_QWORD *)a2) : (v9 = v8 + 1),
        v7 <= v9))
  {
    *(_OWORD *)(a3 + 25) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  v10 = v9 - v3;
  if (v9 >= v3)
  {
    if (*(_BYTE *)(a2 + 16))
    {
      if (v4 == 3)
      {
        if (v5 < v8)
          goto LABEL_31;
      }
      else if (v8 >= v5)
      {
LABEL_31:
        v18 = qword_1001A05E0;
        goto LABEL_32;
      }
    }
    else if (v8 >= v5 || v8 + 1 >= v5)
    {
      goto LABEL_31;
    }
    v18 = v5 + (v4 & 1) + (int)(((v4 >> 1) & 1) - 1) - v8;
LABEL_32:
    if (v6 - v10 < v18)
      v18 = v6 - v10;
    v19 = result[4];
    v20 = result[1];
    *(_QWORD *)a3 = *result + v10;
    *(_QWORD *)(a3 + 8) = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    *(_QWORD *)(a3 + 16) = v18;
    *(_QWORD *)(a3 + 24) = v9;
    *(_QWORD *)(a3 + 32) = v19 - v10;
    goto LABEL_38;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    if (v4 == 3)
    {
      if (v5 < v8)
        goto LABEL_20;
    }
    else if (v8 >= v5)
    {
LABEL_20:
      v11 = qword_1001A05E0;
      goto LABEL_21;
    }
  }
  else if (v8 >= v5 || v8 + 1 >= v5)
  {
    goto LABEL_20;
  }
  v11 = v5 + (v4 & 1) + (int)(((v4 >> 1) & 1) - 1) - v8;
LABEL_21:
  v12 = v11 + v9;
  if (v12 >= v7)
    v12 = v6 + v3;
  v13 = v12 - v3;
  v14 = result[4];
  v15 = result[1];
  *(_QWORD *)a3 = *result;
  *(_QWORD *)(a3 + 8) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a3 + 16) = v13;
  *(_QWORD *)(a3 + 24) = v3;
  *(_QWORD *)(a3 + 32) = v14;
LABEL_38:
  *(_BYTE *)(a3 + 40) = 0;
  return result;
}

uint64_t sub_10007591C(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_10017B778;
  v5 = a2[1];
  *(_QWORD *)(a1 + 16) = *a2;
  *(_QWORD *)(a1 + 24) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_WORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 96) = 850045863;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  v8 = a4[4];
  *(_QWORD *)(a1 + 160) = a4[3];
  *(_QWORD *)(a1 + 168) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = a4[40];
  if (v11)
    sub_100094A34(v11, a3, 1);
  return a1;
}

void sub_1000759E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100078BE0(v2);
  sub_100012168(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100075A00(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD v24[45];
  uint64_t v25;
  _BYTE v26[152];

  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v19 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
    *((_QWORD *)&v19 + 1) = 38;
    LODWORD(v20) = 2;
    sub_100075D08(v24, &v19);
    sub_100005A0C(&v25, (uint64_t)"Reading ", 8);
    sub_10011E628(&v25, a3);
    sub_100005A0C(&v25, (uint64_t)" to ", 4);
    sub_100077654(&v25, a1);
    std::ostream::~ostream(&v25, off_10017B970);
    sub_100078F80((uint64_t)v24);
    std::ios::~ios(v26);
  }
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 40))(*(_QWORD *)(a2 + 16));
  v7 = a3[3];
  if (v6 >= a3[2] + v7)
  {
    v12 = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 16) + 88))(*(_QWORD *)(a2 + 16), a3);
  }
  else if (v6 <= v7)
  {
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v19 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
      *((_QWORD *)&v19 + 1) = 38;
      LODWORD(v20) = 2;
      sub_100075ED8(v24, &v19);
      sub_100005A0C(&v25, (uint64_t)"Band data doesn't exist, zeroing", 32);
      std::ostream::~ostream(&v25, off_10017BDB0);
      sub_100079B58((uint64_t)v24);
      std::ios::~ios(v26);
    }
    bzero((void *)*a3, a3[2]);
    v12 = *((_DWORD *)a3 + 4);
  }
  else
  {
    v8 = a3[4];
    v9 = a3[1];
    *(_QWORD *)&v19 = *a3;
    *((_QWORD *)&v19 + 1) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v20 = v6 - v7;
    v21 = v7;
    v22 = v8;
    v23 = 0;
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v17 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
      *((_QWORD *)&v17 + 1) = 38;
      v18 = 2;
      sub_100075DF0(v24, &v17);
      sub_100005A0C(&v25, (uint64_t)"Band data is partial, reading ", 30);
      sub_10011E628(&v25, &v19);
      std::ostream::~ostream(&v25, off_10017BB90);
      sub_10007956C((uint64_t)v24);
      std::ios::~ios(v26);
    }
    v12 = (*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(a2 + 16) + 88))(*(_QWORD *)(a2 + 16), &v19);
    bzero((void *)(*a3 + v20), a3[2] - v20);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (v20 == v12)
      v12 = *((_DWORD *)a3 + 4);
    if (*((_QWORD *)&v19 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  if (v12 >= 0)
    return a3[2];
  else
    return v12;
}

void sub_100075CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_100075F80((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100075D08(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100080A58((uint64_t)a1, a2);
  *a1 = off_10017B8A8;
  a1[45] = &off_10017B9A8;
  a1[46] = &off_10017B9D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017B8A8;
  a1[45] = off_10017B930;
  a1[46] = off_10017B958;
  return a1;
}

void sub_100075D8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100078F80(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100075DB0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017B970);
  sub_100078F80(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100075DF0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100080AD4((uint64_t)a1, a2);
  *a1 = off_10017BAC8;
  a1[45] = &off_10017BBC8;
  a1[46] = &off_10017BBF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017BAC8;
  a1[45] = off_10017BB50;
  a1[46] = off_10017BB78;
  return a1;
}

void sub_100075E74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10007956C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100075E98(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017BB90);
  sub_10007956C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100075ED8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100080B50((uint64_t)a1, a2);
  *a1 = off_10017BCE8;
  a1[45] = &off_10017BDE8;
  a1[46] = &off_10017BE10;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017BCE8;
  a1[45] = off_10017BD70;
  a1[46] = off_10017BD98;
  return a1;
}

void sub_100075F5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100079B58(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100075F80(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017BDB0);
  sub_100079B58(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100075FC0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t result;
  __int128 v8;
  int v9;
  _QWORD v10[45];
  uint64_t v11;
  uint64_t v12;

  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v8 = "io_result_t sparse_bundles::Band::write(DiskImage::Context &, const sg_entry &)";
    *((_QWORD *)&v8 + 1) = 39;
    v9 = 2;
    sub_1000760E4(v10, &v8);
    sub_100005A0C(&v11, (uint64_t)"Writing ", 8);
    sub_10011E628(&v11, a3);
    sub_100005A0C(&v11, (uint64_t)" to ", 4);
    sub_100077654(&v11, a1);
    std::ostream::~ostream(&v11, off_10017BFD0);
    sub_10007A144((uint64_t)v10);
    std::ios::~ios(&v12);
  }
  v6 = sub_1000761CC(a1);
  sub_10011C190(v6, (uint64_t)a3);
  LODWORD(result) = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 16) + 80))(*(_QWORD *)(a2 + 16), a3);
  *(_BYTE *)(a1 + 68) = 1;
  if ((int)result >= 0)
    return a3[2];
  else
    return (int)result;
}

void sub_1000760D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10007618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000760E4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100080BCC((uint64_t)a1, a2);
  *a1 = off_10017BF08;
  a1[45] = &off_10017C008;
  a1[46] = &off_10017C030;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017BF08;
  a1[45] = off_10017BF90;
  a1[46] = off_10017BFB8;
  return a1;
}

void sub_100076168(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10007A144(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10007618C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017BFD0);
  sub_10007A144(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

unint64_t sub_1000761CC(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  void *exception;
  _QWORD v5[33];
  uint64_t v6;
  _QWORD *v7;

  result = atomic_load((unint64_t *)(a1 + 48));
  if (!result)
  {
    v6 = a1;
    v3 = atomic_load((unint64_t *)(a1 + 56));
    if (v3 != -1)
    {
      v5[0] = &v6;
      v7 = v5;
      std::__call_once((std::once_flag::_State_type *)(a1 + 56), &v7, (void (__cdecl *)(void *))sub_1000813EC);
    }
    result = atomic_load((unint64_t *)(a1 + 48));
    if (!result)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_100005920((uint64_t)v5);
      sub_100005A0C(v5, (uint64_t)"Failed opening mapped blocks file for ", 38);
      sub_100077654(v5, a1);
      sub_100012294((uint64_t)exception, (uint64_t)v5, *(_DWORD *)(a1 + 64));
    }
  }
  return result;
}

void sub_1000762A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10000FE34((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1000762D8(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v3 = sub_1000761CC(a1);
  v6 = (_QWORD *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      if ((v5[6] & 2) != 0)
        v7 = v5[4];
      else
        v7 = v5[4] + 1;
      sub_10011C5FC(v3, v7, (v5[6] & 1) + v5[5] - 1);
      v8 = (_QWORD *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != v4);
  }
  return sub_100094804(*(_QWORD *)(v3 + 8));
}

void sub_100076370(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[2];
  char v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  int v18;

  v18 = a3;
  v17 = 0uLL;
  v15 = (***(uint64_t (****)(_QWORD))(a2 + 8))(*(_QWORD *)(a2 + 8));
  sub_10003F7D4(a1, __p);
  sub_100080C48(&v15, (uint64_t)__p, &v18, &v16);
  if (v14 < 0)
    operator delete(__p[0]);
  if (*a4)
  {
    v15 = 3;
    sub_100080D30(&v16, (uint64_t)a4, &v15, __p);
    v6 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    v17 = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v11 = (unint64_t *)((char *)__p[1] + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    sub_100027CB4(&v17, &v16);
  }
  operator new();
}

void sub_100076548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  sub_100012168((uint64_t)&a16);
  sub_100012168((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1000765AC(uint64_t a1, unint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  __int128 __p;
  int v14;
  char v15;
  _QWORD v16[45];
  uint64_t v17;
  _BYTE v18[152];

  if ((*(_BYTE *)(*(_QWORD *)a1 + 8) & 1) != 0)
  {
    *(_QWORD *)&__p = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((_QWORD *)&__p + 1) = 32;
    v14 = 0;
    sub_100076A70(v16, &__p);
    sub_100005A0C(&v17, (uint64_t)"Skipping erase of band ", 23);
    std::ostream::operator<<(&v17, a2);
    sub_100005A0C(&v17, (uint64_t)", disk image is terminated", 26);
    std::ostream::~ostream(&v17, off_10017C1F0);
    sub_10007A730((uint64_t)v16);
    std::ios::~ios(v18);
    return;
  }
  sub_10003F7D4(a2, &__p);
  v4 = (***(uint64_t (****)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 16));
  v5 = sub_100102AA0(v4, (uint64_t *)&__p);
  v6 = v5;
  if ((_DWORD)v5)
  {
    if ((int)v5 >= 0)
      v7 = v5;
    else
      v7 = -(int)v5;
    if (v7 != 2)
    {
      *(_QWORD *)&v11 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
      *((_QWORD *)&v11 + 1) = 32;
      v12 = 16;
      sub_100076B58(v16, &v11);
      sub_100005A0C(&v17, (uint64_t)"Failed to erase mapped file of band ", 36);
      *(_DWORD *)&v18[*(_QWORD *)(v17 - 24)] = *(_DWORD *)&v18[*(_QWORD *)(v17 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<(&v17, a2);
      *(_DWORD *)&v18[*(_QWORD *)(v17 - 24)] = *(_DWORD *)&v18[*(_QWORD *)(v17 - 24)] & 0xFFFFFFB5 | 2;
      sub_100005A0C(&v17, (uint64_t)", error ", 8);
      std::ostream::operator<<(&v17, v6);
      std::ostream::~ostream(&v17, off_10017C410);
      sub_10007AD1C((uint64_t)v16);
      goto LABEL_11;
    }
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v11 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
      *((_QWORD *)&v11 + 1) = 32;
      v12 = 2;
      sub_10003D048(v16, &v11);
      sub_100005A0C(&v17, (uint64_t)"No mapped file for band ", 24);
      *(_DWORD *)&v18[*(_QWORD *)(v17 - 24)] = *(_DWORD *)&v18[*(_QWORD *)(v17 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<(&v17, a2);
      *(_DWORD *)&v18[*(_QWORD *)(v17 - 24)] = *(_DWORD *)&v18[*(_QWORD *)(v17 - 24)] & 0xFFFFFFB5 | 2;
      std::ostream::~ostream(&v17, off_100173488);
      sub_10003D1AC((uint64_t)v16);
LABEL_11:
      std::ios::~ios(v18);
    }
  }
  v8 = (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v9 = sub_100102AA0(v8, (uint64_t *)&__p);
  if ((_DWORD)v9)
  {
    *(_QWORD *)&v11 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((_QWORD *)&v11 + 1) = 32;
    v12 = 16;
    sub_100076C40(v16, &v11);
    sub_100005A0C(&v17, (uint64_t)"Failed to erase band ", 21);
    *(_DWORD *)&v18[*(_QWORD *)(v17 - 24)] = *(_DWORD *)&v18[*(_QWORD *)(v17 - 24)] & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v17, a2);
    *(_DWORD *)&v18[*(_QWORD *)(v17 - 24)] = *(_DWORD *)&v18[*(_QWORD *)(v17 - 24)] & 0xFFFFFFB5 | 2;
    sub_100005A0C(&v17, (uint64_t)", error ", 8);
    std::ostream::operator<<(&v17, v9);
    std::ostream::~ostream(&v17, off_10017C630);
    sub_10007B308((uint64_t)v16);
    std::ios::~ios(v18);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 320);
    if (v10)
      sub_100094A34(v10, a2, 0);
  }
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v11 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((_QWORD *)&v11 + 1) = 32;
    v12 = 2;
    sub_100076D28(v16, &v11);
    sub_100005A0C(&v17, (uint64_t)"Completed erase of band ", 24);
    *(_DWORD *)&v18[*(_QWORD *)(v17 - 24)] = *(_DWORD *)&v18[*(_QWORD *)(v17 - 24)] & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v17, a2);
    *(_DWORD *)&v18[*(_QWORD *)(v17 - 24)] = *(_DWORD *)&v18[*(_QWORD *)(v17 - 24)] & 0xFFFFFFB5 | 2;
    std::ostream::~ostream(&v17, off_10017C850);
    sub_10007B8F4((uint64_t)v16);
    std::ios::~ios(v18);
  }
  if (v15 < 0)
    operator delete((void *)__p);
}

void sub_1000769F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100076A70(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100080F18((uint64_t)a1, a2);
  *a1 = off_10017C128;
  a1[45] = &off_10017C228;
  a1[46] = &off_10017C250;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017C128;
  a1[45] = off_10017C1B0;
  a1[46] = off_10017C1D8;
  return a1;
}

void sub_100076AF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10007A730(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100076B18(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017C1F0);
  sub_10007A730(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100076B58(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100080F94((uint64_t)a1, a2);
  *a1 = off_10017C348;
  a1[45] = &off_10017C448;
  a1[46] = &off_10017C470;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017C348;
  a1[45] = off_10017C3D0;
  a1[46] = off_10017C3F8;
  return a1;
}

void sub_100076BDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10007AD1C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100076C00(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017C410);
  sub_10007AD1C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100076C40(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100081010((uint64_t)a1, a2);
  *a1 = off_10017C568;
  a1[45] = &off_10017C668;
  a1[46] = &off_10017C690;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017C568;
  a1[45] = off_10017C5F0;
  a1[46] = off_10017C618;
  return a1;
}

void sub_100076CC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10007B308(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100076CE8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017C630);
  sub_10007B308(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100076D28(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10008108C((uint64_t)a1, a2);
  *a1 = off_10017C788;
  a1[45] = &off_10017C888;
  a1[46] = &off_10017C8B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017C788;
  a1[45] = off_10017C810;
  a1[46] = off_10017C838;
  return a1;
}

void sub_100076DAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10007B8F4(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100076DD0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017C850);
  sub_10007B8F4(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100076E10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  int v8;
  _QWORD v9[45];
  uint64_t v10;
  _BYTE v11[152];

  *(_QWORD *)a1 = off_10017B778;
  v2 = a1 + 72;
  sub_100078C2C((_QWORD *)(a1 + 72));
  v3 = atomic_load((unint64_t *)(a1 + 48));
  if (*(_BYTE *)(a1 + 69))
  {
    if (!v3)
      goto LABEL_18;
LABEL_13:
    v4 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    operator delete();
  }
  if (v3)
  {
    if ((*(_BYTE *)(**(_QWORD **)(a1 + 40) + 8) & 1) != 0)
    {
      *(_QWORD *)&v7 = "sparse_bundles::Band::~Band()";
      *((_QWORD *)&v7 + 1) = 27;
      v8 = 0;
      sub_1000770BC(v9, &v7);
      sub_100005A0C(&v10, (uint64_t)"Disk image is terminated, skipping flush of ", 44);
      sub_100077654(&v10, a1);
      sub_100005A0C(&v10, (uint64_t)", dirty=", 8);
      std::ostream::operator<<(&v10, *(_BYTE *)(a1 + 68) & 1);
      std::ostream::~ostream(&v10, off_10017CA70);
      sub_10007BEE0((uint64_t)v9);
      std::ios::~ios(v11);
    }
    else
    {
      if (sub_1000BF0D4())
      {
        *(_QWORD *)&v7 = "sparse_bundles::Band::~Band()";
        *((_QWORD *)&v7 + 1) = 27;
        v8 = 2;
        sub_1000771A4(v9, &v7);
        sub_100005A0C(&v10, (uint64_t)"flushing and closing ", 21);
        sub_100077654(&v10, a1);
        std::ostream::~ostream(&v10, off_10017CC90);
        sub_10007C4CC((uint64_t)v9);
        std::ios::~ios(v11);
      }
      sub_10011C19C(v3);
      if ((*(_BYTE *)(a1 + 68) & 1) != 0)
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), 1);
    }
    goto LABEL_13;
  }
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v7 = "sparse_bundles::Band::~Band()";
    *((_QWORD *)&v7 + 1) = 27;
    v8 = 2;
    sub_10007728C(v9, &v7);
    sub_100005A0C(&v10, (uint64_t)"Closing an unchanged ", 21);
    sub_100077654(&v10, a1);
    std::ostream::~ostream(&v10, off_10017CEB0);
    sub_10007CAB8((uint64_t)v9);
    std::ios::~ios(v11);
  }
LABEL_18:
  sub_1000534A4((_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 69))
    sub_1000765AC(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  sub_10003F07C(*(_QWORD *)(a1 + 40) + 184, *(_QWORD *)(a1 + 32));
  sub_100078BE0(v2);
  sub_100012168(a1 + 16);
  return a1;
}

_QWORD *sub_1000770BC(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100081108((uint64_t)a1, a2);
  *a1 = off_10017C9A8;
  a1[45] = &off_10017CAA8;
  a1[46] = &off_10017CAD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017C9A8;
  a1[45] = off_10017CA30;
  a1[46] = off_10017CA58;
  return a1;
}

void sub_100077140(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10007BEE0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100077164(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017CA70);
  sub_10007BEE0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000771A4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100081184((uint64_t)a1, a2);
  *a1 = off_10017CBC8;
  a1[45] = &off_10017CCC8;
  a1[46] = &off_10017CCF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017CBC8;
  a1[45] = off_10017CC50;
  a1[46] = off_10017CC78;
  return a1;
}

void sub_100077228(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10007C4CC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10007724C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017CC90);
  sub_10007C4CC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_10007728C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100081200((uint64_t)a1, a2);
  *a1 = off_10017CDE8;
  a1[45] = &off_10017CEE8;
  a1[46] = &off_10017CF10;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017CDE8;
  a1[45] = off_10017CE70;
  a1[46] = off_10017CE98;
  return a1;
}

void sub_100077310(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10007CAB8(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100077334(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017CEB0);
  sub_10007CAB8(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_100077378(uint64_t a1)
{
  sub_100076E10(a1);
  operator delete();
}

void sub_10007739C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  sub_10008127C(a2, v3);
}

void sub_1000773E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100012168(v1);
  _Unwind_Resume(a1);
}

void sub_1000773F4(uint64_t a1, __int128 *a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  sub_10006AE84((char **)a1, a2);
  std::mutex::unlock(v4);
}

void sub_100077438(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10007744C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v5;
  int v6;
  _QWORD v7[45];
  uint64_t v8;
  uint64_t v9;

  if ((*(_BYTE *)(a1 + 68) & 1) == 0)
    return 0;
  *(_BYTE *)(a1 + 68) = 0;
  v3 = atomic_load((unint64_t *)(a1 + 48));
  v1 = sub_10011C19C(v3);
  if ((_DWORD)v1
    || (v1 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), 1),
        (_DWORD)v1))
  {
    *(_BYTE *)(a1 + 68) = 1;
    *(_QWORD *)&v5 = "sparse_bundles::Band::flush()";
    *((_QWORD *)&v5 + 1) = 27;
    v6 = 16;
    sub_10007756C(v7, &v5);
    sub_100077654(&v8, a1);
    sub_100005A0C(&v8, (uint64_t)": flush failed (", 16);
    std::ostream::operator<<(&v8, v1);
    sub_100005A0C(&v8, (uint64_t)")", 1);
    std::ostream::~ostream(&v8, off_10017D0D0);
    sub_10007D0A4((uint64_t)v7);
    std::ios::~ios(&v9);
  }
  return v1;
}

void sub_100077558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100077614((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10007756C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100081370((uint64_t)a1, a2);
  *a1 = off_10017D008;
  a1[45] = &off_10017D108;
  a1[46] = &off_10017D130;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017D008;
  a1[45] = off_10017D090;
  a1[46] = off_10017D0B8;
  return a1;
}

void sub_1000775F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10007D0A4(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100077614(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017D0D0);
  sub_10007D0A4(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100077654(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = sub_100005A0C(a1, (uint64_t)"band ", 5);
  *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 8) & 0xFFFFFFB5 | 8;
  result = (_QWORD *)std::ostream::operator<<(v3, *(_QWORD *)(a2 + 32));
  *(_DWORD *)((char *)result + *(_QWORD *)(*result - 24) + 8) = *(_DWORD *)((_BYTE *)result
                                                                            + *(_QWORD *)(*result - 24)
                                                                            + 8) & 0xFFFFFFB5 | 2;
  return result;
}

uint64_t sub_1000776C4(uint64_t result)
{
  unint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *(unint64_t **)result;
  if (*(_QWORD *)result)
  {
    v2 = (uint64_t *)result;
    do
    {
      v3 = __ldaxr(v1);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v1));
    if (!v4)
    {
      v5 = *(_QWORD *)(result + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      result = *v2;
      if (*v2)
        operator delete();
    }
  }
  return result;
}

uint64_t sub_100077734(uint64_t a1)
{
  sub_1000776C4(a1);
  return a1;
}

uint64_t sub_100077758(uint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *(unint64_t **)a2;
  *(_QWORD *)result = *(_QWORD *)a2;
  v3 = atomic_load(v2);
  if (!v3)
LABEL_7:
    operator new();
  while (1)
  {
    v4 = __ldaxr(*(unint64_t **)result);
    if (v4 != v3)
    {
      __clrex();
      goto LABEL_6;
    }
    if (!__stlxr(v3 + 1, *(unint64_t **)result))
      break;
LABEL_6:
    v3 = v4;
    if (!v4)
      goto LABEL_7;
  }
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = v5;
  return result;
}

uint64_t sub_100077810(uint64_t result, uint64_t a2)
{
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  if (result != a2)
    *(_QWORD *)a2 = 0;
  return result;
}

uint64_t sub_100077830(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000776C4(a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
  }
  return a1;
}

uint64_t sub_100077878@<X0>(std::chrono::steady_clock::time_point **a1@<X0>, std::chrono::steady_clock::time_point *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  std::chrono::steady_clock::time_point *v8;
  std::chrono::steady_clock::time_point *v9;
  dispatch_group_t *v10;
  uint64_t result;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v14[6];
  __int128 v15;
  int v16;
  _QWORD v17[45];
  uint64_t v18;
  _BYTE v19[152];

  v6 = atomic_load((unint64_t *)*a1);
  sub_10003EA60((unint64_t *)((*a1)[1].__d_.__rep_ + 56));
  if (v6 != 1)
  {
LABEL_7:
    sub_10003EA74((*a1)[1].__d_.__rep_ + 56);
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v15 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)";
      *((_QWORD *)&v15 + 1) = 46;
      v16 = 2;
      sub_100077B34(v17, &v15);
      sub_100005A0C(&v18, (uint64_t)"Missed an evictable slot", 24);
      std::ostream::~ostream(&v18, off_10017D2F0);
      sub_10007D690((uint64_t)v17);
      std::ios::~ios(v19);
    }
    operator new();
  }
  while (1)
  {
    v7 = __ldaxr((unint64_t *)*a1);
    if (v7 != 1)
    {
      __clrex();
      goto LABEL_6;
    }
    if (!__stlxr(0, (unint64_t *)*a1))
      break;
LABEL_6:
    if (v7 != 1)
      goto LABEL_7;
  }
  v8 = a1[1];
  if (v8)
  {
    sub_100078C2C(&v8[9].__d_.__rep_);
    v9 = a1[1];
    v10 = (dispatch_group_t *)((*a1)[1].__d_.__rep_ + 392);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 0x40000000;
    v14[2] = sub_100077C1C;
    v14[3] = &unk_10017B838;
    v14[4] = a1;
    v14[5] = v9;
    sub_1000419EC(v10, v14);
  }
  else
  {
    sub_10003EA74((*a1)[1].__d_.__rep_ + 56);
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v15 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)";
      *((_QWORD *)&v15 + 1) = 46;
      v16 = 2;
      sub_100077F44(v17, &v15);
      sub_100005A0C(&v18, (uint64_t)"Replaced an empty slot", 22);
      std::ostream::~ostream(&v18, off_10017D950);
      sub_10007E854((uint64_t)v17);
      std::ios::~ios(v19);
    }
  }
  a1[1] = a2;
  if (!a2)
  {
    a1[2] = (std::chrono::steady_clock::time_point *)-1;
    operator new();
  }
  a1[2] = (std::chrono::steady_clock::time_point *)a2[4].__d_.__rep_;
  atomic_store(2uLL, (unint64_t *)*a1);
  (*a1)[2].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  result = sub_100077758(a3, (uint64_t)a1);
  v12 = (unint64_t *)*a1;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  return result;
}

_QWORD *sub_100077B34(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100082564((uint64_t)a1, a2);
  *a1 = off_10017D228;
  a1[45] = &off_10017D328;
  a1[46] = &off_10017D350;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017D228;
  a1[45] = off_10017D2B0;
  a1[46] = off_10017D2D8;
  return a1;
}

void sub_100077BB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10007D690(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100077BDC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017D2F0);
  sub_10007D690(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100077C1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  int v6;
  _QWORD v7[45];
  uint64_t v8;
  _BYTE v9[152];

  v2 = *(_QWORD *)(a1 + 32);
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v5 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)_block_invoke";
    *((_QWORD *)&v5 + 1) = 46;
    v6 = 2;
    sub_100077D74(v7, &v5);
    sub_100005A0C(&v8, (uint64_t)"Background close of ", 20);
    sub_100077654(&v8, *(_QWORD *)(a1 + 40));
    std::ostream::~ostream(&v8, off_10017D510);
    sub_10007DC7C((uint64_t)v7);
    std::ios::~ios(v9);
  }
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  sub_10003EA74(*(_QWORD *)(*(_QWORD *)v2 + 8) + 56);
  result = sub_1000BF0D4();
  if ((_DWORD)result)
  {
    *(_QWORD *)&v5 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)_block_invoke";
    *((_QWORD *)&v5 + 1) = 46;
    v6 = 2;
    sub_100077E5C(v7, &v5);
    sub_100005A0C(&v8, (uint64_t)"Close completed", 15);
    std::ostream::~ostream(&v8, off_10017D730);
    sub_10007E268((uint64_t)v7);
    return std::ios::~ios(v9);
  }
  return result;
}

void sub_100077D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100077F04((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100077D74(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000825E0((uint64_t)a1, a2);
  *a1 = off_10017D448;
  a1[45] = &off_10017D548;
  a1[46] = &off_10017D570;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017D448;
  a1[45] = off_10017D4D0;
  a1[46] = off_10017D4F8;
  return a1;
}

void sub_100077DF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10007DC7C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100077E1C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017D510);
  sub_10007DC7C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100077E5C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10008265C((uint64_t)a1, a2);
  *a1 = off_10017D668;
  a1[45] = &off_10017D768;
  a1[46] = &off_10017D790;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017D668;
  a1[45] = off_10017D6F0;
  a1[46] = off_10017D718;
  return a1;
}

void sub_100077EE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10007E268(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100077F04(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017D730);
  sub_10007E268(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100077F44(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000826D8((uint64_t)a1, a2);
  *a1 = off_10017D888;
  a1[45] = &off_10017D988;
  a1[46] = &off_10017D9B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017D888;
  a1[45] = off_10017D910;
  a1[46] = off_10017D938;
  return a1;
}

void sub_100077FC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10007E854(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100077FEC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017D950);
  sub_10007E854(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10007802C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  dispatch_group_t *v7;
  unint64_t *v8;
  uint64_t v9;
  _QWORD v11[5];
  __int128 v12;
  int v13;
  __int128 v14;
  int v15;
  _QWORD v16[45];
  uint64_t v17;
  _BYTE v18[152];

  v4 = atomic_load(*(unint64_t **)a1);
  while (v4 == 1)
  {
    v4 = __ldaxr(*(unint64_t **)a1);
    if (v4 == 1)
    {
      if (!__stlxr(0, *(unint64_t **)a1))
      {
        v5 = sub_1000761CC(*(_QWORD *)(a1 + 8));
        if (sub_100094804(*(_QWORD *)(v5 + 8)))
        {
          sub_100078C2C((_QWORD *)(*(_QWORD *)(a1 + 8) + 72));
          v6 = *(_QWORD *)(a1 + 8);
          v7 = (dispatch_group_t *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 392);
          v11[0] = _NSConcreteStackBlock;
          v11[1] = 0x40000000;
          v11[2] = sub_1000786D8;
          v11[3] = &unk_10017B858;
          v11[4] = v6;
          sub_1000419EC(v7, v11);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = -1;
          v8 = *(unint64_t **)a1;
          v9 = 1;
          atomic_store(1uLL, v8);
        }
        else
        {
          if (sub_1000BF0D4())
          {
            *(_QWORD *)&v14 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
            *((_QWORD *)&v14 + 1) = 43;
            v15 = 2;
            sub_1000785F0(v16, &v14);
            sub_100005A0C(&v17, (uint64_t)"Skipping erase of ", 18);
            sub_100077654(&v17, *(_QWORD *)(a1 + 8));
            sub_100005A0C(&v17, (uint64_t)", band was written to", 21);
            std::ostream::~ostream(&v17, off_10017E1D0);
            sub_100080004((uint64_t)v16);
            std::ios::~ios(v18);
          }
          return 1;
        }
        return v9;
      }
    }
    else
    {
      __clrex();
    }
  }
  if (v4)
  {
    sub_100077758((uint64_t)&v14, a1);
    if (*((_QWORD *)&v14 + 1) && *(_QWORD *)(*((_QWORD *)&v14 + 1) + 32) == a2)
    {
      if (sub_1000BF0D4())
      {
        *(_QWORD *)&v12 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
        *((_QWORD *)&v12 + 1) = 43;
        v13 = 2;
        sub_100078420(v16, &v12);
        sub_100005A0C(&v17, (uint64_t)"Skipping band erase (in use)", 28);
        std::ostream::~ostream(&v17, off_10017DD90);
        sub_10007F42C((uint64_t)v16);
        std::ios::~ios(v18);
      }
      v9 = 1;
    }
    else
    {
      if (sub_1000BF0D4())
      {
        *(_QWORD *)&v12 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
        *((_QWORD *)&v12 + 1) = 43;
        v13 = 2;
        sub_100078508(v16, &v12);
        sub_100005A0C(&v17, (uint64_t)"Band was evicted by another thread (during retain attempt), retry erase process", 79);
        std::ostream::~ostream(&v17, off_10017DFB0);
        sub_10007FA18((uint64_t)v16);
        std::ios::~ios(v18);
      }
      v9 = 0;
    }
    sub_1000776C4((uint64_t)&v14);
  }
  else
  {
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v14 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
      *((_QWORD *)&v14 + 1) = 43;
      v15 = 2;
      sub_100078338(v16, &v14);
      sub_100005A0C(&v17, (uint64_t)"Band was evicted by another thread, retry erase process", 55);
      std::ostream::~ostream(&v17, off_10017DB70);
      sub_10007EE40((uint64_t)v16);
      std::ios::~ios(v18);
    }
    return 0;
  }
  return v9;
}

_QWORD *sub_100078338(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100082754((uint64_t)a1, a2);
  *a1 = off_10017DAA8;
  a1[45] = &off_10017DBA8;
  a1[46] = &off_10017DBD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017DAA8;
  a1[45] = off_10017DB30;
  a1[46] = off_10017DB58;
  return a1;
}

void sub_1000783BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10007EE40(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000783E0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017DB70);
  sub_10007EE40(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100078420(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000827D0((uint64_t)a1, a2);
  *a1 = off_10017DCC8;
  a1[45] = &off_10017DDC8;
  a1[46] = &off_10017DDF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017DCC8;
  a1[45] = off_10017DD50;
  a1[46] = off_10017DD78;
  return a1;
}

void sub_1000784A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10007F42C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000784C8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017DD90);
  sub_10007F42C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_100078508(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10008284C((uint64_t)a1, a2);
  *a1 = off_10017DEE8;
  a1[45] = &off_10017DFE8;
  a1[46] = &off_10017E010;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017DEE8;
  a1[45] = off_10017DF70;
  a1[46] = off_10017DF98;
  return a1;
}

void sub_10007858C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10007FA18(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000785B0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017DFB0);
  sub_10007FA18(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000785F0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000828C8((uint64_t)a1, a2);
  *a1 = off_10017E108;
  a1[45] = &off_10017E208;
  a1[46] = &off_10017E230;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017E108;
  a1[45] = off_10017E190;
  a1[46] = off_10017E1B8;
  return a1;
}

void sub_100078674(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100080004(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100078698(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017E1D0);
  sub_100080004(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_1000786D8(uint64_t a1)
{
  _BYTE *v2;
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;

  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v4 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)_block_invoke";
    *((_QWORD *)&v4 + 1) = 43;
    v5 = 2;
    sub_1000787A8(v6, &v4);
    sub_100005A0C(&v7, (uint64_t)"Background erase of ", 20);
    sub_100077654(&v7, *(_QWORD *)(a1 + 32));
    std::ostream::~ostream(&v7, off_10017E3F0);
    sub_1000805F0((uint64_t)v6);
    std::ios::~ios(&v8);
  }
  v2 = *(_BYTE **)(a1 + 32);
  v2[69] = 1;
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 16))(v2);
}

void sub_100078794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100078850((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000787A8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100082944((uint64_t)a1, a2);
  *a1 = off_10017E328;
  a1[45] = &off_10017E428;
  a1[46] = &off_10017E450;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017E328;
  a1[45] = off_10017E3B0;
  a1[46] = off_10017E3D8;
  return a1;
}

void sub_10007882C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000805F0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100078850(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017E3F0);
  sub_1000805F0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100078890(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
}

uint64_t sub_10007889C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40) / *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
}

uint64_t sub_1000788AC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

void sub_1000788BC()
{
  operator new();
}

void sub_100078918()
{
  operator delete();
}

unint64_t sub_10007893C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v30;
  _OWORD v31[2];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  _OWORD v43[2];
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v54 = xmmword_100142CD0;
  v55 = a1;
  v56 = a2;
  v4 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v42 = *(_QWORD *)a3;
  *((_QWORD *)&v42 + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v43[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v43 + 9) = *(_OWORD *)(a3 + 25);
  v44 = *(_QWORD *)(a3 + 48);
  v45 = *(_OWORD *)(a3 + 56);
  v46 = *(_OWORD *)(a3 + 72);
  v47 = *(_OWORD *)(a3 + 88);
  v48 = *(_BYTE *)(a3 + 104);
  v7 = *(std::__shared_weak_count **)(a3 + 120);
  v49 = *(_QWORD *)(a3 + 112);
  v50 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v51 = *(_OWORD *)(a3 + 128);
  v52 = *(_QWORD *)(a3 + 144);
  v53 = *(_BYTE *)(a3 + 152);
  v10 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)&v30 = *(_QWORD *)a4;
  *((_QWORD *)&v30 + 1) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v31[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)(a4 + 25);
  v32 = *(_QWORD *)(a4 + 48);
  v33 = *(_OWORD *)(a4 + 56);
  v34 = *(_OWORD *)(a4 + 72);
  v35 = *(_OWORD *)(a4 + 88);
  v36 = *(_BYTE *)(a4 + 104);
  v13 = *(std::__shared_weak_count **)(a4 + 120);
  v37 = *(_QWORD *)(a4 + 112);
  v38 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v39 = *(_OWORD *)(a4 + 128);
  v40 = *(_QWORD *)(a4 + 144);
  v41 = *(_BYTE *)(a4 + 152);
  v16 = sub_100036CC0((uint64_t)&v54, &v42, &v30, 0xFFFFFFFFFFFFFFFFLL);
  v17 = v38;
  if (v38)
  {
    v18 = (unint64_t *)&v38->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v50;
  if (v50)
  {
    v24 = (unint64_t *)&v50->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  return v16;
}

void sub_100078BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  sub_100012168(v30);
  sub_100012168((uint64_t)&a9);
  sub_100012168(v29);
  sub_100012168((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_100078BE0(uint64_t a1)
{
  void **v3;

  sub_100078C2C((_QWORD *)a1);
  sub_100012168(a1 + 88);
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  v3 = (void **)a1;
  sub_100017FB8(&v3);
  return a1;
}

void sub_100078C2C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  int v11;
  _QWORD v12[45];
  uint64_t v13;
  uint64_t v14;

  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v10 = "sparse_bundles::Band::ContextsList::clear()";
    *((_QWORD *)&v10 + 1) = 41;
    v11 = 2;
    sub_100061E74(v12, &v10);
    sub_100005A0C(&v13, (uint64_t)"Resetting ", 10);
    std::ostream::operator<<(&v13, (uint64_t)(a1[1] - *a1) >> 4);
    sub_100005A0C(&v13, (uint64_t)" band contexts", 14);
    std::ostream::~ostream(&v13, off_100178178);
    sub_100066FC0((uint64_t)v12);
    std::ios::~ios(&v14);
  }
  v2 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  if ((uint64_t *)*a1 != v3)
  {
    v4 = a1 + 11;
    do
    {
      v5 = *v2;
      v6 = (std::__shared_weak_count *)v2[1];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        sub_100027CB4((_QWORD *)(v5 + 16), v4);
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      else
      {
        sub_100027CB4((_QWORD *)(v5 + 16), v4);
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_100078D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100061F1C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100078D8C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017B970);
  sub_100078F80(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100078DC4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017B970);
  sub_100078F80(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100078E04(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017B970);
  sub_100078F80(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100078E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100078E8C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100078ED8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017B970);
  sub_100078F80(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100078F28(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017B970);
  sub_100078F80(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100078F80(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017BA40;
  sub_10007901C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007901C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100079194((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100079144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100079170(uint64_t a1)
{
  sub_100078F80(a1);
  operator delete();
}

int *sub_100079194(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 47;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 47;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100079378(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017BB90);
  sub_10007956C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000793B0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017BB90);
  sub_10007956C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000793F0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017BB90);
  sub_10007956C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100079444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100079478(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_1000794C4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017BB90);
  sub_10007956C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100079514(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017BB90);
  sub_10007956C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10007956C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017BC60;
  sub_100079608(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100079608(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100079780((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100079730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007975C(uint64_t a1)
{
  sub_10007956C(a1);
  operator delete();
}

int *sub_100079780(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 56;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 56;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100079964(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017BDB0);
  sub_100079B58(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007999C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017BDB0);
  sub_100079B58(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000799DC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017BDB0);
  sub_100079B58(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100079A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100079A64(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100079AB0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017BDB0);
  sub_100079B58(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100079B00(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017BDB0);
  sub_100079B58(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100079B58(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017BE80;
  sub_100079BF4(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100079BF4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100079D6C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100079D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100079D48(uint64_t a1)
{
  sub_100079B58(a1);
  operator delete();
}

int *sub_100079D6C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 63;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 63;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100079F50(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017BFD0);
  sub_10007A144(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100079F88(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017BFD0);
  sub_10007A144(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100079FC8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017BFD0);
  sub_10007A144(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10007A01C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10007A050(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007A09C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017BFD0);
  sub_10007A144(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10007A0EC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017BFD0);
  sub_10007A144(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10007A144(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017C0A0;
  sub_10007A1E0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007A1E0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10007A358((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10007A308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007A334(uint64_t a1)
{
  sub_10007A144(a1);
  operator delete();
}

int *sub_10007A358(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 74;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 74;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10007A53C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017C1F0);
  sub_10007A730(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007A574(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017C1F0);
  sub_10007A730(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007A5B4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017C1F0);
  sub_10007A730(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10007A608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10007A63C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007A688(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017C1F0);
  sub_10007A730(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10007A6D8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017C1F0);
  sub_10007A730(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10007A730(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017C2C0;
  sub_10007A7CC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007A7CC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10007A944((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10007A8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007A920(uint64_t a1)
{
  sub_10007A730(a1);
  operator delete();
}

int *sub_10007A944(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 116;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 116;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10007AB28(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017C410);
  sub_10007AD1C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007AB60(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017C410);
  sub_10007AD1C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007ABA0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017C410);
  sub_10007AD1C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10007ABF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10007AC28(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007AC74(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017C410);
  sub_10007AD1C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10007ACC4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017C410);
  sub_10007AD1C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10007AD1C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017C4E0;
  sub_10007ADB8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007ADB8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10007AF30((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10007AEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007AF0C(uint64_t a1)
{
  sub_10007AD1C(a1);
  operator delete();
}

int *sub_10007AF30(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 126;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 126;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10007B114(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017C630);
  sub_10007B308(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007B14C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017C630);
  sub_10007B308(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007B18C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017C630);
  sub_10007B308(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10007B1E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10007B214(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007B260(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017C630);
  sub_10007B308(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10007B2B0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017C630);
  sub_10007B308(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10007B308(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017C700;
  sub_10007B3A4(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007B3A4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10007B51C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10007B4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007B4F8(uint64_t a1)
{
  sub_10007B308(a1);
  operator delete();
}

int *sub_10007B51C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 136;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 136;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10007B700(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017C850);
  sub_10007B8F4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007B738(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017C850);
  sub_10007B8F4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007B778(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017C850);
  sub_10007B8F4(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10007B7CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10007B800(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007B84C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017C850);
  sub_10007B8F4(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10007B89C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017C850);
  sub_10007B8F4(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10007B8F4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017C920;
  sub_10007B990(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007B990(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10007BB08((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10007BAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007BAE4(uint64_t a1)
{
  sub_10007B8F4(a1);
  operator delete();
}

int *sub_10007BB08(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 139;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 139;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10007BCEC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017CA70);
  sub_10007BEE0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007BD24(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017CA70);
  sub_10007BEE0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007BD64(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017CA70);
  sub_10007BEE0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10007BDB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10007BDEC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007BE38(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017CA70);
  sub_10007BEE0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10007BE88(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017CA70);
  sub_10007BEE0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10007BEE0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017CB40;
  sub_10007BF7C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007BF7C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10007C0F4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10007C0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007C0D0(uint64_t a1)
{
  sub_10007BEE0(a1);
  operator delete();
}

int *sub_10007C0F4(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 151;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 151;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10007C2D8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017CC90);
  sub_10007C4CC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007C310(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017CC90);
  sub_10007C4CC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007C350(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017CC90);
  sub_10007C4CC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10007C3A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10007C3D8(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007C424(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017CC90);
  sub_10007C4CC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10007C474(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017CC90);
  sub_10007C4CC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10007C4CC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017CD60;
  sub_10007C568(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007C568(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10007C6E0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10007C690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007C6BC(uint64_t a1)
{
  sub_10007C4CC(a1);
  operator delete();
}

int *sub_10007C6E0(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 153;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 153;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10007C8C4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017CEB0);
  sub_10007CAB8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007C8FC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017CEB0);
  sub_10007CAB8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007C93C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017CEB0);
  sub_10007CAB8(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10007C990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10007C9C4(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007CA10(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017CEB0);
  sub_10007CAB8(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10007CA60(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017CEB0);
  sub_10007CAB8(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10007CAB8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017CF80;
  sub_10007CB54(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007CB54(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10007CCCC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10007CC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007CCA8(uint64_t a1)
{
  sub_10007CAB8(a1);
  operator delete();
}

int *sub_10007CCCC(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 162;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 162;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10007CEB0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017D0D0);
  sub_10007D0A4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007CEE8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017D0D0);
  sub_10007D0A4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007CF28(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017D0D0);
  sub_10007D0A4(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10007CF7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10007CFB0(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007CFFC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017D0D0);
  sub_10007D0A4(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10007D04C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017D0D0);
  sub_10007D0A4(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10007D0A4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017D1A0;
  sub_10007D140(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007D140(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10007D2B8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10007D268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007D294(uint64_t a1)
{
  sub_10007D0A4(a1);
  operator delete();
}

int *sub_10007D2B8(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 202;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 202;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10007D49C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017D2F0);
  sub_10007D690(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007D4D4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017D2F0);
  sub_10007D690(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007D514(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017D2F0);
  sub_10007D690(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10007D568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10007D59C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007D5E8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017D2F0);
  sub_10007D690(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10007D638(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017D2F0);
  sub_10007D690(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10007D690(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017D3C0;
  sub_10007D72C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007D72C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10007D8A4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10007D854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007D880(uint64_t a1)
{
  sub_10007D690(a1);
  operator delete();
}

int *sub_10007D8A4(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 330;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 330;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10007DA88(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017D510);
  sub_10007DC7C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007DAC0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017D510);
  sub_10007DC7C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007DB00(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017D510);
  sub_10007DC7C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10007DB54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10007DB88(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007DBD4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017D510);
  sub_10007DC7C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10007DC24(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017D510);
  sub_10007DC7C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10007DC7C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017D5E0;
  sub_10007DD18(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007DD18(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10007DE90((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10007DE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007DE6C(uint64_t a1)
{
  sub_10007DC7C(a1);
  operator delete();
}

int *sub_10007DE90(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 339;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 339;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10007E074(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017D730);
  sub_10007E268(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007E0AC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017D730);
  sub_10007E268(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007E0EC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017D730);
  sub_10007E268(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10007E140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10007E174(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007E1C0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017D730);
  sub_10007E268(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10007E210(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017D730);
  sub_10007E268(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10007E268(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017D800;
  sub_10007E304(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007E304(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10007E47C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10007E42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007E458(uint64_t a1)
{
  sub_10007E268(a1);
  operator delete();
}

int *sub_10007E47C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 342;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 342;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10007E660(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017D950);
  sub_10007E854(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007E698(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017D950);
  sub_10007E854(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007E6D8(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017D950);
  sub_10007E854(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10007E72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10007E760(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007E7AC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017D950);
  sub_10007E854(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10007E7FC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017D950);
  sub_10007E854(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10007E854(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017DA20;
  sub_10007E8F0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007E8F0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10007EA68((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10007EA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007EA44(uint64_t a1)
{
  sub_10007E854(a1);
  operator delete();
}

int *sub_10007EA68(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 346;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 346;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10007EC4C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017DB70);
  sub_10007EE40(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007EC84(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017DB70);
  sub_10007EE40(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007ECC4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017DB70);
  sub_10007EE40(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10007ED18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10007ED4C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007ED98(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017DB70);
  sub_10007EE40(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10007EDE8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017DB70);
  sub_10007EE40(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10007EE40(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017DC40;
  sub_10007EEDC(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007EEDC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10007F054((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10007F004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007F030(uint64_t a1)
{
  sub_10007EE40(a1);
  operator delete();
}

int *sub_10007F054(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 381;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 381;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10007F238(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017DD90);
  sub_10007F42C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007F270(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017DD90);
  sub_10007F42C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007F2B0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017DD90);
  sub_10007F42C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10007F304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10007F338(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007F384(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017DD90);
  sub_10007F42C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10007F3D4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017DD90);
  sub_10007F42C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10007F42C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017DE60;
  sub_10007F4C8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007F4C8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10007F640((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10007F5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007F61C(uint64_t a1)
{
  sub_10007F42C(a1);
  operator delete();
}

int *sub_10007F640(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 386;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 386;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10007F824(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017DFB0);
  sub_10007FA18(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007F85C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017DFB0);
  sub_10007FA18(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007F89C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017DFB0);
  sub_10007FA18(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10007F8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10007F924(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007F970(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017DFB0);
  sub_10007FA18(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10007F9C0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017DFB0);
  sub_10007FA18(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10007FA18(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017E080;
  sub_10007FAB4(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007FAB4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10007FC2C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10007FBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007FC08(uint64_t a1)
{
  sub_10007FA18(a1);
  operator delete();
}

int *sub_10007FC2C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 389;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 389;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_10007FE10(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017E1D0);
  sub_100080004(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007FE48(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017E1D0);
  sub_100080004(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007FE88(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017E1D0);
  sub_100080004(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10007FEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10007FF10(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10007FF5C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017E1D0);
  sub_100080004(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10007FFAC(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017E1D0);
  sub_100080004(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100080004(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017E2A0;
  sub_1000800A0(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000800A0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100080218((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000801C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000801F4(uint64_t a1)
{
  sub_100080004(a1);
  operator delete();
}

int *sub_100080218(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 398;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 398;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000803FC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017E3F0);
  sub_1000805F0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100080434(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017E3F0);
  sub_1000805F0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100080474(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017E3F0);
  sub_1000805F0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000804C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000804FC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100080548(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017E3F0);
  sub_1000805F0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100080598(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017E3F0);
  sub_1000805F0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_1000805F0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017E4C0;
  sub_10008068C(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10008068C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100080804((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000807B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000807E0(uint64_t a1)
{
  sub_1000805F0(a1);
  operator delete();
}

int *sub_100080804(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 405;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 405;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_1000809E8(_QWORD *a1)
{
  *a1 = off_10017E540;
  sub_100012168((uint64_t)(a1 + 2));
  return a1;
}

void sub_100080A18(_QWORD *a1)
{
  *a1 = off_10017E540;
  sub_100012168((uint64_t)(a1 + 2));
  operator delete();
}

uint64_t sub_100080A58(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017BA40;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100080AC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100080AD4(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017BC60;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100080B3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100080B50(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017BE80;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100080BB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100080BCC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017C0A0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100080C34(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_100080C48(int *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0x470uLL);
  sub_100080CC0(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1000196D4((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_100080CAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100080CC0(_QWORD *a1, int *a2, uint64_t a3, int *a4)
{
  int v5;
  uint64_t v6;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100175730;
  v5 = *a4;
  v6 = sub_100101D04(*a2, a3, *a4);
  sub_100046E20((uint64_t)(a1 + 3), v6, (v5 & 3) != 0, 0);
  return a1;
}

void sub_100080D1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100080D30(uint64_t *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE0uLL);
  sub_100080DA8(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1000196D4((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_100080D94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100080DA8(_QWORD *a1, uint64_t *a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100176D10;
  sub_100080DF0((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_100080DDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100080DF0(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v6 = (std::__shared_weak_count *)a2[1];
  v14 = *a2;
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  sub_100080EA8(&v13, *a4);
  sub_10011849C(a1, &v14, a3, &v13);
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

void sub_100080E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100012168((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_100080EA8(_DWORD *result, int a2)
{
  unsigned int v2;
  _QWORD *exception;

  *result = a2;
  if ((a2 & 0xFFFFFFFC) != 0)
  {
    v2 = a2 & 0xFFFFFFFC;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    *exception = &off_100175450;
    exception[1] = "header_ignore_fields_t";
    *((_DWORD *)exception + 8) = v2;
  }
  return result;
}

uint64_t sub_100080F18(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017C2C0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100080F80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100080F94(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017C4E0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100080FFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100081010(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017C700;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100081078(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10008108C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017C920;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000810F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100081108(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017CB40;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100081170(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100081184(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017CD60;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000811EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100081200(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017CF80;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100081268(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_10008127C(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000812D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1000812F4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100081318(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t sub_100081330(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100081370(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017D1A0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000813D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_1000813EC(uint64_t ***a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  void (*v4)(uint64_t);
  void *v5;
  uint64_t v6;
  _QWORD v7[45];
  uint64_t v8;
  uint64_t v9;

  v1 = ***a1;
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v3 = "sparse_bundles::Band::get_mapped_blocks()::(anonymous class)::operator()() const";
    *((_QWORD *)&v3 + 1) = 72;
    LODWORD(v4) = 2;
    sub_1000815C4(v7, &v3);
    sub_100005A0C(&v8, (uint64_t)"Opening mapped blocks for ", 26);
    sub_100077654(&v8, v1);
    std::ostream::~ostream(&v8, off_10017E700);
    sub_100081910((uint64_t)v7);
    std::ios::~ios(&v9);
  }
  v2 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)&v3 = _NSConcreteStackBlock;
  *((_QWORD *)&v3 + 1) = 0x40000000;
  v4 = sub_1000816AC;
  v5 = &unk_10017E600;
  v6 = v1;
  sub_10003F520(v2, (uint64_t)&v3);
}

_QWORD *sub_1000815C4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100081894((uint64_t)a1, a2);
  *a1 = off_10017E638;
  a1[45] = &off_10017E738;
  a1[46] = &off_10017E760;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017E638;
  a1[45] = off_10017E6C0;
  a1[46] = off_10017E6E8;
  return a1;
}

void sub_100081648(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100081910(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10008166C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017E700);
  sub_100081910(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_1000816AC(uint64_t a1)
{
  _QWORD v1[4];

  sub_10011E808(*(_QWORD *)(a1 + 32) + 16, v1);
  v1[2] = v1[0];
  v1[3] = v1[1];
  operator new();
}

void sub_100081778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100012168((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000817AC(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100081EFC((uint64_t)a1, a2);
  *a1 = off_10017E858;
  a1[45] = &off_10017E958;
  a1[46] = &off_10017E980;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017E858;
  a1[45] = off_10017E8E0;
  a1[46] = off_10017E908;
  return a1;
}

void sub_100081830(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100081F78(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100081854(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017E920);
  sub_100081F78(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100081894(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017E7D0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000818FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100081910(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017E7D0;
  sub_100081BC8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000819AC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017E700);
  sub_100081910(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100081A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100081A34(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100081A80(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017E700);
  sub_100081910(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100081AB8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017E700);
  sub_100081910(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100081B08(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017E700);
  sub_100081910(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100081B48(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017E700);
  sub_100081910(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100081BA4(uint64_t a1)
{
  sub_100081910(a1);
  operator delete();
}

uint64_t sub_100081BC8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100081D18((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100081CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100081D18(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 218;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 218;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100081EFC(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017E9F0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100081F64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100081F78(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017E9F0;
  sub_100082230(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100082014(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017E920);
  sub_100081F78(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100082068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10008209C(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_1000820E8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017E920);
  sub_100081F78(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100082120(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017E920);
  sub_100081F78(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100082170(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017E920);
  sub_100081F78(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000821B0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017E920);
  sub_100081F78(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_10008220C(uint64_t a1)
{
  sub_100081F78(a1);
  operator delete();
}

uint64_t sub_100082230(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100082380((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100082358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100082380(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 225;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 225;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100082564(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017D3C0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000825CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000825E0(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017D5E0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100082648(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10008265C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017D800;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000826C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000826D8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017DA20;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100082740(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100082754(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017DC40;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000827BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000827D0(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017DE60;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100082838(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10008284C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017E080;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000828B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000828C8(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017E2A0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100082930(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100082944(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017E4C0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000829AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_100082E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100082E28(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "signalCommandCompletedWithXpcError:", v3);

}

void sub_100082F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100082F84(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
  {
    v8 = *(void **)(a1 + 32);
    v9 = 0;
    objc_msgSend(v8, "updateDiskImageParamsWithFrontend:error:", v5, &v9);
    v6 = v9;
  }
  objc_msgSend(WeakRetained, "signalCommandCompletedWithXpcError:", v6);

}

void sub_1000830F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100083120(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
  {
    v8 = *(void **)(a1 + 32);
    v9 = 0;
    objc_msgSend(v8, "updateDiskImageParamsWithFrontend:error:", v5, &v9);
    v6 = v9;
  }
  objc_msgSend(WeakRetained, "signalCommandCompletedWithXpcError:", v6);

}

void sub_1000832A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000832D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
  {
    v8 = *(void **)(a1 + 32);
    v9 = 0;
    objc_msgSend(v8, "updateDiskImageParamsWithFrontend:error:", v5, &v9);
    v6 = v9;
  }
  objc_msgSend(WeakRetained, "signalCommandCompletedWithXpcError:", v6);

}

void sub_100083358(_OWORD *a1)
{
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  operator new[]();
}

void sub_100083450()
{
  operator delete[]();
}

_DWORD *sub_100083474(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _DWORD *result;
  __int128 v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *exception;
  void *v13;
  uint64_t v14;
  int v15;

  v4 = *(_DWORD *)a2;
  LODWORD(v14) = 1936879731;
  sub_100083628((uint64_t)"header_signature", v4, &v14, 1);
  *(_DWORD *)a1 = 1936879731;
  v5 = bswap32(*(_DWORD *)(a2 + 4));
  v14 = 0x200000001;
  v15 = 3;
  sub_100083628((uint64_t)"version_t", v5, &v14, 3);
  *(_DWORD *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 8) = bswap32(*(_DWORD *)(a2 + 8));
  result = sub_1000836A8(&v14, bswap32(*(_DWORD *)(a2 + 12)));
  *(_DWORD *)(a1 + 12) = v14;
  *(_DWORD *)(a1 + 16) = bswap32(*(_DWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 20) = bswap64(*(_QWORD *)(a2 + 20));
  *(_QWORD *)(a1 + 28) = bswap64(*(_QWORD *)(a2 + 28));
  v7 = *(_OWORD *)(a2 + 36);
  v8 = *(_QWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 52) = v8;
  *(_OWORD *)(a1 + 36) = v7;
  if (!*(_DWORD *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v13 = (void *)sub_100005410((uint64_t)exception, (uint64_t)"Band size in sparse is zero", 0x16u);
  }
  for (i = 0; i != 28; ++i)
  {
    if (*(_BYTE *)(a1 + 36 + i))
    {
      v10 = __cxa_allocate_exception(0x40uLL);
      v11 = (void *)sub_100005410((uint64_t)v10, (uint64_t)"Reserved part isn't zeroed", 0x16u);
    }
  }
  return result;
}

uint64_t sub_100083628(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *exception;

  if (!a4)
  {
LABEL_5:
    v5 = result;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid value";
    exception[3] = "value validator";
    *exception = &off_100175450;
    exception[1] = v5;
    *((_DWORD *)exception + 8) = a2;
  }
  v4 = 4 * a4;
  while (*a3 != a2)
  {
    ++a3;
    v4 -= 4;
    if (!v4)
      goto LABEL_5;
  }
  return result;
}

_DWORD *sub_1000836A8(_DWORD *result, int a2)
{
  unsigned int v2;
  _QWORD *exception;

  *result = a2;
  if ((a2 & 0xFFFFFFFE) != 0)
  {
    v2 = a2 & 0xFFFFFFFE;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    *exception = &off_100175450;
    exception[1] = "flags_t";
    *((_DWORD *)exception + 8) = v2;
  }
  return result;
}

void sub_1000837C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100083954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_100083AB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_100083C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v24 = v23;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100083C88(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100083C98(uint64_t a1)
{

}

void sub_100083CA0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  id v17;
  int v18;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  id v25;

  v6 = a2;
  v7 = a4;
  if (v7)
  {
    v8 = *__error();
    if (sub_1000BF0BC())
    {
      v19 = 0;
      v9 = sub_1000BF044();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        v11 = 3;
      else
        v11 = 2;
      *(_DWORD *)buf = 68158210;
      v21 = 73;
      v22 = 2080;
      v23 = "+[DIKeyRetriever requestSynchronousDataWithRequest:session:]_block_invoke";
      v24 = 2112;
      v25 = v7;
      v18 = 28;
      v12 = (char *)_os_log_send_and_compose_impl(v11, &v19, 0, 0, &_mh_execute_header, v10, 16, "%.*s: %@", buf, v18);

      if (v12)
      {
        fprintf(__stderrp, "%s\n", v12);
        free(v12);
      }
    }
    else
    {
      v13 = sub_1000BF044();
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68158210;
        v21 = 73;
        v22 = 2080;
        v23 = "+[DIKeyRetriever requestSynchronousDataWithRequest:session:]_block_invoke";
        v24 = 2112;
        v25 = v7;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%.*s: %@", buf, 0x1Cu);
      }

    }
    *__error() = v8;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v16 = *(void **)(v15 + 40);
  *(_QWORD *)(v15 + 40) = v6;
  v17 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100083E94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100083F30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100084004(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000840D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000841AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100084230(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000843B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100084580(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1000846C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100084A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void *sub_100084B3C()
{
  return &unk_1001A06E8;
}

void sub_100084B48()
{
  operator new();
}

void sub_100084B98()
{
  operator delete();
}

void sub_100084C00(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  const std::error_category *v10;
  _QWORD *v11;
  const std::error_category *v12;
  _QWORD *exception;
  const std::error_category *v14;
  uint64_t v15;

  v4 = (*(uint64_t (**)(uint64_t, const char *))(a1 + 8))(a2, "fd");
  if ((v4 & 0x80000000) == 0)
  {
    v15 = 0;
    v5 = (*(uint64_t (**)(uint64_t, const char *, uint64_t *))a1)(a2, "path", &v15);
    v6 = v5;
    if (v5 > 0)
    {
      objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15));
      (*(void (**)(uint64_t))(a1 + 16))(v15);
      v7 = (*(uint64_t (**)(uint64_t, const char *, uint64_t *))a1)(a2, "writable", &v15);
      v8 = v7;
      if (v7 == 1)
      {
        (*(void (**)(void))(a1 + 16))();
        operator new();
      }
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_10017F1D8;
      v14 = std::generic_category();
      exception[1] = v8;
      exception[2] = v14;
      exception[3] = "Cannot decode writable";
    }
    v11 = __cxa_allocate_exception(0x20uLL);
    *v11 = &off_10017F1D8;
    v12 = std::generic_category();
    v11[1] = v6;
    v11[2] = v12;
    v11[3] = "Cannot decode path";
  }
  v9 = __cxa_allocate_exception(0x20uLL);
  *v9 = &off_10017F1D8;
  v10 = std::generic_category();
  v9[1] = v4;
  v9[2] = v10;
  v9[3] = "Cannot decode file descriptor";
}

void sub_100084E50(_Unwind_Exception *exception_object, int a2)
{
  _QWORD *v2;
  _DWORD *v3;

  if (a2 == 1)
  {
    v3 = __cxa_begin_catch(exception_object);
    sub_10008501C(v3, v2);
    __cxa_end_catch();
    JUMPOUT(0x100084D50);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100084EAC(void *a1)
{
  return objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("path")));
}

uint64_t sub_100084ED0(uint64_t a1, uint64_t a2)
{
  void *v4;
  BOOL v5;
  int v6;
  _QWORD *exception;
  uint64_t v9;
  const std::error_category *v10;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a2 + 8), "objectForKeyedSubscript:", CFSTR("path")));
  v5 = (*(_DWORD *)(a2 + 4) & 3) != 0;
  *(_QWORD *)(a1 + 88) = v4;
  *(_BYTE *)(a1 + 96) = v5;
  *(_DWORD *)(a1 + 100) = -1;
  *(_QWORD *)a1 = 88;
  *(_QWORD *)(a1 + 8) = sub_10008528C;
  *(_QWORD *)(a1 + 16) = sub_100085294;
  *(_QWORD *)(a1 + 24) = sub_1000852BC;
  *(_QWORD *)(a1 + 32) = sub_1000852CC;
  *(_QWORD *)(a1 + 40) = sub_1000852D4;
  *(_QWORD *)(a1 + 48) = sub_1000852DC;
  *(_QWORD *)(a1 + 56) = sub_1000852E0;
  *(_QWORD *)(a1 + 64) = sub_1000852E4;
  *(_QWORD *)(a1 + 72) = sub_1000852E8;
  *(_QWORD *)(a1 + 80) = 0;
  v6 = open((const char *)objc_msgSend(v4, "fileSystemRepresentation"), *(_DWORD *)(a2 + 4));
  *(_DWORD *)(a1 + 100) = v6;
  if (v6 < 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v9 = *__error();
    *exception = &off_10017F1D8;
    v10 = std::generic_category();
    exception[1] = v9;
    exception[2] = v10;
    exception[3] = "Failed opening the file";
  }
  return a1;
}

void sub_100084FF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  sub_100087F98(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10008501C(_DWORD *a1, _QWORD *a2)
{
  int v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;

  v4 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v5 = sub_1000BF044();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      v7 = 3;
    else
      v7 = 2;
    v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
    v9 = a1[2];
    *(_DWORD *)buf = 68158466;
    v20 = 97;
    v21 = 2080;
    v22 = "static di_plugin_image_t *rawTestPlugin_t::CreationError(const pluginException_t &, CFErrorRef *)";
    v23 = 2080;
    v24 = v8;
    v25 = 1024;
    v26 = v9;
    LODWORD(v16) = 34;
    v10 = (char *)_os_log_send_and_compose_impl(v7, &v18, 0, 0, &_mh_execute_header, v6, 16, "%.*s: Failed instantiating rawTestPlugin object: %s (code %d)", (int)buf, v16, v17);

    if (v10)
    {
      fprintf(__stderrp, "%s\n", v10);
      free(v10);
    }
  }
  else
  {
    v11 = sub_1000BF044();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
      v14 = a1[2];
      *(_DWORD *)buf = 68158466;
      v20 = 97;
      v21 = 2080;
      v22 = "static di_plugin_image_t *rawTestPlugin_t::CreationError(const pluginException_t &, CFErrorRef *)";
      v23 = 2080;
      v24 = v13;
      v25 = 1024;
      v26 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%.*s: Failed instantiating rawTestPlugin object: %s (code %d)", buf, 0x22u);
    }

  }
  *__error() = v4;
  if (a2)
    *a2 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, (int)a1[2], 0));
  return 0;
}

_QWORD *sub_10008523C(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  const std::error_category *v6;

  *a1 = &off_10017F1D8;
  v6 = std::generic_category();
  a1[1] = a3;
  a1[2] = v6;
  a1[3] = a2;
  return a1;
}

uint64_t sub_10008528C()
{
  return 512;
}

unint64_t sub_100085294(uint64_t a1)
{
  stat v2;

  sub_100085314(a1, &v2);
  return (unint64_t)v2.st_size >> 9;
}

BOOL sub_1000852BC(uint64_t a1)
{
  return *(_BYTE *)(a1 + 96) != 0;
}

uint64_t sub_1000852CC()
{
  return 1024;
}

uint64_t sub_1000852D4()
{
  return 1024;
}

uint64_t sub_1000852E8(uint64_t result)
{
  if (result)
  {
    sub_100087F98(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100085314@<X0>(uint64_t a1@<X0>, stat *a2@<X8>)
{
  uint64_t result;
  _QWORD *exception;
  int *v4;
  _QWORD *v5;

  result = fstat(*(_DWORD *)(a1 + 100), a2);
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v4 = __error();
    v5 = sub_10008523C(exception, (uint64_t)"fstat failed", *v4);
  }
  return result;
}

void sub_100085374(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFUUIDRef sub_100085388(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  CFUUIDBytes v6;

  v5[0] = 0;
  v5[1] = 0;
  v1 = sub_100085418((uint64_t)v5, (char *)objc_msgSend(*(id *)(a1 + 88), "UTF8String"), (uint64_t)objc_msgSend(*(id *)(a1 + 88), "length"));
  v3 = v2;
  *(_QWORD *)&v6.byte0 = v1;
  *(_QWORD *)&v6.byte8 = v3;
  return CFUUIDCreateFromUUIDBytes(0, v6);
}

uint64_t sub_100085418(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  std::runtime_error v12;
  __int128 v13;
  int v14;
  _BYTE v15[68];
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v6 = 0;
  v13 = xmmword_1001436C0;
  v14 = -1009589776;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  do
  {
    v7 = *(_BYTE *)(a1 + v6);
    v8 = v16++;
    v15[v8] = v7;
    if (v16 == 64)
    {
      v16 = 0;
      sub_1000856F4(&v13);
    }
    if (v17 > 0xFFFFFFF7)
    {
      v17 = 0;
      if (v18 > 0xFFFFFFFE)
      {
        std::runtime_error::runtime_error(&v12, "sha1 too many bytes");
        sub_100074E54(&v12);
      }
      ++v18;
    }
    else
    {
      v17 += 8;
    }
    ++v6;
  }
  while (v6 != 16);
  for (; a3; --a3)
  {
    v9 = *a2;
    v10 = v16++;
    v15[v10] = v9;
    if (v16 == 64)
    {
      v16 = 0;
      sub_1000856F4(&v13);
    }
    if (v17 > 0xFFFFFFF7)
    {
      v17 = 0;
      if (v18 > 0xFFFFFFFE)
      {
        std::runtime_error::runtime_error(&v12, "sha1 too many bytes");
        sub_100074E54(&v12);
      }
      ++v18;
    }
    else
    {
      v17 += 8;
    }
    ++a2;
  }
  return sub_10008564C(a1, &v13);
}

void sub_10008562C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
  std::runtime_error::~runtime_error(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10008564C(uint64_t a1, _DWORD *a2)
{
  uint64_t i;
  _QWORD v4[2];
  int v5;
  uint64_t v6;

  v4[0] = 0;
  v4[1] = 0;
  v5 = 0;
  sub_10008592C(a2, v4);
  for (i = 0; i != 16; i += 4)
    *(_DWORD *)((char *)&v6 + i) = bswap32(*(_DWORD *)((char *)v4 + i));
  BYTE6(v6) = BYTE6(v6) & 0xF | 0x50;
  return v6;
}

_DWORD *sub_1000856F4(_DWORD *result)
{
  uint64_t v1;
  const char *v2;
  uint16x8_t v3;
  uint16x8_t v4;
  uint16x8_t v13;
  uint16x8_t v14;
  int8x16_t v15;
  uint16x8_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  _OWORD v39[20];
  int8x16x4_t v40;

  v1 = 0;
  v2 = (const char *)(result + 5);
  v40 = vld4q_s8(v2);
  v3 = vmovl_u8(*(uint8x8_t *)v40.val[0].i8);
  v4 = vmovl_high_u8((uint8x16_t)v40.val[0]);
  _Q16 = vmovl_u8(*(uint8x8_t *)v40.val[1].i8);
  _Q17 = vmovl_high_u8((uint8x16_t)v40.val[1]);
  __asm
  {
    SHLL2           V18.4S, V17.8H, #0x10
    SHLL2           V19.4S, V16.8H, #0x10
  }
  v13 = vmovl_high_u8((uint8x16_t)v40.val[2]);
  v14 = vmovl_u8(*(uint8x8_t *)v40.val[2].i8);
  v15 = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v14.i8, 8uLL), (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v3.i8), 0x18uLL));
  v16 = vmovl_high_u8((uint8x16_t)v40.val[3]);
  v40.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v40.val[3].i8);
  v39[3] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_high_n_u16(v13, 8uLL), _Q18), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v4), 0x18uLL)), (int8x16_t)vmovl_high_u16(v16));
  v39[2] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v13.i8, 8uLL), (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v4.i8), 0x18uLL)), (int8x16_t)vmovl_u16(*(uint16x4_t *)v16.i8));
  v39[1] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_high_n_u16(v14, 8uLL), _Q19), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v3), 0x18uLL)), (int8x16_t)vmovl_high_u16((uint16x8_t)v40.val[0]));
  v39[0] = vorrq_s8(v15, (int8x16_t)vmovl_u16(*(uint16x4_t *)v40.val[0].i8));
  do
  {
    HIDWORD(v17) = *(_DWORD *)((char *)&v39[2] + v1) ^ *(_DWORD *)((char *)&v39[3] + v1 + 4) ^ *(_DWORD *)((char *)v39 + v1 + 8) ^ *(_DWORD *)((char *)v39 + v1);
    LODWORD(v17) = HIDWORD(v17);
    *(_DWORD *)((char *)&v39[4] + v1) = v17 >> 31;
    v1 += 4;
  }
  while (v1 != 256);
  v18 = 0;
  v19 = result[1];
  v21 = result[3];
  v20 = result[4];
  v22 = v20;
  v23 = result[2];
  v24 = v21;
  v25 = v23;
  v26 = v19;
  v27 = *result;
  do
  {
    v28 = v27;
    v29 = v25;
    v30 = v24;
    v31 = v25 ^ v26 ^ v24;
    v32 = (v24 | v29) & v26 | v24 & v29;
    if (v18 <= 0x3B)
    {
      v33 = -1894007588;
    }
    else
    {
      v32 = v31;
      v33 = -899497514;
    }
    if (v18 <= 0x27)
    {
      v34 = 1859775393;
    }
    else
    {
      v31 = v32;
      v34 = v33;
    }
    if (v18 <= 0x13)
      v31 = v30 & ~v26 | v29 & v26;
    HIDWORD(v36) = v28;
    LODWORD(v36) = v28;
    v35 = v36 >> 27;
    if (v18 <= 0x13)
      v34 = 1518500249;
    v37 = v22 + v31 + v35 + v34;
    HIDWORD(v38) = v26;
    LODWORD(v38) = v26;
    v25 = v38 >> 2;
    v27 = v37 + *((_DWORD *)v39 + v18++);
    v22 = v30;
    v24 = v29;
    v26 = v28;
  }
  while (v18 != 80);
  *result += v27;
  result[1] = v28 + v19;
  result[2] = v25 + v23;
  result[3] = v29 + v21;
  result[4] = v30 + v20;
  return result;
}

_DWORD *sub_10008592C(_DWORD *result, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = result;
  v4 = *((_QWORD *)result + 11);
  *((_QWORD *)result + 11) = v4 + 1;
  *((_BYTE *)result + v4 + 20) = 0x80;
  v5 = *((_QWORD *)result + 11);
  if (v5 == 64)
  {
    *((_QWORD *)result + 11) = 0;
    result = sub_1000856F4(result);
    v5 = *((_QWORD *)v3 + 11);
  }
  if (v5 < 0x39)
  {
    if (v5 != 56)
    {
      do
      {
        *((_QWORD *)v3 + 11) = v5 + 1;
        *((_BYTE *)v3 + v5 + 20) = 0;
        v5 = *((_QWORD *)v3 + 11);
      }
      while (v5 < 0x38);
    }
  }
  else
  {
    do
    {
      *((_QWORD *)v3 + 11) = v5 + 1;
      *((_BYTE *)v3 + v5 + 20) = 0;
      v5 = *((_QWORD *)v3 + 11);
      if (v5 == 64)
      {
        *((_QWORD *)v3 + 11) = 0;
        result = sub_1000856F4(v3);
        v5 = *((_QWORD *)v3 + 11);
      }
    }
    while (v5);
    v6 = 0;
    do
    {
      v5 = v6 + 1;
      *((_BYTE *)v3 + v6 + 20) = 0;
    }
    while (v6++ < 0x37);
  }
  v8 = *((_QWORD *)v3 + 13) >> 24;
  *((_QWORD *)v3 + 11) = v5 + 1;
  *((_BYTE *)v3 + v5 + 20) = v8;
  v9 = *((_QWORD *)v3 + 11);
  if (v9 == 64)
  {
    *((_QWORD *)v3 + 11) = 0;
    result = sub_1000856F4(v3);
    v9 = *((_QWORD *)v3 + 11);
  }
  v10 = *((_QWORD *)v3 + 13) >> 16;
  *((_QWORD *)v3 + 11) = v9 + 1;
  *((_BYTE *)v3 + v9 + 20) = v10;
  v11 = *((_QWORD *)v3 + 11);
  if (v11 == 64)
  {
    *((_QWORD *)v3 + 11) = 0;
    result = sub_1000856F4(v3);
    v11 = *((_QWORD *)v3 + 11);
  }
  v12 = *((_QWORD *)v3 + 13) >> 8;
  *((_QWORD *)v3 + 11) = v11 + 1;
  *((_BYTE *)v3 + v11 + 20) = v12;
  v13 = *((_QWORD *)v3 + 11);
  if (v13 == 64)
  {
    *((_QWORD *)v3 + 11) = 0;
    result = sub_1000856F4(v3);
    v13 = *((_QWORD *)v3 + 11);
  }
  v14 = *((_QWORD *)v3 + 13);
  *((_QWORD *)v3 + 11) = v13 + 1;
  *((_BYTE *)v3 + v13 + 20) = v14;
  v15 = *((_QWORD *)v3 + 11);
  if (v15 == 64)
  {
    *((_QWORD *)v3 + 11) = 0;
    result = sub_1000856F4(v3);
    v15 = *((_QWORD *)v3 + 11);
  }
  v16 = *((_QWORD *)v3 + 12) >> 24;
  *((_QWORD *)v3 + 11) = v15 + 1;
  *((_BYTE *)v3 + v15 + 20) = v16;
  v17 = *((_QWORD *)v3 + 11);
  if (v17 == 64)
  {
    *((_QWORD *)v3 + 11) = 0;
    result = sub_1000856F4(v3);
    v17 = *((_QWORD *)v3 + 11);
  }
  v18 = *((_QWORD *)v3 + 12) >> 16;
  *((_QWORD *)v3 + 11) = v17 + 1;
  *((_BYTE *)v3 + v17 + 20) = v18;
  v19 = *((_QWORD *)v3 + 11);
  if (v19 == 64)
  {
    *((_QWORD *)v3 + 11) = 0;
    result = sub_1000856F4(v3);
    v19 = *((_QWORD *)v3 + 11);
  }
  v20 = *((_QWORD *)v3 + 12) >> 8;
  *((_QWORD *)v3 + 11) = v19 + 1;
  *((_BYTE *)v3 + v19 + 20) = v20;
  v21 = *((_QWORD *)v3 + 11);
  if (v21 == 64)
  {
    *((_QWORD *)v3 + 11) = 0;
    result = sub_1000856F4(v3);
    v21 = *((_QWORD *)v3 + 11);
  }
  v22 = *((_QWORD *)v3 + 12);
  *((_QWORD *)v3 + 11) = v21 + 1;
  *((_BYTE *)v3 + v21 + 20) = v22;
  if (*((_QWORD *)v3 + 11) == 64)
  {
    *((_QWORD *)v3 + 11) = 0;
    result = sub_1000856F4(v3);
  }
  *a2 = *v3;
  a2[1] = v3[1];
  a2[2] = v3[2];
  a2[3] = v3[3];
  a2[4] = v3[4];
  return result;
}

void sub_100085BB8()
{
  operator new();
}

uint64_t sub_100085C8C()
{
  return 1;
}

uint64_t sub_100085CA0(uint64_t result)
{
  uint64_t v1;
  void *v2;

  if (result)
  {
    v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 104));

    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      *(_QWORD *)(v1 + 80) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_100085CF8(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD **)(a1 + 80);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD *)(a1 + 72);
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_100017E44();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_1000193CC(a1 + 88, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = v14 + 8;
    v17 = *(char **)(a1 + 72);
    v16 = *(char **)(a1 + 80);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = *(char **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v7;
    *(_QWORD *)(a1 + 88) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 80) = v7;
  std::mutex::unlock(v4);
  return 0;
}

void sub_100085DF8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100085E0C(uint64_t a1)
{
  std::mutex *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD block[5];
  void *__p;
  void *v13;
  uint64_t v14;
  std::locale v15;

  v2 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  v3 = *(void **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::mutex::unlock(v2);
  v5 = sub_100005A0C(&std::cerr, (uint64_t)"raw plugin: going to execute ", 29);
  v6 = (_QWORD *)std::ostream::operator<<(v5, (v4 - (uint64_t)v3) >> 3);
  v7 = sub_100005A0C(v6, (uint64_t)" SQEs", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v8 = std::locale::use_facet(&v15, &std::ctype<char>::id);
  v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v15);
  std::ostream::put(v7, v9);
  std::ostream::flush(v7);
  v10 = *(NSObject **)(a1 + 96);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_100085F90;
  block[3] = &unk_10017EB18;
  block[4] = a1;
  __p = 0;
  v13 = 0;
  v14 = 0;
  sub_100086624(&__p, v3, v4, (v4 - (uint64_t)v3) >> 3);
  dispatch_async(v10, block);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (v3)
    operator delete(v3);
}

void sub_100085F68(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::locale::~locale((std::locale *)(v2 - 56));
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100085F90(_QWORD *result)
{
  uint64_t **v1;
  uint64_t **v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;

  v1 = (uint64_t **)result[5];
  v2 = (uint64_t **)result[6];
  if (v1 != v2)
  {
    v3 = result[4];
    do
    {
      v4 = *v1;
      v5 = -45;
      switch(*(_BYTE *)*v1)
      {
        case 2:
          v6 = sub_100086068(*(_QWORD *)(v3 + 64), v4 + 3, (uint64_t (*)(_QWORD))&_preadv);
          goto LABEL_7;
        case 4:
          v6 = sub_1000862E4(*(_QWORD *)(v3 + 64), v4 + 3, (uint64_t (*)(_QWORD))&_pwritev);
          goto LABEL_7;
        case 5:
          v6 = sub_100086560(*(_QWORD *)(v3 + 64));
LABEL_7:
          v5 = v6;
          break;
        case 6:
          v5 = 0;
          break;
        default:
          break;
      }
      result = (_QWORD *)io_rings_return_status(*(_QWORD *)(v3 + 56), (uint64_t)v4, v5, 0);
      ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_100086068(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  int v14;
  uint64_t v15;
  NSObject *v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  int v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;

  v4 = *a2;
  v5 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = v5 << 9;
    v8 = (unint64_t *)(v4 + 8);
    while (1)
    {
      v9 = *v8;
      v8 += 2;
      v10 = v7 >= v9;
      v7 -= v9;
      if (!v10)
        break;
      ++v6;
      if (!v7)
        goto LABEL_8;
    }
    v6 = -22;
  }
  else
  {
    v6 = 0;
  }
LABEL_8:
  v11 = a2[1] << 9;
  v12 = a3(*(unsigned int *)(a1 + 100));
  if ((v12 & 0x80000000) == 0)
    return v12 >> 9;
  v14 = *__error();
  if (sub_1000BF0BC())
  {
    v27 = 0;
    v15 = sub_1000BF044();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    v18 = *__error();
    if (v17)
      v19 = 3;
    else
      v19 = 2;
    *(_DWORD *)buf = 68158722;
    v29 = 132;
    v30 = 2080;
    v31 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_ri"
          "ngs_sqe_op_read_iov_t]";
    v32 = 2048;
    v33 = v11;
    v34 = 1024;
    v35 = v6;
    v36 = 1024;
    v37 = v18;
    LODWORD(v25) = 40;
    v20 = (char *)_os_log_send_and_compose_impl(v19, &v27, 0, 0, &_mh_execute_header, v16, 16, "%.*s: I/O error at offset %lld iov_count %d errno %d", (int)buf, v25, v26);

    if (v20)
    {
      fprintf(__stderrp, "%s\n", v20);
      free(v20);
    }
  }
  else
  {
    v21 = sub_1000BF044();
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = *__error();
      *(_DWORD *)buf = 68158722;
      v29 = 132;
      v30 = 2080;
      v31 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_"
            "rings_sqe_op_read_iov_t]";
      v32 = 2048;
      v33 = v11;
      v34 = 1024;
      v35 = v6;
      v36 = 1024;
      v37 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%.*s: I/O error at offset %lld iov_count %d errno %d", buf, 0x28u);
    }

  }
  *__error() = v14;
  v24 = *__error();
  if (v24 < 0)
    return v24;
  else
    return -v24;
}

void sub_1000862C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1000862E4(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  int v14;
  uint64_t v15;
  NSObject *v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  int v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;

  v4 = *a2;
  v5 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = v5 << 9;
    v8 = (unint64_t *)(v4 + 8);
    while (1)
    {
      v9 = *v8;
      v8 += 2;
      v10 = v7 >= v9;
      v7 -= v9;
      if (!v10)
        break;
      ++v6;
      if (!v7)
        goto LABEL_8;
    }
    v6 = -22;
  }
  else
  {
    v6 = 0;
  }
LABEL_8:
  v11 = a2[1] << 9;
  v12 = a3(*(unsigned int *)(a1 + 100));
  if ((v12 & 0x80000000) == 0)
    return v12 >> 9;
  v14 = *__error();
  if (sub_1000BF0BC())
  {
    v27 = 0;
    v15 = sub_1000BF044();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    v18 = *__error();
    if (v17)
      v19 = 3;
    else
      v19 = 2;
    *(_DWORD *)buf = 68158722;
    v29 = 133;
    v30 = 2080;
    v31 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_ri"
          "ngs_sqe_op_write_iov_t]";
    v32 = 2048;
    v33 = v11;
    v34 = 1024;
    v35 = v6;
    v36 = 1024;
    v37 = v18;
    LODWORD(v25) = 40;
    v20 = (char *)_os_log_send_and_compose_impl(v19, &v27, 0, 0, &_mh_execute_header, v16, 16, "%.*s: I/O error at offset %lld iov_count %d errno %d", (int)buf, v25, v26);

    if (v20)
    {
      fprintf(__stderrp, "%s\n", v20);
      free(v20);
    }
  }
  else
  {
    v21 = sub_1000BF044();
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = *__error();
      *(_DWORD *)buf = 68158722;
      v29 = 133;
      v30 = 2080;
      v31 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_"
            "rings_sqe_op_write_iov_t]";
      v32 = 2048;
      v33 = v11;
      v34 = 1024;
      v35 = v6;
      v36 = 1024;
      v37 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%.*s: I/O error at offset %lld iov_count %d errno %d", buf, 0x28u);
    }

  }
  *__error() = v14;
  v24 = *__error();
  if (v24 < 0)
    return v24;
  else
    return -v24;
}

void sub_100086544(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100086560(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = fcntl(*(_DWORD *)(a1 + 100), 51, 0);
  if ((_DWORD)result != -1)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_8;
  }
  if (*__error() != 22 && *__error() != 25 && *__error() != 45
    || (result = fsync(*(_DWORD *)(a1 + 100)), (_DWORD)result))
  {
LABEL_8:
    v3 = *__error();
    if (v3 < 0)
      return v3;
    else
      return -v3;
  }
  return result;
}

_QWORD *sub_1000865F0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = (_QWORD *)(a1 + 40);
  v2[2] = 0;
  return sub_100086624(v2, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3);
}

void sub_10008660C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

_QWORD *sub_100086624(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_10008669C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100086680(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10008669C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_100017E44();
  result = (char *)sub_1000193CC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t sub_1000866DC()
{
  __int128 v1;
  int v2;
  _QWORD v3[45];
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)&v1 = "rawTestPlugin_t::subscriber_t::_suspend()";
  *((_QWORD *)&v1 + 1) = 39;
  v2 = 0;
  sub_100086774(v3, &v1);
  sub_100005A0C(&v4, (uint64_t)"Suspended", 9);
  std::ostream::~ostream(&v4, off_10017EC28);
  sub_1000868D8((uint64_t)v3);
  return std::ios::~ios(&v5);
}

void sub_100086760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10008681C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100086774(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10008685C((uint64_t)a1, a2);
  *a1 = off_10017EB60;
  a1[45] = &off_10017EC60;
  a1[46] = &off_10017EC88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017EB60;
  a1[45] = off_10017EBE8;
  a1[46] = off_10017EC10;
  return a1;
}

void sub_1000867F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000868D8(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10008681C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017EC28);
  sub_1000868D8(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10008685C(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017ECF8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000868C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000868D8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017ECF8;
  sub_100086B90(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100086974(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017EC28);
  sub_1000868D8(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000869C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000869FC(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100086A48(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017EC28);
  sub_1000868D8(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100086A80(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017EC28);
  sub_1000868D8(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100086AD0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017EC28);
  sub_1000868D8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100086B10(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017EC28);
  sub_1000868D8(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100086B6C(uint64_t a1)
{
  sub_1000868D8(a1);
  operator delete();
}

uint64_t sub_100086B90(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100086CE0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100086CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100086CE0(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  int *result;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v19 = 0;
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16)))
      v9 = 3;
    else
      v9 = 2;
    v10 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v21 = v4;
    v22 = 2080;
    v23 = v10;
    v24 = 2048;
    v25 = 121;
    v26 = 2082;
    v27 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(v9, &v19, 0, 0, &_mh_execute_header, v7, v8, "%.*s: <%lu> %{public}s", buf, 38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v21 = v4;
      v22 = 2080;
      v23 = v16;
      v24 = 2048;
      v25 = 121;
      v26 = 2082;
      v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100086ED4()
{
  __int128 v1;
  int v2;
  _QWORD v3[45];
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)&v1 = "rawTestPlugin_t::subscriber_t::_resume()";
  *((_QWORD *)&v1 + 1) = 38;
  v2 = 0;
  sub_100086F6C(v3, &v1);
  sub_100005A0C(&v4, (uint64_t)"Resumed", 7);
  std::ostream::~ostream(&v4, off_10017EE48);
  sub_1000870D0((uint64_t)v3);
  return std::ios::~ios(&v5);
}

void sub_100086F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100087014((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100086F6C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100087054((uint64_t)a1, a2);
  *a1 = off_10017ED80;
  a1[45] = &off_10017EE80;
  a1[46] = &off_10017EEA8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017ED80;
  a1[45] = off_10017EE08;
  a1[46] = off_10017EE30;
  return a1;
}

void sub_100086FF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000870D0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100087014(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017EE48);
  sub_1000870D0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100087054(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017EF18;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000870BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000870D0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017EF18;
  sub_100087388(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10008716C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017EE48);
  sub_1000870D0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000871C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000871F4(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100087240(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017EE48);
  sub_1000870D0(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100087278(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017EE48);
  sub_1000870D0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_1000872C8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017EE48);
  sub_1000870D0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100087308(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017EE48);
  sub_1000870D0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100087364(uint64_t a1)
{
  sub_1000870D0(a1);
  operator delete();
}

uint64_t sub_100087388(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000874D8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1000874B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_1000874D8(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  int *result;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v19 = 0;
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16)))
      v9 = 3;
    else
      v9 = 2;
    v10 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v21 = v4;
    v22 = 2080;
    v23 = v10;
    v24 = 2048;
    v25 = 122;
    v26 = 2082;
    v27 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(v9, &v19, 0, 0, &_mh_execute_header, v7, v8, "%.*s: <%lu> %{public}s", buf, 38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v21 = v4;
      v22 = 2080;
      v23 = v16;
      v24 = 2048;
      v25 = 122;
      v26 = 2082;
      v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_1000876CC(uint64_t a1)
{
  __int128 v2;
  int v3;
  _QWORD v4[45];
  uint64_t v5;
  uint64_t v6;

  dispatch_barrier_sync(*(dispatch_queue_t *)(a1 + 96), &stru_10017EF88);
  *(_QWORD *)&v2 = "rawTestPlugin_t::subscriber_t::_cancel()";
  *((_QWORD *)&v2 + 1) = 38;
  v3 = 0;
  sub_100087778(v4, &v2);
  sub_100005A0C(&v5, (uint64_t)"Cancelled", 9);
  std::ostream::~ostream(&v5, off_10017F088);
  sub_1000878DC((uint64_t)v4);
  return std::ios::~ios(&v6);
}

void sub_100087760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100087820((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100087778(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100087860((uint64_t)a1, a2);
  *a1 = off_10017EFC0;
  a1[45] = &off_10017F0C0;
  a1[46] = &off_10017F0E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017EFC0;
  a1[45] = off_10017F048;
  a1[46] = off_10017F070;
  return a1;
}

void sub_1000877FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000878DC(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100087820(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017F088);
  sub_1000878DC(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100087860(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017F158;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_1000878C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000878DC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017F158;
  sub_100087B94(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100087978(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017F088);
  sub_1000878DC(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_1000879CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100087A00(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100087A4C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017F088);
  sub_1000878DC(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100087A84(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017F088);
  sub_1000878DC(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100087AD4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017F088);
  sub_1000878DC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100087B14(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017F088);
  sub_1000878DC(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100087B70(uint64_t a1)
{
  sub_1000878DC(a1);
  operator delete();
}

uint64_t sub_100087B94(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100087CE4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100087CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_100087CE4(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  int *result;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v19 = 0;
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16)))
      v9 = 3;
    else
      v9 = 2;
    v10 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v21 = v4;
    v22 = 2080;
    v23 = v10;
    v24 = 2048;
    v25 = 118;
    v26 = 2082;
    v27 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(v9, &v19, 0, 0, &_mh_execute_header, v7, v8, "%.*s: <%lu> %{public}s", buf, 38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v21 = v4;
      v22 = 2080;
      v23 = v16;
      v24 = 2048;
      v25 = 118;
      v26 = 2082;
      v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sub_100087ED8(uint64_t a1, void (*a2)(uint64_t, const char *, id, char *), void (*a3)(uint64_t, const char *, _QWORD), uint64_t a4)
{
  a3(a4, "fd", *(unsigned int *)(a1 + 100));
  a2(a4, "path", objc_msgSend(*(id *)(a1 + 88), "UTF8String"), (char *)objc_msgSend(*(id *)(a1 + 88), "length") + 1);
  return ((uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))a2)(a4, "writable", a1 + 96, 1);
}

void sub_100087F6C(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

uint64_t sub_100087F90(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_100087F98(uint64_t a1)
{
  __int128 v3;
  int v4;
  _QWORD v5[45];
  uint64_t v6;
  uint64_t v7;

  close(*(_DWORD *)(a1 + 100));
  *(_QWORD *)&v3 = "rawTestPlugin_t::~rawTestPlugin_t()";
  *((_QWORD *)&v3 + 1) = 33;
  v4 = 0;
  sub_10008803C(v5, &v3);
  sub_100005A0C(&v6, (uint64_t)"Cleaning up!", 12);
  std::ostream::~ostream(&v6, off_10017F2D0);
  sub_1000881A0((uint64_t)v5);
  std::ios::~ios(&v7);

  return a1;
}

_QWORD *sub_10008803C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100088124((uint64_t)a1, a2);
  *a1 = off_10017F208;
  a1[45] = &off_10017F308;
  a1[46] = &off_10017F330;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017F208;
  a1[45] = off_10017F290;
  a1[46] = off_10017F2B8;
  return a1;
}

void sub_1000880C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000881A0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000880E4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017F2D0);
  sub_1000881A0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_100088124(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017F3A0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10008818C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000881A0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017F3A0;
  sub_100088458(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10008823C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017F2D0);
  sub_1000881A0(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100088290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_1000882C4(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

uint64_t sub_100088310(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017F2D0);
  sub_1000881A0(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100088348(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017F2D0);
  sub_1000881A0(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

uint64_t sub_100088398(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017F2D0);
  sub_1000881A0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000883D8(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017F2D0);
  sub_1000881A0(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

void sub_100088434(uint64_t a1)
{
  sub_1000881A0(a1);
  operator delete();
}

uint64_t sub_100088458(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_1000885A8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100088580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_1000885A8(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  int *result;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v19 = 0;
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16)))
      v9 = 3;
    else
      v9 = 2;
    v10 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v21 = v4;
    v22 = 2080;
    v23 = v10;
    v24 = 2048;
    v25 = 325;
    v26 = 2082;
    v27 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(v9, &v19, 0, 0, &_mh_execute_header, v7, v8, "%.*s: <%lu> %{public}s", buf, 38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v21 = v4;
      v22 = 2080;
      v23 = v16;
      v24 = 2048;
      v25 = 325;
      v26 = 2082;
      v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

void sub_100088BE0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  id v13;
  void *v14;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  if (a2 == 1)
  {
    v13 = objc_begin_catch(a1);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "reason"));
    +[DIError failWithEnumValue:verboseInfo:error:](DIError, "failWithEnumValue:verboseInfo:error:", 150, v14, v10);

    objc_end_catch();
    JUMPOUT(0x100088BA8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100088C7C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100088C8C(uint64_t a1)
{

}

id sub_100088C94(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "signalCommandCompletedWithXpcError:", a2);
}

void sub_100088E54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100088F64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000890EC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v17;
  void *v18;

  v14 = v13;

  if (a11)
    operator delete[]();
  if (a2 == 1)
  {
    v17 = __cxa_begin_catch(a1);
    (*(void (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Invalid public key: %s")));
    +[DIError failWithPOSIXCode:verboseInfo:error:](DIError, "failWithPOSIXCode:verboseInfo:error:", 22, v18, v12);

    __cxa_end_catch();
    JUMPOUT(0x100089024);
  }

  _Unwind_Resume(a1);
}

void sub_100089388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000896AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_100089820(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100089938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100089CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 16))(a12);
  _Unwind_Resume(exception_object);
}

void sub_10008A0B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10008A374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10008A584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10008A694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10008A7C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10008A8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;

  if (a10)
    operator delete();

  _Unwind_Resume(a1);
}

_DWORD *sub_10008A94C(_DWORD *result, int a2)
{
  _QWORD *exception;

  *result = a2;
  if (a2 != 128 && a2 != 256)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid value";
    exception[3] = "value validator";
    *exception = &off_100175450;
    exception[1] = "encryption_key_bits_size_t";
    *((_DWORD *)exception + 8) = a2;
  }
  return result;
}

void sub_10008A9C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;

  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  *(_QWORD *)&v26 = *a1;
  *((_QWORD *)&v26 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v24 = v3;
    v25 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v24 = v3;
    v25 = 0;
  }
  do
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v26 + 168))(v26, a2);
    sub_100027CB4(&v24, (uint64_t *)&v26);
    sub_10011EB40((uint64_t)&v26, &v23);
    v8 = v23;
    v23 = 0uLL;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    v26 = v8;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v26;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    v14 = v24;
    if (*((_QWORD *)&v23 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  while (v12 != v14);
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_10008AB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_100012168((uint64_t)va);
  sub_100012168((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10008AB70(uint64_t *a1, _QWORD **a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *((_BYTE *)a1 + 80) = 0;
  *((_BYTE *)a1 + 88) = 0;
  *((_BYTE *)a1 + 96) = 0;
  *((_BYTE *)a1 + 104) = 0;
  *((_BYTE *)a1 + 128) = 0;
  *((_BYTE *)a1 + 136) = 0;
  a1[18] = 0;
  *a1 = (uint64_t)off_10017F488;
  a1[1] = (uint64_t)off_10017F4D0;
  a1[2] = (uint64_t)off_10017F518;
  a1[3] = (uint64_t)off_10017F560;
  a1[4] = (uint64_t)off_10017F5A8;
  a1[5] = (uint64_t)off_10017F5F0;
  a1[6] = (uint64_t)off_10017F638;
  a1[7] = (uint64_t)off_10017F698;
  a1[15] = (uint64_t)off_10017F708;
  v4 = (uint64_t *)(a2 + 2);
  v5 = (*(uint64_t (**)(_QWORD *))(*a2[2] + 40))(a2[2]);
  v6 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 112) + 8) = v5;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v6 - 112) + 56) = 0;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 112) + 16) = ((uint64_t (*)(_QWORD **))(*a2)[4])(a2);
  v7 = ((uint64_t (*)(_QWORD **))(*a2)[3])(a2);
  v8 = (uint64_t)a1 + *(_QWORD *)(*a1 - 112);
  if (!*(_BYTE *)(v8 + 32))
    *(_BYTE *)(v8 + 32) = 1;
  *(_QWORD *)(v8 + 24) = v7;
  sub_10008A9C4(v4, (uint64_t)a1 + *(_QWORD *)(*a1 - 104));
  return a1;
}

void sub_10008AC8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;

  *(_QWORD *)(v1 + 120) = off_10017F778;
  *(_QWORD *)(v1 + 24) = off_10017F7D0;
  sub_100027D2C(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_10008ACB8(uint64_t *a1, _QWORD **a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *((_BYTE *)a1 + 80) = 0;
  *((_BYTE *)a1 + 88) = 0;
  *((_BYTE *)a1 + 96) = 0;
  *((_BYTE *)a1 + 104) = 0;
  *((_BYTE *)a1 + 128) = 0;
  *((_BYTE *)a1 + 136) = 0;
  a1[18] = 0;
  *a1 = (uint64_t)off_10017F488;
  a1[1] = (uint64_t)off_10017F4D0;
  a1[2] = (uint64_t)off_10017F518;
  a1[3] = (uint64_t)off_10017F560;
  a1[4] = (uint64_t)off_10017F5A8;
  a1[5] = (uint64_t)off_10017F5F0;
  a1[6] = (uint64_t)off_10017F638;
  a1[7] = (uint64_t)off_10017F698;
  a1[15] = (uint64_t)off_10017F708;
  v4 = (uint64_t *)(a2 + 2);
  v5 = (*(uint64_t (**)(_QWORD *))(*a2[2] + 40))(a2[2]);
  v6 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 112) + 8) = v5;
  v7 = (uint64_t)a1 + *(_QWORD *)(v6 - 112);
  *(_QWORD *)(v7 + 40) = *(_QWORD *)(v7 + 8);
  *(_BYTE *)(v7 + 48) = 1;
  v8 = (uint64_t)a1 + *(_QWORD *)(*a1 - 112);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(v8 + 8);
  *(_BYTE *)(v8 + 32) = 1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 112) + 56) = 0;
  v9 = ((uint64_t (*)(_QWORD **))(*a2)[4])(a2);
  v10 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 112) + 16) = v9;
  sub_10008A9C4(v4, (uint64_t)a1 + *(_QWORD *)(v10 - 104));
  return a1;
}

void sub_10008ADD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;

  *(_QWORD *)(v1 + 120) = off_10017F778;
  *(_QWORD *)(v1 + 24) = off_10017F7D0;
  sub_100027D2C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10008ADFC(uint64_t a1)
{
  *(_QWORD *)(a1 + 120) = off_10017F778;
  *(_QWORD *)(a1 + 24) = off_10017F7D0;
  sub_100027D2C((const void **)(a1 + 144));
  return a1;
}

void sub_10008AE38(uint64_t a1)
{
  *(_QWORD *)(a1 + 120) = off_10017F778;
  *(_QWORD *)(a1 + 24) = off_10017F7D0;
  sub_100027D2C((const void **)(a1 + 144));
  operator delete();
}

const void **sub_10008AE84@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  const void **result;
  uint64_t v7[2];
  const void *v8;
  const void *v9;
  _QWORD v10[8];

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v10[0] = CFSTR("Image Format");
  v10[1] = v4;
  v10[2] = CFSTR("Format Description");
  v10[3] = CFSTR("RAW read-write image");
  sub_100026A84(a1 + *(_QWORD *)(*(_QWORD *)a1 - 112), &v9);
  v10[4] = CFSTR("Size Info");
  v10[5] = v9;
  v9 = 0;
  sub_100012138(&v9);
  sub_100026DA8(a1 + *(_QWORD *)(*(_QWORD *)a1 - 120), &v9);
  v10[6] = CFSTR("Encryption Info");
  v10[7] = v9;
  v9 = 0;
  sub_100012138(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 4;
  sub_1000FE38C(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  v8 = 0;
  sub_100028068(&v8);
  for (i = 7; i != -1; i -= 2)
    result = sub_100028038((const void **)&v10[i]);
  return result;
}

void sub_10008AFBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 56; i != -8; i -= 16)
    sub_100028038((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

const __CFString *sub_10008B000()
{
  return CFSTR("RAW");
}

const void **sub_10008B00C(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *((_QWORD *)v1 + 15) = off_10017F778;
  *((_QWORD *)v1 + 3) = off_10017F7D0;
  return sub_100027D2C((const void **)v1 + 18);
}

void sub_10008B034(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *((_QWORD *)v1 + 15) = off_10017F778;
  *((_QWORD *)v1 + 3) = off_10017F7D0;
  sub_100027D2C((const void **)v1 + 18);
  operator delete();
}

const void **sub_10008B088(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 32);
  *((_QWORD *)v1 + 15) = off_10017F778;
  *((_QWORD *)v1 + 3) = off_10017F7D0;
  return sub_100027D2C((const void **)v1 + 18);
}

void sub_10008B0B0(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 32);
  *((_QWORD *)v1 + 15) = off_10017F778;
  *((_QWORD *)v1 + 3) = off_10017F7D0;
  sub_100027D2C((const void **)v1 + 18);
  operator delete();
}

const void **sub_10008B104@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10008AE84((uint64_t)a1 + *(_QWORD *)(*a1 - 40), a2);
}

const __CFString *sub_10008B114()
{
  return CFSTR("RAW");
}

uint64_t sub_10008B120(uint64_t a1, uint64_t *a2)
{
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = off_10017F8A8;
  *(_QWORD *)(a1 + 8) = off_10017F8F0;
  *(_QWORD *)(a1 + 16) = off_10017F938;
  *(_QWORD *)(a1 + 24) = off_10017F980;
  *(_QWORD *)(a1 + 32) = off_10017F9C8;
  *(_QWORD *)(a1 + 40) = off_10017FA10;
  *(_QWORD *)(a1 + 48) = off_10017FA58;
  *(_QWORD *)(a1 + 56) = off_10017FAB8;
  sub_100114BE4(*a2, (char *)a1);
  return a1;
}

void sub_10008B198(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;

  *(_QWORD *)(v1 + 56) = off_10017FB28;
  *(_QWORD *)(v1 + 24) = off_10017FB80;
  sub_100027D2C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10008B1C0(uint64_t a1)
{
  *(_QWORD *)(a1 + 56) = off_10017FB28;
  *(_QWORD *)(a1 + 24) = off_10017FB80;
  sub_100027D2C((const void **)(a1 + 80));
  return a1;
}

void sub_10008B1FC(uint64_t a1)
{
  *(_QWORD *)(a1 + 56) = off_10017FB28;
  *(_QWORD *)(a1 + 24) = off_10017FB80;
  sub_100027D2C((const void **)(a1 + 80));
  operator delete();
}

const void **sub_10008B248@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  const void **result;
  uint64_t v7[2];
  const void *v8;
  const void *v9;
  _QWORD v10[6];

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v10[0] = CFSTR("Image Format");
  v10[1] = v4;
  v10[2] = CFSTR("Format Description");
  v10[3] = CFSTR("Locked encrypted image");
  sub_100026DA8(a1 + *(_QWORD *)(*(_QWORD *)a1 - 112), &v9);
  v10[4] = CFSTR("Encryption Info");
  v10[5] = v9;
  v9 = 0;
  sub_100012138(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 3;
  sub_1000FE38C(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  v8 = 0;
  sub_100028068(&v8);
  for (i = 5; i != -1; i -= 2)
    result = sub_100028038((const void **)&v10[i]);
  return result;
}

void sub_10008B344(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 40; i != -8; i -= 16)
    sub_100028038((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

const __CFString *sub_10008B38C()
{
  return CFSTR("Unknown");
}

const void **sub_10008B398(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *((_QWORD *)v1 + 7) = off_10017FB28;
  *((_QWORD *)v1 + 3) = off_10017FB80;
  return sub_100027D2C((const void **)v1 + 10);
}

void sub_10008B3C0(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *((_QWORD *)v1 + 7) = off_10017FB28;
  *((_QWORD *)v1 + 3) = off_10017FB80;
  sub_100027D2C((const void **)v1 + 10);
  operator delete();
}

const void **sub_10008B414(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 32);
  *((_QWORD *)v1 + 7) = off_10017FB28;
  *((_QWORD *)v1 + 3) = off_10017FB80;
  return sub_100027D2C((const void **)v1 + 10);
}

void sub_10008B43C(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 32);
  *((_QWORD *)v1 + 7) = off_10017FB28;
  *((_QWORD *)v1 + 3) = off_10017FB80;
  sub_100027D2C((const void **)v1 + 10);
  operator delete();
}

const void **sub_10008B490@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10008B248((uint64_t)a1 + *(_QWORD *)(*a1 - 40), a2);
}

const __CFString *sub_10008B4A0()
{
  return CFSTR("Unknown");
}

void sub_10008BC08()
{
  JUMPOUT(0x10008BC10);
}

void sub_10008BC18()
{
  void *v0;

  JUMPOUT(0x10008BC4CLL);
}

void sub_10008BC28()
{
  JUMPOUT(0x10008BC54);
}

void sub_10008BC34()
{
  JUMPOUT(0x10008BC6CLL);
}

void sub_10008BC60()
{
  void *v0;

  JUMPOUT(0x10008BC7CLL);
}

void sub_10008BC74(_Unwind_Exception *a1, int a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v6;
  void *v7;

  if (a2 == 1)
  {
    v6 = __cxa_begin_catch(a1);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "path"));
    objc_claimAutoreleasedReturnValue(+[DIError nilWithDIException:prefix:error:](DIError, "nilWithDIException:prefix:error:", v6, v7, v3));

    __cxa_end_catch();
    JUMPOUT(0x10008B534);
  }

  _Unwind_Resume(a1);
}

#error "10008BFF0: call analysis failed (funcsize=134)"

void sub_10008C1B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10008C3F4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, AEAAuthData a13, uint64_t a14)
{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v19;

  sub_100012168((uint64_t)&a9);
  sub_100012168((uint64_t)&a11);
  sub_100092664((uint64_t)&a14);
  sub_1000ED6E0(&a13);
  sub_100012168(v16 - 48);
  if (a2 == 1)
  {
    v19 = +[DIError nilWithDIException:description:error:](DIError, "nilWithDIException:description:error:", __cxa_begin_catch(a1), CFSTR("Error while creating AEA backend"), v15);
    objc_claimAutoreleasedReturnValue(v19);
    __cxa_end_catch();
    JUMPOUT(0x10008C3D8);
  }

  _Unwind_Resume(a1);
}

void sub_10008C68C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10008C69C(void *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_1000ED38C((AAByteStream *)va);
  __cxa_begin_catch(a1);
  objc_claimAutoreleasedReturnValue(+[DIError nilWithEnumValue:verboseInfo:error:](DIError, "nilWithEnumValue:verboseInfo:error:", 150, CFSTR("Error checking for AEA file"), v2));
  __cxa_end_catch();
  JUMPOUT(0x10008C5E4);
}

void sub_10008C6EC(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100012168((uint64_t)va);
  JUMPOUT(0x10008C690);
}

void sub_10008C890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::string *a19, uint64_t a20,uint64_t a21,uint8_t buf,int a23,uint64_t a24,uint64_t bufa,__int16 a26,uint64_t a27)
{
  void *v27;
  uint64_t v28;
  uint64_t v30;
  id v31;

  v30 = a24;
  a24 = 0;
  if (v30)
    operator delete();
  if (a2 == 2)
  {
    v31 = +[DIError nilWithDIException:description:error:](DIError, "nilWithDIException:description:error:", __cxa_begin_catch(a1), 0, v28);
    objc_claimAutoreleasedReturnValue(v31);
    __cxa_end_catch();
    JUMPOUT(0x10008C854);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    objc_msgSend(v27, "backend");
    sub_1000F7E60(&bufa, &a19);
    sub_100012168((uint64_t)&a19);
    sub_10008CE28();
  }

  _Unwind_Resume(a1);
}

void sub_10008CE28()
{
  operator new();
}

void sub_10008D018(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10008D0D8(_Unwind_Exception *a1, int a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:](DIError, "failWithDIException:prefix:error:", __cxa_begin_catch(a1), CFSTR("Error encrypting new image"), v3);
    __cxa_end_catch();
    JUMPOUT(0x10008D0BCLL);
  }

  _Unwind_Resume(a1);
}

void sub_10008D1F4(_Unwind_Exception *a1, int a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:](DIError, "failWithDIException:prefix:error:", __cxa_begin_catch(a1), CFSTR("Error encrypting new image"), v3);
    __cxa_end_catch();
    JUMPOUT(0x10008D1D8);
  }

  _Unwind_Resume(a1);
}

void sub_10008D2F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10008D624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_10000FE34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10008D634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint8_t buf,int a27,__int16 a28,uint64_t a29,__int16 a30,uint64_t a31)
{
  void *v31;

  sub_10000FE34((uint64_t)&buf);
  __cxa_free_exception(v31);
  _Unwind_Resume(a1);
}

void sub_10008D678()
{
  JUMPOUT(0x10008D684);
}

#error "10008D7C0: call analysis failed (funcsize=133)"

void sub_10008D8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008D8E0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_10008D8F8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x10008D900);
  sub_1000054BC(a1);
}

void sub_10008DABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10008E5C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint8_t buf,int a51,__int16 a52,__int16 a53,int a54,__int16 a55,__int16 a56,__int16 a57)
{
  __break(1u);
}

void sub_10008EB0C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_10008EB30(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_10008EB3C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1000054BC(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_10008EB58(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = a2;
  v6 = a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if (v6 >= v9)
  {
    v10 = *a1;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      sub_100017E44();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v10) >> 3);
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v10) >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= v11)
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v13 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v14;
    v22 = v7;
    if (v15)
      v16 = (char *)sub_100051F8C(v7, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[24 * v12];
    v20 = v19;
    v21 = &v16[24 * v15];
    sub_100092774(&v18, a3);
    v4 = sub_1000928C0(a1, &v18, v4);
    sub_100051FD0((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    *(__n128 *)a2 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    *(_DWORD *)(a2 + 16) = a3[1].n128_u32[0];
    a1[1] = a2 + 24;
  }
  else
  {
    sub_10009271C((uint64_t)a1, a2, v6, a2 + 24);
    sub_100015BC8(v4, (__int128 *)a3);
    *(_DWORD *)(v4 + 16) = a3[1].n128_u32[0];
  }
  return v4;
}

void sub_10008ECB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100051FD0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10008ECC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD v16[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_100017E44();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = v4;
    if (v12)
      v13 = (char *)sub_100051F8C(v4, v12);
    else
      v13 = 0;
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v12];
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *((_DWORD *)v14 + 4) = *(_DWORD *)(a2 + 16);
    v16[2] = v14 + 24;
    sub_100051F28(a1, v16);
    v8 = a1[1];
    sub_100051FD0((uint64_t)v16);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(v7 + 16) = *(_DWORD *)(a2 + 16);
    v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return v8 - 24;
}

void sub_10008EDE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100051FD0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10008F000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10008F100(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10008F208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10008F2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10008F508(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10008F6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100012168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10008F8C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

#error "10008FAA0: call analysis failed (funcsize=169)"

void sub_10008FBBC()
{
  __cxa_end_catch();
  JUMPOUT(0x10008F8DCLL);
}

void sub_10008FBFC(void *a1, int a2)
{
  if (a2)
    sub_1000054BC(a1);
  JUMPOUT(0x10008F8DCLL);
}

_QWORD *sub_10008FC0C(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_100093B78((uint64_t)a1, a2);
  *a1 = off_10017FC48;
  a1[45] = &off_10017FD48;
  a1[46] = &off_10017FD70;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10017FC48;
  a1[45] = off_10017FCD0;
  a1[46] = off_10017FCF8;
  return a1;
}

void sub_10008FC90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100092D4C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10008FCB4(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017FD10);
  sub_100092D4C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_10008FD6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  operator delete();
}

void sub_100090270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100090480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100090544(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000905D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  operator delete();
}

void sub_100090644(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100090798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10009082C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000908E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000909F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 16))(a10);

  _Unwind_Resume(a1);
}

void sub_100090D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100012168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000910D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_10000FE34((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100091198(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100091288(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000913F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000914E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100091CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);

  sub_100012168((uint64_t)va);
  sub_100012168((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100092174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_10000FE34((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100092260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100092370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1000923CC(uint64_t a1, const void **a2)
{
  memcpy(**(void ***)(*(_QWORD *)a1 + 72), *a2, **(_QWORD **)(*(_QWORD *)a1 + 80));
  return 1;
}

id sub_1000923F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  void **v4;
  NSStringEncoding v5;
  void **v6;
  void *v7;
  id v8;
  void *__p[2];
  uint64_t v11;

  v2 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100041DD0(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v11 = *(_QWORD *)(a2 + 16);
  }
  v3 = SHIBYTE(v11);
  v4 = (void **)__p[0];
  v5 = +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding", __p[0], __p[1], v11);
  if (v3 >= 0)
    v6 = __p;
  else
    v6 = v4;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v6, v5));
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  v8 = objc_msgSend(**(id **)(v2 + 24), "getAEAKeyFromSAKSWithMetadata:key:error:", v7, **(_QWORD **)(v2 + 32), **(_QWORD **)(v2 + 40));

  return v8;
}

void sub_1000924C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

BOOL sub_1000924EC(_QWORD ***a1, uint64_t *a2)
{
  _QWORD **v2;
  uint64_t *v3;
  void *v4;
  void *v5;
  _BOOL8 v6;

  v2 = *a1;
  if (*((char *)a2 + 23) >= 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v3, 4));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v4));

  v6 = +[DIKeyRetriever KKMSKeyWithURL:destKey:destKeySize:error:](DIKeyRetriever, "KKMSKeyWithURL:destKey:destKeySize:error:", v5, **v2, *v2[1], *v2[2]);
  return v6;
}

void sub_100092588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1000925A4(_QWORD *a1, uint64_t *a2)
{
  _QWORD **v3;
  uint64_t *v4;
  void *v5;
  void *v6;
  _BOOL8 v7;

  v3 = (_QWORD **)*a1;
  if (*((char *)a2 + 23) >= 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v4, 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v5));

  v7 = +[DIKeyRetriever WKMSKeyWithURL:authData:destKey:destKeySize:error:](DIKeyRetriever, "WKMSKeyWithURL:authData:destKey:destKeySize:error:", v6, a2[3], *v3[6], *v3[7], *v3[8]);
  return v7;
}

void sub_100092648(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100092664(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_10017FC10[v2])(&v4, a1);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t sub_1000926BC(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    operator delete[]();
  return result;
}

void sub_1000926E0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_1000926F4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_100092708(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t sub_10009271C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v9 + 16);
      v8 += 24;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_100092974(a2, v7, v6);
}

__n128 sub_100092774(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int64x2_t v22;
  uint64_t v23;
  __n128 result;
  uint64_t v25;
  int64x2_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v6 = *a1;
    v5 = a1[1];
    if (v5 <= *a1)
    {
      v11 = v4 - v6;
      v10 = v11 == 0;
      v12 = 0x5555555555555556 * (v11 >> 3);
      if (v10)
        v13 = 1;
      else
        v13 = v12;
      v14 = v13 >> 2;
      v28 = a1[4];
      v15 = (char *)sub_100051F8C(v28, v13);
      v17 = &v15[24 * v14];
      v18 = a1[1];
      v19 = a1[2] - v18;
      if (v19)
      {
        v20 = &v17[v19];
        v21 = &v15[24 * v14];
        do
        {
          *(_OWORD *)v21 = *(_OWORD *)v18;
          *(_QWORD *)v18 = 0;
          *(_QWORD *)(v18 + 8) = 0;
          *((_DWORD *)v21 + 4) = *(_DWORD *)(v18 + 16);
          v21 += 24;
          v18 += 24;
        }
        while (v21 != v20);
        v22 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        v22 = vdupq_n_s64(v18);
        v20 = &v15[24 * v14];
      }
      v25 = *a1;
      *a1 = v15;
      a1[1] = v17;
      v26 = v22;
      v23 = a1[3];
      a1[2] = v20;
      a1[3] = &v15[24 * v16];
      v27 = v23;
      sub_100051FD0((uint64_t)&v25);
      v4 = a1[2];
    }
    else
    {
      v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = -3 * (v8 >> 1);
      sub_1000929F0(v5, v4, v5 - 24 * (v8 >> 1));
      a1[1] += 8 * v9;
      a1[2] = v4;
    }
  }
  result = *a2;
  *(__n128 *)v4 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  *(_DWORD *)(v4 + 16) = a2[1].n128_u32[0];
  a1[2] += 24;
  return result;
}

uint64_t sub_1000928C0(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *(_OWORD *)(v7 - 24);
      v7 -= 24;
      *(_OWORD *)(v6 - 24) = v8;
      v6 -= 24;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_DWORD *)(v6 + 16) = *(_DWORD *)(v7 + 16);
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = a1[1];
  v10 = a2[2];
  if (v9 != a3)
  {
    do
    {
      *(_OWORD *)v10 = *(_OWORD *)a3;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(a3 + 16);
      v10 += 24;
      a3 += 24;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = *a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100092974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      sub_100015BC8(a3 - 24, (__int128 *)(v6 - 24));
      *(_DWORD *)(a3 - 8) = *(_DWORD *)(v6 - 8);
      a3 -= 24;
      v6 -= 24;
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t sub_1000929F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    sub_100015BC8(a3, (__int128 *)v4);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v4 + 16);
    a3 += 24;
    v4 += 24;
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_100092A58(uint64_t result, int a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  _QWORD *exception;

  if (a4)
  {
    v4 = 4 * a4;
    do
    {
      v5 = *a3++;
      a2 &= ~v5;
      v4 -= 4;
    }
    while (v4);
  }
  if (a2)
  {
    v6 = result;
    v7 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    *exception = &off_100175450;
    exception[1] = v6;
    *((_DWORD *)exception + 8) = v7;
  }
  return result;
}

BOOL sub_100092AD4(uint64_t a1)
{
  unint64_t v1;
  void **v2;
  _BOOL8 v3;
  void *__p[2];
  unsigned __int8 v6;

  sub_100102818(a1, (uint64_t)__p);
  v1 = v6;
  if ((v6 & 0x80u) != 0)
    v1 = (unint64_t)__p[1];
  if (v1 == 4)
  {
    v2 = (void **)__p[0];
    if ((v6 & 0x80u) == 0)
      v2 = __p;
    v3 = *(_DWORD *)v2 == 1936093281;
    if ((char)v6 < 0)
      goto LABEL_9;
  }
  else
  {
    v3 = 0;
    if ((char)v6 < 0)
LABEL_9:
      operator delete(__p[0]);
  }
  return v3;
}

uint64_t sub_100092B58(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017FD10);
  sub_100092D4C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100092B90(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017FD10);
  sub_100092D4C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100092BD0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_10017FD10);
  sub_100092D4C(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_100092C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_100092C58(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_100092CA4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017FD10);
  sub_100092D4C(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_100092CF4(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_10017FD10);
  sub_100092D4C(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_100092D4C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10017FDE0;
  sub_100092DE8(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100092DE8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_100092F60((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_100092F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100092F3C(uint64_t a1)
{
  sub_100092D4C(a1);
  operator delete();
}

int *sub_100092F60(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  int *result;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v19 = 0;
    v6 = sub_1000BF044();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16)))
      v9 = 3;
    else
      v9 = 2;
    v10 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v21 = v4;
    v22 = 2080;
    v23 = v10;
    v24 = 2048;
    v25 = 651;
    v26 = 2082;
    v27 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(v9, &v19, 0, 0, &_mh_execute_header, v7, v8, "%.*s: <%lu> %{public}s", buf, 38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v21 = v4;
      v22 = 2080;
      v23 = v16;
      v24 = 2048;
      v25 = 651;
      v26 = 2082;
      v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *sub_10009315C(_QWORD *a1)
{
  *a1 = off_10017FE60;
  sub_100012168((uint64_t)(a1 + 2));
  return a1;
}

void sub_10009318C(_QWORD *a1)
{
  *a1 = off_10017FE60;
  sub_100012168((uint64_t)(a1 + 2));
  operator delete();
}

uint64_t sub_1000931CC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

unint64_t sub_1000931D4(uint64_t a1)
{
  return (unint64_t)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16))
       / *(_QWORD *)(a1 + 32);
}

uint64_t sub_100093208()
{
  return 0;
}

void sub_100093210()
{
  operator new();
}

void sub_10009326C()
{
  operator delete();
}

uint64_t sub_100093290()
{
  return 4294967251;
}

__n128 sub_100093298@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 40);
  v3 = *(_OWORD *)(a1 + 56);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void sub_1000932A8()
{
  operator new();
}

void sub_100093304()
{
  operator delete();
}

uint64_t sub_100093328(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  sub_100093450(a1, a3, (uint64_t)&v9);
  v4 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 16) + 88))(*(_QWORD *)(a2 + 16), &v9);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1000933BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000933D0()
{
  return -102;
}

uint64_t sub_1000933D8()
{
  return 4294967251;
}

_QWORD *sub_1000933E0(_QWORD *a1)
{
  *a1 = off_10017FF60;
  sub_100012168((uint64_t)(a1 + 2));
  return a1;
}

void sub_100093410(_QWORD *a1)
{
  *a1 = off_10017FF60;
  sub_100012168((uint64_t)(a1 + 2));
  operator delete();
}

_QWORD *sub_100093450@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v5 = a2[2];
  v6 = a2[3];
  v7 = *(_QWORD *)(a1 + 40);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  v9 = a2[4];
  v10 = *a2;
  result = sub_1001207C0();
  v12 = result[1];
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v6 / v7 * v7;
  v16 = v8 - v15;
  v17 = v5 + v6 + v7 - 1 - v15 - (v5 + v6 + v7 - 1) % v7;
  if (v9 < v17)
    v17 = v9;
  if (v16 >= v17)
    v16 = v17;
  *(_QWORD *)(a3 + 16) = v16;
  *(_QWORD *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 32) = v16;
  *(_BYTE *)(a3 + 40) = 0;
  return result;
}

void sub_100093514(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10009356C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    operator delete[]();
  __cxa_rethrow();
}

void sub_100093594(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000935AC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000935D0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    operator delete[]();
  return result;
}

uint64_t sub_1000935F0(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void sub_100093630(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100093688(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    operator delete[]();
  __cxa_rethrow();
}

void sub_1000936B0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000936C8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000936EC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    operator delete[]();
  return result;
}

uint64_t sub_10009370C(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_10009374C@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x1008uLL);
  result = sub_1000937BC(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1000937A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000937BC(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100180078;
  v8 = sub_1000D47A4(*a2, a3);
  sub_1000D4050(a1 + 3, a2, a3, v8, v9, a4);
  return a1;
}

void sub_100093828(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10009383C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100180078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10009384C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100180078;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10009387C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void sub_10009388C(uint64_t a1, unsigned __int16 *a2, unsigned int *a3, unint64_t *a4, unint64_t *a5, _QWORD *a6, uint64_t *a7, _OWORD *a8)
{
  _QWORD *v15;

  v15 = operator new(0x1008uLL);
  sub_10009393C(v15, a2, a3, a4, a5, a6, a7, a8);
}

void sub_100093928(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10009393C(_QWORD *a1, unsigned __int16 *a2, unsigned int *a3, unint64_t *a4, unint64_t *a5, _QWORD *a6, uint64_t *a7, _OWORD *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100180078;
  sub_1000D4798((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5, a6, a7, a8);
}

void sub_1000939D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000939E4(char **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x470uLL);
  sub_100093A44(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1000196D4((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_100093A30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100093A44(_QWORD *a1, char **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001800C8;
  sub_100093ADC(a1 + 3, a2);
  return a1;
}

void sub_100093A78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100093A8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001800C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100093A9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001800C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100093ACC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_100093ADC(_QWORD *a1, char **a2)
{
  uint64_t v3;
  void *__p[2];
  char v6;

  sub_100005870(__p, *a2);
  v3 = sub_1001017E8((uint64_t)__p, 514);
  sub_100046E20((uint64_t)a1, v3, 1, 0);
  *a1 = off_10018D6C0;
  a1[3] = off_10018D7A0;
  a1[4] = off_10018D7D8;
  if (v6 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_100093B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100093B78(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_10017FDE0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_100093BE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_100093BF4(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0xA8uLL);
  sub_100093C5C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_1000196D4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_100093C48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100093C5C(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100180118;
  sub_10011F464(a1 + 3, a2, *a3);
  return a1;
}

void sub_100093C94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100093CA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100180118;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100093CB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100180118;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100093CE8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL sub_100093CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  v5 = a4 - a3 + 2;
  v6 = ~(-1 << v5) << a3;
  if (a4 - a3 == 62)
    v6 = -1;
  v7 = *a5;
  v8 = a5[1];
  if (v7 != v8)
  {
    if ((unint64_t)(a4 - a3) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v12 = 0;
      v13 = v5 >> 1;
      v14 = v7 | (2 * v8);
      do
      {
        v12 = v14 | (4 * v12);
        --v13;
      }
      while (v13);
    }
    else
    {
      v12 = 0;
    }
    v15 = v12 << a3;
    v16 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * a2);
    v17 = *v16;
    v18 = *v16 & ~v6 | v15;
    v19 = __ldaxr(v16);
    if (v19 == v17)
    {
      if (!__stlxr(v18, v16))
      {
LABEL_21:
        v11 = v17 == v18;
        return !v11;
      }
    }
    else
    {
      __clrex();
    }
    v20 = ~v6;
    do
    {
      while (1)
      {
        v17 = v19;
        v21 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * a2);
        v18 = v19 & v20 | v15;
        v19 = __ldaxr(v21);
        if (v19 == v17)
          break;
        __clrex();
      }
    }
    while (__stlxr(v18, v21));
    goto LABEL_21;
  }
  v9 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * a2);
  if (*a5)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 | v6, v9));
    v11 = (v6 & ~v10) == 0;
  }
  else
  {
    do
      v22 = __ldaxr(v9);
    while (__stlxr(v22 & ~v6, v9));
    v11 = (v22 & v6) == 0;
  }
  return !v11;
}

unint64_t sub_100093E24(unint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;

  v4 = a3 - a2 + 2;
  if ((unint64_t)(a3 - a2) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v5 = 0;
    v6 = v4 >> 1;
    do
    {
      v5 = *a4 | (2 * a4[1]) | (4 * v5);
      --v6;
    }
    while (v6);
  }
  else
  {
    v5 = 0;
  }
  if (a3 - a2 == 62)
    v7 = -1;
  else
    v7 = ~(-1 << v4) << a2;
  v9 = ((v5 << a2) ^ v7 & a1 | (((v5 << a2) ^ v7 & a1) >> 1)) & 0x5555555555555555;
  v8 = v9 == 0;
  v10 = __clz(__rbit64(v9));
  if (v8)
    return a3 + 2;
  else
    return v10;
}

unint64_t sub_100093E9C(unint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;

  v4 = a3 - a2 + 2;
  if ((unint64_t)(a3 - a2) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v5 = 0;
    v6 = v4 >> 1;
    do
    {
      v5 = *a4 | (2 * a4[1]) | (4 * v5);
      --v6;
    }
    while (v6);
  }
  else
  {
    v5 = 0;
  }
  if (a3 - a2 == 62)
    v7 = -1;
  else
    v7 = ~(-1 << v4) << a2;
  v9 = v7 & ~((v5 << a2) ^ a1) & ((v7 & ~((v5 << a2) ^ a1)) >> 1) & 0x5555555555555555;
  v8 = v9 == 0;
  v10 = __clz(__rbit64(v9));
  if (v8)
    return a3 + 2;
  else
    return v10;
}

uint64_t sub_100093F14(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  void *exception;
  _QWORD v28[33];

  if (a2 > a3 || *(_QWORD *)(a1 + 16) <= a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)v28);
    sub_100005A0C(v28, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<(v28, a2);
    sub_100005A0C(v28, (uint64_t)"-", 1);
    std::ostream::operator<<(v28, a3);
    sub_100012294((uint64_t)exception, (uint64_t)v28, 0x16u);
  }
  v4 = a2 >> 6;
  v5 = a2 & 0x3F;
  v6 = a3 & 0x3F;
  if (a2 >> 6 == a3 >> 6)
  {
    v7 = v6 - v5 + 1;
    v8 = ~(-1 << v7) << v5;
    if (v7 == 64)
      v9 = -1;
    else
      v9 = v8;
    v10 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v4);
    if ((_DWORD)a4)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 | v9, v10));
      v5 = v9;
    }
    else
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 & ~v9, v10));
      v5 = 0;
    }
    LOBYTE(v5) = (v11 & v9) != v5;
  }
  else
  {
    v12 = a3 >> 6;
    if ((a2 & 0x3F) != 0)
    {
      v5 = ~(-1 << -(char)v5) << v5;
      v13 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v4);
      if ((_DWORD)a4)
      {
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 | v5, v13));
        v15 = v5;
      }
      else
      {
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 & ~v5, v13));
        v15 = 0;
      }
      LOBYTE(v5) = (v14 & v5) != v15;
      ++v4;
    }
    if (v6 != 63)
    {
      v16 = -2 << v6;
      v17 = ~(-2 << v6);
      v18 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v12);
      if ((a4 & 1) != 0)
      {
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 | v17, v18));
        v20 = v17;
      }
      else
      {
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 & v16, v18));
        v20 = 0;
      }
      if ((v19 & v17) != v20)
        LOBYTE(v5) = 1;
      --v12;
    }
    if (v4 <= v12)
    {
      v21 = a4 << 63 >> 63;
      do
      {
        v22 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v4);
        do
          v23 = __ldxr(v22);
        while (__stxr(v21, v22));
        LOBYTE(v5) = (v23 != v21) | v5;
        ++v4;
      }
      while (v4 <= v12);
    }
  }
  return v5 & 1;
}

void sub_100094158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10000FE34((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10009418C(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *exception;
  _QWORD v20[33];

  if (a3 <= a2 || *(_QWORD *)(a1 + 16) < a3 || (((_DWORD)a3 - (_DWORD)a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)v20);
    sub_100005A0C(v20, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<(v20, a2);
    sub_100005A0C(v20, (uint64_t)"-", 1);
    std::ostream::operator<<(v20, a3);
    sub_100012294((uint64_t)exception, (uint64_t)v20, 0x16u);
  }
  v8 = a3 - 2;
  v9 = a2 >> 6;
  v10 = a2 & 0x3F;
  v11 = v8 & 0x3F;
  if (a2 >> 6 == v8 >> 6)
    return sub_100093CF8(a1, a2 >> 6, v10, v8 & 0x3F, a4);
  v13 = v8 >> 6;
  v14 = (a2 & 0x3F) != 0 && sub_100093CF8(a1, v9++, v10, 62, a4);
  if (v11 <= 0x3D)
    v14 = sub_100093CF8(a1, v13--, 0, v11, a4) | v14;
  v15 = 0;
  v16 = 32;
  do
  {
    v15 = *a4 | (2 * a4[1]) | (4 * v15);
    --v16;
  }
  while (v16);
  while (v9 <= v13)
  {
    v17 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v9);
    if ((v14 & 1) != 0)
    {
      *v17 = v15;
      v14 = 1;
    }
    else
    {
      do
        v18 = __ldxr(v17);
      while (__stxr(v15, v17));
      v14 = v18 != v15;
    }
    ++v9;
  }
  return v14;
}

void sub_100094368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10000FE34((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10009439C(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *exception;
  _QWORD v26[33];

  v4 = a3;
  if (a3 <= a2 || *(_QWORD *)(a1 + 16) < a3 || (((_DWORD)a3 - (_DWORD)a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)v26);
    sub_100005A0C(v26, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<(v26, a2);
    sub_100005A0C(v26, (uint64_t)"-", 1);
    std::ostream::operator<<(v26, v4);
    sub_100012294((uint64_t)exception, (uint64_t)v26, 0x16u);
  }
  v8 = a3 - 2;
  v9 = a2 >> 6;
  v10 = a2 & 0x3F;
  v11 = (a3 - 2) & 0x3F;
  if (a2 >> 6 == (a3 - 2) >> 6)
  {
    v12 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v9));
    v13 = sub_100093E24(v12, v10, (a3 - 2) & 0x3F, a4);
    return v13 + (a2 & 0xFFFFFFFFFFFFFFC0);
  }
  if (v10)
  {
    v14 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v9));
    v13 = sub_100093E24(v14, v10, 62, a4);
    if (v13 != 64)
      return v13 + (a2 & 0xFFFFFFFFFFFFFFC0);
    ++v9;
  }
  v15 = 0;
  v16 = v8 >> 6;
  if (v11 >= 0x3E)
    v17 = 0;
  else
    v17 = -1;
  v18 = 32;
  do
  {
    v15 = *a4 | (2 * a4[1]) | (4 * v15);
    --v18;
  }
  while (v18);
  v19 = v16 + v17;
  if (v9 > v19)
  {
LABEL_18:
    if (v11 <= 0x3D)
    {
      v22 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v16));
      v23 = sub_100093E24(v22, 0, (v4 - 2) & 0x3F, a4);
      if (v23 != v11 + 2)
        return v23 + (v8 & 0xFFFFFFFFFFFFFFC0);
    }
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 8);
    v21 = v9 << 6;
    while (((*(_QWORD *)(v20 + 8 * v9) ^ v15 | ((*(_QWORD *)(v20 + 8 * v9) ^ (unint64_t)v15) >> 1)) & 0x5555555555555555) == 0)
    {
      ++v9;
      v21 += 64;
      if (v9 > v19)
        goto LABEL_18;
    }
    return __clz(__rbit64((*(_QWORD *)(v20 + 8 * v9) ^ v15 | ((*(_QWORD *)(v20 + 8 * v9) ^ (unint64_t)v15) >> 1)) & 0x5555555555555555))
         + v21;
  }
  return v4;
}

void sub_100094598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10000FE34((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1000945CC(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *exception;
  _QWORD v27[33];

  v4 = a3;
  if (a3 <= a2 || *(_QWORD *)(a1 + 16) < a3 || (((_DWORD)a3 - (_DWORD)a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)v27);
    sub_100005A0C(v27, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<(v27, a2);
    sub_100005A0C(v27, (uint64_t)"-", 1);
    std::ostream::operator<<(v27, v4);
    sub_100012294((uint64_t)exception, (uint64_t)v27, 0x16u);
  }
  v8 = a3 - 2;
  v9 = a2 >> 6;
  v10 = a2 & 0x3F;
  v11 = (a3 - 2) & 0x3F;
  if (a2 >> 6 == (a3 - 2) >> 6)
  {
    v12 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v9));
    v13 = sub_100093E9C(v12, v10, (a3 - 2) & 0x3F, a4);
    return v13 + (a2 & 0xFFFFFFFFFFFFFFC0);
  }
  if (v10)
  {
    v14 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v9));
    v13 = sub_100093E9C(v14, v10, 62, a4);
    if (v13 != 64)
      return v13 + (a2 & 0xFFFFFFFFFFFFFFC0);
    ++v9;
  }
  v15 = 0;
  v16 = v8 >> 6;
  if (v11 >= 0x3E)
    v17 = 0;
  else
    v17 = -1;
  v18 = 32;
  do
  {
    v15 = *a4 | (2 * a4[1]) | (4 * v15);
    --v18;
  }
  while (v18);
  v19 = v16 + v17;
  if (v9 > v19)
  {
LABEL_18:
    if (v11 <= 0x3D)
    {
      v23 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v16));
      v24 = sub_100093E9C(v23, 0, (v4 - 2) & 0x3F, a4);
      if (v24 != v11 + 2)
        return v24 + (v8 & 0xFFFFFFFFFFFFFFC0);
    }
  }
  else
  {
    v20 = v9 << 6;
    while (1)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v9);
      v22 = ((v15 ^ (unint64_t)~v21) >> 1) & ~(v15 ^ v21) & 0x5555555555555555;
      if (v22)
        return __clz(__rbit64(v22)) + v20;
      ++v9;
      v20 += 64;
      if (v9 > v19)
        goto LABEL_18;
    }
  }
  return v4;
}

void sub_1000947D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10000FE34((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100094804(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 16) + 63;
  if (v1 < 0x40)
    return 1;
  v3 = v1 >> 6;
  v4 = *(_QWORD **)(a1 + 8);
  if (v3 <= 1)
    v5 = 1;
  else
    v5 = v3;
  if (*v4)
    return 0;
  v6 = 1;
  do
  {
    v7 = v6;
    if (v5 == v6)
      break;
  }
  while (!v4[v6++]);
  return v7 >= v3;
}

uint64_t sub_100094864(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16) + 63;
  if (v1 < 0x40)
    return 0;
  v4 = 0;
  v2 = 0;
  v5 = (v1 >> 3) & 0x1FFFFFFFFFFFFFF8;
  do
  {
    v6 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + v4));
    v8 = v6;
    BYTE6(v9) = 1;
    v2 += sub_100094B84((int8x8_t *)&v8, 0, (uint64_t)&v9, 0, (_BYTE *)&v9 + 6);
    v4 += 8;
  }
  while (v5 != v4);
  return v2;
}

uint64_t sub_100094914(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  void *exception;
  _QWORD v7[33];

  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)v7);
    sub_100005A0C(v7, (uint64_t)"Bit ", 4);
    std::ostream::operator<<(v7, a2);
    sub_100005A0C(v7, (uint64_t)" requested while there are only ", 32);
    std::ostream::operator<<(v7, *(_QWORD *)(a1 + 16));
    sub_100005A0C(v7, (uint64_t)" bits in the bitmap", 19);
    sub_100012294((uint64_t)exception, (uint64_t)v7, 0x16u);
  }
  v2 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * (a2 >> 6)));
  return (v2 >> a2) & 1;
}

void sub_100094A00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10000FE34((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100094A34(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *exception;
  _QWORD v10[33];

  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005920((uint64_t)v10);
    sub_100005A0C(v10, (uint64_t)"Bit ", 4);
    std::ostream::operator<<(v10, a2);
    sub_100005A0C(v10, (uint64_t)" requested while there are only ", 32);
    std::ostream::operator<<(v10, *(_QWORD *)(a1 + 16));
    sub_100005A0C(v10, (uint64_t)" bits in the bitmap", 19);
    sub_100012294((uint64_t)exception, (uint64_t)v10, 0x16u);
  }
  v3 = 1 << a2;
  v4 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * (a2 >> 6));
  if (a3)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 | v3, v4));
  }
  else
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 & ~v3, v4));
  }
  return (v5 & v3) == 0;
}

void sub_100094B50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10000FE34((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100094B84(int8x8_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, _BYTE *a5)
{
  unint64_t v5;

  v5 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
  if (*a5)
    return sub_100094BA4(a1, a2, v5);
  else
    return sub_100094C48((uint64_t *)a1, a2, v5);
}

uint64_t sub_100094BA4(int8x8_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8x8_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;

  v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3)
      v4 = a3;
    else
      v4 = 64 - a2;
    v5 = (uint64_t)*a1++;
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & v5));
    v6.i16[0] = vaddlv_u8(v6);
    v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      v7 = *a1++;
      v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3)));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t sub_100094C48(uint64_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8x8_t v6;
  uint64_t v7;
  uint8x8_t v8;
  uint8x8_t v9;

  v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3)
      v4 = a3;
    else
      v4 = 64 - a2;
    v5 = *a1++;
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & ~v5));
    v6.i16[0] = vaddlv_u8(v6);
    v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      v7 = *a1++;
      v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & ~*a1));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t sub_100094CF4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 2;
  *(_QWORD *)(a1 + 8) = a2;
  sub_100100C14(a1 + 16, "rings_queue");
  *(_BYTE *)(a1 + 24) = 0;
  return a1;
}

void sub_100094D38(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;

  v2 = atomic_load((unsigned int *)a1);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 == 1)
    io_rings_return_status(v3, a2, 0xFFFFFFA7, 0);
  else
    sub_100095F98(v3, a2);
}

uint64_t sub_100094D58(uint64_t a1)
{
  unsigned int v1;
  std::__shared_weak_count *v3;
  int v4;
  dispatch_queue_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v21[6];
  _QWORD v22[6];
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v25 = 0;
  v26 = 0;
  v1 = atomic_load((unsigned int *)a1);
  if (v1 != 2)
    goto LABEL_37;
  LODWORD(v3) = 0;
  v4 = 0;
  v5 = (dispatch_queue_t *)(a1 + 16);
  do
  {
    v6 = sub_100095C24(*(_QWORD *)(a1 + 8));
    v7 = v6;
    if (!v6)
      break;
    __dmb(9u);
    if ((*(_WORD *)(v6 + 2) & 1) != 0)
    {
      v8 = 1;
      goto LABEL_8;
    }
    if (*(_BYTE *)(a1 + 24))
    {
      v8 = 2;
LABEL_8:
      if (*(_BYTE *)(a1 + 24))
        v9 = v8;
      else
        v9 = 0;
      sub_10009639C(*(_QWORD *)(a1 + 8), v6, v9);
      v10 = *(_BYTE *)(v7 + 2);
      goto LABEL_12;
    }
    v10 = *(_WORD *)(v6 + 2);
LABEL_12:
    *(_BYTE *)(a1 + 24) = v10 & 1;
    sub_100096070(*(_QWORD *)(a1 + 8), *(_DWORD *)(v7 + 8), &v23);
    if (v23)
    {
      if ((_DWORD)v3)
      {
        if (*(_DWORD *)(v7 + 8) != v4)
        {
          (*(void (**)(void))(v25 + 8))();
          v3 = v26;
          v25 = 0;
          v26 = 0;
          if (v3)
          {
            p_shared_owners = (unint64_t *)&v3->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
              std::__shared_weak_count::__release_weak(v3);
            }
            LODWORD(v3) = 0;
          }
        }
      }
      if ((*(unsigned int (**)(void))(v23 + 16))())
      {
        (*(void (**)(uint64_t, uint64_t))v23)(v23, v7);
        if (!v25)
        {
          v4 = *(_DWORD *)(v7 + 8);
          sub_100027CB4(&v25, &v23);
          LODWORD(v3) = 1;
        }
      }
      else if (sub_100095D7C((unsigned __int8 *)v7))
      {
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 0x40000000;
        v22[2] = sub_10009501C;
        v22[3] = &unk_100180178;
        v22[4] = a1;
        v22[5] = v7;
        sub_100100CA8(v5, v22);
      }
      else
      {
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 0x40000000;
        v21[2] = sub_1000950BC;
        v21[3] = &unk_100180198;
        v21[4] = a1;
        v21[5] = v7;
        sub_100100C28(v5, v21);
      }
    }
    else
    {
      io_rings_return_status(*(_QWORD *)(a1 + 8), v7, 0xFFFFFFFA, 0);
    }
    v13 = v24;
    if (v24)
    {
      v14 = (unint64_t *)&v24->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = atomic_load((unsigned int *)a1);
  }
  while (v16 == 2);
  if ((_DWORD)v3)
    (*(void (**)(void))(v25 + 8))();
LABEL_37:
  v17 = v26;
  if (v26)
  {
    v18 = (unint64_t *)&v26->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return 0;
}

void sub_100094FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_100012168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10009501C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  _QWORD v4[6];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = atomic_load((unsigned int *)v1);
  if (v2 == 1)
  {
    io_rings_return_status(*(_QWORD *)(v1 + 8), *(_QWORD *)(a1 + 40), 0xFFFFFFA7, 0);
  }
  else
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 0x40000000;
    v4[2] = sub_1000950A8;
    v4[3] = &unk_100180158;
    v3 = *(_QWORD *)(a1 + 40);
    v4[4] = v1;
    v4[5] = v3;
    sub_100100C28((dispatch_queue_t *)(v1 + 16), v4);
  }
}

void sub_1000950A8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  __dmb(9u);
  sub_100094D38(v1, *(_QWORD *)(a1 + 40));
}

void sub_1000950BC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  __dmb(9u);
  sub_100094D38(v1, *(_QWORD *)(a1 + 40));
}

uint64_t sub_1000950D0(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)a1);
  if (v1 != 2)
    return 4294967260;
  atomic_store(0, (unsigned int *)a1);
  sub_100100CB8((dispatch_object_t *)(a1 + 16));
  return 0;
}

void sub_100095104(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;

  v1 = atomic_load((unsigned int *)a1);
  if (v1 != 1)
  {
    do
      v3 = __ldaxr((unsigned int *)a1);
    while (__stlxr(1u, (unsigned int *)a1));
    if (v3 == 2)
      sub_100100CB8((dispatch_object_t *)(a1 + 16));
    sub_100096130(*(_QWORD *)(a1 + 8));
    sub_100100CC0((dispatch_object_t *)(a1 + 16));
    sub_100094D58(a1);
    sub_100100CB0((dispatch_queue_t *)(a1 + 16), &stru_1001801D8);
    sub_100100CB0((dispatch_queue_t *)(a1 + 16), &stru_100180218);
  }
}

uint64_t sub_100095198(uint64_t a1)
{
  if (atomic_load((unsigned int *)a1))
    return 4294967274;
  atomic_store(2u, (unsigned int *)a1);
  sub_100100CC0((dispatch_object_t *)(a1 + 16));
  sub_100094D58(a1);
  return 0;
}

uint64_t sub_1000951E0(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  v4 = 4294967274;
  if (a1 && a2 && a3 && a4)
  {
    if (*(_DWORD *)a2 <= 1u)
    {
      v5 = *(unsigned int *)(a2 + 4);
      if (v5 < 9)
        return v4;
      if (v5 < 0x10
        || ((v6 = *(_DWORD **)(a2 + 8)) == 0 || !*v6)
        && (v5 < 0x31
         || !*(_BYTE *)(a2 + 48) && !memcmp((const void *)(a2 + 48), (const void *)(a2 + 49), v5 - 49)))
      {
        operator new();
      }
    }
    return 4294967251;
  }
  return v4;
}

void sub_10009539C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    sub_100096C1C((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

uint64_t io_rings_get_max_version(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2)
    v2 = -22;
  else
    v2 = 1;
  if (a2 <= 0 && a1 == 0)
    return v2;
  else
    return 4294967251;
}

_QWORD *sub_1000953D8(_QWORD *result, uint64_t a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(a2 + 4);
  if (v2 >= 0x18)
  {
    result[52] = *(_QWORD *)(a2 + 16);
    if (v2 >= 0x20)
    {
      result[53] = *(_QWORD *)(a2 + 24);
      if (v2 >= 0x28)
      {
        result[54] = *(_QWORD *)(a2 + 32);
        if (v2 >= 0x30)
          result[55] = *(_QWORD *)(a2 + 40);
      }
    }
  }
  return result;
}

uint64_t sub_100095420(uint64_t *a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  char v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  if (a2 >= 0x2000)
    v3 = 0x2000;
  else
    v3 = a2;
  if (a2 + 1 < 0x2000)
    v4 = a2 + 1;
  else
    v4 = 0x2000;
  if ((v4 & (v4 - 1)) != 0)
  {
    v5 = 0;
    v6 = 2 * v4;
    do
    {
      v6 >>= 1;
      ++v5;
    }
    while (v6 != 1);
    v4 = 1 << v5;
  }
  v7 = mmap(0, 88 * v3 + 8 + 4 * v4, 3, 4097, 0, 0);
  if (v7 == (void *)-1)
    v8 = 0;
  else
    v8 = (uint64_t)v7;
  *a1 = v8;
  v9 = mmap(0, (16 * v4) | 8, 3, 4097, 0, 0);
  if (v9 == (void *)-1)
    v10 = 0;
  else
    v10 = (uint64_t)v9;
  a1[1] = v10;
  result = 4294967284;
  if (*a1)
  {
    if (v10)
    {
      sub_100096444((uint64_t)(a1 + 2));
      v12 = *a1;
      v13 = a1[1];
      v14[0] = off_100180270;
      v14[1] = a1;
      v14[3] = v14;
      sub_1000965E0((uint64_t)(a1 + 2), v12, v13, v3, v4, v4, (uint64_t)v14);
    }
  }
  return result;
}

void sub_100095674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v20 = a13;
  if (a13 == v17)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_11:
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x100095628);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100095710(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t i;

  if (*(_BYTE *)(result + 264))
  {
    v1 = result;
    if (*(_BYTE *)(result + 408))
    {
      v2 = *(_DWORD *)(result + 136);
      v3 = *(unsigned int *)(result + 312);
      v4 = *(unsigned int *)(result + 56);
      sub_100096444(result + 16);
      sub_100096830(v1 + 272);
      if (*(_QWORD *)v1)
      {
        munmap(*(void **)v1, 4 * v4 + 88 * v2 + 8);
        *(_QWORD *)v1 = 0;
      }
      v5 = *(void **)(v1 + 8);
      if (v5)
      {
        munmap(v5, (16 * v3) | 8);
        *(_QWORD *)(v1 + 8) = 0;
      }
      v6 = *(_QWORD *)(v1 + 704);
      *(_QWORD *)(v1 + 704) = 0;
      if (v6)
        (*(void (**)(void))(v6 + 32))();
      for (i = 688; i != 432; i -= 16)
        sub_100012168(v1 + i);
      sub_100096B08(v1 + 272);
      sub_100096B90(v1 + 16);
      operator delete();
    }
  }
  return result;
}

void io_rings_setup()
{
  operator new();
}

void sub_100095904()
{
  operator delete();
}

uint64_t io_rings_enter(uint64_t a1, int a2, int a3)
{
  if (a3)
    return 4294967194;
  if (*(_DWORD *)(a1 + 712) == 2)
    return 4294967207;
  return sub_100096D60(a1 + 16, a2, 1);
}

double io_rings_sqe_allocate(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = sub_100095990(a1 + 16);
  if (v1)
  {
    *(_DWORD *)(v1 + 12) = 0;
    result = 0.0;
    *(_OWORD *)(v1 + 24) = 0u;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *(_DWORD *)(v1 + 1) = 0;
    *(_DWORD *)(v1 + 4) = 0;
  }
  return result;
}

uint64_t sub_100095990(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = sub_100096F9C((_QWORD *)(a1 + 104));
  if (v2 < 0)
    return 0;
  v3 = (unsigned int *)(a1 + 48);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = (unsigned int *)(a1 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * (*(_DWORD *)(a1 + 44) & v6)) = v2;
  return *(_QWORD *)(a1 + 96) + 88 * v2;
}

uint64_t io_rings_get_cqe(uint64_t a1)
{
  return sub_100095A0C(a1 + 272);
}

uint64_t sub_100095A0C(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v5;
  int v6;
  char v7;

  if (*(_BYTE *)(a1 + 96))
  {
    v2 = atomic_load(*(unsigned int **)a1);
    *(_DWORD *)(a1 + 92) = v2;
    __dmb(9u);
    *(_BYTE *)(a1 + 96) = 0;
  }
  v3 = atomic_load(*(unsigned int **)(a1 + 16));
  sub_100097020(a1, (uint64_t)&v5);
  if (!v7)
    return 0;
  if (v3 == *(_DWORD *)(a1 + 92))
    *(_BYTE *)(a1 + 96) = 1;
  v6 |= 1u;
  return v5;
}

uint64_t io_rings_cq_get_overruns(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 372));
}

uint64_t io_rings_cq_clear_overruns(uint64_t result)
{
  atomic_store(0, (unsigned int *)(result + 372));
  return result;
}

uint64_t io_rings_suspend(uint64_t a1)
{
  uint64_t result;
  uint64_t (*v3)(void);

  if (*(_DWORD *)(a1 + 712))
    return 4294967274;
  v3 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 704) + 16);
  if (!v3 || (result = v3(), !(_DWORD)result))
  {
    sub_10009608C(a1 + 448);
    result = 0;
    *(_DWORD *)(a1 + 712) = 1;
  }
  return result;
}

uint64_t io_rings_cancel(uint64_t a1)
{
  uint64_t (*v2)(void);
  int v3;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (*(_DWORD *)(a1 + 712) != 1)
    return -16;
  v2 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 704) + 8);
  if (v2 && (v3 = v2()) != 0)
  {
    if (v3 < 0)
      return v3;
    else
      return -v3;
  }
  else
  {
    *(_DWORD *)(a1 + 712) = 2;
    v7 = sub_10009714C(a1 + 16);
    if ((v7 & 0xFF00000000) != 0)
    {
      v5 = 0;
      do
      {
        v8 = *(_QWORD *)(a1 + 112);
        if (!v8)
          break;
        v9 = v8 + 88 * v7;
        sub_100095D04(a1 + 272, *(_QWORD *)(v9 + 16), 0x1FFFFFFA7, 0);
        v10 = 0x2E8BA2E8BA2E8BA3 * ((v9 - *(_QWORD *)(a1 + 112)) >> 3);
        v11 = 1 << v10;
        v12 = (unint64_t *)(*(_QWORD *)(a1 + 128) + 8 * (v10 >> 6));
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 | v11, v12));
        ++v5;
        v7 = sub_10009714C(a1 + 16);
      }
      while ((v7 & 0xFF00000000) != 0);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t sub_100095C24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009714C(a1 + 16);
  if ((v2 & 0xFF00000000) != 0)
    return *(_QWORD *)(a1 + 112) + 88 * v2;
  else
    return 0;
}

void io_rings_unsubscribe_dest_object(uint64_t a1, unsigned int a2)
{
  sub_100095C70(a1 + 448, a2);
}

void sub_100095C70(uint64_t a1, unsigned int a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  v5 = 0;
  v6 = 0;
  sub_1000973E4((uint64_t *)(a1 + 16 * a2), &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_100095CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t io_rings_release(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(result + 712) == 2)
      return sub_100095710(result);
  }
  return result;
}

uint64_t sub_100095D04(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;

  __dmb(0xBu);
  result = sub_1000972C0(a1, a2, a3);
  if (!(_DWORD)result)
    return sub_100096D60(a1, 1, a4);
  if ((_DWORD)result == -28)
  {
    v7 = (unsigned int *)(a1 + 100);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    if (!v8)
      sub_1000973A4(a1 + 104, 0, 4);
    return 4294967268;
  }
  return result;
}

BOOL sub_100095D7C(unsigned __int8 *a1)
{
  return *a1 == 5;
}

void sub_100095D8C(uint64_t a1, uint64_t a2)
{
  sub_100095D94(a1 + 448, a2);
}

void sub_100095D94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10009752C(&v2, a2);
}

void sub_100095EC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x100095EACLL);
}

uint64_t io_rings_return_status(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  int v8;
  __int16 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;

  v8 = sub_1000962C0(a1 + 144, a2);
  v9 = *(_WORD *)(a2 + 2);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = 0x2E8BA2E8BA2E8BA3 * ((a2 - *(_QWORD *)(a1 + 112)) >> 3);
  v12 = 1 << v11;
  v13 = (unint64_t *)(*(_QWORD *)(a1 + 128) + 8 * (v11 >> 6));
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 | v12, v13));
  if ((v9 & 4) != 0)
    v15 = 0;
  else
    v15 = v8;
  return sub_100095D04(a1 + 272, v10, a3 | ((unint64_t)(a4 | 1u) << 32), v15);
}

void sub_100095F98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(unsigned int *)(a2 + 8);
  if (v4 >= 5)
  {
    v8 = 0;
    v9 = 0;
LABEL_6:
    io_rings_return_status(a1, a2, 0xFFFFFFFA, 0);
    goto LABEL_7;
  }
  sub_100097634((_QWORD *)(a1 + 16 * v4 + 448), &v8);
  if (!v8)
    goto LABEL_6;
  if (!(*(unsigned int (**)(void))v8)())
    (*(void (**)(void))(v8 + 8))();
LABEL_7:
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_100096058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100096070(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  if (a2 < 5)
  {
    sub_100097634((_QWORD *)(a1 + 16 * a2 + 448), a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_10009608C(uint64_t a1)
{
  uint64_t i;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  for (i = 0; i != 16; ++i)
  {
    sub_100097634((_QWORD *)(a1 + 16 * i), &v6);
    if (v6)
      (*(void (**)(void))(v6 + 24))();
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_10009611C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100096130(uint64_t a1)
{
  sub_100096138(a1 + 448);
}

void sub_100096138(uint64_t a1)
{
  uint64_t i;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  for (i = 0; i != 16; ++i)
  {
    sub_100097634((_QWORD *)(a1 + 16 * i), &v6);
    if (v6)
      (*(void (**)(void))(v6 + 40))();
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_1000961C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000961DC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;

  std::mutex::lock((std::mutex *)a1);
  v8 = *(_QWORD *)(a1 + 112);
  if (a3)
  {
    if (v8)
      *(_BYTE *)(v8 + 4) = 1;
    operator new();
  }
  if (a4 && v8)
    *(_BYTE *)(v8 + 4) = 1;
  do
    v9 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v9 + 1, (unsigned int *)v8));
  v10 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)&v11 = a2;
  *((_QWORD *)&v11 + 1) = v10;
  sub_10009768C(a1 + 64, &v11, &v11);
  if (a4)
    *(_QWORD *)(a1 + 112) = 0;
  ++*(_QWORD *)(a1 + 104);
  std::mutex::unlock((std::mutex *)a1);
}

void sub_1000962A8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000962C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;

  v7 = a2;
  if (!*(_QWORD *)(a1 + 104))
    return 1;
  std::mutex::lock((std::mutex *)a1);
  v3 = sub_100097B10((_QWORD *)(a1 + 64), &v7);
  if (!v3)
  {
    std::mutex::unlock((std::mutex *)a1);
    return 1;
  }
  --*(_QWORD *)(a1 + 104);
  v4 = v3[3];
  sub_100097BFC((_QWORD *)(a1 + 64), v3);
  std::mutex::unlock((std::mutex *)a1);
  if (!v4)
    return 1;
  do
    v5 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v5 - 1, (unsigned int *)v4));
  if (v5 == 1)
  {
    if (*(_BYTE *)(v4 + 4))
      operator delete();
  }
  return 0;
}

void sub_100096388(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10009639C(uint64_t a1, uint64_t a2, int a3)
{
  sub_1000961DC(a1 + 144, a2, a3 == 0, a3 == 2);
}

uint64_t di_plugin_register(char *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  v4 = sub_100061A30();
  sub_100005870(__p, a1);
  v5 = sub_10006264C(v4, (uint64_t)__p, a2);
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_100096424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100096444(uint64_t result)
{
  uint64_t v1;
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(result + 248))
  {
    v1 = result;
    v2 = (std::mutex *)(result + 128);
    sub_1000964D0(result + 192);
    std::mutex::~mutex(v2);
    v3 = *(_QWORD *)(v1 + 112);
    *(_QWORD *)(v1 + 112) = 0;
    if (v3)
      operator delete[]();
    result = *(_QWORD *)(v1 + 80);
    if (result == v1 + 56)
    {
      v4 = 4;
      result = v1 + 56;
    }
    else
    {
      if (!result)
      {
LABEL_9:
        *(_BYTE *)(v1 + 248) = 0;
        return result;
      }
      v4 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v4))();
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1000964D0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_10009651C()
{
  operator delete();
}

_QWORD *sub_100096530(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_100180270;
  result[1] = v3;
  return result;
}

uint64_t sub_100096564(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_100180270;
  a2[1] = v2;
  return result;
}

uint64_t (**sub_100096580(uint64_t a1))(void)
{
  uint64_t (**result)(void);

  result = *(uint64_t (***)(void))(*(_QWORD *)(a1 + 8) + 704);
  if (*result)
    return (uint64_t (**)(void))(*result)();
  return result;
}

uint64_t sub_100096598(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_1001802D0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000965D4()
{
  return &off_1001802D0;
}

void sub_1000965E0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v8 = a4;
  *(_QWORD *)&v10 = a2 + 88 * a4;
  *((_QWORD *)&v10 + 1) = a5;
  v9 = sub_1000966D0(a1, a2 + 4 * a5 + 88 * a4, a3 + 16 * a6 + 4, &v10, a5, a7);
  *(_QWORD *)(v9 + 96) = a2;
  sub_100096750((_QWORD *)(v9 + 104), v8);
}

void sub_100096694(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 80);
  if (v3 == (_QWORD *)(v1 + 56))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 56);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000966D0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, int a5, uint64_t a6)
{
  char v7;
  unsigned int v8;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_OWORD *)(a1 + 24) = *a4;
  *(_DWORD *)(a1 + 40) = a5;
  if ((a5 & (a5 - 1)) != 0)
  {
    v7 = 0;
    v8 = 2 * a5;
    do
    {
      v8 >>= 1;
      ++v7;
    }
    while (v8 != 1);
    a5 = 1 << v7;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 44) = a5 - 1;
  sub_100012568(a1 + 56, a6);
  *(_WORD *)(a1 + 88) = 1;
  return a1;
}

void sub_100096750(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new[]();
}

uint64_t sub_100096830(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(result + 136))
  {
    v1 = result;
    v2 = (_QWORD *)(result + 104);
    v3 = *(_QWORD **)(result + 128);
    if (v3 == v2)
    {
      v4 = 4;
      v3 = v2;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
    result = *(_QWORD *)(v1 + 80);
    if (result == v1 + 56)
    {
      v5 = 4;
      result = v1 + 56;
    }
    else
    {
      if (!result)
      {
LABEL_12:
        *(_BYTE *)(v1 + 136) = 0;
        return result;
      }
      v5 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v5))();
    goto LABEL_12;
  }
  return result;
}

void sub_1000968BC()
{
  operator delete();
}

_QWORD *sub_1000968D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1001802F0;
  result[1] = v3;
  return result;
}

uint64_t sub_100096904(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1001802F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_100096920(uint64_t a1)
{
  uint64_t result;
  uint64_t (*v2)(uint64_t, _QWORD);

  result = *(_QWORD *)(a1 + 8);
  v2 = *(uint64_t (**)(uint64_t, _QWORD))(result + 432);
  if (v2)
    return v2(result, *(_QWORD *)(result + 440));
  return result;
}

uint64_t sub_100096938(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_100180350))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100096974()
{
  return &off_100180350;
}

void sub_100096984()
{
  operator delete();
}

_QWORD *sub_100096998(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_100180370;
  result[1] = v3;
  return result;
}

uint64_t sub_1000969CC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_100180370;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000969E8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t (*v4)(uint64_t, _QWORD, _QWORD, uint64_t);

  result = *(_QWORD *)(a1 + 8);
  v4 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(result + 416);
  if (v4)
    return v4(result, *(_QWORD *)(result + 424), *a2, a3);
  return result;
}

uint64_t sub_100096A08(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_1001803E0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100096A44()
{
  return &off_1001803E0;
}

uint64_t sub_100096A50(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  __int128 v12;

  *(_QWORD *)&v12 = a3;
  *((_QWORD *)&v12 + 1) = a6;
  v10 = sub_1000966D0(a1, a3 + 16 * a6, 4 * a5 + 88 * a4 + a2 + 4, &v12, a6, a7);
  *(_BYTE *)(v10 + 96) = 1;
  *(_DWORD *)(v10 + 100) = 0;
  sub_100012568(v10 + 104, a8);
  return a1;
}

void sub_100096ACC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 80);
  if (v3 == (_QWORD *)(v1 + 56))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 56);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100096B08(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (!*(_BYTE *)(a1 + 136))
    return a1;
  v2 = *(_QWORD **)(a1 + 128);
  if (v2 == (_QWORD *)(a1 + 104))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 104);
    goto LABEL_6;
  }
  if (v2)
  {
    v3 = 5;
LABEL_6:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  v4 = *(_QWORD **)(a1 + 80);
  if (v4 == (_QWORD *)(a1 + 56))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 56);
    goto LABEL_11;
  }
  if (v4)
  {
    v5 = 5;
LABEL_11:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

uint64_t sub_100096B90(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 248))
  {
    sub_1000964D0(a1 + 192);
    std::mutex::~mutex((std::mutex *)(a1 + 128));
    v2 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    if (v2)
      operator delete[]();
    v3 = *(_QWORD **)(a1 + 80);
    if (v3 == (_QWORD *)(a1 + 56))
    {
      v4 = 4;
      v3 = (_QWORD *)(a1 + 56);
      goto LABEL_8;
    }
    if (v3)
    {
      v4 = 5;
LABEL_8:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
  }
  return a1;
}

void sub_100096C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 704);
    *(_QWORD *)(a2 + 704) = 0;
    if (v3)
      (*(void (**)(void))(v3 + 32))();
    for (i = 688; i != 432; i -= 16)
      sub_100012168(a2 + i);
    sub_100096B08(a2 + 272);
    sub_100096B90(a2 + 16);
    operator delete();
  }
}

uint64_t sub_100096C9C(uint64_t a1)
{
  return sub_100094D58(*(_QWORD *)(a1 + 48));
}

uint64_t sub_100096CA4(uint64_t a1)
{
  sub_100095104(*(_QWORD *)(a1 + 48));
  return 0;
}

uint64_t sub_100096CC0(uint64_t a1)
{
  return sub_1000950D0(*(_QWORD *)(a1 + 48));
}

uint64_t sub_100096CC8(uint64_t a1)
{
  return sub_100095198(*(_QWORD *)(a1 + 48));
}

uint64_t sub_100096CD0(uint64_t result)
{
  if (result)
  {
    sub_100096D14((uint64_t *)(result + 48), 0);
    operator delete();
  }
  return result;
}

uint64_t *sub_100096D14(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_100100B68((NSObject **)(v2 + 16));
    operator delete();
  }
  return result;
}

uint64_t sub_100096D60(uint64_t a1, int a2, int a3)
{
  unsigned int *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v28;
  unsigned __int8 v29;
  unsigned int v30;
  unsigned int v32;

  v4 = (unsigned int *)(a1 + 52);
  v5 = *(_DWORD *)(a1 + 52);
  v6 = __ldaxr((unsigned int *)(a1 + 52));
  if (v6 != v5)
  {
    __clrex();
LABEL_5:
    while (1)
    {
      v7 = __ldaxr(v4);
      if (v7 != v6)
        break;
      if (__stlxr((v6 + 2 * a2) | a3, v4))
        goto LABEL_9;
      v8 = 1;
LABEL_10:
      v6 = v7;
      if (v8)
        goto LABEL_11;
    }
    __clrex();
LABEL_9:
    v8 = 0;
    goto LABEL_10;
  }
  if (__stlxr((v5 + 2 * a2) | a3, v4))
    goto LABEL_5;
LABEL_11:
  v9 = (unsigned int *)(a1 + 48);
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - a2;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    v12 = (unsigned __int8 *)(a1 + 89);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(1u, v12));
    if ((v13 & 1) == 0)
    {
      while (1)
      {
        v14 = *v4;
        if (atomic_load(v9))
          break;
        v16 = __ldaxr(v4);
        if (v16 == (_DWORD)v14)
        {
          if (!__stlxr(0, v4))
          {
            v17 = (v14 >> 1) | ((v14 & 1) << 32);
            goto LABEL_23;
          }
        }
        else
        {
          __clrex();
        }
      }
      v17 = 0;
LABEL_23:
      v18 = HIDWORD(v17);
      v19 = (unsigned __int8 *)(a1 + 88);
      if ((_DWORD)v17)
      {
LABEL_24:
        __dmb(0xBu);
        v20 = *(unsigned int **)a1;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + v17, v20));
        v22 = atomic_load(*(unsigned int **)(a1 + 16));
        if ((_DWORD)v17 + v21 != v22 && (_DWORD)v18 != 0)
        {
          while (1)
          {
            v24 = __ldaxr(v19);
            if (v24 != 1)
              break;
            if (!__stlxr(0, v19))
            {
              v25 = *(_QWORD *)(a1 + 80);
              if (!v25)
                sub_100017C6C();
              (*(void (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25);
              goto LABEL_34;
            }
          }
LABEL_39:
          __clrex();
        }
LABEL_34:
        while (1)
        {
          v26 = *v4;
          if (atomic_load(v9))
            break;
          v28 = __ldaxr(v4);
          if (v28 != v26)
            goto LABEL_39;
          if (!__stlxr(0, v4))
          {
            LODWORD(v17) = v26 >> 1;
            LODWORD(v18) = v26 & 1;
            if (v26 > 1)
              goto LABEL_24;
            break;
          }
        }
      }
LABEL_40:
      atomic_store(0, v12);
      __dmb(0xBu);
      if (*v4)
      {
        do
LABEL_41:
          v29 = __ldaxr(v12);
        while (__stlxr(1u, v12));
        if ((v29 & 1) == 0)
        {
          while (1)
          {
            v30 = *v4;
            if (atomic_load(v9))
              break;
            v32 = __ldaxr(v4);
            if (v32 == v30)
            {
              if (!__stlxr(0, v4))
              {
                if (v30 > 1)
                {
                  LODWORD(v18) = v30 & 1;
                  LODWORD(v17) = v30 >> 1;
                  if ((_DWORD)v17)
                    goto LABEL_24;
                  goto LABEL_40;
                }
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
          atomic_store(0, v12);
          __dmb(0xBu);
          if (*v4)
          {
            if (!atomic_load(v9))
              goto LABEL_41;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_100096F9C(_QWORD *a1)
{
  unint64_t v1;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *a1 + 63;
  if (v1 >= 0x40)
  {
    v3 = (unint64_t *)a1[1];
    v4 = &v3[v1 >> 6];
    do
    {
      if (atomic_load(v3))
      {
        while (1)
        {
          v6 = atomic_load(v3);
          if (!v6)
            break;
          v7 = __clz(__rbit64(v6));
          do
            v8 = __ldaxr(v3);
          while (__stlxr(v8 & ~(1 << v7), v3));
          if ((v8 & (1 << v7)) != 0)
            return v7 + 8 * ((_QWORD)v3 - a1[1]);
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return -1;
}

uint64_t sub_100097020@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned __int8 v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char v13;
  unsigned int *v14;
  unsigned int v15;
  char v16;
  char v17;

  v2 = (unsigned __int8 *)(result + 88);
  while (1)
  {
    v3 = atomic_load(*(unsigned int **)result);
    v4 = atomic_load(*(unsigned int **)(result + 16));
    if (v3 == v4)
      break;
LABEL_8:
    v9 = atomic_load(*(unsigned int **)(result + 16));
    v10 = atomic_load(*(unsigned int **)result);
    if (v9 != v10)
    {
      v11 = *(unsigned int **)(result + 16);
      v12 = __ldaxr(v11);
      if (v12 == v9)
      {
        if (!__stlxr(v9 + 1, v11))
        {
          v13 = 1;
LABEL_15:
          if ((v13 & 1) != 0)
            goto LABEL_23;
          while (2)
          {
            v9 = v12;
            v10 = atomic_load(*(unsigned int **)result);
            if (v12 == v10)
              goto LABEL_9;
            v14 = *(unsigned int **)(result + 16);
            v15 = __ldaxr(v14);
            if (v15 == v12)
            {
              if (!__stlxr(v12 + 1, v14))
              {
                v16 = 1;
                goto LABEL_22;
              }
            }
            else
            {
              __clrex();
            }
            v16 = 0;
LABEL_22:
            v12 = v15;
            if ((v16 & 1) != 0)
              goto LABEL_23;
            continue;
          }
        }
      }
      else
      {
        __clrex();
      }
      v13 = 0;
      goto LABEL_15;
    }
LABEL_9:
    v10 = v9;
LABEL_23:
    if (v9 != v10)
    {
      *(_OWORD *)a2 = *(_OWORD *)(*(_QWORD *)(result + 24) + 16 * (*(_DWORD *)(result + 44) & v9));
      v17 = 1;
      goto LABEL_27;
    }
  }
  do
    v5 = __ldaxr(v2);
  while (__stlxr(1u, v2));
  if ((v5 & 1) == 0)
  {
    v6 = atomic_load(*(unsigned int **)result);
    v7 = atomic_load(*(unsigned int **)(result + 16));
    if (v6 != v7)
    {
      while (1)
      {
        v8 = __ldaxr(v2);
        if (v8 != 1)
          break;
        if (!__stlxr(0, v2))
          goto LABEL_8;
      }
      __clrex();
    }
  }
  v17 = 0;
  *(_BYTE *)a2 = 0;
LABEL_27:
  *(_BYTE *)(a2 + 16) = v17;
  return result;
}

unint64_t sub_10009714C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;

  v1 = atomic_load(*(unsigned int **)a1);
  v2 = atomic_load(*(unsigned int **)(a1 + 16));
  if (v1 == v2)
  {
    v3 = (unsigned __int8 *)(a1 + 88);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(1u, v3));
    if ((v4 & 1) != 0
      || (v5 = atomic_load(*(unsigned int **)a1), v6 = atomic_load(*(unsigned int **)(a1 + 16)), v5 == v6))
    {
      LOBYTE(a1) = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
    }
    else
    {
      while (1)
      {
        v10 = __ldaxr(v3);
        if (v10 != 1)
          break;
        if (!__stlxr(0, v3))
          goto LABEL_9;
      }
      LOBYTE(a1) = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      __clrex();
    }
  }
  else
  {
LABEL_9:
    v11 = atomic_load(*(unsigned int **)(a1 + 16));
    v12 = atomic_load(*(unsigned int **)a1);
    if (v11 != v12)
    {
      v13 = *(unsigned int **)(a1 + 16);
      v14 = __ldaxr(v13);
      if (v14 == v11)
      {
        if (__stlxr(v11 + 1, v13))
          goto LABEL_14;
LABEL_20:
        if (v11 != v12)
        {
          v7 = 0;
          LODWORD(a1) = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * (*(_DWORD *)(a1 + 44) & v11));
          v9 = a1 & 0xFFFFFF00;
          v8 = (uint64_t)&_mh_execute_header;
          return v8 | v7 | v9 | a1;
        }
      }
      else
      {
        __clrex();
LABEL_14:
        while (1)
        {
          v12 = atomic_load(*(unsigned int **)a1);
          if (v14 == v12)
            break;
          v11 = v14;
          v15 = *(unsigned int **)(a1 + 16);
          v14 = __ldaxr(v15);
          if (v14 == v11)
          {
            if (!__stlxr(v11 + 1, v15))
              goto LABEL_20;
          }
          else
          {
            __clrex();
          }
        }
      }
    }
    a1 = sub_10009714C();
    v9 = a1 & 0xFFFFFF00;
    v7 = a1 & 0xFFFFFF0000000000;
    v8 = a1 & 0xFF00000000;
  }
  return v8 | v7 | v9 | a1;
}

uint64_t sub_1000972C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  _QWORD *v14;

  v3 = (unsigned int *)(a1 + 48);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = (unsigned int *)(a1 + 8);
  v6 = atomic_load((unsigned int *)(a1 + 8));
  v7 = atomic_load(*(unsigned int **)(a1 + 16));
  v8 = v7 - v6;
  if (v7 - v6 != 1)
  {
    while (v8 != 1 - *(_DWORD *)(a1 + 40))
    {
      v9 = __ldaxr(v5);
      if (v9 == v6)
      {
        if (!__stlxr(v6 + 1, v5))
        {
          v13 = 0;
          v14 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * (*(_DWORD *)(a1 + 44) & v6));
          *v14 = a2;
          v14[1] = a3;
          return v13;
        }
      }
      else
      {
        __clrex();
      }
      v10 = atomic_load(*(unsigned int **)(a1 + 16));
      v8 = v10 - v9;
      v6 = v9;
      if (v8 == 1)
        goto LABEL_10;
    }
  }
  do
LABEL_10:
    v11 = __ldaxr(v3);
  while (__stlxr(v11 - 1, v3));
  if (v11 == 1)
    sub_100096D60(a1, 0, 1);
  return 4294967268;
}

uint64_t sub_1000973A4(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  int v5;
  int v6;

  v6 = a3;
  v5 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_100017C6C();
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v3 + 48))(v3, &v5, &v6);
}

void sub_1000973E4(uint64_t *a1, uint64_t *a2)
{
  std::__sp_mut *sp_mut;
  uint64_t v5;
  uint64_t v6;

  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  v5 = *a1;
  *a1 = *a2;
  *a2 = v5;
  v6 = a1[1];
  a1[1] = a2[1];
  a2[1] = v6;
  std::__sp_mut::unlock(sp_mut);
}

BOOL sub_10009743C(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  v7 = (std::__shared_weak_count *)a1[1];
  v8 = (std::__shared_weak_count *)a2[1];
  if (v7 == v8)
  {
    *a1 = 0;
    a1[1] = 0;
    sub_100027CB4(a1, a3);
    v9 = v7;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    sub_100027CB4(a2, a1);
    v9 = v8;
  }
  std::__sp_mut::unlock(sp_mut);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v7 == v8;
}

void sub_100097518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100012168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10009752C(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100097580(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(v1 + 48))(v1);
  __cxa_rethrow();
}

void sub_100097598(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000975B0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000975D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 24) + 48))();
}

uint64_t sub_1000975F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100097634(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__sp_mut *sp_mut;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  v5 = a1[1];
  *a2 = *a1;
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::__sp_mut::unlock(sp_mut);
}

_QWORD *sub_10009768C(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_1000978DC(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1000978C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000978DC(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_1000979B8(a1, prime);
  }
}

void sub_1000979B8(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      sub_100012320();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *sub_100097B10(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_100097BFC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  sub_100097C3C(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *sub_100097C3C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_100097D70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &off_1001804A8;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = off_100180460;
  sub_1000EBCE8(a1 + 48, (_QWORD *)(a2 + 48));
  sub_1000EBCE8(a1 + 96, (_QWORD *)(a2 + 96));
  v7 = *(_OWORD **)(a2 + 144);
  v8 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v7;
  *(_QWORD *)(a1 + 152) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v7 = *(_OWORD **)(a1 + 144);
  }
  *(_OWORD *)(a1 + 160) = *v7;
  return a1;
}

void sub_100097E10(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100097E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)a1 = &off_1001804A8;
  *(_QWORD *)(a1 + 8) = a2;
  v10 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)a1 = off_100180460;
  sub_1000EBCE8(a1 + 48, a5);
  sub_1000EBCE8(a1 + 96, a6);
  sub_1000989EC(a7, (_QWORD *)(a1 + 144));
  v11 = *(uint64_t **)(a1 + 144);
  v13 = *v11;
  v12 = v11[1];
  *(_QWORD *)(a1 + 160) = v13;
  *(_QWORD *)(a1 + 168) = v12;
  if (v12 == v13)
    v14 = 0;
  else
    v14 = *(_QWORD *)(v12 - 24);
  if (*(_QWORD *)(a1 + 24) > v14)
    v14 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v14;
  *(_BYTE *)(a1 + 32) = 2;
  return a1;
}

void sub_100097F04(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  _Unwind_Resume(exception_object);
}

BOOL sub_100097F48@<W0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v19[6];

  v3 = a2;
  v7 = *(_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 168);
  while (v7 != v6 && *(_QWORD *)(v7 + 8) <= a2)
  {
    v7 += 32;
    *(_QWORD *)(a1 + 160) = v7;
  }
  while (sub_1000EBDF0(a1 + 48, a1 + 96))
  {
    if (*(_DWORD *)(a1 + 80) == 3 || *(_QWORD *)(a1 + 64) > v3)
      break;
    sub_1000EC094((uint64_t *)(a1 + 48), (uint64_t)v19);
    v8 = v19[0];
    v19[0] = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  }
  result = sub_1000EBDF0(a1 + 48, a1 + 96);
  if (result && *(_DWORD *)(a1 + 80) == 3)
  {
    v10 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 56) > v3)
      v3 = *(_QWORD *)(a1 + 56);
    v11 = 3;
    goto LABEL_44;
  }
  result = sub_1000EBD38(a1 + 48, a1 + 96);
  v12 = *(_QWORD *)(a1 + 160);
  v13 = *(_QWORD *)(a1 + 168);
  if (result && v12 == v13)
  {
    v11 = 0;
    v10 = *(_QWORD *)(a1 + 24);
    goto LABEL_44;
  }
  if (v12 == v13)
  {
    v10 = *(_QWORD *)(a1 + 56);
    if (v10 <= v3)
    {
      v10 = *(_QWORD *)(a1 + 64);
      v11 = *(_DWORD *)(a1 + 80);
      goto LABEL_44;
    }
    goto LABEL_39;
  }
  result = sub_1000EBD38(a1 + 48, a1 + 96);
  if (result)
  {
    v14 = *(unint64_t **)(a1 + 160);
    v10 = *v14;
    if (*v14 <= v3)
    {
      v10 = v14[1];
      v11 = *((_DWORD *)v14 + 6);
      goto LABEL_44;
    }
LABEL_39:
    v11 = 0;
    goto LABEL_44;
  }
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(unint64_t **)(a1 + 160);
  v17 = *v16;
  if (*v16 >= v15)
    v10 = *(_QWORD *)(a1 + 56);
  else
    v10 = *v16;
  if (v10 <= v3)
    v10 = v3;
  if (v10 < v15 && v10 < v17)
    goto LABEL_39;
  if (v10 >= v17)
  {
    v17 = v16[1];
  }
  else
  {
    if (v17 >= *(_QWORD *)(a1 + 64))
      v17 = *(_QWORD *)(a1 + 64);
    v16 = (unint64_t *)(a1 + 56);
  }
  v11 = *((_DWORD *)v16 + 6);
  v3 = v10;
  if (*(_QWORD *)(a1 + 24) >= v17)
    v10 = v17;
  else
    v10 = *(_QWORD *)(a1 + 24);
LABEL_44:
  *(_QWORD *)a3 = v3;
  *(_QWORD *)(a3 + 8) = v10;
  *(_BYTE *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = v11;
  return result;
}

BOOL sub_10009812C@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BOOL8 result;
  int v5;
  unint64_t v6;
  uint64_t v7;
  _OWORD v8[2];
  _BYTE v9[28];

  result = sub_100097F48(a1, *(_QWORD *)(a1 + 40), (uint64_t)v9);
  v5 = *(_DWORD *)&v9[24];
  v6 = *(_QWORD *)&v9[8];
  v7 = *(_QWORD *)v9;
  do
  {
    if (v6 >= *(_QWORD *)(a1 + 24))
      break;
    if (v5 == 3)
      break;
    if (v5 != *(_DWORD *)&v9[24])
      break;
    v6 = *(_QWORD *)&v9[8];
    result = sub_100097F48(a1, *(unint64_t *)&v9[8], (uint64_t)v8);
    *(_OWORD *)v9 = v8[0];
    *(_OWORD *)&v9[12] = *(_OWORD *)((char *)v8 + 12);
  }
  while (*(_QWORD *)&v8[0] == v6);
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = v5;
  return result;
}

_QWORD *sub_1000981D8@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE *v10;

  sub_100012568((uint64_t)v9, a2);
  sub_1000982C4(a4, a1, (uint64_t)v9, a3);
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_100098284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000982C4(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;

  v7 = *a2;
  *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
  *(_OWORD *)a1 = v7;
  v8 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *((_QWORD *)a2 + 5);
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(_QWORD *)(a1 + 40) = v9;
  v10 = (_QWORD *)sub_100098988(a1 + 56, (uint64_t)a2 + 56);
  sub_1000609B0(v10, a3);
  v11 = *a4;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a4 + 16);
  *(_OWORD *)(a1 + 8) = v11;
  return a1;
}

void sub_100098344(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_100098920(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100098358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  int v42;
  __int128 v43;
  __int128 v44;
  char v45;
  _QWORD v46[6];
  _QWORD v47[6];
  __int128 v48;
  char *v49;
  std::__shared_weak_count *v50;
  _QWORD v51[6];
  _QWORD v52[6];
  _BYTE v53[24];
  _BYTE *v54;

  sub_100052388(a1, (uint64_t)v52);
  sub_1000524BC(a1, (uint64_t)v51);
  v6 = (char *)operator new(0x30uLL);
  *((_QWORD *)v6 + 1) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_1001804D8;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a2;
  *((_QWORD *)v6 + 5) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v49 = v6 + 24;
  v50 = (std::__shared_weak_count *)v6;
  sub_1000EBCE8((uint64_t)v46, v52);
  sub_1000EBCE8((uint64_t)v47, v51);
  *(_QWORD *)&v48 = v6 + 24;
  *((_QWORD *)&v48 + 1) = v6;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v9 = *((_QWORD *)v6 + 4);
  if (v9 == *((_QWORD *)v6 + 3))
    v10 = 0;
  else
    v10 = *(_QWORD *)(v9 - 24);
  if (*(_QWORD *)(a1 + 16) > v10)
    v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v44 = *(_QWORD *)(a1 + 8);
  *((_QWORD *)&v44 + 1) = v10;
  v45 = 2;
  sub_1000EBCE8((uint64_t)&v35, v46);
  sub_1000EBCE8((uint64_t)&v39, v47);
  v43 = v48;
  if (*((_QWORD *)&v48 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v54 = 0;
  v13 = (char *)operator new(0x78uLL);
  v14 = v35;
  *(_QWORD *)v13 = off_100180528;
  *((_QWORD *)v13 + 1) = v14;
  v15 = v37;
  *((_OWORD *)v13 + 1) = v36;
  *((_OWORD *)v13 + 2) = v15;
  *((_DWORD *)v13 + 12) = v38;
  v16 = v39;
  v35 = 0;
  v39 = 0;
  *((_QWORD *)v13 + 7) = v16;
  v17 = v41;
  *((_OWORD *)v13 + 4) = v40;
  *((_OWORD *)v13 + 5) = v17;
  *((_DWORD *)v13 + 24) = v42;
  *(_OWORD *)(v13 + 104) = v43;
  v43 = 0uLL;
  v54 = v13;
  sub_1000981D8((__int128 *)a1, (uint64_t)v53, &v44, a3);
  v18 = v54;
  if (v54 == v53)
  {
    v19 = 4;
    v18 = v53;
    goto LABEL_15;
  }
  if (v54)
  {
    v19 = 5;
LABEL_15:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v39;
  v39 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
  v24 = v35;
  v35 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v47[0];
  v47[0] = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
  v29 = v46[0];
  v46[0] = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  v30 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v51[0];
  v51[0] = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
  result = v52[0];
  v52[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_1000986A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v29 = *(_QWORD **)(v27 - 80);
  if (v29 == v26)
  {
    v30 = 4;
    v29 = (_QWORD *)(v27 - 104);
  }
  else
  {
    if (!v29)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_6:
  sub_100098794(&a9);
  sub_100098794(&a26);
  sub_100012168(v27 - 216);
  v31 = *(_QWORD *)(v27 - 200);
  *(_QWORD *)(v27 - 200) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
  v32 = *(_QWORD *)(v27 - 152);
  *(_QWORD *)(v27 - 152) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
  _Unwind_Resume(a1);
}

uint64_t *sub_100098794(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_100012168((uint64_t)(a1 + 12));
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *a1;
  *a1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return a1;
}

void sub_1000987EC()
{
  operator new();
}

void sub_10009883C()
{
  operator delete();
}

uint64_t sub_100098860(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_100012168(a1 + 144);
  v2 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return a1;
}

void sub_1000988B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_100012168(a1 + 144);
  v2 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  operator delete();
}

_QWORD *sub_100098920(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1 + 7;
  v3 = (_QWORD *)a1[10];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[4];
  a1[4] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  return a1;
}

uint64_t sub_100098988(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t sub_1000989EC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x30uLL);
  result = sub_100098A44((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_100098A30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100098A44(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_1001804D8;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  sub_100098B04((_QWORD *)(a1 + 24), *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
  return a1;
}

void sub_100098A94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100098AA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001804D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100098AB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001804D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100098AE8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

_QWORD *sub_100098B04(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100098B7C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 4);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100098B60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100098B7C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    sub_100017E44();
  result = (char *)sub_100098BBC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *sub_100098BBC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_100012320();
  return operator new(32 * a2);
}

_QWORD *sub_100098BF0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_100180528;
  sub_100012168((uint64_t)(a1 + 13));
  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return a1;
}

void sub_100098C50(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_100180528;
  sub_100012168((uint64_t)(a1 + 13));
  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  operator delete();
}

_QWORD *sub_100098CC0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = operator new(0x78uLL);
  *v2 = off_100180528;
  sub_100098E5C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100098D00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100098D14(uint64_t a1, _QWORD *a2)
{
  *a2 = off_100180528;
  return sub_100098E5C((uint64_t)(a2 + 1), (_QWORD *)(a1 + 8));
}

uint64_t sub_100098D30(uint64_t a1)
{
  return sub_100098ED4((uint64_t *)(a1 + 8));
}

void sub_100098D38(uint64_t *a1)
{
  sub_100098ED4(a1 + 1);
  operator delete(a1);
}

void sub_100098D60()
{
  operator new();
}

void sub_100098DF0()
{
  operator delete();
}

uint64_t sub_100098E14(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100098E50()
{
}

uint64_t sub_100098E5C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v4 = sub_1000EBCE8(a1, a2);
  sub_1000EBCE8(v4 + 48, a2 + 6);
  v5 = a2[13];
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_QWORD *)(a1 + 104) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return a1;
}

void sub_100098EB0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100098ED4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;

  sub_100012168((uint64_t)(a1 + 12));
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  result = *a1;
  *a1 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_10009924C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100099278(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100099288(uint64_t a1)
{

}

void sub_100099290(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;

  v7 = a2;
  v6 = a3;
  if (!v6)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "signalCommandCompletedWithXpcError:", v6);

}

const void **sub_10009937C(const __CFString *a1, void *a2, __CFDictionary *a3)
{
  CFTypeID TypeID;
  uint64_t v7;
  int v8;
  CFTypeID v9;
  void *v11;
  const char *v12;
  void *v13;
  _QWORD *exception;
  CFTypeID v15;
  _QWORD *v16;
  unsigned __int16 v17;
  void *__p[2];
  char v19;
  char v20;
  void *v21[2];
  char v22;
  void *v23;

  TypeID = CFStringGetTypeID();
  if (a1)
  {
    v7 = TypeID;
    if (CFGetTypeID(a1) != TypeID)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      v15 = CFGetTypeID(a1);
LABEL_19:
      v16 = sub_10009C630(exception, v15, v7);
    }
  }
  v8 = sub_1000FDB18(a1);
  if (v8 == 1651272568 || v8 == 1970628964 || v8 == 1886155636)
  {
    v11 = __cxa_allocate_exception(0x40uLL);
    v12 = "User data contains reserved key(s)";
    goto LABEL_16;
  }
  v9 = CFDataGetTypeID();
  if (!a2)
  {
    v11 = __cxa_allocate_exception(0x40uLL);
    v12 = "Invalid user data content";
LABEL_16:
    v13 = (void *)sub_100005410((uint64_t)v11, (uint64_t)v12, 0x16u);
  }
  v7 = v9;
  if (CFGetTypeID(a2) != v9)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v15 = CFGetTypeID(a2);
    goto LABEL_19;
  }
  sub_100005870(v21, "");
  LOBYTE(__p[0]) = 0;
  v20 = 0;
  sub_10009C634(&v17, 80);
  sub_1000F7290((uint64_t)v21, (uint64_t)__p, 0, &v17, a2, (CFDictionaryRef *)&v23);
  if (v20 && v19 < 0)
    operator delete(__p[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  __p[0] = v23;
  v21[0] = CFArrayCreate(kCFAllocatorDefault, (const void **)__p, 1, &kCFTypeArrayCallBacks);
  CFDictionarySetValue(a3, a1, v21[0]);
  sub_10009D440((const void **)v21);
  return sub_100012138((const void **)&v23);
}

void sub_100099568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_1000995D0(uint64_t a1)
{
  int v1;
  __int128 *v2;
  uint64_t v3;
  int v4;
  __int128 *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _BOOL8 v14;
  __int128 v16;
  char v17;
  void *__p[2];
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v1 = *(_DWORD *)(a1 + 284);
  if (v1)
    v2 = *(__int128 **)(a1 + 72);
  else
    v2 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 280);
  if (v4)
  {
    v16 = *(_OWORD *)(a1 + 96);
    LOBYTE(v4) = 1;
  }
  else
  {
    LOBYTE(v16) = 0;
  }
  v5 = *(__int128 **)(a1 + 80);
  v6 = v1 == 0;
  v17 = v4;
  v7 = *(_QWORD *)(v3 + 72);
  v22 = *(_QWORD *)(v7 + 352);
  v27 = *(_OWORD *)(v7 + 424);
  v28 = *(_OWORD *)(v7 + 440);
  v29 = *(_OWORD *)(v7 + 456);
  v30 = *(_OWORD *)(v7 + 472);
  v23 = *(_OWORD *)(v7 + 360);
  v24 = *(_OWORD *)(v7 + 376);
  v25 = *(_OWORD *)(v7 + 392);
  v26 = *(_OWORD *)(v7 + 408);
  *(_QWORD *)&v21 = sub_1000F1BAC((unsigned int *)&v22);
  *((_QWORD *)&v21 + 1) = v8;
  if (v6)
  {
    if (!v17)
      return 1;
  }
  else
  {
    v9 = *(_QWORD **)(v3 + 32);
    if (v9 == (_QWORD *)(v3 + 40) || v2 == v5)
      goto LABEL_23;
    v10 = 1;
    do
    {
      v20 = *v2;
      if (v10)
        v10 = sub_1000F3528((_DWORD *)v9 + 15, (uint64_t)&v20);
      sub_100005870(__p, "BLX");
      sub_1000F5FB4(v3, (uint64_t)__p, (uint64_t)&v20, (unsigned __int8 *)v9 + 60);
      if (v19 < 0)
        operator delete(__p[0]);
      v21 = *(_OWORD *)sub_10009D470((uint64_t)&v21, (uint64_t)&v20);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      if (v12 == (_QWORD *)(v3 + 40))
        break;
      v2 = (__int128 *)((char *)v2 + 184);
      v9 = v12;
    }
    while (v2 != v5);
    if (v10)
LABEL_23:
      v10 = sub_1000F3528(&v22, (uint64_t)&v21);
    sub_100005870(__p, "Master checksum");
    sub_1000F5FB4(v3, (uint64_t)__p, (uint64_t)&v21, (unsigned __int8 *)&v22);
    if (v19 < 0)
      operator delete(__p[0]);
    if (!v17)
      return v10;
    if (!v10)
    {
      v14 = 0;
      goto LABEL_31;
    }
  }
  v14 = sub_1000F3528((_DWORD *)(*(_QWORD *)(v3 + 72) + 80), (uint64_t)&v16);
LABEL_31:
  sub_100005870(__p, "Data Fork");
  sub_1000F5FB4(v3, (uint64_t)__p, (uint64_t)&v16, (unsigned __int8 *)(*(_QWORD *)(v3 + 72) + 80));
  if (v19 < 0)
    operator delete(__p[0]);
  return v14;
}

void sub_100099868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100099894(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  unsigned __int8 **v5;

  v4 = 0;
  v3 = &v4;
  v1 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v1 == -1)
    sub_100018028();
  v5 = &v3;
  ((void (*)(unsigned __int8 ***, uint64_t))off_100180768[v1])(&v5, a1 + 4);
  return v4;
}

uint64_t sub_1000998EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];
  char v12;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v5 = sub_1000F5FA4(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v7 = *(_QWORD *)(a3 + 72);
  v8 = *(_QWORD *)(a1 + 16) * *(_QWORD *)(a3 + 80);
  v11[0] = 0;
  v11[1] = v8;
  v12 = 2;
  sub_1000999E4((__int128 *)(a1 + 40), (__int128 *)(a1 + 56), (uint64_t)v11, (unsigned int *)(v7 + 80), a1 + 96);
  if (sub_100099894(a1 + 96))
    v9 = 4;
  else
    v9 = 0;
  *(_DWORD *)(a1 + 284) = v9;
  *(_DWORD *)(a1 + 280) = sub_100099894(a1 + 96) ^ 1;
  return a1;
}

void sub_1000999BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10009C8E8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1000999E4(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t a5@<X8>)
{
  uLong v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[68];
  _QWORD **v13;
  _QWORD *v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  _QWORD v20[2];
  _BYTE v21[68];
  _QWORD **v22;
  _QWORD *v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  char v29;

  v9 = sub_1000F1BAC(a4);
  *(_QWORD *)v12 = 850045863;
  v14[0] = 0;
  v14[1] = 0;
  memset(&v12[8], 0, 60);
  v13 = v14;
  v15 = *a1;
  v16 = v15;
  v17 = *a2;
  v19 = 0;
  v11 = v15;
  if ((_QWORD)v15 != (_QWORD)v17)
  {
    v11 = *(_QWORD *)(v15 + 32);
    if ((*(_BYTE *)(v15 + 48) & 2) == 0)
      ++v11;
    v18 = v11;
  }
  v20[0] = v9;
  v20[1] = v10;
  memset(&v21[8], 0, 60);
  v23[0] = 0;
  v23[1] = 0;
  *(_QWORD *)v21 = 850045863;
  v22 = v23;
  v24 = *a1;
  v25 = v24;
  v26 = *a2;
  v27 = v11;
  v28 = 0;
  v29 = 0;
  sub_10009D5E4(a5, (uint64_t)v20, a3);
  sub_10009C8A0((uint64_t)&v22, v23[0]);
  std::mutex::~mutex((std::mutex *)v21);
  sub_10009C8A0((uint64_t)&v13, v14[0]);
  std::mutex::~mutex((std::mutex *)v12);
}

void sub_100099B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,_QWORD *a41)
{
  uint64_t v41;
  std::mutex *v42;
  uint64_t v43;

  sub_10009C8A0(v43, a41);
  std::mutex::~mutex(v42);
  sub_10009C8A0(v41, a19);
  std::mutex::~mutex((std::mutex *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100099B90(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 16);
  sub_10009C8A0(a1 + 88, *(_QWORD **)(a1 + 96));
  std::mutex::~mutex(v2);
  return a1;
}

uint64_t sub_100099BC8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v6;

  *(_DWORD *)(sub_1000998EC(a1, a2, a3) + 284) = 4 * (a4 & 1);
  if ((a4 & 2) != 0)
    v6 = sub_100099894(a1 + 96) ^ 1;
  else
    v6 = 0;
  *(_DWORD *)(a1 + 280) = v6;
  return a1;
}

void sub_100099C14(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100099C28(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100099C28(uint64_t a1)
{
  std::mutex *v2;
  void **v4;

  v2 = (std::mutex *)(a1 + 112);
  sub_10009C8A0(a1 + 184, *(_QWORD **)(a1 + 192));
  std::mutex::~mutex(v2);
  v4 = (void **)(a1 + 72);
  sub_10009C8E8(&v4);
  return a1;
}

uint64_t sub_100099C78(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t *v15;
  _BYTE v16[16];
  std::mutex v17;
  _QWORD *v18[12];

  v2 = (unsigned int *)(a2 + 1);
  v3 = (unsigned int *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    return 0;
  LODWORD(v5) = 0;
  v6 = (__int128 *)(a1 + 40);
  v7 = (__int128 *)(a1 + 56);
  v15 = (uint64_t *)(a1 + 72);
  do
  {
    sub_1000999E4(v6, v7, (uint64_t)(v3 + 8), v3 + 15, (uint64_t)v16);
    v8 = *(_QWORD *)(a1 + 80);
    if (v8 >= *(_QWORD *)(a1 + 88))
    {
      v9 = sub_10009C988(v15, (uint64_t)v16);
    }
    else
    {
      sub_10009CAA4(*(_QWORD *)(a1 + 80), (uint64_t)v16);
      v9 = v8 + 184;
      *(_QWORD *)(a1 + 80) = v8 + 184;
    }
    *(_QWORD *)(a1 + 80) = v9;
    sub_10009C8A0((uint64_t)v18, v18[1]);
    std::mutex::~mutex(&v17);
    v10 = v3[15];
    v11 = v10 == 10 || v10 == 0;
    if (v11)
      v5 = v5;
    else
      v5 = 2;
    v12 = (unsigned int *)*((_QWORD *)v3 + 1);
    if (v12)
    {
      do
      {
        v13 = v12;
        v12 = *(unsigned int **)v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v13 = (unsigned int *)*((_QWORD *)v3 + 2);
        v11 = *(_QWORD *)v13 == (_QWORD)v3;
        v3 = v13;
      }
      while (!v11);
    }
    v3 = v13;
  }
  while (v13 != v2);
  return v5;
}

void sub_100099DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100099B90((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100099DF8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t result;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t **v35;
  unint64_t *v36;
  _QWORD *v37;
  _QWORD *v38;
  BOOL v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned int v43;
  BOOL v44;
  __int128 v45;
  const void *v46;
  std::__shared_weak_count *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;

  v51 = a2;
  result = sub_10009D7A4(a5, a4);
  if (a4)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 136))(*a1);
    v50 = v9;
    v49 = 0uLL;
    v48 = 0uLL;
    if ((sub_10009A2A8(*a1) & 1) == 0)
    {
      v10 = *(std::__shared_weak_count **)(v9 + 48);
      v46 = *(const void **)(v9 + 40);
      v47 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v13 = *(_QWORD **)(v9 + 16);
      if (v13 != (_QWORD *)(v9 + 24))
      {
        do
        {
          if ((_QWORD)v48)
          {
            if (!(_QWORD)v49)
            {
              sub_10003A29C((_QWORD **)v48);
              v14 = v45;
              v45 = 0uLL;
              v15 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
              v49 = v14;
              if (v15)
              {
                v16 = (unint64_t *)&v15->__shared_owners_;
                do
                  v17 = __ldaxr(v16);
                while (__stlxr(v17 - 1, v16));
                if (!v17)
                {
                  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                  std::__shared_weak_count::__release_weak(v15);
                }
              }
              v18 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
              if (*((_QWORD *)&v45 + 1))
              {
                v19 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
                do
                  v20 = __ldaxr(v19);
                while (__stlxr(v20 - 1, v19));
                if (!v20)
                {
                  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                  std::__shared_weak_count::__release_weak(v18);
                }
              }
            }
          }
          else
          {
            LODWORD(v52) = 1;
            v44 = a3 != 1;
            sub_10009D99C((uint64_t)&v46, &v51, (int *)&v52, (unsigned __int8 *)&v44, &v45);
            v21 = v45;
            v45 = 0uLL;
            v22 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
            v48 = v21;
            if (v22)
            {
              v23 = (unint64_t *)&v22->__shared_owners_;
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            v25 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
            if (*((_QWORD *)&v45 + 1))
            {
              v26 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
            sub_100027CB4(&v49, (uint64_t *)&v48);
          }
          if (a3 == 1 || (const void *)v13[5] == v46)
          {
            v43 = *((_DWORD *)v13 + 8);
            v45 = v49;
            if (*((_QWORD *)&v49 + 1))
            {
              v33 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
              do
                v34 = __ldxr(v33);
              while (__stxr(v34 + 1, v33));
            }
            v52 = &v43;
            v35 = sub_10004EADC((uint64_t **)(v9 + 16), &v43, (uint64_t)&unk_100141000, &v52);
            sub_100027CB4(v35 + 5, (uint64_t *)&v45);
            v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
            if (!*((_QWORD *)&v45 + 1))
              goto LABEL_47;
            v36 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
            do
              v32 = __ldaxr(v36);
            while (__stlxr(v32 - 1, v36));
          }
          else
          {
            v45 = v49;
            if (*((_QWORD *)&v49 + 1))
            {
              v28 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
              do
                v29 = __ldxr(v28);
              while (__stxr(v29 + 1, v28));
            }
            sub_10011E954((uint64_t)(v13 + 5), &v46, (uint64_t *)&v45);
            v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
            if (!*((_QWORD *)&v45 + 1))
              goto LABEL_47;
            v31 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
          }
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
LABEL_47:
          v37 = (_QWORD *)v13[1];
          if (v37)
          {
            do
            {
              v38 = v37;
              v37 = (_QWORD *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              v38 = (_QWORD *)v13[2];
              v39 = *v38 == (_QWORD)v13;
              v13 = v38;
            }
            while (!v39);
          }
          v13 = v38;
        }
        while (v38 != (_QWORD *)(v9 + 24));
      }
      *(_BYTE *)(v9 + 56) = 0;
      v40 = v47;
      if (v47)
      {
        v41 = (unint64_t *)&v47->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    sub_10009A384();
  }
  return result;
}

void sub_10009A238(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10009D8F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009A2A8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _BOOL8 v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v1 = *(_QWORD **)(a1 + 168);
  v2 = (_QWORD *)(a1 + 176);
  if (v1 == (_QWORD *)(a1 + 176))
    return 1;
  do
  {
    sub_10011E808((uint64_t)(v1 + 5), &v13);
    v3 = v1[5];
    v5 = v13;
    v4 = v14;
    v6 = v3 == v13;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v3 != v5)
      break;
    v9 = (_QWORD *)v1[1];
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (_QWORD *)v1[2];
        v11 = *v10 == (_QWORD)v1;
        v1 = v10;
      }
      while (!v11);
    }
    v1 = v10;
  }
  while (v10 != v2);
  return v6;
}

void sub_10009A384()
{
  operator new();
}

uint64_t sub_10009A4A8(int32x2_t *a1, uint64_t a2)
{
  uint64_t (**v4)();
  _QWORD *v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int32 v15;
  __int32 v16;
  int v17;
  int32x2_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v27;
  _QWORD *v28;
  BOOL v29;
  int32x2_t v30;
  int32x2_t i;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  unint64_t v42[2];
  char v43;
  char v44[16];
  __int128 v45;
  uint64_t v46;
  unint64_t v47[2];
  char v48;
  unsigned int v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  _BYTE v52[144];
  _BYTE v53[152];
  _QWORD v54[2];
  uint64_t v55;

  v4 = sub_1000388D4();
  v39 = (*(uint64_t (**)(int32x2_t))(**(_QWORD **)a1 + 24))(*a1);
  v5 = (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)a1 + 72))(v54);
  if (v54[0] <= (unint64_t)v4[2] / v39 * v39)
    v6 = (unint64_t)v4[2] / v39 * v39;
  else
    v6 = v54[0];
  v7 = *((_DWORD *)v4 + 2);
  if (v7 == 1)
  {
    v8 = ((uint64_t (*)(_QWORD *))*v4)(v5);
  }
  else
  {
    if (v7)
      sub_100018028();
    v8 = *(_DWORD *)v4;
  }
  v9 = (unint64_t)v4[3] / v6;
  if (v8 < v9)
    LODWORD(v9) = v8;
  if (v9 <= 1)
    v10 = 1;
  else
    v10 = v9;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)a1 + 72))(v54);
  v38 = v55 + v6;
  sub_1000FF230((uint64_t)v54, v55 + v6, 0, v10);
  v50 = 0;
  v51 = 0;
  v11 = (uint64_t)a1[1];
  v12 = sub_1000F5FA4(v11);
  v37 = v13;
  v14 = (_QWORD *)v12;
  if (a1[35].i32[1])
  {
    v15 = sub_100099C78((uint64_t)a1, (_QWORD *)(v11 + 32));
    a1[35].i32[1] = v15;
  }
  else
  {
    v15 = 0;
  }
  v16 = a1[35].i32[0];
  if (sub_10009A2A8((uint64_t)*a1))
  {
    a1[35] = (int32x2_t)vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32(a1[35]));
    v17 = 2;
  }
  else
  {
    v17 = v16 | v15;
  }
  sub_100099DF8((uint64_t *)a1, v38, v17, v10, (uint64_t)v53);
  sub_100041BCC(a2, v10, (uint64_t)v52);
  v18 = a1[9];
  v49 = 0;
  v19 = *(_QWORD **)(v11 + 32);
  if (v19 != (_QWORD *)(v11 + 40) && v14 != v37)
  {
    v20 = (v39 + v6 - 1) / v39;
    while ((unint64_t)(v14[6] & 1) + v14[5] - 1 > (unint64_t)(v19[6] & 1) + v19[5] - 1)
    {
LABEL_23:
      v21 = (_QWORD *)v19[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v19[2];
          v29 = *v22 == (_QWORD)v19;
          v19 = v22;
        }
        while (!v29);
      }
      if (v22 != (_QWORD *)(v11 + 40))
      {
        *(_QWORD *)&v18 += 184;
        v19 = v22;
        if (v14 != v37)
          continue;
      }
      goto LABEL_57;
    }
    v23 = v14;
    while (1)
    {
      v45 = *((_OWORD *)v19 + 2);
      v46 = v19[6];
      sub_10005C744((unint64_t *)&v45, v23 + 4, (uint64_t)v47);
      v24 = v47[0];
      if ((v48 & 2) == 0)
        v24 = v47[0] + 1;
      if (v24 <= (v48 & 1) + v47[1] - 1)
        break;
      v28 = (_QWORD *)v23[1];
      if (v28)
      {
        do
        {
          v14 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v23[2];
          v29 = *v14 == (_QWORD)v23;
          v23 = v14;
        }
        while (!v29);
      }
      v29 = (unint64_t)(v14[6] & 1) + v14[5] - 1 > (unint64_t)(v19[6] & 1) + v19[5] - 1 || v14 == v37;
      v23 = v14;
      if (v29)
        goto LABEL_23;
    }
    if (!atomic_load(&v49))
    {
      v42[0] = v24;
      v42[1] = v24 + v20;
      v43 = 2;
      sub_10005C744(v42, v47, (uint64_t)v44);
      if (v17 == 1)
      {
        v41[0] = v50;
        v41[1] = v51;
        if (v51)
        {
          p_shared_owners = (unint64_t *)&v51->__shared_owners_;
          do
            v27 = __ldxr(p_shared_owners);
          while (__stxr(v27 + 1, p_shared_owners));
        }
        sub_10009AB48((uint64_t)v53, &v40);
      }
      sub_1000FF2DC((uint64_t)v54, v41);
    }
    v30 = a1[9];
    for (i = a1[10]; *(_QWORD *)&v30 != *(_QWORD *)&i; *(_QWORD *)&v30 += 184)
    {
      *(_BYTE *)(*(_QWORD *)&v30 + 176) = 1;
      sub_10009DAC0(*(_QWORD *)&v30 + 16);
    }
    a1[34].i8[0] = 1;
    sub_10009DAC0((uint64_t)&a1[14]);
  }
LABEL_57:
  v32 = atomic_load(&v49);
  sub_100041B4C(v52);
  sub_10009D8F4((uint64_t)v53);
  v33 = v51;
  if (v51)
  {
    v34 = (unint64_t *)&v51->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_1000FF2D8(v54);
  return v32;
}

void sub_10009AABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  sub_100041B4C(&a54);
  sub_10009D8F4((uint64_t)&a72);
  sub_100012168((uint64_t)&a52);
  sub_1000FF2D8(&STACK[0x290]);
  _Unwind_Resume(a1);
}

void sub_10009AB48(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 144))
    v6 = v5 == v4;
  else
    v6 = 0;
  if (!v6)
  {
    if (v5 == v4)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 96), &__lk);
        v4 = *(_QWORD *)(a1 + 16);
      }
      while (*(_QWORD *)(a1 + 8) == v4);
    }
    v7 = *(_QWORD *)(v4 - 8);
    *(_QWORD *)(a1 + 16) = v4 - 8;
    sub_10009DB08(a2, v7);
  }
  sub_10009A384();
}

void sub_10009AC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14)
{
  uint64_t v15;

  sub_100012168((uint64_t)&a10);
  v15 = a12;
  a12 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

void sub_10009AC9C(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unsigned int *v115;
  std::__shared_weak_count *v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count *v127;
  __int128 v128;
  int v129;
  std::__shared_weak_count *v130;
  __int128 v131;
  _BYTE v132[32];
  void *__p;
  uint64_t v134;
  uint64_t v135;
  _BYTE v136[72];
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count *v143;

  v2 = *(unsigned __int8 *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = (*(_QWORD *)(a1 + 48) - v3 + (v2 & 1) + (int)(((v2 >> 1) & 1) - 1)) * v5;
  if ((v2 & 2) != 0)
    v7 = *(_QWORD *)(a1 + 40);
  else
    v7 = v3 + 1;
  v8 = v7 * v5;
  v10 = *(std::__shared_weak_count **)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  v119 = *(_QWORD *)(a1 + 72);
  v120 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v121 = v6;
  v122 = v8;
  v123 = v9;
  v124 = 0;
  v13 = *(uint64_t **)(a1 + 96);
  sub_10002E7FC(&v119, (uint64_t *)&v131);
  sub_10002CA7C((uint64_t)v136, (uint64_t)&v128);
  sub_10002C64C((uint64_t)v136, (uint64_t)&v125);
  v14 = sub_1000134D4(*v13);
  v16 = v15;
  v17 = v127;
  if (v127)
  {
    v18 = (unint64_t *)&v127->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v126;
  if (v126)
  {
    v21 = (unint64_t *)&v126->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v130;
  if (v130)
  {
    v24 = (unint64_t *)&v130->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v143;
  if (v143)
  {
    v30 = (unint64_t *)&v143->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v142;
  if (v142)
  {
    v33 = (unint64_t *)&v142->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v141;
  if (v141)
  {
    v36 = (unint64_t *)&v141->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v140;
  if (v140)
  {
    v39 = (unint64_t *)&v140->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v139;
  if (v139)
  {
    v42 = (unint64_t *)&v139->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v137;
  if (v137)
  {
    v45 = (unint64_t *)&v137->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v134 && &v135 != __p)
    operator delete(__p);
  sub_100015C2C((uint64_t)&v131);
  if ((v14 & 0x8000000000000000) == 0 || !(_DWORD)v14)
  {
    v47 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)&v128 = *(_QWORD *)(a1 + 72) + v8 - v16;
    *((_QWORD *)&v128 + 1) = v47;
    if (v47)
    {
      v48 = (unint64_t *)(v47 + 8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    v50 = 0;
    v51 = *(_QWORD *)(a1 + 64);
    v52 = v122;
    if (v121 <= v51)
      v53 = *(_QWORD *)(a1 + 64);
    else
      v53 = v121;
    if (v121)
      v54 = v53;
    else
      v54 = 0;
    v55 = v51 + v122 + v54 - 1;
    v125 = 0;
    v126 = 0;
    if ((*(_BYTE *)(a1 + 128) & 1) != 0 && v8 == v16)
    {
      v56 = *(_QWORD *)(a1 + 96);
      v57 = *(_QWORD *)(v56 + 8);
      v58 = *(_QWORD *)(v57 + 72);
      *(_QWORD *)&v131 = *(_QWORD *)(v57 + 64);
      *((_QWORD *)&v131 + 1) = v58;
      if (v58)
      {
        v59 = (unint64_t *)(v58 + 8);
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
        v61 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
        *(_OWORD *)v132 = *(_OWORD *)(v57 + 80);
        *(_OWORD *)&v132[9] = *(_OWORD *)(v57 + 89);
        if (*((_QWORD *)&v131 + 1))
        {
          v62 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
      }
      sub_100027CB4(&v125, (uint64_t *)&v131);
      v64 = *(_QWORD *)(v56 + 8);
      v65 = *(std::__shared_weak_count **)(v64 + 72);
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
        v50 = *(_QWORD *)(v64 + 80);
        do
          v68 = __ldaxr(v66);
        while (__stlxr(v68 - 1, v66));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      else
      {
        v50 = *(_QWORD *)(v64 + 80);
      }
    }
    v69 = *(_DWORD *)(v4 + 284);
    v70 = v50;
    if (v69 != 1)
    {
      if (v69 != 2)
        goto LABEL_120;
      v70 = v6;
    }
    if (v70)
    {
      v71 = *(_QWORD *)(a1 + 120);
      if (v69 == 2)
      {
        v73 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
        v117 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
        v72 = v128;
        if (*((_QWORD *)&v128 + 1))
        {
          v76 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
          do
            v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
        }
      }
      else
      {
        v72 = v125;
        v73 = v126;
        v117 = v126;
        if (v126)
        {
          v74 = (unint64_t *)&v126->__shared_owners_;
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
      }
      v78 = *(_DWORD *)(v4 + 284);
      if (v78 == 1)
        v79 = v50;
      else
        v79 = 0;
      if (v78 == 2)
        v80 = v6;
      else
        v80 = v79;
      *(_QWORD *)&v131 = v52 / v51;
      *((_QWORD *)&v131 + 1) = v55 / v51;
      v132[0] = 2;
      *(_QWORD *)&v132[8] = v72;
      *(_QWORD *)&v132[16] = v73;
      if (v73)
      {
        v81 = (unint64_t *)&v73->__shared_owners_;
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      *(_QWORD *)&v132[24] = v80;
      sub_10009B6AC(v71, &v131);
      v83 = *(std::__shared_weak_count **)&v132[16];
      if (*(_QWORD *)&v132[16])
      {
        v84 = (unint64_t *)(*(_QWORD *)&v132[16] + 8);
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      if (v117)
      {
        v86 = (unint64_t *)&v117->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
    }
LABEL_120:
    v88 = *(_DWORD *)(v4 + 280);
    v89 = v50;
    if (v88 != 1)
    {
      if (v88 != 2)
      {
LABEL_151:
        if (!*(_BYTE *)(a1 + 132))
          sub_10009BBFC(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8));
        v106 = v126;
        if (v126)
        {
          v107 = (unint64_t *)&v126->__shared_owners_;
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        v109 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
        if (*((_QWORD *)&v128 + 1))
        {
          v110 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
            std::__shared_weak_count::__release_weak(v109);
          }
        }
        goto LABEL_163;
      }
      v89 = v6;
    }
    if (v89)
    {
      if (v88 == 2)
      {
        v91 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
        v118 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
        v90 = v128;
        if (*((_QWORD *)&v128 + 1))
        {
          v94 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
      }
      else
      {
        v90 = v125;
        v91 = v126;
        v118 = v126;
        if (v126)
        {
          v92 = (unint64_t *)&v126->__shared_owners_;
          do
            v93 = __ldxr(v92);
          while (__stxr(v93 + 1, v92));
        }
      }
      v96 = *(_DWORD *)(v4 + 280);
      if (v96 == 1)
        v97 = v50;
      else
        v97 = 0;
      if (v96 == 2)
        v98 = v6;
      else
        v98 = v97;
      *(_QWORD *)&v131 = v52 / v51;
      *((_QWORD *)&v131 + 1) = v55 / v51;
      v132[0] = 2;
      *(_QWORD *)&v132[8] = v90;
      *(_QWORD *)&v132[16] = v91;
      if (v91)
      {
        v99 = (unint64_t *)&v91->__shared_owners_;
        do
          v100 = __ldxr(v99);
        while (__stxr(v100 + 1, v99));
      }
      *(_QWORD *)&v132[24] = v98;
      sub_10009B6AC(v4 + 96, &v131);
      v101 = *(std::__shared_weak_count **)&v132[16];
      if (*(_QWORD *)&v132[16])
      {
        v102 = (unint64_t *)(*(_QWORD *)&v132[16] + 8);
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      if (v118)
      {
        v104 = (unint64_t *)&v118->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
    }
    goto LABEL_151;
  }
  v115 = *(unsigned int **)(a1 + 112);
  while (!__ldaxr(v115))
  {
    if (!__stlxr(v14, v115))
    {
      *(_QWORD *)&v128 = "details::udif_verify::calculate_checksums(workqueue::workqueue &)_block_invoke";
      *((_QWORD *)&v128 + 1) = 41;
      v129 = 16;
      sub_10009B5C4(&v131, &v128);
      sub_100005A0C(&v138, (uint64_t)"Error reading sectors for verify ", 33);
      std::ostream::operator<<(&v138, v14);
      sub_10009B66C((uint64_t)&v131);
      goto LABEL_163;
    }
  }
  __clrex();
LABEL_163:
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
}

void sub_10009B520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_10009B66C((uint64_t)&a57);
  sub_100012168((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_10009B5C4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_10009DD44((uint64_t)a1, a2);
  *a1 = off_100180790;
  a1[45] = &off_100180890;
  a1[46] = &off_1001808B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100180790;
  a1[45] = off_100180818;
  a1[46] = off_100180840;
  return a1;
}

void sub_10009B648(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10009D048(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009B66C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100180858);
  sub_10009D048(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10009B6AC(uint64_t a1, __int128 *a2)
{
  std::mutex *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t i;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  int v53;
  _QWORD v54[2];
  _BYTE v55[24];
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;

  v3 = (std::mutex *)(a1 + 16);
  v50 = *a2;
  v4 = *((_QWORD *)a2 + 3);
  v51 = *((_QWORD *)a2 + 2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 4);
  v6 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  v52 = v5;
  v7 = v50;
  v53 = *(_DWORD *)((char *)&v51 + 1);
  HIBYTE(v53) = BYTE4(v51);
  std::mutex::lock((std::mutex *)(a1 + 16));
  if (*(_BYTE *)(a1 + 168))
  {
    std::mutex::unlock(v3);
  }
  else
  {
    *(_OWORD *)v55 = v50;
    v55[16] = v51;
    *(_DWORD *)&v55[17] = v53;
    *(_DWORD *)&v55[20] = HIDWORD(v51);
    v56 = a1;
    v57 = v50;
    v58 = v51;
    v59 = v4;
    v52 = 0;
    v60 = v5;
    v61 = v6;
    sub_10009DDC0((uint64_t **)(a1 + 88), (unint64_t *)v55, (uint64_t)v55);
    v8 = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if ((v51 & 2) == 0)
      v7 = v50 + 1;
    v11 = *(_QWORD *)(a1 + 160);
    std::mutex::unlock(v3);
    if (v7 == v11)
    {
      v12 = (uint64_t *)(a1 + 96);
      while (1)
      {
        *(_QWORD *)v55 = &v56;
        *(_OWORD *)&v55[8] = xmmword_100140690;
        std::mutex::lock(v3);
        v13 = *(uint64_t **)(a1 + 88);
        v14 = *(_QWORD *)(a1 + 160);
        if (v13 != v12)
        {
          v15 = *(_QWORD **)(a1 + 144);
          v16 = *(_QWORD **)(a1 + 112);
          v17 = *(uint64_t **)(a1 + 88);
          while (v16 != v15)
          {
            v18 = v17[4];
            if ((v17[6] & 2) == 0)
              ++v18;
            if (v18 != v14)
              break;
            v14 = v17[5] + (v17[6] & 1);
            for (i = (v16[6] & 1) + v16[5]; v14 > i - 1; i = (v16[6] & 1) + v16[5])
            {
              v20 = (_QWORD *)v16[1];
              v21 = v16;
              if (v20)
              {
                do
                {
                  v16 = v20;
                  v20 = (_QWORD *)*v20;
                }
                while (v20);
              }
              else
              {
                do
                {
                  v16 = (_QWORD *)v21[2];
                  v22 = *v16 == (_QWORD)v21;
                  v21 = v16;
                }
                while (!v22);
              }
              *(_QWORD *)(a1 + 112) = v16;
              if (v16 == v15)
              {
                v16 = v15;
                break;
              }
              if ((v16[6] & 2) != 0)
                v14 = v16[4];
              else
                v14 = v16[4] + 1;
            }
            v23 = (uint64_t *)v17[1];
            if (v23)
            {
              do
              {
                v24 = v23;
                v23 = (uint64_t *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                v24 = (uint64_t *)v17[2];
                v22 = *v24 == (_QWORD)v17;
                v17 = v24;
              }
              while (!v22);
            }
            v17 = v24;
            if (v24 == v12)
            {
              v17 = (uint64_t *)(a1 + 96);
              break;
            }
          }
          if (v13 != v17)
          {
            v25 = 0;
            v26 = v13;
            do
            {
              v27 = v25;
              v28 = (uint64_t *)v26[1];
              if (v28)
              {
                do
                {
                  v29 = v28;
                  v28 = (uint64_t *)*v28;
                }
                while (v28);
              }
              else
              {
                do
                {
                  v29 = (uint64_t *)v26[2];
                  v22 = *v29 == (_QWORD)v26;
                  v26 = v29;
                }
                while (!v22);
              }
              ++v25;
              v26 = v29;
            }
            while (v29 != v17);
            if (*(_QWORD *)&v55[16] <= v27)
            {
              if (v27 >= 0x249249249249249)
                sub_1000158AC("get_next_capacity, allocator's max size reached");
              v30 = operator new(56 * v25);
              sub_10009E060((uint64_t *)v55, (uint64_t)v30, v25, *(_QWORD *)v55 + 56 * *(_QWORD *)&v55[8], 0, 0);
            }
            do
            {
              v31 = *(_QWORD *)v55;
              v32 = *(_QWORD *)&v55[8];
              v33 = (_QWORD *)(*(_QWORD *)v55 + 56 * *(_QWORD *)&v55[8]);
              if (*(_QWORD *)&v55[8] == *(_QWORD *)&v55[16])
              {
                sub_10009E200((uint64_t *)v55, (uint64_t)v33, 1, (uint64_t)(v13 + 7), v54);
              }
              else
              {
                *v33 = v13[7];
                v34 = v31 + 56 * v32;
                v35 = *((_OWORD *)v13 + 4);
                *(_QWORD *)(v34 + 24) = v13[10];
                *(_OWORD *)(v34 + 8) = v35;
                *(_OWORD *)(v34 + 32) = *(_OWORD *)(v13 + 11);
                v13[11] = 0;
                v13[12] = 0;
                *(_QWORD *)(v34 + 48) = v13[13];
                ++*(_QWORD *)&v55[8];
              }
              v36 = sub_100040DA8((uint64_t **)(a1 + 88), v13);
              sub_100012168((uint64_t)(v13 + 11));
              operator delete(v13);
              v13 = v36;
            }
            while (v17 != v36);
          }
        }
        std::mutex::unlock(v3);
        if (*(_QWORD *)&v55[8])
        {
          v37 = *(uint64_t **)v55;
          v38 = *(_QWORD *)v55 + 56 * *(_QWORD *)&v55[8];
          do
          {
            v39 = *v37;
            v40 = v37[6];
            v54[0] = v37[4];
            v54[1] = v40;
            sub_10009D54C(v39, (uint64_t)v54);
            v37 += 7;
          }
          while (v37 != (uint64_t *)v38);
          v41 = *(_QWORD *)&v55[8];
          if (*(_QWORD *)&v55[8])
          {
            v42 = *(_QWORD *)v55 + 32;
            do
            {
              --v41;
              v42 = sub_100012168(v42) + 56;
            }
            while (v41);
          }
        }
        *(_QWORD *)&v55[8] = 0;
        std::mutex::lock(v3);
        *(_QWORD *)(a1 + 160) = v14;
        v43 = *(_QWORD *)(a1 + 88);
        if ((uint64_t *)v43 == v12 || *(_QWORD *)(a1 + 112) == *(_QWORD *)(a1 + 144))
          break;
        v44 = *(_BYTE *)(v43 + 48);
        v45 = *(_QWORD *)(v43 + 32);
        if ((v44 & 2) != 0)
          v46 = v45;
        else
          v46 = v45 + 1;
        std::mutex::unlock(v3);
        if (v46 != v14)
          goto LABEL_68;
        sub_10009E4B4((uint64_t)v55);
      }
      std::mutex::unlock(v3);
LABEL_68:
      sub_10009E4B4((uint64_t)v55);
    }
  }
  if (v52)
  {
    v47 = (unint64_t *)&v52->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  return a1;
}

void sub_10009BBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::mutex *v24;

  std::mutex::unlock(v24);
  sub_10009E4B4((uint64_t)&a24);
  sub_100012168(a10);
  _Unwind_Resume(a1);
}

void sub_10009BBFC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5[3];

  memset(v5, 0, 41);
  sub_100015BC8(a1 + 64, v5);
  *(_OWORD *)(a1 + 80) = v5[1];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)&v5[1] + 9);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5[0] + 1);
  if (*((_QWORD *)&v5[0] + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5[0] + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

_QWORD *sub_10009BC80(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[10];
  result[9] = a2[9];
  result[10] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[13];
  result[12] = a2[12];
  result[13] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t sub_10009BCC4(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 72;
  sub_100012168(a1 + 96);
  return sub_100012168(v1);
}

void sub_10009BCEC()
{
  sub_1000F6C68();
}

void sub_10009BD64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100012138((const void **)va);
  _Unwind_Resume(a1);
}

void sub_10009BD78(const __CFString *a1, const void *a2, __CFDictionary *a3)
{
  CFTypeID TypeID;
  CFTypeID v7;
  int v8;
  CFTypeID v9;
  const void *ValueAtIndex;
  CFTypeID v11;
  CFTypeID v12;
  CFTypeID v13;
  _QWORD *exception;
  CFTypeID v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  TypeID = CFStringGetTypeID();
  if (a1)
  {
    v7 = TypeID;
    if (CFGetTypeID(a1) != TypeID)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      v15 = CFGetTypeID(a1);
LABEL_16:
      v16 = exception;
      v17 = v7;
      goto LABEL_17;
    }
  }
  v8 = sub_1000FDB18(a1);
  switch(v8)
  {
    case 1651272568:
      return;
    case 1886155636:
      return;
    case 1970628964:
      return;
  }
  v9 = CFArrayGetTypeID();
  if (!a2)
    return;
  v7 = v9;
  if (CFGetTypeID(a2) != v9)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v15 = CFGetTypeID(a2);
    goto LABEL_16;
  }
  if (CFArrayGetCount((CFArrayRef)a2) >= 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, 0);
    v11 = CFDictionaryGetTypeID();
    if (ValueAtIndex)
    {
      v12 = v11;
      if (CFGetTypeID(ValueAtIndex) != v11)
      {
LABEL_19:
        v19 = __cxa_allocate_exception(0x40uLL);
        v15 = CFGetTypeID(ValueAtIndex);
        v16 = v19;
        v17 = v12;
LABEL_17:
        v18 = sub_10009C630(v16, v15, v17);
      }
      ValueAtIndex = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("Data"));
      v13 = CFDataGetTypeID();
      if (ValueAtIndex)
      {
        v12 = v13;
        if (CFGetTypeID(ValueAtIndex) == v13)
        {
          CFDictionaryAddValue(a3, a1, ValueAtIndex);
          return;
        }
        goto LABEL_19;
      }
    }
  }
}

void sub_10009BF30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10009BF50()
{
  sub_1000F6C68();
}

void sub_10009C0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_100028068(&a9);
  sub_100012138(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10009C0FC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  void **v8;
  int32x2_t v9[9];
  uint64_t v10;
  std::mutex v11;
  _QWORD *v12[13];

  v5 = a1 + 64;
  if (a3)
  {
    sub_100099BC8((uint64_t)v9, a1, v5, 3);
    if (!sub_10009A4A8(v9, a2))
      goto LABEL_6;
  }
  else
  {
    sub_1000998EC((uint64_t)v9, a1, v5);
    if (!sub_10009A4A8(v9, a2))
    {
LABEL_6:
      v6 = sub_1000995D0((uint64_t)v9);
      goto LABEL_7;
    }
  }
  v6 = 0;
LABEL_7:
  sub_10009C8A0((uint64_t)v12, v12[1]);
  std::mutex::~mutex(&v11);
  v8 = (void **)&v10;
  sub_10009C8E8(&v8);
  return v6;
}

void sub_10009C1E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100099C28((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10009C208@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;

  v2 = result[5];
  v4 = (_QWORD *)result[8];
  v3 = (_QWORD *)result[9];
  if (v4 == v3)
  {
LABEL_9:
    v8 = 0;
    v9 = 1;
    v4 = v3;
    goto LABEL_21;
  }
  while (1)
  {
    v5 = v4[5];
    if (v2 <= (v4[6] & 1) + v5 - 1)
      break;
    v6 = (_QWORD *)v4[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)v4[2];
        v16 = *v7 == (_QWORD)v4;
        v4 = v7;
      }
      while (!v16);
    }
    result[8] = v7;
    v4 = v7;
    if (v7 == v3)
      goto LABEL_9;
  }
  v10 = v4[4];
  if ((v4[6] & 2) != 0)
  {
    if (v2 < v10)
      goto LABEL_20;
  }
  else if (v10 >= v2)
  {
    goto LABEL_20;
  }
  if ((v4[6] & 1) != 0)
  {
    if (v5 >= v2)
      goto LABEL_18;
LABEL_20:
    v8 = 0;
    v9 = 1;
    goto LABEL_21;
  }
  if (v2 >= v5)
    goto LABEL_20;
LABEL_18:
  v11 = *((_DWORD *)v4 + 14);
  if (v11 != 1 && (v11 & 0xFF000000) != 0x80000000)
    goto LABEL_20;
  v9 = 0;
  v8 = 1;
LABEL_21:
  v12 = result[3];
  v13 = v2;
  if (v2 < v12)
  {
    v13 = v2;
    do
    {
      v14 = v12;
      if (v4 == v3)
        goto LABEL_27;
      v14 = v4[4];
      if ((v4[6] & 2) == 0)
        ++v14;
      if (v14 > v13)
      {
LABEL_27:
        if ((v8 & 1) != 0)
          break;
      }
      else
      {
        if (v8)
        {
          v15 = *((_DWORD *)v4 + 14);
          v16 = v15 == 1 || (v15 & 0xFF000000) == 0x80000000;
          if (!v16)
            break;
        }
        if (v9)
        {
          v17 = *((_DWORD *)v4 + 14);
          if (v17 == 1 || (v17 & 0xFF000000) == 0x80000000)
            break;
        }
        v18 = (_QWORD *)v4[1];
        v19 = v4;
        if (v18)
        {
          do
          {
            v20 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v20 = (_QWORD *)v19[2];
            v16 = *v20 == (_QWORD)v19;
            v19 = v20;
          }
          while (!v16);
        }
        v14 = (v4[6] & 1) + v4[5];
        result[8] = v20;
        v4 = v20;
      }
      v13 = v14;
    }
    while (v14 < v12);
  }
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v13;
  *(_BYTE *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = v8;
  return result;
}

void sub_10009C3C0()
{
  operator new();
}

void sub_10009C42C()
{
  operator delete();
}

_QWORD *sub_10009C440(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1001745D8;
  v2 = (uint64_t)(a1 + 6);
  sub_10004FBD0((uint64_t)(a1 + 8));
  sub_100012168(v2);
  return a1;
}

void sub_10009C480(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1001745D8;
  v1 = (uint64_t)(a1 + 6);
  sub_10004FBD0((uint64_t)(a1 + 8));
  sub_100012168(v1);
  operator delete();
}

uint64_t sub_10009C4D0()
{
  return 0;
}

void sub_10009C4D8()
{
  operator new();
}

void sub_10009C53C()
{
  operator delete();
}

uint64_t sub_10009C560()
{
  return 1;
}

void sub_10009C568()
{
  operator new();
}

void sub_10009C604()
{
  operator delete();
}

uint64_t sub_10009C628()
{
  return -78;
}

_WORD *sub_10009C634(_WORD *result, int a2)
{
  uint64_t v2;
  __int16 v3;
  _QWORD *exception;
  uint64_t v5;
  int v6;
  __int16 v7;

  v2 = 0;
  *result = a2;
  v5 = 0x10000800040002;
  v6 = 4194336;
  v7 = 128;
  do
  {
    a2 &= *(unsigned __int16 *)((char *)&v5 + v2) ^ 0xFFFF;
    v2 += 2;
  }
  while (v2 != 14);
  if (a2)
  {
    v3 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    *exception = &off_100180748;
    exception[1] = "block_attributes";
    *((_WORD *)exception + 16) = v3;
  }
  return result;
}

void sub_10009C718(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

void sub_10009C73C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;
  _QWORD v13[10];
  char v14;
  uint64_t v15;
  void *v16[2];
  unsigned __int8 v17;

  v4 = (char *)sub_100110904(a1);
  sub_100005870(v16, v4);
  sub_100027EC8((uint64_t)v11);
  if ((v17 & 0x80u) == 0)
    v5 = v16;
  else
    v5 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v6 = v17;
  else
    v6 = (uint64_t)v16[1];
  v7 = sub_100005A0C(&v12, (uint64_t)v5, v6);
  v8 = sub_100005A0C(v7, (uint64_t)" [", 2);
  *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 8;
  v9 = (_QWORD *)std::ostream::operator<<(v8, *(unsigned __int16 *)(a1 + 32));
  sub_100005A0C(v9, (uint64_t)"]", 1);
  sub_100005598((uint64_t)v13, a2);
  *(_QWORD *)((char *)v11
  v12 = v10;
  if (v14 < 0)
    operator delete((void *)v13[8]);
  std::streambuf::~streambuf(v13);
  std::ios::~ios(&v15);
  if ((char)v17 < 0)
    operator delete(v16[0]);
}

_BYTE ***sub_10009C87C(_BYTE ***result)
{
  ***result = 1;
  return result;
}

_BYTE ***sub_10009C890(_BYTE ***result)
{
  ***result = 0;
  return result;
}

void sub_10009C8A0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10009C8A0(a1, *a2);
    sub_10009C8A0(a1, a2[1]);
    sub_100012168((uint64_t)(a2 + 11));
    operator delete(a2);
  }
}

void sub_10009C8E8(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_10009C928((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void sub_10009C928(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::mutex *v6;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 184;
      v6 = (std::mutex *)(v4 - 168);
      sub_10009C8A0(v4 - 96, *(_QWORD **)(v4 - 88));
      std::mutex::~mutex(v6);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t sub_10009C988(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1642C8590B21642)
    sub_100017E44();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xD37A6F4DE9BD37A7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xB21642C8590B21)
    v9 = 0x1642C8590B21642;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_10009CBB0(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[184 * v4];
  v16 = &v10[184 * v9];
  sub_10009CAA4((uint64_t)v14, a2);
  v15 = v14 + 184;
  sub_10009CB3C(a1, &v13);
  v11 = a1[1];
  sub_10009CDC0((uint64_t)&v13);
  return v11;
}

void sub_10009CA90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10009CDC0((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_10009CAA4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = 850045863;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v2 = (_QWORD *)(a2 + 96);
  v3 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v3;
  v4 = a1 + 96;
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(a2 + 88) = v2;
    *v2 = 0;
    *(_QWORD *)(a2 + 104) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 88) = v4;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  result = *(__n128 *)(a2 + 144);
  *(__n128 *)(a1 + 144) = result;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  return result;
}

uint64_t sub_10009CB3C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10009CBF8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10009CBB0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643)
    sub_100012320();
  return operator new(184 * a2);
}

uint64_t sub_10009CBF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 184;
      sub_10009CAA4(v7 - 184, v9);
      v7 = *((_QWORD *)&v15 + 1) - 184;
      *((_QWORD *)&v15 + 1) -= 184;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_10009CCB0((uint64_t)v12);
  return v10;
}

void sub_10009CC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10009CCB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10009CCB0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10009CCE4((uint64_t *)a1);
  return a1;
}

void sub_10009CCE4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  sub_10009CD58(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_10009CD58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  std::mutex *v6;

  for (i = *(_QWORD *)(a2 + 32); i != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    v6 = (std::mutex *)(i + 16);
    sub_10009C8A0(i + 88, *(_QWORD **)(i + 96));
    std::mutex::~mutex(v6);
    i = *(_QWORD *)(a2 + 32) + 184;
  }
}

uint64_t sub_10009CDC0(uint64_t a1)
{
  sub_10009CDF4(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10009CDF4(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  std::mutex *v5;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 184;
    v5 = (std::mutex *)(i - 168);
    sub_10009C8A0(i - 96, *(_QWORD **)(i - 88));
    std::mutex::~mutex(v5);
  }
}

uint64_t sub_10009CE54(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100180858);
  sub_10009D048(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10009CE8C(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100180858);
  sub_10009D048(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10009CECC(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100180858);
  sub_10009D048(a1);
  std::ios::~ios(a1 + 368);
  operator delete();
}

uint64_t sub_10009CF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write(a1 + 96, a2, a3);
  return a3;
}

uint64_t sub_10009CF54(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put(a1 + 96, (char)a2);
  }
  return v2;
}

void sub_10009CFA0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100180858);
  sub_10009D048(v2);
  std::ios::~ios(a1 + 8);
  operator delete();
}

void sub_10009CFF0(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream(v1 + 360, off_100180858);
  sub_10009D048(v1);
  std::ios::~ios(v1 + 368);
  operator delete();
}

uint64_t sub_10009D048(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100180928;
  sub_10009D0E4(a1);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10009D0E4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        sub_100005598(a1 + 104, __p);
        sub_10009D25C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        sub_100005870(__p, "");
        sub_100005708(a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_10009D20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10009D238(uint64_t a1)
{
  sub_10009D048(a1);
  operator delete();
}

int *sub_10009D25C(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  int *result;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (sub_1000BF0BC())
  {
    v18 = 0;
    v6 = sub_1000BF044();
    v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16)))
      v8 = 3;
    else
      v8 = 2;
    v9 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v20 = v4;
    v21 = 2080;
    v22 = v9;
    v23 = 2048;
    v24 = 337;
    v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0, &_mh_execute_header, v6, v7, "%.*s: <%lu> %{public}s", buf, 38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }
  else
  {
    v13 = sub_1000BF044();
    v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v16 = a2;
      else
        v16 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v20 = v4;
      v21 = 2080;
      v22 = v15;
      v23 = 2048;
      v24 = 337;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

const void **sub_10009D440(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t sub_10009D470(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  sub_1000F358C((uint64_t)&v15, a2);
  v4 = v15;
  v9 = v20;
  v10 = v21;
  v11 = v22;
  v12 = v23;
  v5 = v16;
  v6 = v17;
  v7 = v18;
  v8 = v19;
  sub_1000F36A4((uint64_t)&v4, (uint64_t)v13);
  v4 = &v14;
  *(_QWORD *)&v5 = (unint64_t)HIDWORD(v15) >> 3;
  sub_10009D54C(a1, (uint64_t)&v4);
  return a1;
}

uint64_t sub_10009D54C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v6;

  v5 = a2;
  v2 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v2 == -1)
    sub_100018028();
  v6 = &v5;
  ((void (*)(uint64_t **, uint64_t))off_100180998[v2])(&v6, a1 + 4);
  return a1;
}

uLong sub_10009D5AC(const Bytef ****a1, _DWORD *a2)
{
  uLong result;

  result = crc32(*a2, ***a1, *((_DWORD *)**a1 + 2));
  *a2 = result;
  return result;
}

uint64_t sub_10009D5E4(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  _OWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  int v17;
  char v18;
  uint64_t v19;

  *(_OWORD *)result = *(_OWORD *)a2;
  if ((*(_BYTE *)(a3 + 16) & 2) != 0)
    v3 = *(_QWORD *)a3;
  else
    v3 = *(_QWORD *)a3 + 1;
  v5 = (_OWORD *)(a2 + 144);
  v4 = *(_QWORD **)(a2 + 144);
  v6 = *(_QWORD **)(a2 + 128);
  v7 = *(_QWORD *)(a2 + 136);
  if (v6 != v4)
  {
    while (1)
    {
      v8 = v6[4];
      if ((v6[6] & 2) == 0)
        ++v8;
      if (v8 >= v3)
        break;
      v9 = (_QWORD *)v6[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v6[2];
          v11 = *v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v11);
      }
      v6 = v10;
      if (v10 == v4)
        goto LABEL_29;
    }
  }
  if (v6 == v4)
  {
LABEL_29:
    v17 = *(_DWORD *)(a2 + 80);
    *(_QWORD *)(result + 96) = 0;
    *(_QWORD *)(result + 16) = 850045863;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)(result + 72) = 0;
    *(_DWORD *)(result + 80) = v17;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 88) = result + 96;
    *(_OWORD *)(result + 112) = *v5;
    *(_OWORD *)(result + 128) = *v5;
    *(_OWORD *)(result + 144) = *v5;
    *(_BYTE *)(result + 168) = 0;
    v6 = *(_QWORD **)(result + 112);
    if (v6 == *(_QWORD **)(result + 144))
      goto LABEL_33;
    goto LABEL_30;
  }
  v12 = v6;
  while (1)
  {
    v13 = v12[4];
    if ((v12[6] & 2) == 0)
      ++v13;
    if (v13 > (unint64_t)(*(_BYTE *)(a3 + 16) & 1) + *(_QWORD *)(a3 + 8) - 1)
      break;
    v14 = (_QWORD *)v12[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = (_QWORD *)v12[2];
        v11 = *v15 == (_QWORD)v12;
        v12 = v15;
      }
      while (!v11);
    }
    v12 = v15;
    if (v15 == v4)
    {
      v12 = *(_QWORD **)(a2 + 144);
      break;
    }
  }
  v16 = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 16) = 850045863;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = v16;
  *(_QWORD *)(result + 88) = result + 96;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = v6;
  *(_QWORD *)(result + 120) = v7;
  *(_QWORD *)(result + 128) = v6;
  *(_QWORD *)(result + 136) = v7;
  *(_QWORD *)(result + 144) = v12;
  *(_QWORD *)(result + 152) = v7;
  *(_BYTE *)(result + 168) = 0;
  if (v6 != v12)
  {
LABEL_30:
    v18 = *((_BYTE *)v6 + 48);
    v19 = v6[4];
    if ((v18 & 2) == 0)
      ++v19;
    *(_QWORD *)(result + 160) = v19;
  }
LABEL_33:
  *(_BYTE *)(result + 176) = 0;
  return result;
}

uint64_t sub_10009D7A4(uint64_t a1, unsigned int a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 850045863;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 1018212795;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  if (a2)
    sub_10009D860((void **)(a1 + 8), a2);
  return a1;
}

void sub_10009D834(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  std::mutex *v3;
  std::condition_variable *v4;
  void *v6;

  std::condition_variable::~condition_variable(v4);
  std::mutex::~mutex(v3);
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void sub_10009D860(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_100017E44();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1000193CC(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_10009D8F4(uint64_t a1)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;

  v2 = *(uint64_t ***)(a1 + 8);
  v3 = *(uint64_t ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = *v2;
      if (*v2)
      {
        sub_100012168((uint64_t)(v4 + 1));
        v5 = *v4;
        *v4 = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        operator delete();
      }
      ++v2;
    }
    while (v2 != v3);
    v2 = *(uint64_t ***)(a1 + 8);
  }
  *(_QWORD *)(a1 + 16) = v2;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 96));
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_10009D99C(uint64_t a1@<X1>, _QWORD *a2@<X2>, int *a3@<X3>, unsigned __int8 *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x90uLL);
  sub_10009DA1C(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1000196D4((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_10009DA08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10009DA1C(_QWORD *a1, uint64_t a2, _QWORD *a3, int *a4, unsigned __int8 *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001809B8;
  sub_10011ECE4(a1 + 3, a2, *a3, *a4, *a5);
  return a1;
}

void sub_10009DA5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10009DA70(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001809B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10009DA80(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001809B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10009DAB0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_10009DAC0(uint64_t a1)
{
  std::mutex::lock((std::mutex *)a1);
  *(_BYTE *)(a1 + 152) = 1;
  sub_10009C8A0(a1 + 72, *(_QWORD **)(a1 + 80));
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::mutex::unlock((std::mutex *)a1);
}

void sub_10009DB08(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10009DB78(void *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  __cxa_begin_catch(a1);
  sub_10009DBA4((uint64_t *)va, v2);
  __cxa_rethrow();
}

void sub_10009DB90(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_10009DBA4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::mutex *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v3 = *a1;
  v4 = (std::mutex *)(*a1 + 32);
  std::mutex::lock(v4);
  v5 = *(_QWORD **)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  if ((unint64_t)v5 >= v6)
  {
    v8 = *(_QWORD *)(v3 + 8);
    v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_100017E44();
    v10 = v6 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_1000193CC(v3 + 24, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = v14 + 8;
    v17 = *(char **)(v3 + 8);
    v16 = *(char **)(v3 + 16);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = *(char **)(v3 + 8);
    }
    *(_QWORD *)(v3 + 8) = v14;
    *(_QWORD *)(v3 + 16) = v7;
    *(_QWORD *)(v3 + 24) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v5 = a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v3 + 16) = v7;
  std::mutex::unlock(v4);
  std::condition_variable::notify_one((std::condition_variable *)(v3 + 96));
}

void sub_10009DCA4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10009DCBC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10009DCE0(uint64_t a1)
{
  sub_10009DBA4((_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24));
}

uint64_t sub_10009DD04(uint64_t a1, uint64_t a2)
{
  if (sub_1000131F4(a2, (uint64_t)&off_100180A48))
    return a1 + 32;
  else
    return 0;
}

uint64_t sub_10009DD44(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf(a1) = off_100180928;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = sub_1000BF0D4();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005920(a1 + 96);
  return a1;
}

void sub_10009DDAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

_OWORD *sub_10009DDC0(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v5 = (void **)sub_10009DE94((uint64_t)a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x70uLL);
    v10[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    v8 = *(_QWORD *)(a3 + 24);
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *((_QWORD *)v6 + 7) = v8;
    v6[4] = *(_OWORD *)(a3 + 32);
    *((_QWORD *)v6 + 10) = *(_QWORD *)(a3 + 48);
    *(_OWORD *)((char *)v6 + 88) = *(_OWORD *)(a3 + 56);
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *((_QWORD *)v6 + 13) = *(_QWORD *)(a3 + 72);
    v11 = 1;
    sub_1000284A8(a1, v12, v7, (uint64_t *)v6);
    v10[0] = 0;
    sub_10009E01C((uint64_t)v10, 0);
  }
  return v6;
}

_QWORD *sub_10009DE94(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  unint64_t *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!sub_10009DF24(a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_10009DF24(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_10009DF24(unint64_t *a1, unint64_t *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BOOL4 v9;
  unint64_t v10;

  v2 = *((unsigned __int8 *)a1 + 16);
  if (*((_BYTE *)a1 + 16))
  {
    if (v2 == 3)
    {
      v4 = *a1;
      v3 = a1[1];
      if (v3 >= *a1)
      {
LABEL_4:
        if ((v2 & 2) != 0)
          v5 = v4;
        else
          v5 = v4 + 1;
        v6 = *a2;
        if ((a2[2] & 2) == 0)
          ++v6;
        if (v5 < v6)
          return 1;
        if (v6 == v5)
          return (v2 & 1) + v3 - 1 < (a2[2] & 1) + a2[1] - 1;
        return 0;
      }
    }
    else
    {
      v4 = *a1;
      v3 = a1[1];
      if (*a1 < v3)
        goto LABEL_4;
    }
  }
  else
  {
    v4 = *a1;
    v3 = a1[1];
    if (*a1 < v3 && *a1 + 1 < v3)
      goto LABEL_4;
  }
  if (*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)a2 + 16) == 3)
      v9 = a2[1] < *a2;
    else
      v9 = *a2 >= a2[1];
  }
  else
  {
    v10 = a2[1];
    v9 = *a2 >= v10 || *a2 + 1 >= v10;
  }
  return !v9;
}

void sub_10009E01C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100012168((uint64_t)v2 + 88);
    operator delete(v2);
  }
}

void sub_10009E060(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = *a1;
  sub_10009E128((uint64_t)a1, *a1, a4, *a1 + 56 * a1[1], a2, a5, a6);
  if (v10)
  {
    v11 = a1[1];
    if (v11)
    {
      v12 = v10 + 32;
      do
      {
        --v11;
        v12 = sub_100012168(v12) + 56;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1)
      operator delete((void *)*a1);
  }
  v13 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v13;
  a1[2] = a3;
}

void sub_10009E104(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    if ((void *)(v2 + 24) != v1)
      operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10009E128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v7;
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;

  while (a2 != a3)
  {
    *(_QWORD *)a5 = *(_QWORD *)a2;
    v7 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a5 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a5 + 8) = v7;
    result = *(__n128 *)(a2 + 32);
    *(__n128 *)(a5 + 32) = result;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a5 + 48) = *(_QWORD *)(a2 + 48);
    a5 += 56;
    a2 += 56;
  }
  if (a6)
  {
    v9 = a6;
    v10 = a5;
    do
    {
      *(_QWORD *)v10 = *(_QWORD *)a7;
      v11 = *(_OWORD *)(a7 + 8);
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(a7 + 24);
      *(_OWORD *)(v10 + 8) = v11;
      result = *(__n128 *)(a7 + 32);
      *(__n128 *)(v10 + 32) = result;
      *(_QWORD *)(a7 + 32) = 0;
      *(_QWORD *)(a7 + 40) = 0;
      *(_QWORD *)(v10 + 48) = *(_QWORD *)(a7 + 48);
      a7 += 56;
      v10 += 56;
      --v9;
    }
    while (v9);
  }
  if (a3 != a4)
  {
    v12 = a5 + 56 * a6;
    do
    {
      *(_QWORD *)v12 = *(_QWORD *)a3;
      v13 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v12 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v12 + 8) = v13;
      result = *(__n128 *)(a3 + 32);
      *(__n128 *)(v12 + 32) = result;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(v12 + 48) = *(_QWORD *)(a3 + 48);
      a3 += 56;
      v12 += 56;
    }
    while (a3 != a4);
  }
  return result;
}

void sub_10009E200(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v10 = *a1;
  v11 = sub_10009E2B0((uint64_t)a1, a3);
  if (v11 >= 0x24924924924924ALL)
    sub_1000158AC("get_next_capacity, allocator's max size reached");
  v12 = v11;
  v13 = operator new(56 * v11);
  sub_10009E330(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t sub_10009E2B0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = 0x249249249249249;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0x249249249249249 - v4 < a2 - v4 + v3)
    sub_1000158AC("get_next_capacity, allocator's max size reached");
  v5 = v4 >> 61;
  v6 = 8 * v4;
  if (v5 > 4)
    v7 = -1;
  else
    v7 = v6;
  v8 = v6 / 5;
  if (v5)
    v8 = v7;
  v9 = v3 + a2;
  if (v8 < 0x249249249249249)
    v2 = v8;
  if (v9 <= v2)
    return v2;
  else
    return v9;
}

void sub_10009E330(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = *a1;
  sub_10009E3F8((uint64_t)a1, *a1, a4, *a1 + 56 * a1[1], a2, a5, a6);
  if (v10)
  {
    v11 = a1[1];
    if (v11)
    {
      v12 = v10 + 32;
      do
      {
        --v11;
        v12 = sub_100012168(v12) + 56;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1)
      operator delete((void *)*a1);
  }
  v13 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v13;
  a1[2] = a3;
}

void sub_10009E3D4(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    if ((void *)(v2 + 24) != v1)
      operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10009E3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v7;
  __int128 v8;
  __n128 result;
  uint64_t v10;
  __int128 v11;

  while (a2 != a3)
  {
    *(_QWORD *)a5 = *(_QWORD *)a2;
    v7 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a5 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a5 + 8) = v7;
    *(_OWORD *)(a5 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a5 + 48) = *(_QWORD *)(a2 + 48);
    a5 += 56;
    a2 += 56;
  }
  *(_QWORD *)a5 = *(_QWORD *)a7;
  v8 = *(_OWORD *)(a7 + 8);
  *(_QWORD *)(a5 + 24) = *(_QWORD *)(a7 + 24);
  *(_OWORD *)(a5 + 8) = v8;
  result = *(__n128 *)(a7 + 32);
  *(__n128 *)(a5 + 32) = result;
  *(_QWORD *)(a7 + 32) = 0;
  *(_QWORD *)(a7 + 40) = 0;
  *(_QWORD *)(a5 + 48) = *(_QWORD *)(a7 + 48);
  if (a3 != a4)
  {
    v10 = a5 + 56 * a6;
    do
    {
      *(_QWORD *)v10 = *(_QWORD *)a3;
      v11 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v10 + 8) = v11;
      result = *(__n128 *)(a3 + 32);
      *(__n128 *)(v10 + 32) = result;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(v10 + 48) = *(_QWORD *)(a3 + 48);
      a3 += 56;
      v10 += 56;
    }
    while (a3 != a4);
  }
  return result;
}

uint64_t sub_10009E4B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)a1 + 32;
    do
    {
      --v2;
      v3 = sub_100012168(v3) + 56;
    }
    while (v2);
  }
  if (*(_QWORD *)(a1 + 16) && a1 + 24 != *(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10009E510(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  int v10;
  void *__p;
  char v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_100180A68;
  sub_10003F51C(a1 + 24, a1);
  *(_QWORD *)(a1 + 560) = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 568) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 576) = 850045863;
  *(_QWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  sub_100005870(&__p, "com.apple.diskimages.band_unmap");
  sub_10003885C();
  sub_1000418E8((void *)(a1 + 640));
  if (v12 < 0)
    operator delete(__p);
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  sub_10009E8AC(a1);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)(a1 + 560) + 128);
  *(_QWORD *)(a1 + 72) = a3;
  sub_10009E978((uint64_t *)(a1 + 712), *(_QWORD *)(a1 + 16));
  if (*(_QWORD *)(a1 + 16))
    operator new();
  *(_QWORD *)&v9 = "DiskImageSparseBundle::DiskImageSparseBundle(const shared_ptr<SparseBundleBackend> &, size_t)";
  *((_QWORD *)&v9 + 1) = 44;
  v10 = 0;
  sub_10009EA28(&__p, &v9);
  sub_100005A0C(&v13, (uint64_t)"Initialized bands array of size ", 32);
  std::ostream::operator<<(&v13, *(_QWORD *)(a1 + 16));
  std::ostream::~ostream(&v13, off_100180CD8);
  sub_1000A3B74((uint64_t)&__p);
  std::ios::~ios(&v14);
  sub_10006DDC4();
}

void sub_10009E810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;
  std::mutex *v20;
  uint64_t v21;

  sub_1000A3F6C((void ***)&__p);
  sub_10003F498(v21);
  std::mutex::~mutex(v20);
  sub_100012168(v19);
  sub_1000A3FDC(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_10009E8AC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;

  result = sub_10009EB14(*(_QWORD *)(a1 + 560) + 24);
  if ((_DWORD)result)
  {
    *(_QWORD *)&v4 = "DiskImageSparseBundle::init_bands_array_size()";
    *((_QWORD *)&v4 + 1) = 44;
    v5 = 0;
    sub_10009EBA4(v6, &v4);
    sub_100005A0C(&v7, (uint64_t)"Mounted on AFP, max open bands is set to ", 41);
    std::ostream::operator<<(&v7, *(_QWORD *)(a1 + 16));
    std::ostream::~ostream(&v7, off_100180EF8);
    sub_1000A42A0((uint64_t)v6);
    result = std::ios::~ios(&v8);
    v3 = 3;
  }
  else
  {
    v3 = 64;
  }
  *(_QWORD *)(a1 + 16) = v3;
  return result;
}

void sub_10009E964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10009EC4C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10009E978(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_100017E44();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_100051F8C(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_1000A372C(a1, v7);
    return sub_1000A3830((uint64_t)v7);
  }
  return result;
}

void sub_10009EA14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000A3830((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10009EA28(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B10D0((uint64_t)a1, a2);
  *a1 = off_100180C10;
  a1[45] = &off_100180D10;
  a1[46] = &off_100180D38;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100180C10;
  a1[45] = off_100180C98;
  a1[46] = off_100180CC0;
  return a1;
}

void sub_10009EAAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000A3B74(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009EAD0(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100180CD8);
  sub_1000A3B74(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

BOOL sub_10009EB14(uint64_t a1)
{
  unint64_t v1;
  void **v2;
  int v3;
  int v4;
  _BOOL8 v6;
  void *__p[2];
  unsigned __int8 v9;

  sub_100102818(a1, (uint64_t)__p);
  v1 = v9;
  if ((v9 & 0x80u) != 0)
    v1 = (unint64_t)__p[1];
  if (v1 == 5)
  {
    v2 = (void **)__p[0];
    if ((v9 & 0x80u) == 0)
      v2 = __p;
    v3 = *(_DWORD *)v2;
    v4 = *((unsigned __int8 *)v2 + 4);
    v6 = v3 == 1718642273 && v4 == 115;
    if ((char)v9 < 0)
      goto LABEL_15;
  }
  else
  {
    v6 = 0;
    if ((char)v9 < 0)
LABEL_15:
      operator delete(__p[0]);
  }
  return v6;
}

_QWORD *sub_10009EBA4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B114C((uint64_t)a1, a2);
  *a1 = off_100180E30;
  a1[45] = &off_100180F30;
  a1[46] = &off_100180F58;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100180E30;
  a1[45] = off_100180EB8;
  a1[46] = off_100180EE0;
  return a1;
}

void sub_10009EC28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000A42A0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009EC4C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100180EF8);
  sub_1000A42A0(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10009EC8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  _QWORD v7[4];
  _BYTE v8[8];
  uint64_t v9;
  unsigned int v10;
  dispatch_group_t v11[18];

  v10 = 0;
  sub_100041BCC(a1 + 352, 0, (uint64_t)v11);
  v2 = *(_QWORD *)(a1 + 712);
  v3 = *(_QWORD *)(a1 + 720);
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      sub_10007780C(v8, v2);
      if (v9 && (*(_BYTE *)(v9 + 68) & 1) != 0)
      {
        v6[0] = _NSConcreteStackBlock;
        v6[1] = 1174405120;
        v6[2] = sub_10009EDE8;
        v6[3] = &unk_100180B28;
        sub_10007780C(v7, v8);
        v7[3] = &v10;
        sub_1000419EC(v11, v6);
        ++v4;
        sub_100077734((uint64_t)v7);
      }
      sub_100077734((uint64_t)v8);
      v2 += 24;
    }
    while (v2 != v3);
  }
  sub_100041B4C(v11);
  return atomic_load(&v10);
}

void sub_10009EDD8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1000054BC(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009EDE8(uint64_t a1)
{
  uint64_t result;
  __int128 v3;
  int v4;
  _QWORD v5[45];
  uint64_t v6;
  uint64_t v7;

  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v3 = "size_t> DiskImageSparseBundle::flush_open_bands()_block_invoke";
    *((_QWORD *)&v3 + 1) = 47;
    v4 = 2;
    sub_10009EEB4(v5, &v3);
    sub_100005A0C(&v6, (uint64_t)"Flushing ", 9);
    sub_100077654(&v6, *(_QWORD *)(a1 + 40));
    std::ostream::~ostream(&v6, off_100181118);
    sub_1000A488C((uint64_t)v5);
    std::ios::~ios(&v7);
  }
  result = sub_10007744C(*(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
    atomic_store(result, *(unsigned int **)(a1 + 56));
  return result;
}

void sub_10009EEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10009EF5C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10009EEB4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B11C8((uint64_t)a1, a2);
  *a1 = off_100181050;
  a1[45] = &off_100181150;
  a1[46] = &off_100181178;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100181050;
  a1[45] = off_1001810D8;
  a1[46] = off_100181100;
  return a1;
}

void sub_10009EF38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000A488C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009EF5C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100181118);
  sub_1000A488C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10009EF9C(uint64_t a1, uint64_t a2)
{
  return sub_10007780C(a1 + 32, a2 + 32);
}

uint64_t sub_10009EFA8(uint64_t a1)
{
  return sub_100077734(a1 + 32);
}

uint64_t sub_10009EFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  int v10;
  _QWORD v11[45];
  uint64_t v12;
  _BYTE v13[152];

  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v9 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
    *((_QWORD *)&v9 + 1) = 32;
    v10 = 2;
    sub_10009F1E8(v11, &v9);
    sub_100005A0C(&v12, (uint64_t)"Starting flush", 14);
    std::ostream::~ostream(&v12, off_100181338);
    sub_1000A4E78((uint64_t)v11);
    std::ios::~ios(v13);
  }
  std::mutex::lock((std::mutex *)(a1 + 576));
  sub_10003EAC8(a1 + 80);
  v5 = sub_10009EC8C(a1);
  v7 = v6;
  sub_10003EAE4(a1 + 80);
  if ((_DWORD)v5)
  {
    *(_QWORD *)&v9 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
    *((_QWORD *)&v9 + 1) = 32;
    v10 = 16;
    sub_10009F2D0(v11, &v9);
    sub_100005A0C(&v12, (uint64_t)"Flush failed - returning ", 25);
    std::ostream::operator<<(&v12, v5);
    std::ostream::~ostream(&v12, off_100181558);
    sub_1000A5464((uint64_t)v11);
    std::ios::~ios(v13);
  }
  else
  {
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v9 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
      *((_QWORD *)&v9 + 1) = 32;
      v10 = 2;
      sub_10009F3B8(v11, &v9);
      std::ostream::operator<<(&v12, v7);
      sub_100005A0C(&v12, (uint64_t)" bands flushed, calling ", 24);
      sub_10011E5A4(&v12, a3);
      std::ostream::~ostream(&v12, off_100181778);
      sub_1000A5A50((uint64_t)v11);
      std::ios::~ios(v13);
    }
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 560) + 16))(*(_QWORD *)(a1 + 560), a3);
  }
  std::mutex::unlock((std::mutex *)(a1 + 576));
  return v5;
}

void sub_10009F198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::mutex *v12;

  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

_QWORD *sub_10009F1E8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B1244((uint64_t)a1, a2);
  *a1 = off_100181270;
  a1[45] = &off_100181370;
  a1[46] = &off_100181398;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100181270;
  a1[45] = off_1001812F8;
  a1[46] = off_100181320;
  return a1;
}

void sub_10009F26C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000A4E78(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009F290(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100181338);
  sub_1000A4E78(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_10009F2D0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B12C0((uint64_t)a1, a2);
  *a1 = off_100181490;
  a1[45] = &off_100181590;
  a1[46] = &off_1001815B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100181490;
  a1[45] = off_100181518;
  a1[46] = off_100181540;
  return a1;
}

void sub_10009F354(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000A5464(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009F378(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100181558);
  sub_1000A5464(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_10009F3B8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B133C((uint64_t)a1, a2);
  *a1 = off_1001816B0;
  a1[45] = &off_1001817B0;
  a1[46] = &off_1001817D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001816B0;
  a1[45] = off_100181738;
  a1[46] = off_100181760;
  return a1;
}

void sub_10009F43C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000A5A50(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009F460(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100181778);
  sub_1000A5A50(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

uint64_t sub_10009F4A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8;
  int v9;
  _BYTE v11[8];
  uint64_t v12;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
    v8 = 2;
  else
    v8 = 0;
  if (a3)
    v9 = v8 | 0x200;
  else
    v9 = v8;
  sub_10009F634(a1, a2, (uint64_t)v11);
  if (v12)
  {
LABEL_10:
    sub_100077810(a4, (uint64_t)v11);
  }
  else
  {
    while (!sub_10003EB68(a1 + 208, a2))
    {
      sub_100077734((uint64_t)v11);
      sub_10009F634(a1, a2, (uint64_t)v11);
      if (v12)
        goto LABEL_10;
    }
    sub_10009F870(a1, a2, v9, a4);
  }
  return sub_100077734((uint64_t)v11);
}

std::chrono::steady_clock::time_point sub_10009F634@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::chrono::steady_clock::time_point result;
  __int128 v10;
  int v11;
  _QWORD v12[45];
  uint64_t v13;
  _BYTE v14[152];

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    goto LABEL_14;
  v6 = 0;
  v7 = *(_QWORD *)(a1 + 712);
  while (*(_QWORD *)(v7 + 16) != a2)
  {
    ++v6;
    v7 += 24;
    if (v4 == v6)
      goto LABEL_14;
  }
  sub_10007780C(a3, v7);
  v8 = *(_QWORD *)(a3 + 8);
  if (!v8 || *(_QWORD *)(v8 + 32) != a2)
  {
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v10 = "DiskImageSparseBundle::find_band_in_array(uint64_t)";
      *((_QWORD *)&v10 + 1) = 41;
      v11 = 2;
      sub_1000A0370(v12, &v10);
      sub_100005A0C(&v13, (uint64_t)"Band ", 5);
      *(_DWORD *)&v14[*(_QWORD *)(v13 - 24)] = *(_DWORD *)&v14[*(_QWORD *)(v13 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<(&v13, a2);
      *(_DWORD *)&v14[*(_QWORD *)(v13 - 24)] = *(_DWORD *)&v14[*(_QWORD *)(v13 - 24)] & 0xFFFFFFB5 | 2;
      sub_100005A0C(&v13, (uint64_t)" changed before retain completed", 32);
      std::ostream::~ostream(&v13, off_100182218);
      sub_1000A77EC((uint64_t)v12);
      std::ios::~ios(v14);
    }
    sub_100077734(a3);
LABEL_14:
    operator new();
  }
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v10 = "DiskImageSparseBundle::find_band_in_array(uint64_t)";
    *((_QWORD *)&v10 + 1) = 41;
    v11 = 2;
    sub_1000A0288(v12, &v10);
    sub_100005A0C(&v13, (uint64_t)"Found ", 6);
    sub_100077654(&v13, *(_QWORD *)(a3 + 8));
    sub_100005A0C(&v13, (uint64_t)" at index ", 10);
    std::ostream::operator<<(&v13, v6);
    std::ostream::~ostream(&v13, off_100181FF8);
    sub_1000A7200((uint64_t)v12);
    std::ios::~ios(v14);
  }
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  *(std::chrono::steady_clock::time_point *)(*(_QWORD *)a3 + 16) = result;
  return result;
}

void sub_10009F870(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD v9[7];
  int v10;
  __int128 v11;
  int v12;
  _QWORD v13[45];
  uint64_t v14;
  _BYTE v15[152];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  v19 = 0;
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
    *((_QWORD *)&v11 + 1) = 32;
    v12 = 2;
    sub_10009FBC4(v13, &v11);
    sub_100005A0C(&v14, (uint64_t)"Opening band ", 13);
    *(_DWORD *)&v15[*(_QWORD *)(v14 - 24)] = *(_DWORD *)&v15[*(_QWORD *)(v14 - 24)] & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v14, a2);
    *(_DWORD *)&v15[*(_QWORD *)(v14 - 24)] = *(_DWORD *)&v15[*(_QWORD *)(v14 - 24)] & 0xFFFFFFB5 | 2;
    std::ostream::~ostream(&v14, off_100181998);
    sub_1000A603C((uint64_t)v13);
    std::ios::~ios(v15);
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  v9[2] = sub_10009FCAC;
  v9[3] = &unk_100180B60;
  v9[4] = &v16;
  v9[5] = a1;
  v9[6] = a2;
  v10 = a3;
  sub_10003F520(a1 + 24, (uint64_t)v9);
  sub_10009FCEC(a1, (std::chrono::steady_clock::time_point *)v17[3], a4);
  if (*(_QWORD *)(a4 + 8))
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      if (!v8 && sub_1000BF0D4())
      {
        *(_QWORD *)&v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
        *((_QWORD *)&v11 + 1) = 32;
        v12 = 2;
        sub_1000A01A0(v13, &v11);
        sub_100005A0C(&v14, (uint64_t)"Failed to evict band to make room for ", 38);
        sub_100077654(&v14, v17[3]);
        sub_100005A0C(&v14, (uint64_t)", retrying", 10);
        std::ostream::~ostream(&v14, off_100181DD8);
        sub_1000A6C14((uint64_t)v13);
        std::ios::~ios(v15);
      }
      usleep(0x3E8u);
      sub_100077734(a4);
      ++v8;
      sub_10009FCEC(a1, (std::chrono::steady_clock::time_point *)v17[3], a4);
    }
    while (!*(_QWORD *)(a4 + 8));
  }
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
    *((_QWORD *)&v11 + 1) = 32;
    v12 = 2;
    sub_1000A00B8(v13, &v11);
    sub_100077654(&v14, *(_QWORD *)(a4 + 8));
    sub_100005A0C(&v14, (uint64_t)" opened and replaced at attempt ", 32);
    std::ostream::operator<<(&v14, v8);
    std::ostream::~ostream(&v14, off_100181BB8);
    sub_1000A6628((uint64_t)v13);
    std::ios::~ios(v15);
  }
  _Block_object_dispose(&v16, 8);
}

void sub_10009FB5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100077734(v1);
  _Block_object_dispose((const void *)(v2 - 120), 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_10009FBC4(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B13B8((uint64_t)a1, a2);
  *a1 = off_1001818D0;
  a1[45] = &off_1001819D0;
  a1[46] = &off_1001819F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001818D0;
  a1[45] = off_100181958;
  a1[46] = off_100181980;
  return a1;
}

void sub_10009FC48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000A603C(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009FC6C(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100181998);
  sub_1000A603C(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

void sub_10009FCAC(uint64_t a1)
{
  sub_100076370(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40) + 24, *(_DWORD *)(a1 + 56), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 560) + 96));
}

void sub_10009FCEC(uint64_t a1@<X0>, std::chrono::steady_clock::time_point *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  _OWORD v19[17];
  uint64_t v20;
  _BYTE v21[152];
  void *__p;
  __int128 v23;
  _BYTE v24[1024];

  v6 = v24;
  __p = v24;
  v23 = xmmword_1001445B0;
  if (*(_QWORD *)(a1 + 16))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = atomic_load(*(unint64_t **)(*(_QWORD *)(a1 + 712) + v7));
      if (v9 == 1)
      {
        *(_QWORD *)&v19[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 712) + v7) + 16);
        *((_QWORD *)&v19[0] + 1) = v8;
        v10 = (char *)__p + 16 * v23;
        if ((_QWORD)v23 == *((_QWORD *)&v23 + 1))
        {
          sub_1000B1624(&__p, v10, 1, v19, &v17);
        }
        else
        {
          *(_OWORD *)v10 = v19[0];
          *(_QWORD *)&v23 = v23 + 1;
        }
      }
      ++v8;
      v7 += 24;
    }
    while (v8 < *(_QWORD *)(a1 + 16));
    v6 = __p;
    v11 = (uint64_t *)((char *)__p + 16 * v23);
    if ((_QWORD)v23)
    {
      v12 = 126 - 2 * __clz(v23);
      goto LABEL_13;
    }
  }
  else
  {
    v11 = (uint64_t *)v24;
  }
  v12 = 0;
LABEL_13:
  sub_1000A7BE4((uint64_t)v6, v11, (uint64_t)v19, v12, 1);
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v17 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
    *((_QWORD *)&v17 + 1) = 42;
    v18 = 2;
    sub_1000A0458(v19, &v17);
    sub_100005A0C(&v20, (uint64_t)"Looking for an evictable slot for ", 34);
    sub_100077654(&v20, (uint64_t)a2);
    std::ostream::~ostream(&v20, off_100182438);
    sub_1000A8F40((uint64_t)v19);
    std::ios::~ios(v21);
  }
  if (!(_QWORD)v23)
LABEL_21:
    operator new();
  v13 = (uint64_t *)((char *)__p + 8);
  v14 = 16 * v23;
  while (1)
  {
    v16 = *v13;
    v13 += 2;
    v15 = v16;
    sub_100077878((std::chrono::steady_clock::time_point **)(*(_QWORD *)(a1 + 712) + 24 * v16), a2, a3);
    if (*(_QWORD *)(a3 + 8))
      break;
    if (sub_1000BF0D4())
    {
      *(_QWORD *)&v17 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
      *((_QWORD *)&v17 + 1) = 42;
      v18 = 2;
      sub_1000A0540(v19, &v17);
      sub_100005A0C(&v20, (uint64_t)"Failed placing new ", 19);
      sub_100077654(&v20, (uint64_t)a2);
      sub_100005A0C(&v20, (uint64_t)" at index ", 10);
      std::ostream::operator<<(&v20, v15);
      std::ostream::~ostream(&v20, off_100182658);
      sub_1000A952C((uint64_t)v19);
      std::ios::~ios(v21);
    }
    sub_100077734(a3);
    v14 -= 16;
    if (!v14)
      goto LABEL_21;
  }
  if (sub_1000BF0D4())
  {
    *(_QWORD *)&v17 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
    *((_QWORD *)&v17 + 1) = 42;
    v18 = 2;
    sub_1000815C4(v19, &v17);
    sub_100005A0C(&v20, (uint64_t)"Placed new ", 11);
    sub_100077654(&v20, (uint64_t)a2);
    sub_100005A0C(&v20, (uint64_t)" at index ", 10);
    std::ostream::operator<<(&v20, v15);
    std::ostream::~ostream(&v20, off_10017E700);
    sub_100081910((uint64_t)v19);
    std::ios::~ios(v21);
  }
  sub_10003EFF0(a1 + 208, a2[4].__d_.__rep_);
  if (*((_QWORD *)&v23 + 1) && v24 != __p)
    operator delete(__p);
}

void sub_1000A00A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1000054BC(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000A00B8(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B1434((uint64_t)a1, a2);
  *a1 = off_100181AF0;
  a1[45] = &off_100181BF0;
  a1[46] = &off_100181C18;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100181AF0;
  a1[45] = off_100181B78;
  a1[46] = off_100181BA0;
  return a1;
}

void sub_1000A013C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000A6628(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A0160(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100181BB8);
  sub_1000A6628(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000A01A0(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B14B0((uint64_t)a1, a2);
  *a1 = off_100181D10;
  a1[45] = &off_100181E10;
  a1[46] = &off_100181E38;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100181D10;
  a1[45] = off_100181D98;
  a1[46] = off_100181DC0;
  return a1;
}

void sub_1000A0224(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000A6C14(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A0248(uint64_t a1)
{
  std::ostream::~ostream(a1 + 360, off_100181DD8);
  sub_1000A6C14(a1);
  std::ios::~ios(a1 + 368);
  return a1;
}

_QWORD *sub_1000A0288(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  sub_1000B152C((uint64_t)a1, a2);
  *a1 = off_100181F30;
  a1[45] = &off_100182030;
  a1[46] = &off_100182058;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100181F30;
  a1[45] = off_100181FB8;
  a1[46] = off_100181FE0;
  return a1;
}

