void sub_100005650(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  void *v15;

  v3 = a2;
  v5 = v3;
  if (v3)
  {
    v6 = ne_log_obj(v3, v4);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = 138412546;
      v13 = v11;
      v14 = 2112;
      v15 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%@ provider failed to process signal request error %@", (uint8_t *)&v12, 0x16u);
    }

    v8 = *(void **)(a1 + 32);
    v9 = *(void **)(a1 + 40);
    v10 = v5;
  }
  else
  {
    v8 = *(void **)(a1 + 32);
    v9 = *(void **)(a1 + 40);
    v10 = 0;
  }
  sub_100005734(v8, v10, v9);

}

void sub_100005734(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;

  if (a1)
  {
    v5 = a3;
    v6 = a2;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "managerObjectFactory"));
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "managerObject"));

    objc_msgSend(v8, "handleProviderError:forMessageID:", v6, v5);
  }
}

void sub_1000057B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = 138412290;
    v10 = v8;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%@ provider stopped", (uint8_t *)&v9, 0xCu);
  }

  v5 = *(void **)(a1 + 32);
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "managerObjectFactory"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "managerObject"));

    objc_msgSend(v7, "handleProviderStopped");
  }
}

void sub_100005890(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  void *v14;

  v3 = a2;
  v5 = v3;
  if (v3)
  {
    v6 = ne_log_obj(v3, v4);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD *)(a1 + 32);
      v11 = 138412546;
      v12 = v10;
      v13 = 2112;
      v14 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%@ failed to start the provider, error %@", (uint8_t *)&v11, 0x16u);
    }

    v8 = *(void **)(a1 + 32);
    v9 = v5;
  }
  else
  {
    v8 = *(void **)(a1 + 32);
    v9 = 0;
  }
  sub_100005974(v8, v9);

}

void sub_100005974(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  if (a1)
  {
    v3 = a2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "managerObjectFactory"));
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "managerObject"));

    objc_msgSend(v5, "handleProviderError:", v3);
  }
}

void sub_1000059DC(void *a1, uint64_t a2)
{
  void *v3;
  id v4;

  if (a1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "managerObjectFactory"));
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "managerObject"));

    objc_msgSend(v4, "handleProviderInstallationStatus:", a2);
  }
}

void sub_100005A34(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NEAppPushPluginDriver));
  v2 = (void *)qword_1000CF898;
  qword_1000CF898 = v1;

}

void sub_100005A68(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NEAppPushPluginManager));
  v2 = (void *)qword_1000CF888;
  qword_1000CF888 = v1;

}

void sub_100005C64(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7;
  const char *v8;
  id v9;
  id Property;
  NSObject *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD block[5];
  id v16;
  id v17;
  id v18;
  char v19;

  v7 = a3;
  v9 = a4;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v8, 24, 1);
  v11 = Property;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100005D50;
  block[3] = &unk_1000BD400;
  v19 = a2;
  v12 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v17 = v7;
  v18 = v12;
  v16 = v9;
  v13 = v7;
  v14 = v9;
  dispatch_async(v11, block);

}

void sub_100005D50(uint64_t a1)
{
  uint64_t v2;
  int v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  const char *v8;
  id Property;
  NSObject *v10;
  id v11;
  const char *v12;
  id v13;
  id v14;
  NSObject *v15;
  id v16;
  _QWORD block[4];
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = objc_msgSend(*(id *)(a1 + 40), "pid");
    v4 = objc_alloc((Class)NSArray);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uuid"));
    v6 = objc_msgSend(v4, "initWithObjects:", v5, 0);
    sub_10007FE04(v2, v3, v6);

    v7 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", *(_QWORD *)(a1 + 40), 0);
    sub_10007FDF4(*(_QWORD *)(a1 + 32), v7);

    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v8, 32, 1);
    v10 = Property;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100005F44;
    block[3] = &unk_1000BECD0;
    v19 = *(id *)(a1 + 56);
    v18 = *(id *)(a1 + 48);
    dispatch_async(v10, block);

    v11 = v19;
  }
  else
  {
    v13 = objc_msgSend(objc_alloc((Class)NSError), "initWithDomain:code:userInfo:", CFSTR("NEAgentErrorDomain"), 2, 0);
    v14 = *(id *)(a1 + 32);
    if (v14)
      v14 = objc_getProperty(v14, v12, 32, 1);
    v15 = v14;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100005F30;
    v20[3] = &unk_1000BECD0;
    v16 = *(id *)(a1 + 56);
    v21 = v13;
    v22 = v16;
    v11 = v13;
    dispatch_async(v15, v20);

  }
}

uint64_t sub_100005F30(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_100005F44(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_100007544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Unwind_Resume(a1);
}

void sub_1000086DC(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  unsigned __int8 v26;
  id v27;
  char v28;
  id v29;
  void *v30;
  unsigned int v31;
  id v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  void *v37;
  id obj;
  id v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  id v45;
  uint8_t v46[128];
  uint8_t buf[4];
  id v48;

  if (a1)
  {
    v2 = *(void **)(a1 + 384);
    if (v2)
    {
      v45 = 0;
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "getSubscriptionInfoWithError:", &v45));
      v4 = v45;
      if (v4)
      {
        v6 = v4;
        v7 = ne_log_obj(v4, v5);
        v8 = objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v48 = v6;
          _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to getCarrierSubscriptionInfo - %@", buf, 0xCu);
        }
      }
      else
      {
        v8 = objc_msgSend(objc_alloc((Class)CTBundle), "initWithBundleType:", 1);
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        v44 = 0u;
        obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "subscriptions"));
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v46, 16);
        if (v9)
        {
          v10 = v9;
          v37 = v3;
          v6 = 0;
          v11 = *(_QWORD *)v42;
          do
          {
            v12 = 0;
            do
            {
              v13 = v6;
              if (*(_QWORD *)v42 != v11)
                objc_enumerationMutation(obj);
              v14 = *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)v12);
              v15 = *(void **)(a1 + 384);
              v40 = v6;
              v16 = objc_msgSend(v15, "copyCarrierBundleValue:keyHierarchy:bundleType:error:", v14, &off_1000C1558, v8, &v40);
              v6 = v40;

              if (v6)
              {
                v19 = ne_log_obj(v17, v18);
                v20 = objc_claimAutoreleasedReturnValue(v19);
                if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  v48 = v6;
                  _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to get Carrier Bundle UseIPSec setting - %@", buf, 0xCu);
                }

              }
              else if (v16)
              {
                v21 = objc_opt_class(NSNumber);
                if ((objc_opt_isKindOfClass(v16, v21) & 1) != 0)
                {
                  v22 = v16;
                  v24 = ne_log_obj(v22, v23);
                  v25 = objc_claimAutoreleasedReturnValue(v24);
                  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 138412290;
                    v48 = v22;
                    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Retrieved Carrier Bundle UseIPSec setting: %@", buf, 0xCu);
                  }

                  v26 = objc_msgSend(v22, "BOOLValue");
                  if ((v26 & 1) != 0)
                  {

                    v6 = 0;
                    v28 = 1;
                    goto LABEL_25;
                  }
                }
              }

              v12 = (char *)v12 + 1;
            }
            while (v10 != v12);
            v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v46, 16);
            v10 = v27;
          }
          while (v27);
          v28 = 0;
LABEL_25:
          v3 = v37;
        }
        else
        {
          v28 = 0;
          v6 = 0;
        }

        *(_BYTE *)(a1 + 352) = v28;
      }

    }
    v29 = objc_msgSend(objc_alloc((Class)CoreTelephonyClient), "initWithQueue:", 0);
    v30 = v29;
    if (v29)
    {
      v39 = 0;
      v31 = objc_msgSend(v29, "getNATTKeepAliveOverCellForPreferredDataContext:", &v39);
      v32 = v39;
      v34 = v32;
      if (v32)
      {
        v35 = ne_log_obj(v32, v33);
        v36 = objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v48 = v34;
          _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "Failed to query Cellular NATTKeepAlive: %@", buf, 0xCu);
        }

        v31 = 0;
      }
      *(_DWORD *)(a1 + 356) = v31;

    }
  }
}

void sub_100008AB0(uint64_t a1, const char *a2)
{
  id Property;
  void *v3;
  id v4;
  __int128 v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  void *v36;
  id v37;
  __int128 v38;
  void *v39;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t v45[128];
  _BYTE buf[24];
  const char *v47;
  void *v48;
  id v49;
  id v50;
  char v51;

  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 400, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "allValues"));
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
  if (v4)
  {
    v6 = v4;
    v7 = *(_QWORD *)v42;
    *(_QWORD *)&v5 = 138412802;
    v38 = v5;
    v39 = v3;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v42 != v7)
          objc_enumerationMutation(v3);
        v9 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)v8);
        if ((objc_msgSend(v9, "isSecondaryConnection", v38) & 1) == 0
          && objc_msgSend(v9, "status") == 3)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "configuration"));
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "alwaysOnVPN"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "applicationExceptions"));
          v13 = objc_msgSend(v12, "count");

          if (v13)
          {
            v16 = ne_log_obj(v14, v15);
            v17 = objc_claimAutoreleasedReturnValue(v16);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              v18 = *(_QWORD *)(a1 + 32);
              v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "interfaceName"));
              *(_DWORD *)buf = v38;
              *(_QWORD *)&buf[4] = v18;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v19;
              *(_WORD *)&buf[22] = 2080;
              v47 = "-[NESMAlwaysOnSession handleInstalledAppsChanged]_block_invoke";
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%@[%@]:%s: Installing Application Exception data policies", buf, 0x20u);

            }
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "interfaceName"));
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "alwaysOnVPN"));
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "applicationExceptions"));
            v25 = v21;
            v26 = v24;
            v27 = v26;
            if (v20)
            {
              *(_QWORD *)buf = _NSConcreteStackBlock;
              *(_QWORD *)&buf[8] = 3221225472;
              *(_QWORD *)&buf[16] = sub_100043CB0;
              v47 = (const char *)&unk_1000BDEA0;
              v48 = v20;
              v28 = v25;
              v49 = v28;
              v29 = v27;
              v50 = v29;
              v51 = 1;
              v30 = sub_10002C9C8((uint64_t)NESMPolicyMasterSession, buf);

              v3 = v39;
              if ((v30 & 1) != 0)
                goto LABEL_18;
            }
            else
            {

              v3 = v39;
            }
            v33 = ne_log_obj(v31, v32);
            v34 = objc_claimAutoreleasedReturnValue(v33);
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            {
              v35 = *(_QWORD *)(a1 + 32);
              v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "interfaceName"));
              *(_DWORD *)buf = v38;
              *(_QWORD *)&buf[4] = v35;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v36;
              *(_WORD *)&buf[22] = 2080;
              v47 = "-[NESMAlwaysOnSession handleInstalledAppsChanged]_block_invoke";
              _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%@[%@]:%s: Application Exception data policies install failed", buf, 0x20u);

            }
          }
        }
LABEL_18:
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v37 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
      v6 = v37;
    }
    while (v37);
  }

}

id sub_100008E74(uint64_t a1, uint64_t a2)
{
  sub_100008EA4(*(void **)(a1 + 32), a2);
  return objc_msgSend(*(id *)(a1 + 32), "startWithCommand:isOnDemand:", 0, 0);
}

void sub_100008EA4(void *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id Property;
  const char *v13;
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  void *v22;
  id v23;
  const char *v24;
  void *v25;
  id v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  void *v32;
  void *v33;
  unsigned __int8 v34;
  uint64_t v35;
  void *v36;
  const __SCPreferences *v37;
  const __SCPreferences *v38;
  const __CFBoolean *Value;
  CFTypeID TypeID;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  id v46;
  void *v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  void *v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  NSObject *v60;
  unsigned int v61;
  unsigned int v62;
  const char *v63;
  void *v64;
  uint64_t v65;
  uint8_t buf[4];
  _BYTE v67[14];

  if (!a1)
    return;
  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting up Always-On VPN control policies", buf, 2u);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "controlPolicySession"));
  objc_msgSend(v5, "removeAllPolicies");

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "highPolicySession"));
  objc_msgSend(v6, "removeAllPolicies");

  objc_msgSend(a1, "setDefaultDropType:", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "alwaysOnVPN"));

    if (!v9)
    {
LABEL_29:
      LOBYTE(v7) = 0;
      goto LABEL_36;
    }
    v65 = 2;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "controlPolicySession"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    Property = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
    v14 = Property;
    if (Property)
      Property = objc_getProperty(Property, v13, 80, 1);
    v15 = Property;
    v16 = sub_100058E10((uint64_t)v10, v11, 0x32u, &v65, v15);

    if ((v16 & 1) == 0)
    {
      v19 = ne_log_obj(v17, v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "AlwaysOnVPN evaluateConfiguration failed", buf, 2u);
      }

    }
    if (v65)
      objc_msgSend(a1, "setDefaultDropType:");
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "highPolicySession"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    v23 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
    v25 = v23;
    if (v23)
      v23 = objc_getProperty(v23, v24, 80, 1);
    v26 = v23;
    v27 = sub_10005AD0C(v21, v22, 0x32u, &v65);

    if (!v27)
    {
      v30 = ne_log_obj(v28, v29);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "AlwaysOnVPN evaluateConfiguration failed", buf, 2u);
      }

    }
    if (v65)
      objc_msgSend(a1, "setDefaultDropType:");
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "alwaysOnVPN"));
    v34 = objc_msgSend(v33, "isEnabled");

    if ((v34 & 1) != 0)
    {
LABEL_35:
      LOBYTE(v7) = 1;
      goto LABEL_36;
    }
    v35 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
    if (!v35)
      goto LABEL_28;
    v36 = (void *)v35;
    v37 = SCPreferencesCreate(kCFAllocatorDefault, CFSTR("NEHelper control settings"), CFSTR("/Library/Preferences/com.apple.networkextension.control.plist"));
    if (v37)
    {
      v38 = v37;
      Value = (const __CFBoolean *)SCPreferencesGetValue(v37, CFSTR("AOVPNDropAll"));
      TypeID = CFBooleanGetTypeID();
      if (Value && CFGetTypeID(Value) == TypeID)
      {
        v41 = CFBooleanGetValue(Value);
        CFRelease(v38);

        if (!v41)
        {
LABEL_28:
          objc_msgSend(a1, "setDefaultDropType:", 0);
          goto LABEL_29;
        }
        goto LABEL_32;
      }
      CFRelease(v38);
    }

LABEL_32:
    v44 = ne_log_obj(v42, v43);
    v45 = objc_claimAutoreleasedReturnValue(v44);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      v46 = objc_msgSend(a1, "defaultDropType");
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)v67 = v46;
      *(_WORD *)&v67[8] = 1024;
      *(_DWORD *)&v67[10] = 1;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "AOVPNDropAll set, IP Drop-All enabled <%ld> persistFeature <%d>", buf, 0x12u);
    }

    goto LABEL_35;
  }
LABEL_36:
  objc_msgSend(a1, "setIsDropPersistent:", 1);
  v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "controlPolicySession"));
  v48 = objc_msgSend(v47, "apply");

  if ((v48 & 1) == 0)
  {
    v51 = ne_log_obj(v49, v50);
    v52 = objc_claimAutoreleasedReturnValue(v51);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "AlwaysOnVPN Could not apply control policies", buf, 2u);
    }

  }
  v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "highPolicySession"));
  v54 = objc_msgSend(v53, "apply");

  if ((v54 & 1) == 0)
  {
    v57 = ne_log_obj(v55, v56);
    v58 = objc_claimAutoreleasedReturnValue(v57);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "AlwaysOnVPN Could not apply High control policies", buf, 2u);
    }

  }
  v59 = ne_log_obj(v55, v56);
  v60 = objc_claimAutoreleasedReturnValue(v59);
  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
  {
    v61 = objc_msgSend(a1, "defaultDropType");
    v62 = objc_msgSend(a1, "isDropPersistent");
    v63 = "Non-Persistent";
    if (v62)
      v63 = "Persistent";
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v67 = v61;
    *(_WORD *)&v67[4] = 2080;
    *(_QWORD *)&v67[6] = v63;
    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "AlwaysOnVPN setting IP Drop-All to %d (%s)", buf, 0x12u);
  }

  v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
  sub_100051FCC(v64, CFSTR("drop_all_feature_always_on_vpn"), (char)v7);

}

void sub_100009440(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  id v5;
  const char *v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 400, 1);
  v4 = Property;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v5)
  {
    v7 = v5;
    v8 = *(_QWORD *)v14;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v4);
        v10 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v9);
        v11 = *(id *)(a1 + 32);
        if (v11)
          v11 = objc_getProperty(v11, v6, 400, 1);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v10, (_QWORD)v13));
        objc_msgSend(v12, "handleNetworkConfigurationChange:", *(_QWORD *)(a1 + 40));

        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v7);
  }

}

void sub_100009574(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t interface_names;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t ifstate;
  uint64_t v16;
  NSString *v17;
  void *v18;
  void *v19;
  const char *v20;
  id v21;
  id v22;
  id v23;
  const char *v24;
  id v25;
  void *v26;
  uint64_t v27;
  void *i;
  void *v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  const char *v40;
  id Property;
  id v42;
  void *v43;
  NESMIKEv2VPNSession *v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  const char *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  const char *v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  NSObject *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  NSObject *v69;
  uint64_t v70;
  void *v71;
  NSObject *v72;
  uint64_t v73;
  NSObject *v74;
  NSObject *v75;
  uint64_t v76;
  NSObject *v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  id v83;
  unsigned int v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  void *v97;
  uint64_t v98;
  _QWORD v99[4];
  id v100;
  id v101;
  _QWORD v102[5];
  id v103;
  _QWORD v104[4];
  id v105;
  id v106;
  _QWORD block[5];
  id v108;
  id v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint8_t buf[4];
  void *v117;
  __int16 v118;
  const char *v119;
  __int16 v120;
  id v121;
  uint8_t v122[4];
  uint64_t v123;
  __int16 v124;
  const char *v125;
  __int16 v126;
  id v127;
  __int16 v128;
  unsigned int v129;

  v2 = nwi_state_copy();
  if (!v2)
  {
    v13 = 0;
    v55 = 0;
    v12 = 0;
    goto LABEL_54;
  }
  v4 = v2;
  interface_names = nwi_state_get_interface_names(v2, 0, 0);
  if ((_DWORD)interface_names)
  {
    v6 = interface_names;
    v7 = malloc_type_calloc(interface_names, 8uLL, 0x50040EE9192B6uLL);
    if (v7)
    {
      v8 = v7;
      v9 = nwi_state_get_interface_names(v4, v7, v6);
      if (v9)
      {
        v11 = 0;
        v12 = 0;
        v95 = 0;
        v13 = 0;
        v98 = v9;
        *(_QWORD *)&v10 = 138412802;
        v91 = v10;
        v92 = v8;
        v93 = v4;
        v94 = a1;
        do
        {
          v14 = v8[v11];
          if (v14)
          {
            ifstate = nwi_state_get_ifstate(v4, v14);
            if (ifstate)
            {
              v16 = ifstate;
              if (!nwi_ifstate_get_vpn_server()
                && (nwi_ifstate_get_flags(v16) & 3) != 0
                && (nwi_ifstate_get_flags(v16) & 4) != 0)
              {
                v96 = v13;
                v97 = v12;
                v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", nwi_ifstate_get_ifname(v16));
                v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
                v19 = *(void **)(a1 + 32);
                v21 = v18;
                if (v19)
                {
                  v115 = 0;
                  v111 = 0u;
                  v112 = 0u;
                  v113 = 0u;
                  v114 = 0u;
                  v22 = objc_getProperty(v19, v20, 400, 1);
                  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v111, v122, 16);
                  if (v23)
                  {
                    v25 = v23;
                    v26 = 0;
                    v27 = *(_QWORD *)v112;
                    while (2)
                    {
                      for (i = 0; i != v25; i = (char *)i + 1)
                      {
                        v29 = v26;
                        if (*(_QWORD *)v112 != v27)
                          objc_enumerationMutation(v22);
                        v30 = objc_msgSend(objc_getProperty(v19, v24, 400, 1), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v111 + 1) + 8 * (_QWORD)i));
                        v26 = (void *)objc_claimAutoreleasedReturnValue(v30);

                        if (v26)
                        {
                          if (objc_msgSend(v26, "virtualInterface"))
                          {
                            v31 = NEVirtualInterfaceCopyName(objc_msgSend(v26, "virtualInterface"));
                            v115 = v31;
                            if (v31)
                            {
                              v32 = objc_msgSend(v21, "isEqualToString:", v31);
                              if ((_DWORD)v32)
                              {
                                v34 = ne_log_obj(v32, v33);
                                v35 = objc_claimAutoreleasedReturnValue(v34);
                                if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
                                {
                                  *(_DWORD *)buf = v91;
                                  v117 = v19;
                                  v118 = 2080;
                                  v119 = "-[NESMAlwaysOnSession isVirtualInterface:]";
                                  v120 = 2112;
                                  v121 = v21;
                                  _os_log_debug_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "%@:%s: ifName %@ is a virtual interface)", buf, 0x20u);
                                }

                                myCFRelease(&v115);
                                v38 = ne_log_obj(v36, v37);
                                v39 = objc_claimAutoreleasedReturnValue(v38);
                                v4 = v93;
                                a1 = v94;
                                v8 = v92;
                                if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
                                {
                                  v53 = *(_QWORD *)(v94 + 32);
                                  *(_DWORD *)v122 = v91;
                                  v123 = v53;
                                  v124 = 2080;
                                  v125 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
                                  v126 = 2112;
                                  v127 = v21;
                                  _os_log_debug_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "%@:%s: ifName %@ is a virtual interface, SKIP!", v122, 0x20u);
                                }

                                v13 = v96;
                                v12 = v97;
                                goto LABEL_49;
                              }
                              myCFRelease(&v115);
                            }
                          }
                        }
                      }
                      v25 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v111, v122, 16);
                      if (v25)
                        continue;
                      break;
                    }
                  }
                  else
                  {
                    v26 = 0;
                  }

                }
                v4 = v93;
                a1 = v94;
                Property = *(id *)(v94 + 32);
                v12 = v97;
                if (Property)
                  Property = objc_getProperty(Property, v40, 400, 1);
                v8 = v92;
                v42 = Property;
                v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "objectForKeyedSubscript:", v21));

                if (v43)
                {
                  if (v97)
                  {
                    objc_msgSend(v43, "setIsSecondaryInterface:", 1);
                    v13 = v43;
                  }
                  else
                  {
                    v13 = v43;
                    objc_msgSend(v13, "setIsSecondaryInterface:", 0);
                    v12 = v13;
                  }
                }
                else
                {
                  v44 = sub_10000A02C(*(NESMIKEv2VPNSession **)(v94 + 32), v21);
                  v45 = (void *)objc_claimAutoreleasedReturnValue(v44);

                  if (v45)
                  {
                    v46 = v97;
                    if (!v97)
                      v46 = v45;
                    v47 = objc_msgSend(v45, "setIsSecondaryInterface:", v97 != 0);
                    v49 = ne_log_obj(v47, v48);
                    v50 = objc_claimAutoreleasedReturnValue(v49);
                    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
                    {
                      v54 = *(_QWORD *)(v94 + 32);
                      *(_DWORD *)v122 = v91;
                      v123 = v54;
                      v124 = 2080;
                      v125 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
                      v126 = 2112;
                      v127 = v21;
                      _os_log_debug_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "%@:%s: Set up VPN Session over %@", v122, 0x20u);
                    }

                    v52 = *(id *)(v94 + 32);
                    if (v52)
                      v52 = objc_getProperty(v52, v51, 400, 1);
                    objc_msgSend(v52, "setObject:forKeyedSubscript:", v45, v21, v91);
                    objc_msgSend(v45, "handleInitializeState");
                    v95 = v45;
                    v12 = v46;
                    v13 = 0;
                  }
                  else
                  {
                    v13 = 0;
                    v95 = 0;
                  }
                }
LABEL_49:

              }
            }
          }
          ++v11;
        }
        while (v11 != v98);
        free(v8);
        v55 = v95;
        goto LABEL_53;
      }
      free(v8);
    }
  }
  v13 = 0;
  v55 = 0;
  v12 = 0;
LABEL_53:
  nwi_state_release(v4);
LABEL_54:
  sub_10000A274(*(void **)(a1 + 32), v3);
  sub_10000A41C(*(void **)(a1 + 32), v56);
  v58 = *(id *)(a1 + 32);
  if (v58)
    v58 = objc_getProperty(v58, v57, 400, 1);
  v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40), v91));
  v61 = ne_log_obj(v59, v60);
  v62 = objc_claimAutoreleasedReturnValue(v61);
  v63 = v62;
  if (v59)
  {
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
    {
      v82 = *(_QWORD *)(a1 + 32);
      v83 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String");
      v84 = objc_msgSend(v59, "state");
      *(_DWORD *)v122 = 138413058;
      v123 = v82;
      v124 = 2080;
      v125 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
      v126 = 2080;
      v127 = v83;
      v128 = 1024;
      v129 = v84;
      _os_log_debug_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "%@:%s: checking for %s (vpn_session state %d)", v122, 0x26u);
    }

    sub_10000A66C(*(void **)(a1 + 32), v59);
    v64 = *(_QWORD *)(a1 + 48);
    if ((v64 & 3) != 0 && (v64 & 4) != 0)
    {
      v65 = objc_msgSend(v59, "state");
      switch((unint64_t)v65)
      {
        case 1uLL:
          v73 = ne_log_obj(v65, v66);
          v74 = objc_claimAutoreleasedReturnValue(v73);
          if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
          {
            v89 = *(_QWORD *)(a1 + 32);
            if (v89)
              v90 = *(_BYTE *)(v89 + 353) & 1;
            else
              v90 = 0;
            *(_DWORD *)v122 = 138412802;
            v123 = v89;
            v124 = 2080;
            v125 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke_2";
            v126 = 1024;
            LODWORD(v127) = v90;
            _os_log_debug_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "%@:%s: Starting VPN Session (stopped %d)", v122, 0x1Cu);
          }

          v75 = objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "queue"));
          v102[0] = _NSConcreteStackBlock;
          v102[1] = 3221225472;
          v102[2] = sub_10000A8F0;
          v102[3] = &unk_1000BEB58;
          v102[4] = *(_QWORD *)(a1 + 32);
          v103 = v59;
          dispatch_async(v75, v102);

          v71 = v103;
          goto LABEL_69;
        case 2uLL:
          v76 = ne_log_obj(v65, v66);
          v77 = objc_claimAutoreleasedReturnValue(v76);
          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
          {
            v88 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)v122 = 138412546;
            v123 = v88;
            v124 = 2080;
            v125 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
            _os_log_debug_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "%@:%s: calling handleNetworkPrepareResult", v122, 0x16u);
          }

          v78 = objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "queue"));
          v104[0] = _NSConcreteStackBlock;
          v104[1] = 3221225472;
          v104[2] = sub_10000A8E4;
          v104[3] = &unk_1000BEB58;
          v105 = v59;
          v106 = *(id *)(a1 + 40);
          dispatch_async(v78, v104);

          v71 = v105;
          goto LABEL_69;
        case 4uLL:
        case 6uLL:
          v67 = ne_log_obj(v65, v66);
          v68 = objc_claimAutoreleasedReturnValue(v67);
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
          {
            v87 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)v122 = 138412546;
            v123 = v87;
            v124 = 2080;
            v125 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
            _os_log_debug_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "%@:%s: calling handleInterfaceAvailable", v122, 0x16u);
          }

          v69 = objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "queue"));
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10000A72C;
          block[3] = &unk_1000BE828;
          v70 = *(_QWORD *)(a1 + 32);
          v110 = *(_QWORD *)(a1 + 56);
          block[4] = v70;
          v108 = v59;
          v109 = *(id *)(a1 + 40);
          dispatch_async(v69, block);

          v71 = v108;
          goto LABEL_69;
        default:
          v79 = ne_log_obj(v65, v66);
          v63 = objc_claimAutoreleasedReturnValue(v79);
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
          {
            v80 = *(_QWORD *)(a1 + 32);
            v81 = objc_msgSend(v59, "state");
            *(_DWORD *)v122 = 138412802;
            v123 = v80;
            v124 = 2080;
            v125 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke_2";
            v126 = 1024;
            LODWORD(v127) = v81;
            _os_log_debug_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "%@:%s: no handling for state %d", v122, 0x1Cu);
          }
          goto LABEL_67;
      }
    }
    v72 = objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "queue"));
    v99[0] = _NSConcreteStackBlock;
    v99[1] = 3221225472;
    v99[2] = sub_10000A958;
    v99[3] = &unk_1000BEB58;
    v100 = v59;
    v101 = *(id *)(a1 + 40);
    dispatch_async(v72, v99);

    v71 = v100;
LABEL_69:

  }
  else
  {
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      v85 = *(_QWORD *)(a1 + 32);
      v86 = *(void **)(a1 + 40);
      *(_DWORD *)v122 = 138412802;
      v123 = v85;
      v124 = 2080;
      v125 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
      v126 = 2112;
      v127 = v86;
      _os_log_error_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_ERROR, "%@:%s: no vpn session for %@", v122, 0x20u);
    }
LABEL_67:

  }
}

NESMIKEv2VPNSession *sub_10000A02C(NESMIKEv2VPNSession *a1, void *a2)
{
  id v3;
  const __CFString *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NESMIKEv2VPNSession *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  _BYTE v22[22];
  __int16 v23;
  id v24;

  v3 = a2;
  if (a1)
  {
    v4 = sub_10000A998((uint64_t)a1, v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    if (!v5)
      goto LABEL_9;
    v6 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](a1, "configuration"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "alwaysOnVPN"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "interfaceProtocolMapping"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v5));

    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](a1, "configuration"));
      v11 = objc_msgSend(v10, "copy");

      v12 = [NESMIKEv2VPNSession alloc];
      v13 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession server](a1, "server"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "alwaysOnVPN"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "interfaceProtocolMapping"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v5));
      if (v12)
      {
        *(_QWORD *)v22 = v12;
        *(_QWORD *)&v22[8] = NESMIKEv2VPNSession;
        v12 = (NESMIKEv2VPNSession *)objc_msgSendSuper2((objc_super *)v22, "initWithConfiguration:andServer:andProtocol:andPluginType:andSessionType:sessionQueue:messageQueue:tunnelKind:parent:", v11, v13, v16, CFSTR("com.apple.NetworkExtension.IKEv2Provider"), 3, 0, 0, 1, a1);
      }

      v17 = -[NESMVPNSession setInterfaceName:](v12, "setInterfaceName:", v3);
      v19 = ne_log_obj(v17, v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v22 = 138412802;
        *(_QWORD *)&v22[4] = a1;
        *(_WORD *)&v22[12] = 2080;
        *(_QWORD *)&v22[14] = "-[NESMAlwaysOnSession createVPNSession:]";
        v23 = 2112;
        v24 = v3;
        _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%@:%s: Created VPN Session over %@", v22, 0x20u);
      }

      a1 = v12;
    }
    else
    {
LABEL_9:
      a1 = 0;
    }

  }
  return a1;
}

void sub_10000A274(void *a1, const char *a2)
{
  void *v3;
  SEL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  id v10;
  SEL v11;
  id v12;
  SEL v13;
  SEL v14;
  int v15;
  id Property;
  __int16 v17;
  const __CFString *v18;

  if (a1 && !objc_getProperty(a1, a2, 360, 1))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getIDSNetworkAgentDomain"));
    objc_setProperty_atomic(a1, v4, v3, 376);

    v7 = ne_log_obj(v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v15 = 138412546;
      Property = objc_getProperty(a1, v9, 376, 1);
      v17 = 2112;
      v18 = CFSTR("clientchannel");
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Watching <%@, %@> path", (uint8_t *)&v15, 0x16u);
    }

    v10 = objc_alloc_init((Class)NWParameters);
    objc_msgSend(v10, "requireNetworkAgentWithDomain:type:", objc_getProperty(a1, v11, 376, 1), CFSTR("clientchannel"));
    v12 = objc_msgSend(objc_alloc((Class)NWPathEvaluator), "initWithEndpoint:parameters:", 0, v10);
    objc_setProperty_atomic(a1, v13, v12, 360);

    objc_msgSend(objc_getProperty(a1, v14, 360, 1), "addObserver:forKeyPath:options:context:", a1, CFSTR("path"), 5, 0);
  }
}

void sub_10000A41C(void *a1, const char *a2)
{
  id v3;
  id v4;
  const char *v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *i;
  id v10;
  void *v11;
  void *v12;
  id v13;
  SEL v14;
  id v15;
  id v16;
  const char *v17;
  id v18;
  uint64_t v19;
  void *j;
  uint64_t v21;
  id Property;
  void *v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  _BYTE v35[128];

  if (a1)
  {
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v3 = objc_getProperty(a1, a2, 400, 1);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
    if (v4)
    {
      v6 = v4;
      v7 = 0;
      v8 = *(_QWORD *)v31;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v31 != v8)
            objc_enumerationMutation(v3);
          v10 = objc_msgSend(objc_getProperty(a1, v5, 400, 1), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i));
          v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "pluginConfigurationEntities"));

          if (v12 && (!v7 || (objc_msgSend(v11, "isSecondaryInterface") & 1) == 0))
          {
            v13 = v11;

            v7 = v13;
          }

        }
        v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
      }
      while (v6);
    }
    else
    {
      v7 = 0;
    }

    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v15 = objc_getProperty(a1, v14, 400, 1);
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
    if (v16)
    {
      v18 = v16;
      v19 = *(_QWORD *)v27;
      do
      {
        for (j = 0; j != v18; j = (char *)j + 1)
        {
          if (*(_QWORD *)v27 != v19)
            objc_enumerationMutation(v15);
          v21 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)j);
          Property = objc_getProperty(a1, v17, 400, 1);
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectForKeyedSubscript:", v21, (_QWORD)v26));
          v24 = v23;
          if (v23 == v7)
          {
            v23 = v7;
            v25 = 0;
          }
          else
          {
            v25 = 1;
          }
          objc_msgSend(v23, "setIsSecondaryConnection:", v25);

        }
        v18 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
      }
      while (v18);
    }

  }
}

void sub_10000A66C(void *a1, void *a2)
{
  const char *v3;
  void *v4;
  const char *v5;
  id v6;
  void *v7;
  _QWORD *v8;
  id v9;

  v9 = a2;
  if (a1)
  {
    if (objc_getProperty(a1, v3, 408, 1))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "interfaceName"));

      if (v4)
      {
        v6 = objc_getProperty(a1, v5, 408, 1);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "interfaceName"));
        v8 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v7));

        if (v8)
        {
          v8[1] = 0;
          v8[2] = 0;

        }
      }
    }
  }

}

void sub_10000A72C(uint64_t a1)
{
  void *v3;
  unsigned int *v4;
  int v5;
  void *v6;
  const char *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  unsigned int *v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  unsigned int v24;

  if ((*(_QWORD *)(a1 + 56) & 3) == 0 || (*(_QWORD *)(a1 + 56) & 4) == 0)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
    v4 = (unsigned int *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "primaryTunnelPlugin"));
    v5 = sub_10001755C(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "primaryTunnelPlugin"));
    v8 = sub_100016BDC(v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = *(void **)(a1 + 48);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "protocol"));
    LOBYTE(v5) = sub_1000424CC((uint64_t)v3, v5, v9, v10, (char)objc_msgSend(v11, "enableRevocationCheck"));

    if ((v5 & 1) == 0)
    {
      v14 = ne_log_obj(v12, v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v17 = *(_QWORD *)(a1 + 32);
        v18 = (unsigned int *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "primaryTunnelPlugin"));
        v19 = 138412802;
        v20 = v17;
        v21 = 2080;
        v22 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
        v23 = 1024;
        v24 = sub_10001755C(v18);
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%@:%s: failed to add Tunnel Control Policies for pid %d", (uint8_t *)&v19, 0x1Cu);

      }
    }
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "stateHandler"));
  objc_msgSend(v16, "handleInterfaceAvailable:changed:", *(_QWORD *)(a1 + 48), 0);

}

id sub_10000A8E4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleNetworkPrepareResult:", *(_QWORD *)(a1 + 40));
}

_BYTE *sub_10000A8F0(uint64_t a1, const char *a2)
{
  _BYTE *result;
  void *v4;
  id Property;

  result = *(_BYTE **)(a1 + 32);
  if (!result)
  {
    Property = 0;
    v4 = *(void **)(a1 + 40);
    return objc_msgSend(v4, "handleStartMessage:", Property);
  }
  if ((result[353] & 1) == 0)
  {
    v4 = *(void **)(a1 + 40);
    Property = objc_getProperty(result, a2, 392, 1);
    return objc_msgSend(v4, "handleStartMessage:", Property);
  }
  return result;
}

void sub_10000A958(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateHandler"));
  objc_msgSend(v2, "handleInterfaceUnavailable:", *(_QWORD *)(a1 + 40));

}

const __CFString *sub_10000A998(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL4 v12;
  const __CFString *v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  id v27;
  __int16 v28;
  const __CFString *v29;

  v3 = a2;
  v5 = v3;
  if (!a1)
  {
    v13 = 0;
    goto LABEL_21;
  }
  v21 = 0;
  if (!v3)
  {
    v14 = ne_log_obj(0, v4);
    v11 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412546;
      v23 = a1;
      v24 = 2080;
      v25 = "-[NESMAlwaysOnSession getConfigurationIndex:]";
      v15 = "%@:%s: null ifName";
      v16 = v11;
      v17 = 22;
LABEL_18:
      _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, v15, buf, v17);
      goto LABEL_19;
    }
    goto LABEL_19;
  }
  v6 = objc_retainAutorelease(v3);
  v7 = NEGetInterfaceType(objc_msgSend(v6, "UTF8String"), (char *)&v21 + 1, &v21);
  if (!(_DWORD)v7)
  {
    v18 = ne_log_obj(v7, v8);
    v11 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412802;
      v23 = a1;
      v24 = 2080;
      v25 = "-[NESMAlwaysOnSession getConfigurationIndex:]";
      v26 = 2112;
      v27 = v6;
      v15 = "%@:%s: Failed to get interface type for %@";
LABEL_17:
      v16 = v11;
      v17 = 32;
      goto LABEL_18;
    }
LABEL_19:
    v13 = 0;
    goto LABEL_20;
  }
  if (HIBYTE(v21))
  {
    v9 = v21;
    v10 = ne_log_obj(v7, v8);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
    if (v9)
    {
      v13 = CFSTR("AlwaysOnVPNInterfaceWiFi");
      if (v12)
      {
        *(_DWORD *)buf = 138413058;
        v23 = a1;
        v24 = 2080;
        v25 = "-[NESMAlwaysOnSession getConfigurationIndex:]";
        v26 = 2112;
        v27 = v6;
        v28 = 2112;
        v29 = CFSTR("AlwaysOnVPNInterfaceWiFi");
LABEL_14:
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%@:%s: ifName %@: cfg index %@", buf, 0x2Au);
        goto LABEL_20;
      }
      goto LABEL_20;
    }
    if (v12)
    {
      *(_DWORD *)buf = 138412802;
      v23 = a1;
      v24 = 2080;
      v25 = "-[NESMAlwaysOnSession getConfigurationIndex:]";
      v26 = 2112;
      v27 = v6;
      v15 = "%@:%s: ifName %@: Unsupported interface type";
      goto LABEL_17;
    }
    goto LABEL_19;
  }
  v19 = ne_log_obj(v7, v8);
  v11 = objc_claimAutoreleasedReturnValue(v19);
  v13 = CFSTR("AlwaysOnVPNInterfaceCellular");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138413058;
    v23 = a1;
    v24 = 2080;
    v25 = "-[NESMAlwaysOnSession getConfigurationIndex:]";
    v26 = 2112;
    v27 = v6;
    v28 = 2112;
    v29 = CFSTR("AlwaysOnVPNInterfaceCellular");
    goto LABEL_14;
  }
LABEL_20:

LABEL_21:
  return v13;
}

void sub_10000AC54(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "copyExtendedStatus");
  if (v2)
  {
    v3 = v2;
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v2, *(_QWORD *)(a1 + 48));
    v2 = v3;
  }

}

uint64_t sub_10000AC9C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10000ACAC(uint64_t a1)
{

}

void sub_10000ACB4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v2 = objc_msgSend(*(id *)(a1 + 32), "copyStatistics");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("BytesIn")));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) += objc_msgSend(v6, "unsignedLongLongValue");

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "objectForKeyedSubscript:", CFSTR("BytesOut")));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) += objc_msgSend(v7, "unsignedLongLongValue");

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "objectForKeyedSubscript:", CFSTR("PacketsIn")));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) += objc_msgSend(v8, "unsignedLongLongValue");

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "objectForKeyedSubscript:", CFSTR("PacketsOut")));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) += objc_msgSend(v9, "unsignedLongLongValue");

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "objectForKeyedSubscript:", CFSTR("ErrorsIn")));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) += objc_msgSend(v10, "unsignedLongLongValue");

    v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "objectForKeyedSubscript:", CFSTR("ErrorsOut")));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) += objc_msgSend(v11, "unsignedLongLongValue");

  }
}

void sub_10000AE70(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  id v5;
  const char *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  const __CFString *v13;
  void *v14;
  NSObject *v15;
  _QWORD block[4];
  id v17;
  id v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 400, 1);
  v4 = Property;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v5)
  {
    v7 = v5;
    v8 = *(_QWORD *)v21;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v21 != v8)
          objc_enumerationMutation(v4);
        v10 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v9);
        v11 = *(id *)(a1 + 32);
        if (v11)
          v11 = objc_getProperty(v11, v6, 400, 1);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v10));
        v13 = sub_10000A998(*(_QWORD *)(a1 + 32), v10);
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        if (v14)
        {
          v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "queue"));
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10000B048;
          block[3] = &unk_1000BE878;
          v17 = *(id *)(a1 + 40);
          v18 = v12;
          v19 = v14;
          dispatch_async(v15, block);

        }
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v7);
  }

}

void sub_10000B048(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  unsigned int v9;
  void *v10;
  id v11;

  v2 = objc_msgSend(*(id *)(a1 + 32), "copy");
  v3 = *(void **)(a1 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "alwaysOnVPN"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "interfaceProtocolMapping"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 48)));
  v11 = v2;
  v7 = v6;
  if (v3)
  {
    objc_msgSend(v3, "setConfiguration:", v11);
    objc_msgSend(v3, "setProtocol:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "VPN"));
    v9 = objc_msgSend(v8, "isEnabled");

    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stateHandler"));
      objc_msgSend(v10, "handleUpdateConfiguration");

    }
  }

}

void sub_10000B134(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  const char *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  NSObject *v12;
  id v13;
  id obj;
  _QWORD block[4];
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 400, 1);
  obj = Property;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v4)
  {
    v6 = v4;
    v7 = *(_QWORD *)v18;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v18 != v7)
          objc_enumerationMutation(obj);
        v9 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v8);
        v10 = *(id *)(a1 + 32);
        if (v10)
          v10 = objc_getProperty(v10, v5, 400, 1);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v9));
        v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "queue"));
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10000B2D4;
        block[3] = &unk_1000BEB80;
        v16 = v11;
        v13 = v11;
        dispatch_async(v12, block);

        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v6);
  }

}

void sub_10000B2D4(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateHandler"));
  objc_msgSend(v1, "handleWakeup");

}

id sub_10000B304(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleStopMessageWithReason:", *(unsigned int *)(a1 + 40));
}

id sub_10000B314(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleStartMessage:", *(_QWORD *)(a1 + 40));
}

id sub_10000B320(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleInitializeState");
}

void sub_10000B384(uint64_t a1)
{
  void *v2;
  int v3;
  const char *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
  v3 = *(_DWORD *)(a1 + 64);
  v5 = sub_100016BDC(*(id *)(a1 + 40), v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "interfaceName"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "protocol"));
  LOBYTE(v3) = sub_1000424CC((uint64_t)v2, v3, v6, v7, (char)objc_msgSend(v8, "enableRevocationCheck"));

  if ((v3 & 1) == 0)
  {
    v11 = ne_log_obj(v9, v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(_DWORD *)(a1 + 64);
      v16 = 138412802;
      v17 = v14;
      v18 = 2080;
      v19 = "-[NESMAlwaysOnSession didStartWithPIDForSession:andVPNSession:andPID:error:]_block_invoke";
      v20 = 1024;
      v21 = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%@:%s: failed to add Tunnel Control Policies for pid %d", (uint8_t *)&v16, 0x1Cu);
    }

  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "stateHandler"));
  objc_msgSend(v13, "handlePlugin:didStartWithPID:error:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));

}

void sub_10000B4FC(uint64_t a1, const char *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unsigned __int8 v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  char v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  unsigned __int8 v41;
  BOOL v42;
  unsigned __int8 v43;
  id v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  _DWORD *v49;
  uint64_t v50;
  _BYTE buf[24];
  const char *v52;
  _DWORD *v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  BOOL v61;

  sub_10000A41C(*(void **)(a1 + 32), a2);
  v3 = *(void **)(a1 + 32);
  v4 = (void *)NEVirtualInterfaceCopyName(*(_QWORD *)(a1 + 48));
  sub_10007BE2C(v3, v4);

  v5 = *(void **)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  v7 = v6;
  if (!v5)
    goto LABEL_10;
  v8 = objc_msgSend(v6, "virtualInterface");
  if (!v8)
  {
    v21 = ne_log_obj(0, v9);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
LABEL_9:

LABEL_10:
LABEL_21:
      v35 = ne_log_obj(v26, v27);
      v36 = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        v37 = *(_QWORD *)(a1 + 32);
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "interfaceName"));
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v37;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v38;
        *(_WORD *)&buf[22] = 2080;
        v52 = "-[NESMAlwaysOnSession installForSession:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%@[%@]:%s: applyTunnelDataPolicy failed", buf, 0x20u);

      }
      goto LABEL_24;
    }
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "interfaceName"));
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v23;
    *(_WORD *)&buf[22] = 2080;
    v52 = "-[NESMAlwaysOnSession applyTunnelDataPolicyForSession:]";
    v24 = "%@[%@]:%s: NULL virtual interface";
LABEL_26:
    _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, v24, buf, 0x20u);

    goto LABEL_9;
  }
  v10 = NEVirtualInterfaceCopyName(v8);
  v50 = v10;
  if (!v10)
  {
    v25 = ne_log_obj(0, v11);
    v22 = objc_claimAutoreleasedReturnValue(v25);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "interfaceName"));
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v23;
    *(_WORD *)&buf[22] = 2080;
    v52 = "-[NESMAlwaysOnSession applyTunnelDataPolicyForSession:]";
    v24 = "%@[%@]:%s: NULL virtual interface name";
    goto LABEL_26;
  }
  v12 = (void *)v10;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "configuration"));
  v45 = sub_1000574CC((uint64_t)NEPolicySession, v13);

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "configuration"));
  v44 = sub_100057438((uint64_t)NEPolicySession, v14);

  v49 = (_DWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "policySession"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "interfaceName"));
  v43 = objc_msgSend(v7, "isSecondaryConnection");
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "pluginConfigurationEntities"));
  v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "DNSSettings"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "pluginConfigurationEntities"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "proxySettings"));
  v20 = objc_msgSend(v19, "enabled");
  v48 = v16;
  v46 = v18;
  if ((v20 & 1) != 0)
  {
    v41 = 1;
  }
  else
  {
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "protocol"));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "proxySettings"));
    v41 = objc_msgSend(v39, "enabled");
  }
  v47 = (void *)v17;
  v42 = v17 != 0;
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "configuration"));
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "alwaysOnVPN"));
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "applicationExceptions"));
  v31 = v12;
  v32 = v15;
  v33 = v30;
  v34 = (char)v49;
  if (v49)
  {
    if (isa_nsstring(v31) && isa_nsstring(v32) && v49[2] == 3)
    {
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_100042EB4;
      v52 = (const char *)&unk_1000BDE78;
      v53 = v49;
      v59 = v43;
      v54 = v32;
      v57 = v45;
      v58 = v44;
      v55 = v33;
      v60 = v41;
      v56 = v31;
      v61 = v42;
      v34 = sub_10002C9C8((uint64_t)NESMPolicyMasterSession, buf);

    }
    else
    {
      v34 = 0;
    }
  }

  if ((v20 & 1) == 0)
  {

  }
  myCFRelease(&v50);

  if ((v34 & 1) == 0)
    goto LABEL_21;
LABEL_24:
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void sub_10000B9D0(uint64_t a1, const char *a2)
{
  void *v3;
  void *v4;
  void *v5;
  __CFString *v6;
  uint64_t v7;
  __CFString *v8;
  uint64_t v9;
  NSObject *v10;
  const __CFString *v11;
  void *v12;
  int v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  const __CFString *v18;

  sub_10000A41C(*(void **)(a1 + 32), a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
  sub_10002C7C4(v3, *(void **)(a1 + 40));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
  sub_10002C934((uint64_t)v4, *(void **)(a1 + 40));

  v5 = *(void **)(a1 + 32);
  v6 = (__CFString *)(id)NEVirtualInterfaceCopyName(*(_QWORD *)(a1 + 48));
  v8 = v6;
  if (v5)
  {
    v9 = ne_log_obj(v6, v7);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = CFSTR("[nil]");
      if (v8)
        v11 = v8;
      v15 = 138412546;
      v16 = v5;
      v17 = 2112;
      v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%@: Request to remove network agent from \"%@\"", (uint8_t *)&v15, 0x16u);
    }

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "networkAgentInterfaces"));
    v13 = isa_nsarray(v12);

    if (v13)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "networkAgentInterfaces"));
      objc_msgSend(v14, "removeObject:", v8);

      sub_1000788C8(v5);
    }
  }

  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void sub_10000BB44(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  _QWORD v7[5];
  id v8;
  id v9;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "interfaceName"));
  v3 = *(void **)(a1 + 48);
  v4 = v2;
  v5 = v3;
  if (v6)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100041D84;
    v7[3] = &unk_1000BDE28;
    v7[4] = v6;
    v8 = v4;
    v9 = v5;
    sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v7);

  }
}

void sub_10000BC20(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "interfaceName"));
  sub_10002C70C(v2, v3);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "interfaceName"));
  sub_10002C87C(v5, v4);

}

_BYTE *sub_10000BCB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  _BYTE *result;
  void *v7;
  id Property;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  const char *v16;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "interfaceName"));
    v11 = 138412802;
    v12 = v9;
    v13 = 2112;
    v14 = v10;
    v15 = 2080;
    v16 = "-[NESMAlwaysOnSession alwaysOnRetry:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%@[%@]:%s: Retrying now", (uint8_t *)&v11, 0x20u);

  }
  result = *(_BYTE **)(a1 + 32);
  if (result)
  {
    if ((result[353] & 1) != 0)
      return result;
    v7 = *(void **)(a1 + 40);
    Property = objc_getProperty(result, v5, 392, 1);
  }
  else
  {
    Property = 0;
    v7 = *(void **)(a1 + 40);
  }
  return objc_msgSend(v7, "handleStartMessage:", Property);
}

void sub_10000BDD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  void *v9;
  void *v10;
  id Property;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  const char *v23;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3 && (*(_BYTE *)(v3 + 353) & 1) != 0
    || (v4 = *(void **)(a1 + 40),
        v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "interfaceName"))),
        LODWORD(v4) = objc_msgSend(v4, "isInterfaceIPAvailable:", objc_msgSend(v5, "UTF8String")),
        v5,
        !(_DWORD)v4))
  {
    v12 = ne_log_obj(a1, a2);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_QWORD *)(a1 + 32);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "interfaceName"));
      v18 = 138412802;
      v19 = v14;
      v20 = 2112;
      v21 = v15;
      v22 = 2080;
      v23 = "-[NESMAlwaysOnSession alwaysOnRetry:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%@[%@]:%s: Session stopped or interface down, no retry", (uint8_t *)&v18, 0x20u);

    }
  }
  else
  {
    v6 = ne_log_obj(a1, a2);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(_QWORD *)(a1 + 32);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "interfaceName"));
      v18 = 138412802;
      v19 = v16;
      v20 = 2112;
      v21 = v17;
      v22 = 2080;
      v23 = "-[NESMAlwaysOnSession alwaysOnRetry:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%@[%@]:%s: Retrying now", (uint8_t *)&v18, 0x20u);

    }
    v9 = *(void **)(a1 + 32);
    v10 = *(void **)(a1 + 40);
    if (v9)
      Property = objc_getProperty(v9, v8, 392, 1);
    else
      Property = 0;
    objc_msgSend(v10, "handleStartMessage:", Property);
  }
}

id sub_10000BFBC(uint64_t a1)
{
  unsigned int v2;
  id result;

  v2 = objc_msgSend(*(id *)(a1 + 32), "status");
  objc_msgSend(*(id *)(a1 + 32), "setStatus:", *(unsigned int *)(a1 + 40));
  result = objc_msgSend(*(id *)(a1 + 32), "status");
  if ((_DWORD)result == v2)
    return objc_msgSend(*(id *)(a1 + 32), "notifyChangedExtendedStatus");
  return result;
}

id sub_10000C1FC()
{
  objc_opt_self();
  if (qword_1000CF8B0 != -1)
    dispatch_once(&qword_1000CF8B0, &stru_1000BD498);
  return (id)qword_1000CF8A8;
}

void sub_10000C240(id a1)
{
  NESMProviderManager *v1;
  void *v2;

  v1 = objc_alloc_init(NESMProviderManager);
  v2 = (void *)qword_1000CF8A8;
  qword_1000CF8A8 = (uint64_t)v1;

}

void sub_10000C268(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v8[5];
  id v9;

  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x3032000000;
  v8[3] = sub_10000C3B0;
  v8[4] = sub_10000C3D8;
  v9 = objc_retainBlock(*(id *)(a1 + 40));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    v2 = (_QWORD *)v2[2];
  v3 = v2;
  xpc_event_publisher_set_handler();

  v4 = *(_QWORD **)(a1 + 32);
  if (v4)
    v4 = (_QWORD *)v4[2];
  v5 = v4;
  xpc_event_publisher_set_error_handler();

  v6 = *(_QWORD **)(a1 + 32);
  if (v6)
    v6 = (_QWORD *)v6[2];
  v7 = v6;
  xpc_event_publisher_activate();

  _Block_object_dispose(v8, 8);
}

void sub_10000C398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10000C3B0(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_retainBlock(*(id *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_10000C3D8(uint64_t a1)
{

}

void sub_10000C3E0(uint64_t a1, int a2, char *a3, void *a4)
{
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  const char *string;
  xpc_object_t array;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  xpc_type_t type;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  id *v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  void *i;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  void *v47;
  id obj;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v54;
  _QWORD applier[5];
  NSObject *v56;
  id v57;
  const char *v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint8_t v68[4];
  char *v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  uint8_t v74[128];
  uint8_t buf[4];
  const char *v76;
  __int16 v77;
  const char *v78;

  v6 = a4;
  v8 = v6;
  switch(a2)
  {
    case 2:
      v24 = ne_log_obj(v6, v7);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Starting system extension listener", buf, 2u);
      }

      v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      if (v26)
      {
        (*(void (**)(void))(v26 + 16))();
        v27 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v28 = *(void **)(v27 + 40);
        *(_QWORD *)(v27 + 40) = 0;

      }
      break;
    case 1:
      v29 = ne_log_obj(v6, v7);
      v30 = objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v76 = a3;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "NESMProviderManager event publisher received a remove action with event subscription %llu", buf, 0xCu);
      }
      v47 = v8;

      v31 = *(_QWORD *)(a1 + 32);
      if (v31)
      {
        v32 = sub_10000CF50((id *)[NESMProviderRegistration alloc], a3, 0);
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        obj = *(id *)(v31 + 24);
        v51 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, buf, 16);
        if (v51)
        {
          v49 = *(_QWORD *)v65;
          v50 = v31;
          do
          {
            v33 = 0;
            do
            {
              if (*(_QWORD *)v65 != v49)
                objc_enumerationMutation(obj);
              v52 = v33;
              v54 = *(_QWORD *)(*((_QWORD *)&v64 + 1) + 8 * v33);
              v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v31 + 24), "objectForKeyedSubscript:", v47));
              v60 = 0u;
              v61 = 0u;
              v62 = 0u;
              v63 = 0u;
              v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v60, v74, 16);
              if (v35)
              {
                v36 = v35;
                v37 = *(_QWORD *)v61;
                do
                {
                  for (i = 0; i != v36; i = (char *)i + 1)
                  {
                    if (*(_QWORD *)v61 != v37)
                      objc_enumerationMutation(v34);
                    v39 = *(_QWORD *)(*((_QWORD *)&v60 + 1) + 8 * (_QWORD)i);
                    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "objectForKeyedSubscript:", v39));
                    v41 = objc_msgSend(v40, "indexOfObject:", v32);
                    if (v41 != (id)0x7FFFFFFFFFFFFFFFLL)
                    {
                      v43 = v41;
                      v44 = ne_log_obj(v41, v42);
                      v45 = objc_claimAutoreleasedReturnValue(v44);
                      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)v68 = 134218498;
                        v69 = a3;
                        v70 = 2112;
                        v71 = v54;
                        v72 = 2112;
                        v73 = v39;
                        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Removing event subscription %llu for plugin %@ with extension point %@", v68, 0x20u);
                      }

                      objc_msgSend(v40, "removeObjectAtIndex:", v43);
                    }

                  }
                  v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v60, v74, 16);
                }
                while (v36);
              }

              v33 = v52 + 1;
              v31 = v50;
            }
            while ((id)(v52 + 1) != v51);
            v51 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, buf, 16);
          }
          while (v51);
        }

      }
      v8 = v47;
      break;
    case 0:
      v9 = ne_log_obj(v6, v7);
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v76 = a3;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "NESMProviderManager event publisher received an add action with event subscription %llu", buf, 0xCu);
      }

      string = xpc_dictionary_get_string(v8, "NEProviderBundleIdentifier");
      array = xpc_dictionary_get_array(v8, "NEExtensionPoints");
      v13 = objc_claimAutoreleasedReturnValue(array);
      v15 = (void *)v13;
      if (string && *string)
      {
        v16 = objc_msgSend(objc_alloc((Class)NSString), "initWithCString:encoding:", string, 4);
        v18 = ne_log_obj(v16, v17);
        v19 = objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v76 = (const char *)v16;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Failed to find the expected code directory hashes for %@, it does not appear to be a registered system extension", buf, 0xCu);
        }

        if (v15 && (type = xpc_get_type(v15), type == (xpc_type_t)&_xpc_type_array))
        {
          applier[0] = _NSConcreteStackBlock;
          applier[1] = 3221225472;
          applier[2] = sub_10000CA90;
          applier[3] = &unk_1000BD4C0;
          applier[4] = *(_QWORD *)(a1 + 32);
          v58 = string;
          v59 = a3;
          v16 = v16;
          v56 = v16;
          v57 = 0;
          xpc_array_apply(v15, applier);

        }
        else
        {
          v22 = ne_log_obj(type, v21);
          v23 = objc_claimAutoreleasedReturnValue(v22);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v76 = "com.apple.networkextension.provider.matching";
            v77 = 2080;
            v78 = string;
            _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Got a %s event subscription for provider %s without any extension points", buf, 0x16u);
          }

        }
      }
      else
      {
        v46 = ne_log_obj(v13, v14);
        v16 = objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          v76 = "com.apple.networkextension.provider.matching";
          _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Got a %s event subscription with a NULL or empty provider bundle identifier", buf, 0xCu);
        }
      }

      break;
  }

}

void sub_10000C9AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;

  v4 = ne_log_obj();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
  {
    v9 = 136315138;
    v10 = xpc_strerror(a2);
    _os_log_fault_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Event publisher encountered an error: %s", (uint8_t *)&v9, 0xCu);
  }

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (v6)
  {
    (*(void (**)(void))(v6 + 16))();
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = 0;

  }
}

uint64_t sub_10000CA90(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  size_t length;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  NSString *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  id v27;
  id v28;
  id *v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  const char *v34;
  _QWORD *v35;
  NSObject *Property;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  NSObject *v46;
  _QWORD v47[5];
  _BYTE buf[24];
  void *v49;
  __int128 v50;
  _QWORD *v51;

  v5 = a3;
  v6 = v5;
  if (!v5 || xpc_get_type(v5) != (xpc_type_t)&_xpc_type_string)
  {
    length = xpc_string_get_length(v6);
    if (length)
    {
      v9 = ne_log_obj(length, v8);
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v43 = a1[7];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "NEExtensionPoints";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v43;
        *(_WORD *)&buf[22] = 2048;
        v49 = a2;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Got a %s event subscription for provider %s with an invalid extension point at index %lu", buf, 0x20u);
      }
LABEL_6:
      v11 = 0;
      goto LABEL_26;
    }
  }
  v12 = objc_msgSend(objc_alloc((Class)NSString), "initWithCString:encoding:", xpc_string_get_string_ptr(v6), 4);
  v13 = a1[4];
  v14 = v12;
  v10 = v14;
  if (!v13)
  {

    goto LABEL_28;
  }
  if ((-[NSObject isEqualToString:](v14, "isEqualToString:", CFSTR("com.apple.networkextension.filter-data")) & 1) == 0&& (-[NSObject isEqualToString:](v10, "isEqualToString:", CFSTR("com.apple.networkextension.filter-packet")) & 1) == 0&& (-[NSObject isEqualToString:](v10, "isEqualToString:", CFSTR("com.apple.networkextension.packet-tunnel")) & 1) == 0&& !-[NSObject isEqualToString:](v10, "isEqualToString:", CFSTR("com.apple.networkextension.app-proxy")))
  {
    v38 = -[NSObject isEqualToString:](v10, "isEqualToString:", CFSTR("com.apple.networkextension.dns-proxy"));

    if ((v38 & 1) != 0)
      goto LABEL_13;
LABEL_28:
    v41 = ne_log_obj(v39, v40);
    v42 = objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      v44 = a1[7];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "NEExtensionPoints";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v44;
      *(_WORD *)&buf[22] = 2048;
      v49 = a2;
      LOWORD(v50) = 2112;
      *(_QWORD *)((char *)&v50 + 2) = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Got a %s event subscription for provider %s with an unknown extension point at index %lu: %@", buf, 0x2Au);
    }

    goto LABEL_6;
  }

LABEL_13:
  v15 = (void *)a1[8];
  v16 = a1[4];
  v17 = (void *)a1[5];
  v18 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", xpc_string_get_string_ptr(v6));
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  v20 = (void *)a1[6];
  v21 = v17;
  v22 = v19;
  if (v16)
  {
    v23 = v20;
    v25 = ne_log_obj(v23, v24);
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v21;
      *(_WORD *)&buf[22] = 2112;
      v49 = v22;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Adding event subscription %llu for provider %@ with extension point %@", buf, 0x20u);
    }

    v27 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v16 + 24), "objectForKeyedSubscript:", v21));
    if (!v27)
    {
      v27 = objc_alloc_init((Class)NSMutableDictionary);
      objc_msgSend(*(id *)(v16 + 24), "setObject:forKeyedSubscript:", v27, v21);
    }
    v28 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKeyedSubscript:", v22));
    if (!v28)
    {
      v28 = objc_alloc_init((Class)NSMutableArray);
      objc_msgSend(v27, "setObject:forKeyedSubscript:", v28, v22);
    }
    v45 = v22;
    v46 = v10;
    v29 = sub_10000CF50((id *)[NESMProviderRegistration alloc], v15, v23);

    if (objc_msgSend(v28, "indexOfObject:", v29) == (id)0x7FFFFFFFFFFFFFFFLL)
      objc_msgSend(v28, "addObject:", v29);
    v30 = sub_10004EDE8((uint64_t)NESMServer);
    v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472;
    v47[2] = sub_10000CFCC;
    v47[3] = &unk_1000BD538;
    v47[4] = v16;
    v32 = v21;
    v33 = v21;
    v35 = v47;
    if (v31)
    {
      Property = objc_getProperty(v31, v34, 88, 1);
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_100052A60;
      v49 = &unk_1000BECA8;
      *(_QWORD *)&v50 = v31;
      *((_QWORD *)&v50 + 1) = v33;
      v51 = v35;
      dispatch_async(Property, buf);

    }
    v21 = v32;
    v22 = v45;
    v10 = v46;
  }

  v11 = 1;
LABEL_26:

  return v11;
}

id *sub_10000CF50(id *a1, void *a2, void *a3)
{
  id v6;
  id *v7;
  objc_super v9;

  v6 = a3;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)NESMProviderRegistration;
    v7 = (id *)objc_msgSendSuper2(&v9, "init");
    a1 = v7;
    if (v7)
    {
      v7[1] = a2;
      objc_storeStrong(v7 + 2, a3);
    }
  }

  return a1;
}

void sub_10000CFCC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  _QWORD block[4];
  id v8;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    v5 = *(NSObject **)(v4 + 8);
  else
    v5 = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000D058;
  block[3] = &unk_1000BEB80;
  v8 = v3;
  v6 = v3;
  dispatch_async(v5, block);

}

void sub_10000D058(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v2 = *(id *)(a1 + 32);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v8;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v8 != v5)
            objc_enumerationMutation(v2);
          objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), "handleInstalledAppsChanged", (_QWORD)v7);
          v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      }
      while (v4);
    }

  }
}

void sub_10000D150(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  const char *v4;
  _QWORD *v5;
  id Property;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  xpc_object_t v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  __int16 v20;
  uint64_t v21;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    v2 = (_QWORD *)v2[3];
  v3 = *(void **)(a1 + 40);
  v5 = v2;
  if (v3)
    Property = objc_getProperty(v3, v4, 104, 1);
  else
    Property = 0;
  v7 = Property;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 48)));

  if (objc_msgSend(v9, "count"))
  {
    v11 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v11, "extension-point", (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 48)), "UTF8String"));
    v12 = objc_msgSend(v9, "copy");
    sub_10000D324(*(_QWORD *)(a1 + 32), v11, 0, v12, *(void **)(a1 + 40), *(void **)(a1 + 56));

  }
  else
  {
    v13 = ne_log_obj(0, v10);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD **)(a1 + 40);
      if (v15)
        v15 = (_QWORD *)v15[6];
      v16 = v15;
      v17 = *(_QWORD *)(a1 + 48);
      v18 = 138412546;
      v19 = v16;
      v20 = 2112;
      v21 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Cannot launch plugin type %@ for extension point %@, no provider is registered", (uint8_t *)&v18, 0x16u);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_10000D324(uint64_t a1, void *a2, id a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  _QWORD *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  _QWORD *v19;
  uint64_t v20;
  id Property;
  const char *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  _QWORD v30[5];
  id v31;
  id v32;
  _QWORD *v33;
  id v34;
  id v35;
  void *v36;
  uint8_t buf[4];
  id v38;

  v11 = a2;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  if (a1)
  {
    v15 = objc_msgSend(v12, "count");
    if (v15 == a3)
    {
      v17 = ne_log_obj(v15, v16);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        if (v13)
          v28 = (void *)v13[6];
        else
          v28 = 0;
        v29 = v28;
        *(_DWORD *)buf = 138412290;
        v38 = v29;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to launch %@", buf, 0xCu);

      }
      (*((void (**)(id, _QWORD, _QWORD, _QWORD))v14 + 2))(v14, 0, 0, 0);
    }
    else
    {
      v19 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", a3));
      if (v19)
        v20 = v19[1];
      else
        v20 = 0;

      Property = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", a3));
      v23 = Property;
      if (Property)
        Property = objc_getProperty(Property, v22, 16, 1);
      v24 = Property;

      v26 = *(_QWORD *)(a1 + 8);
      v25 = *(_QWORD *)(a1 + 16);
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_10000D574;
      v30[3] = &unk_1000BD588;
      v30[4] = a1;
      v31 = v11;
      v36 = a3;
      v32 = v12;
      v33 = v13;
      v34 = v24;
      v35 = v14;
      v27 = v24;
      xpc_event_publisher_fire_with_reply(v25, v20, v31, v26, v30);

    }
  }

}

void sub_10000D574(uint64_t a1, void *a2)
{
  xpc_type_t v3;
  uint64_t v4;
  xpc_type_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  xpc_object_t value;
  xpc_type_t type;
  uint64_t v15;
  xpc_type_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  id v23;
  _QWORD *v24;
  const _xpc_type_s *v25;
  int v26;
  xpc_type_t v27;

  v3 = a2;
  v5 = v3;
  if (v3 && (v3 = xpc_get_type(v3), v3 == (xpc_type_t)&_xpc_type_dictionary))
  {
    v9 = objc_msgSend(objc_alloc((Class)NEProcessIdentity), "initFromXPCMessage:", v5);
    if (v9)
    {
      objc_msgSend(*(id *)(a1 + 64), "count");
      v10 = *(_QWORD *)(a1 + 56);

      if (v10)
      {
        value = xpc_dictionary_get_value(v5, "listener-endpoint");
        type = (xpc_type_t)objc_claimAutoreleasedReturnValue(value);
        v16 = type;
        if (type && (type = xpc_get_type(type), type == (xpc_type_t)&_xpc_type_endpoint))
        {
          v23 = objc_alloc_init((Class)NSXPCListenerEndpoint);
          objc_msgSend(v23, "_setEndpoint:", v16);
          (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

        }
        else
        {
          v17 = ne_log_obj(type, v15);
          v18 = objc_claimAutoreleasedReturnValue(v17);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            v26 = 134217984;
            v27 = v16;
            _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Missing endpoint (%p), in launch event reply", (uint8_t *)&v26, 0xCu);
          }

          (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
        }

      }
      else
      {
        v21 = ne_log_obj(v11, v12);
        v22 = objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          v24 = *(_QWORD **)(a1 + 56);
          if (v24)
            v24 = (_QWORD *)v24[6];
          v25 = v24;
          v26 = 138412290;
          v27 = v25;
          _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Rejecting agent %@ because it does not satisfy the code signature requirements", (uint8_t *)&v26, 0xCu);

        }
        sub_10000D324(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 80) + 1, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72));
      }
    }
    else
    {
      v19 = ne_log_obj(0, v8);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v26) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to create the extension's process identity from the launch event reply", (uint8_t *)&v26, 2u);
      }

      (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
    }

  }
  else
  {
    v6 = ne_log_obj(v3, v4);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v26) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Got an invalid event reply", (uint8_t *)&v26, 2u);
    }

    sub_10000D324(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 80) + 1, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72));
  }

}

uint64_t sub_10000D860(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  void **v20;
  uint64_t v21;
  void (*v22)(_QWORD *);
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  _BYTE *v27;
  uint8_t buf[4];
  id v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  _BYTE v34[24];
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;

  v5 = a2;
  if (a1)
  {
    v6 = objc_claimAutoreleasedReturnValue(+[NELaunchServices pluginClassToExtensionPoint:](NELaunchServices, "pluginClassToExtensionPoint:", a3));
    v8 = (void *)v6;
    if (v6)
    {
      v9 = ne_log_obj(v6, v7);
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v34 = 138412546;
        *(_QWORD *)&v34[4] = v5;
        *(_WORD *)&v34[12] = 2112;
        *(_QWORD *)&v34[14] = v8;
        _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Checking for %@ - %@", v34, 0x16u);
      }

      *(_QWORD *)v34 = 0;
      *(_QWORD *)&v34[8] = v34;
      *(_QWORD *)&v34[16] = 0x3032000000;
      v35 = sub_10000DAB8;
      v36 = sub_10000DAC8;
      v37 = 0;
      v11 = *(NSObject **)(a1 + 8);
      v20 = _NSConcreteStackBlock;
      v21 = 3221225472;
      v22 = sub_10000DAD0;
      v23 = &unk_1000BE688;
      v27 = v34;
      v24 = a1;
      v12 = v5;
      v25 = v12;
      v13 = v8;
      v26 = v13;
      dispatch_sync(v11, &v20);
      v16 = ne_log_obj(v14, v15);
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v18 = objc_msgSend(*(id *)(*(_QWORD *)&v34[8] + 40), "count", v20, v21, v22, v23, v24, v25);
        *(_DWORD *)buf = 134218498;
        v29 = v18;
        v30 = 2112;
        v31 = v12;
        v32 = 2112;
        v33 = v13;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Found %lu registrations for %@ (%@)", buf, 0x20u);
      }

      a1 = objc_msgSend(*(id *)(*(_QWORD *)&v34[8] + 40), "count") != 0;
      _Block_object_dispose(v34, 8);

    }
    else
    {
      a1 = 0;
    }

  }
  return a1;
}

void sub_10000DA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000DAB8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10000DAC8(uint64_t a1)
{

}

void sub_10000DAD0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v2 = (_QWORD *)a1[4];
  if (v2)
    v2 = (_QWORD *)v2[3];
  v3 = a1[5];
  v4 = v2;
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v3));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", a1[6]));
  v6 = *(_QWORD *)(a1[7] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_10000DB4C(uint64_t a1)
{
  const char *v2;
  NSObject *v3;
  id Property;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  const char *v12;
  _QWORD *v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  id obj;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  NSObject *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD block[5];
  id v27;
  _QWORD *v28;
  _BYTE v29[128];

  v3 = dispatch_group_create();
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v2, 40, 1);
  obj = Property;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v29, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v23;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v23 != v7)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v8);
        dispatch_group_enter(v3);
        v10 = *(void **)(a1 + 40);
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_10000DD90;
        v20[3] = &unk_1000BEB80;
        v21 = v3;
        v11 = v10;
        v13 = v20;
        if (v9)
        {
          v14 = objc_getProperty(v9, v12, 24, 1);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10000DDA4;
          block[3] = &unk_1000BECA8;
          block[4] = v9;
          v28 = v13;
          v27 = v11;
          dispatch_async(v14, block);

        }
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v29, 16);
    }
    while (v6);
  }

  v15 = *(_QWORD *)(a1 + 32);
  if (v15)
    v16 = *(NSObject **)(v15 + 8);
  else
    v16 = 0;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10000DD98;
  v18[3] = &unk_1000BE7E0;
  v19 = *(id *)(a1 + 48);
  dispatch_group_notify(v3, v16, v18);

}

void sub_10000DD90(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_10000DD98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10000DDA4(_QWORD *a1, const char *a2)
{
  id Property;
  const char *v4;
  id v5;
  id v6;
  const char *v7;
  id v8;
  id v9;
  const char *v10;
  id v11;
  const char *v12;
  id v13;
  const char *v14;
  void (**v15)(_QWORD);
  void *v16;

  Property = (id)a1[4];
  if (Property)
    Property = objc_getProperty(Property, a2, 8, 1);
  if (objc_msgSend(Property, "count"))
  {
    v5 = (id)a1[4];
    if (v5)
      v5 = objc_getProperty(v5, v4, 8, 1);
    v6 = objc_msgSend(v5, "indexOfObject:", a1[5]);
    if (v6 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      v8 = v6;
      v9 = (id)a1[4];
      if (v9)
        v9 = objc_getProperty(v9, v7, 8, 1);
      objc_msgSend(v9, "removeObjectAtIndex:", v8);
      v11 = (id)a1[4];
      if (v11)
        v11 = objc_getProperty(v11, v10, 8, 1);
      if (!objc_msgSend(v11, "count"))
      {
        v13 = (id)a1[4];
        if (v13)
          v13 = objc_getProperty(v13, v12, 16, 1);
        v15 = (void (**)(_QWORD))v13;
        v16 = (void *)a1[4];
        if (v16)
          objc_setProperty_atomic_copy(v16, v14, 0, 16);
        v15[2](v15);

      }
    }
  }
  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_10000E15C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10000E7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_10000EF80(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "appVPN"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uid"));
  objc_msgSend(v3, "updateAppRulesForUID:", objc_msgSend(v4, "unsignedIntValue"));

  objc_msgSend(*(id *)(a1 + 32), "resetPerAppPolicy");
  return sub_10007B40C(*(_QWORD *)(a1 + 32), 1);
}

uint64_t sub_10000EFFC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "appVPN"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uid"));
  objc_msgSend(v3, "updateAppRulesForUID:", objc_msgSend(v4, "unsignedIntValue"));

  objc_msgSend(*(id *)(a1 + 32), "resetPerAppPolicy");
  return sub_10007B40C(*(_QWORD *)(a1 + 32), 1);
}

void sub_10000F078(uint64_t a1, char a2)
{
  uint64_t v3;
  id WeakRetained;
  id v5;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    if ((a2 & 1) != 0)
    {
      v5 = 0;
      (*(void (**)(uint64_t, _QWORD))(v3 + 16))(v3, 0);
    }
    else
    {
      v5 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NEAgentErrorDomain"), 1, 0));
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
      objc_msgSend(WeakRetained, "setPluginConfigurationEntities:", 0);

      (*(void (**)(_QWORD, id))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v5);
    }

  }
}

void sub_10000F110(uint64_t a1, id a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = WeakRetained;
  if ((_DWORD)a2 && WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "policySession"));
    sub_10002EE84((uint64_t)v4);

    a2 = objc_msgSend(v6, "resetPerAppPolicy");
    WeakRetained = v6;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "stateHandler"));
  objc_msgSend(v5, "handleSetConfigurationResult:", a2);

}

uint64_t sub_10000F18C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  __CFString *NetworkServiceEntity;
  void *v6;
  void *v7;
  __CFString *v8;
  _QWORD *v9;
  SCDynamicStoreRef v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  const char *v19;
  id v20;
  id Property;
  void *v22;
  _BOOL4 v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  const char *v29;
  id v30;
  id v31;
  void *v32;
  _BOOL4 v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  const __SCDynamicStore *v37;
  uint64_t v38;
  uint64_t v39;
  CFArrayRef keysToRemove;
  uint8_t buf[4];
  id v43;
  __int16 v44;
  CFArrayRef v45;
  _QWORD v46[2];
  CFStringRef v47;
  void *v48;

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  keysToRemove = (CFArrayRef)objc_alloc_init((Class)NSMutableArray);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  NetworkServiceEntity = (__CFString *)SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, (CFStringRef)objc_msgSend(v4, "UUIDString"), kSCEntNetProxies);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
  v8 = (__CFString *)SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, (CFStringRef)objc_msgSend(v7, "UUIDString"), kSCEntNetDNS);

  v9 = *(_QWORD **)(a1 + 32);
  if (!v9 || !v9[85])
  {
    v10 = SCDynamicStoreCreate(kCFAllocatorDefault, CFSTR("NESMFlowDivertSession state"), 0, 0);
    v11 = *(_QWORD *)(a1 + 32);
    if (v11)
    {
      *(_QWORD *)(v11 + 680) = v10;
      v9 = *(_QWORD **)(a1 + 32);
    }
    else
    {
      v9 = 0;
    }
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "pluginConfigurationEntities"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "proxySettings"));

  v14 = *(void **)(a1 + 32);
  if (v13)
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "pluginConfigurationEntities"));
  else
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "protocol"));
  v16 = v15;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "proxySettings"));
  v18 = objc_msgSend(v17, "copyLegacyDictionary");

  if (isa_nsdictionary(v18))
  {
    v20 = objc_msgSend(v18, "mutableCopy");
    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v19, 688, 1);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "controlUnit"));
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v22, kSCPropNetProxiesServiceSpecific);

  }
  else
  {
    v20 = v18;
  }
  if (isa_nsdictionary(v20))
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v20, NetworkServiceEntity);
  else
    -[__CFArray addObject:](keysToRemove, "addObject:", NetworkServiceEntity);
  v23 = sub_10000F608(*(_QWORD *)(a1 + 32), v20, NetworkServiceEntity);
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pluginConfigurationEntities"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "DNSSettings"));

  if (v25)
  {
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pluginConfigurationEntities"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "DNSSettings"));
    v28 = objc_msgSend(v27, "copyLegacyDictionary");

  }
  else
  {
    v46[0] = CFSTR("10.0.0.10");
    v46[1] = CFSTR("fe80::1");
    v47 = kSCPropNetDNSServerAddresses;
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v46, 2));
    v48 = v26;
    v28 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1));
  }

  v30 = objc_msgSend(v28, "mutableCopy");
  v31 = *(id *)(a1 + 32);
  if (v31)
    v31 = objc_getProperty(v31, v29, 688, 1);
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "controlUnit"));
  objc_msgSend(v30, "setObject:forKeyedSubscript:", v32, kSCPropNetDNSServiceIdentifier);

  objc_msgSend(v2, "setObject:forKeyedSubscript:", v30, v8);
  v33 = sub_10000F608(*(_QWORD *)(a1 + 32), v30, v8);
  if (!v33 || !v23)
  {
    v34 = ne_log_large_obj();
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v43 = v2;
      v44 = 2112;
      v45 = keysToRemove;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Setting %@, removing %@", buf, 0x16u);
    }

    v36 = *(_QWORD *)(a1 + 32);
    if (v36)
      v37 = *(const __SCDynamicStore **)(v36 + 680);
    else
      v37 = 0;
    SCDynamicStoreSetMultiple(v37, (CFDictionaryRef)v2, keysToRemove, 0);
  }
  v38 = 4;
  if (v23)
    v38 = 0;
  if (v33)
    v39 = v38;
  else
    v39 = v38 | 2;

  return v39;
}

BOOL sub_10000F608(uint64_t a1, void *a2, const __CFString *a3)
{
  const __SCDynamicStore *v4;
  id v5;
  _BOOL8 v6;
  CFPropertyListRef v8;

  if (!a1)
    return 0;
  v4 = *(const __SCDynamicStore **)(a1 + 680);
  v5 = a2;
  v8 = SCDynamicStoreCopyValue(v4, a3);
  LODWORD(a3) = myCFEqual(v8, v5);

  v6 = (_DWORD)a3 != 0;
  myCFRelease(&v8);
  return v6;
}

void sub_100010534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000114D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 354) & 1) == 0)
    {
      v3 = ne_log_obj(a1, a2);
      v4 = objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v8 = 138412290;
        v9 = a1;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@: unable to request install as provider is not installed", (uint8_t *)&v8, 0xCu);
      }
LABEL_12:

      return;
    }
    if (*(_DWORD *)(a1 + 356) == 1 || (_DWORD)a2 != 0)
    {
      v6 = ne_log_obj(a1, a2);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = 138412290;
        v9 = a1;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%@: requesting install", (uint8_t *)&v8, 0xCu);
      }

      v4 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "server"));
      -[NSObject requestInstallForSession:withParentSession:exclusive:](v4, "requestInstallForSession:withParentSession:exclusive:", a1, 0, 0);
      goto LABEL_12;
    }
  }
}

uint64_t sub_100011618(id self, const char *a2)
{
  uint64_t v3;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  id Property;
  const char *v9;
  id v10;
  const char *v11;
  void *v12;
  id v13;
  id v14;
  SEL v15;
  SEL v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  SEL v24;
  id v25;
  const char *v26;
  id v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  SEL v33;
  id v34;
  const char *v35;
  id v36;
  BOOL v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  void *v44;
  void *v45;
  id v46;
  SEL v47;
  id v48;
  const char *v49;
  id v50;
  uint64_t v51;
  const char *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  SEL v58;
  id v59;
  const char *v60;
  int v61;
  id v62;
  __int16 v63;
  id v64;
  __int16 v65;
  id v66;

  if (!self)
    return 0;
  if (*((_QWORD *)self + 51) == 1 && *((_QWORD *)self + 50) != 1)
  {
    v3 = 1;
    v5 = objc_getProperty(self, a2, 376, 1);
    if (!v5)
      return v3;
    v7 = v5;
    Property = objc_getProperty(self, v6, 376, 1);
    if (!Property || (v10 = objc_getProperty(Property, v9, 16, 1)) == 0)
    {
LABEL_20:

      return v3;
    }
    v12 = v10;
    v13 = objc_getProperty(self, v11, 416, 1);

    if (v13)
      return v3;
    v14 = objc_alloc_init((Class)NEPolicySession);
    objc_setProperty_atomic(self, v15, v14, 416);

    v17 = objc_msgSend(objc_getProperty(self, v16, 416, 1), "setPriority:", 300);
    v19 = ne_log_obj(v17, v18);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(self, "configuration"));
      v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "appPush"));
      v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "providerBundleIdentifier"));
      v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(self, "configuration"));
      v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "applicationIdentifier"));
      v61 = 138412802;
      v62 = self;
      v63 = 2112;
      v64 = v55;
      v65 = 2112;
      v66 = v57;
      _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%@ setting up the scoping policies for [%@]:[%@]", (uint8_t *)&v61, 0x20u);

    }
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(self, "configuration"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "appPush"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "providerBundleIdentifier"));
    v25 = objc_getProperty(self, v24, 376, 1);
    if (v25)
      v25 = objc_getProperty(v25, v26, 16, 1);
    v27 = v25;
    v28 = sub_10001209C((uint64_t)self, v23, v27);

    if (v28)
    {
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(self, "configuration"));
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "applicationIdentifier"));
      v34 = objc_getProperty(self, v33, 376, 1);
      if (v34)
        v34 = objc_getProperty(v34, v35, 16, 1);
      v36 = v34;
      v37 = sub_10001209C((uint64_t)self, v32, v36);

      if (v37)
      {
        v3 = (uint64_t)objc_msgSend(objc_getProperty(self, v39, 416, 1), "apply");
        v41 = ne_log_obj(v3, v40);
        v7 = objc_claimAutoreleasedReturnValue(v41);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          v61 = 138412290;
          v62 = self;
          _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%@ applied scoping policy", (uint8_t *)&v61, 0xCu);
        }
        goto LABEL_20;
      }
      v51 = ne_log_obj(v38, v39);
      v43 = objc_claimAutoreleasedReturnValue(v51);
      if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        goto LABEL_26;
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(self, "configuration"));
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "applicationIdentifier"));
      v59 = objc_getProperty(self, v58, 376, 1);
      if (v59)
        v59 = objc_getProperty(v59, v60, 16, 1);
      v46 = v59;
      v61 = 138412802;
      v62 = self;
      v63 = 2112;
      v64 = v45;
      v65 = 2112;
      v66 = v46;
      _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "%@ failed to add policy for %@ [interface:%@]", (uint8_t *)&v61, 0x20u);
    }
    else
    {
      v42 = ne_log_obj(v29, v30);
      v43 = objc_claimAutoreleasedReturnValue(v42);
      if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
LABEL_26:

        sub_100011C14(self, v52);
        return 0;
      }
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(self, "configuration"));
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "appPush"));
      v46 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "providerBundleIdentifier"));
      v48 = objc_getProperty(self, v47, 376, 1);
      if (v48)
        v48 = objc_getProperty(v48, v49, 16, 1);
      v50 = v48;
      v61 = 138412802;
      v62 = self;
      v63 = 2112;
      v64 = v46;
      v65 = 2112;
      v66 = v50;
      _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "%@ failed to add policy for %@ [interface:%@]", (uint8_t *)&v61, 0x20u);

    }
    goto LABEL_26;
  }
  return 1;
}

void sub_100011B08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  SEL v6;
  const char *v7;
  const char *v8;
  const char *v9;
  int v10;
  uint64_t v11;

  if (a1 && !*(_DWORD *)(a1 + 356))
  {
    v3 = ne_log_obj(a1, a2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v10 = 138412290;
      v11 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@ exiting session", (uint8_t *)&v10, 0xCu);
    }

    sub_100011D08((_BYTE *)a1, v5);
    objc_msgSend(objc_getProperty((id)a1, v6, 392, 1), "removeAllObjects");
    sub_100011DD8((void *)a1, v7);
    sub_100011EB4((void *)a1, v8);
    sub_100012000(a1);
    sub_100011C14((void *)a1, v9);
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
  }
}

void sub_100011C14(void *a1, const char *a2)
{
  const char *v3;
  SEL v4;
  SEL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  void *v11;

  if (a1 && objc_getProperty(a1, a2, 416, 1))
  {
    objc_msgSend(objc_getProperty(a1, v3, 416, 1), "removeAllPolicies");
    objc_msgSend(objc_getProperty(a1, v4, 416, 1), "apply");
    objc_setProperty_atomic(a1, v5, 0, 416);
    v8 = ne_log_obj(v6, v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v10 = 138412290;
      v11 = a1;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%@ removed scoping policies", (uint8_t *)&v10, 0xCu);
    }

  }
}

void sub_100011D08(_BYTE *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  int v6;
  _BYTE *v7;

  if (a1 && (a1[353] & 1) != 0)
  {
    v3 = ne_log_obj(a1, a2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v6 = 138412290;
      v7 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@: requesting uninstall", (uint8_t *)&v6, 0xCu);
    }

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
    objc_msgSend(v5, "requestUninstallForSession:", a1);

  }
}

void sub_100011DD8(void *a1, const char *a2)
{
  const char *v3;
  SEL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  void *v10;

  if (a1 && objc_getProperty(a1, a2, 360, 1))
  {
    objc_msgSend(objc_getProperty(a1, v3, 360, 1), "invalidate");
    objc_setProperty_atomic(a1, v4, 0, 360);
    v7 = ne_log_obj(v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = 138412290;
      v10 = a1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%@: invalidated provider wake timer", (uint8_t *)&v9, 0xCu);
    }

  }
}

void sub_100011EB4(void *a1, const char *a2)
{
  const char *v3;
  id Property;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  uint64_t v17;

  if (a1 && objc_getProperty(a1, a2, 384, 1))
  {
    Property = objc_getProperty(a1, v3, 384, 1);
    if (Property)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "remotePluginObject"));
      objc_msgSend(v6, "stopWithReason:", 4);

    }
    v7 = ne_log_obj(Property, v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "appPush"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "providerBundleIdentifier"));
      v12 = 138412802;
      v13 = a1;
      v14 = 2112;
      v15 = v11;
      v16 = 2080;
      v17 = ne_session_stop_reason_to_string(4);
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%@ stopping app push provider [%@] with reason [%s]", (uint8_t *)&v12, 0x20u);

    }
  }
}

void sub_100012000(uint64_t a1)
{
  id v1;
  void *v2;
  id v3;
  _QWORD block[5];

  if (a1 && *(_QWORD *)(a1 + 400) == 1)
  {
    *(_QWORD *)(a1 + 400) = 2;
    v1 = sub_1000806F8((uint64_t)NEWiFiManager);
    v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
    if (v2)
    {
      block[1] = 3221225472;
      block[2] = sub_1000808C4;
      block[3] = &unk_1000BEB80;
      block[4] = v2;
      v3 = v2;
      block[0] = _NSConcreteStackBlock;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
      v2 = v3;
    }

  }
}

BOOL sub_10001209C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  _BOOL8 v19;
  uint64_t v20;
  _QWORD v22[4];
  NSObject *v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  id v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  id v35;
  __int16 v36;
  void *v37;

  v5 = a2;
  v6 = a3;
  v27 = 0;
  v28 = &v27;
  v29 = 0x2020000000;
  v30 = 1;
  v7 = v5;
  v31 = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[LSBundleRecord bundleRecordWithBundleIdentifier:allowPlaceholder:error:](LSBundleRecord, "bundleRecordWithBundleIdentifier:allowPlaceholder:error:", v7, 0, &v31));
  v9 = v31;
  v11 = v9;
  if (v8)
    v12 = v9 == 0;
  else
    v12 = 0;
  if (v12)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "machOUUIDs"));
  }
  else
  {
    v13 = ne_log_obj(v9, v10);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412802;
      v33 = a1;
      v34 = 2112;
      v35 = v7;
      v36 = 2112;
      v37 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%@ failed to get bundle record for [%@], error: %@", buf, 0x20u);
    }

    v15 = 0;
  }

  if (v15 && (v16 = objc_msgSend(v15, "count")) != 0)
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100012338;
    v22[3] = &unk_1000BD628;
    v26 = 20000;
    v18 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyResult scopeSocketToInterfaceName:](NEPolicyResult, "scopeSocketToInterfaceName:", v6));
    v23 = v18;
    v24 = a1;
    v25 = &v27;
    objc_msgSend(v15, "enumerateObjectsUsingBlock:", v22);
    v19 = *((_BYTE *)v28 + 24) != 0;

  }
  else
  {
    v20 = ne_log_obj(v16, v17);
    v18 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v33 = a1;
      v34 = 2112;
      v35 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%@ failed to get MachO UUIDs for [%@]", buf, 0x16u);
    }
    v19 = 0;
  }

  _Block_object_dispose(&v27, 8);
  return v19;
}

void sub_100012310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100012338(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  id v7;
  void *v8;
  const char *v9;
  id v10;
  id Property;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  id v22;

  v6 = a2;
  v7 = objc_alloc_init((Class)NSMutableArray);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v6));

  objc_msgSend(v7, "addObject:", v8);
  v10 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 32), v7);
  Property = *(id *)(a1 + 40);
  if (Property)
    Property = objc_getProperty(Property, v9, 416, 1);
  v12 = objc_msgSend(Property, "addPolicy:", v10);
  v14 = ne_log_obj(v12, v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  v16 = v15;
  if (v12)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v17 = *(_QWORD *)(a1 + 40);
      v19 = 138412546;
      v20 = v17;
      v21 = 2112;
      v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%@ successfully added policy: %@", (uint8_t *)&v19, 0x16u);
    }

  }
  else
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_QWORD *)(a1 + 40);
      v19 = 138412546;
      v20 = v18;
      v21 = 2112;
      v22 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%@ failed to add policy: %@", (uint8_t *)&v19, 0x16u);
    }

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    *a4 = 1;
  }

}

void sub_100012504(void *a1, const char *a2)
{
  const char *v3;
  _BYTE *Property;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;

  if (a1 && objc_getProperty(a1, a2, 384, 1))
  {
    Property = objc_getProperty(a1, v3, 384, 1);
    sub_100016D0C(Property, v5);
    v8 = ne_log_obj(v6, v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "appPush"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "providerBundleIdentifier"));
      v13 = 138412546;
      v14 = a1;
      v15 = 2112;
      v16 = v12;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%@ disposing app push provider [%@]", (uint8_t *)&v13, 0x16u);

    }
  }
}

void sub_100012624(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  _QWORD v12[5];
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  void *v16;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "configuration"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "application"));
    *(_DWORD *)buf = 138412546;
    v14 = v5;
    v15 = 2112;
    v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@ reporting PushToTalk Message for app [%@]", buf, 0x16u);

  }
  v8 = objc_alloc_init((Class)CXNetworkExtensionMessageController);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "application"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100012788;
  v12[3] = &unk_1000BD678;
  v12[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v8, "sendNetworkExtensionPushToTalkMessage:forBundleIdentifier:completion:", v9, v11, v12);

}

void sub_100012788(uint64_t a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  id v14;

  v5 = a3;
  v6 = ne_log_obj();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if (a2)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v11 = 138412290;
      v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%@ reported PushToTalk message to CallKit", (uint8_t *)&v11, 0xCu);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = 138412546;
    v12 = v10;
    v13 = 2112;
    v14 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%@ reported PushToTalk message to CallKit with error: %@", (uint8_t *)&v11, 0x16u);
  }

}

void sub_1000128A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  _QWORD v15[5];
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  void *v19;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "configuration"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "application"));
    *(_DWORD *)buf = 138412546;
    v17 = v5;
    v18 = 2112;
    v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@ reporting incoming call for app [%@]", buf, 0x16u);

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", *(_QWORD *)(a1 + 40)));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "UUIDString"));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v11, CFSTR("ap-push-config-uuid"));

  v12 = objc_alloc_init((Class)CXNetworkExtensionMessageController);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "application"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100012A68;
  v15[3] = &unk_1000BD678;
  v15[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v12, "sendNetworkExtensionMessage:forBundleIdentifier:completion:", v8, v14, v15);

}

void sub_100012A68(uint64_t a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  id v14;

  v5 = a3;
  v6 = ne_log_obj();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if (a2)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v11 = 138412290;
      v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%@ reported incoming call to CallKit", (uint8_t *)&v11, 0xCu);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = 138412546;
    v12 = v10;
    v13 = 2112;
    v14 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%@ failed to report incoming call to CallKit, error: %@", (uint8_t *)&v11, 0x16u);
  }

}

void sub_100012B80(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  id Property;
  void (**v7)(_QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v16 = a1[4];
    v17 = a1[5];
    v20 = 138412546;
    v21 = v16;
    v22 = 2112;
    v23 = v17;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%@ searching completion handler for message ID: [%@]", (uint8_t *)&v20, 0x16u);
  }

  Property = (id)a1[4];
  if (Property)
    Property = objc_getProperty(Property, v5, 392, 1);
  v7 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectForKeyedSubscript:", a1[5]));
  v9 = ne_log_obj(v7, v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = v10;
  if (v7)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v12 = a1[4];
      v13 = a1[5];
      v20 = 138412546;
      v21 = v12;
      v22 = 2112;
      v23 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%@ delivering error to the app for message ID: [%@]", (uint8_t *)&v20, 0x16u);
    }

    v7[2](v7, a1[6]);
    v15 = (id)a1[4];
    if (v15)
      v15 = objc_getProperty(v15, v14, 392, 1);
    objc_msgSend(v15, "removeObjectForKey:", a1[5]);
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v18 = a1[4];
      v19 = a1[5];
      v20 = 138412546;
      v21 = v18;
      v22 = 2112;
      v23 = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%@ failed to find completion handler for message ID [%@]", (uint8_t *)&v20, 0x16u);
    }

  }
}

void sub_100012D54(void *a1, const char *a2)
{
  const char *v3;
  void *v4;
  id v5;
  SEL v6;
  SEL v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD v14[4];
  id v15;
  id location;
  uint8_t buf[4];
  void *v18;

  if (a1)
  {
    if (objc_getProperty(a1, a2, 360, 1))
    {
      objc_msgSend(objc_getProperty(a1, v3, 360, 1), "cancel");
    }
    else
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.networkextension[NEAppPushSession-ProviderWakeTimer-%@]"), a1));
      v5 = objc_msgSend(objc_alloc((Class)SWWakingTimer), "initWithIdentifier:", v4);
      objc_setProperty_atomic(a1, v6, v5, 360);

    }
    objc_initWeak(&location, a1);
    v8 = objc_getProperty(a1, v7, 360, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100012F60;
    v14[3] = &unk_1000BD650;
    objc_copyWeak(&v15, &location);
    objc_msgSend(v8, "scheduleWithFireInterval:leewayInterval:queue:handler:", v9, v14, 60.0, 5.0);

    v12 = ne_log_obj(v10, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v18 = a1;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%@: started provider wake timer", buf, 0xCu);
    }

    objc_destroyWeak(&v15);
    objc_destroyWeak(&location);
  }
}

void sub_100012F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100012F60(uint64_t a1)
{
  id WeakRetained;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  SEL v5;
  id Property;
  void *v7;
  id self;
  uint8_t buf[4];
  id v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  self = WeakRetained;
  if (WeakRetained)
  {
    v3 = ne_log_obj(WeakRetained, v2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v10 = self;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%@: waking provider", buf, 0xCu);
    }

    Property = objc_getProperty(self, v5, 384, 1);
    if (Property)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "remotePluginObject"));
      objc_msgSend(v7, "sendTimerEvent");

    }
    sub_100012D54(self);
  }

}

void sub_10001304C(uint64_t a1, const char *a2)
{
  void *v3;
  uint64_t v4;

  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_setProperty_atomic(v3, a2, 0, 384);
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      if (*(_DWORD *)(v4 + 356))
        sub_1000114D8(v4, 1);
    }
  }
}

void sub_1000130A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && *(_DWORD *)(v2 + 356))
  {
    v4 = ne_log_obj(a1, a2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v8 = 138412290;
      v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%@: re-trying to start the provider", (uint8_t *)&v8, 0xCu);
    }

    sub_10001316C(*(_QWORD *)(a1 + 32), v7);
  }
}

void sub_10001316C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  objc_class *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  id v22;
  void *v23;
  void *v24;
  NSObject *v25;
  NEAppPushPlugin *v26;
  void *v27;
  NEAppPushPlugin *v28;
  SEL v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  _BYTE *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  int v43;
  const __CFString *v44;
  _BYTE buf[12];
  __int16 v46;
  void *v47;

  if (a1 && (*(_BYTE *)(a1 + 353) & 1) != 0)
  {
    v3 = ne_log_obj(a1, a2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v43 = *(_DWORD *)(a1 + 356);
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = a1;
      v46 = 1024;
      LODWORD(v47) = v43;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%@: startProvider (reference count [%d])", buf, 0x12u);
    }

    v6 = sub_100011618((id)a1, v5);
    if ((v6 & 1) == 0)
    {
      v8 = ne_log_obj(v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = a1;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%@ failed to set the scoping policy", buf, 0xCu);
      }

    }
    if (!objc_getProperty((id)a1, v7, 384, 1))
    {
      v11 = (objc_class *)objc_opt_class(NEAgent);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "configuration"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "appPush"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "pluginType"));

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "configuration"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "appPush"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "providerBundleIdentifier"));

      if (v17)
      {
        v21 = objc_claimAutoreleasedReturnValue(+[NELaunchServices pluginProxyWithIdentifier:type:pluginClass:extensionPoint:](NELaunchServices, "pluginProxyWithIdentifier:type:pluginClass:extensionPoint:", v17, v14, 7, 0));
        if (v21)
        {
          v22 = [v11 alloc];
          v44 = CFSTR("extension-identifier");
          *(_QWORD *)buf = v17;
          v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v44, 1));
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "uid"));
          v25 = objc_msgSend(v22, "initWithPluginType:pluginVersion:pluginClass:pluginInfo:userID:", v14, 1, 7, v23, v24);

          if (v25)
          {
            v26 = [NEAppPushPlugin alloc];
            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "queue"));
            v28 = -[NEPlugin initWithAgent:delegateQueue:andDelegate:](v26, "initWithAgent:delegateQueue:andDelegate:", v25, v27, a1);
            objc_setProperty_atomic((id)a1, v29, v28, 384);

          }
        }
        else
        {
          v31 = ne_log_obj(0, v20);
          v25 = objc_claimAutoreleasedReturnValue(v31);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = a1;
            v46 = 2112;
            v47 = v17;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "%@: Plugin %@ is not available in launch services", buf, 0x16u);
          }
        }

      }
      else
      {
        v30 = ne_log_obj(v18, v19);
        v21 = objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = a1;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%@: Failed to find the provider bundle identifier", buf, 0xCu);
        }
      }

    }
    if (objc_getProperty((id)a1, v10, 384, 1))
    {
      v33 = objc_getProperty((id)a1, v32, 384, 1);
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "configuration"));
      sub_100015D40(v33, v34);

      v37 = ne_log_obj(v35, v36);
      v38 = objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "configuration"));
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "appPush"));
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "providerBundleIdentifier"));
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = a1;
        v46 = 2112;
        v47 = v41;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "%@: starting app push provider [%@]", buf, 0x16u);

      }
    }
    else
    {
      v42 = ne_log_obj(0, v32);
      v38 = objc_claimAutoreleasedReturnValue(v42);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = a1;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "%@: failed to initilaize the plugin", buf, 0xCu);
      }
    }

  }
}

uint64_t sub_10001361C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001362C(uint64_t a1)
{

}

void sub_100013634(uint64_t a1, void *a2)
{
  id v3;
  xpc_object_t reply;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v14;
  const __CFString *v15;
  _UNKNOWN **v16;
  const __CFString *v17;
  void *v18;

  v3 = a2;
  reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  if (v3)
  {
    v17 = CFSTR("AppPushSendCallInfoErrorCode");
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v3, "code")));
    v18 = v5;
    v6 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1));
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

  }
  else
  {
    v15 = CFSTR("AppPushSendCallInfoErrorCode");
    v16 = &off_1000C1660;
    v9 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v5 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;
  }

  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v11)
  {
    v12 = (void *)_CFXPCCreateXPCObjectFromCFObject(v11);
    xpc_dictionary_set_value(reply, "SessionAppPushSendMessageResult", v12);

  }
  remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
  v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
  xpc_connection_send_message(v14, reply);

}

void sub_1000137A0(uint64_t a1)
{
  void *v2;
  const char *v3;
  id v4;
  id Property;
  const char *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  void *v19;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  v4 = objc_retainBlock(*(id *)(a1 + 48));
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v3, 392, 1);
  objc_msgSend(Property, "setObject:forKeyedSubscript:", v4, v2);

  v7 = *(id *)(a1 + 32);
  if (v7)
  {
    v7 = objc_getProperty(v7, v6, 384, 1);
    if (v7)
    {
      v8 = v7;
      v9 = *(void **)(a1 + 40);
      v10 = v2;
      v11 = v9;
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "remotePluginObject"));
      objc_msgSend(v12, "sendOutgoingCallMessage:andMessageID:", v11, v10);

    }
  }
  v13 = ne_log_obj(v7, v6);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    v15 = *(_QWORD *)(a1 + 32);
    v16 = 138412546;
    v17 = v15;
    v18 = 2112;
    v19 = v2;
    _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%@ added completion handler for message ID: [%@]", (uint8_t *)&v16, 0x16u);
  }

}

void sub_10001390C(void *a1, const char *a2)
{
  const char *v3;
  SEL v4;

  if (a1)
  {
    if (objc_getProperty(a1, a2, 368, 1))
    {
      objc_msgSend(objc_getProperty(a1, v3, 368, 1), "removeObserver:forKeyPath:", a1, CFSTR("status"));
      objc_setProperty_atomic(a1, v4, 0, 368);
    }
  }
}

void sub_100013978(void *a1, const char *a2)
{
  const char *v3;
  id Property;
  const char *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  SEL v9;
  SEL v10;

  if (a1 && objc_getProperty(a1, a2, 376, 1))
  {
    Property = objc_getProperty(a1, v3, 376, 1);
    if (Property)
    {
      v6 = Property;
      objc_msgSend(*((id *)Property + 3), "setDelegate:", 0);
      v7 = (void *)v6[3];
      v6[3] = 0;

      v8 = (void *)v6[4];
      v6[4] = 0;

      objc_setProperty_atomic(v6, v9, 0, 8);
      objc_setProperty_atomic(v6, v10, 0, 16);
    }
    objc_setProperty_atomic(a1, v5, 0, 376);
  }
}

void sub_100013A2C(uint64_t a1, const char *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  SEL v17;
  SEL v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  id v25;
  uint8_t buf[4];
  uint64_t v27;

  if (a1 && !objc_getProperty((id)a1, a2, 368, 1))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "configuration"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "appPush"));
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "matchSSIDs"));
    if (v5)
    {
      v6 = (void *)v5;
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "configuration"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "appPush"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "matchSSIDs"));
      v10 = objc_msgSend(v9, "count");

      if (v10)
      {
        v25 = objc_alloc_init((Class)NWNetworkDescription);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "configuration"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "appPush"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "matchSSIDs"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v13));
        objc_msgSend(v25, "setSsidOptions:", v14);

        v15 = objc_alloc_init((Class)NWParameters);
        objc_msgSend(v15, "setRequiredInterfaceType:", 1);
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NWMonitor monitorWithNetworkDescription:endpoint:parameters:](NWMonitor, "monitorWithNetworkDescription:endpoint:parameters:", v25, 0, v15));
        objc_setProperty_atomic((id)a1, v17, v16, 368);

        objc_msgSend(objc_getProperty((id)a1, v18, 368, 1), "addObserver:forKeyPath:options:context:", a1, CFSTR("status"), 5, 0);
        return;
      }
    }
    else
    {

    }
    if (*(_QWORD *)(a1 + 400) == 1)
    {
      --*(_DWORD *)(a1 + 356);
      sub_100012000(a1);
      sub_100011B08(a1, v19);
      v21 = sub_100011618((id)a1, v20);
      if ((v21 & 1) == 0)
      {
        v23 = ne_log_obj(v21, v22);
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v27 = a1;
          _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%@ failed to set the scoping policy", buf, 0xCu);
        }

      }
    }
  }
}

void sub_100013CF4(_QWORD *a1, const char *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NEPrivateLTEMonitor *v10;
  void *v11;
  void *v12;
  id v13;
  CoreTelephonyClient *v14;
  CoreTelephonyClient *coreTelephonyClient;
  SEL v16;
  SEL v17;
  CoreTelephonyClient *v18;
  CoreTelephonyClient *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  CoreTelephonyClient *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  const char *v28;
  NSObject *Property;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  NSObject *v33;
  SEL v34;
  SEL v35;
  id v36;
  const char *v37;
  id v38;
  void *v39;
  void *v40;
  objc_super v41;
  id v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  void (*v47)(uint64_t);
  id v48;
  id v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  void (*v54)(uint64_t);
  id v55;
  _BYTE block[24];
  void *v57;
  NEPrivateLTEMonitor *v58;
  uint64_t *v59;
  uint64_t *v60;

  if (!a1 || objc_getProperty(a1, a2, 376, 1))
    return;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "appPush"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "matchPrivateLTENetworks"));
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "appPush"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "matchPrivateLTENetworks"));
    v9 = objc_msgSend(v8, "count");

    if (v9)
    {
      v10 = [NEPrivateLTEMonitor alloc];
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "appPush"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "matchPrivateLTENetworks"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
      v38 = v11;
      v13 = v12;
      if (v10)
      {
        v41.receiver = v10;
        v41.super_class = (Class)NEPrivateLTEMonitor;
        v10 = (NEPrivateLTEMonitor *)objc_msgSendSuper2(&v41, "init");
        if (v10)
        {
          v14 = (CoreTelephonyClient *)objc_msgSend(objc_alloc((Class)CoreTelephonyClient), "initWithQueue:", v13);
          coreTelephonyClient = v10->_coreTelephonyClient;
          v10->_coreTelephonyClient = v14;

          objc_storeStrong((id *)&v10->_privateLTENetworks, v11);
          -[CoreTelephonyClient setDelegate:](v10->_coreTelephonyClient, "setDelegate:", v10);
          objc_setProperty_atomic(v10, v16, v13, 40);
          objc_setProperty_atomic(v10, v17, 0, 16);
          v10->_activeSlotID = 0;
          v50 = 0;
          v51 = &v50;
          v52 = 0x3032000000;
          v53 = sub_10008E478;
          v54 = sub_10008E488;
          v18 = v10->_coreTelephonyClient;
          v49 = 0;
          v19 = v18;
          v20 = (void *)objc_claimAutoreleasedReturnValue(-[CoreTelephonyClient getCurrentDataSubscriptionContextSync:](v19, "getCurrentDataSubscriptionContextSync:", &v49));
          v21 = v49;

          v55 = v20;
          if (!v51[5] || v21)
          {
            if (v21)
            {
              v30 = ne_log_obj(v22, v23);
              v31 = objc_claimAutoreleasedReturnValue(v30);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)block = 138412546;
                *(_QWORD *)&block[4] = v10;
                *(_WORD *)&block[12] = 2112;
                *(_QWORD *)&block[14] = v21;
                _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%@ failed to get current data subscription context, error: %@", block, 0x16u);
              }

            }
          }
          else
          {
            v43 = 0;
            v44 = &v43;
            v45 = 0x3032000000;
            v46 = sub_10008E478;
            v47 = sub_10008E488;
            v24 = v10->_coreTelephonyClient;
            v25 = v51[5];
            v42 = 0;
            v26 = (void *)objc_claimAutoreleasedReturnValue(-[CoreTelephonyClient getConnectionState:connectionType:error:](v24, "getConnectionState:connectionType:error:", v25, 0, &v42));
            v21 = v42;
            v48 = v26;

            if (!v44[5] || v21)
            {
              if (v21)
              {
                v32 = ne_log_obj(v27, v28);
                v33 = objc_claimAutoreleasedReturnValue(v32);
                if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)block = 138412546;
                  *(_QWORD *)&block[4] = v10;
                  *(_WORD *)&block[12] = 2112;
                  *(_QWORD *)&block[14] = v21;
                  _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%@ failed to get current data connection status, error: %@", block, 0x16u);
                }

              }
            }
            else
            {
              Property = objc_getProperty(v10, v28, 40, 1);
              *(_QWORD *)block = _NSConcreteStackBlock;
              *(_QWORD *)&block[8] = 3221225472;
              *(_QWORD *)&block[16] = sub_10008E490;
              v57 = &unk_1000BEA70;
              v58 = v10;
              v59 = &v50;
              v60 = &v43;
              dispatch_async(Property, block);
            }
            _Block_object_dispose(&v43, 8);

          }
          _Block_object_dispose(&v50, 8);

        }
      }

      objc_setProperty_atomic(a1, v34, v10, 376);
      v36 = objc_getProperty(a1, v35, 376, 1);
      if (v36)
        objc_setProperty_atomic(v36, v37, a1, 8);
      return;
    }
  }
  else
  {

  }
  if (a1[51] == 1)
    objc_msgSend(a1, "didReceiveStatusChangeWithInterface:", 2);
}

void sub_100014204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100014240(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  unint64_t v5;
  const char *v6;
  const __CFString *v7;
  unint64_t v8;
  const __CFString *v9;
  int v10;
  SEL v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  _BYTE v27[24];
  const __CFString *v28;
  uint64_t v29;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = ne_log_obj(a1, a2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(v2 + 400);
      objc_opt_self(NESMAppPushSession);
      if (v5 > 2)
        v7 = CFSTR("unknown");
      else
        v7 = off_1000BD6C0[v5];
      v8 = (unint64_t)objc_msgSend(objc_getProperty((id)v2, v6, 368, 1), "status");
      objc_opt_self(NESMAppPushSession);
      if (v8 > 2)
        v9 = CFSTR("unknown");
      else
        v9 = off_1000BD6C0[v8];
      v10 = *(_DWORD *)(v2 + 356);
      *(_DWORD *)v27 = 138413058;
      *(_QWORD *)&v27[4] = v2;
      *(_WORD *)&v27[12] = 2112;
      *(_QWORD *)&v27[14] = v7;
      *(_WORD *)&v27[22] = 2112;
      v28 = v9;
      LOWORD(v29) = 1024;
      *(_DWORD *)((char *)&v29 + 2) = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@ Wi-Fi SSID match status changed from '%@' to '%@' [ref count:%u]", v27, 0x26u);
    }

    v12 = objc_msgSend(objc_getProperty((id)v2, v11, 368, 1), "status");
    if (v12 == (id)2)
    {
      if (*(_QWORD *)(v2 + 400) == 1)
      {
        --*(_DWORD *)(v2 + 356);
        sub_100012000(v2);
        sub_100011B08(v2, v20);
        v22 = sub_100011618((id)v2, v21);
        if ((v22 & 1) == 0)
        {
          v24 = ne_log_obj(v22, v23);
          v25 = objc_claimAutoreleasedReturnValue(v24);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v27 = 138412290;
            *(_QWORD *)&v27[4] = v2;
            _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%@ failed to set the scoping policy", v27, 0xCu);
          }

        }
      }
    }
    else if (v12 == (id)1 && *(_QWORD *)(v2 + 400) != 1)
    {
      ++*(_DWORD *)(v2 + 356);
      *(_QWORD *)(v2 + 400) = 1;
      v13 = sub_1000806F8((uint64_t)NEWiFiManager);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      v15 = (void *)v14;
      if (v14)
      {
        *(_QWORD *)v27 = _NSConcreteStackBlock;
        *(_QWORD *)&v27[8] = 3221225472;
        *(_QWORD *)&v27[16] = sub_100080764;
        v28 = (const __CFString *)&unk_1000BEB80;
        v29 = v14;
        dispatch_async((dispatch_queue_t)&_dispatch_main_q, v27);
      }

      v18 = ne_log_obj(v16, v17);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        v26 = *(_DWORD *)(v2 + 356);
        *(_DWORD *)v27 = 138412546;
        *(_QWORD *)&v27[4] = v2;
        *(_WORD *)&v27[12] = 1024;
        *(_DWORD *)&v27[14] = v26;
        _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "%@ requesting install for Wi-Fi match [ref count:%u]", v27, 0x12u);
      }

      sub_1000114D8(v2, 0);
    }
  }
}

void sub_100014564(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && *(_DWORD *)(v2 + 356) && (*(_BYTE *)(v2 + 353) & 1) == 0)
  {
    v4 = ne_log_obj(a1, a2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = 138412290;
      v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%@: requesting install", (uint8_t *)&v7, 0xCu);
    }

    sub_1000114D8(*(_QWORD *)(a1 + 32), 1);
  }
}

void sub_10001463C(uint64_t a1, const char *a2)
{
  const char *v3;

  sub_100013A2C(*(_QWORD *)(a1 + 32), a2);
  sub_100013CF4(*(_QWORD **)(a1 + 32), v3);
}

void sub_100014CD4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id *v5;
  _QWORD v6[4];
  id v7;
  _QWORD v8[4];
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100014DCC;
    v8[3] = &unk_1000BD7D0;
    v5 = &v9;
    v9 = *(id *)(a1 + 48);
    objc_msgSend(v2, "plugin:didSetConfiguration:completionHandler:", v3, v4, v8);
  }
  else
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100014DD8;
    v6[3] = &unk_1000BD7D0;
    v5 = &v7;
    v7 = *(id *)(a1 + 48);
    objc_msgSend(v2, "pluginDidClearConfiguration:completionHandler:", v3, v6);
  }

}

uint64_t sub_100014DCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100014DD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100014DE4(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  id v5;

  v2 = *(_DWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = *(_DWORD *)(v3 + 64);
  else
    v4 = 0;
  if (v2 != v4)
  {
    *(_DWORD *)(v3 + 64) = v2;
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v5, "plugin:didSetStatus:andDisconnectError:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));

  }
}

void sub_100014E68(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "pluginDidDetachIPC:", *(_QWORD *)(a1 + 32));

}

void sub_100014EA8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100014F40;
  v5[3] = &unk_1000BD7A8;
  v6 = *(id *)(a1 + 48);
  objc_msgSend(v2, "plugin:didRequestVirtualInterfaceWithParameters:completionHandler:", v3, v4, v5);

}

void sub_100014F40(uint64_t a1, id a2)
{
  id v3;

  if (a2)
    a2 = objc_msgSend(objc_alloc((Class)NEVirtualInterfaceParameters), "initWithVirtualInterface:", a2);
  v3 = a2;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100015058(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v4 = v2;
  if (v2)
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pluginDidRequestFlowDivertControlSocket:", *(_QWORD *)(a1 + 32)));
  else
    v3 = 0;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000154D4(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "plugin:didApplySettings:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100015530(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "pluginDidRequestAgentClientServer:", *(_QWORD *)(a1 + 32));

}

void sub_100015570(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  id v9;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = *(_QWORD *)(v3 + 64);
  else
    v4 = 0;
  if (v2 != v4)
  {
    *(_QWORD *)(v3 + 64) = v2;
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    v5 = *(void **)(a1 + 40);
    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "domain"));
      v7 = objc_msgSend(v6, "isEqualToString:", NEFilterErrorDomain);

      if (v7)
        v8 = (uint64_t)objc_msgSend(*(id *)(a1 + 40), "code");
      else
        v8 = 1;
    }
    else
    {
      v8 = 0;
    }
    objc_msgSend(v9, "plugin:didSetStatus:andError:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), v8);

  }
}

void sub_100015650(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "pluginDidRequestPacketFilterChannel:", *(_QWORD *)(a1 + 32)));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000156AC(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "pluginDidRequestContentFilterSocket:", *(_QWORD *)(a1 + 32)));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100015B04(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "handleProviderInstallationStatus:status:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_100015B44(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "handleProviderStopped:", *(_QWORD *)(a1 + 32));

}

void sub_100015B84(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "didExtensionExit:", *(_QWORD *)(a1 + 32));

}

void sub_100015BC4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "plugin:didReceivePushToTalkMessageWithUserInfo:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_100015C04(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "plugin:didReceiveIncomingCallWithUserInfo:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_100015C44(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "plugin:didReceiveProviderError:forMessageID:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_100015C88(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "plugin:didReceiveProviderError:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

_BYTE *sub_100015CC8(uint64_t a1)
{
  void *v2;
  void *v3;
  _BYTE *result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pluginConnection"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pluginConnection"));
    objc_msgSend(v3, "invalidate");

    objc_msgSend(*(id *)(a1 + 32), "setPluginConnection:", 0);
  }
  result = *(_BYTE **)(a1 + 32);
  if (result)
  {
    if ((result[16] & 1) != 0)
      return objc_msgSend(result, "handlePluginFailedWithError:", 0);
  }
  return result;
}

BOOL sub_100015D40(_BYTE *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  SEL v9;
  id v10;
  NSObject *v11;
  _QWORD v13[5];
  id v14;
  id v15;
  _QWORD block[5];
  id v17;
  id location;
  uint8_t buf[4];
  _BYTE *v20;

  v3 = a2;
  if (a1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "delegate"));
    objc_initWeak(&location, v4);

    if ((a1[16] & 1) != 0)
    {
      if ((int)objc_msgSend(a1, "extension_pid") >= 1)
      {
        v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "delegateQueue"));
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100015F68;
        block[3] = &unk_1000BE610;
        block[4] = a1;
        objc_copyWeak(&v17, &location);
        dispatch_async(v11, block);

        objc_destroyWeak(&v17);
      }
    }
    else
    {
      v7 = ne_log_obj(v5, v6);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v20 = a1;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@: Sending start command", buf, 0xCu);
      }

      v10 = objc_getProperty(a1, v9, 24, 1);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_100016080;
      v13[3] = &unk_1000BD730;
      objc_copyWeak(&v15, &location);
      v13[4] = a1;
      v14 = v3;
      objc_msgSend(v10, "startWithCompletionHandler:", v13);

      objc_destroyWeak(&v15);
    }
    objc_destroyWeak(&location);
  }

  return a1 != 0;
}

void sub_100015F38(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_100015F68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  id WeakRetained;
  void *v7;
  const char *v8;
  id v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  unsigned int v14;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(void **)(a1 + 32);
    v11 = 138412546;
    v12 = v5;
    v13 = 1024;
    v14 = objc_msgSend(v5, "extension_pid");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: startWithConfiguration already has a non-zero PID (%d), calling didStartWithPid", (uint8_t *)&v11, 0x12u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = *(void **)(a1 + 32);
  v9 = sub_100016BDC(v7, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  objc_msgSend(WeakRetained, "plugin:didInitializeWithUUIDs:", v7, v10);

  objc_msgSend(WeakRetained, "plugin:didStartWithPID:error:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "extension_pid"), 0);
}

void sub_100016080(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  const char *v8;
  void *v9;
  uint64_t v10;
  id Property;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  id v15;
  _QWORD *v16;
  unint64_t v17;
  id v18;
  SEL v19;
  _QWORD *v20;
  void *v21;
  id v22;
  SEL v23;
  _QWORD *v24;
  const char *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  _BYTE *v37;
  id v38;
  void *v39;
  void *v40;
  uint64_t v41;
  NSSet *v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  const char *v53;
  _QWORD *v54;
  void *v55;
  id v56;
  SEL v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  objc_class *v63;
  NSString *v64;
  void *v65;
  NSString *v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  _QWORD v71[5];
  id v72;
  _QWORD v73[5];
  id v74;
  id location;
  _BYTE buf[24];
  void *v77;
  id v78[2];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v9 = WeakRetained;
  v10 = *(_QWORD *)(a1 + 32);
  if (!v5 && v6)
  {
    if (v10)
      Property = objc_getProperty(*(id *)(a1 + 32), v8, 24, 1);
    else
      Property = 0;
    v12 = objc_msgSend(Property, "isLocal");
    v13 = *(_QWORD *)(a1 + 32);
    v70 = v9;
    if (v12)
    {
      v15 = v6;
      if (v13 && (v16 = objc_getProperty((id)v13, v14, 24, 1)) != 0 && (v17 = v16[7] - 2, v17 <= 5))
      {
        v18 = objc_alloc((Class)objc_opt_class(*off_1000BD818[v17]));
        v20 = objc_getProperty((id)v13, v19, 24, 1);
        if (v20)
          v21 = (void *)v20[6];
        else
          v21 = 0;
        v22 = v21;
        v24 = objc_getProperty((id)v13, v23, 24, 1);
        if (v24)
          v26 = v24[7];
        else
          v26 = 0;
        v27 = objc_getProperty((id)v13, v25, 24, 1);
        v68 = v15;
        if (v27)
          v28 = (void *)v27[9];
        else
          v28 = 0;
        v29 = v28;
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "firstObject"));
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v13, "delegateQueue"));
        v32 = objc_msgSend(v18, "initWithPluginType:pluginClass:pluginEndpoint:pluginProcessIdentity:queue:factory:", v22, v26, v68, v30, v31, v13);

        if (v32)
        {
          v35 = objc_msgSend((id)objc_opt_class(v32), "conformsToProtocol:", &OBJC_PROTOCOL___NEPluginDriver);
          if ((v35 & 1) != 0)
          {
            objc_storeStrong((id *)(v13 + 8), v32);

LABEL_23:
            v45 = *(void **)(a1 + 32);
            v73[0] = _NSConcreteStackBlock;
            v73[1] = 3221225472;
            v73[2] = sub_1000166E4;
            v73[3] = &unk_1000BD6E0;
            v73[4] = v45;
            v46 = v70;
            v74 = v46;
            v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "remotePluginObjectWithErrorHandler:", v73));
            v48 = *(_QWORD *)(a1 + 40);
            v71[0] = _NSConcreteStackBlock;
            v71[1] = 3221225472;
            v71[2] = sub_1000167BC;
            v71[3] = &unk_1000BD708;
            v71[4] = *(_QWORD *)(a1 + 32);
            v72 = v46;
            objc_msgSend(v47, "startWithConfiguration:completionHandler:", v48, v71);

LABEL_37:
            v9 = v70;
            goto LABEL_38;
          }
          v60 = ne_log_obj(v35, v36);
          v52 = objc_claimAutoreleasedReturnValue(v60);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            v63 = (objc_class *)objc_opt_class(v32);
            v64 = NSStringFromClass(v63);
            v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
            v66 = NSStringFromProtocol((Protocol *)&OBJC_PROTOCOL___NEPluginDriver);
            v67 = (void *)objc_claimAutoreleasedReturnValue(v66);
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = v65;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v67;
            _os_log_error_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "Driver class (%@) does not conform to protocol %@", buf, 0x16u);

          }
        }
        else
        {
          v51 = ne_log_obj(v33, v34);
          v52 = objc_claimAutoreleasedReturnValue(v51);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            v54 = objc_getProperty((id)v13, v53, 24, 1);
            if (v54)
              v55 = (void *)v54[6];
            else
              v55 = 0;
            v56 = v55;
            v58 = objc_getProperty((id)v13, v57, 24, 1);
            if (v58)
              v59 = v58[7];
            else
              v59 = 0;
            *(_DWORD *)buf = 138412802;
            *(_QWORD *)&buf[4] = v56;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v59;
            *(_WORD *)&buf[22] = 2048;
            v77 = v68;
            _os_log_error_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "Failed to create a plugin driver, type = %@, class = %ld, endpoint = %p", buf, 0x20u);

          }
        }

      }
      else
      {

      }
    }
    else
    {
      v69 = v6;
      if (v13)
      {
        objc_initWeak(&location, (id)v13);
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = sub_100016C10;
        v77 = &unk_1000BDA08;
        objc_copyWeak(v78, &location);
        v37 = objc_retainBlock(buf);
        v38 = objc_msgSend(objc_alloc((Class)NSXPCConnection), "initWithListenerEndpoint:", v69);
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v13, "managerInterface"));
        if (v39)
        {
          objc_msgSend(v38, "setExportedInterface:", v39);
          objc_msgSend(v38, "setExportedObject:", v13);
        }
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v13, "remotePluginInterface"));
        v41 = objc_opt_class(NSArray);
        v42 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v41, objc_opt_class(NEProcessIdentity), 0);
        v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
        objc_msgSend(v40, "setClasses:forSelector:argumentIndex:ofReply:", v43, "startWithConfiguration:completionHandler:", 1, 1);
        objc_msgSend(v38, "setRemoteObjectInterface:", v40);
        objc_msgSend(v38, "setInterruptionHandler:", v37);
        objc_msgSend(v38, "setInvalidationHandler:", v37);
        objc_msgSend(v38, "resume");
        v44 = *(void **)(v13 + 48);
        *(_QWORD *)(v13 + 48) = v38;

        objc_destroyWeak(v78);
        objc_destroyWeak(&location);

        goto LABEL_23;
      }

    }
    v61 = ne_log_obj(v49, v50);
    v62 = objc_claimAutoreleasedReturnValue(v61);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "Failed to create the plugin driver", buf, 2u);
    }

    objc_msgSend(v70, "plugin:didStartWithPID:error:", *(_QWORD *)(a1 + 32), 0, 0);
    goto LABEL_37;
  }
  objc_msgSend(WeakRetained, "plugin:didStartWithPID:error:", v10, 0, v5);
LABEL_38:

}

void sub_1000166B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a26);
  _Unwind_Resume(a1);
}

void sub_1000166E4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  id v11;

  v3 = a2;
  v5 = ne_log_obj(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = 138412546;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%@: Got an XPC connection error while starting the plugin: %@", (uint8_t *)&v8, 0x16u);
  }

  objc_msgSend(*(id *)(a1 + 40), "plugin:didStartWithPID:error:", *(_QWORD *)(a1 + 32), 0, v3);
}

void sub_1000167BC(uint64_t a1, char a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  char v14;

  v5 = a3;
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegateQueue"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100016870;
  v10[3] = &unk_1000BEBA8;
  v14 = a2;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(a1 + 40);
  v11 = v5;
  v12 = v7;
  v13 = v8;
  v9 = v5;
  dispatch_async(v6, v10);

}

void sub_100016870(uint64_t a1)
{
  int v2;
  const char *v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  const char *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  const char *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  void *i;
  void *v23;
  void *v24;
  void *v25;
  const char *v26;
  void *v27;
  id v28;
  id v29;
  const char *v30;
  void *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  id Property;
  void *v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD block[5];
  id v45;
  _BYTE v46[128];

  v2 = *(unsigned __int8 *)(a1 + 56);
  if (objc_msgSend(*(id *)(a1 + 32), "count")
    && ((v4 = *(void **)(a1 + 40)) == 0 || (v5 = objc_getProperty(v4, v3, 24, 1)) == 0
      ? (v6 = 0)
      : (v6 = (void *)v5[9]),
        v7 = v6,
        v7,
        !v7))
  {
    v38 = *(void **)(a1 + 32);
    Property = *(id *)(a1 + 40);
    if (Property)
      Property = objc_getProperty(Property, v3, 24, 1);
    sub_10007FDF4((uint64_t)Property, v38);
    if (!v2)
      goto LABEL_26;
  }
  else if (!v2)
  {
LABEL_26:
    objc_msgSend(*(id *)(a1 + 48), "plugin:didStartWithPID:error:", *(_QWORD *)(a1 + 40), 0, 0);
    return;
  }
  v8 = sub_100016BA8(*(id *)(a1 + 40), v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = objc_msgSend(v9, "count");

  if (!v10)
    goto LABEL_26;
  v12 = sub_100016BA8(*(id *)(a1 + 40), v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "firstObject"));
  objc_msgSend(*(id *)(a1 + 40), "setExtension_pid:", objc_msgSend(v14, "pid"));

  v15 = objc_alloc_init((Class)NSMutableArray);
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v17 = sub_100016BA8(*(id *)(a1 + 40), v16);
  v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v40, v46, 16);
  if (v19)
  {
    v20 = v19;
    v21 = *(_QWORD *)v41;
    do
    {
      for (i = 0; i != v20; i = (char *)i + 1)
      {
        if (*(_QWORD *)v41 != v21)
          objc_enumerationMutation(v18);
        v23 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i);
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "uuid", (_QWORD)v40));

        if (v24)
        {
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "uuid"));
          objc_msgSend(v15, "addObject:", v25);

        }
      }
      v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v40, v46, 16);
    }
    while (v20);
  }

  if (objc_msgSend(v15, "count"))
  {
    v27 = *(void **)(a1 + 40);
    if (v27)
    {
      v28 = objc_getProperty(v27, v26, 24, 1);
      v29 = v15;
      if (v28)
      {
        v31 = v29;
        v32 = objc_getProperty(v28, v30, 24, 1);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100080494;
        block[3] = &unk_1000BEB58;
        block[4] = v28;
        v45 = v31;
        dispatch_sync(v32, block);

      }
    }
    else
    {
      v39 = v15;
    }

  }
  v34 = *(void **)(a1 + 40);
  v33 = *(void **)(a1 + 48);
  v35 = sub_100016BDC(v34, v26);
  v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
  objc_msgSend(v33, "plugin:didInitializeWithUUIDs:", v34, v36);

  objc_msgSend(*(id *)(a1 + 48), "plugin:didStartWithPID:error:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "extension_pid"), 0);
  objc_msgSend(*(id *)(a1 + 40), "setStarted:", 1);

}

id sub_100016BA8(id a1, const char *a2)
{
  _QWORD *Property;
  void *v3;

  if (a1)
  {
    Property = objc_getProperty(a1, a2, 24, 1);
    if (Property)
      v3 = (void *)Property[9];
    else
      v3 = 0;
    a1 = v3;
  }
  return a1;
}

id sub_100016BDC(id a1, const char *a2)
{
  _QWORD *Property;
  void *v3;

  if (a1)
  {
    Property = objc_getProperty(a1, a2, 24, 1);
    if (Property)
      v3 = (void *)Property[8];
    else
      v3 = 0;
    a1 = v3;
  }
  return a1;
}

void sub_100016C10(uint64_t a1)
{
  id WeakRetained;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  __int128 v7;
  _BYTE *(*v8)(uint64_t);
  void *v9;
  void *v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = ne_log_obj(WeakRetained, v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v7) = 138412290;
      *(_QWORD *)((char *)&v7 + 4) = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@: Tearing down plugin connection", (uint8_t *)&v7, 0xCu);
    }

    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "delegateQueue"));
    *(_QWORD *)&v7 = _NSConcreteStackBlock;
    *((_QWORD *)&v7 + 1) = 3221225472;
    v8 = sub_100015CC8;
    v9 = &unk_1000BEB80;
    v10 = v3;
    dispatch_async(v6, &v7);

  }
}

void sub_100016D0C(_BYTE *self, const char *a2)
{
  void *v3;
  id v4;
  id Property;
  const char *v6;
  _QWORD *v7;
  NSObject *v8;
  _QWORD v9[5];
  _QWORD v10[5];
  _QWORD block[5];
  _QWORD *v12;

  if (self)
  {
    self[16] = 0;
    v3 = (void *)*((_QWORD *)self + 1);
    if (v3)
    {
      v4 = v3;
      if ((objc_msgSend(v4, "conformsToProtocol:", &OBJC_PROTOCOL___NEAgentSessionDelegate) & 1) != 0)
      {
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        v10[2] = sub_100016E58;
        v10[3] = &unk_1000BEB80;
        v10[4] = self;
        objc_msgSend(v4, "handleDisposeWithCompletionHandler:", v10);

        return;
      }

    }
    Property = objc_getProperty(self, a2, 24, 1);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100016ECC;
    v9[3] = &unk_1000BEA00;
    v9[4] = self;
    v7 = v9;
    if (Property)
    {
      v8 = objc_getProperty(Property, v6, 24, 1);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10007FF0C;
      block[3] = &unk_1000BECD0;
      block[4] = Property;
      v12 = v7;
      dispatch_sync(v8, block);

    }
  }
}

void sub_100016E58(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegateQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000171AC;
  block[3] = &unk_1000BEB80;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v2, block);

}

void sub_100016ECC(uint64_t a1)
{
  void *v2;
  const char *v3;
  void *v4;
  void *v5;
  _QWORD *Property;
  uint64_t v7;
  BOOL v8;
  id v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  dispatch_source_t v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  _QWORD handler[4];
  dispatch_source_t v20;
  uint64_t v21;
  int v22;
  uint8_t buf[4];
  int v24;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pluginConnection"));

  if (v2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pluginConnection"));
    objc_msgSend(v4, "invalidate");

    objc_msgSend(*(id *)(a1 + 32), "setPluginConnection:", 0);
  }
  v5 = *(void **)(a1 + 32);
  if (v5
    && (Property = objc_getProperty(v5, v3, 24, 1)) != 0
    && Property[5] == 1
    && ((v7 = Property[7], v7 != 5) ? (v8 = v7 == 2) : (v8 = 1),
        v8 && objc_msgSend(*(id *)(a1 + 32), "extension_pid")))
  {
    v9 = objc_msgSend(*(id *)(a1 + 32), "extension_pid");
    v10 = (int)v9;
    v12 = ne_log_obj(v9, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Killing extension, pid %d", buf, 8u);
    }

    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegateQueue"));
    v15 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_proc, v10, 0x80000000uLL, v14);

    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1000170E4;
    handler[3] = &unk_1000BED20;
    v22 = v10;
    v16 = *(_QWORD *)(a1 + 32);
    v20 = v15;
    v21 = v16;
    v17 = v15;
    dispatch_source_set_event_handler(v17, handler);
    dispatch_resume(v17);
    kill((pid_t)objc_msgSend(*(id *)(a1 + 32), "extension_pid"), 9);

  }
  else
  {
    v18 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v18, "pluginDidDispose:", *(_QWORD *)(a1 + 32));

  }
}

void sub_1000170E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  void *v7;
  _DWORD v8[2];

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  v4 = ne_log_obj(v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(a1 + 48);
    v8[0] = 67109120;
    v8[1] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Process %d exited", (uint8_t *)v8, 8u);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "delegate"));
  objc_msgSend(v7, "pluginDidDispose:", *(_QWORD *)(a1 + 40));

}

void sub_1000171AC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "pluginDidDispose:", *(_QWORD *)(a1 + 32));

}

void sub_1000171EC(void *a1, void *a2)
{
  id v3;
  id v4;

  if (a1)
  {
    v3 = a2;
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "remotePluginObject"));
    objc_msgSend(v4, "updateConfiguration:", v3);

  }
}

void sub_100017240(void *a1)
{
  void *v2;
  _QWORD v3[5];
  _QWORD v4[5];

  if (a1)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1000172E4;
    v4[3] = &unk_1000BEA00;
    v4[4] = a1;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "remotePluginObjectWithErrorHandler:", v4));
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100017380;
    v3[3] = &unk_1000BEB80;
    v3[4] = a1;
    objc_msgSend(v2, "sleepWithCompletionHandler:", v3);

  }
}

void sub_1000172E4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegateQueue"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100017434;
  v6[3] = &unk_1000BEB58;
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v5 = v3;
  dispatch_async(v4, v6);

}

void sub_100017380(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegateQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000173F4;
  block[3] = &unk_1000BEB80;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v2, block);

}

void sub_1000173F4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "pluginDidAcknowledgeSleep:", *(_QWORD *)(a1 + 32));

}

void sub_100017434(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 138412546;
    v9 = v6;
    v10 = 2112;
    v11 = v7;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@: Got an XPC error while sending sleep event: %@", (uint8_t *)&v8, 0x16u);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v5, "pluginDidAcknowledgeSleep:", *(_QWORD *)(a1 + 32));

}

void sub_100017504(void *a1)
{
  id v1;

  if (a1)
  {
    v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "remotePluginObject"));
    objc_msgSend(v1, "wakeup");

  }
}

void sub_100017538(void *a1, const char *a2)
{
  id Property;
  const char *v3;

  if (a1)
  {
    Property = objc_getProperty(a1, a2, 24, 1);
    sub_10007FE88(Property, v3);
  }
}

unsigned int *sub_10001755C(unsigned int *result)
{
  unsigned int *v1;
  const char *v2;

  if (result)
  {
    v1 = result;
    if (objc_msgSend(result, "extension_pid"))
    {
      return (unsigned int *)objc_msgSend(v1, "extension_pid");
    }
    else
    {
      result = (unsigned int *)objc_getProperty(v1, v2, 24, 1);
      if (result)
        return (unsigned int *)result[4];
    }
  }
  return result;
}

void sub_1000175AC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegateQueue"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100017734;
  v6[3] = &unk_1000BEB58;
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v5 = v3;
  dispatch_async(v4, v6);

}

void sub_100017648(uint64_t a1, void *a2, int a3)
{
  id v5;
  NSObject *v6;
  id v7;
  _QWORD block[5];
  id v9;
  int v10;

  v5 = a2;
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegateQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000176EC;
  block[3] = &unk_1000BED20;
  block[4] = *(_QWORD *)(a1 + 32);
  v9 = v5;
  v10 = a3;
  v7 = v5;
  dispatch_async(v6, block);

}

void sub_1000176EC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "plugin:didFinishAuthenticationWithResults:status:andError:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), 0);

}

void sub_100017734(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 138412546;
    v9 = v6;
    v10 = 2112;
    v11 = v7;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@: Got an error on the XPC connection while authenticating: %@", (uint8_t *)&v8, 0x16u);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v5, "plugin:didFinishAuthenticationWithResults:status:andError:", *(_QWORD *)(a1 + 32), 0, 0, *(_QWORD *)(a1 + 40));

}

void sub_10001780C(void *a1)
{
  void *v2;
  _QWORD v3[5];
  _QWORD v4[5];

  if (a1)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1000178B0;
    v4[3] = &unk_1000BEA00;
    v4[4] = a1;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "remotePluginObjectWithErrorHandler:", v4));
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10001794C;
    v3[3] = &unk_1000BD780;
    v3[4] = a1;
    objc_msgSend(v2, "attachIPCWithCompletionHandler:", v3);

  }
}

void sub_1000178B0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegateQueue"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100017A44;
  v6[3] = &unk_1000BEB58;
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v5 = v3;
  dispatch_async(v4, v6);

}

void sub_10001794C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegateQueue"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000179E8;
  v6[3] = &unk_1000BEB58;
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v5 = v3;
  dispatch_async(v4, v6);

}

void sub_1000179E8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_endpoint"));
  objc_msgSend(v4, "plugin:didAttachIPCWithEndpoint:", v2, v3);

}

void sub_100017A44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 138412546;
    v9 = v6;
    v10 = 2112;
    v11 = v7;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@: Got an XPC connection error while attaching IPC: %@", (uint8_t *)&v8, 0x16u);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v5, "plugin:didAttachIPCWithEndpoint:", *(_QWORD *)(a1 + 32), 0);

}

void sub_100017B18(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  id v10;

  v3 = a2;
  v4 = ne_log_obj();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412546;
    v8 = v6;
    v9 = 2112;
    v10 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%@: Got an XPC connection error while setting the App UUID map: %@", (uint8_t *)&v7, 0x16u);
  }

}

void sub_100017BE0(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  id v6;

  if (a1)
  {
    if (a2)
    {
      v3 = a2;
      v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "remotePluginObject"));
      v4 = objc_retainAutorelease(v3);
      v5 = (const char *)objc_msgSend(v4, "UTF8String");

      objc_msgSend(v6, "setDelegateInterface:", if_nametoindex(v5));
    }
  }
}

void sub_100017C58(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegateQueue"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100017DD4;
  v6[3] = &unk_1000BEB58;
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v5 = v3;
  dispatch_async(v4, v6);

}

void sub_100017CF4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegateQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100017DC0;
  block[3] = &unk_1000BECA8;
  v8 = *(id *)(a1 + 40);
  v13 = v6;
  v14 = v8;
  v12 = v5;
  v9 = v6;
  v10 = v5;
  dispatch_async(v7, block);

}

uint64_t sub_100017DC0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100017DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 138412546;
    v9 = v6;
    v10 = 2112;
    v11 = v7;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@: Got an XPC connection error while getting a client connection: %@", (uint8_t *)&v8, 0x16u);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v5, "plugin:didSetStatus:andError:", *(_QWORD *)(a1 + 32), 0, 1);

}

void sub_100019D00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001F3E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_10001F8D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001F9F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100022920(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  char v15;
  id Property;
  const char *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  const char *v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t flags;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ifstate;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _BYTE v39[24];
  id v40;
  __int128 v41;

  v9 = a2;
  v10 = a5;
  if (a1)
  {
    v11 = a4;
    v13 = ne_log_obj(v11, v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v39 = 138412802;
      *(_QWORD *)&v39[4] = a1;
      *(_WORD *)&v39[12] = 2080;
      *(_QWORD *)&v39[14] = "-[NESMVPNSession handlePluginStart:pid:error:physicalInterface:interfaceRanked:]";
      *(_WORD *)&v39[22] = 2112;
      v40 = v10;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%@: %s - Starting on physicalInterface %@", v39, 0x20u);
    }

    if (!v10)
      goto LABEL_21;
    v15 = objc_msgSend(a1, "proxyEnabled:", v10);
    Property = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
    v18 = Property;
    if (Property)
      Property = objc_getProperty(Property, v17, 72, 1);
    v19 = Property;
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", v10));

    if (v20)
    {
      v21 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
      v23 = v21;
      if (v21)
        v21 = objc_getProperty(v21, v22, 72, 1);
      v24 = v21;
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v10));
      flags = (uint64_t)objc_msgSend(v25, "unsignedLongLongValue");

      v29 = ne_log_obj(v27, v28);
      v30 = objc_claimAutoreleasedReturnValue(v29);
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        goto LABEL_19;
      *(_DWORD *)v39 = 138413058;
      *(_QWORD *)&v39[4] = a1;
      *(_WORD *)&v39[12] = 2080;
      *(_QWORD *)&v39[14] = "-[NESMVPNSession handlePluginStart:pid:error:physicalInterface:interfaceRanked:]";
      *(_WORD *)&v39[22] = 2112;
      v40 = v10;
      LOWORD(v41) = 2048;
      *(_QWORD *)((char *)&v41 + 2) = flags;
      v31 = "%@: %s - physicalInterface %@ - ranked interface flags %llX";
    }
    else
    {
      v32 = nwi_state_copy();
      if (v32)
      {
        v34 = v32;
        ifstate = nwi_state_get_ifstate(v32, objc_msgSend(objc_retainAutorelease(v10), "UTF8String"));
        if (ifstate)
          flags = nwi_ifstate_get_flags(ifstate);
        else
          flags = 0;
        v32 = nwi_state_release(v34);
      }
      else
      {
        flags = 0;
      }
      v36 = ne_log_obj(v32, v33);
      v30 = objc_claimAutoreleasedReturnValue(v36);
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        goto LABEL_19;
      *(_DWORD *)v39 = 138413058;
      *(_QWORD *)&v39[4] = a1;
      *(_WORD *)&v39[12] = 2080;
      *(_QWORD *)&v39[14] = "-[NESMVPNSession handlePluginStart:pid:error:physicalInterface:interfaceRanked:]";
      *(_WORD *)&v39[22] = 2112;
      v40 = v10;
      LOWORD(v41) = 2048;
      *(_QWORD *)((char *)&v41 + 2) = flags;
      v31 = "%@: %s - physicalInterface %@ - non-ranked interface flags %llX";
    }
    _os_log_debug_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, v31, v39, 0x2Au);
LABEL_19:

    sub_100022C78(a1, (flags & 4) != 0, v15, v10);
    v37 = objc_opt_class(NEFlowDivertPlugin);
    if ((objc_opt_isKindOfClass(v9, v37) & 1) != 0)
      sub_100017BE0(v9, v10);
LABEL_21:
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "stateHandler", *(_OWORD *)v39, *(_QWORD *)&v39[16], v40, v41));
    objc_msgSend(v38, "handlePlugin:didStartWithPID:error:", v9, a3, v11);

  }
}

void sub_100022C78(void *a1, char a2, char a3, void *a4)
{
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  const char *v15;
  id v16;
  void *v17;
  id v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  const char *v27;
  id v28;
  void *v29;
  id v30;
  int v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  int v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  _DWORD *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  unsigned int v50;
  id v51;
  id v52;
  id v53;
  void **v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, void *);
  void *v57;
  _DWORD *v58;
  id v59;
  id v60;
  unsigned int v61;

  v53 = a4;
  if (!a1)
    goto LABEL_29;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "VPN"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "protocol"));
  v10 = objc_msgSend(v9, "includeAllNetworks");

  if (!v10)
  {
    v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "policySession"));
    v25 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "pluginPIDArray"));
    v35 = v53;
    v36 = v35;
    if (v24)
    {
      v37 = *(_DWORD *)(v24 + 8);
      if (v37 == 2 || v37 == 1 && *(_QWORD *)(v24 + 32) != 2)
      {
        v54 = _NSConcreteStackBlock;
        v55 = 3221225472;
        v56 = sub_1000334E8;
        v57 = &unk_1000BDBD0;
        v58 = (_DWORD *)v24;
        v59 = v35;
        v60 = v25;
        LOBYTE(v61) = a2;
        BYTE1(v61) = a3;
        sub_10002C9C8((uint64_t)NESMPolicyMasterSession, &v54);

      }
    }

    goto LABEL_18;
  }
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "primaryTunnelPlugin"));
  if (v11)
  {
    v12 = (void *)v11;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "primaryTunnelPlugin"));
    if (sub_10001755C((unsigned int *)v13))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "primaryTunnelPlugin"));
      v16 = sub_100016BDC(v14, v15);
      v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      v18 = objc_msgSend(v17, "count");

      if (!v18)
        goto LABEL_8;
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "policySession"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "primaryTunnelPlugin"));
      v19 = sub_10001755C((unsigned int *)v13);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "primaryPhysicalInterface"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "interfaceName"));
      sub_100033E30((uint64_t)v12, v19, v22, a2, a3);

    }
  }
LABEL_8:
  v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "authenticationPlugin"));
  if (v23)
  {
    v24 = v23;
    v25 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "authenticationPlugin"));
    if (!sub_10001755C((unsigned int *)v25))
    {
LABEL_18:

      goto LABEL_19;
    }
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "authenticationPlugin"));
    v28 = sub_100016BDC(v26, v27);
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    v30 = objc_msgSend(v29, "count");

    if (v30)
    {
      v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "policySession"));
      v25 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "authenticationPlugin"));
      v31 = sub_10001755C((unsigned int *)v25);
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "primaryPhysicalInterface"));
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "interfaceName"));
      sub_100033E30(v24, v31, v34, a2, a3);

      goto LABEL_18;
    }
  }
LABEL_19:
  if (objc_msgSend(a1, "type") == 1)
  {
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "VPN"));
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "exceptionApps"));

    if (v40)
    {
      v41 = objc_msgSend(a1, "tunnelKind");
      v42 = (_DWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "policySession"));
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "VPN"));
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "exceptionApps"));
      if (v41 == (id)1)
      {
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "primaryPhysicalInterface"));
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "interfaceName"));
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "uid"));
        sub_10003AA34((uint64_t)v42, v45, v48, (int)objc_msgSend(v49, "intValue"));

      }
      else
      {
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "uid"));
        v50 = objc_msgSend(v46, "intValue");
        v51 = v45;
        v52 = v53;
        if (v42 && isa_nsarray(v51) && v42[2] == 1)
        {
          v54 = _NSConcreteStackBlock;
          v55 = 3221225472;
          v56 = sub_10003B3D0;
          v57 = &unk_1000BDC48;
          v58 = v42;
          v59 = v52;
          v60 = v51;
          v61 = v50;
          sub_10002C9C8((uint64_t)NESMPolicyMasterSession, &v54);

        }
      }

    }
  }
LABEL_29:

}

uint64_t sub_10002315C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v7;
  uint64_t v8;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: Re-setting policies because the installed apps changed", (uint8_t *)&v7, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "resetPerAppPolicy");
  return sub_10007B40C(*(_QWORD *)(a1 + 32), 1);
}

void sub_100023214(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  SEL v6;
  void *v7;
  SEL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  id v14;
  SEL v15;
  id v16;
  SEL v17;
  SEL v18;
  void *v19;
  void *v20;
  unsigned int v21;
  void *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  void *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  void *v32;
  void *v33;
  id v34;
  const char *v35;
  void *v36;
  id v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  id v43;
  unsigned int v44;
  void *v45;
  void *v46;
  void *v47;
  unsigned int v48;
  void *v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  void *v55;
  void *v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  id v62;
  void *v63;
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  void *v69;
  unsigned __int8 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  unsigned int v79;
  unsigned int v80;
  const char *v81;
  void *v82;
  unsigned int v83;
  uint64_t v84;
  uint8_t buf[4];
  const char *Property;
  __int16 v87;
  _QWORD v88[3];

  if (a1)
  {
    if ((objc_msgSend(a1, "stopped") & 1) != 0
      || (v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration")),
          v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "VPN")),
          v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "protocol")),
          v5 = objc_msgSend(v4, "includeAllNetworks"),
          v4,
          v3,
          v2,
          !v5))
    {
      sub_100023968(a1);
    }
    else
    {
      objc_msgSend(a1, "setDefaultDropType:", 3);
      v84 = 3;
      if (!objc_getProperty(a1, v6, 424, 1))
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "getIDSNetworkAgentDomain"));
        objc_setProperty_atomic(a1, v8, v7, 440);

        v11 = ne_log_obj(v9, v10);
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412546;
          Property = (const char *)objc_getProperty(a1, v13, 440, 1);
          v87 = 2112;
          v88[0] = CFSTR("clientchannel");
          _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Watching Nexus <%@, %@> path", buf, 0x16u);
        }

        v14 = objc_alloc_init((Class)NWParameters);
        objc_msgSend(v14, "requireNetworkAgentWithDomain:type:", objc_getProperty(a1, v15, 440, 1), CFSTR("clientchannel"));
        v16 = objc_msgSend(objc_alloc((Class)NWPathEvaluator), "initWithEndpoint:parameters:", 0, v14);
        objc_setProperty_atomic(a1, v17, v16, 424);

        objc_msgSend(objc_getProperty(a1, v18, 424, 1), "addObserver:forKeyPath:options:context:", a1, CFSTR("path"), 5, 0);
      }
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "controlPolicySession"));
      objc_msgSend(v19, "removeAllPolicies");

      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "highPolicySession"));
      objc_msgSend(v20, "removeAllPolicies");

      v21 = 50;
      v83 = 50;
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "VPN"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "protocol"));
      v25 = objc_msgSend(v24, "excludeLocalNetworks");

      if (v25)
      {
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "controlPolicySession"));
        v27 = sub_100056494(v26, &v83, 0, 100, 0);

        if (!v27)
        {
          v30 = ne_log_obj(v28, v29);
          v31 = objc_claimAutoreleasedReturnValue(v30);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            Property = "-[NESMVPNSession setDefaultDropAll]";
            _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%s: VPN addLocalNetworksExceptionWithOrder failed for Control priority", buf, 0xCu);
          }

        }
        objc_msgSend(a1, "setDefaultDropType:", 3);
        v21 = v83;
      }
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "controlPolicySession"));
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
      v34 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
      v36 = v34;
      if (v34)
        v34 = objc_getProperty(v34, v35, 80, 1);
      v37 = v34;
      v38 = sub_100058E10((uint64_t)v32, v33, v21, &v84, v37);

      if ((v38 & 1) == 0)
      {
        v41 = ne_log_obj(v39, v40);
        v42 = objc_claimAutoreleasedReturnValue(v41);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "VPN-includeAllNetworks evaluateConfiguration failed", buf, 2u);
        }

      }
      v43 = objc_msgSend(a1, "defaultDropType");
      if ((uint64_t)v43 < v84)
        objc_msgSend(a1, "setDefaultDropType:");
      v44 = 50;
      v83 = 50;
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "VPN"));
      v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "protocol"));
      v48 = objc_msgSend(v47, "excludeLocalNetworks");

      if (v48)
      {
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "highPolicySession"));
        v50 = sub_100056494(v49, &v83, 0, 400, 0);

        if (!v50)
        {
          v53 = ne_log_obj(v51, v52);
          v54 = objc_claimAutoreleasedReturnValue(v53);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            Property = "-[NESMVPNSession setDefaultDropAll]";
            _os_log_error_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "%s: VPN addLocalNetworksExceptionWithOrder failed for HighRestricted priority", buf, 0xCu);
          }

        }
        objc_msgSend(a1, "setDefaultDropType:", 3);
        v44 = v83;
      }
      v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "highPolicySession"));
      v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
      v57 = sub_10005AD0C(v55, v56, v44, &v84);

      if (!v57)
      {
        v60 = ne_log_obj(v58, v59);
        v61 = objc_claimAutoreleasedReturnValue(v60);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "VPN-includeAllNetworks evaluateConfiguration (High) failed", buf, 2u);
        }

      }
      v62 = objc_msgSend(a1, "defaultDropType");
      if ((uint64_t)v62 < v84)
        objc_msgSend(a1, "setDefaultDropType:");
      v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "controlPolicySession"));
      v64 = objc_msgSend(v63, "apply");

      if ((v64 & 1) == 0)
      {
        v67 = ne_log_obj(v65, v66);
        v68 = objc_claimAutoreleasedReturnValue(v67);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "VPN Could not apply control policies", buf, 2u);
        }

      }
      v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "highPolicySession"));
      v70 = objc_msgSend(v69, "apply");

      if ((v70 & 1) == 0)
      {
        v73 = ne_log_obj(v71, v72);
        v74 = objc_claimAutoreleasedReturnValue(v73);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "VPN Could not apply High control policies", buf, 2u);
        }

      }
      v75 = objc_msgSend(a1, "setIsDropPersistent:", 0);
      v77 = ne_log_obj(v75, v76);
      v78 = objc_claimAutoreleasedReturnValue(v77);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
      {
        v79 = objc_msgSend(a1, "defaultDropType");
        v80 = objc_msgSend(a1, "isDropPersistent");
        v81 = "Non-Persistent";
        Property = "-[NESMVPNSession setDefaultDropAll]";
        *(_DWORD *)buf = 136315650;
        if (v80)
          v81 = "Persistent";
        v87 = 1024;
        LODWORD(v88[0]) = v79;
        WORD2(v88[0]) = 2080;
        *(_QWORD *)((char *)v88 + 6) = v81;
        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "%s: VPN setting IP Drop-All to %d (%s)", buf, 0x1Cu);
      }

      v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
      sub_100051FCC(v82, 0, 0);

    }
  }
}

void sub_100023968(_QWORD *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  unsigned int v6;
  unsigned int v7;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  void *v18;
  unsigned __int8 v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  NSObject *v23;
  _BYTE v24[18];
  __int16 v25;
  const char *v26;

  if (a1)
  {
    objc_msgSend(a1, "setDefaultDropType:", 0);
    v2 = objc_msgSend(a1, "setIsDropPersistent:", 0);
    v4 = ne_log_obj(v2, v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = objc_msgSend(a1, "defaultDropType");
      v7 = objc_msgSend(a1, "isDropPersistent");
      v8 = "Non-Persistent";
      *(_QWORD *)&v24[4] = "-[NESMVPNSession unsetDefaultDropAll]";
      *(_DWORD *)v24 = 136315650;
      if (v7)
        v8 = "Persistent";
      *(_WORD *)&v24[12] = 1024;
      *(_DWORD *)&v24[14] = v6;
      v25 = 2080;
      v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s: VPN setting IP Drop-All to %d (%s)", v24, 0x1Cu);
    }

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
    sub_100051FCC(v9, 0, 0);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "controlPolicySession"));
    objc_msgSend(v10, "removeAllPolicies");

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "controlPolicySession"));
    v12 = objc_msgSend(v11, "apply");

    if ((v12 & 1) == 0)
    {
      v15 = ne_log_obj(v13, v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v24 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "VPN Could not apply control policies cleanup", v24, 2u);
      }

    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "highPolicySession", *(_OWORD *)v24));
    objc_msgSend(v17, "removeAllPolicies");

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "highPolicySession"));
    v19 = objc_msgSend(v18, "apply");

    if ((v19 & 1) == 0)
    {
      v22 = ne_log_obj(v20, v21);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v24 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "VPN Could not apply high policies cleanup", v24, 2u);
      }

    }
    sub_100023B9C(a1, v21);
  }
}

void sub_100023B9C(_QWORD *a1, const char *a2)
{
  const char *v3;
  SEL v4;
  void *v5;
  const char *v6;
  char v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  uint8_t v12[16];

  if (a1)
  {
    if (objc_getProperty(a1, a2, 424, 1))
    {
      objc_msgSend(objc_getProperty(a1, v3, 424, 1), "removeObserver:forKeyPath:", a1, CFSTR("path"));
      objc_setProperty_atomic(a1, v4, 0, 424);
    }
    a1[54] = 0;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "policySession"));
    v7 = sub_10002F5BC(v5, v6);

    if ((v7 & 1) == 0)
    {
      v10 = ne_log_obj(v8, v9);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v12 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to clear Nexus policy", v12, 2u);
      }

    }
    objc_setProperty_atomic(a1, v9, 0, 440);
  }
}

_QWORD *sub_100023C98(_QWORD *result, const char *a2)
{
  void *v2;
  const char *v3;
  _QWORD *Property;
  const char *v5;

  if (result)
  {
    v2 = result;
    result = objc_getProperty(result, a2, 456, 1);
    if (result)
    {
      Property = objc_getProperty(v2, v3, 456, 1);
      if (Property)
        Property[1] = 0;
      result = objc_getProperty(v2, v5, 456, 1);
      if (result)
        result[2] = 0;
    }
  }
  return result;
}

void sub_100023CFC(void *a1, const char *a2)
{
  id v3;
  const char *v4;
  _QWORD *Property;
  const char *v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  _QWORD *v15;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  const char *v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  SEL v28;
  _QWORD v29[5];
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  uint64_t v35;

  if (a1)
  {
    v3 = objc_getProperty(a1, a2, 448, 1);
    if (v3)
    {

    }
    else if ((sub_100024044((uint64_t)a1) & 1) == 0)
    {
      Property = objc_getProperty(a1, v4, 456, 1);
      if (Property)
      {
        v7 = objc_getProperty(a1, v6, 456, 1);
        if (v7 && (v9 = v7[1], v7, v9))
        {
          v10 = objc_getProperty(a1, v8, 456, 1);
          if (v10)
          {
            v12 = v10[2];
            v10[2] = v12 + 1;

            if (v12 >= 3)
            {
              v13 = objc_getProperty(a1, v11, 456, 1);
              if (v13)
                v13[1] *= 2;
              v15 = objc_getProperty(a1, v14, 456, 1);
              if (v15)
              {
                v17 = v15[1];

                if (v17 >= 601)
                {
                  v18 = objc_getProperty(a1, v16, 456, 1);
                  if (v18)
                    v18[1] = 600;
                }
              }
              v19 = objc_getProperty(a1, v16, 456, 1);
              if (v19)
                v19[2] = 0;
            }
          }
          Property = objc_getProperty(a1, v11, 456, 1);
          if (Property)
            v20 = Property[1];
          else
            v20 = 0;
        }
        else
        {
          v21 = objc_getProperty(a1, v8, 456, 1);
          if (v21)
            v21[1] = 1;
          v20 = 1;
          Property = objc_getProperty(a1, v22, 456, 1);
          if (Property)
          {
            Property[2] = 0;
            v20 = 1;
          }
        }
      }
      else
      {
        v20 = -1;
      }
      v23 = ne_log_obj(Property, v6);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      v25 = v24;
      if (v20 < 0)
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          v31 = a1;
          v32 = 2080;
          v33 = "-[NESMVPNSession retry]";
          _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%@:%s: failed to get retry interval", buf, 0x16u);
        }
      }
      else
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412802;
          v31 = a1;
          v32 = 2080;
          v33 = "-[NESMVPNSession retry]";
          v34 = 2048;
          v35 = v20;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "%@:%s: Retrying in %ld Secs", buf, 0x20u);
        }

        v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472;
        v29[2] = sub_10002420C;
        v29[3] = &unk_1000BEB80;
        v29[4] = a1;
        v26 = NECreateTimerSource(v25, v20, v29);
        v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        objc_setProperty_atomic(a1, v28, v27, 448);

      }
    }
  }
}

uint64_t sub_100024044(uint64_t result)
{
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  unsigned int v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  void *v22;

  if (result)
  {
    v1 = (void *)result;
    v2 = objc_msgSend((id)result, "stopped");
    if ((v2 & 1) == 0)
    {
      v2 = objc_msgSend(v1, "status");
      if ((_DWORD)v2 == 1)
      {
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "server"));
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "primaryPhysicalInterface"));
        v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "interfaceName"));
        if (v6)
        {
          v7 = (void *)v6;
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "server"));
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "primaryPhysicalInterface"));
          v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "interfaceName")));
          v11 = objc_msgSend(v1, "isInterfaceIPAvailable:", objc_msgSend(v10, "UTF8String"));

          if (v11)
            return 0;
        }
        else
        {

        }
      }
    }
    v12 = ne_log_obj(v2, v3);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "server"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "primaryPhysicalInterface"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "interfaceName"));
      v17 = 138412802;
      v18 = v1;
      v19 = 2080;
      v20 = "-[NESMVPNSession skipRetry]";
      v21 = 2112;
      v22 = v16;
      _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%@:%s: Skip retry, session already running, stopped or no network - primary interface %@", (uint8_t *)&v17, 0x20u);

    }
    return 1;
  }
  return result;
}

void sub_10002420C(uint64_t a1, const char *a2)
{
  NSObject *v3;
  const char *v4;
  id Property;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;

  v3 = *(NSObject **)(a1 + 32);
  if (v3)
  {
    Property = objc_getProperty(v3, a2, 448, 1);
    v3 = *(NSObject **)(a1 + 32);
    if (Property)
    {
      if (v3)
        v3 = objc_getProperty(v3, v4, 448, 1);
      dispatch_source_cancel(v3);
      v3 = *(NSObject **)(a1 + 32);
      if (v3)
      {
        objc_setProperty_atomic(v3, v6, 0, 448);
        v3 = *(NSObject **)(a1 + 32);
      }
    }
  }
  v7 = sub_100024044((uint64_t)v3);
  if ((_DWORD)v7)
  {
    sub_100023C98(*(_QWORD **)(a1 + 32), v8);
  }
  else
  {
    v9 = ne_log_obj(v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v14 = 138412546;
      v15 = v11;
      v16 = 2080;
      v17 = "-[NESMVPNSession retry]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%@:%s: Retrying now", (uint8_t *)&v14, 0x16u);
    }

    v12 = *(void **)(a1 + 32);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "lastStartMessage"));
    objc_msgSend(v12, "handleStartMessage:", v13);

  }
}

id sub_10002436C(uint64_t a1)
{
  id result;
  uint64_t v3;

  v3 = 0;
  result = objc_msgSend(*(id *)(a1 + 32), "virtualInterface");
  if (result)
  {
    NEVirtualInterfaceRemoveAllAddresses(objc_msgSend(*(id *)(a1 + 32), "virtualInterface"));
    NEVirtualInterfaceRemoveAllRoutes(objc_msgSend(*(id *)(a1 + 32), "virtualInterface"), 1, 1);
    NEVirtualInterfaceSetIPv4Router(objc_msgSend(*(id *)(a1 + 32), "virtualInterface"), 0);
    NEVirtualInterfaceSetIPv6Router(objc_msgSend(*(id *)(a1 + 32), "virtualInterface"), 0);
    NEVirtualInterfaceSetAsPrimary(objc_msgSend(*(id *)(a1 + 32), "virtualInterface"), 0);
    NEVirtualInterfaceSetVPNServerAddress(objc_msgSend(*(id *)(a1 + 32), "virtualInterface"), 0);
    NEVirtualInterfaceSetDNSDomain(objc_msgSend(*(id *)(a1 + 32), "virtualInterface"), 0);
    NEVirtualInterfaceSetDNSServers(objc_msgSend(*(id *)(a1 + 32), "virtualInterface"), 0);
    NEVirtualInterfaceSetDNSSearchDomains(objc_msgSend(*(id *)(a1 + 32), "virtualInterface"), 0);
    NEVirtualInterfaceSetDNSSupplementalMatchDomains(objc_msgSend(*(id *)(a1 + 32), "virtualInterface"), 0);
    NEVirtualInterfaceSetDNSSupplementalMatchDomainsNoSearch(objc_msgSend(*(id *)(a1 + 32), "virtualInterface"), 0);
    NEVirtualInterfaceSetProxies(objc_msgSend(*(id *)(a1 + 32), "virtualInterface"), 0);
    if (NEVirtualInterfaceUpdateAdHocServiceReturnChanges(objc_msgSend(*(id *)(a1 + 32), "virtualInterface"), &v3, *(unsigned __int8 *)(a1 + 40)))return (id)v3;
    else
      return 0;
  }
  return result;
}

void sub_100024480(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  if ((a2 & 1) == 0)
  {
    v4 = ne_log_obj(a1, a2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v13 = *(_QWORD *)(a1 + 32);
      v14 = 138412290;
      v15 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%@: failed to update the service in the dynamic store while clearing the configuration", (uint8_t *)&v14, 0xCu);
    }

  }
  if (objc_msgSend(*(id *)(a1 + 32), "parentType") == (id)2)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "parent"));
    sub_10008731C(v6, *(void **)(a1 + 32));

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateHandler"));
  objc_msgSend(v7, "handleClearConfigurationResult:", a2);

  sub_100024630(*(void **)(a1 + 32));
  sub_10007BFA4(*(void **)(a1 + 32), v8);
  if (!*(_BYTE *)(a1 + 40))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
    sub_10002EF6C((uint64_t)v9);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
    sub_10002C404((uint64_t)v10);

    if (!objc_msgSend(*(id *)(a1 + 32), "virtualInterface"))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
      sub_10002C5A0((uint64_t)v12);

      if ((a2 & 1) != 0)
        goto LABEL_10;
LABEL_12:
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NEAgentErrorDomain"), 1, 0));
      goto LABEL_13;
    }
  }
  if ((a2 & 1) == 0)
    goto LABEL_12;
LABEL_10:
  v11 = 0;
LABEL_13:
  sub_100024740(*(void **)(a1 + 32), v11);

}

void sub_100024630(void *a1)
{
  void *v2;
  unsigned int v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  const char *v10;
  int v11;
  void *v12;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "dnsAgentRegistration"));
    v3 = objc_msgSend(v2, "isRegistered");

    if (v3)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "dnsAgentRegistration"));
      objc_msgSend(v4, "unregisterNetworkAgent");

      v7 = ne_log_obj(v5, v6);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v11 = 138412290;
        v12 = a1;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@: Unregistered DNS network agent", (uint8_t *)&v11, 0xCu);
      }

    }
    objc_msgSend(a1, "setDnsAgentRegistration:", 0);
    objc_msgSend(a1, "setDnsAgent:", 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "policySession"));
    sub_10002C600(v9, v10);

  }
}

void sub_100024740(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  SEL v19;
  id Property;
  id v21;
  SEL v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  id v28;
  NSObject *v29;
  SEL v30;
  void (**v31)(id, id);
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  NSObject *v35;
  int v36;
  void *v37;
  __int16 v38;
  NSObject *v39;
  __int16 v40;
  id v41;

  v3 = a2;
  if (a1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "setConfigurationCompletionHandlerArray"));

    if (v4)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "setConfigurationCompletionHandlerArray"));
      v8 = objc_msgSend(v7, "count");

      if (v8)
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "setConfigurationCompletionHandlerArray"));
        v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", 0));

        v15 = ne_log_obj(v13, v14);
        v16 = objc_claimAutoreleasedReturnValue(v15);
        v17 = v16;
        if (v12)
        {
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "interfaceName"));
            Property = objc_getProperty(v12, v19, 8, 1);
            v21 = objc_retainBlock(Property);
            v36 = 138412802;
            v37 = a1;
            v38 = 2112;
            v39 = v18;
            v40 = 2112;
            v41 = v21;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%@: config request: popping handler [%@] %@", (uint8_t *)&v36, 0x20u);

          }
          v23 = objc_getProperty(v12, v22, 8, 1);
          if (v23)
          {
            v25 = ne_log_obj(v23, v24);
            v26 = objc_claimAutoreleasedReturnValue(v25);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            {
              v28 = objc_getProperty(v12, v27, 8, 1);
              v29 = objc_retainBlock(v28);
              v36 = 138412546;
              v37 = a1;
              v38 = 2112;
              v39 = v29;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%@: config request: calling completionHandler %@", (uint8_t *)&v36, 0x16u);

            }
            v31 = (void (**)(id, id))objc_getProperty(v12, v30, 8, 1);
            v31[2](v31, v3);
          }
          v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "setConfigurationCompletionHandlerArray"));
          -[NSObject removeObject:](v17, "removeObject:", v12);
        }
        else if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          v35 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "interfaceName"));
          v36 = 138412546;
          v37 = a1;
          v38 = 2112;
          v39 = v35;
          _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%@: No config request completion handler [%@]", (uint8_t *)&v36, 0x16u);

        }
        goto LABEL_19;
      }
      v34 = ne_log_obj(v9, v10);
      v12 = objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "interfaceName"));
        v36 = 138412546;
        v37 = a1;
        v38 = 2112;
        v39 = v17;
        v33 = "%@: config request handler array empty [%@]";
        goto LABEL_16;
      }
    }
    else
    {
      v32 = ne_log_obj(v5, v6);
      v12 = objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "interfaceName"));
        v36 = 138412546;
        v37 = a1;
        v38 = 2112;
        v39 = v17;
        v33 = "%@: config request (pop) handler array nil [%@]";
LABEL_16:
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, v33, (uint8_t *)&v36, 0x16u);
LABEL_19:

      }
    }

  }
}

void sub_100024A98(uint64_t a1, const char *a2)
{
  uint64_t v2;
  _QWORD *v4;
  const char *v5;
  id v6;
  const char *v7;
  NSObject *Property;
  const char *v9;
  const char *v10;
  NSObject *v11;
  const char *v12;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    return;
  *(_QWORD *)(v2 + 400) &= ~*(_QWORD *)(a1 + 40);
  v4 = *(_QWORD **)(a1 + 32);
  if (!v4 || v4[50] || !objc_getProperty(v4, a2, 408, 1))
    return;
  v6 = *(id *)(a1 + 32);
  if (v6)
  {
    if (objc_getProperty(v6, v5, 416, 1))
    {
      Property = *(NSObject **)(a1 + 32);
      if (Property)
        Property = objc_getProperty(Property, v7, 416, 1);
      dispatch_source_cancel(Property);
      v6 = *(id *)(a1 + 32);
      if (!v6)
        goto LABEL_14;
      objc_setProperty_atomic(v6, v9, 0, 416);
    }
    v6 = *(id *)(a1 + 32);
    if (v6)
      v6 = objc_getProperty(v6, v7, 408, 1);
  }
LABEL_14:
  (*((void (**)(id, uint64_t))v6 + 2))(v6, 1);
  v11 = *(NSObject **)(a1 + 32);
  if (v11)
  {
    objc_setProperty_atomic_copy(v11, v10, 0, 408);
    v11 = *(NSObject **)(a1 + 32);
    if (v11)
      v11 = objc_getProperty(v11, v12, 376, 1);
  }
  dispatch_resume(v11);
}

void sub_100024BA4(id *a1)
{
  id *v2;
  id WeakRetained;
  const char *v4;
  void *v5;
  NSObject *Property;
  NSObject *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id v12;

  v2 = a1 + 6;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v5 = WeakRetained;
  if (WeakRetained)
  {
    Property = objc_getProperty(WeakRetained, v4, 376, 1);
    dispatch_suspend(Property);
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "queue"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100024CA8;
    v8[3] = &unk_1000BD8E8;
    objc_copyWeak(&v12, v2);
    v10 = a1[4];
    v9 = v5;
    v11 = a1[5];
    dispatch_sync(v7, v8);

    objc_destroyWeak(&v12);
  }

}

void sub_100024CA8(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  NSObject *Property;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  uint8_t buf[4];
  uint64_t v27;

  v2 = (id *)(a1 + 56);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  if (!v4)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    if (WeakRetained)
      Property = objc_getProperty(WeakRetained, v12, 376, 1);
    else
      Property = 0;
    dispatch_resume(Property);
    goto LABEL_28;
  }
  v5 = v4;
  v6 = objc_loadWeakRetained(v2);
  v8 = v6;
  if (v6)
    v6[50] = 0;
  if ((v5 & 2) != 0)
  {
    v9 = ne_log_obj(v6, v7);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v27 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%@: waiting for DNS to change", buf, 0xCu);
    }

    if (v8)
      v8[50] |= 2uLL;
  }
  if ((v5 & 1) == 0)
  {
    if ((v5 & 4) == 0)
    {
      if (!v8)
        goto LABEL_25;
      goto LABEL_24;
    }
    goto LABEL_20;
  }
  v14 = ne_log_obj(v6, v7);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    v16 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v27 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%@: waiting for NWI to change", buf, 0xCu);
  }

  if (!v8)
  {
    if ((v5 & 4) == 0)
      goto LABEL_25;
    goto LABEL_20;
  }
  v8[50] |= 1uLL;
  if ((v5 & 4) != 0)
  {
LABEL_20:
    v17 = ne_log_obj(v6, v7);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      v19 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v27 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%@: waiting for proxies to change", buf, 0xCu);
    }

    if (!v8)
      goto LABEL_25;
    v8[50] |= 4uLL;
  }
LABEL_24:
  objc_setProperty_atomic_copy(v8, v7, *(id *)(a1 + 48), 408);
LABEL_25:
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "queue"));
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_100024FC0;
  v24[3] = &unk_1000BDA08;
  objc_copyWeak(&v25, v2);
  v21 = NECreateTimerSource(v20, 5, v24);
  v23 = (void *)objc_claimAutoreleasedReturnValue(v21);
  if (v8)
    objc_setProperty_atomic(v8, v22, v23, 416);

  objc_destroyWeak(&v25);
LABEL_28:

}

void sub_100024FA4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100024FC0(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  void (**Property)(id, uint64_t);
  SEL v11;
  NSObject *v12;
  SEL v13;
  SEL v14;
  NSObject *v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));

  if (WeakRetained)
  {
    v3 = objc_loadWeakRetained(v1);
    v5 = ne_log_obj(v3, v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      if (v3)
        v7 = v3[50];
      else
        LODWORD(v7) = 0;
      v16 = 138412546;
      v17 = v3;
      v18 = 1024;
      v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%@: timed out while waiting for network configuration to change (pending flags = 0x%x)", (uint8_t *)&v16, 0x12u);
    }

    if (v3)
    {
      v3[50] = 0;
      if (objc_getProperty(v3, v8, 408, 1))
      {
        Property = (void (**)(id, uint64_t))objc_getProperty(v3, v9, 408, 1);
        Property[2](Property, 1);
        objc_setProperty_atomic_copy(v3, v11, 0, 408);
      }
      v12 = objc_getProperty(v3, v9, 416, 1);
      dispatch_source_cancel(v12);
      objc_setProperty_atomic(v3, v13, 0, 416);
      v15 = objc_getProperty(v3, v14, 376, 1);
    }
    else
    {
      dispatch_source_cancel(0);
      v15 = 0;
    }
    dispatch_resume(v15);

  }
}

void sub_100025150(void *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  NSObject *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  unsigned __int8 v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  char v51;
  void *v52;
  void *v53;
  void *v54;
  NSObject *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  unsigned __int8 v65;
  uint64_t v66;
  NSObject *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  NSObject *v72;
  NSObject *v73;
  NSObject *v74;
  id v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  NSObject *v91;
  void *v92;
  NSObject *v93;
  unsigned __int8 v94;
  _BYTE buf[24];
  const char *v96;
  NSObject *v97;
  NSObject *v98;
  id v99;
  NSObject *v100;
  id v101;
  id v102;
  unsigned __int8 v103;

  if (!a1)
    return;
  v2 = a2;
  v4 = ne_log_obj(a1, a2);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@: handleSetConfigurationResult - result %d", buf, 0x12u);
  }

  if (objc_msgSend(a1, "virtualInterface")
    && (objc_msgSend(a1, "sessionType") == 1 || objc_msgSend(a1, "sessionType") == 2))
  {
    v6 = (void *)NEVirtualInterfaceCopyName(objc_msgSend(a1, "virtualInterface"));
    sub_10007BE2C(a1, v6);

  }
  if (v2 && objc_msgSend(a1, "resetPerAppPolicy"))
  {
    if (objc_msgSend(a1, "type") != 1)
      goto LABEL_34;
    if (objc_msgSend(a1, "tunnelKind") == (id)2)
    {
      v7 = objc_msgSend(a1, "virtualInterface");
      if (v7)
      {
        v9 = v7;
        v10 = NEVirtualInterfaceCopyName(v7);
        if (v10)
        {
          v12 = v10;
          v13 = (void *)NEVirtualInterfaceCopyDelegateInterfaceName(objc_msgSend(a1, "virtualInterface"));
          if (!v13)
          {
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "primaryCellularInterface"));
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "interfaceName"));

            if (!v13)
            {
              v78 = ne_log_obj(v16, v17);
              v74 = objc_claimAutoreleasedReturnValue(v78);
              if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                *(_QWORD *)&buf[4] = a1;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = "-[NESMVPNSession applyFallbackTunnelDataPolicies]";
                _os_log_error_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%@:%s: NULL delegate interface name", buf, 0x16u);
              }
              v23 = 0;
              goto LABEL_67;
            }
          }
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "pluginConfigurationEntities"));
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "DNSSettings"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "matchDomains"));

          if (v20)
          {
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "DNSSettings"));
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "matchDomains"));
          }
          else
          {
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "protocol"));
            v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "DNSSettings"));
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "matchDomains"));

          }
          v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "IPv4Settings"));

          if (!v63)
            goto LABEL_60;
          v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "IPv4Settings"));
          v65 = objc_msgSend(v64, "hasDefaultRoute");

          if ((v65 & 1) != 0)
          {
            v94 = 1;
            goto LABEL_61;
          }
          v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "IPv6Settings"));

          if (v68)
          {
            v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "IPv6Settings"));
            v94 = objc_msgSend(v69, "hasDefaultRoute");

          }
          else
          {
LABEL_60:
            v94 = 0;
          }
LABEL_61:
          v70 = (void *)NEVirtualInterfaceCopyRoutes(v9, 0);
          v71 = (void *)NEVirtualInterfaceCopyRoutes(v9, 1);
          v72 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "policySession"));
          v73 = v12;
          v74 = v13;
          v75 = v70;
          v76 = v71;
          v77 = v22;
          if (v72 && isa_nsstring(v73) && LODWORD(v72[1].isa) == 1)
          {
            *(_QWORD *)buf = _NSConcreteStackBlock;
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = sub_100036284;
            v96 = (const char *)&unk_1000BDC70;
            v97 = v72;
            v98 = v73;
            v99 = v76;
            v100 = v74;
            v103 = v94;
            v101 = v75;
            v102 = v77;
            v23 = sub_10002C9C8((uint64_t)NESMPolicyMasterSession, buf);

          }
          else
          {
            v23 = 0;
          }

LABEL_67:
          goto LABEL_68;
        }
        v58 = ne_log_obj(0, v11);
        v59 = objc_claimAutoreleasedReturnValue(v58);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
          v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "interfaceName"));
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)&buf[4] = a1;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v80;
          *(_WORD *)&buf[22] = 2080;
          v96 = "-[NESMVPNSession applyFallbackTunnelDataPolicies]";
          _os_log_error_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "%@[%@]:%s: NULL virtual interface name", buf, 0x20u);

        }
        v12 = 0;
      }
      else
      {
        v56 = ne_log_obj(0, v8);
        v12 = objc_claimAutoreleasedReturnValue(v56);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "interfaceName"));
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)&buf[4] = a1;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v57;
          *(_WORD *)&buf[22] = 2080;
          v96 = "-[NESMVPNSession applyFallbackTunnelDataPolicies]";
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%@[%@]:%s: NULL virtual interface", buf, 0x20u);

        }
      }
      v23 = 0;
LABEL_68:

      goto LABEL_19;
    }
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "VPN"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "protocol"));
    v37 = objc_msgSend(v36, "includeAllNetworks");

    if ((v37 & 1) != 0)
    {
LABEL_34:
      v23 = 1;
      goto LABEL_19;
    }
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "pluginConfigurationEntities"));
    v38 = objc_msgSend(a1, "virtualInterface");
    if (v38)
    {
      v40 = NEVirtualInterfaceCopyName(v38);
      if (v40)
      {
        v42 = v40;
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
        v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "primaryPhysicalInterface"));
        v45 = objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "interfaceName"));

        if (v45 || (v45 = NEVirtualInterfaceCopyDelegateInterfaceName(objc_msgSend(a1, "virtualInterface"))) != 0)
        {
          v93 = v45;
          v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "policySession"));
          v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "pluginPIDArray"));
          v88 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject IPv4Settings](v12, "IPv4Settings"));
          v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "includedRoutes"));
          v87 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject IPv6Settings](v12, "IPv6Settings"));
          v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "includedRoutes"));
          v86 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject IPv4Settings](v12, "IPv4Settings"));
          v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "excludedRoutes"));
          v85 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject IPv6Settings](v12, "IPv6Settings"));
          v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "excludedRoutes"));
          v91 = v42;
          v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
          v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "VPN"));
          v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "protocol"));
          v51 = objc_msgSend(v50, "excludeLocalNetworks");
          v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
          v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "VPN"));
          v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "protocol"));
          v23 = sub_100036D14((uint64_t)v92, v91, v93, v90, v89, v47, v48, v83, v51, (char)objc_msgSend(v54, "enforceRoutes"));

          v42 = v91;
          v55 = v93;

        }
        else
        {
          v79 = ne_log_obj(0, v46);
          v55 = objc_claimAutoreleasedReturnValue(v79);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = a1;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "-[NESMVPNSession applyTunnelRoutePolicies]";
            _os_log_error_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "%@:%s: NULL delegate interface name", buf, 0x16u);
          }
          v23 = 0;
        }

        goto LABEL_57;
      }
      v66 = ne_log_obj(0, v41);
      v67 = objc_claimAutoreleasedReturnValue(v66);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "interfaceName"));
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v81;
        *(_WORD *)&buf[22] = 2080;
        v96 = "-[NESMVPNSession applyTunnelRoutePolicies]";
        _os_log_error_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "%@[%@]:%s: NULL virtual interface name", buf, 0x20u);

      }
      v42 = 0;
    }
    else
    {
      v60 = ne_log_obj(0, v39);
      v42 = objc_claimAutoreleasedReturnValue(v60);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "interfaceName"));
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v61;
        *(_WORD *)&buf[22] = 2080;
        v96 = "-[NESMVPNSession applyTunnelRoutePolicies]";
        _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "%@[%@]:%s: NULL virtual interface", buf, 0x20u);

      }
    }
    v23 = 0;
LABEL_57:

    goto LABEL_68;
  }
  v23 = 0;
LABEL_19:
  if (objc_msgSend(a1, "parentType") == (id)2)
  {
    v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "parent"));
    if ((_DWORD)v23 && objc_msgSend(a1, "type") == 1)
    {
      v25 = (void *)NEVirtualInterfaceCopyName(objc_msgSend(a1, "virtualInterface"));
      v26 = a1;
      v27 = v25;
      v29 = v27;
      if (v24)
      {
        if (v27)
        {
          v30 = objc_claimAutoreleasedReturnValue(-[NSObject queue](v24, "queue"));
          *(_QWORD *)buf = _NSConcreteStackBlock;
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = sub_100087218;
          v96 = (const char *)&unk_1000BE878;
          v97 = v29;
          v98 = v24;
          v99 = v26;
          dispatch_async(v30, buf);

          v31 = v97;
        }
        else
        {
          v82 = ne_log_obj(0, v28);
          v31 = objc_claimAutoreleasedReturnValue(v82);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = "-[NESMIKEv2VPNFallbackSession handleSetConfigurationResult:tunnelInterfaceName:]";
            _os_log_fault_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "%s called with null tunnelInterfaceName", buf, 0xCu);
          }
        }

      }
    }

  }
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "stateHandler"));
  objc_msgSend(v32, "handleSetConfigurationResult:", v23);

  if ((v23 & 1) != 0)
    v33 = 0;
  else
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NEAgentErrorDomain"), 1, 0));
  sub_100024740(a1, v33);

}

uint64_t sub_100025C40(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  unsigned __int8 v29;
  id v30;
  id v31;
  uint64_t v33;
  NSObject *v34;
  void *v35;
  void *v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  BOOL v39;
  unsigned __int8 v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  _DWORD *v45;
  uint64_t v46;
  _BYTE buf[24];
  const char *v48;
  _DWORD *v49;
  id v50;
  id v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  BOOL v55;

  if (!a1)
    return 0;
  v2 = objc_msgSend(a1, "virtualInterface");
  if (!v2)
  {
    v13 = ne_log_obj(0, v3);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
LABEL_9:

      return 0;
    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "interfaceName"));
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v15;
    *(_WORD *)&buf[22] = 2080;
    v48 = "-[NESMVPNSession applyTunnelDataPolicies]";
    v16 = "%@[%@]:%s: NULL virtual interface";
LABEL_31:
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, v16, buf, 0x20u);

    goto LABEL_9;
  }
  v4 = NEVirtualInterfaceCopyName(v2);
  v46 = v4;
  if (!v4)
  {
    v17 = ne_log_obj(0, v5);
    v14 = objc_claimAutoreleasedReturnValue(v17);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "interfaceName"));
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v15;
    *(_WORD *)&buf[22] = 2080;
    v48 = "-[NESMVPNSession applyTunnelDataPolicies]";
    v16 = "%@[%@]:%s: NULL virtual interface name";
    goto LABEL_31;
  }
  v6 = (void *)v4;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "primaryPhysicalInterface"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "interfaceName"));
  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "primaryPhysicalInterface"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "interfaceName"));

  }
  else
  {
    v12 = 0;
  }

  if (!v12)
  {
    v12 = (void *)NEVirtualInterfaceCopyDelegateInterfaceName(objc_msgSend(a1, "virtualInterface"));
    if (!v12)
    {
      v33 = ne_log_obj(0, v19);
      v34 = objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "-[NESMVPNSession applyTunnelDataPolicies]";
        _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%@:%s: NULL delegate interface name", buf, 0x16u);
      }

      myCFRelease(&v46);
      return 0;
    }
  }
  v45 = (_DWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "policySession"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "pluginConfigurationEntities"));
  v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "DNSSettings"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "pluginConfigurationEntities"));
  v44 = v20;
  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "proxySettings"));
  v42 = v22;
  v40 = objc_msgSend(v41, "enabled");
  if ((v40 & 1) != 0)
  {
    v37 = 1;
  }
  else
  {
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "protocol"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "proxySettings"));
    v37 = objc_msgSend(v35, "enabled");
  }
  v43 = (void *)v21;
  v39 = v21 != 0;
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "VPN"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "protocol"));
  v38 = objc_msgSend(v25, "excludeLocalNetworks");
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "VPN"));
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "protocol"));
  v29 = objc_msgSend(v28, "excludeCellularServices");
  v30 = v6;
  v31 = v12;
  v18 = (uint64_t)v45;
  if (v45)
  {
    if (isa_nsstring(v30) && isa_nsstring(v31) && v45[2] == 1)
    {
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_1000359C4;
      v48 = (const char *)&unk_1000BDC48;
      v49 = v45;
      v50 = v30;
      v52 = v38;
      v53 = v29;
      v51 = v31;
      v54 = v37;
      v55 = v39;
      v18 = sub_10002C9C8((uint64_t)NESMPolicyMasterSession, buf);

    }
    else
    {
      v18 = 0;
    }
  }

  if ((v40 & 1) == 0)
  {

  }
  myCFRelease(&v46);

  return v18;
}

void *sub_1000260FC(void *result)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;

  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, "virtualInterface");
    if (v3)
      v4 = (void *)NEVirtualInterfaceCopyName(v3);
    else
      v4 = 0;
    if ((objc_msgSend(v2, "isSecondaryConnection") & 1) != 0 || objc_msgSend(v2, "tunnelKind") == (id)2)
    {
      v5 = 0;
      v6 = 0;
LABEL_20:
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "policySession"));
      v16 = sub_100045A58((uint64_t)v15, v4, v6, v5);

      return (void *)v16;
    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pluginConfigurationEntities"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "DNSSettings"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "matchDomains"));

    if (!v6)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "protocol"));
      v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "DNSSettings"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "matchDomains"));

    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "IPv4Settings"));
    v11 = objc_msgSend(v10, "hasDefaultRoute");
    if ((v11 & 1) != 0
      || (v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "IPv6Settings")),
          objc_msgSend(v1, "hasDefaultRoute")))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "DNSSettings"));
      if (v12)
      {
        v5 = 1;
      }
      else
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "protocol"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "DNSSettings"));
        v5 = v14 != 0;

      }
      if ((v11 & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      v5 = 0;
    }

LABEL_19:
    goto LABEL_20;
  }
  return result;
}

id sub_1000262A4(uint64_t a1)
{
  id result;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint8_t buf[4];
  void *v34;

  kdebug_trace(726990944, 0, 0, 0, 0);
  v32 = 0;
  result = objc_msgSend(*(id *)(a1 + 32), "virtualInterface");
  if (result)
  {
    v3 = *(void **)(a1 + 32);
    if (!v3)
      goto LABEL_34;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pluginConfigurationEntities"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "IPv4Settings"));
    if (!v5)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "pluginConfigurationEntities"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "IPv6Settings"));
      if (!v6)
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "pluginConfigurationEntities"));
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "tunnelRemoteAddress"));

        if (!v31)
          goto LABEL_10;
        goto LABEL_7;
      }

    }
LABEL_7:
    v9 = ne_log_obj(v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v34 = v3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%@: Resetting the virtual interface", buf, 0xCu);
    }

    NEVirtualInterfaceRemoveAllAddresses(objc_msgSend(v3, "virtualInterface"));
    NEVirtualInterfaceRemoveAllRoutes(objc_msgSend(v3, "virtualInterface"), 1, 1);
    NEVirtualInterfaceSetIPv4Router(objc_msgSend(v3, "virtualInterface"), 0);
    NEVirtualInterfaceSetIPv6Router(objc_msgSend(v3, "virtualInterface"), 0);
    NEVirtualInterfaceSetAsPrimary(objc_msgSend(v3, "virtualInterface"), 0);
LABEL_10:
    v11 = *(void **)(a1 + 32);
    if (v11)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pluginConfigurationEntities"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "proxySettings"));
      if (!v13)
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "protocol"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "proxySettings"));

      }
      if (!objc_msgSend(v13, "enabled"))
        goto LABEL_27;
      if ((objc_msgSend(v11, "isSecondaryConnection") & 1) == 0)
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "matchDomains"));
        if (objc_msgSend(v15, "count"))
        {
LABEL_18:

          goto LABEL_19;
        }
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "DNSSettings"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "matchDomains"));
        v18 = objc_msgSend(v17, "count");

        if (v18)
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "DNSSettings"));
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "matchDomains"));
          objc_msgSend(v13, "setMatchDomains:", v19);

          goto LABEL_18;
        }
      }
LABEL_19:
      v20 = objc_msgSend(v13, "copyLegacyDictionary");
      v22 = v20;
      if (v20)
      {
        v23 = ne_log_obj(v20, v21);
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v34 = v11;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "%@: Setting proxies", buf, 0xCu);
        }

        v25 = NEVirtualInterfaceSetProxies(objc_msgSend(v11, "virtualInterface"), v22);
        if (!(_DWORD)v25)
        {
          v27 = ne_log_obj(v25, v26);
          v28 = objc_claimAutoreleasedReturnValue(v27);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v34 = v11;
            _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%@: failed to set the proxy configuration", buf, 0xCu);
          }

        }
      }

LABEL_27:
      v29 = *(void **)(a1 + 32);
      goto LABEL_28;
    }
LABEL_34:
    v29 = 0;
LABEL_28:
    if (NEVirtualInterfaceUpdateAdHocServiceReturnChanges(objc_msgSend(v29, "virtualInterface"), &v32, *(unsigned __int8 *)(a1 + 40)))return (id)v32;
    else
      return 0;
  }
  return result;
}

id sub_100026634(uint64_t a1)
{
  id result;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char isKindOfClass;
  uint64_t v13;
  NSObject *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  _BOOL4 v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  char v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  NSObject *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  id v79;
  void *v80;
  void *v81;
  void *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t matched;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  uint64_t v100;
  _BYTE buf[24];
  void *v102;
  uint64_t v103;
  id v104;
  id v105;
  id v106;
  char v107;

  kdebug_trace(726990948, 0, 0, 0, 0);
  v100 = 0;
  result = objc_msgSend(*(id *)(a1 + 32), "virtualInterface");
  if (result)
  {
    v3 = *(void **)(a1 + 32);
    if (!v3)
    {
      v51 = 0;
LABEL_32:
      if (NEVirtualInterfaceUpdateAdHocServiceReturnChanges(objc_msgSend(v51, "virtualInterface"), &v100, *(unsigned __int8 *)(a1 + 40)))return (id)v100;
      else
        return 0;
    }
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pluginConfigurationEntities"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "DNSSettings"));

    if (!v5)
    {
      sub_100024630(v3);
LABEL_31:

      v51 = *(void **)(a1 + 32);
      goto LABEL_32;
    }
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "DNSSettings"));
    v7 = objc_opt_class(NEDNSOverTLSSettings);
    if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0)
    {

LABEL_8:
      v13 = ne_log_obj(v8, v9);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%@: Setting Encrypted DNS", buf, 0xCu);
      }

      v15 = objc_alloc((Class)NEDNSSettingsNetworkAgent);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "configuration"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "identifier"));
      v18 = objc_msgSend(v15, "initWithConfigUUID:sessionType:name:", v17, objc_msgSend(v3, "type"), 0);
      objc_msgSend(v3, "setDnsAgent:", v18);

      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dnsAgent"));
      objc_msgSend(v19, "setActive:", 1);

      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "DNSSettings"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dnsAgent"));
      objc_msgSend(v21, "setSettings:", v20);

      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dnsAgent"));
      objc_msgSend(v23, "setAgentUUID:", v22);

      v24 = objc_alloc((Class)NWNetworkAgentRegistration);
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dnsAgent"));
      v26 = objc_msgSend(v24, "initWithNetworkAgentClass:", objc_opt_class(v25));
      objc_msgSend(v3, "setDnsAgentRegistration:", v26);

      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dnsAgentRegistration"));
      LODWORD(v25) = objc_msgSend(v27, "isRegistered");

      v30 = ne_log_obj(v28, v29);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      v32 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v25)
      {
        if (v32)
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v3;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%@: Updated DNS network agent", buf, 0xCu);
        }

        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dnsAgentRegistration"));
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dnsAgent"));
        objc_msgSend(v33, "updateNetworkAgent:", v34);
      }
      else
      {
        if (v32)
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v3;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%@: Registered DNS network agent", buf, 0xCu);
        }

        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dnsAgentRegistration"));
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dnsAgent"));
        objc_msgSend(v33, "registerNetworkAgent:", v34);
      }

      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "DNSSettings"));
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "matchDomains"));

      if (v36)
      {
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "DNSSettings"));
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchDomains"));
      }
      else
      {
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "protocol"));
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "DNSSettings"));
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "matchDomains"));

      }
      if (objc_msgSend(v3, "tunnelKind") == (id)1)
        v40 = objc_msgSend(v3, "isSecondaryConnection") ^ 1;
      else
        v40 = 0;
      v41 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "policySession"));
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dnsAgent"));
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "agentUUID"));
      v44 = (void *)NEVirtualInterfaceCopyName(objc_msgSend(v3, "virtualInterface"));
      v45 = v43;
      v46 = v44;
      v47 = v38;
      if (v41 && v45 && v46 && *(_DWORD *)(v41 + 8) == 1)
      {
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = sub_100035674;
        v102 = &unk_1000BDC20;
        v103 = v41;
        v104 = v45;
        v105 = v47;
        v107 = v40;
        v106 = v46;
        sub_10002C9C8((uint64_t)NESMPolicyMasterSession, buf);

      }
      v48 = 0;
      v49 = 0;
      v50 = 0;
      goto LABEL_29;
    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "DNSSettings"));
    v11 = objc_opt_class(NEDNSOverHTTPSSettings);
    isKindOfClass = objc_opt_isKindOfClass(v10, v11);

    if ((isKindOfClass & 1) != 0)
      goto LABEL_8;
    v52 = ne_log_obj(v8, v9);
    v53 = objc_claimAutoreleasedReturnValue(v52);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "%@: Setting DNS", buf, 0xCu);
    }

    sub_100024630(v3);
    v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "DNSSettings"));
    v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "domainName"));

    if (v55)
    {
      v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "DNSSettings"));
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "domainName"));
    }
    else
    {
      v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "protocol"));
      v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "DNSSettings"));
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "domainName"));

    }
    v58 = NEVirtualInterfaceSetDNSDomain(objc_msgSend(v3, "virtualInterface"), v50);
    if (!(_DWORD)v58)
    {
      v60 = ne_log_obj(v58, v59);
      v61 = objc_claimAutoreleasedReturnValue(v60);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v3;
        _os_log_error_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "%@: failed to set the DNS domain", buf, 0xCu);
      }

    }
    v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "DNSSettings"));
    v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "servers"));

    if (v63)
    {
      v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "DNSSettings"));
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "servers"));
    }
    else
    {
      v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "protocol"));
      v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "DNSSettings"));
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "servers"));

    }
    v66 = NEVirtualInterfaceSetDNSServers(objc_msgSend(v3, "virtualInterface"), v49);
    if (!(_DWORD)v66)
    {
      v68 = ne_log_obj(v66, v67);
      v69 = objc_claimAutoreleasedReturnValue(v68);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v3;
        _os_log_error_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "%@: failed to set the DNS servers", buf, 0xCu);
      }

    }
    v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "DNSSettings"));
    v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "searchDomains"));

    if (v71)
    {
      v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "DNSSettings"));
      v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "searchDomains"));
    }
    else
    {
      v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "protocol"));
      v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "DNSSettings"));
      v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "searchDomains"));

    }
    v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "DNSSettings"));
    v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "matchDomains"));

    if (v76)
    {
      v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "DNSSettings"));
      v47 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "matchDomains"));

      v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "DNSSettings"));
      v79 = objc_msgSend(v78, "matchDomainsNoSearch");
    }
    else
    {
      v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "protocol"));
      v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "DNSSettings"));
      v47 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v81, "matchDomains"));

      v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "protocol"));
      v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "DNSSettings"));
      v79 = objc_msgSend(v82, "matchDomainsNoSearch");

    }
    if (objc_msgSend(v3, "type") != 2)
      goto LABEL_68;
    if (v73)
    {
      if (objc_msgSend(v73, "count") || !v47)
      {
LABEL_68:
        v48 = v73;
LABEL_69:
        v84 = NEVirtualInterfaceSetDNSSearchDomains(objc_msgSend(v3, "virtualInterface"), v48);
        if (!(_DWORD)v84)
        {
          v86 = ne_log_obj(v84, v85);
          v87 = objc_claimAutoreleasedReturnValue(v86);
          if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v3;
            _os_log_error_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_ERROR, "%@: failed to set the DNS search domains", buf, 0xCu);
          }

        }
        if ((objc_msgSend(v3, "isSecondaryConnection") & 1) != 0
          || objc_msgSend(v3, "tunnelKind") == (id)2)
        {
          goto LABEL_30;
        }
        matched = NEVirtualInterfaceSetDNSSupplementalMatchDomains(objc_msgSend(v3, "virtualInterface"), v47);
        if (!(_DWORD)matched)
        {
          v90 = ne_log_obj(matched, v89);
          v91 = objc_claimAutoreleasedReturnValue(v90);
          if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v3;
            _os_log_error_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_ERROR, "%@: failed to set the supplemental match domains", buf, 0xCu);
          }

        }
        v92 = NEVirtualInterfaceSetDNSSupplementalMatchDomainsNoSearch(objc_msgSend(v3, "virtualInterface"), v79);
        if ((_DWORD)v92)
          goto LABEL_30;
        v94 = ne_log_obj(v92, v93);
        v41 = objc_claimAutoreleasedReturnValue(v94);
        if (os_log_type_enabled((os_log_t)v41, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v3;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v41, OS_LOG_TYPE_ERROR, "%@: failed to set the supplemental match domains NoSearch flag", buf, 0xCu);
        }
LABEL_29:

LABEL_30:
        goto LABEL_31;
      }
    }
    else if (!v47)
    {
      v48 = 0;
      goto LABEL_69;
    }
    if (objc_msgSend(v47, "count"))
      v83 = (char)v79;
    else
      v83 = 1;
    if ((v83 & 1) == 0)
    {
      v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", &stru_1000BD8C0));
      v48 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "filteredArrayUsingPredicate:", v95));

      v98 = ne_log_obj(v96, v97);
      v99 = objc_claimAutoreleasedReturnValue(v98);
      if (os_log_type_enabled(v99, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v3;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v48;
        _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_INFO, "%@: Using per-app match domains as search domains: %@", buf, 0x16u);
      }

      goto LABEL_69;
    }
    goto LABEL_68;
  }
  return result;
}

id sub_100027170(uint64_t a1)
{
  id result;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  void *v27;
  _UNKNOWN **v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  CFArrayRef v35;
  __int128 v36;
  CFIndex Count;
  CFIndex v38;
  CFIndex v39;
  CFIndex v40;
  const __CFString *v41;
  void *ValueAtIndex;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  const __CFString *v51;
  const __CFString *v52;
  uint64_t v53;
  uint64_t v54;
  CFIndex v55;
  void *v56;
  CFIndex v57;
  const __CFString *v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  void *v65;
  void *v66;
  id v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  void *v78;
  void *v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t Value;
  int v86;
  _BOOL4 v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  const __CFString *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  CFIndex v101;
  CFIndex v102;
  CFIndex v103;
  CFIndex v104;
  void *v105;
  const __CFString *v106;
  const __CFNumber *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  void *v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  uint64_t v122;
  const char *v123;
  void *v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  const __CFString *v135;
  id v136;
  uint64_t v137;
  id v138;
  id v139;
  id v140;
  void *v141;
  id v142;
  id v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  NSNumber *number;
  CFNumberRef v150;
  const __CFNumber *v151;
  CFArrayRef theArray;
  CFArrayRef theArraya;
  uint64_t v154;
  void *v155;
  CFArrayRef v156;
  CFArrayRef v157;
  uint64_t Type;
  _BOOL4 v159;
  uint64_t v160;
  int valuePtr;
  uint8_t buf[4];
  void *v163;
  __int16 v164;
  uint64_t v165;
  __int16 v166;
  const __CFString *v167;

  kdebug_trace(726990952, 0, 0, 0, 0);
  v160 = 0;
  result = objc_msgSend(*(id *)(a1 + 32), "virtualInterface");
  if (result)
  {
    v3 = *(void **)(a1 + 32);
    if (!v3)
    {
      v145 = 0;
LABEL_125:
      if (NEVirtualInterfaceUpdateAdHocServiceReturnChanges(objc_msgSend(v145, "virtualInterface"), &v160, *(unsigned __int8 *)(a1 + 40)))return (id)v160;
      else
        return 0;
    }
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pluginConfigurationEntities"));
    Type = NEVirtualInterfaceGetType(objc_msgSend(v3, "virtualInterface"));
    v6 = ne_log_obj(Type, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v163 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%@: Setting up the virtual interface", buf, 0xCu);
    }

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "tunnelRemoteAddress"));
    if (!v8)
    {
LABEL_19:
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "IPv4Settings"));

      v28 = &AnalyticsSendEventLazy_ptr;
      v154 = a1;
      v155 = v4;
      if (!v27)
        goto LABEL_67;
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "IPv4Settings"));
      theArray = (CFArrayRef)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "includedRoutes"));

      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "IPv4Settings"));
      v150 = (CFNumberRef)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "excludedRoutes"));

      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "IPv4Settings"));
      number = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v31, "hasDefaultRoute"));

      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "IPv4Settings"));
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "addresses"));

      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "IPv4Settings"));
      v35 = (CFArrayRef)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "subnetMasks"));

      if (v33)
      {
        Count = CFArrayGetCount((CFArrayRef)v33);
        if (v35)
        {
LABEL_22:
          v38 = CFArrayGetCount(v35);
          goto LABEL_25;
        }
      }
      else
      {
        Count = 0;
        if (v35)
          goto LABEL_22;
      }
      v38 = 0;
LABEL_25:
      if (Count < 1)
      {
        v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "IPv4Settings"));
        v81 = objc_msgSend(v80, "configMethod");

        if (v81 == (id)1)
        {
          v82 = NEVirtualInterfaceSetIPv4ConfigurationMethod(objc_msgSend(v3, "virtualInterface"), 2);
          if (!(_DWORD)v82)
          {
            v84 = ne_log_obj(v82, v83);
            v77 = objc_claimAutoreleasedReturnValue(v84);
            if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
            {
              v146 = NEVirtualInterfaceGetType(objc_msgSend(v3, "virtualInterface"));
              *(_DWORD *)buf = 138412546;
              v163 = v3;
              v164 = 2048;
              v165 = v146;
              _os_log_error_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "%@: failed to set the configuration method to DHCP for interface with type %ld", buf, 0x16u);
            }
            goto LABEL_59;
          }
        }
      }
      else
      {
        v39 = 0;
        v40 = 0;
        *(_QWORD *)&v36 = 138412546;
        v148 = v36;
        v41 = CFSTR("255.0.0.0");
        v156 = v35;
        do
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex((CFArrayRef)v33, v39);
          if (!v39 && Type == 1)
          {
            v43 = NEVirtualInterfaceSetIPv4Router(objc_msgSend(v3, "virtualInterface"), ValueAtIndex);
            if (!(_DWORD)v43)
            {
              v45 = ne_log_obj(v43, v44);
              v46 = objc_claimAutoreleasedReturnValue(v45);
              if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v163 = v3;
                _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "%@: failed to set the IPv4 router to remote address", buf, 0xCu);
              }

              v49 = ne_log_obj(v47, v48);
              v50 = objc_claimAutoreleasedReturnValue(v49);
              if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = v148;
                v163 = v3;
                v164 = 2112;
                v165 = (uint64_t)ValueAtIndex;
                _os_log_debug_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "%@: failed to set the IPv4 router to %@", buf, 0x16u);
              }

            }
          }
          v51 = 0;
          if (v35 && v40 < v38)
            v51 = (const __CFString *)CFArrayGetValueAtIndex(v35, v40++);
          if (v51)
            v52 = v51;
          else
            v52 = v41;
          v53 = NEVirtualInterfaceAddAddress(objc_msgSend(v3, "virtualInterface", v148), ValueAtIndex, v52);
          if (!(_DWORD)v53)
          {
            v55 = Count;
            v56 = v33;
            v57 = v38;
            v58 = v41;
            v59 = ne_log_obj(v53, v54);
            v60 = objc_claimAutoreleasedReturnValue(v59);
            if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v163 = v3;
              _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "%@: failed to add IPv4 address and netmask", buf, 0xCu);
            }

            v63 = ne_log_obj(v61, v62);
            v64 = objc_claimAutoreleasedReturnValue(v63);
            if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412802;
              v163 = v3;
              v164 = 2112;
              v165 = (uint64_t)ValueAtIndex;
              v166 = 2112;
              v167 = v52;
              _os_log_debug_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "%@: failed to add address %@ netmask %@", buf, 0x20u);
            }

            v41 = v58;
            v38 = v57;
            v33 = v56;
            Count = v55;
            v35 = v156;
          }
          ++v39;
        }
        while (Count != v39);
        v4 = v155;
        v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v155, "IPv4Settings"));
        v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "router"));

        v28 = &AnalyticsSendEventLazy_ptr;
        if (v66)
        {
          if (Type == 3)
          {
            v67 = objc_msgSend(v3, "virtualInterface");
            v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v155, "IPv4Settings"));
            v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "router"));
            LODWORD(v67) = NEVirtualInterfaceSetIPv4Router(v67, v69);

            if (!(_DWORD)v67)
            {
              v72 = ne_log_obj(v70, v71);
              v73 = objc_claimAutoreleasedReturnValue(v72);
              if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v163 = v3;
                _os_log_error_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "%@: failed to set the IPv4 router", buf, 0xCu);
              }

              v76 = ne_log_obj(v74, v75);
              v77 = objc_claimAutoreleasedReturnValue(v76);
              if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
              {
                v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v155, "IPv4Settings"));
                v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "router"));
                *(_DWORD *)buf = v148;
                v163 = v3;
                v164 = 2112;
                v165 = (uint64_t)v79;
                _os_log_debug_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "%@: failed to set the IPv4 router to %@", buf, 0x16u);

              }
LABEL_59:

            }
          }
        }
      }
      if ((objc_msgSend(v3, "isSecondaryConnection") & 1) == 0)
      {
        sub_1000285D4(v3, theArray, 0, 2);
        sub_1000285D4(v3, v150, 1u, 2);
        if (number)
        {
          valuePtr = 0;
          Value = CFNumberGetValue((CFNumberRef)number, kCFNumberIntType, &valuePtr);
          v86 = valuePtr;
          v87 = valuePtr != 0;
          v89 = ne_log_obj(Value, v88);
          v90 = objc_claimAutoreleasedReturnValue(v89);
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
          {
            v91 = CFSTR("not primary");
            if (v86)
              v91 = CFSTR("primary");
            *(_DWORD *)buf = 138412546;
            v163 = v3;
            v164 = 2112;
            v165 = (uint64_t)v91;
            _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "%@: %@ for IPv4", buf, 0x16u);
          }

LABEL_68:
          v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "IPv6Settings"));

          if (!v92)
          {
            a1 = v154;
            goto LABEL_110;
          }
          v159 = v87;
          v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "IPv6Settings"));
          v157 = (CFArrayRef)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "includedRoutes"));

          v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "IPv6Settings"));
          theArraya = (CFArrayRef)objc_claimAutoreleasedReturnValue(objc_msgSend(v94, "excludedRoutes"));

          v95 = v28[222];
          v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "IPv6Settings"));
          v151 = (const __CFNumber *)objc_msgSend(v95, "numberWithBool:", objc_msgSend(v96, "hasDefaultRoute"));

          v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "IPv6Settings"));
          v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v97, "addresses"));

          v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "IPv6Settings"));
          v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "networkPrefixLengths"));

          if (v98)
          {
            v101 = CFArrayGetCount((CFArrayRef)v98);
            if (v100)
            {
LABEL_71:
              v102 = CFArrayGetCount((CFArrayRef)v100);
              goto LABEL_75;
            }
          }
          else
          {
            v101 = 0;
            if (v100)
              goto LABEL_71;
          }
          v102 = 0;
LABEL_75:
          if (v101 >= 1)
          {
            v103 = 0;
            v104 = 0;
            while (1)
            {
              v105 = (void *)CFArrayGetValueAtIndex((CFArrayRef)v98, v103);
              v106 = 0;
              if (v100 && v104 < v102)
              {
                v107 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v100, v104);
                *(_DWORD *)buf = 128;
                CFNumberGetValue(v107, kCFNumberIntType, buf);
                v106 = (const __CFString *)NECreateIPv6AddressMaskStringFromPrefix(*(unsigned int *)buf);
                ++v104;
              }
              v108 = NEVirtualInterfaceAddAddress(objc_msgSend(v3, "virtualInterface"), v105, v106);
              if (!(_DWORD)v108)
                break;
              if (v106)
                goto LABEL_82;
LABEL_83:
              if (v101 == ++v103)
                goto LABEL_99;
            }
            v110 = ne_log_obj(v108, v109);
            v111 = objc_claimAutoreleasedReturnValue(v110);
            if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v163 = v3;
              _os_log_error_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_ERROR, "%@: failed to add IPv6 address and netmask", buf, 0xCu);
            }

            v114 = ne_log_obj(v112, v113);
            v115 = objc_claimAutoreleasedReturnValue(v114);
            if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412802;
              v163 = v3;
              v164 = 2112;
              v165 = (uint64_t)v105;
              v166 = 2112;
              v167 = v106;
              _os_log_debug_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEBUG, "%@: failed to add address %@ netmask %@", buf, 0x20u);
            }

            if (!v106)
              goto LABEL_83;
LABEL_82:
            CFRelease(v106);
            goto LABEL_83;
          }
          v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "IPv6Settings"));
          v117 = objc_msgSend(v116, "configMethod");

          if (v117 == (id)1)
          {
            v118 = NEVirtualInterfaceSetIPv6ConfigurationMethod(objc_msgSend(v3, "virtualInterface"), 2);
            if ((_DWORD)v118)
              goto LABEL_99;
            v120 = ne_log_obj(v118, v119);
            v121 = objc_claimAutoreleasedReturnValue(v120);
            if (!os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
              goto LABEL_98;
            v122 = NEVirtualInterfaceGetType(objc_msgSend(v3, "virtualInterface"));
            *(_DWORD *)buf = 138412546;
            v163 = v3;
            v164 = 2048;
            v165 = v122;
            v123 = "%@: failed to set the configuration method to Automatic for interface with type %ld";
          }
          else
          {
            v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "IPv6Settings"));
            v125 = objc_msgSend(v124, "configMethod");

            if (v125 != (id)3
              || (v126 = NEVirtualInterfaceSetIPv6ConfigurationMethod(objc_msgSend(v3, "virtualInterface"), 3),
                  (_DWORD)v126))
            {
LABEL_99:
              if ((objc_msgSend(v3, "isSecondaryConnection") & 1) != 0)
              {
                a1 = v154;
                v4 = v155;
                v87 = v159;
              }
              else
              {
                sub_1000285D4(v3, v157, 0, 30);
                sub_1000285D4(v3, theArraya, 1u, 30);
                v87 = v159;
                if (v151)
                  v129 = v159;
                else
                  v129 = 1;
                a1 = v154;
                v4 = v155;
                if ((v129 & 1) == 0)
                {
                  valuePtr = 0;
                  v130 = CFNumberGetValue(v151, kCFNumberIntType, &valuePtr);
                  v131 = valuePtr;
                  v87 = valuePtr != 0;
                  v133 = ne_log_obj(v130, v132);
                  v134 = objc_claimAutoreleasedReturnValue(v133);
                  if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
                  {
                    v135 = CFSTR("not primary");
                    if (v131)
                      v135 = CFSTR("primary");
                    *(_DWORD *)buf = 138412546;
                    v163 = v3;
                    v164 = 2112;
                    v165 = (uint64_t)v135;
                    _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEFAULT, "%@: %@ for IPv6", buf, 0x16u);
                  }

                }
              }
LABEL_110:
              if ((objc_msgSend(v3, "isSecondaryConnection") & 1) != 0)
              {
                NEVirtualInterfaceSetAsPrimary(objc_msgSend(v3, "virtualInterface"), 0);
                v136 = objc_msgSend(v3, "virtualInterface");
                v137 = 1;
              }
              else
              {
                v138 = objc_msgSend(v3, "tunnelKind");
                v139 = objc_msgSend(v3, "virtualInterface");
                if (!v87)
                {
                  NEVirtualInterfaceSetAsPrimary(v139, 0);
                  v140 = objc_msgSend(v3, "virtualInterface");
                  if (v138 == (id)1)
                    NEVirtualInterfaceSetRankLast(v140, 1);
                  else
                    NEVirtualInterfaceSetRankNever(v140, 1);
                  v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "configuration"));
                  v142 = objc_msgSend(v141, "grade");

                  v143 = objc_msgSend(v3, "virtualInterface");
                  if (v142 == (id)1)
                    v144 = 100;
                  else
                    v144 = 200;
                  NEVirtualInterfaceSetServiceIndex(v143, v144);
                  goto LABEL_124;
                }
                if (v138 != (id)1)
                {
                  NEVirtualInterfaceSetRankNever(v139, 1);
                  goto LABEL_124;
                }
                NEVirtualInterfaceSetAsPrimary(v139, 1);
                v136 = objc_msgSend(v3, "virtualInterface");
                v137 = 0;
              }
              NEVirtualInterfaceSetRankLast(v136, v137);
LABEL_124:

              v145 = *(void **)(a1 + 32);
              goto LABEL_125;
            }
            v128 = ne_log_obj(v126, v127);
            v121 = objc_claimAutoreleasedReturnValue(v128);
            if (!os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
            {
LABEL_98:

              goto LABEL_99;
            }
            v147 = NEVirtualInterfaceGetType(objc_msgSend(v3, "virtualInterface"));
            *(_DWORD *)buf = 138412546;
            v163 = v3;
            v164 = 2048;
            v165 = v147;
            v123 = "%@: failed to set the configuration method to LinkLocalOnly for interface with type %ld";
          }
          _os_log_error_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_ERROR, v123, buf, 0x16u);
          goto LABEL_98;
        }
      }
LABEL_67:
      v87 = 0;
      goto LABEL_68;
    }
    if (Type != 3)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "tunnelOverheadBytes"));
      v10 = objc_msgSend(v9, "intValue");

      v11 = objc_msgSend(v3, "getVirtualInterfaceMTU:", v4);
      if ((int)v11 >= 1)
      {
        v12 = (int)v11;
        v13 = NEVirtualInterfaceSetMTU(objc_msgSend(v3, "virtualInterface"), v11);
        if ((_DWORD)v13)
          goto LABEL_15;
        v15 = ne_log_obj(v13, v14);
        v16 = objc_claimAutoreleasedReturnValue(v15);
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          goto LABEL_14;
        *(_DWORD *)buf = 138412546;
        v163 = v3;
        v164 = 1024;
        LODWORD(v165) = v12;
        v17 = "%@: failed to set the MTU to %d";
        goto LABEL_130;
      }
      if ((int)v10 >= 1)
      {
        v18 = NEVirtualInterfaceSetMTUOverhead(objc_msgSend(v3, "virtualInterface"), v10);
        if (!(_DWORD)v18)
        {
          v20 = ne_log_obj(v18, v19);
          v16 = objc_claimAutoreleasedReturnValue(v20);
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
LABEL_14:

            goto LABEL_15;
          }
          *(_DWORD *)buf = 138412546;
          v163 = v3;
          v164 = 1024;
          LODWORD(v165) = (_DWORD)v10;
          v17 = "%@: failed to set the MTU overhead to %d";
LABEL_130:
          _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, v17, buf, 0x12u);
          goto LABEL_14;
        }
      }
    }
LABEL_15:
    v21 = objc_msgSend(v3, "virtualInterface");
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "tunnelRemoteAddress"));
    LODWORD(v21) = NEVirtualInterfaceSetVPNServerAddress(v21, v22);

    if (!(_DWORD)v21)
    {
      v25 = ne_log_obj(v23, v24);
      v26 = objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v163 = v3;
        _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%@: failed to set the VPN server's remote address", buf, 0xCu);
      }

    }
    goto LABEL_19;
  }
  return result;
}

void sub_100027FE4(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  void *v11;
  __CFDictionary *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  xpc_object_t v22;
  void *v23;
  void *v24;
  xpc_object_t v25;
  void *v26;
  void *v27;
  void *v28;
  __CFDictionary *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t buf[16];
  unsigned __int8 v50[21];
  unsigned __int8 uu[8];
  uint64_t v52;

  if (!(_DWORD)a2)
  {
    v13 = ne_log_obj(a1, a2);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v42 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v42;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%@: failed to set the tunnel configuration", buf, 0xCu);
    }
    goto LABEL_9;
  }
  v4 = objc_msgSend(*(id *)(a1 + 32), "parentType");
  if (v4 != (id)1)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
    sub_10002EE84((uint64_t)v6);

    v7 = *(void **)(a1 + 32);
    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pluginConfigurationEntities"));
      v9 = xpc_dictionary_create(0, 0, 0);
      if (NEVirtualInterfaceIsPrimary(objc_msgSend(v7, "virtualInterface")))
      {
        v10 = xpc_dictionary_create(0, 0, 0);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "IPv4Settings"));
        if (v11)
          v12 = +[NESMSession copyDefaultRouteCacheIsIPv6:](NESMSession, "copyDefaultRouteCacheIsIPv6:", 0);
        else
          v12 = 0;

        *(_QWORD *)buf = v12;
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "IPv6Settings"));
        if (v28)
          v29 = +[NESMSession copyDefaultRouteCacheIsIPv6:](NESMSession, "copyDefaultRouteCacheIsIPv6:", 1);
        else
          v29 = 0;

        *(_QWORD *)uu = v29;
        if (v12)
        {
          v30 = (void *)_CFXPCCreateXPCObjectFromCFObject(v12);
          xpc_dictionary_set_value(v10, "ipv4-subnets", v30);

        }
        if (v29)
        {
          v31 = (void *)_CFXPCCreateXPCObjectFromCFObject(v29);
          xpc_dictionary_set_value(v10, "ipv6-subnets", v31);

        }
        myCFRelease(buf);
        myCFRelease(uu);
        xpc_dictionary_set_value(v9, "included-routes", v10);

      }
      else
      {
        *(_QWORD *)buf = NEVirtualInterfaceCopyIPv4Routes(objc_msgSend(v7, "virtualInterface"), 0);
        *(_QWORD *)uu = NEVirtualInterfaceCopyIPv4Routes(objc_msgSend(v7, "virtualInterface"), 1);
        v48 = NEVirtualInterfaceCopyIPv6Routes(objc_msgSend(v7, "virtualInterface"), 0);
        v47 = NEVirtualInterfaceCopyIPv6Routes(objc_msgSend(v7, "virtualInterface"), 1);
        v18 = +[NESMSession copyRouteCacheFromRoutes:isIPv6:](NESMSession, "copyRouteCacheFromRoutes:isIPv6:", *(_QWORD *)buf, 0);
        v46 = v18;
        v19 = +[NESMSession copyRouteCacheFromRoutes:isIPv6:](NESMSession, "copyRouteCacheFromRoutes:isIPv6:", *(_QWORD *)uu, 0);
        v45 = v19;
        v20 = +[NESMSession copyRouteCacheFromRoutes:isIPv6:](NESMSession, "copyRouteCacheFromRoutes:isIPv6:", v48, 1);
        v44 = v20;
        v21 = +[NESMSession copyRouteCacheFromRoutes:isIPv6:](NESMSession, "copyRouteCacheFromRoutes:isIPv6:", v47, 1);
        v43 = v21;
        myCFRelease(buf);
        myCFRelease(uu);
        myCFRelease(&v48);
        myCFRelease(&v47);
        if (v18 | v20)
        {
          v22 = xpc_dictionary_create(0, 0, 0);
          if (v18)
          {
            v23 = (void *)_CFXPCCreateXPCObjectFromCFObject(v18);
            xpc_dictionary_set_value(v22, "ipv4-subnets", v23);

          }
          if (v20)
          {
            v24 = (void *)_CFXPCCreateXPCObjectFromCFObject(v20);
            xpc_dictionary_set_value(v22, "ipv6-subnets", v24);

          }
          xpc_dictionary_set_value(v9, "included-routes", v22);

        }
        if (v19 | v21)
        {
          v25 = xpc_dictionary_create(0, 0, 0);
          if (v19)
          {
            v26 = (void *)_CFXPCCreateXPCObjectFromCFObject(v19);
            xpc_dictionary_set_value(v25, "ipv4-subnets", v26);

          }
          if (v21)
          {
            v27 = (void *)_CFXPCCreateXPCObjectFromCFObject(v21);
            xpc_dictionary_set_value(v25, "ipv6-subnets", v27);

          }
          xpc_dictionary_set_value(v9, "excluded-routes", v25);

        }
        myCFRelease(&v46);
        myCFRelease(&v45);
        myCFRelease(&v44);
        myCFRelease(&v43);
      }
      *(_QWORD *)uu = 0;
      v52 = 0;
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "configuration"));
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "identifier"));
      objc_msgSend(v33, "getUUIDBytes:", uu);

      *(_OWORD *)buf = 0u;
      memset(v50, 0, sizeof(v50));
      uuid_unparse(uu, (char *)buf);
      NEHelperCacheSetRoutes(buf, v9);

      v34 = *(void **)(a1 + 32);
      if (v34)
      {
        v4 = objc_msgSend(*(id *)(a1 + 32), "isSecondaryConnection");
        if ((v4 & 1) == 0)
        {
          v4 = objc_msgSend(v34, "tunnelKind");
          if (v4 != (id)2)
          {
            v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "pluginConfigurationEntities"));
            v35 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject DNSSettings](v14, "DNSSettings"));
            v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "matchDomains"));

            if (!v36)
            {
              v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "protocol"));
              v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "DNSSettings"));
              v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "matchDomains"));

            }
            *(_QWORD *)uu = 0;
            v52 = 0;
            v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "configuration"));
            v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "identifier"));
            objc_msgSend(v40, "getUUIDBytes:", uu);

            *(_OWORD *)buf = 0u;
            memset(v50, 0, sizeof(v50));
            uuid_unparse(uu, (char *)buf);
            v41 = (void *)_CFXPCCreateXPCObjectFromCFObject(v36);
            NEHelperCacheSetMatchDomains(buf, v41);

LABEL_9:
          }
        }
      }
    }
  }
  v15 = ne_log_obj(v4, v5);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    v17 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%@: Finished setting the tunnel configuration", buf, 0xCu);
  }

  sub_100025150(*(void **)(a1 + 32), a2);
}

uint64_t sub_1000285D4(void *a1, CFArrayRef theArray, unsigned int a3, int a4)
{
  CFIndex Count;
  uint64_t v8;
  CFIndex v9;
  CFIndex v10;
  const __CFString *v11;
  char v12;
  const void *ValueAtIndex;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  const char *v27;
  const void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const __CFString *v41;
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  const __CFString *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  void *v50;
  __int16 v51;
  void *v52;

  if (!theArray)
    return 1;
  Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    v9 = Count;
    v10 = 0;
    v11 = CFSTR("included");
    if (a3)
      v11 = CFSTR("excluded");
    v41 = v11;
    v12 = 1;
    while (a4 != 30)
    {
      if (a4 != 2)
      {
        v39 = ne_log_obj(Count, v8);
        v14 = objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          v44 = a1;
          v45 = 1024;
          LODWORD(v46) = a4;
          _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%@: INET Family (%d) not supported", buf, 0x12u);
        }
        goto LABEL_22;
      }
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v10);
      v14 = objc_claimAutoreleasedReturnValue(ValueAtIndex);
      if ((-[NSObject isDefaultRoute](v14, "isDefaultRoute") & 1) != 0)
        goto LABEL_23;
      v15 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject destinationAddress](v14, "destinationAddress"));

      v16 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject destinationSubnetMask](v14, "destinationSubnetMask"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject gatewayAddress](v14, "gatewayAddress"));

      v18 = NEVirtualInterfaceAddIPv4Route(objc_msgSend(a1, "virtualInterface"), v15, v16, v17, a3);
      if ((_DWORD)v18)
        goto LABEL_23;
      v20 = ne_log_obj(v18, v19);
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v44 = a1;
        _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%@: failed to add an IPv4 route", buf, 0xCu);
      }

      v24 = ne_log_obj(v22, v23);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138413314;
        v44 = a1;
        v45 = 2112;
        v46 = v41;
        v47 = 2112;
        v48 = v15;
        v49 = 2112;
        v50 = v16;
        v51 = 2112;
        v52 = v17;
        v26 = v25;
        v27 = "%@: failed to add an IPv4 %@ route of %@/%@ -> %@";
LABEL_26:
        _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, v27, buf, 0x34u);
      }
LABEL_19:

LABEL_22:
      v12 = 0;
LABEL_23:

      if (v9 == ++v10)
        return v12 & 1;
    }
    v28 = CFArrayGetValueAtIndex(theArray, v10);
    v14 = objc_claimAutoreleasedReturnValue(v28);
    if ((-[NSObject isDefaultRoute](v14, "isDefaultRoute") & 1) != 0)
      goto LABEL_23;
    v29 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject destinationAddress](v14, "destinationAddress"));

    v30 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject destinationNetworkPrefixLength](v14, "destinationNetworkPrefixLength"));
    v31 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject gatewayAddress](v14, "gatewayAddress"));

    v32 = NEVirtualInterfaceAddIPv6Route(objc_msgSend(a1, "virtualInterface"), v29, v30, v31, a3);
    if ((_DWORD)v32)
      goto LABEL_23;
    v34 = ne_log_obj(v32, v33);
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v44 = a1;
      _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%@: failed to add an IPv6 route", buf, 0xCu);
    }

    v38 = ne_log_obj(v36, v37);
    v25 = objc_claimAutoreleasedReturnValue(v38);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      goto LABEL_19;
    *(_DWORD *)buf = 138413314;
    v44 = a1;
    v45 = 2112;
    v46 = v41;
    v47 = 2112;
    v48 = v29;
    v49 = 2112;
    v50 = v30;
    v51 = 2112;
    v52 = v31;
    v26 = v25;
    v27 = "%@: failed to add an IPv6 %@ route of %@/%@ -> %@";
    goto LABEL_26;
  }
  v12 = 1;
  return v12 & 1;
}

BOOL sub_1000289C0(id a1, id a2, NSDictionary *a3)
{
  return objc_msgSend(a2, "length", a3) != 0;
}

void sub_1000289E4(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NESetConfigurationCompletionOperation *v5;
  const char *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  void *v13;
  id Property;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  id v24;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "setConfigurationCompletionHandlerArray"));

    if (v2)
    {
      v5 = objc_alloc_init(NESetConfigurationCompletionOperation);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "pluginCompletionHandler"));
      if (v5)
        objc_setProperty_atomic_copy(v5, v6, v7, 8);

      v8 = objc_msgSend(a1, "setPluginCompletionHandler:", 0);
      v10 = ne_log_obj(v8, v9);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "interfaceName"));
        if (v5)
          Property = objc_getProperty(v5, v12, 8, 1);
        else
          Property = 0;
        v15 = objc_retainBlock(Property);
        v19 = 138412802;
        v20 = a1;
        v21 = 2112;
        v22 = v13;
        v23 = 2112;
        v24 = v15;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%@: config request: pushing handler [%@] %@", (uint8_t *)&v19, 0x20u);

      }
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "setConfigurationCompletionHandlerArray"));
      objc_msgSend(v16, "addObject:", v5);

    }
    else
    {
      v17 = ne_log_obj(v3, v4);
      v5 = (NESetConfigurationCompletionOperation *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(&v5->super, OS_LOG_TYPE_ERROR))
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "interfaceName"));
        v19 = 138412546;
        v20 = a1;
        v21 = 2112;
        v22 = v18;
        _os_log_error_impl((void *)&_mh_execute_header, &v5->super, OS_LOG_TYPE_ERROR, "%@: config request (push) handler array nil [%@]", (uint8_t *)&v19, 0x16u);

      }
    }

  }
}

uint64_t sub_100028BD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  void *v19;
  NSObject *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  NSObject *v25;
  __int16 v26;
  void *v27;

  if (objc_msgSend(*(id *)(a1 + 32), "virtualInterface"))
  {
    v2 = NEVirtualInterfaceSetDelegateInterface(objc_msgSend(*(id *)(a1 + 32), "virtualInterface"), *(_QWORD *)(a1 + 40));
    if (!(_DWORD)v2)
    {
      v17 = ne_log_obj(v2, v3);
      v6 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v19 = *(void **)(a1 + 32);
        v20 = *(NSObject **)(a1 + 40);
        v22 = 138412546;
        v23 = v19;
        v24 = 2112;
        v25 = v20;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%@: failed to set delegate interface to %@", (uint8_t *)&v22, 0x16u);
      }
      goto LABEL_13;
    }
    v4 = *(void **)(a1 + 40);
    if (v4)
    {
      v5 = *(void **)(a1 + 32);
      v6 = v4;
      if (v5)
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pluginConfigurationEntities"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "tunnelRemoteAddress"));

        if (v8)
        {
          v9 = NEGetAddressFamilyFromString(v8);
          if (v9)
          {
            v10 = v9;
            v11 = objc_retainAutorelease(v6);
            v12 = (void *)NECopyInterfaceAddress(-[NSObject UTF8String](v11, "UTF8String"), v10);
            objc_msgSend(v5, "setDelegateInterfaceAddress:", v12);

            v15 = ne_log_obj(v13, v14);
            v16 = objc_claimAutoreleasedReturnValue(v15);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "delegateInterfaceAddress"));
              v22 = 138412802;
              v23 = v5;
              v24 = 2112;
              v25 = v11;
              v26 = 2112;
              v27 = v21;
              _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%@: IP address for %@ is %@", (uint8_t *)&v22, 0x20u);

            }
          }
        }

      }
LABEL_13:

    }
  }
  return 0;
}

void sub_100028DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if ((a2 & 1) == 0)
  {
    v3 = ne_log_obj(a1, a2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138412290;
      v7 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@: failed to update the service in the dynamic store after manager set the delegate interface", (uint8_t *)&v6, 0xCu);
    }

  }
}

void sub_100028E68(uint64_t a1, void *a2, int a3, void *a4, void *a5)
{
  id v9;
  __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  const __CFString *v17;
  const __CFString *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  const char *v34;
  void *v35;
  uint64_t v36;
  id Property;
  const char *v38;
  void *v39;
  id v40;
  const char *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  int v59;
  void *v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  _BYTE v64[10];
  _BYTE v65[10];
  __int16 v66;
  const __CFString *v67;

  v9 = a2;
  v10 = a4;
  v11 = a5;
  v13 = ne_log_obj(v11, v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    v15 = *(void **)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    v17 = CFSTR("nil");
    if (v10)
      v18 = v10;
    else
      v18 = CFSTR("nil");
    if (v11)
      v17 = v11;
    v59 = 138413570;
    v60 = v15;
    v61 = 2112;
    v62 = v16;
    v63 = 1024;
    *(_DWORD *)v64 = (_DWORD)v9;
    *(_WORD *)&v64[4] = 1024;
    *(_DWORD *)&v64[6] = a3;
    *(_WORD *)v65 = 2112;
    *(_QWORD *)&v65[2] = v18;
    v66 = 2112;
    v67 = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%@: VPN Slice request callback - sliceUUID %@ : context %X type %d slice-ifname %@ error %@", (uint8_t *)&v59, 0x36u);
  }

  if (v11)
  {
    v21 = ne_log_obj(v19, v20);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v51 = *(void **)(a1 + 32);
      v52 = *(_QWORD *)(a1 + 40);
      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "server"));
      v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "primaryPhysicalInterface"));
      v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "interfaceName"));
      v59 = 138413058;
      v60 = v51;
      v61 = 2112;
      v62 = v52;
      v63 = 2112;
      *(_QWORD *)v64 = v55;
      *(_WORD *)&v64[8] = 2112;
      *(_QWORD *)v65 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%@: VPN Slice - Failed to request slice for sliceUUID %@ - fallback to default interface %@ <%@>", (uint8_t *)&v59, 0x2Au);

    }
    v23 = *(void **)(a1 + 32);
    v24 = *(unsigned int *)(a1 + 64);
    v26 = *(void **)(a1 + 48);
    v25 = *(void **)(a1 + 56);
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "server"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "primaryPhysicalInterface"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "interfaceName"));
    sub_100022920(v23, v26, v24, v25, v29);

    goto LABEL_30;
  }
  v30 = *(_QWORD *)(a1 + 32);
  if (v30)
  {
    *(_DWORD *)(v30 + 360) = a3;
    v31 = *(void **)(a1 + 32);
    if (v10)
    {
LABEL_14:
      if (v31)
        objc_setProperty_atomic(v31, v20, v10, 496);
      v32 = ne_log_obj(v31, v20);
      v33 = objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        v35 = *(void **)(a1 + 32);
        v36 = *(_QWORD *)(a1 + 40);
        if (v35)
          Property = objc_getProperty(*(id *)(a1 + 32), v34, 496, 1);
        else
          Property = 0;
        v59 = 138412802;
        v60 = v35;
        v61 = 2112;
        v62 = v36;
        v63 = 2112;
        *(_QWORD *)v64 = Property;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "%@: VPN Slice request completed - sliceUUID %@ : %@ ", (uint8_t *)&v59, 0x20u);
      }

      v39 = *(void **)(a1 + 32);
      if (v39)
        v40 = objc_getProperty(*(id *)(a1 + 32), v38, 496, 1);
      else
        v40 = 0;
      objc_msgSend(v39, "setDelegateInterfaceName:", v40);
      v42 = *(void **)(a1 + 32);
      v43 = *(unsigned int *)(a1 + 64);
      v45 = *(void **)(a1 + 48);
      v44 = *(void **)(a1 + 56);
      if (v42)
      {
        v46 = objc_getProperty(v42, v41, 496, 1);
        v47 = v42;
        v48 = v45;
        v49 = v43;
        v50 = v44;
      }
      else
      {
        v47 = 0;
        v48 = v45;
        v49 = v43;
        v50 = v44;
        v46 = 0;
      }
      sub_100022920(v47, v48, v49, v50, v46);
      goto LABEL_30;
    }
  }
  else
  {
    v31 = 0;
    if (v10)
      goto LABEL_14;
  }
  if (v31)
  {
    objc_setProperty_atomic(v31, v20, *(id *)(a1 + 48), 504);
    v57 = *(_QWORD *)(a1 + 32);
    if (v57)
    {
      *(_DWORD *)(v57 + 364) = *(_DWORD *)(a1 + 64);
      v58 = *(void **)(a1 + 32);
      if (v58)
        objc_setProperty_atomic(v58, v56, *(id *)(a1 + 56), 512);
    }
  }
LABEL_30:

}

void sub_10002922C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t IsVPN;
  int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint8_t buf[16];
  uint8_t v23[16];

  v2 = objc_msgSend(*(id *)(a1 + 32), "parentType");
  v3 = *(void **)(a1 + 32);
  if (v2 == (id)1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "interfaceName"));
    objc_msgSend(v3, "setDelegateInterfaceName:", v4);

  }
  else
  {
    v5 = objc_msgSend(*(id *)(a1 + 32), "tunnelKind");
    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "server"));
    v8 = v7;
    if (v5 == (id)2)
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "primaryCellularInterface"));
    else
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "primaryPhysicalInterface"));
    v10 = v9;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "interfaceName"));
    objc_msgSend(v6, "setDelegateInterfaceName:", v11);

    sub_1000260FC(*(void **)(a1 + 32));
  }
  IsVPN = NEVirtualInterfaceIsVPN(objc_msgSend(*(id *)(a1 + 32), "virtualInterface"), 1);
  v13 = IsVPN;
  v15 = ne_log_obj(IsVPN, v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  v17 = v16;
  if (v13)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Marked the virtual interface as VPN", buf, 2u);
    }
  }
  else if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Failed to mark the virtual interface as VPN", v23, 2u);
  }

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "protocol"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "identifier"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "UUIDString"));

  if (objc_msgSend(*(id *)(a1 + 32), "tunnelKind") == (id)2)
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-FB"), v20));
    NEVirtualInterfaceSetServiceID(objc_msgSend(*(id *)(a1 + 32), "virtualInterface"), v21);

  }
  else
  {
    NEVirtualInterfaceSetServiceID(objc_msgSend(*(id *)(a1 + 32), "virtualInterface"), v20);
  }

}

uint64_t sub_100029424(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t v11[16];

  if ((_DWORD)a2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
    v4 = *(_QWORD *)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "controlSocket"));
    v6 = objc_msgSend(v5, "fileDescriptor");
    v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "name")));
    objc_msgSend(*(id *)(a1 + 32), "setVirtualInterface:", NEVirtualInterfaceCreateUserEthernet(kCFAllocatorDefault, v3, v4, v6, objc_msgSend(v7, "UTF8String"), objc_msgSend(*(id *)(a1 + 40), "userEthernetController")));

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v8 = ne_log_obj(a1, a2);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v11 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to create a user ethernet interface", v11, 2u);
    }

  }
  return (*(uint64_t (**)(_QWORD, id))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), objc_msgSend(*(id *)(a1 + 32), "virtualInterface"));
}

void sub_100029564(uint64_t a1)
{
  const char *v2;
  id v3;

  sub_100023968(*(_QWORD **)(a1 + 32));
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
  sub_10002C524(v3, v2);

}

uint64_t sub_1000295A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  sub_100023214(*(_QWORD **)(a1 + 32));
  v4 = ne_log_obj(v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = inputNotification2String(*(unsigned int *)(a1 + 40));
    v9 = 138412546;
    v10 = v6;
    v11 = 2080;
    v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@: Handling a %s event", (uint8_t *)&v9, 0x16u);
  }

  return sub_10007B40C(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 40) == 1);
}

void sub_100029684(uint64_t a1)
{
  const char *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  const char *v13;
  void *v14;
  id Property;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  char v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  unsigned int v37;
  const char *v38;
  id v39;

  if (objc_msgSend(*(id *)(a1 + 32), "parentType") == (id)1)
    return;
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    v4 = objc_getProperty(v3, v2, 496, 1);
    v5 = *(void **)(a1 + 32);
    if (v4)
    {
      v6 = v4;
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "server"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "primaryPhysicalInterface"));
      if (objc_msgSend(v8, "type") == (id)1)
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "server"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "primaryPhysicalInterface"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "interfaceName"));
        v12 = *(void **)(a1 + 40);

        v5 = *(void **)(a1 + 32);
        if (v11 == v12)
        {
          v14 = *(void **)(a1 + 40);
          if (v5)
          {
            Property = objc_getProperty(*(id *)(a1 + 32), v13, 496, 1);
            v16 = *(_QWORD *)(a1 + 48);
            v17 = v5;
            v18 = v14;
          }
          else
          {
            v16 = *(_QWORD *)(a1 + 48);
            v17 = 0;
            v18 = *(void **)(a1 + 40);
            Property = 0;
          }
          sub_100029A24(v17, v18, Property, v16);
          return;
        }
      }
      else
      {

        v5 = *(void **)(a1 + 32);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v19 = objc_opt_class(NESMVPNSession);
  if ((objc_opt_isKindOfClass(v5, v19) & 1) != 0 && objc_msgSend(*(id *)(a1 + 32), "tunnelKind") == (id)2)
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "server"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "primaryCellularInterface"));
  }
  else
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "server"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "primaryPhysicalInterface"));
  }
  v22 = v21;
  v39 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "interfaceName"));

  v23 = (void *)NEVirtualInterfaceCopyDelegateInterfaceName(objc_msgSend(*(id *)(a1 + 32), "virtualInterface"));
  if ((objc_msgSend(v23, "isEqualToString:", v39) & 1) == 0)
  {
    v24 = v39;

    objc_msgSend(*(id *)(a1 + 32), "setDelegateInterfaceName:", v24);
    v23 = v24;
  }
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryTunnelPlugin"));
  v26 = objc_opt_class(NEFlowDivertPlugin);
  if ((objc_opt_isKindOfClass(v25, v26) & 1) != 0 && sub_10001755C((unsigned int *)v25))
  {
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "server"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "primaryPhysicalInterface"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "interfaceName"));
    sub_100017BE0(v25, v29);

  }
  v30 = objc_msgSend(*(id *)(a1 + 32), "proxyEnabled:", *(_QWORD *)(a1 + 40));
  v31 = *(_QWORD *)(a1 + 48);
  sub_100022C78(*(void **)(a1 + 32), (v31 & 4) != 0, v30, v39);
  if ((objc_msgSend(*(id *)(a1 + 40), "hasPrefix:", CFSTR("utun")) & 1) == 0
    && (objc_msgSend(*(id *)(a1 + 40), "hasPrefix:", CFSTR("ipsec")) & 1) == 0)
  {
    if ((v31 & 4) != 0)
    {
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "VPN"));
      if (objc_msgSend(v33, "isOnDemandEnabled"))
      {

      }
      else
      {
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "VPN"));
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "protocol"));
        v37 = objc_msgSend(v36, "includeAllNetworks");

        if (v37)
          sub_100023CFC(*(void **)(a1 + 32), v38);
      }
    }
    sub_100029A24(*(void **)(a1 + 32), *(void **)(a1 + 40), v23, *(_QWORD *)(a1 + 48));
  }

}

void sub_100029A24(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  void *v8;
  unsigned int v9;
  char v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  v7 = a3;
  v8 = v7;
  if (a1)
  {
    if (v7)
    {
      v9 = objc_msgSend(v7, "isEqualToString:", v13);
      v10 = v9;
      if ((a4 & 3) == 0 && v9)
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "stateHandler"));
        objc_msgSend(v11, "handleInterfaceUnavailable:", v13);
LABEL_12:

        goto LABEL_13;
      }
      if ((a4 & 3) != 0)
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "stateHandler"));
        if ((v10 & 1) != 0)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "delegateInterfaceAddress"));
          objc_msgSend(v11, "handleInterfaceAvailable:changed:", v13, objc_msgSend(a1, "interface:hasIPAddress:currentFlags:", v8, v12, a4) ^ 1);

          goto LABEL_12;
        }
LABEL_11:
        objc_msgSend(v11, "handleInterfaceAvailable:changed:", v13, 0);
        goto LABEL_12;
      }
    }
    else if ((a4 & 3) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "stateHandler"));
      goto LABEL_11;
    }
  }
LABEL_13:

}

void sub_100029B38(uint64_t a1)
{
  id v2;

  sub_10007B40C(*(_QWORD *)(a1 + 32), 1);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateHandler"));
  objc_msgSend(v2, "handleUserSwitch");

}

void sub_100029B80(uint64_t a1)
{
  id v2;

  sub_10007B40C(*(_QWORD *)(a1 + 32), 1);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateHandler"));
  objc_msgSend(v2, "handleUserLogout");

}

void sub_100029BC8(uint64_t a1)
{
  id v2;

  sub_10007C090(*(id *)(a1 + 32), 0);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateHandler"));
  objc_msgSend(v2, "handleWakeup");

}

void sub_100029C10(uint64_t a1)
{
  double v2;
  void *v3;
  double v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "protocol"));
  if (objc_msgSend(v5, "disconnectOnWake"))
  {
    v2 = *(double *)(a1 + 40);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "protocol"));
    v4 = (double)(int)objc_msgSend(v3, "disconnectOnWakeTimeout");

    if (v2 <= v4)
      return;
    objc_msgSend(*(id *)(a1 + 32), "setLastStopReason:", 2);
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateHandler"));
    objc_msgSend(v5, "handleStop");
  }

}

void sub_100029CBC(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateHandler"));
  objc_msgSend(v1, "handleSleep");

}

id *sub_100029CEC(id *result)
{
  if (*((_DWORD *)result + 10) == 32)
    return (id *)objc_msgSend(result[4], "invalidate");
  return result;
}

void sub_100029D04(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  id v14;
  uint8_t buf[16];
  _BYTE v16[24];
  void *v17;
  id v18;
  id v19;

  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
  v3 = *(id *)(a1 + 40);
  v4 = v14;
  if (!v14)
  {

LABEL_5:
    v9 = ne_log_obj(v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)v16 = 138412546;
      *(_QWORD *)&v16[4] = v13;
      *(_WORD *)&v16[12] = 2080;
      *(_QWORD *)&v16[14] = "-[NESMVPNSession addDefaultDropPolicyForPluginUUIDs:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%@:%s: Failed to add Drop Control Policies for VPN Session", v16, 0x16u);
    }

    return;
  }
  if (v3)
  {
    v4 = objc_msgSend(v3, "count");
    if (v4)
    {
      *(_QWORD *)v16 = _NSConcreteStackBlock;
      *(_QWORD *)&v16[8] = 3221225472;
      *(_QWORD *)&v16[16] = sub_100041A88;
      v17 = &unk_1000BDA78;
      v18 = v14;
      v5 = v3;
      v19 = v5;
      v6 = sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v16);

      if ((v6 & 1) != 0)
        return;
      goto LABEL_5;
    }
  }
  v11 = ne_log_obj(v4, v2);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Skip, no UUIDs", buf, 2u);
  }

}

id sub_100029EF0(uint64_t a1, const char *a2)
{
  void (**v3)(void);
  const char *v4;
  id Property;
  const char *v6;

  v3 = *(void (***)(void))(a1 + 32);
  if (v3)
  {
    Property = objc_getProperty(v3, a2, 464, 1);
    v3 = *(void (***)(void))(a1 + 32);
    if (Property)
    {
      if (v3)
        v3 = (void (**)(void))objc_getProperty(v3, v4, 464, 1);
      v3[2]();
      v3 = *(void (***)(void))(a1 + 32);
      if (v3)
      {
        objc_setProperty_atomic_copy(v3, v6, 0, 464);
        v3 = *(void (***)(void))(a1 + 32);
      }
    }
  }
  return objc_msgSend(v3, "setStatus:", *(unsigned int *)(a1 + 40));
}

void sub_100029F64(void *a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  __int128 v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  SEL v19;
  id Property;
  id v21;
  SEL v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  id v28;
  id v29;
  SEL v30;
  void (**v31)(id, void *);
  void *v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  __int128 v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  id v41;
  __int16 v42;
  id v43;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "setConfigurationCompletionHandlerArray"));
    v3 = objc_msgSend(v2, "count");

    if (v3)
    {
      v6 = ne_log_obj(v4, v5);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "setConfigurationCompletionHandlerArray"));
        *(_DWORD *)buf = 138412546;
        v39 = a1;
        v40 = 2048;
        v41 = objc_msgSend(v36, "count");
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%@: Disconnected session has %lu stale completionHandler(s)", buf, 0x16u);

      }
      +[NEDiagnosticReport logInternalError:subType:context:](NEDiagnosticReport, "logInternalError:subType:context:", CFSTR("SessionManager"), CFSTR("StaleConfigCompletionHandler"), 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NEAgentErrorDomain"), 1, 0));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "setConfigurationCompletionHandlerArray"));
      v10 = objc_msgSend(v9, "count");

      if (v10)
      {
        *(_QWORD *)&v11 = 138412546;
        v37 = v11;
        while (1)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "setConfigurationCompletionHandlerArray", v37));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", 0));

          if (!v13)
            break;
          v16 = ne_log_obj(v14, v15);
          v17 = objc_claimAutoreleasedReturnValue(v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "interfaceName"));
            Property = objc_getProperty(v13, v19, 8, 1);
            v21 = objc_retainBlock(Property);
            *(_DWORD *)buf = 138412802;
            v39 = a1;
            v40 = 2112;
            v41 = v18;
            v42 = 2112;
            v43 = v21;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%@: config request: popping handler [%@] %@", buf, 0x20u);

          }
          v23 = objc_getProperty(v13, v22, 8, 1);
          if (v23)
          {
            v25 = ne_log_obj(v23, v24);
            v26 = objc_claimAutoreleasedReturnValue(v25);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            {
              v28 = objc_getProperty(v13, v27, 8, 1);
              v29 = objc_retainBlock(v28);
              *(_DWORD *)buf = v37;
              v39 = a1;
              v40 = 2112;
              v41 = v29;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%@: config request: calling completionHandler %@", buf, 0x16u);

            }
            v31 = (void (**)(id, void *))objc_getProperty(v13, v30, 8, 1);
            v31[2](v31, v8);
          }
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "setConfigurationCompletionHandlerArray"));
          objc_msgSend(v32, "removeObject:", v13);

          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "setConfigurationCompletionHandlerArray"));
          v34 = objc_msgSend(v33, "count");

          if (!v34)
            goto LABEL_17;
        }
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "setConfigurationCompletionHandlerArray"));
        objc_msgSend(v35, "removeAllObjects");

      }
LABEL_17:

    }
  }
}

id sub_10002B744(id self, const char *a2)
{
  id v2;
  id Property;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  const char *v16;
  id v17;
  void *v18;
  void *v19;
  SEL v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  const char *v25;
  void *v26;
  SEL v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  int v47;
  id v48;
  id v49;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  id v55;

  v2 = self;
  if (!self)
    return v2;
  Property = objc_getProperty(self, a2, 688, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(Property);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "controlUnit"));
  if (!objc_msgSend(v5, "unsignedIntValue"))
  {

    return 0;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "configuration"));
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "externalIdentifier"));
  if (v7)
  {
    v8 = (void *)v7;
    v9 = objc_msgSend(v2, "waitForPerApp");

    if ((v9 & 1) == 0)
      goto LABEL_9;
    return 0;
  }

LABEL_9:
  v12 = ne_log_obj(v10, v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "configuration"));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "externalIdentifier"));
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "configuration"));
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "dnsProxy"));
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "perApp"));
    v43 = objc_msgSend(v42, "copyCachedMachOUUIDs");
    *(_DWORD *)buf = 136315650;
    v51 = "-[NESMDNSProxySession resetPolicies]";
    v52 = 2112;
    v53 = v39;
    v54 = 2112;
    v55 = v43;
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s: resetPolicies - <%@> UUIDs %@", buf, 0x20u);

  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "policySession"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "primaryTunnelPlugin"));
  v17 = sub_100016BA8(v15, v16);
  v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "firstObject"));
  v21 = objc_getProperty(v2, v20, 688, 1);
  v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "controlUnit"));
  v47 = objc_msgSend(v23, "unsignedIntValue");
  v24 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "server"));
  v26 = v24;
  if (v24)
    v24 = objc_getProperty(v24, v25, 80, 1);
  v49 = v24;
  v48 = objc_getProperty(v2, v27, 728, 1);
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "configuration"));
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "externalIdentifier"));
  if (v29)
  {
    v46 = v18;
    v30 = (uint64_t)v14;
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "configuration"));
    v45 = v15;
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "dnsProxy"));
    v44 = v26;
    v33 = v23;
    v34 = v22;
    v35 = v19;
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "perApp"));
    v2 = (id)sub_100043CC8(v30, v35, v47, v49, v48, v36);

    v19 = v35;
    v22 = v34;
    v23 = v33;
    v26 = v44;

    v15 = v45;
    v14 = (void *)v30;
    v18 = v46;
  }
  else
  {
    v2 = (id)sub_100043CC8((uint64_t)v14, v19, v47, v49, v48, 0);
  }

  return v2;
}

void sub_10002BACC(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  int v11;
  uint64_t i;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "primaryTunnelPlugin"));

    if (v2)
    {
      v3 = dns_configuration_copy();
      if (v3)
      {
        v4 = v3;
        v19 = a1;
        v20 = objc_alloc_init((Class)NSMutableArray);
        if (*(int *)(v4 + 12) >= 1)
        {
          v5 = 0;
          do
          {
            v6 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v5);
            v7 = objc_alloc_init((Class)NSMutableArray);
            if (*(int *)(v6 + 8) >= 1)
            {
              v8 = 0;
              do
              {
                v9 = (void *)NECreateAddressString(*(_QWORD *)(*(_QWORD *)(v6 + 12) + 8 * v8));
                if (v9)
                  objc_msgSend(v7, "addObject:", v9);

                ++v8;
              }
              while (v8 < *(int *)(v6 + 8));
            }
            v10 = objc_alloc_init((Class)NSMutableArray);
            v11 = *(_DWORD *)(v6 + 24);
            if (v11 >= 1)
            {
              for (i = 0; i < v11; ++i)
              {
                if (*(_QWORD *)(*(_QWORD *)(v6 + 28) + 8 * i))
                {
                  v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", *(_QWORD *)(*(_QWORD *)(v6 + 28) + 8 * i));
                  if (v13)
                    objc_msgSend(v10, "addObject:", v13);

                  v11 = *(_DWORD *)(v6 + 24);
                }
              }
            }
            v14 = objc_msgSend(objc_alloc((Class)NEDNSSettings), "initWithServers:", v7);
            if (v14)
            {
              if (*(_QWORD *)v6)
              {
                v15 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", *(_QWORD *)v6);
                objc_msgSend(v14, "setDomainName:", v15);

              }
              objc_msgSend(v14, "setSearchDomains:", v10, v19);
              objc_msgSend(v20, "addObject:", v14);
            }

            ++v5;
          }
          while (v5 < *(int *)(v4 + 12));
        }
        dns_configuration_free(v4);
        if (v20)
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "primaryTunnelPlugin"));
          if (v16)
          {
            v17 = v20;
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "remotePluginObject"));
            objc_msgSend(v18, "setSystemDNSSettings:", v17);

          }
        }
      }
    }
  }
}

void sub_10002BD08(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  BOOL v6;
  NSObject *v7;

  v4 = a2;
  if (a1)
  {
    v5 = *(NSObject **)(a1 + 720);
    v7 = v4;
    if (v5)
      v6 = v5 == v4;
    else
      v6 = 1;
    if (!v6)
      dispatch_source_cancel(v5);
    objc_storeStrong((id *)(a1 + 720), a2);
    v4 = v7;
  }

}

void sub_10002BD78(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  void *v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = objc_msgSend(WeakRetained, "status");
    if ((_DWORD)v3 == 1)
    {
      v5 = ne_log_obj(v3, v4);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = 138412290;
        v8 = v2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@: restarting", (uint8_t *)&v7, 0xCu);
      }

      objc_msgSend(v2, "restartSession");
    }
  }

}

void sub_10002BE40(id a1)
{
  BOOL v1;
  mach_timebase_info info;

  info = 0;
  if (!mach_timebase_info(&info))
  {
    if (info.numer)
      v1 = info.denom == 0;
    else
      v1 = 1;
    if (!v1)
      qword_1000CF450 = 1000000000 * (unint64_t)info.denom / info.numer;
  }
}

void sub_10002BE90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  const char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(_BYTE *)(v2 + 696) & 1) != 0)
  {
    v4 = ne_log_obj(a1, a2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(void **)(a1 + 32);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "configuration"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "name"));
      v18 = 138412546;
      v19 = v6;
      v20 = 2112;
      v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@: Re-setting policies because the installed apps or configuration changed for %@", (uint8_t *)&v18, 0x16u);

    }
    v10 = sub_10002B744(*(id *)(a1 + 32), v9);
    if ((v10 & 1) == 0)
    {
      v12 = ne_log_obj(v10, v11);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v15 = *(void **)(a1 + 32);
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "configuration"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "name"));
        v18 = 138412546;
        v19 = v15;
        v20 = 2112;
        v21 = v17;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%@: failed to update the DNSProxy policies after installed applications or configuration changed for %@", (uint8_t *)&v18, 0x16u);

      }
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateHandler"));
      objc_msgSend(v14, "handleStop");

    }
  }
}

void sub_10002C038(uint64_t a1)
{
  sub_10002BACC(*(void **)(a1 + 32));
}

uint64_t sub_10002C3A4(uint64_t result)
{
  _QWORD v1[5];

  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_10002E3F8;
    v1[3] = &unk_1000BDA50;
    v1[4] = result;
    return sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v1);
  }
  return result;
}

uint64_t sub_10002C404(uint64_t result)
{
  _QWORD v1[5];

  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_10002E04C;
    v1[3] = &unk_1000BDA50;
    v1[4] = result;
    return sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v1);
  }
  return result;
}

uint64_t sub_10002C464(uint64_t result)
{
  _QWORD v1[5];

  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_10002DE6C;
    v1[3] = &unk_1000BDA50;
    v1[4] = result;
    return sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v1);
  }
  return result;
}

uint64_t sub_10002C4C4(uint64_t result)
{
  _QWORD v1[5];

  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_10002DC8C;
    v1[3] = &unk_1000BDA50;
    v1[4] = result;
    return sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v1);
  }
  return result;
}

id sub_10002C524(id result, const char *a2)
{
  id v2;
  _QWORD v3[5];

  if (result)
  {
    v2 = result;
    result = objc_msgSend(objc_getProperty(result, a2, 112, 1), "count");
    if (result)
    {
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 3221225472;
      v3[2] = sub_10002DB7C;
      v3[3] = &unk_1000BDA50;
      v3[4] = v2;
      return (id)sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v3);
    }
  }
  return result;
}

uint64_t sub_10002C5A0(uint64_t result)
{
  _QWORD v1[5];

  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_10002D844;
    v1[3] = &unk_1000BDA50;
    v1[4] = result;
    return sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v1);
  }
  return result;
}

id sub_10002C600(id result, const char *a2)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  _QWORD v6[5];
  uint8_t buf[4];
  id Property;

  if (result)
  {
    v2 = result;
    result = objc_msgSend(objc_getProperty(result, a2, 144, 1), "count");
    if (result)
    {
      v3 = ne_log_large_obj(result);
      v4 = objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        Property = objc_getProperty(v2, v5, 144, 1);
        _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DNS policy IDs to be removed: %@", buf, 0xCu);
      }

      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_10002D7D8;
      v6[3] = &unk_1000BDA50;
      v6[4] = v2;
      return (id)sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v6);
    }
  }
  return result;
}

void sub_10002C70C(void *a1, void *a2)
{
  id v3;
  const char *v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  void *v10;

  v3 = a2;
  if (a1)
  {
    if (v3)
    {
      v7 = v3;
      v5 = objc_msgSend(objc_getProperty(a1, v4, 176, 1), "objectForKeyedSubscript:", v3);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

      v3 = v7;
      if (v6)
      {
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3221225472;
        v8[2] = sub_10002D68C;
        v8[3] = &unk_1000BDA78;
        v9 = v7;
        v10 = a1;
        sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v8);

        v3 = v7;
      }
    }
  }

}

void sub_10002C7C4(void *a1, void *a2)
{
  id v3;
  const char *v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  void *v10;

  v3 = a2;
  if (a1)
  {
    if (v3)
    {
      v7 = v3;
      v5 = objc_msgSend(objc_getProperty(a1, v4, 184, 1), "objectForKeyedSubscript:", v3);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

      v3 = v7;
      if (v6)
      {
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3221225472;
        v8[2] = sub_10002D540;
        v8[3] = &unk_1000BDA78;
        v9 = v7;
        v10 = a1;
        sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v8);

        v3 = v7;
      }
    }
  }

}

void sub_10002C87C(void *a1, void *a2)
{
  id v3;
  const char *v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  void *v10;

  v3 = a2;
  if (a1)
  {
    if (v3)
    {
      v7 = v3;
      v5 = objc_msgSend(objc_getProperty(a1, v4, 168, 1), "objectForKeyedSubscript:", v3);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

      v3 = v7;
      if (v6)
      {
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3221225472;
        v8[2] = sub_10002D3F4;
        v8[3] = &unk_1000BDA78;
        v9 = v7;
        v10 = a1;
        sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v8);

        v3 = v7;
      }
    }
  }

}

void sub_10002C934(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[5];
  id v6;

  v3 = a2;
  if (a1)
  {
    v5[1] = 3221225472;
    v5[2] = sub_10002C9B8;
    v5[3] = &unk_1000BDA78;
    v5[4] = a1;
    v4 = v3;
    v5[0] = _NSConcreteStackBlock;
    v6 = v3;
    sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v5);

    v3 = v4;
  }

}

void *sub_10002C9B8(uint64_t a1, void *a2)
{
  return sub_10002D030(*(void **)(a1 + 32), *(void **)(a1 + 40), a2);
}

uint64_t sub_10002C9C8(uint64_t a1, void *a2)
{
  uint64_t (**v3)(id, uint64_t);
  uint64_t v4;

  v3 = a2;
  objc_opt_self(a1);
  if (qword_1000CF8D0 != -1)
    dispatch_once(&qword_1000CF8D0, &stru_1000BDA28);
  if (qword_1000CF8C8)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1000CF8C0);
    v4 = v3[2](v3, qword_1000CF8C8);
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1000CF8C0);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_10002CA6C(id a1)
{
  NESMPolicyMasterSession *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  SEL v17;
  id Property;
  id v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  SEL v33;
  id v34;
  uint64_t v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  objc_super v40;
  void *v41;
  void *v42;
  void *v43;

  v1 = [NESMPolicyMasterSession alloc];
  if (!v1)
  {
    v37 = 0;
    v2 = 0;
    goto LABEL_8;
  }
  v40.receiver = v1;
  v40.super_class = (Class)NESMPolicyMasterSession;
  v2 = objc_msgSendSuper2(&v40, "init");
  if (v2)
  {
    v3 = objc_alloc_init((Class)NSMutableArray);
    v4 = (void *)*((_QWORD *)v2 + 4);
    *((_QWORD *)v2 + 4) = v3;

    v5 = objc_alloc_init((Class)NSMutableArray);
    v6 = (void *)*((_QWORD *)v2 + 5);
    *((_QWORD *)v2 + 5) = v5;

    v7 = objc_msgSend(objc_alloc((Class)NEPolicySession), "initWithSessionName:", CFSTR("MasterSession"));
    v8 = (void *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = v7;

    v9 = (void *)*((_QWORD *)v2 + 2);
    if (!v9
      || (objc_msgSend(v9, "lockSessionToCurrentProcess"),
          objc_msgSend(*((id *)v2 + 2), "setPriority:", 200),
          v10 = objc_msgSend(objc_alloc((Class)NEPolicySession), "initWithSessionName:", CFSTR("LowPrioritySession")), v11 = (void *)*((_QWORD *)v2 + 3), *((_QWORD *)v2 + 3) = v10, v11, (v12 = (void *)*((_QWORD *)v2 + 3)) == 0))
    {
      v37 = 0;
      goto LABEL_8;
    }
    objc_msgSend(v12, "lockSessionToCurrentProcess");
    objc_msgSend(*((id *)v2 + 3), "setPriority:", 500);
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1000CF8C0);
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 40));
    v13 = objc_alloc((Class)NEPolicy);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    v43 = v14;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v43, 1));
    v16 = objc_msgSend(v13, "initWithOrder:result:conditions:", 15, v39, v15);
    Property = objc_getProperty(v2, v17, 40, 1);
    sub_10002CE30((_BOOL8)v2, v16, Property);

    v19 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", &ne_privacy_proxy_netagent_id);
    v20 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", &ne_privacy_dns_netagent_id);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult removeNetworkAgentUUID:](NEPolicyResult, "removeNetworkAgentUUID:", v19));
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult removeNetworkAgentUUID:](NEPolicyResult, "removeNetworkAgentUUID:", v20));
    v23 = objc_alloc((Class)NEPolicy);
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    v42 = v24;
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v42, 1));
    v26 = objc_msgSend(v23, "initWithOrder:result:conditions:", 25, v21, v25);
    v28 = objc_getProperty(v2, v27, 40, 1);
    sub_10002CE30((_BOOL8)v2, v26, v28);

    v29 = objc_alloc((Class)NEPolicy);
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    v41 = v30;
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v41, 1));
    v32 = objc_msgSend(v29, "initWithOrder:result:conditions:", 35, v22, v31);
    v34 = objc_getProperty(v2, v33, 40, 1);
    sub_10002CE30((_BOOL8)v2, v32, v34);

    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1000CF8C0);
    v35 = objc_claimAutoreleasedReturnValue(+[NSPointerArray weakObjectsPointerArray](NSPointerArray, "weakObjectsPointerArray"));
    v36 = (void *)*((_QWORD *)v2 + 6);
    *((_QWORD *)v2 + 6) = v35;

  }
  v37 = v2;
  v2 = v37;
LABEL_8:

  v38 = (void *)qword_1000CF8C8;
  qword_1000CF8C8 = (uint64_t)v37;

}

BOOL sub_10002CE30(_BOOL8 a1, void *a2, void *a3)
{
  id v5;
  id v6;
  SEL v7;
  id v8;
  uint64_t is_debug_logging_enabled;
  uint64_t v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  _BOOL4 v16;
  void *v18;
  int v19;
  id v20;
  __int16 v21;
  id v22;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000CF8C0);
    v8 = objc_msgSend(objc_getProperty((id)a1, v7, 24, 1), "addPolicy:storeLocally:", v5, 0);
    a1 = v8 != 0;
    is_debug_logging_enabled = nelog_is_debug_logging_enabled();
    v11 = is_debug_logging_enabled;
    if (v8)
    {
      if ((_DWORD)is_debug_logging_enabled)
      {
        v12 = ne_log_obj(is_debug_logging_enabled, v10);
        v13 = objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          v19 = 134218242;
          v20 = v8;
          v21 = 2112;
          v22 = v5;
          _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Added policy ID %lu to Low priority: %@", (uint8_t *)&v19, 0x16u);
        }

      }
      v14 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v8));
      objc_msgSend(v6, "addObject:", v14);
    }
    else
    {
      v15 = ne_log_obj(is_debug_logging_enabled, v10);
      v14 = objc_claimAutoreleasedReturnValue(v15);
      v16 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
      if (v11)
      {
        if (v16)
        {
          v19 = 138412290;
          v20 = v5;
          _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to add policy to Low priority: %@", (uint8_t *)&v19, 0xCu);
        }
      }
      else if (v16)
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "descriptionWithIndent:options:", 0, 2));
        v19 = 138412290;
        v20 = v18;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to add policy to Low priority: %@", (uint8_t *)&v19, 0xCu);

      }
    }

  }
  return a1;
}

void *sub_10002D030(void *a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  SEL v15;
  id v16;
  void *v17;
  id v19;
  void *v20;
  int v21;
  id v22;
  __int16 v23;
  void *v24;

  v5 = a2;
  v7 = a3;
  v8 = 0;
  if (a1)
  {
    if (v5)
    {
      v9 = objc_msgSend(objc_getProperty(a1, v6, 224, 1), "objectForKeyedSubscript:", v5);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v9);

      if (v8)
      {
        v12 = ne_log_obj(v10, v11);
        v13 = objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          v19 = objc_msgSend(objc_getProperty(a1, v14, 224, 1), "objectForKeyedSubscript:", v5);
          v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
          v21 = 138412546;
          v22 = v5;
          v23 = 2112;
          v24 = v20;
          _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed for %@: %@", (uint8_t *)&v21, 0x16u);

        }
        v16 = objc_msgSend(objc_getProperty(a1, v15, 224, 1), "objectForKeyedSubscript:", v5);
        v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        if (sub_10002D1B0(v7, v17))
          v8 = (void *)sub_10002D308(v7);
        else
          v8 = 0;

      }
    }
  }

  return v8;
}

BOOL sub_10002D1B0(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  const char *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = a2;
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000CF8C0);
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v4 = v3;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v5)
    {
      v7 = v5;
      v8 = *(_QWORD *)v14;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v14 != v8)
            objc_enumerationMutation(v4);
          v10 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v9);
          v11 = objc_getProperty(a1, v6, 16, 1);
          objc_msgSend(v11, "removePolicyWithID:", objc_msgSend(v10, "unsignedIntegerValue", (_QWORD)v13));

          v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v7);
    }

    objc_msgSend(v4, "removeAllObjects");
  }

  return a1 != 0;
}

uint64_t sub_10002D308(void *a1)
{
  SEL v2;
  id v3;
  const char *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  __int16 v14;
  uint8_t buf[2];

  if (!a1)
    return 0;
  os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000CF8C0);
  v3 = objc_msgSend(objc_getProperty(a1, v2, 16, 1), "apply");
  if ((v3 & 1) == 0)
  {
    v12 = ne_log_obj(v3, v4);
    v9 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v10 = "Failed to apply policies";
      v11 = buf;
      goto LABEL_11;
    }
LABEL_7:

    return 0;
  }
  v5 = 1;
  v6 = objc_msgSend(objc_getProperty(a1, v4, 24, 1), "apply");
  if ((v6 & 1) == 0)
  {
    v8 = ne_log_obj(v6, v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v14 = 0;
      v10 = "Failed to apply policies with Low priority";
      v11 = (uint8_t *)&v14;
LABEL_11:
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v10, v11, 2u);
      goto LABEL_7;
    }
    goto LABEL_7;
  }
  return v5;
}

uint64_t sub_10002D3F4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id Property;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  void *v18;

  v3 = a2;
  v4 = ne_log_large_obj(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(_QWORD *)(a1 + 32);
    Property = *(id *)(a1 + 40);
    if (Property)
      Property = objc_getProperty(Property, v6, 168, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
    v15 = 138412546;
    v16 = v13;
    v17 = 2112;
    v18 = v14;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "drop control Policy IDs to be removed for %@: %@", (uint8_t *)&v15, 0x16u);

  }
  v8 = *(id *)(a1 + 40);
  if (v8)
    v8 = objc_getProperty(v8, v7, 168, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
  if (sub_10002D1B0(v3, v9))
    v10 = sub_10002D308(v3);
  else
    v10 = 0;

  return v10;
}

uint64_t sub_10002D540(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  const char *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id Property;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  void *v19;

  v3 = a2;
  v5 = ne_log_obj(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v14 = *(_QWORD *)(a1 + 32);
    Property = *(id *)(a1 + 40);
    if (Property)
      Property = objc_getProperty(Property, v7, 184, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
    v16 = 138412546;
    v17 = v14;
    v18 = 2112;
    v19 = v15;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed for %@: %@", (uint8_t *)&v16, 0x16u);

  }
  v9 = *(id *)(a1 + 40);
  if (v9)
    v9 = objc_getProperty(v9, v8, 184, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
  if (sub_10002D1B0(v3, v10))
    v11 = sub_10002D308(v3);
  else
    v11 = 0;

  return v11;
}

uint64_t sub_10002D68C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id Property;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  void *v18;

  v3 = a2;
  v4 = ne_log_large_obj(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(_QWORD *)(a1 + 32);
    Property = *(id *)(a1 + 40);
    if (Property)
      Property = objc_getProperty(Property, v6, 176, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
    v15 = 138412546;
    v16 = v13;
    v17 = 2112;
    v18 = v14;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "control Policy IDs to be removed for %@: %@", (uint8_t *)&v15, 0x16u);

  }
  v8 = *(id *)(a1 + 40);
  if (v8)
    v8 = objc_getProperty(v8, v7, 176, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
  if (sub_10002D1B0(v3, v9))
    v10 = sub_10002D308(v3);
  else
    v10 = 0;

  return v10;
}

uint64_t sub_10002D7D8(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  void *v5;
  id Property;
  uint64_t v7;

  v4 = a2;
  v5 = *(void **)(a1 + 32);
  if (v5)
    Property = objc_getProperty(v5, v3, 144, 1);
  else
    Property = 0;
  if (sub_10002D1B0(v4, Property))
    v7 = sub_10002D308(v4);
  else
    v7 = 0;

  return v7;
}

uint64_t sub_10002D844(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  id Property;
  id v6;
  const char *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  const char *v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v25;
  id v26;
  int v27;
  id v28;

  v4 = a2;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v3, 120, 1);
  v6 = objc_msgSend(Property, "count");
  v8 = v6;
  if (v6)
  {
    v9 = ne_log_large_obj(v6);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v25 = *(id *)(a1 + 32);
      if (v25)
        v25 = objc_getProperty(v25, v11, 120, 1);
      v27 = 138412290;
      v28 = v25;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Skip policy IDs to be removed: %@", (uint8_t *)&v27, 0xCu);
    }

    v13 = *(void **)(a1 + 32);
    if (v13)
      v14 = objc_getProperty(v13, v12, 120, 1);
    else
      v14 = 0;
    sub_10002D1B0(v4, v14);
  }
  v15 = *(id *)(a1 + 32);
  if (v15)
    v15 = objc_getProperty(v15, v7, 128, 1);
  v16 = objc_msgSend(v15, "count");
  if (v16)
  {
    v17 = ne_log_large_obj(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      v26 = *(id *)(a1 + 32);
      if (v26)
        v26 = objc_getProperty(v26, v19, 128, 1);
      v27 = 138412290;
      v28 = v26;
      _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Low skip policy IDs to be removed: %@", (uint8_t *)&v27, 0xCu);
    }

    v21 = *(void **)(a1 + 32);
    if (v21)
      v22 = objc_getProperty(v21, v20, 128, 1);
    else
      v22 = 0;
    sub_10002DA24(v4, v22);
  }
  else if (!v8)
  {
    v23 = 1;
    goto LABEL_17;
  }
  v23 = sub_10002D308(v4);
LABEL_17:

  return v23;
}

BOOL sub_10002DA24(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  const char *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = a2;
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000CF8C0);
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v4 = v3;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v5)
    {
      v7 = v5;
      v8 = *(_QWORD *)v14;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v14 != v8)
            objc_enumerationMutation(v4);
          v10 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v9);
          v11 = objc_getProperty(a1, v6, 24, 1);
          objc_msgSend(v11, "removePolicyWithID:", objc_msgSend(v10, "unsignedIntegerValue", (_QWORD)v13));

          v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v7);
    }

    objc_msgSend(v4, "removeAllObjects");
  }

  return a1 != 0;
}

uint64_t sub_10002DB7C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  void *v8;
  id v9;
  uint64_t v10;
  id Property;
  int v13;
  id v14;

  v3 = a2;
  v4 = ne_log_large_obj(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v6, 112, 1);
    v13 = 138412290;
    v14 = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "drop control Policy IDs to be removed: %@", (uint8_t *)&v13, 0xCu);
  }

  v8 = *(void **)(a1 + 32);
  if (v8)
    v9 = objc_getProperty(v8, v7, 112, 1);
  else
    v9 = 0;
  if (sub_10002D1B0(v3, v9))
    v10 = sub_10002D308(v3);
  else
    v10 = 0;

  return v10;
}

uint64_t sub_10002DC8C(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  id Property;
  const char *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  const char *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  const char *v18;
  void *v19;
  id v20;
  uint64_t v21;
  id v23;
  id v24;
  int v25;
  id v26;

  v4 = a2;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v3, 96, 1);
  v7 = objc_msgSend(Property, "count");
  if (v7)
  {
    v8 = ne_log_large_obj();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v23 = *(id *)(a1 + 32);
      if (v23)
        v23 = objc_getProperty(v23, v10, 96, 1);
      v25 = 138412290;
      v26 = v23;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "On Demand Policy IDs to be removed for %@", (uint8_t *)&v25, 0xCu);
    }

    v12 = *(void **)(a1 + 32);
    if (v12)
      v13 = objc_getProperty(v12, v11, 96, 1);
    else
      v13 = 0;
    sub_10002D1B0(v4, v13);
  }
  v14 = *(id *)(a1 + 32);
  if (v14)
    v14 = objc_getProperty(v14, v6, 104, 1);
  if (objc_msgSend(v14, "count"))
  {
    v15 = ne_log_large_obj();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v24 = *(id *)(a1 + 32);
      if (v24)
        v24 = objc_getProperty(v24, v17, 104, 1);
      v25 = 138412290;
      v26 = v24;
      _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Low On Demand Policy IDs to be removed for %@", (uint8_t *)&v25, 0xCu);
    }

    v19 = *(void **)(a1 + 32);
    if (v19)
      v20 = objc_getProperty(v19, v18, 104, 1);
    else
      v20 = 0;
    sub_10002DA24(v4, v20);
  }
  else if (!v7)
  {
    v21 = 1;
    goto LABEL_17;
  }
  v21 = sub_10002D308(v4);
LABEL_17:

  return v21;
}

uint64_t sub_10002DE6C(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  id Property;
  id v6;
  const char *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  const char *v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v25;
  id v26;
  int v27;
  id v28;

  v4 = a2;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v3, 64, 1);
  v6 = objc_msgSend(Property, "count");
  v8 = v6;
  if (v6)
  {
    v9 = ne_log_large_obj(v6);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v25 = *(id *)(a1 + 32);
      if (v25)
        v25 = objc_getProperty(v25, v11, 64, 1);
      v27 = 138412290;
      v28 = v25;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Control Policy IDs to be removed: %@", (uint8_t *)&v27, 0xCu);
    }

    v13 = *(void **)(a1 + 32);
    if (v13)
      v14 = objc_getProperty(v13, v12, 64, 1);
    else
      v14 = 0;
    sub_10002D1B0(v4, v14);
  }
  v15 = *(id *)(a1 + 32);
  if (v15)
    v15 = objc_getProperty(v15, v7, 72, 1);
  v16 = objc_msgSend(v15, "count");
  if (v16)
  {
    v17 = ne_log_large_obj(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      v26 = *(id *)(a1 + 32);
      if (v26)
        v26 = objc_getProperty(v26, v19, 72, 1);
      v27 = 138412290;
      v28 = v26;
      _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Low control Policy IDs to be removed: %@", (uint8_t *)&v27, 0xCu);
    }

    v21 = *(void **)(a1 + 32);
    if (v21)
      v22 = objc_getProperty(v21, v20, 72, 1);
    else
      v22 = 0;
    sub_10002DA24(v4, v22);
  }
  else if (!v8)
  {
    v23 = 1;
    goto LABEL_17;
  }
  v23 = sub_10002D308(v4);
LABEL_17:

  return v23;
}

uint64_t sub_10002E04C(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  id Property;
  const char *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  id v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  const char *v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v21;
  id v22;
  int v23;
  id v24;

  v4 = a2;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v3, 48, 1);
  v7 = objc_msgSend(Property, "count");
  if (v7)
  {
    v8 = ne_log_large_obj();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v21 = *(id *)(a1 + 32);
      if (v21)
        v21 = objc_getProperty(v21, v10, 48, 1);
      v23 = 138412290;
      v24 = v21;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed: %@", (uint8_t *)&v23, 0xCu);
    }

    v11 = *(id *)(a1 + 32);
    if (v4)
    {
      sub_10002E23C((uint64_t)v4, v11, 0);
      v11 = *(id *)(a1 + 32);
    }
    if (v11)
      v11 = objc_getProperty(v11, (SEL)v11, 48, 1);
    sub_10002D1B0(v4, v11);
  }
  v12 = *(id *)(a1 + 32);
  if (v12)
    v12 = objc_getProperty(v12, v6, 56, 1);
  if (objc_msgSend(v12, "count"))
  {
    v13 = ne_log_large_obj();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      v22 = *(id *)(a1 + 32);
      if (v22)
        v22 = objc_getProperty(v22, v15, 56, 1);
      v23 = 138412290;
      v24 = v22;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Low Policy IDs to be removed: %@", (uint8_t *)&v23, 0xCu);
    }

    v17 = *(void **)(a1 + 32);
    if (v17)
      v18 = objc_getProperty(v17, v16, 56, 1);
    else
      v18 = 0;
    sub_10002DA24(v4, v18);
  }
  else if (!v7)
  {
    v19 = 1;
    goto LABEL_19;
  }
  v19 = sub_10002D308(v4);
LABEL_19:

  return v19;
}

void sub_10002E23C(uint64_t a1, void *a2, int a3)
{
  id v5;
  uint64_t v6;
  id v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  int *v14;
  char *v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  char *v20;

  v5 = a2;
  os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000CF8C0);
  objc_msgSend(*(id *)(a1 + 48), "compact");
  if (!objc_msgSend(*(id *)(a1 + 48), "count"))
  {
LABEL_5:
    if ((a3 & 1) == 0)
      goto LABEL_15;
    goto LABEL_6;
  }
  v6 = 0;
  while (1)
  {
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "pointerAtIndex:", v6));

    if (v7 == v5)
      break;
    if (++v6 >= (unint64_t)objc_msgSend(*(id *)(a1 + 48), "count"))
      goto LABEL_5;
  }
  if ((v6 != 0x7FFFFFFFFFFFFFFFLL) != a3)
  {
    if (!a3)
    {
      objc_msgSend(*(id *)(a1 + 48), "removePointerAtIndex:", v6);
      if (objc_msgSend(*(id *)(a1 + 48), "count"))
        goto LABEL_15;
      v8 = 1;
LABEL_8:
      v16 = v8;
      v9 = sysctlbyname("net.necp.pass_loopback", 0, 0, &v16, 4uLL);
      if ((_DWORD)v9)
      {
        v11 = ne_log_obj(v9, v10);
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          v13 = v16;
          v14 = __error();
          v15 = strerror(*v14);
          *(_DWORD *)buf = 67109378;
          v18 = v13;
          v19 = 2080;
          v20 = v15;
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to set the loopback pass mode to %u: %s", buf, 0x12u);
        }

      }
      goto LABEL_15;
    }
LABEL_6:
    objc_msgSend(*(id *)(a1 + 48), "addPointer:", v5);
    if (objc_msgSend(*(id *)(a1 + 48), "count") != (id)1)
      goto LABEL_15;
    v8 = 2;
    goto LABEL_8;
  }
LABEL_15:

}

uint64_t sub_10002E3F8(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  id Property;
  id v6;
  const char *v7;
  _BOOL4 v8;
  id v9;
  void *v10;
  id v11;
  const char *v12;
  id v13;
  uint64_t v14;
  void *i;
  uint64_t v16;
  id v17;
  void *v18;
  const char *v19;
  id v20;
  id v21;
  const char *v22;
  id v23;
  void *v24;
  id v25;
  const char *v26;
  id v27;
  uint64_t v28;
  void *j;
  uint64_t v30;
  id v31;
  void *v32;
  const char *v33;
  id v34;
  id v35;
  const char *v36;
  id v37;
  void *v38;
  id v39;
  const char *v40;
  id v41;
  uint64_t v42;
  void *k;
  uint64_t v44;
  id v45;
  void *v46;
  const char *v47;
  id v48;
  id v49;
  const char *v50;
  id v51;
  const char *v52;
  void *v53;
  id v54;
  uint64_t v55;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[128];
  _BYTE v70[128];
  _BYTE v71[128];

  v4 = a2;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v3, 192, 1);
  v6 = objc_msgSend(Property, "count");
  v8 = v6 != 0;
  if (v6)
  {
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v9 = *(id *)(a1 + 32);
    if (v9)
      v9 = objc_getProperty(v9, v7, 192, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "allKeys"));
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v65, v71, 16);
    if (v11)
    {
      v13 = v11;
      v14 = *(_QWORD *)v66;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(_QWORD *)v66 != v14)
            objc_enumerationMutation(v10);
          v16 = *(_QWORD *)(*((_QWORD *)&v65 + 1) + 8 * (_QWORD)i);
          v17 = *(id *)(a1 + 32);
          if (v17)
            v17 = objc_getProperty(v17, v12, 192, 1);
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", v16));
          sub_10002D1B0(v4, v18);

        }
        v13 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v65, v71, 16);
      }
      while (v13);
    }

    v20 = *(id *)(a1 + 32);
    if (v20)
      v20 = objc_getProperty(v20, v19, 192, 1);
    objc_msgSend(v20, "removeAllObjects");
  }
  v21 = *(id *)(a1 + 32);
  if (v21)
    v21 = objc_getProperty(v21, v7, 200, 1);
  if (objc_msgSend(v21, "count"))
  {
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v23 = *(id *)(a1 + 32);
    if (v23)
      v23 = objc_getProperty(v23, v22, 200, 1);
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "allKeys"));
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v61, v70, 16);
    if (v25)
    {
      v27 = v25;
      v28 = *(_QWORD *)v62;
      do
      {
        for (j = 0; j != v27; j = (char *)j + 1)
        {
          if (*(_QWORD *)v62 != v28)
            objc_enumerationMutation(v24);
          v30 = *(_QWORD *)(*((_QWORD *)&v61 + 1) + 8 * (_QWORD)j);
          v31 = *(id *)(a1 + 32);
          if (v31)
            v31 = objc_getProperty(v31, v26, 200, 1);
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "objectForKeyedSubscript:", v30));
          sub_10002D1B0(v4, v32);

        }
        v27 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v61, v70, 16);
      }
      while (v27);
    }

    v34 = *(id *)(a1 + 32);
    if (v34)
      v34 = objc_getProperty(v34, v33, 200, 1);
    objc_msgSend(v34, "removeAllObjects");
    v8 = 1;
  }
  v35 = *(id *)(a1 + 32);
  if (v35)
    v35 = objc_getProperty(v35, v22, 208, 1);
  if (objc_msgSend(v35, "count"))
  {
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v37 = *(id *)(a1 + 32);
    if (v37)
      v37 = objc_getProperty(v37, v36, 208, 1);
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "allKeys", (_QWORD)v57));
    v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v57, v69, 16);
    if (v39)
    {
      v41 = v39;
      v42 = *(_QWORD *)v58;
      do
      {
        for (k = 0; k != v41; k = (char *)k + 1)
        {
          if (*(_QWORD *)v58 != v42)
            objc_enumerationMutation(v38);
          v44 = *(_QWORD *)(*((_QWORD *)&v57 + 1) + 8 * (_QWORD)k);
          v45 = *(id *)(a1 + 32);
          if (v45)
            v45 = objc_getProperty(v45, v40, 208, 1);
          v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "objectForKeyedSubscript:", v44));
          sub_10002D1B0(v4, v46);

        }
        v41 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v57, v69, 16);
      }
      while (v41);
    }

    v48 = *(id *)(a1 + 32);
    if (v48)
      v48 = objc_getProperty(v48, v47, 208, 1);
    objc_msgSend(v48, "removeAllObjects");
    v8 = 1;
  }
  v49 = *(id *)(a1 + 32);
  if (v49)
    v49 = objc_getProperty(v49, v36, 216, 1);
  objc_msgSend(v49, "removeAllObjects");
  v51 = *(id *)(a1 + 32);
  if (v51)
    v51 = objc_getProperty(v51, v50, 48, 1);
  if (objc_msgSend(v51, "count"))
  {
    v53 = *(void **)(a1 + 32);
    if (v53)
      v54 = objc_getProperty(v53, v52, 48, 1);
    else
      v54 = 0;
    sub_10002D1B0(v4, v54);
  }
  else if (!v8)
  {
    v55 = 1;
    goto LABEL_62;
  }
  v55 = sub_10002D308(v4);
LABEL_62:

  return v55;
}

void sub_10002E80C(_BOOL8 a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;

  if (a1)
  {
    v5 = a3;
    v6 = a2;
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 20));
    v7 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 10, v8, v6);

    sub_10002CE30(a1, v7, v5);
  }
}

void sub_10002E8B0(_BOOL8 a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;

  if (a1)
  {
    v5 = a3;
    v6 = a2;
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 30));
    v7 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 10, v8, v6);

    sub_10002CE30(a1, v7, v5);
  }
}

BOOL sub_10002E954(_BOOL8 a1, void *a2, void *a3)
{
  id v5;
  id v6;
  SEL v7;
  id v8;
  uint64_t is_debug_logging_enabled;
  uint64_t v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  _BOOL4 v16;
  void *v18;
  int v19;
  id v20;
  __int16 v21;
  id v22;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000CF8C0);
    v8 = objc_msgSend(objc_getProperty((id)a1, v7, 16, 1), "addPolicy:storeLocally:", v5, 0);
    a1 = v8 != 0;
    is_debug_logging_enabled = nelog_is_debug_logging_enabled();
    v11 = is_debug_logging_enabled;
    if (v8)
    {
      if ((_DWORD)is_debug_logging_enabled)
      {
        v12 = ne_log_obj(is_debug_logging_enabled, v10);
        v13 = objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          v19 = 134218242;
          v20 = v8;
          v21 = 2112;
          v22 = v5;
          _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Added policy ID %lu: %@", (uint8_t *)&v19, 0x16u);
        }

      }
      v14 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v8));
      objc_msgSend(v6, "addObject:", v14);
    }
    else
    {
      v15 = ne_log_obj(is_debug_logging_enabled, v10);
      v14 = objc_claimAutoreleasedReturnValue(v15);
      v16 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
      if (v11)
      {
        if (v16)
        {
          v19 = 138412290;
          v20 = v5;
          _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", (uint8_t *)&v19, 0xCu);
        }
      }
      else if (v16)
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "descriptionWithIndent:options:", 0, 2));
        v19 = 138412290;
        v20 = v18;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", (uint8_t *)&v19, 0xCu);

      }
    }

  }
  return a1;
}

id *sub_10002EB54(id *a1, void *a2, int a3, void *a4, void *a5, void *a6)
{
  id v12;
  id *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  objc_super v59;

  v12 = a2;
  if (a1)
  {
    v59.receiver = a1;
    v59.super_class = (Class)NESMPolicySession;
    v13 = (id *)objc_msgSendSuper2(&v59, "init");
    a1 = v13;
    if (v13)
    {
      objc_storeStrong(v13 + 2, a2);
      *((_DWORD *)a1 + 2) = a3;
      a1[3] = a4;
      a1[4] = a5;
      a1[5] = a6;
      v14 = objc_alloc_init((Class)NSMutableArray);
      v15 = a1[6];
      a1[6] = v14;

      v16 = objc_alloc_init((Class)NSMutableArray);
      v17 = a1[7];
      a1[7] = v16;

      v18 = objc_alloc_init((Class)NSMutableArray);
      v19 = a1[8];
      a1[8] = v18;

      v20 = objc_alloc_init((Class)NSMutableArray);
      v21 = a1[9];
      a1[9] = v20;

      v22 = objc_alloc_init((Class)NSMutableArray);
      v23 = a1[10];
      a1[10] = v22;

      v24 = objc_alloc_init((Class)NSMutableArray);
      v25 = a1[11];
      a1[11] = v24;

      v26 = objc_alloc_init((Class)NSMutableArray);
      v27 = a1[12];
      a1[12] = v26;

      v28 = objc_alloc_init((Class)NSMutableArray);
      v29 = a1[13];
      a1[13] = v28;

      v30 = objc_alloc_init((Class)NSMutableArray);
      v31 = a1[14];
      a1[14] = v30;

      v32 = objc_alloc_init((Class)NSMutableArray);
      v33 = a1[15];
      a1[15] = v32;

      v34 = objc_alloc_init((Class)NSMutableArray);
      v35 = a1[16];
      a1[16] = v34;

      v36 = objc_alloc_init((Class)NSMutableArray);
      v37 = a1[18];
      a1[18] = v36;

      v38 = objc_alloc_init((Class)NSMutableArray);
      v39 = a1[19];
      a1[19] = v38;

      v40 = objc_alloc_init((Class)NSMutableArray);
      v41 = a1[20];
      a1[20] = v40;

      v42 = objc_alloc_init((Class)NSMutableDictionary);
      v43 = a1[21];
      a1[21] = v42;

      v44 = objc_alloc_init((Class)NSMutableDictionary);
      v45 = a1[22];
      a1[22] = v44;

      v46 = objc_alloc_init((Class)NSMutableDictionary);
      v47 = a1[23];
      a1[23] = v46;

      v48 = objc_alloc_init((Class)NSMutableDictionary);
      v49 = a1[24];
      a1[24] = v48;

      v50 = objc_alloc_init((Class)NSMutableDictionary);
      v51 = a1[25];
      a1[25] = v50;

      v52 = objc_alloc_init((Class)NSMutableDictionary);
      v53 = a1[26];
      a1[26] = v52;

      v54 = objc_alloc_init((Class)NSMutableDictionary);
      v55 = a1[27];
      a1[27] = v54;

      v56 = objc_alloc_init((Class)NSMutableDictionary);
      v57 = a1[28];
      a1[28] = v56;

    }
  }

  return a1;
}

uint64_t sub_10002EDB4(uint64_t result)
{
  _QWORD *v1;
  int v2;
  uint64_t v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;

  if (result)
  {
    v1 = (_QWORD *)result;
    v2 = *(_DWORD *)(result + 8) - 1;
    result = 0;
    switch(v2)
    {
      case 0:
        v3 = v1[3];
        if (v1[4] == 2)
        {
          v4 = v3 == 1;
          v5 = 15500;
          v6 = 10000;
          goto LABEL_12;
        }
        v7 = v1[5] == 1;
        if (v1[5] == 1)
          v8 = 16300;
        else
          v8 = 17000;
        if (v7)
          v9 = 10800;
        else
          v9 = 14000;
        if (v3 == 1)
          result = v9;
        else
          result = v8;
        break;
      case 1:
        result = 500;
        break;
      case 2:
        result = 250;
        break;
      case 3:
        v4 = v1[3] == 3;
        v5 = 1500;
        v6 = 2000;
        goto LABEL_12;
      case 4:
        return result;
      case 5:
        result = 19000;
        break;
      case 6:
        v4 = v1[3] == 1;
        v5 = 19700;
        v6 = 19500;
LABEL_12:
        if (v4)
          result = v6;
        else
          result = v5;
        break;
      case 8:
        result = 5000;
        break;
      default:
        result = 20000;
        break;
    }
  }
  return result;
}

uint64_t sub_10002EE84(uint64_t result)
{
  _QWORD v1[5];

  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_10002EEE4;
    v1[3] = &unk_1000BDA50;
    v1[4] = result;
    return sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v1);
  }
  return result;
}

id sub_10002EEE4(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  id Property;
  id v6;
  SEL v7;
  id v8;

  v4 = a2;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v3, 16, 1);
  if (v4)
  {
    v6 = Property;
    os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000CF8C0);
    v8 = objc_msgSend(objc_getProperty(v4, v7, 16, 1), "registerServiceUUID:", v6);

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t sub_10002EF6C(uint64_t result)
{
  _QWORD v1[5];

  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_10002EFCC;
    v1[3] = &unk_1000BDA50;
    v1[4] = result;
    return sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v1);
  }
  return result;
}

id sub_10002EFCC(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  id Property;
  id v6;
  SEL v7;
  id v8;

  v4 = a2;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v3, 16, 1);
  if (v4)
  {
    v6 = Property;
    os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000CF8C0);
    v8 = objc_msgSend(objc_getProperty(v4, v7, 16, 1), "unregisterServiceUUID:", v6);

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t sub_10002F054(uint64_t result)
{
  _QWORD v1[5];

  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_10002F0B4;
    v1[3] = &unk_1000BDA50;
    v1[4] = result;
    return sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v1);
  }
  return result;
}

uint64_t sub_10002F0B4(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  id Property;
  id v6;
  const char *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  const char *v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v25;
  id v26;
  int v27;
  id v28;

  v4 = a2;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v3, 80, 1);
  v6 = objc_msgSend(Property, "count");
  v8 = v6;
  if (v6)
  {
    v9 = ne_log_large_obj(v6);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v25 = *(id *)(a1 + 32);
      if (v25)
        v25 = objc_getProperty(v25, v11, 80, 1);
      v27 = 138412290;
      v28 = v25;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Tunnel Policy IDs to be removed: %@", (uint8_t *)&v27, 0xCu);
    }

    v13 = *(void **)(a1 + 32);
    if (v13)
      v14 = objc_getProperty(v13, v12, 80, 1);
    else
      v14 = 0;
    sub_10002D1B0(v4, v14);
  }
  v15 = *(id *)(a1 + 32);
  if (v15)
    v15 = objc_getProperty(v15, v7, 88, 1);
  v16 = objc_msgSend(v15, "count");
  if (v16)
  {
    v17 = ne_log_large_obj(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      v26 = *(id *)(a1 + 32);
      if (v26)
        v26 = objc_getProperty(v26, v19, 88, 1);
      v27 = 138412290;
      v28 = v26;
      _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Low tunnel Policy IDs to be removed: %@", (uint8_t *)&v27, 0xCu);
    }

    v21 = *(void **)(a1 + 32);
    if (v21)
      v22 = objc_getProperty(v21, v20, 88, 1);
    else
      v22 = 0;
    sub_10002DA24(v4, v22);
  }
  else if (!v8)
  {
    v23 = 1;
    goto LABEL_17;
  }
  v23 = sub_10002D308(v4);
LABEL_17:

  return v23;
}

BOOL sub_10002F294(uint64_t a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  _BOOL8 v11;
  const char *v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  id v17;
  _BOOL8 v18;
  const char *v19;
  _BOOL8 v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  id v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  void *v34;
  id Property;
  id v36;
  id v37;
  int v38;
  id v39;
  __int16 v40;
  id v41;

  v3 = a2;
  v4 = ne_log_large_obj(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v34 = *(void **)(a1 + 32);
    if (v34)
    {
      Property = objc_getProperty(v34, v6, 48, 1);
      if (v3)
      {
LABEL_27:
        v36 = objc_getProperty(v3, v6, 32, 1);
LABEL_28:
        v38 = 138412546;
        v39 = Property;
        v40 = 2112;
        v41 = v36;
        _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed: %@, plus pathRule filter policies %@", (uint8_t *)&v38, 0x16u);
        goto LABEL_2;
      }
    }
    else
    {
      Property = 0;
      if (v3)
        goto LABEL_27;
    }
    v36 = 0;
    goto LABEL_28;
  }
LABEL_2:

  v8 = ne_log_large_obj(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v37 = *(id *)(a1 + 32);
    if (v37)
      v37 = objc_getProperty(v37, v10, 56, 1);
    v38 = 138412290;
    v39 = v37;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed: %@ from Low Priority", (uint8_t *)&v38, 0xCu);
  }

  if (!v3 || (v3[2] = 0, v13 = objc_getProperty(v3, v12, 32, 1), !(v11 = sub_10002D1B0(v3, v13))))
  {
    v14 = ne_log_obj(v11, v12);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v38) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to remove pathRule filter policies", (uint8_t *)&v38, 2u);
    }

  }
  v16 = *(void **)(a1 + 32);
  if (v16)
    v17 = objc_getProperty(v16, v12, 48, 1);
  else
    v17 = 0;
  v18 = sub_10002D1B0(v3, v17);
  v20 = v18;
  if (!v18)
  {
    v21 = ne_log_obj(v18, v19);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v38) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to remove filter policies", (uint8_t *)&v38, 2u);
    }

  }
  v23 = *(void **)(a1 + 32);
  if (v23)
    v24 = objc_getProperty(v23, v19, 56, 1);
  else
    v24 = 0;
  v25 = sub_10002DA24(v3, v24);
  if (!v25)
  {
    v27 = ne_log_obj(v25, v26);
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v38) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Failed to remove Low priority filter policies", (uint8_t *)&v38, 2u);
    }

    v20 = 0;
  }
  v29 = sub_10002D308(v3);
  if ((v29 & 1) == 0)
  {
    v31 = ne_log_obj(v29, v30);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v38) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Failed to apply filter policies", (uint8_t *)&v38, 2u);
    }

    v20 = 0;
  }

  return v20;
}

uint64_t sub_10002F5BC(void *a1, const char *a2)
{
  uint64_t v3;
  _QWORD v5[5];

  if (!a1)
    return 0;
  v3 = 1;
  if (objc_msgSend(objc_getProperty(a1, a2, 136, 1), "count"))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10002F64C;
    v5[3] = &unk_1000BDA50;
    v5[4] = a1;
    return sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v5);
  }
  return v3;
}

uint64_t sub_10002F64C(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  void *v5;
  id Property;
  uint64_t v7;

  v4 = a2;
  v5 = *(void **)(a1 + 32);
  if (v5)
    Property = objc_getProperty(v5, v3, 136, 1);
  else
    Property = 0;
  if (sub_10002D1B0(v4, Property))
    v7 = sub_10002D308(v4);
  else
    v7 = 0;

  return v7;
}

uint64_t sub_10002F6B8(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  void *v5;
  id Property;
  const char *v7;
  void *v8;
  id v9;
  _UNKNOWN **v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  int v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  const char *v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  const char *v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  const char *v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  void *v54;
  id i;
  void *v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  void *j;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  int v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  const char *v79;
  id v80;
  void *v81;
  id v82;
  id v83;
  void *v84;
  void *v85;
  const char *v86;
  id v87;
  void *v88;
  char *v89;
  id v90;
  int v91;
  void *v92;
  _QWORD *v93;
  void *v94;
  const char *v95;
  id v96;
  void *v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  const char *v102;
  id v103;
  void *v104;
  id v105;
  id v106;
  char *v107;
  uint64_t v108;
  int v109;
  int v110;
  id v111;
  int v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  void *v119;
  void *v120;
  const char *v121;
  id v122;
  void *v123;
  id v124;
  char *v125;
  const char *v126;
  id v127;
  void *v128;
  void *v129;
  id v130;
  void *v131;
  _QWORD *v132;
  void *v133;
  void *v134;
  void *v135;
  const char *v136;
  id v137;
  void *v138;
  id v139;
  const char *v140;
  id v141;
  void *v142;
  id v143;
  void *v144;
  _QWORD *v145;
  void *v146;
  const char *v147;
  id v148;
  void *v149;
  id v150;
  const char *v151;
  id v152;
  void *v153;
  id v154;
  id v155;
  void **v156;
  uint64_t v157;
  const char *v158;
  id v159;
  void *v160;
  id v161;
  const char *v162;
  id v163;
  void *v164;
  id v165;
  void *v166;
  const char *v167;
  id v168;
  void *v169;
  id v170;
  id v171;
  void *v172;
  void *v173;
  const char *v174;
  id v175;
  void *v176;
  id v177;
  uint64_t v178;
  void *v179;
  void **v180;
  const char *v181;
  id v182;
  void *v183;
  id v184;
  const char *v185;
  void *v186;
  id v187;
  void *v188;
  void *v189;
  id v190;
  uint64_t v191;
  void *v192;
  const char *v193;
  id v194;
  void *v195;
  id v196;
  void *v197;
  id v198;
  uint64_t v199;
  id v200;
  char *v201;
  int v202;
  int v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  id v208;
  id v209;
  void *v210;
  id v211;
  char *v212;
  int v213;
  int v214;
  int v215;
  void *v216;
  void *v217;
  int v218;
  id obj;
  id obja;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  void *v245;
  void *v246;
  _QWORD v247[2];
  _QWORD v248[2];
  _QWORD v249[2];
  _QWORD v250[2];
  _QWORD v251[3];
  _QWORD v252[3];
  _QWORD v253[3];
  _BYTE v254[128];
  _QWORD v255[2];
  _QWORD v256[2];
  _QWORD v257[2];
  _QWORD v258[3];
  _QWORD v259[3];
  _QWORD v260[3];
  void *v261;
  _BYTE v262[128];
  _BYTE v263[128];
  _BYTE v264[128];
  _BYTE v265[128];
  void *v266;
  void *v267;
  void *v268;
  _QWORD v269[2];
  _QWORD v270[2];
  _QWORD v271[2];
  uint8_t buf[4];
  uint64_t v273;
  __int16 v274;
  id v275;
  _QWORD v276[2];
  _QWORD v277[3];
  _BYTE v278[128];

  v4 = a2;
  v5 = *(void **)(a1 + 32);
  if (v5)
    Property = objc_getProperty(v5, v3, 96, 1);
  else
    Property = 0;
  sub_10002D1B0(v4, Property);
  v8 = *(void **)(a1 + 32);
  if (v8)
    v9 = objc_getProperty(v8, v7, 104, 1);
  else
    v9 = 0;
  sub_10002DA24(v4, v9);
  v10 = &AnalyticsSendEventLazy_ptr;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition uid:](NEPolicyCondition, "uid:", *(unsigned int *)(a1 + 88)));
  obj = v4;
  v216 = v11;
  if ((*(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFFFFELL) == 2
    || objc_msgSend(*(id *)(a1 + 40), "action") == (id)4
    || objc_msgSend(*(id *)(a1 + 40), "action") == (id)2)
  {
    v12 = objc_msgSend(*(id *)(a1 + 40), "action");
    if (v12 == (id)2 && (v12 = objc_msgSend(*(id *)(a1 + 48), "count")) != 0)
    {
      v14 = ne_log_obj(v12, v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Adding Disconnect On Demand policies to skip privacy proxies for internal domains", buf, 2u);
      }

      v16 = a1;
      if (*(_QWORD *)(a1 + 56))
        v17 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:"));
      else
        v17 = 0;
      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition clientFlags:](NEPolicyCondition, "clientFlags:", 0x10000));
      objc_msgSend(v34, "setNegative:", 1);
      v243 = 0u;
      v244 = 0u;
      v241 = 0u;
      v242 = 0u;
      obja = *(id *)(v16 + 48);
      v35 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v241, v278, 16);
      if (v35)
      {
        v36 = v35;
        v37 = *(_QWORD *)v242;
        do
        {
          v38 = 0;
          do
          {
            if (*(_QWORD *)v242 != v37)
              objc_enumerationMutation(obja);
            v39 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10[175], "domain:", *(_QWORD *)(*((_QWORD *)&v241 + 1)
                                                                                                + 8 * (_QWORD)v38)));
            v40 = (void *)v39;
            if (v216)
            {
              v277[0] = v216;
              v277[1] = v39;
              v277[2] = v34;
              v41 = v277;
              v42 = 3;
            }
            else
            {
              v276[0] = v39;
              v276[1] = v34;
              v41 = v276;
              v42 = 2;
            }
            v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v41, v42));
            v45 = *(void **)(v16 + 32);
            if (v45)
              v46 = objc_getProperty(v45, v43, 104, 1);
            else
              v46 = 0;
            sub_10002E80C((_BOOL8)v4, v44, v46);
            if (v17)
            {
              v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "arrayByAddingObject:", v17));

              v49 = *(void **)(v16 + 32);
              if (v49)
                v50 = objc_getProperty(v49, v48, 104, 1);
              else
                v50 = 0;
              sub_10002E80C((_BOOL8)v4, v47, v50);
              v44 = v47;
            }

            v38 = (char *)v38 + 1;
            v10 = &AnalyticsSendEventLazy_ptr;
          }
          while (v36 != v38);
          v51 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v241, v278, 16);
          v36 = v51;
        }
        while (v51);
      }

      v11 = v216;
    }
    else
    {
      v18 = ne_log_obj(v12, v13);
      v17 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        v19 = *(_QWORD *)(a1 + 80);
        v20 = objc_msgSend(*(id *)(a1 + 40), "action");
        *(_DWORD *)buf = 134218240;
        v273 = v19;
        v274 = 2048;
        v275 = v20;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "No On Demand policies (pause %ld, action %ld)", buf, 0x16u);
      }
    }

    sub_10002D308(v4);
    v52 = 1;
    goto LABEL_45;
  }
  v21 = objc_msgSend(*(id *)(a1 + 40), "action");
  if (v21 == (id)3)
  {
    v24 = *(id *)(a1 + 40);
    v237 = 0u;
    v238 = 0u;
    v239 = 0u;
    v240 = 0u;
    v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "connectionRules"));
    v200 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v237, v265, 16);
    if (!v200)
      goto LABEL_174;
    v202 = 0;
    v214 = 0;
    v198 = v24;
    v199 = *(_QWORD *)v238;
    v197 = v54;
    while (1)
    {
      for (i = 0; i != v200; i = v107 + 1)
      {
        if (*(_QWORD *)v238 != v199)
          objc_enumerationMutation(v54);
        v201 = (char *)i;
        v56 = *(void **)(*((_QWORD *)&v237 + 1) + 8 * (_QWORD)i);
        v210 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
        v233 = 0u;
        v234 = 0u;
        v235 = 0u;
        v236 = 0u;
        v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "matchDomains"));
        v58 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v233, v264, 16);
        if (v58)
        {
          v59 = v58;
          v60 = *(_QWORD *)v234;
          do
          {
            for (j = 0; j != v59; j = (char *)j + 1)
            {
              if (*(_QWORD *)v234 != v60)
                objc_enumerationMutation(v57);
              v62 = *(void **)(*((_QWORD *)&v233 + 1) + 8 * (_QWORD)j);
              v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("*.")));
              v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "stringByTrimmingCharactersInSet:", v63));
              if (v64)
                objc_msgSend(v210, "addObject:", v64);

            }
            v59 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v233, v264, 16);
          }
          while (v59);
        }

        if (objc_msgSend(v56, "action") == (id)1)
        {
          v65 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", *(_QWORD *)(a1 + 64)));
          v229 = 0u;
          v230 = 0u;
          v231 = 0u;
          v232 = 0u;
          v211 = v210;
          v4 = obj;
          v10 = &AnalyticsSendEventLazy_ptr;
          v208 = objc_msgSend(v211, "countByEnumeratingWithState:objects:count:", &v229, v263, 16);
          if (v208)
          {
            v206 = *(_QWORD *)v230;
            v66 = v214;
            do
            {
              v67 = 0;
              do
              {
                if (*(_QWORD *)v230 != v206)
                  objc_enumerationMutation(v211);
                v212 = (char *)v67;
                v68 = *(_QWORD *)(*((_QWORD *)&v229 + 1) + 8 * (_QWORD)v67);
                v217 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v68));
                v215 = v66;
                v69 = sub_10002EDB4(*(_QWORD *)(a1 + 32)) + 2 * v66 + 2110;
                v225 = 0u;
                v226 = 0u;
                v227 = 0u;
                v228 = 0u;
                v70 = a1;
                v71 = *(id *)(a1 + 72);
                v72 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v225, v262, 16);
                if (v72)
                {
                  v73 = v72;
                  v74 = *(_QWORD *)v226;
                  do
                  {
                    v75 = 0;
                    do
                    {
                      if (*(_QWORD *)v226 != v74)
                        objc_enumerationMutation(v71);
                      v76 = *(void **)(*((_QWORD *)&v225 + 1) + 8 * (_QWORD)v75);
                      if (isa_nsstring(v76) && objc_msgSend(v76, "hasSuffix:", v68))
                      {
                        v77 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v76));
                        v261 = v77;
                        v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v261, 1));

                        v80 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v69, v65, v78);
                        v81 = *(void **)(v70 + 32);
                        if (v81)
                          v82 = objc_getProperty(v81, v79, 96, 1);
                        else
                          v82 = 0;
                        sub_10002E954((_BOOL8)obj, v80, v82);

                        v69 = (v69 + 1);
                      }
                      v75 = (char *)v75 + 1;
                    }
                    while (v73 != v75);
                    v83 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v225, v262, 16);
                    v73 = v83;
                  }
                  while (v83);
                }

                if (v216)
                {
                  v260[0] = v217;
                  v260[1] = v216;
                  objc_opt_self(NESMPolicySession);
                  v10 = &AnalyticsSendEventLazy_ptr;
                  v84 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 0, 0));
                  v260[2] = v84;
                  v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v260, 3));

                  v87 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v69, v65, v85);
                  a1 = v70;
                  v88 = *(void **)(v70 + 32);
                  v4 = obj;
                  v89 = v212;
                  if (v88)
                    v90 = objc_getProperty(v88, v86, 96, 1);
                  else
                    v90 = 0;
                  v91 = v215;
                  sub_10002E954((_BOOL8)obj, v87, v90);

                  if (*(_QWORD *)(a1 + 80) == 1)
                  {
                    v259[0] = v217;
                    v259[1] = v216;
                    objc_opt_self(NESMPolicySession);
                    v92 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 300, 899));
                    v259[2] = v92;
                    v93 = v259;
                  }
                  else
                  {
                    v258[0] = v217;
                    v258[1] = v216;
                    objc_opt_self(NESMPolicySession);
                    v92 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 200, 899));
                    v258[2] = v92;
                    v93 = v258;
                  }
                  v99 = (v69 + 1);
                  v100 = 3;
                }
                else
                {
                  v257[0] = v217;
                  objc_opt_self(NESMPolicySession);
                  v10 = &AnalyticsSendEventLazy_ptr;
                  v94 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 0, 0));
                  v257[1] = v94;
                  v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v257, 2));

                  v96 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v69, v65, v85);
                  a1 = v70;
                  v97 = *(void **)(v70 + 32);
                  v4 = obj;
                  v89 = v212;
                  if (v97)
                    v98 = objc_getProperty(v97, v95, 96, 1);
                  else
                    v98 = 0;
                  v91 = v215;
                  sub_10002E954((_BOOL8)obj, v96, v98);

                  if (*(_QWORD *)(a1 + 80) == 1)
                  {
                    v256[0] = v217;
                    objc_opt_self(NESMPolicySession);
                    v92 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 300, 899));
                    v256[1] = v92;
                    v93 = v256;
                  }
                  else
                  {
                    v255[0] = v217;
                    objc_opt_self(NESMPolicySession);
                    v92 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 200, 899));
                    v255[1] = v92;
                    v93 = v255;
                  }
                  v99 = (v69 + 1);
                  v100 = 2;
                }
                v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v93, v100));

                v103 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v99, v65, v101);
                v104 = *(void **)(a1 + 32);
                if (v104)
                  v105 = objc_getProperty(v104, v102, 96, 1);
                else
                  v105 = 0;
                sub_10002E954((_BOOL8)v4, v103, v105);

                v66 = v91 + 1;
                v67 = v89 + 1;
              }
              while (v67 != v208);
              v106 = objc_msgSend(v211, "countByEnumeratingWithState:objects:count:", &v229, v263, 16);
              v208 = v106;
            }
            while (v106);
            v214 = v66;
          }
        }
        else
        {
          v4 = obj;
          v10 = &AnalyticsSendEventLazy_ptr;
          v107 = v201;
          if (objc_msgSend(v56, "action") != (id)2)
            goto LABEL_157;
          if (*(_QWORD *)(a1 + 32))
            v108 = 20000;
          else
            v108 = 0;
          v65 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v108));
          v211 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyResult removeNetworkAgentUUID:](NEPolicyResult, "removeNetworkAgentUUID:", *(_QWORD *)(a1 + 64)));
          v207 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult scopeToDirectInterface](NEPolicyResult, "scopeToDirectInterface"));
          if (*(_QWORD *)(a1 + 32))
            v109 = 20100;
          else
            v109 = 100;
          v218 = v109;
          v221 = 0u;
          v222 = 0u;
          v223 = 0u;
          v224 = 0u;
          v204 = v210;
          v209 = objc_msgSend(v204, "countByEnumeratingWithState:objects:count:", &v221, v254, 16);
          if (v209)
          {
            v205 = *(_QWORD *)v222;
            v110 = v202;
            do
            {
              v111 = 0;
              v112 = 2 * v110;
              v203 = v110;
              do
              {
                if (*(_QWORD *)v222 != v205)
                  objc_enumerationMutation(v204);
                v113 = (char *)v111;
                v114 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10[175], "domain:", *(_QWORD *)(*((_QWORD *)&v221 + 1) + 8 * (_QWORD)v111)));
                v213 = sub_10002EDB4(*(_QWORD *)(a1 + 32));
                v115 = a1;
                v116 = (v213 + v112 + 10);
                v117 = (v218 + v112);
                if (v216)
                {
                  v118 = (void *)v114;
                  v253[0] = v114;
                  v253[1] = v216;
                  objc_opt_self(NESMPolicySession);
                  v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10[175], "trafficClassStart:end:", 0, 0));
                  v253[2] = v119;
                  v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v253, 3));

                  v122 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v116, v65, v120);
                  v123 = *(void **)(v115 + 32);
                  a1 = v115;
                  if (v123)
                    v124 = objc_getProperty(v123, v121, 96, 1);
                  else
                    v124 = 0;
                  v125 = v113;
                  sub_10002E954((_BOOL8)obj, v122, v124);

                  v127 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v117, v211, v120);
                  v128 = *(void **)(a1 + 32);
                  v129 = v118;
                  if (v128)
                    v130 = objc_getProperty(v128, v126, 96, 1);
                  else
                    v130 = 0;
                  sub_10002E954((_BOOL8)obj, v127, v130);

                  if (*(_QWORD *)(a1 + 80) == 1)
                  {
                    v252[0] = v118;
                    v252[1] = v216;
                    objc_opt_self(NESMPolicySession);
                    v131 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 300, 899));
                    v252[2] = v131;
                    v132 = v252;
                  }
                  else
                  {
                    v251[0] = v118;
                    v251[1] = v216;
                    objc_opt_self(NESMPolicySession);
                    v131 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 200, 899));
                    v251[2] = v131;
                    v132 = v251;
                  }
                  v146 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v132, 3));

                  v148 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v213 + v112 + 11), v65, v146);
                  v149 = *(void **)(a1 + 32);
                  if (v149)
                    v150 = objc_getProperty(v149, v147, 96, 1);
                  else
                    v150 = 0;
                  sub_10002E954((_BOOL8)obj, v148, v150);

                  v152 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v218 + v112 + 1), v211, v146);
                  v153 = *(void **)(a1 + 32);
                  if (v153)
                    v154 = objc_getProperty(v153, v151, 96, 1);
                  else
                    v154 = 0;
                  sub_10002E954((_BOOL8)obj, v152, v154);

                  v155 = objc_alloc((Class)NEPolicy);
                  v250[0] = v129;
                  v250[1] = v216;
                  v156 = (void **)v250;
                  v157 = 2;
                }
                else
                {
                  v133 = (void *)v114;
                  v249[0] = v114;
                  objc_opt_self(NESMPolicySession);
                  v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10[175], "trafficClassStart:end:", 0, 0));
                  v249[1] = v134;
                  v135 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v249, 2));

                  v137 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v116, v65, v135);
                  v138 = *(void **)(v115 + 32);
                  a1 = v115;
                  if (v138)
                    v139 = objc_getProperty(v138, v136, 96, 1);
                  else
                    v139 = 0;
                  v125 = v113;
                  sub_10002E954((_BOOL8)obj, v137, v139);

                  v141 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v117, v211, v135);
                  v142 = *(void **)(a1 + 32);
                  v129 = v133;
                  if (v142)
                    v143 = objc_getProperty(v142, v140, 96, 1);
                  else
                    v143 = 0;
                  sub_10002E954((_BOOL8)obj, v141, v143);

                  if (*(_QWORD *)(a1 + 80) == 1)
                  {
                    v248[0] = v133;
                    objc_opt_self(NESMPolicySession);
                    v144 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 300, 899));
                    v248[1] = v144;
                    v145 = v248;
                  }
                  else
                  {
                    v247[0] = v133;
                    objc_opt_self(NESMPolicySession);
                    v144 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 200, 899));
                    v247[1] = v144;
                    v145 = v247;
                  }
                  v146 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v145, 2));

                  v159 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v213 + v112 + 11), v65, v146);
                  v160 = *(void **)(a1 + 32);
                  if (v160)
                    v161 = objc_getProperty(v160, v158, 96, 1);
                  else
                    v161 = 0;
                  sub_10002E954((_BOOL8)obj, v159, v161);

                  v163 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v218 + v112 + 1), v211, v146);
                  v164 = *(void **)(a1 + 32);
                  if (v164)
                    v165 = objc_getProperty(v164, v162, 96, 1);
                  else
                    v165 = 0;
                  sub_10002E954((_BOOL8)obj, v163, v165);

                  v155 = objc_alloc((Class)NEPolicy);
                  v246 = v129;
                  v156 = &v246;
                  v157 = 1;
                }
                v166 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v156, v157));
                v168 = objc_msgSend(v155, "initWithOrder:result:conditions:", 80, v207, v166);
                v169 = *(void **)(a1 + 32);
                if (v169)
                  v170 = objc_getProperty(v169, v167, 104, 1);
                else
                  v170 = 0;
                sub_10002CE30((_BOOL8)obj, v168, v170);

                v111 = v125 + 1;
                v112 += 2;
                v10 = &AnalyticsSendEventLazy_ptr;
              }
              while (v209 != v111);
              v110 = v203 + (_DWORD)v111;
              v171 = objc_msgSend(v204, "countByEnumeratingWithState:objects:count:", &v221, v254, 16);
              v209 = v171;
            }
            while (v171);
          }
          else
          {
            v110 = v202;
          }
          v202 = v110;

        }
        v54 = v197;
        v24 = v198;
        v107 = v201;
LABEL_157:

      }
      v200 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v237, v265, 16);
      if (!v200)
        goto LABEL_174;
    }
  }
  if (v21 == (id)1)
  {
    v22 = sub_10002EDB4(*(_QWORD *)(a1 + 32));
    v23 = (v22 + 10);
    v24 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", *(_QWORD *)(a1 + 64)));
    if (v11)
    {
      v271[0] = v11;
      objc_opt_self(NESMPolicySession);
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 0, 0));
      v271[1] = v25;
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v271, 2));

      v28 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v23, v24, v26);
      v29 = *(void **)(a1 + 32);
      if (v29)
        v30 = objc_getProperty(v29, v27, 96, 1);
      else
        v30 = 0;
      sub_10002E954((_BOOL8)v4, v28, v30);

      v31 = (v22 + 11);
      if (*(_QWORD *)(a1 + 80) == 1)
      {
        v270[0] = v11;
        objc_opt_self(NESMPolicySession);
        v10 = &AnalyticsSendEventLazy_ptr;
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 300, 899));
        v270[1] = v32;
        v33 = v270;
      }
      else
      {
        v269[0] = v11;
        objc_opt_self(NESMPolicySession);
        v10 = &AnalyticsSendEventLazy_ptr;
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 200, 899));
        v269[1] = v32;
        v33 = v269;
      }
      v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v33, 2));

    }
    else
    {
      objc_opt_self(NESMPolicySession);
      v172 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 0, 0));
      v268 = v172;
      v173 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v268, 1));

      v175 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v23, v24, v173);
      v176 = *(void **)(a1 + 32);
      if (v176)
        v177 = objc_getProperty(v176, v174, 96, 1);
      else
        v177 = 0;
      sub_10002E954((_BOOL8)v4, v175, v177);

      v31 = (v22 + 11);
      v178 = *(_QWORD *)(a1 + 80);
      objc_opt_self(NESMPolicySession);
      v10 = &AnalyticsSendEventLazy_ptr;
      if (v178 == 1)
      {
        v179 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 300, 899));
        v267 = v179;
        v180 = &v267;
      }
      else
      {
        v179 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 200, 899));
        v266 = v179;
        v180 = &v266;
      }
      v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v180, 1));

    }
    v182 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v31, v24, v54);
    v183 = *(void **)(a1 + 32);
    if (v183)
      v184 = objc_getProperty(v183, v181, 96, 1);
    else
      v184 = 0;
    sub_10002E954((_BOOL8)v4, v182, v184);

    v186 = *(void **)(a1 + 32);
    if (v186)
      v187 = objc_getProperty(v186, v185, 104, 1);
    else
      v187 = 0;
    sub_10002E80C((_BOOL8)v4, v54, v187);
LABEL_174:

    if (*(_BYTE *)(a1 + 92))
    {
      v188 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10[175], "localNetworks"));
      v189 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult removeNetworkAgentUUID:](NEPolicyResult, "removeNetworkAgentUUID:", *(_QWORD *)(a1 + 64)));
      v190 = objc_alloc((Class)NEPolicy);
      v191 = sub_10002EDB4(*(_QWORD *)(a1 + 32)) + 30;
      v245 = v188;
      v192 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v245, 1));
      v194 = objc_msgSend(v190, "initWithOrder:result:conditions:", v191, v189, v192);
      v195 = *(void **)(a1 + 32);
      if (v195)
        v196 = objc_getProperty(v195, v193, 96, 1);
      else
        v196 = 0;
      sub_10002E954((_BOOL8)v4, v194, v196);

    }
    v52 = sub_10002D308(v4);
    v11 = v216;
  }
  else
  {
    v52 = 0;
  }
LABEL_45:

  return v52;
}

uint64_t sub_100030C44(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  void *v5;
  id Property;
  const char *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v19;
  id v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  const char *v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  id v35;
  int v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  void *i;
  void *v44;
  void *v45;
  void *v46;
  uint64_t *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  const char *v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  void *v65;
  void *v66;
  const char *v67;
  id v68;
  void *v69;
  id v70;
  void *v71;
  _QWORD *v72;
  void *v73;
  const char *v74;
  id v75;
  void *v76;
  id v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  id v82;
  void *v83;
  id v84;
  id v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  const char *v97;
  id v98;
  void *v99;
  id v100;
  const char *v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  _QWORD *v106;
  void *v107;
  void *v108;
  const char *v109;
  id v110;
  void *v111;
  id v112;
  const char *v113;
  id v114;
  void *v115;
  id v116;
  void *v117;
  _QWORD *v118;
  uint64_t v119;
  void *v120;
  const char *v121;
  id v122;
  void *v123;
  id v124;
  const char *v125;
  id v126;
  void *v127;
  id v128;
  id v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  id v134;
  void *v135;
  id v136;
  const char *v137;
  id v138;
  void *v139;
  id v140;
  void *v141;
  const char *v142;
  id v143;
  void *v144;
  id v145;
  id v146;
  void *v147;
  const char *v148;
  id v149;
  void *v150;
  id v151;
  _QWORD *v152;
  uint64_t v153;
  const char *v154;
  id v155;
  void *v156;
  id v157;
  id v158;
  id obj;
  uint64_t v160;
  id v161;
  uint64_t v162;
  int v163;
  int v164;
  id v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  id v169;
  id v170;
  uint64_t v171;
  void *v172;
  id v173;
  uint64_t v174;
  int v175;
  int v176;
  int v177;
  void *v178;
  void *v179;
  void *v180;
  _BOOL8 v181;
  void *v182;
  void *v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  _QWORD v204[3];
  _QWORD v205[4];
  _QWORD v206[4];
  _QWORD v207[4];
  _QWORD v208[4];
  _QWORD v209[5];
  _QWORD v210[5];
  _QWORD v211[5];
  _BYTE v212[128];
  _QWORD v213[4];
  _QWORD v214[4];
  _QWORD v215[4];
  _QWORD v216[5];
  _QWORD v217[5];
  _QWORD v218[5];
  _QWORD v219[3];
  _BYTE v220[128];
  _BYTE v221[128];
  _BYTE v222[128];
  _BYTE v223[128];
  _QWORD v224[3];
  _QWORD v225[3];
  _QWORD v226[3];
  _QWORD v227[4];
  _QWORD v228[4];
  _QWORD v229[4];
  uint8_t buf[4];
  uint64_t v231;
  __int16 v232;
  id v233;

  v4 = a2;
  v5 = *(void **)(a1 + 32);
  if (v5)
    Property = objc_getProperty(v5, v3, 96, 1);
  else
    Property = 0;
  sub_10002D1B0(v4, Property);
  v8 = *(void **)(a1 + 32);
  if (v8)
    v9 = objc_getProperty(v8, v7, 104, 1);
  else
    v9 = 0;
  v10 = (id)sub_10002DA24(v4, v9);
  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL) == 2
    || (v10 = objc_msgSend(*(id *)(a1 + 40), "action"), v10 == (id)4)
    || (v10 = objc_msgSend(*(id *)(a1 + 40), "action"), v10 == (id)2))
  {
    v12 = ne_log_obj(v10, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = a1;
      v15 = *(_QWORD *)(a1 + 72);
      v16 = objc_msgSend(*(id *)(v14 + 40), "action");
      *(_DWORD *)buf = 134218240;
      v231 = v15;
      v232 = 2048;
      v233 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "No On Demand policies (pause %ld, action %ld)", buf, 0x16u);
    }

    sub_10002D308(v4);
    v17 = 1;
    goto LABEL_11;
  }
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition uid:](NEPolicyCondition, "uid:", *(unsigned int *)(a1 + 80)));
  v183 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition fallbackTraffic](NEPolicyCondition, "fallbackTraffic"));
  v182 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(a1 + 48)));
  v20 = objc_msgSend(*(id *)(a1 + 40), "action");
  v181 = (_BOOL8)v4;
  v21 = (uint64_t *)a1;
  v178 = v19;
  if (v20 == (id)3)
  {
    v35 = *(id *)(a1 + 40);
    v200 = 0u;
    v201 = 0u;
    v202 = 0u;
    v203 = 0u;
    v158 = v35;
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "connectionRules"));
    v161 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v200, v223, 16);
    if (!v161)
      goto LABEL_132;
    v163 = 0;
    v36 = 0;
    v160 = *(_QWORD *)v201;
    while (1)
    {
      v37 = 0;
      do
      {
        if (*(_QWORD *)v201 != v160)
          objc_enumerationMutation(obj);
        v162 = v37;
        v38 = *(void **)(*((_QWORD *)&v200 + 1) + 8 * v37);
        v172 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
        v196 = 0u;
        v197 = 0u;
        v198 = 0u;
        v199 = 0u;
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "matchDomains"));
        v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v196, v222, 16);
        if (v40)
        {
          v41 = v40;
          v42 = *(_QWORD *)v197;
          do
          {
            for (i = 0; i != v41; i = (char *)i + 1)
            {
              if (*(_QWORD *)v197 != v42)
                objc_enumerationMutation(v39);
              v44 = *(void **)(*((_QWORD *)&v196 + 1) + 8 * (_QWORD)i);
              v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("*.")));
              v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "stringByTrimmingCharactersInSet:", v45));
              if (v46)
                objc_msgSend(v172, "addObject:", v46);

            }
            v41 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v196, v222, 16);
          }
          while (v41);
        }

        if (objc_msgSend(v38, "action") == (id)1)
        {
          v47 = v21;
          v48 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v21[7]));
          v192 = 0u;
          v193 = 0u;
          v194 = 0u;
          v195 = 0u;
          v173 = v172;
          v4 = (id)v181;
          v170 = objc_msgSend(v173, "countByEnumeratingWithState:objects:count:", &v192, v221, 16);
          if (v170)
          {
            v168 = *(_QWORD *)v193;
            do
            {
              v49 = 0;
              do
              {
                if (*(_QWORD *)v193 != v168)
                  objc_enumerationMutation(v173);
                v174 = v49;
                v50 = *(_QWORD *)(*((_QWORD *)&v192 + 1) + 8 * v49);
                v179 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v50));
                v176 = v36;
                v51 = sub_10002EDB4(v47[4]) + 2 * v36 + 2110;
                v188 = 0u;
                v189 = 0u;
                v190 = 0u;
                v191 = 0u;
                v52 = (id)v47[8];
                v53 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v188, v220, 16);
                if (v53)
                {
                  v54 = v53;
                  v55 = *(_QWORD *)v189;
                  do
                  {
                    v56 = 0;
                    do
                    {
                      if (*(_QWORD *)v189 != v55)
                        objc_enumerationMutation(v52);
                      v57 = *(void **)(*((_QWORD *)&v188 + 1) + 8 * (_QWORD)v56);
                      if (isa_nsstring(v57) && objc_msgSend(v57, "hasSuffix:", v50))
                      {
                        v219[0] = v183;
                        v58 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v57));
                        v219[1] = v58;
                        v219[2] = v182;
                        v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v219, 3));

                        v61 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v51, v48, v59);
                        v62 = (void *)v21[4];
                        if (v62)
                          v63 = objc_getProperty(v62, v60, 96, 1);
                        else
                          v63 = 0;
                        sub_10002E954(v181, v61, v63);

                        v51 = (v51 + 1);
                      }
                      v56 = (char *)v56 + 1;
                    }
                    while (v54 != v56);
                    v64 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v188, v220, 16);
                    v54 = v64;
                  }
                  while (v64);
                }

                if (v178)
                {
                  v218[0] = v183;
                  v218[1] = v179;
                  v218[2] = v178;
                  objc_opt_self(NESMPolicySession);
                  v65 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 0, 0));
                  v218[3] = v65;
                  v218[4] = v182;
                  v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v218, 5));

                  v68 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v51, v48, v66);
                  v47 = v21;
                  v69 = (void *)v21[4];
                  v4 = (id)v181;
                  if (v69)
                    v70 = objc_getProperty(v69, v67, 96, 1);
                  else
                    v70 = 0;
                  sub_10002E954(v181, v68, v70);

                  if (v21[9] == 1)
                  {
                    v217[0] = v183;
                    v217[1] = v179;
                    v217[2] = v178;
                    objc_opt_self(NESMPolicySession);
                    v71 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 300, 899));
                    v217[3] = v71;
                    v72 = v217;
                  }
                  else
                  {
                    v216[0] = v183;
                    v216[1] = v179;
                    v216[2] = v178;
                    objc_opt_self(NESMPolicySession);
                    v71 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 200, 899));
                    v216[3] = v71;
                    v72 = v216;
                  }
                  v79 = (v51 + 1);
                  v72[4] = v182;
                }
                else
                {
                  v215[0] = v183;
                  v215[1] = v179;
                  objc_opt_self(NESMPolicySession);
                  v73 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 0, 0));
                  v215[2] = v73;
                  v215[3] = v182;
                  v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v215, 4));

                  v75 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v51, v48, v66);
                  v47 = v21;
                  v76 = (void *)v21[4];
                  v4 = (id)v181;
                  if (v76)
                    v77 = objc_getProperty(v76, v74, 96, 1);
                  else
                    v77 = 0;
                  sub_10002E954(v181, v75, v77);

                  if (v21[9] == 1)
                  {
                    v214[0] = v183;
                    v214[1] = v179;
                    objc_opt_self(NESMPolicySession);
                    v71 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 300, 899));
                    v214[2] = v71;
                    v78 = v214;
                  }
                  else
                  {
                    v213[0] = v183;
                    v213[1] = v179;
                    objc_opt_self(NESMPolicySession);
                    v71 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 200, 899));
                    v213[2] = v71;
                    v78 = v213;
                  }
                  v79 = (v51 + 1);
                  v78[3] = v182;
                }
                v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:"));

                v82 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v79, v48, v80);
                v83 = (void *)v47[4];
                if (v83)
                  v84 = objc_getProperty(v83, v81, 96, 1);
                else
                  v84 = 0;
                sub_10002E954((_BOOL8)v4, v82, v84);

                v36 = v176 + 1;
                v49 = v174 + 1;
              }
              while ((id)(v174 + 1) != v170);
              v85 = objc_msgSend(v173, "countByEnumeratingWithState:objects:count:", &v192, v221, 16);
              v170 = v85;
            }
            while (v85);
          }
        }
        else
        {
          v4 = (id)v181;
          v19 = v178;
          if (objc_msgSend(v38, "action") != (id)2)
            goto LABEL_130;
          v177 = v36;
          if (v21[4])
            v86 = 20000;
          else
            v86 = 0;
          v48 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v86));
          v173 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyResult removeNetworkAgentUUID:](NEPolicyResult, "removeNetworkAgentUUID:", v21[7]));
          v167 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult scopeToDirectInterface](NEPolicyResult, "scopeToDirectInterface"));
          if (v21[4])
            v87 = 20200;
          else
            v87 = 200;
          v175 = v87;
          v184 = 0u;
          v185 = 0u;
          v186 = 0u;
          v187 = 0u;
          v165 = v172;
          v169 = objc_msgSend(v165, "countByEnumeratingWithState:objects:count:", &v184, v212, 16);
          if (v169)
          {
            v166 = *(_QWORD *)v185;
            v88 = v163;
            do
            {
              v89 = 0;
              v90 = 2 * v88;
              v164 = v88;
              do
              {
                if (*(_QWORD *)v185 != v166)
                  objc_enumerationMutation(v165);
                v171 = v89;
                v91 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", *(_QWORD *)(*((_QWORD *)&v184 + 1) + 8 * v89)));
                v92 = sub_10002EDB4(v21[4]);
                v93 = (v92 + v90 + 10);
                v94 = (v175 + v90);
                v180 = (void *)v91;
                if (v178)
                {
                  v211[0] = v183;
                  v211[1] = v91;
                  v211[2] = v178;
                  objc_opt_self(NESMPolicySession);
                  v95 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 0, 0));
                  v211[3] = v95;
                  v211[4] = v182;
                  v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v211, 5));

                  v98 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v93, v48, v96);
                  v99 = (void *)v21[4];
                  if (v99)
                    v100 = objc_getProperty(v99, v97, 96, 1);
                  else
                    v100 = 0;
                  sub_10002E954(v181, v98, v100);

                  v102 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v94, v173, v96);
                  v103 = (void *)v21[4];
                  if (v103)
                    v104 = objc_getProperty(v103, v101, 96, 1);
                  else
                    v104 = 0;
                  sub_10002E954(v181, v102, v104);

                  if (v21[9] == 1)
                  {
                    v210[0] = v183;
                    v210[1] = v180;
                    v210[2] = v178;
                    objc_opt_self(NESMPolicySession);
                    v105 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 300, 899));
                    v210[3] = v105;
                    v106 = v210;
                  }
                  else
                  {
                    v209[0] = v183;
                    v209[1] = v180;
                    v209[2] = v178;
                    objc_opt_self(NESMPolicySession);
                    v105 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 200, 899));
                    v209[3] = v105;
                    v106 = v209;
                  }
                  v119 = (v92 + v90 + 11);
                  v106[4] = v182;
                  v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:"));

                  v122 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v119, v48, v120);
                  v123 = (void *)v21[4];
                  if (v123)
                    v124 = objc_getProperty(v123, v121, 96, 1);
                  else
                    v124 = 0;
                  sub_10002E954(v181, v122, v124);

                  v126 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v175 + v90 + 1), v173, v120);
                  v127 = (void *)v21[4];
                  if (v127)
                    v128 = objc_getProperty(v127, v125, 96, 1);
                  else
                    v128 = 0;
                  sub_10002E954(v181, v126, v128);

                  v129 = objc_alloc((Class)NEPolicy);
                  v208[0] = v183;
                  v208[1] = v180;
                  v208[2] = v178;
                  v208[3] = v182;
                  v130 = v208;
                  v131 = 4;
                }
                else
                {
                  v207[0] = v183;
                  v207[1] = v91;
                  objc_opt_self(NESMPolicySession);
                  v107 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 0, 0));
                  v207[2] = v107;
                  v207[3] = v182;
                  v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v207, 4));

                  v110 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v93, v48, v108);
                  v111 = (void *)v21[4];
                  if (v111)
                    v112 = objc_getProperty(v111, v109, 96, 1);
                  else
                    v112 = 0;
                  sub_10002E954(v181, v110, v112);

                  v114 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v94, v173, v108);
                  v115 = (void *)v21[4];
                  if (v115)
                    v116 = objc_getProperty(v115, v113, 96, 1);
                  else
                    v116 = 0;
                  sub_10002E954(v181, v114, v116);

                  if (v21[9] == 1)
                  {
                    v206[0] = v183;
                    v206[1] = v180;
                    objc_opt_self(NESMPolicySession);
                    v117 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 300, 899));
                    v206[2] = v117;
                    v118 = v206;
                  }
                  else
                  {
                    v205[0] = v183;
                    v205[1] = v180;
                    objc_opt_self(NESMPolicySession);
                    v117 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 200, 899));
                    v205[2] = v117;
                    v118 = v205;
                  }
                  v132 = (v92 + v90 + 11);
                  v118[3] = v182;
                  v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:"));

                  v134 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v132, v48, v120);
                  v135 = (void *)v21[4];
                  if (v135)
                    v136 = objc_getProperty(v135, v133, 96, 1);
                  else
                    v136 = 0;
                  sub_10002E954(v181, v134, v136);

                  v138 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v175 + v90 + 1), v173, v120);
                  v139 = (void *)v21[4];
                  if (v139)
                    v140 = objc_getProperty(v139, v137, 96, 1);
                  else
                    v140 = 0;
                  sub_10002E954(v181, v138, v140);

                  v129 = objc_alloc((Class)NEPolicy);
                  v204[0] = v183;
                  v204[1] = v180;
                  v204[2] = v182;
                  v130 = v204;
                  v131 = 3;
                }
                v141 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v130, v131));
                v143 = objc_msgSend(v129, "initWithOrder:result:conditions:", 80, v167, v141);
                v144 = (void *)v21[4];
                if (v144)
                  v145 = objc_getProperty(v144, v142, 104, 1);
                else
                  v145 = 0;
                sub_10002CE30(v181, v143, v145);

                v89 = v171 + 1;
                v90 += 2;
              }
              while (v169 != (id)(v171 + 1));
              v88 = v164 + v89;
              v146 = objc_msgSend(v165, "countByEnumeratingWithState:objects:count:", &v184, v212, 16);
              v169 = v146;
            }
            while (v146);
          }
          else
          {
            v88 = v163;
          }
          v163 = v88;

          v36 = v177;
        }

        v19 = v178;
LABEL_130:

        v37 = v162 + 1;
      }
      while ((id)(v162 + 1) != v161);
      v161 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v200, v223, 16);
      if (!v161)
      {
LABEL_132:
        v27 = v158;
        goto LABEL_145;
      }
    }
  }
  if (v20 == (id)1)
  {
    v22 = sub_10002EDB4(*(_QWORD *)(a1 + 32));
    v23 = (v22 + 10);
    v24 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", *(_QWORD *)(a1 + 56)));
    if (v19)
    {
      v229[0] = v183;
      v229[1] = v19;
      objc_opt_self(NESMPolicySession);
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 0, 0));
      v229[2] = v25;
      v229[3] = v182;
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v229, 4));

      v27 = (void *)v24;
      v29 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v23, v24, v26);
      v30 = *(void **)(a1 + 32);
      if (v30)
        v31 = objc_getProperty(v30, v28, 96, 1);
      else
        v31 = 0;
      sub_10002E954((_BOOL8)v4, v29, v31);

      v32 = (v22 + 11);
      if (*(_QWORD *)(a1 + 72) == 1)
      {
        v228[0] = v183;
        v228[1] = v178;
        objc_opt_self(NESMPolicySession);
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 300, 899));
        v228[2] = v33;
        v34 = v228;
      }
      else
      {
        v227[0] = v183;
        v227[1] = v178;
        objc_opt_self(NESMPolicySession);
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 200, 899));
        v227[2] = v33;
        v34 = v227;
      }
      v34[3] = v182;
    }
    else
    {
      v226[0] = v183;
      objc_opt_self(NESMPolicySession);
      v147 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 0, 0));
      v226[1] = v147;
      v226[2] = v182;
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v226, 3));

      v27 = (void *)v24;
      v149 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v23, v24, v26);
      v150 = *(void **)(a1 + 32);
      if (v150)
        v151 = objc_getProperty(v150, v148, 96, 1);
      else
        v151 = 0;
      sub_10002E954((_BOOL8)v4, v149, v151);

      v32 = (v22 + 11);
      if (*(_QWORD *)(a1 + 72) == 1)
      {
        v225[0] = v183;
        objc_opt_self(NESMPolicySession);
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 300, 899));
        v225[1] = v33;
        v152 = v225;
      }
      else
      {
        v224[0] = v183;
        objc_opt_self(NESMPolicySession);
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 200, 899));
        v224[1] = v33;
        v152 = v224;
      }
      v152[2] = v182;
    }
    v153 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:"));

    obj = (id)v153;
    v155 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v32, v27, v153);
    v156 = (void *)v21[4];
    if (v156)
      v157 = objc_getProperty(v156, v154, 96, 1);
    else
      v157 = 0;
    v19 = v178;
    sub_10002E954((_BOOL8)v4, v155, v157);

LABEL_145:
    v17 = sub_10002D308(v4);
  }
  else
  {
    v17 = 0;
  }

LABEL_11:
  return v17;
}

uint64_t sub_100031FD0(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  void *v5;
  id Property;
  const char *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  const char *v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  id v38;
  id v39;
  void *v41;
  unsigned int v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD v46[4];
  id v47;
  uint64_t v48;
  id v49;
  _QWORD v50[4];
  id v51;
  id v52;
  uint64_t v53;
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _QWORD v59[4];
  id v60;
  uint64_t v61;
  _QWORD v62[2];
  _BYTE v63[128];

  v4 = a2;
  v5 = *(void **)(a1 + 32);
  if (v5)
    Property = objc_getProperty(v5, v3, 96, 1);
  else
    Property = 0;
  sub_10002D1B0(v4, Property);
  v8 = *(void **)(a1 + 32);
  if (v8)
    v9 = objc_getProperty(v8, v7, 104, 1);
  else
    v9 = 0;
  sub_10002DA24(v4, v9);
  if (objc_msgSend(*(id *)(a1 + 40), "action") == (id)4 || objc_msgSend(*(id *)(a1 + 40), "action") == (id)2)
  {
    if (objc_msgSend(*(id *)(a1 + 40), "action") == (id)2)
    {
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(void **)(a1 + 48);
      v12 = *(void **)(a1 + 56);
      v59[0] = _NSConcreteStackBlock;
      v59[1] = 3221225472;
      v59[2] = sub_100032430;
      v59[3] = &unk_1000BDAF0;
      v13 = v4;
      v14 = *(_QWORD *)(a1 + 32);
      v60 = v13;
      v61 = v14;
      sub_10003248C(v10, v11, 0, 1, 0, v12, v59, &stru_1000BDB30);

    }
    sub_10002D308(v4);
    v15 = 1;
  }
  else
  {
    v45 = v4;
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", *(_QWORD *)(a1 + 64)));
    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    v16 = +[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", sub_10002EDB4(*(_QWORD *)(a1 + 32)) + 250);
    v41 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v42 = sub_10002EDB4(*(_QWORD *)(a1 + 32)) + 10;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v17 = (_QWORD *)a1;
    v18 = *(id *)(a1 + 72);
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v55, v63, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v56;
      do
      {
        v22 = 0;
        do
        {
          if (*(_QWORD *)v56 != v21)
            objc_enumerationMutation(v18);
          v23 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * (_QWORD)v22);
          if (isa_nsstring(v23))
          {
            v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("*.")));
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "stringByTrimmingCharactersInSet:", v24));
            if (objc_msgSend(v25, "length"))
            {
              v62[0] = v44;
              v26 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v25));
              v62[1] = v26;
              v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v62, 2));

              v29 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v42, v43, v27);
              v30 = (void *)v17[4];
              if (v30)
                v31 = objc_getProperty(v30, v28, 96, 1);
              else
                v31 = 0;
              sub_10002E954((_BOOL8)v45, v29, v31);

            }
          }
          v22 = (char *)v22 + 1;
        }
        while (v20 != v22);
        v32 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v55, v63, 16);
        v20 = v32;
      }
      while (v32);
    }

    v33 = v17[4];
    v35 = (void *)v17[6];
    v34 = (void *)v17[7];
    v50[0] = _NSConcreteStackBlock;
    v50[1] = 3221225472;
    v50[2] = sub_100033368;
    v50[3] = &unk_1000BDB58;
    v4 = v45;
    v54 = v42;
    v51 = v45;
    v52 = v43;
    v53 = v17[4];
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472;
    v46[2] = sub_100033424;
    v46[3] = &unk_1000BDB80;
    v36 = v51;
    v37 = v17[4];
    v47 = v36;
    v48 = v37;
    v49 = v41;
    v38 = v41;
    v39 = v43;
    sub_10003248C(v33, v35, 0, 1, 0, v34, v50, v46);
    v15 = sub_10002D308(v36);

  }
  return v15;
}

void sub_100032430(uint64_t a1, void *a2)
{
  const char *v3;
  void *v4;
  uint64_t v5;
  id Property;
  id v7;

  v7 = a2;
  v5 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  if (v4)
    Property = objc_getProperty(v4, v3, 104, 1);
  else
    Property = 0;
  sub_10002E80C(v5, v7, Property);

}

void sub_10003248C(uint64_t a1, void *a2, int a3, int a4, void *a5, void *a6, void *a7, void *a8)
{
  id v14;
  void (**v15)(id, id, _QWORD);
  _UNKNOWN **v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  void *i;
  void *v30;
  void *v31;
  void *v32;
  int v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  void *j;
  void *v39;
  void *v40;
  int v41;
  void *v42;
  id v43;
  id v44;
  uint64_t v45;
  void *k;
  void *v47;
  int v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  void *m;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (**v58)(id, id);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *n;
  uint64_t v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  void *ii;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  void *jj;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  uint64_t v79;
  void *kk;
  id v81;
  id v82;
  void *mm;
  uint64_t v84;
  id v85;
  id v86;
  id v87;
  uint64_t v88;
  void *nn;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  void *i1;
  id v95;
  id v96;
  id v97;
  id v98;
  uint64_t v99;
  void *i2;
  id v101;
  id v102;
  id obj;
  id v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  void *v108;
  id v109;
  id v110;
  id v111;
  id v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  id v116;
  uint64_t v118;
  id v119;
  id v120;
  void *v121;
  uint64_t v122;
  void (**v123)(id, id);
  uint64_t v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  void *v130;
  id v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  _QWORD v188[4];
  id v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  _BYTE v194[128];
  _BYTE v195[128];
  _BYTE v196[128];
  _BYTE v197[128];
  _BYTE v198[128];
  _BYTE v199[128];
  _BYTE v200[128];
  _BYTE v201[128];
  _BYTE v202[128];
  _BYTE v203[128];
  _BYTE v204[128];
  _BYTE v205[128];
  _BYTE v206[128];
  _BYTE v207[128];
  _BYTE v208[128];

  v102 = a2;
  v14 = a5;
  v104 = a6;
  v15 = a7;
  v123 = a8;
  if (a1)
  {
    v16 = &AnalyticsSendEventLazy_ptr;
    if (a4)
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    else
      v17 = 0;
    v193 = 0u;
    v192 = 0u;
    v191 = 0u;
    v190 = 0u;
    obj = v102;
    v106 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v190, v208, 16);
    if (v106)
    {
      v105 = *(_QWORD *)v191;
      v112 = v14;
      do
      {
        v18 = 0;
        do
        {
          if (*(_QWORD *)v191 != v105)
            objc_enumerationMutation(obj);
          v107 = v18;
          v19 = *(void **)(*((_QWORD *)&v190 + 1) + 8 * v18);
          v111 = objc_alloc_init((Class)NSMutableArray);
          v20 = objc_alloc_init((Class)NSMutableArray);
          v21 = objc_alloc_init((Class)NSMutableArray);
          v110 = objc_alloc_init((Class)NSMutableArray);
          v119 = objc_alloc_init((Class)NSMutableArray);
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "cachedMachOUUIDs"));
          if (objc_msgSend(v22, "count") && objc_msgSend(v14, "count"))
          {
            v188[0] = _NSConcreteStackBlock;
            v188[1] = 3221225472;
            v188[2] = sub_1000334C4;
            v188[3] = &unk_1000BDDD8;
            v189 = v14;
            v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", v188));
            v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "filteredArrayUsingPredicate:", v23));

            v22 = (void *)v24;
          }
          v108 = v22;
          v121 = v20;
          v125 = v21;
          if (isa_nsarray(v22))
          {
            v187 = 0u;
            v186 = 0u;
            v185 = 0u;
            v184 = 0u;
            v25 = v22;
            v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v184, v207, 16);
            if (v26)
            {
              v27 = v26;
              v28 = *(_QWORD *)v185;
              do
              {
                for (i = 0; i != v27; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v185 != v28)
                    objc_enumerationMutation(v25);
                  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16[175], "effectiveApplication:", *(_QWORD *)(*((_QWORD *)&v184 + 1) + 8 * (_QWORD)i)));
                  objc_msgSend(v111, "addObject:", v30);

                }
                v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v184, v207, 16);
              }
              while (v27);
            }

            v20 = v121;
            v21 = v125;
          }
          v31 = v110;
          if (objc_msgSend(v111, "count"))
          {
            v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "matchDomains"));
            v33 = isa_nsarray(v32);

            if (v33)
            {
              v183 = 0u;
              v182 = 0u;
              v181 = 0u;
              v180 = 0u;
              v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "matchDomains"));
              v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v180, v206, 16);
              if (v35)
              {
                v36 = v35;
                v37 = *(_QWORD *)v181;
                do
                {
                  for (j = 0; j != v36; j = (char *)j + 1)
                  {
                    if (*(_QWORD *)v181 != v37)
                      objc_enumerationMutation(v34);
                    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16[175], "domain:", *(_QWORD *)(*((_QWORD *)&v180 + 1) + 8 * (_QWORD)j)));
                    objc_msgSend(v121, "addObject:", v39);

                  }
                  v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v180, v206, 16);
                }
                while (v36);
              }

              v20 = v121;
              v21 = v125;
            }
            v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "matchAccountIdentifiers"));
            v41 = isa_nsarray(v40);

            if (v41)
            {
              v178 = 0u;
              v179 = 0u;
              v176 = 0u;
              v177 = 0u;
              v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "matchAccountIdentifiers"));
              v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v176, v205, 16);
              if (v43)
              {
                v44 = v43;
                v45 = *(_QWORD *)v177;
                do
                {
                  for (k = 0; k != v44; k = (char *)k + 1)
                  {
                    if (*(_QWORD *)v177 != v45)
                      objc_enumerationMutation(v42);
                    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16[175], "accountIdentifier:", *(_QWORD *)(*((_QWORD *)&v176 + 1) + 8 * (_QWORD)k)));
                    objc_msgSend(v21, "addObject:", v47);

                  }
                  v44 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v176, v205, 16);
                }
                while (v44);
              }

              v20 = v121;
            }
            v48 = isa_nsarray(v104);
            if (v123 && v48)
            {
              v174 = 0u;
              v175 = 0u;
              v172 = 0u;
              v173 = 0u;
              v49 = v104;
              v50 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v172, v204, 16);
              if (v50)
              {
                v51 = v50;
                v52 = *(_QWORD *)v173;
                do
                {
                  for (m = 0; m != v51; m = (char *)m + 1)
                  {
                    if (*(_QWORD *)v173 != v52)
                      objc_enumerationMutation(v49);
                    v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16[175], "domain:", *(_QWORD *)(*((_QWORD *)&v172 + 1) + 8 * (_QWORD)m)));
                    objc_msgSend(v119, "addObject:", v54);

                  }
                  v51 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v172, v204, 16);
                }
                while (v51);
              }

              v20 = v121;
            }
            v170 = 0u;
            v171 = 0u;
            v168 = 0u;
            v169 = 0u;
            v109 = v111;
            v31 = v110;
            v114 = objc_msgSend(v109, "countByEnumeratingWithState:objects:count:", &v168, v203, 16);
            if (v114)
            {
              v113 = *(_QWORD *)v169;
              do
              {
                v55 = 0;
                do
                {
                  if (*(_QWORD *)v169 != v113)
                  {
                    v56 = v55;
                    objc_enumerationMutation(v109);
                    v55 = v56;
                  }
                  v115 = v55;
                  v57 = *(_QWORD *)(*((_QWORD *)&v168 + 1) + 8 * v55);
                  v58 = v123;
                  if (objc_msgSend(v31, "count"))
                  {
                    v166 = 0u;
                    v167 = 0u;
                    v164 = 0u;
                    v165 = 0u;
                    v116 = v31;
                    v120 = objc_msgSend(v116, "countByEnumeratingWithState:objects:count:", &v164, v202, 16);
                    if (!v120)
                      goto LABEL_147;
                    v118 = *(_QWORD *)v165;
                    do
                    {
                      v59 = 0;
                      do
                      {
                        if (*(_QWORD *)v165 != v118)
                          objc_enumerationMutation(v116);
                        v122 = v59;
                        v60 = *(_QWORD *)(*((_QWORD *)&v164 + 1) + 8 * v59);
                        if (objc_msgSend(v121, "count"))
                        {
                          v162 = 0u;
                          v163 = 0u;
                          v160 = 0u;
                          v161 = 0u;
                          v126 = v121;
                          v128 = objc_msgSend(v126, "countByEnumeratingWithState:objects:count:", &v160, v201, 16);
                          if (v128)
                          {
                            v61 = *(_QWORD *)v161;
                            v124 = *(_QWORD *)v161;
                            do
                            {
                              for (n = 0; n != v128; n = (char *)n + 1)
                              {
                                if (*(_QWORD *)v161 != v61)
                                  objc_enumerationMutation(v126);
                                v63 = *(_QWORD *)(*((_QWORD *)&v160 + 1) + 8 * (_QWORD)n);
                                if (objc_msgSend(v21, "count"))
                                {
                                  v130 = n;
                                  v158 = 0u;
                                  v159 = 0u;
                                  v156 = 0u;
                                  v157 = 0u;
                                  v64 = v21;
                                  v65 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v156, v200, 16);
                                  if (v65)
                                  {
                                    v66 = v65;
                                    v67 = *(_QWORD *)v157;
                                    do
                                    {
                                      for (ii = 0; ii != v66; ii = (char *)ii + 1)
                                      {
                                        if (*(_QWORD *)v157 != v67)
                                          objc_enumerationMutation(v64);
                                        v69 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", v57, v60, v63, *(_QWORD *)(*((_QWORD *)&v156 + 1) + 8 * (_QWORD)ii), v17, 0);
                                        v15[2](v15, v69, 0);

                                      }
                                      v66 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v156, v200, 16);
                                    }
                                    while (v66);
                                    v58 = v123;
                                    v61 = v124;
                                    v21 = v125;
                                  }
                                  n = v130;
                                }
                                else
                                {
                                  v64 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", v57, v60, v63, v17, 0);
                                  v15[2](v15, v64, 0);
                                }

                              }
                              v128 = objc_msgSend(v126, "countByEnumeratingWithState:objects:count:", &v160, v201, 16);
                            }
                            while (v128);
                          }
                        }
                        else if (objc_msgSend(v21, "count"))
                        {
                          v154 = 0u;
                          v155 = 0u;
                          v152 = 0u;
                          v153 = 0u;
                          v126 = v21;
                          v70 = objc_msgSend(v126, "countByEnumeratingWithState:objects:count:", &v152, v199, 16);
                          if (v70)
                          {
                            v71 = v70;
                            v72 = *(_QWORD *)v153;
                            do
                            {
                              for (jj = 0; jj != v71; jj = (char *)jj + 1)
                              {
                                if (*(_QWORD *)v153 != v72)
                                  objc_enumerationMutation(v126);
                                v74 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", v57, v60, *(_QWORD *)(*((_QWORD *)&v152 + 1) + 8 * (_QWORD)jj), v17, 0);
                                v15[2](v15, v74, 0);

                              }
                              v71 = objc_msgSend(v126, "countByEnumeratingWithState:objects:count:", &v152, v199, 16);
                            }
                            while (v71);
                          }
                        }
                        else
                        {
                          v126 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", v57, v60, v17, 0);
                          ((void (*)(void (**)(id, id, _QWORD)))v15[2])(v15);
                        }

                        if (a3 && (objc_msgSend(v121, "count") || objc_msgSend(v21, "count")))
                        {
                          v75 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", v57, v60, v17, 0);
                          v15[2](v15, v75, 1);

                        }
                        v150 = 0u;
                        v151 = 0u;
                        v148 = 0u;
                        v149 = 0u;
                        v76 = v119;
                        v77 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v148, v198, 16);
                        if (v77)
                        {
                          v78 = v77;
                          v79 = *(_QWORD *)v149;
                          do
                          {
                            for (kk = 0; kk != v78; kk = (char *)kk + 1)
                            {
                              if (*(_QWORD *)v149 != v79)
                                objc_enumerationMutation(v76);
                              v81 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", v57, v60, *(_QWORD *)(*((_QWORD *)&v148 + 1) + 8 * (_QWORD)kk), v17, 0);
                              v58[2](v58, v81);

                            }
                            v78 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v148, v198, 16);
                          }
                          while (v78);
                        }

                        v59 = v122 + 1;
                        v21 = v125;
                      }
                      while ((id)(v122 + 1) != v120);
                      v120 = objc_msgSend(v116, "countByEnumeratingWithState:objects:count:", &v164, v202, 16);
                    }
                    while (v120);
                    v20 = v121;
                  }
                  else
                  {
                    if (objc_msgSend(v20, "count"))
                    {
                      v146 = 0u;
                      v147 = 0u;
                      v144 = 0u;
                      v145 = 0u;
                      v129 = v20;
                      v131 = objc_msgSend(v129, "countByEnumeratingWithState:objects:count:", &v144, v197, 16);
                      if (v131)
                      {
                        v82 = *(id *)v145;
                        v127 = *(id *)v145;
                        do
                        {
                          for (mm = 0; mm != v131; mm = (char *)mm + 1)
                          {
                            if (*(id *)v145 != v82)
                              objc_enumerationMutation(v129);
                            v84 = *(_QWORD *)(*((_QWORD *)&v144 + 1) + 8 * (_QWORD)mm);
                            if (objc_msgSend(v21, "count"))
                            {
                              v142 = 0u;
                              v143 = 0u;
                              v140 = 0u;
                              v141 = 0u;
                              v85 = v21;
                              v86 = objc_msgSend(v85, "countByEnumeratingWithState:objects:count:", &v140, v196, 16);
                              if (v86)
                              {
                                v87 = v86;
                                v88 = *(_QWORD *)v141;
                                do
                                {
                                  for (nn = 0; nn != v87; nn = (char *)nn + 1)
                                  {
                                    if (*(_QWORD *)v141 != v88)
                                      objc_enumerationMutation(v85);
                                    v90 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", v57, v84, *(_QWORD *)(*((_QWORD *)&v140 + 1) + 8 * (_QWORD)nn), v17, 0);
                                    v15[2](v15, v90, 0);

                                  }
                                  v87 = objc_msgSend(v85, "countByEnumeratingWithState:objects:count:", &v140, v196, 16);
                                }
                                while (v87);
                                v58 = v123;
                                v21 = v125;
                                v82 = v127;
                              }
                            }
                            else
                            {
                              v85 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", v57, v84, v17, 0);
                              v15[2](v15, v85, 0);
                            }

                            v20 = v121;
                          }
                          v131 = objc_msgSend(v129, "countByEnumeratingWithState:objects:count:", &v144, v197, 16);
                        }
                        while (v131);
                      }
                    }
                    else if (objc_msgSend(v21, "count"))
                    {
                      v138 = 0u;
                      v139 = 0u;
                      v136 = 0u;
                      v137 = 0u;
                      v129 = v21;
                      v91 = objc_msgSend(v129, "countByEnumeratingWithState:objects:count:", &v136, v195, 16);
                      if (v91)
                      {
                        v92 = v91;
                        v93 = *(_QWORD *)v137;
                        do
                        {
                          for (i1 = 0; i1 != v92; i1 = (char *)i1 + 1)
                          {
                            if (*(_QWORD *)v137 != v93)
                              objc_enumerationMutation(v129);
                            v95 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", v57, *(_QWORD *)(*((_QWORD *)&v136 + 1) + 8 * (_QWORD)i1), v17, 0);
                            v15[2](v15, v95, 0);

                          }
                          v92 = objc_msgSend(v129, "countByEnumeratingWithState:objects:count:", &v136, v195, 16);
                        }
                        while (v92);
                      }
                    }
                    else
                    {
                      v129 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", v57, v17, 0);
                      ((void (*)(void (**)(id, id, _QWORD)))v15[2])(v15);
                    }

                    if (a3 && (objc_msgSend(v20, "count") || objc_msgSend(v21, "count")))
                    {
                      v96 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", v57, v17, 0);
                      v15[2](v15, v96, 1);

                    }
                    v134 = 0u;
                    v135 = 0u;
                    v132 = 0u;
                    v133 = 0u;
                    v116 = v119;
                    v97 = objc_msgSend(v116, "countByEnumeratingWithState:objects:count:", &v132, v194, 16);
                    if (v97)
                    {
                      v98 = v97;
                      v99 = *(_QWORD *)v133;
                      do
                      {
                        for (i2 = 0; i2 != v98; i2 = (char *)i2 + 1)
                        {
                          if (*(_QWORD *)v133 != v99)
                            objc_enumerationMutation(v116);
                          v101 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", v57, *(_QWORD *)(*((_QWORD *)&v132 + 1) + 8 * (_QWORD)i2), v17, 0);
                          v58[2](v58, v101);

                        }
                        v98 = objc_msgSend(v116, "countByEnumeratingWithState:objects:count:", &v132, v194, 16);
                      }
                      while (v98);
                    }
                  }
                  v31 = v110;
LABEL_147:

                  v55 = v115 + 1;
                  v14 = v112;
                  v16 = &AnalyticsSendEventLazy_ptr;
                }
                while ((id)(v115 + 1) != v114);
                v114 = objc_msgSend(v109, "countByEnumeratingWithState:objects:count:", &v168, v203, 16);
              }
              while (v114);
            }

          }
          v18 = v107 + 1;
        }
        while ((id)(v107 + 1) != v106);
        v106 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v190, v208, 16);
      }
      while (v106);
    }

  }
}

void sub_100033368(uint64_t a1, void *a2)
{
  uint64_t v3;
  const char *v4;
  id v5;
  void *v6;
  id Property;
  const char *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v12 = a2;
  v3 = *(_QWORD *)(a1 + 32);
  v5 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 40), v12);
  v6 = *(void **)(a1 + 48);
  if (v6)
    Property = objc_getProperty(v6, v4, 96, 1);
  else
    Property = 0;
  sub_10002E954(v3, v5, Property);

  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(void **)(a1 + 48);
  if (v10)
    v11 = objc_getProperty(v10, v8, 104, 1);
  else
    v11 = 0;
  sub_10002E80C(v9, v12, v11);

}

void sub_100033424(_QWORD *a1, void *a2)
{
  uint64_t v3;
  id v4;
  const char *v5;
  void *v6;
  id Property;
  id v8;

  v3 = a1[4];
  v4 = a2;
  v8 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", sub_10002EDB4(a1[5]) + 5, a1[6], v4);

  v6 = (void *)a1[5];
  if (v6)
    Property = objc_getProperty(v6, v5, 96, 1);
  else
    Property = 0;
  sub_10002E954(v3, v8, Property);

}

uint64_t sub_1000334C4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2) ^ 1;
}

uint64_t sub_1000334E8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  void *v8;
  id v9;
  _BOOL8 v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  const char *v14;
  void *v15;
  id v16;
  _UNKNOWN **v17;
  id v18;
  uint64_t v19;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _UNKNOWN **v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  const char *v33;
  id v34;
  void *v35;
  id v36;
  const char *v37;
  id v38;
  void *v39;
  id v40;
  const char *v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  const char *v49;
  id v50;
  void *v51;
  id v52;
  const char *v53;
  id v54;
  void *v55;
  id v56;
  const char *v57;
  id v58;
  void *v59;
  id v60;
  const char *v61;
  void *v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  const char *v71;
  id v72;
  void *v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  const char *v79;
  id Property;
  uint64_t v81;
  id v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  id v91;
  id obj;
  unsigned int v93;
  void *v94;
  void *v95;
  unsigned int v96;
  void *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _QWORD v102[2];
  _QWORD v103[3];
  _QWORD v104[2];
  _OWORD buffer[3];
  uint64_t v106;
  _BYTE v107[128];

  v3 = a2;
  v96 = sub_10002EDB4(*(_QWORD *)(a1 + 32));
  v4 = ((uint64_t (*)(void))ne_log_large_obj)();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    Property = *(id *)(a1 + 32);
    v81 = *(_QWORD *)(a1 + 40);
    if (Property)
      Property = objc_getProperty(Property, v6, 64, 1);
    LODWORD(buffer[0]) = 138412546;
    *(_QWORD *)((char *)buffer + 4) = v81;
    WORD6(buffer[0]) = 2112;
    *(_QWORD *)((char *)buffer + 14) = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "control Policy IDs to be removed %@: %@", (uint8_t *)buffer, 0x16u);
  }

  v8 = *(void **)(a1 + 32);
  if (v8)
    v9 = objc_getProperty(v8, v7, 64, 1);
  else
    v9 = 0;
  v10 = sub_10002D1B0(v3, v9);
  v11 = ne_log_large_obj(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v82 = *(id *)(a1 + 32);
    v83 = *(_QWORD *)(a1 + 40);
    if (v82)
      v82 = objc_getProperty(v82, v13, 72, 1);
    LODWORD(buffer[0]) = 138412546;
    *(_QWORD *)((char *)buffer + 4) = v83;
    WORD6(buffer[0]) = 2112;
    *(_QWORD *)((char *)buffer + 14) = v82;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "low control Policy IDs to be removed %@: %@", (uint8_t *)buffer, 0x16u);
  }

  v15 = *(void **)(a1 + 32);
  if (v15)
    v16 = objc_getProperty(v15, v14, 72, 1);
  else
    v16 = 0;
  sub_10002DA24(v3, v16);
  if (isa_nsarray(*(_QWORD *)(a1 + 48))
    && objc_msgSend(*(id *)(a1 + 48), "count")
    && *(_QWORD *)(a1 + 40))
  {
    v17 = &AnalyticsSendEventLazy_ptr;
    v90 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult scopeSocketToInterfaceName:](NEPolicyResult, "scopeSocketToInterfaceName:"));
    v89 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", *(_QWORD *)(a1 + 40), 1));
    if (*(_BYTE *)(a1 + 56))
    {
      v18 = sub_100033D50(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), CFSTR("DNSAgent"));
      v87 = (void *)objc_claimAutoreleasedReturnValue(v18);
      v95 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:"));
    }
    else
    {
      v95 = 0;
      v87 = 0;
    }
    if (*(_BYTE *)(a1 + 57))
    {
      v21 = sub_100033D50(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), CFSTR("ProxyAgent"));
      v86 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v94 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:"));
    }
    else
    {
      v94 = 0;
      v86 = 0;
    }
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    obj = *(id *)(a1 + 48);
    v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v98, v107, 16);
    if (v22)
    {
      v23 = v22;
      v93 = v96 + 2;
      v24 = v96 + 6;
      v25 = *(_QWORD *)v99;
      v26 = &AnalyticsSendEventLazy_ptr;
      v88 = *(_QWORD *)v99;
      do
      {
        v27 = 0;
        v91 = v23;
        do
        {
          if (*(_QWORD *)v99 != v25)
            objc_enumerationMutation(obj);
          v28 = *(void **)(*((_QWORD *)&v98 + 1) + 8 * (_QWORD)v27);
          v106 = 0;
          memset(buffer, 0, sizeof(buffer));
          if (proc_pidinfo((int)objc_msgSend(v28, "intValue"), 17, 1uLL, buffer, 56) == 56)
          {
            v29 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", buffer);
            v30 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", objc_msgSend(v28, "intValue")));
            v104[0] = v30;
            v97 = v29;
            v31 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v29));
            v104[1] = v31;
            v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v104, 2));

            if (*(_BYTE *)(a1 + 56))
            {
              v34 = objc_msgSend(objc_alloc((Class)v26[174]), "initWithOrder:result:conditions:", v96, v95, v32);
              v35 = *(void **)(a1 + 32);
              if (v35)
                v36 = objc_getProperty(v35, v33, 64, 1);
              else
                v36 = 0;
              sub_10002E954((_BOOL8)v3, v34, v36);

            }
            if (*(_BYTE *)(a1 + 57))
            {
              v38 = objc_msgSend(objc_alloc((Class)v26[174]), "initWithOrder:result:conditions:", v93, v94, v32);
              v39 = *(void **)(a1 + 32);
              if (v39)
                v40 = objc_getProperty(v39, v37, 64, 1);
              else
                v40 = 0;
              sub_10002E954((_BOOL8)v3, v38, v40);

            }
            v42 = objc_msgSend(objc_alloc((Class)v26[174]), "initWithOrder:result:conditions:", v24, v90, v32);
            v43 = *(void **)(a1 + 32);
            if (v43)
              v44 = objc_getProperty(v43, v41, 64, 1);
            else
              v44 = 0;
            sub_10002E954((_BOOL8)v3, v42, v44);

            v45 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", objc_msgSend(v28, "intValue")));
            v103[0] = v45;
            v46 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v97));
            v103[1] = v46;
            v47 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(a1 + 40)));
            v103[2] = v47;
            v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v103, 3));

            if (*(_BYTE *)(a1 + 56))
            {
              v50 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v96, v95, v48);
              v51 = *(void **)(a1 + 32);
              if (v51)
                v52 = objc_getProperty(v51, v49, 64, 1);
              else
                v52 = 0;
              sub_10002E954((_BOOL8)v3, v50, v52);

            }
            if (*(_BYTE *)(a1 + 57))
            {
              v54 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v93, v94, v48);
              v55 = *(void **)(a1 + 32);
              if (v55)
                v56 = objc_getProperty(v55, v53, 64, 1);
              else
                v56 = 0;
              sub_10002E954((_BOOL8)v3, v54, v56);

            }
            v58 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v24, v89, v48);
            v59 = *(void **)(a1 + 32);
            if (v59)
              v60 = objc_getProperty(v59, v57, 64, 1);
            else
              v60 = 0;
            sub_10002E954((_BOOL8)v3, v58, v60);

            v62 = *(void **)(a1 + 32);
            if (v62)
              v63 = objc_getProperty(v62, v61, 72, 1);
            else
              v63 = 0;
            sub_10002E80C((_BOOL8)v3, v48, v63);
            v64 = objc_alloc((Class)NEPolicy);
            if (*(_QWORD *)(a1 + 32))
              v65 = 18000;
            else
              v65 = 0;
            if (*(_QWORD *)(a1 + 32))
              v66 = 18120;
            else
              v66 = 0;
            v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17[176], "skipWithOrder:", v66));
            v68 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v97));
            v102[0] = v68;
            v69 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v102[1] = v69;
            v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v102, 2));
            v72 = objc_msgSend(v64, "initWithOrder:result:conditions:", v65, v67, v70);
            v73 = *(void **)(a1 + 32);
            if (v73)
              v74 = objc_getProperty(v73, v71, 64, 1);
            else
              v74 = 0;
            sub_10002E954((_BOOL8)v3, v72, v74);

            v17 = &AnalyticsSendEventLazy_ptr;
            v24 = v96 + 6;
            v23 = v91;
            v25 = v88;
            v26 = &AnalyticsSendEventLazy_ptr;
          }
          v27 = (char *)v27 + 1;
        }
        while (v23 != v27);
        v75 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v98, v107, 16);
        v23 = v75;
      }
      while (v75);
    }

    v76 = sub_10002D308(v3);
    v19 = v76;
    if ((_DWORD)v76)
    {
      v77 = ne_log_large_obj(v76);
      v78 = objc_claimAutoreleasedReturnValue(v77);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
      {
        v84 = *(id *)(a1 + 32);
        v85 = *(_QWORD *)(a1 + 40);
        if (v84)
          v84 = objc_getProperty(v84, v79, 64, 1);
        LODWORD(buffer[0]) = 138412546;
        *(_QWORD *)((char *)buffer + 4) = v85;
        WORD6(buffer[0]) = 2112;
        *(_QWORD *)((char *)buffer + 14) = v84;
        _os_log_debug_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "control Policy IDs added %@: %@", (uint8_t *)buffer, 0x16u);
      }

    }
  }
  else
  {
    sub_10002D308(v3);
    v19 = 1;
  }

  return v19;
}

id sub_100033D50(uint64_t a1, void *a2, void *a3)
{
  id v3;
  id v5;
  id v6;
  id v7;
  const char *v8;
  CC_LONG v9;
  unsigned __int8 md[32];

  v3 = 0;
  if (a1 && a2)
  {
    v5 = a3;
    v6 = a2;
    v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@-@%@"), v5, v6);

    v8 = (const char *)objc_msgSend(v7, "UTF8String");
    v9 = strlen(v8);
    CC_SHA256(v8, v9, md);
    v3 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", md);

  }
  return v3;
}

void sub_100033E30(uint64_t a1, int a2, void *a3, char a4, char a5)
{
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD v14[5];
  id v15;
  int v16;
  char v17;
  char v18;
  uint8_t buf[16];

  v9 = a3;
  v11 = v9;
  if (a1)
  {
    if (a2)
    {
      if (*(_DWORD *)(a1 + 8) == 1)
      {
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_100033F3C;
        v14[3] = &unk_1000BDBF8;
        v14[4] = a1;
        v15 = v9;
        v17 = a4;
        v18 = a5;
        v16 = a2;
        sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v14);

      }
    }
    else
    {
      v12 = ne_log_obj(v9, v10);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "No pid or mach-O UUIDs available for VPN plugin, cannot install VPN control pass policies", buf, 2u);
      }

    }
  }

}

uint64_t sub_100033F3C(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  id Property;
  id v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  _BOOL8 v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  const char *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  _BOOL4 v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  const char *v39;
  id v40;
  void *v41;
  id v42;
  const char *v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  void *i;
  uint64_t v51;
  id v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  id v59;
  _UNKNOWN **v60;
  id v61;
  void *j;
  uint64_t v63;
  id v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  id v71;
  void *v72;
  void *v73;
  const char *v74;
  void *v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  id v84;
  uint64_t v85;
  void *v86;
  unsigned int v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  id v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v98;
  id v99;
  void *v100;
  id v101;
  uint64_t v102;
  void *v103;
  NSObject *obj;
  unsigned int v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  unsigned int v121;
  uint8_t buf[4];
  uint64_t v123;
  __int16 v124;
  void *v125;
  void *v126;
  _QWORD v127[2];
  _QWORD v128[2];
  _BYTE v129[128];
  _BYTE v130[128];
  _OWORD buffer[3];
  uint64_t v132;

  v4 = a2;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v3, 64, 1);
  v6 = Property;
  v7 = ne_log_large_obj(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v93 = *(id *)(a1 + 32);
    v94 = *(_QWORD *)(a1 + 40);
    if (v93)
      v93 = objc_getProperty(v93, v9, 64, 1);
    LODWORD(buffer[0]) = 138412546;
    *(_QWORD *)((char *)buffer + 4) = v94;
    WORD6(buffer[0]) = 2112;
    *(_QWORD *)((char *)buffer + 14) = v93;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "control pass Policy IDs to be removed %@: %@", (uint8_t *)buffer, 0x16u);
  }

  v10 = sub_10002D1B0(v4, v6);
  v11 = ne_log_large_obj(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v95 = *(id *)(a1 + 32);
    v96 = *(_QWORD *)(a1 + 40);
    if (v95)
      v95 = objc_getProperty(v95, v13, 72, 1);
    LODWORD(buffer[0]) = 138412546;
    *(_QWORD *)((char *)buffer + 4) = v96;
    WORD6(buffer[0]) = 2112;
    *(_QWORD *)((char *)buffer + 14) = v95;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "low control Policy IDs to be removed %@: %@", (uint8_t *)buffer, 0x16u);
  }

  v15 = *(void **)(a1 + 32);
  if (v15)
    v16 = objc_getProperty(v15, v14, 72, 1);
  else
    v16 = 0;
  sub_10002DA24(v4, v16);
  v17 = +[NEProcessInfo copyDNSUUIDs](NEProcessInfo, "copyDNSUUIDs");
  if (v17)
  {
    v18 = +[NEProcessInfo copyNEHelperUUIDs](NEProcessInfo, "copyNEHelperUUIDs");
    if (v18)
    {
      v105 = sub_10002EDB4(*(_QWORD *)(a1 + 32));
      v121 = v105 + 2;
      v112 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", *(_QWORD *)(a1 + 40), 1));
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult scopeSocketToInterfaceName:](NEPolicyResult, "scopeSocketToInterfaceName:", *(_QWORD *)(a1 + 40)));
      if (*(_BYTE *)(a1 + 52))
      {
        v20 = sub_100033D50(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), CFSTR("DNSAgent"));
        v108 = objc_claimAutoreleasedReturnValue(v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:"));
      }
      else
      {
        v21 = 0;
        v108 = 0;
      }
      if (*(_BYTE *)(a1 + 53))
      {
        v23 = sub_100033D50(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), CFSTR("ProxyAgent"));
        v107 = objc_claimAutoreleasedReturnValue(v23);
        v109 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:"));
      }
      else
      {
        v109 = 0;
        v107 = 0;
      }
      v132 = 0;
      memset(buffer, 0, sizeof(buffer));
      if (proc_pidinfo(*(_DWORD *)(a1 + 48), 17, 1uLL, buffer, 56) == 56
        && (v24 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", buffer)) != 0)
      {
        v25 = v24;
        v103 = v21;
        v26 = objc_alloc_init((Class)NSMutableArray);
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v25));
        objc_msgSend(v26, "addObject:", v27);

        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v25));
        objc_msgSend(v26, "addObject:", v28);

        v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(a1 + 40)));
        objc_msgSend(v26, "addObject:", v29);

        v30 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", *(unsigned int *)(a1 + 48)));
        objc_msgSend(v26, "addObject:", v30);

        v31 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v105 + 2, v112, v26);
        v32 = sub_10002E954((_BOOL8)v4, v31, v6);

        v110 = v25;
        if (v32)
        {
          v121 = v105 + 3;
          v33 = objc_alloc_init((Class)NSMutableArray);

          v34 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v25));
          objc_msgSend(v33, "addObject:", v34);

          v35 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v25));
          objc_msgSend(v33, "addObject:", v35);

          v36 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          objc_msgSend(v33, "addObject:", v36);

          v37 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", *(unsigned int *)(a1 + 48)));
          objc_msgSend(v33, "addObject:", v37);

          v101 = v33;
          v38 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v105 + 3, v19, v33);
          LODWORD(v37) = sub_10002E954((_BOOL8)v4, v38, v6);

          if ((_DWORD)v37)
          {
            v100 = v17;
            if (v103)
            {
              v40 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v105, v103, v33);
              v41 = *(void **)(a1 + 32);
              if (v41)
                v42 = objc_getProperty(v41, v39, 64, 1);
              else
                v42 = 0;
              sub_10002E954((_BOOL8)v4, v40, v42);

            }
            if (v109)
            {
              v44 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v105 + 1, v109, v33);
              v45 = *(void **)(a1 + 32);
              if (v45)
                v46 = objc_getProperty(v45, v43, 64, 1);
              else
                v46 = 0;
              sub_10002E954((_BOOL8)v4, v44, v46);

            }
            v111 = v6;
            v119 = 0u;
            v120 = 0u;
            v117 = 0u;
            v118 = 0u;
            v99 = v18;
            obj = v18;
            v47 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v117, v130, 16);
            if (v47)
            {
              v48 = v47;
              v49 = *(_QWORD *)v118;
              while (2)
              {
                for (i = 0; i != v48; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v118 != v49)
                    objc_enumerationMutation(obj);
                  v51 = *(_QWORD *)(*((_QWORD *)&v117 + 1) + 8 * (_QWORD)i);
                  v52 = objc_alloc_init((Class)NSMutableArray);
                  v53 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v110));
                  objc_msgSend(v52, "addObject:", v53);

                  v54 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v51));
                  objc_msgSend(v52, "addObject:", v54);

                  v55 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                  objc_msgSend(v52, "addObject:", v55);

                  v56 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](NEPolicyCondition, "entitlement"));
                  objc_msgSend(v52, "addObject:", v56);

                  v57 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", *(unsigned int *)(a1 + 48)));
                  objc_msgSend(v52, "addObject:", v57);

                  v58 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v105 + 4, v112, v52);
                  LODWORD(v51) = sub_10002E954((_BOOL8)v4, v58, v111);

                  if (!(_DWORD)v51)
                  {
                    v22 = 0;
                    v6 = v111;
                    v17 = v100;
LABEL_71:
                    v18 = v99;
                    v89 = (void *)v107;
                    v91 = (void *)v108;
                    v21 = v103;
                    goto LABEL_72;
                  }
                }
                v48 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v117, v130, 16);
                if (v48)
                  continue;
                break;
              }
            }

            v115 = 0u;
            v116 = 0u;
            v113 = 0u;
            v114 = 0u;
            v17 = v100;
            obj = v100;
            v59 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v113, v129, 16);
            v60 = &AnalyticsSendEventLazy_ptr;
            if (v59)
            {
              v61 = v59;
              v102 = *(_QWORD *)v114;
              while (2)
              {
                for (j = 0; j != v61; j = (char *)j + 1)
                {
                  if (*(_QWORD *)v114 != v102)
                    objc_enumerationMutation(obj);
                  v63 = *(_QWORD *)(*((_QWORD *)&v113 + 1) + 8 * (_QWORD)j);
                  v64 = objc_alloc_init((Class)v60[217]);
                  v65 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v110));
                  objc_msgSend(v64, "addObject:", v65);

                  v66 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v63));
                  objc_msgSend(v64, "addObject:", v66);

                  v67 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                  objc_msgSend(v64, "addObject:", v67);

                  v68 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](NEPolicyCondition, "entitlement"));
                  objc_msgSend(v64, "addObject:", v68);

                  v69 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", *(unsigned int *)(a1 + 48)));
                  objc_msgSend(v64, "addObject:", v69);

                  v70 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v105 + 5, v112, v64);
                  LODWORD(v65) = sub_10002E954((_BOOL8)v4, v70, v111);

                  if (!(_DWORD)v65)
                  {

                    v22 = 0;
                    v6 = v111;
                    goto LABEL_71;
                  }
                  if (v103)
                  {
                    v71 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v105, v103, v64);
                    sub_10002E954((_BOOL8)v4, v71, v111);

                  }
                  v60 = &AnalyticsSendEventLazy_ptr;
                }
                v61 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v113, v129, 16);
                if (v61)
                  continue;
                break;
              }
            }

            v121 = v105 + 6;
            v72 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", *(unsigned int *)(a1 + 48)));
            v128[0] = v72;
            v73 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v128[1] = v73;
            v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v128, 2));
            v76 = *(void **)(a1 + 32);
            if (v76)
              v77 = objc_getProperty(v76, v74, 72, 1);
            else
              v77 = 0;
            sub_10002E80C((_BOOL8)v4, v75, v77);

            v106 = objc_alloc((Class)NEPolicy);
            if (*(_QWORD *)(a1 + 32))
              v78 = 18000;
            else
              v78 = 0;
            if (*(_QWORD *)(a1 + 32))
              v79 = 18120;
            else
              v79 = 0;
            v80 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v79));
            v81 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v110));
            v127[0] = v81;
            v82 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v127[1] = v82;
            v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v127, 2));
            v84 = objc_msgSend(v106, "initWithOrder:result:conditions:", v78, v80, v83);
            sub_10002E954((_BOOL8)v4, v84, v111);

            v85 = *(_QWORD *)(a1 + 32);
            LODWORD(v84) = *(_DWORD *)(a1 + 48);
            v126 = v110;
            v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v126, 1));
            v87 = v84;
            v6 = v111;
            LODWORD(v85) = sub_100034B2C(v85, v4, v87, v86, v112, v111, &v121);

            if ((_DWORD)v85)
            {
              v88 = sub_10002D308(v4);
              v21 = v103;
              v89 = (void *)v107;
              if ((_DWORD)v88)
              {
                v90 = ne_log_large_obj(v88);
                obj = objc_claimAutoreleasedReturnValue(v90);
                v18 = v99;
                v17 = v100;
                if (os_log_type_enabled(obj, OS_LOG_TYPE_DEBUG))
                {
                  v98 = *(_QWORD *)(a1 + 40);
                  *(_DWORD *)buf = 138412546;
                  v123 = v98;
                  v124 = 2112;
                  v125 = v111;
                  _os_log_debug_impl((void *)&_mh_execute_header, obj, OS_LOG_TYPE_DEBUG, "control pass Policy IDs added %@: %@", buf, 0x16u);
                }
                v22 = 1;
                v91 = (void *)v108;
LABEL_72:

              }
              else
              {
                v22 = 0;
                v18 = v99;
                v17 = v100;
                v91 = (void *)v108;
              }
            }
            else
            {
              v22 = 0;
              v18 = v99;
              v17 = v100;
              v89 = (void *)v107;
              v91 = (void *)v108;
              v21 = v103;
            }
          }
          else
          {
            v22 = 0;
            v21 = v103;
            v89 = (void *)v107;
            v91 = (void *)v108;
          }
          v92 = v101;
        }
        else
        {
          v22 = 0;
          v92 = v26;
          v21 = v103;
          v89 = (void *)v107;
          v91 = (void *)v108;
        }

      }
      else
      {
        v22 = 0;
        v89 = (void *)v107;
        v91 = (void *)v108;
      }

    }
    else
    {
      v22 = 0;
    }

  }
  else
  {
    v22 = 0;
  }

  return v22;
}

uint64_t sub_100034B2C(uint64_t a1, void *a2, unsigned int a3, void *a4, void *a5, void *a6, unsigned int *a7)
{
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  void *i;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  id v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  void *j;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  id v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  NSObject *v57;
  id v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  void *k;
  uint64_t v66;
  id v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  id v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  id v99;
  id v100;
  void *v101;
  uint64_t v102;
  void *v103;
  void *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  id v108;
  id v109;
  id obj;
  char *obja;
  id v113;
  id v114;
  id v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint8_t buf[16];
  _BYTE v149[128];
  _BYTE v150[128];
  _BYTE v151[128];
  _BYTE v152[128];
  _BYTE v153[128];
  _BYTE v154[128];
  _BYTE v155[128];
  _BYTE v156[128];

  v115 = a2;
  v12 = a4;
  v114 = a5;
  v113 = a6;
  if (a1)
  {
    v13 = +[NEProcessInfo copyDNSUUIDs](NEProcessInfo, "copyDNSUUIDs");
    if (v13)
    {
      v14 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/usr/libexec/securityd"));
      v16 = v14;
      if (v14)
      {
        v108 = v12;
        v17 = ne_log_obj(v14, v15);
        v18 = objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Adding DNS policies for securityd", buf, 2u);
        }

        v146 = 0u;
        v147 = 0u;
        v144 = 0u;
        v145 = 0u;
        v106 = v16;
        v19 = v16;
        v107 = v19;
        v99 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v144, v156, 16);
        v109 = v13;
        if (v99)
        {
          v20 = *(_QWORD *)v145;
          v95 = *(_QWORD *)v145;
          do
          {
            v21 = 0;
            do
            {
              if (*(_QWORD *)v145 != v20)
                objc_enumerationMutation(v19);
              v102 = v21;
              v22 = *(_QWORD *)(*((_QWORD *)&v144 + 1) + 8 * v21);
              v140 = 0u;
              v141 = 0u;
              v142 = 0u;
              v143 = 0u;
              obj = v13;
              v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v140, v155, 16);
              if (v23)
              {
                v24 = v23;
                v25 = *(_QWORD *)v141;
                while (2)
                {
                  for (i = 0; i != v24; i = (char *)i + 1)
                  {
                    if (*(_QWORD *)v141 != v25)
                      objc_enumerationMutation(obj);
                    v27 = *(_QWORD *)(*((_QWORD *)&v140 + 1) + 8 * (_QWORD)i);
                    v28 = objc_alloc_init((Class)NSMutableArray);
                    v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v22));
                    objc_msgSend(v28, "addObject:", v29);

                    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v27));
                    objc_msgSend(v28, "addObject:", v30);

                    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                    objc_msgSend(v28, "addObject:", v31);

                    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](NEPolicyCondition, "entitlement"));
                    objc_msgSend(v28, "addObject:", v32);

                    v33 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *a7, v114, v28);
                    LODWORD(v27) = sub_10002E954((_BOOL8)v115, v33, v113);

                    if (!(_DWORD)v27)
                    {
LABEL_79:
                      v12 = v108;
                      v13 = v109;
                      v16 = v106;
                      v55 = v107;
LABEL_80:

                      v90 = 0;
                      goto LABEL_81;
                    }
                    ++*a7;

                  }
                  v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v140, v155, 16);
                  if (v24)
                    continue;
                  break;
                }
              }

              v21 = v102 + 1;
              v13 = v109;
              v19 = v107;
              v20 = v95;
            }
            while ((id)(v102 + 1) != v99);
            v99 = objc_msgSend(v107, "countByEnumeratingWithState:objects:count:", &v144, v156, 16);
          }
          while (v99);
        }

        v36 = ne_log_obj(v34, v35);
        v37 = objc_claimAutoreleasedReturnValue(v36);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "Adding securityd policies for neagent", buf, 2u);
        }

        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v38 = v12;
        v100 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v136, v154, 16);
        if (v100)
        {
          v39 = *(_QWORD *)v137;
          v103 = v38;
          v96 = *(_QWORD *)v137;
          do
          {
            v40 = 0;
            do
            {
              if (*(_QWORD *)v137 != v39)
                objc_enumerationMutation(v38);
              v41 = *(_QWORD *)(*((_QWORD *)&v136 + 1) + 8 * (_QWORD)v40);
              v132 = 0u;
              v133 = 0u;
              v134 = 0u;
              v135 = 0u;
              obj = v19;
              v42 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v132, v153, 16);
              if (v42)
              {
                v43 = v42;
                v44 = *(_QWORD *)v133;
                while (2)
                {
                  for (j = 0; j != v43; j = (char *)j + 1)
                  {
                    if (*(_QWORD *)v133 != v44)
                      objc_enumerationMutation(obj);
                    v46 = *(_QWORD *)(*((_QWORD *)&v132 + 1) + 8 * (_QWORD)j);
                    v28 = objc_alloc_init((Class)NSMutableArray);
                    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v41));
                    objc_msgSend(v28, "addObject:", v47);

                    v48 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", a3));
                    objc_msgSend(v28, "addObject:", v48);

                    v49 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](NEPolicyCondition, "entitlement"));
                    objc_msgSend(v28, "addObject:", v49);

                    v50 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v46));
                    objc_msgSend(v28, "addObject:", v50);

                    v51 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                    objc_msgSend(v28, "addObject:", v51);

                    v52 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *a7, v114, v28);
                    LODWORD(v49) = sub_10002E954((_BOOL8)v115, v52, v113);

                    if (!(_DWORD)v49)
                    {
                      v55 = v103;
                      v16 = v106;
                      v12 = v108;
                      v13 = v109;
                      goto LABEL_80;
                    }
                    ++*a7;

                  }
                  v43 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v132, v153, 16);
                  if (v43)
                    continue;
                  break;
                }
              }

              v40 = (char *)v40 + 1;
              v38 = v103;
              v19 = v107;
              v12 = v108;
              v39 = v96;
            }
            while (v40 != v100);
            v100 = objc_msgSend(v103, "countByEnumeratingWithState:objects:count:", &v136, v154, 16);
          }
          while (v100);
        }

        v53 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/usr/libexec/trustd"));
        v55 = v53;
        if (v53)
        {
          v104 = v38;
          v56 = ne_log_obj(v53, v54);
          v57 = objc_claimAutoreleasedReturnValue(v56);
          v13 = v109;
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "Adding DNS policies for trustd", buf, 2u);
          }

          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v58 = v55;
          v97 = (char *)objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v128, v152, 16);
          v101 = v58;
          if (v97)
          {
            v59 = *(_QWORD *)v129;
            v107 = v55;
            v93 = *(_QWORD *)v129;
            do
            {
              v60 = 0;
              do
              {
                if (*(_QWORD *)v129 != v59)
                  objc_enumerationMutation(v58);
                obja = v60;
                v61 = *(_QWORD *)(*((_QWORD *)&v128 + 1) + 8 * (_QWORD)v60);
                v124 = 0u;
                v125 = 0u;
                v126 = 0u;
                v127 = 0u;
                v28 = v13;
                v62 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v124, v151, 16);
                if (v62)
                {
                  v63 = v62;
                  v64 = *(_QWORD *)v125;
                  while (2)
                  {
                    for (k = 0; k != v63; k = (char *)k + 1)
                    {
                      if (*(_QWORD *)v125 != v64)
                        objc_enumerationMutation(v28);
                      v66 = *(_QWORD *)(*((_QWORD *)&v124 + 1) + 8 * (_QWORD)k);
                      v67 = objc_alloc_init((Class)NSMutableArray);
                      v68 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v61));
                      objc_msgSend(v67, "addObject:", v68);

                      v69 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v66));
                      objc_msgSend(v67, "addObject:", v69);

                      v70 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                      objc_msgSend(v67, "addObject:", v70);

                      v71 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](NEPolicyCondition, "entitlement"));
                      objc_msgSend(v67, "addObject:", v71);

                      v72 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *a7, v114, v67);
                      LODWORD(v68) = sub_10002E954((_BOOL8)v115, v72, v113);

                      if (!(_DWORD)v68)
                      {
                        obj = v101;
LABEL_78:

                        goto LABEL_79;
                      }
                      ++*a7;

                    }
                    v63 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v124, v151, 16);
                    if (v63)
                      continue;
                    break;
                  }
                }

                v60 = obja + 1;
                v58 = v101;
                v12 = v108;
                v13 = v109;
                v55 = v107;
                v59 = v93;
              }
              while (obja + 1 != v97);
              v97 = (char *)objc_msgSend(v101, "countByEnumeratingWithState:objects:count:", &v128, v152, 16);
            }
            while (v97);
          }

          v75 = ne_log_obj(v73, v74);
          v76 = objc_claimAutoreleasedReturnValue(v75);
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "Adding trustd policies for neagent", buf, 2u);
          }

          v122 = 0u;
          v123 = 0u;
          v120 = 0u;
          v121 = 0u;
          obj = v104;
          v94 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v120, v150, 16);
          if (v94)
          {
            v107 = v55;
            v77 = *(_QWORD *)v121;
            v92 = *(_QWORD *)v121;
            while (2)
            {
              v78 = 0;
              do
              {
                if (*(_QWORD *)v121 != v77)
                  objc_enumerationMutation(obj);
                v98 = v78;
                v105 = *(_QWORD *)(*((_QWORD *)&v120 + 1) + 8 * v78);
                v116 = 0u;
                v117 = 0u;
                v118 = 0u;
                v119 = 0u;
                v28 = v58;
                v79 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v116, v149, 16);
                if (v79)
                {
                  v80 = v79;
                  v81 = *(_QWORD *)v117;
LABEL_65:
                  v82 = 0;
                  while (1)
                  {
                    if (*(_QWORD *)v117 != v81)
                      objc_enumerationMutation(v28);
                    v83 = *(_QWORD *)(*((_QWORD *)&v116 + 1) + 8 * v82);
                    v67 = objc_alloc_init((Class)NSMutableArray);
                    v84 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v105));
                    objc_msgSend(v67, "addObject:", v84);

                    v85 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", a3));
                    objc_msgSend(v67, "addObject:", v85);

                    v86 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](NEPolicyCondition, "entitlement"));
                    objc_msgSend(v67, "addObject:", v86);

                    v87 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v83));
                    objc_msgSend(v67, "addObject:", v87);

                    v88 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                    objc_msgSend(v67, "addObject:", v88);

                    v89 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *a7, v114, v67);
                    LODWORD(v86) = sub_10002E954((_BOOL8)v115, v89, v113);

                    if (!(_DWORD)v86)
                      goto LABEL_78;
                    ++*a7;

                    if (v80 == (id)++v82)
                    {
                      v80 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v116, v149, 16);
                      if (v80)
                        goto LABEL_65;
                      break;
                    }
                  }
                }

                v78 = v98 + 1;
                v12 = v108;
                v58 = v101;
                v77 = v92;
              }
              while ((id)(v98 + 1) != v94);
              v90 = 1;
              v94 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v120, v150, 16);
              if (v94)
                continue;
              break;
            }
            v13 = v109;
            v16 = v106;
            v55 = v107;
          }
          else
          {
            v90 = 1;
            v16 = v106;
          }
LABEL_81:

        }
        else
        {
          v90 = 0;
          v13 = v109;
          v16 = v106;
        }

      }
      else
      {
        v90 = 0;
      }

    }
    else
    {
      v90 = 0;
    }

  }
  else
  {
    v90 = 0;
  }

  return v90;
}

uint64_t sub_100035674(uint64_t a1, void *a2)
{
  const char *v3;
  void *v4;
  id Property;
  const char *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  char v13;
  uint64_t v14;
  void *i;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  id v42;
  void *v43;
  void *v44;
  _BYTE v45[128];

  v34 = a2;
  v4 = *(void **)(a1 + 32);
  if (v4)
    Property = objc_getProperty(v4, v3, 144, 1);
  else
    Property = 0;
  sub_10002D1B0(v34, Property);
  v7 = *(id *)(a1 + 32);
  if (v7)
    v7 = objc_getProperty(v7, v6, 144, 1);
  v33 = v7;
  v8 = sub_10002EDB4(*(_QWORD *)(a1 + 32)) + 10;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", *(_QWORD *)(a1 + 40)));
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v32 = a1;
  v10 = *(id *)(a1 + 48);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v35, v45, 16);
  if (v11)
  {
    v12 = v11;
    v13 = 0;
    v14 = *(_QWORD *)v36;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v36 != v14)
          objc_enumerationMutation(v10);
        v16 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v16, "length"))
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v16));
          v18 = objc_alloc((Class)NEPolicy);
          v44 = v17;
          v13 = 1;
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v44, 1));
          v20 = objc_msgSend(v18, "initWithOrder:result:conditions:", v8, v9, v19);

          sub_10002E954((_BOOL8)v34, v20, v33);
        }
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v35, v45, 16);
    }
    while (v12);
  }
  else
  {
    v13 = 0;
  }

  if (*(_BYTE *)(v32 + 64) && (v13 & 1) == 0)
  {
    v21 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v8, v9, &__NSArray0__struct);
    sub_10002E954((_BOOL8)v34, v21, v33);

  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(v32 + 56)));
  v23 = objc_alloc((Class)NEPolicy);
  v43 = v22;
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v43, 1));
  v25 = objc_msgSend(v23, "initWithOrder:result:conditions:", v8, v9, v24);

  sub_10002E954((_BOOL8)v34, v25, v33);
  v26 = sub_10002D308(v34);
  v27 = v26;
  if ((_DWORD)v26)
  {
    v28 = ne_log_large_obj(v26);
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      v31 = *(_QWORD *)(v32 + 56);
      *(_DWORD *)buf = 138412546;
      v40 = v31;
      v41 = 2112;
      v42 = v33;
      _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "DNS Policy IDs added for %@: %@", buf, 0x16u);
    }

  }
  return v27;
}

uint64_t sub_1000359C4(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  id Property;
  id v6;
  uint64_t v7;
  NSObject *v8;
  _BOOL8 v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  void *v13;
  id v14;
  const char *v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  id v19;
  uint64_t v20;
  _BOOL8 v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  BOOL v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  NSObject *v35;
  id v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  NSObject *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  _UNKNOWN **v46;
  const char *v47;
  _UNKNOWN **v48;
  id v49;
  unsigned int v50;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  id v64;
  uint64_t v65;
  void *v66;
  void *v67;
  id v68;
  void *v69;
  id v70;
  void *v71;
  id v72;
  void *v73;
  void *v74;
  id v75;
  void *v76;
  void *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  void *v82;
  const char *v84;
  const char *v85;
  const char *v86;
  void *v87;
  _UNKNOWN **v88;
  int v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  unsigned int v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  uint8_t buf[4];
  const char *v102;
  __int16 v103;
  id v104;

  v4 = a2;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v3, 80, 1);
  v6 = Property;
  v7 = ne_log_large_obj(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v84 = *(const char **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v102 = v84;
    v103 = 2112;
    v104 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Tunnel data Policy IDs to be removed %@: %@", buf, 0x16u);
  }

  v9 = sub_10002D1B0(v4, v6);
  v10 = ne_log_large_obj(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    v85 = *(const char **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v102 = v85;
    v103 = 2112;
    v104 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Low tunnel data Policy IDs to be removed %@: %@", buf, 0x16u);
  }

  v13 = *(void **)(a1 + 32);
  if (v13)
    v14 = objc_getProperty(v13, v12, 88, 1);
  else
    v14 = 0;
  sub_10002DA24(v4, v14);
  v16 = *(void **)(a1 + 32);
  if (v16 && objc_getProperty(v16, v15, 16, 1))
  {
    v17 = *(_QWORD *)(a1 + 32);
    v96 = sub_10002EDB4(v17) + 100;
    if (*(_BYTE *)(a1 + 56))
    {
      if (v4)
      {
        v19 = objc_getProperty(v4, v18, 16, 1);
        v17 = *(_QWORD *)(a1 + 32);
      }
      else
      {
        v19 = 0;
      }
      if (v17)
        v20 = 18000;
      else
        v20 = 0;
      v21 = sub_100056494(v19, &v96, v20, 200, v6);
      v22 = v21;
      v24 = ne_log_obj(v21, v23);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      v26 = v25;
      if (v22)
      {
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315138;
          v102 = "-[NESMPolicySession setTunnelDataPoliciesForInterfaceName:outgoingInterfaceName:hasDNS:hasProxy:hasExcl"
                 "udeLocalNetworks:hasExcludeCellularServices:]_block_invoke";
          _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "%s: VPN addLocalNetworksExceptionWithOrder succeeded for PrivilegedTunnel priority", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v102 = "-[NESMPolicySession setTunnelDataPoliciesForInterfaceName:outgoingInterfaceName:hasDNS:hasProxy:hasExclud"
               "eLocalNetworks:hasExcludeCellularServices:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%s: VPN addLocalNetworksExceptionWithOrder failed for PrivilegedTunnel priority", buf, 0xCu);
      }

    }
    if (v4)
      v28 = objc_getProperty(v4, v18, 16, 1);
    else
      v28 = 0;
    v29 = v28;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 0));
    v31 = sub_10005459C((_BOOL8)v29, &v96, v30, v6);

    if (!v31)
    {
      v34 = ne_log_obj(v32, v33);
      v35 = objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "Failed to add icmpv6 exception for data", buf, 2u);
      }

    }
    if (*(_BYTE *)(a1 + 57))
    {
      if (v4)
        v36 = objc_getProperty(v4, v33, 16, 1);
      else
        v36 = 0;
      v37 = sub_100055754(v36, &v96, 1, 0, 0, v6);
      if ((v37 & 1) == 0)
      {
        v39 = ne_log_obj(v37, v38);
        v40 = objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Failed to add VoiceMail exception for data", buf, 2u);
        }

      }
      if (v4)
        v41 = objc_getProperty(v4, v38, 16, 1);
      else
        v41 = 0;
      v42 = sub_100058040(v41, &v96, 1, *(void **)(a1 + 48), 0, v6);
      if ((v42 & 1) == 0)
      {
        v44 = ne_log_obj(v42, v43);
        v45 = objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "Failed to add CellularServices exception for data", buf, 2u);
        }

      }
    }
    if (*(_BYTE *)(a1 + 56))
      v46 = 0;
    else
      v46 = &off_1000C1858;
    v48 = v46;
    if (v4)
      v49 = objc_getProperty(v4, v47, 16, 1);
    else
      v49 = 0;
    v50 = v96;
    v51 = v49;
    v52 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 0));
    sub_10005B188(v51, v50, v48, v52, v6);

    if (*(_BYTE *)(a1 + 58))
    {
      v53 = sub_100033D50(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), CFSTR("ProxyAgent"));
      v54 = objc_claimAutoreleasedReturnValue(v53);
    }
    else
    {
      v54 = 0;
    }
    if (*(_BYTE *)(a1 + 59))
    {
      v55 = sub_100033D50(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), CFSTR("DNSAgent"));
      v56 = objc_claimAutoreleasedReturnValue(v55);
      v57 = v56;
      if (v56)
        v56 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v56));
    }
    else
    {
      v56 = 0;
      v57 = 0;
    }
    v90 = (void *)v57;
    v91 = (void *)v54;
    v92 = (void *)v56;
    v58 = v6;
    if (v54)
      v95 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v54));
    else
      v95 = 0;
    v89 = sub_10002EDB4(*(_QWORD *)(a1 + 32));
    v59 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", *(_QWORD *)(a1 + 40), 1));
    v60 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult scopeSocketToInterfaceName:](NEPolicyResult, "scopeSocketToInterfaceName:", *(_QWORD *)(a1 + 40)));
    v61 = sub_10002EDB4(*(_QWORD *)(a1 + 32)) + 350;
    v62 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(a1 + 40)));
    v100 = v62;
    v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v100, 1));

    v93 = (void *)v59;
    v64 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v61, v59, v63);
    v6 = v58;
    LODWORD(v62) = sub_10002E954((_BOOL8)v4, v64, v58);

    v94 = (void *)v60;
    if ((_DWORD)v62)
    {
      v88 = v48;
      v65 = sub_10002EDB4(*(_QWORD *)(a1 + 32)) + 400;
      v66 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
      v99 = v66;
      v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v99, 1));

      v68 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v65, v60, v67);
      LODWORD(v65) = sub_10002E954((_BOOL8)v4, v68, v58);

      if ((_DWORD)v65)
      {
        v69 = v91;
        if (v92)
        {
          v70 = objc_alloc((Class)NEPolicy);
          v87 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v98 = v87;
          v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v98, 1));
          v72 = objc_msgSend(v70, "initWithOrder:result:conditions:", (v89 + 10), v92, v71);
          sub_10002E954((_BOOL8)v4, v72, v58);

        }
        v73 = v92;
        v74 = (void *)v95;
        if (v95)
        {
          v75 = objc_alloc((Class)NEPolicy);
          v76 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v97 = v76;
          v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v97, 1));
          v78 = objc_msgSend(v75, "initWithOrder:result:conditions:", (v89 + 20), v95, v77);
          sub_10002E954((_BOOL8)v4, v78, v6);

          v74 = (void *)v95;
        }
        v79 = sub_10002D308(v4);
        if ((_DWORD)v79)
        {
          v80 = ne_log_large_obj(v79);
          v81 = objc_claimAutoreleasedReturnValue(v80);
          v48 = v88;
          if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
          {
            v86 = *(const char **)(a1 + 48);
            *(_DWORD *)buf = 138412546;
            v102 = v86;
            v103 = 2112;
            v104 = v6;
            _os_log_debug_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "tunnel data Policy IDs added %@: %@", buf, 0x16u);
          }

          v27 = 1;
        }
        else
        {
          v27 = 0;
          v48 = v88;
        }
        v82 = v90;
        goto LABEL_73;
      }
      v27 = 0;
      v48 = v88;
    }
    else
    {
      v27 = 0;
      v67 = v63;
    }
    v82 = v90;
    v69 = v91;
    v73 = v92;
    v74 = (void *)v95;
LABEL_73:

    goto LABEL_74;
  }
  v27 = 0;
LABEL_74:

  return v27;
}

uint64_t sub_100036284(uint64_t a1, void *a2)
{
  const char *v3;
  id Property;
  id v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL8 v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  void *v13;
  id v14;
  const char *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  _UNKNOWN **v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  _BOOL4 v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  void *i;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  unsigned __int8 v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  id v74;
  void *v75;
  id v76;
  _BOOL4 v77;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  id v92;
  unint64_t v93;
  NSObject *v94;
  id obj;
  uint64_t v96;
  void *v97;
  id v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _QWORD v111[2];
  _QWORD v112[3];
  _BYTE v113[128];
  _QWORD v114[3];
  _QWORD v115[3];
  _BYTE v116[128];
  _QWORD v117[3];
  uint8_t v118[128];
  uint8_t buf[4];
  uint64_t v120;
  __int16 v121;
  id v122;

  v98 = a2;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v3, 80, 1);
  v5 = Property;
  v6 = ne_log_large_obj(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v79 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v120 = v79;
    v121 = 2112;
    v122 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Tunnel data Policy IDs to be removed %@: %@", buf, 0x16u);
  }

  v8 = sub_10002D1B0(v98, v5);
  v9 = ne_log_large_obj(v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v80 = *(id *)(a1 + 32);
    v81 = *(_QWORD *)(a1 + 40);
    if (v80)
      v80 = objc_getProperty(v80, v11, 88, 1);
    *(_DWORD *)buf = 138412546;
    v120 = v81;
    v121 = 2112;
    v122 = v80;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Low tunnel Policy IDs to be removed %@: %@", buf, 0x16u);
  }

  v13 = *(void **)(a1 + 32);
  if (v13)
    v14 = objc_getProperty(v13, v12, 88, 1);
  else
    v14 = 0;
  sub_10002DA24(v98, v14);
  v16 = *(void **)(a1 + 32);
  if (v16 && objc_getProperty(v16, v15, 16, 1))
  {
    v17 = sub_10002EDB4(*(_QWORD *)(a1 + 32)) + 200;
    v18 = *(void **)(a1 + 48);
    v19 = &AnalyticsSendEventLazy_ptr;
    v96 = a1;
    v97 = v5;
    if (v18)
    {
      v109 = 0u;
      v110 = 0u;
      v107 = 0u;
      v108 = 0u;
      obj = v18;
      v91 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v107, v118, 16);
      if (v91)
      {
        v89 = *(_QWORD *)v108;
        v20 = kSCPropNetIPv4RouteDestinationAddress;
        v87 = kSCPropNetIPv4RouteSubnetMask;
        v85 = kSCPropNetIPv6RouteDestinationAddress;
        v83 = kSCPropNetIPv6RoutePrefixLength;
        while (2)
        {
          v21 = 0;
          v93 = v17;
          do
          {
            if (*(_QWORD *)v108 != v89)
              objc_enumerationMutation(obj);
            v22 = *(void **)(*((_QWORD *)&v107 + 1) + 8 * (_QWORD)v21);
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "valueForKey:", v20, v83));

            if (v23)
            {
              v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", v20));
              v25 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v24, CFSTR("0")));
              v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", v87));
              LOBYTE(v27) = NEGetPrefixForIPv4NetmaskString();

            }
            else
            {
              v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", v85));
              v25 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v24, CFSTR("0")));
              v27 = NEGetIntFromDictionary(v22, v83, 0);
            }

            v28 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddress:prefix:](NEPolicyCondition, "flowRemoteAddress:prefix:", v25, v27));
            v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(v96 + 56)));
            v117[0] = v29;
            v30 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition fallbackTraffic](NEPolicyCondition, "fallbackTraffic"));
            v117[1] = v30;
            v117[2] = v28;
            v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v117, 3));

            v32 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult scopeSocketToInterfaceName:](NEPolicyResult, "scopeSocketToInterfaceName:", *(_QWORD *)(v96 + 56)));
            v33 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (char *)v21 + v93, v32, v31);
            v34 = sub_10002E954((_BOOL8)v98, v33, v97);

            if (!v34)
            {
              v54 = 0;
              v5 = v97;
              goto LABEL_62;
            }
            v21 = (char *)v21 + 1;
          }
          while (v91 != v21);
          v17 = (v93 + (_DWORD)v21);
          v91 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v107, v118, 16);
          if (v91)
            continue;
          break;
        }
      }

      a1 = v96;
      v5 = v97;
      v19 = &AnalyticsSendEventLazy_ptr;
    }
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v19[176], "scopeSocketToInterfaceName:", *(_QWORD *)(a1 + 40)));
    if (!*(_BYTE *)(a1 + 80))
    {
      v55 = *(void **)(a1 + 64);
      if (v55)
      {
        v105 = 0u;
        v106 = 0u;
        v103 = 0u;
        v104 = 0u;
        v94 = v55;
        v92 = -[NSObject countByEnumeratingWithState:objects:count:](v94, "countByEnumeratingWithState:objects:count:", &v103, v116, 16);
        if (v92)
        {
          v90 = *(_QWORD *)v104;
          v56 = kSCPropNetIPv4RouteDestinationAddress;
          v88 = kSCPropNetIPv4RouteSubnetMask;
          v86 = kSCPropNetIPv6RouteDestinationAddress;
          v84 = kSCPropNetIPv6RoutePrefixLength;
          while (2)
          {
            v57 = 0;
            v58 = v17;
            do
            {
              if (*(_QWORD *)v104 != v90)
                objc_enumerationMutation(v94);
              v59 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * (_QWORD)v57);
              v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "valueForKey:", v56, v84));

              if (v60)
              {
                v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "objectForKeyedSubscript:", v56));
                v62 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v61, CFSTR("0")));
                v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "objectForKeyedSubscript:", v88));
                v64 = NEGetPrefixForIPv4NetmaskString();

              }
              else
              {
                v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "objectForKeyedSubscript:", v86));
                v62 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v61, CFSTR("0")));
                v64 = NEGetIntFromDictionary(v59, v84, 0);
              }

              v65 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddress:prefix:](NEPolicyCondition, "flowRemoteAddress:prefix:", v62, v64));
              v66 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(v96 + 56)));
              v115[0] = v66;
              v67 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition fallbackTraffic](NEPolicyCondition, "fallbackTraffic"));
              v115[1] = v67;
              v115[2] = v65;
              v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v115, 3));

              v69 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (char *)v57 + v58, obj, v68);
              LODWORD(v66) = sub_10002E954((_BOOL8)v98, v69, v97);

              if (!(_DWORD)v66)
              {
LABEL_60:
                v54 = 0;
                v5 = v97;
                goto LABEL_61;
              }
              v57 = (char *)v57 + 1;
            }
            while (v92 != v57);
            v17 = (v58 + (_DWORD)v57);
            v92 = -[NSObject countByEnumeratingWithState:objects:count:](v94, "countByEnumeratingWithState:objects:count:", &v103, v116, 16);
            if (v92)
              continue;
            break;
          }
        }

        v70 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddressEmpty](NEPolicyCondition, "flowRemoteAddressEmpty"));
        objc_msgSend(v70, "setNegative:", 1);
        v71 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(v96 + 56)));
        v114[0] = v71;
        v72 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition fallbackTraffic](NEPolicyCondition, "fallbackTraffic"));
        v114[1] = v72;
        v114[2] = v70;
        v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v114, 3));

        v74 = objc_alloc((Class)NEPolicy);
        v75 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult scopeSocketToInterfaceName:](NEPolicyResult, "scopeSocketToInterfaceName:", *(_QWORD *)(v96 + 56)));
        v76 = objc_msgSend(v74, "initWithOrder:result:conditions:", v17, v75, v73);
        v5 = v97;
        v77 = sub_10002E954((_BOOL8)v98, v76, v97);

        if (!v77)
          goto LABEL_58;
        v17 = (v17 + 1);
        a1 = v96;
      }
    }
    v35 = *(void **)(a1 + 72);
    if (v35)
    {
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v94 = v35;
      v36 = -[NSObject countByEnumeratingWithState:objects:count:](v94, "countByEnumeratingWithState:objects:count:", &v99, v113, 16);
      if (v36)
      {
        v37 = v36;
        v38 = *(_QWORD *)v100;
        while (2)
        {
          for (i = 0; i != v37; i = (char *)i + 1)
          {
            if (*(_QWORD *)v100 != v38)
              objc_enumerationMutation(v94);
            v40 = *(void **)(*((_QWORD *)&v99 + 1) + 8 * (_QWORD)i);
            v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("*.")));
            v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "stringByTrimmingCharactersInSet:", v41));
            if (v42)
            {
              v43 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v42));
              v44 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(a1 + 56)));
              v112[0] = v44;
              v45 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition fallbackTraffic](NEPolicyCondition, "fallbackTraffic"));
              v112[1] = v45;
              v112[2] = v43;
              v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v112, 3));

              v47 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v17, obj, v46);
              LODWORD(v45) = sub_10002E954((_BOOL8)v98, v47, v97);

              if (!(_DWORD)v45)
              {

                goto LABEL_60;
              }
              v17 = (v17 + 1);
              a1 = v96;
            }

          }
          v37 = -[NSObject countByEnumeratingWithState:objects:count:](v94, "countByEnumeratingWithState:objects:count:", &v99, v113, 16);
          if (v37)
            continue;
          break;
        }
      }

      v5 = v97;
    }
    if (!*(_BYTE *)(a1 + 80))
      goto LABEL_70;
    v48 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(a1 + 56)));
    v111[0] = v48;
    v49 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition fallbackTraffic](NEPolicyCondition, "fallbackTraffic"));
    v111[1] = v49;
    v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v111, 2));

    v51 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v17, obj, v50);
    LODWORD(v49) = sub_10002E954((_BOOL8)v98, v51, v5);

    if ((_DWORD)v49)
    {
LABEL_70:
      v52 = sub_10002D308(v98);
      if ((_DWORD)v52)
      {
        v53 = ne_log_large_obj(v52);
        v94 = objc_claimAutoreleasedReturnValue(v53);
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
        {
          v82 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          v120 = v82;
          v121 = 2112;
          v122 = v5;
          _os_log_debug_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEBUG, "tunnel data Policy IDs added %@: %@", buf, 0x16u);
        }
        v54 = 1;
LABEL_61:

        goto LABEL_62;
      }
    }
LABEL_58:
    v54 = 0;
LABEL_62:

    goto LABEL_63;
  }
  v54 = 0;
LABEL_63:

  return v54;
}

uint64_t sub_100036D14(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, char a9, char a10)
{
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  _QWORD v25[5];
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  char v33;
  char v34;

  v17 = a2;
  v18 = a3;
  v19 = a4;
  v20 = a5;
  v21 = a6;
  v22 = a7;
  v23 = a8;
  if (a1)
  {
    if (isa_nsstring(v17) && isa_nsstring(v18) && *(_DWORD *)(a1 + 8) == 1)
    {
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_100036EC0;
      v25[3] = &unk_1000BDC98;
      v25[4] = a1;
      v26 = v17;
      v33 = a10;
      v34 = a9;
      v27 = v19;
      v28 = v18;
      v29 = v22;
      v30 = v23;
      v31 = v20;
      v32 = v21;
      a1 = sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v25);

    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

uint64_t sub_100036EC0(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  id Property;
  id v6;
  uint64_t v7;
  NSObject *v8;
  _BOOL8 v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  const char *v13;
  void *v14;
  id v15;
  const char *v16;
  void *v17;
  int v18;
  uint64_t v19;
  const char *v20;
  id v21;
  _BOOL8 v22;
  uint64_t v23;
  id v24;
  _UNKNOWN **v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  unsigned int v34;
  id v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  char v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  unsigned __int8 v49;
  void *v50;
  void *v51;
  id v52;
  unsigned int v53;
  id v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  BOOL v69;
  uint64_t v70;
  const char *v71;
  id v72;
  id v73;
  void *v74;
  BOOL v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  NSObject *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  id v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  unsigned __int8 v93;
  void *v94;
  void *v95;
  id v96;
  unsigned int v97;
  id v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  void *v111;
  uint64_t v112;
  void *v113;
  id v114;
  id v115;
  unsigned int v116;
  id v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  id v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  id v134;
  id v135;
  unsigned int v136;
  id v137;
  BOOL v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  BOOL v142;
  uint64_t v143;
  uint64_t v144;
  NSObject *v145;
  void *v146;
  void *v147;
  id v148;
  uint64_t v149;
  void *v150;
  const char *v151;
  id v152;
  void *v153;
  id v154;
  BOOL v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  NSObject *v159;
  const char *v160;
  uint64_t v161;
  const char *v162;
  const char *v163;
  id v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v171;
  NSObject *v172;
  const char *v173;
  uint64_t v174;
  void *v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  NSObject *v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  int v186;
  id v187;
  uint64_t v188;
  uint64_t v189;
  id v190;
  void *v191;
  id v192;
  id v193;
  void *v194;
  void *v195;
  void *v196;
  uint64_t v197;
  void *v198;
  void *v199;
  id v200;
  id v201;
  _BOOL8 v202;
  NSObject *v203;
  id v204;
  void *v205;
  NSObject *obj;
  void *v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  unsigned int v228;
  _QWORD v229[2];
  void *v230;
  _QWORD v231[2];
  _QWORD v232[2];
  _BYTE v233[128];
  _QWORD v234[2];
  _QWORD v235[2];
  _BYTE v236[128];
  _QWORD v237[2];
  _QWORD v238[2];
  _BYTE v239[128];
  _QWORD v240[2];
  _QWORD v241[2];
  _BYTE v242[128];
  _QWORD v243[2];
  _QWORD v244[2];
  uint8_t v245[128];
  uint8_t buf[4];
  const char *v247;
  __int16 v248;
  id v249;

  v4 = a2;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v3, 80, 1);
  v6 = Property;
  v7 = ne_log_large_obj(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v163 = *(const char **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v247 = v163;
    v248 = 2112;
    v249 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Route Policy IDs to be removed %@: %@", buf, 0x16u);
  }

  v9 = sub_10002D1B0(v4, v6);
  v10 = ne_log_large_obj(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    v164 = *(id *)(a1 + 32);
    v165 = *(const char **)(a1 + 40);
    if (v164)
      v164 = objc_getProperty(v164, v12, 88, 1);
    *(_DWORD *)buf = 138412546;
    v247 = v165;
    v248 = 2112;
    v249 = v164;
    _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Low route Policy IDs to be removed %@: %@", buf, 0x16u);
  }

  v14 = *(void **)(a1 + 32);
  if (v14)
    v15 = objc_getProperty(v14, v13, 88, 1);
  else
    v15 = 0;
  sub_10002DA24(v4, v15);
  v17 = *(void **)(a1 + 32);
  if (!v17 || !objc_getProperty(v17, v16, 16, 1))
  {
    v39 = 0;
    goto LABEL_123;
  }
  v18 = sub_10002EDB4(*(_QWORD *)(a1 + 32));
  v19 = (v18 + 265);
  v207 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
  v205 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v19));
  v202 = (_BOOL8)v4;
  v196 = v6;
  v197 = a1;
  if (*(_BYTE *)(a1 + 96))
  {
    v228 = v18 + 200;
    if (*(_BYTE *)(a1 + 97)
      && (!v4 ? (v21 = 0) : (v21 = objc_getProperty(v4, v20, 16, 1)),
          !(v22 = sub_100056494(v21, &v228, v19, 200, v6))))
    {
      v66 = ne_log_obj(v22, v23);
      obj = objc_claimAutoreleasedReturnValue(v66);
      if (os_log_type_enabled(obj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v247 = "-[NESMPolicySession setTunnelRoutePoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:includeIPv4Rou"
               "tes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:hasEnforcedRoutes:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, obj, OS_LOG_TYPE_ERROR, "%s: VPN addLocalNetworksExceptionWithOrder failed for PrivilegedTunnel priority", buf, 0xCu);
      }
      v27 = 0;
    }
    else
    {
      v186 = v18;
      v226 = 0u;
      v227 = 0u;
      v224 = 0u;
      v225 = 0u;
      obj = *(id *)(a1 + 48);
      v24 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v224, v245, 16);
      v25 = &AnalyticsSendEventLazy_ptr;
      if (v24)
      {
        v26 = v24;
        v27 = 0;
        v28 = *(_QWORD *)v225;
        while (1)
        {
          v29 = 0;
          v30 = v27;
          do
          {
            if (*(_QWORD *)v225 != v28)
              objc_enumerationMutation(obj);
            v31 = *(void **)(*((_QWORD *)&v224 + 1) + 8 * (_QWORD)v29);
            v244[0] = v207;
            v32 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", objc_msgSend(v31, "intValue")));
            v244[1] = v32;
            v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v244, 2));

            v33 = objc_alloc((Class)NEPolicy);
            v34 = v228;
            v35 = objc_msgSend(v33, "initWithOrder:result:conditions:", v228, v205, v27);
            v36 = sub_10002E954((_BOOL8)v4, v35, v6);

            if (!v36)
            {
              v63 = ne_log_obj(v37, v38);
              v64 = objc_claimAutoreleasedReturnValue(v63);
              if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315138;
                v247 = "-[NESMPolicySession setTunnelRoutePoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:includ"
                       "eIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:hasEnfo"
                       "rcedRoutes:]_block_invoke";
                v65 = "%s: VPN adding tunnel agent skip policy failed";
                goto LABEL_111;
              }
              goto LABEL_112;
            }
            v29 = (char *)v29 + 1;
            v30 = v27;
          }
          while (v26 != v29);
          v26 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v224, v245, 16);
          if (!v26)
          {

            a1 = v197;
            v25 = &AnalyticsSendEventLazy_ptr;
            goto LABEL_46;
          }
        }
      }
      v34 = v228;
LABEL_46:

      v228 = v34 + 1;
      v67 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition fallbackTraffic](NEPolicyCondition, "fallbackTraffic"));
      v243[0] = v207;
      obj = v67;
      v243[1] = v67;
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v243, 2));
      v68 = objc_msgSend(objc_alloc((Class)v25[174]), "initWithOrder:result:conditions:", v34 + 1, v205, v27);
      v69 = sub_10002E954((_BOOL8)v4, v68, v6);

      if (v69)
      {
        v228 = v34 + 2;
        if (v4)
          v72 = objc_getProperty(v4, v71, 16, 1);
        else
          v72 = 0;
        v73 = v72;
        v74 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 0));
        v75 = sub_10005459C((_BOOL8)v73, &v228, v74, v6);

        if (!v75)
        {
          v78 = ne_log_obj(v76, v77);
          v79 = objc_claimAutoreleasedReturnValue(v78);
          if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "Failed to add icmpv6 exception for data", buf, 2u);
          }

        }
        ++v228;
        if (v4)
          v80 = objc_getProperty(v4, v77, 16, 1);
        else
          v80 = 0;
        v81 = sub_100058040(v80, &v228, 1, *(void **)(a1 + 56), 0, v6);
        if ((v81 & 1) == 0)
        {
          v83 = ne_log_obj(v81, v82);
          v84 = objc_claimAutoreleasedReturnValue(v83);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            v247 = "-[NESMPolicySession setTunnelRoutePoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:includeIPv"
                   "4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:hasEnforcedRout"
                   "es:]_block_invoke";
            _os_log_error_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "%s: Failed to add CellularServices exception for data", buf, 0xCu);
          }

        }
        v228 = v186 + 250;
        v195 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(a1 + 56)));
        v199 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult scopeSocketToInterfaceName:](NEPolicyResult, "scopeSocketToInterfaceName:", *(_QWORD *)(a1 + 56)));
        v220 = 0u;
        v221 = 0u;
        v222 = 0u;
        v223 = 0u;
        v201 = *(id *)(a1 + 64);
        v85 = objc_msgSend(v201, "countByEnumeratingWithState:objects:count:", &v220, v242, 16);
        if (v85)
        {
          v86 = v85;
          v87 = *(_QWORD *)v221;
          v188 = *(_QWORD *)v221;
LABEL_61:
          v88 = 0;
          v192 = v86;
          while (1)
          {
            if (*(_QWORD *)v221 != v87)
              objc_enumerationMutation(v201);
            v89 = *(void **)(*((_QWORD *)&v220 + 1) + 8 * v88);
            if ((objc_msgSend(v89, "isDefaultRoute") & 1) == 0)
            {
              v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "destinationAddress"));
              v91 = objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v90, CFSTR("0")));

              v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "destinationSubnetMask"));
              v93 = NEGetPrefixForIPv4NetmaskString();

              v204 = (id)v91;
              v94 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddress:prefix:](NEPolicyCondition, "flowRemoteAddress:prefix:", v91, v93));
              v241[0] = v94;
              v241[1] = v207;
              v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v241, 2));

              v96 = objc_alloc((Class)v25[174]);
              v97 = v228;
              v98 = objc_msgSend(v96, "initWithOrder:result:conditions:", v228, v199, v95);
              v99 = sub_10002E954((_BOOL8)v4, v98, v6);

              if (!v99)
              {
                v171 = ne_log_obj(v100, v101);
                v172 = objc_claimAutoreleasedReturnValue(v171);
                if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315138;
                  v247 = "-[NESMPolicySession setTunnelRoutePoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:incl"
                         "udeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:has"
                         "EnforcedRoutes:]_block_invoke";
                  v173 = "%s: VPN adding excluded IPv4 route policy failed";
LABEL_152:
                  _os_log_error_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_ERROR, v173, buf, 0xCu);
                }
LABEL_141:
                v175 = v204;
LABEL_144:

                v125 = 0;
                v27 = v95;
                a1 = v197;
                goto LABEL_145;
              }
              v240[0] = v94;
              v240[1] = v195;
              v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v240, 2));

              v102 = objc_msgSend(objc_alloc((Class)v25[174]), "initWithOrder:result:conditions:", v97 + 1, v205, v27);
              v103 = sub_10002E954((_BOOL8)v4, v102, v6);

              if (!v103)
              {
                v174 = ne_log_obj(v104, v105);
                v172 = objc_claimAutoreleasedReturnValue(v174);
                v175 = v204;
                if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315138;
                  v247 = "-[NESMPolicySession setTunnelRoutePoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:incl"
                         "udeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:has"
                         "EnforcedRoutes:]_block_invoke";
                  v176 = "%s: VPN adding excluded IPv4 route skip policy failed";
                  goto LABEL_154;
                }
LABEL_143:
                v95 = v27;
                goto LABEL_144;
              }

              a1 = v197;
              v25 = &AnalyticsSendEventLazy_ptr;
              v87 = v188;
              v86 = v192;
            }
            if (v86 == (id)++v88)
            {
              v86 = objc_msgSend(v201, "countByEnumeratingWithState:objects:count:", &v220, v242, 16);
              if (v86)
                goto LABEL_61;
              break;
            }
          }
        }

        v218 = 0u;
        v219 = 0u;
        v216 = 0u;
        v217 = 0u;
        v201 = *(id *)(a1 + 72);
        v106 = objc_msgSend(v201, "countByEnumeratingWithState:objects:count:", &v216, v239, 16);
        if (v106)
        {
          v107 = v106;
          v108 = *(_QWORD *)v217;
          v189 = *(_QWORD *)v217;
LABEL_72:
          v109 = 0;
          v193 = v107;
          while (1)
          {
            if (*(_QWORD *)v217 != v108)
              objc_enumerationMutation(v201);
            v110 = *(void **)(*((_QWORD *)&v216 + 1) + 8 * v109);
            if ((objc_msgSend(v110, "isDefaultRoute") & 1) == 0)
            {
              v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "destinationAddress"));
              v112 = objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v111, CFSTR("0")));

              v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "destinationNetworkPrefixLength"));
              v114 = objc_msgSend(v113, "unsignedCharValue");

              v204 = (id)v112;
              v94 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddress:prefix:](NEPolicyCondition, "flowRemoteAddress:prefix:", v112, v114));
              v238[0] = v94;
              v238[1] = v207;
              v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v238, 2));

              v115 = objc_alloc((Class)v25[174]);
              v116 = v228;
              v117 = objc_msgSend(v115, "initWithOrder:result:conditions:", v228, v199, v95);
              v118 = sub_10002E954((_BOOL8)v4, v117, v6);

              if (!v118)
              {
                v183 = ne_log_obj(v119, v120);
                v172 = objc_claimAutoreleasedReturnValue(v183);
                if (!os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
                  goto LABEL_141;
                *(_DWORD *)buf = 136315138;
                v247 = "-[NESMPolicySession setTunnelRoutePoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:includ"
                       "eIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:hasEnfo"
                       "rcedRoutes:]_block_invoke";
                v173 = "%s: VPN adding excluded IPv6 route policy failed";
                goto LABEL_152;
              }
              v237[0] = v94;
              v237[1] = v195;
              v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v237, 2));

              v121 = objc_msgSend(objc_alloc((Class)v25[174]), "initWithOrder:result:conditions:", v116 + 1, v205, v27);
              v122 = sub_10002E954((_BOOL8)v4, v121, v6);

              if (!v122)
              {
                v184 = ne_log_obj(v123, v124);
                v172 = objc_claimAutoreleasedReturnValue(v184);
                v175 = v204;
                if (!os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
                  goto LABEL_143;
                *(_DWORD *)buf = 136315138;
                v247 = "-[NESMPolicySession setTunnelRoutePoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:includ"
                       "eIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:hasEnfo"
                       "rcedRoutes:]_block_invoke";
                v176 = "%s: VPN adding excluded IPv6 route skip policy failed";
LABEL_154:
                _os_log_error_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_ERROR, v176, buf, 0xCu);
                goto LABEL_143;
              }

              a1 = v197;
              v25 = &AnalyticsSendEventLazy_ptr;
              v108 = v189;
              v107 = v193;
            }
            if (v107 == (id)++v109)
            {
              v107 = objc_msgSend(v201, "countByEnumeratingWithState:objects:count:", &v216, v239, 16);
              v125 = 1;
              if (v107)
                goto LABEL_72;
              goto LABEL_145;
            }
          }
        }
        v125 = 1;
LABEL_145:

        if (!v125)
        {
          v39 = 0;
          goto LABEL_122;
        }
        goto LABEL_26;
      }
      v166 = ne_log_obj(v70, v71);
      v64 = objc_claimAutoreleasedReturnValue(v166);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v247 = "-[NESMPolicySession setTunnelRoutePoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:includeIPv4Rou"
               "tes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:hasEnforcedRoutes:]_block_invoke";
        v65 = "%s: VPN adding fallback traffic skip policy failed";
LABEL_111:
        _os_log_error_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, v65, buf, 0xCu);
      }
LABEL_112:

    }
    v39 = 0;
    goto LABEL_121;
  }
  v186 = v18;
  v27 = 0;
LABEL_26:
  v228 = v186 + 255;
  obj = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(a1 + 40)));
  v194 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult scopeSocketToInterfaceName:](NEPolicyResult, "scopeSocketToInterfaceName:", *(_QWORD *)(a1 + 40)));
  v191 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", *(_QWORD *)(a1 + 40), 1));
  v212 = 0u;
  v213 = 0u;
  v214 = 0u;
  v215 = 0u;
  v203 = *(id *)(a1 + 80);
  v40 = -[NSObject countByEnumeratingWithState:objects:count:](v203, "countByEnumeratingWithState:objects:count:", &v212, v236, 16);
  if (!v40)
  {
    v42 = 0;
    goto LABEL_83;
  }
  v41 = v40;
  v42 = 0;
  v43 = *(_QWORD *)v213;
  while (2)
  {
    v44 = 0;
    v187 = v41;
    do
    {
      if (*(_QWORD *)v213 != v43)
        objc_enumerationMutation(v203);
      v45 = *(void **)(*((_QWORD *)&v212 + 1) + 8 * (_QWORD)v44);
      if ((objc_msgSend(v45, "isDefaultRoute") & 1) == 0)
      {
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "destinationAddress"));
        v47 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v46, CFSTR("0")));

        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "destinationSubnetMask"));
        v49 = NEGetPrefixForIPv4NetmaskString();

        v50 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddress:prefix:](NEPolicyCondition, "flowRemoteAddress:prefix:", v47, v49));
        v235[0] = v50;
        v235[1] = v207;
        v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v235, 2));

        if (*(_BYTE *)(a1 + 96))
        {
          v200 = v47;
          v52 = objc_alloc((Class)NEPolicy);
          v53 = v228;
          v54 = objc_msgSend(v52, "initWithOrder:result:conditions:", v228, v194, v51);
          v55 = sub_10002E954(v202, v54, v196);

          if (v55)
          {
            v198 = v50;
            v234[0] = v50;
            v234[1] = obj;
            v58 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v234, 2));

            v59 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v53 + 1, v191, v58);
            v60 = sub_10002E954(v202, v59, v196);

            if (v60)
            {
              v51 = (void *)v58;
              v41 = v187;
              v47 = v200;
              a1 = v197;
              goto LABEL_36;
            }
            v161 = ne_log_obj(v61, v62);
            v159 = objc_claimAutoreleasedReturnValue(v161);
            if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315138;
              v247 = "-[NESMPolicySession setTunnelRoutePoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:includeI"
                     "Pv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:hasEnforced"
                     "Routes:]_block_invoke";
              v162 = "%s: VPN adding included IPv4 route pass policy failed";
              goto LABEL_150;
            }
LABEL_117:
            v51 = (void *)v58;
            v168 = v200;
            v4 = (id)v202;
            v6 = v196;
            v50 = v198;
          }
          else
          {
            v158 = ne_log_obj(v56, v57);
            v159 = objc_claimAutoreleasedReturnValue(v158);
            if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315138;
              v247 = "-[NESMPolicySession setTunnelRoutePoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:includeI"
                     "Pv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:hasEnforced"
                     "Routes:]_block_invoke";
              v160 = "%s: VPN adding included IPv4 route socket scoping policy failed";
LABEL_148:
              _os_log_error_impl((void *)&_mh_execute_header, v159, OS_LOG_TYPE_ERROR, v160, buf, 0xCu);
            }
LABEL_115:
            v168 = v200;
            v4 = (id)v202;
            v6 = v196;
          }

          goto LABEL_119;
        }
LABEL_36:

        v42 = 1;
        v27 = v51;
      }
      v44 = (char *)v44 + 1;
    }
    while (v41 != v44);
    v41 = -[NSObject countByEnumeratingWithState:objects:count:](v203, "countByEnumeratingWithState:objects:count:", &v212, v236, 16);
    if (v41)
      continue;
    break;
  }
LABEL_83:

  v210 = 0u;
  v211 = 0u;
  v208 = 0u;
  v209 = 0u;
  v203 = *(id *)(a1 + 88);
  v126 = -[NSObject countByEnumeratingWithState:objects:count:](v203, "countByEnumeratingWithState:objects:count:", &v208, v233, 16);
  if (v126)
  {
    v127 = v126;
    v128 = *(_QWORD *)v209;
LABEL_85:
    v129 = 0;
    v190 = v127;
    while (1)
    {
      if (*(_QWORD *)v209 != v128)
        objc_enumerationMutation(v203);
      v130 = *(void **)(*((_QWORD *)&v208 + 1) + 8 * v129);
      if ((objc_msgSend(v130, "isDefaultRoute") & 1) == 0)
      {
        v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v130, "destinationAddress"));
        v132 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v131, CFSTR("0")));

        v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v130, "destinationNetworkPrefixLength"));
        v134 = objc_msgSend(v133, "unsignedCharValue");

        v50 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddress:prefix:](NEPolicyCondition, "flowRemoteAddress:prefix:", v132, v134));
        v232[0] = v50;
        v232[1] = v207;
        v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v232, 2));

        if (*(_BYTE *)(a1 + 96))
        {
          v200 = v132;
          v135 = objc_alloc((Class)NEPolicy);
          v136 = v228;
          v137 = objc_msgSend(v135, "initWithOrder:result:conditions:", v228, v194, v51);
          v138 = sub_10002E954(v202, v137, v196);

          if (!v138)
          {
            v167 = ne_log_obj(v139, v140);
            v159 = objc_claimAutoreleasedReturnValue(v167);
            if (!os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
              goto LABEL_115;
            *(_DWORD *)buf = 136315138;
            v247 = "-[NESMPolicySession setTunnelRoutePoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:includeIPv"
                   "4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:hasEnforcedRout"
                   "es:]_block_invoke";
            v160 = "%s: VPN adding included IPv6 route socket scoping policy failed";
            goto LABEL_148;
          }
          v198 = v50;
          v231[0] = v50;
          v231[1] = obj;
          v58 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v231, 2));

          v141 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v136 + 1, v191, v58);
          v142 = sub_10002E954(v202, v141, v196);

          if (!v142)
          {
            v169 = ne_log_obj(v143, v144);
            v159 = objc_claimAutoreleasedReturnValue(v169);
            if (!os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
              goto LABEL_117;
            *(_DWORD *)buf = 136315138;
            v247 = "-[NESMPolicySession setTunnelRoutePoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:includeIPv"
                   "4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:hasEnforcedRout"
                   "es:]_block_invoke";
            v162 = "%s: VPN adding included IPv6 route pass policy failed";
LABEL_150:
            _os_log_error_impl((void *)&_mh_execute_header, v159, OS_LOG_TYPE_ERROR, v162, buf, 0xCu);
            goto LABEL_117;
          }
          v51 = (void *)v58;
          v127 = v190;
          a1 = v197;
        }

        v42 = 1;
        v27 = v51;
      }
      if (v127 == (id)++v129)
      {
        v127 = -[NSObject countByEnumeratingWithState:objects:count:](v203, "countByEnumeratingWithState:objects:count:", &v208, v233, 16);
        if (v127)
          goto LABEL_85;
        break;
      }
    }
  }

  if (*(_BYTE *)(a1 + 96))
  {
    v4 = (id)v202;
    v6 = v196;
    if ((v42 & 1) != 0)
    {
      v228 = v186 + 260;
      v145 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddressEmpty](NEPolicyCondition, "flowRemoteAddressEmpty"));
      -[NSObject setNegative:](v145, "setNegative:", 1);
      v146 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forInterfaceName:](NEPolicyRouteRule, "routeRuleWithAction:forInterfaceName:", 2, *(_QWORD *)(a1 + 40)));
      v230 = v146;
      v147 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v230, 1));

      v203 = v145;
      v229[0] = v145;
      v229[1] = v207;
      v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v229, 2));

      v148 = objc_alloc((Class)NEPolicy);
      v149 = v228;
      v150 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v147));
      v152 = objc_msgSend(v148, "initWithOrder:result:conditions:", v149, v150, v51);
      v153 = *(void **)(a1 + 32);
      if (v153)
        v154 = objc_getProperty(v153, v151, 48, 1);
      else
        v154 = 0;
      v155 = sub_10002E954(v202, v152, v154);

      if (v155)
      {

        goto LABEL_130;
      }
      v181 = ne_log_obj(v156, v157);
      v182 = objc_claimAutoreleasedReturnValue(v181);
      if (os_log_type_enabled(v182, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v247 = "-[NESMPolicySession setTunnelRoutePoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:includeIPv4Rou"
               "tes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:hasEnforcedRoutes:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v182, OS_LOG_TYPE_ERROR, "%s: VPN adding interface default deny policy failed", buf, 0xCu);
      }

LABEL_119:
      v39 = 0;
      goto LABEL_120;
    }
    v51 = v27;
  }
  else
  {
    v51 = v27;
    v4 = (id)v202;
    v6 = v196;
  }
LABEL_130:
  v177 = sub_10002D308(v4);
  if ((v177 & 1) == 0)
  {
    v180 = ne_log_obj(v177, v178);
    v203 = objc_claimAutoreleasedReturnValue(v180);
    if (os_log_type_enabled(v203, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v247 = "-[NESMPolicySession setTunnelRoutePoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:includeIPv4Route"
             "s:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:hasEnforcedRoutes:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v203, OS_LOG_TYPE_ERROR, "%s: VPN applying added policies failed", buf, 0xCu);
    }
    goto LABEL_119;
  }
  v179 = ne_log_large_obj(v177);
  v203 = objc_claimAutoreleasedReturnValue(v179);
  if (os_log_type_enabled(v203, OS_LOG_TYPE_DEBUG))
  {
    v185 = *(const char **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v247 = v185;
    v248 = 2112;
    v249 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v203, OS_LOG_TYPE_DEBUG, "route Policy IDs added %@: %@", buf, 0x16u);
  }
  v39 = 1;
LABEL_120:

  v27 = v51;
LABEL_121:

LABEL_122:
LABEL_123:

  return v39;
}

BOOL sub_1000383F8(_DWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _BOOL8 v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  SEL v13;
  id Property;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = 0;
  if (a1 && v5)
  {
    if (a1[2] == 4)
    {
      if (!v6)
      {
        v7 = objc_alloc_init((Class)NSMutableArray);
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        objc_msgSend(v7, "addObject:", v9);

      }
      v10 = objc_alloc((Class)NEPolicy);
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult passWithFlags:](NEPolicyResult, "passWithFlags:", 1));
      v12 = objc_msgSend(v10, "initWithOrder:result:conditions:", 100, v11, v7);
      Property = objc_getProperty(a1, v13, 56, 1);
      v8 = sub_10002CE30((_BOOL8)v5, v12, Property);

    }
    else
    {
      v8 = 0;
    }
  }

  return v8;
}

uint64_t sub_100038508(uint64_t a1, int a2, void *a3, int a4, void *a5, void *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  _QWORD v22[5];
  id v23;
  id v24;
  id v25;
  id v26;
  int v27;
  int v28;
  char v29;

  v13 = a3;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = v16;
  if (a1 && *(_DWORD *)(a1 + 8) == 4)
  {
    if (v15)
      v18 = v16 == 0;
    else
      v18 = 1;
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v19 = !v18;
    v22[2] = sub_100038644;
    v22[3] = &unk_1000BDCE8;
    v22[4] = a1;
    v27 = a2;
    v29 = v19;
    v23 = v15;
    v24 = v13;
    v28 = a4;
    v25 = v14;
    v26 = v17;
    v20 = sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v22);

  }
  else
  {
    v20 = 0;
  }

  return v20;
}

uint64_t sub_100038644(uint64_t a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  void *v8;
  id v9;
  const char *v10;
  void *v11;
  id v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  void *v17;
  uint64_t isKindOfClass;
  _UNKNOWN **v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  id v24;
  id v25;
  uint64_t v26;
  void *i;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  const char *v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  id v46;
  unsigned int v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  id v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  const char *v64;
  id v65;
  void *v66;
  id v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  id v72;
  id v73;
  id v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  _BOOL4 v81;
  uint64_t v82;
  void *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  const char *v95;
  _BOOL8 v96;
  uint64_t v97;
  const char *v98;
  id v99;
  void *v100;
  id v101;
  BOOL v102;
  uint64_t v103;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  const char *v110;
  id v111;
  void *v112;
  id v113;
  id Property;
  id v115;
  id v116;
  id v117;
  uint64_t v118;
  id v119;
  void *v120;
  int v121;
  uint64_t v122;
  void *v123;
  _UNKNOWN **obj;
  id v125;
  uint64_t v126;
  void *v127;
  void *v128;
  _QWORD v129[4];
  id v130;
  uint64_t v131;
  id v132;
  id v133;
  int v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  void *v147;
  _BYTE v148[128];
  _QWORD v149[3];
  _BYTE v150[128];
  _BYTE v151[128];
  _QWORD v152[3];
  _QWORD v153[2];
  uint8_t buf[4];
  const char *v155;
  __int16 v156;
  id v157;

  v3 = a2;
  v4 = ne_log_large_obj(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v6, 48, 1);
    *(_DWORD *)buf = 136315394;
    v155 = "-[NESMPolicySession setPolicyForContentFilterControlUnit:providerProcessIdentity:uid:settings:limitToProcess:"
           "perApp:]_block_invoke";
    v156 = 2112;
    v157 = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s: Policy IDs to be removed: %@", buf, 0x16u);
  }

  v8 = *(void **)(a1 + 32);
  if (v8)
    v9 = objc_getProperty(v8, v7, 48, 1);
  else
    v9 = 0;
  sub_10002D1B0(v3, v9);
  v11 = *(void **)(a1 + 32);
  if (v11)
    v12 = objc_getProperty(v11, v10, 56, 1);
  else
    v12 = 0;
  sub_10002DA24(v3, v12);
  if (v3)
    v3[2] = *(_DWORD *)(a1 + 72);
  v13 = *(unsigned int *)(a1 + 72);
  v14 = v13 & 0x1FFFFFFF;
  if ((v13 & 0x1FFFFFFF) < 2)
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    do
    {
      ++v15;
      v16 = v14 > 3;
      v14 >>= 1;
    }
    while (v16);
  }
  v126 = sub_10002EDB4(*(_QWORD *)(a1 + 32)) + 1010 * v15;
  v123 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult filterWithControlUnit:](NEPolicyResult, "filterWithControlUnit:", v13));
  v120 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult drop](NEPolicyResult, "drop"));
  v128 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", (v126 + 1010)));
  if (*(_BYTE *)(a1 + 80))
  {
LABEL_14:
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    isKindOfClass = NEResourcesCopyContentFilterExclusionList();
    v19 = (_UNKNOWN **)isKindOfClass;
    v127 = v3;
    if (!isKindOfClass
      || (v20 = objc_opt_class(NSArray),
          isKindOfClass = objc_opt_isKindOfClass(v19, v20),
          (isKindOfClass & 1) == 0))
    {
      v21 = ne_log_large_obj(isKindOfClass);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v115 = *(id *)(a1 + 32);
        if (v115)
          v115 = objc_getProperty(v115, v23, 48, 1);
        *(_DWORD *)buf = 138412290;
        v155 = (const char *)v115;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Content filter exclusion list not found: %@", buf, 0xCu);
      }

      v19 = &off_1000C1570;
    }
    v145 = 0u;
    v146 = 0u;
    v143 = 0u;
    v144 = 0u;
    obj = v19;
    v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v143, v151, 16);
    if (v24)
    {
      v25 = v24;
      v26 = *(_QWORD *)v144;
      do
      {
        for (i = 0; i != v25; i = (char *)i + 1)
        {
          if (*(_QWORD *)v144 != v26)
            objc_enumerationMutation(obj);
          v28 = *(_QWORD *)(*((_QWORD *)&v143 + 1) + 8 * (_QWORD)i);
          v29 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", v28);
          v30 = v29;
          if (v29 && objc_msgSend(v29, "count")
            || (v31 = +[NEProcessInfo copyUUIDsForBundleID:uid:](NEProcessInfo, "copyUUIDsForBundleID:uid:", v28, *(unsigned int *)(a1 + 76)), v30, (v30 = v31) != 0))
          {
            if (objc_msgSend(v30, "count"))
              objc_msgSend(v17, "addObjectsFromArray:", v30);
          }

        }
        v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v143, v151, 16);
      }
      while (v25);
    }

    v141 = 0u;
    v142 = 0u;
    v139 = 0u;
    v140 = 0u;
    v125 = v17;
    v32 = objc_msgSend(v125, "countByEnumeratingWithState:objects:count:", &v139, v150, 16);
    if (v32)
    {
      v33 = v32;
      v34 = *(_QWORD *)v140;
      do
      {
        v35 = 0;
        do
        {
          if (*(_QWORD *)v140 != v34)
            objc_enumerationMutation(v125);
          v36 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", *(_QWORD *)(*((_QWORD *)&v139 + 1) + 8 * (_QWORD)v35)));
          v149[0] = v36;
          v37 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition platformBinary](NEPolicyCondition, "platformBinary"));
          v149[1] = v37;
          v38 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v149[2] = v38;
          v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v149, 3));

          v41 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v126, v128, v39);
          v42 = *(void **)(a1 + 32);
          if (v42)
            v43 = objc_getProperty(v42, v40, 48, 1);
          else
            v43 = 0;
          sub_10002E954((_BOOL8)v127, v41, v43);

          v35 = (char *)v35 + 1;
        }
        while (v33 != v35);
        v44 = objc_msgSend(v125, "countByEnumeratingWithState:objects:count:", &v139, v150, 16);
        v33 = v44;
      }
      while (v44);
    }

    v137 = 0u;
    v138 = 0u;
    v135 = 0u;
    v136 = 0u;
    v119 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "rules"));
    v45 = objc_msgSend(v119, "countByEnumeratingWithState:objects:count:", &v135, v148, 16);
    if (v45)
    {
      v46 = v45;
      v122 = *(_QWORD *)v136;
      v47 = 2;
      while (2)
      {
        v48 = 0;
        if (v47 <= 0x3EA)
          v49 = (void *)(1002 - v47);
        else
          v49 = 0;
        v118 = v47;
        v121 = v126 + v47;
        do
        {
          if (*(_QWORD *)v136 != v122)
            objc_enumerationMutation(v119);
          if (v49 == v48)
          {
            v47 = v118 + (_DWORD)v48;
            goto LABEL_63;
          }
          v50 = *(void **)(*((_QWORD *)&v135 + 1) + 8 * (_QWORD)v48);
          v51 = v123;
          v52 = objc_msgSend(v50, "action");
          v53 = v128;
          if (v52 == (id)1 || (v54 = objc_msgSend(v50, "action"), v53 = v120, v54 == (id)2))
          {
            v55 = v53;

            v51 = v55;
          }
          v56 = *(void **)(a1 + 32);
          v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "networkRule", v118));
          v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "networkRule"));
          sub_100039264(v56, v57, (uint64_t)objc_msgSend(v58, "matchProtocol"), v127, v51, v121 + (_DWORD)v48, 0);

          v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "networkRule"));
          objc_msgSend(v59, "appliesToLoopback");

          v48 = (char *)v48 + 1;
        }
        while (v46 != v48);
        v47 = v118 + (_DWORD)v48;
        v46 = objc_msgSend(v119, "countByEnumeratingWithState:objects:count:", &v135, v148, 16);
        if (v46)
          continue;
        break;
      }
    }
    else
    {
      v47 = 2;
    }
LABEL_63:

    v69 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition uid:](NEPolicyCondition, "uid:", 0));
    objc_msgSend(v69, "setNegative:", 1);
    v147 = v69;
    v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v147, 1));
    v72 = v123;
    v73 = *(id *)(a1 + 56);
    if (v73)
    {
      v74 = objc_msgSend(v73, "defaultAction");
      v75 = v128;
      if (v74 == (id)1 || (v73 = objc_msgSend(*(id *)(a1 + 56), "defaultAction"), v75 = v120, v73 == (id)2))
      {
        v76 = v75;

        v72 = v76;
      }
    }
    v77 = v47 + v126;
    v78 = *(_QWORD *)(a1 + 64);
    v79 = ne_log_obj(v73, v71);
    v80 = objc_claimAutoreleasedReturnValue(v79);
    v81 = os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG);
    if (v78)
    {
      if (v81)
      {
        *(_DWORD *)buf = 136315138;
        v155 = "-[NESMPolicySession setPolicyForContentFilterControlUnit:providerProcessIdentity:uid:settings:limitToProc"
               "ess:perApp:]_block_invoke";
        _os_log_debug_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "%s: Installing perApp Content Filter policies", buf, 0xCu);
      }

      v82 = *(_QWORD *)(a1 + 32);
      v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "appRules"));
      v129[0] = _NSConcreteStackBlock;
      v129[1] = 3221225472;
      v129[2] = sub_100039994;
      v129[3] = &unk_1000BDCC0;
      v84 = v70;
      v85 = *(_QWORD *)(a1 + 32);
      v130 = v84;
      v131 = v85;
      v3 = v127;
      v132 = v127;
      v134 = v77;
      v133 = v72;
      sub_10003248C(v82, v83, 0, 0, 0, 0, v129, 0);

    }
    else
    {
      if (v81)
      {
        *(_DWORD *)buf = 136315138;
        v155 = "-[NESMPolicySession setPolicyForContentFilterControlUnit:providerProcessIdentity:uid:settings:limitToProc"
               "ess:perApp:]_block_invoke";
        _os_log_debug_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "%s: Installing system-wide Content Filter policies", buf, 0xCu);
      }

      v96 = sub_1000383F8(*(_DWORD **)(a1 + 32), v127, 0);
      if (!v96)
      {
        v103 = ne_log_obj(v96, v97);
        v94 = objc_claimAutoreleasedReturnValue(v103);
        if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_ERROR, "Failed to install content filter pass policies", buf, 2u);
        }
        v68 = 0;
        goto LABEL_85;
      }
      v99 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v77, v72, v70);
      v100 = *(void **)(a1 + 32);
      if (v100)
        v101 = objc_getProperty(v100, v98, 48, 1);
      else
        v101 = 0;
      v3 = v127;
      v102 = sub_10002E954((_BOOL8)v127, v99, v101);

      if (!v102)
      {
LABEL_81:
        v68 = 0;
LABEL_86:

        goto LABEL_87;
      }
    }
    v86 = sub_10002D308(v3);
    if ((_DWORD)v86)
    {
      v88 = ne_log_obj(v86, v87);
      v89 = objc_claimAutoreleasedReturnValue(v88);
      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
      {
        v116 = *(id *)(a1 + 32);
        if (v116)
          v116 = objc_getProperty(v116, v90, 48, 1);
        *(_DWORD *)buf = 136315394;
        v155 = "-[NESMPolicySession setPolicyForContentFilterControlUnit:providerProcessIdentity:uid:settings:limitToProc"
               "ess:perApp:]_block_invoke";
        v156 = 2112;
        v157 = v116;
        _os_log_debug_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "%s: Policy IDs added: %@", buf, 0x16u);
      }

      v93 = ne_log_obj(v91, v92);
      v94 = objc_claimAutoreleasedReturnValue(v93);
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
      {
        v117 = *(id *)(a1 + 32);
        if (v117)
          v117 = objc_getProperty(v117, v95, 56, 1);
        *(_DWORD *)buf = 136315394;
        v155 = "-[NESMPolicySession setPolicyForContentFilterControlUnit:providerProcessIdentity:uid:settings:limitToProc"
               "ess:perApp:]_block_invoke";
        v156 = 2112;
        v157 = v117;
        _os_log_debug_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEBUG, "%s: Policy IDs added at Low priority: %@", buf, 0x16u);
      }
      v68 = 1;
LABEL_85:

      v3 = v127;
      goto LABEL_86;
    }
    goto LABEL_81;
  }
  v60 = *(void **)(a1 + 40);
  if (!v60)
  {
    v105 = *(void **)(a1 + 48);
    if (v105)
    {
      v106 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:version:](NEPolicyCondition, "effectivePID:version:", objc_msgSend(v105, "pid"), objc_msgSend(*(id *)(a1 + 48), "pidVersion")));
      v152[0] = v106;
      v107 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition delegateIsPlatformBinary](NEPolicyCondition, "delegateIsPlatformBinary"));
      v152[1] = v107;
      v108 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
      v152[2] = v108;
      v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v152, 3));

      v111 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v126, v128, v109);
      v112 = *(void **)(a1 + 32);
      if (v112)
        v113 = objc_getProperty(v112, v110, 48, 1);
      else
        v113 = 0;
      sub_10002E954((_BOOL8)v3, v111, v113);

    }
    goto LABEL_14;
  }
  v61 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:version:](NEPolicyCondition, "effectivePID:version:", objc_msgSend(v60, "pid"), objc_msgSend(*(id *)(a1 + 40), "pidVersion")));
  v153[0] = v61;
  v62 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
  v153[1] = v62;
  v63 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v153, 2));

  v125 = (id)v63;
  v65 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v126, v123, v63);
  v66 = *(void **)(a1 + 32);
  if (v66)
    v67 = objc_getProperty(v66, v64, 48, 1);
  else
    v67 = 0;
  sub_10002E954((_BOOL8)v3, v65, v67);

  if (v3)
  {
    sub_10002E23C((uint64_t)v3, *(void **)(a1 + 32), 1);
    v68 = sub_10002D308(v3);
  }
  else
  {
    v68 = 0;
  }
LABEL_87:

  return v68;
}

void sub_100039264(void *a1, void *a2, uint64_t a3, void *a4, void *a5, unsigned int a6, int a7)
{
  id v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  int v19;
  void *v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  id v24;
  nw_endpoint_type_t type;
  BOOL v26;
  NSObject *v27;
  NSString *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  uint64_t port;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  SEL v44;
  id Property;
  id v46;
  SEL v47;
  id v48;
  uint64_t v49;
  void *v50;
  NSObject *v51;
  nw_endpoint_type_t v52;
  NSObject *v53;
  const sockaddr *address;
  id v55;
  unsigned __int8 v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  NSObject *v62;
  nw_endpoint_type_t v63;
  NSObject *v64;
  const sockaddr *v65;
  id v66;
  unsigned __int8 v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  uint64_t v72;
  id v73;
  SEL v74;
  id v75;
  uint64_t v76;
  void *v77;
  NSObject *v78;
  int v79;
  id v80;
  void *v81;
  uint64_t v82;
  const char *v83;
  id v84;
  void *v85;
  NSObject *v86;
  id v87;
  void *v88;
  uint64_t v89;
  _BOOL8 v91;
  id v92;

  v92 = a2;
  v12 = a4;
  v13 = a5;
  if (a1)
  {
    v14 = objc_alloc_init((Class)NSMutableArray);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    objc_msgSend(v14, "addObject:", v15);

    if (a3 == 1)
    {
      v16 = 6;
    }
    else
    {
      if (a3 != 2)
        goto LABEL_7;
      v16 = 17;
    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", v16));
    objc_msgSend(v14, "addObject:", v17);

LABEL_7:
    v18 = objc_msgSend(v92, "matchDirection");
    v91 = (_BOOL8)v12;
    v19 = a7;
    if (v18 == (id)2)
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition isInbound](NEPolicyCondition, "isInbound"));
      objc_msgSend(v20, "setNegative:", 1);
    }
    else
    {
      if (v18 != (id)1)
      {
LABEL_12:
        v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "matchRemoteHostOrNetworkEndpoint"));
        v89 = a3;
        if (!v21)
          goto LABEL_17;
        v22 = (void *)v21;
        v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "matchRemoteHostOrNetworkEndpoint"));
        v24 = v13;
        type = nw_endpoint_get_type(v23);

        v26 = type == nw_endpoint_type_host;
        v13 = v24;
        if (v26)
        {
          v27 = objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "matchRemoteHostOrNetworkEndpoint"));
          v28 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", nw_endpoint_get_hostname(v27));
          v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v29));
          objc_msgSend(v14, "addObject:", v30);

          v31 = objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "matchRemoteHostOrNetworkEndpoint"));
          port = nw_endpoint_get_port(v31);

          if ((_DWORD)port)
          {
            v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", port));
            v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "stringValue"));
            v35 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", CFSTR("0.0.0.0"), v34));
            v36 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddress:prefix:](NEPolicyCondition, "flowRemoteAddress:prefix:", v35, 0));
            v37 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "arrayByAddingObject:", v36));

            v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", port));
            v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "stringValue"));
            v40 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", CFSTR("::"), v39));
            v41 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddress:prefix:](NEPolicyCondition, "flowRemoteAddress:prefix:", v40, 0));
            v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "arrayByAddingObject:", v41));

            v13 = v24;
            v43 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", a6, v24, v37);
            Property = objc_getProperty(a1, v44, 48, 1);
            sub_10002E954(v91, v43, Property);

            v46 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", a6, v24, v42);
            v48 = objc_getProperty(a1, v47, 48, 1);
            sub_10002E954(v91, v46, v48);

            v12 = (id)v91;
            goto LABEL_33;
          }
          v71 = objc_alloc((Class)NEPolicy);
          v72 = a6;
          v13 = v24;
          v73 = v24;
        }
        else
        {
LABEL_17:
          v49 = objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "matchRemoteHostOrNetworkEndpoint", a3));
          if (v49)
          {
            v50 = (void *)v49;
            v51 = objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "matchRemoteHostOrNetworkEndpoint"));
            v52 = nw_endpoint_get_type(v51);

            if (v52 == nw_endpoint_type_address)
            {
              v53 = objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "matchRemoteHostOrNetworkEndpoint"));
              address = nw_endpoint_get_address(v53);

              v55 = objc_msgSend(v92, "matchRemotePrefix");
              v56 = v55;
              if (v55 == (id)0x7FFFFFFFFFFFFFFFLL)
              {
                if (address->sa_family == 30)
                  v56 = 0x80;
                else
                  v56 = 32;
              }
              v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "matchRemoteHostOrNetworkEndpoint"));
              v58 = (void *)objc_claimAutoreleasedReturnValue(+[NWEndpoint endpointWithCEndpoint:](NWEndpoint, "endpointWithCEndpoint:", v57));
              v59 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddress:prefix:](NEPolicyCondition, "flowRemoteAddress:prefix:", v58, v56));
              objc_msgSend(v14, "addObject:", v59);

              NEIsWildcardAddress(address);
            }
          }
          v60 = objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "matchLocalNetworkEndpoint"));
          if (v60)
          {
            v61 = (void *)v60;
            v62 = objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "matchLocalNetworkEndpoint"));
            v63 = nw_endpoint_get_type(v62);

            if (v63 == nw_endpoint_type_address)
            {
              v64 = objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "matchLocalNetworkEndpoint"));
              v65 = nw_endpoint_get_address(v64);

              v66 = objc_msgSend(v92, "matchLocalPrefix");
              v67 = v66;
              if (v66 == (id)0x7FFFFFFFFFFFFFFFLL)
              {
                if (v65->sa_family == 30)
                  v67 = 0x80;
                else
                  v67 = 32;
              }
              v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "matchLocalNetworkEndpoint"));
              v69 = (void *)objc_claimAutoreleasedReturnValue(+[NWEndpoint endpointWithCEndpoint:](NWEndpoint, "endpointWithCEndpoint:", v68));
              v70 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowLocalAddress:prefix:](NEPolicyCondition, "flowLocalAddress:prefix:", v69, v67));
              objc_msgSend(v14, "addObject:", v70);

              NEIsWildcardAddress(v65);
            }
          }
          v71 = objc_alloc((Class)NEPolicy);
          v72 = a6;
          v73 = v13;
        }
        v37 = objc_msgSend(v71, "initWithOrder:result:conditions:", v72, v73, v14, v89);
        v75 = objc_getProperty(a1, v74, 48, 1);
        v12 = (id)v91;
        sub_10002E954(v91, v37, v75);
LABEL_33:

        if (!v19)
        {
LABEL_42:

          goto LABEL_43;
        }
        v76 = objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "matchRemoteHostOrNetworkEndpoint"));
        if (!v76
          || (v77 = (void *)v76,
              v78 = objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "matchRemoteHostOrNetworkEndpoint")),
              v79 = nw_endpoint_get_port(v78),
              v78,
              v77,
              !v79))
        {
          v80 = v14;
          if (!v80)
          {
LABEL_41:

            goto LABEL_42;
          }
LABEL_40:
          v84 = objc_getProperty(a1, v83, 56, 1);
          sub_10002E80C((_BOOL8)v12, v80, v84);
          goto LABEL_41;
        }
        v80 = objc_alloc_init((Class)NSMutableArray);
        v81 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        objc_msgSend(v80, "addObject:", v81);

        if (v89 == 1)
        {
          v82 = 6;
        }
        else
        {
          if (v89 != 2)
            goto LABEL_47;
          v82 = 17;
        }
        v85 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", v82, v89));
        objc_msgSend(v80, "addObject:", v85);

LABEL_47:
        v86 = objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "matchRemoteHostOrNetworkEndpoint", v89));
        v87 = +[NEPolicyCondition schemeUsingPort:](NEPolicyCondition, "schemeUsingPort:", nw_endpoint_get_port(v86));
        v88 = (void *)objc_claimAutoreleasedReturnValue(v87);
        objc_msgSend(v80, "addObject:", v88);

        if (!v80)
          goto LABEL_41;
        goto LABEL_40;
      }
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition isInbound](NEPolicyCondition, "isInbound"));
    }
    objc_msgSend(v14, "addObject:", v20);

    goto LABEL_12;
  }
LABEL_43:

}

void sub_100039994(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  id v17;
  void *v18;
  id Property;
  int v20;
  const char *v21;
  __int16 v22;
  void *v23;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = objc_msgSend(v3, "mutableCopy");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "arrayByAddingObjectsFromArray:", v4));

  v9 = ne_log_obj(v7, v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v20 = 136315394;
    v21 = "-[NESMPolicySession setPolicyForContentFilterControlUnit:providerProcessIdentity:uid:settings:limitToProcess:p"
          "erApp:]_block_invoke";
    v22 = 2112;
    v23 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s: Installing perApp Content Filter policy %@", (uint8_t *)&v20, 0x16u);
  }

  v11 = sub_1000383F8(*(_DWORD **)(a1 + 40), *(void **)(a1 + 48), v6);
  if (!v11)
  {
    v13 = ne_log_obj(v11, v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v20) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to install content filter pass policies", (uint8_t *)&v20, 2u);
    }

  }
  v15 = *(_QWORD *)(a1 + 48);
  v17 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56), v6);
  v18 = *(void **)(a1 + 40);
  if (v18)
    Property = objc_getProperty(v18, v16, 48, 1);
  else
    Property = 0;
  sub_10002E954(v15, v17, Property);

}

uint64_t sub_100039B34(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  id Property;
  id v21;
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  id v28;

  v3 = a2;
  v4 = ne_log_large_obj(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v6, 160, 1);
    *(_DWORD *)buf = 136315394;
    v26 = "-[NESMPolicySession setPerAppDropPolicy:]_block_invoke";
    v27 = 2112;
    v28 = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s: Policy IDs to be removed: %@", buf, 0x16u);
  }

  v8 = *(void **)(a1 + 32);
  if (v8)
    v9 = objc_getProperty(v8, v7, 160, 1);
  else
    v9 = 0;
  sub_10002DA24(v3, v9);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "appRules"));
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100039D38;
  v22[3] = &unk_1000BDAF0;
  v12 = v3;
  v13 = *(_QWORD *)(a1 + 32);
  v23 = v12;
  v24 = v13;
  sub_10003248C(v10, v11, 0, 0, 0, 0, v22, 0);

  v16 = ne_log_obj(v14, v15);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    v21 = *(id *)(a1 + 32);
    if (v21)
      v21 = objc_getProperty(v21, v18, 160, 1);
    *(_DWORD *)buf = 136315394;
    v26 = "-[NESMPolicySession setPerAppDropPolicy:]_block_invoke";
    v27 = 2112;
    v28 = v21;
    _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%s: Policy IDs added at Low priority: %@", buf, 0x16u);
  }

  return 1;
}

void sub_100039D38(uint64_t a1, void *a2, char a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  void *v11;
  const char *v12;
  id v13;
  void *v14;
  id Property;
  int v16;
  const char *v17;
  __int16 v18;
  id v19;

  v5 = a2;
  v7 = ne_log_obj(v5, v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v16 = 136315394;
    v17 = "-[NESMPolicySession setPerAppDropPolicy:]_block_invoke";
    v18 = 2112;
    v19 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s: Installing perApp drop policy %@", (uint8_t *)&v16, 0x16u);
  }

  if ((a3 & 1) == 0)
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = objc_alloc((Class)NEPolicy);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult drop](NEPolicyResult, "drop"));
    v13 = objc_msgSend(v10, "initWithOrder:result:conditions:", 10000, v11, v5);
    v14 = *(void **)(a1 + 40);
    if (v14)
      Property = objc_getProperty(v14, v12, 160, 1);
    else
      Property = 0;
    sub_10002CE30(v9, v13, Property);

  }
}

id sub_100039E88(id result, const char *a2)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  _QWORD v6[5];
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  id Property;

  if (result)
  {
    v2 = result;
    result = objc_msgSend(objc_getProperty(result, a2, 160, 1), "count");
    if (result)
    {
      v3 = ne_log_large_obj(result);
      v4 = objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v8 = "-[NESMPolicySession removePerAppDropPolicy]";
        v9 = 2112;
        Property = objc_getProperty(v2, v5, 160, 1);
        _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s: policy IDs to be removed: %@", buf, 0x16u);
      }

      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_100039FA8;
      v6[3] = &unk_1000BDA50;
      v6[4] = v2;
      return (id)sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v6);
    }
  }
  return result;
}

uint64_t sub_100039FA8(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  void *v5;
  id Property;
  uint64_t v7;

  v4 = a2;
  v5 = *(void **)(a1 + 32);
  if (v5)
    Property = objc_getProperty(v5, v3, 160, 1);
  else
    Property = 0;
  if (sub_10002DA24(v4, Property))
    v7 = sub_10002D308(v4);
  else
    v7 = 0;

  return v7;
}

uint64_t sub_10003A014(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  const char *v6;
  void *v7;
  id v8;
  uint64_t isKindOfClass;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  const char *v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  id Property;
  id v48;
  void *v49;
  void *v50;
  id obj;
  id v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _QWORD v61[3];
  _BYTE v62[128];
  uint8_t v63[128];
  uint8_t buf[4];
  const char *v65;
  __int16 v66;
  id v67;

  v52 = a2;
  v3 = ne_log_large_obj(v52);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v5, 152, 1);
    *(_DWORD *)buf = 136315394;
    v65 = "-[NESMPolicySession setDefaultDropExclusionPolicy]_block_invoke";
    v66 = 2112;
    v67 = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s: Policy IDs to be removed: %@", buf, 0x16u);
  }

  v7 = *(void **)(a1 + 32);
  if (v7)
    v8 = objc_getProperty(v7, v6, 152, 1);
  else
    v8 = 0;
  sub_10002DA24(v52, v8);
  v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  isKindOfClass = NEResourcesCopyContentFilterDefaultDropExclusionList();
  v11 = (void *)isKindOfClass;
  if (isKindOfClass
    && (v12 = objc_opt_class(NSArray),
        isKindOfClass = objc_opt_isKindOfClass(v11, v12),
        (isKindOfClass & 1) != 0))
  {
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v49 = v11;
    v13 = v11;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v57, v63, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v58;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(_QWORD *)v58 != v16)
            objc_enumerationMutation(v13);
          v18 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * (_QWORD)i);
          v19 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", v18, v49);
          v21 = v19;
          if (v19 && (v19 = objc_msgSend(v19, "count")) != 0)
          {
            if (objc_msgSend(v21, "count"))
              objc_msgSend(v50, "addObjectsFromArray:", v21);
          }
          else
          {
            v22 = ne_log_obj(v19, v20);
            v23 = objc_claimAutoreleasedReturnValue(v22);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315394;
              v65 = "-[NESMPolicySession setDefaultDropExclusionPolicy]_block_invoke";
              v66 = 2112;
              v67 = v18;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%s: Failed to resolve path %@ to Mach-o UUIDs", buf, 0x16u);
            }

          }
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v57, v63, 16);
      }
      while (v15);
    }

    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    obj = v50;
    v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v62, 16);
    if (v24)
    {
      v25 = v24;
      v26 = *(_QWORD *)v54;
      do
      {
        v27 = 0;
        do
        {
          if (*(_QWORD *)v54 != v26)
            objc_enumerationMutation(obj);
          v28 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", *(_QWORD *)(*((_QWORD *)&v53 + 1) + 8 * (_QWORD)v27), v49));
          v61[0] = v28;
          v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition platformBinary](NEPolicyCondition, "platformBinary"));
          v61[1] = v29;
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v61[2] = v30;
          v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v61, 3));

          v32 = objc_alloc((Class)NEPolicy);
          v33 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult passWithFlags:](NEPolicyResult, "passWithFlags:", 1));
          v34 = objc_msgSend(v32, "initWithOrder:result:conditions:", 101, v33, v31);

          v36 = *(void **)(a1 + 32);
          if (v36)
            v37 = objc_getProperty(v36, v35, 152, 1);
          else
            v37 = 0;
          sub_10002CE30((_BOOL8)v52, v34, v37);

          v27 = (char *)v27 + 1;
        }
        while (v25 != v27);
        v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v62, 16);
        v25 = v38;
      }
      while (v38);
    }

    v41 = ne_log_obj(v39, v40);
    v42 = objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      v48 = *(id *)(a1 + 32);
      v11 = v49;
      if (v48)
        v48 = objc_getProperty(v48, v43, 152, 1);
      *(_DWORD *)buf = 136315394;
      v65 = "-[NESMPolicySession setDefaultDropExclusionPolicy]_block_invoke";
      v66 = 2112;
      v67 = v48;
      _os_log_debug_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "%s: Policy IDs added at Low priority: %@", buf, 0x16u);
      v44 = 1;
    }
    else
    {
      v44 = 1;
      v11 = v49;
    }
  }
  else
  {
    v45 = ne_log_obj(isKindOfClass, v10);
    v42 = objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v65 = "-[NESMPolicySession setDefaultDropExclusionPolicy]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "%s: Content filter exclusion list not found", buf, 0xCu);
    }
    v44 = 0;
  }

  return v44;
}

id sub_10003A538(id result, const char *a2)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  _QWORD v6[5];
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  id Property;

  if (result)
  {
    v2 = result;
    result = objc_msgSend(objc_getProperty(result, a2, 152, 1), "count");
    if (result)
    {
      v3 = ne_log_large_obj(result);
      v4 = objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v8 = "-[NESMPolicySession removeDefaultDropExclusionPolicy]";
        v9 = 2112;
        Property = objc_getProperty(v2, v5, 152, 1);
        _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s: policy IDs to be removed: %@", buf, 0x16u);
      }

      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_10003A658;
      v6[3] = &unk_1000BDA50;
      v6[4] = v2;
      return (id)sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v6);
    }
  }
  return result;
}

uint64_t sub_10003A658(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  void *v5;
  id Property;
  uint64_t v7;

  v4 = a2;
  v5 = *(void **)(a1 + 32);
  if (v5)
    Property = objc_getProperty(v5, v3, 152, 1);
  else
    Property = 0;
  if (sub_10002DA24(v4, Property))
    v7 = sub_10002D308(v4);
  else
    v7 = 0;

  return v7;
}

id sub_10003A6C4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD applier[4];
  id v14;

  if (!a1)
    return 0;
  v6 = a2;
  v7 = objc_alloc_init((Class)NSMutableArray);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "matchSigningIdentifier"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "matchPath"));

  v10 = (void *)NEHelperCacheCopyAppUUIDMappingForUIDExtended(a4, objc_msgSend(v8, "UTF8String"), objc_msgSend(v9, "UTF8String"), a3);
  v11 = v10;
  if (v10 && xpc_get_type(v10) == (xpc_type_t)&_xpc_type_array)
  {
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472;
    applier[2] = sub_10003A7E8;
    applier[3] = &unk_1000BE9D8;
    v14 = v7;
    xpc_array_apply(v11, applier);

  }
  return v7;
}

uint64_t sub_10003A7E8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  v5 = v4;
  if (v4 && xpc_get_type(v4) == (xpc_type_t)&_xpc_type_uuid)
  {
    v6 = *(void **)(a1 + 32);
    v7 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", xpc_uuid_get_bytes(v5));
    objc_msgSend(v6, "addObject:", v7);

  }
  return 1;
}

void sub_10003A874(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[4];
  void *v24;
  _BYTE v25[128];

  v5 = a2;
  v6 = v5;
  if (a1 && objc_msgSend(v5, "count"))
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = v6;
    v7 = v6;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v20;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v20 != v10)
            objc_enumerationMutation(v7);
          v12 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
          v13 = sub_10003A6C4(a1, v12, 0, a3);
          if (!objc_msgSend(v13, "count"))
          {
            v15 = ne_log_obj(0, v14);
            v16 = objc_claimAutoreleasedReturnValue(v15);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "matchSigningIdentifier"));
              *(_DWORD *)buf = 138412290;
              v24 = v17;
              _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "No Mach-O UUIDs found for app rule %@", buf, 0xCu);

            }
          }
          objc_msgSend(v12, "setCachedMachOUUIDs:", v13);

        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
      }
      while (v9);
    }

    v6 = v18;
  }

}

void sub_10003AA34(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;
  int v12;

  v8 = a2;
  v7 = a3;
  if (a1 && isa_nsarray(v8) && *(_DWORD *)(a1 + 8) == 1)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10003AB08;
    v9[3] = &unk_1000BDC48;
    v9[4] = a1;
    v10 = v7;
    v11 = v8;
    v12 = a4;
    sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v9);

  }
}

uint64_t sub_10003AB08(uint64_t a1, void *a2)
{
  const char *v2;
  void *v3;
  id Property;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  void *j;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  void *k;
  void *v33;
  void *v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  const char *v53;
  id v54;
  void *v55;
  id v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  id v65;
  void *v66;
  id v67;
  id v68;
  const char *v69;
  id v70;
  void *v71;
  id v72;
  id v73;
  uint64_t v74;
  id obj;
  uint64_t v77;
  id v78;
  uint64_t v79;
  id v80;
  id v81;
  id v82;
  uint64_t v83;
  id v84;
  void *v85;
  void *v86;
  id v87;
  uint64_t v88;
  id v89;
  id v90;
  void *v91;
  id v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  _QWORD v127[2];
  _BYTE v128[128];
  _QWORD v129[2];
  _QWORD v130[3];
  _BYTE v131[128];
  _BYTE v132[128];
  _BYTE v133[128];
  _BYTE v134[128];
  _BYTE v135[128];
  _BYTE v136[128];
  _BYTE v137[128];

  v93 = a2;
  v3 = *(void **)(a1 + 32);
  if (v3)
    Property = objc_getProperty(v3, v2, 48, 1);
  else
    Property = 0;
  sub_10002D1B0(v93, Property);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult scopeSocketToInterfaceName:](NEPolicyResult, "scopeSocketToInterfaceName:", *(_QWORD *)(a1 + 40)));
  v6 = sub_10002EDB4(*(_QWORD *)(a1 + 32));
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v125 = 0u;
  obj = *(id *)(a1 + 48);
  v78 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v122, v137, 16);
  if (v78)
  {
    v7 = (v6 + 100);
    v77 = *(_QWORD *)v123;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v123 != v77)
          objc_enumerationMutation(obj);
        v79 = v8;
        v9 = *(void **)(*((_QWORD *)&v122 + 1) + 8 * v8);
        v82 = objc_alloc_init((Class)NSMutableArray);
        v10 = objc_alloc_init((Class)NSMutableArray);
        v11 = objc_alloc_init((Class)NSMutableArray);
        v80 = sub_10003A6C4(*(_QWORD *)(a1 + 32), v9, 0, *(unsigned int *)(a1 + 56));
        v87 = v11;
        if (isa_nsarray(v80))
        {
          v120 = 0u;
          v121 = 0u;
          v118 = 0u;
          v119 = 0u;
          v12 = v80;
          v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v118, v136, 16);
          if (v13)
          {
            v14 = v13;
            v15 = *(_QWORD *)v119;
            do
            {
              for (i = 0; i != v14; i = (char *)i + 1)
              {
                if (*(_QWORD *)v119 != v15)
                  objc_enumerationMutation(v12);
                v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", *(_QWORD *)(*((_QWORD *)&v118 + 1) + 8 * (_QWORD)i)));
                objc_msgSend(v82, "addObject:", v17);

              }
              v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v118, v136, 16);
            }
            while (v14);
          }

          v11 = v87;
        }
        if (objc_msgSend(v82, "count"))
        {
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "matchDomains"));
          v19 = isa_nsarray(v18);

          if (v19)
          {
            v116 = 0u;
            v117 = 0u;
            v114 = 0u;
            v115 = 0u;
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "matchDomains"));
            v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v114, v135, 16);
            if (v21)
            {
              v22 = v21;
              v23 = *(_QWORD *)v115;
              do
              {
                for (j = 0; j != v22; j = (char *)j + 1)
                {
                  if (*(_QWORD *)v115 != v23)
                    objc_enumerationMutation(v20);
                  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", *(_QWORD *)(*((_QWORD *)&v114 + 1) + 8 * (_QWORD)j)));
                  objc_msgSend(v10, "addObject:", v25);

                }
                v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v114, v135, 16);
              }
              while (v22);
            }

            v11 = v87;
          }
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "matchAccountIdentifiers"));
          v27 = isa_nsarray(v26);

          if (v27)
          {
            v112 = 0u;
            v113 = 0u;
            v110 = 0u;
            v111 = 0u;
            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "matchAccountIdentifiers"));
            v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v110, v134, 16);
            if (v29)
            {
              v30 = v29;
              v31 = *(_QWORD *)v111;
              do
              {
                for (k = 0; k != v30; k = (char *)k + 1)
                {
                  if (*(_QWORD *)v111 != v31)
                    objc_enumerationMutation(v28);
                  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition accountIdentifier:](NEPolicyCondition, "accountIdentifier:", *(_QWORD *)(*((_QWORD *)&v110 + 1) + 8 * (_QWORD)k)));
                  objc_msgSend(v11, "addObject:", v33);

                }
                v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v110, v134, 16);
              }
              while (v30);
            }

          }
          v108 = 0u;
          v109 = 0u;
          v106 = 0u;
          v107 = 0u;
          v81 = v82;
          v84 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v106, v133, 16);
          if (v84)
          {
            v83 = *(_QWORD *)v107;
            v86 = v10;
            do
            {
              v34 = 0;
              do
              {
                if (*(_QWORD *)v107 != v83)
                  objc_enumerationMutation(v81);
                v85 = v34;
                v35 = *(_QWORD *)(*((_QWORD *)&v106 + 1) + 8 * (_QWORD)v34);
                if (objc_msgSend(v86, "count"))
                {
                  v104 = 0u;
                  v105 = 0u;
                  v102 = 0u;
                  v103 = 0u;
                  v90 = v86;
                  v36 = objc_msgSend(v90, "countByEnumeratingWithState:objects:count:", &v102, v132, 16);
                  if (v36)
                  {
                    v37 = v36;
                    v38 = *(_QWORD *)v103;
                    v88 = *(_QWORD *)v103;
                    do
                    {
                      v39 = 0;
                      v89 = v37;
                      do
                      {
                        if (*(_QWORD *)v103 != v38)
                          objc_enumerationMutation(v90);
                        v40 = *(_QWORD *)(*((_QWORD *)&v102 + 1) + 8 * (_QWORD)v39);
                        if (objc_msgSend(v11, "count"))
                        {
                          v100 = 0u;
                          v101 = 0u;
                          v98 = 0u;
                          v99 = 0u;
                          v41 = v11;
                          v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v98, v131, 16);
                          if (v42)
                          {
                            v43 = v42;
                            v91 = v39;
                            v44 = *(_QWORD *)v99;
                            do
                            {
                              v45 = 0;
                              do
                              {
                                if (*(_QWORD *)v99 != v44)
                                  objc_enumerationMutation(v41);
                                v46 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (_QWORD)v45);
                                v130[0] = v35;
                                v130[1] = v40;
                                v130[2] = v46;
                                v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v130, 3));
                                v49 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v7, v5, v47);
                                v50 = *(void **)(a1 + 32);
                                if (v50)
                                  v51 = objc_getProperty(v50, v48, 48, 1);
                                else
                                  v51 = 0;
                                sub_10002E954((_BOOL8)v93, v49, v51);

                                v45 = (char *)v45 + 1;
                              }
                              while (v43 != v45);
                              v52 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v98, v131, 16);
                              v43 = v52;
                            }
                            while (v52);
                            v11 = v87;
                            v38 = v88;
                            v37 = v89;
                            v39 = v91;
                          }
                        }
                        else
                        {
                          v129[0] = v35;
                          v129[1] = v40;
                          v41 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v129, 2));
                          v54 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v7, v5, v41);
                          v55 = *(void **)(a1 + 32);
                          if (v55)
                            v56 = objc_getProperty(v55, v53, 48, 1);
                          else
                            v56 = 0;
                          sub_10002E954((_BOOL8)v93, v54, v56);

                        }
                        v39 = (char *)v39 + 1;
                      }
                      while (v39 != v37);
                      v57 = objc_msgSend(v90, "countByEnumeratingWithState:objects:count:", &v102, v132, 16);
                      v37 = v57;
                    }
                    while (v57);
                  }
LABEL_80:
                  v34 = v85;
                  v10 = v86;
                  goto LABEL_81;
                }
                if (objc_msgSend(v11, "count"))
                {
                  v96 = 0u;
                  v97 = 0u;
                  v94 = 0u;
                  v95 = 0u;
                  v90 = v11;
                  v58 = objc_msgSend(v90, "countByEnumeratingWithState:objects:count:", &v94, v128, 16);
                  if (v58)
                  {
                    v59 = v58;
                    v60 = *(_QWORD *)v95;
                    do
                    {
                      v61 = 0;
                      do
                      {
                        if (*(_QWORD *)v95 != v60)
                          objc_enumerationMutation(v90);
                        v62 = *(_QWORD *)(*((_QWORD *)&v94 + 1) + 8 * (_QWORD)v61);
                        v127[0] = v35;
                        v127[1] = v62;
                        v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v127, 2));
                        v65 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v7, v5, v63);
                        v66 = *(void **)(a1 + 32);
                        if (v66)
                          v67 = objc_getProperty(v66, v64, 48, 1);
                        else
                          v67 = 0;
                        sub_10002E954((_BOOL8)v93, v65, v67);

                        v61 = (char *)v61 + 1;
                      }
                      while (v59 != v61);
                      v68 = objc_msgSend(v90, "countByEnumeratingWithState:objects:count:", &v94, v128, 16);
                      v59 = v68;
                    }
                    while (v68);
                  }
                  goto LABEL_80;
                }
                v126 = v35;
                v90 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v126, 1));
                v70 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v7, v5, v90);
                v71 = *(void **)(a1 + 32);
                if (v71)
                  v72 = objc_getProperty(v71, v69, 48, 1);
                else
                  v72 = 0;
                v10 = v86;
                sub_10002E954((_BOOL8)v93, v70, v72);

LABEL_81:
                v34 = (char *)v34 + 1;
              }
              while (v34 != v84);
              v73 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v106, v133, 16);
              v84 = v73;
            }
            while (v73);
          }

        }
        v8 = v79 + 1;
      }
      while ((id)(v79 + 1) != v78);
      v78 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v122, v137, 16);
    }
    while (v78);
  }

  v74 = sub_10002D308(v93);
  return v74;
}

uint64_t sub_10003B3D0(uint64_t a1, void *a2)
{
  const char *v2;
  void *v3;
  id Property;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  void *j;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  void *k;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  const char *v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  id v66;
  void *v67;
  id v68;
  id v69;
  const char *v70;
  id v71;
  void *v72;
  id v73;
  id v74;
  uint64_t v75;
  id obj;
  uint64_t v78;
  id v79;
  uint64_t v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  id v87;
  id v88;
  uint64_t v89;
  id v90;
  id v91;
  void *v92;
  void *v93;
  void *v94;
  id v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _QWORD v129[3];
  _QWORD v130[4];
  _BYTE v131[128];
  _QWORD v132[4];
  _QWORD v133[5];
  _BYTE v134[128];
  _BYTE v135[128];
  _BYTE v136[128];
  _BYTE v137[128];
  _BYTE v138[128];
  _BYTE v139[128];
  _BYTE v140[128];

  v96 = a2;
  v3 = *(void **)(a1 + 32);
  if (v3)
    Property = objc_getProperty(v3, v2, 48, 1);
  else
    Property = 0;
  sub_10002D1B0(v96, Property);
  v94 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult scopeSocketToInterfaceName:](NEPolicyResult, "scopeSocketToInterfaceName:", *(_QWORD *)(a1 + 40)));
  v5 = sub_10002EDB4(*(_QWORD *)(a1 + 32));
  v93 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition fallbackTraffic](NEPolicyCondition, "fallbackTraffic"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(a1 + 40)));
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  obj = *(id *)(a1 + 48);
  v79 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v125, v140, 16);
  if (v79)
  {
    v7 = (v5 + 100);
    v78 = *(_QWORD *)v126;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v126 != v78)
          objc_enumerationMutation(obj);
        v80 = v8;
        v9 = *(void **)(*((_QWORD *)&v125 + 1) + 8 * v8);
        v83 = objc_alloc_init((Class)NSMutableArray);
        v87 = objc_alloc_init((Class)NSMutableArray);
        v10 = objc_alloc_init((Class)NSMutableArray);
        v81 = sub_10003A6C4(*(_QWORD *)(a1 + 32), v9, 0, *(unsigned int *)(a1 + 56));
        if (isa_nsarray(v81))
        {
          v123 = 0u;
          v124 = 0u;
          v121 = 0u;
          v122 = 0u;
          v11 = v81;
          v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v121, v139, 16);
          if (v12)
          {
            v13 = v12;
            v14 = *(_QWORD *)v122;
            do
            {
              for (i = 0; i != v13; i = (char *)i + 1)
              {
                if (*(_QWORD *)v122 != v14)
                  objc_enumerationMutation(v11);
                v16 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", *(_QWORD *)(*((_QWORD *)&v121 + 1) + 8 * (_QWORD)i)));
                objc_msgSend(v83, "addObject:", v16);

              }
              v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v121, v139, 16);
            }
            while (v13);
          }

        }
        v17 = v87;
        if (objc_msgSend(v83, "count"))
        {
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "matchDomains"));
          v19 = isa_nsarray(v18);

          if (v19)
          {
            v119 = 0u;
            v120 = 0u;
            v117 = 0u;
            v118 = 0u;
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "matchDomains"));
            v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v117, v138, 16);
            if (v21)
            {
              v22 = v21;
              v23 = *(_QWORD *)v118;
              do
              {
                for (j = 0; j != v22; j = (char *)j + 1)
                {
                  if (*(_QWORD *)v118 != v23)
                    objc_enumerationMutation(v20);
                  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", *(_QWORD *)(*((_QWORD *)&v117 + 1) + 8 * (_QWORD)j)));
                  objc_msgSend(v87, "addObject:", v25);

                }
                v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v117, v138, 16);
              }
              while (v22);
            }

            v17 = v87;
          }
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "matchAccountIdentifiers"));
          v27 = isa_nsarray(v26);

          if (v27)
          {
            v115 = 0u;
            v116 = 0u;
            v113 = 0u;
            v114 = 0u;
            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "matchAccountIdentifiers"));
            v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v113, v137, 16);
            if (v29)
            {
              v30 = v29;
              v31 = *(_QWORD *)v114;
              do
              {
                for (k = 0; k != v30; k = (char *)k + 1)
                {
                  if (*(_QWORD *)v114 != v31)
                    objc_enumerationMutation(v28);
                  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition accountIdentifier:](NEPolicyCondition, "accountIdentifier:", *(_QWORD *)(*((_QWORD *)&v113 + 1) + 8 * (_QWORD)k)));
                  objc_msgSend(v10, "addObject:", v33);

                }
                v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v113, v137, 16);
              }
              while (v30);
            }

            v17 = v87;
          }
          v111 = 0u;
          v112 = 0u;
          v109 = 0u;
          v110 = 0u;
          v82 = v83;
          v85 = objc_msgSend(v82, "countByEnumeratingWithState:objects:count:", &v109, v136, 16);
          if (v85)
          {
            v84 = *(_QWORD *)v110;
            v88 = v10;
            do
            {
              v34 = 0;
              do
              {
                if (*(_QWORD *)v110 != v84)
                {
                  v35 = v34;
                  objc_enumerationMutation(v82);
                  v34 = v35;
                }
                v86 = v34;
                v36 = *(_QWORD *)(*((_QWORD *)&v109 + 1) + 8 * v34);
                if (objc_msgSend(v87, "count"))
                {
                  v107 = 0u;
                  v108 = 0u;
                  v105 = 0u;
                  v106 = 0u;
                  v91 = v87;
                  v37 = objc_msgSend(v91, "countByEnumeratingWithState:objects:count:", &v105, v135, 16);
                  if (v37)
                  {
                    v38 = v37;
                    v39 = *(_QWORD *)v106;
                    v89 = *(_QWORD *)v106;
                    do
                    {
                      v40 = 0;
                      v90 = v38;
                      do
                      {
                        if (*(_QWORD *)v106 != v39)
                          objc_enumerationMutation(v91);
                        v41 = *(_QWORD *)(*((_QWORD *)&v105 + 1) + 8 * (_QWORD)v40);
                        if (objc_msgSend(v10, "count"))
                        {
                          v92 = v40;
                          v103 = 0u;
                          v104 = 0u;
                          v101 = 0u;
                          v102 = 0u;
                          v42 = v10;
                          v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v101, v134, 16);
                          if (v43)
                          {
                            v44 = v43;
                            v45 = *(_QWORD *)v102;
                            do
                            {
                              v46 = 0;
                              do
                              {
                                if (*(_QWORD *)v102 != v45)
                                  objc_enumerationMutation(v42);
                                v47 = *(_QWORD *)(*((_QWORD *)&v101 + 1) + 8 * (_QWORD)v46);
                                v133[0] = v93;
                                v133[1] = v36;
                                v133[2] = v41;
                                v133[3] = v47;
                                v133[4] = v6;
                                v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v133, 5));
                                v50 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v7, v94, v48);
                                v51 = *(void **)(a1 + 32);
                                if (v51)
                                  v52 = objc_getProperty(v51, v49, 48, 1);
                                else
                                  v52 = 0;
                                sub_10002E954((_BOOL8)v96, v50, v52);

                                v46 = (char *)v46 + 1;
                              }
                              while (v44 != v46);
                              v53 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v101, v134, 16);
                              v44 = v53;
                            }
                            while (v53);
                            v10 = v88;
                            v39 = v89;
                            v38 = v90;
                          }
                          v40 = v92;
                        }
                        else
                        {
                          v132[0] = v93;
                          v132[1] = v36;
                          v132[2] = v41;
                          v132[3] = v6;
                          v42 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v132, 4));
                          v55 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v7, v94, v42);
                          v56 = *(void **)(a1 + 32);
                          if (v56)
                            v57 = objc_getProperty(v56, v54, 48, 1);
                          else
                            v57 = 0;
                          sub_10002E954((_BOOL8)v96, v55, v57);

                        }
                        v40 = (char *)v40 + 1;
                      }
                      while (v40 != v38);
                      v58 = objc_msgSend(v91, "countByEnumeratingWithState:objects:count:", &v105, v135, 16);
                      v38 = v58;
                    }
                    while (v58);
                  }
LABEL_81:
                  v17 = v87;
                  goto LABEL_82;
                }
                if (objc_msgSend(v10, "count"))
                {
                  v99 = 0u;
                  v100 = 0u;
                  v97 = 0u;
                  v98 = 0u;
                  v91 = v10;
                  v59 = objc_msgSend(v91, "countByEnumeratingWithState:objects:count:", &v97, v131, 16);
                  if (v59)
                  {
                    v60 = v59;
                    v61 = *(_QWORD *)v98;
                    do
                    {
                      v62 = 0;
                      do
                      {
                        if (*(_QWORD *)v98 != v61)
                          objc_enumerationMutation(v91);
                        v63 = *(_QWORD *)(*((_QWORD *)&v97 + 1) + 8 * (_QWORD)v62);
                        v130[0] = v93;
                        v130[1] = v36;
                        v130[2] = v63;
                        v130[3] = v6;
                        v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v130, 4));
                        v66 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v7, v94, v64);
                        v67 = *(void **)(a1 + 32);
                        if (v67)
                          v68 = objc_getProperty(v67, v65, 48, 1);
                        else
                          v68 = 0;
                        sub_10002E954((_BOOL8)v96, v66, v68);

                        v62 = (char *)v62 + 1;
                      }
                      while (v60 != v62);
                      v69 = objc_msgSend(v91, "countByEnumeratingWithState:objects:count:", &v97, v131, 16);
                      v60 = v69;
                    }
                    while (v69);
                  }
                  goto LABEL_81;
                }
                v129[0] = v93;
                v129[1] = v36;
                v129[2] = v6;
                v91 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v129, 3));
                v71 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v7, v94, v91);
                v72 = *(void **)(a1 + 32);
                if (v72)
                  v73 = objc_getProperty(v72, v70, 48, 1);
                else
                  v73 = 0;
                v17 = v87;
                sub_10002E954((_BOOL8)v96, v71, v73);

LABEL_82:
                v34 = v86 + 1;
              }
              while ((id)(v86 + 1) != v85);
              v74 = objc_msgSend(v82, "countByEnumeratingWithState:objects:count:", &v109, v136, 16);
              v85 = v74;
            }
            while (v74);
          }

        }
        v8 = v80 + 1;
      }
      while ((id)(v80 + 1) != v79);
      v79 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v125, v140, 16);
    }
    while (v79);
  }

  v75 = sub_10002D308(v96);
  return v75;
}

id sub_10003BD08(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v5;
  id v6;
  const char *v7;
  CC_LONG v8;
  unsigned __int8 md[32];

  v3 = 0;
  if (a1 && (_DWORD)a2)
  {
    v5 = a3;
    v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@-@%u"), v5, a2);

    v7 = (const char *)objc_msgSend(v6, "UTF8String");
    v8 = strlen(v7);
    CC_SHA256(v7, v8, md);
    v3 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", md);

  }
  return v3;
}

uint64_t sub_10003BDDC(uint64_t a1, void *a2, void *a3, void *a4, char a5, char a6, char a7, void *a8, void *a9)
{
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  _QWORD v23[4];
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  char v30;
  char v31;
  char v32;

  v16 = a2;
  v17 = a3;
  v18 = a4;
  v19 = a8;
  v20 = a9;
  if (a1 && (objc_msgSend(v16, "count") || objc_msgSend(v19, "count")) && *(_DWORD *)(a1 + 8) == 2)
  {
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_10003BF4C;
    v23[3] = &unk_1000BDD38;
    v24 = v17;
    v25 = a1;
    v30 = a6;
    v31 = a5;
    v32 = a7;
    v26 = v19;
    v27 = v18;
    v28 = v16;
    v29 = v20;
    v21 = sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v23);

  }
  else
  {
    v21 = 0;
  }

  return v21;
}

uint64_t sub_10003BF4C(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  const char *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  unsigned int v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  const char *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  const char *v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  id v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  const char *v62;
  id v63;
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  const char *v69;
  id Property;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  id v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  int32x2_t v82;
  id v83;
  void *v84;
  id v85;
  void *v86;
  void *v87;
  id v88;
  id v89;
  _QWORD *v90;
  _QWORD v91[4];
  id v92;
  uint64_t v93;
  id v94;
  _QWORD v95[4];
  id v96;
  id v97;
  uint64_t v98;
  id v99;
  id v100;
  id v101;
  int v102;
  int32x2_t v103;
  int v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  void *v113;
  void *v114;
  _QWORD v115[3];
  _DWORD buffer[8];
  __int128 v117;
  uint64_t v118;
  _BYTE v119[128];
  _QWORD v120[2];
  _BYTE v121[128];

  v88 = a2;
  v3 = ne_log_large_obj(v88);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v72 = *(_QWORD *)(a1 + 32);
    Property = *(id *)(a1 + 40);
    if (Property)
      Property = objc_getProperty(Property, v5, 48, 1);
    buffer[0] = 138412546;
    *(_QWORD *)&buffer[1] = v72;
    LOWORD(buffer[3]) = 2112;
    *(_QWORD *)((char *)&buffer[3] + 2) = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed for %@: %@", (uint8_t *)buffer, 0x16u);
  }

  v7 = *(void **)(a1 + 40);
  if (v7)
    v8 = objc_getProperty(v7, v6, 48, 1);
  else
    v8 = 0;
  sub_10002D1B0(v88, v8);
  if (*(_BYTE *)(a1 + 80))
  {
    v9 = sub_100033D50(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32), CFSTR("ProxyAgent"));
    v10 = objc_claimAutoreleasedReturnValue(v9);
  }
  else
  {
    v10 = 0;
  }
  if (*(_BYTE *)(a1 + 81))
  {
    v11 = sub_100033D50(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32), CFSTR("DNSAgent"));
    v12 = objc_claimAutoreleasedReturnValue(v11);
  }
  else
  {
    v12 = 0;
  }
  v86 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
  if (v12)
  {
    v13 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v12));
    if (v10)
    {
LABEL_12:
      v14 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v10));
      goto LABEL_15;
    }
  }
  else
  {
    v13 = 0;
    if (v10)
      goto LABEL_12;
  }
  v14 = 0;
LABEL_15:
  v80 = (void *)v12;
  v81 = (void *)v10;
  v78 = (void *)v14;
  v79 = (void *)v13;
  if (*(_BYTE *)(a1 + 82))
  {
    v76 = 0;
LABEL_18:
    v84 = 0;
    goto LABEL_19;
  }
  v76 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult scopeSocketToInterfaceName:](NEPolicyResult, "scopeSocketToInterfaceName:", *(_QWORD *)(a1 + 32)));
  if (*(_BYTE *)(a1 + 82))
    goto LABEL_18;
  v84 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", *(_QWORD *)(a1 + 32), 0));
LABEL_19:
  v15 = +[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", sub_10002EDB4(*(_QWORD *)(a1 + 40)) + 250);
  v87 = (void *)objc_claimAutoreleasedReturnValue(v15);
  v16 = sub_10002EDB4(*(_QWORD *)(a1 + 40));
  LODWORD(v75) = v16 + 100;
  HIDWORD(v75) = v16 + 20;
  v82 = vadd_s32(vdup_n_s32(v16), (int32x2_t)0xA00000065);
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v112 = 0u;
  v90 = (_QWORD *)a1;
  v17 = *(id *)(a1 + 48);
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v109, v121, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v110;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v110 != v20)
          objc_enumerationMutation(v17);
        v22 = *(void **)(*((_QWORD *)&v109 + 1) + 8 * (_QWORD)v21);
        if (isa_nsstring(v22))
        {
          v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("*.")));
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "stringByTrimmingCharactersInSet:", v23));
          if (objc_msgSend(v24, "length"))
          {
            v120[0] = v86;
            v25 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v24));
            v120[1] = v25;
            v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v120, 2));

            v28 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v82.u32[0], v84, v26);
            v29 = *(void **)(a1 + 40);
            if (v29)
              v30 = objc_getProperty(v29, v27, 48, 1);
            else
              v30 = 0;
            sub_10002E954((_BOOL8)v88, v28, v30);

          }
        }
        v21 = (char *)v21 + 1;
      }
      while (v19 != v21);
      v31 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v109, v121, 16);
      v19 = v31;
    }
    while (v31);
  }

  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v32 = *(id *)(a1 + 56);
  v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v105, v119, 16);
  if (v33)
  {
    v34 = v33;
    v35 = 0;
    v36 = *(_QWORD *)v106;
    do
    {
      v37 = 0;
      do
      {
        if (*(_QWORD *)v106 != v36)
          objc_enumerationMutation(v32);
        v38 = *(void **)(*((_QWORD *)&v105 + 1) + 8 * (_QWORD)v37);
        v118 = 0;
        v117 = 0u;
        memset(buffer, 0, sizeof(buffer));
        if (proc_pidinfo((int)objc_msgSend(v38, "intValue", v75, v76, v78, v79, v80, v81), 17, 1uLL, buffer, 56) == 56)
        {
          v39 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", buffer);
          if (!v35)
            v35 = objc_alloc_init((Class)NSMutableArray);
          objc_msgSend(v35, "addObject:", v39);
          v40 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", objc_msgSend(v38, "intValue")));
          v115[0] = v40;
          v41 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v39));
          v115[1] = v41;
          v42 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v115[2] = v42;
          v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v115, 3));

          v45 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", sub_10002EDB4(v90[5]) + 150, v87, v43);
          v46 = (void *)v90[5];
          if (v46)
            v47 = objc_getProperty(v46, v44, 48, 1);
          else
            v47 = 0;
          sub_10002E954((_BOOL8)v88, v45, v47);

        }
        v37 = (char *)v37 + 1;
      }
      while (v34 != v37);
      v48 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v105, v119, 16);
      v34 = v48;
    }
    while (v48);
  }
  else
  {
    v35 = 0;
  }

  v49 = v90[5];
  v51 = (void *)v90[8];
  v50 = (void *)v90[9];
  v95[0] = _NSConcreteStackBlock;
  v95[1] = 3221225472;
  v95[2] = sub_10003C81C;
  v95[3] = &unk_1000BDD10;
  v77 = v76;
  v96 = v77;
  v52 = v88;
  v102 = v75;
  v53 = v90[5];
  v97 = v52;
  v98 = v53;
  v85 = v84;
  v99 = v85;
  v89 = v79;
  v100 = v89;
  v103 = v82;
  v83 = v78;
  v101 = v83;
  v104 = HIDWORD(v75);
  v91[0] = _NSConcreteStackBlock;
  v91[1] = 3221225472;
  v91[2] = sub_10003CA50;
  v91[3] = &unk_1000BDB80;
  v54 = v52;
  v55 = v90[5];
  v92 = v54;
  v93 = v55;
  v56 = v87;
  v94 = v56;
  sub_10003248C(v49, v51, 1, 1, v35, v50, v95, v91);
  v57 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forInterfaceName:](NEPolicyRouteRule, "routeRuleWithAction:forInterfaceName:", 2, v90[4]));
  v114 = v57;
  v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v114, 1));

  v59 = sub_10002EDB4(v90[5]) + 200;
  v60 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v58));
  v113 = v86;
  v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v113, 1));
  v63 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v59, v60, v61);
  v64 = (void *)v90[5];
  if (v64)
    v65 = objc_getProperty(v64, v62, 48, 1);
  else
    v65 = 0;
  sub_10002E954((_BOOL8)v54, v63, v65);

  v66 = sub_10002D308(v54);
  v67 = ne_log_large_obj(v66);
  v68 = objc_claimAutoreleasedReturnValue(v67);
  if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
  {
    v74 = v90[4];
    v73 = (id)v90[5];
    if (v73)
      v73 = objc_getProperty(v73, v69, 48, 1);
    buffer[0] = 138412546;
    *(_QWORD *)&buffer[1] = v74;
    LOWORD(buffer[3]) = 2112;
    *(_QWORD *)((char *)&buffer[3] + 2) = v73;
    _os_log_debug_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "Policy IDs added for %@: %@", (uint8_t *)buffer, 0x16u);
  }

  return v66;
}

void sub_10003C81C(uint64_t a1, void *a2, char a3)
{
  uint64_t v5;
  id v6;
  int v7;
  uint64_t v8;
  id v9;
  const char *v10;
  id v11;
  void *v12;
  id Property;
  uint64_t v14;
  const char *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  const char *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  const char *v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  const char *v30;
  void *v31;
  id v32;
  id v33;

  v33 = a2;
  if ((a3 & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = objc_alloc((Class)NEPolicy);
    v7 = sub_10002EDB4(*(_QWORD *)(a1 + 48));
    v8 = (v7 + 150);
    v9 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", (v7 + 250)));
    v11 = objc_msgSend(v6, "initWithOrder:result:conditions:", v8, v9, v33);
    v12 = *(void **)(a1 + 48);
    if (v12)
      Property = objc_getProperty(v12, v10, 48, 1);
    else
      Property = 0;
    sub_10002E954(v5, v11, Property);

LABEL_21:
    goto LABEL_22;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v14 = *(_QWORD *)(a1 + 40);
    v16 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *(unsigned int *)(a1 + 80), *(_QWORD *)(a1 + 32), v33);
    v17 = *(void **)(a1 + 48);
    if (v17)
      v18 = objc_getProperty(v17, v15, 48, 1);
    else
      v18 = 0;
    sub_10002E954(v14, v16, v18);

  }
  if (*(_QWORD *)(a1 + 56))
  {
    v19 = *(_QWORD *)(a1 + 40);
    v21 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *(unsigned int *)(a1 + 84), *(_QWORD *)(a1 + 56), v33);
    v22 = *(void **)(a1 + 48);
    if (v22)
      v23 = objc_getProperty(v22, v20, 48, 1);
    else
      v23 = 0;
    sub_10002E954(v19, v21, v23);

  }
  if (*(_QWORD *)(a1 + 64))
  {
    v24 = *(_QWORD *)(a1 + 40);
    v26 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *(unsigned int *)(a1 + 88), *(_QWORD *)(a1 + 64), v33);
    v27 = *(void **)(a1 + 48);
    if (v27)
      v28 = objc_getProperty(v27, v25, 48, 1);
    else
      v28 = 0;
    sub_10002E954(v24, v26, v28);

  }
  if (*(_QWORD *)(a1 + 72))
  {
    v29 = *(_QWORD *)(a1 + 40);
    v9 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *(unsigned int *)(a1 + 92), *(_QWORD *)(a1 + 72), v33);
    v31 = *(void **)(a1 + 48);
    if (v31)
      v32 = objc_getProperty(v31, v30, 48, 1);
    else
      v32 = 0;
    sub_10002E954(v29, v9, v32);
    goto LABEL_21;
  }
LABEL_22:

}

void sub_10003CA50(_QWORD *a1, void *a2)
{
  uint64_t v3;
  id v4;
  const char *v5;
  void *v6;
  id Property;
  id v8;

  v3 = a1[4];
  v4 = a2;
  v8 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", sub_10002EDB4(a1[5]) + 5, a1[6], v4);

  v6 = (void *)a1[5];
  if (v6)
    Property = objc_getProperty(v6, v5, 48, 1);
  else
    Property = 0;
  sub_10002E954(v3, v8, Property);

}

void sub_10003CAF0(uint64_t a1, void *a2, int a3, void *a4, uint64_t a5, void *a6, _BYTE *a7, void *a8, void *a9)
{
  id v15;
  unsigned int v16;
  void *v17;
  unsigned int v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  void *v27;
  int v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  void *i;
  void *v35;
  void *v36;
  int v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  void *j;
  void *v44;
  _UNKNOWN **v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  id v62;
  void *v63;
  id v64;
  SEL v65;
  id Property;
  id v67;
  void *v68;
  id v69;
  SEL v70;
  id v71;
  void *k;
  uint64_t v73;
  id v74;
  void *v75;
  id v76;
  SEL v77;
  id v78;
  id v79;
  void *v80;
  id v81;
  SEL v82;
  id v83;
  void *v84;
  id v85;
  void *v86;
  id v87;
  SEL v88;
  id v89;
  id v90;
  void *v91;
  id v92;
  SEL v93;
  id v94;
  id v95;
  void *v96;
  void *v97;
  id v98;
  SEL v99;
  id v100;
  id v101;
  uint64_t v102;
  void *v103;
  void *v104;
  void *v105;
  id v106;
  SEL v107;
  id v108;
  id v109;
  void *v110;
  void *v111;
  void *v112;
  id v113;
  SEL v114;
  id v115;
  id v116;
  void *v117;
  void *v118;
  id v119;
  SEL v120;
  id v121;
  id v122;
  void *v123;
  void *v124;
  id v125;
  SEL v126;
  id v127;
  id v128;
  void *v129;
  void *v130;
  id v131;
  SEL v132;
  id v133;
  id v134;
  void *v135;
  void *v136;
  id v137;
  SEL v138;
  id v139;
  id v140;
  void *v141;
  void *v142;
  id v143;
  SEL v144;
  id v145;
  id v146;
  void *v147;
  void *v148;
  id v149;
  SEL v150;
  id v151;
  void *m;
  void *v153;
  uint64_t v154;
  void *v155;
  id v156;
  void *v157;
  void *v158;
  id v159;
  SEL v160;
  id v161;
  id v162;
  void *v163;
  void *v164;
  id v165;
  SEL v166;
  id v167;
  unsigned int v168;
  uint64_t v169;
  void *v170;
  char *v171;
  uint64_t v172;
  void *v173;
  void *v174;
  id v175;
  id n;
  uint64_t v177;
  id v178;
  id v179;
  id v180;
  uint64_t v181;
  void *ii;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  void *v186;
  id v187;
  _QWORD *v188;
  uint64_t v189;
  id v190;
  id v191;
  id v192;
  uint64_t v193;
  void *v194;
  void *jj;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  void *v199;
  id v200;
  _QWORD *v201;
  uint64_t v202;
  id v203;
  int v204;
  id v205;
  void *v206;
  void *v207;
  void *v208;
  id v209;
  void *v210;
  void *v211;
  void *v212;
  id v213;
  void *v214;
  void *v215;
  id v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  void *v221;
  void *v222;
  void *v223;
  void *v224;
  id v225;
  unsigned int v226;
  _BYTE *v227;
  _BYTE *v228;
  void *v229;
  void *v230;
  unsigned int v231;
  unsigned int v232;
  id v233;
  id v234;
  id v235;
  id v236;
  id v237;
  void *v238;
  uint64_t v239;
  void *v240;
  id v241;
  char *v242;
  id obj;
  char *obja;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  void *v248;
  id v249;
  uint64_t v250;
  void *v251;
  id v252;
  id v253;
  id v254;
  id self;
  id selfa;
  id v258;
  id v259;
  void *v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  _QWORD v293[4];
  _QWORD v294[2];
  _QWORD v295[2];
  _QWORD v296[3];
  _QWORD v297[3];
  _QWORD v298[4];
  _BYTE v299[128];
  _QWORD v300[3];
  _QWORD v301[4];
  _QWORD v302[4];
  _QWORD v303[5];
  _BYTE v304[128];
  _BYTE v305[128];
  _BYTE v306[128];
  _QWORD v307[2];
  _QWORD v308[2];
  _BYTE v309[128];
  _QWORD v310[2];
  _QWORD v311[2];
  _QWORD v312[2];
  _QWORD v313[2];
  _QWORD v314[2];
  _QWORD v315[2];
  _QWORD v316[2];
  _QWORD v317[2];
  void *v318;
  void *v319;
  void *v320;
  _QWORD v321[2];
  _QWORD v322[2];
  _BYTE v323[128];
  _QWORD v324[4];
  _QWORD v325[4];
  _QWORD v326[6];
  _BYTE v327[128];
  uint8_t v328[128];
  uint8_t buf[4];
  void *v330;
  __int16 v331;
  id v332;

  v15 = a2;
  v259 = a4;
  v258 = a6;
  v235 = a8;
  v234 = a9;
  self = (id)a1;
  if (a1)
  {
    v16 = objc_msgSend(v15, "multicastPreferenceSet");
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "matchSigningIdentifier"));
    v18 = objc_msgSend(v17, "isEqualToString:", CFSTR("PathRuleDefaultNonSystemIdentifier"));

    v233 = v15;
    v231 = v18;
    if ((v18 & 1) != 0)
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v21 = sub_10003A6C4(a1, v15, (uint64_t)objc_msgSend(v15, "isIdentifierExternal"), a5);
      v22 = objc_msgSend(v21, "count");
      if (v22)
      {
        v24 = ne_log_obj(v22, v23);
        v25 = objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "matchSigningIdentifier"));
          *(_DWORD *)buf = 138412546;
          v330 = v26;
          v331 = 2112;
          v332 = v21;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "UUID: Found for %@: %@", buf, 0x16u);

        }
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "matchDomains"));
        v28 = isa_nsarray(v27);

        if (v28)
        {
          v29 = v21;
          v20 = objc_alloc_init((Class)NSMutableArray);
          v289 = 0u;
          v290 = 0u;
          v291 = 0u;
          v292 = 0u;
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "matchDomains"));
          v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v289, v328, 16);
          if (v31)
          {
            v32 = v31;
            v33 = *(_QWORD *)v290;
            do
            {
              for (i = 0; i != v32; i = (char *)i + 1)
              {
                if (*(_QWORD *)v290 != v33)
                  objc_enumerationMutation(v30);
                v35 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", *(_QWORD *)(*((_QWORD *)&v289 + 1) + 8 * (_QWORD)i)));
                objc_msgSend(v20, "addObject:", v35);

              }
              v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v289, v328, 16);
            }
            while (v32);
          }

          v15 = v233;
          v21 = v29;
        }
        else
        {
          v20 = 0;
        }
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "matchAccountIdentifiers"));
        v37 = isa_nsarray(v36);

        if (v37)
        {
          v227 = a7;
          v38 = v21;
          v19 = objc_alloc_init((Class)NSMutableArray);
          v285 = 0u;
          v286 = 0u;
          v287 = 0u;
          v288 = 0u;
          v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "matchAccountIdentifiers"));
          v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v285, v327, 16);
          if (v40)
          {
            v41 = v40;
            v42 = *(_QWORD *)v286;
            do
            {
              for (j = 0; j != v41; j = (char *)j + 1)
              {
                if (*(_QWORD *)v286 != v42)
                  objc_enumerationMutation(v39);
                v44 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition accountIdentifier:](NEPolicyCondition, "accountIdentifier:", *(_QWORD *)(*((_QWORD *)&v285 + 1) + 8 * (_QWORD)j)));
                objc_msgSend(v19, "addObject:", v44);

              }
              v41 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v285, v327, 16);
            }
            while (v41);
          }

          v21 = v38;
          a7 = v227;
        }
        else
        {
          v19 = 0;
        }
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
    v240 = v20;
    v232 = a5;
    v260 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    v45 = &AnalyticsSendEventLazy_ptr;
    if (!*a7)
    {
      v228 = a7;
      v225 = v21;
      v226 = v16;
      v46 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", CFSTR("224.0.0.0"), CFSTR("0")));
      v238 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:", v46, 4));

      v47 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", CFSTR("ff00::"), CFSTR("0")));
      v48 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:", v47, 8));

      v49 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", CFSTR("255.255.255.255"), CFSTR("0")));
      v50 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:", v49, 32));

      v51 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", CFSTR("224.0.0.0"), CFSTR("0")));
      v52 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition localAddress:prefix:](NEPolicyCondition, "localAddress:prefix:", v51, 4));

      v53 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", CFSTR("ff00::"), CFSTR("0")));
      v54 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition localAddress:prefix:](NEPolicyCondition, "localAddress:prefix:", v53, 8));

      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", CFSTR("255.255.255.255"), CFSTR("0")));
      v56 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition localAddress:prefix:](NEPolicyCondition, "localAddress:prefix:", v55, 32));

      v326[0] = v238;
      v223 = (void *)v50;
      v224 = (void *)v48;
      v326[1] = v48;
      v326[2] = v50;
      v221 = (void *)v54;
      v222 = (void *)v52;
      v326[3] = v52;
      v326[4] = v54;
      v220 = (void *)v56;
      v326[5] = v56;
      v251 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v326, 6));
      v57 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition localNetworks](NEPolicyCondition, "localNetworks"));
      v58 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", 0));
      objc_msgSend(v58, "setNegative:", 1);
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition isSystemProxyConnection](NEPolicyCondition, "isSystemProxyConnection"));
      objc_msgSend(v59, "setNegative:", 1);
      v60 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult dropWithFlags:](NEPolicyResult, "dropWithFlags:", 1));
      v61 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult dropWithFlags:](NEPolicyResult, "dropWithFlags:", 3));
      v62 = objc_alloc((Class)NEPolicy);
      v325[0] = v260;
      v325[1] = v58;
      v325[2] = v59;
      v325[3] = v57;
      v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v325, 4));
      v64 = objc_msgSend(v62, "initWithOrder:result:conditions:", 18090, v60, v63);
      Property = objc_getProperty(self, v65, 48, 1);
      sub_10002E954((_BOOL8)v259, v64, Property);

      v67 = objc_alloc((Class)NEPolicy);
      v324[0] = v260;
      v217 = v59;
      v218 = v58;
      v324[1] = v58;
      v324[2] = v59;
      v219 = (void *)v57;
      v324[3] = v57;
      v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v324, 4));
      v248 = (void *)v61;
      v69 = objc_msgSend(v67, "initWithOrder:result:conditions:", 18104, v61, v68);
      v71 = objc_getProperty(self, v70, 48, 1);
      sub_10002E954((_BOOL8)v259, v69, v71);

      v283 = 0u;
      v284 = 0u;
      v281 = 0u;
      v282 = 0u;
      obj = v251;
      v252 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v281, v323, 16);
      if (v252)
      {
        v245 = *(_QWORD *)v282;
        do
        {
          for (k = 0; k != v252; k = (char *)k + 1)
          {
            if (*(_QWORD *)v282 != v245)
              objc_enumerationMutation(obj);
            v73 = *(_QWORD *)(*((_QWORD *)&v281 + 1) + 8 * (_QWORD)k);
            v74 = objc_alloc((Class)NEPolicy);
            v322[0] = v260;
            v322[1] = v73;
            v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v322, 2));
            v76 = objc_msgSend(v74, "initWithOrder:result:conditions:", 18092, v60, v75);
            v78 = objc_getProperty(self, v77, 48, 1);
            sub_10002E954((_BOOL8)v259, v76, v78);

            v79 = objc_alloc((Class)NEPolicy);
            v321[0] = v260;
            v321[1] = v73;
            v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v321, 2));
            v81 = objc_msgSend(v79, "initWithOrder:result:conditions:", 18106, v61, v80);
            v83 = objc_getProperty(self, v82, 48, 1);
            sub_10002E954((_BOOL8)v259, v81, v83);

          }
          v252 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v281, v323, 16);
        }
        while (v252);
      }

      v84 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v234));
      v85 = objc_alloc((Class)NEPolicy);
      v320 = v260;
      v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v320, 1));
      v87 = objc_msgSend(v85, "initWithOrder:result:conditions:", 18092, v84, v86);
      v89 = objc_getProperty(self, v88, 48, 1);
      sub_10002E954((_BOOL8)v259, v87, v89);

      v90 = objc_alloc((Class)NEPolicy);
      v319 = v260;
      v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v319, 1));
      v92 = objc_msgSend(v90, "initWithOrder:result:conditions:", 18106, v84, v91);
      v94 = objc_getProperty(self, v93, 48, 1);
      sub_10002E954((_BOOL8)v259, v92, v94);

      v95 = objc_alloc((Class)NEPolicy);
      v96 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 18120));
      v318 = v260;
      v97 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v318, 1));
      v98 = objc_msgSend(v95, "initWithOrder:result:conditions:", 18075, v96, v97);
      v100 = objc_getProperty(self, v99, 48, 1);
      sub_10002E954((_BOOL8)v259, v98, v100);

      v101 = objc_alloc((Class)NEPolicy);
      v102 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 18120));
      v317[0] = v260;
      v103 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition customEntitlement:](NEPolicyCondition, "customEntitlement:", CFSTR("com.apple.developer.media-device-discovery-extension")));
      v317[1] = v103;
      v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v317, 2));
      v105 = (void *)v102;
      v106 = objc_msgSend(v101, "initWithOrder:result:conditions:", 18085, v102, v104);
      v108 = objc_getProperty(self, v107, 48, 1);
      sub_10002E954((_BOOL8)v259, v106, v108);

      v109 = objc_alloc((Class)NEPolicy);
      v110 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 18120));
      v316[0] = v260;
      v111 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition customEntitlement:](NEPolicyCondition, "customEntitlement:", CFSTR("com.apple.developer.media-device-discovery-extension")));
      v316[1] = v111;
      v112 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v316, 2));
      v113 = objc_msgSend(v109, "initWithOrder:result:conditions:", 18099, v110, v112);
      v115 = objc_getProperty(self, v114, 48, 1);
      sub_10002E954((_BOOL8)v259, v113, v115);

      v236 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition isListener](NEPolicyCondition, "isListener"));
      v230 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition isInbound](NEPolicyCondition, "isInbound"));
      v229 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition hasSignedResult](NEPolicyCondition, "hasSignedResult"));
      v116 = objc_alloc((Class)NEPolicy);
      v117 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 18091));
      v315[0] = v236;
      v315[1] = v260;
      v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v315, 2));
      v119 = objc_msgSend(v116, "initWithOrder:result:conditions:", 18085, v117, v118);
      v121 = objc_getProperty(self, v120, 48, 1);
      sub_10002E954((_BOOL8)v259, v119, v121);

      v122 = objc_alloc((Class)NEPolicy);
      v123 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 18091));
      v314[0] = v230;
      v314[1] = v260;
      v124 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v314, 2));
      v125 = objc_msgSend(v122, "initWithOrder:result:conditions:", 18085, v123, v124);
      v127 = objc_getProperty(self, v126, 48, 1);
      sub_10002E954((_BOOL8)v259, v125, v127);

      v128 = objc_alloc((Class)NEPolicy);
      v129 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 18091));
      v313[0] = v229;
      v313[1] = v260;
      v130 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v313, 2));
      v131 = objc_msgSend(v128, "initWithOrder:result:conditions:", 18085, v129, v130);
      v133 = objc_getProperty(self, v132, 48, 1);
      sub_10002E954((_BOOL8)v259, v131, v133);

      v134 = objc_alloc((Class)NEPolicy);
      v135 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 18105));
      v312[0] = v236;
      v312[1] = v260;
      v136 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v312, 2));
      v137 = objc_msgSend(v134, "initWithOrder:result:conditions:", 18099, v135, v136);
      v139 = objc_getProperty(self, v138, 48, 1);
      sub_10002E954((_BOOL8)v259, v137, v139);

      v140 = objc_alloc((Class)NEPolicy);
      v141 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 18105));
      v311[0] = v230;
      v311[1] = v260;
      v142 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v311, 2));
      v143 = objc_msgSend(v140, "initWithOrder:result:conditions:", 18099, v141, v142);
      v145 = objc_getProperty(self, v144, 48, 1);
      sub_10002E954((_BOOL8)v259, v143, v145);

      v146 = objc_alloc((Class)NEPolicy);
      v147 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 18105));
      v310[0] = v229;
      v310[1] = v260;
      v148 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v310, 2));
      v149 = objc_msgSend(v146, "initWithOrder:result:conditions:", 18099, v147, v148);
      v151 = objc_getProperty(self, v150, 48, 1);
      sub_10002E954((_BOOL8)v259, v149, v151);

      v279 = 0u;
      v280 = 0u;
      v277 = 0u;
      v278 = 0u;
      v241 = v235;
      v253 = objc_msgSend(v241, "countByEnumeratingWithState:objects:count:", &v277, v309, 16);
      if (v253)
      {
        v246 = *(_QWORD *)v278;
        do
        {
          for (m = 0; m != v253; m = (char *)m + 1)
          {
            if (*(_QWORD *)v278 != v246)
              objc_enumerationMutation(v241);
            v153 = *(void **)(*((_QWORD *)&v277 + 1) + 8 * (_QWORD)m);
            if (objc_msgSend(v153, "addressFamily") == (id)30)
              v154 = 128;
            else
              v154 = 32;
            v155 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:", v153, v154));
            v156 = objc_alloc((Class)NEPolicy);
            v157 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 18091));
            v308[0] = v155;
            v308[1] = v260;
            v158 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v308, 2));
            v159 = objc_msgSend(v156, "initWithOrder:result:conditions:", 18085, v157, v158);
            v161 = objc_getProperty(self, v160, 48, 1);
            sub_10002E954((_BOOL8)v259, v159, v161);

            v162 = objc_alloc((Class)NEPolicy);
            v163 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 18105));
            v307[0] = v155;
            v307[1] = v260;
            v164 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v307, 2));
            v165 = objc_msgSend(v162, "initWithOrder:result:conditions:", 18099, v163, v164);
            v167 = objc_getProperty(self, v166, 48, 1);
            sub_10002E954((_BOOL8)v259, v165, v167);

          }
          v253 = objc_msgSend(v241, "countByEnumeratingWithState:objects:count:", &v277, v309, 16);
        }
        while (v253);
      }

      *v228 = 1;
      v45 = &AnalyticsSendEventLazy_ptr;
      v16 = v226;
      v21 = v225;
    }
    if (v16)
      v168 = 18094;
    else
      v168 = 18080;
    if (a3)
      v169 = v168;
    else
      v169 = 18120;
    v170 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45[176], "skipWithOrder:", v169));
    v273 = 0u;
    v274 = 0u;
    v275 = 0u;
    v276 = 0u;
    v237 = v21;
    v247 = v19;
    v242 = (char *)objc_msgSend(v237, "countByEnumeratingWithState:objects:count:", &v273, v306, 16);
    if (v242)
    {
      v239 = *(_QWORD *)v274;
      do
      {
        v171 = 0;
        do
        {
          if (*(_QWORD *)v274 != v239)
            objc_enumerationMutation(v237);
          obja = v171;
          v172 = *(_QWORD *)(*((_QWORD *)&v273 + 1) + 8 * (_QWORD)v171);
          v173 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v172));
          v174 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v172));
          if (objc_msgSend(v240, "count"))
          {
            v271 = 0u;
            v272 = 0u;
            v269 = 0u;
            v270 = 0u;
            v175 = v240;
            v254 = objc_msgSend(v175, "countByEnumeratingWithState:objects:count:", &v269, v305, 16);
            if (v254)
            {
              v249 = v175;
              v250 = *(_QWORD *)v270;
              do
              {
                for (n = 0; n != v254; n = (char *)n + 1)
                {
                  if (*(_QWORD *)v270 != v250)
                    objc_enumerationMutation(v175);
                  v177 = *(_QWORD *)(*((_QWORD *)&v269 + 1) + 8 * (_QWORD)n);
                  if (objc_msgSend(v19, "count"))
                  {
                    selfa = n;
                    v267 = 0u;
                    v268 = 0u;
                    v265 = 0u;
                    v266 = 0u;
                    v178 = v19;
                    v179 = objc_msgSend(v178, "countByEnumeratingWithState:objects:count:", &v265, v304, 16);
                    if (v179)
                    {
                      v180 = v179;
                      v181 = *(_QWORD *)v266;
                      do
                      {
                        for (ii = 0; ii != v180; ii = (char *)ii + 1)
                        {
                          if (*(_QWORD *)v266 != v181)
                            objc_enumerationMutation(v178);
                          v183 = *(_QWORD *)(*((_QWORD *)&v265 + 1) + 8 * (_QWORD)ii);
                          if ((a3 & 1) != 0)
                          {
                            v303[0] = v173;
                            v303[1] = v174;
                            v303[2] = v177;
                            v303[3] = v183;
                            v303[4] = v260;
                            v184 = v303;
                            v185 = 5;
                          }
                          else
                          {
                            v302[0] = v173;
                            v302[1] = v177;
                            v302[2] = v183;
                            v302[3] = v260;
                            v184 = v302;
                            v185 = 4;
                          }
                          v186 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v184, v185));
                          v187 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 18070, v170, v186);
                          sub_10002E954((_BOOL8)v259, v187, v258);

                        }
                        v180 = objc_msgSend(v178, "countByEnumeratingWithState:objects:count:", &v265, v304, 16);
                      }
                      while (v180);
                      v19 = v247;
                      v175 = v249;
                    }
                    n = selfa;
                  }
                  else
                  {
                    if ((a3 & 1) != 0)
                    {
                      v301[0] = v173;
                      v301[1] = v174;
                      v301[2] = v177;
                      v301[3] = v260;
                      v188 = v301;
                      v189 = 4;
                    }
                    else
                    {
                      v300[0] = v173;
                      v300[1] = v177;
                      v300[2] = v260;
                      v188 = v300;
                      v189 = 3;
                    }
                    v178 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v188, v189));
                    v190 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 18070, v170, v178);
                    sub_10002E954((_BOOL8)v259, v190, v258);

                  }
                }
                v254 = objc_msgSend(v175, "countByEnumeratingWithState:objects:count:", &v269, v305, 16);
              }
              while (v254);
            }
          }
          else if (objc_msgSend(v19, "count"))
          {
            v263 = 0u;
            v264 = 0u;
            v261 = 0u;
            v262 = 0u;
            v175 = v19;
            v191 = objc_msgSend(v175, "countByEnumeratingWithState:objects:count:", &v261, v299, 16);
            if (v191)
            {
              v192 = v191;
              v193 = *(_QWORD *)v262;
              do
              {
                v194 = v175;
                for (jj = 0; jj != v192; jj = (char *)jj + 1)
                {
                  if (*(_QWORD *)v262 != v193)
                    objc_enumerationMutation(v194);
                  v196 = *(_QWORD *)(*((_QWORD *)&v261 + 1) + 8 * (_QWORD)jj);
                  if ((a3 & 1) != 0)
                  {
                    v298[0] = v173;
                    v298[1] = v174;
                    v298[2] = v196;
                    v298[3] = v260;
                    v197 = v298;
                    v198 = 4;
                  }
                  else
                  {
                    v297[0] = v173;
                    v297[1] = v196;
                    v297[2] = v260;
                    v197 = v297;
                    v198 = 3;
                  }
                  v199 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v197, v198));
                  v200 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 18070, v170, v199);
                  sub_10002E954((_BOOL8)v259, v200, v258);

                }
                v175 = v194;
                v192 = objc_msgSend(v194, "countByEnumeratingWithState:objects:count:", &v261, v299, 16);
              }
              while (v192);
            }
          }
          else
          {
            if ((a3 & 1) != 0)
            {
              v296[0] = v173;
              v296[1] = v174;
              v296[2] = v260;
              v201 = v296;
              v202 = 3;
            }
            else
            {
              v295[0] = v173;
              v295[1] = v260;
              v201 = v295;
              v202 = 2;
            }
            v175 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v201, v202));
            v203 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 18070, v170, v175);
            sub_10002E954((_BOOL8)v259, v203, v258);

          }
          v171 = obja + 1;
        }
        while (obja + 1 != v242);
        v242 = (char *)objc_msgSend(v237, "countByEnumeratingWithState:objects:count:", &v273, v306, 16);
      }
      while (v242);
    }

    v204 = a3;
    if (!v232)
      v204 = 0;
    if ((v204 & v231) == 1)
    {
      v205 = objc_alloc((Class)NEPolicy);
      v206 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 18120));
      v294[0] = v260;
      v207 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition delegateIsPlatformBinary](NEPolicyCondition, "delegateIsPlatformBinary"));
      v294[1] = v207;
      v208 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v294, 2));
      v209 = objc_msgSend(v205, "initWithOrder:result:conditions:", 18072, v206, v208);
      sub_10002E954((_BOOL8)v259, v209, v258);

      v210 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddressEmpty](NEPolicyCondition, "flowRemoteAddressEmpty"));
      objc_msgSend(v210, "setNegative:", 1);
      v211 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", 0));
      objc_msgSend(v211, "setNegative:", 1);
      v212 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition uid:](NEPolicyCondition, "uid:", v232));
      v213 = objc_alloc((Class)NEPolicy);
      v214 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 18080));
      v293[0] = v260;
      v293[1] = v210;
      v293[2] = v211;
      v293[3] = v212;
      v215 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v293, 4));
      v216 = objc_msgSend(v213, "initWithOrder:result:conditions:", 18074, v214, v215);
      sub_10002E954((_BOOL8)v259, v216, v258);

    }
    v15 = v233;
  }

}

uint64_t sub_10003E37C(uint64_t a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  id v8;
  id v9;
  const char *v10;
  id v11;
  int v12;
  const char *v13;
  id v14;
  id v15;
  void *v16;
  const char *v17;
  id v18;
  id v19;
  void *v20;
  const char *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  void *i;
  void *v30;
  void *v31;
  unsigned __int8 v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  unsigned int v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  const char *v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  unsigned int v51;
  const char *v52;
  id v53;
  id v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  id v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  unsigned __int8 v64;
  id v65;
  id v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  void *v72;
  const char *v73;
  id v74;
  id v75;
  void *v76;
  NSObject *v77;
  id v78;
  uint64_t v79;
  id v80;
  const char *v81;
  unsigned int v82;
  id v83;
  ptrdiff_t v84;
  void *v85;
  void *v86;
  void *v87;
  const char *v88;
  id v89;
  id v90;
  void *v91;
  NSObject *v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  id v97;
  void *v98;
  const char *v99;
  id v100;
  id v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BOOL4 v106;
  void *v107;
  NSObject *v108;
  const char *v109;
  const char *v110;
  id v111;
  id v112;
  void *v113;
  uint64_t v114;
  NSObject *v115;
  const char *v116;
  id v117;
  id v118;
  void *v119;
  const char *v120;
  id v121;
  id v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  id v136;
  id v137;
  id v138;
  uint64_t v139;
  void *j;
  void *v141;
  void *v142;
  int v143;
  void *v144;
  id v145;
  id v146;
  uint64_t v147;
  void *k;
  void *v149;
  void *v150;
  int v151;
  void *v152;
  id v153;
  id v154;
  uint64_t v155;
  void *m;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *n;
  uint64_t v162;
  id v163;
  id v164;
  id v165;
  uint64_t v166;
  void *ii;
  uint64_t v168;
  void *v169;
  const char *v170;
  id v171;
  id v172;
  id v173;
  const char *v174;
  id v175;
  id v176;
  id v177;
  const char *v178;
  id v179;
  id v180;
  id v181;
  const char *v182;
  id v183;
  id v184;
  id v185;
  id v186;
  id v187;
  uint64_t v188;
  void *jj;
  uint64_t v190;
  void *v191;
  const char *v192;
  id v193;
  id v194;
  id v195;
  const char *v196;
  id v197;
  id v198;
  id v199;
  const char *v200;
  id v201;
  id v202;
  id v203;
  const char *v204;
  id v205;
  id v206;
  id v207;
  id v208;
  void *v209;
  void *v210;
  void *v211;
  id v212;
  id v213;
  id v214;
  const char *v215;
  id v216;
  uint64_t v217;
  void *v218;
  void *v219;
  id v220;
  id v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  NSObject *v226;
  const char *v227;
  id v228;
  id v229;
  const char *v230;
  id v231;
  id v232;
  void *v233;
  const char *v234;
  id v235;
  id v236;
  void *v237;
  const char *v238;
  id v239;
  id v240;
  id v241;
  id v242;
  const char *v243;
  id v244;
  uint64_t v245;
  void *v246;
  void *v247;
  id v248;
  id v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  NSObject *v254;
  const char *v255;
  id v256;
  id v257;
  const char *v258;
  id v259;
  id v260;
  void *v261;
  const char *v262;
  id v263;
  id v264;
  void *v265;
  const char *v266;
  id v267;
  id v268;
  const char *v269;
  id v270;
  id v271;
  const char *v272;
  id v273;
  uint64_t v274;
  void *v275;
  void *v276;
  id v277;
  id v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  NSObject *v283;
  const char *v284;
  id v285;
  id v286;
  const char *v287;
  id v288;
  id v289;
  void *v290;
  const char *v291;
  id v292;
  id v293;
  void *v294;
  const char *v295;
  id v296;
  id v297;
  id v298;
  id v299;
  const char *v300;
  id v301;
  id v302;
  id v303;
  id v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  NSObject *v308;
  int v309;
  uint64_t v310;
  void *v311;
  void *v312;
  id v313;
  void *v314;
  const char *v315;
  id v316;
  id v317;
  id v318;
  int v319;
  void *v320;
  id v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  void *v325;
  uint64_t v326;
  NSObject *v327;
  id v328;
  id v329;
  id v330;
  id v331;
  uint64_t v332;
  void *kk;
  void *v334;
  id v335;
  uint64_t v336;
  void *v337;
  const char *v338;
  id v339;
  id v340;
  id v341;
  id v342;
  id v343;
  uint64_t v344;
  _UNKNOWN **v345;
  id v346;
  void *v347;
  id v348;
  uint64_t v349;
  uint64_t v350;
  NSObject *v351;
  const char *v352;
  id v353;
  id v354;
  uint64_t v355;
  NSObject *v356;
  id v357;
  id v358;
  uint64_t v359;
  void *v360;
  void *v361;
  id v362;
  void *v363;
  const char *v364;
  id v365;
  id v366;
  id v367;
  id v368;
  _UNKNOWN **v369;
  id v370;
  void *v371;
  void *v372;
  const char *v373;
  id v374;
  id v375;
  id v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  NSObject *v381;
  const char *v382;
  id v383;
  id v384;
  uint64_t v385;
  id Property;
  const char *v388;
  id v389;
  id v390;
  id v391;
  id v392;
  id v393;
  id v394;
  int v395;
  unsigned int v396;
  void *v397;
  uint64_t v398;
  id v399;
  id obj;
  id v401;
  id v402;
  id v403;
  uint64_t v404;
  id v405;
  uint64_t v406;
  void *v407;
  uint64_t v408;
  void *v409;
  id v410;
  id v411;
  id v412;
  id v413;
  id v414;
  id v415;
  id v416;
  unsigned int v417;
  unsigned int v418;
  void *v419;
  uint64_t v420;
  uint64_t v421;
  unsigned int v422;
  id v423;
  void *v424;
  unsigned int v425;
  uint64_t v426;
  id v427;
  void *v428;
  void *v429;
  uint64_t v430;
  _DWORD *self;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  char v496;
  _QWORD v497[2];
  void *v498;
  _BYTE v499[128];
  _BYTE v500[128];
  void *v501;
  _BYTE v502[128];
  _BYTE v503[128];
  void *v504;
  _BYTE v505[128];
  _BYTE v506[128];
  _BYTE v507[128];
  _QWORD v508[2];
  _QWORD v509[3];
  _BYTE v510[128];
  _QWORD v511[3];
  _QWORD v512[4];
  _BYTE v513[128];
  _BYTE v514[128];
  _BYTE v515[128];
  _BYTE v516[128];
  _BYTE v517[128];
  _BYTE v518[128];
  void *v519;
  _BYTE v520[128];
  uint8_t v521[128];
  uint8_t buf[4];
  id v523;
  __int16 v524;
  id v525;

  v3 = a2;
  v4 = ne_log_large_obj(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v6, 48, 1);
    v389 = Property;
    if (v3)
      v390 = objc_getProperty(v3, v388, 32, 1);
    else
      v390 = 0;
    v391 = v390;
    *(_DWORD *)buf = 138412546;
    v523 = v389;
    v524 = 2112;
    v525 = v391;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed: %@ and %@", buf, 0x16u);

  }
  v8 = *(id *)(a1 + 32);
  if (v8)
    v8 = objc_getProperty(v8, v7, 48, 1);
  v9 = v8;
  sub_10002D1B0(v3, v9);

  if (v3)
  {
    v11 = objc_getProperty(v3, v10, 32, 1);
    sub_10002D1B0(v3, v11);
  }
  else
  {
    v11 = 0;
  }

  v12 = sub_10002EDB4(*(_QWORD *)(a1 + 32));
  v429 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", (v12 + 130)));
  v428 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
  v14 = *(id *)(a1 + 32);
  if (v14)
    v14 = objc_getProperty(v14, v13, 192, 1);
  v15 = v14;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "allKeys"));
  v394 = objc_msgSend(v16, "mutableCopy");

  v18 = *(id *)(a1 + 32);
  if (v18)
    v18 = objc_getProperty(v18, v17, 200, 1);
  v19 = v18;
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "allKeys"));
  v393 = objc_msgSend(v20, "mutableCopy");

  v22 = *(id *)(a1 + 32);
  if (v22)
    v22 = objc_getProperty(v22, v21, 208, 1);
  v23 = v22;
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "allKeys"));
  v392 = objc_msgSend(v24, "mutableCopy");

  v496 = 0;
  v492 = 0u;
  v493 = 0u;
  v494 = 0u;
  v495 = 0u;
  v25 = *(id *)(a1 + 40);
  v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v492, v521, 16);
  v430 = a1;
  if (v26)
  {
    v27 = v26;
    v28 = *(_QWORD *)v493;
    do
    {
      for (i = 0; i != v27; i = (char *)i + 1)
      {
        if (*(_QWORD *)v493 != v28)
          objc_enumerationMutation(v25);
        v30 = *(void **)(*((_QWORD *)&v492 + 1) + 8 * (_QWORD)i);
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "matchSigningIdentifier"));
        if (objc_msgSend(v31, "isEqualToString:", CFSTR("PathRuleDefaultNonSystemIdentifier")))
        {
          v32 = objc_msgSend(v30, "denyMulticast");

          if ((v32 & 1) != 0)
          {
            v395 = 1;
            goto LABEL_24;
          }
        }
        else
        {

        }
      }
      v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v492, v521, 16);
    }
    while (v27);
    v395 = 0;
LABEL_24:
    a1 = v430;
  }
  else
  {
    v395 = 0;
  }

  v491 = 0u;
  v490 = 0u;
  v489 = 0u;
  v488 = 0u;
  obj = *(id *)(a1 + 40);
  v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v488, v520, 16);
  self = v3;
  if (v33)
  {
    v34 = v33;
    v425 = v12 + 100;
    v422 = v12 + 110;
    v396 = v12 + 120;
    v35 = *(_QWORD *)v489;
    v398 = *(_QWORD *)v489;
    do
    {
      v36 = 0;
      v399 = v34;
      do
      {
        if (*(_QWORD *)v489 != v35)
          objc_enumerationMutation(obj);
        v37 = *(void **)(*((_QWORD *)&v488 + 1) + 8 * (_QWORD)v36);
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchSigningIdentifier"));
        v39 = objc_msgSend(v38, "isEqualToString:", CFSTR("PathRuleDefaultIdentifier"));

        if (v39)
        {
          v40 = *(void **)(a1 + 48);
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchSigningIdentifier"));
          v42 = objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "objectForKeyedSubscript:", v41));

          v403 = (id)v42;
          if (isa_nsarray(v42))
          {
            v43 = v36;
            v44 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v42));
            v519 = v428;
            v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v519, 1));
            v47 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v396, v44, v45);
            v48 = *(id *)(a1 + 32);
            if (v48)
              v48 = objc_getProperty(v48, v46, 48, 1);
            v49 = v48;
            sub_10002E954((_BOOL8)v3, v47, v49);

            v35 = v398;
            v34 = v399;
            v36 = v43;
          }
          goto LABEL_183;
        }
        v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchSigningIdentifier"));
        v51 = objc_msgSend(v50, "isEqualToString:", CFSTR("PathRuleDefaultNonSystemIdentifier"));

        if (!v51)
        {
          v397 = v36;
          v403 = objc_alloc_init((Class)NSMutableArray);
          v58 = objc_alloc_init((Class)NSMutableArray);
          v59 = objc_alloc_init((Class)NSMutableArray);
          v401 = sub_10003A6C4(*(_QWORD *)(a1 + 32), v37, (uint64_t)objc_msgSend(v37, "isIdentifierExternal"), *(unsigned int *)(a1 + 96));
          v409 = v59;
          if (!objc_msgSend(v37, "denyMulticast")
            || (v61 = objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "temporaryAllowMulticastNetworkName"))) != 0
            && (v62 = (void *)v61,
                v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "temporaryAllowMulticastNetworkName")),
                v64 = objc_msgSend(v63, "isEqualToString:", *(_QWORD *)(a1 + 72)),
                v63,
                v62,
                (v64 & 1) != 0))
          {
            if (v395)
            {
              v65 = *(id *)(a1 + 32);
              if (v65)
                v65 = objc_getProperty(v65, v60, 208, 1);
              v66 = v65;
              v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchSigningIdentifier"));
              v68 = v37;
              v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "objectForKeyedSubscript:", v67));

              v70 = v68;
              v71 = sub_10003A6C4(*(_QWORD *)(a1 + 32), v68, (uint64_t)objc_msgSend(v68, "isIdentifierExternal"), *(unsigned int *)(a1 + 96));
              if (v69)
              {
                v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "matchSigningIdentifier"));
                objc_msgSend(v392, "removeObject:", v72);

                v74 = *(id *)(a1 + 32);
                if (v74)
                  v74 = objc_getProperty(v74, v73, 216, 1);
                v75 = v74;
                v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "matchSigningIdentifier"));
                v77 = objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "objectForKeyedSubscript:", v76));

                v78 = -[NSObject isEqualToArray:](v77, "isEqualToArray:", v71);
                if ((v78 & 1) != 0)
                {
                  v80 = v69;
                  goto LABEL_78;
                }
                v114 = ne_log_obj(v78, v79);
                v115 = objc_claimAutoreleasedReturnValue(v114);
                if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
                {
                  v211 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "matchSigningIdentifier"));
                  *(_DWORD *)buf = 138412546;
                  v523 = v211;
                  v524 = 2112;
                  v525 = v69;
                  _os_log_debug_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEBUG, "Allow Policy IDs to be removed for %@: %@", buf, 0x16u);

                }
                sub_10002D1B0(v3, v69);

              }
              v80 = objc_alloc_init((Class)NSMutableArray);

              v117 = *(id *)(a1 + 32);
              if (v117)
                v117 = objc_getProperty(v117, v116, 208, 1);
              v37 = v70;
              v118 = v117;
              v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "matchSigningIdentifier"));
              objc_msgSend(v118, "setObject:forKeyedSubscript:", v80, v119);

              v121 = *(id *)(a1 + 32);
              if (v121)
                v121 = objc_getProperty(v121, v120, 216, 1);
              v122 = v121;
              v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "matchSigningIdentifier"));
              objc_msgSend(v122, "setObject:forKeyedSubscript:", v71, v123);

              sub_10003CAF0(*(_QWORD *)(a1 + 32), v70, 0, v3, *(unsigned int *)(a1 + 96), v80, &v496, *(void **)(a1 + 56), *(void **)(a1 + 64));
              v126 = ne_log_obj(v124, v125);
              v77 = objc_claimAutoreleasedReturnValue(v126);
              if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
              {
                v209 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "matchSigningIdentifier"));
                *(_DWORD *)buf = 138412546;
                v523 = v209;
                v524 = 2112;
                v525 = v80;
                _os_log_debug_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "Allow Policy IDs added for %@: %@", buf, 0x16u);

              }
LABEL_88:

              v59 = v409;
            }
            v127 = objc_msgSend(v37, "denyAll");
            if ((_DWORD)v127)
            {
              v129 = ne_log_obj(v127, v128);
              v130 = objc_claimAutoreleasedReturnValue(v129);
              if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
              {
                v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchSigningIdentifier"));
                *(_DWORD *)buf = 138412290;
                v523 = v131;
                _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_DEFAULT, "Adding drop policy for %@", buf, 0xCu);

              }
              v132 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult drop](NEPolicyResult, "drop"));
              if (!v132)
                goto LABEL_182;
LABEL_99:
              v407 = v58;
              if (isa_nsarray(v401))
              {
                v487 = 0u;
                v486 = 0u;
                v485 = 0u;
                v484 = 0u;
                v136 = v401;
                v137 = objc_msgSend(v136, "countByEnumeratingWithState:objects:count:", &v484, v518, 16);
                if (v137)
                {
                  v138 = v137;
                  v139 = *(_QWORD *)v485;
                  do
                  {
                    for (j = 0; j != v138; j = (char *)j + 1)
                    {
                      if (*(_QWORD *)v485 != v139)
                        objc_enumerationMutation(v136);
                      v141 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", *(_QWORD *)(*((_QWORD *)&v484 + 1) + 8 * (_QWORD)j)));
                      objc_msgSend(v403, "addObject:", v141);

                    }
                    v138 = objc_msgSend(v136, "countByEnumeratingWithState:objects:count:", &v484, v518, 16);
                  }
                  while (v138);
                }

                v58 = v407;
                v59 = v409;
              }
              if (objc_msgSend(v403, "count"))
              {
                v142 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchDomains"));
                v143 = isa_nsarray(v142);

                if (v143)
                {
                  v483 = 0u;
                  v482 = 0u;
                  v481 = 0u;
                  v480 = 0u;
                  v144 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchDomains"));
                  v145 = objc_msgSend(v144, "countByEnumeratingWithState:objects:count:", &v480, v517, 16);
                  if (v145)
                  {
                    v146 = v145;
                    v147 = *(_QWORD *)v481;
                    do
                    {
                      for (k = 0; k != v146; k = (char *)k + 1)
                      {
                        if (*(_QWORD *)v481 != v147)
                          objc_enumerationMutation(v144);
                        v149 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", *(_QWORD *)(*((_QWORD *)&v480 + 1) + 8 * (_QWORD)k)));
                        objc_msgSend(v407, "addObject:", v149);

                      }
                      v146 = objc_msgSend(v144, "countByEnumeratingWithState:objects:count:", &v480, v517, 16);
                    }
                    while (v146);
                  }

                  v58 = v407;
                  v59 = v409;
                }
                v150 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchAccountIdentifiers"));
                v151 = isa_nsarray(v150);

                if (v151)
                {
                  v479 = 0u;
                  v477 = 0u;
                  v478 = 0u;
                  v476 = 0u;
                  v152 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchAccountIdentifiers"));
                  v153 = objc_msgSend(v152, "countByEnumeratingWithState:objects:count:", &v476, v516, 16);
                  if (v153)
                  {
                    v154 = v153;
                    v155 = *(_QWORD *)v477;
                    do
                    {
                      for (m = 0; m != v154; m = (char *)m + 1)
                      {
                        if (*(_QWORD *)v477 != v155)
                          objc_enumerationMutation(v152);
                        v157 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition accountIdentifier:](NEPolicyCondition, "accountIdentifier:", *(_QWORD *)(*((_QWORD *)&v476 + 1) + 8 * (_QWORD)m)));
                        objc_msgSend(v409, "addObject:", v157);

                      }
                      v154 = objc_msgSend(v152, "countByEnumeratingWithState:objects:count:", &v476, v516, 16);
                    }
                    while (v154);
                  }

                  v58 = v407;
                  v59 = v409;
                }
                v474 = 0u;
                v475 = 0u;
                v472 = 0u;
                v473 = 0u;
                v402 = v403;
                v405 = objc_msgSend(v402, "countByEnumeratingWithState:objects:count:", &v472, v515, 16);
                if (v405)
                {
                  v404 = *(_QWORD *)v473;
                  do
                  {
                    v158 = 0;
                    do
                    {
                      if (*(_QWORD *)v473 != v404)
                      {
                        v159 = v158;
                        objc_enumerationMutation(v402);
                        v158 = v159;
                      }
                      v406 = v158;
                      v160 = *(_QWORD *)(*((_QWORD *)&v472 + 1) + 8 * v158);
                      if (objc_msgSend(v407, "count"))
                      {
                        v470 = 0u;
                        v471 = 0u;
                        v468 = 0u;
                        v469 = 0u;
                        v411 = v407;
                        v416 = objc_msgSend(v411, "countByEnumeratingWithState:objects:count:", &v468, v514, 16);
                        if (v416)
                        {
                          v413 = *(id *)v469;
                          do
                          {
                            for (n = 0; n != v416; n = (char *)n + 1)
                            {
                              if (*(id *)v469 != v413)
                                objc_enumerationMutation(v411);
                              v162 = *(_QWORD *)(*((_QWORD *)&v468 + 1) + 8 * (_QWORD)n);
                              if (objc_msgSend(v59, "count"))
                              {
                                v419 = n;
                                v466 = 0u;
                                v467 = 0u;
                                v464 = 0u;
                                v465 = 0u;
                                v163 = v59;
                                v164 = objc_msgSend(v163, "countByEnumeratingWithState:objects:count:", &v464, v513, 16);
                                if (v164)
                                {
                                  v165 = v164;
                                  v166 = *(_QWORD *)v465;
                                  do
                                  {
                                    for (ii = 0; ii != v165; ii = (char *)ii + 1)
                                    {
                                      if (*(_QWORD *)v465 != v166)
                                        objc_enumerationMutation(v163);
                                      v168 = *(_QWORD *)(*((_QWORD *)&v464 + 1) + 8 * (_QWORD)ii);
                                      v512[0] = v160;
                                      v512[1] = v162;
                                      v512[2] = v168;
                                      v512[3] = v428;
                                      v169 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v512, 4));
                                      v171 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v425, v132, v169);
                                      v172 = *(id *)(v430 + 32);
                                      if (v172)
                                        v172 = objc_getProperty(v172, v170, 48, 1);
                                      v173 = v172;
                                      sub_10002E954((_BOOL8)self, v171, v173);

                                      v175 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v422, v429, v169);
                                      v176 = *(id *)(v430 + 32);
                                      if (v176)
                                        v176 = objc_getProperty(v176, v174, 48, 1);
                                      v177 = v176;
                                      sub_10002E954((_BOOL8)self, v175, v177);

                                    }
                                    v165 = objc_msgSend(v163, "countByEnumeratingWithState:objects:count:", &v464, v513, 16);
                                  }
                                  while (v165);
                                  a1 = v430;
                                  v3 = self;
                                  v59 = v409;
                                }
                                n = v419;
                              }
                              else
                              {
                                v511[0] = v160;
                                v511[1] = v162;
                                v511[2] = v428;
                                v163 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v511, 3));
                                v179 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v425, v132, v163);
                                v180 = *(id *)(a1 + 32);
                                if (v180)
                                  v180 = objc_getProperty(v180, v178, 48, 1);
                                v181 = v180;
                                sub_10002E954((_BOOL8)v3, v179, v181);

                                v183 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v422, v429, v163);
                                v184 = *(id *)(a1 + 32);
                                if (v184)
                                  v184 = objc_getProperty(v184, v182, 48, 1);
                                v185 = v184;
                                sub_10002E954((_BOOL8)v3, v183, v185);

                              }
                            }
                            v416 = objc_msgSend(v411, "countByEnumeratingWithState:objects:count:", &v468, v514, 16);
                          }
                          while (v416);
                        }
LABEL_159:
                        v58 = v407;
                        goto LABEL_160;
                      }
                      if (objc_msgSend(v59, "count"))
                      {
                        v462 = 0u;
                        v463 = 0u;
                        v460 = 0u;
                        v461 = 0u;
                        v411 = v59;
                        v186 = objc_msgSend(v411, "countByEnumeratingWithState:objects:count:", &v460, v510, 16);
                        if (!v186)
                          goto LABEL_159;
                        v187 = v186;
                        v188 = *(_QWORD *)v461;
                        do
                        {
                          for (jj = 0; jj != v187; jj = (char *)jj + 1)
                          {
                            if (*(_QWORD *)v461 != v188)
                              objc_enumerationMutation(v411);
                            v190 = *(_QWORD *)(*((_QWORD *)&v460 + 1) + 8 * (_QWORD)jj);
                            v509[0] = v160;
                            v509[1] = v190;
                            v509[2] = v428;
                            v191 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v509, 3));
                            v193 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v425, v132, v191);
                            v194 = *(id *)(a1 + 32);
                            if (v194)
                              v194 = objc_getProperty(v194, v192, 48, 1);
                            v195 = v194;
                            sub_10002E954((_BOOL8)v3, v193, v195);

                            v197 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v422, v429, v191);
                            v198 = *(id *)(a1 + 32);
                            if (v198)
                              v198 = objc_getProperty(v198, v196, 48, 1);
                            v199 = v198;
                            sub_10002E954((_BOOL8)v3, v197, v199);

                          }
                          v187 = objc_msgSend(v411, "countByEnumeratingWithState:objects:count:", &v460, v510, 16);
                        }
                        while (v187);
                        v58 = v407;
                        v59 = v409;
                      }
                      else
                      {
                        v508[0] = v160;
                        v508[1] = v428;
                        v411 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v508, 2));
                        v201 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v425, v132, v411);
                        v202 = *(id *)(a1 + 32);
                        if (v202)
                          v202 = objc_getProperty(v202, v200, 48, 1);
                        v58 = v407;
                        v203 = v202;
                        sub_10002E954((_BOOL8)v3, v201, v203);

                        v205 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v422, v429, v411);
                        v206 = *(id *)(a1 + 32);
                        if (v206)
                          v206 = objc_getProperty(v206, v204, 48, 1);
                        v207 = v206;
                        sub_10002E954((_BOOL8)v3, v205, v207);

                      }
LABEL_160:

                      v158 = v406 + 1;
                    }
                    while ((id)(v406 + 1) != v405);
                    v208 = objc_msgSend(v402, "countByEnumeratingWithState:objects:count:", &v472, v515, 16);
                    v405 = v208;
                  }
                  while (v208);
                }

              }
            }
            else
            {
              v133 = *(void **)(a1 + 48);
              v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchSigningIdentifier"));
              v135 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "objectForKeyedSubscript:", v134));

              if (isa_nsarray(v135) && objc_msgSend(v135, "count"))
                v132 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v135));
              else
                v132 = 0;

              if (v132)
                goto LABEL_99;
            }
LABEL_182:

            v35 = v398;
            v34 = v399;
            v36 = v397;
            goto LABEL_183;
          }
          v82 = objc_msgSend(v37, "multicastPreferenceSet");
          v83 = *(id *)(a1 + 32);
          if (v83)
          {
            if (v82)
              v84 = 200;
            else
              v84 = 192;
            v83 = objc_getProperty(v83, v81, v84, 1);
          }
          v80 = v83;

          v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchSigningIdentifier"));
          v71 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "objectForKeyedSubscript:", v85));

          v77 = sub_10003A6C4(*(_QWORD *)(a1 + 32), v37, (uint64_t)objc_msgSend(v37, "isIdentifierExternal"), *(unsigned int *)(a1 + 96));
          v418 = v82;
          if (v71)
          {
            v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchSigningIdentifier"));
            if (v82)
              v87 = v393;
            else
              v87 = v394;
            objc_msgSend(v87, "removeObject:", v86);

            v89 = *(id *)(a1 + 32);
            if (v89)
              v89 = objc_getProperty(v89, v88, 216, 1);
            v90 = v89;
            v70 = v37;
            v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchSigningIdentifier"));
            v92 = objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "objectForKeyedSubscript:", v91));

            v93 = -[NSObject isEqualToArray:](v92, "isEqualToArray:", v77);
            if ((v93 & 1) == 0)
            {
              v95 = ne_log_obj(v93, v94);
              v96 = objc_claimAutoreleasedReturnValue(v95);
              if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
              {
                v210 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "matchSigningIdentifier"));
                *(_DWORD *)buf = 138412546;
                v523 = v210;
                v524 = 2112;
                v525 = v71;
                _os_log_debug_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEBUG, "Deny Policy IDs to be removed for %@: %@", buf, 0x16u);

              }
              sub_10002D1B0(v3, v71);

              v37 = v70;
              goto LABEL_68;
            }
          }
          else
          {
LABEL_68:
            v97 = objc_alloc_init((Class)NSMutableArray);

            v71 = v97;
            v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchSigningIdentifier"));
            objc_msgSend(v80, "setObject:forKeyedSubscript:", v97, v98);

            v100 = *(id *)(a1 + 32);
            if (v100)
              v100 = objc_getProperty(v100, v99, 216, 1);
            v101 = v100;
            v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchSigningIdentifier"));
            objc_msgSend(v101, "setObject:forKeyedSubscript:", v77, v102);

            v70 = v37;
            sub_10003CAF0(*(_QWORD *)(a1 + 32), v37, 1, v3, *(unsigned int *)(a1 + 96), v71, &v496, *(void **)(a1 + 56), *(void **)(a1 + 64));
            v105 = ne_log_obj(v103, v104);
            v92 = objc_claimAutoreleasedReturnValue(v105);
            v106 = os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG);
            if (v418)
            {
              if (!v106)
                goto LABEL_77;
              v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "matchSigningIdentifier"));
              *(_DWORD *)buf = 138412546;
              v523 = v107;
              v524 = 2112;
              v525 = v71;
              v108 = v92;
              v109 = "Silent deny Policy IDs added for %@: %@";
            }
            else
            {
              if (!v106)
                goto LABEL_77;
              v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "matchSigningIdentifier"));
              *(_DWORD *)buf = 138412546;
              v523 = v107;
              v524 = 2112;
              v525 = v71;
              v108 = v92;
              v109 = "Deny Policy IDs added for %@: %@";
            }
            _os_log_debug_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, v109, buf, 0x16u);

          }
LABEL_77:

LABEL_78:
          v37 = v70;
          goto LABEL_88;
        }
        if (!objc_msgSend(v37, "denyMulticast"))
          goto LABEL_184;
        v53 = *(id *)(a1 + 32);
        if (v53)
          v53 = objc_getProperty(v53, v52, 192, 1);
        v54 = v53;
        v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchSigningIdentifier"));
        v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "objectForKeyedSubscript:", v55));

        if (v56)
        {
          v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchSigningIdentifier"));
          objc_msgSend(v394, "removeObject:", v57);

          goto LABEL_184;
        }
        v403 = objc_alloc_init((Class)NSMutableArray);
        v111 = *(id *)(a1 + 32);
        if (v111)
          v111 = objc_getProperty(v111, v110, 192, 1);
        v112 = v111;
        v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "matchSigningIdentifier"));
        objc_msgSend(v112, "setObject:forKeyedSubscript:", v403, v113);

        sub_10003CAF0(*(_QWORD *)(a1 + 32), v37, 1, v3, *(unsigned int *)(a1 + 96), v403, &v496, *(void **)(a1 + 56), *(void **)(a1 + 64));
LABEL_183:

LABEL_184:
        v36 = (char *)v36 + 1;
      }
      while (v36 != v34);
      v212 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v488, v520, 16);
      v34 = v212;
    }
    while (v212);
  }

  if (!objc_msgSend(v394, "count"))
    goto LABEL_216;
  v458 = 0u;
  v459 = 0u;
  v456 = 0u;
  v457 = 0u;
  v213 = v394;
  v214 = objc_msgSend(v213, "countByEnumeratingWithState:objects:count:", &v456, v507, 16);
  if (!v214)
    goto LABEL_215;
  v216 = v214;
  v217 = *(_QWORD *)v457;
  do
  {
    v218 = 0;
    do
    {
      if (*(_QWORD *)v457 != v217)
        objc_enumerationMutation(v213);
      v219 = *(void **)(*((_QWORD *)&v456 + 1) + 8 * (_QWORD)v218);
      v220 = *(id *)(v430 + 32);
      if (v220)
        v220 = objc_getProperty(v220, v215, 192, 1);
      v221 = v220;
      v222 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v221, "objectForKeyedSubscript:", v219));

      v225 = ne_log_obj(v223, v224);
      v226 = objc_claimAutoreleasedReturnValue(v225);
      if (os_log_type_enabled(v226, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        v523 = v219;
        v524 = 2112;
        v525 = v222;
        _os_log_debug_impl((void *)&_mh_execute_header, v226, OS_LOG_TYPE_DEBUG, "Deny Policy IDs to be removed for %@: %@", buf, 0x16u);
      }

      sub_10002D1B0(self, v222);
      v228 = *(id *)(v430 + 32);
      if (v228)
        v228 = objc_getProperty(v228, v227, 192, 1);
      v229 = v228;
      objc_msgSend(v229, "setObject:forKeyedSubscript:", 0, v219);

      v231 = *(id *)(v430 + 32);
      if (v231)
        v231 = objc_getProperty(v231, v230, 208, 1);
      v232 = v231;
      v233 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v232, "objectForKeyedSubscript:", v219));
      if (v233)
      {

LABEL_205:
        goto LABEL_209;
      }
      v235 = *(id *)(v430 + 32);
      if (v235)
        v235 = objc_getProperty(v235, v234, 200, 1);
      v236 = v235;
      v237 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v236, "objectForKeyedSubscript:", v219));

      if (!v237)
      {
        v239 = *(id *)(v430 + 32);
        if (v239)
          v239 = objc_getProperty(v239, v238, 216, 1);
        v232 = v239;
        objc_msgSend(v232, "setObject:forKeyedSubscript:", 0, v219);
        goto LABEL_205;
      }
LABEL_209:

      v218 = (char *)v218 + 1;
      v3 = self;
    }
    while (v216 != v218);
    v240 = objc_msgSend(v213, "countByEnumeratingWithState:objects:count:", &v456, v507, 16);
    v216 = v240;
  }
  while (v240);
LABEL_215:

  a1 = v430;
LABEL_216:
  if (!objc_msgSend(v393, "count"))
    goto LABEL_243;
  v454 = 0u;
  v455 = 0u;
  v452 = 0u;
  v453 = 0u;
  v241 = v393;
  v242 = objc_msgSend(v241, "countByEnumeratingWithState:objects:count:", &v452, v506, 16);
  if (!v242)
    goto LABEL_242;
  v244 = v242;
  v245 = *(_QWORD *)v453;
  while (2)
  {
    v246 = 0;
    while (2)
    {
      if (*(_QWORD *)v453 != v245)
        objc_enumerationMutation(v241);
      v247 = *(void **)(*((_QWORD *)&v452 + 1) + 8 * (_QWORD)v246);
      v248 = *(id *)(v430 + 32);
      if (v248)
        v248 = objc_getProperty(v248, v243, 200, 1);
      v249 = v248;
      v250 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v249, "objectForKeyedSubscript:", v247));

      v253 = ne_log_obj(v251, v252);
      v254 = objc_claimAutoreleasedReturnValue(v253);
      if (os_log_type_enabled(v254, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        v523 = v247;
        v524 = 2112;
        v525 = v250;
        _os_log_debug_impl((void *)&_mh_execute_header, v254, OS_LOG_TYPE_DEBUG, "Silent deny Policy IDs to be removed for %@: %@", buf, 0x16u);
      }

      sub_10002D1B0(self, v250);
      v256 = *(id *)(v430 + 32);
      if (v256)
        v256 = objc_getProperty(v256, v255, 192, 1);
      v257 = v256;
      objc_msgSend(v257, "setObject:forKeyedSubscript:", 0, v247);

      v259 = *(id *)(v430 + 32);
      if (v259)
        v259 = objc_getProperty(v259, v258, 208, 1);
      v260 = v259;
      v261 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v260, "objectForKeyedSubscript:", v247));
      if (v261)
      {

        goto LABEL_232;
      }
      v263 = *(id *)(v430 + 32);
      if (v263)
        v263 = objc_getProperty(v263, v262, 192, 1);
      v264 = v263;
      v265 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v264, "objectForKeyedSubscript:", v247));

      if (!v265)
      {
        v267 = *(id *)(v430 + 32);
        if (v267)
          v267 = objc_getProperty(v267, v266, 216, 1);
        v260 = v267;
        objc_msgSend(v260, "setObject:forKeyedSubscript:", 0, v247);
LABEL_232:

      }
      v246 = (char *)v246 + 1;
      v3 = self;
      if (v244 != v246)
        continue;
      break;
    }
    v268 = objc_msgSend(v241, "countByEnumeratingWithState:objects:count:", &v452, v506, 16);
    v244 = v268;
    if (v268)
      continue;
    break;
  }
LABEL_242:

  a1 = v430;
LABEL_243:
  if (!objc_msgSend(v392, "count"))
    goto LABEL_270;
  v450 = 0u;
  v451 = 0u;
  v448 = 0u;
  v449 = 0u;
  v270 = v392;
  v271 = objc_msgSend(v270, "countByEnumeratingWithState:objects:count:", &v448, v505, 16);
  if (!v271)
    goto LABEL_269;
  v273 = v271;
  v274 = *(_QWORD *)v449;
  while (2)
  {
    v275 = 0;
    while (2)
    {
      if (*(_QWORD *)v449 != v274)
        objc_enumerationMutation(v270);
      v276 = *(void **)(*((_QWORD *)&v448 + 1) + 8 * (_QWORD)v275);
      v277 = *(id *)(v430 + 32);
      if (v277)
        v277 = objc_getProperty(v277, v272, 208, 1);
      v278 = v277;
      v279 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v278, "objectForKeyedSubscript:", v276));

      v282 = ne_log_obj(v280, v281);
      v283 = objc_claimAutoreleasedReturnValue(v282);
      if (os_log_type_enabled(v283, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        v523 = v276;
        v524 = 2112;
        v525 = v279;
        _os_log_debug_impl((void *)&_mh_execute_header, v283, OS_LOG_TYPE_DEBUG, "Allow Policy IDs to be removed for %@: %@", buf, 0x16u);
      }

      sub_10002D1B0(self, v279);
      v285 = *(id *)(v430 + 32);
      if (v285)
        v285 = objc_getProperty(v285, v284, 208, 1);
      v286 = v285;
      objc_msgSend(v286, "setObject:forKeyedSubscript:", 0, v276);

      v288 = *(id *)(v430 + 32);
      if (v288)
        v288 = objc_getProperty(v288, v287, 192, 1);
      v289 = v288;
      v290 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v289, "objectForKeyedSubscript:", v276));
      if (v290)
      {

        goto LABEL_259;
      }
      v292 = *(id *)(v430 + 32);
      if (v292)
        v292 = objc_getProperty(v292, v291, 200, 1);
      v293 = v292;
      v294 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v293, "objectForKeyedSubscript:", v276));

      if (!v294)
      {
        v296 = *(id *)(v430 + 32);
        if (v296)
          v296 = objc_getProperty(v296, v295, 216, 1);
        v289 = v296;
        objc_msgSend(v289, "setObject:forKeyedSubscript:", 0, v276);
LABEL_259:

      }
      v275 = (char *)v275 + 1;
      v3 = self;
      if (v273 != v275)
        continue;
      break;
    }
    v297 = objc_msgSend(v270, "countByEnumeratingWithState:objects:count:", &v448, v505, 16);
    v273 = v297;
    if (v297)
      continue;
    break;
  }
LABEL_269:

  a1 = v430;
LABEL_270:
  if (!v496)
  {
    v298 = *(id *)(a1 + 32);
    if (v298)
      v298 = objc_getProperty(v298, v269, 192, 1);
    v299 = v298;
    if (objc_msgSend(v299, "count"))
    {

      goto LABEL_278;
    }
    v301 = *(id *)(a1 + 32);
    if (v301)
      v301 = objc_getProperty(v301, v300, 200, 1);
    v302 = v301;
    v303 = objc_msgSend(v302, "count");

    if (v303)
LABEL_278:
      sub_10003CAF0(*(_QWORD *)(a1 + 32), 0, 1, v3, *(unsigned int *)(a1 + 96), 0, &v496, *(void **)(a1 + 56), *(void **)(a1 + 64));
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v304 = objc_msgSend(*(id *)(a1 + 80), "count");
    if (v304)
    {
      if (*(_QWORD *)(a1 + 32))
        v306 = 20020;
      else
        v306 = 20;
      v417 = v306;
      if (!*(_BYTE *)(a1 + 100))
      {
        v307 = ne_log_obj(v304, v305);
        v308 = objc_claimAutoreleasedReturnValue(v307);
        if (os_log_type_enabled(v308, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl((void *)&_mh_execute_header, v308, OS_LOG_TYPE_DEBUG, "Installing skip fallback policy for background traffic", buf, 2u);
        }

        if (*(_QWORD *)(a1 + 32))
          v309 = 20000;
        else
          v309 = 0;
        v310 = v309 | 5u;
        v311 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v309 | 0x1Eu));
        v312 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", 100, 299));
        v313 = objc_alloc((Class)NEPolicy);
        v504 = v312;
        v314 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v504, 1));
        v316 = objc_msgSend(v313, "initWithOrder:result:conditions:", v310, v311, v314);
        v317 = *(id *)(a1 + 32);
        if (v317)
          v317 = objc_getProperty(v317, v315, 48, 1);
        v318 = v317;
        sub_10002E954((_BOOL8)v3, v316, v318);

        v306 = v417;
      }
      if (objc_msgSend(*(id *)(a1 + 88), "count"))
      {
        if (*(_QWORD *)(a1 + 32))
          v319 = 20000;
        else
          v319 = 0;
        v320 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v319 | 0x1Eu));
        v444 = 0u;
        v445 = 0u;
        v446 = 0u;
        v447 = 0u;
        v414 = *(id *)(a1 + 88);
        v321 = objc_msgSend(v414, "countByEnumeratingWithState:objects:count:", &v444, v503, 16);
        v423 = v321;
        if (v321)
        {
          v323 = v319 | 0xAu;
          v420 = *(_QWORD *)v445;
          do
          {
            v324 = 0;
            do
            {
              if (*(_QWORD *)v445 != v420)
                objc_enumerationMutation(v414);
              v426 = v324;
              v325 = *(void **)(*((_QWORD *)&v444 + 1) + 8 * v324);
              v326 = ne_log_obj(v321, v322);
              v327 = objc_claimAutoreleasedReturnValue(v326);
              if (os_log_type_enabled(v327, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138412290;
                v523 = v325;
                _os_log_debug_impl((void *)&_mh_execute_header, v327, OS_LOG_TYPE_DEBUG, "Installing skip fallback policy for %@", buf, 0xCu);
              }

              v328 = +[NEProcessInfo copyUUIDsForBundleID:uid:](NEProcessInfo, "copyUUIDsForBundleID:uid:", v325, *(unsigned int *)(a1 + 96));
              v440 = 0u;
              v441 = 0u;
              v442 = 0u;
              v443 = 0u;
              v329 = v328;
              v330 = objc_msgSend(v329, "countByEnumeratingWithState:objects:count:", &v440, v502, 16);
              if (v330)
              {
                v331 = v330;
                v332 = *(_QWORD *)v441;
                do
                {
                  for (kk = 0; kk != v331; kk = (char *)kk + 1)
                  {
                    if (*(_QWORD *)v441 != v332)
                      objc_enumerationMutation(v329);
                    v334 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", *(_QWORD *)(*((_QWORD *)&v440 + 1) + 8 * (_QWORD)kk)));
                    if (v334)
                    {
                      v335 = objc_alloc((Class)NEPolicy);
                      v501 = v334;
                      v336 = a1;
                      v337 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v501, 1));
                      v339 = objc_msgSend(v335, "initWithOrder:result:conditions:", v323, v320, v337);
                      v340 = *(id *)(v336 + 32);
                      if (v340)
                        v340 = objc_getProperty(v340, v338, 48, 1);
                      v341 = v340;
                      sub_10002E954((_BOOL8)self, v339, v341);

                      a1 = v430;
                    }

                  }
                  v331 = objc_msgSend(v329, "countByEnumeratingWithState:objects:count:", &v440, v502, 16);
                }
                while (v331);
              }

              v324 = v426 + 1;
              v3 = self;
            }
            while ((id)(v426 + 1) != v423);
            v321 = objc_msgSend(v414, "countByEnumeratingWithState:objects:count:", &v444, v503, 16);
            v423 = v321;
          }
          while (v321);
        }

        v306 = v417;
      }
      v424 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", *(_QWORD *)(a1 + 64)));
      v436 = 0u;
      v437 = 0u;
      v438 = 0u;
      v439 = 0u;
      v412 = *(id *)(a1 + 80);
      v342 = objc_msgSend(v412, "countByEnumeratingWithState:objects:count:", &v436, v500, 16);
      if (v342)
      {
        v343 = v342;
        v344 = *(_QWORD *)v437;
        v345 = &AnalyticsSendEventLazy_ptr;
        v408 = *(_QWORD *)v437;
        do
        {
          v346 = 0;
          v410 = v343;
          do
          {
            if (*(_QWORD *)v437 != v344)
              objc_enumerationMutation(v412);
            v347 = *(void **)(*((_QWORD *)&v436 + 1) + 8 * (_QWORD)v346);
            v348 = objc_msgSend(v347, "isEqualToString:", CFSTR("PathRuleDefaultIdentifier"));
            if ((_DWORD)v348)
            {
              v350 = ne_log_obj(v348, v349);
              v351 = objc_claimAutoreleasedReturnValue(v350);
              if (os_log_type_enabled(v351, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_debug_impl((void *)&_mh_execute_header, v351, OS_LOG_TYPE_DEBUG, "Installing default fallback policy", buf, 2u);
              }

              v3 = objc_msgSend(objc_alloc((Class)v345[174]), "initWithOrder:result:conditions:", v306, v424, 0);
              v353 = *(id *)(a1 + 32);
              if (v353)
                v353 = objc_getProperty(v353, v352, 48, 1);
              v354 = v353;
              sub_10002E954((_BOOL8)self, v3, v354);
            }
            else
            {
              if (v3)
              {
                if (v3[2])
                {
                  v3 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyResult filterWithControlUnit:](NEPolicyResult, "filterWithControlUnit:"));

                }
                else
                {
                  v3 = 0;
                }
              }
              v415 = v346;
              v355 = ne_log_obj(v348, v349);
              v356 = objc_claimAutoreleasedReturnValue(v355);
              if (os_log_type_enabled(v356, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138412290;
                v523 = v347;
                _os_log_debug_impl((void *)&_mh_execute_header, v356, OS_LOG_TYPE_DEBUG, "Installing fallback policy for %@", buf, 0xCu);
              }

              v357 = +[NEProcessInfo copyUUIDsForBundleID:uid:](NEProcessInfo, "copyUUIDsForBundleID:uid:", v347, *(unsigned int *)(a1 + 96));
              v432 = 0u;
              v433 = 0u;
              v434 = 0u;
              v435 = 0u;
              v358 = v357;
              v427 = objc_msgSend(v358, "countByEnumeratingWithState:objects:count:", &v432, v499, 16);
              if (v427)
              {
                v359 = *(_QWORD *)v433;
                v421 = *(_QWORD *)v433;
                do
                {
                  v360 = 0;
                  do
                  {
                    if (*(_QWORD *)v433 != v359)
                      objc_enumerationMutation(v358);
                    v361 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", *(_QWORD *)(*((_QWORD *)&v432 + 1) + 8 * (_QWORD)v360)));
                    if (v361)
                    {
                      v362 = objc_alloc((Class)v345[174]);
                      v498 = v361;
                      v363 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v498, 1));
                      v365 = objc_msgSend(v362, "initWithOrder:result:conditions:", v306, v424, v363);
                      v366 = *(id *)(v430 + 32);
                      if (v366)
                        v366 = objc_getProperty(v366, v364, 48, 1);
                      v367 = v366;
                      sub_10002E954((_BOOL8)self, v365, v367);

                      if (v3)
                      {
                        v368 = v358;
                        v369 = v345;
                        v370 = objc_alloc((Class)v345[174]);
                        v497[0] = v361;
                        v371 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                        v497[1] = v371;
                        v372 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v497, 2));
                        v374 = objc_msgSend(v370, "initWithOrder:result:conditions:", v306, v3, v372);
                        if (self)
                        {
                          v375 = objc_getProperty(self, v373, 32, 1);
                          sub_10002E954((_BOOL8)self, v374, v375);
                        }
                        else
                        {
                          sub_10002E954(0, v374, 0);
                          v375 = 0;
                        }

                        v306 = v417;
                        v345 = v369;
                        v358 = v368;
                        v359 = v421;
                      }
                    }

                    v360 = (char *)v360 + 1;
                  }
                  while (v427 != v360);
                  v376 = objc_msgSend(v358, "countByEnumeratingWithState:objects:count:", &v432, v499, 16);
                  v427 = v376;
                }
                while (v376);
              }

              a1 = v430;
              v354 = v358;
              v344 = v408;
              v343 = v410;
              v346 = v415;
            }

            v346 = (char *)v346 + 1;
            v3 = self;
          }
          while (v346 != v343);
          v343 = objc_msgSend(v412, "countByEnumeratingWithState:objects:count:", &v436, v500, 16);
        }
        while (v343);
      }

    }
  }
  v377 = sub_10002D308(v3);
  v379 = v377;
  if ((v377 & 1) != 0)
  {
    v380 = ne_log_large_obj(v377);
    v381 = objc_claimAutoreleasedReturnValue(v380);
    if (os_log_type_enabled(v381, OS_LOG_TYPE_DEBUG))
    {
      v383 = *(id *)(a1 + 32);
      if (v383)
        v383 = objc_getProperty(v383, v382, 48, 1);
      v384 = v383;
      *(_DWORD *)buf = 138412290;
      v523 = v384;
      _os_log_debug_impl((void *)&_mh_execute_header, v381, OS_LOG_TYPE_DEBUG, "Policy IDs added: %@", buf, 0xCu);

    }
  }
  else
  {
    v385 = ne_log_obj(v377, v378);
    v381 = objc_claimAutoreleasedReturnValue(v385);
    if (os_log_type_enabled(v381, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v381, OS_LOG_TYPE_ERROR, "Failed to apply path controller policies", buf, 2u);
    }
  }

  return v379;
}

uint64_t sub_100040A44(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  void *v8;
  id v9;
  int v10;
  void *v11;
  id v12;
  uint64_t v13;
  int v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  unsigned int v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  const char *v32;
  id Property;
  id v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  _QWORD v41[4];
  id v42;
  uint64_t v43;
  id v44;
  _QWORD v45[4];
  id v46;
  id v47;
  uint64_t v48;
  id v49;
  id v50;
  int v51;
  int32x2_t v52;
  uint8_t buf[4];
  id v54;

  v3 = a2;
  v4 = ne_log_large_obj();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v6, 48, 1);
    *(_DWORD *)buf = 138412290;
    v54 = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed: %@", buf, 0xCu);
  }

  v8 = *(void **)(a1 + 32);
  if (v8)
    v9 = objc_getProperty(v8, v7, 48, 1);
  else
    v9 = 0;
  sub_10002D1B0(v3, v9);
  v10 = sub_10002EDB4(*(_QWORD *)(a1 + 32));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult divertSocketToControlUnit:](NEPolicyResult, "divertSocketToControlUnit:", *(unsigned int *)(a1 + 64)));
  if (*(_BYTE *)(a1 + 68))
  {
    v12 = sub_10003BD08(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 64), CFSTR("ProxyAgent"));
    v13 = objc_claimAutoreleasedReturnValue(v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = v10 + 102;
  if (*(_BYTE *)(a1 + 69)
    && (v15 = sub_10003BD08(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 64), CFSTR("DNSAgent")),
        (v16 = objc_claimAutoreleasedReturnValue(v15)) != 0))
  {
    v39 = (void *)v16;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:"));
  }
  else
  {
    v17 = 0;
    v39 = 0;
  }
  v40 = (void *)v13;
  if (v13)
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v13));
  else
    v18 = 0;
  v19 = sub_10002EDB4(*(_QWORD *)(a1 + 32));
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v19 + 103));
  v21 = *(void **)(a1 + 40);
  v37 = *(void **)(a1 + 48);
  v38 = *(_QWORD *)(a1 + 32);
  v36 = *(void **)(a1 + 56);
  v45[0] = _NSConcreteStackBlock;
  v45[1] = 3221225472;
  v45[2] = sub_100040DEC;
  v45[3] = &unk_1000BDD88;
  v46 = v3;
  v51 = v14;
  v22 = v11;
  v23 = *(_QWORD *)(a1 + 32);
  v47 = v22;
  v48 = v23;
  v24 = v17;
  v49 = v24;
  v25 = v18;
  v50 = v25;
  v52 = vadd_s32(vdup_n_s32(v19), (int32x2_t)0x140000000ALL);
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_100040F28;
  v41[3] = &unk_1000BDB80;
  v26 = v46;
  v27 = *(_QWORD *)(a1 + 32);
  v42 = v26;
  v43 = v27;
  v28 = v20;
  v44 = v28;
  sub_10003248C(v38, v21, 0, 1, v37, v36, v45, v41);
  v29 = sub_10002D308(v26);
  v30 = ne_log_large_obj();
  v31 = objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
  {
    v35 = *(id *)(a1 + 32);
    if (v35)
      v35 = objc_getProperty(v35, v32, 48, 1);
    *(_DWORD *)buf = 138412290;
    v54 = v35;
    _os_log_debug_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "Policy IDs added: %@", buf, 0xCu);
  }

  return v29;
}

void sub_100040DEC(uint64_t a1, void *a2)
{
  uint64_t v3;
  const char *v4;
  id v5;
  void *v6;
  id Property;
  uint64_t v8;
  const char *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  const char *v14;
  id v15;
  void *v16;
  id v17;
  id v18;

  v18 = a2;
  v3 = *(_QWORD *)(a1 + 32);
  v5 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *(unsigned int *)(a1 + 72), *(_QWORD *)(a1 + 40), v18);
  v6 = *(void **)(a1 + 48);
  if (v6)
    Property = objc_getProperty(v6, v4, 48, 1);
  else
    Property = 0;
  sub_10002E954(v3, v5, Property);

  if (*(_QWORD *)(a1 + 56))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v10 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *(unsigned int *)(a1 + 76), *(_QWORD *)(a1 + 56), v18);
    v11 = *(void **)(a1 + 48);
    if (v11)
      v12 = objc_getProperty(v11, v9, 48, 1);
    else
      v12 = 0;
    sub_10002E954(v8, v10, v12);

  }
  if (*(_QWORD *)(a1 + 64))
  {
    v13 = *(_QWORD *)(a1 + 32);
    v15 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *(unsigned int *)(a1 + 80), *(_QWORD *)(a1 + 64), v18);
    v16 = *(void **)(a1 + 48);
    if (v16)
      v17 = objc_getProperty(v16, v14, 48, 1);
    else
      v17 = 0;
    sub_10002E954(v13, v15, v17);

  }
}

void sub_100040F28(_QWORD *a1, void *a2)
{
  uint64_t v3;
  id v4;
  const char *v5;
  void *v6;
  id Property;
  id v8;

  v3 = a1[4];
  v4 = a2;
  v8 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", sub_10002EDB4(a1[5]), a1[6], v4);

  v6 = (void *)a1[5];
  if (v6)
    Property = objc_getProperty(v6, v5, 48, 1);
  else
    Property = 0;
  sub_10002E954(v3, v8, Property);

}

uint64_t sub_100040FC8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  const char *v11;
  void *v12;
  id v13;
  const char *v14;
  void *v15;
  id v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  const char *v31;
  id v32;
  void *v33;
  id v34;
  const char *v35;
  id v36;
  id v37;
  const char *v38;
  id v39;
  id v40;
  char v41;
  uint64_t v42;
  const char *v43;
  id v44;
  const char *v45;
  id v46;
  void *v47;
  id v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  void *v54;
  id v55;
  const char *v56;
  id v57;
  void *v58;
  id v59;
  unsigned int v60;
  uint64_t v61;
  void *i;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  id Property;
  id v77;
  id v78;
  void *v79;
  void *v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  const char *v101;
  id v103;
  id v104;
  NSObject *v105;
  id v106;
  id v107;
  uint64_t v108;
  void *v109;
  id obj;
  id obja;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  id v115;
  void *v116;
  void *v117;
  id self;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  unsigned int v127;
  uint8_t v128[128];
  __int128 buf;
  _BYTE v130[128];

  v3 = a2;
  v4 = ne_log_large_obj(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v6, 48, 1);
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed: %@", (uint8_t *)&buf, 0xCu);
  }

  v8 = ne_log_large_obj(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v77 = *(id *)(a1 + 32);
    if (v77)
      v77 = objc_getProperty(v77, v10, 56, 1);
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v77;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Low priority Policy IDs to be removed: %@", (uint8_t *)&buf, 0xCu);
  }

  v12 = *(void **)(a1 + 32);
  if (v12)
    v13 = objc_getProperty(v12, v11, 48, 1);
  else
    v13 = 0;
  sub_10002D1B0(v3, v13);
  v15 = *(void **)(a1 + 32);
  if (v15)
    v16 = objc_getProperty(v15, v14, 56, 1);
  else
    v16 = 0;
  sub_10002DA24(v3, v16);
  v17 = *(_DWORD *)(a1 + 72);
  v18 = *(_QWORD *)(a1 + 32);
  v19 = sub_10002EDB4(v18) + 5 * (v17 - 1);
  if (*(_BYTE *)(a1 + 76))
    v20 = v19;
  else
    v20 = v19 + 160;
  if (*(_BYTE *)(a1 + 76))
    v21 = (1 << (v17 - 1)) | 0x80000000;
  else
    v21 = v17;
  v117 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult divertSocketToControlUnit:](NEPolicyResult, "divertSocketToControlUnit:", v21));
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", (v20 + 4)));
  self = v3;
  v109 = v22;
  if (*(_QWORD *)(a1 + 40))
  {
    if (v18)
      v23 = 1490;
    else
      v23 = 0;
    v24 = objc_alloc((Class)NSArray);
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uuid"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v25));
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:version:](NEPolicyCondition, "effectivePID:version:", objc_msgSend(*(id *)(a1 + 40), "pid"), objc_msgSend(*(id *)(a1 + 40), "pidVersion")));
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition delegateIsPlatformBinary](NEPolicyCondition, "delegateIsPlatformBinary"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    v30 = objc_msgSend(v24, "initWithObjects:", v26, v27, v28, v29, 0);

    v32 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v23, v22, v30);
    v33 = *(void **)(a1 + 32);
    if (v33)
      v34 = objc_getProperty(v33, v31, 48, 1);
    else
      v34 = 0;
    v3 = self;
    sub_10002E954((_BOOL8)self, v32, v34);

  }
  v127 = v20;
  v36 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/usr/libexec/captiveagent"));
  if (v36)
  {
    if (v3)
      v37 = objc_getProperty(v3, v35, 16, 1);
    else
      v37 = 0;
    v39 = v37;
    v40 = *(id *)(a1 + 32);
    if (v40)
      v40 = objc_getProperty(v40, v38, 48, 1);
    v41 = sub_100054014(v39, &v127, 0, 0, v36, 0, 0, 0, 0, 1, 0, v22, 0, 0, v40);

    if ((v41 & 1) != 0)
    {
      v44 = self;
      if (self)
        v44 = objc_getProperty(self, v43, 16, 1);
      v46 = v44;
      v47 = *(void **)(a1 + 48);
      v48 = *(id *)(a1 + 32);
      if (v48)
        v48 = objc_getProperty(v48, v45, 48, 1);
      v49 = sub_10005811C(v46, v47, &v127, 1, 1, 0, v22, 0, v48, 0, 0);

      if (v49)
      {
        if (if_nametoindex("llw0"))
        {
          v52 = objc_alloc((Class)NSArray);
          v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "llw0"));
          v54 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", v53));
          v55 = objc_msgSend(v52, "initWithObjects:", v54, 0);

          v57 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v20, v22, v55);
          v58 = *(void **)(a1 + 32);
          if (v58)
            v59 = objc_getProperty(v58, v56, 48, 1);
          else
            v59 = 0;
          sub_10002E954((_BOOL8)self, v57, v59);

        }
        v106 = v36;
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        obj = *(id *)(a1 + 56);
        v115 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v123, v130, 16);
        v60 = 0;
        if (v115)
        {
          v112 = *(_QWORD *)v124;
          v61 = a1;
          do
          {
            for (i = 0; i != v115; i = (char *)i + 1)
            {
              if (*(_QWORD *)v124 != v112)
                objc_enumerationMutation(obj);
              v63 = *(void **)(*((_QWORD *)&v123 + 1) + 8 * (_QWORD)i);
              *((_QWORD *)&buf + 1) = 0;
              if (objc_msgSend(v63, "matchProtocol"))
              {
                v64 = (uint64_t)objc_msgSend(v63, "matchProtocol");
                v65 = 1;
              }
              else
              {
                *((_QWORD *)&buf + 1) = 2;
                v64 = 1;
                v65 = 2;
              }
              v66 = 0;
              *(_QWORD *)&buf = v64;
              v67 = 8 * v65;
              do
              {
                sub_100039264(*(void **)(v61 + 32), v63, *(_QWORD *)&v130[v66 - 8], self, v109, v20, 0);
                v66 += 8;
              }
              while (v67 != v66);
              v60 |= objc_msgSend(v63, "appliesToLoopback");
            }
            a1 = v61;
            v115 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v123, v130, 16);
          }
          while (v115);
        }

        if (*(_BYTE *)(a1 + 77))
        {
          v68 = sub_10003BD08(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 72), CFSTR("ProxyAgent"));
          v69 = objc_claimAutoreleasedReturnValue(v68);
        }
        else
        {
          v69 = 0;
        }
        v3 = self;
        if (*(_BYTE *)(a1 + 78))
        {
          v78 = sub_10003BD08(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 72), CFSTR("DNSAgent"));
          v79 = (void *)objc_claimAutoreleasedReturnValue(v78);
          if (v79)
            v80 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v79));
          else
            v80 = 0;
        }
        else
        {
          v80 = 0;
          v79 = 0;
        }
        v105 = v69;
        if (v69)
          v116 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v69));
        else
          v116 = 0;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v107 = *(id *)(a1 + 64);
        obja = objc_msgSend(v107, "countByEnumeratingWithState:objects:count:", &v119, v128, 16);
        if (obja)
        {
          v81 = v20 + 3;
          v82 = v20 + 2;
          v108 = *(_QWORD *)v120;
          do
          {
            v83 = 0;
            do
            {
              if (*(_QWORD *)v120 != v108)
                objc_enumerationMutation(v107);
              v84 = *(void **)(*((_QWORD *)&v119 + 1) + 8 * v83);
              *((_QWORD *)&buf + 1) = 0;
              v114 = v60;
              v113 = v83;
              if (objc_msgSend(v84, "matchProtocol"))
              {
                v85 = (uint64_t)objc_msgSend(v84, "matchProtocol");
                v86 = 1;
              }
              else
              {
                *((_QWORD *)&buf + 1) = 2;
                v85 = 1;
                v86 = 2;
              }
              v87 = 0;
              *(_QWORD *)&buf = v85;
              v88 = 8 * v86;
              do
              {
                if (v80)
                  sub_100039264(*(void **)(a1 + 32), v84, *(_QWORD *)&v130[v87 - 8], v3, v80, v82, 0);
                if (v116)
                {
                  v89 = *(void **)(a1 + 32);
                  v90 = a1;
                  v91 = *(_QWORD *)&v130[v87 - 8];
                  v3 = self;
                  sub_100039264(v89, v84, v91, self, v116, v82, 0);
                }
                else
                {
                  v90 = a1;
                  v91 = *(_QWORD *)&v130[v87 - 8];
                  v3 = self;
                }
                sub_100039264(*(void **)(v90 + 32), v84, v91, v3, v117, v81, 1);
                v87 += 8;
                a1 = v90;
              }
              while (v88 != v87);
              v60 = objc_msgSend(v84, "appliesToLoopback") | v114;
              v83 = v113 + 1;
            }
            while ((id)(v113 + 1) != obja);
            obja = objc_msgSend(v107, "countByEnumeratingWithState:objects:count:", &v119, v128, 16);
          }
          while (obja);
        }

        if (v3 && (v60 & 1) != 0)
          sub_10002E23C((uint64_t)v3, *(void **)(a1 + 32), 1);
        v94 = ne_log_obj(v92, v93);
        v95 = objc_claimAutoreleasedReturnValue(v94);
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
        {
          v103 = *(id *)(a1 + 32);
          if (v103)
            v103 = objc_getProperty(v103, v96, 48, 1);
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = v103;
          _os_log_debug_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEBUG, "Policy IDs added: %@", (uint8_t *)&buf, 0xCu);
        }

        v99 = ne_log_obj(v97, v98);
        v100 = objc_claimAutoreleasedReturnValue(v99);
        if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
        {
          v104 = *(id *)(a1 + 32);
          if (v104)
            v104 = objc_getProperty(v104, v101, 56, 1);
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = v104;
          _os_log_debug_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEBUG, "Policy IDs added at Low priority: %@", (uint8_t *)&buf, 0xCu);
        }

        v72 = sub_10002D308(v3);
        v22 = v109;
        v71 = v105;
        v36 = v106;
        goto LABEL_94;
      }
      v75 = ne_log_obj(v50, v51);
      v71 = objc_claimAutoreleasedReturnValue(v75);
      if (!os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
LABEL_55:
        v72 = 0;
        v3 = self;
        goto LABEL_94;
      }
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NESMPolicySession setFlowDivertPoliciesForNetworkRules:excludeRules:flowDivertCo"
                                      "ntrolUnit:hasDNS:hasProxy:providerProcessIdentity:isFullyTransparent:captiveNetwor"
                                      "kPluginBundleIDs:]_block_invoke";
      v74 = "%s: Captive app traffic exception policies failed";
    }
    else
    {
      v73 = ne_log_obj(v42, v43);
      v71 = objc_claimAutoreleasedReturnValue(v73);
      if (!os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        goto LABEL_55;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NESMPolicySession setFlowDivertPoliciesForNetworkRules:excludeRules:flowDivertCo"
                                      "ntrolUnit:hasDNS:hasProxy:providerProcessIdentity:isFullyTransparent:captiveNetwor"
                                      "kPluginBundleIDs:]_block_invoke";
      v74 = "%s: Captive agent traffic exception policies failed";
    }
    _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, v74, (uint8_t *)&buf, 0xCu);
    goto LABEL_55;
  }
  v70 = ne_log_obj(0, v35);
  v71 = objc_claimAutoreleasedReturnValue(v70);
  if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "-[NESMPolicySession setFlowDivertPoliciesForNetworkRules:excludeRules:flowDivertCont"
                                    "rolUnit:hasDNS:hasProxy:providerProcessIdentity:isFullyTransparent:captiveNetworkPlu"
                                    "ginBundleIDs:]_block_invoke";
    _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "%s: Failed to get UUIDs for captiveagent", (uint8_t *)&buf, 0xCu);
  }
  v72 = 0;
LABEL_94:

  return v72;
}

uint64_t sub_100041A88(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  const char *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  const char *v19;
  id v20;
  void *v21;
  id v22;
  _BOOL4 v23;
  id v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  id Property;
  id v30;
  NSObject *obj;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t v37[128];
  uint8_t buf[4];
  id v39;

  v32 = a2;
  v3 = ne_log_large_obj();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v5, 112, 1);
    *(_DWORD *)buf = 138412290;
    v39 = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "drop control Policy IDs to be removed %@", buf, 0xCu);
  }

  v7 = *(void **)(a1 + 32);
  if (v7)
    v8 = objc_getProperty(v7, v6, 112, 1);
  else
    v8 = 0;
  sub_10002D1B0(v32, v8);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult drop](NEPolicyResult, "drop"));
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = *(id *)(a1 + 40);
  v11 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
  if (v11)
  {
    v12 = v11;
    if (v9)
      v13 = 20000;
    else
      v13 = 0;
    v14 = *(_QWORD *)v34;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v34 != v14)
          objc_enumerationMutation(obj);
        v16 = *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)v15);
        v17 = objc_alloc_init((Class)NSMutableArray);
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v16));
        objc_msgSend(v17, "addObject:", v18);

        v20 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (char *)v15 + v13, v10, v17);
        v21 = *(void **)(a1 + 32);
        if (v21)
          v22 = objc_getProperty(v21, v19, 112, 1);
        else
          v22 = 0;
        v23 = sub_10002E954((_BOOL8)v32, v20, v22);

        if (!v23)
        {
          v27 = 0;
          goto LABEL_23;
        }
        v15 = (char *)v15 + 1;
      }
      while (v12 != v15);
      v13 = (v13 + (_DWORD)v15);
      v24 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
      v12 = v24;
    }
    while (v24);
  }

  if (sub_10002D308(v32))
  {
    v25 = ne_log_large_obj();
    obj = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(obj, OS_LOG_TYPE_DEBUG))
    {
      v30 = *(id *)(a1 + 32);
      if (v30)
        v30 = objc_getProperty(v30, v26, 112, 1);
      *(_DWORD *)buf = 138412290;
      v39 = v30;
      _os_log_debug_impl((void *)&_mh_execute_header, obj, OS_LOG_TYPE_DEBUG, "drop control Policy IDs added %@", buf, 0xCu);
    }
    v27 = 1;
LABEL_23:

  }
  else
  {
    v27 = 0;
  }

  return v27;
}

uint64_t sub_100041D84(uint64_t a1, void *a2)
{
  const char *v3;
  id Property;
  const char *v5;
  id v6;
  id v7;
  const char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  void *v16;
  id v17;
  id v18;
  unsigned int v19;
  uint64_t v20;
  void *i;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;
  NSObject *obj;
  id v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint8_t v40[128];
  uint8_t buf[4];
  void *v42;

  v34 = a2;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v3, 168, 1);
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  if (!v35)
  {
    v6 = objc_alloc_init((Class)NSMutableArray);
    v7 = *(id *)(a1 + 32);
    if (v7)
      v7 = objc_getProperty(v7, v5, 168, 1);
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v6, *(_QWORD *)(a1 + 40));

    v9 = *(id *)(a1 + 32);
    if (v9)
      v9 = objc_getProperty(v9, v8, 168, 1);
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
    v11 = ne_log_obj(v35, v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v32 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v42 = v32;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CREATE LIST for %@", buf, 0xCu);
    }

  }
  v13 = ne_log_large_obj();
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v42 = v35;
    _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "drop control Policy IDs to be removed %@", buf, 0xCu);
  }

  sub_10002D1B0(v34, v35);
  v15 = sub_10002EDB4(*(_QWORD *)(a1 + 32));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult drop](NEPolicyResult, "drop"));
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  obj = *(id *)(a1 + 48);
  v17 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
  if (v17)
  {
    v18 = v17;
    v19 = v15 + 30;
    v20 = *(_QWORD *)v37;
    while (2)
    {
      for (i = 0; i != v18; i = (char *)i + 1)
      {
        if (*(_QWORD *)v37 != v20)
          objc_enumerationMutation(obj);
        v22 = *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
        v23 = objc_alloc_init((Class)NSMutableArray);
        v24 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v22));
        objc_msgSend(v23, "addObject:", v24);

        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v22));
        objc_msgSend(v23, "addObject:", v25);

        v26 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        objc_msgSend(v23, "addObject:", v26);

        v27 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](NEPolicyCondition, "entitlement"));
        objc_msgSend(v23, "addObject:", v27);

        v28 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (char *)i + v19, v16, v23);
        LODWORD(v27) = sub_10002E954((_BOOL8)v34, v28, v35);

        if (!(_DWORD)v27)
        {
          v30 = 0;
          goto LABEL_26;
        }
      }
      v19 += i;
      v18 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
      if (v18)
        continue;
      break;
    }
  }

  if (sub_10002D308(v34))
  {
    v29 = ne_log_large_obj();
    obj = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(obj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v42 = v35;
      _os_log_debug_impl((void *)&_mh_execute_header, obj, OS_LOG_TYPE_DEBUG, "drop control Policy IDs added %@", buf, 0xCu);
    }
    v30 = 1;
LABEL_26:

  }
  else
  {
    v30 = 0;
  }

  return v30;
}

uint64_t sub_100042164(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v9[5];
  id v10;
  uint8_t buf[16];

  v3 = a2;
  v5 = v3;
  if (a1)
  {
    if ((*(_DWORD *)(a1 + 8) | 2) == 3)
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_10004225C;
      v9[3] = &unk_1000BDA78;
      v9[4] = a1;
      v10 = v3;
      a1 = sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v9);

    }
    else
    {
      v6 = ne_log_obj(v3, v4);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to install Nexus policies, master session is nil or not AlwaysOn VPN / VPN ", buf, 2u);
      }

      a1 = 0;
    }
  }

  return a1;
}

uint64_t sub_10004225C(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  void *v5;
  id v6;
  const char *v7;
  id v8;
  void *v9;
  const char *v10;
  id Property;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  void *v23;
  int v24;
  id v25;
  __int16 v26;
  id v27;
  void *v28;

  v4 = a2;
  v5 = *(void **)(a1 + 32);
  if (!v5 || (v6 = objc_getProperty(v5, v3, 136, 1)) == 0)
  {
    v8 = objc_alloc_init((Class)NSMutableArray);
    v9 = *(void **)(a1 + 32);
    if (v9)
      objc_setProperty_atomic(v9, v7, v8, 136);

    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v10, 136, 1);
    v6 = Property;
  }
  v12 = ne_log_large_obj();
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    v24 = 138412290;
    v25 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Nexus Policy IDs to be removed: %@", (uint8_t *)&v24, 0xCu);
  }

  sub_10002D1B0(v4, v6);
  if (*(_QWORD *)(a1 + 40))
  {
    v14 = sub_10002EDB4(*(_QWORD *)(a1 + 32)) + 40;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](NEPolicyResult, "pass"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(a1 + 40)));
    v28 = v16;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v28, 1));

    v18 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v14, v15, v17);
    LODWORD(v16) = sub_10002E954((_BOOL8)v4, v18, v6);

    if ((_DWORD)v16 && sub_10002D308(v4))
    {
      v19 = ne_log_large_obj();
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        v23 = *(void **)(a1 + 40);
        v24 = 138412546;
        v25 = v23;
        v26 = 2112;
        v27 = v6;
        _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Nexus Policy IDs added for %@: %@", (uint8_t *)&v24, 0x16u);
      }

      v21 = 1;
    }
    else
    {
      v21 = 0;
    }

  }
  else
  {
    v21 = 1;
  }

  return v21;
}

uint64_t sub_1000424CC(uint64_t a1, int a2, void *a3, void *a4, char a5)
{
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  _QWORD v16[5];
  id v17;
  id v18;
  int v19;
  char v20;
  uint8_t buf[16];

  v9 = a3;
  v10 = a4;
  if (!a1)
    goto LABEL_8;
  if (!objc_msgSend(v9, "count"))
  {
    v13 = ne_log_obj(0, v11);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "No mach-O UUIDs available for VPN plugin, cannot install AOVPN control policies", buf, 2u);
    }

    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 8) != 3)
  {
LABEL_8:
    v12 = 0;
    goto LABEL_9;
  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100042604;
  v16[3] = &unk_1000BDE50;
  v16[4] = a1;
  v17 = v10;
  v18 = v9;
  v19 = a2;
  v20 = a5;
  v12 = sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v16);

LABEL_9:
  return v12;
}

uint64_t sub_100042604(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  id Property;
  void *v6;
  id v7;
  const char *v8;
  id v9;
  id v10;
  const char *v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  id v16;
  id v17;
  int v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  _BOOL8 v36;
  id v37;
  id v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  _BOOL4 v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  _BOOL4 v61;
  id v62;
  uint64_t v63;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  void *v71;
  id v72;
  void *v73;
  void *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  id v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  unsigned int v96;
  _BYTE v97[128];
  _BYTE v98[128];
  uint8_t v99[128];
  uint8_t buf[4];
  uint64_t v101;
  __int16 v102;
  id v103;

  v4 = a2;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v3, 176, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  if (!v6)
  {
    v7 = v4;
    v9 = objc_alloc_init((Class)NSMutableArray);
    v10 = *(id *)(a1 + 32);
    if (v10)
      v10 = objc_getProperty(v10, v8, 176, 1);
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v9, *(_QWORD *)(a1 + 40));

    v12 = *(id *)(a1 + 32);
    if (v12)
      v12 = objc_getProperty(v12, v11, 176, 1);
    v4 = v7;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  }
  v13 = ne_log_large_obj();
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    v65 = *(id *)(a1 + 32);
    v66 = *(_QWORD *)(a1 + 40);
    if (v65)
      v65 = objc_getProperty(v65, v15, 64, 1);
    *(_DWORD *)buf = 138412546;
    v101 = v66;
    v102 = 2112;
    v103 = v65;
    _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "control Policy IDs to be removed %@: %@", buf, 0x16u);
  }

  sub_10002D1B0(v4, v6);
  v16 = +[NEProcessInfo copyDNSUUIDs](NEProcessInfo, "copyDNSUUIDs");
  if (v16)
  {
    v17 = +[NEProcessInfo copyNEHelperUUIDs](NEProcessInfo, "copyNEHelperUUIDs");
    if (v17)
    {
      v18 = sub_10002EDB4(*(_QWORD *)(a1 + 32));
      v19 = (v18 + 10);
      v96 = v18 + 10;
      v83 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", *(_QWORD *)(a1 + 40), 1));
      v20 = sub_100033D50(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), CFSTR("DNSAgent"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      if (v21)
        v78 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v21));
      else
        v78 = 0;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v23 = *(id *)(a1 + 48);
      v24 = -[NSObject countByEnumeratingWithState:objects:count:](v23, "countByEnumeratingWithState:objects:count:", &v92, v99, 16);
      if (v24)
      {
        v73 = v16;
        v75 = v18 + 5;
        v25 = *(_QWORD *)v93;
        v80 = a1;
        v81 = v6;
        v71 = v21;
        v72 = v17;
        v68 = *(_QWORD *)v93;
        while (2)
        {
          v26 = 0;
          v69 = v24;
          do
          {
            if (*(_QWORD *)v93 != v25)
              objc_enumerationMutation(v23);
            v70 = v26;
            v27 = *(_QWORD *)(*((_QWORD *)&v92 + 1) + 8 * v26);
            v28 = objc_alloc_init((Class)NSMutableArray);
            v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v27));
            objc_msgSend(v28, "addObject:", v29);

            v82 = v27;
            v30 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v27));
            objc_msgSend(v28, "addObject:", v30);

            v31 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            objc_msgSend(v28, "addObject:", v31);

            v32 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](NEPolicyCondition, "entitlement"));
            objc_msgSend(v28, "addObject:", v32);

            v33 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", *(unsigned int *)(a1 + 56)));
            objc_msgSend(v28, "addObject:", v33);

            v74 = v28;
            v34 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v19, v83, v28);
            LODWORD(v28) = sub_10002E954((_BOOL8)v4, v34, v6);

            if (!(_DWORD)v28)
              goto LABEL_56;
            if (v78)
            {
              v35 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v75, v78, v74);
              sub_10002E954((_BOOL8)v4, v35, v6);

            }
            v36 = (_BOOL8)v4;
            v19 = (v19 + 1);
            v90 = 0u;
            v91 = 0u;
            v88 = 0u;
            v89 = 0u;
            v79 = v17;
            v37 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v88, v98, 16);
            if (v37)
            {
              v38 = v37;
              v39 = *(_QWORD *)v89;
              while (2)
              {
                v40 = 0;
                v41 = v19;
                do
                {
                  if (*(_QWORD *)v89 != v39)
                    objc_enumerationMutation(v79);
                  v42 = *(_QWORD *)(*((_QWORD *)&v88 + 1) + 8 * (_QWORD)v40);
                  v43 = objc_alloc_init((Class)NSMutableArray);
                  v44 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v82));
                  objc_msgSend(v43, "addObject:", v44);

                  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v42));
                  objc_msgSend(v43, "addObject:", v45);

                  v46 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                  objc_msgSend(v43, "addObject:", v46);

                  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](NEPolicyCondition, "entitlement"));
                  objc_msgSend(v43, "addObject:", v47);

                  v48 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", *(unsigned int *)(v80 + 56)));
                  objc_msgSend(v43, "addObject:", v48);

                  v49 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (char *)v40 + v41, v83, v43);
                  v50 = sub_10002E954(v36, v49, v81);

                  if (!v50)
                  {
                    v4 = (id)v36;
                    v6 = v81;
                    goto LABEL_55;
                  }

                  v40 = (char *)v40 + 1;
                }
                while (v38 != v40);
                v19 = (v41 + (_DWORD)v40);
                v38 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v88, v98, 16);
                if (v38)
                  continue;
                break;
              }
            }

            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v79 = v73;
            v51 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v84, v97, 16);
            if (v51)
            {
              v52 = v51;
              v76 = *(_QWORD *)v85;
              v4 = (id)v36;
              a1 = v80;
              v6 = v81;
LABEL_35:
              v53 = 0;
              v77 = v19;
              while (1)
              {
                if (*(_QWORD *)v85 != v76)
                  objc_enumerationMutation(v79);
                v54 = *(_QWORD *)(*((_QWORD *)&v84 + 1) + 8 * v53);
                v43 = objc_alloc_init((Class)NSMutableArray);
                v55 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v82));
                objc_msgSend(v43, "addObject:", v55);

                v56 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v54));
                objc_msgSend(v43, "addObject:", v56);

                v57 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                objc_msgSend(v43, "addObject:", v57);

                v58 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](NEPolicyCondition, "entitlement"));
                objc_msgSend(v43, "addObject:", v58);

                v59 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", *(unsigned int *)(v80 + 56)));
                objc_msgSend(v43, "addObject:", v59);

                v60 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v77 + v53, v83, v43);
                v61 = sub_10002E954((_BOOL8)v4, v60, v81);

                if (!v61)
                  break;
                if (v78)
                {
                  v62 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v75, v78, v43);
                  sub_10002E954((_BOOL8)v4, v62, v81);

                }
                if (v52 == (id)++v53)
                {
                  v19 = (v77 + v53);
                  v52 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v84, v97, 16);
                  if (v52)
                    goto LABEL_35;
                  goto LABEL_45;
                }
              }
LABEL_55:

              v21 = v71;
              v17 = v72;
LABEL_56:

              v22 = 0;
              v16 = v73;
              goto LABEL_57;
            }
            v4 = (id)v36;
            a1 = v80;
            v6 = v81;
LABEL_45:

            v26 = v70 + 1;
            v21 = v71;
            v17 = v72;
            v25 = v68;
          }
          while ((id)(v70 + 1) != v69);
          v24 = -[NSObject countByEnumeratingWithState:objects:count:](v23, "countByEnumeratingWithState:objects:count:", &v92, v99, 16);
          if (v24)
            continue;
          break;
        }
        v96 = v19;
        v16 = v73;
      }

      if ((!*(_BYTE *)(a1 + 60)
         || sub_100034B2C(*(_QWORD *)(a1 + 32), v4, *(_DWORD *)(a1 + 56), *(void **)(a1 + 48), v83, v6, &v96))&& sub_10002D308(v4))
      {
        v63 = ne_log_large_obj();
        v23 = objc_claimAutoreleasedReturnValue(v63);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          v67 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          v101 = v67;
          v102 = 2112;
          v103 = v6;
          _os_log_debug_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "control Policy IDs added %@: %@", buf, 0x16u);
        }
        v22 = 1;
LABEL_57:

      }
      else
      {
        v22 = 0;
      }

    }
    else
    {
      v22 = 0;
    }

  }
  else
  {
    v22 = 0;
  }

  return v22;
}

uint64_t sub_100042EB4(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  id Property;
  uint64_t v6;
  void *v7;
  const char *v8;
  id v9;
  id v10;
  const char *v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  void *v16;
  void *v17;
  int v18;
  const char *v19;
  int v20;
  uint64_t v21;
  id v22;
  id v23;
  void *v24;
  BOOL v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  NSObject *v29;
  id v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  NSObject *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  void *v56;
  uint64_t v57;
  id v58;
  _BOOL4 v59;
  void *v60;
  id v61;
  void *v62;
  void *v63;
  id v64;
  id v65;
  void *v66;
  void *v67;
  id v68;
  id v69;
  void *v70;
  void *v71;
  id v72;
  void *v73;
  id v74;
  void *v75;
  void *v76;
  id v77;
  void *v78;
  id v79;
  void *v80;
  void *v81;
  id v82;
  _BOOL4 v83;
  void *v84;
  id v85;
  _BOOL4 v86;
  id v87;
  void *v88;
  void *v89;
  id v90;
  id v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v98;
  void *v99;
  unsigned int v100;
  unsigned int v101;
  void *v102;
  void *v103;
  uint64_t v104;
  void *v105;
  void *v106;
  unsigned int v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  uint8_t buf[4];
  uint64_t v120;
  __int16 v121;
  void *v122;

  v4 = a2;
  v107 = 0;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v3, 184, 1);
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v7 = (void *)v6;
  if (!v6)
  {
    v9 = objc_alloc_init((Class)NSMutableArray);
    v10 = *(id *)(a1 + 32);
    if (v10)
      v10 = objc_getProperty(v10, v8, 184, 1);
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v9, *(_QWORD *)(a1 + 40));

    v12 = *(id *)(a1 + 32);
    if (v12)
      v12 = objc_getProperty(v12, v11, 184, 1);
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
    v7 = (void *)v6;
  }
  v13 = ne_log_large_obj(v6);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    v93 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v120 = v93;
    v121 = 2112;
    v122 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed %@: %@", buf, 0x16u);
  }

  sub_10002D1B0(v4, v7);
  v16 = *(void **)(a1 + 32);
  if (v16 && objc_getProperty(v16, v15, 16, 1))
  {
    v17 = *(void **)(a1 + 32);
    v18 = sub_10002EDB4((uint64_t)v17);
    v20 = v18;
    if (*(_BYTE *)(a1 + 80))
    {
      sub_10002D030(v17, *(void **)(a1 + 40), v4);
    }
    else
    {
      v107 = v18 + 50;
      if (v4)
        v22 = objc_getProperty(v4, v19, 16, 1);
      else
        v22 = 0;
      v23 = v22;
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 0));
      v25 = sub_10005459C((_BOOL8)v23, &v107, v24, v7);

      if (!v25)
      {
        v28 = ne_log_obj(v26, v27);
        v29 = objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Failed to add icmpv6 exception for data", buf, 2u);
        }

      }
      if (v4)
        v30 = objc_getProperty(v4, v27, 16, 1);
      else
        v30 = 0;
      v31 = sub_100055754(v30, &v107, *(_QWORD *)(a1 + 64), 0, 1, v7);
      if ((v31 & 1) == 0)
      {
        v33 = ne_log_obj(v31, v32);
        v34 = objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "Failed to add VoiceMail exception for data", buf, 2u);
        }

      }
      if (v4)
        v35 = objc_getProperty(v4, v32, 16, 1);
      else
        v35 = 0;
      v36 = sub_100058040(v35, &v107, *(_QWORD *)(a1 + 72), *(void **)(a1 + 40), 1, v7);
      if ((v36 & 1) == 0)
      {
        v38 = ne_log_obj(v36, v37);
        v39 = objc_claimAutoreleasedReturnValue(v38);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Failed to add CellularServices exception for data", buf, 2u);
        }

      }
      v40 = sub_1000439F4(*(_DWORD **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), 1, v4);
      if ((v40 & 1) == 0)
      {
        v42 = ne_log_obj(v40, v41);
        v43 = objc_claimAutoreleasedReturnValue(v42);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Failed to add Application exceptions for data", buf, 2u);
        }

      }
    }
    if (*(_BYTE *)(a1 + 81))
    {
      v44 = sub_100033D50(*(_QWORD *)(a1 + 32), *(void **)(a1 + 56), CFSTR("ProxyAgent"));
      v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
    }
    else
    {
      v45 = 0;
    }
    if (*(_BYTE *)(a1 + 82))
    {
      v46 = sub_100033D50(*(_QWORD *)(a1 + 32), *(void **)(a1 + 56), CFSTR("DNSAgent"));
      v47 = objc_claimAutoreleasedReturnValue(v46);
      if (v47)
      {
        v104 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v47));
        if (!v45)
          goto LABEL_48;
LABEL_46:
        v48 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v45));
        goto LABEL_49;
      }
      v104 = 0;
      if (v45)
        goto LABEL_46;
    }
    else
    {
      v104 = 0;
      v47 = 0;
      if (v45)
        goto LABEL_46;
    }
LABEL_48:
    v48 = 0;
LABEL_49:
    v106 = (void *)v48;
    v103 = (void *)v47;
    v100 = v20 + 205;
    v101 = v20 + 210;
    v49 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", *(_QWORD *)(a1 + 56), 1));
    v50 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult scopeSocketToInterfaceName:](NEPolicyResult, "scopeSocketToInterfaceName:", *(_QWORD *)(a1 + 56)));
    v105 = (void *)v50;
    if (*(_BYTE *)(a1 + 80))
    {
      v51 = v50;
      v102 = v45;
      v107 = v20 + 215;
      v52 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(a1 + 56)));
      v118 = v52;
      v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v118, 1));

      v54 = v49;
      v55 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v20 + 215), v49, v53);
      LODWORD(v52) = sub_10002E954((_BOOL8)v4, v55, v7);

      if ((_DWORD)v52)
      {
        v107 = v20 + 220;
        v56 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(a1 + 40)));
        v117 = v56;
        v57 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v117, 1));

        v58 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v20 + 220), v51, v57);
        v59 = sub_10002E954((_BOOL8)v4, v58, v7);

        if (v59)
        {
          v99 = (void *)v57;
          v60 = (void *)v104;
          v49 = v54;
          if (v104)
          {
            v61 = objc_alloc((Class)NEPolicy);
            v62 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(a1 + 56)));
            v116 = v62;
            v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v116, 1));
            v64 = objc_msgSend(v61, "initWithOrder:result:conditions:", v100, v104, v63);
            sub_10002E954((_BOOL8)v4, v64, v7);

          }
          v45 = v102;
          if (v106)
          {
            v65 = objc_alloc((Class)NEPolicy);
            v66 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(a1 + 56)));
            v115 = v66;
            v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v115, 1));
            v68 = objc_msgSend(v65, "initWithOrder:result:conditions:", v101, v106, v67);
            sub_10002E954((_BOOL8)v4, v68, v7);

          }
          if (v104)
          {
            v69 = objc_alloc((Class)NEPolicy);
            v70 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(a1 + 40)));
            v114 = v70;
            v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v114, 1));
            v72 = objc_msgSend(v69, "initWithOrder:result:conditions:", v100, v104, v71);
            sub_10002E954((_BOOL8)v4, v72, v7);

          }
          v73 = v106;
          if (v106)
          {
            v74 = objc_alloc((Class)NEPolicy);
            v75 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(a1 + 40)));
            v113 = v75;
            v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v113, 1));
            v77 = objc_msgSend(v74, "initWithOrder:result:conditions:", v101, v106, v76);
            v53 = v99;
LABEL_67:
            sub_10002E954((_BOOL8)v4, v77, v7);

            v92 = v103;
            v60 = (void *)v104;
            v73 = v106;
            goto LABEL_76;
          }
          v53 = v99;
          goto LABEL_75;
        }
        v21 = 0;
        v53 = (void *)v57;
      }
      else
      {
        v21 = 0;
      }
      v92 = v103;
      v60 = (void *)v104;
      v73 = v106;
      v49 = v54;
      v45 = v102;
LABEL_81:

      goto LABEL_82;
    }
    v107 = v20 + 225;
    v78 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(a1 + 56)));
    v112 = v78;
    v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v112, 1));

    v79 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v20 + 225), v49, v53);
    LODWORD(v78) = sub_10002E954((_BOOL8)v4, v79, v7);

    if ((_DWORD)v78)
    {
      v107 = v20 + 230;
      v80 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", *(_QWORD *)(a1 + 40)));
      v111 = v80;
      v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v111, 1));

      v82 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v20 + 230), v105, v81);
      v83 = sub_10002E954((_BOOL8)v4, v82, v7);

      if (!v83)
      {
        v21 = 0;
        v53 = v81;
        goto LABEL_73;
      }
      v107 = v20 + 235;
      v84 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
      v110 = v84;
      v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v110, 1));

      v85 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v20 + 235), v49, v53);
      v86 = sub_10002E954((_BOOL8)v4, v85, v7);

      if (v86)
      {
        v60 = (void *)v104;
        if (v104)
        {
          v87 = objc_alloc((Class)NEPolicy);
          v88 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v109 = v88;
          v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v109, 1));
          v90 = objc_msgSend(v87, "initWithOrder:result:conditions:", v100, v104, v89);
          sub_10002E954((_BOOL8)v4, v90, v7);

        }
        v73 = v106;
        if (v106)
        {
          v91 = objc_alloc((Class)NEPolicy);
          v75 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v108 = v75;
          v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v108, 1));
          v77 = objc_msgSend(v91, "initWithOrder:result:conditions:", v101, v106, v76);
          goto LABEL_67;
        }
LABEL_75:
        v92 = v103;
LABEL_76:
        v94 = sub_10002D308(v4);
        if ((_DWORD)v94)
        {
          v95 = ne_log_large_obj(v94);
          v96 = objc_claimAutoreleasedReturnValue(v95);
          if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
          {
            v98 = *(_QWORD *)(a1 + 40);
            *(_DWORD *)buf = 138412546;
            v120 = v98;
            v121 = 2112;
            v122 = v7;
            _os_log_debug_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEBUG, "Policy IDs added %@: %@", buf, 0x16u);
          }

          v21 = 1;
        }
        else
        {
          v21 = 0;
        }
        goto LABEL_81;
      }
    }
    v21 = 0;
LABEL_73:
    v92 = v103;
    v60 = (void *)v104;
    v73 = v106;
    goto LABEL_81;
  }
  v21 = 0;
LABEL_82:

  return v21;
}

uint64_t sub_1000439F4(_DWORD *a1, void *a2, void *a3, int a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  id v15;
  void *v16;
  id v17;
  SEL v18;
  SEL v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  SEL v23;
  id Property;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  uint8_t v32[16];
  uint8_t buf[4];
  id v34;
  __int16 v35;
  void *v36;

  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = v11;
  v13 = 0;
  if (a1 && v11)
  {
    if (isa_nsstring(v9) && a1[2] == 3)
    {
      v15 = objc_msgSend(objc_getProperty(a1, v14, 224, 1), "objectForKeyedSubscript:", v9);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      if (!v16)
      {
        v17 = objc_alloc_init((Class)NSMutableArray);
        objc_msgSend(objc_getProperty(a1, v18, 224, 1), "setObject:forKeyedSubscript:", v17, v9);

        v20 = objc_msgSend(objc_getProperty(a1, v19, 224, 1), "objectForKeyedSubscript:", v9);
        v16 = (void *)objc_claimAutoreleasedReturnValue(v20);
      }
      v21 = ne_log_large_obj();
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        v34 = v9;
        v35 = 2112;
        v36 = v16;
        _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Application Exception Tunnel Policy IDs to be removed %@: %@", buf, 0x16u);
      }

      sub_10002D1B0(v12, v16);
      if (v10
        && objc_msgSend(v10, "count")
        && (*(_DWORD *)buf = sub_10002EDB4((uint64_t)a1) + 170,
            Property = objc_getProperty(v12, v23, 16, 1),
            v25 = sub_100055DB0(Property, (unsigned int *)buf, v10, v9, 200, a4, v16),
            (v25 & 1) == 0))
      {
        v29 = ne_log_obj(v25, v26);
        v30 = objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v32 = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Failed to add application exceptions", v32, 2u);
        }

      }
      else if (sub_10002D308(v12))
      {
        v27 = ne_log_large_obj();
        v28 = objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412546;
          v34 = v9;
          v35 = 2112;
          v36 = v16;
          _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Application Exception Tunnel Policy IDs added %@: %@", buf, 0x16u);
        }

        v13 = 1;
        goto LABEL_21;
      }
      v13 = 0;
LABEL_21:

      goto LABEL_22;
    }
    v13 = 0;
  }
LABEL_22:

  return v13;
}

uint64_t sub_100043CB0(uint64_t a1, void *a2)
{
  return sub_1000439F4(*(_DWORD **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), *(unsigned __int8 *)(a1 + 56), a2);
}

uint64_t sub_100043CC8(uint64_t a1, void *a2, int a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  int v23;

  v11 = a2;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  if (a1 && *(_DWORD *)(a1 + 8) == 6)
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100043DE8;
    v17[3] = &unk_1000BDEC8;
    v18 = v11;
    v19 = a1;
    v20 = v12;
    v21 = v13;
    v23 = a3;
    v22 = v14;
    v15 = sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v17);

  }
  else
  {
    v15 = 0;
  }

  return v15;
}

uint64_t sub_100043DE8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  const char *v11;
  void *v12;
  id v13;
  const char *v14;
  void *v15;
  id v16;
  const char *v17;
  id v18;
  id v19;
  const char *v20;
  id v21;
  id v22;
  char v23;
  uint64_t v24;
  const char *v25;
  id v26;
  const char *v27;
  id v28;
  id v29;
  void *v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  const char *v44;
  void *v45;
  id v46;
  void *v47;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  const char *v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  const char *v58;
  void *v59;
  id v60;
  void *v61;
  id v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  id v67;
  const char *v68;
  id v69;
  void *v70;
  id v71;
  char v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  id v78;
  void *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  id Property;
  id v89;
  uint64_t isKindOfClass;
  _UNKNOWN **v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  const char *v95;
  id v96;
  id v97;
  uint64_t v98;
  void *i;
  void *v100;
  id v101;
  void *v102;
  id v103;
  id v104;
  id v105;
  uint64_t v106;
  void *v107;
  void *v108;
  id v109;
  void *v110;
  id v111;
  const char *v112;
  void *v113;
  id v114;
  id v115;
  uint64_t v116;
  id v117;
  void *v118;
  id v119;
  const char *v120;
  void *v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  const char *v129;
  id v130;
  void *v131;
  id v132;
  id v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  NSObject *v138;
  _BOOL4 v139;
  uint64_t v140;
  void *v141;
  void *v142;
  id v143;
  uint64_t v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  const char *v151;
  id v152;
  const char *v153;
  id v154;
  void *v155;
  id v156;
  const char *v157;
  void *v158;
  id v159;
  void *v160;
  const char *v161;
  void *v162;
  void *v163;
  id v164;
  void *v165;
  void *v166;
  const char *v167;
  void *v168;
  void *v169;
  id v170;
  id v171;
  id v172;
  void *v173;
  void *v174;
  void *v175;
  id v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  id v182;
  void *v183;
  void *v184;
  int v185;
  id v186;
  id obja;
  _UNKNOWN **obj;
  NSObject *log;
  os_log_t v190;
  _QWORD v191[4];
  id v192;
  id v193;
  id v194;
  uint64_t v195;
  int v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  unsigned int v205;
  _QWORD v206[2];
  void *v207;
  _QWORD v208[2];
  _QWORD v209[2];
  _QWORD v210[2];
  _BYTE v211[128];
  _BYTE v212[128];
  NSObject *v213;
  _QWORD v214[2];
  _QWORD v215[2];
  uint8_t buf[4];
  const char *v217;
  __int16 v218;
  id v219;

  v3 = a2;
  v5 = v3;
  if (*(_QWORD *)(a1 + 32))
  {
    v6 = sub_10002EDB4(*(_QWORD *)(a1 + 40));
    v7 = v6;
    v8 = ne_log_large_obj(v6);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      Property = *(id *)(a1 + 40);
      if (Property)
        Property = objc_getProperty(Property, v10, 48, 1);
      *(_DWORD *)buf = 136315394;
      v217 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBundleIDs:l"
             "imitToProcess:perApp:]_block_invoke";
      v218 = 2112;
      v219 = Property;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s: Policy IDs to be removed: %@", buf, 0x16u);
    }

    v12 = *(void **)(a1 + 40);
    if (v12)
      v13 = objc_getProperty(v12, v11, 48, 1);
    else
      v13 = 0;
    sub_10002D1B0(v5, v13);
    v15 = *(void **)(a1 + 40);
    if (v15)
      v16 = objc_getProperty(v15, v14, 56, 1);
    else
      v16 = 0;
    sub_10002DA24(v5, v16);
    v190 = (os_log_t)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", (v7 + 150)));
    v205 = v7 + 20;
    v18 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/usr/libexec/captiveagent"));
    if (v18)
    {
      if (v5)
        v19 = objc_getProperty(v5, v17, 16, 1);
      else
        v19 = 0;
      v21 = v19;
      v22 = *(id *)(a1 + 40);
      if (v22)
        v22 = objc_getProperty(v22, v20, 48, 1);
      v23 = sub_100054014(v21, &v205, 0, 0, v18, 0, 0, 0, 0, 1, 0, v190, 0, 0, v22);

      if ((v23 & 1) != 0)
      {
        if (v5)
          v26 = objc_getProperty(v5, v25, 16, 1);
        else
          v26 = 0;
        v28 = v26;
        v29 = *(id *)(a1 + 40);
        v30 = *(void **)(a1 + 48);
        if (v29)
          v29 = objc_getProperty(v29, v27, 48, 1);
        v31 = sub_10005811C(v28, v30, &v205, 1, 1, 0, v190, 0, v29, 0, 0);

        if (v31)
        {
          v182 = v18;
          v34 = (v7 + 120);
          v185 = v7;
          v35 = (v7 + 130);
          v36 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v37 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", CFSTR("0.0.0.0"), CFSTR("53")));
          v38 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:", v37, 0));

          v39 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v35));
          v40 = objc_alloc((Class)NEPolicy);
          log = v36;
          v215[0] = v36;
          v215[1] = v38;
          v41 = (void *)v39;
          v181 = (void *)v38;
          v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v215, 2));
          v43 = objc_msgSend(v40, "initWithOrder:result:conditions:", v34, v41, v42);

          v45 = *(void **)(a1 + 40);
          if (v45)
            v46 = objc_getProperty(v45, v44, 48, 1);
          else
            v46 = 0;
          v179 = v43;
          sub_10002E954((_BOOL8)v5, v43, v46);
          v47 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", CFSTR("::"), CFSTR("53")));
          v48 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:", v47, 0));

          v49 = objc_alloc((Class)NEPolicy);
          v214[0] = log;
          v214[1] = v48;
          v178 = (void *)v48;
          v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v214, 2));
          v51 = objc_msgSend(v49, "initWithOrder:result:conditions:", v34, v41, v50);

          v53 = *(void **)(a1 + 40);
          if (v53)
            v54 = objc_getProperty(v53, v52, 48, 1);
          else
            v54 = 0;
          sub_10002E954((_BOOL8)v5, v51, v54);
          v55 = objc_alloc((Class)NEPolicy);
          v213 = log;
          v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v213, 1));
          v57 = objc_msgSend(v55, "initWithOrder:result:conditions:", v34, v190, v56);

          v59 = *(void **)(a1 + 40);
          v180 = v41;
          if (v59)
            v60 = objc_getProperty(v59, v58, 48, 1);
          else
            v60 = 0;
          v176 = v57;
          v177 = v51;
          sub_10002E954((_BOOL8)v5, v57, v60);
          v61 = v5;
          if (!*(_QWORD *)(a1 + 56) && *(_QWORD *)(a1 + 32))
          {
            v62 = objc_alloc((Class)NSArray);
            obja = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
            v63 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", obja));
            v64 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:version:](NEPolicyCondition, "effectivePID:version:", objc_msgSend(*(id *)(a1 + 32), "pid"), objc_msgSend(*(id *)(a1 + 32), "pidVersion")));
            v65 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition delegateIsPlatformBinary](NEPolicyCondition, "delegateIsPlatformBinary"));
            v66 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v67 = objc_msgSend(v62, "initWithObjects:", v63, v64, v65, v66, 0);

            v69 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v35, v190, v67);
            v70 = *(void **)(a1 + 40);
            if (v70)
              v71 = objc_getProperty(v70, v68, 48, 1);
            else
              v71 = 0;
            sub_10002E954((_BOOL8)v61, v69, v71);
            v72 = 1;
            do
            {
              v73 = v72;
              if ((v72 & 1) != 0)
                v74 = 10000;
              else
                v74 = 15500;
              if (*(_QWORD *)(a1 + 40))
                v75 = v74;
              else
                v75 = 0;
              v76 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", (v75 + 800)));
              v78 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v75, v76, v67);
              v79 = *(void **)(a1 + 40);
              if (v79)
                v80 = objc_getProperty(v79, v77, 48, 1);
              else
                v80 = 0;
              sub_10002E954((_BOOL8)v61, v78, v80);

              v72 = 0;
            }
            while ((v73 & 1) != 0);

          }
          v89 = objc_alloc_init((Class)NSMutableArray);
          isKindOfClass = NEResourcesCopyContentFilterExclusionList();
          v91 = (_UNKNOWN **)isKindOfClass;
          if (!isKindOfClass
            || (v92 = objc_opt_class(NSArray),
                isKindOfClass = objc_opt_isKindOfClass(v91, v92),
                (isKindOfClass & 1) == 0))
          {
            v93 = ne_log_large_obj(isKindOfClass);
            v94 = objc_claimAutoreleasedReturnValue(v93);
            if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
            {
              v171 = *(id *)(a1 + 40);
              if (v171)
                v171 = objc_getProperty(v171, v95, 48, 1);
              *(_DWORD *)buf = 138412290;
              v217 = (const char *)v171;
              _os_log_error_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_ERROR, "Content filter exclusion list not found: %@", buf, 0xCu);
            }

            v91 = &off_1000C1588;
          }
          v203 = 0u;
          v204 = 0u;
          v201 = 0u;
          v202 = 0u;
          obj = v91;
          v96 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v201, v212, 16);
          if (v96)
          {
            v97 = v96;
            v98 = *(_QWORD *)v202;
            do
            {
              for (i = 0; i != v97; i = (char *)i + 1)
              {
                if (*(_QWORD *)v202 != v98)
                  objc_enumerationMutation(obj);
                v100 = *(void **)(*((_QWORD *)&v201 + 1) + 8 * (_QWORD)i);
                if ((objc_msgSend(v100, "isEqualToString:", CFSTR("/usr/sbin/mDNSResponder")) & 1) == 0)
                {
                  v101 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", v100);
                  v102 = v101;
                  if (v101 && objc_msgSend(v101, "count"))
                    objc_msgSend(v89, "addObjectsFromArray:", v102);

                }
              }
              v97 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v201, v212, 16);
            }
            while (v97);
          }

          v199 = 0u;
          v200 = 0u;
          v197 = 0u;
          v198 = 0u;
          v103 = v89;
          v104 = objc_msgSend(v103, "countByEnumeratingWithState:objects:count:", &v197, v211, 16);
          if (v104)
          {
            v105 = v104;
            v106 = *(_QWORD *)v198;
            do
            {
              v107 = 0;
              do
              {
                if (*(_QWORD *)v198 != v106)
                  objc_enumerationMutation(v103);
                v108 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", *(_QWORD *)(*((_QWORD *)&v197 + 1) + 8 * (_QWORD)v107)));
                v109 = objc_alloc((Class)NEPolicy);
                v210[0] = log;
                v210[1] = v108;
                v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v210, 2));
                v111 = objc_msgSend(v109, "initWithOrder:result:conditions:", v35, v190, v110);

                v113 = *(void **)(a1 + 40);
                if (v113)
                  v114 = objc_getProperty(v113, v112, 48, 1);
                else
                  v114 = 0;
                sub_10002E954((_BOOL8)v61, v111, v114);

                v107 = (char *)v107 + 1;
              }
              while (v105 != v107);
              v115 = objc_msgSend(v103, "countByEnumeratingWithState:objects:count:", &v197, v211, 16);
              v105 = v115;
            }
            while (v115);
          }

          v116 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", CFSTR("ipv4only.arpa")));
          v117 = objc_alloc((Class)NEPolicy);
          v209[0] = log;
          v209[1] = v116;
          v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v209, 2));
          v119 = objc_msgSend(v117, "initWithOrder:result:conditions:", v35, v190, v118);

          v121 = *(void **)(a1 + 40);
          v175 = (void *)v116;
          if (v121)
            v122 = objc_getProperty(v121, v120, 48, 1);
          else
            v122 = 0;
          v5 = v61;
          v18 = v182;
          v174 = v119;
          sub_10002E954((_BOOL8)v61, v119, v122);
          v172 = objc_alloc((Class)NEPolicy);
          if (*(_QWORD *)(a1 + 40))
            v123 = 18000;
          else
            v123 = 0;
          if (*(_QWORD *)(a1 + 40))
            v124 = 18120;
          else
            v124 = 0;
          v125 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v124));
          v183 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
          v126 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:"));
          v208[0] = v126;
          v127 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v208[1] = v127;
          v128 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v208, 2));
          v130 = objc_msgSend(v172, "initWithOrder:result:conditions:", v123, v125, v128);
          v131 = *(void **)(a1 + 40);
          if (v131)
            v132 = objc_getProperty(v131, v129, 48, 1);
          else
            v132 = 0;
          sub_10002E954((_BOOL8)v61, v130, v132);

          v133 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithObjects:", log, 0);
          v134 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition uid:](NEPolicyCondition, "uid:", 0));
          objc_msgSend(v134, "setNegative:", 1);
          objc_msgSend(v133, "addObject:", v134);
          v184 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult divertSocketToControlUnit:](NEPolicyResult, "divertSocketToControlUnit:", *(unsigned int *)(a1 + 72)));
          v135 = *(_QWORD *)(a1 + 64);
          v137 = ne_log_obj(v184, v136);
          v138 = objc_claimAutoreleasedReturnValue(v137);
          v139 = os_log_type_enabled(v138, OS_LOG_TYPE_DEBUG);
          v173 = v134;
          if (v135)
          {
            if (v139)
            {
              *(_DWORD *)buf = 136315138;
              v217 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBun"
                     "dleIDs:limitToProcess:perApp:]_block_invoke";
              _os_log_debug_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEBUG, "%s: Installing perApp DNSProxy policies", buf, 0xCu);
            }

            v140 = *(_QWORD *)(a1 + 40);
            v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "appRules"));
            v191[0] = _NSConcreteStackBlock;
            v191[1] = 3221225472;
            v191[2] = sub_100044E14;
            v191[3] = &unk_1000BDCC0;
            v192 = v133;
            v193 = v61;
            v196 = v185 + 140;
            v142 = v184;
            v143 = v184;
            v144 = *(_QWORD *)(a1 + 40);
            v194 = v143;
            v195 = v144;
            sub_10003248C(v140, v141, 0, 1, 0, 0, v191, 0);

            v145 = v133;
            v146 = v192;
            v147 = v181;
            v149 = v175;
            v148 = v176;
            v150 = v178;
          }
          else
          {
            if (v139)
            {
              *(_DWORD *)buf = 136315138;
              v217 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBun"
                     "dleIDs:limitToProcess:perApp:]_block_invoke";
              _os_log_debug_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEBUG, "%s: Installing DNSProxy policies", buf, 0xCu);
            }

            if (v61)
              v152 = objc_getProperty(v61, v151, 16, 1);
            else
              v152 = 0;
            v154 = v152;
            v155 = *(void **)(a1 + 40);
            if (v155)
              v156 = objc_getProperty(v155, v153, 48, 1);
            else
              v156 = 0;
            sub_10005B188(v154, v185 + 139, 0, v190, v156);

            v145 = v133;
            v186 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v185 + 140), v184, v133);
            v158 = *(void **)(a1 + 40);
            if (v158)
              v159 = objc_getProperty(v158, v157, 48, 1);
            else
              v159 = 0;
            sub_10002E954((_BOOL8)v5, v186, v159);
            v160 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v207 = v160;
            v162 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v207, 1));
            v163 = *(void **)(a1 + 40);
            if (v163)
              v164 = objc_getProperty(v163, v161, 56, 1);
            else
              v164 = 0;
            sub_10002E8B0((_BOOL8)v5, v162, v164);

            v165 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v206[0] = v165;
            v166 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddressEmpty](NEPolicyCondition, "flowRemoteAddressEmpty"));
            v206[1] = v166;
            v168 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v206, 2));
            v169 = *(void **)(a1 + 40);
            v147 = v181;
            if (v169)
              v170 = objc_getProperty(v169, v167, 56, 1);
            else
              v170 = 0;
            sub_10002E80C((_BOOL8)v5, v168, v170);

            v150 = v178;
            v149 = v175;
            v148 = v176;
            v142 = v184;
            v146 = v186;
          }

          v82 = sub_10002D308(v5);
          goto LABEL_51;
        }
        v86 = ne_log_obj(v32, v33);
        log = objc_claimAutoreleasedReturnValue(v86);
        if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          v217 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBundleI"
                 "Ds:limitToProcess:perApp:]_block_invoke";
          v84 = "%s: Captive app traffic exception policies failed";
          goto LABEL_49;
        }
LABEL_50:
        v82 = 0;
LABEL_51:

        goto LABEL_52;
      }
      v85 = ne_log_obj(v24, v25);
      log = objc_claimAutoreleasedReturnValue(v85);
      if (!os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
        goto LABEL_50;
      *(_DWORD *)buf = 136315138;
      v217 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBundleIDs:l"
             "imitToProcess:perApp:]_block_invoke";
      v84 = "%s: Captive agent traffic exception policies failed";
    }
    else
    {
      v83 = ne_log_obj(0, v17);
      log = objc_claimAutoreleasedReturnValue(v83);
      if (!os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
        goto LABEL_50;
      *(_DWORD *)buf = 136315138;
      v217 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBundleIDs:l"
             "imitToProcess:perApp:]_block_invoke";
      v84 = "%s: Failed to get UUIDs for captiveagent";
    }
LABEL_49:
    _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, v84, buf, 0xCu);
    goto LABEL_50;
  }
  v81 = ne_log_obj(v3, v4);
  v190 = (os_log_t)objc_claimAutoreleasedReturnValue(v81);
  if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v190, OS_LOG_TYPE_ERROR, "Cannot set policies for DNS Proxy provider, no process identity available for the provider", buf, 2u);
  }
  v82 = 0;
LABEL_52:

  return v82;
}

void sub_100044E14(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  id v13;
  void *v14;
  id Property;
  const char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  id v25;
  int v26;
  const char *v27;
  __int16 v28;
  void *v29;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = objc_msgSend(v3, "mutableCopy");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "arrayByAddingObjectsFromArray:", v4));

  v9 = ne_log_obj(v7, v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v26 = 136315394;
    v27 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBundleIDs:limi"
          "tToProcess:perApp:]_block_invoke";
    v28 = 2112;
    v29 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s: Installing perApp DNSProxy policy %@", (uint8_t *)&v26, 0x16u);
  }

  v11 = *(_QWORD *)(a1 + 40);
  v13 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 48), v6);
  v14 = *(void **)(a1 + 56);
  if (v14)
    Property = objc_getProperty(v14, v12, 48, 1);
  else
    Property = 0;
  sub_10002E954(v11, v13, Property);

  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(void **)(a1 + 56);
  if (v18)
    v19 = objc_getProperty(v18, v16, 56, 1);
  else
    v19 = 0;
  sub_10002E8B0(v17, v6, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddressEmpty](NEPolicyCondition, "flowRemoteAddressEmpty"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "arrayByAddingObject:", v20));

  v23 = *(_QWORD *)(a1 + 40);
  v24 = *(void **)(a1 + 56);
  if (v24)
    v25 = objc_getProperty(v24, v22, 56, 1);
  else
    v25 = 0;
  sub_10002E80C(v23, v21, v25);

}

uint64_t sub_100044FEC(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  void *v5;
  id Property;
  const char *v7;
  void *v8;
  id v9;
  _UNKNOWN **v10;
  id v11;
  id v12;
  id v13;
  char v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  const char *v26;
  void *v27;
  id v28;
  void *v29;
  const char *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  const char *v39;
  void *v40;
  id v41;
  void *v42;
  const char *v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  void *v58;
  void *v59;
  id v60;
  void *v61;
  void *v62;
  id v63;
  const char *v64;
  void *v65;
  id v66;
  id v67;
  void *v68;
  id v69;
  void *v70;
  void *v71;
  id v72;
  const char *v73;
  void *v74;
  id v75;
  id v76;
  const char *v77;
  uint64_t v78;
  NSObject *v79;
  const char *v80;
  id v81;
  id v82;
  uint64_t v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  id v89;
  void *v90;
  void *v91;
  id v92;
  const char *v93;
  void *v94;
  id v95;
  id v96;
  id v97;
  const char *v98;
  id v99;
  void *v100;
  id v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  uint64_t v107;
  id v109;
  void *v110;
  void *v111;
  void *v112;
  id v113;
  id obj;
  id obja;
  _BOOL8 v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  void *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  unsigned int v133;
  _QWORD v134[2];
  uint8_t v135[128];
  uint8_t buf[4];
  const char *v137;
  _QWORD v138[2];
  _QWORD v139[2];
  _BYTE v140[128];
  _QWORD v141[2];
  void *v142;
  _QWORD v143[3];
  _QWORD v144[2];
  _BYTE v145[128];

  v4 = a2;
  v5 = *(void **)(a1 + 32);
  if (v5)
    Property = objc_getProperty(v5, v3, 48, 1);
  else
    Property = 0;
  sub_10002D1B0(v4, Property);
  v8 = *(void **)(a1 + 32);
  if (v8)
    v9 = objc_getProperty(v8, v7, 56, 1);
  else
    v9 = 0;
  sub_10002DA24(v4, v9);
  v133 = sub_10002EDB4(*(_QWORD *)(a1 + 32));
  v118 = v133;
  v119 = v133 + 32;
  v10 = &AnalyticsSendEventLazy_ptr;
  v112 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", *(_QWORD *)(a1 + 40)));
  v111 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddressEmpty](NEPolicyCondition, "flowRemoteAddressEmpty"));
  v116 = (_BOOL8)v4;
  v117 = a1;
  if (!objc_msgSend(*(id *)(a1 + 48), "count"))
  {
LABEL_27:
    v35 = objc_alloc((Class)NEPolicy);
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    v142 = v36;
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v142, 1));
    v38 = objc_msgSend(v35, "initWithOrder:result:conditions:", v119, v112, v37);

    v40 = *(void **)(a1 + 32);
    if (v40)
      v41 = objc_getProperty(v40, v39, 48, 1);
    else
      v41 = 0;
    sub_10002E954((_BOOL8)v4, v38, v41);
    ++v119;
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    v141[0] = v42;
    v141[1] = v111;
    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v141, 2));
    v45 = *(void **)(a1 + 32);
    if (v45)
      v46 = objc_getProperty(v45, v43, 56, 1);
    else
      v46 = 0;
    sub_10002E80C((_BOOL8)v4, v44, v46);

    goto LABEL_32;
  }
  v131 = 0u;
  v132 = 0u;
  v129 = 0u;
  v130 = 0u;
  v11 = *(id *)(a1 + 48);
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v129, v145, 16);
  if (!v12)
  {

    goto LABEL_27;
  }
  v13 = v12;
  v14 = 0;
  v15 = *(_QWORD *)v130;
  do
  {
    v16 = 0;
    obj = v13;
    do
    {
      if (*(_QWORD *)v130 != v15)
        objc_enumerationMutation(v11);
      v17 = *(void **)(*((_QWORD *)&v129 + 1) + 8 * (_QWORD)v16);
      if (objc_msgSend(v17, "length"))
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("*.")));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "stringByTrimmingCharactersInSet:", v18));
        if (v19)
        {
          v20 = v11;
          v21 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v19));
          v22 = objc_alloc((Class)NEPolicy);
          v23 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v144[0] = v23;
          v144[1] = v21;
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v144, 2));
          v25 = objc_msgSend(v22, "initWithOrder:result:conditions:", v119, v112, v24);

          v27 = *(void **)(v117 + 32);
          if (v27)
            v28 = objc_getProperty(v27, v26, 48, 1);
          else
            v28 = 0;
          sub_10002E954(v116, v25, v28);
          v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v143[0] = v29;
          v143[1] = v21;
          v143[2] = v111;
          v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v143, 3));
          v32 = *(void **)(v117 + 32);
          if (v32)
            v33 = objc_getProperty(v32, v30, 56, 1);
          else
            v33 = 0;
          ++v119;
          sub_10002E80C(v116, v31, v33);

          v4 = (id)v116;
          v14 = 1;
          v11 = v20;
          v13 = obj;
        }

        a1 = v117;
      }
      v16 = (char *)v16 + 1;
    }
    while (v13 != v16);
    v34 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v129, v145, 16);
    v13 = v34;
  }
  while (v34);

  v10 = &AnalyticsSendEventLazy_ptr;
  if ((v14 & 1) == 0)
    goto LABEL_27;
LABEL_32:
  v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10[176], "skipWithOrder:", v119));
  v47 = objc_alloc_init((Class)NSMutableArray);
  v48 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/usr/libexec/configd"));
  objc_msgSend(v47, "addObjectsFromArray:", v48);

  v49 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/usr/libexec/captiveagent"));
  objc_msgSend(v47, "addObjectsFromArray:", v49);

  v50 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter"));
  objc_msgSend(v47, "addObjectsFromArray:", v50);

  v51 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/Applications/InCallService.app/InCallService"));
  objc_msgSend(v47, "addObjectsFromArray:", v51);

  v52 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenterMobileHelper"));
  objc_msgSend(v47, "addObjectsFromArray:", v52);

  v53 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("569F2700-CAF9-483D-B19D-7AF406DCE15E"));
  objc_msgSend(v47, "addObject:", v53);

  v54 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("67A03811-DB0A-594E-C2AE-8B0517EDF26F"));
  objc_msgSend(v47, "addObject:", v54);

  v127 = 0u;
  v128 = 0u;
  v125 = 0u;
  v126 = 0u;
  obja = v47;
  v55 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v125, v140, 16);
  if (v55)
  {
    v56 = v55;
    v57 = *(_QWORD *)v126;
    do
    {
      v58 = 0;
      do
      {
        if (*(_QWORD *)v126 != v57)
          objc_enumerationMutation(obja);
        v59 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", *(_QWORD *)(*((_QWORD *)&v125 + 1) + 8 * (_QWORD)v58)));
        v60 = objc_alloc((Class)NEPolicy);
        v61 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        v139[0] = v61;
        v139[1] = v59;
        v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v139, 2));
        v63 = objc_msgSend(v60, "initWithOrder:result:conditions:", v118, v120, v62);

        v65 = *(void **)(a1 + 32);
        if (v65)
          v66 = objc_getProperty(v65, v64, 48, 1);
        else
          v66 = 0;
        sub_10002E954((_BOOL8)v4, v63, v66);

        v58 = (char *)v58 + 1;
      }
      while (v56 != v58);
      v67 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v125, v140, 16);
      v56 = v67;
    }
    while (v67);
  }

  v68 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", CFSTR("ipv4only.arpa")));
  v69 = objc_alloc((Class)NEPolicy);
  v70 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
  v138[0] = v70;
  v138[1] = v68;
  v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v138, 2));
  v72 = objc_msgSend(v69, "initWithOrder:result:conditions:", v118, v120, v71);

  v74 = *(void **)(a1 + 32);
  if (v74)
    v75 = objc_getProperty(v74, v73, 48, 1);
  else
    v75 = 0;
  sub_10002E954((_BOOL8)v4, v72, v75);
  v76 = objc_msgSend(*(id *)(a1 + 56), "count");
  if (v76)
  {
    v109 = v72;
    v110 = v68;
    v78 = ne_log_obj(v76, v77);
    v79 = objc_claimAutoreleasedReturnValue(v78);
    if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
    {
      v80 = *(const char **)(a1 + 56);
      *(_DWORD *)buf = 138412290;
      v137 = v80;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_INFO, "Excluding domains from DNS settings: %@", buf, 0xCu);
    }

    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v113 = *(id *)(a1 + 56);
    v81 = objc_msgSend(v113, "countByEnumeratingWithState:objects:count:", &v121, v135, 16);
    if (v81)
    {
      v82 = v81;
      v83 = *(_QWORD *)v122;
      do
      {
        v84 = 0;
        do
        {
          if (*(_QWORD *)v122 != v83)
            objc_enumerationMutation(v113);
          v85 = *(void **)(*((_QWORD *)&v121 + 1) + 8 * (_QWORD)v84);
          v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("*.")));
          v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "stringByTrimmingCharactersInSet:", v86));
          if (v87)
          {
            v88 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v87));
            v89 = objc_alloc((Class)NEPolicy);
            v90 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v134[0] = v90;
            v134[1] = v88;
            v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v134, 2));
            v92 = objc_msgSend(v89, "initWithOrder:result:conditions:", v118, v120, v91);

            a1 = v117;
            v94 = *(void **)(v117 + 32);
            if (v94)
              v95 = objc_getProperty(v94, v93, 48, 1);
            else
              v95 = 0;
            sub_10002E954(v116, v92, v95);

          }
          v84 = (char *)v84 + 1;
        }
        while (v82 != v84);
        v96 = objc_msgSend(v113, "countByEnumeratingWithState:objects:count:", &v121, v135, 16);
        v82 = v96;
      }
      while (v96);
    }

    v4 = (id)v116;
    v72 = v109;
    v68 = v110;
  }
  if (v4)
    v97 = objc_getProperty(v4, v77, 16, 1);
  else
    v97 = 0;
  v99 = v97;
  v100 = *(void **)(a1 + 64);
  v101 = *(id *)(a1 + 32);
  if (v101)
    v101 = objc_getProperty(v101, v98, 48, 1);
  v102 = sub_10005811C(v99, v100, &v133, 1, 1, 0, v120, 0, v101, 0, 0);

  if (!v102)
  {
    v105 = ne_log_obj(v103, v104);
    v106 = objc_claimAutoreleasedReturnValue(v105);
    if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v137 = "-[NESMPolicySession setPoliciesForDNSSettingsWithAgentUUID:matchDomains:exceptionDomains:captiveNetworkPlug"
             "inBundleIDs:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_ERROR, "%s: Captive app traffic exception policies failed", buf, 0xCu);
    }

  }
  v107 = sub_10002D308(v4);

  return v107;
}

uint64_t sub_100045A58(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7;
  id v8;
  uint64_t v9;
  _QWORD v11[5];
  id v12;
  id v13;
  char v14;

  v7 = a2;
  v8 = a3;
  if (a1)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100045B28;
    v11[3] = &unk_1000BDEA0;
    v11[4] = a1;
    v12 = v7;
    v14 = a4;
    v13 = v8;
    v9 = sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v11);

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

uint64_t sub_100045B28(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  const char *v10;
  void *v11;
  id v12;
  _BOOL8 v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  const char *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  const char *v28;
  void *v29;
  id v30;
  const char *v31;
  void *v32;
  void *v33;
  id v34;
  int v35;
  id v36;
  id v37;
  id v38;
  char v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  const char *v47;
  void *v48;
  id v49;
  const char *v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  const char *v56;
  id v57;
  void *v58;
  id v59;
  const char *v60;
  void *v61;
  void *v62;
  id v63;
  uint64_t v64;
  NSObject *v65;
  const char *v66;
  uint64_t v67;
  id Property;
  id v70;
  id v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  void *v77;
  void *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  void *v83;
  _QWORD v84[2];
  void *v85;
  _BYTE v86[128];
  _QWORD v87[2];
  void *v88;
  uint8_t buf[4];
  id v90;
  __int16 v91;
  uint64_t v92;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32))
    v5 = 19499;
  else
    v5 = 0;
  v76 = v5;
  if (*(_QWORD *)(a1 + 32))
    v6 = 19999;
  else
    v6 = 0;
  v7 = ne_log_large_obj(v3);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v9, 120, 1);
    *(_DWORD *)buf = 138412290;
    v90 = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Skip policy IDs to be removed %@", buf, 0xCu);
  }

  v11 = *(void **)(a1 + 32);
  if (v11)
    v12 = objc_getProperty(v11, v10, 120, 1);
  else
    v12 = 0;
  v13 = sub_10002D1B0(v4, v12);
  v14 = ne_log_large_obj(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    v70 = *(id *)(a1 + 32);
    if (v70)
      v70 = objc_getProperty(v70, v16, 128, 1);
    *(_DWORD *)buf = 138412290;
    v90 = v70;
    _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Low skip policy IDs to be removed %@", buf, 0xCu);
  }

  v18 = ne_log_large_obj(v17);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    v71 = *(id *)(a1 + 32);
    if (v71)
    {
      v71 = objc_getProperty(v71, v20, 128, 1);
      v72 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      v72 = 0;
    }
    *(_DWORD *)buf = 138412546;
    v90 = v71;
    v91 = 2048;
    v92 = v72;
    _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Removing low skip policy IDs: %@ (self %p)", buf, 0x16u);
  }

  v22 = *(void **)(a1 + 32);
  if (v22)
    v23 = objc_getProperty(v22, v21, 128, 1);
  else
    v23 = 0;
  sub_10002DA24(v4, v23);
  v78 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v6));
  v77 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddressEmpty](NEPolicyCondition, "flowRemoteAddressEmpty"));
  if (*(_QWORD *)(a1 + 40))
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:"));
    v25 = objc_alloc((Class)NEPolicy);
    v88 = v24;
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v88, 1));
    v27 = objc_msgSend(v25, "initWithOrder:result:conditions:", v76, v78, v26);

    v29 = *(void **)(a1 + 32);
    if (v29)
      v30 = objc_getProperty(v29, v28, 120, 1);
    else
      v30 = 0;
    sub_10002E954((_BOOL8)v4, v27, v30);
    v87[0] = v24;
    v87[1] = v77;
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v87, 2));
    v33 = *(void **)(a1 + 32);
    if (v33)
      v34 = objc_getProperty(v33, v31, 128, 1);
    else
      v34 = 0;
    sub_10002E80C((_BOOL8)v4, v32, v34);

  }
  v35 = *(unsigned __int8 *)(a1 + 56);
  if ((objc_msgSend(*(id *)(a1 + 48), "containsObject:", &stru_1000BF2E8) & 1) != 0)
    goto LABEL_41;
  v75 = v35;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v36 = *(id *)(a1 + 48);
  v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v79, v86, 16);
  if (v37)
  {
    v38 = v37;
    v39 = 0;
    v40 = *(_QWORD *)v80;
    do
    {
      v41 = 0;
      do
      {
        if (*(_QWORD *)v80 != v40)
          objc_enumerationMutation(v36);
        v42 = *(void **)(*((_QWORD *)&v79 + 1) + 8 * (_QWORD)v41);
        if (objc_msgSend(v42, "length"))
        {
          v43 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v42));
          v44 = objc_alloc((Class)NEPolicy);
          v85 = v43;
          v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v85, 1));
          v46 = objc_msgSend(v44, "initWithOrder:result:conditions:", v76, v78, v45);

          v48 = *(void **)(a1 + 32);
          if (v48)
            v49 = objc_getProperty(v48, v47, 120, 1);
          else
            v49 = 0;
          sub_10002E954((_BOOL8)v4, v46, v49);
          v84[0] = v43;
          v84[1] = v77;
          v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v84, 2));
          v52 = *(void **)(a1 + 32);
          if (v52)
            v53 = objc_getProperty(v52, v50, 128, 1);
          else
            v53 = 0;
          sub_10002E80C((_BOOL8)v4, v51, v53);

          v39 = 1;
        }
        v41 = (char *)v41 + 1;
      }
      while (v38 != v41);
      v54 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v79, v86, 16);
      v38 = v54;
    }
    while (v54);
  }
  else
  {
    v39 = 0;
  }

  if (v75)
  {
    if ((v39 & 1) == 0)
    {
LABEL_41:
      v57 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v76, v78, &__NSArray0__struct);
      v58 = *(void **)(a1 + 32);
      if (v58)
        v59 = objc_getProperty(v58, v56, 120, 1);
      else
        v59 = 0;
      sub_10002E954((_BOOL8)v4, v57, v59);
      v83 = v77;
      v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v83, 1));
      v62 = *(void **)(a1 + 32);
      if (v62)
        v63 = objc_getProperty(v62, v60, 128, 1);
      else
        v63 = 0;
      sub_10002E80C((_BOOL8)v4, v61, v63);

    }
  }
  v64 = ne_log_large_obj(v55);
  v65 = objc_claimAutoreleasedReturnValue(v64);
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
  {
    v73 = *(id *)(a1 + 32);
    if (v73)
    {
      v73 = objc_getProperty(v73, v66, 128, 1);
      v74 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      v74 = 0;
    }
    *(_DWORD *)buf = 138412546;
    v90 = v73;
    v91 = 2048;
    v92 = v74;
    _os_log_debug_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "Adding low skip policy IDs: %@ (self %p)", buf, 0x16u);
  }

  v67 = sub_10002D308(v4);
  return v67;
}

void sub_100046178(void *a1, int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, unsigned int a11)
{
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  _UNKNOWN **v21;
  _UNKNOWN **v22;
  uint64_t v23;
  NSObject *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *i;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *address_from_string;
  void *v35;
  void *v36;
  int v37;
  uint64_t v38;
  void *v39;
  unsigned int v40;
  int v41;
  void *v42;
  void *v43;
  uint64_t v44;
  id v45;
  SEL v46;
  id Property;
  id v48;
  id v49;
  id v50;
  char v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  int v61;
  uint64_t v62;
  void *v63;
  unsigned int v64;
  int v65;
  void *v66;
  void *v67;
  uint64_t v68;
  id v69;
  SEL v70;
  id v71;
  id v72;
  SEL v73;
  id v74;
  id v75;
  SEL v76;
  id v77;
  id v78;
  SEL v79;
  id v80;
  void *v81;
  void *v82;
  uint64_t v83;
  id v84;
  SEL v85;
  id v86;
  id v87;
  SEL v88;
  id v89;
  id v90;
  SEL v91;
  id v92;
  id v94;
  id v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id obj;
  id v103;
  id self;
  _BOOL8 v105;
  id v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  void *v115;
  _QWORD v116[2];
  _BYTE v117[128];
  _QWORD v118[2];
  uint8_t v119[128];
  uint8_t buf[4];
  id v121;

  v94 = a3;
  v95 = a4;
  v106 = a5;
  v17 = a6;
  v103 = a7;
  v100 = a8;
  v99 = a9;
  v98 = a10;
  if (!a1)
    goto LABEL_59;
  v18 = a1;
  v19 = objc_msgSend(v95, "count");
  v21 = &AnalyticsSendEventLazy_ptr;
  v22 = &AnalyticsSendEventLazy_ptr;
  self = a1;
  v105 = (_BOOL8)v17;
  if (v19)
  {
    v23 = ne_log_obj(v19, v20);
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v121 = v95;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Excluding domains from relay: %@", buf, 0xCu);
    }

    v113 = 0u;
    v114 = 0u;
    v111 = 0u;
    v112 = 0u;
    obj = v95;
    v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v111, v119, 16);
    if (v25)
    {
      v26 = v25;
      v27 = *(_QWORD *)v112;
      do
      {
        for (i = 0; i != v26; i = (char *)i + 1)
        {
          if (*(_QWORD *)v112 != v27)
            objc_enumerationMutation(obj);
          v29 = *(void **)(*((_QWORD *)&v111 + 1) + 8 * (_QWORD)i);
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("*.")));
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "stringByTrimmingCharactersInSet:", v30));
          v32 = v31;
          if (v31)
          {
            buf[0] = 0;
            v33 = objc_retainAutorelease(v31);
            address_from_string = (void *)nw_endpoint_create_address_from_string(objc_msgSend(v33, "UTF8String"), "0", buf);
            if (address_from_string)
            {
              v35 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithCEndpoint:](NWAddressEndpoint, "endpointWithCEndpoint:", address_from_string));
              v36 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddress:prefix:](NEPolicyCondition, "flowRemoteAddress:prefix:", v35, buf[0]));
              v37 = buf[0];
              if (buf[0] >= 0x81u)
              {
                v37 = 128;
                buf[0] = 0x80;
              }
              v38 = (a2 + 266 - 2 * v37);

            }
            else
            {
              v36 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v33));
              v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "componentsSeparatedByString:", CFSTR(".")));
              v40 = objc_msgSend(v39, "count");

              v41 = 4 - 2 * v40;
              if (v40 > 7)
                v41 = -10;
              if (v40 < 3)
                v41 = 0;
              v38 = (a2 + 10 + v41);
            }
            v42 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v118[0] = v42;
            v118[1] = v36;
            v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v118, 2));

            if (v106)
            {
              v44 = objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "arrayByAddingObjectsFromArray:"));

              v43 = (void *)v44;
            }
            v45 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v38, v103, v43);
            Property = objc_getProperty(self, v46, 48, 1);
            sub_10002E954(v105, v45, Property);

            v21 = &AnalyticsSendEventLazy_ptr;
          }

        }
        v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v111, v119, 16);
      }
      while (v26);
    }

    v18 = self;
    v17 = (id)v105;
    v22 = &AnalyticsSendEventLazy_ptr;
  }
  if (!objc_msgSend(v94, "count"))
    goto LABEL_54;
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  v48 = v94;
  v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v107, v117, 16);
  if (!v49)
  {

LABEL_54:
    v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21[175], "allInterfaces"));
    v115 = v81;
    v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v115, 1));

    if (v106)
    {
      v83 = objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "arrayByAddingObjectsFromArray:"));

      v82 = (void *)v83;
    }
    v84 = objc_msgSend(objc_alloc((Class)v22[174]), "initWithOrder:result:conditions:", (a2 + 266), v100, v82);
    v86 = objc_getProperty(v18, v85, 48, 1);
    sub_10002E954((_BOOL8)v17, v84, v86);

    if (v99)
    {
      v87 = objc_msgSend(objc_alloc((Class)v22[174]), "initWithOrder:result:conditions:", (a2 + 266), v99, v82);
      v89 = objc_getProperty(v18, v88, 48, 1);
      sub_10002E954((_BOOL8)v17, v87, v89);

    }
    v90 = objc_msgSend(objc_alloc((Class)v22[174]), "initWithOrder:result:conditions:", a11, v98, v82);
    v92 = objc_getProperty(v18, v91, 48, 1);
    sub_10002E954((_BOOL8)v17, v90, v92);

    goto LABEL_59;
  }
  v50 = v49;
  v51 = 0;
  v52 = *(_QWORD *)v108;
  v96 = *(_QWORD *)v108;
  v97 = v48;
  do
  {
    v53 = 0;
    v101 = v50;
    do
    {
      if (*(_QWORD *)v108 != v52)
        objc_enumerationMutation(v48);
      v54 = *(void **)(*((_QWORD *)&v107 + 1) + 8 * (_QWORD)v53);
      if (objc_msgSend(v54, "length"))
      {
        v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("*.")));
        v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "stringByTrimmingCharactersInSet:", v55));
        v57 = v56;
        if (v56)
        {
          buf[0] = 0;
          v58 = (void *)nw_endpoint_create_address_from_string(objc_msgSend(v56, "UTF8String"), "0", buf);
          if (v58)
          {
            v59 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithCEndpoint:](NWAddressEndpoint, "endpointWithCEndpoint:", v58));
            v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21[175], "flowRemoteAddress:prefix:", v59, buf[0]));
            v61 = buf[0];
            if (buf[0] >= 0x81u)
            {
              v61 = 128;
              buf[0] = 0x80;
            }
            v62 = (a2 + 266 - 2 * v61);

          }
          else
          {
            v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21[175], "domain:", v57));
            v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "componentsSeparatedByString:", CFSTR(".")));
            v64 = objc_msgSend(v63, "count");

            v65 = 4 - 2 * v64;
            if (v64 > 7)
              v65 = -10;
            if (v64 < 3)
              v65 = 0;
            v62 = (a2 + 10 + v65);
          }
          v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21[175], "allInterfaces"));
          v116[0] = v66;
          v116[1] = v60;
          v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v116, 2));

          if (v106)
          {
            v68 = objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "arrayByAddingObjectsFromArray:"));

            v67 = (void *)v68;
          }
          v69 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v62, v100, v67);
          v71 = objc_getProperty(self, v70, 48, 1);
          sub_10002E954(v105, v69, v71);

          if (v99)
          {
            v72 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v62, v99, v67);
            v74 = objc_getProperty(self, v73, 48, 1);
            sub_10002E954(v105, v72, v74);

          }
          v75 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v62 + 1), v103, v67);
          v51 = 1;
          v77 = objc_getProperty(self, v76, 48, 1);
          sub_10002E954(v105, v75, v77);

          v78 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", a11, v98, v67);
          v80 = objc_getProperty(self, v79, 48, 1);
          sub_10002E954(v105, v78, v80);

          v21 = &AnalyticsSendEventLazy_ptr;
          v52 = v96;
          v48 = v97;
          v50 = v101;
        }

      }
      v53 = (char *)v53 + 1;
    }
    while (v50 != v53);
    v50 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v107, v117, 16);
  }
  while (v50);

  v18 = self;
  v17 = (id)v105;
  v22 = &AnalyticsSendEventLazy_ptr;
  if ((v51 & 1) == 0)
    goto LABEL_54;
LABEL_59:

}

uint64_t sub_1000469F8(_QWORD *a1, void *a2)
{
  const char *v3;
  id v4;
  void *v5;
  id Property;
  const char *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  const char *v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  const char *v40;
  void *v41;
  id v42;
  void *v43;
  const char *v44;
  id v45;
  const char *v46;
  id v47;
  id v48;
  void *v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  id v61;
  const char *v62;
  _QWORD *v63;
  void *v64;
  id v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  id v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  id v83;
  const char *v84;
  void *v85;
  id v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  void *v92;
  void *v93;
  void *v94;
  id v95;
  void *v96;
  id v97;
  void *v98;
  id obj;
  void *v100;
  unsigned int v101;
  _QWORD v102[5];
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  unsigned int v110;
  unsigned int v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  unsigned int v116;
  _QWORD v117[2];
  _QWORD v118[3];
  uint8_t buf[4];
  const char *v120;
  _QWORD v121[2];
  _QWORD v122[2];
  _BYTE v123[128];

  v4 = a2;
  v5 = (void *)a1[4];
  if (v5)
    Property = objc_getProperty(v5, v3, 48, 1);
  else
    Property = 0;
  sub_10002D1B0(v4, Property);
  v8 = (void *)a1[4];
  if (v8)
    v9 = objc_getProperty(v8, v7, 56, 1);
  else
    v9 = 0;
  v10 = v4;
  sub_10002DA24(v4, v9);
  v116 = sub_10002EDB4(a1[4]);
  v101 = v116;
  v100 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v116 + 573));
  v11 = objc_alloc_init((Class)NSMutableArray);
  v12 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/usr/libexec/configd"));
  objc_msgSend(v11, "addObjectsFromArray:", v12);

  v13 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/usr/sbin/mDNSResponder"));
  objc_msgSend(v11, "addObjectsFromArray:", v13);

  v14 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/usr/libexec/captiveagent"));
  objc_msgSend(v11, "addObjectsFromArray:", v14);

  v15 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter"));
  objc_msgSend(v11, "addObjectsFromArray:", v15);

  v16 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/Applications/InCallService.app/InCallService"));
  objc_msgSend(v11, "addObjectsFromArray:", v16);

  v17 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenterMobileHelper"));
  objc_msgSend(v11, "addObjectsFromArray:", v17);

  v18 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("569F2700-CAF9-483D-B19D-7AF406DCE15E"));
  objc_msgSend(v11, "addObject:", v18);

  v19 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("67A03811-DB0A-594E-C2AE-8B0517EDF26F"));
  objc_msgSend(v11, "addObject:", v19);

  v114 = 0u;
  v115 = 0u;
  v112 = 0u;
  v113 = 0u;
  obj = v11;
  v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v112, v123, 16);
  v21 = a1;
  if (v20)
  {
    v22 = v20;
    v23 = *(_QWORD *)v113;
    do
    {
      v24 = 0;
      do
      {
        if (*(_QWORD *)v113 != v23)
          objc_enumerationMutation(obj);
        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", *(_QWORD *)(*((_QWORD *)&v112 + 1) + 8 * (_QWORD)v24)));
        v26 = objc_alloc((Class)NEPolicy);
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        v122[0] = v27;
        v122[1] = v25;
        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v122, 2));
        v29 = objc_msgSend(v26, "initWithOrder:result:conditions:", v101, v100, v28);

        a1 = v21;
        v31 = (void *)v21[4];
        if (v31)
          v32 = objc_getProperty(v31, v30, 48, 1);
        else
          v32 = 0;
        sub_10002E954((_BOOL8)v10, v29, v32);

        v24 = (char *)v24 + 1;
      }
      while (v22 != v24);
      v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v112, v123, 16);
      v22 = v33;
    }
    while (v33);
  }

  v34 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", CFSTR("ipv4only.arpa")));
  v35 = objc_alloc((Class)NEPolicy);
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
  v121[0] = v36;
  v121[1] = v34;
  v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v121, 2));
  v38 = v100;
  v39 = objc_msgSend(v35, "initWithOrder:result:conditions:", v101, v100, v37);

  v41 = (void *)a1[4];
  if (v41)
    v42 = objc_getProperty(v41, v40, 48, 1);
  else
    v42 = 0;
  v43 = v10;
  sub_10002E954((_BOOL8)v10, v39, v42);
  v98 = (void *)v34;
  if (v10)
    v45 = objc_getProperty(v10, v44, 16, 1);
  else
    v45 = 0;
  v47 = v45;
  v48 = (id)a1[4];
  v49 = (void *)a1[5];
  if (v48)
    v48 = objc_getProperty(v48, v46, 48, 1);
  v50 = sub_10005811C(v47, v49, &v116, 1, 1, 0, v100, 0, v48, 0, 0);

  if (!v50)
  {
    v53 = ne_log_obj(v51, v52);
    v54 = objc_claimAutoreleasedReturnValue(v53);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v120 = "-[NESMPolicySession setPoliciesForRelayWithAgentUUID:dnsAgentUUID:matchDomains:excludedDomains:perApp:capti"
             "veNetworkPluginBundleIDs:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "%s: Captive app traffic exception policies failed", buf, 0xCu);
    }

  }
  v97 = v39;
  v55 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allowsUnsafeSocketAccess](NEPolicyCondition, "allowsUnsafeSocketAccess"));
  objc_msgSend(v55, "setNegative:", 1);
  v56 = objc_alloc((Class)NEPolicy);
  v57 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v101 + 34));
  v58 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
  v118[0] = v58;
  v59 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition usesModernNetworkAPI](NEPolicyCondition, "usesModernNetworkAPI"));
  v118[1] = v59;
  v118[2] = v55;
  v96 = v55;
  v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v118, 3));
  v61 = objc_msgSend(v56, "initWithOrder:result:conditions:", v101 + 32, v57, v60);

  v63 = v21;
  v64 = (void *)v21[4];
  if (v64)
    v65 = objc_getProperty(v64, v62, 48, 1);
  else
    v65 = 0;
  sub_10002E954((_BOOL8)v43, v61, v65);
  v66 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v21[6]));
  if (v21[7])
    v67 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:"));
  else
    v67 = 0;
  v95 = v61;
  v68 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult divertSocketToControlUnit:](NEPolicyResult, "divertSocketToControlUnit:", 0xFFFFFFFLL));
  v69 = (void *)v21[8];
  if (v69)
  {
    v70 = v21[4];
    v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "appRules"));
    v102[0] = _NSConcreteStackBlock;
    v102[1] = 3221225472;
    v102[2] = sub_1000472A8;
    v102[3] = &unk_1000BDF18;
    v102[4] = v63[4];
    v110 = v101 + 37;
    v38 = v100;
    v103 = (id)v63[9];
    v104 = (id)v63[10];
    v105 = v43;
    v106 = v100;
    v107 = v66;
    v108 = v67;
    v109 = v68;
    v111 = v101 + 33;
    sub_10003248C(v70, v71, 0, 1, 0, 0, v102, 0);

    v73 = v97;
    v72 = v98;
    v74 = v67;
    v75 = v68;
    v77 = v95;
    v76 = v96;
  }
  else
  {
    v92 = v68;
    v93 = v67;
    v94 = v66;
    v78 = objc_alloc((Class)NEPolicy);
    v79 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult drop](NEPolicyResult, "drop"));
    v80 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    v117[0] = v80;
    v81 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", CFSTR("use-application-dns.net")));
    v117[1] = v81;
    v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v117, 2));
    v83 = objc_msgSend(v78, "initWithOrder:result:conditions:", v101 + 574, v79, v82);

    v85 = (void *)v21[4];
    if (v85)
      v86 = objc_getProperty(v85, v84, 48, 1);
    else
      v86 = 0;
    v73 = v97;
    v72 = v98;
    v77 = v95;
    v76 = v96;
    v66 = v94;
    sub_10002E954((_BOOL8)v43, v83, v86);
    v87 = (void *)v21[4];
    v88 = (void *)v21[9];
    v89 = (void *)v21[10];
    v75 = v92;
    v74 = v93;
    sub_100046178(v87, v101 + 305, v88, v89, 0, v43, v100, v94, v93, v92, v101 + 33);

  }
  v90 = sub_10002D308(v43);

  return v90;
}

void sub_1000472A8(uint64_t a1, void *a2)
{
  sub_100046178(*(void **)(a1 + 32), *(_DWORD *)(a1 + 96), *(void **)(a1 + 40), *(void **)(a1 + 48), a2, *(void **)(a1 + 56), *(void **)(a1 + 64), *(void **)(a1 + 72), *(void **)(a1 + 80), *(void **)(a1 + 88), *(_DWORD *)(a1 + 100));
}

void sub_1000485D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100048E90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100049340(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100049540(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "uninstallOnQueue");
}

id sub_100049548(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "uninstallOnQueue");
}

void sub_100049550(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  const char *v8;
  id Property;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  id v31;
  id v32;
  uint8_t buf[4];
  uint64_t v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  unsigned int v40;
  __int16 v41;
  uint64_t v42;

  v5 = a2;
  v6 = a3;
  v7 = *(id *)(a1 + 32);
  objc_sync_enter(v7);
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v8, 120, 1);
  v10 = Property;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

  if (v11)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 48), "type")));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v14));

    if (v15 == *(void **)(a1 + 48))
    {
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_10004983C;
      v30[3] = &unk_1000BECA8;
      v30[4] = *(_QWORD *)(a1 + 32);
      v31 = v15;
      v32 = *(id *)(a1 + 56);
      objc_msgSend(v31, "handleUpdateConfiguration:withCompletionHandler:", v5, v30);

    }
    else
    {
      v18 = ne_log_obj(v16, v17);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v23 = *(_QWORD *)(a1 + 40);
        v22 = *(void **)(a1 + 48);
        v24 = *(_QWORD *)(a1 + 32);
        v25 = objc_msgSend(v22, "type");
        v26 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138413314;
        v34 = v24;
        v35 = 2112;
        v36 = v22;
        v37 = 2112;
        v38 = v23;
        v39 = 1024;
        v40 = v25;
        v41 = 2112;
        v42 = v26;
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%@: Failed to register session %@, session with ID %@ and type %d is different: %@", buf, 0x30u);
      }

      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    }

  }
  else
  {
    v20 = ne_log_obj(v12, v13);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v28 = *(_QWORD *)(a1 + 40);
      v27 = *(void **)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      v34 = v29;
      v35 = 2112;
      v36 = v27;
      v37 = 2112;
      v38 = v28;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%@: Failed to register session %@, session with ID %@ not found", buf, 0x20u);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

  objc_sync_exit(v7);
}

void sub_100049810(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004983C(uint64_t a1, const char *a2)
{
  void *v3;
  NSObject *Property;
  uint64_t v5;
  _QWORD block[5];
  id v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    Property = objc_getProperty(v3, a2, 88, 1);
    v5 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v5 = 0;
    Property = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000498EC;
  block[3] = &unk_1000BECA8;
  block[4] = v5;
  v7 = *(id *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  dispatch_async(Property, block);

}

void sub_1000498EC(id *a1)
{
  void *v1;
  const char *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  id Property;
  const char *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  id v27;
  id v28;
  const char *v29;
  id v30;
  void (**v31)(id, uint64_t);
  uint64_t v32;
  id v33;
  uint64_t v34;
  NSObject *v35;
  id v36;
  unsigned int v37;
  void *v38;
  unsigned int v39;
  void *v40;
  void *v41;
  unsigned int v42;
  id v43;
  void *v44;
  void *v45;
  unsigned int v46;
  void *v47;
  void *v48;
  const char *v49;
  id v50;
  id v51;
  const char *v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  id v65;
  void *v66;
  void *v67;
  id v68;
  unsigned int v69;
  id v70;
  void *v71;
  id v72;
  id v73;
  void *v74;
  void *v75;
  unsigned int v76;
  id v77;
  id v78;
  void *v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  const char *v89;
  unsigned int v90;
  id v91;
  void *v92;
  id v93;
  void *v94;
  void *v95;
  unsigned int v96;
  unsigned int v97;
  id v98;
  void *v99;
  void *v100;
  unsigned int v101;
  uint64_t v102;
  NSObject *v103;
  id v104;
  id v105;
  const char *v106;
  void *v107;
  void *v108;
  unsigned int v109;
  uint64_t v110;
  NSObject *v111;
  id v112;
  const char *v113;
  id v114;
  void *v115;
  const char *v116;
  id v117;
  void *v118;
  void *i;
  uint64_t v120;
  id v121;
  id v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  unsigned __int8 v129;
  const char *v130;
  int v131;
  uint64_t v132;
  unsigned int v133;
  id v134;
  void *v135;
  void *v136;
  unsigned int v137;
  void *v138;
  void *v139;
  id v140;
  const char *v141;
  id v142;
  void *v143;
  id v144;
  id v145;
  id v146;
  id v147;
  id v148;
  uint64_t v149;
  id v150;
  void *v151;
  void *v152;
  id v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  id v158;
  void *v159;
  void *v160;
  _BOOL4 v161;
  unsigned int v162;
  id v163;
  void *v164;
  void *v165;
  unsigned int v166;
  uint64_t v167;
  id v168;
  id v169;
  uint64_t v170;
  id v171;
  id v172;
  void *v173;
  void *v174;
  void *v175;
  unsigned __int8 v176;
  uint64_t v177;
  NSObject *v178;
  void *v179;
  const char *v180;
  const char *v181;
  id v182;
  id v183;
  id v184;
  void *v185;
  void *v186;
  void *v187;
  const char *v188;
  unsigned int v189;
  id v190;
  const char *v191;
  const char *v192;
  id v193;
  const char *v194;
  id v195;
  id v196;
  uint64_t v197;
  id v198;
  id v199;
  uint64_t v200;
  NSObject *v201;
  void *v202;
  const char *v203;
  id v204;
  void *v205;
  void *v206;
  void *v207;
  unsigned int v208;
  unsigned int v209;
  const char *v210;
  void *v211;
  void *v212;
  unsigned int v213;
  void (**v214)(id, _QWORD);
  void *v215;
  void *v216;
  unsigned int v217;
  uint64_t v218;
  id v219;
  id v220;
  id v221;
  void *v222;
  void *v223;
  id v224;
  id v225;
  void *v226;
  id v227;
  BOOL v228;
  id v229;
  id v230;
  uint64_t v231;
  NSObject *v232;
  id v233;
  id v234;
  void *v235;
  void *v236;
  unsigned int v237;
  id v238;
  id v239;
  void *v240;
  void *v241;
  id v242;
  id v243;
  id v244;
  id obj;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  _QWORD v250[5];
  id v251;
  id v252;
  uint8_t buf[4];
  id v254;
  __int16 v255;
  _BYTE v256[10];
  id v257;
  __int16 v258;
  const char *v259;
  __int16 v260;
  id v261;
  __int16 v262;
  unsigned int v263;
  _BYTE v264[128];

  obj = a1[4];
  objc_sync_enter(obj);
  if (objc_msgSend(a1[5], "type") != 3)
  {
    v33 = a1[4];
    if (v33)
    {
      Property = objc_getProperty(v33, v3, 176, 1);
      if (Property)
        goto LABEL_42;
    }
    v42 = objc_msgSend(a1[5], "type");
    v43 = a1[5];
    if (v42 == 4)
    {
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "configuration"));
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "contentFilter"));
      v46 = objc_msgSend(v45, "isEnabled");

      if (!v46)
        goto LABEL_42;
      v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "configuration"));
      v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "externalIdentifier"));

      if (!v48)
      {
        v50 = a1[4];
        if (v50)
        {
          v51 = objc_getProperty(v50, v49, 224, 1);
          if (v51)
          {
            v53 = v51;
            v54 = a1[4];
            v55 = v54 ? objc_getProperty(v54, v52, 224, 1) : 0;
            v56 = a1[5];

            if (v55 != v56)
            {
              v57 = a1[4];
              if (v57)
                v57 = objc_getProperty(v57, v52, 224, 1);
              v58 = v57;
              objc_msgSend(v58, "stopIfNecessaryWithReason:", 33);

            }
          }
          v59 = a1[4];
          if (v59)
            objc_setProperty_atomic(v59, v52, a1[5], 224);
        }
      }
      v60 = a1[5];
      v61 = sub_1000703E8(v60);
      if ((v61 & 1) != 0)
      {
        v63 = ne_log_obj(v61, v62);
        v64 = objc_claimAutoreleasedReturnValue(v63);
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          v65 = a1[4];
          v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "configuration"));
          v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "name"));
          v68 = a1[5];
          *(_DWORD *)buf = 138412802;
          v254 = v65;
          v255 = 2112;
          *(_QWORD *)v256 = v67;
          *(_WORD *)&v256[8] = 2112;
          v257 = v68;
          _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "%@: <%@> Register Filter Session: %@", buf, 0x20u);

        }
      }
      else
      {
        v132 = ne_log_obj(v61, v62);
        v64 = objc_claimAutoreleasedReturnValue(v132);
        if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
        {
          v221 = a1[4];
          v222 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "configuration"));
          v223 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v222, "name"));
          *(_DWORD *)buf = 138412546;
          v254 = v221;
          v255 = 2112;
          *(_QWORD *)v256 = v223;
          _os_log_error_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "%@: <%@> Failed to allocate a control unit", buf, 0x16u);

        }
      }

      (*((void (**)(void))a1[6] + 2))();
      goto LABEL_113;
    }
    v69 = objc_msgSend(v43, "type");
    v70 = a1[5];
    if (v69 == 1)
    {
      v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "configuration"));
      v72 = objc_msgSend(v71, "grade");

      v73 = a1[5];
      if (v72 != (id)1)
      {
        v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "configuration"));
        v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "VPN"));
        v109 = objc_msgSend(v108, "isEnabled");

        if (!v109)
          goto LABEL_42;
        v110 = ne_log_obj(Property, v8);
        v111 = objc_claimAutoreleasedReturnValue(v110);
        if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
        {
          v112 = a1[4];
          *(_DWORD *)buf = 138412290;
          v254 = v112;
          _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "%@: Register Personal VPN Session enabled", buf, 0xCu);
        }

        v248 = 0u;
        v249 = 0u;
        v246 = 0u;
        v247 = 0u;
        v114 = a1[4];
        if (v114)
          v114 = objc_getProperty(v114, v113, 120, 1);
        v242 = v114;
        v115 = 0;
        v117 = objc_msgSend(v242, "countByEnumeratingWithState:objects:count:", &v246, v264, 16);
        if (v117)
        {
          v118 = *(void **)v247;
          while (2)
          {
            for (i = 0; i != v117; i = (char *)i + 1)
            {
              if (*(void **)v247 != v118)
                objc_enumerationMutation(v242);
              v120 = *(_QWORD *)(*((_QWORD *)&v246 + 1) + 8 * (_QWORD)i);
              v121 = a1[4];
              if (v121)
                v121 = objc_getProperty(v121, v116, 120, 1);
              v122 = v121;
              v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v122, "objectForKeyedSubscript:", v120));
              v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v123, "objectForKeyedSubscript:", &off_1000C16A8));

              v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v124, "configuration"));
              LODWORD(v123) = objc_msgSend(v125, "grade") == (id)1;

              if ((_DWORD)v123)
              {
                v60 = v124;

                v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "configuration"));
                v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v126, "VPN"));
                v128 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v127, "protocol"));
                v129 = objc_msgSend(v128, "includeAllNetworks");

                if ((v129 & 1) != 0)
                {

                  v131 = 0;
                  goto LABEL_133;
                }
                v115 = v60;
              }

            }
            v117 = objc_msgSend(v242, "countByEnumeratingWithState:objects:count:", &v246, v264, 16);
            if (v117)
              continue;
            break;
          }

          if (!v115)
          {
            v60 = 0;
            goto LABEL_187;
          }
          v242 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "configuration"));
          v117 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v242, "VPN"));
          v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "protocol"));
          if ((objc_msgSend(v118, "includeAllNetworks") & 1) == 0)
          {

            goto LABEL_186;
          }
          v131 = 1;
          v60 = v115;
LABEL_133:
          v159 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "configuration"));
          v160 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v159, "VPN"));
          v161 = objc_msgSend(v160, "isEnabled")
              && objc_msgSend(v60, "status")
              && objc_msgSend(v60, "status") != 1;

          if (v131)
          {

            if (!v161)
              goto LABEL_187;
          }
          else if (!v161)
          {
            goto LABEL_187;
          }
          v200 = ne_log_obj(v170, v130);
          v201 = objc_claimAutoreleasedReturnValue(v200);
          if (os_log_type_enabled(v201, OS_LOG_TYPE_DEFAULT))
          {
            v239 = a1[4];
            v244 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "configuration"));
            v241 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v244, "VPN"));
            v202 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v241, "protocol"));
            if (objc_msgSend(v202, "includeAllNetworks"))
              v203 = "IncludeAllNetworks ";
            else
              v203 = "";
            v204 = a1[5];
            v205 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "configuration"));
            v206 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v205, "VPN"));
            v207 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v206, "protocol"));
            v208 = objc_msgSend(v207, "includeAllNetworks");
            v209 = objc_msgSend(v60, "status");
            v210 = "";
            if (v208)
              v210 = "IncludeAllNetworks ";
            *(_DWORD *)buf = 138413570;
            v254 = v239;
            v255 = 2080;
            *(_QWORD *)v256 = v203;
            *(_WORD *)&v256[8] = 2112;
            v257 = v204;
            v258 = 2080;
            v259 = v210;
            v260 = 2112;
            v261 = v60;
            v262 = 1024;
            v263 = v209;
            _os_log_impl((void *)&_mh_execute_header, v201, OS_LOG_TYPE_DEFAULT, "%@: Failed to register Personal %sVPN Session %@ due to Enterprise %sVPN session %@ (status %d)", buf, 0x3Au);

          }
          v211 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "configuration"));
          v212 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v211, "VPN"));
          v213 = objc_msgSend(v212, "isOnDemandEnabled");

          if (v213)
            objc_msgSend(a1[5], "pauseOnDemand");
          v214 = (void (**)(id, _QWORD))a1[6];
          if (v214)
            v214[2](v214, 0);
        }
        else
        {
LABEL_186:

          v60 = v115;
LABEL_187:
          v224 = a1[4];
          if (v224)
          {
            v225 = objc_getProperty(v224, v130, 208, 1);
            if (v225)
            {
              v226 = v225;
              v227 = a1[4];
              if (v227)
                v227 = objc_getProperty(v227, v130, 208, 1);
              v228 = v227 == a1[5];

              if (!v228)
              {
                v229 = a1[4];
                if (v229)
                  v229 = objc_getProperty(v229, v130, 208, 1);
                v230 = v229;
                objc_msgSend(v230, "stopIfNecessaryWithReason:", 33);

              }
            }
            v224 = a1[4];
            if (v224)
              objc_setProperty_atomic(v224, v130, a1[5], 208);
          }
          v231 = ne_log_obj(v224, v130);
          v232 = objc_claimAutoreleasedReturnValue(v231);
          if (os_log_type_enabled(v232, OS_LOG_TYPE_DEFAULT))
          {
            v233 = a1[4];
            v234 = a1[5];
            *(_DWORD *)buf = 138412546;
            v254 = v233;
            v255 = 2112;
            *(_QWORD *)v256 = v234;
            _os_log_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_DEFAULT, "%@: Register Personal VPN Session: %@", buf, 0x16u);
          }

          v235 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "configuration"));
          v236 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v235, "VPN"));
          v237 = objc_msgSend(v236, "isOnDemandEnabled");

          if (v237)
            objc_msgSend(a1[5], "unpauseOnDemand");
          (*((void (**)(void))a1[6] + 2))();
        }
LABEL_113:

        goto LABEL_47;
      }
      v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "configuration"));
      v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "VPN"));
      v76 = objc_msgSend(v75, "isEnabled");

      if (!v76)
        goto LABEL_42;
      v77 = a1[4];
      if (v77)
      {
        v78 = objc_getProperty(v77, v8, 192, 1);
        if (v78)
        {
          v79 = v78;
          v80 = a1[4];
          v81 = v80 ? objc_getProperty(v80, v8, 192, 1) : 0;
          v82 = a1[5];

          if (v81 != v82)
          {
            v83 = a1[4];
            if (v83)
              v83 = objc_getProperty(v83, v8, 192, 1);
            v84 = v83;
            objc_msgSend(v84, "stopIfNecessaryWithReason:", 33);

          }
        }
        v77 = a1[4];
        if (v77)
        {
          objc_setProperty_atomic(v77, v8, a1[5], 192);
          v77 = a1[4];
          if (v77)
          {
            v77 = objc_getProperty(v77, v8, 208, 1);
            if (v77)
            {
              v85 = v77;
              v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "configuration"));
              v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "VPN"));
              v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "protocol"));
              if ((objc_msgSend(v88, "includeAllNetworks") & 1) != 0)
              {

LABEL_148:
                v177 = ne_log_obj(v77, v8);
                v178 = objc_claimAutoreleasedReturnValue(v177);
                if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT))
                {
                  v238 = a1[4];
                  v243 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "configuration"));
                  v240 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v243, "VPN"));
                  v179 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v240, "protocol"));
                  if (objc_msgSend(v179, "includeAllNetworks"))
                    v181 = "IncludeAllNetworks ";
                  else
                    v181 = "";
                  v182 = a1[4];
                  v183 = a1[5];
                  if (v182)
                    v182 = objc_getProperty(v182, v180, 208, 1);
                  v184 = v182;
                  v185 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v184, "configuration"));
                  v186 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v185, "VPN"));
                  v187 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v186, "protocol"));
                  v189 = objc_msgSend(v187, "includeAllNetworks");
                  v190 = a1[4];
                  if (v190)
                    v190 = objc_getProperty(v190, v188, 208, 1);
                  v191 = "";
                  if (v189)
                    v191 = "IncludeAllNetworks ";
                  *(_DWORD *)buf = 138413314;
                  v254 = v238;
                  v255 = 2080;
                  *(_QWORD *)v256 = v181;
                  *(_WORD *)&v256[8] = 2112;
                  v257 = v183;
                  v258 = 2080;
                  v259 = v191;
                  v260 = 2112;
                  v261 = v190;
                  _os_log_impl((void *)&_mh_execute_header, v178, OS_LOG_TYPE_DEFAULT, "%@: Register Enterprise %sVPN Session %@: stopping Personal %sVPN session %@", buf, 0x34u);

                }
                v193 = a1[4];
                if (v193)
                  v193 = objc_getProperty(v193, v192, 208, 1);
                v60 = v193;
                v195 = a1[4];
                if (v195)
                {
                  objc_setProperty_atomic(v195, v194, 0, 208);
                  v196 = a1[4];
                }
                else
                {
                  v196 = 0;
                }
                v250[0] = _NSConcreteStackBlock;
                v250[1] = 3221225472;
                v250[2] = sub_10004ADD4;
                v250[3] = &unk_1000BECA8;
                v250[4] = v196;
                v251 = a1[5];
                v252 = a1[6];
                objc_msgSend(v60, "stopIfNecessaryWithReason:withCompletionHandler:", 33, v250);

                goto LABEL_113;
              }
              v171 = a1[4];
              if (v171)
                v171 = objc_getProperty(v171, v89, 208, 1);
              v172 = v171;
              v173 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v172, "configuration"));
              v174 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v173, "VPN"));
              v175 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v174, "protocol"));
              v176 = objc_msgSend(v175, "includeAllNetworks");

              if ((v176 & 1) != 0)
                goto LABEL_148;
            }
          }
        }
      }
      v197 = ne_log_obj(v77, v8);
      v103 = objc_claimAutoreleasedReturnValue(v197);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
      {
        v198 = a1[4];
        v199 = a1[5];
        *(_DWORD *)buf = 138412546;
        v254 = v198;
        v255 = 2112;
        *(_QWORD *)v256 = v199;
        v106 = "%@: Register Enterprise VPN Session: %@";
        goto LABEL_166;
      }
LABEL_167:

LABEL_39:
      v31 = (void (**)(id, uint64_t))a1[6];
      v32 = 1;
LABEL_46:
      v31[2](v31, v32);
      goto LABEL_47;
    }
    v90 = objc_msgSend(v70, "type");
    v91 = a1[5];
    if (v90 == 2)
    {
      v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91, "configuration"));
      v93 = objc_msgSend(v92, "grade");
      if (v93 != (id)1)
      {
        v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "configuration"));
        if (objc_msgSend(v1, "grade") != (id)3)
        {

          goto LABEL_42;
        }
      }
      v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "configuration"));
      v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v94, "appVPN"));
      v96 = objc_msgSend(v95, "isEnabled");

      if (v93 == (id)1)
      {

        if (!v96)
          goto LABEL_42;
      }
      else
      {

        if ((v96 & 1) == 0)
          goto LABEL_42;
      }
      v154 = objc_msgSend(a1[5], "setIsDeregisteredAppVPNSession:", 0);
      v156 = ne_log_obj(v154, v155);
      v103 = objc_claimAutoreleasedReturnValue(v156);
      if (!os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
        goto LABEL_167;
      v157 = a1[4];
      v158 = a1[5];
      *(_DWORD *)buf = 138412546;
      v254 = v157;
      v255 = 2112;
      *(_QWORD *)v256 = v158;
      v106 = "%@: Register App VPN Session: %@";
    }
    else
    {
      v97 = objc_msgSend(v91, "type");
      v98 = a1[5];
      if (v97 == 5)
      {
        v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "configuration"));
        v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "pathController"));
        v101 = objc_msgSend(v100, "isEnabled");

        if (!v101)
          goto LABEL_42;
        v102 = ne_log_obj(Property, v8);
        v103 = objc_claimAutoreleasedReturnValue(v102);
        if (!os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
          goto LABEL_167;
        v104 = a1[4];
        v105 = a1[5];
        *(_DWORD *)buf = 138412546;
        v254 = v104;
        v255 = 2112;
        *(_QWORD *)v256 = v105;
        v106 = "%@: Register Path Controller Session: %@";
      }
      else
      {
        v133 = objc_msgSend(v98, "type");
        v134 = a1[5];
        if (v133 == 6)
        {
          v135 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v134, "configuration"));
          v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v135, "dnsProxy"));
          v137 = objc_msgSend(v136, "isEnabled");

          if (!v137)
            goto LABEL_42;
          v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "configuration"));
          v139 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v138, "externalIdentifier"));

          if (!v139)
          {
            v140 = a1[4];
            if (v140)
            {
              v142 = objc_getProperty(v140, v141, 232, 1);
              if (v142)
              {
                v143 = v142;
                v144 = a1[4];
                v145 = v144 ? objc_getProperty(v144, v141, 232, 1) : 0;
                v146 = a1[5];

                if (v145 != v146)
                {
                  v147 = a1[4];
                  if (v147)
                    v147 = objc_getProperty(v147, v141, 232, 1);
                  v148 = v147;
                  objc_msgSend(v148, "stopIfNecessaryWithReason:", 33);

                }
              }
              v140 = a1[4];
              if (v140)
                objc_setProperty_atomic(v140, v141, a1[5], 232);
            }
          }
          v149 = ne_log_obj(v140, v141);
          v103 = objc_claimAutoreleasedReturnValue(v149);
          if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
          {
            v150 = a1[4];
            v151 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "configuration"));
            v152 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v151, "name"));
            v153 = a1[5];
            *(_DWORD *)buf = 138412802;
            v254 = v150;
            v255 = 2112;
            *(_QWORD *)v256 = v152;
            *(_WORD *)&v256[8] = 2112;
            v257 = v153;
            _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "%@: <%@> Register DNS Proxy Session: %@", buf, 0x20u);

          }
          goto LABEL_167;
        }
        v162 = objc_msgSend(v134, "type");
        v163 = a1[5];
        if (v162 != 7)
        {
          Property = objc_msgSend(v163, "type");
          if ((_DWORD)Property != 9)
            goto LABEL_42;
          v215 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "configuration"));
          v216 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v215, "relay"));
          v217 = objc_msgSend(v216, "isEnabled");

          if (!v217)
            goto LABEL_42;
          v218 = ne_log_obj(Property, v8);
          v103 = objc_claimAutoreleasedReturnValue(v218);
          if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
          {
            v219 = a1[4];
            v220 = a1[5];
            *(_DWORD *)buf = 138412546;
            v254 = v219;
            v255 = 2112;
            *(_QWORD *)v256 = v220;
            v106 = "%@: Register Relay Session: %@";
            goto LABEL_166;
          }
          goto LABEL_167;
        }
        v164 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v163, "configuration"));
        v165 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v164, "dnsSettings"));
        v166 = objc_msgSend(v165, "isEnabled");

        if (!v166)
          goto LABEL_42;
        v167 = ne_log_obj(Property, v8);
        v103 = objc_claimAutoreleasedReturnValue(v167);
        if (!os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
          goto LABEL_167;
        v168 = a1[4];
        v169 = a1[5];
        *(_DWORD *)buf = 138412546;
        v254 = v168;
        v255 = 2112;
        *(_QWORD *)v256 = v169;
        v106 = "%@: Register DNS Settings Session: %@";
      }
    }
LABEL_166:
    _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, v106, buf, 0x16u);
    goto LABEL_167;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "configuration"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "alwaysOnVPN"));
  v6 = objc_msgSend(v5, "isEnabled");

  if (v6)
  {
    v9 = a1[4];
    if (!v9)
      goto LABEL_35;
    v10 = objc_getProperty(v9, v8, 176, 1);
    if (v10)
    {
      v11 = v10;
      v12 = a1[4];
      v13 = v12 ? objc_getProperty(v12, v8, 176, 1) : 0;
      v14 = a1[5];

      if (v13 != v14)
      {
        v15 = a1[4];
        if (v15)
          v15 = objc_getProperty(v15, v8, 176, 1);
        v16 = v15;
        objc_msgSend(v16, "stopIfNecessaryWithReason:", 33);

      }
    }
    v9 = a1[4];
    if (!v9)
      goto LABEL_35;
    v17 = objc_getProperty(v9, v8, 192, 1);
    v9 = a1[4];
    if (v17)
    {
      if (v9)
        v9 = objc_getProperty(v9, v8, 192, 1);
      v18 = v9;
      objc_msgSend(v18, "stopIfNecessaryWithReason:", 33);

      v9 = a1[4];
      if (!v9)
        goto LABEL_35;
      objc_setProperty_atomic(v9, v8, 0, 192);
      v9 = a1[4];
    }
    if (v9)
    {
      v19 = objc_getProperty(v9, v8, 208, 1);
      v9 = a1[4];
      if (v19)
      {
        if (v9)
          v9 = objc_getProperty(v9, v8, 208, 1);
        v20 = v9;
        objc_msgSend(v20, "stopIfNecessaryWithReason:", 33);

        v9 = a1[4];
        if (!v9)
          goto LABEL_35;
        objc_setProperty_atomic(v9, v8, 0, 208);
        v9 = a1[4];
      }
      if (v9)
      {
        v21 = objc_getProperty(v9, v8, 232, 1);
        v9 = a1[4];
        if (v21)
        {
          if (v9)
            v9 = objc_getProperty(v9, v8, 232, 1);
          v22 = v9;
          objc_msgSend(v22, "stopIfNecessaryWithReason:", 33);

          v9 = a1[4];
          if (!v9)
            goto LABEL_35;
          objc_setProperty_atomic(v9, v8, 0, 232);
          v9 = a1[4];
        }
        if (v9)
        {
          v9 = objc_getProperty(v9, v8, 224, 1);
          if (v9)
          {
            v23 = a1[4];
            if (v23)
              v23 = objc_getProperty(v23, v8, 224, 1);
            v24 = v23;
            objc_msgSend(v24, "stopIfNecessaryWithReason:", 33);

            v9 = a1[4];
            if (v9)
              objc_setProperty_atomic(v9, v8, 0, 224);
          }
        }
      }
    }
LABEL_35:
    v25 = ne_log_obj(v9, v8);
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      v27 = a1[4];
      v28 = a1[5];
      *(_DWORD *)buf = 138412546;
      v254 = v27;
      v255 = 2112;
      *(_QWORD *)v256 = v28;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%@: Register Always-On VPN Session: %@", buf, 0x16u);
    }

    v30 = a1[4];
    if (v30)
      objc_setProperty_atomic(v30, v29, a1[5], 176);
    goto LABEL_39;
  }
LABEL_42:
  v34 = ne_log_obj(Property, v8);
  v35 = objc_claimAutoreleasedReturnValue(v34);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    v36 = a1[5];
    v37 = objc_msgSend(v36, "type");
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "configuration"));
    v39 = objc_msgSend(v38, "grade");
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "configuration"));
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "VPN"));
    *(_DWORD *)buf = 138413058;
    v254 = v36;
    v255 = 1024;
    *(_DWORD *)v256 = v37;
    *(_WORD *)&v256[4] = 1024;
    *(_DWORD *)&v256[6] = v39;
    LOWORD(v257) = 1024;
    *(_DWORD *)((char *)&v257 + 2) = objc_msgSend(v41, "isEnabled");
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Failed to register session: %@ type: %d grade: %d vpn enabled: %d", buf, 0x1Eu);

  }
  v31 = (void (**)(id, uint64_t))a1[6];
  if (v31)
  {
    v32 = 0;
    goto LABEL_46;
  }
LABEL_47:
  objc_sync_exit(obj);

}

void sub_10004AD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10004ADD4(uint64_t a1, const char *a2)
{
  void *v3;
  NSObject *Property;
  uint64_t v5;
  _QWORD block[5];
  id v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    Property = objc_getProperty(v3, a2, 88, 1);
    v5 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v5 = 0;
    Property = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10004AE84;
  block[3] = &unk_1000BECA8;
  block[4] = v5;
  v7 = *(id *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  dispatch_async(Property, block);

}

uint64_t sub_10004AE84(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[4];
    v6 = a1[5];
    v8 = 138412546;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: Register Enterprise VPN Session: %@", (uint8_t *)&v8, 0x16u);
  }

  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_10004AF44(void *a1)
{
  SEL v1;
  const char *v2;
  id v3;
  SEL v4;
  const char *v5;
  id v6;
  SEL v7;
  const char *v8;
  id v9;
  SEL v10;
  int v11;
  int *self;

  if (a1)
  {
    self = a1;
    objc_sync_enter(self);
    if (objc_getProperty(self, v1, 248, 1))
    {
      v3 = objc_getProperty(self, v2, 248, 1);
      objc_msgSend(v3, "removeObserver:forKeyPath:", self, CFSTR("path"));

      objc_setProperty_atomic(self, v4, 0, 248);
    }
    if (objc_getProperty(self, v2, 256, 1))
    {
      v6 = objc_getProperty(self, v5, 256, 1);
      objc_msgSend(v6, "removeObserver:forKeyPath:", self, CFSTR("path"));

      objc_setProperty_atomic(self, v7, 0, 256);
    }
    if (objc_getProperty(self, v5, 264, 1))
    {
      v9 = objc_getProperty(self, v8, 264, 1);
      objc_msgSend(v9, "removeObserver:forKeyPath:", self, CFSTR("path"));

      objc_setProperty_atomic(self, v10, 0, 264);
    }
    v11 = self[5];
    if ((v11 & 0x80000000) == 0)
    {
      notify_cancel(v11);
      self[5] = -1;
    }
    *((_BYTE *)self + 11) = 0;
    objc_sync_exit(self);

  }
}

void sub_10004B0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10004B0B4(void *a1)
{
  SEL v1;
  const char *v2;
  io_object_t *v3;
  io_object_t *v4;
  SEL v5;
  _BYTE *self;

  if (a1)
  {
    self = a1;
    objc_sync_enter(self);
    if (objc_getProperty(self, v1, 136, 1))
    {
      v3 = (io_object_t *)objc_getProperty(self, v2, 136, 1);
      v4 = v3;
      if (v3)
      {
        if (v3[2])
        {
          IODeregisterForSystemPower(v3 + 3);
          IONotificationPortSetDispatchQueue(*((IONotificationPortRef *)v4 + 8), 0);
          IONotificationPortDestroy(*((IONotificationPortRef *)v4 + 8));
          IOServiceClose(v4[2]);
        }
      }

      objc_setProperty_atomic(self, v5, 0, 136);
    }
    self[12] = 0;
    objc_sync_exit(self);

  }
}

void sub_10004B174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10004B188(void *a1)
{
  int v1;
  const __SCDynamicStore *v2;
  SEL v3;
  id self;

  if (a1)
  {
    self = a1;
    objc_sync_enter(self);
    v1 = *((_DWORD *)self + 6);
    if ((v1 & 0x80000000) == 0)
    {
      notify_cancel(v1);
      *((_DWORD *)self + 6) = -1;
    }
    v2 = (const __SCDynamicStore *)*((_QWORD *)self + 19);
    if (v2)
    {
      SCDynamicStoreSetDispatchQueue(v2, 0);
      CFRelease(*((CFTypeRef *)self + 19));
      *((_QWORD *)self + 19) = 0;
      objc_setProperty_atomic(self, v3, 0, 160);
    }
    *((_BYTE *)self + 13) = 0;
    objc_sync_exit(self);

  }
}

void sub_10004B228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10004B23C(uint64_t a1)
{
  const char *v2;
  void *v3;
  void *v4;
  id Property;
  const char *v6;
  id v7;
  void *v8;
  id v9;
  const char *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  const char *v17;
  id v18;
  void *v19;
  id v20;
  const char *v21;
  id v22;
  void *v23;
  uint64_t v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  unsigned __int8 v32;
  uint64_t v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  const char *v42;
  id v43;
  void *v44;
  const char *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  const char *v51;
  id v52;
  void *v53;
  id v54;
  const char *v55;
  id v56;
  void *v57;
  uint64_t v58;
  const char *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  unsigned __int8 v66;
  uint64_t v67;
  NSObject *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  id v75;
  id v76;
  void *v77;
  id v78;
  const char *v79;
  _QWORD *v80;
  _QWORD *v81;
  id v82;
  id v83;
  uint64_t v84;
  void *i;
  void *v86;
  void *v87;
  const char *v88;
  id v89;
  ptrdiff_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  unsigned __int8 v99;
  uint64_t v100;
  NSObject *v101;
  void *v102;
  void *v103;
  void *v104;
  _QWORD *v105;
  _QWORD *v106;
  id v107;
  id v108;
  uint64_t v109;
  void *j;
  void *v111;
  void *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _BYTE v121[128];
  uint8_t v122[128];
  uint8_t buf[4];
  void *v124;
  __int16 v125;
  void *v126;

  if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("path")))
  {
    v4 = *(void **)(a1 + 40);
    v3 = *(void **)(a1 + 48);
    if (v3)
      Property = objc_getProperty(v3, v2, 248, 1);
    else
      Property = 0;
    if (objc_msgSend(v4, "isEqual:", Property))
    {
      v7 = *(id *)(a1 + 48);
      if (v7)
        v7 = objc_getProperty(v7, v6, 248, 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "path"));
      v9 = objc_msgSend(v8, "status");

      if (v9 == (id)1)
      {
        v11 = *(id *)(a1 + 48);
        if (v11)
          v11 = objc_getProperty(v11, v10, 248, 1);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "path"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "interface"));

      }
      else
      {
        v13 = 0;
      }
      v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "primaryPhysicalInterface"));
      v26 = (void *)v24;
      if (v24 || !v13)
      {
        v27 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "primaryPhysicalInterface"));
        if (!v27)
        {

          goto LABEL_54;
        }
        v28 = (void *)v27;
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "primaryPhysicalInterface"));
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "interfaceName"));
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "interfaceName"));
        v32 = objc_msgSend(v30, "isEqualToString:", v31);

        if ((v32 & 1) != 0)
          goto LABEL_54;
      }
      v33 = ne_log_obj(v24, v25);
      v34 = objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "primaryPhysicalInterface"));
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "interfaceName"));
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "interfaceName"));
        *(_DWORD *)buf = 138412546;
        v124 = v36;
        v125 = 2112;
        v126 = v37;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Changing primary physical interface: %@ => %@", buf, 0x16u);

      }
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "primaryPhysicalInterface"));
      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "interfaceName"));

      if (v39)
      {
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "primaryPhysicalInterface"));
        v41 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "interfaceName")));
        NEHelperCacheClearRedirectedAddresses(objc_msgSend(v41, "UTF8String"));

      }
      objc_msgSend(*(id *)(a1 + 48), "setPrimaryPhysicalInterface:", v13);
      v43 = *(id *)(a1 + 48);
      if (v43)
        v43 = objc_getProperty(v43, v42, 248, 1);
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "path"));
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "cPath"));
      v47 = *(void **)(a1 + 48);
      if (v47)
        objc_setProperty_atomic(v47, v45, v46, 64);

      sub_10004BB74(*(void **)(a1 + 48), 1);
LABEL_54:
      v76 = *(id *)(a1 + 48);
      if (v76)
        v76 = objc_getProperty(v76, v25, 248, 1);
      v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "path"));
      v78 = objc_msgSend(v77, "status");

      v80 = *(_QWORD **)(a1 + 48);
      if (!v80)
      {
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        goto LABEL_61;
      }
      if ((id)v80[6] == v78)
      {
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
      }
      else
      {
        v80[6] = v78;
        v80 = *(_QWORD **)(a1 + 48);
        v117 = 0u;
        v118 = 0u;
        v119 = 0u;
        v120 = 0u;
        if (!v80)
        {
LABEL_61:
          v81 = v80;
          v82 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v117, v122, 16);
          if (v82)
          {
            v83 = v82;
            v84 = *(_QWORD *)v118;
            do
            {
              for (i = 0; i != v83; i = (char *)i + 1)
              {
                if (*(_QWORD *)v118 != v84)
                  objc_enumerationMutation(v81);
                v86 = *(void **)(*((_QWORD *)&v117 + 1) + 8 * (_QWORD)i);
                if (v78 == (id)1)
                {
                  v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "interfaceName"));
                  objc_msgSend(v86, "satisfyPathResult:", v87);

                }
                else
                {
                  objc_msgSend(*(id *)(*((_QWORD *)&v117 + 1) + 8 * (_QWORD)i), "satisfyPathResult:", 0);
                }
              }
              v83 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v117, v122, 16);
            }
            while (v83);
          }

          v89 = *(id *)(a1 + 48);
          if (!v89)
            goto LABEL_100;
          v90 = 272;
LABEL_99:
          v89 = objc_getProperty(v89, v88, v90, 1);
LABEL_100:
          objc_msgSend(v89, "removeAllObjects", (_QWORD)v113);
          goto LABEL_101;
        }
      }
      v80 = objc_getProperty(v80, v79, 272, 1);
      goto LABEL_61;
    }
    v15 = *(void **)(a1 + 40);
    v14 = *(void **)(a1 + 48);
    if (v14)
      v16 = objc_getProperty(v14, v6, 256, 1);
    else
      v16 = 0;
    if (objc_msgSend(v15, "isEqual:", v16))
    {
      v18 = *(id *)(a1 + 48);
      if (v18)
        v18 = objc_getProperty(v18, v17, 256, 1);
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "path"));
      v20 = objc_msgSend(v19, "status");

      if (v20 == (id)1)
      {
        v22 = *(id *)(a1 + 48);
        if (v22)
          v22 = objc_getProperty(v22, v21, 256, 1);
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "path"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "interface"));

      }
      else
      {
        v13 = 0;
      }
      v58 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "primaryCellularInterface"));
      v60 = (void *)v58;
      if (v58 || !v13)
      {
        v61 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "primaryCellularInterface"));
        if (!v61)
        {

          goto LABEL_82;
        }
        v62 = (void *)v61;
        v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "primaryCellularInterface"));
        v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "interfaceName"));
        v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "interfaceName"));
        v66 = objc_msgSend(v64, "isEqualToString:", v65);

        if ((v66 & 1) != 0)
          goto LABEL_82;
      }
      v67 = ne_log_obj(v58, v59);
      v68 = objc_claimAutoreleasedReturnValue(v67);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "primaryCellularInterface"));
        v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "interfaceName"));
        v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "interfaceName"));
        *(_DWORD *)buf = 138412546;
        v124 = v70;
        v125 = 2112;
        v126 = v71;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Changing primary cellular interface: %@ => %@", buf, 0x16u);

      }
      v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "primaryCellularInterface"));
      v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "interfaceName"));

      if (v73)
      {
        v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "primaryCellularInterface"));
        v75 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "interfaceName")));
        NEHelperCacheClearRedirectedAddresses(objc_msgSend(v75, "UTF8String"));

      }
      objc_msgSend(*(id *)(a1 + 48), "setPrimaryCellularInterface:", v13);
LABEL_82:
      v105 = *(_QWORD **)(a1 + 48);
      if (!v105)
      {
        v115 = 0u;
        v116 = 0u;
        v113 = 0u;
        v114 = 0u;
        goto LABEL_87;
      }
      if ((id)v105[7] == v20)
      {
        v115 = 0u;
        v116 = 0u;
        v113 = 0u;
        v114 = 0u;
      }
      else
      {
        v105[7] = v20;
        v105 = *(_QWORD **)(a1 + 48);
        v113 = 0u;
        v114 = 0u;
        v115 = 0u;
        v116 = 0u;
        if (!v105)
        {
LABEL_87:
          v106 = v105;
          v107 = objc_msgSend(v106, "countByEnumeratingWithState:objects:count:", &v113, v121, 16);
          if (v107)
          {
            v108 = v107;
            v109 = *(_QWORD *)v114;
            do
            {
              for (j = 0; j != v108; j = (char *)j + 1)
              {
                if (*(_QWORD *)v114 != v109)
                  objc_enumerationMutation(v106);
                v111 = *(void **)(*((_QWORD *)&v113 + 1) + 8 * (_QWORD)j);
                if (v20 == (id)1)
                {
                  v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "interfaceName"));
                  objc_msgSend(v111, "satisfyPathResult:", v112);

                }
                else
                {
                  objc_msgSend(*(id *)(*((_QWORD *)&v113 + 1) + 8 * (_QWORD)j), "satisfyPathResult:", 0, (_QWORD)v113);
                }
              }
              v108 = objc_msgSend(v106, "countByEnumeratingWithState:objects:count:", &v113, v121, 16);
            }
            while (v108);
          }

          v89 = *(id *)(a1 + 48);
          if (!v89)
            goto LABEL_100;
          v90 = 280;
          goto LABEL_99;
        }
      }
      v105 = objc_getProperty(v105, v59, 280, 1);
      goto LABEL_87;
    }
    v49 = *(void **)(a1 + 40);
    v48 = *(void **)(a1 + 48);
    if (v48)
      v50 = objc_getProperty(v48, v17, 264, 1);
    else
      v50 = 0;
    if (objc_msgSend(v49, "isEqual:", v50))
    {
      v52 = *(id *)(a1 + 48);
      if (v52)
        v52 = objc_getProperty(v52, v51, 264, 1);
      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "path"));
      v54 = objc_msgSend(v53, "status");

      if (v54 == (id)1)
      {
        v56 = *(id *)(a1 + 48);
        if (v56)
          v56 = objc_getProperty(v56, v55, 264, 1);
        v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "path"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "interface"));

      }
      else
      {
        v13 = 0;
      }
      v91 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "primaryWiFiInterface"));
      v93 = (void *)v91;
      if (!v91 && v13)
        goto LABEL_78;
      v94 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "primaryWiFiInterface"));
      if (!v94)
      {

        goto LABEL_101;
      }
      v95 = (void *)v94;
      v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "primaryWiFiInterface"));
      v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v96, "interfaceName"));
      v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "interfaceName"));
      v99 = objc_msgSend(v97, "isEqualToString:", v98);

      if ((v99 & 1) == 0)
      {
LABEL_78:
        v100 = ne_log_obj(v91, v92);
        v101 = objc_claimAutoreleasedReturnValue(v100);
        if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
        {
          v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "primaryWiFiInterface"));
          v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "interfaceName"));
          v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "interfaceName"));
          *(_DWORD *)buf = 138412546;
          v124 = v103;
          v125 = 2112;
          v126 = v104;
          _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "Changing primary wifi interface: %@ => %@", buf, 0x16u);

        }
        objc_msgSend(*(id *)(a1 + 48), "setPrimaryWiFiInterface:", v13);
      }
LABEL_101:

    }
  }
}

void sub_10004BB74(void *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t interface_names;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t ifstate;
  void *v14;
  void *v15;
  id v16;
  const char *v17;
  id v18;
  SEL v19;
  const char *v20;
  const char *v21;
  void *i;
  const char *v23;
  id v24;
  void *v25;
  const char *v26;
  void *v27;
  uint64_t is_debug_logging_enabled;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  void *v32;
  void *v33;
  unsigned int v34;
  id v35;
  const char *v36;
  id v37;
  uint64_t v38;
  NSObject *v39;
  const char *v40;
  const char *Property;
  uint64_t v42;
  NSObject *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  const char *v56;
  id v57;
  const char *v58;
  void *v59;
  char *v60;
  SEL v61;
  id v62;
  void *v63;
  void *v64;
  id v65;
  id v66;
  id v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  void *v71;
  SEL v72;
  const char *v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;
  NSObject *v81;
  SEL v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  void *v87;
  id v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  const char *v96;
  id v97;
  void *v98;
  void *v99;
  SEL v100;
  id v101;
  void *v102;
  void *v103;
  SEL v104;
  void *v105;
  void *v106;
  SEL v107;
  void *v108;
  void *v109;
  void *v110;
  id v111;
  id obj;
  uint64_t v113;
  uint64_t v114;
  id v115;
  id v116;
  id v117;
  void *v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  id v129;
  id v130;
  id v131;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  _BYTE v157[128];
  uint8_t v158[128];
  uint8_t v159[4];
  uint64_t v160;
  __int16 v161;
  id v162;
  uint8_t buf[4];
  const char *v164;
  __int16 v165;
  const char *v166;
  __int16 v167;
  id v168;
  _BYTE v169[128];
  _BYTE v170[128];
  _BYTE v171[128];

  if (!a1)
    return;
  v2 = a2;
  v3 = nwi_state_copy(a1, a2);
  v4 = v3;
  if (v3)
  {
    interface_names = nwi_state_get_interface_names(v3, 0, 0);
    v6 = interface_names;
    if (!(_DWORD)interface_names)
      goto LABEL_11;
    v7 = malloc_type_calloc(interface_names, 8uLL, 0x50040EE9192B6uLL);
    if (v7)
    {
      v8 = v7;
      v9 = nwi_state_get_interface_names(v4, v7, v6);
      if (v9)
      {
        v10 = 0;
        v11 = v9;
        v12 = 1;
        while (1)
        {
          v6 = v8[v10];
          ifstate = nwi_state_get_ifstate(v4, v6);
          if (!nwi_ifstate_get_vpn_server(ifstate))
            break;
          v12 = ++v10 < v11;
          if (v11 == v10)
            goto LABEL_9;
        }
        v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "primaryPhysicalInterface"));
        v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v108, "interfaceName"));
        v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
        LODWORD(v6) = objc_msgSend(v109, "isEqualToString:", v110);

        free(v8);
        if (v12)
          goto LABEL_13;
        goto LABEL_11;
      }
LABEL_9:
      free(v8);
    }
  }
  LODWORD(v6) = 0;
LABEL_11:
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "primaryPhysicalInterface"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "interfaceName"));
  v16 = objc_msgSend(v15, "length");

  if (!v16)
    LODWORD(v6) = 1;
LABEL_13:
  v111 = sub_10004C738(v4);
  if (v4)
    nwi_state_release(v4);
  if ((objc_msgSend(objc_getProperty(a1, v17, 72, 1), "isEqualToDictionary:", v111) & (v2 ^ 1) & 1) != 0
    || ((v6 ^ 1) & 1) != 0)
  {
    goto LABEL_95;
  }
  v18 = v111;
  v115 = v18;
  if (!objc_getProperty(a1, v19, 72, 1))
    goto LABEL_59;
  v155 = 0u;
  v156 = 0u;
  v153 = 0u;
  v154 = 0u;
  obj = objc_getProperty(a1, v20, 72, 1);
  v116 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v153, v171, 16);
  if (!v116)
    goto LABEL_58;
  v113 = *(_QWORD *)v154;
  do
  {
    for (i = 0; i != v116; i = (char *)i + 1)
    {
      if (*(_QWORD *)v154 != v113)
        objc_enumerationMutation(obj);
      v23 = *(const char **)(*((_QWORD *)&v153 + 1) + 8 * (_QWORD)i);
      v24 = objc_msgSend(objc_getProperty(a1, v21, 72, 1), "objectForKeyedSubscript:", v23);
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      v26 = (const char *)objc_msgSend(v25, "unsignedLongLongValue");

      if (v18)
      {
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", v23));
        v18 = objc_msgSend(v27, "unsignedLongLongValue");

      }
      is_debug_logging_enabled = nelog_is_debug_logging_enabled();
      if ((_DWORD)is_debug_logging_enabled)
      {
        v30 = ne_log_obj(is_debug_logging_enabled, v29);
        v31 = objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412802;
          v164 = v23;
          v165 = 2048;
          v166 = v26;
          v167 = 2048;
          v168 = v18;
          _os_log_debug_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "Interface %@: flags %llx -> %llx", buf, 0x20u);
        }

      }
      v129 = v18;
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "primaryPhysicalInterface"));
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "interfaceName"));
      v34 = objc_msgSend(v33, "isEqualToString:", v23);

      v36 = "Secondary";
      if (v34
        && (v35 = objc_msgSend(objc_getProperty(a1, v21, 168, 1), "isEqualToString:", v23),
            v36 = "Primary",
            (v35 & 1) == 0))
      {
        v38 = ne_log_obj(v35, v21);
        v39 = objc_claimAutoreleasedReturnValue(v38);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          Property = (const char *)objc_getProperty(a1, v40, 168, 1);
          *(_DWORD *)buf = 138412546;
          v164 = Property;
          v165 = 2112;
          v166 = v23;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "Primary physical interface changed: %@ -> %@", buf, 0x16u);
        }

        v37 = v129;
        if (((v129 ^ v26) & 3) == 0)
          goto LABEL_39;
      }
      else
      {
        v37 = v129;
        if (((v129 ^ v26) & 3) == 0)
          goto LABEL_56;
      }
      v42 = ne_log_obj(v35, v21);
      v43 = objc_claimAutoreleasedReturnValue(v42);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        v164 = v36;
        v165 = 2112;
        v166 = v23;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "%s Interface %@: flags changed", buf, 0x16u);
      }

LABEL_39:
      v118 = i;
      v151 = 0u;
      v152 = 0u;
      v149 = 0u;
      v150 = 0u;
      v120 = objc_getProperty(a1, v21, 120, 1);
      v124 = objc_msgSend(v120, "countByEnumeratingWithState:objects:count:", &v149, v170, 16);
      if (v124)
      {
        v122 = *(id *)v150;
        do
        {
          v45 = 0;
          do
          {
            if (*(id *)v150 != v122)
              objc_enumerationMutation(v120);
            v126 = v45;
            v46 = *(_QWORD *)(*((_QWORD *)&v149 + 1) + 8 * v45);
            v145 = 0u;
            v146 = 0u;
            v147 = 0u;
            v148 = 0u;
            v47 = objc_msgSend(objc_getProperty(a1, v44, 120, 1), "objectForKeyedSubscript:", v46);
            v130 = (id)objc_claimAutoreleasedReturnValue(v47);
            v48 = objc_msgSend(v130, "countByEnumeratingWithState:objects:count:", &v145, v169, 16);
            if (v48)
            {
              v50 = v48;
              v51 = *(_QWORD *)v146;
              do
              {
                v52 = 0;
                do
                {
                  if (*(_QWORD *)v146 != v51)
                    objc_enumerationMutation(v130);
                  v53 = *(_QWORD *)(*((_QWORD *)&v145 + 1) + 8 * (_QWORD)v52);
                  v54 = ne_log_obj(v48, v49);
                  v55 = objc_claimAutoreleasedReturnValue(v54);
                  if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
                  {
                    v57 = objc_msgSend(objc_getProperty(a1, v56, 120, 1), "objectForKeyedSubscript:", v46);
                    v58 = v26;
                    v59 = (void *)objc_claimAutoreleasedReturnValue(v57);
                    v60 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "objectForKeyedSubscript:", v53));
                    *(_DWORD *)buf = 138412546;
                    v164 = v23;
                    v165 = 2112;
                    v166 = v60;
                    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "Passing interface (%@) change event to %@", buf, 0x16u);

                    v26 = v58;
                    v37 = v129;
                  }

                  v62 = objc_msgSend(objc_getProperty(a1, v61, 120, 1), "objectForKeyedSubscript:", v46);
                  v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
                  v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectForKeyedSubscript:", v53));
                  objc_msgSend(v64, "handleChangeEventForInterface:newFlags:previousFlags:", v23, v37, v26);

                  v52 = (char *)v52 + 1;
                }
                while (v50 != v52);
                v48 = objc_msgSend(v130, "countByEnumeratingWithState:objects:count:", &v145, v169, 16);
                v50 = v48;
              }
              while (v48);
            }

            v45 = v126 + 1;
          }
          while ((id)(v126 + 1) != v124);
          v124 = objc_msgSend(v120, "countByEnumeratingWithState:objects:count:", &v149, v170, 16);
        }
        while (v124);
      }

      i = v118;
LABEL_56:
      v18 = v115;
    }
    v116 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v153, v171, 16);
  }
  while (v116);
LABEL_58:

LABEL_59:
  if (v18)
  {
    v143 = 0u;
    v144 = 0u;
    v141 = 0u;
    v142 = 0u;
    v65 = v18;
    v66 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v141, buf, 16);
    if (v66)
    {
      v67 = v66;
      v68 = *(_QWORD *)v142;
      v117 = v65;
      v114 = *(_QWORD *)v142;
      do
      {
        v69 = 0;
        v119 = v67;
        do
        {
          if (*(_QWORD *)v142 != v68)
            objc_enumerationMutation(v65);
          v70 = *(_QWORD *)(*((_QWORD *)&v141 + 1) + 8 * (_QWORD)v69);
          v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "objectForKeyedSubscript:", v70));
          v131 = objc_msgSend(v71, "unsignedLongLongValue");

          if (!objc_getProperty(a1, v72, 72, 1)
            || (v74 = objc_msgSend(objc_getProperty(a1, v73, 72, 1), "objectForKeyedSubscript:", v70),
                v75 = (void *)objc_claimAutoreleasedReturnValue(v74),
                v75,
                !v75))
          {
            v76 = nelog_is_debug_logging_enabled();
            if ((_DWORD)v76)
            {
              v78 = ne_log_obj(v76, v77);
              v79 = objc_claimAutoreleasedReturnValue(v78);
              if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)v159 = 138412546;
                v160 = v70;
                v161 = 2048;
                v162 = v131;
                _os_log_debug_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "Interface %@ showed up with flags %llx", v159, 0x16u);
              }

            }
            if ((v131 & 3) != 0)
            {
              v121 = v69;
              v80 = ne_log_obj(v76, v77);
              v81 = objc_claimAutoreleasedReturnValue(v80);
              if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)v159 = 138412290;
                v160 = v70;
                _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_INFO, "Interface %@ showed up with an address", v159, 0xCu);
              }

              v139 = 0u;
              v140 = 0u;
              v137 = 0u;
              v138 = 0u;
              v123 = objc_getProperty(a1, v82, 120, 1);
              v127 = objc_msgSend(v123, "countByEnumeratingWithState:objects:count:", &v137, v158, 16);
              if (v127)
              {
                v125 = *(_QWORD *)v138;
                do
                {
                  v84 = 0;
                  do
                  {
                    if (*(_QWORD *)v138 != v125)
                      objc_enumerationMutation(v123);
                    v128 = v84;
                    v85 = *(_QWORD *)(*((_QWORD *)&v137 + 1) + 8 * v84);
                    v133 = 0u;
                    v134 = 0u;
                    v135 = 0u;
                    v136 = 0u;
                    v86 = objc_msgSend(objc_getProperty(a1, v83, 120, 1), "objectForKeyedSubscript:", v85);
                    v87 = (void *)objc_claimAutoreleasedReturnValue(v86);
                    v88 = objc_msgSend(v87, "countByEnumeratingWithState:objects:count:", &v133, v157, 16);
                    if (v88)
                    {
                      v90 = v88;
                      v91 = *(_QWORD *)v134;
                      do
                      {
                        v92 = 0;
                        do
                        {
                          if (*(_QWORD *)v134 != v91)
                            objc_enumerationMutation(v87);
                          v93 = *(_QWORD *)(*((_QWORD *)&v133 + 1) + 8 * (_QWORD)v92);
                          v94 = ne_log_obj(v88, v89);
                          v95 = objc_claimAutoreleasedReturnValue(v94);
                          if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
                          {
                            v97 = objc_msgSend(objc_getProperty(a1, v96, 120, 1), "objectForKeyedSubscript:", v85);
                            v98 = (void *)objc_claimAutoreleasedReturnValue(v97);
                            v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "objectForKeyedSubscript:", v93));
                            *(_DWORD *)v159 = 138412546;
                            v160 = v70;
                            v161 = 2112;
                            v162 = v99;
                            _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_INFO, "Passing interface (%@) change event to %@", v159, 0x16u);

                          }
                          v101 = objc_msgSend(objc_getProperty(a1, v100, 120, 1), "objectForKeyedSubscript:", v85);
                          v102 = (void *)objc_claimAutoreleasedReturnValue(v101);
                          v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "objectForKeyedSubscript:", v93));
                          objc_msgSend(v103, "handleChangeEventForInterface:newFlags:previousFlags:", v70, v131, 0);

                          v92 = (char *)v92 + 1;
                        }
                        while (v90 != v92);
                        v88 = objc_msgSend(v87, "countByEnumeratingWithState:objects:count:", &v133, v157, 16);
                        v90 = v88;
                      }
                      while (v88);
                    }

                    v84 = v128 + 1;
                  }
                  while ((id)(v128 + 1) != v127);
                  v127 = objc_msgSend(v123, "countByEnumeratingWithState:objects:count:", &v137, v158, 16);
                }
                while (v127);
              }

              v65 = v117;
              v67 = v119;
              v68 = v114;
              v69 = v121;
            }
          }
          v69 = (char *)v69 + 1;
        }
        while (v69 != v67);
        v67 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v141, buf, 16);
      }
      while (v67);
    }

    v18 = v115;
  }

  objc_setProperty_atomic(a1, v104, v18, 72);
  v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "primaryPhysicalInterface"));
  v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v105, "interfaceName"));
  objc_setProperty_atomic(a1, v107, v106, 168);

LABEL_95:
}

id sub_10004C738(uint64_t a1)
{
  uint64_t interface_names;
  uint64_t v3;
  char *v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t ifstate;
  uint64_t v11;
  NSString *v12;
  void *v13;
  void *v14;
  NSNumber *v15;
  void *v16;
  NSString *v17;
  void *v18;
  id v19;

  if (a1)
  {
    interface_names = nwi_state_get_interface_names(a1, 0, 0);
    if ((_DWORD)interface_names)
    {
      v3 = interface_names;
      v4 = (char *)malloc_type_calloc(interface_names, 8uLL, 0x50040EE9192B6uLL);
      if (v4)
      {
        v5 = v4;
        v6 = nwi_state_get_interface_names(a1, v4, v3);
        if (v6)
        {
          v7 = 0;
          v8 = 0;
          v9 = 8 * v6;
          do
          {
            ifstate = nwi_state_get_ifstate(a1, *(_QWORD *)&v5[v7]);
            if (ifstate)
            {
              v11 = ifstate;
              if (!nwi_ifstate_get_vpn_server())
              {
                if (!v8)
                  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
                v12 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", nwi_ifstate_get_ifname(v11));
                v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
                v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v13));

                if (!v14)
                {
                  v15 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", nwi_ifstate_get_flags(v11));
                  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
                  v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", nwi_ifstate_get_ifname(v11));
                  v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
                  objc_msgSend(v8, "setObject:forKeyedSubscript:", v16, v18);

                }
              }
            }
            v7 += 8;
          }
          while (v9 != v7);
          free(v5);
          if (v8)
          {
            v19 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithDictionary:", v8);

            return v19;
          }
        }
        else
        {
          free(v5);
        }
      }
    }
  }
  return 0;
}

void sub_10004C8EC(uint64_t a1, const char *a2)
{
  id Property;
  const char *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 280, 1);
  if ((objc_msgSend(Property, "containsObject:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    v5 = *(id *)(a1 + 32);
    if (v5)
      v5 = objc_getProperty(v5, v4, 280, 1);
    objc_msgSend(v5, "addObject:", *(_QWORD *)(a1 + 40));
  }
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
    v7 = objc_getProperty(v6, v4, 256, 1);
    v8 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10004C9C4;
  v9[3] = &unk_1000BE110;
  v9[4] = v8;
  v10 = *(id *)(a1 + 40);
  objc_msgSend(v7, "satisfyPathAgentsWithCompletionHandler:", v9);

}

void sub_10004C9C4(uint64_t a1, void *a2, void *a3)
{
  const char *v5;
  id v6;
  id Property;
  id v8;

  v8 = a2;
  v6 = a3;
  if (v8)
  {
    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v5, 280, 1);
    objc_msgSend(Property, "removeObject:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 40), "satisfyPathResult:", 0);
  }

}

void sub_10004CA34(uint64_t a1, const char *a2)
{
  id Property;
  const char *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 272, 1);
  if ((objc_msgSend(Property, "containsObject:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    v5 = *(id *)(a1 + 32);
    if (v5)
      v5 = objc_getProperty(v5, v4, 272, 1);
    objc_msgSend(v5, "addObject:", *(_QWORD *)(a1 + 40));
  }
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
    v7 = objc_getProperty(v6, v4, 248, 1);
    v8 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10004CB0C;
  v9[3] = &unk_1000BE110;
  v9[4] = v8;
  v10 = *(id *)(a1 + 40);
  objc_msgSend(v7, "satisfyPathAgentsWithCompletionHandler:", v9);

}

void sub_10004CB0C(uint64_t a1, void *a2, void *a3)
{
  const char *v5;
  id v6;
  id Property;
  id v8;

  v8 = a2;
  v6 = a3;
  if (v8)
  {
    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v5, 272, 1);
    objc_msgSend(Property, "removeObject:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 40), "satisfyPathResult:", 0);
  }

}

void sub_10004CB7C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  id *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  const char *v13;
  void *v14;
  id Property;
  id v16;
  id v17;
  id obj;
  _QWORD v19[5];
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t v25[128];
  uint8_t buf[4];
  id v27;

  v3 = a2;
  v4 = ne_log_large_obj(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v27 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Got a configuration change callback with configuration IDs %@", buf, 0xCu);
  }

  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  obj = v3;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v22;
    v8 = (id *)(a1 + 32);
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v22 != v7)
          objc_enumerationMutation(obj);
        v10 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NEConfigurationManager sharedManagerForAllUsers](NEConfigurationManager, "sharedManagerForAllUsers"));
        WeakRetained = objc_loadWeakRetained(v8);
        v14 = WeakRetained;
        if (WeakRetained)
          Property = objc_getProperty(WeakRetained, v13, 88, 1);
        else
          Property = 0;
        v16 = Property;
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        v19[2] = sub_10004EC88;
        v19[3] = &unk_1000BDF68;
        objc_copyWeak(&v20, v8);
        v19[4] = v10;
        objc_msgSend(v11, "loadConfigurationWithID:withCompletionQueue:handler:", v10, v16, v19);

        objc_destroyWeak(&v20);
        v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      v6 = v17;
    }
    while (v17);
  }

}

void sub_10004CD94(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10004CDB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  Block_layout *v6;
  id v7;
  SEL v8;
  _xpc_connection_s *v9;
  SEL v10;
  _xpc_connection_s *v11;
  SEL v12;
  _xpc_connection_s *v13;
  int *v14;
  void *v15;
  const char *v16;
  NSObject *Property;
  SEL v18;
  _QWORD v19[6];

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v19[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Handling SIGTERM", (uint8_t *)v19, 2u);
  }

  v5 = *(void **)(a1 + 32);
  v6 = &stru_1000BDFB0;
  if (v5)
  {
    v7 = v5;
    objc_sync_enter(v7);
    v9 = (_xpc_connection_s *)objc_getProperty(v7, v8, 96, 1);
    xpc_connection_suspend(v9);

    v11 = (_xpc_connection_s *)objc_getProperty(v7, v10, 104, 1);
    xpc_connection_suspend(v11);

    v13 = (_xpc_connection_s *)objc_getProperty(v7, v12, 112, 1);
    xpc_connection_suspend(v13);

    sub_10004AF44(v7);
    sub_10004B0B4(v7);
    sub_10004B188(v7);
    v14 = (int *)v7;
    objc_sync_enter(v14);
    notify_cancel(v14[7]);
    notify_cancel(v14[8]);
    notify_cancel(v14[9]);
    objc_sync_exit(v14);

    if ((v14[2] & 1) != 0)
      v15 = (void *)CNPluginMonitorStop();
    if (!*((_QWORD *)v14 + 37))
      sub_10004EC78(v15);
    Property = objc_getProperty(v14, v16, 88, 1);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10004EA7C;
    v19[3] = &unk_1000BEB80;
    v19[4] = v14;
    dispatch_async(Property, v19);
    objc_setProperty_atomic_copy(v14, v18, &stru_1000BDFB0, 304);
    objc_sync_exit(v14);

  }
}

void sub_10004CF78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004CF9C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  xpc_type_t type;
  void *v6;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v6 = v3;
    type = xpc_get_type(v3);
    v4 = v6;
    if (type == (xpc_type_t)&_xpc_type_connection)
    {
      sub_10004D52C(*(void **)(a1 + 32), v6);
      v4 = v6;
    }
  }

}

void sub_10004CFFC(uint64_t a1, void *a2)
{
  _xpc_connection_s *v3;
  BOOL v4;
  _xpc_connection_s *connection;

  v3 = a2;
  if (v3)
  {
    connection = v3;
    v4 = xpc_get_type(v3) == (xpc_type_t)&_xpc_type_connection;
    v3 = connection;
    if (v4)
    {
      xpc_connection_set_context(connection, "com.apple.nesessionmanager.flow-divert-token");
      sub_10004D52C(*(void **)(a1 + 32), connection);
      v3 = connection;
    }
  }

}

void sub_10004D064(uint64_t a1, void *a2)
{
  id v3;
  BOOL v4;
  void *v5;
  const char *v6;
  _xpc_connection_s *v7;
  NSObject *Property;
  _xpc_connection_s *v9;
  id v10;
  _QWORD handler[4];
  _xpc_connection_s *v12;
  void *v13;

  v3 = a2;
  if (v3)
  {
    v10 = v3;
    v4 = xpc_get_type(v3) == (xpc_type_t)&_xpc_type_connection;
    v3 = v10;
    if (v4)
    {
      v5 = *(void **)(a1 + 32);
      v7 = (_xpc_connection_s *)v10;
      if (v5)
      {
        Property = objc_getProperty(v5, v6, 88, 1);
        xpc_connection_set_target_queue(v7, Property);
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_10004D138;
        handler[3] = &unk_1000BE048;
        v9 = v7;
        v12 = v9;
        v13 = v5;
        xpc_connection_set_event_handler(v9, handler);
        xpc_connection_resume(v9);

      }
      v3 = v10;
    }
  }

}

void sub_10004D138(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _xpc_connection_s *v5;
  int64_t int64;
  pid_t pid;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  _OWORD *v13;
  __int16 v14;
  pid_t v15;
  _OWORD buffer[16];

  v3 = a2;
  v4 = v3;
  if (!v3 || xpc_get_type(v3) != (xpc_type_t)&_xpc_type_dictionary)
  {
    v5 = *(_xpc_connection_s **)(a1 + 32);
LABEL_4:
    xpc_connection_cancel(v5);
    goto LABEL_5;
  }
  int64 = xpc_dictionary_get_int64(v4, "SessionClientType");
  v5 = *(_xpc_connection_s **)(a1 + 32);
  if (int64 != 2)
    goto LABEL_4;
  pid = xpc_connection_get_pid(v5);
  memset(buffer, 0, sizeof(buffer));
  v8 = proc_name(pid, buffer, 0x100u);
  v10 = ne_log_obj(v8, v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = 136315394;
    v13 = buffer;
    v14 = 1024;
    v15 = pid;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Got a new agent client connection from %s(%d)", (uint8_t *)&v12, 0x12u);
  }

  sub_10004D290(*(void **)(a1 + 40), *(void **)(a1 + 32), v4);
LABEL_5:

}

void sub_10004D290(void *a1, void *a2, void *a3)
{
  const char *v5;
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  const char *v19;
  id v20;
  void *v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void *v31;
  _xpc_connection_s *connection;
  uint8_t buf[16];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  _BYTE v43[128];

  connection = a2;
  v6 = a3;
  if (a1)
  {
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v7 = objc_getProperty(a1, v5, 120, 1);
    v29 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
    if (v29)
    {
      v9 = *(_QWORD *)v39;
      v31 = v7;
      v28 = *(_QWORD *)v39;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v39 != v9)
            objc_enumerationMutation(v7);
          v30 = v10;
          v11 = *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * v10);
          v34 = 0u;
          v35 = 0u;
          v36 = 0u;
          v37 = 0u;
          v12 = objc_msgSend(objc_getProperty(a1, v8, 120, 1), "objectForKeyedSubscript:", v11);
          v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
          v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
          if (v14)
          {
            v15 = v14;
            v16 = *(_QWORD *)v35;
            while (2)
            {
              for (i = 0; i != v15; i = (char *)i + 1)
              {
                if (*(_QWORD *)v35 != v16)
                  objc_enumerationMutation(v13);
                v18 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)i);
                if (objc_msgSend(v18, "intValue") == 4)
                {
                  v20 = objc_msgSend(objc_getProperty(a1, v19, 120, 1), "objectForKeyedSubscript:", v11);
                  v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
                  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", v18));
                  v23 = objc_msgSend(v22, "handleAgentClientConnection:WithMessage:", connection, v6);

                  if (v23)
                  {

                    goto LABEL_22;
                  }
                }
              }
              v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
              if (v15)
                continue;
              break;
            }
          }

          v10 = v30 + 1;
          v7 = v31;
          v9 = v28;
        }
        while ((id)(v30 + 1) != v29);
        v29 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
      }
      while (v29);
    }

    v26 = ne_log_obj(v24, v25);
    v27 = objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "No filter session claimed the connection request", buf, 2u);
    }

    xpc_connection_cancel(connection);
  }
LABEL_22:

}

void sub_10004D52C(void *a1, void *a2)
{
  id v3;
  id v4;
  SEL v5;
  NSObject *v6;
  _xpc_connection_s *v7;
  _QWORD handler[4];
  id v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v3 = a2;
  if (a1)
  {
    kdebug_trace(726990852, 0, 0, 0, 0);
    v12 = 0;
    v13 = &v12;
    v14 = 0x3032000000;
    v15 = sub_10004D670;
    v16 = sub_10004D680;
    v4 = v3;
    v17 = v4;
    v6 = objc_getProperty(a1, v5, 88, 1);
    xpc_connection_set_target_queue((xpc_connection_t)v4, v6);

    v7 = (_xpc_connection_s *)v13[5];
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10004D688;
    handler[3] = &unk_1000BE020;
    v11 = &v12;
    v9 = v4;
    v10 = a1;
    xpc_connection_set_event_handler(v7, handler);
    xpc_connection_resume((xpc_connection_t)v13[5]);

    _Block_object_dispose(&v12, 8);
  }

}

void sub_10004D658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004D670(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10004D680(uint64_t a1)
{

}

void sub_10004D688(uint64_t a1, void *a2)
{
  id v3;
  int64_t int64;
  const char *context;
  pid_t v7;
  uint64_t v8;
  NSObject *v9;
  _BYTE *v10;
  _xpc_connection_s *v11;
  id v12;
  const uint8_t *v13;
  int64_t v14;
  id v15;
  const char *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  pid_t pid;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  void *v33;
  _xpc_connection_s *v34;
  id v35;
  void *v36;
  NSString *v37;
  id v38;
  SEL v39;
  const char *v40;
  void **p_cache;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  const char *v46;
  id v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  id v51;
  void *v52;
  void *v53;
  uint64_t v54;
  id v55;
  void **v56;
  void *v57;
  void *v58;
  const char *v59;
  id v60;
  void *v61;
  void *v62;
  xpc_object_t reply;
  uint64_t v64;
  NSObject *v65;
  void *v66;
  id v67;
  xpc_object_t v68;
  _BOOL4 v69;
  id Property;
  const char *v71;
  xpc_type_t value;
  uint64_t v73;
  void *v74;
  int v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  NSObject *v79;
  const char *v80;
  id v81;
  SEL v82;
  SEL v83;
  const char *v84;
  SEL v85;
  uint64_t v86;
  NSObject *v87;
  id v88;
  _BOOL4 v89;
  uint64_t v90;
  NSObject *v91;
  const char *v92;
  const char *v93;
  const char *v94;
  const char *v95;
  xpc_object_t original;
  _xpc_connection_s *connection;
  id v98;
  id obj;
  uint64_t v100;
  id v101;
  uint64_t v102;
  void *v103;
  id v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 buffer;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint8_t v129[128];
  _BYTE buf[24];
  const char *v131;
  _xpc_connection_s *v132;
  id v133;
  int v134;
  unsigned __int8 uuid[8];
  uint64_t v136;

  v3 = a2;
  kdebug_trace(726990856, 0, 0, 0, 0);
  if (!v3 || xpc_get_type(v3) != (xpc_type_t)&_xpc_type_dictionary)
  {
LABEL_20:
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v28 = *(void **)(v27 + 40);
    *(_QWORD *)(v27 + 40) = 0;

    goto LABEL_21;
  }
  int64 = xpc_dictionary_get_int64(v3, "SessionClientType");
  context = (const char *)xpc_connection_get_context(*(xpc_connection_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  if (context)
  {
    if (!strcmp(context, "com.apple.nesessionmanager.flow-divert-token") && int64 != 1)
    {
      pid = xpc_connection_get_pid(*(xpc_connection_t *)(a1 + 32));
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v115 = 0u;
      v116 = 0u;
      buffer = 0u;
      v114 = 0u;
      v23 = proc_name(pid, &buffer, 0x100u);
      int64 = 0;
LABEL_17:
      v25 = ne_log_obj(v23, v24);
      v26 = objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = int64;
        _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Cancelling connection with invalid client type: %lld", buf, 0xCu);
      }

      xpc_connection_cancel(*(xpc_connection_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
      goto LABEL_20;
    }
  }
  v7 = xpc_connection_get_pid(*(xpc_connection_t *)(a1 + 32));
  v127 = 0u;
  v128 = 0u;
  v125 = 0u;
  v126 = 0u;
  v123 = 0u;
  v124 = 0u;
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  buffer = 0u;
  v114 = 0u;
  v23 = proc_name(v7, &buffer, 0x100u);
  switch(int64)
  {
    case 1:
      v8 = ne_log_obj(v23, v24);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = &buffer;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v7;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Got a new session client connection from %s(%d)", buf, 0x12u);
      }

      v10 = *(_BYTE **)(a1 + 40);
      v11 = (_xpc_connection_s *)*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      if (v10)
      {
        v12 = v3;
        v13 = xpc_dictionary_get_uuid(v12, "SessionIdentifier");
        v14 = xpc_dictionary_get_int64(v12, "SessionConfigType");

        if (v13 && (v15 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v13)) != 0)
        {
          v17 = v15;
          v18 = objc_msgSend(objc_getProperty(v10, v16, 120, 1), "objectForKeyedSubscript:", v15);
          v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v14));
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", v20));

          xpc_connection_suspend(v11);
          if (v21)
          {
            objc_msgSend(v21, "addClientConnection:", v11);
          }
          else
          {
            *(_QWORD *)buf = _NSConcreteStackBlock;
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = sub_10004E1F8;
            v131 = (const char *)&unk_1000BE0E8;
            v132 = v11;
            v133 = v17;
            v134 = v14;
            sub_10004E2F4(v10, v133, v14, buf);

          }
        }
        else
        {
          v76 = ne_log_obj(v15, v16);
          v77 = objc_claimAutoreleasedReturnValue(v76);
          if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "Session client request is missing a configuration ID, canceling new connection ", buf, 2u);
          }

          xpc_connection_cancel(v11);
        }
      }
      goto LABEL_82;
    case 2:
      v29 = ne_log_obj(v23, v24);
      v30 = objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = &buffer;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v7;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Got a new agent client connection from %s(%d)", buf, 0x12u);
      }

      sub_10004D290(*(void **)(a1 + 40), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v3);
      goto LABEL_21;
    case 3:
      v31 = ne_log_obj(v23, v24);
      v32 = objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = &buffer;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v7;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Got a new client connection for mapping an interface to the provider UUID from %s(%d)", buf, 0x12u);
      }

      v33 = *(void **)(a1 + 40);
      v34 = (_xpc_connection_s *)*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v98 = v3;
      v35 = v3;
      v36 = v35;
      if (v33)
      {
        original = v35;
        connection = v34;
        v37 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", xpc_dictionary_get_string(v35, "InterfaceMapInfo"));
        v38 = (id)objc_claimAutoreleasedReturnValue(v37);
        *(_QWORD *)uuid = 0;
        v136 = 0;
        v109 = 0u;
        v110 = 0u;
        v111 = 0u;
        v112 = 0u;
        obj = objc_getProperty(v33, v39, 120, 1);
        v101 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v109, buf, 16);
        if (v101)
        {
          v100 = *(_QWORD *)v110;
          p_cache = &OBJC_METACLASS___NESMFilterSessionStateIdle.cache;
          v103 = v33;
          do
          {
            v42 = 0;
            do
            {
              if (*(_QWORD *)v110 != v100)
                objc_enumerationMutation(obj);
              v102 = v42;
              v43 = *(_QWORD *)(*((_QWORD *)&v109 + 1) + 8 * v42);
              v105 = 0u;
              v106 = 0u;
              v107 = 0u;
              v108 = 0u;
              v44 = objc_msgSend(objc_getProperty(v33, v40, 120, 1), "objectForKeyedSubscript:", v43);
              v104 = (id)objc_claimAutoreleasedReturnValue(v44);
              v45 = objc_msgSend(v104, "countByEnumeratingWithState:objects:count:", &v105, v129, 16);
              if (v45)
              {
                v47 = v45;
                v48 = *(_QWORD *)v106;
                do
                {
                  v49 = 0;
                  do
                  {
                    if (*(_QWORD *)v106 != v48)
                      objc_enumerationMutation(v104);
                    v50 = *(_QWORD *)(*((_QWORD *)&v105 + 1) + 8 * (_QWORD)v49);
                    v51 = objc_msgSend(objc_getProperty(v33, v46, 120, 1), "objectForKeyedSubscript:", v43);
                    v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
                    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "objectForKeyedSubscript:", v50));

                    v54 = objc_opt_class(p_cache + 323);
                    if ((objc_opt_isKindOfClass(v53, v54) & 1) != 0 && objc_msgSend(v53, "virtualInterface"))
                    {
                      v55 = objc_msgSend(v53, "copyTunnelInterfaceName");
                      if (v55 == v38)
                      {
                        v56 = p_cache;
                        v57 = v38;
                        v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "primaryTunnelPlugin"));
                        v60 = sub_100016BDC(v58, v59);
                        v61 = (void *)objc_claimAutoreleasedReturnValue(v60);

                        if (objc_msgSend(v61, "count"))
                        {
                          v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "firstObject"));
                          objc_msgSend(v62, "getUUIDBytes:", uuid);

                        }
                        v38 = v57;
                        p_cache = v56;
                        v33 = v103;
                      }

                    }
                    v49 = (char *)v49 + 1;
                  }
                  while (v47 != v49);
                  v47 = objc_msgSend(v104, "countByEnumeratingWithState:objects:count:", &v105, v129, 16);
                }
                while (v47);
              }

              v42 = v102 + 1;
            }
            while ((id)(v102 + 1) != v101);
            v101 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v109, buf, 16);
          }
          while (v101);
        }

        v36 = original;
        reply = xpc_dictionary_create_reply(original);
        xpc_dictionary_set_uuid(reply, "MachOUUID", uuid);
        v34 = connection;
        xpc_connection_send_message(connection, reply);

      }
      v3 = v98;
      goto LABEL_21;
    case 4:
      v64 = ne_log_obj(v23, v24);
      v65 = objc_claimAutoreleasedReturnValue(v64);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = &buffer;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v7;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "Got a new client connection for DeviceCommunicationException %s(%d)", buf, 0x12u);
      }

      v66 = *(void **)(a1 + 40);
      v11 = (_xpc_connection_s *)*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      if (!v66)
        goto LABEL_82;
      v67 = v3;
      v68 = xpc_dictionary_create_reply(v67);
      v69 = xpc_dictionary_get_BOOL(v67, "DeviceCommunicationExceptionEnable");

      if (!v11)
        goto LABEL_79;
      value = (xpc_type_t)xpc_connection_copy_entitlement_value(v11, "com.apple.private.networkextension.test-control");
      v74 = value;
      if (value && (value = xpc_get_type(value), value == (xpc_type_t)&_xpc_type_BOOL))
      {
        value = (xpc_type_t)xpc_BOOL_get_value(v74);
        v75 = (int)value;
      }
      else
      {
        v75 = 0;
      }
      v78 = ne_log_obj(value, v73);
      v79 = objc_claimAutoreleasedReturnValue(v78);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
      {
        v94 = "not ";
        if (v75)
          v94 = "";
        v95 = "disable";
        *(_QWORD *)&buf[4] = "-[NESMServer handleDeviceCommunicationException:initialMessage:]";
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[14] = v94;
        *(_WORD *)&buf[12] = 2080;
        if (v69)
          v95 = "enable";
        *(_WORD *)&buf[22] = 2080;
        v131 = v95;
        _os_log_debug_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "%s: process %sallowed to %s DeviceCommunication exception", buf, 0x20u);
      }

      if (!v75)
        goto LABEL_79;
      if (!objc_getProperty(v66, v71, 344, 1))
      {
        v81 = objc_msgSend(objc_alloc((Class)NEPolicySession), "initWithSessionName:", CFSTR("NESMServer Control"));
        objc_setProperty_atomic(v66, v82, v81, 344);

        if (objc_getProperty(v66, v83, 344, 1))
        {
          objc_msgSend(objc_getProperty(v66, v84, 344, 1), "setPriority:", 100);
          objc_msgSend(objc_getProperty(v66, v85, 344, 1), "lockSessionToCurrentProcess");
        }
        else
        {
          v86 = ne_log_obj(0, v84);
          v87 = objc_claimAutoreleasedReturnValue(v86);
          if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_ERROR, "Failed to create NESMServer control policy session", buf, 2u);
          }

        }
      }
      if (v69)
      {
        *(_DWORD *)buf = 1;
        Property = objc_getProperty(v66, v80, 344, 1);
        if (!Property)
          goto LABEL_79;
        v88 = objc_getProperty(v66, v71, 344, 1);
        Property = (id)sub_100056A58(v88, (unsigned int *)buf);
        if (!(_DWORD)Property)
          goto LABEL_79;
LABEL_78:
        Property = objc_msgSend(objc_getProperty(v66, v71, 344, 1), "apply");
        v89 = (int)Property;
        goto LABEL_80;
      }
      Property = objc_getProperty(v66, v80, 344, 1);
      if (Property)
      {
        Property = objc_msgSend(objc_getProperty(v66, v71, 344, 1), "removeAllPolicies");
        if ((_DWORD)Property)
          goto LABEL_78;
      }
LABEL_79:
      v89 = 0;
LABEL_80:
      v90 = ne_log_obj(Property, v71);
      v91 = objc_claimAutoreleasedReturnValue(v90);
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
      {
        v92 = "disable";
        if (v69)
          v92 = "enable";
        v93 = "failed";
        *(_QWORD *)&buf[4] = "-[NESMServer handleDeviceCommunicationException:initialMessage:]";
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[14] = v92;
        *(_WORD *)&buf[12] = 2080;
        if (v89)
          v93 = "succeeded";
        *(_WORD *)&buf[22] = 2080;
        v131 = v93;
        _os_log_debug_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "%s: DeviceCommunication exception %s %s", buf, 0x20u);
      }

      xpc_dictionary_set_BOOL(v68, "DeviceCommunicationExceptionResult", v89);
      xpc_connection_send_message(v11, v68);

LABEL_82:
LABEL_21:

      return;
    default:
      goto LABEL_17;
  }
}

void sub_10004E1F8(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;

  if (a2)
  {
    objc_msgSend(a2, "addClientConnection:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    v3 = ne_log_obj(a1, 0);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(_DWORD *)(a1 + 48);
      v7 = 138412546;
      v8 = v5;
      v9 = 1024;
      v10 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to add a pending session request or failed to load session for %@ (%d), canceling new connection", (uint8_t *)&v7, 0x12u);
    }

    xpc_connection_resume(*(xpc_connection_t *)(a1 + 32));
    xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
  }
}

void sub_10004E2F4(_BYTE *a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  void (**v8)(id, _QWORD);
  void *v9;
  SEL v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  const char *v19;
  id v20;
  void *v21;
  const char *v22;
  id v23;
  SEL v24;
  id v25;
  void *v26;
  void (**v27)(id, _QWORD);
  id v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  id v32;
  int v33;
  int v34;
  uint64_t v35;
  NSObject *v36;
  int v37;
  _BYTE v38[14];
  __int16 v39;
  int v40;

  v7 = a2;
  v8 = a4;
  if (a1)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
    v11 = objc_msgSend(objc_getProperty(a1, v10, 128, 1), "objectForKeyedSubscript:", v7);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v9));

    v16 = ne_log_obj(v14, v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v37 = 67109378;
      *(_DWORD *)v38 = a3;
      *(_WORD *)&v38[4] = 2112;
      *(_QWORD *)&v38[6] = v7;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Adding a pending session for type %d and id %@", (uint8_t *)&v37, 0x12u);
    }

    if (!v13)
    {
      v18 = objc_alloc_init((Class)NSMutableArray);
      if (!v18)
      {
        v8[2](v8, 0);
LABEL_16:

        goto LABEL_17;
      }
      v13 = v18;
      v20 = objc_msgSend(objc_getProperty(a1, v19, 128, 1), "objectForKeyedSubscript:", v7);
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);

      if (!v21)
      {
        v23 = objc_alloc_init((Class)NSMutableDictionary);
        objc_msgSend(objc_getProperty(a1, v24, 128, 1), "setObject:forKeyedSubscript:", v23, v7);

      }
      v25 = objc_msgSend(objc_getProperty(a1, v22, 128, 1), "objectForKeyedSubscript:", v7);
      v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      objc_msgSend(v26, "setObject:forKeyedSubscript:", v13, v9);

    }
    v27 = objc_retainBlock(v8);
    objc_msgSend(v13, "addObject:", v27);

    v28 = objc_msgSend(v13, "count");
    if (v28 == (id)1 && (a1[9] & 1) != 0 && (a1[10] & 1) != 0)
    {
      v35 = ne_log_obj(1, v29);
      v36 = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        v37 = 67109378;
        *(_DWORD *)v38 = a3;
        *(_WORD *)&v38[4] = 2112;
        *(_QWORD *)&v38[6] = v7;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Loading session for new client with type %d and ID %@", (uint8_t *)&v37, 0x12u);
      }

      sub_10004E60C(a1, a3, v7);
    }
    else
    {
      v30 = ne_log_obj(v28, v29);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        v32 = objc_msgSend(v13, "count");
        v33 = a1[9] & 1;
        v34 = a1[10] & 1;
        v37 = 134218496;
        *(_QWORD *)v38 = v32;
        *(_WORD *)&v38[8] = 1024;
        *(_DWORD *)&v38[10] = v33;
        v39 = 1024;
        v40 = v34;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Queuing pending session request because there are already pending requests (%lu) or because the file handles have not yet been received (%d), or because the provider manager has not fully started (%d)", (uint8_t *)&v37, 0x18u);
      }

    }
    goto LABEL_16;
  }
LABEL_17:

}

void sub_10004E60C(void *a1, int a2, void *a3)
{
  id v5;
  void *v6;
  SEL v7;
  id Property;
  id v9;
  _QWORD v10[5];
  id v11;
  int v12;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NEConfigurationManager sharedManagerForAllUsers](NEConfigurationManager, "sharedManagerForAllUsers"));
  Property = objc_getProperty(a1, v7, 88, 1);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10004E6D8;
  v10[3] = &unk_1000BE098;
  v10[4] = a1;
  v9 = v5;
  v11 = v9;
  v12 = a2;
  objc_msgSend(v6, "loadConfigurationAndUserWithID:withCompletionQueue:handler:", v9, Property, v10);

}

void sub_10004E6D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const char *v9;
  id v10;
  id Property;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  _BOOL4 v20;
  uint64_t v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  const char *v25;
  id v26;
  void *v27;
  void *v28;
  const char *v29;
  id v30;
  void *v31;
  const char *v32;
  const char *v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  void *i;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint8_t v49[128];
  uint8_t buf[4];
  uint64_t v51;
  __int16 v52;
  id v53;

  v7 = a2;
  v8 = a3;
  v10 = a4;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v9, 128, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v13));

  if (v14)
  {
    if (v7)
    {
      objc_msgSend(v7, "applyOverrides");
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NESMSession sessionWithConfiguration:andType:andServer:](NESMSession, "sessionWithConfiguration:andType:andServer:", v7, *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 32)));
LABEL_11:
      kdebug_trace(726990860, 0, 0, 0, 0);
      v26 = *(id *)(a1 + 32);
      if (v26)
        v26 = objc_getProperty(v26, v25, 128, 1);
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
      objc_msgSend(v27, "removeObjectForKey:", v28);

      if (v17)
      {
        v30 = *(id *)(a1 + 32);
        if (v30)
          v30 = objc_getProperty(v30, v29, 120, 1);
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

        if (!v31)
        {
          v34 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 0);
          v35 = *(id *)(a1 + 32);
          if (v35)
            v35 = objc_getProperty(v35, v33, 120, 1);
          objc_msgSend(v35, "setObject:forKeyedSubscript:", v34, *(_QWORD *)(a1 + 40));

        }
        v36 = *(id *)(a1 + 32);
        if (v36)
          v36 = objc_getProperty(v36, v32, 120, 1);
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
        v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
        objc_msgSend(v37, "setObject:forKeyedSubscript:", v17, v38);

        objc_msgSend(v17, "setConfigurationUserUUIDs:", v8);
      }
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v39 = v14;
      v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v45, v49, 16);
      if (v40)
      {
        v41 = v40;
        v42 = *(_QWORD *)v46;
        do
        {
          for (i = 0; i != v41; i = (char *)i + 1)
          {
            if (*(_QWORD *)v46 != v42)
              objc_enumerationMutation(v39);
            (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)i) + 16))(*(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)i));
          }
          v41 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v45, v49, 16);
        }
        while (v41);
      }

      goto LABEL_31;
    }
    v18 = ne_log_obj(v15, v16);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    v20 = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (v10)
    {
      if (v20)
      {
        v21 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        v51 = v21;
        v52 = 2048;
        v53 = objc_msgSend(v10, "code");
        v22 = "Failed to load configuration with ID %@: %ld";
        v23 = v19;
        v24 = 22;
LABEL_33:
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v22, buf, v24);
      }
    }
    else if (v20)
    {
      v44 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v51 = v44;
      v22 = "Failed to load configuration with ID %@";
      v23 = v19;
      v24 = 12;
      goto LABEL_33;
    }

    v17 = 0;
    goto LABEL_11;
  }
LABEL_31:

}

void sub_10004EA7C(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  const char *v5;
  id v6;
  void *i;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  const char *v12;
  id v13;
  uint64_t v14;
  void *j;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  id obj;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  _BYTE v31[128];

  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 120, 1);
  obj = Property;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
  if (v4)
  {
    v6 = v4;
    v21 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v27 != v21)
          objc_enumerationMutation(obj);
        v8 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
        v22 = 0u;
        v23 = 0u;
        v24 = 0u;
        v25 = 0u;
        v9 = *(id *)(a1 + 32);
        if (v9)
          v9 = objc_getProperty(v9, v5, 120, 1);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v8));
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
        if (v11)
        {
          v13 = v11;
          v14 = *(_QWORD *)v23;
          do
          {
            for (j = 0; j != v13; j = (char *)j + 1)
            {
              if (*(_QWORD *)v23 != v14)
                objc_enumerationMutation(v10);
              v16 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)j);
              v17 = *(id *)(a1 + 32);
              if (v17)
                v17 = objc_getProperty(v17, v12, 120, 1);
              v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", v8));
              v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", v16));

              objc_msgSend(v19, "stopIfNecessaryWithReason:", 1);
            }
            v13 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
          }
          while (v13);
        }

      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
    }
    while (v6);
  }

}

void sub_10004EC78(id a1)
{
  exit(0);
}

void sub_10004EC88(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  const char *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6 = WeakRetained;
  if (WeakRetained)
    WeakRetained = objc_getProperty(WeakRetained, v5, 120, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));

  if (v7)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v8 = v7;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v15;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v15 != v11)
            objc_enumerationMutation(v8);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v12), (_QWORD)v14));
          objc_msgSend(v3, "applyOverrides");
          objc_msgSend(v13, "handleUpdateConfiguration:withCompletionHandler:", v3, 0);

          v12 = (char *)v12 + 1;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v10);
    }

  }
}

id sub_10004EDE8(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_1000CF8E0 != -1)
    dispatch_once(&qword_1000CF8E0, &stru_1000BDFF8);
  return (id)qword_1000CF8D8;
}

void sub_10004EE2C(id a1)
{
  NESMServer *v1;
  char *v2;
  dispatch_queue_attr_t v3;
  NSObject *v4;
  dispatch_queue_t v5;
  void *v6;
  xpc_connection_t mach_service;
  void *v8;
  xpc_connection_t v9;
  void *v10;
  xpc_connection_t v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  dispatch_source_t v23;
  void *v24;
  NSObject *v25;
  char *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  _xpc_connection_s *v31;
  char *v32;
  _xpc_connection_s *v33;
  char *v34;
  _xpc_connection_s *v35;
  _QWORD v36[4];
  id v37;
  _QWORD v38[4];
  char *v39;
  _QWORD v40[4];
  char *v41;
  _QWORD handler[4];
  char *v43;
  _QWORD v44[4];
  id v45;
  id location;
  objc_super v47;

  v1 = [NESMServer alloc];
  if (!v1)
  {
LABEL_6:
    v2 = 0;
    goto LABEL_7;
  }
  v47.receiver = v1;
  v47.super_class = (Class)NESMServer;
  v2 = objc_msgSendSuper2(&v47, "init");
  if (v2)
  {
    v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    v5 = dispatch_queue_create("NESMServer queue", v4);
    v6 = (void *)*((_QWORD *)v2 + 11);
    *((_QWORD *)v2 + 11) = v5;

    mach_service = xpc_connection_create_mach_service("com.apple.nesessionmanager", 0, 1uLL);
    v8 = (void *)*((_QWORD *)v2 + 12);
    *((_QWORD *)v2 + 12) = mach_service;

    v9 = xpc_connection_create_mach_service("com.apple.nesessionmanager.flow-divert-token", 0, 1uLL);
    v10 = (void *)*((_QWORD *)v2 + 13);
    *((_QWORD *)v2 + 13) = v9;

    v11 = xpc_connection_create_mach_service("com.apple.nesessionmanager.content-filter", 0, 1uLL);
    v12 = (void *)*((_QWORD *)v2 + 14);
    *((_QWORD *)v2 + 14) = v11;

    v13 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 0);
    v14 = (void *)*((_QWORD *)v2 + 15);
    *((_QWORD *)v2 + 15) = v13;

    v15 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 0);
    v16 = (void *)*((_QWORD *)v2 + 16);
    *((_QWORD *)v2 + 16) = v15;

    v17 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v18 = (void *)*((_QWORD *)v2 + 34);
    *((_QWORD *)v2 + 34) = v17;

    *((_DWORD *)v2 + 5) = -1;
    *(_QWORD *)(v2 + 28) = -1;
    *(_QWORD *)(v2 + 36) = -1;
    v19 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 0);
    v20 = (void *)*((_QWORD *)v2 + 40);
    *((_QWORD *)v2 + 40) = v19;

    objc_initWeak(&location, v2);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NEConfigurationManager sharedManagerForAllUsers](NEConfigurationManager, "sharedManagerForAllUsers"));
    v22 = *((_QWORD *)v2 + 11);
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472;
    v44[2] = sub_10004CB7C;
    v44[3] = &unk_1000BDF90;
    objc_copyWeak(&v45, &location);
    objc_msgSend(v21, "setChangedQueue:andHandler:", v22, v44);

    v23 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0, *((dispatch_queue_t *)v2 + 11));
    v24 = (void *)*((_QWORD *)v2 + 18);
    *((_QWORD *)v2 + 18) = v23;

    v25 = *((_QWORD *)v2 + 18);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10004CDB0;
    handler[3] = &unk_1000BEB80;
    v26 = v2;
    v43 = v26;
    dispatch_source_set_event_handler(v25, handler);
    dispatch_resume(*((dispatch_object_t *)v2 + 18));
    v27 = (void *)*((_QWORD *)v2 + 12);
    if (v27)
    {
      if (xpc_get_type(v27) == (xpc_type_t)&_xpc_type_connection)
      {
        v29 = (void *)*((_QWORD *)v2 + 14);
        if (v29)
        {
          if (xpc_get_type(v29) == (xpc_type_t)&_xpc_type_connection)
          {
            v30 = (void *)*((_QWORD *)v2 + 13);
            if (v30)
            {
              if (xpc_get_type(v30) == (xpc_type_t)&_xpc_type_connection)
              {
                xpc_connection_set_target_queue(*((xpc_connection_t *)v2 + 12), *((dispatch_queue_t *)v2 + 11));
                v31 = (_xpc_connection_s *)*((_QWORD *)v2 + 12);
                v40[0] = _NSConcreteStackBlock;
                v40[1] = 3221225472;
                v40[2] = sub_10004CF9C;
                v40[3] = &unk_1000BDFD8;
                v32 = v26;
                v41 = v32;
                xpc_connection_set_event_handler(v31, v40);
                xpc_connection_set_target_queue(*((xpc_connection_t *)v2 + 13), *((dispatch_queue_t *)v2 + 11));
                v33 = (_xpc_connection_s *)*((_QWORD *)v2 + 13);
                v38[0] = _NSConcreteStackBlock;
                v38[1] = 3221225472;
                v38[2] = sub_10004CFFC;
                v38[3] = &unk_1000BDFD8;
                v34 = v32;
                v39 = v34;
                xpc_connection_set_event_handler(v33, v38);
                xpc_connection_set_target_queue(*((xpc_connection_t *)v2 + 14), *((dispatch_queue_t *)v2 + 11));
                v35 = (_xpc_connection_s *)*((_QWORD *)v2 + 14);
                v36[0] = _NSConcreteStackBlock;
                v36[1] = 3221225472;
                v36[2] = sub_10004D064;
                v36[3] = &unk_1000BDFD8;
                v2 = v34;
                v37 = v2;
                xpc_connection_set_event_handler(v35, v36);

                objc_destroyWeak(&v45);
                objc_destroyWeak(&location);
                goto LABEL_7;
              }
            }
          }
        }
      }
    }

    objc_destroyWeak(&v45);
    objc_destroyWeak(&location);

    goto LABEL_6;
  }
LABEL_7:
  v28 = (void *)qword_1000CF8D8;
  qword_1000CF8D8 = (uint64_t)v2;

}

void sub_10004F1F4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_10004F21C(uint64_t a1, const char *a2)
{
  NSObject *Property;
  uint64_t v4;
  _QWORD block[5];

  Property = *(NSObject **)(a1 + 32);
  if (Property)
  {
    Property = objc_getProperty(Property, a2, 88, 1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100050D9C;
  block[3] = &unk_1000BEB80;
  block[4] = v4;
  dispatch_async(Property, block);
}

void sub_10004F298(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  int out_token;
  uint8_t buf[4];
  const char *v13;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2 != -1)
    goto LABEL_8;
  out_token = -1;
  v3 = notify_register_check("com.apple.nesessionmanager.info", &out_token);
  if ((_DWORD)v3)
  {
    v5 = ne_log_obj(v3, v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v13 = "com.apple.nesessionmanager.info";
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to register for the %s notification", buf, 0xCu);
    }

    v2 = *(_DWORD *)(a1 + 40);
  }
  else
  {
    v2 = out_token;
    *(_DWORD *)(a1 + 40) = out_token;
  }
  if (v2 != -1)
  {
LABEL_8:
    v7 = notify_set_state(v2, *(_QWORD *)(a1 + 288));
    if ((_DWORD)v7)
    {
      v9 = ne_log_obj(v7, v8);
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v13 = "com.apple.nesessionmanager.info";
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to set the state for the %s notification", buf, 0xCu);
      }

    }
    else
    {
      notify_post("com.apple.nesessionmanager.info");
    }
  }
}

void sub_10004F400(uint64_t a1, xpc_object_t xdict)
{
  const char *string;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  id Property;
  id v10;
  const char *v11;
  id v12;
  void *i;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  const char *v18;
  id v19;
  uint64_t v20;
  void *j;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  id obj;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t buf[16];
  _BYTE v37[128];
  _BYTE v38[128];

  string = xpc_dictionary_get_string(xdict, _xpc_event_key_name);
  v4 = strcmp(string, "com.apple.networkextension.apps-changed");
  if (!(_DWORD)v4)
  {
    v6 = ne_log_obj(v4, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Handling Installed Apps Changed notification", buf, 2u);
    }

    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v8, 120, 1);
    obj = Property;
    v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v38, 16);
    if (v10)
    {
      v12 = v10;
      v27 = *(_QWORD *)v33;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(_QWORD *)v33 != v27)
            objc_enumerationMutation(obj);
          v14 = *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i);
          v28 = 0u;
          v29 = 0u;
          v30 = 0u;
          v31 = 0u;
          v15 = *(id *)(a1 + 32);
          if (v15)
            v15 = objc_getProperty(v15, v11, 120, 1);
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v14));
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v28, v37, 16);
          if (v17)
          {
            v19 = v17;
            v20 = *(_QWORD *)v29;
            do
            {
              for (j = 0; j != v19; j = (char *)j + 1)
              {
                if (*(_QWORD *)v29 != v20)
                  objc_enumerationMutation(v16);
                v22 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)j);
                v23 = *(id *)(a1 + 32);
                if (v23)
                  v23 = objc_getProperty(v23, v18, 120, 1);
                v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", v14));
                v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v22));

                objc_msgSend(v25, "handleInstalledAppsChanged");
              }
              v19 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v28, v37, 16);
            }
            while (v19);
          }

        }
        v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v38, 16);
      }
      while (v12);
    }

  }
}

void sub_10004F664(uint64_t a1, int a2, uint64_t a3)
{
  const char *v4;
  void *v5;
  id Property;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  id v13;
  const char *v14;
  id v15;
  const char *v16;
  id v17;
  void *i;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  const char *v23;
  id v24;
  uint64_t v25;
  void *j;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  id obj;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  uint8_t v43[128];
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  void *v47;

  if (a2 == 1)
  {
    v5 = (void *)CNPluginMonitorEventCopyDisplayIDs(a3);
    Property = *(id *)(a1 + 32);
    if (v5)
    {
      if (Property)
        Property = objc_getProperty(Property, v4, 80, 1);
      v7 = objc_msgSend(Property, "isEqualToArray:", v5);
      if ((v7 & 1) != 0)
        goto LABEL_34;
    }
    else
    {
      if (!Property || (v9 = objc_getProperty(Property, v4, 80, 1)) == 0)
      {
LABEL_34:

        return;
      }

    }
    v10 = ne_log_obj(v7, v8);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      v45 = "-[NESMServer registerForCaptiveNetworkPluginChanges]_block_invoke";
      v46 = 2112;
      v47 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s: CNPluginMonitor - got new apps %@", buf, 0x16u);
    }

    v13 = *(id *)(a1 + 32);
    v31 = v5;
    if (v13)
    {
      objc_setProperty_atomic(v13, v12, v5, 80);
      v13 = *(id *)(a1 + 32);
      v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      if (v13)
        v13 = objc_getProperty(v13, v14, 120, 1);
    }
    else
    {
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
    }
    obj = v13;
    v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
    if (v15)
    {
      v17 = v15;
      v33 = *(_QWORD *)v39;
      do
      {
        for (i = 0; i != v17; i = (char *)i + 1)
        {
          if (*(_QWORD *)v39 != v33)
            objc_enumerationMutation(obj);
          v19 = *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)i);
          v34 = 0u;
          v35 = 0u;
          v36 = 0u;
          v37 = 0u;
          v20 = *(id *)(a1 + 32);
          if (v20)
            v20 = objc_getProperty(v20, v16, 120, 1);
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", v19));
          v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
          if (v22)
          {
            v24 = v22;
            v25 = *(_QWORD *)v35;
            do
            {
              for (j = 0; j != v24; j = (char *)j + 1)
              {
                if (*(_QWORD *)v35 != v25)
                  objc_enumerationMutation(v21);
                v27 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)j);
                v28 = *(id *)(a1 + 32);
                if (v28)
                  v28 = objc_getProperty(v28, v23, 120, 1);
                v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectForKeyedSubscript:", v19));
                v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectForKeyedSubscript:", v27));
                objc_msgSend(v30, "handleCaptiveNetworkPluginsChanged");

              }
              v24 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
            }
            while (v24);
          }

        }
        v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
      }
      while (v17);
    }

    v5 = v31;
    goto LABEL_34;
  }
}

void sub_10004F94C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  const char *string;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  int64_t int64;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  SEL v17;
  id v18;
  const char *v19;
  _QWORD v20[5];
  id v21;
  __int128 buf;
  void (*v23)(uint64_t, void *, void *, uint64_t, void *);
  void *v24;
  void *v25;
  _QWORD *v26;
  int v27;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = v3;
  if (v2)
  {
    string = xpc_dictionary_get_string(v3, _xpc_event_key_name);
    v7 = string;
    if (string)
    {
      string = (const char *)strcmp(string, "SessionManager");
      if (!(_DWORD)string)
      {
        int64 = xpc_dictionary_get_int64(v4, "network-origin-notification");
        v12 = ne_log_obj(int64, v11);
        v13 = objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = inputNotification2String(int64);
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Received a %s event", (uint8_t *)&buf, 0xCu);
        }

        if ((_DWORD)int64 == 1)
        {
          if ((ne_session_vod_evaluate_connection_present() & 1) == 0)
          {
            v15 = (void *)objc_claimAutoreleasedReturnValue(+[NENetworkPropertiesCache sharedCache](NENetworkPropertiesCache, "sharedCache"));
            objc_msgSend(v15, "clear");

          }
        }
        else if ((_DWORD)int64 == 6)
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NENetworkPropertiesCache sharedCache](NENetworkPropertiesCache, "sharedCache"));
          objc_msgSend(v14, "rotateEncryptionKey");

          goto LABEL_6;
        }
        v20[0] = 0;
        v20[1] = v20;
        v20[2] = 0x3032000000;
        v20[3] = sub_10004D670;
        v20[4] = sub_10004D680;
        v21 = (id)os_transaction_create("com.apple.nesessionmanager.loadConfigurations");
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NEConfigurationManager sharedManagerForAllUsers](NEConfigurationManager, "sharedManagerForAllUsers"));
        v18 = objc_getProperty(v2, v17, 88, 1);
        *(_QWORD *)&buf = _NSConcreteStackBlock;
        *((_QWORD *)&buf + 1) = 3221225472;
        v23 = sub_10004FC08;
        v24 = &unk_1000BE228;
        v25 = v2;
        v26 = v20;
        v27 = int64;
        objc_msgSend(v16, "loadConfigurations:withFilter:completionQueue:completionHandler:", 0, 0, v18, &buf);

        _Block_object_dispose(v20, 8);
        goto LABEL_6;
      }
    }
    v8 = ne_log_obj(string, v6);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v19 = "";
      if (v7)
        v19 = v7;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Got an unexpected network detection event with name \"%s\"", (uint8_t *)&buf, 0xCu);
    }

  }
LABEL_6:

}

void sub_10004FBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_10004FC08(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  const __CFString *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _BYTE *v26;
  void *v27;
  void *v28;
  _BYTE *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const __CFString *v37;
  void *v38;
  void *v39;
  _BYTE *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  unsigned int v44;
  _BYTE *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  unsigned int v50;
  _BYTE *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  unsigned int v56;
  _BYTE *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  unsigned int v62;
  _BYTE *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  unsigned int v68;
  _BYTE *v69;
  void *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  unsigned int v74;
  _BYTE *v75;
  void *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  id v82;
  uint64_t v83;
  unsigned int v84;
  id v85;
  void *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[128];
  uint8_t v96[128];
  uint8_t buf[4];
  id v98;

  v8 = a2;
  v9 = a3;
  v10 = a5;
  v12 = v10;
  v79 = v9;
  if (!v9)
  {
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v82 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v91, v96, 16, 0);
    if (!v82)
      goto LABEL_48;
    v80 = *(_QWORD *)v92;
    v81 = v8;
    v15 = CFSTR("UserMap");
LABEL_7:
    v16 = 0;
    while (1)
    {
      if (*(_QWORD *)v92 != v80)
        objc_enumerationMutation(v8);
      v83 = v16;
      v17 = *(void **)(*((_QWORD *)&v91 + 1) + 8 * v16);
      v87 = 0u;
      v88 = 0u;
      v89 = 0u;
      v90 = 0u;
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v15));
      v85 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v87, v95, 16);
      if (v85)
        break;
LABEL_46:

      v16 = v83 + 1;
      v8 = v81;
      if ((id)(v83 + 1) == v82)
      {
        v82 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v91, v96, 16);
        if (!v82)
          goto LABEL_48;
        goto LABEL_7;
      }
    }
    v19 = *(_QWORD *)v88;
LABEL_12:
    v20 = 0;
    while (1)
    {
      if (*(_QWORD *)v88 != v19)
        objc_enumerationMutation(v18);
      v21 = *(_QWORD *)(*((_QWORD *)&v87 + 1) + 8 * v20);
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v15));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", v21));

      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "identifier"));
      v86 = v23;
      LODWORD(v22) = objc_msgSend(v23, "containsObject:", v24);

      if (!(_DWORD)v22)
        goto LABEL_44;
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "alwaysOnVPN"));

      if (v25)
      {
        v26 = *(_BYTE **)(a1 + 32);
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "identifier"));
        sub_100050238(v26, v27, 3, *(_DWORD *)(a1 + 48));

      }
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "contentFilter"));

      if (v28)
      {
        v29 = *(_BYTE **)(a1 + 32);
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "identifier"));
        sub_100050238(v29, v30, 4, *(_DWORD *)(a1 + 48));

      }
      v31 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "VPN"));
      if (v31)
      {
        v32 = (void *)v31;
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "VPN"));
        if ((objc_msgSend(v33, "isEnabled") & 1) != 0)
        {
          v34 = v19;
          v35 = a1;
          v36 = v18;
          v37 = v15;
          v38 = v12;
          v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "VPN"));
          v84 = objc_msgSend(v39, "isOnDemandEnabled");

          v12 = v38;
          v15 = v37;
          v18 = v36;
          a1 = v35;
          v19 = v34;

          if (!v84)
            goto LABEL_26;
          v40 = *(_BYTE **)(a1 + 32);
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "identifier"));
          sub_100050238(v40, v32, 1, *(_DWORD *)(a1 + 48));
        }
        else
        {

        }
      }
LABEL_26:
      v41 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "appVPN"));
      if (v41)
      {
        v42 = (void *)v41;
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "appVPN"));
        v44 = objc_msgSend(v43, "isEnabled");

        if (v44)
        {
          v45 = *(_BYTE **)(a1 + 32);
          v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "identifier"));
          sub_100050238(v45, v46, 2, *(_DWORD *)(a1 + 48));

        }
      }
      v47 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "pathController"));
      if (v47)
      {
        v48 = (void *)v47;
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "pathController"));
        v50 = objc_msgSend(v49, "isEnabled");

        if (v50)
        {
          v51 = *(_BYTE **)(a1 + 32);
          v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "identifier"));
          sub_100050238(v51, v52, 5, *(_DWORD *)(a1 + 48));

        }
      }
      v53 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "dnsProxy"));
      if (v53)
      {
        v54 = (void *)v53;
        v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "dnsProxy"));
        v56 = objc_msgSend(v55, "isEnabled");

        if (v56)
        {
          v57 = *(_BYTE **)(a1 + 32);
          v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "identifier"));
          sub_100050238(v57, v58, 6, *(_DWORD *)(a1 + 48));

        }
      }
      v59 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "dnsSettings"));
      if (v59)
      {
        v60 = (void *)v59;
        v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "dnsSettings"));
        v62 = objc_msgSend(v61, "isEnabled");

        if (v62)
        {
          v63 = *(_BYTE **)(a1 + 32);
          v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "identifier"));
          sub_100050238(v63, v64, 7, *(_DWORD *)(a1 + 48));

        }
      }
      v65 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "appPush"));
      if (v65)
      {
        v66 = (void *)v65;
        v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "appPush"));
        v68 = objc_msgSend(v67, "isEnabled");

        if (v68)
        {
          v69 = *(_BYTE **)(a1 + 32);
          v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "identifier"));
          sub_100050238(v69, v70, 8, *(_DWORD *)(a1 + 48));

        }
      }
      v71 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "relay"));
      if (v71)
      {
        v72 = (void *)v71;
        v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "relay"));
        v74 = objc_msgSend(v73, "isEnabled");

        if (v74)
        {
          v75 = *(_BYTE **)(a1 + 32);
          v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "identifier"));
          sub_100050238(v75, v76, 9, *(_DWORD *)(a1 + 48));

        }
      }
LABEL_44:

      if (v85 == (id)++v20)
      {
        v85 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v87, v95, 16);
        if (!v85)
          goto LABEL_46;
        goto LABEL_12;
      }
    }
  }
  v13 = ne_log_obj(v10, v11);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v98 = v9;
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to load the current configurations: %@", buf, 0xCu);
  }

LABEL_48:
  v77 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v78 = *(void **)(v77 + 40);
  *(_QWORD *)(v77 + 40) = 0;

}

void sub_100050238(_BYTE *a1, void *a2, uint64_t a3, int a4)
{
  id v7;
  _QWORD *v8;
  SEL v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[5];
  int v15;
  _QWORD v16[5];
  id v17;

  v7 = a2;
  if (a1)
  {
    v16[0] = 0;
    v16[1] = v16;
    v16[2] = 0x3032000000;
    v16[3] = sub_10004D670;
    v16[4] = sub_10004D680;
    v17 = (id)os_transaction_create("com.apple.nesessionmanager.notifySession");
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1000503C4;
    v14[3] = &unk_1000BE200;
    v15 = a4;
    v14[4] = v16;
    v8 = objc_retainBlock(v14);
    v10 = objc_getProperty(a1, v9, 120, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v7));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v12));

    if (v13)
      ((void (*)(_QWORD *, void *))v8[2])(v8, v13);
    else
      sub_10004E2F4(a1, v7, a3, v8);

    _Block_object_dispose(v16, 8);
  }

}

void sub_1000503AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000503C4(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;

  objc_msgSend(a2, "handleNetworkDetectionNotification:", *(unsigned int *)(a1 + 40));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

}

void sub_1000503FC(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const char *v11;
  id Property;
  const char *v13;
  void *i;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  const char *v19;
  id v20;
  uint64_t v21;
  void *j;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  id obj;
  uint64_t v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t buf[16];
  _BYTE v39[128];
  _BYTE v40[128];

  v3 = *(_DWORD **)(a1 + 32);
  if (v3)
  {
    if (v3[7] == (_DWORD)a2)
      goto LABEL_3;
    if (v3[8] == (_DWORD)a2)
    {
      v8 = ne_log_obj(a1, a2);
      v5 = objc_claimAutoreleasedReturnValue(v8);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = 2;
        goto LABEL_15;
      }
      *(_WORD *)buf = 0;
      v7 = "DNS changed";
      v6 = 2;
      goto LABEL_8;
    }
    v9 = v3[9];
LABEL_10:
    if (v9 != (_DWORD)a2)
      return;
    v10 = ne_log_obj(a1, a2);
    v5 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Proxies changed", buf, 2u);
    }
    v6 = 4;
    goto LABEL_15;
  }
  if ((_DWORD)a2)
  {
    v9 = 0;
    goto LABEL_10;
  }
LABEL_3:
  v4 = ne_log_obj(a1, a2);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = 1;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    v7 = "NWI changed";
    v6 = 1;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, v7, buf, 2u);
  }
LABEL_15:

  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v11, 120, 1);
  obj = Property;
  v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
  if (v29)
  {
    v28 = *(_QWORD *)v35;
    do
    {
      for (i = 0; i != v29; i = (char *)i + 1)
      {
        if (*(_QWORD *)v35 != v28)
          objc_enumerationMutation(obj);
        v15 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)i);
        v30 = 0u;
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        v16 = *(id *)(a1 + 32);
        if (v16)
          v16 = objc_getProperty(v16, v13, 120, 1);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", v15));
        v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
        if (v18)
        {
          v20 = v18;
          v21 = *(_QWORD *)v31;
          do
          {
            for (j = 0; j != v20; j = (char *)j + 1)
            {
              if (*(_QWORD *)v31 != v21)
                objc_enumerationMutation(v17);
              v23 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)j);
              v24 = *(id *)(a1 + 32);
              if (v24)
                v24 = objc_getProperty(v24, v19, 120, 1);
              v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v15));
              v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", v23));

              objc_msgSend(v26, "handleNetworkConfigurationChange:", v6);
            }
            v20 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
          }
          while (v20);
        }

      }
      v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
    }
    while (v29);
  }

}

void sub_100050704(uint64_t a1, int a2)
{
  const char *v4;
  dispatch_time_t v5;
  void *v6;
  NSObject *Property;
  _QWORD v8[4];
  id v9;
  int v10;

  v5 = dispatch_time(0, 250000000);
  v6 = *(void **)(a1 + 32);
  if (v6)
    Property = objc_getProperty(v6, v4, 88, 1);
  else
    Property = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000507BC;
  v8[3] = &unk_1000BE188;
  v9 = *(id *)(a1 + 40);
  v10 = a2;
  dispatch_after(v5, Property, v8);

}

uint64_t sub_1000507BC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_1000507D0(uint64_t a1, int token)
{
  uint64_t state;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  id Property;
  id v9;
  const char *v10;
  id v11;
  void *i;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  const char *v17;
  id v18;
  uint64_t v19;
  void *j;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  const char *v25;
  id obj;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t state64;
  _BYTE v37[128];
  uint8_t v38[128];
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  const char *v42;

  state64 = 0;
  state = notify_get_state(token, &state64);
  v5 = ne_log_obj(state, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v25 = "Locked";
    if (!state64)
      v25 = "Unlocked";
    *(_DWORD *)buf = 134218242;
    v40 = state64;
    v41 = 2080;
    v42 = v25;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Got a SpringBoard lock state event with state = %llu (%s)", buf, 0x16u);
  }

  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v7, 120, 1);
  obj = Property;
  v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v38, 16);
  if (v9)
  {
    v11 = v9;
    v27 = *(_QWORD *)v33;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v33 != v27)
          objc_enumerationMutation(obj);
        v13 = *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i);
        v28 = 0u;
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        v14 = *(id *)(a1 + 32);
        if (v14)
          v14 = objc_getProperty(v14, v10, 120, 1);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v13));
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v28, v37, 16);
        if (v16)
        {
          v18 = v16;
          v19 = *(_QWORD *)v29;
          do
          {
            for (j = 0; j != v18; j = (char *)j + 1)
            {
              if (*(_QWORD *)v29 != v19)
                objc_enumerationMutation(v15);
              v21 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)j);
              v22 = *(id *)(a1 + 32);
              if (state64)
              {
                if (v22)
                  v22 = objc_getProperty(v22, v17, 120, 1);
                v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", v13));
                v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", v21));
                objc_msgSend(v24, "handleDeviceLock");
              }
              else
              {
                if (v22)
                  v22 = objc_getProperty(v22, v17, 120, 1);
                v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", v13));
                v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", v21));
                objc_msgSend(v24, "handleDeviceUnlock");
              }

            }
            v18 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v28, v37, 16);
          }
          while (v18);
        }

      }
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v38, 16);
    }
    while (v11);
  }

}

void sub_100050A98(void *a1)
{
  id v1;

  v1 = a1;
  objc_msgSend(v1, "prohibitNetworkAgentsWithDomain:type:", CFSTR("NetworkExtension"), CFSTR("VPN"));
  objc_msgSend(v1, "prohibitNetworkAgentsWithDomain:type:", CFSTR("NetworkExtension"), CFSTR("AppVPN"));
  objc_msgSend(v1, "prohibitNetworkAgentsWithDomain:type:", CFSTR("NetworkExtension"), CFSTR("AOVPN"));

}

void sub_100050B04(uint64_t a1)
{
  const char *v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  id v18;
  void *v19;
  void *v20;
  SEL v21;
  id v22;
  void *v23;
  void *v24;
  id obj;
  uint64_t v26;
  id v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  void *v38;
  _BYTE v39[128];
  _BYTE v40[128];

  sub_10004BB74(*(void **)(a1 + 32), 0);
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    obj = objc_getProperty(v3, v2, 120, 1);
    v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v40, 16);
    if (v27)
    {
      v26 = *(_QWORD *)v34;
      do
      {
        v5 = 0;
        do
        {
          if (*(_QWORD *)v34 != v26)
            objc_enumerationMutation(obj);
          v28 = v5;
          v6 = *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * v5);
          v29 = 0u;
          v30 = 0u;
          v31 = 0u;
          v32 = 0u;
          v7 = objc_msgSend(objc_getProperty(v3, v4, 120, 1), "objectForKeyedSubscript:", v6);
          v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
          v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
          if (v9)
          {
            v11 = v9;
            v12 = *(_QWORD *)v30;
            do
            {
              v13 = 0;
              do
              {
                if (*(_QWORD *)v30 != v12)
                  objc_enumerationMutation(v8);
                v14 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v13);
                v15 = ne_log_obj(v9, v10);
                v16 = objc_claimAutoreleasedReturnValue(v15);
                if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
                {
                  v18 = objc_msgSend(objc_getProperty(v3, v17, 120, 1), "objectForKeyedSubscript:", v6);
                  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
                  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", v14));
                  *(_DWORD *)buf = 138412290;
                  v38 = v20;
                  _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Passing ranked interface change event to %@", buf, 0xCu);

                }
                v22 = objc_msgSend(objc_getProperty(v3, v21, 120, 1), "objectForKeyedSubscript:", v6);
                v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
                v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", v14));
                objc_msgSend(v24, "handleChangeEventForRankedInterfaces");

                v13 = (char *)v13 + 1;
              }
              while (v11 != v13);
              v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
              v11 = v9;
            }
            while (v9);
          }

          v5 = v28 + 1;
        }
        while ((id)(v28 + 1) != v27);
        v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v40, 16);
      }
      while (v27);
    }

  }
}

void sub_100050D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  uint8_t v11[16];
  uint8_t buf[16];

  v3 = *(_QWORD *)(a1 + 32);
  if (v3 && (*(_BYTE *)(v3 + 10) & 1) != 0)
  {
    v9 = ne_log_obj(a1, a2);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Ignoring provider manager started because it did not start in time", buf, 2u);
    }

  }
  else
  {
    v4 = ne_log_obj(a1, a2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Provider manager started", v11, 2u);
    }

    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
    {
      *(_BYTE *)(v7 + 10) = 1;
      v8 = *(void **)(a1 + 32);
    }
    else
    {
      v8 = 0;
    }
    sub_100050E7C(v8, v6);
  }
}

void sub_100050E7C(id self, const char *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  unsigned int v16;
  id obj;
  uint64_t v18;
  id v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  unsigned int v30;
  __int16 v31;
  void *v32;
  _BYTE v33[128];
  _BYTE v34[128];

  if (self && (*((_BYTE *)self + 9) & 1) != 0 && (*((_BYTE *)self + 10) & 1) != 0)
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    obj = objc_getProperty(self, a2, 128, 1);
    v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v34, 16);
    if (v19)
    {
      v18 = *(_QWORD *)v26;
      do
      {
        v4 = 0;
        do
        {
          if (*(_QWORD *)v26 != v18)
            objc_enumerationMutation(obj);
          v20 = v4;
          v5 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * v4);
          v21 = 0u;
          v22 = 0u;
          v23 = 0u;
          v24 = 0u;
          v6 = objc_msgSend(objc_getProperty(self, v3, 128, 1), "objectForKeyedSubscript:", v5);
          v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
          v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v33, 16);
          if (v8)
          {
            v10 = v8;
            v11 = *(_QWORD *)v22;
            do
            {
              v12 = 0;
              do
              {
                if (*(_QWORD *)v22 != v11)
                  objc_enumerationMutation(v7);
                v13 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v12);
                v14 = ne_log_obj(v8, v9);
                v15 = objc_claimAutoreleasedReturnValue(v14);
                if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
                {
                  v16 = objc_msgSend(v13, "intValue");
                  *(_DWORD *)buf = 67109378;
                  v30 = v16;
                  v31 = 2112;
                  v32 = v5;
                  _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Loading pending session with type %d and ID %@", buf, 0x12u);
                }

                sub_10004E60C(self, (int)objc_msgSend(v13, "intValue"), v5);
                v12 = (char *)v12 + 1;
              }
              while (v10 != v12);
              v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v33, 16);
              v10 = v8;
            }
            while (v8);
          }

          v4 = v20 + 1;
        }
        while ((id)(v20 + 1) != v19);
        v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v34, 16);
      }
      while (v19);
    }

  }
}

void sub_1000510D4(uint64_t a1, const char *a2)
{
  NSObject *Property;
  uint64_t v4;
  _QWORD block[5];

  Property = *(NSObject **)(a1 + 32);
  if (Property)
  {
    Property = objc_getProperty(Property, a2, 88, 1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005122C;
  block[3] = &unk_1000BEB80;
  block[4] = v4;
  dispatch_async(Property, block);
}

void sub_100051150(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint8_t v10[16];

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v10 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "File handles were not received and/or provider manager was not started in time, loading pending sessions", v10, 2u);
  }

  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = *(NSObject **)(v5 + 312);
    if (!v6 || (dispatch_source_cancel(v6), sub_100051218(*(_QWORD *)(a1 + 32)), (v5 = *(_QWORD *)(a1 + 32)) != 0))
    {
      *(_BYTE *)(v5 + 9) = 1;
      v7 = *(_QWORD *)(a1 + 32);
      if (v7)
        *(_BYTE *)(v7 + 10) = 1;
    }
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
  objc_msgSend(v8, "commit");

  sub_100050E7C(*(id *)(a1 + 32), v9);
}

void sub_100051218(uint64_t a1)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 312), 0);
}

void sub_10005122C(NSObject *a1, uint64_t a2)
{
  NSObject *v2;
  Class isa;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD v10[5];
  uint8_t buf[16];

  v2 = a1;
  isa = a1[4].isa;
  if (!isa
    || (a1 = *((_QWORD *)isa + 39)) != 0
    && (dispatch_source_cancel(a1), sub_100051218((uint64_t)v2[4].isa), (isa = v2[4].isa) == 0))
  {
LABEL_6:
    v4 = ne_log_obj(a1, a2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received file handles", buf, 2u);
    }

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10005136C;
    v10[3] = &unk_1000BE5E8;
    v10[4] = v2[4].isa;
    objc_msgSend(v6, "iterateFileHandlesWithBlock:", v10);

    sub_100050E7C(v2[4].isa, v7);
    return;
  }
  if ((*((_BYTE *)isa + 9) & 1) == 0)
  {
    *((_BYTE *)isa + 9) = 1;
    goto LABEL_6;
  }
  v8 = ne_log_obj(a1, a2);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Ignoring received file handles because they were not received in time", buf, 2u);
  }

}

uint64_t sub_10005136C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  _BYTE *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  _QWORD v18[4];
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  void *v23;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = v3;
    v7 = ne_log_obj(v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "sessionType"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "configurationIdentifier"));
      *(_DWORD *)buf = 138412546;
      v21 = v9;
      v22 = 2112;
      v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Creating a pending session request from file handle for type %@ and id %@", buf, 0x16u);

    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "description"));
    v12 = *(_BYTE **)(a1 + 32);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "configurationIdentifier"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "sessionType"));
    v15 = objc_msgSend(v14, "intValue");
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10005152C;
    v18[3] = &unk_1000BE070;
    v19 = v11;
    v16 = v11;
    sub_10004E2F4(v12, v13, (uint64_t)v15, v18);

  }
  return 1;
}

void sub_10005152C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (!a2)
  {
    v3 = ne_log_obj(a1, 0);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138412290;
      v7 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to load session for file handle %@", (uint8_t *)&v6, 0xCu);
    }

  }
}

void sub_1000515D8(uint64_t a1, const char *a2)
{
  id Property;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  const char *v13;
  id v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  _QWORD v19[2];

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 120, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v6));

    v10 = ne_log_obj(v8, v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v18 = 138412290;
      v19[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Removing session %@", (uint8_t *)&v18, 0xCu);
    }

    -[NSObject removeAllClients](v7, "removeAllClients");
    -[NSObject dropServer](v7, "dropServer");
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
    objc_msgSend(v5, "removeObjectForKey:", v12);

    if (!objc_msgSend(v5, "count"))
    {
      v14 = *(id *)(a1 + 32);
      if (v14)
        v14 = objc_getProperty(v14, v13, 120, 1);
      objc_msgSend(v14, "removeObjectForKey:", *(_QWORD *)(a1 + 40));
    }
  }
  else
  {
    v15 = ne_log_obj(0, v4);
    v7 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_DWORD *)(a1 + 48);
      v17 = *(_QWORD *)(a1 + 40);
      v18 = 67109378;
      LODWORD(v19[0]) = v16;
      WORD2(v19[0]) = 2112;
      *(_QWORD *)((char *)v19 + 6) = v17;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Cannot remove session with type %d: no sessions for id %@", (uint8_t *)&v18, 0x12u);
    }
  }

}

void sub_1000517A8(uint64_t a1)
{
  sub_10004E2F4(*(_BYTE **)(a1 + 32), *(void **)(a1 + 40), *(unsigned int *)(a1 + 56), *(void **)(a1 + 48));
}

void sub_1000517BC(void *a1, const char *a2)
{
  NSObject *Property;
  _QWORD block[5];

  if (a1)
  {
    Property = objc_getProperty(a1, a2, 88, 1);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100051828;
    block[3] = &unk_1000BEB80;
    block[4] = a1;
    dispatch_async(Property, block);
  }
}

void sub_100051828(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  _DWORD *Property;
  _DWORD v12[2];

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
      LODWORD(v5) = *(_DWORD *)(v5 + 16);
    v12[0] = 67109120;
    v12[1] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "ackSleep with ack count = %d", (uint8_t *)v12, 8u);
  }

  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 16);
    v9 = __OFSUB__(v8, 1);
    v10 = v8 - 1;
    if (v10 < 0 == v9)
    {
      *(_DWORD *)(v7 + 16) = v10;
      Property = *(_DWORD **)(a1 + 32);
      if (Property)
      {
        if (Property[4])
          return;
        Property = objc_getProperty(Property, v6, 136, 1);
      }
      sub_100087604((time_t *)Property, (uint64_t)v6);
    }
  }
}

void sub_10005190C(void *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  NSObject *v13;
  SEL v14;
  const char *v15;
  void (**v16)(void);
  uint64_t v17;
  NSObject *v18;
  __int16 v19[8];
  uint8_t buf[16];

  if (a1)
  {
    v3 = a1;
    v4 = objc_sync_enter(v3);
    if (a2)
    {
      v6 = v3[37];
      if (v6 < -a2 && a2 < 0)
        v8 = -(uint64_t)v6;
      else
        v8 = a2;
      v9 = v6 + v8;
      v3[37] = v9;
      if (v9)
        v10 = v6 == 0;
      else
        v10 = 0;
      if (v10)
      {
        v3[36] |= 1uLL;
        v17 = ne_log_obj(v4, v5);
        v18 = objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Active session count is greater than 0, setting hasActiveSessions flag", buf, 2u);
        }

        sub_10004F298((uint64_t)v3);
      }
      else
      {
        if (v9)
          v11 = 1;
        else
          v11 = v6 == 0;
        if (!v11)
        {
          v3[36] &= ~1uLL;
          v12 = ne_log_obj(v4, v5);
          v13 = objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            v19[0] = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Active session count is equal to 0, clearing hasActiveSessions flag", (uint8_t *)v19, 2u);
          }

          sub_10004F298((uint64_t)v3);
          if (objc_getProperty(v3, v14, 304, 1))
          {
            v16 = (void (**)(void))objc_getProperty(v3, v15, 304, 1);
            v16[2]();

          }
        }
      }
    }
    objc_sync_exit(v3);

  }
}

void sub_100051A70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100051A8C(void *a1, const char *a2, uint64_t a3)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  const char *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  BOOL v26;
  int v27;
  BOOL v28;
  const __CFString *v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  const __CFString *v33;
  const __CFString *v34;
  BOOL v35;
  int v36;
  const __CFString *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  char v43;
  const char *v44;
  NSObject *v45;
  uint32_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  id obj;
  uint64_t v56;
  id v57;
  uint64_t v58;
  unsigned int v59;
  void *v60;
  char v61;
  void *v62;
  uint64_t v63;
  const __CFString *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint8_t buf[4];
  _BYTE v74[14];
  __int16 v75;
  unsigned int v76;
  __int16 v77;
  unsigned int v78;
  _BYTE v79[128];
  _BYTE v80[128];

  if (!a1)
    return 0;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v6 = objc_getProperty(a1, a2, 120, 1);
  v57 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v69, v80, 16);
  if (v57)
  {
    obj = v6;
    v63 = a3;
    v64 = 0;
    v8 = 0;
    v61 = 1;
    v56 = *(_QWORD *)v70;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v70 != v56)
          objc_enumerationMutation(obj);
        v58 = v9;
        v10 = *(_QWORD *)(*((_QWORD *)&v69 + 1) + 8 * v9);
        v65 = 0u;
        v66 = 0u;
        v67 = 0u;
        v68 = 0u;
        v11 = objc_msgSend(objc_getProperty(a1, v7, 120, 1), "objectForKeyedSubscript:", v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v65, v79, 16);
        if (v13)
        {
          v15 = v13;
          v16 = *(_QWORD *)v66;
          do
          {
            v17 = 0;
            do
            {
              if (*(_QWORD *)v66 != v16)
                objc_enumerationMutation(v12);
              v18 = *(_QWORD *)(*((_QWORD *)&v65 + 1) + 8 * (_QWORD)v17);
              v19 = objc_msgSend(objc_getProperty(a1, v14, 120, 1), "objectForKeyedSubscript:", v10);
              v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
              v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", v18));

              if (v21)
              {
                if (objc_msgSend(v21, "supportsDefaultDrop"))
                {
                  v22 = objc_msgSend(v21, "disableDefaultDropAfterBoot");
                  if ((v22 & 1) == 0)
                  {
                    v24 = ne_log_obj(v22, v23);
                    v25 = objc_claimAutoreleasedReturnValue(v24);
                    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
                    {
                      v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "configuration"));
                      v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "name"));
                      v59 = objc_msgSend(v21, "supportsDefaultDrop");
                      v38 = objc_msgSend(v21, "disableDefaultDropAfterBoot");
                      *(_DWORD *)buf = 67109890;
                      *(_DWORD *)v74 = 0;
                      *(_WORD *)&v74[4] = 2112;
                      *(_QWORD *)&v74[6] = v62;
                      v75 = 1024;
                      v76 = v59;
                      v77 = 1024;
                      v78 = v38;
                      _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "applyIPDefaultDrop: disableDefaultDropAfterBoot %d - session %@ <supportsDefaultDrop %d> <disableDefaultDropAfterBoot %d>", buf, 0x1Eu);

                    }
                    v61 = 0;
                  }
                }
                if (objc_msgSend(v21, "isDropPersistent", obj) == (_DWORD)a2
                  && (!v63 || (uint64_t)objc_msgSend(v21, "defaultDropType") <= v63))
                {
                  switch((unint64_t)objc_msgSend(v21, "defaultDropType"))
                  {
                    case 2uLL:
                      if (v8)
                        v26 = v8 <= 2;
                      else
                        v26 = 0;
                      v27 = !v26;
                      v28 = v27 == 0;
                      v29 = v64;
                      if (!v28)
                        v29 = CFSTR("High");
                      v64 = v29;
                      v30 = 2;
                      goto LABEL_54;
                    case 3uLL:
                      if (v8)
                        v35 = v8 <= 3;
                      else
                        v35 = 0;
                      v36 = !v35;
                      v28 = v36 == 0;
                      v37 = v64;
                      if (!v28)
                        v37 = CFSTR("Default");
                      v64 = v37;
                      v30 = 3;
                      goto LABEL_54;
                    case 4uLL:
                      if (v8)
                        v31 = v8 <= 4;
                      else
                        v31 = 0;
                      v32 = !v31;
                      v28 = v32 == 0;
                      v33 = v64;
                      if (!v28)
                        v33 = CFSTR("Low");
                      v64 = v33;
                      v30 = 4;
LABEL_54:
                      if (!v28)
                        v8 = v30;
                      break;
                    case 5uLL:
                      v34 = v64;
                      if (!v8)
                        v34 = CFSTR("Last");
                      v64 = v34;
                      if (!v8)
                        v8 = 5;
                      break;
                    default:
                      break;
                  }
                }
              }

              v17 = (char *)v17 + 1;
            }
            while (v15 != v17);
            v15 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v65, v79, 16);
          }
          while (v15);
        }

        v9 = v58 + 1;
      }
      while ((id)(v58 + 1) != v57);
      v57 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v80, 16);
    }
    while (v57);

    if (v8 && v64)
    {
      v39 = NEPolicySetDropPriorityLevel(v64, a2);
      v41 = ne_log_obj(v39, v40);
      v42 = objc_claimAutoreleasedReturnValue(v41);
      v43 = v61;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v74 = v64;
        v44 = "applyIPDefaultDrop: IP Drop-All enabled <%@>";
        v45 = v42;
        v46 = 12;
LABEL_69:
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, v44, buf, v46);
        goto LABEL_70;
      }
      goto LABEL_70;
    }
    v43 = v61;
    if (v63)
      goto LABEL_71;
LABEL_67:
    v47 = NEPolicySetDropPriorityLevel(0, a2);
    v49 = ne_log_obj(v47, v48);
    v42 = objc_claimAutoreleasedReturnValue(v49);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v44 = "applyIPDefaultDrop: IP Drop-All disabled";
      v45 = v42;
      v46 = 2;
      goto LABEL_69;
    }
LABEL_70:

LABEL_71:
    if ((v43 & 1) == 0)
      return v8;
    goto LABEL_72;
  }

  v8 = 0;
  if (!a3)
  {
    v43 = 1;
    goto LABEL_67;
  }
LABEL_72:
  v50 = NEPolicySetDropPriorityLevel(0, 0);
  v52 = ne_log_obj(v50, v51);
  v53 = objc_claimAutoreleasedReturnValue(v52);
  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "applyIPDefaultDrop: IP Drop-All disabled due to disableDefaultDropAfterBoot", buf, 2u);
  }

  return v8;
}

void sub_100051FCC(void *a1, const char *a2, char a3)
{
  NSObject *Property;
  _QWORD block[6];
  char v8;

  if (a1)
  {
    Property = objc_getProperty(a1, a2, 88, 1);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10005204C;
    block[3] = &unk_1000BE1D8;
    block[4] = a1;
    block[5] = a2;
    v8 = a3;
    dispatch_async(Property, block);
  }
}

void sub_10005204C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  uint64_t v12;

  v3 = sub_100051A8C(*(void **)(a1 + 32), (const char *)1, 0);
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    v4 = NEPolicyPersistDropAllFeature(v4, *(unsigned __int8 *)(a1 + 48));
  v5 = ne_log_obj(v4, v2);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134217984;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "applyIPDefaultDrop: Persistent IP Drop-All level <%ld>", (uint8_t *)&v11, 0xCu);
  }

  v7 = sub_100051A8C(*(void **)(a1 + 32), 0, v3);
  v9 = ne_log_obj(v7, v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134217984;
    v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "applyIPDefaultDrop: non-Persistent IP Drop-All level <%ld>", (uint8_t *)&v11, 0xCu);
  }

}

void sub_100052178(void *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  id v6;
  id v7;
  SEL v8;
  id v9;
  SEL v10;
  id v11;
  SEL v12;
  const char *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  NSObject *v25;
  id v26;
  void *v27;
  char *v28;
  SEL v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id obj;
  uint64_t v36;
  id v37;
  void *i;
  id v39;
  void *v40;
  id self;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];
  uint8_t v51[128];
  uint8_t buf[4];
  const char *v53;

  if (a1)
  {
    if (a2)
    {
      v5 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithUnsignedLong:", a3);
      v6 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithUnsignedLong:", a2);
      v7 = a1;
      objc_sync_enter(v7);
      self = v7;
      v9 = objc_getProperty(v7, v8, 320, 1);
      objc_msgSend(v9, "setObject:forKeyedSubscript:", v6, v5);
      v34 = v6;

      v11 = objc_getProperty(self, v10, 320, 1);
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", v11));

      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      obj = objc_getProperty(self, v12, 120, 1);
      v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v51, 16);
      if (v37)
      {
        v36 = *(_QWORD *)v47;
        do
        {
          for (i = 0; i != v37; i = (char *)i + 1)
          {
            if (*(_QWORD *)v47 != v36)
              objc_enumerationMutation(obj);
            v14 = *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)i);
            v42 = 0u;
            v43 = 0u;
            v44 = 0u;
            v45 = 0u;
            v15 = objc_getProperty(self, v13, 120, 1);
            v39 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v14));

            v16 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v42, v50, 16);
            v18 = v16;
            if (v16)
            {
              v19 = *(_QWORD *)v43;
              do
              {
                v20 = 0;
                do
                {
                  if (*(_QWORD *)v43 != v19)
                    objc_enumerationMutation(v39);
                  v21 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)v20);
                  v22 = ne_log_obj(v16, v17);
                  v23 = objc_claimAutoreleasedReturnValue(v22);
                  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
                  {
                    v25 = v5;
                    v26 = objc_getProperty(self, v24, 120, 1);
                    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", v14));
                    v28 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKeyedSubscript:", v21));
                    *(_DWORD *)buf = 138412290;
                    v53 = v28;
                    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Passing fallback interface change event to %@", buf, 0xCu);

                    v5 = v25;
                  }

                  v30 = objc_getProperty(self, v29, 120, 1);
                  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", v14));
                  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "objectForKeyedSubscript:", v21));
                  objc_msgSend(v32, "handleChangeEventForFallbackInterfaces:", v40);

                  v20 = (char *)v20 + 1;
                }
                while (v18 != v20);
                v16 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v42, v50, 16);
                v18 = v16;
              }
              while (v16);
            }

          }
          v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v51, 16);
        }
        while (v37);
      }

      objc_sync_exit(self);
    }
    else
    {
      v33 = ne_log_obj(a1, 0);
      v5 = objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v53 = "-[NESMServer addFallbackInterface:predictedInterfaceIndex:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "%s called with null fallbackInterfaceIndex", buf, 0xCu);
      }
    }

  }
}

void sub_100052568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000525A8(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  SEL v5;
  id v6;
  void *v7;
  const char *v8;
  id v9;
  SEL v10;
  id v11;
  id v12;
  const char *v13;
  id v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  id v28;
  void *v29;
  char *v30;
  SEL v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  NSObject *oslog;
  id obj;
  uint64_t v40;
  id v41;
  void *i;
  id v43;
  id self;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[128];
  uint8_t v54[128];
  uint8_t buf[4];
  const char *v56;

  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        oslog = objc_msgSend(objc_alloc((Class)NSNumber), "initWithUnsignedLong:", a3);
        v4 = a1;
        objc_sync_enter(v4);
        self = v4;
        v6 = objc_getProperty(v4, v5, 320, 1);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", oslog));

        if (v7)
        {
          v9 = objc_getProperty(self, v8, 320, 1);
          objc_msgSend(v9, "removeObjectForKey:", oslog);

          v11 = objc_getProperty(self, v10, 320, 1);
          v12 = objc_msgSend(v11, "count");

          if (v12)
          {
            v14 = objc_getProperty(self, v13, 320, 1);
            v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", v14));

          }
          else
          {
            v15 = 0;
          }
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          obj = objc_getProperty(self, v13, 120, 1);
          v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v54, 16);
          if (v41)
          {
            v40 = *(_QWORD *)v50;
            do
            {
              for (i = 0; i != v41; i = (char *)i + 1)
              {
                if (*(_QWORD *)v50 != v40)
                  objc_enumerationMutation(obj);
                v17 = *(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * (_QWORD)i);
                v45 = 0u;
                v46 = 0u;
                v47 = 0u;
                v48 = 0u;
                v18 = objc_getProperty(self, v16, 120, 1);
                v43 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", v17));

                v19 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v45, v53, 16);
                v21 = v19;
                if (v19)
                {
                  v22 = *(_QWORD *)v46;
                  do
                  {
                    v23 = 0;
                    do
                    {
                      if (*(_QWORD *)v46 != v22)
                        objc_enumerationMutation(v43);
                      v24 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)v23);
                      v25 = ne_log_obj(v19, v20);
                      v26 = objc_claimAutoreleasedReturnValue(v25);
                      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
                      {
                        v28 = objc_getProperty(self, v27, 120, 1);
                        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectForKeyedSubscript:", v17));
                        v30 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectForKeyedSubscript:", v24));
                        *(_DWORD *)buf = 138412290;
                        v56 = v30;
                        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Passing fallback interface change event to %@", buf, 0xCu);

                      }
                      v32 = objc_getProperty(self, v31, 120, 1);
                      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", v17));
                      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", v24));
                      objc_msgSend(v34, "handleChangeEventForFallbackInterfaces:", v15);

                      v23 = (char *)v23 + 1;
                    }
                    while (v21 != v23);
                    v19 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v45, v53, 16);
                    v21 = v19;
                  }
                  while (v19);
                }

              }
              v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v54, 16);
            }
            while (v41);
          }

        }
        objc_sync_exit(self);

        goto LABEL_26;
      }
      v37 = ne_log_obj(a1, a2);
      oslog = objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v56 = "-[NESMServer removeFallbackInterface:predictedInterfaceIndex:]";
        v36 = "%s called with null predictedInterfaceIndex";
        goto LABEL_32;
      }
    }
    else
    {
      v35 = ne_log_obj(a1, 0);
      oslog = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v56 = "-[NESMServer removeFallbackInterface:predictedInterfaceIndex:]";
        v36 = "%s called with null fallbackInterfaceIndex";
LABEL_32:
        _os_log_fault_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_FAULT, v36, buf, 0xCu);
      }
    }
LABEL_26:

  }
}

void sub_100052A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100052A60(_QWORD *a1, const char *a2)
{
  id Property;
  const char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  const char *v11;
  id v12;
  uint64_t v13;
  void *i;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  id obj;
  uint64_t v20;
  id v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];

  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  Property = (id)a1[4];
  if (Property)
    Property = objc_getProperty(Property, a2, 120, 1);
  obj = Property;
  v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  v5 = 0;
  if (v21)
  {
    v20 = *(_QWORD *)v28;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v28 != v20)
          objc_enumerationMutation(obj);
        v7 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * v6);
        v23 = 0u;
        v24 = 0u;
        v25 = 0u;
        v26 = 0u;
        v8 = (id)a1[4];
        if (v8)
          v8 = objc_getProperty(v8, v4, 120, 1);
        v22 = v6;
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v7));
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
        if (v10)
        {
          v12 = v10;
          v13 = *(_QWORD *)v24;
          do
          {
            for (i = 0; i != v12; i = (char *)i + 1)
            {
              if (*(_QWORD *)v24 != v13)
                objc_enumerationMutation(v9);
              v15 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
              v16 = (id)a1[4];
              if (v16)
                v16 = objc_getProperty(v16, v11, 120, 1);
              v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", v7));
              v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", v15));

              if (objc_msgSend(v18, "hasProviderWithBundleIdentifier:", a1[5]))
              {
                if (!v5)
                  v5 = objc_alloc_init((Class)NSMutableArray);
                objc_msgSend(v5, "addObject:", v18);
              }

            }
            v12 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
          }
          while (v12);
        }

        v6 = v22 + 1;
      }
      while ((id)(v22 + 1) != v21);
      v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    }
    while (v21);
  }

  (*(void (**)(void))(a1[6] + 16))();
}

void sub_100052CA0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _QWORD *v8;
  id v9;
  _QWORD *v10;
  NSObject *v11;
  _QWORD v12[5];
  id v13;
  id v14;
  _QWORD block[5];
  id v16;
  _QWORD *v17;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = sub_10000C1FC();
    v8 = (_QWORD *)objc_claimAutoreleasedReturnValue(v7);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100052DD8;
    v12[3] = &unk_1000BECA8;
    v12[4] = a1;
    v13 = v5;
    v14 = v6;
    v9 = v13;
    v10 = v12;
    if (v8)
    {
      v11 = v8[1];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10000DB4C;
      block[3] = &unk_1000BECA8;
      block[4] = v8;
      v16 = v9;
      v17 = v10;
      dispatch_async(v11, block);

    }
  }

}

void sub_100052DD8(uint64_t a1, const char *a2)
{
  void *v3;
  NSObject *Property;
  id v5;
  uint64_t v6;
  _QWORD block[4];
  id v8;
  uint64_t v9;
  id v10;

  v3 = *(void **)(a1 + 32);
  if (v3)
    Property = objc_getProperty(v3, a2, 88, 1);
  else
    Property = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100052E80;
  block[3] = &unk_1000BECA8;
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  v8 = v5;
  v9 = v6;
  v10 = *(id *)(a1 + 48);
  dispatch_async(Property, block);

}

uint64_t sub_100052E80(uint64_t a1)
{
  void *v2;
  id v3;
  const char *v4;
  id Property;
  id v6;
  const char *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  id obj;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
  v3 = objc_msgSend(v2, "grade");

  if (v3 == (id)1)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    Property = *(id *)(a1 + 40);
    if (Property)
      Property = objc_getProperty(Property, v4, 120, 1);
    obj = Property;
    v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (v6)
    {
      v8 = v6;
      v9 = *(_QWORD *)v22;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v22 != v9)
            objc_enumerationMutation(obj);
          v11 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v10);
          v12 = *(id *)(a1 + 40);
          if (v12)
            v12 = objc_getProperty(v12, v7, 120, 1);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v11));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", &off_1000C16A8));

          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "configuration"));
          if (objc_msgSend(v15, "grade") == (id)2)
          {
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "configuration"));
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "VPN"));
            v18 = objc_msgSend(v17, "isOnDemandEnabled");

            if (v18)
              objc_msgSend(v14, "unpauseOnDemand");
          }
          else
          {

          }
          v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      }
      while (v8);
    }

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_100053060(uint64_t a1, const char *a2)
{
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  id Property;
  const char *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  const char *v21;
  id v22;
  void *v23;
  void *v24;
  const char *v25;
  id v26;
  void *v27;
  void *v28;
  id obj;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  void *v46;
  _BYTE v47[128];
  _BYTE v48[128];

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v5 = (unsigned __int8 *)(a1 + 40);
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 == (*(_BYTE *)(v3 + 14) & 1))
      return;
    *(_BYTE *)(v3 + 14) = v4;
    Property = *(id *)(a1 + 32);
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    if (Property)
      Property = objc_getProperty(Property, a2, 120, 1);
  }
  else
  {
    v5 = (unsigned __int8 *)(a1 + 40);
    if (!*(_BYTE *)(a1 + 40))
      return;
    Property = 0;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
  }
  obj = Property;
  v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v48, 16);
  if (v31)
  {
    v30 = *(_QWORD *)v40;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v40 != v30)
          objc_enumerationMutation(obj);
        v34 = *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * v8);
        v35 = 0u;
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        v9 = *(id *)(a1 + 32);
        v32 = v8;
        if (v9)
          v9 = objc_getProperty(v9, v7, 120, 1);
        v33 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v34));
        v10 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v35, v47, 16);
        if (v10)
        {
          v12 = v10;
          v13 = *(_QWORD *)v36;
          do
          {
            v14 = 0;
            do
            {
              if (*(_QWORD *)v36 != v13)
                objc_enumerationMutation(v33);
              v15 = *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)v14);
              v16 = ne_log_obj(v10, v11);
              v17 = objc_claimAutoreleasedReturnValue(v16);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
              {
                v19 = v13;
                v20 = v5;
                if (*(_BYTE *)(a1 + 40))
                  v21 = "enabled";
                else
                  v21 = "disabled";
                v22 = *(id *)(a1 + 32);
                if (v22)
                  v22 = objc_getProperty(v22, v18, 120, 1);
                v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", v34));
                v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", v15));
                *(_DWORD *)buf = 136315394;
                v44 = v21;
                v45 = 2112;
                v46 = v24;
                _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Passing fallback %s event to %@", buf, 0x16u);

                v5 = v20;
                v13 = v19;
              }

              v26 = *(id *)(a1 + 32);
              if (v26)
                v26 = objc_getProperty(v26, v25, 120, 1);
              v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", v34));
              v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKeyedSubscript:", v15));
              objc_msgSend(v28, "handleChangeEventForFallback:", *v5);

              v14 = (char *)v14 + 1;
            }
            while (v12 != v14);
            v10 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v35, v47, 16);
            v12 = v10;
          }
          while (v10);
        }

        v8 = v32 + 1;
      }
      while ((id)(v32 + 1) != v31);
      v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v48, 16);
    }
    while (v31);
  }

}

uint64_t sub_100053380(void *a1, unsigned int *a2, void *a3, void *a4, int a5, void *a6, int a7, void *a8, void *a9, void *a10, unsigned __int16 a11, char a12, void *a13, void *a14, void *a15, char a16, void *a17, char a18)
{
  id v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t is_debug_logging_enabled;
  int v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  NSObject *v47;
  _BOOL4 v48;
  void *v49;
  void *v50;
  id v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  _BOOL4 v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  void *i;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  id v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  NSObject *v77;
  void *v78;
  void *v79;
  id v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  _BOOL4 v89;
  void *v90;
  _BOOL4 v91;
  void *v93;
  void *v94;
  id v95;
  id v96;
  id v97;
  id v98;
  uint64_t v99;
  id obja;
  id v102;
  id v104;
  id v105;
  id v106;
  id v108;
  id v109;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint8_t v115[128];
  uint8_t buf[4];
  id v117;

  v21 = a3;
  v22 = a4;
  v97 = a6;
  v96 = a8;
  v102 = a9;
  v23 = v22;
  v24 = v21;
  v106 = a10;
  v95 = a13;
  v105 = a14;
  v109 = a15;
  v108 = a17;
  v25 = objc_alloc_init((Class)NSMutableArray);
  if (v21)
    v26 = v21;
  else
    v26 = v23;
  v104 = v26;
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:"));
  objc_msgSend(v25, "addObject:", v27);

  if (v23)
  {
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v23));
    objc_msgSend(v25, "addObject:", v28);

  }
  v29 = v102;
  if (!v102 || (a16 & 1) != 0)
    v30 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
  else
    v30 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", v102));
  v31 = (void *)v30;
  v32 = v95;
  objc_msgSend(v25, "addObject:", v30);

  if (a7)
  {
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition uid:](NEPolicyCondition, "uid:", 0));
    objc_msgSend(v25, "addObject:", v33);

  }
  if (a5)
  {
    v34 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](NEPolicyCondition, "entitlement"));
  }
  else
  {
    if (!objc_msgSend(v97, "length"))
      goto LABEL_17;
    v34 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition customEntitlement:](NEPolicyCondition, "customEntitlement:", v97));
  }
  v35 = (void *)v34;
  objc_msgSend(v25, "addObject:", v34);

LABEL_17:
  if (v106)
  {
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition signingIdentifier:](NEPolicyCondition, "signingIdentifier:"));
    objc_msgSend(v25, "addObject:", v36);

  }
  v98 = v25;
  if (a11)
  {
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", a11));
    objc_msgSend(v25, "addObject:", v37);

  }
  if (a12)
  {
    v38 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition platformBinary](NEPolicyCondition, "platformBinary"));
    objc_msgSend(v25, "addObject:", v38);

    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition delegateIsPlatformBinary](NEPolicyCondition, "delegateIsPlatformBinary"));
    objc_msgSend(v25, "addObject:", v39);

  }
  if (v95)
  {
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition accountIdentifier:](NEPolicyCondition, "accountIdentifier:", v95));
    objc_msgSend(v25, "addObject:", v40);

  }
  if (v109)
  {
    obja = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *a2, v109, v25);
    v41 = objc_msgSend(a1, "addPolicy:");
    is_debug_logging_enabled = nelog_is_debug_logging_enabled();
    v43 = is_debug_logging_enabled;
    v45 = ne_log_obj(is_debug_logging_enabled, v44);
    v46 = objc_claimAutoreleasedReturnValue(v45);
    v47 = v46;
    if (!v41)
    {
      v48 = os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
      if (v43)
      {
        if (v48)
        {
          *(_DWORD *)buf = 138412290;
          v117 = obja;
LABEL_46:
          _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
        }
LABEL_107:

        v88 = 0;
        goto LABEL_108;
      }
      if (!v48)
        goto LABEL_107;
      v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(obja, "descriptionWithIndent:options:", 0, 2));
      *(_DWORD *)buf = 138412290;
      v117 = v90;
LABEL_98:
      _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);

      v25 = v98;
      goto LABEL_107;
    }
    if (v43)
    {
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v117 = obja;
        _os_log_debug_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(obja, "descriptionWithIndent:options:", 0, 2));
      *(_DWORD *)buf = 138412290;
      v117 = v49;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);

    }
    if (v108)
    {
      v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v41));
      objc_msgSend(v108, "addObject:", v50);

    }
    if (a18)
      ++*a2;
  }
  obja = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *a2, v105, v25);
  v51 = objc_msgSend(a1, "addPolicy:");
  v52 = nelog_is_debug_logging_enabled();
  v53 = v52;
  v55 = ne_log_obj(v52, v54);
  v56 = objc_claimAutoreleasedReturnValue(v55);
  v47 = v56;
  if (!v51)
  {
    v57 = os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
    if (v53)
    {
      if (v57)
      {
        *(_DWORD *)buf = 138412290;
        v117 = obja;
        goto LABEL_46;
      }
      goto LABEL_107;
    }
    if (!v57)
      goto LABEL_107;
    v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(obja, "descriptionWithIndent:options:", 0, 2));
    *(_DWORD *)buf = 138412290;
    v117 = v90;
    goto LABEL_98;
  }
  if (v53)
  {
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v117 = obja;
      _os_log_debug_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
  {
    v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(obja, "descriptionWithIndent:options:", 0, 2));
    *(_DWORD *)buf = 138412290;
    v117 = v58;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);

  }
  if (v108)
  {
    v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v51));
    objc_msgSend(v108, "addObject:", v59);

  }
  if (a18)
    ++*a2;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  obja = v96;
  v60 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v111, v115, 16);
  if (!v60)
  {
    v88 = 1;
    goto LABEL_90;
  }
  v61 = v60;
  v94 = v23;
  v99 = *(_QWORD *)v112;
  while (2)
  {
    for (i = 0; i != v61; i = (char *)i + 1)
    {
      if (*(_QWORD *)v112 != v99)
        objc_enumerationMutation(obja);
      v63 = *(_QWORD *)(*((_QWORD *)&v111 + 1) + 8 * (_QWORD)i);
      v47 = objc_alloc_init((Class)NSMutableArray);
      v64 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v104));
      -[NSObject addObject:](v47, "addObject:", v64);

      v65 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v63));
      -[NSObject addObject:](v47, "addObject:", v65);

      if (v29)
        v66 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", v29));
      else
        v66 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
      v67 = (void *)v66;
      -[NSObject addObject:](v47, "addObject:", v66);

      if (a5)
      {
        v68 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](NEPolicyCondition, "entitlement"));
        -[NSObject addObject:](v47, "addObject:", v68);

      }
      if (v106)
      {
        v69 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition signingIdentifier:](NEPolicyCondition, "signingIdentifier:", v106));
        -[NSObject addObject:](v47, "addObject:", v69);

      }
      if (v109)
      {
        v70 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *a2, v109, v47);
        v71 = objc_msgSend(a1, "addPolicy:", v70);
        v72 = nelog_is_debug_logging_enabled();
        v73 = v72;
        v75 = ne_log_obj(v72, v74);
        v76 = objc_claimAutoreleasedReturnValue(v75);
        v77 = v76;
        if (!v71)
        {
          v91 = os_log_type_enabled(v76, OS_LOG_TYPE_ERROR);
          if (v73)
          {
            v24 = v21;
            v23 = v94;
            v32 = v95;
            if (v91)
            {
              *(_DWORD *)buf = 138412290;
              v117 = v70;
              goto LABEL_102;
            }
LABEL_106:

            v29 = v102;
            goto LABEL_107;
          }
          v24 = v21;
          v23 = v94;
          v32 = v95;
          if (!v91)
            goto LABEL_106;
LABEL_109:
          v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "descriptionWithIndent:options:", 0, 2));
          *(_DWORD *)buf = 138412290;
          v117 = v93;
          _os_log_error_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);

          v25 = v98;
          goto LABEL_106;
        }
        if (v73)
        {
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138412290;
            v117 = v70;
            _os_log_debug_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
          }
        }
        else if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
        {
          v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "descriptionWithIndent:options:", 0, 2));
          *(_DWORD *)buf = 138412290;
          v117 = v78;
          _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);

        }
        if (v108)
        {
          v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v71));
          objc_msgSend(v108, "addObject:", v79);

        }
        if (a18)
          ++*a2;
      }
      v70 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *a2, v105, v47);
      v80 = objc_msgSend(a1, "addPolicy:", v70);
      v81 = nelog_is_debug_logging_enabled();
      v82 = v81;
      v84 = ne_log_obj(v81, v83);
      v85 = objc_claimAutoreleasedReturnValue(v84);
      v77 = v85;
      if (!v80)
      {
        v89 = os_log_type_enabled(v85, OS_LOG_TYPE_ERROR);
        if (v82)
        {
          v24 = v21;
          v23 = v94;
          v32 = v95;
          if (v89)
          {
            *(_DWORD *)buf = 138412290;
            v117 = v70;
LABEL_102:
            _os_log_error_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
            goto LABEL_106;
          }
          goto LABEL_106;
        }
        v24 = v21;
        v23 = v94;
        v32 = v95;
        if (!v89)
          goto LABEL_106;
        goto LABEL_109;
      }
      if (v82)
      {
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v117 = v70;
          _os_log_debug_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
      {
        v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "descriptionWithIndent:options:", 0, 2));
        *(_DWORD *)buf = 138412290;
        v117 = v86;
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);

      }
      if (v108)
      {
        v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v80));
        objc_msgSend(v108, "addObject:", v87);

      }
      v29 = v102;
      if (a18)
        ++*a2;

    }
    v61 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v111, v115, 16);
    v88 = 1;
    if (v61)
      continue;
    break;
  }
  v24 = v21;
  v23 = v94;
LABEL_90:
  v32 = v95;
LABEL_108:

  return v88;
}

uint64_t sub_100054014(void *a1, unsigned int *a2, int a3, void *a4, void *a5, int a6, void *a7, int a8, void *a9, char a10, void *a11, void *a12, void *a13, char a14, void *a15)
{
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  void *i;
  uint64_t v33;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v45;
  id v46;
  id v47;
  id v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  unsigned int v57;
  _BYTE v58[128];
  _BYTE v59[128];

  v19 = a4;
  v20 = a5;
  v48 = a7;
  v47 = a9;
  v21 = a11;
  v46 = a12;
  v45 = a13;
  v22 = a15;
  if (a1
    && (v57 = *a2, v20)
    && (v23 = +[NEProcessInfo copyDNSUUIDs](NEProcessInfo, "copyDNSUUIDs")) != 0)
  {
    v24 = v23;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v25 = v20;
    v39 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v53, v59, 16);
    if (v39)
    {
      v40 = *(_QWORD *)v54;
      v37 = v20;
      v38 = v19;
      v35 = v25;
      v36 = v21;
      while (2)
      {
        v26 = 0;
        do
        {
          if (*(_QWORD *)v54 != v40)
            objc_enumerationMutation(v25);
          v41 = v26;
          v27 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * v26);
          v57 = *a2;
          if (!sub_100053380(a1, &v57, 0, v27, a6, v48, a8, v24, v47, 0, 0, a10, v21, v46, v45, a14, v22, a3))
          {
LABEL_29:

            v33 = 0;
            goto LABEL_30;
          }
          if (v19)
          {
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v28 = v19;
            v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v49, v58, 16);
            if (v29)
            {
              v30 = v29;
              v31 = *(_QWORD *)v50;
              while (2)
              {
                for (i = 0; i != v30; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v50 != v31)
                    objc_enumerationMutation(v28);
                  if ((sub_100053380(a1, &v57, *(void **)(*((_QWORD *)&v49 + 1) + 8 * (_QWORD)i), v27, a6, v48, a8, v24, v47, 0, 0, a10, 0, v46, v45, a14, v22, a3) & 1) == 0)
                  {

                    v20 = v37;
                    v19 = v38;
                    v25 = v35;
                    v21 = v36;
                    goto LABEL_29;
                  }
                }
                v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v49, v58, 16);
                if (v30)
                  continue;
                break;
              }
            }

            v20 = v37;
            v19 = v38;
            v25 = v35;
            v21 = v36;
          }
          if (a3)
            *a2 = v57;
          v26 = v41 + 1;
        }
        while ((id)(v41 + 1) != v39);
        v39 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v53, v59, 16);
        if (v39)
          continue;
        break;
      }
    }

    if ((a3 & 1) == 0)
      *a2 = v57;
    v33 = 1;
LABEL_30:

  }
  else
  {
    v33 = 0;
  }

  return v33;
}

uint64_t sub_100054374(void *a1, unsigned int *a2, int a3, void *a4, int a5, void *a6, void *a7, unsigned __int16 a8, char a9, void *a10, void *a11, void *a12)
{
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  void *i;
  void *v27;
  id v29;
  id obj;
  id v33;
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v39;
  _BYTE v40[128];

  v17 = a4;
  v34 = a6;
  v33 = a7;
  v18 = a10;
  v19 = a11;
  v20 = a12;
  v39 = *a2;
  if (!v17)
    goto LABEL_4;
  if (a9)
  {
    v21 = +[NEProcessInfo copyDNSUUIDs](NEProcessInfo, "copyDNSUUIDs");
    if (!v21)
    {
LABEL_4:
      v22 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    v21 = 0;
  }
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v29 = v17;
  obj = v17;
  v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
  if (v23)
  {
    v24 = v23;
    v25 = *(_QWORD *)v36;
    while (2)
    {
      for (i = 0; i != v24; i = (char *)i + 1)
      {
        if (*(_QWORD *)v36 != v25)
          objc_enumerationMutation(obj);
        v27 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i);
        v39 = *a2;
        if ((sub_100053380(a1, &v39, v27, 0, a5, 0, 0, v21, v34, v33, a8, 0, 0, v18, v19, 0, v20, a3) & 1) == 0)
        {

          v22 = 0;
          goto LABEL_20;
        }
        if (a3)
          *a2 = v39;
      }
      v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
      if (v24)
        continue;
      break;
    }
  }

  if ((a3 & 1) == 0)
    *a2 = v39;
  v22 = 1;
LABEL_20:
  v17 = v29;

LABEL_21:
  return v22;
}

BOOL sub_10005459C(_BOOL8 a1, unsigned int *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t is_debug_logging_enabled;
  int v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  _BOOL4 v23;
  _BOOL4 v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;
  _BOOL4 v38;
  _BOOL4 v39;
  void *v40;
  void *v41;
  void *v43;
  void *v44;
  id v45;
  uint8_t buf[4];
  id v47;

  v45 = a4;
  if (!a1)
  {
    v26 = v45;
    goto LABEL_33;
  }
  v7 = a3;
  v8 = objc_alloc_init((Class)NSMutableArray);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", 58));
  objc_msgSend(v8, "addObject:", v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
  objc_msgSend(v8, "addObject:", v10);

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", 0));
  objc_msgSend(v11, "setNegative:", 1);
  objc_msgSend(v8, "addObject:", v11);
  v12 = objc_alloc((Class)NEPolicy);
  v13 = *a2;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", (v13 + 2)));
  v15 = objc_msgSend(v12, "initWithOrder:result:conditions:", v13, v14, v8);

  v16 = objc_msgSend((id)a1, "addPolicy:", v15);
  is_debug_logging_enabled = nelog_is_debug_logging_enabled();
  v18 = is_debug_logging_enabled;
  v20 = ne_log_obj(is_debug_logging_enabled, v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  v22 = v21;
  if (v16)
  {
    v23 = os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    if (v18)
    {
      if (v23)
      {
        *(_DWORD *)buf = 138412290;
        v47 = v15;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
      }
    }
    else if (v23)
    {
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "descriptionWithIndent:options:", 0, 2));
      *(_DWORD *)buf = 138412290;
      v47 = v25;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);

    }
    v26 = v45;
    if (!v45)
      goto LABEL_17;
    v22 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v16));
    objc_msgSend(v45, "addObject:", v22);
  }
  else
  {
    v24 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
    if (v18)
    {
      if (v24)
      {
        *(_DWORD *)buf = 138412290;
        v47 = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
      }
    }
    else if (v24)
    {
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "descriptionWithIndent:options:", 0, 2));
      *(_DWORD *)buf = 138412290;
      v47 = v43;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);

    }
    v26 = v45;
  }

LABEL_17:
  ++*a2;
  v27 = objc_alloc_init((Class)NSMutableArray);

  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", 58));
  objc_msgSend(v27, "addObject:", v28);

  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
  objc_msgSend(v27, "addObject:", v29);

  v30 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *a2, v7, v27);
  v31 = objc_msgSend((id)a1, "addPolicy:", v30);
  a1 = v31 != 0;
  v32 = nelog_is_debug_logging_enabled();
  v33 = v32;
  v35 = ne_log_obj(v32, v34);
  v36 = objc_claimAutoreleasedReturnValue(v35);
  v37 = v36;
  if (v31)
  {
    v38 = os_log_type_enabled(v36, OS_LOG_TYPE_INFO);
    if (v33)
    {
      if (v38)
      {
        *(_DWORD *)buf = 138412290;
        v47 = v30;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
      }
    }
    else if (v38)
    {
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "descriptionWithIndent:options:", 0, 2));
      *(_DWORD *)buf = 138412290;
      v47 = v40;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);

    }
    if (v26)
    {
      v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v31));
      objc_msgSend(v26, "addObject:", v41);

    }
    ++*a2;
  }
  else
  {
    v39 = os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
    if (v33)
    {
      if (v39)
      {
        *(_DWORD *)buf = 138412290;
        v47 = v30;
        _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
      }
    }
    else if (v39)
    {
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "descriptionWithIndent:options:", 0, 2));
      *(_DWORD *)buf = 138412290;
      v47 = v44;
      _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);

    }
  }

LABEL_33:
  return a1;
}

uint64_t sub_100054AEC(void *a1, unsigned int *a2, int a3, void *a4, void *a5)
{
  __CFString *v7;
  id v8;
  id v9;
  __int128 v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t is_debug_logging_enabled;
  int v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  _BOOL4 v32;
  uint64_t v33;
  void *v35;
  __int128 v36;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unsigned __int8 v45;
  uint8_t buf[4];
  id v47;
  _BYTE v48[128];

  v7 = CFSTR("53");
  v40 = a4;
  v8 = a5;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v9 = objc_msgSend(&off_1000C15A0, "countByEnumeratingWithState:objects:count:", &v41, v48, 16);
  if (v9)
  {
    v11 = v9;
    v12 = 0;
    v13 = *(_QWORD *)v42;
    *(_QWORD *)&v10 = 138412290;
    v36 = v10;
    while (2)
    {
      v14 = 0;
      v15 = v12;
      do
      {
        if (*(_QWORD *)v42 != v13)
          objc_enumerationMutation(&off_1000C15A0);
        v16 = *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)v14);
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array", v36));

        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        objc_msgSend(v12, "addObject:", v17);

        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v16, CFSTR("53")));
        if (a3)
          v19 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition localAddress:prefix:](NEPolicyCondition, "localAddress:prefix:", v18, 0));
        else
          v19 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:", v18, 0));
        v20 = (void *)v19;
        objc_msgSend(v12, "addObject:", v19);

        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", 17));
        objc_msgSend(v12, "addObject:", v21);

        v22 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *a2, v40, v12);
        v23 = objc_msgSend(a1, "addPolicy:", v22);
        is_debug_logging_enabled = nelog_is_debug_logging_enabled();
        v25 = is_debug_logging_enabled;
        v27 = ne_log_obj(is_debug_logging_enabled, v26);
        v28 = objc_claimAutoreleasedReturnValue(v27);
        v29 = v28;
        if (!v23)
        {
          v32 = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
          if (v25)
          {
            if (v32)
            {
              *(_DWORD *)buf = v36;
              v47 = v22;
              _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
            }
          }
          else if (v32)
          {
            v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "descriptionWithIndent:options:", 0, 2));
            *(_DWORD *)buf = v36;
            v47 = v35;
            _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);

          }
          v45 = 0;

          goto LABEL_28;
        }
        if (v25)
        {
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v36;
            v47 = v22;
            _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
          }
        }
        else if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "descriptionWithIndent:options:", 0, 2));
          *(_DWORD *)buf = v36;
          v47 = v30;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);

        }
        if (v8)
        {
          v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v23));
          objc_msgSend(v8, "addObject:", v31);

        }
        v14 = (char *)v14 + 1;
        v15 = v12;
      }
      while (v11 != v14);
      v11 = objc_msgSend(&off_1000C15A0, "countByEnumeratingWithState:objects:count:", &v41, v48, 16);
      if (v11)
        continue;
      break;
    }
  }
  else
  {
    v12 = 0;
  }
  v45 = 1;
LABEL_28:

  v33 = v45;
  return v33;
}

uint64_t sub_100054EEC(void *a1, unsigned int *a2, void *a3, void *a4, void *a5, int a6)
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  id v36;
  void *v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  void *v47;
  _BYTE v48[128];

  v10 = a3;
  v11 = a4;
  v39 = a5;
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](NEPolicyResult, "pass"));
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v12 = objc_msgSend(&off_1000C15B8, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
  if (v12)
  {
    v13 = v12;
    v14 = 0;
    v15 = *(_QWORD *)v41;
    if (v10)
      v16 = v10;
    else
      v16 = v11;
    v36 = v16;
    while (2)
    {
      v17 = 0;
      v18 = v14;
      do
      {
        if (*(_QWORD *)v41 != v15)
          objc_enumerationMutation(&off_1000C15B8);
        v19 = *(_QWORD *)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)v17);
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));

        if (v11)
        {
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v36));
          objc_msgSend(v14, "addObject:", v20);

          v21 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v11));
          objc_msgSend(v14, "addObject:", v21);

        }
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        objc_msgSend(v14, "addObject:", v22);

        v23 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v19, v39));
        if (a6)
          v24 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition localAddress:prefix:](NEPolicyCondition, "localAddress:prefix:", v23, 0));
        else
          v24 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:", v23, 0));
        v25 = (void *)v24;
        objc_msgSend(v14, "addObject:", v24);

        v26 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](NEPolicyCondition, "entitlement"));
        objc_msgSend(v14, "addObject:", v26);

        v27 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *a2, v38, v14);
        v28 = objc_msgSend(a1, "addPolicy:", v27);

        v31 = ne_log_obj(v29, v30);
        v32 = objc_claimAutoreleasedReturnValue(v31);
        v33 = v32;
        if (!v28)
        {
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            v45 = "-[NEPolicySession(AlwaysOnVPN) addPortPoliciesWithOrder:eAppUUID:appUUID:port:local:]";
            _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%s: addPolicy failed", buf, 0xCu);
          }

          v34 = 0;
          goto LABEL_24;
        }
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          v45 = "-[NEPolicySession(AlwaysOnVPN) addPortPoliciesWithOrder:eAppUUID:appUUID:port:local:]";
          v46 = 2112;
          v47 = v14;
          _os_log_debug_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "%s: Added Bonjour policy %@", buf, 0x16u);
        }

        ++*a2;
        v17 = (char *)v17 + 1;
        v18 = v14;
      }
      while (v13 != v17);
      v13 = objc_msgSend(&off_1000C15B8, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
      if (v13)
        continue;
      break;
    }
    v34 = 1;
  }
  else
  {
    v14 = 0;
    v34 = 1;
  }
LABEL_24:

  return v34;
}

uint64_t sub_100055294(void *a1, unsigned int *a2)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  id v12;
  uint64_t has_internal_content;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  id v22;
  uint64_t v23;
  void *j;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t v45[128];
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  const __CFString *v49;
  _BYTE v50[128];

  v4 = +[NEProcessInfo copyDNSUUIDs](NEProcessInfo, "copyDNSUUIDs");
  v5 = v4;
  if (v4)
  {
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v6 = v4;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v41, v50, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v42;
      v36 = v5;
      while (2)
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v42 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
          if (!sub_100054EEC(a1, a2, 0, v11, CFSTR("5353"), 1)
            || !sub_100054EEC(a1, a2, 0, v11, CFSTR("5353"), 0))
          {
            v34 = 0;
            goto LABEL_40;
          }
          v12 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("979C0A62-49FE-4739-BDCB-CAC584AC832D"));
          if (!sub_100054EEC(a1, a2, v12, v11, CFSTR("5353"), 1)
            || !sub_100054EEC(a1, a2, v12, v11, CFSTR("5353"), 0))
          {
            v34 = 0;
            goto LABEL_39;
          }

        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v41, v50, 16);
        v5 = v36;
        if (v8)
          continue;
        break;
      }
    }

    has_internal_content = os_variant_has_internal_content("com.apple.networkextension");
    if ((_DWORD)has_internal_content)
    {
      v36 = v5;
      v15 = ne_log_obj(has_internal_content, v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v47 = "-[NEPolicySession(AlwaysOnVPN) addBonjourWithOrder:]";
        v48 = 2112;
        v49 = CFSTR("/usr/local/bin/dnssdutil");
        _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%s: Adding pass policy Bonjour traffic for %@", buf, 0x16u);
      }

      v18 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/usr/local/bin/dnssdutil"));
      if (!v18)
      {
        v19 = ne_log_obj(0, v17);
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          v47 = "-[NEPolicySession(AlwaysOnVPN) addBonjourWithOrder:]";
          v48 = 2112;
          v49 = CFSTR("/usr/local/bin/dnssdutil");
          _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%s: failed to get UUIDs for %@", buf, 0x16u);
        }

      }
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v12 = v18;
      v21 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
      if (v21)
      {
        v22 = v21;
        v23 = *(_QWORD *)v38;
        do
        {
          for (j = 0; j != v22; j = (char *)j + 1)
          {
            if (*(_QWORD *)v38 != v23)
              objc_enumerationMutation(v12);
            v25 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)j);
            v26 = sub_100054EEC(a1, a2, 0, v25, CFSTR("5353"), 1);
            if ((v26 & 1) == 0)
            {
              v28 = ne_log_obj(v26, v27);
              v29 = objc_claimAutoreleasedReturnValue(v28);
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                v47 = "-[NEPolicySession(AlwaysOnVPN) addBonjourWithOrder:]";
                v48 = 2112;
                v49 = CFSTR("/usr/local/bin/dnssdutil");
                _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "%s: failed to add policy for local address for %@", buf, 0x16u);
              }

            }
            v30 = sub_100054EEC(a1, a2, 0, v25, CFSTR("5353"), 0);
            if ((v30 & 1) == 0)
            {
              v32 = ne_log_obj(v30, v31);
              v33 = objc_claimAutoreleasedReturnValue(v32);
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                v47 = "-[NEPolicySession(AlwaysOnVPN) addBonjourWithOrder:]";
                v48 = 2112;
                v49 = CFSTR("/usr/local/bin/dnssdutil");
                _os_log_debug_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "%s: failed to add policy for remote address for %@", buf, 0x16u);
              }

            }
          }
          v22 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
        }
        while (v22);
      }
      v34 = 1;
      v6 = v12;
LABEL_39:

LABEL_40:
      v5 = v36;

    }
    else
    {
      v34 = 1;
    }
  }
  else
  {
    v34 = 0;
  }

  return v34;
}

uint64_t sub_100055754(void *a1, unsigned int *a2, uint64_t a3, int a4, int a5, void *a6)
{
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  unsigned __int8 v32;
  uint8_t buf[4];
  _BYTE v34[18];
  __int16 v35;
  const __CFString *v36;
  __int16 v37;
  const char *v38;

  v11 = a6;
  v13 = v11;
  if (!a1)
  {
LABEL_12:
    v15 = 0;
    goto LABEL_32;
  }
  if (a3)
  {
    if (a3 == 2)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult drop](NEPolicyResult, "drop"));
      goto LABEL_16;
    }
    if (a3 == 1)
    {
      if ((a4 & 1) != 0)
        v14 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](NEPolicyResult, "pass"));
      else
        v14 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 0));
      v16 = (void *)v14;
      if (a5)
      {
        v19 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", &unk_10009EF93);
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult removeNetworkAgentUUID:](NEPolicyResult, "removeNetworkAgentUUID:", v19));

        goto LABEL_17;
      }
LABEL_16:
      v20 = 0;
LABEL_17:
      v21 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/System/Library/PrivateFrameworks/VisualVoicemail.framework/vmd"));
      v23 = ne_log_obj(v21, v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      v25 = v24;
      if (v21)
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          v26 = "";
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)v34 = "-[NEPolicySession(AlwaysOnVPN) addVoiceMailExceptionWithOrder:action:isHighPriority:isAOVPN:policyIDList:]";
          if (a4)
            v26 = " <at HIGH priority>";
          *(_WORD *)&v34[8] = 2112;
          *(_QWORD *)&v34[10] = v16;
          v35 = 2112;
          v36 = CFSTR("VoiceMail");
          v37 = 2080;
          v38 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "%s: Adding %@ Exceptions policy for %@%s", buf, 0x2Au);
        }

        v27 = sub_100054014(a1, a2, 1, 0, v21, 1, 0, 0, 0, 0, 0, v16, v20, 0, 0);
        if ((v27 & 1) != 0)
        {
          v32 = 1;
LABEL_31:

          v15 = v32;
          goto LABEL_32;
        }
        v29 = ne_log_obj(v27, v28);
        v30 = objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)v34 = "-[NEPolicySession(AlwaysOnVPN) addVoiceMailExceptionWithOrder:action:isHighPriority:isAOVPN:policyIDList:]";
          *(_WORD *)&v34[8] = 2112;
          *(_QWORD *)&v34[10] = v16;
          v35 = 2112;
          v36 = CFSTR("VoiceMail");
          _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%s: Failed to add %@ policy for %@", buf, 0x20u);
        }

      }
      else
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)v34 = "-[NEPolicySession(AlwaysOnVPN) addVoiceMailExceptionWithOrder:action:isHighPriority:isAOVPN:policyIDList:]";
          *(_WORD *)&v34[8] = 2112;
          *(_QWORD *)&v34[10] = CFSTR("VoiceMail");
          _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%s: failed to get UUIDs for %@ daemon", buf, 0x16u);
        }

      }
      v32 = 0;
      goto LABEL_31;
    }
    v17 = ne_log_obj(v11, v12);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)v34 = a3;
      *(_WORD *)&v34[4] = 2112;
      *(_QWORD *)&v34[6] = CFSTR("VoiceMail");
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Invalid action %d for %@", buf, 0x12u);
    }

    goto LABEL_12;
  }
  v15 = 1;
LABEL_32:

  return v15;
}

BOOL sub_100055AE4(void *a1, unsigned int *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t is_debug_logging_enabled;
  int v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  _BOOL4 v20;
  void *v21;
  void *v22;
  void *v24;
  int v25;
  id v26;

  v7 = a4;
  v8 = a3;
  v9 = objc_alloc_init((Class)NSMutableArray);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
  objc_msgSend(v9, "addObject:", v10);

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition customEntitlement:](NEPolicyCondition, "customEntitlement:", CFSTR("com.apple.private.application-service-browse")));
  objc_msgSend(v9, "addObject:", v11);

  v12 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *a2, v8, v9);
  v13 = objc_msgSend(a1, "addPolicy:", v12);
  is_debug_logging_enabled = nelog_is_debug_logging_enabled();
  v15 = is_debug_logging_enabled;
  v17 = ne_log_obj(is_debug_logging_enabled, v16);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  v19 = v18;
  if (v13)
  {
    if (v15)
    {
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        v25 = 138412290;
        v26 = v12;
        _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Added ApplicationServiceBrowse exception policy: %@", (uint8_t *)&v25, 0xCu);
      }
    }
    else if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "descriptionWithIndent:options:", 0, 2));
      v25 = 138412290;
      v26 = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Added ApplicationServiceBrowse exceptionpolicy: %@", (uint8_t *)&v25, 0xCu);

    }
    if (v7)
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v13));
      objc_msgSend(v7, "addObject:", v22);

    }
    ++*a2;
  }
  else
  {
    v20 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    if (v15)
    {
      if (v20)
      {
        v25 = 138412290;
        v26 = v12;
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to add policy for ApplicationServiceBrowse exception: %@", (uint8_t *)&v25, 0xCu);
      }
    }
    else if (v20)
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "descriptionWithIndent:options:", 0, 2));
      v25 = 138412290;
      v26 = v24;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to add policy for ApplicationServiceBrowse exception: %@", (uint8_t *)&v25, 0xCu);

    }
  }

  return v13 != 0;
}

uint64_t sub_100055DB0(void *a1, unsigned int *a2, void *a3, void *a4, uint64_t a5, int a6, void *a7)
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  _UNKNOWN **v15;
  uint64_t v16;
  void *i;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  unsigned int v23;
  unsigned int v24;
  void *v25;
  unsigned __int16 v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  const __CFString *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v51;
  id v52;
  id obj;
  id v56;
  void *v57;
  void *v58;
  void *v60;
  unsigned int v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  unsigned __int8 v66;
  uint8_t buf[4];
  const char *v68;
  __int16 v69;
  void *v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  void *v74;
  __int16 v75;
  void *v76;
  __int16 v77;
  const __CFString *v78;
  _BYTE v79[128];

  v10 = a3;
  v56 = a4;
  v11 = a7;
  if (a1)
  {
    if (objc_msgSend(v10, "count"))
    {
      v58 = v11;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "allKeys"));
      v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v79, 16);
      if (v12)
      {
        v13 = v12;
        v60 = 0;
        v14 = 0;
        v15 = &AnalyticsSendEventLazy_ptr;
        v16 = *(_QWORD *)v63;
        v51 = *(_QWORD *)v63;
        v52 = v10;
        v57 = a1;
        while (2)
        {
          for (i = 0; i != v13; i = (char *)i + 1)
          {
            if (*(_QWORD *)v63 != v16)
              objc_enumerationMutation(obj);
            v18 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * (_QWORD)i);
            v19 = objc_msgSend(v15[180], "copyUUIDsForBundleID:uid:", v18, 0);
            v21 = v19;
            if (v19 && (v19 = objc_msgSend(v19, "count")) != 0)
            {
              v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v18));
              v23 = *a2;
              v61 = *a2;
              v24 = -[NSObject isLimitedToUDP](v22, "isLimitedToUDP");
              if (v24)
              {
                *(_DWORD *)buf = v23 - 1;
                v25 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v23 + 1));

                v11 = v58;
                if (!sub_100054AEC(a1, (unsigned int *)buf, 1, v25, v58)
                  || !sub_100054AEC(a1, (unsigned int *)buf, 0, v25, v58))
                {
                  v66 = 0;
LABEL_48:

                  goto LABEL_49;
                }
                v26 = 17;
                v14 = v25;
              }
              else
              {
                v26 = 0;
              }
              if (a5 == 200)
                v28 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 0));
              else
                v28 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](NEPolicyResult, "pass"));
              v25 = (void *)v28;

              if (a6)
              {
                v29 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", &unk_10009EF93);
                v30 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult removeNetworkAgentUUID:](NEPolicyResult, "removeNetworkAgentUUID:", v29));

                v60 = (void *)v30;
              }
              else
              {
                v29 = v60;
                v60 = 0;
              }

              v33 = ne_log_obj(v31, v32);
              v34 = objc_claimAutoreleasedReturnValue(v33);
              if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136316162;
                v68 = "-[NEPolicySession(AlwaysOnVPN) addApplicationExceptionWithOrder:applicationExceptions:delegateInte"
                      "rfaceName:priority:isAOVPN:policyIDList:]";
                v69 = 2112;
                v70 = v25;
                v71 = 2048;
                v72 = a5;
                v73 = 2112;
                v74 = v18;
                v75 = 2112;
                v76 = v21;
                _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "%s: Adding %@ Exceptions policy <priority %ld> for %@, UUIDs %@", buf, 0x34u);
              }

              v11 = v58;
              v35 = sub_100054374(v57, &v61, 0, v21, 0, v56, v18, v26, v24 ^ 1, v25, v60, v58);
              if ((v35 & 1) == 0)
              {
                v45 = ne_log_obj(v35, v36);
                v46 = objc_claimAutoreleasedReturnValue(v45);
                if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315906;
                  v68 = "-[NEPolicySession(AlwaysOnVPN) addApplicationExceptionWithOrder:applicationExceptions:delegateIn"
                        "terfaceName:priority:isAOVPN:policyIDList:]";
                  v69 = 2112;
                  v70 = v25;
                  v71 = 2048;
                  v72 = a5;
                  v73 = 2112;
                  v74 = v18;
                  _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "%s: Failed to add %@ policy <priority %ld> for %@", buf, 0x2Au);
                }

                v66 = 0;
                v10 = v52;
                goto LABEL_48;
              }
              if (a5 == 200)
              {
                v37 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult scopeSocketToInterfaceName:](NEPolicyResult, "scopeSocketToInterfaceName:", v56));

                v40 = ne_log_obj(v38, v39);
                v41 = objc_claimAutoreleasedReturnValue(v40);
                if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 136316418;
                  v42 = CFSTR("<Any>");
                  if (v24)
                    v42 = CFSTR("UDP");
                  v68 = "-[NEPolicySession(AlwaysOnVPN) addApplicationExceptionWithOrder:applicationExceptions:delegateIn"
                        "terfaceName:priority:isAOVPN:policyIDList:]";
                  v69 = 2112;
                  v70 = v37;
                  v71 = 2048;
                  v72 = 200;
                  v73 = 2112;
                  v74 = v18;
                  v75 = 2112;
                  v76 = v21;
                  v77 = 2112;
                  v78 = v42;
                  _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "%s: Adding %@ Exceptions policy <priority %ld> for %@, UUIDs %@ - %@ protocol", buf, 0x3Eu);
                }

                a1 = v57;
                v43 = sub_100054374(v57, &v61, 0, v21, 0, 0, v18, v26, v24 ^ 1, v37, v60, v58);
                v16 = v51;
                if ((v43 & 1) == 0)
                {
                  v47 = ne_log_obj(v43, v44);
                  v48 = objc_claimAutoreleasedReturnValue(v47);
                  v10 = v52;
                  if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315906;
                    v68 = "-[NEPolicySession(AlwaysOnVPN) addApplicationExceptionWithOrder:applicationExceptions:delegate"
                          "InterfaceName:priority:isAOVPN:policyIDList:]";
                    v69 = 2112;
                    v70 = v37;
                    v71 = 2048;
                    v72 = 200;
                    v73 = 2112;
                    v74 = v18;
                    _os_log_error_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "%s: Failed to add %@ policy <priority %ld> for %@", buf, 0x2Au);
                  }

                  v66 = 0;
                  v25 = v37;
                  v11 = v58;
                  goto LABEL_48;
                }
                v25 = v37;
                v10 = v52;
              }
              else
              {
                v16 = v51;
                v10 = v52;
                a1 = v57;
              }
              v14 = v25;
              v15 = &AnalyticsSendEventLazy_ptr;
            }
            else
            {
              v27 = ne_log_obj(v19, v20);
              v22 = objc_claimAutoreleasedReturnValue(v27);
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                v68 = "-[NEPolicySession(AlwaysOnVPN) addApplicationExceptionWithOrder:applicationExceptions:delegateInte"
                      "rfaceName:priority:isAOVPN:policyIDList:]";
                v69 = 2112;
                v70 = v18;
                _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "%s: Application %@ does not exist, may have been uninstalled", buf, 0x16u);
              }
            }

          }
          v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v79, 16);
          if (v13)
            continue;
          break;
        }
      }
      else
      {
        v60 = 0;
        v14 = 0;
      }

      v66 = 1;
      v11 = v58;
    }
    else
    {
      v66 = 0;
    }
LABEL_49:
    v49 = v66;
  }
  else
  {
    v49 = 0;
  }

  return v49;
}

BOOL sub_100056494(void *a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  char *v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  NSObject *v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t is_debug_logging_enabled;
  int v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  NSObject *v38;
  _BOOL4 v39;
  char *v40;
  void *v41;
  void *v42;
  unsigned int *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  char *v49;
  _QWORD v50[2];
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  id v54;
  __int16 v55;
  int v56;
  _QWORD v57[3];

  v9 = a5;
  if (!a1)
  {
    v27 = 0;
    goto LABEL_41;
  }
  if (a4 == 400 || a4 == 100)
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](NEPolicyResult, "pass"));
  else
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", a3));
  v11 = v10;
  v12 = v10;
  if (a4 != 100 && a4 != 400)
  {

    goto LABEL_17;
  }

  if (a4 != 100)
  {
LABEL_17:
    v28 = ne_log_obj(v13, v14);
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      v52 = "-[NEPolicySession(AlwaysOnVPN) addLocalNetworksExceptionWithOrder:skipOrder:priority:policyIDList:]";
      v53 = 2112;
      v54 = v12;
      v55 = 1024;
      v56 = a4;
      _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "%s: Adding policy %@ for local networks (priority %d)", buf, 0x1Cu);
    }

    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition localNetworksWithFlags:](NEPolicyCondition, "localNetworksWithFlags:", 1));
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces", v30));
    v50[1] = v31;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v50, 2));

    v25 = (char *)objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *a2, v12, v24);
    v32 = objc_msgSend(a1, "addPolicy:", v25);
    is_debug_logging_enabled = nelog_is_debug_logging_enabled();
    v34 = is_debug_logging_enabled;
    v36 = ne_log_obj(is_debug_logging_enabled, v35);
    v37 = objc_claimAutoreleasedReturnValue(v36);
    v38 = v37;
    if (v32)
    {
      if (v34)
      {
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v52 = v25;
          _os_log_debug_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "Added local networks policy: %@", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        v40 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "descriptionWithIndent:options:", 0, 2));
        *(_DWORD *)buf = 138412290;
        v52 = v40;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "Added local networks policy: %@", buf, 0xCu);

      }
      if (v9)
      {
        v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v32));
        objc_msgSend(v9, "addObject:", v41);

        ++*a2;
        v42 = a1;
        v43 = a2;
        v44 = v12;
        v45 = v9;
      }
      else
      {
        ++*a2;
        v42 = a1;
        v43 = a2;
        v44 = v12;
        v45 = 0;
      }
      v27 = sub_100055AE4(v42, v43, v44, v45);
      goto LABEL_40;
    }
    v39 = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
    if (v34)
    {
      if (v39)
      {
        *(_DWORD *)buf = 138412290;
        v52 = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Failed to add policy for local networks: %@", buf, 0xCu);
      }
    }
    else if (v39)
    {
      v49 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "descriptionWithIndent:options:", 0, 2));
      *(_DWORD *)buf = 138412290;
      v52 = v49;
      _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Failed to add policy for local networks: %@", buf, 0xCu);

    }
    goto LABEL_39;
  }
  v15 = ne_log_obj(v13, v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v52 = "-[NEPolicySession(AlwaysOnVPN) addLocalNetworksExceptionWithOrder:skipOrder:priority:policyIDList:]";
    _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%s: Adding pass policy for Bonjour traffic", buf, 0xCu);
  }

  v17 = sub_100055294(a1, a2);
  if (!(_DWORD)v17)
  {
    v27 = 0;
    v25 = 0;
    v24 = 0;
    goto LABEL_40;
  }
  v19 = ne_log_obj(v17, v18);
  v20 = objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v52 = "-[NEPolicySession(AlwaysOnVPN) addLocalNetworksExceptionWithOrder:skipOrder:priority:policyIDList:]";
    _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%s: adding policy for TCP listeners", buf, 0xCu);
  }

  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
  v57[0] = v21;
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", 6));
  v57[1] = v22;
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition isListener](NEPolicyCondition, "isListener"));
  v57[2] = v23;
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v57, 3));

  v25 = (char *)objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *a2, v12, v24);
  if (!objc_msgSend(a1, "addPolicy:", v25))
  {
    v46 = ne_log_obj(0, v26);
    v47 = objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v52 = "-[NEPolicySession(AlwaysOnVPN) addLocalNetworksExceptionWithOrder:skipOrder:priority:policyIDList:]";
      _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "%s: failed to add policy for TCP listeners", buf, 0xCu);
    }

LABEL_39:
    v27 = 0;
    goto LABEL_40;
  }
  ++*a2;
  v27 = 1;
LABEL_40:

LABEL_41:
  return v27;
}

uint64_t sub_100056A58(void *a1, unsigned int *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  char *v25;
  id v26;
  uint64_t is_debug_logging_enabled;
  int v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  _BOOL4 v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  void *v42;
  id v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  NSObject *v49;
  _BOOL4 v50;
  char *v51;
  char *v53;
  char *v54;
  void *v55;
  _QWORD v56[3];
  uint8_t buf[4];
  const char *v58;
  __int16 v59;
  void *v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  int v64;
  _QWORD v65[3];

  if (!a1)
    return 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](NEPolicyResult, "pass"));
  v6 = ne_log_obj(v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v58 = "-[NEPolicySession(AlwaysOnVPN) addDeviceCommunicationExceptionWithOrder:]";
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s: Adding pass policy for Bonjour traffic", buf, 0xCu);
  }

  v8 = sub_100055294(a1, a2);
  if ((_DWORD)v8)
  {
    v10 = ne_log_obj(v8, v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v58 = "-[NEPolicySession(AlwaysOnVPN) addDeviceCommunicationExceptionWithOrder:]";
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s: Adding policy for TCP listeners", buf, 0xCu);
    }

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    v65[0] = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", 6));
    v65[1] = v13;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition isListener](NEPolicyCondition, "isListener"));
    v65[2] = v14;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v65, 3));

    v16 = (char *)objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *a2, v4, v15);
    v17 = objc_msgSend(a1, "addPolicy:", v16);
    if (v17)
    {
      ++*a2;
      v19 = ne_log_obj(v17, v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315906;
        v58 = "-[NEPolicySession(AlwaysOnVPN) addDeviceCommunicationExceptionWithOrder:]";
        v59 = 2112;
        v60 = v4;
        v61 = 2080;
        v62 = "com.apple.remotepairing.devicecommunication";
        v63 = 1024;
        v64 = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%s: Adding policy %@ for account id %s (priority %d)", buf, 0x26u);
      }

      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
      v56[0] = v21;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](NEPolicyCondition, "entitlement"));
      v56[1] = v22;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition accountIdentifier:](NEPolicyCondition, "accountIdentifier:", CFSTR("com.apple.remotepairing.devicecommunication")));
      v56[2] = v23;
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v56, 3));

      v25 = (char *)objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *a2, v4, v24);
      v26 = objc_msgSend(a1, "addPolicy:", v25);
      is_debug_logging_enabled = nelog_is_debug_logging_enabled();
      v28 = is_debug_logging_enabled;
      v30 = ne_log_obj(is_debug_logging_enabled, v29);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      v32 = v31;
      if (!v26)
      {
        v36 = os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
        if (v28)
        {
          if (v36)
          {
            *(_DWORD *)buf = 138412290;
            v58 = v25;
            _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Failed to add policy for DeviceCommunication account id: %@", buf, 0xCu);
          }
        }
        else if (v36)
        {
          v53 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "descriptionWithIndent:options:", 0, 2));
          *(_DWORD *)buf = 138412290;
          v58 = v53;
          _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Failed to add policy for DeviceCommunication account id: %@", buf, 0xCu);

        }
        v33 = 0;
        v16 = v25;
        v15 = v24;
        goto LABEL_42;
      }
      if (v28)
      {
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v58 = v25;
          _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "Added DeviceCommunication account id policy: %@", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        v37 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "descriptionWithIndent:options:", 0, 2));
        *(_DWORD *)buf = 138412290;
        v58 = v37;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Added DeviceCommunication account id policy: %@", buf, 0xCu);

      }
      ++*a2;
      v40 = ne_log_obj(v38, v39);
      v41 = objc_claimAutoreleasedReturnValue(v40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v58 = "-[NEPolicySession(AlwaysOnVPN) addDeviceCommunicationExceptionWithOrder:]";
        v59 = 2112;
        v60 = v4;
        _os_log_debug_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "%s: Adding policy %@ for DeviceCommunication DIRECTLINK interfaces", buf, 0x16u);
      }

      v42 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterfaceFlags:eflags:xflags:](NEPolicyCondition, "scopedInterfaceFlags:eflags:xflags:", 0, 0x20000000, 0));
      v55 = v42;
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v55, 1));

      v16 = (char *)objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", *a2, v4, v15);
      v43 = objc_msgSend(a1, "addPolicy:", v16);
      v44 = nelog_is_debug_logging_enabled();
      v45 = v44;
      v47 = ne_log_obj(v44, v46);
      v48 = objc_claimAutoreleasedReturnValue(v47);
      v49 = v48;
      if (v43)
      {
        if (v45)
        {
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138412290;
            v58 = v16;
            _os_log_debug_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "Added DeviceCommunication DIRECTLINK policy: %@", buf, 0xCu);
          }
        }
        else if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
        {
          v51 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "descriptionWithIndent:options:", 0, 2));
          *(_DWORD *)buf = 138412290;
          v58 = v51;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "Added DeviceCommunication DIRECTLINK policy: %@", buf, 0xCu);

        }
        ++*a2;
        v33 = 1;
        goto LABEL_42;
      }
      v50 = os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
      if (v45)
      {
        if (v50)
        {
          *(_DWORD *)buf = 138412290;
          v58 = v16;
          _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "Failed to add policy for DeviceCommunication DIRECTLINK: %@", buf, 0xCu);
        }
      }
      else if (v50)
      {
        v54 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "descriptionWithIndent:options:", 0, 2));
        *(_DWORD *)buf = 138412290;
        v58 = v54;
        _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "Failed to add policy for DeviceCommunication DIRECTLINK: %@", buf, 0xCu);

      }
    }
    else
    {
      v34 = ne_log_obj(0, v18);
      v35 = objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v58 = "-[NEPolicySession(AlwaysOnVPN) addDeviceCommunicationExceptionWithOrder:]";
        _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%s: failed to add policy for TCP listeners", buf, 0xCu);
      }

    }
    v33 = 0;
LABEL_42:

    goto LABEL_43;
  }
  v33 = 0;
LABEL_43:

  return v33;
}

uint64_t sub_1000571D8(void *a1, unsigned int *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void *i;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  _BYTE v44[128];

  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  if (v14)
  {
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v19 = v14;
    v30 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
    if (v30)
    {
      v20 = *(_QWORD *)v40;
      v33 = v14;
      v34 = v13;
      v32 = v19;
      v29 = *(_QWORD *)v40;
      do
      {
        v21 = 0;
        do
        {
          if (*(_QWORD *)v40 != v20)
            objc_enumerationMutation(v19);
          v31 = v21;
          v22 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * v21);
          v35 = 0u;
          v36 = 0u;
          v37 = 0u;
          v38 = 0u;
          v23 = v13;
          v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
          if (v24)
          {
            v25 = v24;
            v26 = *(_QWORD *)v36;
            while (2)
            {
              for (i = 0; i != v25; i = (char *)i + 1)
              {
                if (*(_QWORD *)v36 != v26)
                  objc_enumerationMutation(v23);
                if ((sub_100053380(a1, a2, *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i), v22, 1, 0, 0, 0, 0, 0, 0, 0, 0, v15, v16, 0, v17, 1) & 1) == 0)
                {

                  v18 = 0;
                  v14 = v33;
                  v13 = v34;
                  v19 = v32;
                  goto LABEL_21;
                }
              }
              v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
              if (v25)
                continue;
              break;
            }
          }

          v21 = v31 + 1;
          v14 = v33;
          v13 = v34;
          v19 = v32;
          v20 = v29;
        }
        while ((id)(v31 + 1) != v30);
        v18 = 1;
        v30 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
      }
      while (v30);
    }
    else
    {
      v18 = 1;
    }
LABEL_21:

  }
  else
  {
    v18 = 0;
  }

  return v18;
}

id sub_100057438(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  objc_opt_self(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "alwaysOnVPN"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "serviceExceptions"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("CellularServices")));

  if (v6)
    v7 = objc_msgSend(v6, "action");
  else
    v7 = 0;

  return v7;
}

id sub_1000574CC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  objc_opt_self(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "alwaysOnVPN"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "serviceExceptions"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("VoiceMail")));

  if (v6)
    v7 = objc_msgSend(v6, "action");
  else
    v7 = 0;

  return v7;
}

uint64_t sub_100057560(void *a1, unsigned int *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  __int16 v12[8];

  if (a4)
    v5 = 400;
  else
    v5 = 100;
  v6 = sub_1000575F4(a1, a2, a3, v5, 0, a5, 0);
  v8 = v6;
  if ((v6 & 1) == 0)
  {
    v9 = ne_log_obj(v6, v7);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v12[0] = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to handle CellularServices exception - Control policies", (uint8_t *)v12, 2u);
    }

  }
  return v8;
}

uint64_t sub_1000575F4(void *a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5, int a6, void *a7)
{
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  NSObject *v46;
  void *v47;
  uint64_t v48;
  NSObject *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  NSObject *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v77;
  id v78;
  id v79;
  void *v80;
  void *v81;
  id v82;
  id v83;
  void *v84;
  unsigned __int8 v85;
  uint8_t buf[4];
  _BYTE v87[18];
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  const __CFString *v91;
  id v92;
  id v93;

  v13 = a5;
  v14 = a7;
  v16 = v14;
  if (a3)
  {
    if (a3 == 2)
    {
      v19 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyResult drop](NEPolicyResult, "drop"));
      goto LABEL_15;
    }
    if (a3 == 1)
    {
      if (a4 == 400 || a4 == 100)
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](NEPolicyResult, "pass"));
      else
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 0));
      v22 = v17;
      v19 = v17;

      if (a6)
      {
        v23 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", &unk_10009EF93);
        v24 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult removeNetworkAgentUUID:](NEPolicyResult, "removeNetworkAgentUUID:", v23));

        goto LABEL_16;
      }
LABEL_15:
      v24 = 0;
LABEL_16:
      v25 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter"));
      v27 = v25;
      if (!v25)
      {
        v41 = ne_log_obj(0, v26);
        v42 = objc_claimAutoreleasedReturnValue(v41);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)v87 = "/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter";
          _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Failed to get UUIDs for %s daemon", buf, 0xCu);
        }

        v85 = 0;
        goto LABEL_72;
      }
      v84 = v25;
      v29 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/Applications/InCallService.app/InCallService"));
      if (!v29)
      {
        v43 = ne_log_obj(0, v28);
        v44 = objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)v87 = "/Applications/InCallService.app/InCallService";
          _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "Failed to get UUIDs for %s daemon", buf, 0xCu);
        }

        v85 = 0;
        v38 = 0;
        v27 = v84;
        goto LABEL_71;
      }
      v83 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenterMobileHelper"));
      if (!v83)
      {
        v45 = ne_log_obj(0, v30);
        v46 = objc_claimAutoreleasedReturnValue(v45);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)v87 = "/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenterMobileHelper";
          _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "Failed to get UUIDs for %s daemon", buf, 0xCu);
        }

        v85 = 0;
        v38 = v29;
        v47 = 0;
        v27 = v84;
        goto LABEL_70;
      }
      v82 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/System/Library/PrivateFrameworks/GeoServices.framework/geod"));
      if (!v82)
      {
        v48 = ne_log_obj(0, v31);
        v49 = objc_claimAutoreleasedReturnValue(v48);
        v47 = v83;
        if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)v87 = "/System/Library/PrivateFrameworks/GeoServices.framework/geod";
          _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "Failed to get UUIDs for %s daemon", buf, 0xCu);
        }

        v85 = 0;
        v38 = v29;
        v27 = v84;
        v50 = 0;
        goto LABEL_69;
      }
      v79 = +[NEProcessInfo copyNEHelperUUIDs](NEProcessInfo, "copyNEHelperUUIDs");
      v32 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("67A03811-DB0A-594E-C2AE-8B0517EDF26F"));
      v93 = v32;
      v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v93, 1));

      v33 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("569F2700-CAF9-483D-B19D-7AF406DCE15E"));
      v92 = v33;
      v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v92, 1));

      v34 = +[NEProcessInfo copyDNSUUIDs](NEProcessInfo, "copyDNSUUIDs");
      if (!v34)
      {
        v85 = 0;
        v38 = v29;
        v47 = v83;
        v27 = v84;
        v50 = v82;
LABEL_68:

LABEL_69:
LABEL_70:

LABEL_71:
LABEL_72:

        v18 = v85;
        goto LABEL_73;
      }
      v78 = v34;
      v36 = ne_log_obj(v34, v35);
      v37 = objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)v87 = "-[NEPolicySession(AlwaysOnVPN) addCellularServicesExceptionPoliciesWithOrder:action:useIPSec:pr"
                         "iority:primaryPhysicalInterface:isAOVPN:policyIDList:]";
        *(_WORD *)&v87[8] = 2112;
        *(_QWORD *)&v87[10] = v19;
        v88 = 2048;
        v89 = a4;
        v90 = 2112;
        v91 = CFSTR("CellularServices");
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "%s: Adding %@ <priority %ld> Exceptions policy for %@", buf, 0x2Au);
      }

      if (a4 == 100)
      {
        v38 = v29;
        v39 = sub_100054014(a1, a2, 1, 0, v29, 1, 0, 0, 0, 0, 0, v19, v24, 0, v16);
        if ((v39 & 1) != 0)
        {
          v85 = 1;
LABEL_52:
          v27 = v84;
LABEL_66:
          v50 = v82;
          v47 = v83;
          goto LABEL_67;
        }
        v65 = ne_log_obj(v39, v40);
        v66 = objc_claimAutoreleasedReturnValue(v65);
        v47 = v83;
        v27 = v84;
        v50 = v82;
        if (!os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
          goto LABEL_48;
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)v87 = v19;
        *(_WORD *)&v87[8] = 2112;
        *(_QWORD *)&v87[10] = CFSTR("CellularServices");
        v74 = "Failed to add %@ policy for %@ (InCallService/InCallService)";
        goto LABEL_60;
      }
      v51 = sub_100054014(a1, a2, 1, v81, v84, 1, 0, 0, 0, 0, 0, v19, v24, 0, v16);
      v38 = v29;
      if ((v51 & 1) == 0)
      {
        v67 = ne_log_obj(v51, v52);
        v68 = objc_claimAutoreleasedReturnValue(v67);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)v87 = v19;
          *(_WORD *)&v87[8] = 2112;
          *(_QWORD *)&v87[10] = CFSTR("CellularServices");
          _os_log_error_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "Failed to add %@ policy for %@ (CommCenter/IMS)", buf, 0x16u);
        }

        v85 = 0;
        goto LABEL_52;
      }
      v53 = sub_100054014(a1, a2, 1, v80, v84, 1, 0, 0, 0, 0, 0, v19, v24, 0, v16);
      v27 = v84;
      if ((v53 & 1) != 0)
      {
        v55 = sub_1000571D8(a1, a2, v84, v79, v19, v24, v16);
        if ((v55 & 1) != 0)
        {
          v57 = sub_100054374(a1, a2, 1, v81, 1, 0, 0, 0, 0, v19, v24, v16);
          if ((v57 & 1) != 0)
          {
            if (v13)
            {
              v59 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v13, 1));

              v47 = v83;
              v60 = sub_100054014(a1, a2, 1, 0, v83, 1, 0, 0, v13, 0, 0, v59, v24, 1, v16);
              v19 = v59;
              if ((v60 & 1) != 0)
              {
LABEL_45:
                v62 = a1;
                v50 = v82;
                v63 = sub_100054014(v62, a2, 1, v47, v82, 1, 0, 0, v13, 0, CFSTR("com.apple.GeoServices.CountryCode"), v19, v24, 1, v16);
                if ((v63 & 1) != 0)
                {
                  v85 = 1;
LABEL_67:
                  v34 = v78;
                  goto LABEL_68;
                }
                v77 = ne_log_obj(v63, v64);
                v66 = objc_claimAutoreleasedReturnValue(v77);
                if (!os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
                {
LABEL_48:

                  v85 = 0;
                  goto LABEL_67;
                }
                *(_DWORD *)buf = 138412546;
                *(_QWORD *)v87 = v19;
                *(_WORD *)&v87[8] = 2112;
                *(_QWORD *)&v87[10] = CFSTR("CellularServices");
                v74 = "Failed to add %@ policy for %@ (geod/CommCenterMobileHelper)";
LABEL_60:
                _os_log_error_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, v74, buf, 0x16u);
                goto LABEL_48;
              }
            }
            else
            {
              v47 = v83;
              v60 = sub_100054014(a1, a2, 1, 0, v83, 1, 0, 0, 0, 0, 0, v19, v24, 1, v16);
              if ((v60 & 1) != 0)
                goto LABEL_45;
            }
            v75 = ne_log_obj(v60, v61);
            v70 = objc_claimAutoreleasedReturnValue(v75);
            if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              *(_QWORD *)v87 = v19;
              *(_WORD *)&v87[8] = 2112;
              *(_QWORD *)&v87[10] = CFSTR("CellularServices");
              v71 = "Failed to add %@ policy for %@ (CommCenterMobileHelper/IMS)";
              goto LABEL_64;
            }
LABEL_65:

            v85 = 0;
            goto LABEL_66;
          }
          v73 = ne_log_obj(v57, v58);
          v70 = objc_claimAutoreleasedReturnValue(v73);
          if (!os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
            goto LABEL_65;
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)v87 = v19;
          *(_WORD *)&v87[8] = 2112;
          *(_QWORD *)&v87[10] = CFSTR("CellularServices");
          v71 = "Failed to add %@ policy for %@ (IMSUUIDs as effective UUIDs)";
        }
        else
        {
          v72 = ne_log_obj(v55, v56);
          v70 = objc_claimAutoreleasedReturnValue(v72);
          if (!os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
            goto LABEL_65;
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)v87 = v19;
          *(_WORD *)&v87[8] = 2112;
          *(_QWORD *)&v87[10] = CFSTR("CellularServices");
          v71 = "Failed to add %@ policy for %@ (NEHelper/CommCenter)";
        }
      }
      else
      {
        v69 = ne_log_obj(v53, v54);
        v70 = objc_claimAutoreleasedReturnValue(v69);
        if (!os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
          goto LABEL_65;
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)v87 = v19;
        *(_WORD *)&v87[8] = 2112;
        *(_QWORD *)&v87[10] = CFSTR("CellularServices");
        v71 = "Failed to add %@ policy for %@ (CommCenter/MMS)";
      }
LABEL_64:
      _os_log_error_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, v71, buf, 0x16u);
      goto LABEL_65;
    }
    v20 = ne_log_obj(v14, v15);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)v87 = a3;
      *(_WORD *)&v87[4] = 2112;
      *(_QWORD *)&v87[6] = CFSTR("CellularServices");
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Invalid action %d for %@", buf, 0x12u);
    }

    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
LABEL_73:

  return v18;
}

uint64_t sub_100058040(void *a1, unsigned int *a2, uint64_t a3, void *a4, int a5, void *a6)
{
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint8_t v19[16];

  v11 = a4;
  v12 = a6;
  if (!a1)
  {
LABEL_7:
    v15 = 0;
    goto LABEL_8;
  }
  v13 = sub_1000575F4(a1, a2, a3, 200, v11, a5, v12);
  if ((v13 & 1) == 0)
  {
    v16 = ne_log_obj(v13, v14);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v19 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to handle CellularServices exception - Data policies", v19, 2u);
    }

    goto LABEL_7;
  }
  v15 = 1;
LABEL_8:

  return v15;
}

BOOL sub_10005811C(void *a1, void *a2, unsigned int *a3, int a4, char a5, void *a6, void *a7, int a8, void *a9, unsigned __int8 a10, unsigned __int8 a11)
{
  id v16;
  id v17;
  __CFString *v18;
  __CFString *v19;
  uint64_t v20;
  __CFString *v21;
  id v22;
  void *v23;
  int v24;
  const __CFString *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  __CFString *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  id v33;
  uint64_t v34;
  __CFString *v35;
  __CFString *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  __CFString *v45;
  __CFString *v46;
  id v47;
  __CFString *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  __CFString *v54;
  id v55;
  id v56;
  uint64_t v57;
  void *i;
  id v59;
  char v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  __CFString *v67;
  id v68;
  void *v69;
  uint64_t v70;
  NSObject *v71;
  const char *v72;
  uint64_t v73;
  __CFString *v74;
  id v75;
  id v76;
  __CFString *v77;
  id v78;
  id v79;
  void *v80;
  void *j;
  void *v82;
  void *v83;
  id v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  uint64_t v100;
  NSObject *v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  int v105;
  __CFString *v106;
  id v107;
  id v108;
  __CFString *v109;
  __CFString *v110;
  __CFString *v111;
  __CFString *v112;
  __CFString *obj;
  __CFString *obja;
  void *v115;
  void *v116;
  __CFString *v117;
  id v118;
  id v119;
  __CFString *v120;
  id v121;
  __CFString *v122;
  void *v123;
  int v124;
  void *v125;
  __CFString *v127;
  uint64_t v128;
  BOOL v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _QWORD v139[4];
  __int128 v140;
  __int128 v141;
  int buf;
  const char *v143;
  __int16 v144;
  const __CFString *v145;
  __int16 v146;
  const __CFString *v147;

  v16 = a2;
  v17 = a6;
  v18 = a7;
  v19 = a9;
  v21 = v19;
  v125 = a1;
  if (!a1)
  {
    v130 = 0;
    goto LABEL_96;
  }
  if (v18)
  {
    if (a8)
    {
LABEL_4:
      v22 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", &unk_10009EF93);
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult removeNetworkAgentUUID:](NEPolicyResult, "removeNetworkAgentUUID:", v22));

      goto LABEL_7;
    }
  }
  else
  {
    v19 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](NEPolicyResult, "pass"));
    v18 = v19;
    if (a8)
      goto LABEL_4;
  }
  v23 = 0;
LABEL_7:
  v24 = a10;
  if (!a4)
    goto LABEL_51;
  v25 = (const __CFString *)+[NEProcessInfo copyUUIDsForBundleID:uid:](NEProcessInfo, "copyUUIDsForBundleID:uid:", CFSTR("com.apple.WebSheet"), 0);
  v27 = ne_log_obj(v25, v26);
  v28 = objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    buf = 136315650;
    v143 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allowAllC"
           "aptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
    v144 = 2112;
    v145 = CFSTR("com.apple.WebSheet");
    v146 = 2112;
    v147 = v25;
    _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "%s: UUIDs for %@ - %@", (uint8_t *)&buf, 0x20u);
  }
  v127 = (__CFString *)v25;

  v29 = (__CFString *)+[NEProcessInfo copyUUIDsForBundleID:uid:](NEProcessInfo, "copyUUIDsForBundleID:uid:", CFSTR("com.apple.WebKit.Networking"), 0);
  v31 = ne_log_obj(v29, v30);
  v32 = objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    buf = 136315650;
    v143 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allowAllC"
           "aptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
    v144 = 2112;
    v145 = CFSTR("com.apple.WebKit.Networking");
    v146 = 2112;
    v147 = v29;
    _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "%s: UUIDs for %@ - %@", (uint8_t *)&buf, 0x20u);
  }
  v118 = v16;

  if (v29 && (v33 = -[__CFString count](v29, "count")) != 0)
  {
    v35 = v29;
    v36 = v127;
    if (!v127)
      goto LABEL_40;
  }
  else
  {
    v35 = (__CFString *)+[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/System/Library/Frameworks/WebKit.framework/XPCServices/com.apple.WebKit.Networking.xpc/com.apple.WebKit.Networking"));

    v39 = ne_log_obj(v37, v38);
    v40 = objc_claimAutoreleasedReturnValue(v39);
    v36 = v127;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
    {
      buf = 136315650;
      v143 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allowAl"
             "lCaptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
      v144 = 2112;
      v145 = CFSTR("/System/Library/Frameworks/WebKit.framework/XPCServices/com.apple.WebKit.Networking.xpc/com.apple.WebKit.Networking");
      v146 = 2112;
      v147 = v35;
      _os_log_debug_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "%s: UUIDs for %@ - %@", (uint8_t *)&buf, 0x20u);
    }

    if (!v127)
      goto LABEL_40;
  }
  if (v35)
  {
    v122 = v35;
    v41 = ne_log_obj(v33, v34);
    v42 = objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      buf = 136315650;
      v143 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allowAl"
             "lCaptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
      v144 = 2112;
      v145 = v18;
      v146 = 2112;
      v147 = CFSTR("com.apple.WebSheet");
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "%s: Adding %@ policy for %@", (uint8_t *)&buf, 0x20u);
    }

    v36 = v127;
    v43 = sub_100054014(v125, a3, a10, 0, v127, a11, 0, 0, 0, 1, 0, v18, v23, 0, v21);
    if ((v43 & 1) == 0)
    {
      v61 = ne_log_obj(v43, v44);
      v62 = objc_claimAutoreleasedReturnValue(v61);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        buf = 136315650;
        v143 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allow"
               "AllCaptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
        v144 = 2112;
        v145 = v18;
        v146 = 2112;
        v147 = CFSTR("com.apple.WebSheet");
        _os_log_error_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "%s: Failed to add %@ policy for %@", (uint8_t *)&buf, 0x20u);
      }

      v130 = 0;
      goto LABEL_44;
    }
    v107 = v17;
    v105 = a8;
    v120 = v127;
    v45 = v35;
    v46 = v18;
    v115 = v23;
    v47 = v23;
    v48 = v21;
    v49 = +[NEProcessInfo copyDNSUUIDs](NEProcessInfo, "copyDNSUUIDs");
    v117 = v45;
    if (v49)
    {
      v140 = 0u;
      v141 = 0u;
      memset(v139, 0, sizeof(v139));
      obj = v45;
      v103 = -[__CFString countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", v139, &buf, 16);
      if (v103)
      {
        v50 = *(_QWORD *)v139[2];
        v109 = v21;
        v111 = v18;
        v102 = *(_QWORD *)v139[2];
        do
        {
          v51 = 0;
          do
          {
            if (*(_QWORD *)v139[2] != v50)
            {
              v52 = v51;
              objc_enumerationMutation(obj);
              v51 = v52;
            }
            v104 = v51;
            v53 = *(void **)(v139[1] + 8 * v51);
            v131 = 0u;
            v132 = 0u;
            v133 = 0u;
            v134 = 0u;
            v54 = v120;
            v55 = -[__CFString countByEnumeratingWithState:objects:count:](v54, "countByEnumeratingWithState:objects:count:", &v131, &v135, 16);
            if (v55)
            {
              v56 = v55;
              v57 = *(_QWORD *)v132;
              while (2)
              {
                for (i = 0; i != v56; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v132 != v57)
                    objc_enumerationMutation(v54);
                  if ((sub_100053380(v125, a3, *(void **)(*((_QWORD *)&v131 + 1) + 8 * (_QWORD)i), v53, a11, 0, 0, v49, 0, 0, 0, 1, 0, v46, v47, 0, v48, a10) & 1) == 0)
                  {

                    v60 = 0;
                    v16 = v118;
                    v17 = v107;
                    v21 = v109;
                    v18 = v111;
                    goto LABEL_48;
                  }
                }
                v56 = -[__CFString countByEnumeratingWithState:objects:count:](v54, "countByEnumeratingWithState:objects:count:", &v131, &v135, 16);
                if (v56)
                  continue;
                break;
              }
            }

            v51 = v104 + 1;
            v16 = v118;
            v17 = v107;
            v21 = v109;
            v18 = v111;
            v50 = v102;
          }
          while ((id)(v104 + 1) != v103);
          v59 = -[__CFString countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", v139, &buf, 16);
          v50 = v102;
          v60 = 1;
          v103 = v59;
        }
        while (v59);
      }
      else
      {
        v60 = 1;
        v17 = v107;
      }
LABEL_48:

    }
    else
    {
      v60 = 0;
      v17 = v107;
    }

    if ((v60 & 1) == 0)
    {
      v100 = ne_log_obj(v63, v64);
      v101 = objc_claimAutoreleasedReturnValue(v100);
      v23 = v115;
      if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
      {
        buf = 136315650;
        v143 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allow"
               "AllCaptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
        v144 = 2112;
        v145 = v46;
        v146 = 2112;
        v147 = CFSTR("com.apple.WebSheet");
        _os_log_error_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_ERROR, "%s: Failed to add %@ com.apple.WebKit.Networking policy for %@", (uint8_t *)&buf, 0x20u);
      }

      v130 = 0;
      v36 = v127;
      v35 = v122;
      goto LABEL_44;
    }

    v23 = v115;
    v24 = a10;
    a8 = v105;
LABEL_51:
    if ((a5 & 1) != 0 || v17 && (v19 = (__CFString *)objc_msgSend(v17, "count")) != 0)
    {
      if (v16)
      {
        v65 = v16;
        v66 = v17;
        v112 = v18;
        v67 = v18;
        v106 = v21;
        obja = v67;
        if (!v67)
          obja = (__CFString *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](NEPolicyResult, "pass"));
        v116 = v23;
        v110 = v21;
        v124 = v24;
        if (a8)
        {
          v68 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", &unk_10009EF93);
          v69 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult removeNetworkAgentUUID:](NEPolicyResult, "removeNetworkAgentUUID:", v68));

        }
        else
        {
          v69 = 0;
        }
        v74 = v106;
        v137 = 0u;
        v138 = 0u;
        v135 = 0u;
        v136 = 0u;
        v75 = v65;
        v76 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v135, &buf, 16);
        v77 = obja;
        if (v76)
        {
          v78 = v76;
          v108 = v17;
          v119 = v16;
          v79 = 0;
          v128 = *(_QWORD *)v136;
          v80 = v75;
          v121 = v66;
          v123 = v75;
          while (2)
          {
            for (j = 0; j != v78; j = (char *)j + 1)
            {
              v82 = v79;
              if (*(_QWORD *)v136 != v128)
                objc_enumerationMutation(v80);
              v79 = *(id *)(*((_QWORD *)&v135 + 1) + 8 * (_QWORD)j);

              if ((a5 & 1) == 0)
              {
                if (!v66)
                  continue;
                v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "objectForKeyedSubscript:", v79));

                if (!v83)
                  continue;
              }
              v84 = +[NEProcessInfo copyUUIDsForBundleID:uid:](NEProcessInfo, "copyUUIDsForBundleID:uid:", v79, 0);
              v86 = v84;
              if (v84 && (v84 = objc_msgSend(v84, "count")) != 0)
              {
                v87 = ne_log_obj(v84, v85);
                v88 = objc_claimAutoreleasedReturnValue(v87);
                if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
                {
                  LODWORD(v139[0]) = 136315906;
                  *(_QWORD *)((char *)v139 + 4) = "-[NEPolicySession(AlwaysOnVPN) addRegisteredCNP:order:allowAllCaptiveN"
                                                  "etworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList"
                                                  ":incrementOrder:]";
                  WORD2(v139[1]) = 2112;
                  *(_QWORD *)((char *)&v139[1] + 6) = obja;
                  HIWORD(v139[2]) = 2112;
                  v139[3] = v79;
                  LOWORD(v140) = 2112;
                  *(_QWORD *)((char *)&v140 + 2) = v86;
                  _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_INFO, "%s: Adding %@ policy for %@, UUIDs %@", (uint8_t *)v139, 0x2Au);
                }

                v89 = sub_100054014(v125, a3, v124, 0, v86, 1, 0, 0, 0, 0, 0, obja, v69, 0, v106);
                if ((v89 & 1) == 0)
                {
                  v95 = ne_log_obj(v89, v90);
                  v97 = objc_claimAutoreleasedReturnValue(v95);
                  if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v139[0]) = 136315650;
                    *(_QWORD *)((char *)v139 + 4) = "-[NEPolicySession(AlwaysOnVPN) addRegisteredCNP:order:allowAllCaptiv"
                                                    "eNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyID"
                                                    "List:incrementOrder:]";
                    WORD2(v139[1]) = 2112;
                    v77 = obja;
                    *(_QWORD *)((char *)&v139[1] + 6) = obja;
                    HIWORD(v139[2]) = 2112;
                    v139[3] = v79;
                    _os_log_error_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_ERROR, "%s: Failed to add %@ policy for %@", (uint8_t *)v139, 0x20u);
                    v16 = v119;
                    v23 = v116;
                  }
                  else
                  {
                    v16 = v119;
                    v77 = obja;
                    v23 = v116;
                  }
                  v66 = v121;
                  v74 = v106;
LABEL_93:

                  LOBYTE(v139[0]) = 0;
                  v75 = v123;

                  v17 = v108;
                  goto LABEL_94;
                }
                v91 = sub_100054014(v125, a3, v124, 0, v86, 0, CFSTR("com.apple.developer.networking.HotspotHelper"), 0, 0, 0, 0, obja, v69, 0, v106);
                v66 = v121;
                v80 = v123;
                if ((v91 & 1) == 0)
                {
                  v96 = ne_log_obj(v91, v92);
                  v97 = objc_claimAutoreleasedReturnValue(v96);
                  if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v139[0]) = 136315650;
                    *(_QWORD *)((char *)v139 + 4) = "-[NEPolicySession(AlwaysOnVPN) addRegisteredCNP:order:allowAllCaptiv"
                                                    "eNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyID"
                                                    "List:incrementOrder:]";
                    WORD2(v139[1]) = 2112;
                    *(_QWORD *)((char *)&v139[1] + 6) = obja;
                    HIWORD(v139[2]) = 2112;
                    v139[3] = v79;
                    _os_log_error_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_ERROR, "%s: Failed to add %@ policy (custom captive entitlement) for %@", (uint8_t *)v139, 0x20u);
                  }
                  v16 = v119;
                  v23 = v116;
                  goto LABEL_93;
                }
              }
              else
              {
                v93 = ne_log_obj(v84, v85);
                v94 = objc_claimAutoreleasedReturnValue(v93);
                if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
                {
                  LODWORD(v139[0]) = 136315394;
                  *(_QWORD *)((char *)v139 + 4) = "-[NEPolicySession(AlwaysOnVPN) addRegisteredCNP:order:allowAllCaptiveN"
                                                  "etworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList"
                                                  ":incrementOrder:]";
                  WORD2(v139[1]) = 2112;
                  *(_QWORD *)((char *)&v139[1] + 6) = v79;
                  _os_log_debug_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEBUG, "%s: Plugin %@ does not exist, may have been uninstalled", (uint8_t *)v139, 0x16u);
                }

              }
            }
            v78 = objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v135, &buf, 16);
            if (v78)
              continue;
            break;
          }

          v16 = v119;
          v75 = v80;
          v17 = v108;
        }

        LOBYTE(v139[0]) = 1;
        v23 = v116;
LABEL_94:

        v130 = (v139[0] & 1) != 0;
        v21 = v110;
        v18 = v112;
        goto LABEL_95;
      }
      v73 = ne_log_obj(v19, v20);
      v71 = objc_claimAutoreleasedReturnValue(v73);
      if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
        goto LABEL_62;
      buf = 136315138;
      v143 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allowAl"
             "lCaptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
      v72 = "%s: No registered Captive Network Plugins";
    }
    else
    {
      v70 = ne_log_obj(v19, v20);
      v71 = objc_claimAutoreleasedReturnValue(v70);
      if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
      {
LABEL_62:

        v130 = 1;
        goto LABEL_95;
      }
      buf = 136315138;
      v143 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allowAl"
             "lCaptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
      v72 = "%s: No configuration for Captive Plugins";
    }
    _os_log_debug_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, v72, (uint8_t *)&buf, 0xCu);
    goto LABEL_62;
  }
LABEL_40:
  v130 = 0;
LABEL_44:

LABEL_95:
LABEL_96:

  return v130;
}

uint64_t sub_100058E10(uint64_t a1, void *a2, unsigned int a3, uint64_t *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  const char *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  void *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  NSObject *v45;
  uint64_t v46;
  void *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  _UNKNOWN **v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  _UNKNOWN **v57;
  id v58;
  uint64_t v59;
  NSObject *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  id v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  void *i;
  uint64_t v81;
  id v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  id v89;
  uint64_t v90;
  id v91;
  void *v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  id v96;
  id v97;
  id v98;
  void *j;
  void *v100;
  uint64_t v101;
  id v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  id v108;
  void *v109;
  id v110;
  id v111;
  id v112;
  void *v113;
  void *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  void *v120;
  char *v121;
  id v122;
  void *v123;
  void *v124;
  void *v125;
  uint64_t v126;
  NSObject *v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  unsigned int v134;
  void *v135;
  void *v136;
  unsigned int v137;
  uint64_t v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  void *v143;
  unsigned int v144;
  void *v145;
  void *v146;
  unsigned int v147;
  void *v148;
  void *v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  NSObject *v153;
  const char *v154;
  const char *v155;
  NSObject *v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  NSObject *v160;
  NSObject *v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  void *v165;
  void *v166;
  void *v167;
  id v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  uint64_t v175;
  NSObject *v176;
  const char *v177;
  NSObject *v178;
  uint32_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __CFString *v184;
  id v185;
  uint64_t v186;
  uint64_t v187;
  NSObject *v188;
  NSObject *v189;
  id v190;
  id v191;
  uint64_t v192;
  void *k;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  NSObject *v199;
  uint64_t v200;
  uint64_t v201;
  NSObject *v202;
  const char *v203;
  const char *v204;
  uint64_t v205;
  uint64_t v206;
  BOOL v207;
  void *v208;
  uint64_t v209;
  NSObject *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  id v215;
  void *v216;
  void *v217;
  void *v218;
  uint64_t v219;
  id v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  NSObject *v224;
  char *v225;
  id v226;
  uint64_t is_debug_logging_enabled;
  int v228;
  uint64_t v229;
  uint64_t v230;
  NSObject *v231;
  NSObject *v232;
  _BOOL4 v233;
  void *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  NSObject *v239;
  id v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  NSObject *v245;
  void *v246;
  _BOOL4 v247;
  char *v248;
  uint64_t v249;
  NSObject *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  NSObject *v255;
  void *v256;
  void *v257;
  int v258;
  void *v259;
  char v260;
  void *v261;
  void *v262;
  BOOL v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  NSObject *v267;
  char *v268;
  char *v269;
  id v270;
  uint64_t v271;
  void *v272;
  void *v273;
  id v274;
  id v275;
  __CFString *v276;
  id v277;
  id v278;
  id v279;
  id v280;
  id v281;
  id v282;
  id v283;
  id obj;
  id obja;
  id objb;
  uint64_t *v287;
  void *v288;
  uint64_t v289;
  id v290;
  uint64_t v291;
  unsigned int v292;
  uint8_t buf[4];
  const char *v294;
  __int16 v295;
  const __CFString *v296;
  __int16 v297;
  const char *v298;
  __int16 v299;
  int v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  uint8_t v305[4];
  const char *v306;
  __int16 v307;
  const __CFString *v308;
  __int16 v309;
  const __CFString *v310;

  v9 = a2;
  v10 = a5;
  if (!a1)
    goto LABEL_38;
  v292 = a3;
  v11 = v9;
  v12 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/usr/libexec/nesessionmanager"));
  v13 = objc_msgSend(v12, "count");
  if (!v13)
    goto LABEL_12;
  v15 = ne_log_obj(v13, v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v294 = "-[NEPolicySession(AlwaysOnVPN) addSessionManagerWithOrder:]";
    _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%s: Adding PASS policy for nesessionmanager", buf, 0xCu);
  }

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](NEPolicyResult, "pass"));
  v18 = sub_100054014((void *)a1, &v292, 1, 0, v12, 1, 0, 1, 0, 0, 0, v17, 0, 0, 0);

  if ((v18 & 1) == 0)
  {
    v27 = ne_log_obj(v19, v20);
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v294 = "-[NEPolicySession(AlwaysOnVPN) addSessionManagerWithOrder:]";
      _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%s: Failed to add PASS policy for nesessionmanager", buf, 0xCu);
    }

LABEL_12:
    v31 = ne_log_obj(v29, v30);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
LABEL_34:

      v68 = ne_log_obj(v66, v67);
      v69 = objc_claimAutoreleasedReturnValue(v68);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v294 = "-[NEPolicySession(AlwaysOnVPN) evaluateConfiguration:startOrder:IMSUseIPSec:dropAllLevel:captiveNetworkPlugins:]";
        _os_log_error_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "%s: evaluateConfigurationEssential failed", buf, 0xCu);
      }

      goto LABEL_37;
    }
    *(_DWORD *)buf = 136315138;
    v294 = "-[NEPolicySession(AlwaysOnVPN) evaluateConfigurationEssentialwithOrder:order:]";
    v33 = "%s: addSessionManagerWithOrder failed";
LABEL_40:
    _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, v33, buf, 0xCu);
    goto LABEL_34;
  }

  v21 = v11;
  v22 = v21;
  if (v21
    && (v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "alwaysOnVPN")), v23, v23))
  {
    v24 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", &unk_10009EF93);
    v25 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult removeNetworkAgentUUID:](NEPolicyResult, "removeNetworkAgentUUID:", v24));

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v34 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/usr/libexec/configd"));
  v35 = objc_msgSend(v34, "count");
  if (!v35)
    goto LABEL_33;
  v287 = a4;
  v37 = ne_log_obj(v35, v36);
  v38 = objc_claimAutoreleasedReturnValue(v37);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v294 = "-[NEPolicySession(AlwaysOnVPN) addConfigdWithOrder:order:needConfigdPassAll:policyIDList:]";
    _os_log_debug_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "%s: Adding PASS policy for configd", buf, 0xCu);
  }

  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](NEPolicyResult, "pass"));
  v40 = sub_100054014((void *)a1, &v292, 1, 0, v34, 1, 0, 1, 0, 0, 0, v39, v26, 0, 0);

  v43 = ne_log_obj(v41, v42);
  v44 = objc_claimAutoreleasedReturnValue(v43);
  v45 = v44;
  if ((v40 & 1) == 0)
  {
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v294 = "-[NEPolicySession(AlwaysOnVPN) addConfigdWithOrder:order:needConfigdPassAll:policyIDList:]";
      _os_log_error_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "%s: Failed to add PASS policy for configd", buf, 0xCu);
    }
    goto LABEL_32;
  }
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v294 = "-[NEPolicySession(AlwaysOnVPN) addConfigdWithOrder:order:needConfigdPassAll:policyIDList:]";
    _os_log_debug_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "%s: Adding PASS policy for captiveagent", buf, 0xCu);
  }

  v45 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/usr/libexec/captiveagent"));
  if (!v45)
  {
    v59 = ne_log_obj(0, v46);
    v60 = objc_claimAutoreleasedReturnValue(v59);
    if (!os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
LABEL_31:

LABEL_32:
LABEL_33:

      v65 = ne_log_obj(v63, v64);
      v32 = objc_claimAutoreleasedReturnValue(v65);
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        goto LABEL_34;
      *(_DWORD *)buf = 136315138;
      v294 = "-[NEPolicySession(AlwaysOnVPN) evaluateConfigurationEssentialwithOrder:order:]";
      v33 = "%s: addConfigdWithOrder failed";
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136315138;
    v294 = "-[NEPolicySession(AlwaysOnVPN) addConfigdWithOrder:order:needConfigdPassAll:policyIDList:]";
    v61 = "%s: Failed to get UUIDs for captiveagent";
LABEL_83:
    _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, v61, buf, 0xCu);
    goto LABEL_31;
  }
  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](NEPolicyResult, "pass"));
  v48 = sub_100054014((void *)a1, &v292, 1, 0, v45, 1, 0, 0, 0, 0, 0, v47, v26, 0, 0);

  if ((v48 & 1) == 0)
  {
    v62 = ne_log_obj(v49, v50);
    v60 = objc_claimAutoreleasedReturnValue(v62);
    if (!os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      goto LABEL_31;
    *(_DWORD *)buf = 136315138;
    v294 = "-[NEPolicySession(AlwaysOnVPN) addConfigdWithOrder:order:needConfigdPassAll:policyIDList:]";
    v61 = "%s: Failed to add PASS policy for captiveagent";
    goto LABEL_83;
  }

  v51 = v22;
  v52 = &AnalyticsSendEventLazy_ptr;
  v53 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter"));
  if (!objc_msgSend(v53, "count"))
  {

LABEL_77:
    v130 = ne_log_obj(v71, v72);
    v32 = objc_claimAutoreleasedReturnValue(v130);
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      goto LABEL_34;
    *(_DWORD *)buf = 136315138;
    v294 = "-[NEPolicySession(AlwaysOnVPN) evaluateConfigurationEssentialwithOrder:order:]";
    v33 = "%s: addCommCenterPathWithOrder failed";
    goto LABEL_40;
  }
  v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "alwaysOnVPN"));

  if (v54)
  {
    v57 = &AnalyticsSendEventLazy_ptr;
    v58 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", &unk_10009EF93);
    v288 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult removeNetworkAgentUUID:](NEPolicyResult, "removeNetworkAgentUUID:", v58));

    v52 = &AnalyticsSendEventLazy_ptr;
  }
  else
  {
    v288 = 0;
    v57 = &AnalyticsSendEventLazy_ptr;
  }
  v73 = ne_log_obj(v55, v56);
  v74 = objc_claimAutoreleasedReturnValue(v73);
  if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v305 = 136315138;
    v306 = "-[NEPolicySession(AlwaysOnVPN) addCommCenterPathPassWithOrder:order:]";
    _os_log_debug_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "%s: Adding PASS policy for CommCenter Path", v305, 0xCu);
  }

  v303 = 0u;
  v304 = 0u;
  v301 = 0u;
  v302 = 0u;
  v75 = v53;
  v76 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v301, buf, 16);
  if (!v76)
    goto LABEL_57;
  v77 = v76;
  v280 = v9;
  obj = v75;
  v273 = v51;
  v78 = *(_QWORD *)v302;
  v79 = v292;
  while (2)
  {
    for (i = 0; i != v77; i = (char *)i + 1)
    {
      if (*(_QWORD *)v302 != v78)
        objc_enumerationMutation(obj);
      v81 = *(_QWORD *)(*((_QWORD *)&v301 + 1) + 8 * (_QWORD)i);
      v82 = objc_alloc_init((Class)NSMutableArray);
      v83 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v81));
      objc_msgSend(v82, "addObject:", v83);

      v84 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v81));
      objc_msgSend(v82, "addObject:", v84);

      v85 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
      objc_msgSend(v82, "addObject:", v85);

      v86 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](NEPolicyCondition, "entitlement"));
      objc_msgSend(v82, "addObject:", v86);

      v87 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", 0));
      objc_msgSend(v82, "addObject:", v87);

      v88 = v288;
      if (v288)
      {
        v89 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v79, v288, v82);
        if (!objc_msgSend((id)a1, "addPolicy:", v89))
        {
          v292 = v79;
          v129 = ne_log_obj(0, v90);
          v127 = objc_claimAutoreleasedReturnValue(v129);
          if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v305 = 136315138;
            v306 = "-[NEPolicySession(AlwaysOnVPN) addCommCenterPathPassWithOrder:order:]";
            v128 = "%s: Failed to add removeNetworkAgent policy for CommCenter path";
            goto LABEL_106;
          }
LABEL_76:
          v9 = v280;

          goto LABEL_77;
        }
        v79 = (v79 + 1);

      }
      v91 = objc_alloc((Class)NEPolicy);
      v92 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](NEPolicyResult, "pass"));
      v89 = objc_msgSend(v91, "initWithOrder:result:conditions:", v79, v92, v82);

      if (!objc_msgSend((id)a1, "addPolicy:", v89))
      {
        v292 = v79;
        v126 = ne_log_obj(0, v93);
        v127 = objc_claimAutoreleasedReturnValue(v126);
        v88 = v288;
        if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v305 = 136315138;
          v306 = "-[NEPolicySession(AlwaysOnVPN) addCommCenterPathPassWithOrder:order:]";
          v128 = "%s: Failed to add Pass policy for CommCenter path";
LABEL_106:
          _os_log_error_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_ERROR, v128, v305, 0xCu);
          goto LABEL_76;
        }
        goto LABEL_76;
      }
      v79 = (v79 + 1);

    }
    v77 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v301, buf, 16);
    if (v77)
      continue;
    break;
  }
  v292 = v79;
  v9 = v280;
  v57 = &AnalyticsSendEventLazy_ptr;
  v52 = &AnalyticsSendEventLazy_ptr;
  v51 = v273;
  v75 = obj;
LABEL_57:

  v94 = objc_msgSend(v52[180], "copyDNSUUIDs");
  if (!v94)
  {
LABEL_80:
    v131 = ne_log_obj(v94, v95);
    v32 = objc_claimAutoreleasedReturnValue(v131);
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      goto LABEL_34;
    *(_DWORD *)buf = 136315138;
    v294 = "-[NEPolicySession(AlwaysOnVPN) evaluateConfigurationEssentialwithOrder:order:]";
    v33 = "%s: addmDNSResponderWithOrder failed";
    goto LABEL_40;
  }
  v303 = 0u;
  v304 = 0u;
  v301 = 0u;
  v302 = 0u;
  v96 = v94;
  v97 = objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", &v301, buf, 16);
  if (v97)
  {
    v98 = v97;
    v274 = v51;
    v277 = v10;
    v281 = v9;
    obja = *(id *)v302;
    v289 = v292;
    while (2)
    {
      for (j = 0; j != v98; j = (char *)j + 1)
      {
        if (*(id *)v302 != obja)
          objc_enumerationMutation(v96);
        v100 = v96;
        v101 = *(_QWORD *)(*((_QWORD *)&v301 + 1) + 8 * (_QWORD)j);
        v102 = objc_alloc_init((Class)NSMutableArray);
        v103 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v101));
        objc_msgSend(v102, "addObject:", v103);

        v104 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v101));
        objc_msgSend(v102, "addObject:", v104);

        v105 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        objc_msgSend(v102, "addObject:", v105);

        v106 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](NEPolicyCondition, "entitlement"));
        objc_msgSend(v102, "addObject:", v106);

        v107 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", 0));
        objc_msgSend(v102, "addObject:", v107);

        v108 = objc_alloc((Class)NEPolicy);
        v109 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](NEPolicyResult, "pass"));
        v110 = objc_msgSend(v108, "initWithOrder:result:conditions:", (char *)j + v289, v109, v102);
        v111 = objc_msgSend((id)a1, "addPolicy:", v110);

        if (!v111)
        {

          v10 = v277;
          v9 = v281;
          goto LABEL_80;
        }

        v96 = v100;
      }
      v289 = (v289 + (_DWORD)j);
      v98 = objc_msgSend(v100, "countByEnumeratingWithState:objects:count:", &v301, buf, 16);
      if (v98)
        continue;
      break;
    }
    v292 = v289;
    v10 = v277;
    v9 = v281;
    v57 = &AnalyticsSendEventLazy_ptr;
    v51 = v274;
  }

  v112 = v51;
  v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "alwaysOnVPN"));

  objb = v113;
  if (!v113)
  {
    v282 = v9;
    v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "VPN"));
    v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "protocol"));
    v134 = objc_msgSend(v133, "excludeLocalNetworks");

    if (v134)
    {
      v135 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "VPN"));
      v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v135, "protocol"));
      v137 = objc_msgSend(v136, "excludeDeviceCommunication");

      v138 = v137 ^ 1;
      v271 = 1;
    }
    else
    {
      v138 = 0;
      v271 = 0;
    }
    v142 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "VPN"));
    v143 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "protocol"));
    v144 = objc_msgSend(v143, "excludeCellularServices");

    v145 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "VPN"));
    v146 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "protocol"));
    v147 = objc_msgSend(v146, "excludeAPNs");

    v148 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "VPN"));
    v149 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v148, "protocol"));
    v150 = objc_msgSend(v149, "excludeDeviceCommunication");

    if (v150)
      v151 = 1;
    else
      v151 = v138;
    v275 = (id)v151;
    v9 = v282;
    if ((v147 | v134) == 1)
    {
      v152 = ne_log_obj(v116, v117);
      v153 = objc_claimAutoreleasedReturnValue(v152);
      if (os_log_type_enabled(v153, OS_LOG_TYPE_INFO))
      {
        v154 = "";
        v155 = "APNS ";
        if (!v147)
          v155 = "";
        if (v134)
          v154 = "Sharingd ";
        *(_DWORD *)buf = 136315394;
        v294 = v155;
        v295 = 2080;
        v296 = (const __CFString *)v154;
        _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_INFO, "Installing VPN Service Exceptions <%s%s>", buf, 0x16u);
      }

    }
    v290 = (id)v144;
    if (!v147)
    {
LABEL_123:
      if (v134)
      {
        v184 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](NEPolicyResult, "pass"));
        v185 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/usr/libexec/sharingd"));
        v187 = ne_log_obj(v185, v186);
        v188 = objc_claimAutoreleasedReturnValue(v187);
        v189 = v188;
        if (!v185)
        {
          if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v305 = 136315394;
            v306 = "-[NEPolicySession(AlwaysOnVPN) addSharingdExceptionWithOrder:action:]";
            v307 = 2112;
            v308 = CFSTR("sharingd");
            _os_log_error_impl((void *)&_mh_execute_header, v189, OS_LOG_TYPE_ERROR, "%s: failed to get UUIDs for %@ daemon", v305, 0x16u);
          }
LABEL_142:

          v197 = ne_log_obj(v195, v196);
          v176 = objc_claimAutoreleasedReturnValue(v197);
          if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v176, OS_LOG_TYPE_ERROR, "Failed to handle sharingd-8770 exception", buf, 2u);
          }
          v113 = 0;
LABEL_145:
          v141 = (uint64_t)v290;

          goto LABEL_146;
        }
        if (os_log_type_enabled(v188, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v305 = 136315650;
          v306 = "-[NEPolicySession(AlwaysOnVPN) addSharingdExceptionWithOrder:action:]";
          v307 = 2112;
          v308 = v184;
          v309 = 2112;
          v310 = CFSTR("sharingd");
          _os_log_impl((void *)&_mh_execute_header, v189, OS_LOG_TYPE_INFO, "%s: Adding %@ Exceptions policy for %@", v305, 0x20u);
        }
        v278 = v10;

        v303 = 0u;
        v304 = 0u;
        v301 = 0u;
        v302 = 0u;
        v189 = v185;
        v190 = -[NSObject countByEnumeratingWithState:objects:count:](v189, "countByEnumeratingWithState:objects:count:", &v301, buf, 16);
        if (v190)
        {
          v191 = v190;
          v192 = *(_QWORD *)v302;
          while (2)
          {
            for (k = 0; k != v191; k = (char *)k + 1)
            {
              if (*(_QWORD *)v302 != v192)
                objc_enumerationMutation(v189);
              v194 = *(void **)(*((_QWORD *)&v301 + 1) + 8 * (_QWORD)k);
              if (!sub_100054EEC((void *)a1, &v292, 0, v194, CFSTR("8770"), 1)
                || !sub_100054EEC((void *)a1, &v292, 0, v194, CFSTR("8770"), 0))
              {
                v10 = v278;
                v9 = v282;
                goto LABEL_142;
              }
            }
            v191 = -[NSObject countByEnumeratingWithState:objects:count:](v189, "countByEnumeratingWithState:objects:count:", &v301, buf, 16);
            if (v191)
              continue;
            break;
          }
        }

        v10 = v278;
        v9 = v282;
      }
      v113 = 0;
      goto LABEL_138;
    }
    v156 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](NEPolicyResult, "pass"));
    v157 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", CFSTR("/System/Library/PrivateFrameworks/ApplePushService.framework/apsd"));
    v159 = ne_log_obj(v157, v158);
    v160 = objc_claimAutoreleasedReturnValue(v159);
    v161 = v160;
    if (v157)
    {
      if (os_log_type_enabled(v160, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v294 = "-[NEPolicySession(AlwaysOnVPN) addAPSDExceptionWithOrder:action:]";
        v295 = 2112;
        v296 = (const __CFString *)v156;
        v297 = 2112;
        v298 = CFSTR("APSD");
        _os_log_impl((void *)&_mh_execute_header, v161, OS_LOG_TYPE_INFO, "%s: Adding %@ Exceptions policy for %@", buf, 0x20u);
      }

      v162 = sub_100054014((void *)a1, &v292, 1, 0, v157, 1, 0, 0, 0, 0, 0, v156, 0, 0, 0);
      if ((v162 & 1) != 0)
      {

LABEL_122:
        goto LABEL_123;
      }
      v180 = ne_log_obj(v162, v163);
      v161 = objc_claimAutoreleasedReturnValue(v180);
      if (!os_log_type_enabled(v161, OS_LOG_TYPE_ERROR))
      {
LABEL_120:

        v183 = ne_log_obj(v181, v182);
        v156 = objc_claimAutoreleasedReturnValue(v183);
        if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v156, OS_LOG_TYPE_ERROR, "Failed to handle apsd exception", buf, 2u);
        }
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136315650;
      v294 = "-[NEPolicySession(AlwaysOnVPN) addAPSDExceptionWithOrder:action:]";
      v295 = 2112;
      v296 = (const __CFString *)v156;
      v297 = 2112;
      v298 = CFSTR("APSD");
      v177 = "%s: Failed to add %@ policy for %@";
      v178 = v161;
      v179 = 32;
    }
    else
    {
      if (!os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
        goto LABEL_120;
      *(_DWORD *)buf = 136315394;
      v294 = "-[NEPolicySession(AlwaysOnVPN) addAPSDExceptionWithOrder:action:]";
      v295 = 2112;
      v296 = CFSTR("APSD");
      v177 = "%s: failed to get UUIDs for %@ daemon";
      v178 = v161;
      v179 = 22;
    }
    _os_log_error_impl((void *)&_mh_execute_header, v178, OS_LOG_TYPE_ERROR, v177, buf, v179);
    goto LABEL_120;
  }
  v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "alwaysOnVPN"));
  v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v114, "serviceExceptions"));

  if (v115)
  {
    v118 = ne_log_obj(v116, v117);
    v119 = objc_claimAutoreleasedReturnValue(v118);
    if (os_log_type_enabled(v119, OS_LOG_TYPE_INFO))
    {
      v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "alwaysOnVPN"));
      v121 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v120, "serviceExceptions"));
      *(_DWORD *)buf = 138412290;
      v294 = v121;
      _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_INFO, "Service Exceptions %@", buf, 0xCu);

    }
    v122 = v112;
    objc_opt_self(NEPolicySession);
    v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v122, "alwaysOnVPN"));

    v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v123, "serviceExceptions"));
    v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v124, "objectForKeyedSubscript:", CFSTR("AirPrint")));

    if (v125)
      v271 = (uint64_t)objc_msgSend(v125, "action");
    else
      v271 = 0;

    v290 = sub_100057438((uint64_t)NEPolicySession, v122);
    v164 = v122;
    objc_opt_self(NEPolicySession);
    v165 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v164, "alwaysOnVPN"));

    v166 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v165, "serviceExceptions"));
    v167 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v166, "objectForKeyedSubscript:", CFSTR("DeviceCommunication")));

    if (v167)
      v168 = objc_msgSend(v167, "action");
    else
      v168 = 0;

    v169 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v164, "alwaysOnVPN"));
    v170 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v169, "serviceExceptions"));
    v171 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v170, "objectForKeyedSubscript:", CFSTR("AirDrop")));
    v275 = v168;
    if (v171)
    {

      goto LABEL_114;
    }
    v172 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v164, "alwaysOnVPN"));
    v173 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v172, "serviceExceptions"));
    v174 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v173, "objectForKeyedSubscript:", CFSTR("AirPlay")));

    if (v174)
    {
LABEL_114:
      v175 = ne_log_obj(v116, v117);
      v176 = objc_claimAutoreleasedReturnValue(v175);
      if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v294 = "-[NEPolicySession(AlwaysOnVPN) addServiceExceptionsWithOrder:configuration:IMSUseIPSec:dropAllLevel:]";
        _os_log_error_impl((void *)&_mh_execute_header, v176, OS_LOG_TYPE_ERROR, "%s: AirDrop / AirPlay Service Exception not supported yet", buf, 0xCu);
      }
      v113 = objb;
      goto LABEL_145;
    }
    v113 = objb;
LABEL_138:
    v141 = (uint64_t)v290;
LABEL_146:
    if (v275 == (id)1 && (v116 = sub_100056A58((void *)a1, &v292), (v116 & 1) == 0))
    {
      v198 = ne_log_obj(v116, v117);
      v199 = objc_claimAutoreleasedReturnValue(v198);
      v57 = &AnalyticsSendEventLazy_ptr;
      if (os_log_type_enabled(v199, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v199, OS_LOG_TYPE_ERROR, "Failed to handle device communication exception", buf, 2u);
      }
      v139 = v112;

    }
    else
    {
      v139 = v112;
      v57 = &AnalyticsSendEventLazy_ptr;
    }
    v140 = v271;
  }
  else
  {
    v139 = v112;
    v140 = 0;
    v141 = 0;
  }
  v200 = v140;
  if (!(v140 | v141))
  {
    v208 = v139;
    goto LABEL_204;
  }
  v201 = ne_log_obj(v116, v117);
  v202 = objc_claimAutoreleasedReturnValue(v201);
  if (os_log_type_enabled(v202, OS_LOG_TYPE_INFO))
  {
    v203 = "";
    v204 = "AirPrint ";
    if (!v200)
      v204 = "";
    if (v141)
      v203 = "CellularServices ";
    *(_DWORD *)buf = 136315394;
    v294 = v204;
    v295 = 2080;
    v296 = (const __CFString *)v203;
    _os_log_impl((void *)&_mh_execute_header, v202, OS_LOG_TYPE_INFO, "Installing VPN Service Exceptions <%s%s>", buf, 0x16u);
  }

  if (v200 == 2)
  {
    v279 = v10;
    v283 = v9;
    v213 = objc_claimAutoreleasedReturnValue(objc_msgSend(v57[176], "drop"));
    v276 = 0;
    v208 = v139;
    goto LABEL_170;
  }
  v207 = v200 == 1;
  v208 = v139;
  if (!v207)
    goto LABEL_204;
  v209 = ne_log_obj(v205, v206);
  v210 = objc_claimAutoreleasedReturnValue(v209);
  if (os_log_type_enabled(v210, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v294 = "-[NEPolicySession(AlwaysOnVPN) addAirPrintExceptionWithOrder:action:isAOVPN:]";
    _os_log_debug_impl((void *)&_mh_execute_header, v210, OS_LOG_TYPE_DEBUG, "%s: Adding pass policy for Bonjour traffic", buf, 0xCu);
  }

  v211 = sub_100055294((void *)a1, &v292);
  if ((v211 & 1) != 0)
  {
    v279 = v10;
    v283 = v9;
    v213 = objc_claimAutoreleasedReturnValue(objc_msgSend(v57[176], "pass"));
    if (v113)
    {
      v214 = v57[176];
      v215 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", &unk_10009EF93);
      v276 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v214, "removeNetworkAgentUUID:", v215));

    }
    else
    {
      v276 = 0;
    }
LABEL_170:
    v291 = v141;
    v216 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    *(_QWORD *)&v301 = v216;
    v217 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](NEPolicyCondition, "entitlement"));
    *((_QWORD *)&v301 + 1) = v217;
    v218 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition accountIdentifier:](NEPolicyCondition, "accountIdentifier:", CFSTR("com.apple.PrintKit.PrinterTool")));
    *(_QWORD *)&v302 = v218;
    v219 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v301, 3));

    v220 = objc_alloc((Class)NEPolicy);
    v221 = v292;
    v270 = objc_msgSend(v220, "initWithOrder:result:conditions:", v292, v213, v219);
    v223 = ne_log_obj(v270, v222);
    v224 = objc_claimAutoreleasedReturnValue(v223);
    if (os_log_type_enabled(v224, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v294 = "-[NEPolicySession(AlwaysOnVPN) addAirPrintExceptionWithOrder:action:isAOVPN:]";
      v295 = 2112;
      v296 = v276;
      v297 = 2080;
      v298 = "com.apple.PrintKit.PrinterTool";
      v299 = 1024;
      v300 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v224, OS_LOG_TYPE_DEBUG, "%s: Adding policy %@ for account id %s (priority %d)", buf, 0x26u);
    }

    v225 = (char *)objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v221, v276, v219);
    v226 = objc_msgSend((id)a1, "addPolicy:", v225);
    is_debug_logging_enabled = nelog_is_debug_logging_enabled();
    v228 = is_debug_logging_enabled;
    v230 = ne_log_obj(is_debug_logging_enabled, v229);
    v231 = objc_claimAutoreleasedReturnValue(v230);
    v232 = v231;
    v272 = (void *)v219;
    if (v226)
    {
      v9 = v283;
      if (v228)
      {
        if (os_log_type_enabled(v231, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v294 = v225;
          _os_log_debug_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v231, OS_LOG_TYPE_INFO))
      {
        v235 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v225, "descriptionWithIndent:options:", 0, 2));
        *(_DWORD *)buf = 138412290;
        v294 = v235;
        _os_log_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);

      }
      v292 = v221 + 1;
      v238 = ne_log_obj(v236, v237);
      v239 = objc_claimAutoreleasedReturnValue(v238);
      if (os_log_type_enabled(v239, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315906;
        v294 = "-[NEPolicySession(AlwaysOnVPN) addAirPrintExceptionWithOrder:action:isAOVPN:]";
        v295 = 2112;
        v296 = (const __CFString *)v213;
        v297 = 2080;
        v298 = "com.apple.PrintKit.PrinterTool";
        v299 = 1024;
        v300 = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v239, OS_LOG_TYPE_DEBUG, "%s: Adding policy %@ for account id %s (priority %d)", buf, 0x26u);
      }

      v225 = (char *)objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v221 + 1), v213, v272);
      v240 = objc_msgSend((id)a1, "addPolicy:", v225);
      v241 = nelog_is_debug_logging_enabled();
      v242 = v241;
      v244 = ne_log_obj(v241, v243);
      v245 = objc_claimAutoreleasedReturnValue(v244);
      v232 = v245;
      if (v240)
      {
        v246 = (void *)v213;
        v10 = v279;
        if (v242)
        {
          if (os_log_type_enabled(v245, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138412290;
            v294 = v225;
            _os_log_debug_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
          }
        }
        else if (os_log_type_enabled(v245, OS_LOG_TYPE_INFO))
        {
          v248 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v225, "descriptionWithIndent:options:", 0, 2));
          *(_DWORD *)buf = 138412290;
          v294 = v248;
          _os_log_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);

        }
        v292 = v221 + 2;

        v113 = objb;
        v141 = v291;
        goto LABEL_204;
      }
      v234 = (void *)v213;
      v247 = os_log_type_enabled(v245, OS_LOG_TYPE_ERROR);
      if (v242)
      {
        if (v247)
        {
          *(_DWORD *)buf = 138412290;
          v294 = v225;
          _os_log_error_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
        }
      }
      else if (v247)
      {
        v269 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v225, "descriptionWithIndent:options:", 0, 2));
        *(_DWORD *)buf = 138412290;
        v294 = v269;
        _os_log_error_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);

      }
    }
    else
    {
      v233 = os_log_type_enabled(v231, OS_LOG_TYPE_ERROR);
      v234 = (void *)v213;
      if (v228)
      {
        if (v233)
        {
          *(_DWORD *)buf = 138412290;
          v294 = v225;
          _os_log_error_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
        }
      }
      else if (v233)
      {
        v268 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v225, "descriptionWithIndent:options:", 0, 2));
        *(_DWORD *)buf = 138412290;
        v294 = v268;
        _os_log_error_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);

      }
      v9 = v283;
    }
    v10 = v279;

    v113 = objb;
    v141 = v291;
  }
  v249 = ne_log_obj(v211, v212);
  v250 = objc_claimAutoreleasedReturnValue(v249);
  if (os_log_type_enabled(v250, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v250, OS_LOG_TYPE_ERROR, "Failed to handle AirPrint exception", buf, 2u);
  }

LABEL_204:
  v251 = sub_100057560((void *)a1, &v292, v141, 0, v113 != 0);
  if ((v251 & 1) != 0)
  {
    if (v287)
    {
      v253 = 2;
      if (v141 == 1)
        v253 = 3;
      *v287 = v253;
    }
  }
  else
  {
    v254 = ne_log_obj(v251, v252);
    v255 = objc_claimAutoreleasedReturnValue(v254);
    if (os_log_type_enabled(v255, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v255, OS_LOG_TYPE_ERROR, "Failed to handle CellularServices exception - Control", buf, 2u);
    }

  }
  v256 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v208, "alwaysOnVPN"));

  if (v256)
  {
    v257 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v208, "alwaysOnVPN"));
    v258 = objc_msgSend(v257, "isAllowCaptiveWebSheet");

    v259 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v208, "alwaysOnVPN"));
    v260 = objc_msgSend(v259, "isAllowAllCaptiveNetworkPlugins");

    v261 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v208, "alwaysOnVPN"));
    v256 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v261, "allowedCaptiveNetworkPlugins"));

  }
  else
  {
    v260 = 1;
    v258 = 1;
  }
  v262 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v208, "alwaysOnVPN"));
  v263 = sub_10005811C((void *)a1, v10, &v292, v258, v260, v256, 0, v262 != 0, 0, 1u, 1u);

  if (v263)
  {

    a1 = 1;
    goto LABEL_38;
  }
  v266 = ne_log_obj(v264, v265);
  v267 = objc_claimAutoreleasedReturnValue(v266);
  if (os_log_type_enabled(v267, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v294 = "-[NEPolicySession(AlwaysOnVPN) evaluateConfiguration:startOrder:IMSUseIPSec:dropAllLevel:captiveNetworkPlugins:]";
    _os_log_error_impl((void *)&_mh_execute_header, v267, OS_LOG_TYPE_ERROR, "%s: addAllowedCaptiveNetworkPluginsToPolicySession failed", buf, 0xCu);
  }

LABEL_37:
  a1 = 0;
LABEL_38:

  return a1;
}

BOOL sub_10005AD0C(void *a1, void *a2, unsigned int a3, uint64_t *a4)
{
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  void *v17;
  void *v18;
  unsigned int v19;
  _UNKNOWN **v20;
  _UNKNOWN **v21;
  void *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  void *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  unsigned int v52;
  uint8_t buf[4];
  const char *v54;
  __int16 v55;
  const char *v56;

  v7 = a2;
  v8 = v7;
  if (a1)
  {
    v52 = a3;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "alwaysOnVPN"));

    if (v9)
    {
      v10 = (uint64_t)sub_1000574CC((uint64_t)NEPolicySession, v8);
      v11 = (uint64_t)sub_100057438((uint64_t)NEPolicySession, v8);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "alwaysOnVPN"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "applicationExceptions"));
    }
    else
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "VPN"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "protocol"));
      v16 = objc_msgSend(v15, "excludeCellularServices");

      v11 = v16;
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "VPN"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "protocol"));
      v19 = objc_msgSend(v18, "excludeLocalNetworks");
      v20 = &off_1000C1880;
      if (v19)
        v20 = 0;
      v21 = v20;

      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](NEPolicyResult, "pass"));
      sub_10005B188(a1, a3, v21, v12, 0);

      v13 = 0;
      v10 = v11;
    }

    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](NEPolicyResult, "pass"));
    v23 = sub_10005459C((_BOOL8)a1, &v52, v22, 0);

    if (!v23)
    {
      v26 = ne_log_obj(v24, v25);
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Failed to add icmpv6 exception - policies at High Priority", buf, 2u);
      }

    }
    if (v10 | v11)
    {
      v28 = ne_log_obj(v24, v25);
      v29 = objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        v30 = "";
        v31 = "VoiceMail ";
        if (!v10)
          v31 = "";
        if (v11)
          v30 = "CellularServices ";
        *(_DWORD *)buf = 136315394;
        v54 = v31;
        v55 = 2080;
        v56 = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Installing VPN Service Exceptions - policies at High Priority <%s%s>", buf, 0x16u);
      }

    }
    v32 = sub_100055754(a1, &v52, v10, 1, v9 != 0, 0);
    if ((v32 & 1) == 0)
    {
      v34 = ne_log_obj(v32, v33);
      v35 = objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "Failed to handle VoiceMail exception - policies at High Priority", buf, 2u);
      }

    }
    v36 = sub_100057560(a1, &v52, v11, 1, v9 != 0);
    if ((v36 & 1) != 0)
    {
      if (a4)
      {
        v38 = 2;
        if (v11 == 1)
          v38 = 3;
        *a4 = v38;
      }
    }
    else
    {
      v39 = ne_log_obj(v36, v37);
      v40 = objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Failed to handle CellularServices exception - policies at High Priority", buf, 2u);
      }

    }
    if (v13)
    {
      v41 = objc_msgSend(v13, "count");
      if (v41)
      {
        v43 = ne_log_obj(v41, v42);
        v44 = objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v54 = (const char *)v13;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "Installing VPN Application Exceptions - policies at High Priority %@", buf, 0xCu);
        }

        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "alwaysOnVPN"));
        v46 = sub_100055DB0(a1, &v52, v13, 0, 400, v45 != 0, 0);

        if ((v46 & 1) == 0)
        {
          v49 = ne_log_obj(v47, v48);
          v50 = objc_claimAutoreleasedReturnValue(v49);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "Failed to add application exceptions- policies at High Priority", buf, 2u);
          }

        }
      }
    }

  }
  return a1 != 0;
}

void sub_10005B188(void *a1, unsigned int a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t interface_names;
  uint64_t v15;
  void *v16;
  id v17;
  __int128 v18;
  ifaddrs *v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  const char *ifa_name;
  int sa_family;
  uint64_t v26;
  const char **v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  uint64_t is_debug_logging_enabled;
  int v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  ifaddrs *v46;
  _BOOL4 v47;
  void *v48;
  __int128 v49;
  id v50;
  uint64_t v51;
  id v52;
  unsigned int v53;
  void *v54;
  void *v55;
  void *v56;
  ifaddrs *v57;
  uint8_t buf[4];
  id v59;
  uint64_t v60;

  v9 = a3;
  v10 = a4;
  v11 = a5;
  v56 = a1;
  if (!a1)
    goto LABEL_18;
  v57 = 0;
  v12 = nwi_state_copy();
  v13 = v12;
  if (!v12)
  {
    LODWORD(v15) = 0;
    goto LABEL_8;
  }
  interface_names = nwi_state_get_interface_names(v12, 0, 0);
  v15 = interface_names;
  if (!(_DWORD)interface_names)
  {
LABEL_8:
    v16 = 0;
    goto LABEL_9;
  }
  v16 = malloc_type_calloc(interface_names, 8uLL, 0x50040EE9192B6uLL);
  if (v16)
  {
    LODWORD(v15) = nwi_state_get_interface_names(v13, v16, v15);
    if ((_DWORD)v15)
      goto LABEL_9;
    free(v16);
    goto LABEL_8;
  }
  LODWORD(v15) = 0;
LABEL_9:
  v17 = objc_alloc_init((Class)NSMutableDictionary);
  if (v9 && objc_msgSend(v9, "count"))
    objc_msgSend(v17, "addEntriesFromDictionary:", v9);
  if (getifaddrs(&v57))
  {
    if (!v16)
      goto LABEL_15;
    goto LABEL_14;
  }
  v53 = a2;
  v19 = v57;
  if (!v57)
  {
    v46 = 0;
LABEL_51:
    freeifaddrs(v46);
    if (!v16)
      goto LABEL_15;
LABEL_14:
    free(v16);
LABEL_15:
    if (v13)
      nwi_state_release(v13);
    goto LABEL_17;
  }
  v54 = v11;
  v50 = v9;
  if ((_DWORD)v15)
    v20 = v16 == 0;
  else
    v20 = 1;
  v21 = !v20;
  v22 = v15;
  *(_QWORD *)&v18 = 138412290;
  v49 = v18;
  v51 = v15;
  v52 = v10;
  while (1)
  {
    ifa_name = v19->ifa_name;
    if (ifa_name && *ifa_name)
    {
      sa_family = v19->ifa_addr->sa_family;
      if (sa_family == 30 || sa_family == 2)
      {
        v26 = v22;
        v27 = (const char **)v16;
        if (v21)
        {
          while (strcmp(ifa_name, *v27))
          {
            ++v27;
            if (!--v26)
              goto LABEL_37;
          }
          goto LABEL_47;
        }
LABEL_37:
        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", ifa_name, v49));
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", v28));

        if (!v29)
          break;
      }
    }
LABEL_47:
    v19 = v19->ifa_next;
    if (!v19)
    {
      v46 = v57;
      v9 = v50;
      v11 = v54;
      goto LABEL_51;
    }
  }
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v19->ifa_name));
  v31 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", v30));

  v32 = objc_alloc_init((Class)NSMutableArray);
  v55 = (void *)v31;
  v60 = v31;
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v60, 1));
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "arrayByAddingObjectsFromArray:", v33));

  v35 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v53, v10, v34);
  v36 = objc_msgSend(v56, "addPolicy:", v35);
  is_debug_logging_enabled = nelog_is_debug_logging_enabled();
  v38 = is_debug_logging_enabled;
  v40 = ne_log_obj(is_debug_logging_enabled, v39);
  v41 = objc_claimAutoreleasedReturnValue(v40);
  v42 = v41;
  if (v36)
  {
    if (v38)
    {
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = v49;
        v59 = v35;
        _os_log_debug_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "descriptionWithIndent:options:", 0, 2));
      *(_DWORD *)buf = v49;
      v59 = v43;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);

    }
    if (v54)
    {
      v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v36));
      objc_msgSend(v54, "addObject:", v44);

    }
    v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v19->ifa_name));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", &off_1000C16C0, v45);

    v22 = v51;
    v10 = v52;
    goto LABEL_47;
  }
  v47 = os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
  if (v38)
  {
    v11 = v54;
    if (v47)
    {
      *(_DWORD *)buf = v49;
      v59 = v35;
      _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
    }
  }
  else
  {
    v11 = v54;
    if (v47)
    {
      v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "descriptionWithIndent:options:", 0, 2));
      *(_DWORD *)buf = v49;
      v59 = v48;
      _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);

      v11 = v54;
    }
  }

  v9 = v50;
  v10 = v52;
LABEL_17:

LABEL_18:
}

id sub_10005C828(uint64_t a1, const char *a2)
{
  id result;

  result = *(id *)(a1 + 32);
  if (result)
  {
    result = objc_getProperty(result, a2, 16, 1);
    if (result)
      return objc_msgSend(*(id *)(a1 + 32), "handleTimeout");
  }
  return result;
}

void sub_10005CF70(void *a1, const char *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  NSObject *v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  SEL v10;
  SEL v11;
  id Property;
  const char *v13;
  _BOOL4 v14;
  SEL v15;
  id v16;
  uint64_t v17;
  id *v18;
  SEL v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;

  if (a1)
  {
    v3 = objc_msgSend(objc_getProperty(a1, a2, 16, 1), "restartPending");
    if ((_DWORD)v3)
    {
      v5 = ne_log_obj(v3, v4);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = (objc_class *)objc_opt_class(a1);
        v8 = NSStringFromClass(v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        v20 = 138412546;
        v21 = a1;
        v22 = 2112;
        v23 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@ in state %@: restarting", (uint8_t *)&v20, 0x16u);

      }
      objc_msgSend(objc_getProperty(a1, v10, 16, 1), "setRestartPending:", 0);
      Property = objc_getProperty(a1, v11, 16, 1);
      v14 = sub_1000719F4(Property, v13);
      v16 = objc_getProperty(a1, v15, 16, 1);
      if (v14)
      {
        v17 = 2;
      }
      else
      {
        objc_msgSend(v16, "setLastStopReason:", 6);
        v16 = objc_getProperty(a1, v19, 16, 1);
        v17 = 1;
      }
      sub_100070FD8((id *)v16, (const char *)v17);
    }
    else
    {
      v18 = (id *)objc_getProperty(a1, v4, 16, 1);
      sub_100070FD8(v18, (const char *)1);
    }
  }
}

void sub_10005D100(uint64_t a1, const char *a2)
{
  sub_10005CF70(*(void **)(a1 + 32), a2);
}

void sub_10005E970(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10005E9E8(uint64_t a1)
{
  void (*v2)(uint64_t, _QWORD);
  uint64_t v3;
  uint64_t v4;

  if (qword_1000CF8F0 != -1)
    dispatch_once(&qword_1000CF8F0, &stru_1000BE2C0);
  v2 = *(void (**)(uint64_t, _QWORD))(qword_1000CF8E8 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      v4 = *(_QWORD *)(v3 + 368);
    else
      v4 = 0;
    v2(v4, *(_QWORD *)(a1 + 40));
  }
}

void sub_10005EA68(uint64_t a1, void *a2)
{
  id v2;
  __CFRunLoop *Main;
  __CFRunLoop *v4;

  if (a1)
  {
    v2 = a2;
    Main = CFRunLoopGetMain();
    CFRunLoopPerformBlock(Main, kCFRunLoopDefaultMode, v2);

    v4 = CFRunLoopGetMain();
    CFRunLoopWakeUp(v4);
  }
}

void sub_10005EAB0(id a1)
{
  const __CFURL *v1;
  __CFBundle *v2;
  uint64_t v3;
  uint64_t (*DataPointerForName)(_OWORD *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  _OWORD v10[6];

  v1 = CFURLCreateFromFileSystemRepresentation(kCFAllocatorDefault, (const UInt8 *)"/System/Library/SystemConfiguration/PPPController.bundle", 56, 0);
  v2 = CFBundleCreate(kCFAllocatorDefault, v1);
  qword_1000CF8F8 = (uint64_t)v2;
  if (!v2)
  {
    v6 = ne_log_obj(0, v3);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
LABEL_7:

      goto LABEL_8;
    }
    LOWORD(v10[0]) = 0;
    v8 = "Failed to create a CFBundle for PPPController.bundle";
LABEL_10:
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)v10, 2u);
    goto LABEL_7;
  }
  DataPointerForName = (uint64_t (*)(_OWORD *, uint64_t))CFBundleGetDataPointerForName(v2, CFSTR("ne_sm_bridge_copy_functions"));
  if (!DataPointerForName)
  {
    v9 = ne_log_obj(0, v5);
    v7 = objc_claimAutoreleasedReturnValue(v9);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    LOWORD(v10[0]) = 0;
    v8 = "Failed to get the \"copy functions\" function pointer from PPPController.bundle";
    goto LABEL_10;
  }
  v10[2] = *(_OWORD *)off_1000BE300;
  v10[3] = *(_OWORD *)off_1000BE310;
  v10[4] = *(_OWORD *)off_1000BE320;
  v10[5] = *(_OWORD *)off_1000BE330;
  v10[0] = *(_OWORD *)&off_1000BE2E0;
  v10[1] = *(_OWORD *)off_1000BE2F0;
  qword_1000CF8E8 = DataPointerForName(v10, qword_1000CF8F8);
LABEL_8:
  CFRelease(v1);
}

void sub_10005EBDC(int a1, CFStringRef format, va_list arguments)
{
  const __CFString *v4;
  CFIndex Length;
  CFIndex v6;
  char *v7;
  char *v8;
  uint64_t CString;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;

  v4 = CFStringCreateWithFormatAndArguments(kCFAllocatorDefault, 0, format, arguments);
  Length = CFStringGetLength(v4);
  v6 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v7 = (char *)malloc_type_malloc(v6, 0xF2D43958uLL);
  if (v7)
  {
    v8 = v7;
    CString = CFStringGetCString(v4, v7, v6, 0x8000100u);
    if ((_DWORD)CString)
    {
      if (a1 <= 3)
      {
        v11 = ne_log_obj(CString, v10);
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          v18 = 136315138;
          v19 = v8;
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v18, 0xCu);
        }
        goto LABEL_16;
      }
      if (a1 <= 5)
      {
        v13 = ne_log_obj(CString, v10);
        v12 = objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          v18 = 136315138;
          v19 = v8;
          v14 = v12;
          v15 = OS_LOG_TYPE_DEFAULT;
LABEL_12:
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s", (uint8_t *)&v18, 0xCu);
          goto LABEL_16;
        }
        goto LABEL_16;
      }
      if (a1 == 6)
      {
        v16 = ne_log_obj(CString, v10);
        v12 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          v18 = 136315138;
          v19 = v8;
          v14 = v12;
          v15 = OS_LOG_TYPE_INFO;
          goto LABEL_12;
        }
LABEL_16:

        goto LABEL_17;
      }
      if (a1 <= 7)
      {
        v17 = ne_log_obj(CString, v10);
        v12 = objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          v18 = 136315138;
          v19 = v8;
          _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v18, 0xCu);
        }
        goto LABEL_16;
      }
    }
LABEL_17:
    free(v8);
  }
  CFRelease(v4);
}

uint64_t sub_10005EE08(int a1)
{
  if (a1 < 6)
    return 1;
  if (a1 == 6)
    return nelog_is_info_logging_enabled();
  if (a1 > 7)
    return 0;
  return nelog_is_debug_logging_enabled();
}

id sub_10005EE34(void *a1)
{
  void *v1;
  _DWORD *Property;
  const char *v3;
  _DWORD *v4;
  _DWORD *v5;
  id v6;
  _DWORD *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  unsigned int v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t is_extra_vpn_logging_enabled;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  int v44;
  id v45;
  const __CFString *v46;
  void *v47;
  _QWORD v48[3];

  Property = a1;
  v4 = Property;
  if (Property)
    Property = objc_getProperty(Property, v3, 360, 1);
  v5 = Property;
  v6 = objc_msgSend(v5, "copyLegacyDictionary");
  if (objc_msgSend(v5, "type") != (id)2)
  {
    if (objc_msgSend(v5, "type") != (id)1)
      goto LABEL_32;
    v48[0] = kSCPropNetIPSecXAuthPassword;
    v48[1] = kSCPropNetIPSecXAuthPasswordEncryption;
    v48[2] = kSCPropNetIPSecSharedSecret;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v48, 3));
    objc_msgSend(v6, "removeObjectsForKeys:", v24);

    if (v4 && v4[88] == 2)
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "configuration"));
      v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "appVPN"));
      if (objc_msgSend(v1, "isOnDemandEnabled"))
      {

        goto LABEL_29;
      }
      v25 = 1;
    }
    else
    {
      v25 = 0;
    }
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "configuration"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "VPN"));
    v28 = objc_msgSend(v27, "isOnDemandEnabled");

    if (v25)
    {

      if ((v28 & 1) == 0)
      {
LABEL_30:
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "configuration"));
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "payloadInfo"));
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "profileIdentifier"));

        if (v31)
        {
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "configuration"));
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "payloadInfo"));
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "profileIdentifier"));
          objc_msgSend(v6, "setObject:forKeyedSubscript:", v34, CFSTR("ProfileIdentifier"));

        }
LABEL_32:
        v8 = v6;
        if (!v6)
          goto LABEL_34;
        goto LABEL_33;
      }
    }
    else if (!v28)
    {
      goto LABEL_30;
    }
LABEL_29:
    objc_msgSend(v6, "setObject:forKeyedSubscript:", &off_1000C16D8, kSCPropNetIPSecOnDemandEnabled);
    goto LABEL_30;
  }
  v7 = v5;
  v8 = objc_alloc_init((Class)NSMutableDictionary);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "configuration"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "name"));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v10, kSCPropUserDefinedName);

  if (nelog_is_info_logging_enabled())
    objc_msgSend(v6, "setObject:forKeyedSubscript:", &off_1000C16D8, kSCPropNetPPPVerboseLogging);
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v6, kSCEntNetPPP);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "IPv4Settings"));

  if (v11)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "IPv4Settings"));
    v13 = objc_msgSend(v12, "copyLegacyDictionary");
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v13, kSCEntNetIPv4);

  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "IPv6Settings"));

  if (v14)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "IPv6Settings"));
    v16 = objc_msgSend(v15, "copyLegacyDictionary");
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v16, kSCEntNetIPv6);

  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "DNSSettings"));

  if (v17)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "DNSSettings"));
    v19 = objc_msgSend(v18, "copyLegacyDictionary");
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v19, kSCEntNetDNS);

  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "proxySettings"));

  if (v20)
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "proxySettings"));
    v22 = objc_msgSend(v21, "copyLegacyDictionary");
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v22, kSCEntNetProxies);

  }
  if (objc_msgSend(v7, "type") == (id)2)
  {
    v23 = objc_msgSend(v7, "copyLegacyIPSecDictionary");
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v23, kSCEntNetIPSec);

  }
  if (v8)
  {
LABEL_33:
    v46 = CFSTR("NetworkExtension");
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "configuration"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "identifier"));
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "UUIDString"));
    v47 = v37;
    v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1));
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v38, CFSTR("EnvironmentVariables"));

  }
LABEL_34:
  is_extra_vpn_logging_enabled = nelog_is_extra_vpn_logging_enabled();
  if ((_DWORD)is_extra_vpn_logging_enabled)
  {
    v41 = ne_log_obj(is_extra_vpn_logging_enabled, v40);
    v42 = objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      v44 = 138412290;
      v45 = v8;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "service configuration %@", (uint8_t *)&v44, 0xCu);
    }

  }
  return v8;
}

void sub_10005F37C(void *a1, int a2)
{
  _QWORD *v3;
  const char *v4;
  _QWORD *v5;
  id Property;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  id v13;
  _QWORD *v14;
  _QWORD block[4];
  id v16;
  id v17;
  int v18;

  v3 = a1;
  v5 = v3;
  if (a2
    || (!v3 ? (Property = 0) : (Property = objc_getProperty(v3, v4, 360, 1)), objc_msgSend(Property, "type") != (id)1))
  {
    v11 = 0;
  }
  else
  {
    if (qword_1000CF8F0 != -1)
      dispatch_once(&qword_1000CF8F0, &stru_1000BE2C0);
    if (v5)
      v7 = v5[46];
    else
      v7 = 0;
    v8 = (void *)(*(uint64_t (**)(uint64_t))(qword_1000CF8E8 + 96))(v7);
    if (isa_nsdictionary(v8))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", kSCEntNetIPSec));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("LastCause")));

      if (isa_nsnumber(v10))
        v11 = +[NEVPNConnection createDisconnectErrorWithDomain:code:](NEVPNConnection, "createDisconnectErrorWithDomain:code:", CFSTR("NEVPNConnectionErrorDomainIPSec"), objc_msgSend(v10, "unsignedIntValue"));
      else
        v11 = 0;

    }
    else
    {
      v11 = 0;
    }

  }
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100060794;
  block[3] = &unk_1000BED20;
  v16 = v5;
  v17 = v11;
  v18 = a2;
  v13 = v11;
  v14 = v5;
  dispatch_async(v12, block);

}

void sub_10005F548(void *a1)
{
  const char *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
  sub_1000517BC(v2, v1);

}

void sub_10005F574(void *a1, const __CFArray *a2, __CFArray *a3)
{
  _DWORD *v5;
  const char *v6;
  _DWORD *v7;
  id v8;
  CFIndex Count;
  const char *v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  const void *ValueAtIndex;
  int v15;
  uint64_t v16;
  const __CFArray *v17;
  void *v18;
  CFIndex v19;
  CFIndex v20;
  CFIndex v21;
  id Property;
  id v23;
  void *v24;
  const void *v25;
  void *v26;
  void *v27;
  void *v28;
  __CFArray *v29;
  int v30;
  const __CFDictionary *v31;
  void *v32;
  void *v33;
  xpc_object_t v34;
  xpc_object_t v35;
  __CFDictionary *v36;
  void *v37;
  const void *Value;
  const void *v39;
  __CFDictionary *v40;
  __CFDictionary *v41;
  xpc_object_t v42;
  void *v43;
  xpc_object_t v44;
  void *v45;
  id v46;
  const void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  void *v55;
  const void *v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  CFIndex v61;
  void *v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  uint64_t is_extra_vpn_logging_enabled;
  uint64_t v68;
  NSObject *v69;
  void *v70;
  void *v71;
  BOOL v72;
  int v73;
  void *v74;
  void *v75;
  void *v76;
  __CFArray *theArray;
  void *v78;
  CFIndex v79;
  uint64_t v80;
  CFIndex idx;
  uint64_t v82;
  _QWORD v83[2];
  uint64_t v84;
  uint64_t v85;
  uuid_string_t out;
  unsigned __int8 uu[8];
  uint64_t v88;

  v5 = a1;
  v7 = v5;
  if (v5)
  {
    v8 = objc_msgSend(objc_getProperty(v5, v6, 360, 1), "type");
    v73 = v7[88];
  }
  else
  {
    v8 = objc_msgSend(0, "type");
    v73 = 0;
  }
  v75 = v7;
  theArray = a3;
  Count = CFArrayGetCount(a2);
  if (Count < 1)
  {
    v79 = -1;
    v80 = -1;
    idx = -1;
    v13 = -1;
  }
  else
  {
    v11 = Count;
    v12 = 0;
    v13 = -1;
    v80 = -1;
    idx = -1;
    v79 = -1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v12);
      if (CFEqual(ValueAtIndex, kSCEntNetDNS))
      {
        v13 = v12;
      }
      else if (CFEqual(ValueAtIndex, kSCEntNetProxies))
      {
        idx = v12;
      }
      else if (CFEqual(ValueAtIndex, kSCEntNetIPv4))
      {
        v79 = v12;
      }
      else
      {
        v15 = CFEqual(ValueAtIndex, kSCEntNetIPv6);
        v16 = v80;
        if (v15)
          v16 = v12;
        v80 = v16;
      }
      ++v12;
    }
    while (v11 != v12);
  }
  if (v8 == (id)2)
  {
    v18 = v7;
    v17 = theArray;
    v19 = v80;
    v20 = idx;
    v21 = v79;
    if (!v75)
      goto LABEL_20;
    goto LABEL_22;
  }
  v18 = v7;
  v17 = theArray;
  v19 = v80;
  v20 = idx;
  v21 = v79;
  if (v8 == (id)1)
  {
    if (!v75)
    {
LABEL_20:
      Property = 0;
LABEL_23:
      v23 = Property;
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "DNSSettings"));
      v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "proxySettings"));

      goto LABEL_25;
    }
LABEL_22:
    Property = objc_getProperty(v18, v10, 360, 1);
    goto LABEL_23;
  }
  v78 = 0;
  v24 = 0;
LABEL_25:
  v74 = v24;
  if (v21 < 0)
  {
    v72 = 0;
    v28 = v78;
    if (v24)
      goto LABEL_44;
  }
  else
  {
    v25 = CFArrayGetValueAtIndex(v17, v21);
    v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", kSCPropNetOverridePrimary));
    if (isa_nsnumber(v27))
      v72 = objc_msgSend(v27, "intValue") != 0;
    else
      v72 = 0;
    v31 = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, v21);
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "configuration"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "identifier"));
    v28 = v78;
    if (v31)
    {
      v70 = v26;
      v34 = xpc_dictionary_create(0, 0, 0);
      if (NEGetIntFromDictionary(v31, kSCPropNetOverridePrimary, 0))
      {
        v35 = xpc_dictionary_create(0, 0, 0);
        v36 = +[NESMSession copyDefaultRouteCacheIsIPv6:](NESMSession, "copyDefaultRouteCacheIsIPv6:", 0);
        *(_QWORD *)out = v36;
        if (v36)
        {
          v37 = (void *)_CFXPCCreateXPCObjectFromCFObject(v36);
          xpc_dictionary_set_value(v35, "ipv4-subnets", v37);

          v28 = v78;
        }
        myCFRelease(out);
        xpc_dictionary_set_value(v34, "included-routes", v35);

      }
      else
      {
        Value = CFDictionaryGetValue(v31, kSCPropNetIPv4AdditionalRoutes);
        v39 = CFDictionaryGetValue(v31, kSCPropNetIPv4ExcludedRoutes);
        v40 = +[NESMSession copyRouteCacheFromRoutes:isIPv6:](NESMSession, "copyRouteCacheFromRoutes:isIPv6:", Value, 0);
        *(_QWORD *)out = v40;
        v41 = +[NESMSession copyRouteCacheFromRoutes:isIPv6:](NESMSession, "copyRouteCacheFromRoutes:isIPv6:", v39, 0);
        *(_QWORD *)uu = v41;
        if (v40)
        {
          v42 = xpc_dictionary_create(0, 0, 0);
          v43 = (void *)_CFXPCCreateXPCObjectFromCFObject(v40);
          xpc_dictionary_set_value(v42, "ipv4-subnets", v43);

          xpc_dictionary_set_value(v34, "included-routes", v42);
        }
        if (v41)
        {
          v44 = xpc_dictionary_create(0, 0, 0);
          v45 = (void *)_CFXPCCreateXPCObjectFromCFObject(v41);
          xpc_dictionary_set_value(v44, "ipv4-subnets", v45);

          xpc_dictionary_set_value(v34, "excluded-routes", v44);
        }
        myCFRelease(out);
        myCFRelease(uu);
        v28 = v78;
      }
      *(_QWORD *)uu = 0;
      v88 = 0;
      objc_msgSend(v33, "getUUIDBytes:", uu, v70);
      memset(out, 0, sizeof(out));
      uuid_unparse(uu, out);
      NEHelperCacheSetRoutes(out, v34);

      v26 = v71;
    }

    v18 = v75;
    v19 = v80;
    v20 = idx;
    if (v24)
    {
LABEL_44:
      v46 = objc_msgSend(v24, "copyLegacyDictionary");
      v29 = theArray;
      if (!objc_msgSend(v46, "count"))
        goto LABEL_49;
      if (v13 < 0)
      {
        CFArrayAppendValue(a2, kSCEntNetDNS);
        CFArrayAppendValue(theArray, v46);
        v13 = CFArrayGetCount(theArray) - 1;
      }
      else
      {
        v47 = CFArrayGetValueAtIndex(theArray, v13);
        v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
        objc_msgSend(v46, "addEntriesFromDictionary:", v48);
        CFArraySetValueAtIndex(theArray, v13, v46);

        v19 = v80;
      }
      if (!v72)
      {
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectForKeyedSubscript:", kSCPropNetDNSSupplementalMatchDomains));
        v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectForKeyedSubscript:", kSCPropNetDNSSupplementalMatchOrders));
        if ((isa_nsarray(v49) & 1) != 0)
        {
          v24 = v49;
        }
        else
        {
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectForKeyedSubscript:", kSCPropNetDNSSearchDomains));

          if (isa_nsarray(v24))
            objc_msgSend(v46, "setObject:forKeyedSubscript:", v24, kSCPropNetDNSSupplementalMatchDomains);
        }
        v20 = idx;
        if (isa_nsarray(v24))
        {
          *(_QWORD *)uu = 0;
          v88 = 0;
          v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "configuration"));
          v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "identifier"));
          objc_msgSend(v51, "getUUIDBytes:", uu);

          v28 = v78;
          memset(out, 0, sizeof(out));
          uuid_unparse(uu, out);
          v52 = (void *)_CFXPCCreateXPCObjectFromCFObject(v24);
          NEHelperCacheSetMatchDomains(out, v52);

        }
        v19 = v80;
      }
      else
      {
LABEL_49:
        v76 = 0;
        v24 = 0;
      }

      if (v28)
        goto LABEL_58;
LABEL_30:
      v30 = v73;
      goto LABEL_66;
    }
  }
  v76 = 0;
  v29 = theArray;
  if (!v28)
    goto LABEL_30;
LABEL_58:
  v53 = objc_msgSend(v28, "copyLegacyDictionary");
  v54 = kSCPropNetProxiesSupplementalMatchDomains;
  v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectForKeyedSubscript:", kSCPropNetProxiesSupplementalMatchDomains));
  if ((isa_nsarray(v55) & 1) == 0)
  {
    if (isa_nsarray(v24))
    {
      objc_msgSend(v53, "setObject:forKeyedSubscript:", v24, v54);
      if (isa_nsarray(v76))
        objc_msgSend(v53, "setObject:forKeyedSubscript:", v76, kSCPropNetProxiesSupplementalMatchOrders);
    }
  }
  if (v20 < 0)
  {
    CFArrayAppendValue(a2, kSCEntNetProxies);
    CFArrayAppendValue(v29, v53);
    v20 = CFArrayGetCount(v29) - 1;
  }
  else
  {
    v56 = CFArrayGetValueAtIndex(v29, v20);
    v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
    objc_msgSend(v53, "addEntriesFromDictionary:", v57);
    CFArraySetValueAtIndex(v29, v20, v53);

  }
  v30 = v73;
  idx = v20;

  v19 = v80;
LABEL_66:
  if (v30 == 2)
  {
    if ((v79 & 0x8000000000000000) == 0)
    {
      v58 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithDictionary:", CFArrayGetValueAtIndex(v29, v79));
      objc_msgSend(v58, "setObject:forKeyedSubscript:", &off_1000C16F0, kSCPropNetOverridePrimary);
      v85 = kSCPropNetIPv4AdditionalRoutes;
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v85, 1));
      objc_msgSend(v58, "removeObjectsForKeys:", v59);

      v19 = v80;
      CFArraySetValueAtIndex(v29, v79, v58);

    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      v60 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithDictionary:", CFArrayGetValueAtIndex(v29, v19));
      objc_msgSend(v60, "setObject:forKeyedSubscript:", &off_1000C16F0, kSCPropNetOverridePrimary);
      v84 = kSCPropNetIPv6AdditionalRoutes;
      v61 = v19;
      v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v84, 1));
      objc_msgSend(v60, "removeObjectsForKeys:", v62);

      CFArraySetValueAtIndex(v29, v61, v60);
    }
    if ((v13 & 0x8000000000000000) == 0)
    {
      v63 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithDictionary:", CFArrayGetValueAtIndex(v29, v13));
      v83[0] = kSCPropNetDNSSupplementalMatchDomains;
      v83[1] = kSCPropNetDNSSupplementalMatchDomainsNoSearch;
      v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v83, 2));
      objc_msgSend(v63, "removeObjectsForKeys:", v64);

      CFArraySetValueAtIndex(v29, v13, v63);
    }
    if ((idx & 0x8000000000000000) == 0)
    {
      v65 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithDictionary:", CFArrayGetValueAtIndex(v29, idx));
      v82 = kSCPropNetProxiesSupplementalMatchDomains;
      v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v82, 1));
      objc_msgSend(v65, "removeObjectsForKeys:", v66);

      CFArraySetValueAtIndex(v29, idx, v65);
    }
  }
  is_extra_vpn_logging_enabled = nelog_is_extra_vpn_logging_enabled();
  if ((_DWORD)is_extra_vpn_logging_enabled)
  {
    v68 = ne_log_large_obj(is_extra_vpn_logging_enabled);
    v69 = objc_claimAutoreleasedReturnValue(v68);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)out = 138412546;
      *(_QWORD *)&out[4] = a2;
      *(_WORD *)&out[12] = 2112;
      *(_QWORD *)&out[14] = v29;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_INFO, "names %@, dictionaries %@", (uint8_t *)out, 0x16u);
    }

  }
}

id sub_10005FFC4(void *a1, const void *a2)
{
  id v3;
  const char *v4;
  id v5;
  void *v6;
  const char *v7;
  id Property;
  const char *v9;
  id v10;
  void *v11;
  id v12;
  id v13;

  v3 = a1;
  if (!CFEqual(a2, kSCPropNetIPSecXAuthPassword))
  {
    if (!CFEqual(a2, kSCPropNetIPSecSharedSecret))
    {
LABEL_19:
      v12 = 0;
      goto LABEL_20;
    }
    if (v3)
      Property = objc_getProperty(v3, v7, 360, 1);
    else
      Property = 0;
    if (objc_msgSend(Property, "type") == (id)1)
    {
      if (v3)
      {
LABEL_10:
        v10 = objc_getProperty(v3, v9, 360, 1);
LABEL_11:
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "sharedSecretKeychainItem"));
        goto LABEL_12;
      }
    }
    else
    {
      if (v3)
        v13 = objc_getProperty(v3, v9, 360, 1);
      else
        v13 = 0;
      if (objc_msgSend(v13, "type") != (id)2)
        goto LABEL_19;
      if (v3)
        goto LABEL_10;
    }
    v10 = 0;
    goto LABEL_11;
  }
  if (v3)
    v5 = objc_getProperty(v3, v4, 360, 1);
  else
    v5 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "passwordKeychainItem"));
LABEL_12:
  v11 = v6;
  if (!v6)
    goto LABEL_19;
  v12 = objc_msgSend(v6, "copyPassword");

LABEL_20:
  return v12;
}

void sub_1000600FC(void *a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = a1;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "server"));
  objc_msgSend(v4, "requestInstallForSession:withParentSession:exclusive:", v3, 0, a2);

}

void sub_10006014C(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "server"));
  objc_msgSend(v2, "requestUninstallForSession:", v1);

}

void sub_100060190(void *a1, const char *a2)
{
  id v3;
  size_t v4;
  size_t v5;
  size_t v6;
  char *v7;
  char *v8;
  CFURLRef v9;
  NSObject *v10;
  const __CFURL *v11;
  _QWORD v12[4];
  CFURLRef v13;
  id v14;

  v3 = a1;
  if (a2)
  {
    v4 = strlen(a2);
    if (v4)
    {
      v5 = v4;
      v6 = v4 + 73;
      v7 = (char *)malloc_type_malloc(v4 + 73, 0xD2DEECA7uLL);
      if (v7)
      {
        v8 = v7;
        strlcpy(v7, "prefs:root=General&path=ManagedConfigurationList/ProfileError&profileID=", v6);
        strlcat(v8, a2, v6);
        v9 = CFURLCreateWithBytes(0, (const UInt8 *)v8, v5 + 72, 0x8000100u, 0);
        free(v8);
        v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "queue"));
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_100060678;
        v12[3] = &unk_1000BEB58;
        v13 = v9;
        v14 = v3;
        v11 = v9;
        dispatch_async(v10, v12);

      }
    }
  }

}

void sub_1000602C0(void *a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a1;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "queue"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100060354;
  v6[3] = &unk_1000BEA98;
  v7 = v3;
  v8 = a2;
  v5 = v3;
  dispatch_async(v4, v6);

}

void sub_100060354(uint64_t a1)
{
  const char *v2;
  id v3;
  void *v4;
  const char *v5;
  id Property;
  const char *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  _QWORD v23[4];
  id v24;
  uint64_t v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;

  if (!CFEqual(*(CFTypeRef *)(a1 + 40), kSCPropNetIPSecXAuthPassword))
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 40), kSCPropNetIPSecSharedSecret))
    {
      Property = *(id *)(a1 + 32);
      if (Property)
        Property = objc_getProperty(Property, v5, 360, 1);
      v8 = objc_msgSend(Property, "type");
      v9 = *(id *)(a1 + 32);
      if (v8 == (id)1)
        goto LABEL_13;
      if (v9)
        v9 = objc_getProperty(v9, v7, 360, 1);
      if (objc_msgSend(v9, "type") == (id)2)
      {
        v9 = *(id *)(a1 + 32);
LABEL_13:
        if (v9)
          v9 = objc_getProperty(v9, v7, 360, 1);
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "sharedSecretKeychainItem"));
        goto LABEL_16;
      }
    }
    v10 = 0;
    goto LABEL_22;
  }
  v3 = *(id *)(a1 + 32);
  if (v3)
    v3 = objc_getProperty(v3, v2, 360, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "passwordKeychainItem"));
LABEL_16:
  v10 = v4;
  if (v4)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));

    if (v11)
    {
      v14 = ne_log_obj(v12, v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(_QWORD *)(a1 + 32);
        v17 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        v27 = v16;
        v28 = 2112;
        v29 = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%@ throwing away saved %@", buf, 0x16u);
      }

      objc_msgSend(v10, "setIdentifier:", 0);
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NEConfigurationManager sharedManagerForAllUsers](NEConfigurationManager, "sharedManagerForAllUsers"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_1000605A4;
      v23[3] = &unk_1000BE348;
      v21 = *(id *)(a1 + 32);
      v22 = *(_QWORD *)(a1 + 40);
      v24 = v21;
      v25 = v22;
      objc_msgSend(v18, "saveConfiguration:withCompletionQueue:handler:", v19, v20, v23);

    }
  }
LABEL_22:

}

void sub_1000605A4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  void *v15;

  v3 = a2;
  v5 = v3;
  if (v3)
  {
    v6 = ne_log_obj(v3, v4);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 40);
      v10 = 138412802;
      v11 = v8;
      v12 = 2112;
      v13 = v9;
      v14 = 2112;
      v15 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%@ failed to clear saved %@: %@", (uint8_t *)&v10, 0x20u);
    }

  }
}

void sub_100060678(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  v3 = objc_msgSend(v2, "openSensitiveURL:withOptions:", *(_QWORD *)(a1 + 32), 0);

  v6 = ne_log_obj(v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v3)
  {
    if (v8)
    {
      v10 = *(_QWORD *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 40);
      v14 = 138412546;
      v15 = v9;
      v16 = 2112;
      v17 = v10;
      v11 = "%@ launched profile janitor with URL %@";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, v11, (uint8_t *)&v14, 0x16u);
    }
  }
  else if (v8)
  {
    v13 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v14 = 138412546;
    v15 = v12;
    v16 = 2112;
    v17 = v13;
    v11 = "%@ failed to launch profile janitor with URL %@";
    goto LABEL_6;
  }

}

id sub_100060794(uint64_t a1)
{
  id result;
  uint64_t v3;

  result = objc_msgSend(*(id *)(a1 + 32), "setLastDisconnectError:", *(_QWORD *)(a1 + 40));
  v3 = *(unsigned int *)(a1 + 48);
  if (v3 <= 3)
    return objc_msgSend(*(id *)(a1 + 32), "setStatus:", dword_10009EFC0[v3]);
  return result;
}

void sub_1000607E0(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  __CFString *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  char v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  void *v29;

  if (objc_msgSend(*(id *)(a1 + 32), "type") == 2)
  {
    v25 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "appVPN"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "appRules"));
    if (objc_msgSend(v3, "count"))
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "isActive");

      if (v4)
      {
        v5 = sub_100060A9C(*(void **)(a1 + 32));
        v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
        v7 = isa_nsstring(v6);
        if ((_DWORD)v7)
        {
          v9 = ne_log_obj(v7, v8);
          v10 = objc_claimAutoreleasedReturnValue(v9);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            v11 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 138412546;
            v27 = v11;
            v28 = 2112;
            v29 = v6;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@: Re-setting policies because the installed apps changed for tunnel \"%@\"", buf, 0x16u);
          }

          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "appVPN"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "appRules"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uid"));
          sub_10003A874((uint64_t)v12, v15, (uint64_t)objc_msgSend(v16, "intValue"));

          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "appVPN"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "appRules"));
          LOBYTE(v16) = sub_100060D70(*(void **)(a1 + 32));
          v21 = sub_100060E38(*(void **)(a1 + 32));
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "appVPN"));
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "excludedDomains"));
          sub_10003BDDC((uint64_t)v17, v20, v6, 0, (char)v16, v21, 0, 0, v24);

        }
      }
    }
    else
    {

    }
  }
}

__CFString *sub_100060A9C(void *a1)
{
  void *v2;
  void *v3;
  __CFString *NetworkServiceEntity;
  const __CFDictionary *v5;
  CFTypeID TypeID;
  void *v7;
  void *v8;
  const __CFString *v9;
  const __CFDictionary *v10;
  __CFString *Value;
  CFTypeID v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  __CFString *v21;
  uint8_t buf[24];

  if (a1)
  {
    *(_QWORD *)buf = 0;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "identifier"));
    NetworkServiceEntity = (__CFString *)SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, (CFStringRef)objc_msgSend(v3, "UUIDString"), kSCEntNetIPv4);

    v21 = NetworkServiceEntity;
    if (!NetworkServiceEntity)
      goto LABEL_8;
    v5 = (const __CFDictionary *)SCDynamicStoreCopyValue(0, NetworkServiceEntity);
    *(_QWORD *)buf = v5;
    if (!v5)
      goto LABEL_7;
    NetworkServiceEntity = (__CFString *)CFDictionaryGetValue(v5, kSCPropInterfaceName);
    TypeID = CFStringGetTypeID();
    if (!NetworkServiceEntity)
      goto LABEL_8;
    if (CFGetTypeID(NetworkServiceEntity) == TypeID)
      CFRetain(NetworkServiceEntity);
    else
LABEL_7:
      NetworkServiceEntity = 0;
LABEL_8:
    myCFRelease(buf);
    myCFRelease(&v21);
    if (NetworkServiceEntity
      && !-[__CFString isEqualToString:](NetworkServiceEntity, "isEqualToString:", &stru_1000BF2E8))
    {
      goto LABEL_17;
    }
    *(_QWORD *)buf = 0;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
    v9 = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, (CFStringRef)objc_msgSend(v8, "UUIDString"), kSCEntNetIPv6);

    v21 = (__CFString *)v9;
    if (!v9)
      goto LABEL_15;
    v10 = (const __CFDictionary *)SCDynamicStoreCopyValue(0, v9);
    *(_QWORD *)buf = v10;
    if (v10
      && (Value = (__CFString *)CFDictionaryGetValue(v10, kSCPropInterfaceName), v12 = CFStringGetTypeID(), Value)
      && CFGetTypeID(Value) == v12)
    {
      CFRetain(Value);

    }
    else
    {
LABEL_15:
      Value = NetworkServiceEntity;
    }
    myCFRelease(buf);
    v13 = myCFRelease(&v21);
    NetworkServiceEntity = Value;
    if (Value)
    {
LABEL_17:
      v15 = -[__CFString isEqualToString:](NetworkServiceEntity, "isEqualToString:", &stru_1000BF2E8);
      if (!(_DWORD)v15)
        return NetworkServiceEntity;
      v17 = ne_log_obj(v15, v16);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = a1;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%@: received empty interface name", buf, 0xCu);
      }
    }
    else
    {
      v19 = ne_log_obj(v13, v14);
      v18 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = a1;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%@: failed to query interface name", buf, 0xCu);
      }
      NetworkServiceEntity = 0;
    }

    return NetworkServiceEntity;
  }
  return (__CFString *)0;
}

const __CFString *sub_100060D70(void *a1)
{
  void *v1;
  void *v2;
  const __CFString *NetworkServiceEntity;
  const __CFString *v5;
  CFPropertyListRef v6;

  if (!a1)
    return 0;
  v6 = 0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "identifier"));
  NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, (CFStringRef)objc_msgSend(v2, "UUIDString"), kSCEntNetDNS);

  v5 = NetworkServiceEntity;
  if (NetworkServiceEntity)
  {
    v6 = SCDynamicStoreCopyValue(0, NetworkServiceEntity);
    NetworkServiceEntity = (const __CFString *)(v6 != 0);
  }
  myCFRelease(&v6);
  myCFRelease(&v5);
  return NetworkServiceEntity;
}

unint64_t sub_100060E38(void *a1)
{
  void *v1;
  void *v2;
  unint64_t NetworkServiceEntity;
  const __CFString *v4;
  unint64_t v6;
  const __CFString *v7;

  if (!a1)
    return 0;
  v7 = 0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "identifier"));
  NetworkServiceEntity = (unint64_t)SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, (CFStringRef)objc_msgSend(v2, "UUIDString"), kSCEntNetProxies);

  v6 = NetworkServiceEntity;
  if (NetworkServiceEntity)
  {
    v4 = (const __CFString *)SCDynamicStoreCopyValue(0, (CFStringRef)NetworkServiceEntity);
    NetworkServiceEntity = (unint64_t)v4;
    v7 = v4;
    if (v4)
      NetworkServiceEntity = NEGetIntFromDictionary(v4, kSCPropNetProxiesHTTPEnable, 0)
                          || NEGetIntFromDictionary(NetworkServiceEntity, kSCPropNetProxiesHTTPSEnable, 0)|| NEGetIntFromDictionary(NetworkServiceEntity, kSCPropNetProxiesProxyAutoConfigEnable, 0) != 0;
  }
  myCFRelease(&v7);
  myCFRelease(&v6);
  return NetworkServiceEntity;
}

void sub_100060F60(uint64_t a1)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  if (qword_1000CF8F0 != -1)
    dispatch_once(&qword_1000CF8F0, &stru_1000BE2C0);
  v2 = *(void (**)(uint64_t))(qword_1000CF8E8 + 160);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      v4 = *(_QWORD *)(v3 + 368);
    else
      v4 = 0;
    v2(v4);
  }
}

void sub_100060FDC(uint64_t a1)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  if (qword_1000CF8F0 != -1)
    dispatch_once(&qword_1000CF8F0, &stru_1000BE2C0);
  v2 = *(void (**)(uint64_t))(qword_1000CF8E8 + 152);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      v4 = *(_QWORD *)(v3 + 368);
    else
      v4 = 0;
    v2(v4);
  }
}

void sub_100061058(uint64_t a1)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  if (qword_1000CF8F0 != -1)
    dispatch_once(&qword_1000CF8F0, &stru_1000BE2C0);
  v2 = *(void (**)(uint64_t))(qword_1000CF8E8 + 144);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      v4 = *(_QWORD *)(v3 + 368);
    else
      v4 = 0;
    v2(v4);
  }
}

void sub_1000610D4(uint64_t a1)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  if (qword_1000CF8F0 != -1)
    dispatch_once(&qword_1000CF8F0, &stru_1000BE2C0);
  v2 = *(void (**)(uint64_t))(qword_1000CF8E8 + 136);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      v4 = *(_QWORD *)(v3 + 368);
    else
      v4 = 0;
    v2(v4);
  }
}

void sub_100061150(uint64_t a1)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  if (qword_1000CF8F0 != -1)
    dispatch_once(&qword_1000CF8F0, &stru_1000BE2C0);
  v2 = *(void (**)(uint64_t))(qword_1000CF8E8 + 128);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      v4 = *(_QWORD *)(v3 + 368);
    else
      v4 = 0;
    v2(v4);
  }
}

void sub_1000611CC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD block[5];

  if (qword_1000CF8F0 != -1)
    dispatch_once(&qword_1000CF8F0, &stru_1000BE2C0);
  v2 = qword_1000CF8E8;
  if (*(_QWORD *)(qword_1000CF8E8 + 120))
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000612A4;
    block[3] = &unk_1000BEB80;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async(v3, block);

    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
      v5 = *(_QWORD *)(v4 + 368);
    else
      v5 = 0;
    (*(void (**)(uint64_t))(v2 + 120))(v5);
  }
}

void sub_1000612A4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  void *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
  sub_10002EF6C((uint64_t)v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
  sub_10002C404((uint64_t)v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
  sub_10002C5A0((uint64_t)v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
  sub_10002F054((uint64_t)v5);

  sub_10007BFA4(*(void **)(a1 + 32), v6);
  v8 = *(void **)(a1 + 32);
  if (v8)
    objc_setProperty_atomic(v8, v7, 0, 376);
}

void sub_100061348(uint64_t a1)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  NSObject *v7;
  id v8;
  _QWORD v9[5];
  id v10;

  if (qword_1000CF8F0 != -1)
    dispatch_once(&qword_1000CF8F0, &stru_1000BE2C0);
  v2 = *(void (**)(uint64_t))(qword_1000CF8E8 + 112);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      v4 = *(_QWORD *)(v3 + 368);
    else
      v4 = 0;
    v2(v4);
    v5 = sub_100061444(*(_QWORD **)(a1 + 32));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10006162C;
    v9[3] = &unk_1000BEB58;
    v9[4] = *(_QWORD *)(a1 + 32);
    v10 = v6;
    v8 = v6;
    dispatch_async(v7, v9);

  }
}

id sub_100061444(_QWORD *a1)
{
  void (*v2)(_QWORD, _DWORD *);
  SEL v3;
  const char *v4;
  void *v5;
  void *v6;
  void *v7;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  _QWORD *v14;
  __int16 v15;
  void *v16;
  void *v17;
  _QWORD v18[2];
  _DWORD v19[2];

  if (!a1)
    return 0;
  if (qword_1000CF8F0 != -1)
    dispatch_once(&qword_1000CF8F0, &stru_1000BE2C0);
  v2 = *(void (**)(_QWORD, _DWORD *))(qword_1000CF8E8 + 176);
  if (!v2)
    return 0;
  v2(a1[46], v19);
  if (objc_msgSend(objc_getProperty(a1, v3, 360, 1), "type") == (id)2)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v19[0]));
    v18[0] = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v19[1]));
    v18[1] = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v18, 2));

  }
  else
  {
    v9 = objc_msgSend(objc_getProperty(a1, v4, 360, 1), "type");
    if (v9 != (id)1)
    {
      v7 = 0;
      goto LABEL_12;
    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v19[0]));
    v17 = v5;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
  }

LABEL_12:
  v11 = ne_log_obj(v9, v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    v13 = 138412546;
    v14 = a1;
    v15 = 2112;
    v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%@: bridge_functions->get_agent_pids() returned PIDs %@", (uint8_t *)&v13, 0x16u);
  }

  return v7;
}

void sub_10006162C(uint64_t a1, const char *a2)
{
  void *v3;
  __CFString *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t IsVPN;
  int v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  _DWORD *v21;
  id v22;
  char v23;
  void *v24;
  void *v25;
  void *v26;
  const __CFString *NetworkServiceEntity;
  void *v28;
  __CFString *v29;
  void *v30;
  void *v31;
  _DWORD *v32;
  int v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  char v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  unsigned __int8 v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  _BYTE buf[12];
  __int16 v65;
  void *v66;
  __int16 v67;
  void *v68;

  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_setProperty_atomic(v3, a2, *(id *)(a1 + 40), 376);
    v3 = *(void **)(a1 + 32);
  }
  v4 = sub_100060A9C(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = isa_nsstring(v5);
  if ((_DWORD)v6)
  {
    v8 = ne_log_obj(v6, v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = *(void **)(a1 + 32);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "server"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "primaryPhysicalInterface"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "interfaceName"));
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = v10;
      v65 = 2112;
      v66 = v5;
      v67 = 2112;
      v68 = v13;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%@: installing rules on tunnel \"%@\" primary \"%@\"", buf, 0x20u);

    }
    v14 = objc_retainAutorelease(v5);
    IsVPN = NEVirtualInterfaceNameIsVPN(objc_msgSend(v14, "UTF8String"), 1);
    v16 = IsVPN;
    v18 = ne_log_obj(IsVPN, v17);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    v20 = v19;
    if (v16)
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v14;
        _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Marked the \"%@\" interface as VPN", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Failed to mark the \"%@\" interface as VPN", buf, 0xCu);
    }

    v21 = *(_DWORD **)(a1 + 32);
    v22 = v14;
    if (v21)
    {
      if (v21[88] == 2)
      {
        v23 = 0;
        v24 = 0;
      }
      else
      {
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "configuration"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "identifier"));
        NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, (CFStringRef)objc_msgSend(v26, "UUIDString"), kSCEntNetDNS);

        *(_QWORD *)buf = NetworkServiceEntity;
        if (NetworkServiceEntity)
          v28 = (void *)SCDynamicStoreCopyValue(0, NetworkServiceEntity);
        else
          v28 = 0;
        myCFRelease(buf);
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectForKeyedSubscript:", kSCPropNetDNSSupplementalMatchDomains));
        if (v28)
        {
          v29 = (__CFString *)sub_100062990(v21);
          v30 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKeyedSubscript:](v29, "objectForKeyedSubscript:", kSCPropNetOverridePrimary));
          v23 = objc_msgSend(v30, "BOOLValue");

        }
        else
        {
          v23 = 0;
        }

      }
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "policySession"));
      sub_100045A58((uint64_t)v31, v22, v24, v23);

    }
    sub_10007BE2C(*(void **)(a1 + 32), v22);
    v32 = *(_DWORD **)(a1 + 32);
    if (v32)
    {
      v33 = v32[88];
      if (v33 == 1)
      {
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "configuration"));
        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "VPN"));
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "protocol"));
        v49 = objc_msgSend(v48, "includeAllNetworks");

        if ((v49 & 1) == 0)
          sub_100061C18(*(void **)(a1 + 32), v22);
      }
      else if (v33 == 2)
      {
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "policySession"));
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "appVPN"));
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "appRules"));
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uid"));
        sub_10003A874((uint64_t)v34, v37, (uint64_t)objc_msgSend(v38, "intValue"));

        v63 = v5;
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
        v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "appVPN"));
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "appRules"));
        LOBYTE(v38) = sub_100060D70(*(void **)(a1 + 32));
        v42 = sub_100060E38(*(void **)(a1 + 32));
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
        v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "appVPN"));
        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "excludedDomains"));
        sub_10003BDDC((uint64_t)v39, v41, v22, 0, (char)v38, v42, 0, 0, v45);

        v5 = v63;
      }
    }
  }
  if (objc_msgSend(*(id *)(a1 + 32), "type") == 1)
  {
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "VPN"));
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "exceptionApps"));

    if (v52)
    {
      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
      v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
      v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "VPN"));
      v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "exceptionApps"));
      v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "server"));
      v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "primaryPhysicalInterface"));
      v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "interfaceName"));
      v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uid"));
      sub_10003AA34((uint64_t)v53, v56, v59, (int)objc_msgSend(v60, "intValue"));

    }
  }
  v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
  sub_10002EE84((uint64_t)v61);

}

void sub_100061C18(void *a1, void *a2)
{
  const char *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  size_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  uint32_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  __CFString *v31;
  uint64_t v32;
  __CFString *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  NSObject *v38;
  id v39;
  id v40;
  uint64_t v41;
  void *i;
  id v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int16 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int16 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  void *v87;
  id v88;
  NSObject *v89;
  uint64_t v90;
  int v91;
  const char *v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  NSObject *v96;
  const char *v97;
  uint64_t v98;
  void *v99;
  SEL v100;
  id v101;
  void *v102;
  void *v103;
  void *v104;
  char v105;
  void *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  void *v112;
  int __errnum;
  int __errnuma;
  char *__s2;
  int v116;
  void *v117;
  void *v118;
  void *v119;
  id v120;
  size_t v121;
  int v122[4];
  uint64_t v123;
  uint8_t buf[32];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  _BYTE v131[128];
  unsigned __int8 v132[128];
  uint8_t v133[72];

  v120 = a2;
  if (!a1)
    goto LABEL_100;
  if (objc_msgSend(objc_getProperty(a1, v3, 360, 1), "type") != (id)2)
  {
    if (objc_msgSend(objc_getProperty(a1, v4, 360, 1), "type") != (id)1)
      goto LABEL_100;
    v31 = (__CFString *)sub_100062990(a1);
    v33 = v31;
    if (v31)
    {
      v34 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKeyedSubscript:](v31, "objectForKeyedSubscript:", kSCPropNetIPv4AdditionalRoutes));
      if (v34)
      {
        v36 = v34;
        v37 = a1;
        v30 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v34, "count"));
        memset(v133, 0, 64);
        v38 = v36;
        v39 = -[NSObject countByEnumeratingWithState:objects:count:](v38, "countByEnumeratingWithState:objects:count:", v133, buf, 16);
        if (v39)
        {
          v40 = v39;
          v41 = **(_QWORD **)&v133[16];
          do
          {
            for (i = 0; i != v40; i = (char *)i + 1)
            {
              if (**(_QWORD **)&v133[16] != v41)
                objc_enumerationMutation(v38);
              v43 = objc_msgSend(objc_alloc((Class)NEIPv4Route), "initFromLegacyDictionary:", *(_QWORD *)(*(_QWORD *)&v133[8] + 8 * (_QWORD)i));
              objc_msgSend(v30, "addObject:", v43);

            }
            v40 = -[NSObject countByEnumeratingWithState:objects:count:](v38, "countByEnumeratingWithState:objects:count:", v133, buf, 16);
          }
          while (v40);
        }

        a1 = v37;
LABEL_107:

        if (v30)
          goto LABEL_99;
        goto LABEL_100;
      }
      v110 = ne_log_obj(0, v35);
      v111 = objc_claimAutoreleasedReturnValue(v110);
      if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_ERROR, "Failed to get included routes dictionary", buf, 2u);
      }

      v38 = 0;
    }
    else
    {
      v109 = ne_log_obj(0, v32);
      v38 = objc_claimAutoreleasedReturnValue(v109);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Unable to get IPv4 dictionary from dynamic store", buf, 2u);
      }
    }
    v30 = 0;
    goto LABEL_107;
  }
  v5 = (const char *)objc_msgSend(objc_retainAutorelease(v120), "UTF8String");
  v6 = if_nametoindex(v5);
  v7 = v6;
  v9 = ne_log_obj(v6, v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v5;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%@: Getting routes for interface %s[%u]", buf, 0x1Cu);
  }
  v118 = a1;

  *(_OWORD *)v122 = xmmword_10009EFA4;
  v123 = 7;
  v11 = 3;
  while (1)
  {
    v121 = 0;
    if (sysctl(v122, 6u, 0, &v121, 0, 0) < 0)
    {
      __errnuma = *__error();
      v19 = strerror_r(__errnuma, (char *)buf, 0x80uLL);
      if ((_DWORD)v19)
        buf[0] = 0;
      v21 = ne_log_obj(v19, v20);
      v18 = objc_claimAutoreleasedReturnValue(v21);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
        goto LABEL_27;
      *(_DWORD *)v133 = 67109378;
      *(_DWORD *)&v133[4] = __errnuma;
      *(_WORD *)&v133[8] = 2080;
      *(_QWORD *)&v133[10] = buf;
      v22 = v133;
      v23 = v18;
      v24 = "Unable to get size estimate for routing table: [%d] %s";
      goto LABEL_25;
    }
    v12 = 5 * v121 >= 4 ? ((((5 * v121) >> 2) - 1) | 3) + 1 : 4;
    v121 = v12;
    v13 = (unsigned __int16 *)malloc_type_malloc(v12, 0xF3FF78F5uLL);
    if (v13)
      break;
    v25 = ne_log_obj(0, v14);
    v18 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v121;
      v22 = buf;
      v23 = v18;
      v24 = "malloc(%zu) failed";
      v26 = 12;
      goto LABEL_26;
    }
LABEL_27:

    if (!--v11)
    {
      v30 = 0;
      goto LABEL_98;
    }
  }
  v15 = v13;
  if (sysctl(v122, 6u, v13, &v121, 0, 0) < 0)
  {
    __errnum = *__error();
    free(v15);
    if (__errnum == 12)
    {
      v17 = ne_log_obj(12, v16);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Unable to get routing table because allocated buffer was too small", buf, 2u);
      }
      goto LABEL_27;
    }
    v27 = strerror_r(__errnum, (char *)buf, 0x80uLL);
    if ((_DWORD)v27)
      buf[0] = 0;
    v29 = ne_log_obj(v27, v28);
    v18 = objc_claimAutoreleasedReturnValue(v29);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      goto LABEL_27;
    *(_DWORD *)v133 = 67109378;
    *(_DWORD *)&v133[4] = __errnum;
    *(_WORD *)&v133[8] = 2080;
    *(_QWORD *)&v133[10] = buf;
    v22 = v133;
    v23 = v18;
    v24 = "Unable to get routing table: [%d] %s";
LABEL_25:
    v26 = 18;
LABEL_26:
    _os_log_fault_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, v24, v22, v26);
    goto LABEL_27;
  }
  v44 = objc_alloc_init((Class)NSMutableArray);
  v30 = v44;
  if ((uint64_t)v121 < 1)
    goto LABEL_97;
  v46 = (unint64_t)v15 + v121;
  v47 = v15;
  v116 = v7;
  while (2)
  {
    v48 = (unsigned __int8 *)(v47 + 46);
    if ((unint64_t)(v47 + 46) > v46)
    {
      v95 = ne_log_obj(v44, v45);
      v96 = objc_claimAutoreleasedReturnValue(v95);
      if (!os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
      {
LABEL_96:

        break;
      }
      *(_WORD *)buf = 0;
      v97 = "Not enough data to read rtm";
LABEL_110:
      _os_log_error_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_ERROR, v97, buf, 2u);
      goto LABEL_96;
    }
    v49 = *v47;
    if ((unint64_t)v47 + v49 > v46)
    {
      v98 = ne_log_obj(v44, v45);
      v96 = objc_claimAutoreleasedReturnValue(v98);
      if (!os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
        goto LABEL_96;
      *(_WORD *)buf = 0;
      v97 = "Not enough data to read routing table message";
      goto LABEL_110;
    }
    if (v7 != v47[2] || (*((_DWORD *)v47 + 2) & 0x1800801) != 0x801 || (~*((_DWORD *)v47 + 3) & 7) != 0)
      goto LABEL_67;
    v50 = v15;
    v51 = objc_opt_self(NESMLegacySession);
    v53 = ne_log_obj(v51, v52);
    v54 = objc_claimAutoreleasedReturnValue(v53);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "Attempting to parse route", buf, 2u);
    }

    v57 = 0;
    memset(v132, 0, sizeof(v132));
    memset(v131, 0, sizeof(v131));
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    memset(buf, 0, sizeof(buf));
    while (2)
    {
      v58 = *v48;
      if (v58 >= 0x81)
      {
        v68 = ne_log_obj(v55, v56);
        v67 = objc_claimAutoreleasedReturnValue(v68);
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          v91 = *v48;
          *(_DWORD *)v133 = 67109120;
          *(_DWORD *)&v133[4] = v91;
          _os_log_error_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "sockaddr size %u is too large!", v133, 8u);
        }
        v15 = v50;
        goto LABEL_64;
      }
      v55 = memcpy(&buf[v57], v48, *v48);
      v59 = ((v58 - 1) & 0xFFFFFFFC) + 4;
      if (!v58)
        v59 = 4;
      v48 += v59;
      v57 += 128;
      if (v57 != 384)
        continue;
      break;
    }
    if (v131[1] != 18)
    {
      v69 = ne_log_obj(v55, v56);
      v67 = objc_claimAutoreleasedReturnValue(v69);
      v15 = v50;
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v133 = 67109120;
        *(_DWORD *)&v133[4] = v131[1];
        _os_log_debug_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "Gateway family %u is wrong!", v133, 8u);
      }
LABEL_64:
      v7 = v116;
LABEL_65:

      v70 = 0;
      goto LABEL_66;
    }
    v60 = link_ntoa((const sockaddr_dl *)v131);
    v62 = ne_log_obj(v60, v61);
    v63 = objc_claimAutoreleasedReturnValue(v62);
    v15 = v50;
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
    {
      v92 = "NULL";
      if (v60)
        v92 = v60;
      *(_DWORD *)v133 = 67110914;
      *(_DWORD *)&v133[4] = v131[0];
      *(_WORD *)&v133[8] = 1024;
      *(_DWORD *)&v133[10] = v131[1];
      *(_WORD *)&v133[14] = 1024;
      *(_DWORD *)&v133[16] = *(unsigned __int16 *)&v131[2];
      *(_WORD *)&v133[20] = 1024;
      *(_DWORD *)&v133[22] = v131[4];
      *(_WORD *)&v133[26] = 1024;
      *(_DWORD *)&v133[28] = v131[5];
      *(_WORD *)&v133[32] = 1024;
      *(_DWORD *)&v133[34] = v131[6];
      *(_WORD *)&v133[38] = 1024;
      *(_DWORD *)&v133[40] = v131[7];
      *(_WORD *)&v133[44] = 2080;
      *(_QWORD *)&v133[46] = v92;
      _os_log_debug_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "Gateway: length %u, family %u, index %u, type %u, name length %u, address length %u, selector length %u, string %s", v133, 0x36u);
    }

    v64 = strcmp(v60, v5);
    v7 = v116;
    if ((_DWORD)v64)
    {
      v66 = ne_log_obj(v64, v65);
      v67 = objc_claimAutoreleasedReturnValue(v66);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v133 = 136315394;
        *(_QWORD *)&v133[4] = v60;
        *(_WORD *)&v133[12] = 2080;
        *(_QWORD *)&v133[14] = v5;
        _os_log_debug_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "Gateway interface string \"%s\" doesn't match \"%s\"", v133, 0x16u);
      }
      goto LABEL_65;
    }
    if (buf[1] != 2)
    {
      v90 = ne_log_obj(v64, v65);
      v67 = objc_claimAutoreleasedReturnValue(v90);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v133 = 67109120;
        *(_DWORD *)&v133[4] = buf[1];
        _os_log_error_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "Destination address family %u is wrong!", v133, 8u);
      }
      goto LABEL_65;
    }
    v71 = NECreateAddressString(buf);
    v73 = ne_log_obj(v71, v72);
    v74 = objc_claimAutoreleasedReturnValue(v73);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v133 = 67109634;
      *(_DWORD *)&v133[4] = buf[0];
      *(_WORD *)&v133[8] = 1024;
      *(_DWORD *)&v133[10] = buf[1];
      *(_WORD *)&v133[14] = 2112;
      *(_QWORD *)&v133[16] = v71;
      _os_log_debug_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "Destination: length %u, family %u, string %@", v133, 0x18u);
    }

    v77 = ne_log_obj(v75, v76);
    v78 = objc_claimAutoreleasedReturnValue(v77);
    v79 = v78;
    v112 = (void *)v71;
    if (v71)
    {
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v133 = 67109376;
        *(_DWORD *)&v133[4] = v132[0];
        *(_WORD *)&v133[8] = 1024;
        *(_DWORD *)&v133[10] = v132[1];
        _os_log_debug_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "Netmask: length %u, family %u", v133, 0xEu);
      }

      *(_WORD *)v132 = 528;
      v80 = NECreateAddressString(v132);
      v82 = ne_log_obj(v80, v81);
      v83 = objc_claimAutoreleasedReturnValue(v82);
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v133 = 138412290;
        *(_QWORD *)&v133[4] = v80;
        _os_log_debug_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "Netmask: string %@", v133, 0xCu);
      }

      if (v80)
      {
        v86 = v80;
        v87 = v112;
        v88 = objc_msgSend(objc_alloc((Class)NEIPv4Route), "initWithDestinationAddress:subnetMask:", v112, v86);
        v89 = v86;
        v70 = v88;
        goto LABEL_91;
      }
      v93 = ne_log_obj(v84, v85);
      v94 = objc_claimAutoreleasedReturnValue(v93);
      if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v133 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_ERROR, "Netmask address string is nil!", v133, 2u);
      }

      v89 = 0;
    }
    else
    {
      if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v133 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "Destination address string is nil!", v133, 2u);
      }
      v89 = v79;
    }
    v70 = 0;
    v87 = v112;
LABEL_91:

    if (v70)
      objc_msgSend(v30, "addObject:", v70);
LABEL_66:

    v49 = *v47;
LABEL_67:
    v47 = (unsigned __int16 *)((char *)v47 + v49);
    if ((unint64_t)v47 < v46)
      continue;
    break;
  }
LABEL_97:
  free(v15);
LABEL_98:
  a1 = v118;
  if (v30)
  {
LABEL_99:
    __s2 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "policySession"));
    v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
    v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "primaryPhysicalInterface"));
    v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "interfaceName"));
    v101 = objc_getProperty(a1, v100, 376, 1);
    v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "VPN"));
    v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "protocol"));
    v105 = objc_msgSend(v104, "excludeLocalNetworks");
    v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "VPN"));
    v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "protocol"));
    sub_100036D14((uint64_t)__s2, v120, v99, v101, v30, 0, 0, 0, v105, (char)objc_msgSend(v108, "enforceRoutes"));

  }
LABEL_100:

}

const __CFString *sub_100062990(void *a1)
{
  void *v1;
  void *v2;
  const __CFString *NetworkServiceEntity;
  const __CFString *v5;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "identifier"));
  NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, (CFStringRef)objc_msgSend(v2, "UUIDString"), kSCEntNetIPv4);

  v5 = NetworkServiceEntity;
  if (NetworkServiceEntity)
    NetworkServiceEntity = (const __CFString *)SCDynamicStoreCopyValue(0, NetworkServiceEntity);
  myCFRelease(&v5);
  return NetworkServiceEntity;
}

void sub_100062A38(uint64_t a1)
{
  xpc_object_t reply;
  int v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  xpc_object_t dictionary;
  void *v15;
  void *v16;
  xpc_object_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v28;
  id v29;
  uint8_t buf[4];
  void *v31;

  reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  if (qword_1000CF8F0 != -1)
    dispatch_once(&qword_1000CF8F0, &stru_1000BE2C0);
  v3 = *(_DWORD *)(a1 + 48);
  if (v3 == 3)
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
      v9 = *(_QWORD *)(v8 + 368);
    else
      v9 = 0;
    v7 = (*(uint64_t (**)(uint64_t, _QWORD))(qword_1000CF8E8 + 104))(v9, *(_QWORD *)(a1 + 32));
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(uint64_t (**)(uint64_t))(qword_1000CF8E8 + 96);
    }
    else
    {
      if (v3 != 1)
        goto LABEL_35;
      v4 = *(uint64_t (**)(uint64_t))(qword_1000CF8E8 + 88);
    }
    v5 = *(_QWORD *)(a1 + 40);
    if (v5)
      v6 = *(_QWORD *)(v5 + 368);
    else
      v6 = 0;
    v7 = v4(v6);
  }
  v10 = (void *)v7;
  if (v7)
  {
    v11 = _CFXPCCreateXPCObjectFromCFObject(v7);
    v12 = (void *)v11;
    if (*(_DWORD *)(a1 + 48) == 2 && v11)
    {
      if ((sub_100076E38(*(void **)(a1 + 40)) & 1) != 0
        || sub_100076F3C(*(void **)(a1 + 40)))
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "matchedRule"));

        if (v13)
        {
          dictionary = xpc_dictionary_get_dictionary(v12, "VPN");
          v15 = (void *)objc_claimAutoreleasedReturnValue(dictionary);
          v16 = v15;
          if (v15 && xpc_get_type(v15) == (xpc_type_t)&_xpc_type_dictionary
            || (v17 = xpc_dictionary_create(0, 0, 0),
                v16,
                xpc_dictionary_set_value(v12, "VPN", v17),
                (v16 = v17) != 0))
          {
            if (xpc_get_type(v16) == (xpc_type_t)&_xpc_type_dictionary)
            {
              v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "matchedRule"));
              xpc_dictionary_set_int64(v16, "OnDemandAction", (int64_t)objc_msgSend(v18, "action"));

            }
          }

        }
      }
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "lastDisconnectError"));
      if (v19)
      {
        v29 = 0;
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v19, 1, &v29));
        v21 = v29;
        v23 = v21;
        if (v20)
        {
          v24 = objc_retainAutorelease(v20);
          xpc_dictionary_set_data(v12, "LastDisconnectError", objc_msgSend(v24, "bytes"), (size_t)objc_msgSend(v24, "length"));
        }
        else
        {
          v25 = ne_log_obj(v21, v22);
          v26 = objc_claimAutoreleasedReturnValue(v25);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v31 = v23;
            _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Failed to serialize the last disconnect error: %@", buf, 0xCu);
          }

        }
      }

    }
    xpc_dictionary_set_value(reply, "SessionInfo", v12);

  }
LABEL_35:
  remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
  v28 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
  xpc_connection_send_message(v28, reply);

}

void sub_100062D70(uint64_t a1)
{
  xpc_object_t reply;
  uint64_t v3;
  uint64_t v4;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v6;
  uint64_t v7;

  reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  v7 = 0;
  if (qword_1000CF8F0 != -1)
    dispatch_once(&qword_1000CF8F0, &stru_1000BE2C0);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    v4 = *(_QWORD *)(v3 + 368);
  else
    v4 = 0;
  (*(void (**)(uint64_t, _QWORD, char *, uint64_t *))(qword_1000CF8E8 + 72))(v4, *(_QWORD *)(a1 + 32), (char *)&v7 + 4, &v7);
  if (bootstrap_port)
    xpc_dictionary_set_mach_send(reply, "SessionBootstrapPort", HIDWORD(v7));
  if ((_DWORD)v7)
    xpc_dictionary_set_mach_send(reply, "SessionAuditSessionPort", v7);
  remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
  v6 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
  xpc_connection_send_message(v6, reply);

}

void sub_100062E60(uint64_t a1)
{
  id v2;
  void *v3;
  NSObject *v4;
  id v5;
  void (*v6)(uint64_t, id, _QWORD);
  uint64_t v7;
  uint64_t v8;
  id v9;
  void **v10;
  uint64_t v11;
  void (*v12)(uint64_t, const char *);
  void *v13;
  uint64_t v14;
  id v15;

  v2 = sub_100061444(*(_QWORD **)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  v10 = _NSConcreteStackBlock;
  v11 = 3221225472;
  v12 = sub_100062F74;
  v13 = &unk_1000BEB58;
  v14 = *(_QWORD *)(a1 + 32);
  v5 = v3;
  v15 = v5;
  dispatch_async(v4, &v10);

  if (qword_1000CF8F0 != -1)
    dispatch_once(&qword_1000CF8F0, &stru_1000BE2C0);
  v6 = *(void (**)(uint64_t, id, _QWORD))(qword_1000CF8E8 + 16);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    v8 = *(_QWORD *)(v7 + 368);
  else
    v8 = 0;
  v9 = objc_retainAutorelease(*(id *)(a1 + 40));
  v6(v8, objc_msgSend(v9, "UTF8String", v10, v11, v12, v13, v14), *(_QWORD *)(a1 + 48));

}

void sub_100062F74(uint64_t a1, const char *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned __int8 v18;
  __CFString *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;

  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_setProperty_atomic(v3, a2, *(id *)(a1 + 40), 376);
    v3 = *(void **)(a1 + 32);
  }
  if (objc_msgSend(v3, "type") == 1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "VPN"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "exceptionApps"));

    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "VPN"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "exceptionApps"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "server"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "primaryPhysicalInterface"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "interfaceName"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uid"));
      sub_10003AA34((uint64_t)v7, v10, v13, (int)objc_msgSend(v14, "intValue"));

    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "VPN"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "protocol"));
    v18 = objc_msgSend(v17, "includeAllNetworks");

    if ((v18 & 1) == 0)
    {
      v19 = sub_100060A9C(*(void **)(a1 + 32));
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      v21 = isa_nsstring(v20);
      if ((_DWORD)v21)
      {
        v23 = ne_log_obj(v21, v22);
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          v25 = *(void **)(a1 + 32);
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "server"));
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "primaryPhysicalInterface"));
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "interfaceName"));
          v29 = 138412802;
          v30 = v25;
          v31 = 2112;
          v32 = v20;
          v33 = 2112;
          v34 = v28;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%@: Re-setting route policies due to interface change event for tunnel \"%@\" primary \"%@\"", (uint8_t *)&v29, 0x20u);

        }
        sub_100061C18(*(void **)(a1 + 32), v20);
      }

    }
  }
}

id sub_1000631F0(uint64_t a1)
{
  return sub_10007C090(*(id *)(a1 + 32), 0);
}

uint64_t sub_1000631FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000CF8F0 != -1)
    dispatch_once(&qword_1000CF8F0, &stru_1000BE2C0);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v3 = *(_QWORD *)(v2 + 368);
  else
    v3 = 0;
  return (*(uint64_t (**)(uint64_t))(qword_1000CF8E8 + 48))(v3);
}

uint64_t sub_100063268(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000CF8F0 != -1)
    dispatch_once(&qword_1000CF8F0, &stru_1000BE2C0);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v3 = *(_QWORD *)(v2 + 368);
  else
    v3 = 0;
  return (*(uint64_t (**)(uint64_t, double))(qword_1000CF8E8 + 40))(v3, *(double *)(a1 + 40));
}

void sub_1000632D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  id v5;

  if (qword_1000CF8F0 != -1)
    dispatch_once(&qword_1000CF8F0, &stru_1000BE2C0);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v3 = *(_QWORD *)(v2 + 368);
  else
    v3 = 0;
  if (((*(uint64_t (**)(uint64_t))(qword_1000CF8E8 + 24))(v3) & 1) == 0)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "server"));
    sub_1000517BC(v5, v4);

  }
}

id sub_10006337C(uint64_t a1)
{
  id result;
  uint64_t v3;
  uint64_t v4;

  result = objc_msgSend(*(id *)(a1 + 32), "status");
  if ((_DWORD)result != 1)
  {
    if (qword_1000CF8F0 != -1)
      dispatch_once(&qword_1000CF8F0, &stru_1000BE2C0);
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      v4 = *(_QWORD *)(v3 + 368);
    else
      v4 = 0;
    return (id)(*(uint64_t (**)(uint64_t))(qword_1000CF8E8 + 64))(v4);
  }
  return result;
}

void sub_100063404(uint64_t a1, const char *a2)
{
  _QWORD *Property;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, _QWORD *, id, id, _QWORD, _QWORD, id);
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  id v10;
  void *v11;
  char v12;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD *);
  uint64_t v15;
  mach_port_name_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  mach_port_name_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  int *v27;
  char *v28;
  uint64_t v29;
  int *v30;
  char *v31;
  _QWORD v32[5];
  uint8_t buf[4];
  uint64_t v34;
  __int16 v35;
  char *v36;

  v4 = a1 + 32;
  Property = *(_QWORD **)(a1 + 32);
  v5 = *(uint64_t (**)(uint64_t, _QWORD *, id, id, _QWORD, _QWORD, id))(*(_QWORD *)(v4 + 8) + 56);
  if (Property)
  {
    v6 = Property[46];
    Property = objc_getProperty(Property, a2, 384, 1);
    v7 = *(void **)(a1 + 32);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v8 = Property;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uid"));
  v10 = objc_msgSend(v9, "unsignedIntValue");
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "gid"));
  v12 = v5(v6, v8, v10, objc_msgSend(v11, "unsignedIntValue"), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), objc_msgSend(*(id *)(a1 + 32), "isOnDemand"));

  if ((v12 & 1) != 0)
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a1 + 40) + 80);
    if (v13)
      v15 = *(_QWORD *)(v13 + 368);
    else
      v15 = 0;
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_10006369C;
    v32[3] = &unk_1000BEB80;
    v32[4] = v13;
    v14(v15, v32);
  }
  else
  {
    sub_10005F37C(*(void **)(a1 + 32), 0);
  }
  v16 = *(_DWORD *)(a1 + 48);
  if (v16)
  {
    v17 = mach_port_deallocate(mach_task_self_, v16);
    if ((_DWORD)v17)
    {
      v19 = ne_log_obj(v17, v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v26 = *(_QWORD *)(a1 + 32);
        v27 = __error();
        v28 = strerror(*v27);
        *(_DWORD *)buf = 138412546;
        v34 = v26;
        v35 = 2080;
        v36 = v28;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%@: Failed to deallocate the bootstrap mach port: %s", buf, 0x16u);
      }

    }
  }
  v21 = *(_DWORD *)(a1 + 52);
  if (v21)
  {
    v22 = mach_port_deallocate(mach_task_self_, v21);
    if ((_DWORD)v22)
    {
      v24 = ne_log_obj(v22, v23);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v29 = *(_QWORD *)(a1 + 32);
        v30 = __error();
        v31 = strerror(*v30);
        *(_DWORD *)buf = 138412546;
        v34 = v29;
        v35 = 2080;
        v36 = v31;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%@: Failed to deallocate the audit session mach port: %s", buf, 0x16u);
      }

    }
  }
}

void sub_10006369C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = ne_log_obj(a1, a2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@ is now disposable", (uint8_t *)&v5, 0xCu);
    }

  }
}

_QWORD *sub_100063740(_QWORD *a1, void *a2, void *a3, void *a4, int a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint64_t (*v21)(uint64_t, id, _QWORD *);
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NESMPolicySession *v26;
  void *v27;
  id v28;
  id *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint32_t v33;
  uint64_t v34;
  objc_super v36;
  uint8_t buf[4];
  _QWORD *v38;
  __int16 v39;
  int v40;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  if (!a1)
    goto LABEL_25;
  v36.receiver = a1;
  v36.super_class = (Class)NESMLegacySession;
  v12 = objc_msgSendSuper2(&v36, "initWithConfiguration:andServer:", v9, v10);
  a1 = v12;
  if (!v12)
    goto LABEL_25;
  *((_DWORD *)v12 + 88) = a5;
  objc_storeStrong((id *)v12 + 45, a4);
  if (!v11)
  {
    v18 = ne_log_obj(v13, v14);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)buf = 138412290;
    v38 = a1;
    v20 = "%@: Failed to create a legacy session because the given configuration is not a VPN configuration";
    goto LABEL_21;
  }
  v15 = objc_msgSend(v11, "type");
  if (v15 != (id)1)
  {
    if (v15 == (id)2)
    {
      v17 = 3;
      goto LABEL_10;
    }
    v30 = ne_log_obj(v15, v16);
    v19 = objc_claimAutoreleasedReturnValue(v30);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)buf = 138412290;
    v38 = a1;
    v20 = "%@: Failed to create a legacy session because the given configuration is not a IKEv1 or L2TP configuration";
LABEL_21:
    v32 = v19;
    v33 = 12;
LABEL_22:
    _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, v20, buf, v33);
    goto LABEL_24;
  }
  v17 = 1;
LABEL_10:
  if (qword_1000CF8F0 != -1)
    dispatch_once(&qword_1000CF8F0, &stru_1000BE2C0);
  if (!qword_1000CF8E8)
  {
    v31 = ne_log_obj(v15, v16);
    v19 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v38 = a1;
      v20 = "%@: Failed to get the legacy bridge functions";
      goto LABEL_21;
    }
LABEL_24:

    a1 = 0;
    goto LABEL_25;
  }
  v21 = *(uint64_t (**)(uint64_t, id, _QWORD *))qword_1000CF8E8;
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
  v23 = v21(v17, objc_msgSend(v22, "UUIDString"), a1);

  if (!v23)
  {
    v34 = ne_log_obj(v24, v25);
    v19 = objc_claimAutoreleasedReturnValue(v34);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)buf = 138412546;
    v38 = a1;
    v39 = 1024;
    v40 = v17;
    v20 = "%@: Failed to create a legacy bridge with type %d for configuration";
    v32 = v19;
    v33 = 18;
    goto LABEL_22;
  }
  a1[46] = v23;
  v26 = [NESMPolicySession alloc];
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
  v28 = objc_msgSend(v9, "grade");
  if (v26)
    v29 = sub_10002EB54((id *)&v26->super.isa, v27, a5, v28, (void *)1, (void *)1);
  else
    v29 = 0;
  objc_msgSend(a1, "setPolicySession:", v29);

  sub_10007AAF8(a1);
LABEL_25:

  return a1;
}

void sub_100063B38(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  const char *v5;
  id Property;
  NSObject *v7;
  id v8;
  _QWORD *v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    v2 = (_QWORD *)v2[13];
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_storeStrong((id *)(v4 + 104), 0);
    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v5, 32, 1);
  }
  else
  {
    Property = 0;
  }
  v7 = Property;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100063C20;
  v10[3] = &unk_1000BECD0;
  v8 = *(id *)(a1 + 40);
  v11 = v3;
  v12 = v8;
  v9 = v3;
  dispatch_async(v7, v10);

}

uint64_t sub_100063C20(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

id *sub_100063C34(id *a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  xpc_object_t value;
  void *v11;
  xpc_type_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  id *v16;
  xpc_object_t v17;
  xpc_type_t type;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  id *v22;
  id *v23;
  int v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  objc_super v30;
  uint8_t buf[4];
  NSObject *v32;

  v7 = a2;
  if (a1)
  {
    v8 = a4;
    v9 = objc_msgSend(objc_alloc((Class)NEProcessIdentity), "initFromXPCMessage:", v8);
    value = xpc_dictionary_get_value(v8, "SessionOptions");
    v11 = (void *)objc_claimAutoreleasedReturnValue(value);

    if (v11 && (v12 = xpc_get_type(v11), v12 == (xpc_type_t)&_xpc_type_dictionary))
    {
      v17 = xpc_dictionary_get_value(v11, "listener-endpoint");
      type = (xpc_type_t)objc_claimAutoreleasedReturnValue(v17);
      v15 = type;
      if (type && (type = xpc_get_type(type), type == (xpc_type_t)&_xpc_type_endpoint))
      {
        v21 = objc_alloc_init((Class)NSXPCListenerEndpoint);
        -[NSObject _setEndpoint:](v21, "_setEndpoint:", v15);
        v30.receiver = a1;
        v30.super_class = (Class)NETestAgent;
        v22 = (id *)objc_msgSendSuper2(&v30, "initWithPluginType:pluginVersion:pluginClass:pluginInfo:userID:", v7, 1, a3, 0, 0);
        v23 = v22;
        if (v22)
        {
          objc_storeStrong(v22 + 13, v21);
          v24 = objc_msgSend(v9, "pid");
          v25 = objc_alloc((Class)NSArray);
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "uuid"));
          v27 = objc_msgSend(v25, "initWithObjects:", v26, 0);
          sub_10007FE04((uint64_t)v23, v24, v27);

          v28 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", v9, 0);
          objc_storeStrong(v23 + 9, v28);

        }
        a1 = v23;
        v16 = a1;
      }
      else
      {
        v20 = ne_log_obj(type, v19);
        v21 = objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          v32 = v15;
          _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Missing endpoint (%p) in start message", buf, 0xCu);
        }
        v16 = 0;
      }

    }
    else
    {
      v14 = ne_log_obj(v12, v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "No start options available", buf, 2u);
      }
      v16 = 0;
    }

  }
  else
  {
    v16 = 0;
  }

  return v16;
}

uint64_t start()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  SEL v11;
  id Property;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  xpc_object_t v16;
  pid_t v17;
  SEL v18;
  _xpc_connection_s *v19;
  SEL v20;
  _xpc_connection_s *v21;
  SEL v22;
  _xpc_connection_s *v23;
  id v24;
  int *v25;
  _QWORD *v26;
  void *v27;
  NSObject *v28;
  int *v29;
  id v30;
  id v31;
  SEL v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  SEL v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  SEL v42;
  SEL v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  SEL v49;
  uint64_t v50;
  const char *notify_key;
  SEL v52;
  NSObject *v53;
  uint32_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  int *v59;
  NESMPowerManager *v60;
  SEL v61;
  id v62;
  id v63;
  int *v64;
  id v65;
  NESMPowerManager *v66;
  SEL v67;
  SEL v68;
  id v69;
  id v70;
  io_connect_t v71;
  const char *v72;
  IONotificationPort *v73;
  NSObject *v74;
  int *v75;
  const char *v76;
  id v77;
  const char *v78;
  NSObject *v79;
  uint32_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  int *v85;
  _OWORD *v86;
  SEL v87;
  NSObject *v88;
  SEL v89;
  NSObject *v90;
  SEL v91;
  NSObject *v92;
  _OWORD *v93;
  SEL v94;
  NSObject *v95;
  uint64_t v96;
  const char *v97;
  id v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  NSObject *v104;
  uint64_t v105;
  SEL v106;
  NSObject *v107;
  uint64_t v109;
  NSObject *v110;
  void *context;
  char *errorbuf;
  _QWORD v113[5];
  _BYTE buf[24];
  void *v115;
  int *v116;
  _QWORD *v117;
  __int128 v118;
  void (*v119)(uint64_t, uint64_t);
  void *v120;
  int *v121;

  errorbuf = 0;
  v0 = sandbox_init("com.apple.nesessionmanager", 1uLL, &errorbuf);
  if ((v0 & 0x80000000) != 0)
  {
    v109 = ne_log_obj(v0, v1);
    v110 = objc_claimAutoreleasedReturnValue(v109);
    if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "com.apple.nesessionmanager";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = errorbuf;
      _os_log_error_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_ERROR, "sandbox_init %s failed: %s", buf, 0x16u);
    }

    sandbox_free_error(errorbuf);
    exit(1);
  }
  context = objc_autoreleasePoolPush();
  v2 = sub_10004EDE8((uint64_t)NESMServer);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    v6 = objc_sync_enter(v5);
    v8 = ne_log_obj(v6, v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "NESMServer starting", buf, 2u);
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_1000510D4;
    v115 = &unk_1000BEB80;
    v116 = (int *)v5;
    objc_msgSend(v10, "startOwnerModeWithEventName:handlesReceivedCallback:", CFSTR("com.apple.networkextension.file-descriptor-maintainer"), buf);

    Property = objc_getProperty(v5, v11, 88, 1);
    *(_QWORD *)&v118 = _NSConcreteStackBlock;
    *((_QWORD *)&v118 + 1) = 3221225472;
    v119 = sub_100051150;
    v120 = &unk_1000BEB80;
    v121 = (int *)v5;
    v13 = NECreateTimerSource(Property, 5, &v118);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = (void *)v5[39];
    v5[39] = v14;

    v16 = xpc_dictionary_create(0, 0, 0);
    v17 = getpid();
    xpc_dictionary_set_int64(v16, "nesm-pid", v17);
    xpc_set_event("com.apple.networkextension.file-descriptor-maintainer", "init", v16);

    v19 = (_xpc_connection_s *)objc_getProperty(v5, v18, 96, 1);
    xpc_connection_resume(v19);

    v21 = (_xpc_connection_s *)objc_getProperty(v5, v20, 104, 1);
    xpc_connection_resume(v21);

    v23 = (_xpc_connection_s *)objc_getProperty(v5, v22, 112, 1);
    xpc_connection_resume(v23);

    v24 = sub_10000C1FC();
    v25 = (int *)objc_claimAutoreleasedReturnValue(v24);
    v113[0] = _NSConcreteStackBlock;
    v113[1] = 3221225472;
    v113[2] = sub_10004F21C;
    v113[3] = &unk_1000BEB80;
    v113[4] = v5;
    v26 = v113;
    v27 = v26;
    if (v25)
    {
      v28 = *((_QWORD *)v25 + 1);
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_10000C268;
      v115 = &unk_1000BECD0;
      v116 = v25;
      v117 = v26;
      dispatch_async(v28, buf);

    }
    v29 = v5;
    objc_sync_enter(v29);
    v30 = objc_alloc_init((Class)NWParameters);
    sub_100050A98(v30);
    v31 = objc_msgSend(objc_alloc((Class)NWPathEvaluator), "initWithEndpoint:parameters:", 0, v30);
    objc_setProperty_atomic(v29, v32, v31, 248);

    v34 = objc_getProperty(v29, v33, 248, 1);
    objc_msgSend(v34, "addObserver:forKeyPath:options:context:", v29, CFSTR("path"), 5, 0);

    v35 = objc_alloc_init((Class)NWParameters);
    objc_msgSend(v35, "setRequiredInterfaceType:", 2);
    sub_100050A98(v35);
    v36 = objc_msgSend(objc_alloc((Class)NWPathEvaluator), "initWithEndpoint:parameters:", 0, v35);
    objc_setProperty_atomic(v29, v37, v36, 256);

    v39 = objc_getProperty(v29, v38, 256, 1);
    objc_msgSend(v39, "addObserver:forKeyPath:options:context:", v29, CFSTR("path"), 5, 0);

    v40 = objc_alloc_init((Class)NWParameters);
    objc_msgSend(v40, "setRequiredInterfaceType:", 1);
    sub_100050A98(v40);
    v41 = objc_msgSend(objc_alloc((Class)NWPathEvaluator), "initWithEndpoint:parameters:", 0, v40);
    objc_setProperty_atomic(v29, v42, v41, 264);

    v44 = objc_getProperty(v29, v43, 264, 1);
    objc_msgSend(v44, "addObserver:forKeyPath:options:context:", v29, CFSTR("path"), 5, 0);

    if ((*((_BYTE *)v29 + 11) & 1) == 0)
    {
      *((_BYTE *)v29 + 11) = 1;
      v47 = nwi_state_copy(v45, v46);
      v48 = sub_10004C738(v47);
      objc_setProperty_atomic(v29, v49, v48, 72);

      if (v47)
        v50 = nwi_state_release(v47);
      notify_key = (const char *)nwi_state_get_notify_key(v50);
      v53 = objc_getProperty(v29, v52, 88, 1);
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_100050B04;
      v115 = &unk_1000BE138;
      v116 = v29;
      v54 = notify_register_dispatch(notify_key, v29 + 5, v53, buf);

      if (v54)
      {
        v57 = ne_log_obj(v55, v56);
        v58 = objc_claimAutoreleasedReturnValue(v57);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v118) = 67109120;
          DWORD1(v118) = v54;
          _os_log_error_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "Failed to register for NWI notifications: %u", (uint8_t *)&v118, 8u);
        }

      }
    }

    objc_sync_exit(v29);
    v59 = v29;
    objc_sync_enter(v59);
    if ((v59[3] & 1) == 0)
    {
      *((_BYTE *)v59 + 12) = 1;
      v60 = [NESMPowerManager alloc];
      v62 = objc_getProperty(v59, v61, 88, 1);
      v63 = v62;
      v64 = v59;
      v65 = v63;
      if (v60)
      {
        *(_QWORD *)buf = v60;
        *(_QWORD *)&buf[8] = NESMPowerManager;
        v66 = (NESMPowerManager *)objc_msgSendSuper2((objc_super *)buf, "init");
        v60 = v66;
        if (v66)
        {
          objc_storeWeak((id *)&v66->_delegate, v64);
          objc_storeStrong((id *)&v60->_queue, v62);
          v60->_powerState = 2;
          v60->_sleepDate = -1;
        }
      }

      objc_setProperty_atomic(v64, v67, v60, 136);
      v69 = objc_getProperty(v64, v68, 136, 1);
      v70 = v69;
      if (v69)
      {
        v71 = IORegisterForSystemPower(v69, (IONotificationPortRef *)v69 + 8, (IOServiceInterestCallback)sub_10008779C, (io_object_t *)v69 + 3);
        *((_DWORD *)v70 + 2) = v71;
        if (v71)
        {
          v73 = (IONotificationPort *)*((_QWORD *)v70 + 8);
          v74 = objc_getProperty(v70, v72, 48, 1);
          IONotificationPortSetDispatchQueue(v73, v74);
        }
      }

    }
    objc_sync_exit(v59);

    v75 = v59;
    objc_sync_enter(v75);
    if ((*((_BYTE *)v75 + 13) & 1) == 0)
    {
      *((_BYTE *)v75 + 13) = 1;
      if (dlopen("/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices", 16))
      {
        v77 = objc_getProperty(v75, v76, 88, 1);
        v78 = (const char *)kSBSLockStateNotifyKey;
        v79 = v77;
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = sub_1000507D0;
        v115 = &unk_1000BE138;
        v116 = v75;
        v80 = notify_register_dispatch(v78, v75 + 6, v79, buf);

        if (v80)
        {
          v83 = ne_log_obj(v81, v82);
          v84 = objc_claimAutoreleasedReturnValue(v83);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v118) = 67109120;
            DWORD1(v118) = v80;
            _os_log_error_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "Failed to register for user state notifications: %u", (uint8_t *)&v118, 8u);
          }

        }
      }
    }
    objc_sync_exit(v75);

    v85 = v75;
    objc_sync_enter(v85);
    *(_QWORD *)&v118 = _NSConcreteStackBlock;
    *((_QWORD *)&v118 + 1) = 3221225472;
    v119 = sub_1000503FC;
    v120 = &unk_1000BE138;
    v121 = v85;
    v86 = objc_retainBlock(&v118);
    v88 = objc_getProperty(v85, v87, 88, 1);
    notify_register_dispatch("com.apple.system.config.network_change.nwi", v85 + 7, v88, v86);

    v90 = objc_getProperty(v85, v89, 88, 1);
    notify_register_dispatch("com.apple.system.config.network_change.dns", v85 + 8, v90, v86);

    v92 = objc_getProperty(v85, v91, 88, 1);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_100050704;
    v115 = &unk_1000BE1B0;
    v116 = v85;
    v93 = v86;
    v117 = v93;
    notify_register_dispatch("com.apple.system.config.proxy_change", v85 + 9, v92, buf);

    objc_sync_exit(v85);
    sub_10004F298((uint64_t)v85);
    v95 = objc_getProperty(v85, v94, 88, 1);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_10004F94C;
    v115 = &unk_1000BDFD8;
    v116 = v85;
    xpc_set_event_stream_handler("com.apple.networkextension.network-detection", v95, buf);
    *((_BYTE *)v85 + 8) = &_CNPluginMonitorStart != 0;
    if (&_CNPluginMonitorStart)
    {
      v98 = objc_getProperty(v85, v97, 88, 1);
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_10004F664;
      v115 = &unk_1000BE250;
      v116 = v85;
      v99 = CNPluginMonitorStart(0, v98, buf);
      v100 = v99;
      v102 = ne_log_obj(v99, v101);
      v103 = objc_claimAutoreleasedReturnValue(v102);
      v104 = v103;
      if (v100)
      {
        if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v118) = 136315138;
          *(_QWORD *)((char *)&v118 + 4) = "-[NESMServer registerForCaptiveNetworkPluginChanges]";
          _os_log_debug_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEBUG, "%s: Started CNPluginMonitor", (uint8_t *)&v118, 0xCu);
        }
      }
      else if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v118) = 136315138;
        *(_QWORD *)((char *)&v118 + 4) = "-[NESMServer registerForCaptiveNetworkPluginChanges]";
        _os_log_error_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_ERROR, "%s: Failed to start CNPluginMonitor", (uint8_t *)&v118, 0xCu);
      }
    }
    else
    {
      v105 = ne_log_obj(v96, v97);
      v104 = objc_claimAutoreleasedReturnValue(v105);
      if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "Captive Plugin Monitor is not available", buf, 2u);
      }
    }

    v107 = objc_getProperty(v85, v106, 88, 1);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_10004F400;
    v115 = &unk_1000BDFD8;
    v116 = v85;
    xpc_set_event_stream_handler("com.apple.notifyd.matching", v107, buf);
    signal(13, (void (__cdecl *)(int))1);
    objc_sync_exit(v85);

  }
  objc_autoreleasePoolPop(context);
  CFRunLoopRun();
  return 0;
}

void sub_100064A00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100067D70(uint64_t a1, const char *a2)
{
  id result;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  const char *v13;
  NSObject *Property;
  const char *v15;
  const char *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  void *v22;

  result = *(id *)(a1 + 32);
  if (result)
  {
    result = objc_getProperty(result, a2, 32, 1);
    if (result)
    {
      v5 = ne_log_obj(result, v4);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_QWORD *)(a1 + 32);
        v8 = *(_QWORD *)(a1 + 40);
        if (v7)
          v9 = *(_QWORD *)(v7 + 24);
        else
          v9 = 0;
        v10 = (objc_class *)objc_opt_class(v7);
        v11 = NSStringFromClass(v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        v17 = 138412802;
        v18 = v8;
        v19 = 2048;
        v20 = v9;
        v21 = 2112;
        v22 = v12;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@: State timer (%llu seconds) fired in state %@", (uint8_t *)&v17, 0x20u);

      }
      Property = *(NSObject **)(a1 + 32);
      if (Property)
        Property = objc_getProperty(Property, v13, 32, 1);
      dispatch_source_cancel(Property);
      result = *(id *)(a1 + 32);
      if (result)
      {
        objc_setProperty_atomic(result, v15, 0, 32);
        result = *(id *)(a1 + 32);
        if (result)
        {
          result = objc_getProperty(result, v16, 16, 1);
          if (result)
            return objc_msgSend(*(id *)(a1 + 32), "handleTimeout");
        }
      }
    }
  }
  return result;
}

void sub_100068C24(void *a1, void *a2)
{
  const char *v3;
  id v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  id Property;
  objc_class *v11;
  NSString *v12;
  void *v13;
  id v14;
  void *v15;
  int v16;
  id v17;
  __int16 v18;
  void *v19;

  v4 = a2;
  if (a1)
  {
    objc_setProperty_atomic(a1, v3, 0, 48);
    if (!v4)
    {
      v7 = ne_log_obj(v5, v6);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        Property = objc_getProperty(a1, v9, 16, 1);
        v11 = (objc_class *)objc_opt_class(a1);
        v12 = NSStringFromClass(v11);
        v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        v16 = 138412546;
        v17 = Property;
        v18 = 2112;
        v19 = v13;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@ in state %@: no start message available", (uint8_t *)&v16, 0x16u);

      }
    }
    v14 = objc_getProperty(a1, v6, 16, 1);
    objc_msgSend(v14, "setState:", 1);
    if (v4)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "stateHandler"));
      objc_msgSend(v15, "handleStartMessage:", v4);

    }
  }

}

uint64_t sub_100069778(uint64_t a1)
{
  return sub_10007B40C(*(_QWORD *)(a1 + 32), 1);
}

void sub_100069EEC(void *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  id Property;
  objc_class *v7;
  NSString *v8;
  void *v9;
  SEL v10;
  id v11;
  SEL v12;
  id v13;
  void *v14;
  unsigned __int8 v15;
  uint64_t v16;
  const char *v17;
  id v18;
  void *v19;
  uint64_t v20;
  const char *v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  id v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  id v33;
  id v34;
  void *v35;
  const char *v36;
  id v37;
  SEL v38;
  id v39;
  void *v40;
  SEL v41;
  id v42;
  SEL v43;
  id v44;
  void *v45;
  SEL v46;
  int v47;
  id v48;
  __int16 v49;
  void *v50;
  __int16 v51;
  uint64_t v52;

  if (a1)
  {
    v3 = ne_log_obj(a1, a2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      Property = objc_getProperty(a1, v5, 16, 1);
      v7 = (objc_class *)objc_opt_class(a1);
      v8 = NSStringFromClass(v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v11 = objc_msgSend(objc_getProperty(a1, v10, 16, 1), "sessionType");
      v47 = 138412802;
      v48 = Property;
      v49 = 2112;
      v50 = v9;
      v51 = 2080;
      v52 = ne_session_type_to_string(v11);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@ in state %@: restart %s session", (uint8_t *)&v47, 0x20u);

    }
    v13 = objc_msgSend(objc_getProperty(a1, v12, 16, 1), "configuration");
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v15 = objc_msgSend(v14, "isEnabled");

    if ((v15 & 1) == 0)
    {
      v31 = ne_log_obj(v16, v17);
      v27 = objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        v33 = objc_getProperty(a1, v32, 16, 1);
        v47 = 138412290;
        v48 = v33;
        v30 = "%@: Ignore restart because the configuration is not enabled";
        goto LABEL_11;
      }
LABEL_12:

      return;
    }
    v18 = objc_msgSend(objc_getProperty(a1, v17, 16, 1), "configuration");
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "externalIdentifier"));
    if (v20)
    {
      v22 = (void *)v20;
      v23 = objc_msgSend(objc_getProperty(a1, v21, 16, 1), "waitForPerApp");

      if (v23)
      {
        v26 = ne_log_obj(v24, v25);
        v27 = objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          v29 = objc_getProperty(a1, v28, 16, 1);
          v47 = 138412290;
          v48 = v29;
          v30 = "%@: Ignore restart for perApp session - no appRule or app not installed";
LABEL_11:
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, v30, (uint8_t *)&v47, 0xCu);
          goto LABEL_12;
        }
        goto LABEL_12;
      }
    }
    else
    {

    }
    v34 = objc_msgSend(objc_getProperty(a1, v25, 16, 1), "startMessage");
    v35 = (void *)objc_claimAutoreleasedReturnValue(v34);

    if (v35)
    {
      v37 = objc_getProperty(a1, v36, 16, 1);
      v39 = objc_msgSend(objc_getProperty(a1, v38, 16, 1), "startMessage");
      v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
      objc_msgSend(v37, "handleStartMessage:", v40);

      v42 = objc_getProperty(a1, v41, 16, 1);
      v44 = objc_msgSend(objc_getProperty(a1, v43, 16, 1), "startMessage");
      v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
      objc_msgSend(v42, "createConnectParametersWithStartMessage:", v45);

    }
    objc_msgSend(objc_getProperty(a1, v36, 16, 1), "setRestartPending:", 0);
    objc_msgSend(objc_getProperty(a1, v46, 16, 1), "setState:", 2);
  }
}

void sub_10006A208(uint64_t a1, const char *a2)
{
  id Property;
  const char *v4;
  unsigned int v5;
  id v6;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 16, 1);
  v5 = objc_msgSend(Property, "restartPending");
  v6 = *(id *)(a1 + 32);
  if (v5)
  {
    sub_100069EEC(v6, (uint64_t)v4);
  }
  else
  {
    if (v6)
      v6 = objc_getProperty(v6, v4, 16, 1);
    objc_msgSend(v6, "setState:", 1);
  }
}

id sub_10006D58C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[5];
  _QWORD v9[5];

  v9[0] = *(_QWORD *)(a1 + 32);
  v8[0] = CFSTR("tunnelType");
  v8[1] = CFSTR("OnDemandConfiguration");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 64)));
  v9[1] = v2;
  v8[2] = CFSTR("OnDemandConnection");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 65)));
  v9[2] = v3;
  v8[3] = CFSTR("tunnelConnectDuration");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 40)));
  v9[3] = v4;
  v8[4] = CFSTR("tunnelDataCount");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 48)));
  v9[4] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 5));

  return v6;
}

void sub_10006D6C8(id a1)
{
  unint64_t v1;
  unint64_t v2;
  mach_timebase_info info;

  info = 0;
  if (!mach_timebase_info(&info))
  {
    LODWORD(v1) = info.numer;
    LODWORD(v2) = info.denom;
    *(double *)&qword_1000CF908 = (double)v1 / (double)v2 / 1000.0 / 1000000.0;
  }
}

void sub_10006D720(id a1, unint64_t a2, NSArray *a3)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  const char *v6;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 136315138;
    v6 = "-[NESMIKEv2VPNSession setStatus:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s: user acknowledged VPN notification", (uint8_t *)&v5, 0xCu);
  }

}

_DWORD *sub_10006F774(_QWORD *a1)
{
  _DWORD *v1;
  _BOOL8 v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  SEL v15;
  id Property;
  const char *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  SEL v22;
  id v23;
  SEL v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  int v33;
  void *v34;
  void *v35;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  void *v54;
  int v55;
  uint8_t buf[4];
  const char *v57;
  __int16 v58;
  void *v59;
  __int16 v60;
  void *v61;
  __int16 v62;
  id v63;

  v1 = a1;
  if (a1)
  {
    v2 = sub_10006FBC8(a1);
    if (v2)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "configuration"));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "externalIdentifier"));
      if (v5)
      {
        v6 = (void *)v5;
        v7 = objc_msgSend(v1, "waitForPerApp");

        if ((v7 & 1) != 0)
          return 0;
      }
      else
      {

      }
      v12 = ne_log_obj(v8, v9);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "configuration"));
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "name"));
        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "configuration"));
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "externalIdentifier"));
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "configuration"));
        v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "contentFilter"));
        v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "perApp"));
        v52 = objc_msgSend(v51, "copyCachedMachOUUIDs");
        *(_DWORD *)buf = 136315906;
        v57 = "-[NESMFilterSession resetPolicies]";
        v58 = 2112;
        v59 = v46;
        v60 = 2112;
        v61 = v48;
        v62 = 2112;
        v63 = v52;
        _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s: resetPolicies - <%@> <%@> UUIDs %@", buf, 0x2Au);

      }
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "policySession"));
      v14 = v1[89];
      Property = objc_getProperty(v1, v15, 400, 1);
      v18 = sub_100016BA8(Property, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "firstObject"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "uid"));
      v55 = objc_msgSend(v21, "intValue");
      v23 = objc_getProperty(v1, v22, 360, 1);
      v25 = objc_getProperty(v1, v24, 368, 1);
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "configuration"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "externalIdentifier"));
      if (v27)
      {
        v54 = v19;
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "configuration"));
        v53 = v26;
        v29 = v25;
        v30 = v20;
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "contentFilter"));
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "perApp"));
        v33 = v14;
        v34 = v21;
        v35 = v32;
        v1 = (_DWORD *)sub_100038508((uint64_t)v11, v33, v30, v55, v23, v29, v32);

        v21 = v34;
        v20 = v30;
        v25 = v29;
        v26 = v53;

        v19 = v54;
      }
      else
      {
        v1 = (_DWORD *)sub_100038508((uint64_t)v11, v14, v20, v55, v23, v25, 0);
      }

    }
    else
    {
      v10 = ne_log_obj(v2, v3);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "configuration"));
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "name"));
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "configuration"));
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "externalIdentifier"));
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "configuration"));
        v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "contentFilter"));
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "perApp"));
        v44 = objc_msgSend(v43, "copyCachedMachOUUIDs");
        *(_DWORD *)buf = 136315906;
        v57 = "-[NESMFilterSession resetPolicies]";
        v58 = 2112;
        v59 = v38;
        v60 = 2112;
        v61 = v40;
        v62 = 2112;
        v63 = v44;
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s: resetPolicies - <%@> <%@> UUIDs %@ <Skip - plugin not ready>", buf, 0x2Au);

      }
      v1 = 0;
    }

  }
  return v1;
}

BOOL sub_10006FBC8(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  _BOOL8 v13;
  void *v14;
  void *v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v24;
  void *v25;
  void *v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  int v39;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pluginType"));

  v6 = ne_log_obj(v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v34 = 138412802;
    v35 = a1;
    v36 = 2112;
    v37 = v3;
    v38 = 1024;
    v39 = 1;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@: Check Filter Plugin installation for %@ (isIP %d)", (uint8_t *)&v34, 0x1Cu);
  }

  if (v3)
  {
    if (a1[49] == 5)
    {
      v10 = ne_log_obj(v8, v9);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v34 = 138412290;
        v35 = a1;
        v12 = "%@: Filter Plugin is being updated";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v34, 0xCu);
      }
    }
    else
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "contentFilter"));
      v16 = objc_msgSend(v15, "isEnabled");

      if ((v16 & 1) != 0)
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "contentFilter"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "provider"));
        if (objc_msgSend(v21, "filterSockets"))
        {

        }
        else
        {
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "contentFilter"));
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "provider"));
          v27 = objc_msgSend(v26, "filterBrowsers");

          if ((v27 & 1) == 0)
          {
            v33 = ne_log_obj(v28, v29);
            v11 = objc_claimAutoreleasedReturnValue(v33);
            if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
              goto LABEL_14;
            v34 = 138412290;
            v35 = a1;
            v12 = "%@: filterSockets (and filterBrowsers) is not enabled";
            goto LABEL_13;
          }
        }
        v11 = objc_claimAutoreleasedReturnValue(+[NELaunchServices pluginProxyWithIdentifier:type:pluginClass:extensionPoint:](NELaunchServices, "pluginProxyWithIdentifier:type:pluginClass:extensionPoint:", 0, v3, 4, 0));
        if (!v11)
        {
          v31 = ne_log_obj(0, v30);
          v32 = objc_claimAutoreleasedReturnValue(v31);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            v34 = 138412290;
            v35 = a1;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%@: Filter Plugin is not available in launch services", (uint8_t *)&v34, 0xCu);
          }

        }
        v13 = v11 != 0;
        goto LABEL_15;
      }
      v22 = ne_log_obj(v17, v18);
      v11 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v34 = 138412290;
        v35 = a1;
        v12 = "%@: Configuration is not enabled";
        goto LABEL_13;
      }
    }
LABEL_14:
    v13 = 0;
LABEL_15:

    goto LABEL_16;
  }
  v13 = 0;
LABEL_16:

  return v13;
}

id sub_10006FEF4(uint64_t a1)
{
  sub_10006F774(*(_QWORD **)(a1 + 32));
  return objc_msgSend(*(id *)(a1 + 32), "startWithCommand:isOnDemand:", 0, 0);
}

void sub_10006FF24(_BYTE *a1, char a2)
{
  void *v4;
  void *v5;
  void *v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  _BOOL4 v19;
  void *v20;
  const char *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  const char *v27;
  void *v28;
  const char *v29;
  char v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  unsigned int v35;
  unsigned int v36;
  const char *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  char v50;
  void **v51;
  __int128 v52;
  void *v53;
  void *v54;
  id v55;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "contentFilter"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "provider"));
  if ((objc_msgSend(v6, "disableDefaultDrop") & 1) != 0 || (a2 & 1) != 0)
  {

    goto LABEL_11;
  }
  v7 = sub_10006FBC8(a1);

  if (!v7)
  {
LABEL_11:
    v22 = objc_msgSend(a1, "setDefaultDropType:", 0);
    v24 = ne_log_obj(v22, v23);
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v51) = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Filter removing perApp Drop policies", (uint8_t *)&v51, 2u);
    }

    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "policySession"));
    sub_100039E88(v26, v27);

    a1[353] = 0;
    goto LABEL_14;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "externalIdentifier"));
  if (v9)
  {
    v10 = (void *)v9;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "contentFilter"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "perApp"));

    if (v13)
    {
      v14 = objc_msgSend(a1, "waitForPerApp");
      v15 = (char)v14;
      v17 = ne_log_obj(v14, v16);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      if ((v15 & 1) != 0)
      {
        if (v19)
        {
          LOWORD(v51) = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Filter removing perApp Drop policies", (uint8_t *)&v51, 2u);
        }

        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "policySession"));
        sub_100039E88(v20, v21);

        a1[353] = 0;
      }
      else
      {
        if (v19)
        {
          LOWORD(v51) = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Filter installing perApp Drop policies", (uint8_t *)&v51, 2u);
        }

        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "policySession"));
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "contentFilter"));
        v42 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "perApp"));
        v43 = v42;
        if (v39)
        {
          if (v42)
          {
            v44 = objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "appRules"));
            if (v44)
            {
              v45 = (void *)v44;
              v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "appRules"));
              v47 = objc_msgSend(v46, "count");

              if (v47)
              {
                v51 = _NSConcreteStackBlock;
                *(_QWORD *)&v52 = 3221225472;
                *((_QWORD *)&v52 + 1) = sub_100039B34;
                v53 = &unk_1000BDA78;
                v54 = v39;
                v55 = v43;
                sub_10002C9C8((uint64_t)NESMPolicyMasterSession, &v51);

              }
            }
          }
        }

        a1[353] = 1;
      }
    }
  }
  else
  {

  }
  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "externalIdentifier"));
  if (v49)
  {
    v50 = a1[353];

    if ((v50 & 1) == 0)
    {
      objc_msgSend(a1, "setDefaultDropType:", 0);
LABEL_14:
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "policySession"));
      sub_10003A538(v28, v29);
      v30 = 0;
      goto LABEL_15;
    }
  }
  else
  {

  }
  objc_msgSend(a1, "setDefaultDropType:", 5);
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "policySession"));
  if (v28)
  {
    v51 = _NSConcreteStackBlock;
    *(_QWORD *)&v52 = 3221225472;
    *((_QWORD *)&v52 + 1) = sub_10003A014;
    v53 = &unk_1000BDA50;
    v54 = v28;
    sub_10002C9C8((uint64_t)NESMPolicyMasterSession, &v51);
  }
  v30 = 1;
LABEL_15:

  v31 = objc_msgSend(a1, "setIsDropPersistent:", 1);
  v33 = ne_log_obj(v31, v32);
  v34 = objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    v35 = objc_msgSend(a1, "defaultDropType");
    v36 = objc_msgSend(a1, "isDropPersistent");
    v37 = "Non-Persistent";
    if (v36)
      v37 = "Persistent";
    LODWORD(v51) = 67109378;
    HIDWORD(v51) = v35;
    LOWORD(v52) = 2080;
    *(_QWORD *)((char *)&v52 + 2) = v37;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Filter setting IP Drop-All to %d (%s)", (uint8_t *)&v51, 0x12u);
  }

  v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
  sub_100051FCC(v38, CFSTR("drop_all_feature_content_filter"), v30);

}

uint64_t sub_1000703E8(void *a1)
{
  _DWORD *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v42;
  NSObject *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  int v51;
  uint64_t v52;
  NSObject *v53;
  void *v54;
  void *v55;
  void *v56;
  int v57;
  id v58;
  __int16 v59;
  int v60;

  if (!a1)
    return 0;
  v1 = a1;
  objc_sync_enter(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "configuration"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "externalIdentifier"));
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "configuration"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "contentFilter"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "perApp"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "appRules"));
    v8 = objc_msgSend(v7, "count");

    if (!v8)
    {
      v11 = ne_log_obj(v9, v10);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "configuration"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "name"));
        v57 = 138412290;
        v58 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Fail to allocate control unit - perApp Content Filter missing appRules for %@", (uint8_t *)&v57, 0xCu);

      }
      goto LABEL_29;
    }
  }
  else
  {

  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "configuration"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "contentFilter"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "provider"));
  if ((objc_msgSend(v17, "filterSockets") & 1) != 0)
  {
    v18 = v1[89];

    if (!v18)
    {
LABEL_13:
      v23 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "configuration"));
      objc_opt_self(NESMFilterSession);
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "contentFilter"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "provider"));
      v26 = sub_1000709BC((uint64_t)NESMFilterSession, v25);

      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "contentFilter"));
      if ((uint64_t)objc_msgSend(v27, "grade") <= 0)
      {

      }
      else
      {
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "contentFilter"));
        v29 = (uint64_t)objc_msgSend(v28, "grade");

        if (v29 < 3)
        {
          os_unfair_lock_lock(&stru_1000CF910);
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "externalIdentifier"));

          if (v32)
          {
            v35 = 0;
            while (((dword_1000CF914 >> v35) & 1) != 0)
            {
              if (++v35 == 7)
              {
                v36 = ne_log_obj(v33, v34);
                v37 = objc_claimAutoreleasedReturnValue(v36);
                if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
                {
                  v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "name"));
                  v57 = 138412290;
                  v58 = v56;
                  _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "allocateFilterControlUnitForConfiguration: <%@> no more slot", (uint8_t *)&v57, 0xCu);

                }
                v35 = 8;
                break;
              }
            }
          }
          else
          {
            v35 = 7;
          }
          v42 = ne_log_obj(v33, v34);
          v43 = objc_claimAutoreleasedReturnValue(v42);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "name"));
            v57 = 138412546;
            v58 = v44;
            v59 = 1024;
            v60 = v35;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "allocateFilterControlUnitForConfiguration: <%@> slot %d", (uint8_t *)&v57, 0x12u);

          }
          if (v35 < 8)
          {
            dword_1000CF914 |= 1 << v35;
            os_unfair_lock_unlock(&stru_1000CF910);

            v49 = ne_log_obj(v47, v48);
            v50 = objc_claimAutoreleasedReturnValue(v49);
            v51 = (1 << v35) | v26;
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
            {
              v57 = 67109120;
              LODWORD(v58) = v51;
              _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Allocated control unit %u", (uint8_t *)&v57, 8u);
            }

            v1[89] = v51;
            goto LABEL_23;
          }
          v52 = ne_log_obj(v45, v46);
          v53 = objc_claimAutoreleasedReturnValue(v52);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          {
            v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "name"));
            v57 = 138412546;
            v58 = v55;
            v59 = 1024;
            v60 = dword_1000CF914;
            _os_log_error_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "allocateFilterControlUnitForConfiguration: <%@> Failed to allocate a control unit, unitMap = %x", (uint8_t *)&v57, 0x12u);

          }
          os_unfair_lock_unlock(&stru_1000CF910);
LABEL_28:

LABEL_29:
          v38 = 0;
          goto LABEL_30;
        }
      }
      v39 = ne_log_obj(v30, v31);
      v40 = objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "contentFilter"));
        v57 = 134217984;
        v58 = objc_msgSend(v54, "grade");
        _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Failed to allocate a control unit, configuration has an invalid filter grade: %ld", (uint8_t *)&v57, 0xCu);

      }
      goto LABEL_28;
    }
  }
  else
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "configuration"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "contentFilter"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "provider"));
    if (objc_msgSend(v21, "filterBrowsers"))
    {
      v22 = v1[89];

      if (!v22)
        goto LABEL_13;
    }
    else
    {

    }
  }
LABEL_23:
  v38 = 1;
LABEL_30:
  objc_sync_exit(v1);

  return v38;
}

void sub_100070990(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000709BC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a2;
  objc_opt_self(a1);
  if (objc_msgSend(v3, "filterBrowsers") && !objc_msgSend(v3, "filterSockets"))
  {
    LODWORD(v4) = 0x80000000;
  }
  else if ((objc_msgSend(v3, "filterBrowsers") & 1) != 0
         || (objc_msgSend(v3, "filterSockets") & 1) == 0)
  {
    if ((objc_msgSend(v3, "filterBrowsers") & 1) != 0)
    {
      LODWORD(v4) = 0;
    }
    else if (objc_msgSend(v3, "filterSockets"))
    {
      LODWORD(v4) = 0;
    }
    else
    {
      LODWORD(v4) = -1073741824;
    }
  }
  else
  {
    LODWORD(v4) = 0x40000000;
  }
  if (objc_msgSend(v3, "preserveExistingConnections"))
    v4 = v4 | 0x20000000;
  else
    v4 = v4;

  return v4;
}

void sub_100070A6C(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t pid;
  void *v5;
  id Property;
  _QWORD *v7;
  void *v8;
  xpc_object_t message;
  _QWORD v10[4];
  id v11;
  _QWORD v12[5];
  _QWORD *v13;
  _QWORD v14[5];

  if (*(_DWORD *)(a1 + 56) == 1 && (v2 = *(_QWORD *)(a1 + 32)) != 0 && (*(_BYTE *)(v2 + 354) & 1) != 0)
  {
    pid = xpc_connection_get_pid(*(xpc_connection_t *)(a1 + 40));
    v5 = *(void **)(a1 + 32);
    if (v5)
      Property = objc_getProperty(v5, v3, 400, 1);
    else
      Property = 0;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100070C10;
    v10[3] = &unk_1000BE448;
    v11 = *(id *)(a1 + 48);
    v7 = v10;
    if (Property)
    {
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_100017C58;
      v14[3] = &unk_1000BEA00;
      v14[4] = Property;
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "remotePluginObjectWithErrorHandler:", v14));
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_100017CF4;
      v12[3] = &unk_1000BD7F8;
      v12[4] = Property;
      v13 = v7;
      objc_msgSend(v8, "getFilterClientConnectionWithCompletionHandler:completionHandler:", pid, v12);

    }
  }
  else
  {
    message = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
    xpc_dictionary_set_int64(message, "error", 3);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 40), message);

  }
}

void sub_100070C10(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  xpc_type_t type;
  uint64_t v10;
  xpc_type_t v11;
  uint64_t v13;
  NSObject *v14;
  xpc_type_t v15;
  xpc_type_t v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  void *v20;
  int v21;
  xpc_object_t v22;
  __int16 v23;
  xpc_type_t v24;

  v5 = a2;
  v6 = a3;
  reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
  type = (xpc_type_t)objc_claimAutoreleasedReturnValue(remote_connection);
  v11 = type;
  if (reply)
  {
    type = xpc_get_type(reply);
    if (type == (xpc_type_t)&_xpc_type_dictionary && v11 != 0)
    {
      type = xpc_get_type(v11);
      if (type == (xpc_type_t)&_xpc_type_connection)
      {
        if (v5
          && (type = (xpc_type_t)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_endpoint"))) != 0
          && (v15 = type, v16 = xpc_get_type(type), v15, v16 == (xpc_type_t)&_xpc_type_endpoint))
        {
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_endpoint"));
          xpc_dictionary_set_value(reply, "new-connection", v20);

          if (!v6)
            goto LABEL_18;
        }
        else
        {
          v17 = ne_log_obj(type, v10);
          v18 = objc_claimAutoreleasedReturnValue(v17);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v21) = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to get a valid XPC endpoint from the filter plugin", (uint8_t *)&v21, 2u);
          }

          xpc_dictionary_set_int64(reply, "error", 3);
          if (!v6)
            goto LABEL_18;
        }
        v19 = objc_retainAutorelease(v6);
        xpc_dictionary_set_data(reply, "crypto-key", objc_msgSend(v19, "bytes"), (size_t)objc_msgSend(v19, "length"));
LABEL_18:
        xpc_connection_send_message(v11, reply);
        goto LABEL_10;
      }
    }
  }
  v13 = ne_log_obj(type, v10);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    v21 = 134218240;
    v22 = reply;
    v23 = 2048;
    v24 = v11;
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to create a reply (%p) or a connection to send it over (%p) when sending the filter connection to the client", (uint8_t *)&v21, 0x16u);
  }

LABEL_10:
}

id sub_100070E58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _BYTE *v6;
  int v8;
  uint64_t v9;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v8 = 138412290;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: Handling installed apps change", (uint8_t *)&v8, 0xCu);
  }

  sub_10006F774(*(_QWORD **)(a1 + 32));
  v6 = *(_BYTE **)(a1 + 32);
  if (v6)
  {
    sub_10006FF24(v6, 0);
    v6 = *(_BYTE **)(a1 + 32);
  }
  return objc_msgSend(v6, "restartSession");
}

id sub_100070F1C(uint64_t a1)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a1 + 32);
  if (v2)
  {
    sub_10006FF24(v2, 0);
    v2 = *(_BYTE **)(a1 + 32);
  }
  return objc_msgSend(v2, "startWithCommand:isOnDemand:", 0, 0);
}

void sub_100070F54(_QWORD *self, const char *a2)
{
  const char *v3;
  NSObject *Property;
  SEL v5;

  if (self)
  {
    if ((_DWORD)a2)
    {
      self[54] = 500;
      self[55] = 0;
    }
    if (objc_getProperty(self, a2, 424, 1))
    {
      Property = objc_getProperty(self, v3, 424, 1);
      dispatch_source_cancel(Property);
      objc_setProperty_atomic(self, v5, 0, 424);
    }
  }
}

void sub_100070FD8(id *self, const char *a2)
{
  const char *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  id v11;
  SEL v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  const char *v18;
  uint64_t v19;
  void *v20;

  if (self && self[49] != a2)
  {
    if (!objc_getProperty(self, a2, 384, 1)
      || (v5 = objc_getProperty(self, v4, 384, 1),
          v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2)),
          v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v6)),
          v5,
          v6,
          !v7))
    {
      v8 = objc_claimAutoreleasedReturnValue(+[NESMFilterSessionState stateWithType:](NESMFilterSessionState, "stateWithType:", a2));
      if (!v8)
        __assert_rtn("-[NESMFilterSession setState:]", "NESMFilterSession.m", 332, "0");
      v7 = (void *)v8;
      if (!objc_getProperty(self, v9, 384, 1))
      {
        v11 = objc_alloc_init((Class)NSMutableDictionary);
        objc_setProperty_atomic(self, v12, v11, 384);

      }
      v13 = objc_getProperty(self, v10, 384, 1);
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2));
      objc_msgSend(v13, "setObject:forKeyedSubscript:", v7, v14);

    }
    v15 = self[49];
    objc_msgSend(self[47], "leave");
    self[49] = (id)a2;
    v16 = self[47];
    self[47] = v7;
    v17 = v7;

    objc_msgSend(self[47], "enterWithSession:", self);
    if (v15)
    {
      switch((unint64_t)self[49])
      {
        case 1uLL:
          if ((*((_BYTE *)self + 355) & 1) == 0 && objc_msgSend(self, "lastStopReason") != 6)
          {
            sub_10007127C(self, v18);
            goto LABEL_20;
          }
          if (objc_msgSend(self, "lastStopReason") != 6)
            goto LABEL_20;
          v19 = 1;
          sub_10006FF24(self, 1);
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(self, "server"));
          objc_msgSend(v20, "deregisterSession:", self);

          break;
        case 2uLL:
          v19 = 2;
          break;
        case 3uLL:
          sub_100070F54(self, (const char *)1);
          v19 = 3;
          break;
        case 4uLL:
          v19 = 5;
          break;
        default:
LABEL_20:
          v19 = 1;
          break;
      }
      objc_msgSend(self, "setStatus:", v19);
    }
  }
}

void sub_10007127C(_QWORD *a1, const char *a2)
{
  const char *v3;
  NSObject *Property;
  SEL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  dispatch_time_t v11;
  NSObject *v12;
  SEL v13;
  _QWORD v14[5];
  NSObject *v15;

  if (objc_getProperty(a1, a2, 424, 1))
  {
    Property = objc_getProperty(a1, v3, 424, 1);
    dispatch_source_cancel(Property);
    objc_setProperty_atomic(a1, v5, 0, 424);
  }
  v6 = a1[54];
  if (v6 >> 5 <= 0x752)
  {
    v7 = a1[55];
    if (v7 < 3)
    {
      v8 = v7 + 1;
    }
    else
    {
      v8 = 0;
      a1[54] = 4 * v6;
    }
    a1[55] = v8;
  }
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
  v10 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v9);

  v11 = dispatch_time(0, 1000000 * a1[54]);
  dispatch_source_set_timer(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0x1388uLL);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1000713F0;
  v14[3] = &unk_1000BEB58;
  v14[4] = a1;
  v15 = v10;
  v12 = v10;
  dispatch_source_set_event_handler(v12, v14);
  dispatch_resume(v12);
  objc_setProperty_atomic(a1, v13, v12, 424);

}

void sub_1000713F0(uint64_t a1, const char *a2)
{
  _BYTE *v3;
  id Property;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  id v11;
  int v12;
  uint64_t v13;

  v3 = *(_BYTE **)(a1 + 32);
  if (v3)
  {
    if ((v3[355] & 1) == 0)
    {
      Property = objc_getProperty(v3, a2, 416, 1);
      if (Property)
      {
        v6 = ne_log_obj(Property, v5);
        v7 = objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v8 = *(_QWORD *)(a1 + 32);
          v12 = 138412290;
          v13 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@: Restarting", (uint8_t *)&v12, 0xCu);
        }

        v10 = *(void **)(a1 + 32);
        if (v10)
          v11 = objc_getProperty(*(id *)(a1 + 32), v9, 416, 1);
        else
          v11 = 0;
        objc_msgSend(v10, "handleStartMessage:", v11);
      }
    }
  }
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
}

NEFilterPlugin *sub_1000714FC(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  NEFilterPlugin *v43;
  void *v44;
  NEFilterPlugin *v45;
  _QWORD v47[2];
  _QWORD v48[2];
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pluginType"));

  v6 = objc_opt_class(NEAgent);
  v8 = (objc_class *)v6;
  if (a2 == 4)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "contentFilter"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "provider"));
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "filterDataProviderBundleIdentifier"));
  }
  else
  {
    if (a2 != 6)
    {
LABEL_9:
      v23 = ne_log_obj(v6, v7);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        v50 = a1;
        v51 = 2048;
        v52 = a2;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%@: Configuration does not have a provider bundle identifier for class %ld", buf, 0x16u);
      }

      v13 = 0;
      v25 = 0;
      goto LABEL_18;
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "contentFilter"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "provider"));
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "filterPacketProviderBundleIdentifier"));
  }
  v13 = (void *)v12;

  if (!v13)
    goto LABEL_9;
  v14 = sub_10000C1FC();
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  v16 = sub_10000D860((uint64_t)v15, v13, a2);

  if (v16)
  {
    v8 = (objc_class *)objc_opt_class(NESMAgent);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "contentFilter"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "provider"));
    if (a2 == 4)
      v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "dataProviderDesignatedRequirement"));
    else
      v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "packetProviderDesignatedRequirement"));
    v28 = (void *)v22;

    if (!v28)
    {
      v38 = ne_log_obj(v29, v30);
      v25 = objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412802;
        v50 = a1;
        v51 = 2112;
        v52 = (uint64_t)v5;
        v53 = 2048;
        v54 = a2;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%@: Cannot create agent for plugin type %@ (class %ld), missing designated requirement", buf, 0x20u);
      }
      goto LABEL_24;
    }
    v47[0] = CFSTR("plugin-requirement");
    v47[1] = CFSTR("extension-identifier");
    v48[0] = v28;
    v48[1] = v13;
    v25 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v48, v47, 2));

  }
  else
  {
    v26 = ne_log_obj(v17, v18);
    v27 = objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v50 = a1;
      v51 = 2112;
      v52 = (uint64_t)v13;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%@: System Extension %@ is not currently registered", buf, 0x16u);
    }

    v47[0] = CFSTR("extension-identifier");
    v48[0] = v13;
    v25 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v48, v47, 1));
  }
LABEL_18:
  v31 = [v8 alloc];
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "uid"));
  v33 = objc_msgSend(v31, "initWithPluginType:pluginVersion:pluginClass:pluginInfo:userID:", v5, 1, a2, v25, v32);

  if (v33)
    goto LABEL_25;
  v36 = ne_log_obj(v34, v35);
  v37 = objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412802;
    v50 = a1;
    v51 = 2112;
    v52 = (uint64_t)v5;
    v53 = 2048;
    v54 = a2;
    _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%@: Failed to create a neagent instance for plugin type %@, class %ld", buf, 0x20u);
  }

LABEL_24:
  v33 = 0;
LABEL_25:

  if (v33)
  {
    v41 = ne_log_obj(v39, v40);
    v42 = objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v50 = a1;
      v51 = 2048;
      v52 = a2;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "%@: Creating a filter plugin with class %ld", buf, 0x16u);
    }

    v43 = [NEFilterPlugin alloc];
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
    v45 = -[NEPlugin initWithAgent:delegateQueue:andDelegate:](v43, "initWithAgent:delegateQueue:andDelegate:", v33, v44, a1);

  }
  else
  {
    v45 = 0;
  }

  return v45;
}

BOOL sub_1000719F4(void *a1, const char *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  NEFilterPlugin *v11;
  SEL v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  const char *v17;
  NEFilterPlugin *v18;
  void *v19;
  SEL v20;
  uint64_t v21;
  const char *v22;

  if (!a1)
    return 0;
  v3 = objc_getProperty(a1, a2, 400, 1);
  if (v3)
    goto LABEL_7;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "contentFilter"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "provider"));
  if ((objc_msgSend(v6, "filterSockets") & 1) != 0)
  {

LABEL_6:
    v11 = sub_1000714FC(a1, 4);
    v3 = (id)objc_claimAutoreleasedReturnValue(v11);
    objc_setProperty_atomic(a1, v12, v3, 400);
LABEL_7:

    goto LABEL_8;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "contentFilter"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "provider"));
  v10 = objc_msgSend(v9, "filterBrowsers");

  if ((v10 & 1) != 0)
    goto LABEL_6;
LABEL_8:
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "contentFilter"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "provider"));
  v16 = objc_msgSend(v15, "filterPackets");

  if (v16)
  {
    v18 = sub_1000714FC(a1, 6);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    objc_setProperty_atomic(a1, v20, v19, 408);

  }
  v21 = 1;
  if (!objc_getProperty(a1, v17, 400, 1))
    return objc_getProperty(a1, v22, 408, 1) != 0;
  return v21;
}

void sub_100073354(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

int64_t sub_100073CD8(id a1, id a2, id a3)
{
  return (int64_t)objc_msgSend(a3, "compare:", a2);
}

void sub_100073CE4(void *a1, const char *a2)
{
  const char *v3;
  SEL v4;
  id Property;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  SEL v9;
  int v10;
  void *v11;

  if (a1)
  {
    if (objc_getProperty(a1, a2, 424, 1))
    {
      objc_msgSend(objc_getProperty(a1, v3, 424, 1), "removeObserver:forKeyPath:", a1, CFSTR("bestAvailableNetworkDescription"));
      objc_setProperty_atomic(a1, v4, 0, 424);
    }
    Property = objc_getProperty(a1, v3, 416, 1);
    if (Property)
    {
      v7 = ne_log_obj(Property, v6);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v10 = 138412290;
        v11 = a1;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%@ End Relay On Demand monitor transaction", (uint8_t *)&v10, 0xCu);
      }

      objc_setProperty_atomic(a1, v9, 0, 416);
    }
  }
}

void sub_100073DFC(void *a1, const char *a2)
{
  const char *v3;
  const char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  SEL v9;
  int v10;
  void *v11;

  if (a1 && objc_getProperty(a1, a2, 376, 1))
  {
    if (objc_msgSend(objc_getProperty(a1, v3, 384, 1), "isRegistered"))
    {
      v5 = objc_msgSend(objc_getProperty(a1, v4, 384, 1), "unregisterNetworkAgent");
      v7 = ne_log_obj(v5, v6);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v10 = 138412290;
        v11 = a1;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@: Unregistered fallback relay network agent", (uint8_t *)&v10, 0xCu);
      }

    }
    objc_setProperty_atomic(a1, v4, 0, 384);
    sub_10007433C(a1);
    objc_setProperty_atomic(a1, v9, 0, 376);
  }
}

void sub_100073F14(void *a1, const char *a2)
{
  const char *v3;
  const char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  SEL v9;
  int v10;
  void *v11;

  if (a1 && objc_getProperty(a1, a2, 392, 1))
  {
    if (objc_msgSend(objc_getProperty(a1, v3, 400, 1), "isRegistered"))
    {
      v5 = objc_msgSend(objc_getProperty(a1, v4, 400, 1), "unregisterNetworkAgent");
      v7 = ne_log_obj(v5, v6);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v10 = 138412290;
        v11 = a1;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@: Unregistered relay DNS network agent", (uint8_t *)&v10, 0xCu);
      }

    }
    objc_setProperty_atomic(a1, v4, 0, 400);
    sub_10007402C(a1);
    objc_setProperty_atomic(a1, v9, 0, 392);
  }
}

void sub_10007402C(void *a1)
{
  _QWORD *v2;
  SEL v3;
  id v4;
  SEL v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  SEL v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[5];
  uint8_t buf[4];
  void *v24;

  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1000742AC;
  v22[3] = &unk_1000BE5E8;
  v22[4] = a1;
  v2 = objc_retainBlock(v22);
  if (objc_msgSend(objc_getProperty(a1, v3, 400, 1), "isRegistered"))
  {
    v4 = objc_alloc((Class)NENetworkAgentRegistrationFileHandle);
    v6 = objc_getProperty(a1, v5, 400, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(a1, "type")));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
    v11 = objc_msgSend(objc_getProperty(a1, v10, 392, 1), "agentUUID");
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v13 = objc_msgSend(v4, "initWithNetworkAgentRegistration:sessionType:configurationIdentifier:agentUUID:name:", v6, v7, v9, v12, CFSTR("dns-settings"));

    if (v13)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      objc_msgSend(v16, "setFileHandle:matchingPredicate:", v13, v2);
    }
    else
    {
      v17 = ne_log_obj(v14, v15);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "name"));
        *(_DWORD *)buf = 138412290;
        v24 = v21;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to create a file handle for relay DNS agent for configuration %@", buf, 0xCu);

      }
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      objc_msgSend(v16, "removeFileHandleMatchingPredicate:", v2);
    }

  }
  else
  {
    v13 = (id)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
    objc_msgSend(v13, "removeFileHandleMatchingPredicate:", v2);
  }

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
  objc_msgSend(v19, "commit");

}

uint64_t sub_1000742AC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  id v6;
  id Property;
  unsigned __int8 v8;
  uint64_t v9;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0)
    goto LABEL_6;
  v6 = v3;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v5, 392, 1);
  v8 = objc_msgSend(Property, "matchesFileHandle:", v6);

  if ((v8 & 1) != 0)
    v9 = 1;
  else
LABEL_6:
    v9 = 0;

  return v9;
}

void sub_10007433C(void *a1)
{
  _QWORD *v2;
  SEL v3;
  id v4;
  SEL v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  SEL v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[5];
  uint8_t buf[4];
  void *v24;

  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1000745BC;
  v22[3] = &unk_1000BE5E8;
  v22[4] = a1;
  v2 = objc_retainBlock(v22);
  if (objc_msgSend(objc_getProperty(a1, v3, 384, 1), "isRegistered"))
  {
    v4 = objc_alloc((Class)NENetworkAgentRegistrationFileHandle);
    v6 = objc_getProperty(a1, v5, 384, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(a1, "type")));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
    v11 = objc_msgSend(objc_getProperty(a1, v10, 376, 1), "agentUUID");
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v13 = objc_msgSend(v4, "initWithNetworkAgentRegistration:sessionType:configurationIdentifier:agentUUID:name:", v6, v7, v9, v12, CFSTR("h2-fallback"));

    if (v13)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      objc_msgSend(v16, "setFileHandle:matchingPredicate:", v13, v2);
    }
    else
    {
      v17 = ne_log_obj(v14, v15);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "name"));
        *(_DWORD *)buf = 138412290;
        v24 = v21;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to create a file handle for fallback relay agent for configuration %@", buf, 0xCu);

      }
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      objc_msgSend(v16, "removeFileHandleMatchingPredicate:", v2);
    }

  }
  else
  {
    v13 = (id)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
    objc_msgSend(v13, "removeFileHandleMatchingPredicate:", v2);
  }

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
  objc_msgSend(v19, "commit");

}

uint64_t sub_1000745BC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  id v6;
  id Property;
  unsigned __int8 v8;
  uint64_t v9;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0)
    goto LABEL_6;
  v6 = v3;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v5, 376, 1);
  v8 = objc_msgSend(Property, "matchesFileHandle:", v6);

  if ((v8 & 1) != 0)
    v9 = 1;
  else
LABEL_6:
    v9 = 0;

  return v9;
}

void sub_10007464C(void *a1, char a2)
{
  NSObject *v4;
  _QWORD block[6];
  char v6;
  char v7;
  _QWORD v8[5];
  id v9;

  if (a1)
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x3032000000;
    v8[3] = sub_10007473C;
    v8[4] = sub_10007474C;
    v9 = (id)os_transaction_create("com.apple.nesessionmanager.relay.updatePolicies");
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100074754;
    block[3] = &unk_1000BEA28;
    v6 = a2;
    v7 = 1;
    block[4] = a1;
    block[5] = v8;
    dispatch_async(v4, block);

    _Block_object_dispose(v8, 8);
  }
}

void sub_100074724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007473C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10007474C(uint64_t a1)
{

}

void sub_100074754(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  const char *v5;
  id Property;
  const char *v7;
  id v8;
  void *v9;
  const char *v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  _DWORD *v15;
  const char *v16;
  void *v17;
  id v18;
  const char *v19;
  void *v20;
  id v21;
  const char *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  const char *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  _QWORD v39[5];
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;

  if (*(_BYTE *)(a1 + 48))
  {
    sub_10007BD2C(*(void **)(a1 + 32));
    sub_10007AAF8(*(void **)(a1 + 32));
  }
  if (*(_BYTE *)(a1 + 49))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "relay"));
    v4 = objc_msgSend(v3, "isEnabled");

    Property = *(id *)(a1 + 32);
    if (v4)
    {
      if (Property)
        Property = objc_getProperty(Property, v5, 408, 1);
      v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "excludedDomains"));
      v9 = *(void **)(a1 + 32);
      if (v9 && objc_getProperty(v9, v7, 432, 1))
      {
        v11 = *(id *)(a1 + 32);
        if (v8)
        {
          if (v11)
            v12 = objc_getProperty(v11, v10, 432, 1);
          else
            v12 = 0;
          v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "arrayByAddingObjectsFromArray:", v12));

          v8 = (id)v13;
        }
        else
        {
          if (v11)
            v11 = objc_getProperty(v11, v10, 432, 1);
          v8 = v11;
        }
      }
      v15 = (_DWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "networkAgent"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "agentUUID"));
      v18 = *(id *)(a1 + 32);
      if (v18)
        v18 = objc_getProperty(v18, v16, 392, 1);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "agentUUID"));
      v21 = *(id *)(a1 + 32);
      if (v21)
        v21 = objc_getProperty(v21, v19, 408, 1);
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "matchDomains"));
      v24 = *(id *)(a1 + 32);
      if (v24)
        v24 = objc_getProperty(v24, v22, 408, 1);
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "perApp"));
      v26 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "server"));
      v28 = v26;
      if (v26)
        v26 = objc_getProperty(v26, v27, 80, 1);
      v29 = v26;
      v30 = v17;
      v31 = v20;
      v32 = v23;
      v14 = v8;
      v33 = v25;
      v34 = v29;
      v35 = v34;
      if (v15 && v15[2] == 9)
      {
        v39[0] = _NSConcreteStackBlock;
        v39[1] = 3221225472;
        v39[2] = sub_1000469F8;
        v39[3] = &unk_1000BDF40;
        v39[4] = v15;
        v40 = v34;
        v41 = v30;
        v42 = v31;
        v43 = v33;
        v44 = v32;
        v45 = v14;
        sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v39);

      }
    }
    else
    {
      v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "policySession"));
      sub_10002C404((uint64_t)v14);
    }

  }
  v36 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v37 = *(void **)(v36 + 40);
  *(_QWORD *)(v36 + 40) = 0;

}

id sub_100074A84(void *a1, void *a2)
{
  id v3;
  id v4;
  nw_endpoint_t url;
  void *masque;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  _BYTE v42[128];
  _BYTE v43[128];

  v3 = a1;
  v4 = a2;
  v28 = v3;
  url = nw_endpoint_create_url((const char *)objc_msgSend(v3, "UTF8String"));
  masque = (void *)nw_proxy_hop_create_masque();
  nw_proxy_hop_set_masque_version(masque, 2);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "additionalHTTPHeaderFields"));
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v37, v43, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v38;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v38 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)v11);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "additionalHTTPHeaderFields"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v12));

        nw_proxy_hop_add_extra_header(masque, objc_msgSend(v12, "UTF8String"), objc_msgSend(v14, "UTF8String"));
        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v37, v43, 16);
    }
    while (v9);
  }

  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "rawPublicKeys"));
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v33, v42, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v34;
    do
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v34 != v18)
          objc_enumerationMutation(v15);
        nw_proxy_hop_add_server_raw_public_key(masque, objc_msgSend(*(id *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)v19), "bytes"), objc_msgSend(*(id *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)v19), "length"));
        v19 = (char *)v19 + 1;
      }
      while (v17 != v19);
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v33, v42, 16);
    }
    while (v17);
  }

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identityReference"));
  if (v20)
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identityReference"));
    nw_proxy_hop_set_client_identity_reference(masque, v21);

  }
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "certificateReferences"));
  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v29, v41, 16);
  if (v23)
  {
    v24 = v23;
    v25 = *(_QWORD *)v30;
    do
    {
      v26 = 0;
      do
      {
        if (*(_QWORD *)v30 != v25)
          objc_enumerationMutation(v22);
        nw_proxy_hop_add_client_certificate_reference(masque, *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v26));
        v26 = (char *)v26 + 1;
      }
      while (v24 != v26);
      v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v29, v41, 16);
    }
    while (v24);
  }

  return masque;
}

BOOL sub_100074D90(void *a1, const char *a2)
{
  _BOOL8 v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (!a1)
    return 0;
  v2 = 1;
  v3 = objc_msgSend(objc_getProperty(a1, a2, 408, 1), "relays");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "syntheticDNSAnswerIPv4Prefix"));
  if (!v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "syntheticDNSAnswerIPv6Prefix"));
    v2 = v7 != 0;

  }
  return v2;
}

void sub_100074E24(unsigned __int16 *a1, const char *a2)
{
  id v3;
  void *v4;
  void *v5;
  const char *v6;
  void *v7;
  id v8;
  SEL v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  SEL v18;
  SEL v19;
  void *v20;
  void *v21;
  SEL v22;
  id v23;
  SEL v24;
  id Property;
  id v26;
  SEL v27;
  SEL v28;
  void *v29;
  void *v30;
  void *v31;
  SEL v32;
  id v33;
  const char *v34;
  void *v35;
  id v36;
  void *v37;
  SEL v38;
  id v39;
  void *v40;
  SEL v41;
  const char *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  SEL v46;
  id v47;
  SEL v48;
  id v49;
  unsigned __int8 v50;
  id v51;
  unsigned __int8 v52;
  uint64_t v53;
  const char *v54;
  id v55;
  SEL v56;
  id v57;
  uint64_t v58;
  NSObject *v59;
  SEL v60;
  SEL v61;
  const char *v62;
  nw_parameters_t secure_udp;
  void *v64;
  NSObject *v65;
  NSObject *v66;
  NSObject *v67;
  SEL v68;
  int v69;
  _QWORD v70[6];
  id location;
  void **receive_handler;
  uint64_t p_receive_handler;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t);
  void (*v76)(uint64_t);
  NSObject *v77;
  void *v78;
  __int128 buf;
  void (*v80)(uint64_t, int, uint64_t);
  void *v81;
  NSObject *v82;
  id v83;

  v69 = (int)a2;
  v3 = objc_msgSend(objc_getProperty(a1, a2, 408, 1), "relays");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dnsOverHTTPSURL"));
  if (v7)
  {
    v8 = objc_msgSend(objc_alloc((Class)NEDNSOverHTTPSSettings), "initWithServers:", &__NSArray0__struct);
    objc_msgSend(v8, "setServerURL:", v7);
    v10 = objc_msgSend(objc_getProperty(a1, v9, 408, 1), "matchDomains");
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    objc_msgSend(v8, "setMatchDomains:", v11);

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "identifier"));
    objc_msgSend(v8, "setProxyAgentUUID:", v13);

    goto LABEL_3;
  }
  if (!sub_100074D90(a1, v6))
    goto LABEL_22;
  if (a1[177])
  {
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("127.0.0.1:%u"), a1[177]));
    v36 = objc_alloc((Class)NEDNSSettings);
    v78 = v35;
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v78, 1));
    v8 = objc_msgSend(v36, "initWithServers:", v37);

    v39 = objc_msgSend(objc_getProperty(a1, v38, 408, 1), "matchDomains");
    v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
    objc_msgSend(v8, "setMatchDomains:", v40);

LABEL_3:
    if (v8)
    {
      v14 = objc_alloc((Class)NEDNSSettingsNetworkAgent);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "identifier"));
      v17 = objc_msgSend(v14, "initWithConfigUUID:sessionType:name:", v16, objc_msgSend(a1, "type"), CFSTR("dns-settings"));
      objc_setProperty_atomic(a1, v18, v17, 392);

      objc_msgSend(objc_getProperty(a1, v19, 392, 1), "setActive:", 1);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "name"));
      objc_msgSend(objc_getProperty(a1, v22, 392, 1), "setConfigurationName:", v21);

      v23 = objc_alloc((Class)NWNetworkAgentRegistration);
      Property = objc_getProperty(a1, v24, 392, 1);
      v26 = objc_msgSend(v23, "initWithNetworkAgentClass:", objc_opt_class(Property));
      objc_setProperty_atomic(a1, v27, v26, 400);

      objc_msgSend(objc_getProperty(a1, v28, 392, 1), "setSettings:", v8);
      receive_handler = 0;
      p_receive_handler = (uint64_t)&receive_handler;
      v74 = 0x3032000000;
      v75 = sub_10007473C;
      v76 = sub_10007474C;
      v77 = 0;
      if (!v69)
        goto LABEL_10;
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      v70[0] = _NSConcreteStackBlock;
      v70[1] = 3221225472;
      v70[2] = sub_100075584;
      v70[3] = &unk_1000BE5C0;
      v70[4] = a1;
      v70[5] = &receive_handler;
      objc_msgSend(v29, "iterateFileHandlesWithBlock:", v70);

      v30 = *(void **)(p_receive_handler + 40);
      if (v30)
      {
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "agentUUID"));
        v33 = objc_getProperty(a1, v32, 392, 1);
        objc_msgSend(v33, "setAgentUUID:", v31);
      }
      else
      {
LABEL_10:
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
        v33 = objc_getProperty(a1, v41, 392, 1);
        objc_msgSend(v33, "setAgentUUID:", v31);
      }

      v43 = *(void **)(p_receive_handler + 40);
      if (v43)
      {
        v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "handle"));
        v45 = dup((int)objc_msgSend(v44, "fileDescriptor"));

        v47 = objc_getProperty(a1, v46, 400, 1);
        v49 = objc_getProperty(a1, v48, 392, 1);
        v50 = objc_msgSend(v47, "setRegisteredNetworkAgent:fileDescriptor:", v49, v45);

        if ((v50 & 1) == 0)
          close(v45);
      }
      v51 = objc_getProperty(a1, v42, 400, 1);
      v52 = objc_msgSend(v51, "isRegistered");

      if ((v52 & 1) != 0)
      {
        v55 = objc_getProperty(a1, v54, 400, 1);
        v57 = objc_getProperty(a1, v56, 392, 1);
        objc_msgSend(v55, "updateNetworkAgent:", v57);
      }
      else
      {
        v58 = ne_log_obj(v53, v54);
        v59 = objc_claimAutoreleasedReturnValue(v58);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = a1;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "%@: Registered relay DNS network agent", (uint8_t *)&buf, 0xCu);
        }

        v55 = objc_getProperty(a1, v60, 400, 1);
        v57 = objc_getProperty(a1, v61, 392, 1);
        objc_msgSend(v55, "registerNetworkAgent:", v57);
      }

      if (v69)
        sub_10007402C(a1);
      _Block_object_dispose(&receive_handler, 8);

    }
    goto LABEL_22;
  }
  if (!objc_getProperty(a1, v34, 440, 1) && sub_100074D90(a1, v62))
  {
    secure_udp = nw_parameters_create_secure_udp(_nw_parameters_configure_protocol_disable, _nw_parameters_configure_protocol_default_configuration);
    v64 = (void *)nw_connection_group_create_with_parameters();
    nw_connection_group_set_connection_limit(v64, 10);
    receive_handler = _NSConcreteStackBlock;
    p_receive_handler = 3221225472;
    v74 = (uint64_t)sub_100075624;
    v75 = (uint64_t (*)(uint64_t, uint64_t))&unk_1000BE4B8;
    v76 = (void (*)(uint64_t))a1;
    v65 = v64;
    v77 = v65;
    nw_connection_group_set_receive_handler(v65, 0xFFFFFFFF, 1, &receive_handler);
    v66 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
    nw_connection_group_set_queue(v65, v66);

    objc_initWeak(&location, a1);
    *(_QWORD *)&buf = _NSConcreteStackBlock;
    *((_QWORD *)&buf + 1) = 3221225472;
    v80 = sub_1000758EC;
    v81 = &unk_1000BE4E0;
    objc_copyWeak(&v83, &location);
    v67 = v65;
    v82 = v67;
    nw_connection_group_set_state_changed_handler(v67, &buf);
    objc_setProperty_atomic(a1, v68, v67, 440);
    nw_connection_group_start(v67);

    objc_destroyWeak(&v83);
    objc_destroyWeak(&location);

  }
LABEL_22:

}

void sub_100075540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, char a18)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100075584(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  id v6;
  id Property;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v6 = v3;
    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v5, 392, 1);
    v8 = objc_msgSend(Property, "matchesFileHandle:", v6);
    if (v8)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v10 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = v6;
      v6 = v10;
    }
    v11 = v8 ^ 1;

  }
  else
  {
    v11 = 1;
  }

  return v11;
}

void sub_100075624(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  NSObject *v32;
  NSObject *v33;
  id v34;
  NSObject *v35;
  id v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  void *v44;
  _BYTE v45[128];

  v7 = a2;
  v8 = a3;
  v9 = v8;
  if (!v7 || !a4)
    goto LABEL_20;
  v35 = v8;
  v36 = v7;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v34 = objc_msgSend(objc_alloc((Class)NEDNSPacket), "initFromData:", v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "queries"));
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
  if (!v11)
    goto LABEL_17;
  v12 = v11;
  v13 = *(_QWORD *)v38;
  do
  {
    for (i = 0; i != v12; i = (char *)i + 1)
    {
      if (*(_QWORD *)v38 != v13)
        objc_enumerationMutation(v10);
      v15 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)i);
      if (objc_msgSend(v15, "recordType") == (id)1)
      {
        v16 = *(void **)(a1 + 32);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "name"));
        v18 = v16;
        v19 = v17;
        v20 = 0;
      }
      else
      {
        v21 = objc_msgSend(v15, "recordType");
        if (v21 != (id)28)
          goto LABEL_13;
        v23 = *(void **)(a1 + 32);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "name"));
        v18 = v23;
        v19 = v17;
        v20 = 1;
      }
      v24 = sub_100075970(v18, v19, v20);
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      objc_msgSend(v15, "setAnswerData:", v25);

      v21 = objc_msgSend(v15, "setAnswerTTL:", 15);
LABEL_13:
      v26 = ne_log_obj(v21, v22);
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "answerData"));
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "name"));
        *(_DWORD *)buf = 138412546;
        v42 = v28;
        v43 = 2112;
        v44 = v29;
        _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Generated synthetic DNS answer %@ for name %@", buf, 0x16u);

      }
    }
    v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
  }
  while (v12);
LABEL_17:

  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "createResponse"));
  v31 = v30;
  v9 = v35;
  if (v30)
  {
    v32 = *(NSObject **)(a1 + 40);
    v33 = objc_msgSend(v30, "_createDispatchData");
    nw_connection_group_reply(v32, v35, _nw_content_context_default_message, v33);

  }
  v7 = v36;
LABEL_20:

}

void sub_1000758EC(uint64_t a1, int a2, uint64_t a3)
{
  _WORD *WeakRetained;
  id v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && a2 == 2 && !a3)
  {
    v7 = WeakRetained;
    WeakRetained[177] = nw_connection_group_get_port(*(_QWORD *)(a1 + 32));
    sub_100074E24(v7, 0);
    sub_10007464C(v7, 0);
    WeakRetained = v7;
  }

}

id sub_100075970(void *a1, void *a2, int a3)
{
  id v5;
  const char *v6;
  void *v7;
  int *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  const char *v13;
  id v14;
  id v15;
  const char *v16;
  id v17;
  uint64_t v18;
  void *i;
  uint64_t v20;
  id v21;
  const char *v22;
  void *v23;
  SEL v24;
  id v25;
  const char *v26;
  void *v27;
  SEL v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  NSObject *address_from_string;
  NSObject *v35;
  unint64_t v36;
  const sockaddr *address;
  const sockaddr *v38;
  int sa_family;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  void *v45;
  unsigned int v46;
  __uint8_t *v47;
  __uint8_t *v48;
  unint64_t v49;
  void *v50;
  id v52;
  SEL v53;
  SEL v54;
  uint64_t v56;
  void *v57;
  NSObject *v58;
  void *v59;
  int *v60;
  NSObject *v61;
  void *v62;
  id obj;
  id obja;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint8_t v69[128];
  uint8_t buf[4];
  const char *v71;

  v5 = a2;
  v7 = v5;
  if (!a1)
  {
    v12 = 0;
    goto LABEL_57;
  }
  if (!v5)
  {
    v56 = ne_log_obj(0, v6);
    v10 = objc_claimAutoreleasedReturnValue(v56);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v71 = "-[NESMRelaySession getSyntheticAddressForHostname:ipv6:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%s called with null hostname", buf, 0xCu);
    }
    v12 = 0;
    goto LABEL_56;
  }
  if (a3)
    v8 = &OBJC_IVAR___NESMRelaySession__synthesizedIPv6Addresses;
  else
    v8 = &OBJC_IVAR___NESMRelaySession__synthesizedIPv4Addresses;
  v9 = objc_getProperty(a1, v6, *v8, 1);
  v10 = v9;
  if (v9)
  {
    v11 = objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", v7));
    if (v11)
    {
      v12 = (id)v11;
      sub_100075EF0(a1, v7);
      goto LABEL_56;
    }
  }
  v60 = v8;
  if ((unint64_t)-[NSObject count](v10, "count") >= 0x100)
  {
    v61 = v10;
    v14 = objc_msgSend(objc_getProperty(a1, v13, 464, 1), "subarrayWithRange:", 0, 128);
    v65 = 0u;
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue(v14);
    v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v65, v69, 16);
    if (v15)
    {
      v17 = v15;
      v18 = *(_QWORD *)v66;
      do
      {
        for (i = 0; i != v17; i = (char *)i + 1)
        {
          if (*(_QWORD *)v66 != v18)
            objc_enumerationMutation(obj);
          v20 = *(_QWORD *)(*((_QWORD *)&v65 + 1) + 8 * (_QWORD)i);
          v21 = objc_msgSend(objc_getProperty(a1, v16, 448, 1), "objectForKeyedSubscript:", v20);
          v23 = (void *)objc_claimAutoreleasedReturnValue(v21);
          if (v23)
          {
            sub_100075FE0((uint64_t)NESMRelaySession, v23);
            objc_msgSend(objc_getProperty(a1, v24, 448, 1), "setObject:forKeyedSubscript:", 0, v20);
          }
          v25 = objc_msgSend(objc_getProperty(a1, v22, 456, 1), "objectForKeyedSubscript:", v20);
          v27 = (void *)objc_claimAutoreleasedReturnValue(v25);
          if (v27)
          {
            sub_100075FE0((uint64_t)NESMRelaySession, v27);
            objc_msgSend(objc_getProperty(a1, v28, 456, 1), "setObject:forKeyedSubscript:", 0, v20);
          }
          objc_msgSend(objc_getProperty(a1, v26, 464, 1), "removeObject:", v20);

        }
        v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v65, v69, 16);
      }
      while (v17);
    }

    v10 = v61;
  }
  v29 = objc_msgSend(objc_getProperty(a1, v13, 408, 1), "relays");
  v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "lastObject"));

  if ((a3 & 1) != 0)
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "syntheticDNSAnswerIPv6Prefix"));
  else
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "syntheticDNSAnswerIPv4Prefix"));
  v33 = v32;
  if (!v32)
  {
    v12 = 0;
    goto LABEL_55;
  }
  buf[0] = 0;
  address_from_string = nw_endpoint_create_address_from_string(objc_msgSend(v32, "UTF8String"), "0", buf);
  v35 = address_from_string;
  v12 = 0;
  if (!address_from_string)
    goto LABEL_54;
  v36 = buf[0];
  if (buf[0] < 8u)
    goto LABEL_54;
  v59 = v33;
  address = nw_endpoint_get_address(address_from_string);
  if (!address)
    goto LABEL_47;
  v38 = address;
  sa_family = address->sa_family;
  if (!a3)
  {
    if (sa_family == 2)
    {
      v58 = v35;
      v40 = 4;
      goto LABEL_35;
    }
LABEL_47:
    v12 = 0;
    v33 = v59;
    goto LABEL_54;
  }
  if (sa_family != 30)
    goto LABEL_47;
  v58 = v35;
  v40 = 16;
LABEL_35:
  v41 = v36 >> 3;
  v42 = objc_claimAutoreleasedReturnValue(-[NSObject allValues](v10, "allValues"));
  v43 = 4;
  if (a3)
    v43 = 8;
  v44 = v40 - v41;
  obja = (id)v42;
  if (v40 <= v41)
  {
    v12 = 0;
    goto LABEL_53;
  }
  v45 = (void *)v42;
  v57 = v31;
  v62 = v7;
  v46 = 0;
  v47 = &v38->sa_len + v43;
  v48 = &v38->sa_len + v43 + v41;
  v49 = v40;
  while (1)
  {
    arc4random_buf(v48, v44);
    v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v47, v49));
    if ((objc_msgSend(v45, "containsObject:", v50) & 1) == 0)
      break;
LABEL_44:

    if (v46++ >= 0x1F)
    {
      v12 = 0;
      v7 = v62;
      goto LABEL_52;
    }
  }
  v12 = v50;
  objc_opt_self(NESMRelaySession);
  if (!v12)
  {
LABEL_43:

    v45 = obja;
    v49 = v40;
    goto LABEL_44;
  }
  sub_10007604C((uint64_t)NESMRelaySession);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1000CF928);
  if ((objc_msgSend((id)qword_1000CF918, "containsObject:", v12) & 1) != 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1000CF928);
    goto LABEL_43;
  }
  objc_msgSend((id)qword_1000CF918, "addObject:", v12);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1000CF928);

  if (!v10)
  {
    v52 = objc_alloc_init((Class)NSMutableDictionary);
    objc_setProperty_atomic(a1, v53, v52, *v60);

    v10 = objc_getProperty(a1, v54, *v60, 1);
  }
  v7 = v62;
  -[NSObject setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v12, v62, v57);
  sub_100075EF0(a1, v62);
LABEL_52:
  v31 = v57;
LABEL_53:
  v35 = v58;
  v33 = v59;

LABEL_54:
LABEL_55:

LABEL_56:
LABEL_57:

  return v12;
}

void sub_100075EF0(void *a1, void *a2)
{
  SEL v3;
  const char *v4;
  id v5;
  SEL v6;
  id v7;
  void *v8;
  unsigned __int8 v9;
  const char *v10;
  const char *v11;
  id v12;

  v12 = a2;
  if (!objc_getProperty(a1, v3, 464, 1))
  {
    v5 = objc_alloc_init((Class)NSMutableArray);
    objc_setProperty_atomic(a1, v6, v5, 464);

  }
  v7 = objc_msgSend(objc_getProperty(a1, v4, 464, 1), "lastObject");
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = objc_msgSend(v8, "isEqualToString:", v12);

  if ((v9 & 1) == 0)
  {
    if (objc_msgSend(objc_getProperty(a1, v10, 464, 1), "containsObject:", v12))
      objc_msgSend(objc_getProperty(a1, v11, 464, 1), "removeObject:", v12);
    objc_msgSend(objc_getProperty(a1, v11, 464, 1), "addObject:", v12);
  }

}

void sub_100075FE0(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_opt_self(a1);
  sub_10007604C((uint64_t)NESMRelaySession);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1000CF928);
  objc_msgSend((id)qword_1000CF918, "removeObject:", v3);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1000CF928);

}

void sub_10007604C(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_1000CF920 != -1)
    dispatch_once(&qword_1000CF920, &stru_1000BE490);
}

void sub_100076088(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSMutableSet);
  v2 = (void *)qword_1000CF918;
  qword_1000CF918 = (uint64_t)v1;

}

uint64_t sub_1000760B0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  id v6;
  id Property;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v6 = v3;
    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v5, 376, 1);
    v8 = objc_msgSend(Property, "matchesFileHandle:", v6);
    if (v8)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v10 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = v6;
      v6 = v10;
    }
    v11 = v8 ^ 1;

  }
  else
  {
    v11 = 1;
  }

  return v11;
}

void sub_100076150(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "relay"));

  if (v3)
    objc_msgSend(*(id *)(a1 + 32), "startWithCommand:isOnDemand:", 0, 0);
}

void sub_1000761B8(void *a1, const char *a2)
{
  void *v2;
  SEL v3;
  id v4;
  void *v5;
  const char *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  void *v16;
  void *v17;
  id v18;
  id v19;
  _UNKNOWN **v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  SEL v32;
  SEL v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  NSObject *v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  SEL v43;
  uint64_t v44;
  NSObject *v45;
  id v46;
  id v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint8_t buf[4];
  void *v53;

  if (!a1)
    return;
  v2 = a1;
  sub_100073CE4(a1, a2);
  v4 = objc_msgSend(objc_getProperty(v2, v3, 408, 1), "onDemandRules");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  if (!v5)
  {
    v47 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "server"));
    objc_msgSend(v47, "requestInstallForSession:withParentSession:exclusive:", v2, 0, 0);

    return;
  }
  v7 = objc_msgSend(objc_getProperty(v2, v6, 408, 1), "onDemandRules");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (!v8)
  {
    v10 = 0;
    goto LABEL_32;
  }
  v9 = (void *)v8;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  if (!objc_msgSend(v9, "count"))
  {
    v29 = objc_alloc_init((Class)NWNetworkDescription);
    objc_msgSend(v10, "addObject:", v29);

    goto LABEL_21;
  }
  v46 = v2;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v11 = v9;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v48, buf, 16);
  if (!v12)
    goto LABEL_17;
  v13 = v12;
  v14 = *(_QWORD *)v49;
  do
  {
    for (i = 0; i != v13; i = (char *)i + 1)
    {
      if (*(_QWORD *)v49 != v14)
        objc_enumerationMutation(v11);
      v16 = v10;
      v17 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * (_QWORD)i);
      v18 = objc_alloc_init((Class)NWNetworkDescription);
      v19 = objc_msgSend(v17, "interfaceTypeMatch");
      if (v19 == (id)3)
      {
        v20 = &off_1000C1708;
      }
      else
      {
        if (v19 != (id)2)
          goto LABEL_15;
        v20 = &off_1000C1720;
      }
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", v20));
      objc_msgSend(v18, "setInterfaceTypeOptions:", v21);

LABEL_15:
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "DNSSearchDomainMatch"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v22));
      objc_msgSend(v18, "setDnsSearchDomainOptions:", v23);

      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "DNSServerAddressMatch"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v24));
      objc_msgSend(v18, "setDnsServerAddressOptions:", v25);

      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "SSIDMatch"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v26));
      objc_msgSend(v18, "setSsidOptions:", v27);

      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "probeURL"));
      objc_msgSend(v18, "setProbeURL:", v28);

      v10 = v16;
      objc_msgSend(v16, "addObject:", v18);

    }
    v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v48, buf, 16);
  }
  while (v13);
LABEL_17:

  v2 = v46;
LABEL_21:

  if (v10)
  {
    v30 = objc_alloc_init((Class)NWParameters);
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:](NWMonitor, "monitorWithNetworkDescriptionArray:endpoint:parameters:", v10, 0, v30));
    objc_setProperty_atomic(v2, v32, v31, 424);

    if (objc_getProperty(v2, v33, 424, 1))
    {
      if (!objc_getProperty(v2, v34, 416, 1))
      {
        v36 = ne_log_obj(0, v35);
        v37 = objc_claimAutoreleasedReturnValue(v36);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v53 = v2;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "%@ Begin Relay On Demand monitor transaction", buf, 0xCu);
        }

        v38 = objc_alloc((Class)NSString);
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "configuration"));
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "identifier"));
        v41 = objc_msgSend(v38, "initWithFormat:", CFSTR("com.apple.nesessionmanager.RelayOnDemandMonitor.%@"), v40);

        v42 = (void *)os_transaction_create(objc_msgSend(v41, "UTF8String"));
        objc_setProperty_atomic(v2, v43, v42, 416);

      }
      objc_msgSend(objc_getProperty(v2, v35, 424, 1), "addObserver:forKeyPath:options:context:", v2, CFSTR("bestAvailableNetworkDescription"), 5, 0);
    }
    else
    {
      v44 = ne_log_obj(0, v34);
      v45 = objc_claimAutoreleasedReturnValue(v44);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v53 = v2;
        _os_log_error_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "%@ Relay On Demand monitor creation failed", buf, 0xCu);
      }

    }
  }
LABEL_32:

}

void sub_1000767E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100076800(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100076810(uint64_t a1)
{

}

void sub_100076818(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  unsigned int v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  unsigned int v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  unsigned __int8 v52;
  id Property;
  const char *v54;
  void *v55;
  id v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  NSObject *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint8_t v68[128];
  uint8_t buf[4];
  uint64_t v70;
  __int16 v71;
  uint64_t v72;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "onDemandMonitor"));
  if (v2 != v3)
  {

    goto LABEL_6;
  }
  v4 = objc_msgSend(*(id *)(a1 + 48), "isEqualToString:", CFSTR("bestAvailableNetworkDescription"));

  if (v4)
  {
    if (objc_msgSend(*(id *)(a1 + 40), "type") == 2)
      v5 = (uint64_t)objc_alloc_init((Class)NEOnDemandRuleConnect);
    else
      v5 = 0;
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "onDemandMonitor"));
    v28 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "bestAvailableNetworkDescription"));

    if (!v28)
    {
      v38 = ne_log_obj(v29, v30);
      v39 = objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        v40 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        v70 = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "%@: Matched no on demand rule", buf, 0xCu);
      }
      goto LABEL_39;
    }
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "onDemandMonitor"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "networkDescriptionArray"));
    v33 = objc_msgSend(v32, "indexOfObject:", v28);

    v34 = objc_msgSend(*(id *)(a1 + 40), "type");
    v35 = *(void **)(a1 + 40);
    if (v34 == 1)
    {
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "configuration"));
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "VPN"));
    }
    else
    {
      if (objc_msgSend(v35, "type") != 2)
      {
        v39 = 0;
LABEL_31:
        if ((sub_100076E38(*(void **)(a1 + 40)) & 1) == 0
          && sub_100076F3C(*(void **)(a1 + 40)))
        {
          v42 = sub_100077034(*(_QWORD *)(a1 + 40), v39);

          v39 = v42;
        }
        v43 = -[NSObject count](v39, "count");
        if (v43 > v33)
        {
          v45 = objc_claimAutoreleasedReturnValue(-[NSObject objectAtIndex:](v39, "objectAtIndex:", v33));

          v5 = v45;
        }
        v46 = ne_log_obj(v43, v44);
        v47 = objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          v48 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          v70 = v48;
          v71 = 2112;
          v72 = v5;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "%@: Matched on demand rule %@", buf, 0x16u);
        }

LABEL_39:
        v49 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "matchedRule"));
        if (v49 | v5)
        {
          v50 = (void *)v49;
          v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "matchedRule"));
          v52 = objc_msgSend(v51, "isEqual:", v5);

          if ((v52 & 1) == 0)
          {
            objc_msgSend(*(id *)(a1 + 40), "setMatchedRule:", v5);
            sub_1000770A8(*(id *)(a1 + 40));
            objc_msgSend(*(id *)(a1 + 40), "notifyChangedExtendedStatus");
          }
        }
        goto LABEL_53;
      }
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configuration"));
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "appVPN"));
    }
    v41 = v37;
    v39 = objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "onDemandRules"));

    goto LABEL_31;
  }
LABEL_6:
  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dnsRedirectionDetector"));
  if (v6 != v7)
  {

    goto LABEL_54;
  }
  v8 = objc_msgSend(*(id *)(a1 + 48), "isEqualToString:", CFSTR("status"));

  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dnsRedirectionDetector"));
    v10 = objc_msgSend(v9, "status");

    if (v10 == (id)2)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dnsRedirectionDetector"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "resolvedEndpoints"));
      v13 = objc_msgSend(v12, "count");

      if (v13)
      {
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dnsRedirectionDetector"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "resolvedEndpoints"));

        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v64, v68, 16);
        if (v16)
        {
          v18 = v16;
          v5 = 0;
          v19 = *(_QWORD *)v65;
          do
          {
            v20 = 0;
            v21 = (void *)v5;
            do
            {
              if (*(_QWORD *)v65 != v19)
                objc_enumerationMutation(v15);
              v22 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * (_QWORD)v20);
              v23 = ne_log_obj(v16, v17);
              v24 = objc_claimAutoreleasedReturnValue(v23);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                v25 = *(_QWORD *)(a1 + 40);
                *(_DWORD *)buf = 138412546;
                v70 = v25;
                v71 = 2112;
                v72 = (uint64_t)v22;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%@: Found redirected address %@", buf, 0x16u);
              }

              v26 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "lastPrimaryInterface")));
              NEHelperCacheAddRedirectedAddress(objc_msgSend(v26, "UTF8String"), objc_msgSend(v22, "address"));

              v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "hostname"));
              v20 = (char *)v20 + 1;
              v21 = (void *)v5;
            }
            while (v18 != v20);
            v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v64, v68, 16);
            v18 = v16;
          }
          while (v16);
        }
        else
        {
          v5 = 0;
        }

      }
      else
      {
        v5 = 0;
      }
      sub_10007885C(*(void **)(a1 + 40));
      objc_msgSend(*(id *)(a1 + 40), "setDnsRedirectionTransaction:", 0);
      Property = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "server"));
      v55 = Property;
      if (Property)
        Property = objc_getProperty(Property, v54, 64, 1);
      v28 = Property;

      if (v5)
        v56 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithObjectsAndKeys:", v5, CFSTR("redirectedAddress"), 0);
      else
        v56 = objc_alloc_init((Class)NSDictionary);
      v58 = v56;
      v59 = ne_log_obj(v56, v57);
      v60 = objc_claimAutoreleasedReturnValue(v59);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v70 = v5;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Caching DNS redirector result: %@", buf, 0xCu);
      }

      v61 = (void *)objc_claimAutoreleasedReturnValue(+[NENetworkPropertiesCache sharedCache](NENetworkPropertiesCache, "sharedCache"));
      objc_msgSend(v61, "setProperties:forNetworkPath:", v58, v28);

LABEL_53:
    }
  }
LABEL_54:
  v62 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v63 = *(void **)(v62 + 40);
  *(_QWORD *)(v62 + 40) = 0;

}

id sub_100076E38(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  if (a1 && (objc_msgSend(a1, "disableOnDemand") & 1) == 0)
  {
    if (objc_msgSend(a1, "type") == 1)
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "VPN"));
      if (objc_msgSend(v3, "isOnDemandEnabled"))
      {
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "VPN"));
LABEL_9:
        v6 = v5;
        v7 = objc_msgSend(v5, "isEnabled");

LABEL_12:
        return v7;
      }
      goto LABEL_11;
    }
    if (objc_msgSend(a1, "type") == 2)
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "appVPN"));
      if (objc_msgSend(v3, "isOnDemandEnabled"))
      {
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "appVPN"));
        goto LABEL_9;
      }
LABEL_11:
      v7 = 0;
      goto LABEL_12;
    }
  }
  return 0;
}

id sub_100076F3C(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  if (!a1)
    return 0;
  if (objc_msgSend(a1, "type") != 1)
  {
    if (objc_msgSend(a1, "type") == 2)
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "appVPN"));
      if (objc_msgSend(v3, "isDisconnectOnDemandEnabled"))
      {
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "appVPN"));
        goto LABEL_8;
      }
LABEL_9:
      v7 = 0;
      goto LABEL_10;
    }
    return 0;
  }
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "VPN"));
  if (!objc_msgSend(v3, "isDisconnectOnDemandEnabled"))
    goto LABEL_9;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "VPN"));
LABEL_8:
  v6 = v5;
  v7 = objc_msgSend(v5, "isEnabled");

LABEL_10:
  return v7;
}

uint64_t sub_100077034(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  if (!a1)
    return 0;
  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", &stru_1000BE6C8));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "filteredArrayUsingPredicate:", v3));

  return v4;
}

id sub_1000770A8(id result)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  const __CFString *v9;
  __CFString *v10;
  CFArrayRef v11;
  id v12;
  void *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  unsigned __int8 v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  const char *v28;
  void *v29;
  id Property;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  id v41;
  NSObject *v42;
  uint64_t v43;
  NSObject *v44;
  uint32_t v45;
  uint32_t v46;
  void *v47;
  _BOOL4 v48;
  id v49;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  void *v61;
  id v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  uint64_t v72;
  void *i;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  int v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  int v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  id v92;
  id v93;
  void *v94;
  unsigned int v95;
  signed int v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  const __CFString *NetworkServiceEntity;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  uint64_t v108;
  unsigned int v109;
  id v110;
  void *v111;
  uint64_t v112;
  _DWORD *v113;
  void *v114;
  void *v115;
  void *v116;
  id v117;
  void *v118;
  id v119;
  id v120;
  id v121;
  id v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  _DWORD *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  uint64_t matched;
  void *v150;
  uint64_t v151;
  void *v152;
  void *v153;
  id v154;
  void *v155;
  void *v156;
  unsigned __int8 v157;
  id v158;
  id v159;
  id v160;
  id v161;
  id v162;
  void *v163;
  _BOOL4 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  NSObject *v168;
  void *v169;
  xpc_object_t v170;
  NSObject *v171;
  id v172;
  BOOL v173;
  void *v174;
  const __CFArray *v175;
  id v176;
  unsigned int v177;
  uint64_t v178;
  void *value;
  __CFString *serviceID;
  id v181;
  void *v182;
  id obj;
  id obja;
  uint64_t v185;
  void *v186;
  id v187;
  void *v188;
  _DWORD *v189;
  id val;
  uint64_t v191;
  void *v192;
  _QWORD block[4];
  id v194;
  id v195;
  _QWORD v196[5];
  id v197;
  id v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  const __CFString *v207;
  unsigned __int8 uu[8];
  uint64_t v209;
  _BYTE out[40];
  id v211;
  id v212;
  id v213;
  id v214;
  id v215;
  id v216;
  int v217;
  unsigned __int8 v218;
  _QWORD v219[2];
  _QWORD v220[2];

  if (!result)
    return result;
  val = result;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(result, "server"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "primaryPhysicalInterface"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "interfaceName"));
  v4 = val;
  objc_msgSend(val, "setLastPrimaryInterface:", v3);

  objc_msgSend(val, "setFailedConnectCountWithinInterval:", 0);
  sub_1000788C8(val);
  if (objc_msgSend(val, "type") == 1)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "configuration"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "UUIDString"));
    v8 = objc_opt_class(NESMVPNSession);
    if ((objc_opt_isKindOfClass(val, v8) & 1) != 0 && objc_msgSend(val, "tunnelKind") == (id)2)
      v9 = CFSTR("%@-TMP-FB-[^/]+");
    else
      v9 = CFSTR("%@-TMP-[^/]+");
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v9, v7));
    *(_QWORD *)out = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, v10, kSCEntNetDNS);
    v11 = SCDynamicStoreCopyKeyList(0, *(CFStringRef *)out);
    myCFRelease(out);
    v12 = -[__CFArray mutableCopy](v11, "mutableCopy");
    objc_msgSend(val, "setStaleOnDemandDNSKeys:", v12);

    v4 = val;
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "matchedRule"));
  if (objc_msgSend(v13, "action") == (id)3)
  {
    v14 = val;
    v15 = objc_msgSend(val, "type");

    if (v15 == 1)
    {
      v176 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "matchedRule"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "server"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "primaryCellularInterface"));
      if (v17)
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "lastPrimaryInterface"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "server"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "primaryCellularInterface"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "interfaceName"));
        v22 = objc_msgSend(v18, "isEqualToString:", v21);

        if ((v22 & 1) != 0)
          goto LABEL_49;
      }
      else
      {

      }
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "server"));
      v29 = v27;
      if (v27)
        Property = objc_getProperty(v27, v28, 64, 1);
      else
        Property = 0;
      v31 = Property;

      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NENetworkPropertiesCache sharedCache](NENetworkPropertiesCache, "sharedCache"));
      v33 = objc_msgSend(v32, "copyPropertiesForNetworkPath:", v31);

      if (v33)
      {
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("redirectedAddress")));
        v38 = ne_log_obj(v36, v37);
        v39 = objc_claimAutoreleasedReturnValue(v38);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)out = 138412290;
          *(_QWORD *)&out[4] = v36;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Using cached DNS redirector result: %@", out, 0xCu);
        }

        if (!isa_nsstring(v36))
          goto LABEL_48;
        v41 = (id)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v36, CFSTR("0")));
        if (v41)
        {
          v42 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "lastPrimaryInterface")));
          NEHelperCacheAddRedirectedAddress(-[NSObject UTF8String](v42, "UTF8String"), objc_msgSend(v41, "address"));
        }
        else
        {
          v65 = ne_log_obj(0, v40);
          v42 = objc_claimAutoreleasedReturnValue(v65);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)out = 138412290;
            *(_QWORD *)&out[4] = v36;
            _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Failed to create an address endpoint from %@", out, 0xCu);
          }
          v41 = 0;
        }
      }
      else
      {
        v43 = ne_log_obj(v34, v35);
        v44 = objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)out = 0;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Starting DNS redirection detection", out, 2u);
        }

        v45 = arc4random_uniform(0x15u);
        v46 = arc4random_uniform(0x15u);
        sub_10007885C(val);
        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "dnsRedirectionTransaction"));
        v48 = v47 == 0;

        if (v48)
        {
          v49 = objc_alloc((Class)NSString);
          v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "configuration"));
          v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "identifier"));
          v52 = objc_msgSend(v49, "initWithFormat:", CFSTR("com.apple.nesessionmanager.dnsRedirection.%@"), v51);

          v53 = (void *)os_transaction_create(objc_msgSend(v52, "UTF8String"));
          objc_msgSend(val, "setDnsRedirectionTransaction:", v53);

        }
        v54 = v45 + 8;
        if ((int)v54 < 1)
        {
          v54 = 0;
        }
        else
        {
          v55 = out;
          v56 = v54;
          do
          {
            *v55++ = aAbcdefghijklmn[arc4random_uniform(0x1FF1u) % 0x25];
            --v56;
          }
          while (v56);
        }
        out[v54] = 46;
        if ((int)(v46 + 8) < 1)
        {
          v57 = v54 + 1;
        }
        else
        {
          v57 = v46 + v54 + 9;
          do
            out[++v54] = aAbcdefghijklmn[arc4random_uniform(0x1FF1u) % 0x25];
          while (v57 - 1 != v54);
        }
        strncpy(&out[v57], ".com", 255 - v54);
        v58 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", out));
        v36 = (void *)objc_claimAutoreleasedReturnValue(+[NWHostEndpoint endpointWithHostname:port:](NWHostEndpoint, "endpointWithHostname:port:", v58, CFSTR("80")));

        v41 = objc_alloc_init((Class)NWParameters);
        objc_msgSend(v41, "setRequiredAddressFamily:", 2);
        v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "lastPrimaryInterface"));
        LOBYTE(v58) = v59 == 0;

        if ((v58 & 1) == 0)
        {
          v60 = objc_alloc((Class)NWInterface);
          v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "lastPrimaryInterface"));
          v62 = objc_msgSend(v60, "initWithInterfaceName:", v61);
          objc_msgSend(v41, "setRequiredInterface:", v62);

        }
        v63 = objc_msgSend(objc_alloc((Class)NWResolver), "initWithEndpoint:parameters:", v36, v41);
        objc_msgSend(val, "setDnsRedirectionDetector:", v63);

        v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "dnsRedirectionDetector"));
        if (!v64)
          goto LABEL_47;
        v42 = objc_claimAutoreleasedReturnValue(objc_msgSend(val, "dnsRedirectionDetector"));
        -[NSObject addObserver:forKeyPath:options:context:](v42, "addObserver:forKeyPath:options:context:", val, CFSTR("status"), 5, 0);
      }

LABEL_47:
LABEL_48:

LABEL_49:
      v181 = objc_alloc_init((Class)NSMutableArray);
      objc_msgSend(val, "setOnDemandDomainCache:");
      v205 = 0u;
      v206 = 0u;
      v203 = 0u;
      v204 = 0u;
      obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v176, "connectionRules"));
      v187 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v203, out, 16);
      if (v187)
      {
        v185 = *(_QWORD *)v204;
        v178 = kSCPropNetDNSServiceIdentifier;
        do
        {
          v66 = 0;
          do
          {
            if (*(_QWORD *)v204 != v185)
            {
              v67 = v66;
              objc_enumerationMutation(obj);
              v66 = v67;
            }
            v191 = v66;
            v68 = *(void **)(*((_QWORD *)&v203 + 1) + 8 * v66);
            v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
            v201 = 0u;
            v202 = 0u;
            v199 = 0u;
            v200 = 0u;
            v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "matchDomains"));
            v71 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v199, uu, 16);
            if (v71)
            {
              v72 = *(_QWORD *)v200;
              do
              {
                for (i = 0; i != v71; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v200 != v72)
                    objc_enumerationMutation(v70);
                  v74 = *(void **)(*((_QWORD *)&v199 + 1) + 8 * (_QWORD)i);
                  v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("*.")));
                  v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "stringByTrimmingCharactersInSet:", v75));
                  if (v76)
                    objc_msgSend(v69, "addObject:", v76);

                }
                v71 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v199, uu, 16);
              }
              while (v71);
            }

            if (objc_msgSend(v68, "action") == (id)1)
            {
              v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "probeURL"));
              v78 = isa_nsurl();

              if (v78)
              {
                v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "probeURL"));
                v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", v79));

                if (v80)
                {
                  v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "lastPrimaryInterface"));
                  objc_msgSend(v80, "setBoundInterfaceIdentifier:", v81);

                  v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLSessionConfiguration defaultSessionConfiguration](NSURLSessionConfiguration, "defaultSessionConfiguration"));
                  v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSOperationQueue mainQueue](NSOperationQueue, "mainQueue"));
                  v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLSession sessionWithConfiguration:delegate:delegateQueue:](NSURLSession, "sessionWithConfiguration:delegate:delegateQueue:", v82, 0, v83));

                  v196[0] = _NSConcreteStackBlock;
                  v196[1] = 3221225472;
                  v196[2] = sub_100079B98;
                  v196[3] = &unk_1000BE660;
                  v196[4] = val;
                  v197 = v181;
                  v198 = v69;
                  v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "dataTaskWithRequest:completionHandler:", v80, v196));
                  objc_msgSend(v85, "resume");
                  objc_msgSend(v84, "finishTasksAndInvalidate");

                }
              }
            }
            if (objc_msgSend(v68, "action") == (id)1)
            {
              v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "useDNSServers"));
              v87 = isa_nsarray(v86);

              if (v87)
              {
                v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "useDNSServers"));
                v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "configuration"));
                v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "identifier"));
                v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "UUIDString"));
                v92 = v88;
                v93 = v91;
                v94 = v93;
                do
                {
                  v95 = __ldxr((unsigned int *)&unk_1000CF578);
                  v96 = v95 + 1;
                }
                while (__stxr(v95 + 1, (unsigned int *)&unk_1000CF578));
                if (isa_nsstring(v93) && isa_nsarray(v92))
                {
                  v97 = objc_opt_class(NESMVPNSession);
                  v98 = (v96 % 1000 + 1000);
                  if ((objc_opt_isKindOfClass(val, v97) & 1) != 0 && objc_msgSend(val, "tunnelKind") == (id)2)
                  {
                    v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v98));
                    serviceID = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-TMP-FB-%@"), v94, v99));
                  }
                  else
                  {
                    v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v98));
                    serviceID = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-TMP-%@"), v94, v99));
                  }

                  NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, serviceID, kSCEntNetDNS);
                  v207 = NetworkServiceEntity;
                  v219[0] = kSCPropNetDNSServerAddresses;
                  v219[1] = v178;
                  v220[0] = v92;
                  v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v98));
                  v220[1] = v101;
                  value = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v220, v219, 2));

                  if (NetworkServiceEntity && value)
                  {
                    if (SCDynamicStoreSetValue(0, NetworkServiceEntity, value))
                    {
                      v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "staleOnDemandDNSKeys"));
                      v177 = objc_msgSend(v102, "containsObject:", NetworkServiceEntity);

                      if (v177)
                      {
                        v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "staleOnDemandDNSKeys"));
                        objc_msgSend(v103, "removeObject:", NetworkServiceEntity);

                      }
                    }
                    else
                    {
                      v98 = 0;
                    }
                  }
                  myCFRelease(&v207);

                }
                else
                {
                  v98 = 0;
                }

                if ((_DWORD)v98)
                {
                  v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
                  objc_msgSend(v104, "setObject:forKeyedSubscript:", v69, CFSTR("service-domains"));
                  v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v98));
                  objc_msgSend(v104, "setObject:forKeyedSubscript:", v105, CFSTR("service-dns-service"));

                  objc_msgSend(v181, "addObject:", v104);
                }
              }
            }

            v66 = v191 + 1;
          }
          while ((id)(v191 + 1) != v187);
          v187 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v203, out, 16);
        }
        while (v187);
      }

      sub_100079CA8(val);
      goto LABEL_91;
    }
  }
  else
  {

    v14 = val;
  }
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "lastPrimaryInterface"));

  if (v23)
  {
    *(_QWORD *)uu = 0;
    v209 = 0;
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "configuration"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "identifier"));
    objc_msgSend(v25, "getUUIDBytes:", uu);

    memset(out, 0, 37);
    uuid_unparse(uu, out);
    v26 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "lastPrimaryInterface")));
    NEHelperCacheSetDomainDictionaries(out, objc_msgSend(v26, "UTF8String"), 0);

  }
LABEL_91:
  v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "matchedRule"));

  if (v106)
  {
    v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "uid"));
    v108 = (uint64_t)objc_msgSend(v107, "unsignedIntValue");

    if (!(_DWORD)v108)
    {
      v109 = NEGetConsoleUserUID();
      if (v109)
        v108 = v109;
      else
        v108 = 501;
    }
    v110 = sub_100079A38((uint64_t)val);
    v192 = (void *)objc_claimAutoreleasedReturnValue(v110);
    v111 = val;
    if (objc_msgSend(val, "type") == 1)
    {
      v112 = objc_opt_class(NESMVPNSession);
      if ((objc_opt_isKindOfClass(val, v112) & 1) != 0 && objc_msgSend(val, "tunnelKind") == (id)2)
      {
        v113 = (_DWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "policySession"));
        v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "matchedRule"));
        v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "networkAgent"));
        v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v115, "agentUUID"));
        v117 = objc_msgSend(val, "onDemandPauseLevelInternal");
        v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "lastPrimaryInterface"));
        v119 = v114;
        v120 = v116;
        v121 = v118;
        v122 = v192;
        if (v113 && v120 && v113[2] == 1)
        {
          *(_QWORD *)out = _NSConcreteStackBlock;
          *(_QWORD *)&out[8] = 3221225472;
          *(_QWORD *)&out[16] = sub_100030C44;
          *(_QWORD *)&out[24] = &unk_1000BDAC8;
          *(_QWORD *)&out[32] = v113;
          v215 = v117;
          v211 = v119;
          LODWORD(v216) = v108;
          v212 = v121;
          v213 = v120;
          v214 = v122;
          sub_10002C9C8((uint64_t)NESMPolicyMasterSession, out);

        }
      }
      else
      {
        v142 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "configuration"));
        v143 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "VPN"));
        v144 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v143, "protocol"));
        v145 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v144, "DNSSettings"));
        v146 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "matchDomains"));

        if (!objc_msgSend(v146, "count"))
        {
          *(_QWORD *)&out[8] = 0;
          *(_QWORD *)out = 0;
          v147 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "configuration"));
          v148 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v147, "identifier"));
          objc_msgSend(v148, "getUUIDBytes:", out);

          matched = ne_session_service_copy_cached_match_domains(out, objc_msgSend(val, "type"));
          v150 = (void *)matched;
          if (matched)
          {
            v151 = _CFXPCCreateCFObjectFromXPCObject(matched);

            v146 = (void *)v151;
          }

        }
        v189 = (_DWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "policySession"));
        v152 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "matchedRule"));
        v186 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "networkAgent"));
        v153 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v186, "agentUUID"));
        v154 = objc_msgSend(val, "onDemandPauseLevelInternal");
        v155 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "lastPrimaryInterface"));
        obja = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "configuration"));
        v182 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(obja, "VPN"));
        v156 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v182, "protocol"));
        v157 = objc_msgSend(v156, "excludeLocalNetworks");
        v158 = v152;
        v159 = v153;
        v160 = v155;
        v161 = v192;
        v162 = v146;
        if (v189 && v159 && v189[2] == 1)
        {
          *(_QWORD *)out = _NSConcreteStackBlock;
          *(_QWORD *)&out[8] = 3221225472;
          *(_QWORD *)&out[16] = sub_10002F6B8;
          *(_QWORD *)&out[24] = &unk_1000BDAA0;
          v217 = v108;
          *(_QWORD *)&out[32] = v189;
          v216 = v154;
          v211 = v158;
          v212 = v162;
          v213 = v160;
          v214 = v159;
          v215 = v161;
          v218 = v157;
          sub_10002C9C8((uint64_t)NESMPolicyMasterSession, out);

        }
      }
    }
    else
    {
      if (objc_msgSend(val, "type") != 2)
      {
LABEL_123:
        v163 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v111, "matchedRule"));
        v164 = objc_msgSend(v163, "action") == (id)2;

        if (v164)
        {
          v167 = ne_log_obj(v165, v166);
          v168 = objc_claimAutoreleasedReturnValue(v167);
          if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
          {
            v169 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "matchedRule"));
            *(_DWORD *)out = 138412546;
            *(_QWORD *)&out[4] = val;
            *(_WORD *)&out[12] = 2112;
            *(_QWORD *)&out[14] = v169;
            _os_log_impl((void *)&_mh_execute_header, v168, OS_LOG_TYPE_DEFAULT, "%@: On Demand disconnect, current matched rule is %@", out, 0x16u);

          }
          v170 = xpc_dictionary_create(0, 0, 0);
          xpc_dictionary_set_int64(v170, "SessionCommandType", 3);
          xpc_dictionary_set_int64(v170, "SessionStopReason", 39);
          objc_initWeak((id *)out, val);
          v171 = objc_claimAutoreleasedReturnValue(objc_msgSend(val, "messageQueue"));
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_100079AE0;
          block[3] = &unk_1000BE610;
          objc_copyWeak(&v195, (id *)out);
          v194 = v170;
          v172 = v170;
          dispatch_async(v171, block);

          objc_destroyWeak(&v195);
          objc_destroyWeak((id *)out);
        }

        goto LABEL_128;
      }
      v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "policySession"));
      v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "configuration"));
      v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "appVPN"));
      v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v126, "appRules"));
      sub_10003A874((uint64_t)v124, v127, v108);

      v128 = (_DWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "policySession"));
      v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "matchedRule"));
      v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "configuration"));
      v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v130, "appVPN"));
      v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v131, "appRules"));
      v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "networkAgent"));
      v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "agentUUID"));
      v135 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "configuration"));
      v188 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v135, "appVPN"));
      v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v188, "excludedDomains"));
      v137 = v129;
      v138 = v132;
      v139 = v134;
      v140 = v192;
      v141 = v136;
      if (v128 && (objc_msgSend(v138, "count") || objc_msgSend(v140, "count")) && v139 && v128[2] == 2)
      {
        *(_QWORD *)out = _NSConcreteStackBlock;
        *(_QWORD *)&out[8] = 3221225472;
        *(_QWORD *)&out[16] = sub_100031FD0;
        *(_QWORD *)&out[24] = &unk_1000BDBA8;
        *(_QWORD *)&out[32] = v128;
        v211 = v137;
        v212 = v138;
        v213 = v141;
        v214 = v139;
        v215 = v140;
        sub_10002C9C8((uint64_t)NESMPolicyMasterSession, out);

      }
    }
    v111 = val;
    goto LABEL_123;
  }
  v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "policySession"));
  sub_10002C4C4((uint64_t)v123);

LABEL_128:
  v173 = objc_msgSend(val, "type") == 1;
  result = val;
  if (v173)
  {
    v174 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "staleOnDemandDNSKeys"));

    if (v174)
    {
      v175 = (const __CFArray *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "staleOnDemandDNSKeys"));
      SCDynamicStoreSetMultiple(0, 0, v175, 0);

    }
    return objc_msgSend(val, "setStaleOnDemandDNSKeys:", 0);
  }
  return result;
}

void sub_100078840(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_10007885C(void *a1)
{
  void *v2;
  void *v3;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "dnsRedirectionDetector"));

    if (v2)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "dnsRedirectionDetector"));
      objc_msgSend(v3, "removeObserver:forKeyPath:", a1, CFSTR("status"));

      objc_msgSend(a1, "setDnsRedirectionDetector:", 0);
    }
  }
}

void sub_1000788C8(void *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned __int8 v8;
  void *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  unsigned int v13;
  _BOOL4 v14;
  int v15;
  void *v16;
  _BOOL4 v17;
  void *v18;
  unsigned __int8 *v19;
  id v20;
  void *v21;
  id v22;
  SEL v23;
  id v24;
  const char *v25;
  id v26;
  void *v27;
  void *v28;
  SEL v29;
  id Property;
  void *v31;
  unsigned __int8 v32;
  char v33;
  const char *v34;
  id v35;
  void *v36;
  id v37;
  SEL v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  char is_equal;
  const char *v44;
  id v45;
  id v46;
  const char *v47;
  id v48;
  uint64_t v49;
  void *k;
  id v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  id v59;
  void *v60;
  void *v61;
  id v62;
  void *v63;
  void *v64;
  unsigned int v65;
  _BOOL8 v66;
  id v67;
  void *v68;
  unsigned int v69;
  void *v70;
  char v72;
  void *v73;
  void *v74;
  unsigned int v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  const char *v87;
  const char *v88;
  const char *v89;
  const char *v90;
  void *v91;
  void *v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  const char *v97;
  void *v98;
  void *v99;
  void *v100;
  id v101;
  id v102;
  uint64_t v103;
  void *i;
  const char *v105;
  void *v106;
  unsigned __int8 v107;
  void *v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  _BOOL4 v114;
  void *v115;
  id v116;
  id v117;
  uint64_t v118;
  void *j;
  const char *v120;
  void *v121;
  unsigned __int8 v122;
  void *v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  NSObject *v128;
  _BOOL4 v129;
  NSObject *v130;
  const char *v131;
  void *v132;
  id v133;
  id v134;
  char *v135;
  char *v136;
  char *v137;
  void *v138;
  void *v139;
  id v140;
  void *v141;
  id v142;
  void *v143;
  id v144;
  id v145;
  char *v146;
  void *v147;
  void *v148;
  id v149;
  void *v150;
  id v151;
  void *v152;
  void *v153;
  unsigned int v154;
  void *v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  NSObject *v160;
  void *v161;
  void *v162;
  unsigned int v163;
  id v164;
  id v165;
  id v166;
  void *v167;
  id v168;
  char *v169;
  void *v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  void *v174;
  unsigned int v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  _BYTE v188[128];
  uint8_t v189[128];
  uint8_t buf[4];
  void *v191;
  __int16 v192;
  const char *v193;
  __int16 v194;
  const char *v195;
  __int16 v196;
  const char *v197;
  __int16 v198;
  const char *v199;

  if (a1)
  {
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentRegistration"));
    if (v2)
    {
      v3 = (void *)v2;
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));

      if (v4)
      {
        if (objc_msgSend(a1, "type") == 1)
        {
          v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "VPN"));
        }
        else if (objc_msgSend(a1, "type") == 2)
        {
          v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "appVPN"));
        }
        else if (objc_msgSend(a1, "type") == 3)
        {
          v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "alwaysOnVPN"));
        }
        else if (objc_msgSend(a1, "type") == 4)
        {
          v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "contentFilter"));
        }
        else if (objc_msgSend(a1, "type") == 5)
        {
          v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pathController"));
        }
        else
        {
          if (objc_msgSend(a1, "type") != 7)
          {
            if (objc_msgSend(a1, "type") == 9)
            {
              v152 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
              v153 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v152, "relay"));
              v154 = objc_msgSend(v153, "isEnabled");

              if (v154)
              {
LABEL_17:
                if ((objc_msgSend(a1, "disableOnDemand") & 1) == 0)
                {
                  if (objc_msgSend(a1, "type") == 1)
                  {
                    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
                    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "VPN"));
LABEL_20:
                    v11 = v10;
                    v12 = (unint64_t)objc_msgSend(v10, "isOnDemandEnabled");

                    goto LABEL_25;
                  }
                  if (objc_msgSend(a1, "type") == 2
                    && objc_msgSend(a1, "onDemandPauseLevelInternal") != (id)2
                    && objc_msgSend(a1, "onDemandPauseLevelInternal") != (id)3)
                  {
                    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
                    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "appVPN"));
                    goto LABEL_20;
                  }
                }
                v12 = 0;
LABEL_25:
                v13 = objc_msgSend(a1, "status");
                if (objc_msgSend(a1, "type") == 5)
                {
                  v14 = 1;
                  if (!(_DWORD)v12)
                    goto LABEL_39;
                }
                else
                {
                  if (objc_msgSend(a1, "type") == 1)
                    v15 = v12;
                  else
                    v15 = 0;
                  if (v15 == 1)
                  {
                    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "matchedRule"));
                    v14 = objc_msgSend(v16, "action") == (id)3;

                    if (!(_DWORD)v12)
                      goto LABEL_39;
                  }
                  else
                  {
                    v14 = 0;
                    if (!(_DWORD)v12)
                      goto LABEL_39;
                  }
                }
                if (objc_msgSend(a1, "type") == 2)
                {
                  v17 = 1;
                  goto LABEL_40;
                }
                if (objc_msgSend(a1, "type") == 1)
                {
                  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "matchedRule"));
                  v17 = objc_msgSend(v18, "action") == (id)1;

                  goto LABEL_40;
                }
LABEL_39:
                v17 = 0;
LABEL_40:
                v175 = v14;
                v173 = v17;
                if (objc_msgSend(a1, "type") != 5)
                {
                  if (objc_msgSend(a1, "type") == 7)
                  {
                    v26 = a1;
                    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "networkAgent"));
                    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "settings"));
                    Property = objc_getProperty(v26, v29, 360, 1);
                    v31 = (void *)objc_claimAutoreleasedReturnValue(Property);
                    v32 = objc_msgSend(v28, "isEqual:", v31);
                    v33 = v32 ^ 1;

                    if ((v32 & 1) == 0)
                    {
                      v35 = objc_getProperty(v26, v34, 360, 1);
                      v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
                      objc_msgSend(v27, "setSettings:", v36);

                    }
                  }
                  else if (objc_msgSend(a1, "type") == 9)
                  {
                    v37 = a1;
                    v39 = objc_getProperty(v37, v38, 360, 1);
                    v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
                    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "networkAgent"));

                    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "proxyConfig"));
                    is_equal = nw_proxy_config_is_equal(v42, v40);
                    v33 = is_equal ^ 1;

                    if ((is_equal & 1) == 0)
                      objc_msgSend(v41, "setProxyConfig:", v40);

                  }
                  else
                  {
                    v33 = 0;
                  }
LABEL_88:
                  v67 = objc_msgSend(a1, "status");
                  v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
                  v69 = objc_msgSend(v68, "lastStatus");

                  if (v69 == (_DWORD)v67)
                  {
                    if ((v33 & 1) != 0)
                      goto LABEL_106;
                  }
                  else
                  {
                    v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
                    objc_msgSend(v70, "setLastStatus:", v67);

                    if (v69 != 2 || (_DWORD)v67 == 3)
                      v72 = v33;
                    else
                      v72 = 1;
                    if ((v72 & 1) != 0)
                      goto LABEL_106;
                  }
                  v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentRegistration"));
                  if (!objc_msgSend(v73, "isRegistered"))
                  {
LABEL_105:

                    goto LABEL_106;
                  }
                  v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
                  if ((((v13 == 3) ^ objc_msgSend(v74, "isActive")) & 1) != 0)
                  {
LABEL_104:

                    goto LABEL_105;
                  }
                  v75 = v13;
                  v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
                  if (v175 != objc_msgSend(v76, "isVoluntary"))
                  {
LABEL_103:

                    v13 = v75;
                    goto LABEL_104;
                  }
                  v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
                  if ((_DWORD)v12 != objc_msgSend(v77, "isUserActivated"))
                  {

                    goto LABEL_103;
                  }
                  v162 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
                  v163 = objc_msgSend(v162, "isKernelActivated");

                  v13 = v75;
                  if (v173 == v163)
                    goto LABEL_125;
LABEL_106:
                  v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
                  objc_msgSend(v78, "setActive:", v13 == 3);

                  v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
                  objc_msgSend(v79, "setVoluntary:", v175);

                  v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
                  objc_msgSend(v80, "setUserActivated:", v12);

                  v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
                  objc_msgSend(v81, "setKernelActivated:", v173);

                  v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentRegistration"));
                  LODWORD(v78) = objc_msgSend(v82, "isRegistered");

                  if ((_DWORD)v78)
                  {
                    v85 = ne_log_obj(v83, v84);
                    v86 = objc_claimAutoreleasedReturnValue(v85);
                    if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
                    {
                      v87 = "inactive";
                      if (v13 == 3)
                        v87 = "active";
                      v88 = "voluntary";
                      if (!v175)
                        v88 = "compulsory";
                      v89 = "not-user-activiated";
                      *(_DWORD *)buf = 138413314;
                      v191 = a1;
                      if ((_DWORD)v12)
                        v89 = "user-activated";
                      v192 = 2080;
                      v193 = v87;
                      v90 = "kernel-activated";
                      v194 = 2080;
                      v195 = v88;
                      v196 = 2080;
                      v197 = v89;
                      if (!v173)
                        v90 = "not-kernel-activated";
                      v198 = 2080;
                      v199 = v90;
                      _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "%@: Updated network agent (%s, %s, %s, %s)", buf, 0x34u);
                    }

                    v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentRegistration"));
                    v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
                    objc_msgSend(v91, "updateNetworkAgent:", v92);
                  }
                  else
                  {
                    v93 = objc_msgSend(a1, "lastStopReason");
                    if ((_DWORD)v93 == 32)
                    {
LABEL_125:
                      v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "registeredNetworkAgentInterfaces"));
                      v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v98));

                      v182 = 0u;
                      v183 = 0u;
                      v180 = 0u;
                      v181 = 0u;
                      v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentInterfaces"));
                      v101 = objc_msgSend(v100, "countByEnumeratingWithState:objects:count:", &v180, v189, 16);
                      if (v101)
                      {
                        v102 = v101;
                        v103 = *(_QWORD *)v181;
                        do
                        {
                          for (i = 0; i != v102; i = (char *)i + 1)
                          {
                            if (*(_QWORD *)v181 != v103)
                              objc_enumerationMutation(v100);
                            v105 = *(const char **)(*((_QWORD *)&v180 + 1) + 8 * (_QWORD)i);
                            v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "registeredNetworkAgentInterfaces"));
                            v107 = objc_msgSend(v106, "containsObject:", v105);

                            if ((v107 & 1) == 0)
                            {
                              v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentRegistration"));
                              v109 = objc_msgSend(v108, "addNetworkAgentToInterfaceNamed:", v105);

                              v112 = ne_log_obj(v110, v111);
                              v113 = objc_claimAutoreleasedReturnValue(v112);
                              v114 = os_log_type_enabled(v113, OS_LOG_TYPE_INFO);
                              if (v109)
                              {
                                if (v114)
                                {
                                  *(_DWORD *)buf = 138412546;
                                  v191 = a1;
                                  v192 = 2112;
                                  v193 = v105;
                                  _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_INFO, "%@: Added network agent to %@", buf, 0x16u);
                                }

                                objc_msgSend(v99, "addObject:", v105);
                              }
                              else
                              {
                                if (v114)
                                {
                                  *(_DWORD *)buf = 138412546;
                                  v191 = a1;
                                  v192 = 2112;
                                  v193 = v105;
                                  _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_INFO, "%@: Failed to add network agent to %@", buf, 0x16u);
                                }

                              }
                            }
                          }
                          v102 = objc_msgSend(v100, "countByEnumeratingWithState:objects:count:", &v180, v189, 16);
                        }
                        while (v102);
                      }

                      v178 = 0u;
                      v179 = 0u;
                      v176 = 0u;
                      v177 = 0u;
                      v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "registeredNetworkAgentInterfaces"));
                      v116 = objc_msgSend(v115, "countByEnumeratingWithState:objects:count:", &v176, v188, 16);
                      if (v116)
                      {
                        v117 = v116;
                        v118 = *(_QWORD *)v177;
                        do
                        {
                          for (j = 0; j != v117; j = (char *)j + 1)
                          {
                            if (*(_QWORD *)v177 != v118)
                              objc_enumerationMutation(v115);
                            v120 = *(const char **)(*((_QWORD *)&v176 + 1) + 8 * (_QWORD)j);
                            v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentInterfaces"));
                            v122 = objc_msgSend(v121, "containsObject:", v120);

                            if ((v122 & 1) == 0)
                            {
                              v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentRegistration"));
                              v124 = objc_msgSend(v123, "removeNetworkAgentFromInterfaceNamed:", v120);

                              v127 = ne_log_obj(v125, v126);
                              v128 = objc_claimAutoreleasedReturnValue(v127);
                              v129 = os_log_type_enabled(v128, OS_LOG_TYPE_INFO);
                              if (v124)
                              {
                                if (v129)
                                {
                                  *(_DWORD *)buf = 138412546;
                                  v191 = a1;
                                  v192 = 2112;
                                  v193 = v120;
                                  v130 = v128;
                                  v131 = "%@: Removed network agent from %@";
                                  goto LABEL_151;
                                }
                              }
                              else if (v129)
                              {
                                *(_DWORD *)buf = 138412546;
                                v191 = a1;
                                v192 = 2112;
                                v193 = v120;
                                v130 = v128;
                                v131 = "%@: Failed to remove network agent from %@";
LABEL_151:
                                _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_INFO, v131, buf, 0x16u);
                              }

                              objc_msgSend(v99, "removeObject:", v120);
                              continue;
                            }
                          }
                          v117 = objc_msgSend(v115, "countByEnumeratingWithState:objects:count:", &v176, v188, 16);
                        }
                        while (v117);
                      }

                      objc_msgSend(a1, "setRegisteredNetworkAgentInterfaces:", v99);
                      goto LABEL_181;
                    }
                    v95 = ne_log_obj(v93, v94);
                    v96 = objc_claimAutoreleasedReturnValue(v95);
                    if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
                    {
                      v97 = "inactive";
                      if (v13 == 3)
                        v97 = "active";
                      *(_DWORD *)buf = 138412546;
                      v191 = a1;
                      v192 = 2080;
                      v193 = v97;
                      _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "%@: Registered network agent (%s)", buf, 0x16u);
                    }

                    v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentRegistration"));
                    v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
                    objc_msgSend(v91, "registerNetworkAgent:", v92);
                  }

                  goto LABEL_125;
                }
                v171 = v13;
                v19 = a1;
                v174 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "networkAgent"));
                v172 = v12;
                if (v19[355])
                {
                  v20 = objc_alloc_init((Class)NSMutableArray);
                  v21 = v20;
                  if (*((_QWORD *)v19 + 54))
                  {
                    v22 = objc_alloc((Class)NSNumber);
                    v24 = objc_msgSend(v22, "initWithUnsignedLong:", objc_msgSend(objc_getProperty(v19, v23, 432, 1), "interfaceIndex"));
                    objc_msgSend(v21, "addObject:", v24);

                  }
                  else
                  {
                    objc_msgSend(v20, "addObject:", &off_1000C1810);
                  }
                  if (objc_getProperty(v19, v25, 448, 1))
                  {
                    v186 = 0u;
                    v187 = 0u;
                    v184 = 0u;
                    v185 = 0u;
                    v45 = objc_getProperty(v19, v44, 448, 1);
                    v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v184, buf, 16);
                    if (v46)
                    {
                      v48 = v46;
                      v49 = *(_QWORD *)v185;
                      do
                      {
                        for (k = 0; k != v48; k = (char *)k + 1)
                        {
                          if (*(_QWORD *)v185 != v49)
                            objc_enumerationMutation(v45);
                          v51 = objc_msgSend(objc_getProperty(v19, v47, 448, 1), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v184 + 1) + 8 * (_QWORD)k));
                          v52 = objc_claimAutoreleasedReturnValue(v51);
                          if (!v52)
                            abort();
                          v53 = (void *)v52;
                          objc_msgSend(v21, "addObject:", v52);

                        }
                        v48 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v184, buf, 16);
                      }
                      while (v48);
                    }

                  }
                }
                else
                {
                  v21 = 0;
                }
                v54 = v174;
                v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v174, "advisoryInterfaceArray"));
                if (!v55 && v21)
                  goto LABEL_67;
                v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v174, "advisoryInterfaceArray"));
                v58 = v57;
                if (!v57 || v21)
                {
                  v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v174, "advisoryInterfaceArray"));
                  v133 = objc_msgSend(v132, "count");
                  v134 = objc_msgSend(v21, "count");

                  if (v133 == v134)
                  {
                    v54 = v174;
                    if (!v21 || (v135 = (char *)objc_msgSend(v21, "count")) == 0)
                    {
                      v33 = 0;
                      goto LABEL_73;
                    }
                    v136 = v135;
                    v137 = 0;
                    while (1)
                    {
                      v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "advisoryInterfaceArray"));
                      v139 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v138, "objectAtIndexedSubscript:", v137));
                      v140 = objc_msgSend(v139, "unsignedIntegerValue");
                      v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectAtIndexedSubscript:", v137));
                      v142 = objc_msgSend(v141, "unsignedIntegerValue");

                      if (v140 != v142)
                        break;
                      v33 = 0;
                      ++v137;
                      v54 = v174;
                      if (v136 == v137)
                        goto LABEL_73;
                    }
                    v164 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithArray:", v21);
                    v54 = v174;
                    objc_msgSend(v174, "setAdvisoryInterfaceArray:", v164);

LABEL_72:
                    v33 = 1;
LABEL_73:
                    v59 = sub_10008D5AC((uint64_t)v19);
                    v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
                    v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "predictedInterfaceArray"));
                    if (!v61 && v60)
                    {
LABEL_75:
                      v62 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithArray:", v60);
                      objc_msgSend(v54, "setPredictedInterfaceArray:", v62);

LABEL_80:
                      v33 = 1;
                      v12 = v172;
                      goto LABEL_81;
                    }
                    v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "predictedInterfaceArray"));
                    v64 = v63;
                    if (!v63 || v60)
                    {
                      v143 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "predictedInterfaceArray"));
                      v144 = objc_msgSend(v143, "count");
                      v145 = objc_msgSend(v60, "count");

                      if (v144 == v145)
                      {
                        v12 = v172;
                        v54 = v174;
                        if (v60)
                        {
                          v169 = (char *)objc_msgSend(v60, "count");
                          if (v169)
                          {
                            v170 = v60;
                            v146 = 0;
                            while (1)
                            {
                              v147 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "predictedInterfaceArray"));
                              v148 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v147, "objectAtIndexedSubscript:", v146));
                              v149 = objc_msgSend(v148, "unsignedIntegerValue");
                              v150 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v170, "objectAtIndexedSubscript:", v146));
                              v151 = objc_msgSend(v150, "unsignedIntegerValue");

                              if (v149 != v151)
                                break;
                              ++v146;
                              v54 = v174;
                              if (v169 == v146)
                                goto LABEL_188;
                            }
                            v165 = objc_alloc((Class)NSMutableArray);
                            v166 = sub_10008D5AC((uint64_t)v19);
                            v167 = (void *)objc_claimAutoreleasedReturnValue(v166);
                            v168 = objc_msgSend(v165, "initWithArray:", v167);
                            v54 = v174;
                            objc_msgSend(v174, "setPredictedInterfaceArray:", v168);

                            v33 = 1;
LABEL_188:
                            v12 = v172;
                            v60 = v170;
                          }
                        }
LABEL_81:
                        v65 = objc_msgSend(v54, "weakAdvisory");
                        if (v19[355])
                        {
                          if (v65 != (v19[356] != 0))
                          {
                            v66 = v19[356] != 0;
LABEL_86:
                            objc_msgSend(v54, "setWeakAdvisory:", v66);
                            v33 = 1;
                          }
                        }
                        else if ((v65 & 1) != 0)
                        {
                          v66 = 0;
                          goto LABEL_86;
                        }

                        v13 = v171;
                        goto LABEL_88;
                      }
                      v54 = v174;
                      if (v60)
                        goto LABEL_75;
                    }
                    else
                    {

                    }
                    objc_msgSend(v54, "setPredictedInterfaceArray:", 0);
                    goto LABEL_80;
                  }
                  v54 = v174;
                  if (v21)
                  {
LABEL_67:
                    v56 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithArray:", v21);
                    objc_msgSend(v54, "setAdvisoryInterfaceArray:", v56);

                    goto LABEL_72;
                  }
                }
                else
                {

                }
                objc_msgSend(v54, "setAdvisoryInterfaceArray:", 0);
                goto LABEL_72;
              }
            }
LABEL_177:
            v155 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentRegistration"));
            v156 = objc_msgSend(v155, "isRegistered");

            if (v156)
            {
              v159 = ne_log_obj(v157, v158);
              v160 = objc_claimAutoreleasedReturnValue(v159);
              if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v191 = a1;
                _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_DEFAULT, "%@: Unregistered network agent", buf, 0xCu);
              }

              v161 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentRegistration"));
              objc_msgSend(v161, "unregisterNetworkAgent");

              objc_msgSend(a1, "setRegisteredNetworkAgentInterfaces:", 0);
            }
LABEL_181:
            sub_10007A104(a1);
            return;
          }
          v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dnsSettings"));
        }
        v7 = v6;
        v8 = objc_msgSend(v6, "isEnabled");

        if ((v8 & 1) != 0)
          goto LABEL_17;
        goto LABEL_177;
      }
    }
  }
}

id sub_100079A38(uint64_t a1)
{
  const __SCPreferences *v1;
  const __SCPreferences *v2;
  void *Value;
  id v4;

  if (a1
    && (v1 = SCPreferencesCreate(kCFAllocatorDefault, CFSTR("NEHelper control settings"), CFSTR("/Library/Preferences/com.apple.networkextension.control.plist"))) != 0)
  {
    v2 = v1;
    Value = (void *)SCPreferencesGetValue(v1, CFSTR("CriticalDomains"));
    NEInitCFTypes();
    if (NEIsValidCFType(Value, CFARRAY_TYPE) && CFArrayGetCount((CFArrayRef)Value) >= 1)
      v4 = objc_msgSend(Value, "copy");
    else
      v4 = 0;
    CFRelease(v2);
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

void sub_100079AE0(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  id v4;
  _QWORD block[4];
  id v6;
  id v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "queue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100079B88;
    block[3] = &unk_1000BEB58;
    v6 = v4;
    v7 = *(id *)(a1 + 32);
    dispatch_sync(v3, block);

    WeakRetained = v4;
  }

}

id sub_100079B88(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleCommand:fromClient:", *(_QWORD *)(a1 + 40), 0);
}

void sub_100079B98(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "queue"));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100079DEC;
  v16[3] = &unk_1000BE638;
  v17 = v7;
  v18 = v9;
  v19 = v8;
  v11 = a1[5];
  v12 = a1[4];
  v20 = v11;
  v21 = v12;
  v22 = a1[6];
  v13 = v8;
  v14 = v9;
  v15 = v7;
  dispatch_async(v10, v16);

}

void sub_100079CA8(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  _BYTE v11[37];
  unsigned __int8 uu[8];
  uint64_t v13;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "onDemandDomainCache"));

    if (v2)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "lastPrimaryInterface"));

      if (v3)
      {
        *(_QWORD *)uu = 0;
        v13 = 0;
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
        objc_msgSend(v5, "getUUIDBytes:", uu);

        memset(v11, 0, sizeof(v11));
        uuid_unparse(uu, v11);
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "onDemandDomainCache"));
        v7 = objc_msgSend(v6, "count");

        if (v7)
        {
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "onDemandDomainCache"));
          v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();

        }
        else
        {
          v9 = 0;
        }
        v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "lastPrimaryInterface")));
        NEHelperCacheSetDomainDictionaries(v11, objc_msgSend(v10, "UTF8String"), v9);

      }
    }
  }
}

void sub_100079DEC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  unsigned __int8 v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[16];
  _BYTE v32[128];

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "domain"));
    if ((-[NSObject isEqualToString:](v4, "isEqualToString:", NSURLErrorDomain) & 1) == 0)
    {
LABEL_6:

      goto LABEL_7;
    }
    v5 = objc_msgSend(*(id *)(a1 + 40), "code");

    if (v5 == (id)-1202)
    {
      v8 = ne_log_obj(v6, v7);
      v4 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "VPN On Demand required URL string probe failed due to untrusted server certificate", buf, 2u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  if (v3)
  {
    v9 = *(_QWORD *)(a1 + 48);
    v10 = objc_opt_class(NSHTTPURLResponse);
    if ((objc_opt_isKindOfClass(v9, v10) & 1) == 0
      || (char *)objc_msgSend(*(id *)(a1 + 48), "statusCode") - 200 < (char *)0x64)
    {
      return;
    }
  }
  v11 = *(void **)(a1 + 56);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "onDemandDomainCache"));

  if (v11 != v12)
    return;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "onDemandDomainCache", 0));
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  if (!v14)
  {
LABEL_22:

    goto LABEL_25;
  }
  v15 = v14;
  v16 = *(_QWORD *)v28;
LABEL_13:
  v17 = 0;
  while (1)
  {
    if (*(_QWORD *)v28 != v16)
      objc_enumerationMutation(v13);
    v18 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("service-domains")));
    if ((isa_nsarray(v19) & 1) == 0)
    {

      goto LABEL_20;
    }
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("service-domains")));
    v21 = objc_msgSend(v20, "isEqualToArray:", *(_QWORD *)(a1 + 72));

    if ((v21 & 1) != 0)
      break;
LABEL_20:
    if (v15 == (id)++v17)
    {
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
      if (v15)
        goto LABEL_13;
      goto LABEL_22;
    }
  }
  v22 = v18;
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "onDemandDomainCache"));
  v24 = objc_msgSend(v23, "indexOfObject:", v22);

  if (v22)
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v22));
    objc_msgSend(v25, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("service-probe-failed"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "onDemandDomainCache"));
    objc_msgSend(v26, "replaceObjectAtIndex:withObject:", v24, v25);
    goto LABEL_26;
  }
LABEL_25:
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  objc_msgSend(v25, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 72), CFSTR("service-domains"));
  objc_msgSend(v25, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("service-probe-failed"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "onDemandDomainCache"));
  objc_msgSend(v26, "addObject:", v25);
  v22 = 0;
LABEL_26:

  sub_100079CA8(*(void **)(a1 + 64));
}

void sub_10007A104(void *a1)
{
  _QWORD *v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  const __CFString *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  void *v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  _QWORD v35[5];
  uint8_t buf[4];
  void *v37;

  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_10007A524;
  v35[3] = &unk_1000BE5E8;
  v35[4] = a1;
  v2 = objc_retainBlock(v35);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentRegistration"));
  v4 = objc_msgSend(v3, "isRegistered");

  if (v4)
  {
    if (objc_msgSend(a1, "type") == 1)
    {
      v5 = objc_opt_class(NESMVPNSession);
      if ((objc_opt_isKindOfClass(a1, v5) & 1) != 0 && objc_msgSend(a1, "parentType") == (id)2)
      {
        if (objc_msgSend(a1, "tunnelKind") == (id)1)
          v6 = CFSTR("Primary Tunnel");
        else
          v6 = CFSTR("Fallback Tunnel");
      }
      else
      {
        v6 = 0;
      }
      v15 = objc_alloc((Class)NENetworkAgentRegistrationFileHandle);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentRegistration"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(a1, "type")));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "identifier"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "agentUUID"));
      v7 = objc_msgSend(v15, "initWithNetworkAgentRegistration:sessionType:configurationIdentifier:agentUUID:name:", v9, v10, v12, v14, v6);
    }
    else
    {
      v8 = objc_alloc((Class)NENetworkAgentRegistrationFileHandle);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentRegistration"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(a1, "type")));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "identifier"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "agentUUID"));
      v7 = objc_msgSend(v8, "initWithNetworkAgentRegistration:sessionType:configurationIdentifier:agentUUID:name:", v9, v10, v12, v14, 0);
    }

    if (v7)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
      v19 = objc_msgSend(v18, "isActive");

      v20 = v19;
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
      v22 = objc_msgSend(v21, "isVoluntary");

      if (v22)
        v20 |= 2uLL;
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
      v24 = objc_msgSend(v23, "isUserActivated");

      if (v24)
        v25 = v20 | 4;
      else
        v25 = v20;
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
      v27 = objc_msgSend(v26, "isKernelActivated");

      if (v27)
        v28 = v25 | 8;
      else
        v28 = v25;
      objc_msgSend(v7, "setAgentFlags:", v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      objc_msgSend(v29, "setFileHandle:matchingPredicate:", v7, v2);
    }
    else
    {
      v30 = ne_log_obj(v16, v17);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "name"));
        *(_DWORD *)buf = 138412290;
        v37 = v34;
        _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Failed to create a file handle for on-demand agent for configuration %@", buf, 0xCu);

      }
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      objc_msgSend(v29, "removeFileHandleMatchingPredicate:", v2);
    }

  }
  else
  {
    v7 = (id)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
    objc_msgSend(v7, "removeFileHandleMatchingPredicate:", v2);
  }

  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
  objc_msgSend(v32, "commit");

}

BOOL sub_10007A524(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  unsigned __int8 v8;
  _BOOL8 v9;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  v9 = 0;
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = *(void **)(a1 + 32);
    v6 = v3;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "networkAgent"));
    v8 = objc_msgSend(v7, "matchesFileHandle:", v6);

    if ((v8 & 1) != 0)
      v9 = 1;
  }

  return v9;
}

BOOL sub_10007A5B4(id a1, id a2, NSDictionary *a3)
{
  return objc_msgSend(a2, "action", a3) == (id)2;
}

void sub_10007A5D4(uint64_t a1, int a2, uint64_t a3, const char *a4)
{
  id WeakRetained;
  xpc_object_t v7;
  xpc_object_t v8;
  void *v9;
  NSObject *v10;
  id v11;
  _QWORD block[4];
  id v13;
  id v14;
  int v15;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v7, "SessionPID", a2);
    v8 = xpc_dictionary_create(0, 0, 0);
    v9 = v8;
    if (v8)
    {
      xpc_dictionary_set_BOOL(v8, "is-on-demand", 1);
      if (a4)
        xpc_dictionary_set_string(v9, "match-hostname", a4);
      xpc_dictionary_set_value(v7, "SessionOptions", v9);
    }
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "queue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10007A714;
    block[3] = &unk_1000BED20;
    v15 = a2;
    v13 = WeakRetained;
    v14 = v7;
    v11 = v7;
    dispatch_async(v10, block);

  }
}

id sub_10007A714(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v8;
  uint64_t v9;
  __int16 v10;
  int v11;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_DWORD *)(a1 + 48);
    v8 = 138412546;
    v9 = v5;
    v10 = 1024;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: got On Demand start message from pid %d", (uint8_t *)&v8, 0x12u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "startWithCommand:isOnDemand:", *(_QWORD *)(a1 + 40), 1);
}

void sub_10007A7D4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "queue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10007AA24;
    block[3] = &unk_1000BE878;
    v11 = v8;
    v12 = v5;
    v13 = v6;
    dispatch_async(v9, block);

  }
}

void sub_10007A8AC(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "queue"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10007A964;
    v7[3] = &unk_1000BEB58;
    v8 = v5;
    v9 = v3;
    dispatch_async(v6, v7);

  }
}

void sub_10007A964(uint64_t a1)
{
  void *v1;
  const char *v2;
  id v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t v8[16];

  v1 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  if (v1)
  {
    if (objc_getProperty(v1, v2, 480, 1))
    {
      objc_msgSend(objc_getProperty(v1, v4, 480, 1), "removeObjectForKey:", v3);
      sub_1000892AC((uint64_t)v1, v5);
    }
    else
    {
      v6 = ne_log_obj(0, v4);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v8 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "fallbackAssertions dictionary is nil", v8, 2u);
      }

    }
  }

}

void sub_10007AA24(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  const char *v4;
  id v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t v10[16];

  v1 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 48);
  v3 = *(id *)(a1 + 40);
  v5 = v2;
  if (v1)
  {
    if (objc_getProperty(v1, v4, 480, 1))
    {
      objc_msgSend(objc_getProperty(v1, v6, 480, 1), "setObject:forKeyedSubscript:", v5, v3);
      sub_1000892AC((uint64_t)v1, v7);
    }
    else
    {
      v8 = ne_log_obj(0, v6);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v10 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "fallbackAssertions dictionary is nil", v10, 2u);
      }

    }
  }

}

void sub_10007AAF8(void *a1)
{
  id v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  const __CFString *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  unint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  unsigned __int8 v45;
  NSObject *v46;
  _QWORD block[5];
  _QWORD v48[6];
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  void (*v53)(uint64_t);
  id v54;
  id from[4];
  id v56;
  id location;
  __int128 buf;
  void *v59;
  void *v60;
  id v61;

  if (a1)
  {
    v2 = objc_msgSend(a1, "type");
    v49 = 0;
    v50 = &v49;
    v51 = 0x3032000000;
    v52 = sub_100076800;
    v53 = sub_100076810;
    v54 = 0;
    v4 = (int)v2;
    switch((int)v2)
    {
      case 1:
        v5 = objc_opt_class(NESMVPNSession);
        if ((objc_opt_isKindOfClass(a1, v5) & 1) != 0 && objc_msgSend(a1, "parentType") == (id)2)
        {
          if (objc_msgSend(a1, "tunnelKind") == (id)1)
            v6 = CFSTR("Primary Tunnel");
          else
            v6 = CFSTR("Fallback Tunnel");
        }
        else
        {
          v6 = 0;
        }
        v21 = objc_alloc((Class)NEVPNNetworkAgent);
        v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
        v10 = objc_msgSend(v21, "initWithConfigUUID:sessionType:name:", v9, 1, v6);
        objc_msgSend(a1, "setNetworkAgent:", v10);
        goto LABEL_19;
      case 2:
        v7 = objc_alloc((Class)NEAppVPNNetworkAgent);
        v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
        v10 = objc_msgSend(v7, "initWithConfigUUID:sessionType:name:", v9, 2, 0);
        objc_msgSend(a1, "setNetworkAgent:", v10);
        goto LABEL_19;
      case 3:
        v11 = objc_alloc((Class)NEAOVPNNetworkAgent);
        v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
        v10 = objc_msgSend(v11, "initWithConfigUUID:sessionType:name:", v9, 3, 0);
        objc_msgSend(a1, "setNetworkAgent:", v10);
        goto LABEL_19;
      case 4:
        v12 = objc_alloc((Class)NEContentFilterNetworkAgent);
        v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
        v10 = objc_msgSend(v12, "initWithConfigUUID:sessionType:name:", v9, 4, 0);
        objc_msgSend(a1, "setNetworkAgent:", v10);
        goto LABEL_19;
      case 5:
        v13 = objc_alloc((Class)NEPathControllerNetworkAgent);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "identifier"));
        v16 = objc_msgSend(v13, "initWithConfigUUID:sessionType:name:", v15, 5, 0);
        objc_msgSend(a1, "setNetworkAgent:", v16);

        v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
        objc_initWeak(&location, a1);
        *(_QWORD *)&buf = _NSConcreteStackBlock;
        *((_QWORD *)&buf + 1) = 3221225472;
        v59 = sub_10007A7D4;
        v60 = &unk_1000BE570;
        objc_copyWeak(&v61, &location);
        objc_msgSend(v8, "setAssertHandler:", &buf);
        from[0] = _NSConcreteStackBlock;
        from[1] = (id)3221225472;
        from[2] = sub_10007A8AC;
        from[3] = &unk_1000BE598;
        objc_copyWeak(&v56, &location);
        objc_msgSend(v8, "setUnassertHandler:", from);
        objc_destroyWeak(&v56);
        objc_destroyWeak(&v61);
        objc_destroyWeak(&location);

        goto LABEL_20;
      case 7:
        v19 = objc_alloc((Class)NEDNSSettingsNetworkAgent);
        v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
        v10 = objc_msgSend(v19, "initWithConfigUUID:sessionType:name:", v9, 7, 0);
        objc_msgSend(a1, "setNetworkAgent:", v10);
        goto LABEL_19;
      case 9:
        v20 = objc_alloc((Class)NERelayNetworkAgent);
        v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
        v10 = objc_msgSend(v20, "initWithDelegate:configUUID:sessionType:name:", a1, v9, 9, 0);
        objc_msgSend(a1, "setNetworkAgent:", v10);
LABEL_19:

LABEL_20:
        v22 = objc_alloc((Class)NWNetworkAgentRegistration);
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
        v24 = objc_msgSend(v22, "initWithNetworkAgentClass:", objc_opt_class(v23));
        objc_msgSend(a1, "setNetworkAgentRegistration:", v24);

        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
        v48[0] = _NSConcreteStackBlock;
        v48[1] = 3221225472;
        v48[2] = sub_10007B358;
        v48[3] = &unk_1000BE5C0;
        v48[4] = a1;
        v48[5] = &v49;
        objc_msgSend(v25, "iterateFileHandlesWithBlock:", v48);

        v26 = (void *)v50[5];
        if (v26)
        {
          v27 = (unint64_t)objc_msgSend(v26, "agentFlags");
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v50[5], "agentUUID"));
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
          objc_msgSend(v29, "setAgentUUID:", v28);

          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
          objc_msgSend(v30, "setActive:", v27 & 1);

          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
          objc_msgSend(v31, "setVoluntary:", (v27 >> 1) & 1);

          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
          objc_msgSend(v32, "setUserActivated:", (v27 >> 2) & 1);

          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
          objc_msgSend(v33, "setKernelActivated:", (v27 >> 3) & 1);
        }
        else
        {
          if (v4 == 9)
          {
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
            v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "identifier"));
            v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
            objc_msgSend(v35, "setAgentUUID:", v34);

          }
          else
          {
            v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
            v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
            objc_msgSend(v34, "setAgentUUID:", v33);
          }

        }
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "name"));
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
        objc_msgSend(v38, "setConfigurationName:", v37);

        v39 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
        objc_initWeak(from, a1);
        *(_QWORD *)&buf = _NSConcreteStackBlock;
        *((_QWORD *)&buf + 1) = 3221225472;
        v59 = sub_10007A5D4;
        v60 = &unk_1000BE548;
        objc_copyWeak(&v61, from);
        objc_msgSend(v39, "setStartHandler:", &buf);
        objc_destroyWeak(&v61);
        objc_destroyWeak(from);

        v40 = (void *)v50[5];
        if (v40)
        {
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "handle"));
          v42 = dup((int)objc_msgSend(v41, "fileDescriptor"));

          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentRegistration"));
          v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgent"));
          v45 = objc_msgSend(v43, "setRegisteredNetworkAgent:fileDescriptor:", v44, v42);

          if ((v45 & 1) == 0)
          {
            close(v42);
            sub_1000788C8(a1);
          }
        }
        else
        {
          sub_1000788C8(a1);
        }
        v46 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10007B400;
        block[3] = &unk_1000BEB80;
        block[4] = a1;
        dispatch_async(v46, block);

        break;
      default:
        v17 = ne_log_obj(v2, v3);
        v18 = objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = a1;
          _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%@: session type does not support NWNetworkAgent", (uint8_t *)&buf, 0xCu);
        }

        break;
    }
    _Block_object_dispose(&v49, 8);

  }
}

void sub_10007B2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007B358(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = v3;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "networkAgent"));
    v7 = objc_msgSend(v6, "matchesFileHandle:", v5);

    if (v7)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v9 = *(void **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = v5;
      v5 = v9;
    }
    v10 = v7 ^ 1;

  }
  else
  {
    v10 = 1;
  }

  return v10;
}

uint64_t sub_10007B400(uint64_t a1)
{
  return sub_10007B40C(*(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_10007B40C(uint64_t result, char a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v8[5];
  char v9;
  uint8_t buf[4];
  void *v11;

  if (result)
  {
    v3 = (void *)result;
    v4 = objc_opt_class(NESMIKEv2VPNFallbackSession);
    result = objc_opt_isKindOfClass(v3, v4);
    if ((result & 1) == 0)
    {
      v6 = ne_log_obj(result, v5);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v11 = v3;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@: Resetting VPN On Demand", buf, 0xCu);
      }

      if (objc_msgSend(v3, "type") == 1
        || (result = (uint64_t)objc_msgSend(v3, "type"), (_DWORD)result == 2))
      {
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3221225472;
        v8[2] = sub_10007B538;
        v8[3] = &unk_1000BE6F0;
        v8[4] = v3;
        v9 = a2;
        return (uint64_t)objc_msgSend(v3, "checkPluginInstalledWithCompletionHandler:", v8);
      }
    }
  }
  return result;
}

void sub_10007B538(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const __CFString *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  char v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  unsigned __int8 v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  unsigned __int8 v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  void *i;
  void *v47;
  void *v48;
  id v49;
  id v50;
  _UNKNOWN **v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint8_t buf[4];
  uint64_t v72;
  __int16 v73;
  const __CFString *v74;

  v2 = a2;
  v3 = a1;
  v4 = ne_log_obj(a1, a2);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = CFSTR("is not");
    v7 = *(_QWORD *)(v3 + 32);
    if (v2)
      v6 = CFSTR("is");
    *(_DWORD *)buf = 138412546;
    v72 = v7;
    v73 = 2112;
    v74 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@: Plugin %@ installed", buf, 0x16u);
  }

  objc_msgSend(*(id *)(v3 + 32), "setDisableOnDemand:", v2 ^ 1u);
  if ((sub_100076E38(*(void **)(v3 + 32)) & 1) != 0)
    v8 = 1;
  else
    v8 = sub_100076F3C(*(void **)(v3 + 32));
  v9 = *(unsigned __int8 *)(v3 + 40);
  v10 = objc_msgSend(*(id *)(v3 + 32), "type");
  if (v9)
    v11 = 1;
  else
    v11 = v10 == 2;
  v12 = v11;
  if (v11 || !v8)
  {
    if ((v12 & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v3 + 32), "onDemandMonitor"));

    if (!v13)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v3 + 32), "onDemandMonitor"));

      if (!v14)
        goto LABEL_34;
LABEL_20:
      sub_10007BC60(*(void **)(v3 + 32));
      if (objc_msgSend(*(id *)(v3 + 32), "type") == 2)
      {
        v17 = (unint64_t)objc_alloc_init((Class)NEOnDemandRuleConnect);
        if ((v12 & 1) != 0)
          goto LABEL_32;
      }
      else
      {
        v17 = 0;
        if ((v12 & 1) != 0)
          goto LABEL_32;
      }
      v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v3 + 32), "matchedRule"));
      if (!(v25 | v17)
        || (v26 = (void *)v25,
            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v3 + 32), "matchedRule")),
            v28 = objc_msgSend(v27, "isEqual:", v17),
            v27,
            v26,
            (v28 & 1) != 0))
      {
LABEL_33:

        if (!v8)
          return;
LABEL_34:
        v29 = ne_log_obj(v15, v16);
        v30 = objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          v31 = *(_QWORD *)(v3 + 32);
          *(_DWORD *)buf = 138412290;
          v72 = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%@: Enabling VPN On Demand", buf, 0xCu);
        }

        v32 = *(void **)(v3 + 32);
        if (v32)
        {
          if (objc_msgSend(*(id *)(v3 + 32), "type") == 1)
          {
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "configuration"));
            v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "VPN"));
          }
          else
          {
            if (objc_msgSend(v32, "type") != 2)
            {
              v36 = 0;
LABEL_48:
              if ((sub_100076E38(v32) & 1) == 0 && sub_100076F3C(v32))
              {
                v41 = sub_100077034((uint64_t)v32, v36);

                v36 = (void *)v41;
              }
              v24 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
              if (!objc_msgSend(v36, "count"))
              {
                v42 = objc_alloc_init((Class)NWNetworkDescription);
                objc_msgSend((id)v24, "addObject:", v42);
                goto LABEL_66;
              }
              v69 = 0u;
              v70 = 0u;
              v67 = 0u;
              v68 = 0u;
              v42 = v36;
              v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v67, buf, 16);
              if (v43)
              {
                v44 = v43;
                v65 = v36;
                v66 = v3;
                v45 = *(_QWORD *)v68;
                while (1)
                {
                  for (i = 0; i != v44; i = (char *)i + 1)
                  {
                    if (*(_QWORD *)v68 != v45)
                      objc_enumerationMutation(v42);
                    v47 = (void *)v24;
                    v48 = *(void **)(*((_QWORD *)&v67 + 1) + 8 * (_QWORD)i);
                    v49 = objc_alloc_init((Class)NWNetworkDescription);
                    v50 = objc_msgSend(v48, "interfaceTypeMatch");
                    if (v50 == (id)3)
                    {
                      v51 = &off_1000C1738;
                    }
                    else
                    {
                      if (v50 != (id)2)
                        goto LABEL_62;
                      v51 = &off_1000C1750;
                    }
                    v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", v51, v65, v66, (_QWORD)v67));
                    objc_msgSend(v49, "setInterfaceTypeOptions:", v52);

LABEL_62:
                    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "DNSSearchDomainMatch", v65, v66));
                    v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v53));
                    objc_msgSend(v49, "setDnsSearchDomainOptions:", v54);

                    v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "DNSServerAddressMatch"));
                    v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v55));
                    objc_msgSend(v49, "setDnsServerAddressOptions:", v56);

                    v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "SSIDMatch"));
                    v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v57));
                    objc_msgSend(v49, "setSsidOptions:", v58);

                    v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "probeURL"));
                    objc_msgSend(v49, "setProbeURL:", v59);

                    v24 = (uint64_t)v47;
                    objc_msgSend(v47, "addObject:", v49);

                  }
                  v44 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v67, buf, 16);
                  if (!v44)
                  {
                    v36 = v65;
                    v3 = v66;
                    break;
                  }
                }
              }
LABEL_66:

              if (v24)
              {
                v60 = objc_alloc_init((Class)NWParameters);
                objc_msgSend(v60, "prohibitNetworkAgentsWithDomain:type:", CFSTR("NetworkExtension"), CFSTR("VPN"));
                objc_msgSend(v60, "prohibitNetworkAgentsWithDomain:type:", CFSTR("NetworkExtension"), CFSTR("AppVPN"));
                objc_msgSend(v60, "prohibitNetworkAgentsWithDomain:type:", CFSTR("NetworkExtension"), CFSTR("AOVPN"));
                v61 = *(_QWORD *)(v3 + 32);
                v62 = objc_opt_class(NESMVPNSession);
                if ((objc_opt_isKindOfClass(v61, v62) & 1) != 0
                  && objc_msgSend(*(id *)(v3 + 32), "tunnelKind") == (id)2)
                {
                  objc_msgSend(v60, "setRequiredInterfaceType:", 2);
                }
                v63 = (void *)objc_claimAutoreleasedReturnValue(+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:](NWMonitor, "monitorWithNetworkDescriptionArray:endpoint:parameters:", v24, 0, v60));
                objc_msgSend(*(id *)(v3 + 32), "setOnDemandMonitor:", v63);

                v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v3 + 32), "onDemandMonitor"));
                objc_msgSend(v64, "addObserver:forKeyPath:options:context:", *(_QWORD *)(v3 + 32), CFSTR("bestAvailableNetworkDescription"), 5, 0);

              }
              goto LABEL_71;
            }
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "configuration"));
            v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "appVPN"));
          }
          v35 = v34;
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "onDemandRules"));

          goto LABEL_48;
        }
        goto LABEL_46;
      }
LABEL_32:
      objc_msgSend(*(id *)(v3 + 32), "setMatchedRule:", v17);
      sub_1000770A8(*(id *)(v3 + 32));
      objc_msgSend(*(id *)(v3 + 32), "notifyChangedExtendedStatus");
      goto LABEL_33;
    }
  }
  if ((v8 & 1) == 0)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v3 + 32), "onDemandMonitor"));

    if (v18)
    {
      v21 = ne_log_obj(v19, v20);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *(_QWORD *)(v3 + 32);
        *(_DWORD *)buf = 138412290;
        v72 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%@: Disabling VPN On Demand", buf, 0xCu);
      }

      sub_10007BC60(*(void **)(v3 + 32));
      if (objc_msgSend(*(id *)(v3 + 32), "type") == 2)
        v24 = (uint64_t)objc_alloc_init((Class)NEOnDemandRuleConnect);
      else
        v24 = 0;
      v37 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v3 + 32), "matchedRule"));
      if (v37 | v24)
      {
        v38 = (void *)v37;
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v3 + 32), "matchedRule"));
        v40 = objc_msgSend(v39, "isEqual:", v24);

        if ((v40 & 1) == 0)
        {
          objc_msgSend(*(id *)(v3 + 32), "setMatchedRule:", v24);
          sub_1000770A8(*(id *)(v3 + 32));
          objc_msgSend(*(id *)(v3 + 32), "notifyChangedExtendedStatus");
        }
        goto LABEL_71;
      }
LABEL_46:
      v24 = 0;
LABEL_71:

    }
  }
}

void sub_10007BC60(void *a1)
{
  void *v2;
  void *v3;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "onDemandMonitor"));

    if (v2)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "onDemandMonitor"));
      objc_msgSend(v3, "removeObserver:forKeyPath:", a1, CFSTR("bestAvailableNetworkDescription"));

      objc_msgSend(a1, "setOnDemandMonitor:", 0);
    }
  }
}

void sub_10007BCCC(void *a1)
{
  void *v2;
  NSObject *v3;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "onDemandPauseTimerSource"));

    if (v2)
    {
      v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "onDemandPauseTimerSource"));
      dispatch_source_cancel(v3);

      objc_msgSend(a1, "setOnDemandPauseTimerSource:", 0);
    }
  }
}

void sub_10007BD2C(void *a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentRegistration"));
    v3 = objc_msgSend(v2, "isRegistered");

    if (v3)
    {
      v6 = ne_log_obj(v4, v5);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v9 = 138412290;
        v10 = a1;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@: Unregistered network agent", (uint8_t *)&v9, 0xCu);
      }

      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentRegistration"));
      objc_msgSend(v8, "unregisterNetworkAgent");

      objc_msgSend(a1, "setRegisteredNetworkAgentInterfaces:", 0);
      objc_msgSend(a1, "setNetworkAgentRegistration:", 0);
    }
    sub_10007A104(a1);
  }
}

void sub_10007BE2C(void *a1, void *a2)
{
  __CFString *v3;
  uint64_t v4;
  __CFString *v5;
  uint64_t v6;
  NSObject *v7;
  const __CFString *v8;
  void *v9;
  unsigned __int8 v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  const __CFString *v18;

  v3 = a2;
  v5 = v3;
  if (a1)
  {
    v6 = ne_log_obj(v3, v4);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = CFSTR("[nil]");
      if (v5)
        v8 = v5;
      v15 = 138412546;
      v16 = a1;
      v17 = 2112;
      v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%@: Request to add network agent to \"%@\"", (uint8_t *)&v15, 0x16u);
    }

    if (isa_nsstring(v5))
    {
      if (-[__CFString length](v5, "length"))
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentInterfaces"));
        v10 = objc_msgSend(v9, "containsObject:", v5);

        if ((v10 & 1) == 0)
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentInterfaces"));
          v12 = isa_nsarray(v11);

          if ((v12 & 1) == 0)
          {
            v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
            objc_msgSend(a1, "setNetworkAgentInterfaces:", v13);

          }
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentInterfaces"));
          objc_msgSend(v14, "addObject:", v5);

          sub_1000788C8(a1);
        }
      }
    }
  }

}

void sub_10007BFA4(void *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;
  int v8;
  void *v9;

  if (a1)
  {
    v3 = ne_log_obj(a1, a2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v8 = 138412290;
      v9 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@: Request to clear network agent from all interfaces", (uint8_t *)&v8, 0xCu);
    }

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentInterfaces"));
    v6 = isa_nsarray(v5);

    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "networkAgentInterfaces"));
      objc_msgSend(v7, "removeAllObjects");

      sub_1000788C8(a1);
    }
  }
}

id sub_10007C090(id result, id a2)
{
  void *v3;
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  _QWORD v15[6];
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  void *v21;

  if (result)
  {
    v3 = result;
    v4 = objc_msgSend(result, "failedConnectCountWithinInterval");
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "onDemandPauseTimerSource"));

    if (v5)
    {
      v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "onDemandPauseTimerSource"));
      dispatch_source_cancel(v6);

      objc_msgSend(v3, "setOnDemandPauseTimerSource:", 0);
    }
    if (a2 == (id)2)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "queue"));
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_10007C234;
      v15[3] = &unk_1000BEA98;
      v15[4] = v3;
      v15[5] = v4;
      v8 = NECreateTimerSource(v7, 10, v15);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      objc_msgSend(v3, "setOnDemandPauseTimerSource:", v9);

    }
    v10 = objc_msgSend(v3, "onDemandPauseLevelInternal");
    if (v10 != a2)
    {
      v12 = ne_log_obj(v10, v11);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = objc_msgSend(v3, "onDemandPauseLevelInternal");
        *(_DWORD *)buf = 138412802;
        v17 = v3;
        v18 = 2048;
        v19 = v14;
        v20 = 2048;
        v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%@: Changing pause level %ld -> %ld", buf, 0x20u);
      }

      objc_msgSend(v3, "setOnDemandPauseLevelInternal:", a2);
    }
    return sub_1000770A8(v3);
  }
  return result;
}

void sub_10007C234(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  int v9;
  uint64_t v10;

  v2 = objc_msgSend(*(id *)(a1 + 32), "onDemandPauseLevelInternal");
  if (v2)
  {
    if (*(uint64_t *)(a1 + 40) > 3)
    {
      v4 = ne_log_obj(v2, v3);
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v9 = 138412290;
        v10 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@: Clearing damping of on-demand.", (uint8_t *)&v9, 0xCu);
      }

      sub_10007C090(*(_QWORD *)(a1 + 32), 0);
      objc_msgSend(*(id *)(a1 + 32), "setFailedConnectCountWithinInterval:", 0);
    }
    else
    {
      sub_10007C090(*(_QWORD *)(a1 + 32), 1);
    }
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "onDemandPauseTimerSource"));

  if (v7)
  {
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "onDemandPauseTimerSource"));
    dispatch_source_cancel(v8);

    objc_msgSend(*(id *)(a1 + 32), "setOnDemandPauseTimerSource:", 0);
  }
}

void sub_10007C52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007C618(uint64_t a1, char a2)
{
  id WeakRetained;
  const char *v5;
  void *v6;
  id Property;
  uint64_t v8;
  const char *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  void (*v17)(void);
  void *v18;
  void *v19;
  BOOL v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  SEL v28;
  id v29;
  void *v30;
  void *v31;
  const char *v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  const char *v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  char v52;
  unsigned __int8 v53;
  unsigned int v54;
  BOOL v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  __int128 buf;
  uint64_t (*v61)(uint64_t, void *);
  void *v62;
  void *v63;
  id v64;
  id v65;
  id v66;
  id v67;
  unsigned int v68;
  unsigned __int8 v69;
  char v70;
  BOOL v71;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v6 = WeakRetained;
  if (!WeakRetained || (a2 & 1) == 0)
  {
LABEL_10:
    v17 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
    goto LABEL_11;
  }
  Property = objc_getProperty(WeakRetained, v5, 688, 1);
  v8 = objc_claimAutoreleasedReturnValue(Property);
  if (!v8)
    goto LABEL_7;
  v10 = (void *)v8;
  v11 = objc_getProperty(v6, v9, 688, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "controlUnit"));
  v14 = objc_msgSend(v13, "unsignedIntValue");

  if (!v14)
  {
LABEL_7:
    v15 = ne_log_obj(v8, v9);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Invalid flow divert control unit", (uint8_t *)&buf, 2u);
    }

    goto LABEL_10;
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "isFullyTransparent") & 1) != 0)
  {
    v55 = 0;
    LODWORD(v51) = 0;
  }
  else
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "pluginConfigurationEntities"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "DNSSettings"));
    v20 = v19 != 0;

    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "pluginConfigurationEntities"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "proxySettings"));
    v55 = v20;
    if ((objc_msgSend(v22, "enabled") & 1) != 0)
    {
      LODWORD(v51) = 1;
    }
    else
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "protocol"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "proxySettings"));
      LODWORD(v51) = objc_msgSend(v24, "enabled");

    }
  }
  v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "policySession", v51));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "includedNetworkRules"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "excludedNetworkRules"));
  v29 = objc_getProperty(v6, v28, 688, 1);
  v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
  v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "controlUnit"));
  v54 = objc_msgSend(v58, "unsignedIntValue");
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "primaryTunnelPlugin"));
  v33 = sub_100016BA8(v31, v32);
  v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "firstObject"));
  v53 = objc_msgSend(*(id *)(a1 + 32), "isFullyTransparent");
  v36 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "server"));
  v38 = v36;
  v59 = v30;
  v56 = v34;
  v57 = v31;
  v39 = (void *)v25;
  if (v36)
    v36 = objc_getProperty(v36, v37, 80, 1);
  v40 = v36;
  v41 = v26;
  v42 = v27;
  v43 = v35;
  v44 = v40;
  if (v39)
  {
    *(_QWORD *)&buf = _NSConcreteStackBlock;
    *((_QWORD *)&buf + 1) = 3221225472;
    v61 = sub_100040FC8;
    v62 = &unk_1000BDE00;
    v63 = v39;
    v68 = v54;
    v69 = v53;
    v64 = v43;
    v65 = v44;
    v66 = v42;
    v70 = v52;
    v71 = v55;
    v67 = v41;
    v45 = v39;
    v46 = sub_10002C9C8((uint64_t)NESMPolicyMasterSession, &buf);

  }
  else
  {
    v45 = 0;
    v46 = 0;
  }

  if ((v46 & 1) == 0)
  {
    v49 = ne_log_obj(v47, v48);
    v50 = objc_claimAutoreleasedReturnValue(v49);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "%@: Failed to set the flow divert policies", (uint8_t *)&buf, 0xCu);
    }

  }
  v17 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
LABEL_11:
  v17();

}

void sub_10007D820(void *a1, const char *a2)
{
  const char *v3;
  SEL v4;
  id Property;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  SEL v9;
  int v10;
  void *v11;

  if (a1)
  {
    if (objc_getProperty(a1, a2, 384, 1))
    {
      objc_msgSend(objc_getProperty(a1, v3, 384, 1), "removeObserver:forKeyPath:", a1, CFSTR("bestAvailableNetworkDescription"));
      objc_setProperty_atomic(a1, v4, 0, 384);
    }
    Property = objc_getProperty(a1, v3, 392, 1);
    if (Property)
    {
      v7 = ne_log_obj(Property, v6);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v10 = 138412290;
        v11 = a1;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%@ End DNS On Demand monitor transaction", (uint8_t *)&v10, 0xCu);
      }

      objc_setProperty_atomic(a1, v9, 0, 392);
    }
  }
}

void sub_10007D938(void *a1, char a2)
{
  NSObject *v4;
  _QWORD block[6];
  char v6;
  char v7;
  _QWORD v8[5];
  id v9;

  if (a1)
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x3032000000;
    v8[3] = sub_10007DA28;
    v8[4] = sub_10007DA38;
    v9 = (id)os_transaction_create("com.apple.nesessionmanager.DNSSettings.updatePolicies");
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10007DA40;
    block[3] = &unk_1000BEA28;
    v6 = a2;
    v7 = 1;
    block[4] = a1;
    block[5] = v8;
    dispatch_async(v4, block);

    _Block_object_dispose(v8, 8);
  }
}

void sub_10007DA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007DA28(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10007DA38(uint64_t a1)
{

}

void sub_10007DA40(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  const char *v10;
  void *v11;
  id Property;
  void *v13;
  id v14;
  id v15;
  const char *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD v27[5];
  id v28;
  id v29;
  id v30;
  id v31;

  if (*(_BYTE *)(a1 + 48))
  {
    sub_10007BD2C(*(void **)(a1 + 32));
    sub_10007AAF8(*(void **)(a1 + 32));
  }
  if (*(_BYTE *)(a1 + 49))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "dnsSettings"));
    v4 = objc_msgSend(v3, "isEnabled");

    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySession"));
    v6 = (_DWORD *)v5;
    if (v4)
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "networkAgent"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "agentUUID"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "dnsSettings"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "settings"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "matchDomains"));
      Property = *(id *)(a1 + 32);
      if (Property)
      {
        Property = objc_getProperty(Property, v10, 376, 1);
        v13 = *(void **)(a1 + 32);
      }
      else
      {
        v13 = 0;
      }
      v14 = Property;
      v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "server"));
      v17 = v15;
      if (v15)
        v15 = objc_getProperty(v15, v16, 80, 1);
      v18 = v15;
      v19 = v7;
      v20 = v11;
      v21 = v14;
      v22 = v18;
      if (v6 && v6[2] == 7)
      {
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472;
        v27[2] = sub_100044FEC;
        v27[3] = &unk_1000BDEF0;
        v27[4] = v6;
        v28 = v19;
        v29 = v20;
        v30 = v21;
        v31 = v22;
        sub_10002C9C8((uint64_t)NESMPolicyMasterSession, v27);

      }
    }
    else
    {
      sub_10002C404(v5);
    }

  }
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v24 = *(void **)(v23 + 40);
  *(_QWORD *)(v23 + 40) = 0;

}

void sub_10007DC9C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dnsSettings"));
  if (v2)
  {
    v3 = (void *)v2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dnsSettings"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "settings"));

    if (v6)
      objc_msgSend(*(id *)(a1 + 32), "startWithCommand:isOnDemand:", 0, 0);
  }
  else
  {

  }
}

uint64_t sub_10007DD74(int *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  char v10;
  uint64_t v11;
  void *i;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned __int8 v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *j;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  BOOL v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  id v34;
  const char *v35;
  const char *v36;
  id v37;
  void *k;
  void *v39;
  id v40;
  void *v41;
  _BOOL4 v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  void *m;
  uint64_t v48;
  void *v49;
  BOOL v50;
  const char *v51;
  NSObject *v52;
  uint32_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  id v58;
  SEL v59;
  id v61;
  void *v62;
  int *self;
  void *v64;
  id obj;
  id newValue;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _QWORD handler[4];
  id v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[128];
  _BYTE v88[128];
  id location[16];
  uint8_t buf[4];
  int *v91;
  __int16 v92;
  id v93;

  v3 = a2;
  self = a1;
  if (!a1)
  {
    v4 = 0;
    goto LABEL_79;
  }
  v68 = v3;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "payloadInfo"));
  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "payloadInfo"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "profileUUID"));

    if (v6)
    {
      v64 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"));
      if ((objc_msgSend(v64, "isSupervised") & 1) != 0)
      {
        v4 = 0;
LABEL_77:

        goto LABEL_78;
      }
      v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "installedMDMProfileIdentifier"));
      if (!v62)
      {
        v4 = 0;
LABEL_76:

        goto LABEL_77;
      }
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "installedProfileWithIdentifier:"));
      v61 = v7;
      if (!v7)
      {
        v4 = 0;
LABEL_75:

        goto LABEL_76;
      }
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "managedPayloads"));
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v75, v88, 16);
      if (v9)
      {
        v10 = 0;
        v11 = *(_QWORD *)v76;
        do
        {
          for (i = 0; i != v9; i = (char *)i + 1)
          {
            if (*(_QWORD *)v76 != v11)
              objc_enumerationMutation(v8);
            v13 = *(void **)(*((_QWORD *)&v75 + 1) + 8 * (_QWORD)i);
            v14 = objc_opt_class(MCDNSSettingsPayload);
            if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
            {
              v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "UUID"));
              v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "payloadInfo"));
              v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "payloadUUID"));
              v18 = objc_msgSend(v15, "isEqualToString:", v17);

            }
            else
            {
              v18 = 0;
            }
            v10 |= v18;
          }
          v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v75, v88, 16);
        }
        while (v9);

        if ((v10 & 1) != 0)
        {
          v19 = objc_alloc_init((Class)NSMutableArray);
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "managedPayloads"));
          v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v69, v87, 16);
          if (v21)
          {
            v22 = *(_QWORD *)v70;
            do
            {
              for (j = 0; j != v21; j = (char *)j + 1)
              {
                if (*(_QWORD *)v70 != v22)
                  objc_enumerationMutation(v20);
                v24 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * (_QWORD)j);
                v25 = objc_opt_class(MCWiFiPayload);
                if ((objc_opt_isKindOfClass(v24, v25) & 1) != 0)
                {
                  v26 = v24;
                  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "ssid"));
                  v28 = v27 == 0;

                  if (!v28)
                  {
                    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "ssid"));
                    objc_msgSend(v19, "addObject:", v29);

                  }
                }
              }
              v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v69, v87, 16);
            }
            while (v21);
          }

          v32 = ne_log_obj(v30, v31);
          v33 = objc_claimAutoreleasedReturnValue(v32);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            v91 = self;
            v92 = 2112;
            v93 = v19;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "%@ restricting to SSIDs: %@", buf, 0x16u);
          }

          v34 = v19;
          newValue = objc_alloc_init((Class)NSMutableArray);
          if (objc_msgSend(v34, "count"))
          {
            if (objc_msgSend(objc_getProperty(self, v35, 368, 1), "count"))
            {
              v85 = 0u;
              v86 = 0u;
              v83 = 0u;
              v84 = 0u;
              obj = objc_getProperty(self, v36, 368, 1);
              v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v83, buf, 16);
              if (v37)
              {
                v67 = *(_QWORD *)v84;
                do
                {
                  for (k = 0; k != v37; k = (char *)k + 1)
                  {
                    if (*(_QWORD *)v84 != v67)
                      objc_enumerationMutation(obj);
                    v39 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * (_QWORD)k);
                    if (objc_msgSend(v39, "action", v61, v62) == (id)2 || objc_msgSend(v39, "action") == (id)4)
                    {
                      objc_msgSend(newValue, "addObject:", v39);
                    }
                    else
                    {
                      v40 = objc_msgSend(v39, "copy");
                      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "SSIDMatch"));
                      v42 = objc_msgSend(v41, "count") == 0;

                      if (v42)
                      {
                        objc_msgSend(v40, "setSSIDMatch:", v34);
                      }
                      else
                      {
                        v43 = objc_alloc_init((Class)NSMutableArray);
                        v81 = 0u;
                        v82 = 0u;
                        v79 = 0u;
                        v80 = 0u;
                        v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "SSIDMatch"));
                        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v79, location, 16);
                        if (v45)
                        {
                          v46 = *(_QWORD *)v80;
                          do
                          {
                            for (m = 0; m != v45; m = (char *)m + 1)
                            {
                              if (*(_QWORD *)v80 != v46)
                                objc_enumerationMutation(v44);
                              v48 = *(_QWORD *)(*((_QWORD *)&v79 + 1) + 8 * (_QWORD)m);
                              if (objc_msgSend(v34, "containsObject:", v48))
                                objc_msgSend(v43, "addObject:", v48);
                            }
                            v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v79, location, 16);
                          }
                          while (v45);
                        }

                        objc_msgSend(v40, "setSSIDMatch:", v43);
                      }
                      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "SSIDMatch"));
                      v50 = objc_msgSend(v49, "count") == 0;

                      if (!v50)
                        objc_msgSend(newValue, "addObject:", v40);

                    }
                  }
                  v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v83, buf, 16);
                }
                while (v37);
              }
            }
            else
            {
              obj = objc_alloc_init((Class)NEOnDemandRuleConnect);
              objc_msgSend(obj, "setInterfaceTypeMatch:", 2);
              objc_msgSend(obj, "setSSIDMatch:", v34);
              objc_msgSend(newValue, "addObject:", obj);
            }

          }
          v58 = objc_alloc_init((Class)NEOnDemandRuleDisconnect);
          objc_msgSend(newValue, "addObject:", v58);
          objc_setProperty_atomic(self, v59, newValue, 368);

          v4 = 1;
LABEL_74:
          v7 = v61;
          goto LABEL_75;
        }
      }
      else
      {

      }
      if (self[89] == -1)
      {
        objc_initWeak(location, self);
        v51 = (const char *)objc_msgSend(MCProfileListChangedNotification, "cStringUsingEncoding:", 4);
        v52 = objc_claimAutoreleasedReturnValue(objc_msgSend(self, "queue"));
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_10007EA78;
        handler[3] = &unk_1000BE740;
        objc_copyWeak(&v74, location);
        v53 = notify_register_dispatch(v51, self + 89, v52, handler);

        if (v53)
        {
          v56 = ne_log_obj(v54, v55);
          v57 = objc_claimAutoreleasedReturnValue(v56);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            v91 = self;
            v92 = 1024;
            LODWORD(v93) = v53;
            _os_log_error_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "%@ Failed to register for MC notifications: %u", buf, 0x12u);
          }

        }
        objc_destroyWeak(&v74);
        objc_destroyWeak(location);
      }
      v4 = 0;
      goto LABEL_74;
    }
    v4 = 0;
  }
LABEL_78:
  v3 = v68;
LABEL_79:

  return v4;
}

void sub_10007E530(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_10007E56C(void *a1, const char *a2)
{
  void *v2;
  SEL v3;
  const char *v4;
  void *v5;
  SEL v6;
  const char *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  _UNKNOWN **v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  SEL v29;
  SEL v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  NSObject *v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  SEL v40;
  uint64_t v41;
  NSObject *v42;
  id v43;
  id v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint8_t buf[4];
  void *v50;

  if (a1)
  {
    v2 = a1;
    sub_10007D820(a1, a2);
    if (objc_getProperty(v2, v3, 368, 1))
    {
      if (!objc_getProperty(v2, v4, 368, 1))
      {
        v5 = 0;
        goto LABEL_32;
      }
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      if (objc_msgSend(objc_getProperty(v2, v6, 368, 1), "count"))
      {
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = v2;
        v8 = objc_getProperty(v2, v7, 368, 1);
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v45, buf, 16);
        if (!v9)
          goto LABEL_17;
        v10 = v9;
        v11 = *(_QWORD *)v46;
        while (1)
        {
          v12 = 0;
          do
          {
            if (*(_QWORD *)v46 != v11)
              objc_enumerationMutation(v8);
            v13 = v5;
            v14 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)v12);
            v15 = objc_alloc_init((Class)NWNetworkDescription);
            v16 = objc_msgSend(v14, "interfaceTypeMatch");
            if (v16 == (id)3)
            {
              v17 = &off_1000C1768;
            }
            else
            {
              if (v16 != (id)2)
                goto LABEL_15;
              v17 = &off_1000C1780;
            }
            v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", v17));
            objc_msgSend(v15, "setInterfaceTypeOptions:", v18);

LABEL_15:
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "DNSSearchDomainMatch"));
            v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v19));
            objc_msgSend(v15, "setDnsSearchDomainOptions:", v20);

            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "DNSServerAddressMatch"));
            v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v21));
            objc_msgSend(v15, "setDnsServerAddressOptions:", v22);

            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "SSIDMatch"));
            v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v23));
            objc_msgSend(v15, "setSsidOptions:", v24);

            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "probeURL"));
            objc_msgSend(v15, "setProbeURL:", v25);

            v5 = v13;
            objc_msgSend(v13, "addObject:", v15);

            v12 = (char *)v12 + 1;
          }
          while (v10 != v12);
          v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v45, buf, 16);
          if (!v10)
          {
LABEL_17:

            v2 = v43;
            if (!v5)
              goto LABEL_32;
            goto LABEL_22;
          }
        }
      }
      v26 = objc_alloc_init((Class)NWNetworkDescription);
      objc_msgSend(v5, "addObject:", v26);

      if (!v5)
        goto LABEL_32;
LABEL_22:
      v27 = objc_alloc_init((Class)NWParameters);
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:](NWMonitor, "monitorWithNetworkDescriptionArray:endpoint:parameters:", v5, 0, v27));
      objc_setProperty_atomic(v2, v29, v28, 384);

      if (objc_getProperty(v2, v30, 384, 1))
      {
        if (!objc_getProperty(v2, v31, 392, 1))
        {
          v33 = ne_log_obj(0, v32);
          v34 = objc_claimAutoreleasedReturnValue(v33);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v50 = v2;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "%@ Begin DNS On Demand monitor transaction", buf, 0xCu);
          }

          v35 = objc_alloc((Class)NSString);
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "configuration"));
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "identifier"));
          v38 = objc_msgSend(v35, "initWithFormat:", CFSTR("com.apple.nesessionmanager.DNSOnDemandMonitor.%@"), v37);

          v39 = (void *)os_transaction_create(objc_msgSend(v38, "UTF8String"));
          objc_setProperty_atomic(v2, v40, v39, 392);

        }
        objc_msgSend(objc_getProperty(v2, v32, 384, 1), "addObserver:forKeyPath:options:context:", v2, CFSTR("bestAvailableNetworkDescription"), 5, 0);
      }
      else
      {
        v41 = ne_log_obj(0, v31);
        v42 = objc_claimAutoreleasedReturnValue(v41);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v50 = v2;
          _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "%@ DNS On Demand monitor creation failed", buf, 0xCu);
        }

      }
LABEL_32:

    }
    else
    {
      v44 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "server"));
      objc_msgSend(v44, "requestInstallForSession:withParentSession:exclusive:", v2, 0, 0);

    }
  }
}

void sub_10007EA78(uint64_t a1)
{
  int *WeakRetained;
  int *v2;
  void *v3;
  void *v4;
  void *v5;
  SEL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  int v12;
  int v13;
  int *v14;

  WeakRetained = (int *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "configuration"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dnsSettings"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "onDemandRules"));
    objc_setProperty_atomic(v2, v6, v5, 368);

    v7 = sub_10007DD74(v2, v3);
    if ((_DWORD)v7)
    {
      v9 = ne_log_obj(v7, v8);
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v13 = 138412290;
        v14 = v2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@ updateOnDemandRulesForConfiguration asking to install", (uint8_t *)&v13, 0xCu);
      }

      *((_BYTE *)v2 + 352) = 1;
      sub_10007E56C(v2, v11);
    }
    v12 = v2[89];
    if ((v12 & 0x80000000) == 0)
    {
      notify_cancel(v12);
      v2[89] = -1;
    }

  }
}

void sub_10007EC14(const void *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t isKindOfClass;
  uint64_t v6;
  uint64_t IONetworkInterfaceObject;
  uint64_t v8;
  void *CFProperty;
  CFTypeID TypeID;
  uint64_t v11;
  CFTypeID v12;
  void *v13;
  id v14;
  uint64_t BSDSocket;
  uint64_t v16;
  int v17;
  id v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  void *v42;
  int v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  char *v47;
  char __strerrbuf[4];
  void *v49;

  v43 = 0x200000;
  v4 = objc_opt_class(_NECompletion);
  isKindOfClass = objc_opt_isKindOfClass(a2, v4);
  if ((isKindOfClass & 1) != 0)
  {
    if (!a1)
    {
      v27 = 0;
      v14 = 0;
      if (a2)
      {
LABEL_25:
        v32 = a2[2];
LABEL_26:
        (*(void (**)(uint64_t, uint64_t))(v32 + 16))(v32, v27);

        goto LABEL_27;
      }
LABEL_40:
      v32 = 0;
      goto LABEL_26;
    }
    IONetworkInterfaceObject = IOEthernetControllerGetIONetworkInterfaceObject(a1);
    if ((_DWORD)IONetworkInterfaceObject)
    {
      CFProperty = (void *)IORegistryEntryCreateCFProperty(IONetworkInterfaceObject, CFSTR("BSD Name"), kCFAllocatorDefault, 0);
      TypeID = CFStringGetTypeID();
      if (CFProperty)
      {
        v12 = TypeID;
        TypeID = CFGetTypeID(CFProperty);
        if (TypeID == v12)
        {
          if (a2)
            v13 = (void *)a2[1];
          else
            v13 = 0;
          v14 = v13;
          objc_msgSend(v14, "setName:", CFProperty);

          BSDSocket = IOEthernetControllerGetBSDSocket(a1);
          if ((BSDSocket & 0x80000000) != 0)
          {
            v33 = ne_log_obj(BSDSocket, v16);
            v23 = objc_claimAutoreleasedReturnValue(v33);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)__strerrbuf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Failed to get the kernel control socket of the user ethernet controller", (uint8_t *)__strerrbuf, 2u);
            }
            goto LABEL_34;
          }
          v17 = BSDSocket;
          v18 = objc_msgSend(objc_alloc((Class)NSFileHandle), "initWithFileDescriptor:closeOnDealloc:", BSDSocket, 0);
          objc_msgSend(v14, "setControlSocket:", v18);

          if (setsockopt(v17, 0xFFFF, 4097, &v43, 4u))
          {
            v19 = *__error();
            v20 = strerror_r(v19, __strerrbuf, 0x80uLL);
            if ((_DWORD)v20)
              __strerrbuf[0] = 0;
            v22 = ne_log_obj(v20, v21);
            v23 = objc_claimAutoreleasedReturnValue(v22);
            if (!os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
              goto LABEL_34;
            *(_DWORD *)buf = 67109378;
            v45 = v19;
            v46 = 2080;
            v47 = __strerrbuf;
            v24 = "Failed to set the kernel control socket send buffer size: [%d] %s";
          }
          else
          {
            v34 = setsockopt(v17, 0xFFFF, 4098, &v43, 4u);
            if (!(_DWORD)v34)
            {
              v40 = ne_log_obj(v34, v35);
              v41 = objc_claimAutoreleasedReturnValue(v40);
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "name"));
                *(_DWORD *)__strerrbuf = 138412290;
                v49 = v42;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Created user ethernet interface %@", (uint8_t *)__strerrbuf, 0xCu);

              }
              objc_msgSend(v14, "setUserEthernetController:", a1);
              v27 = 1;
              if (a2)
                goto LABEL_25;
              goto LABEL_40;
            }
            v36 = *__error();
            v37 = strerror_r(v36, __strerrbuf, 0x80uLL);
            if ((_DWORD)v37)
              __strerrbuf[0] = 0;
            v39 = ne_log_obj(v37, v38);
            v23 = objc_claimAutoreleasedReturnValue(v39);
            if (!os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
              goto LABEL_34;
            *(_DWORD *)buf = 67109378;
            v45 = v36;
            v46 = 2080;
            v47 = __strerrbuf;
            v24 = "Failed to set the kernel control socket receive buffer size: [%d] %s";
          }
          _os_log_fault_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, v24, buf, 0x12u);
LABEL_34:

LABEL_24:
          CFRelease(a1);
          v27 = 0;
          if (a2)
            goto LABEL_25;
          goto LABEL_40;
        }
      }
      v28 = ne_log_obj(TypeID, v11);
      v29 = objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__strerrbuf = 0;
        v30 = "Failed to get the BSD name of the user ethernet controller";
LABEL_36:
        _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, v30, (uint8_t *)__strerrbuf, 2u);
      }
    }
    else
    {
      v31 = ne_log_obj(IONetworkInterfaceObject, v8);
      v29 = objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__strerrbuf = 0;
        v30 = "Failed to get the IO object for the user ethernet controller";
        goto LABEL_36;
      }
    }

    v14 = 0;
    goto LABEL_24;
  }
  v25 = ne_log_obj(isKindOfClass, v6);
  v26 = objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__strerrbuf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "No completion object was provided", (uint8_t *)__strerrbuf, 2u);
  }

  if (a1)
    CFRelease(a1);
LABEL_27:

}

void sub_10007F2C0(uint64_t a1, const char *a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  id v11;
  void *v12;
  const char *v13;
  _QWORD *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  const char *v22;
  id Property;
  const char *v24;
  _QWORD *v25;
  id v26;
  const char *v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  const char *v32;
  id v33;
  const char *v34;
  id v35;
  _QWORD *v36;
  const char *v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  _QWORD v48[5];
  uuid_t out;
  _BYTE v50[24];
  void *v51;
  _QWORD *v52;
  id v53;
  uint8_t buf[16];
  _BYTE v55[24];
  id v56;

  v3 = *(void **)(a1 + 32);
  if (!v3 || (v4 = objc_getProperty(v3, a2, 32, 1)) == 0)
    __assert_rtn("-[NEAgent startWithCompletionHandler:]_block_invoke", "NEAgent.m", 153, "self.callbackQueue != NULL");

  v7 = ne_log_obj(v5, v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@: starting", buf, 0xCu);
  }

  v11 = objc_msgSend(objc_alloc((Class)NSXPCConnection), "initWithMachServiceName:options:", CFSTR("com.apple.neagent"), 0);
  v12 = *(void **)(a1 + 32);
  if (v12)
    objc_setProperty_atomic(v12, v10, v11, 80);

  v14 = *(_QWORD **)(a1 + 32);
  if (v14 && v14[5])
  {
    v15 = objc_msgSend(objc_getProperty(v14, v13, 80, 1), "_xpcConnection");
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    xpc_connection_set_instance(v16, &g_provider_host_primary_neagent_instance_id);
  }
  else
  {
    memset(out, 0, sizeof(out));
    *(_OWORD *)buf = 0u;
    memset(v55, 0, 21);
    uuid_generate(out);
    uuid_unparse(out, (char *)buf);
    v19 = ne_log_obj(v17, v18);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      v21 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)v50 = 138412546;
      *(_QWORD *)&v50[4] = v21;
      *(_WORD *)&v50[12] = 2080;
      *(_QWORD *)&v50[14] = buf;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%@: starting with instance ID %s", v50, 0x16u);
    }

    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v22, 80, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "_xpcConnection"));
    xpc_connection_set_oneshot_instance(v16, out);
  }

  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472;
  v48[2] = sub_10007F700;
  v48[3] = &unk_1000BEB80;
  v48[4] = *(_QWORD *)(a1 + 32);
  v25 = objc_retainBlock(v48);
  v26 = *(id *)(a1 + 32);
  if (v26)
    v26 = objc_getProperty(v26, v24, 80, 1);
  objc_msgSend(v26, "setInvalidationHandler:", v25);
  v28 = *(id *)(a1 + 32);
  if (v28)
    v28 = objc_getProperty(v28, v27, 80, 1);
  objc_msgSend(v28, "setInterruptionHandler:", v25);
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___NEAgentControl));
  v30 = objc_alloc((Class)NSSet);
  v31 = objc_opt_class(NSArray);
  v46 = objc_msgSend(v30, "initWithObjects:", v31, objc_opt_class(NSUUID), 0);
  objc_msgSend(v29, "setClasses:forSelector:argumentIndex:ofReply:");
  v33 = *(id *)(a1 + 32);
  if (v33)
    v33 = objc_getProperty(v33, v32, 80, 1);
  objc_msgSend(v33, "setRemoteObjectInterface:", v29);
  v35 = *(id *)(a1 + 32);
  if (v35)
    v35 = objc_getProperty(v35, v34, 80, 1);
  v47 = v25;
  objc_msgSend(v35, "resume");
  v36 = *(_QWORD **)(a1 + 32);
  v38 = *(id *)(a1 + 40);
  if (v36)
  {
    v39 = objc_getProperty(v36, v37, 80, 1);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)v55 = sub_10007F7AC;
    *(_QWORD *)&v55[8] = &unk_1000BE768;
    *(_QWORD *)&v55[16] = v36;
    v40 = v38;
    v56 = v40;
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "remoteObjectProxyWithErrorHandler:", buf));
    v43 = v36[5];
    v42 = v36[6];
    v44 = v36[7];
    v45 = v36[12];
    *(_QWORD *)v50 = _NSConcreteStackBlock;
    *(_QWORD *)&v50[8] = 3221225472;
    *(_QWORD *)&v50[16] = sub_10007F8F0;
    v51 = &unk_1000BE7B8;
    v52 = v36;
    v53 = v40;
    objc_msgSend(v41, "setupWithPluginType:pluginVersion:pluginClass:pluginInfo:completionHandler:", v42, v43, v44, v45, v50);

  }
}

void sub_10007F700(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  int v7;
  uint64_t v8;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: XPC connection went away", (uint8_t *)&v7, 0xCu);
  }

  sub_10007FE88(*(void **)(a1 + 32), v6);
}

void sub_10007F7AC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  void *v8;
  NSObject *Property;
  id v10;
  id v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  id v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  id v19;

  v3 = a2;
  v5 = ne_log_obj(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v12 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    v17 = v12;
    v18 = 2112;
    v19 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%@: Got an XPC error while waiting for a setup command response: %@", buf, 0x16u);
  }

  v8 = *(void **)(a1 + 32);
  if (v8)
    Property = objc_getProperty(v8, v7, 32, 1);
  else
    Property = 0;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10007FEF8;
  v13[3] = &unk_1000BECD0;
  v10 = *(id *)(a1 + 40);
  v14 = v3;
  v15 = v10;
  v11 = v3;
  dispatch_async(Property, v13);

}

void sub_10007F8F0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const char *v9;
  id v10;
  void *v11;
  NSObject *Property;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  _QWORD block[4];
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;

  v7 = a2;
  v8 = a3;
  v10 = a4;
  v11 = *(void **)(a1 + 32);
  if (v11)
  {
    Property = objc_getProperty(v11, v9, 24, 1);
    v13 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v13 = 0;
    Property = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10007F9FC;
  block[3] = &unk_1000BE790;
  v19 = v7;
  v20 = v13;
  v21 = v10;
  v14 = *(id *)(a1 + 40);
  v22 = v8;
  v23 = v14;
  v15 = v8;
  v16 = v10;
  v17 = v7;
  dispatch_async(Property, block);

}

void sub_10007F9FC(uint64_t a1)
{
  const char *v2;
  id v3;
  _QWORD *v4;
  const char *v5;
  id v6;
  id Property;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  _xpc_connection_s *v16;
  uint64_t v17;
  _xpc_connection_s *v18;
  uint64_t v19;
  pid_t pid;
  xpc_type_t type;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  id v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  NSObject *v32;
  const char *v33;
  void *v34;
  NSObject *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD block[4];
  id v40;
  id v41;
  id v42;
  uint8_t buf[4];
  uint64_t v44;
  __int16 v45;
  id v46;

  v3 = *(id *)(a1 + 32);
  v4 = *(_QWORD **)(a1 + 40);
  if (v4 && v4[5])
    goto LABEL_11;
  v6 = objc_alloc((Class)NEProcessIdentity);
  Property = *(id *)(a1 + 40);
  if (Property)
    Property = objc_getProperty(Property, v5, 80, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "_xpcConnection"));
  v9 = objc_msgSend(v6, "initFromXPCConnection:", v8);

  if (v9)
  {
    v12 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", v9, 0);
    sub_10007FDF4(*(_QWORD *)(a1 + 40), v12);

  }
  else
  {
    v13 = ne_log_obj(v10, v11);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to create a process identity from the agent XPC connection", buf, 2u);
    }

    v15 = objc_msgSend(objc_alloc((Class)NSError), "initWithDomain:code:userInfo:", CFSTR("NEAgentErrorDomain"), 1, 0);
    v3 = v15;
  }

  v4 = *(_QWORD **)(a1 + 40);
  if (v4)
LABEL_11:
    v4 = objc_getProperty(v4, v2, 80, 1);
  v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_xpcConnection"));
  v18 = v16;
  if (v16)
  {
    v19 = *(_QWORD *)(a1 + 40);
    pid = xpc_connection_get_pid(v16);
    sub_10007FE04(v19, pid, *(void **)(a1 + 48));
    type = (xpc_type_t)xpc_connection_copy_entitlement_value(v18, "com.apple.private.neagent");
    v23 = type;
    if (!type
      || (type = xpc_get_type(type), type != (xpc_type_t)&_xpc_type_BOOL)
      || (type = (xpc_type_t)xpc_BOOL_get_value(v23), (type & 1) == 0))
    {
      v24 = ne_log_obj(type, v22);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v38 = *(_QWORD *)(a1 + 40);
        if (v38)
          LODWORD(v38) = *(_DWORD *)(v38 + 16);
        *(_DWORD *)buf = 67109120;
        LODWORD(v44) = v38;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Terminating neagent connection from un-entitled process %d", buf, 8u);
      }

      v26 = objc_msgSend(objc_alloc((Class)NSError), "initWithDomain:code:userInfo:", CFSTR("NEAgentErrorDomain"), 1, 0);
      v3 = v26;
    }
  }
  else
  {
    v27 = ne_log_obj(0, v17);
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Terminating neagent connection because the XPC connection is NULL", buf, 2u);
    }

    v23 = v3;
    v3 = objc_msgSend(objc_alloc((Class)NSError), "initWithDomain:code:userInfo:", CFSTR("NEAgentErrorDomain"), 1, 0);
  }

  if (v3)
  {
    v31 = ne_log_obj(v29, v30);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v37 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      v44 = v37;
      v45 = 2112;
      v46 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%@: Tearing down XPC connection due to setup error: %@", buf, 0x16u);
    }

    sub_10007FE88(*(void **)(a1 + 40), v33);
  }
  v34 = *(void **)(a1 + 40);
  if (v34)
    v35 = objc_getProperty(v34, v30, 32, 1);
  else
    v35 = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10007FEE4;
  block[3] = &unk_1000BECA8;
  v42 = *(id *)(a1 + 64);
  v40 = v3;
  v41 = *(id *)(a1 + 56);
  v36 = v3;
  dispatch_async(v35, block);

}

void sub_10007FDF4(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 72), a2);
}

void sub_10007FE04(uint64_t a1, int a2, void *a3)
{
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a3;
  if (a1)
  {
    *(_DWORD *)(a1 + 16) = a2;
    objc_storeStrong((id *)(a1 + 64), a3);
    v6 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@[%d]"), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 16)));
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;

  }
}

void sub_10007FE88(void *a1, const char *a2)
{
  const char *v3;
  SEL v4;

  if (a1)
  {
    if (objc_getProperty(a1, a2, 80, 1))
    {
      objc_msgSend(objc_getProperty(a1, v3, 80, 1), "invalidate");
      objc_setProperty_atomic(a1, v4, 0, 80);
    }
  }
}

uint64_t sub_10007FEE4(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_10007FEF8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_10007FF0C(uint64_t a1, const char *a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  void *v11;
  const char *v12;
  id Property;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  _QWORD v21[5];
  id v22;
  _QWORD v23[5];
  id v24;
  _QWORD block[4];
  id v26;
  uint8_t buf[4];
  uint64_t v28;

  v3 = *(void **)(a1 + 32);
  if (!v3 || (v4 = objc_getProperty(v3, a2, 32, 1)) == 0)
    __assert_rtn("-[NEAgent disposeWithCompletionHandler:]_block_invoke", "NEAgent.m", 204, "self.callbackQueue != NULL");

  v7 = ne_log_obj(v5, v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v28 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@: disposing", buf, 0xCu);
  }

  v11 = *(void **)(a1 + 32);
  if (!v11)
    goto LABEL_15;
  Property = objc_getProperty(v11, v10, 80, 1);
  v14 = *(void **)(a1 + 32);
  if (!Property)
  {
    if (v14)
    {
      v20 = objc_getProperty(v14, v12, 32, 1);
LABEL_12:
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100080144;
      block[3] = &unk_1000BE7E0;
      v26 = *(id *)(a1 + 40);
      dispatch_async(v20, block);
      v19 = v26;
      goto LABEL_13;
    }
LABEL_15:
    v20 = 0;
    goto LABEL_12;
  }
  if (v14)
  {
    v15 = objc_getProperty(v14, v12, 80, 1);
    v16 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100080154;
  v23[3] = &unk_1000BE768;
  v23[4] = v16;
  v24 = *(id *)(a1 + 40);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "remoteObjectProxyWithErrorHandler:", v23));
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_10008022C;
  v21[3] = &unk_1000BE768;
  v18 = *(void **)(a1 + 40);
  v21[4] = *(_QWORD *)(a1 + 32);
  v22 = v18;
  objc_msgSend(v17, "disposeWithCompletionHandler:", v21);

  v19 = v24;
LABEL_13:

}

uint64_t sub_100080144(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100080154(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  id v11;

  v3 = a2;
  v5 = ne_log_obj(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = 138412546;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%@: Got an error on the XPC connection while waiting for dispose to complete: %@", (uint8_t *)&v8, 0x16u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10008022C(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  void *v5;
  NSObject *Property;
  uint64_t v7;
  id v8;
  _QWORD block[4];
  id v10;
  uint64_t v11;
  id v12;

  v4 = a2;
  v5 = *(void **)(a1 + 32);
  if (v5)
  {
    Property = objc_getProperty(v5, v3, 24, 1);
    v7 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v7 = 0;
    Property = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000802EC;
  block[3] = &unk_1000BECA8;
  v10 = v4;
  v11 = v7;
  v12 = *(id *)(a1 + 40);
  v8 = v4;
  dispatch_async(Property, block);

}

void sub_1000802EC(id *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  const char *v8;
  const char *v9;
  id v10;
  NSObject *Property;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint8_t buf[4];
  id v18;
  __int16 v19;
  id v20;

  if (a1[4])
  {
    v3 = ne_log_obj(a1, a2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v13 = a1[4];
      v12 = a1[5];
      *(_DWORD *)buf = 138412546;
      v18 = v12;
      v19 = 2112;
      v20 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@: disposed with error: %@", buf, 0x16u);
    }

  }
  v5 = ne_log_obj(a1, a2);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = a1[5];
    *(_DWORD *)buf = 138412290;
    v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@: disposed, tearing down agent connection", buf, 0xCu);
  }

  sub_10007FE88(a1[5], v8);
  v10 = a1[5];
  if (v10)
    Property = objc_getProperty(v10, v9, 32, 1);
  else
    Property = 0;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100080484;
  v14[3] = &unk_1000BECD0;
  v16 = a1[6];
  v15 = a1[4];
  dispatch_async(Property, v14);

}

uint64_t sub_100080484(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100080494(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v3 = *(void **)(v2 + 64);
  else
    v3 = 0;
  v4 = objc_msgSend(v3, "mutableCopy");
  if (!v4)
    v4 = objc_alloc_init((Class)NSMutableArray);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = *(id *)(a1 + 40);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v8)
          objc_enumerationMutation(v5);
        v10 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(v4, "containsObject:", v10, (_QWORD)v14) & 1) == 0)
          objc_msgSend(v4, "addObject:", v10);
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v7);
  }

  if (objc_msgSend(v4, "count"))
  {
    v11 = objc_msgSend(objc_alloc((Class)NSArray), "initWithArray:", v4);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void **)(v12 + 64);
    *(_QWORD *)(v12 + 64) = v11;

  }
}

void sub_100080640(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;

  v2 = a2;
  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = "TRUE";
    if (!v2)
      v5 = "FALSE";
    v6 = 136315138;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[NEWiFiManager] Wi-Fi WoW state change callback called, isEnabled:[%s]", (uint8_t *)&v6, 0xCu);
  }

}

id sub_1000806F8(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_1000CF938 != -1)
    dispatch_once(&qword_1000CF938, &stru_1000BE800);
  return (id)qword_1000CF930;
}

void sub_10008073C(id a1)
{
  NEWiFiManager *v1;
  void *v2;

  v1 = objc_alloc_init(NEWiFiManager);
  v2 = (void *)qword_1000CF930;
  qword_1000CF930 = (uint64_t)v1;

}

void sub_100080764(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFRunLoopRef Main;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && *(_QWORD *)(v2 + 16)
    || (v3 = WiFiManagerClientCreate(kCFAllocatorDefault, 0), (v4 = *(_QWORD *)(a1 + 32)) != 0)
    && (*(_QWORD *)(v4 + 16) = v3, (v2 = *(_QWORD *)(a1 + 32)) != 0)
    && *(_QWORD *)(v2 + 16))
  {
    ++*(_QWORD *)(v2 + 8);
    v5 = *(_QWORD *)(a1 + 32);
    if (v5 && *(_QWORD *)(v5 + 8) == 1)
    {
      WiFiManagerClientSetWoWState(*(_QWORD *)(v5 + 16), 1);
      v6 = *(_QWORD *)(a1 + 32);
      if (v6)
        v7 = *(_QWORD *)(v6 + 16);
      else
        v7 = 0;
      WiFiManagerClientRegisterWowStateChangedCallback(v7, sub_100080640, v6);
      v8 = *(_QWORD *)(a1 + 32);
      if (v8)
        v9 = *(_QWORD *)(v8 + 16);
      else
        v9 = 0;
      Main = CFRunLoopGetMain();
      v11 = WiFiManagerClientScheduleWithRunLoop(v9, Main, kCFRunLoopDefaultMode);
      v13 = ne_log_obj(v11, v12);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v15 = *(_QWORD *)(a1 + 32);
        v16 = 138412290;
        v17 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%@ enabled Wi-Fi WoW", (uint8_t *)&v16, 0xCu);
      }

    }
  }
}

void sub_1000808C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFRunLoopRef Main;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      *(_QWORD *)(v1 + 8) = v2 - 1;
      v3 = *(_QWORD *)(a1 + 32);
      if (v3)
      {
        if (!*(_QWORD *)(v3 + 8))
        {
          v4 = *(_QWORD *)(v3 + 16);
          if (v4)
          {
            WiFiManagerClientSetWoWState(v4, 0);
            WiFiManagerClientRegisterWowStateChangedCallback(*(_QWORD *)(v3 + 16), 0, 0);
            v5 = *(_QWORD *)(v3 + 16);
            Main = CFRunLoopGetMain();
            WiFiManagerClientUnscheduleFromRunLoop(v5, Main, kCFRunLoopDefaultMode);
            CFRelease(*(CFTypeRef *)(v3 + 16));
            *(_QWORD *)(v3 + 8) = 0;
            *(_QWORD *)(v3 + 16) = 0;
            v9 = ne_log_obj(v7, v8);
            v10 = objc_claimAutoreleasedReturnValue(v9);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              v11 = 138412290;
              v12 = v3;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%@ disabled Wi-Fi WoW", (uint8_t *)&v11, 0xCu);
            }

          }
        }
      }
    }
  }
}

void sub_100083514(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  const char *v5;
  id v6;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v6 = v4;
  if (v4)
    v4 = objc_getProperty(v4, v5, 24, 1);
  objc_msgSend(v4, "handleNetworkConfigurationChange:", *(_QWORD *)(a1 + 40));

}

void sub_10008357C(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  const char *v5;
  id v6;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 1));
  v6 = v4;
  if (v4)
    v4 = objc_getProperty(v4, v5, 24, 1);
  objc_msgSend(v4, "handleNetworkConfigurationChange:", *(_QWORD *)(a1 + 40));

}

void sub_1000835E4(uint64_t a1, const char *a2)
{
  id Property;
  const char *v3;
  id v4;

  Property = *(id *)(a1 + 32);
  if (Property && (Property = objc_getProperty(Property, a2, 24, 1)) != 0)
  {
    v4 = Property;
    Property = objc_getProperty(Property, v3, 24, 1);
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(Property, "uninstallOnQueue");

}

void sub_10008363C(_QWORD *a1, const char *a2)
{
  const char *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  unint64_t v10;
  const __CFString *v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  id v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  unint64_t v20;
  const __CFString *v21;
  id v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  const __CFString *v26;
  SEL v27;
  id v28;
  _QWORD *v29;
  const char *v30;
  _QWORD *Property;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  id v36;
  const char *v37;
  NSObject *v38;
  NSObject *v39;
  SEL v40;
  _QWORD *v41;
  const char *v42;
  id v43;
  const char *v44;
  NSObject *v45;
  NSObject *v46;
  SEL v47;
  _QWORD *v48;
  const char *v49;
  id v50;
  void **v51;
  uint64_t v52;
  void (*v53)(uint64_t, const char *);
  void *v54;
  NSObject *v55;
  _QWORD block[4];
  NSObject *v57;
  uint8_t buf[4];
  const char *v59;
  __int16 v60;
  const __CFString *v61;
  __int16 v62;
  const __CFString *v63;
  __int16 v64;
  const __CFString *v65;

  if (a1)
  {
    if (objc_getProperty(a1, a2, 408, 1))
    {
      v4 = objc_msgSend(objc_getProperty(a1, v3, 408, 1), "count");
      v6 = ne_log_obj(v4, v5);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      v8 = (uint64_t)v7;
      if (v4)
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v10 = a1[50] - 2;
          if (v10 > 3)
            v11 = CFSTR("Uninstalled");
          else
            v11 = off_1000BE938[v10];
          v16 = objc_msgSend(objc_getProperty(a1, v9, 360, 1), "objectAtIndexedSubscript:", 0);
          v17 = objc_claimAutoreleasedReturnValue(v16);
          v19 = (void *)v17;
          if (v17 && (v20 = *(_QWORD *)(v17 + 32) - 2, v20 <= 3))
            v21 = off_1000BE938[v20];
          else
            v21 = CFSTR("Uninstalled");
          v22 = objc_msgSend(objc_getProperty(a1, v18, 360, 1), "objectAtIndexedSubscript:", 1);
          v23 = objc_claimAutoreleasedReturnValue(v22);
          v24 = (void *)v23;
          if (v23 && (v25 = *(_QWORD *)(v23 + 32) - 2, v25 <= 3))
            v26 = off_1000BE938[v25];
          else
            v26 = CFSTR("Uninstalled");
          *(_DWORD *)buf = 138413058;
          v59 = (const char *)a1;
          v60 = 2112;
          v61 = v11;
          v62 = 2112;
          v63 = v21;
          v64 = 2112;
          v65 = v26;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v8, OS_LOG_TYPE_DEFAULT, "%@:Request install, parent session(%@), primary session(%@), fallback session(%@)", buf, 0x2Au);

        }
        v28 = objc_msgSend(objc_getProperty(a1, v27, 408, 1), "objectAtIndexedSubscript:", 0);
        v29 = (_QWORD *)objc_claimAutoreleasedReturnValue(v28);
        v8 = (uint64_t)v29;
        if (v29 && v29[2] == 3)
        {
          switch(a1[50])
          {
            case 1:
            case 2:
              a1[50] = 3;
              Property = objc_getProperty(v29, v30, 24, 1);
              if (Property)
                Property[4] = 3;
              v32 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
              -[NSObject requestInstallForSession:withParentSession:exclusive:](v32, "requestInstallForSession:withParentSession:exclusive:", a1, 0, *(_BYTE *)(v8 + 8) & 1);
              goto LABEL_29;
            case 3:
              v34 = ne_log_obj(v29, v30);
              v32 = objc_claimAutoreleasedReturnValue(v34);
              if (!os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
                goto LABEL_29;
              *(_WORD *)buf = 0;
              v35 = "parent session is in requested installation state";
              goto LABEL_45;
            case 4:
              v36 = objc_getProperty(v29, v30, 24, 1);
              if (v36)
                v36 = objc_getProperty(v36, v37, 24, 1);
              v38 = objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "queue"));
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472;
              block[2] = sub_100084014;
              block[3] = &unk_1000BEB80;
              v39 = (id)v8;
              v57 = v39;
              dispatch_async(v38, block);

              v41 = objc_getProperty(v39, v40, 24, 1);
              if (v41)
                v41[4] = 4;
              objc_msgSend(objc_getProperty(a1, v42, 408, 1), "removeObject:", v39);
              v32 = v57;
              goto LABEL_29;
            case 5:
              v43 = objc_getProperty(v29, v30, 24, 1);
              if (v43)
                v43 = objc_getProperty(v43, v44, 24, 1);
              v45 = objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "queue"));
              v51 = _NSConcreteStackBlock;
              v52 = 3221225472;
              v53 = sub_10008406C;
              v54 = &unk_1000BEB80;
              v46 = (id)v8;
              v55 = v46;
              dispatch_async(v45, &v51);

              v48 = objc_getProperty(v46, v47, 24, 1);
              if (v48)
                v48[4] = 5;
              v50 = objc_getProperty(a1, v49, 408, 1);
              objc_msgSend(v50, "removeObject:", v46, v51, v52, v53, v54);
              v32 = v55;
              goto LABEL_29;
            default:
              goto LABEL_30;
          }
        }
        v33 = ne_log_obj(v29, v30);
        v32 = objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          v35 = "bad operation request state";
LABEL_45:
          _os_log_fault_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, v35, buf, 2u);
        }
LABEL_29:

        goto LABEL_30;
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        v13 = "request install configuration operation array is empty";
        v14 = v8;
        v15 = 2;
        goto LABEL_11;
      }
    }
    else
    {
      v12 = ne_log_obj(0, v3);
      v8 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v59 = "-[NESMIKEv2VPNFallbackSession requestInstall]";
        v13 = "%s called with null self.configurationOperationArray";
        v14 = v8;
        v15 = 12;
LABEL_11:
        _os_log_fault_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, v13, buf, v15);
      }
    }
LABEL_30:

  }
}

void sub_100083B2C(_QWORD *a1, const char *a2)
{
  const char *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  unint64_t v10;
  const __CFString *v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  id v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  unint64_t v20;
  const __CFString *v21;
  id v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  const __CFString *v26;
  SEL v27;
  id v28;
  uint64_t v29;
  const char *v30;
  id v31;
  id v32;
  SEL v33;
  _BOOL8 v34;
  SEL v35;
  id v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  id Property;
  const char *v42;
  NSObject *v43;
  NSObject *v44;
  SEL v45;
  _QWORD *v46;
  const char *v47;
  NSObject *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  const char *v52;
  _QWORD block[4];
  NSObject *v54;
  uint8_t buf[4];
  const char *v56;
  __int16 v57;
  const __CFString *v58;
  __int16 v59;
  const __CFString *v60;
  __int16 v61;
  const __CFString *v62;

  if (a1)
  {
    if (objc_getProperty(a1, a2, 408, 1))
    {
      v4 = objc_msgSend(objc_getProperty(a1, v3, 408, 1), "count");
      v6 = ne_log_obj(v4, v5);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      v8 = v7;
      if (v4)
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v10 = a1[50] - 2;
          if (v10 > 3)
            v11 = CFSTR("Uninstalled");
          else
            v11 = off_1000BE938[v10];
          v16 = objc_msgSend(objc_getProperty(a1, v9, 360, 1), "objectAtIndexedSubscript:", 0);
          v17 = objc_claimAutoreleasedReturnValue(v16);
          v19 = (void *)v17;
          if (v17 && (v20 = *(_QWORD *)(v17 + 32) - 2, v20 <= 3))
            v21 = off_1000BE938[v20];
          else
            v21 = CFSTR("Uninstalled");
          v22 = objc_msgSend(objc_getProperty(a1, v18, 360, 1), "objectAtIndexedSubscript:", 1);
          v23 = objc_claimAutoreleasedReturnValue(v22);
          v24 = (void *)v23;
          if (v23 && (v25 = *(_QWORD *)(v23 + 32) - 2, v25 <= 3))
            v26 = off_1000BE938[v25];
          else
            v26 = CFSTR("Uninstalled");
          *(_DWORD *)buf = 138413058;
          v56 = (const char *)a1;
          v57 = 2112;
          v58 = v11;
          v59 = 2112;
          v60 = v21;
          v61 = 2112;
          v62 = v26;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@:Request uninstall, parent session(%@), primary session(%@), fallback session(%@)", buf, 0x2Au);

        }
        v28 = objc_msgSend(objc_getProperty(a1, v27, 408, 1), "objectAtIndexedSubscript:", 0);
        v29 = objc_claimAutoreleasedReturnValue(v28);
        v8 = v29;
        if (!v29 || *(_QWORD *)(v29 + 16) != 2)
        {
          v49 = ne_log_obj(v29, v30);
          v48 = objc_claimAutoreleasedReturnValue(v49);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            v52 = "bad operation request state";
            goto LABEL_43;
          }
LABEL_32:

          goto LABEL_33;
        }
        v31 = objc_msgSend(objc_getProperty(a1, v30, 360, 1), "objectAtIndexedSubscript:", 0);
        v32 = (id)objc_claimAutoreleasedReturnValue(v31);
        v34 = v32 == objc_getProperty(v8, v33, 24, 1);

        v36 = objc_msgSend(objc_getProperty(a1, v35, 360, 1), "objectAtIndexedSubscript:", v34);
        v37 = (_QWORD *)objc_claimAutoreleasedReturnValue(v36);
        if (v37)
        {
          v38 = v37[4];

          if ((unint64_t)(v38 - 3) < 3)
          {
            Property = objc_getProperty(v8, v40, 24, 1);
            if (Property)
              Property = objc_getProperty(Property, v42, 24, 1);
            v43 = objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "queue"));
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_100083FBC;
            block[3] = &unk_1000BEB80;
            v44 = v8;
            v54 = v44;
            dispatch_async(v43, block);

            v46 = objc_getProperty(v44, v45, 24, 1);
            if (v46)
              v46[4] = 1;
            objc_msgSend(objc_getProperty(a1, v47, 408, 1), "removeObject:", v44);
            v48 = v54;
            goto LABEL_32;
          }
          if (v38 != 2)
          {
            if (v38 != 1)
              goto LABEL_33;
            a1[50] = 2;
            v50 = objc_getProperty(v8, v40, 24, 1);
            if (v50)
              v50[4] = 2;
            v48 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
            -[NSObject requestUninstallForSession:](v48, "requestUninstallForSession:", a1);
            goto LABEL_32;
          }
          v51 = ne_log_obj(v39, v40);
          v48 = objc_claimAutoreleasedReturnValue(v51);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            v52 = "child sesssion is in requested uninstallation state";
LABEL_43:
            _os_log_fault_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_FAULT, v52, buf, 2u);
            goto LABEL_32;
          }
          goto LABEL_32;
        }
LABEL_33:

        return;
      }
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
        goto LABEL_33;
      *(_WORD *)buf = 0;
      v13 = "request uninstall configuration operation array is empty";
      v14 = v8;
      v15 = 2;
    }
    else
    {
      v12 = ne_log_obj(0, v3);
      v8 = objc_claimAutoreleasedReturnValue(v12);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
        goto LABEL_33;
      *(_DWORD *)buf = 136315138;
      v56 = "-[NESMIKEv2VPNFallbackSession requestUninstall]";
      v13 = "%s called with null self.configurationOperationArray";
      v14 = v8;
      v15 = 12;
    }
    _os_log_fault_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, v13, buf, v15);
    goto LABEL_33;
  }
}

void sub_100083FBC(uint64_t a1, const char *a2)
{
  id Property;
  const char *v3;
  id v4;

  Property = *(id *)(a1 + 32);
  if (Property && (Property = objc_getProperty(Property, a2, 24, 1)) != 0)
  {
    v4 = Property;
    Property = objc_getProperty(Property, v3, 24, 1);
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(Property, "uninstallOnQueue");

}

void sub_100084014(uint64_t a1, const char *a2)
{
  id Property;
  const char *v3;
  id v4;

  Property = *(id *)(a1 + 32);
  if (Property && (Property = objc_getProperty(Property, a2, 24, 1)) != 0)
  {
    v4 = Property;
    Property = objc_getProperty(Property, v3, 24, 1);
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(Property, "installPended");

}

void sub_10008406C(uint64_t a1, const char *a2)
{
  id Property;
  const char *v3;
  id v4;

  Property = *(id *)(a1 + 32);
  if (Property && (Property = objc_getProperty(Property, a2, 24, 1)) != 0)
  {
    v4 = Property;
    Property = objc_getProperty(Property, v3, 24, 1);
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(Property, "install");

}

void sub_1000840C4(uint64_t a1, const char *a2)
{
  id Property;
  const char *v3;
  id v4;

  Property = *(id *)(a1 + 32);
  if (Property && (Property = objc_getProperty(Property, a2, 24, 1)) != 0)
  {
    v4 = Property;
    Property = objc_getProperty(Property, v3, 24, 1);
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(Property, "installPended");

}

void sub_10008411C(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  const char *v5;
  id v6;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 40)));
  v6 = v4;
  if (v4)
    v4 = objc_getProperty(v4, v5, 24, 1);
  objc_msgSend(v4, "install");

}

void sub_100084180(uint64_t a1, const char *a2)
{
  id Property;
  const char *v3;
  id v4;

  Property = *(id *)(a1 + 32);
  if (Property && (Property = objc_getProperty(Property, a2, 24, 1)) != 0)
  {
    v4 = Property;
    Property = objc_getProperty(Property, v3, 24, 1);
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(Property, "install");

}

uint64_t sub_1000841D8(uint64_t result, int a2, uint64_t a3)
{
  unsigned int v3;
  void *v4;
  unsigned int v5;
  void *v6;
  unsigned int v7;
  void *v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;

  if (result)
  {
    v3 = a3;
    switch(a2)
    {
      case 0:
        v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
        v5 = objc_msgSend(&off_1000C15D0, "containsObject:", v4);

        if (v5)
          return v3;
        else
          return 0;
      case 1:
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
        v7 = objc_msgSend(&off_1000C1630, "containsObject:", v6);

        if (v7)
          return v3;
        else
          return 1;
      case 2:
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
        v9 = objc_msgSend(&off_1000C15E8, "containsObject:", v8);

        v10 = v9 == 0;
        v11 = 2;
        goto LABEL_15;
      case 3:
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
        v13 = objc_msgSend(&__NSArray0__struct, "containsObject:", v12);

        v10 = v13 == 0;
        v11 = 3;
        goto LABEL_15;
      case 4:
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
        v15 = objc_msgSend(&off_1000C1600, "containsObject:", v14);

        v10 = v15 == 0;
        v11 = 4;
        goto LABEL_15;
      case 5:
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
        v17 = objc_msgSend(&off_1000C1618, "containsObject:", v16);

        v10 = v17 == 0;
        v11 = 5;
LABEL_15:
        if (v10)
          result = v11;
        else
          result = v3;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

void sub_100084394(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  const char *v5;
  id v6;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v6 = v4;
  if (v4)
    v4 = objc_getProperty(v4, v5, 24, 1);
  objc_msgSend(v4, "handleNetworkDetectionNotification:", *(unsigned int *)(a1 + 40));

}

void sub_1000843FC(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  const char *v5;
  id v6;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 1));
  v6 = v4;
  if (v4)
    v4 = objc_getProperty(v4, v5, 24, 1);
  objc_msgSend(v4, "handleNetworkDetectionNotification:", *(unsigned int *)(a1 + 40));

}

void sub_100084464(_QWORD *a1, const char *a2)
{
  id Property;
  id v4;
  const char *v5;
  id v6;

  Property = (id)a1[4];
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v6 = v4;
  if (v4)
    v4 = objc_getProperty(v4, v5, 24, 1);
  objc_msgSend(v4, "handleChangeEventForInterface:newFlags:previousFlags:", a1[5], a1[6], a1[7]);

}

void sub_1000844D0(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  const char *v5;
  void *v6;
  const char *v7;
  id v8;
  id v9;
  const char *v10;
  void *v11;
  const char *v12;
  id v13;
  id v14;
  const char *v15;
  void *v16;
  const char *v17;
  id v18;
  id v19;
  const char *v20;
  id v21;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v6 = v4;
  if (v4)
    v4 = objc_getProperty(v4, v5, 24, 1);
  objc_msgSend(v4, "handleUpdateConfiguration:", 0);

  v8 = *(id *)(a1 + 32);
  if (v8)
    v8 = objc_getProperty(v8, v7, 360, 1);
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectAtIndexedSubscript:", 0));
  v11 = v9;
  if (v9)
    v9 = objc_getProperty(v9, v10, 24, 1);
  sub_10007BC60(v9);

  v13 = *(id *)(a1 + 32);
  if (v13)
    v13 = objc_getProperty(v13, v12, 360, 1);
  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectAtIndexedSubscript:", 0));
  v16 = v14;
  if (v14)
    v14 = objc_getProperty(v14, v15, 24, 1);
  sub_10007BD2C(v14);

  v18 = *(id *)(a1 + 32);
  if (v18)
    v18 = objc_getProperty(v18, v17, 360, 1);
  v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectAtIndexedSubscript:", 0));
  v21 = v19;
  if (v19)
    v19 = objc_getProperty(v19, v20, 24, 1);
  sub_10007BCCC(v19);

}

void sub_100084600(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  const char *v5;
  void *v6;
  const char *v7;
  id v8;
  id v9;
  const char *v10;
  void *v11;
  const char *v12;
  id v13;
  id v14;
  const char *v15;
  void *v16;
  const char *v17;
  id v18;
  id v19;
  const char *v20;
  id v21;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 1));
  v6 = v4;
  if (v4)
    v4 = objc_getProperty(v4, v5, 24, 1);
  objc_msgSend(v4, "handleUpdateConfiguration:", 0);

  v8 = *(id *)(a1 + 32);
  if (v8)
    v8 = objc_getProperty(v8, v7, 360, 1);
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectAtIndexedSubscript:", 1));
  v11 = v9;
  if (v9)
    v9 = objc_getProperty(v9, v10, 24, 1);
  sub_10007BC60(v9);

  v13 = *(id *)(a1 + 32);
  if (v13)
    v13 = objc_getProperty(v13, v12, 360, 1);
  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectAtIndexedSubscript:", 1));
  v16 = v14;
  if (v14)
    v14 = objc_getProperty(v14, v15, 24, 1);
  sub_10007BD2C(v14);

  v18 = *(id *)(a1 + 32);
  if (v18)
    v18 = objc_getProperty(v18, v17, 360, 1);
  v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectAtIndexedSubscript:", 1));
  v21 = v19;
  if (v19)
    v19 = objc_getProperty(v19, v20, 24, 1);
  sub_10007BCCC(v19);

}

void sub_100084730(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  const char *v6;
  id Property;
  id v8;
  const char *v9;
  void *v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "VPN"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "protocol"));
  v11 = objc_msgSend(v3, "copy");

  objc_msgSend(v11, "setTunnelKind:", 1);
  v4 = objc_msgSend(*(id *)(a1 + 32), "copy");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "VPN"));
  objc_msgSend(v5, "setProtocol:", v11);

  Property = *(id *)(a1 + 40);
  if (Property)
    Property = objc_getProperty(Property, v6, 360, 1);
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v10 = v8;
  if (v8)
    v8 = objc_getProperty(v8, v9, 24, 1);
  objc_msgSend(v8, "handleUpdateConfiguration:", v4);

}

void sub_100084808(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  const char *v6;
  id Property;
  id v8;
  const char *v9;
  void *v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "VPN"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "protocol"));
  v11 = objc_msgSend(v3, "copy");

  objc_msgSend(v11, "setTunnelKind:", 2);
  v4 = objc_msgSend(*(id *)(a1 + 32), "copy");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "VPN"));
  objc_msgSend(v5, "setProtocol:", v11);

  Property = *(id *)(a1 + 40);
  if (Property)
    Property = objc_getProperty(Property, v6, 360, 1);
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 1));
  v10 = v8;
  if (v8)
    v8 = objc_getProperty(v8, v9, 24, 1);
  objc_msgSend(v8, "handleUpdateConfiguration:", v4);

}

void sub_1000848E0(uint64_t a1, const char *a2)
{
  id Property;
  id v3;
  const char *v4;
  id v5;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v5 = v3;
  if (v3)
    v3 = objc_getProperty(v3, v4, 24, 1);
  objc_msgSend(v3, "handleUserSwitch");

}

void sub_100084938(uint64_t a1, const char *a2)
{
  id Property;
  id v3;
  const char *v4;
  id v5;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 1));
  v5 = v3;
  if (v3)
    v3 = objc_getProperty(v3, v4, 24, 1);
  objc_msgSend(v3, "handleUserSwitch");

}

void sub_100084990(uint64_t a1, const char *a2)
{
  id Property;
  id v3;
  const char *v4;
  id v5;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v5 = v3;
  if (v3)
    v3 = objc_getProperty(v3, v4, 24, 1);
  objc_msgSend(v3, "handleUserLogout");

}

void sub_1000849E8(uint64_t a1, const char *a2)
{
  id Property;
  id v3;
  const char *v4;
  id v5;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 1));
  v5 = v3;
  if (v3)
    v3 = objc_getProperty(v3, v4, 24, 1);
  objc_msgSend(v3, "handleUserLogout");

}

void sub_100084A40(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  const char *v5;
  id v6;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v6 = v4;
  if (v4)
    v4 = objc_getProperty(v4, v5, 24, 1);
  objc_msgSend(v4, "handleSleepTime:", *(double *)(a1 + 40));

}

void sub_100084AA8(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  const char *v5;
  id v6;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 1));
  v6 = v4;
  if (v4)
    v4 = objc_getProperty(v4, v5, 24, 1);
  objc_msgSend(v4, "handleSleepTime:", *(double *)(a1 + 40));

}

void sub_100084B10(uint64_t a1, const char *a2)
{
  id Property;
  id v3;
  const char *v4;
  id v5;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v5 = v3;
  if (v3)
    v3 = objc_getProperty(v3, v4, 24, 1);
  objc_msgSend(v3, "handleSleep");

}

void sub_100084B68(uint64_t a1, const char *a2)
{
  id Property;
  id v3;
  const char *v4;
  id v5;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 1));
  v5 = v3;
  if (v3)
    v3 = objc_getProperty(v3, v4, 24, 1);
  objc_msgSend(v3, "handleSleep");

}

void sub_100084BC0(uint64_t a1, const char *a2)
{
  id Property;
  id v3;
  const char *v4;
  id v5;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v5 = v3;
  if (v3)
    v3 = objc_getProperty(v3, v4, 24, 1);
  objc_msgSend(v3, "handleWakeup");

}

void sub_100084C18(uint64_t a1, const char *a2)
{
  id Property;
  id v3;
  const char *v4;
  id v5;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 1));
  v5 = v3;
  if (v3)
    v3 = objc_getProperty(v3, v4, 24, 1);
  objc_msgSend(v3, "handleWakeup");

}

void sub_100084C70(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  const char *v5;
  id v6;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v6 = v4;
  if (v4)
    v4 = objc_getProperty(v4, v5, 24, 1);
  objc_msgSend(v4, "handleStopMessageWithReason:", *(unsigned int *)(a1 + 40));

}

void sub_100084CD8(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  const char *v5;
  id v6;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 1));
  v6 = v4;
  if (v4)
    v4 = objc_getProperty(v4, v5, 24, 1);
  objc_msgSend(v4, "handleStopMessageWithReason:", *(unsigned int *)(a1 + 40));

}

void sub_100084D40(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  const char *v5;
  id v6;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v6 = v4;
  if (v4)
    v4 = objc_getProperty(v4, v5, 24, 1);
  objc_msgSend(v4, "handleStartMessage:", *(_QWORD *)(a1 + 40));

}

void sub_100084DA8(uint64_t a1, const char *a2)
{
  id Property;
  id v3;
  const char *v4;
  id v5;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v5 = v3;
  if (v3)
    v3 = objc_getProperty(v3, v4, 24, 1);
  objc_msgSend(v3, "handleInitializeState");

}

void sub_100084E00(uint64_t a1, const char *a2)
{
  id Property;
  id v3;
  const char *v4;
  id v5;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 1));
  v5 = v3;
  if (v3)
    v3 = objc_getProperty(v3, v4, 24, 1);
  objc_msgSend(v3, "handleInitializeState");

}

void sub_100084E58(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __CFString *v14;
  const char *v15;
  id Property;
  id v17;
  const char *v18;
  void *v19;
  id v20;
  const char *v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t ifstate;
  uint64_t flags;
  void *v35;
  id v36;
  id v37;
  id v38;
  NSObject *v39;
  id v40;
  uint64_t v41;
  id v42;
  NSObject *v43;
  void *v44;
  uint64_t v45;
  _QWORD v46[4];
  id v47;
  id v48;
  void *v49;
  _QWORD block[4];
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint8_t buf[4];
  const __CFString *v56;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "server"));
  if (v2 != v3)
  {

    return;
  }
  v4 = objc_msgSend(*(id *)(a1 + 48), "isEqualToString:", CFSTR("primaryCellularInterface"));

  if (v4)
  {
    v7 = ne_log_obj(v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "server"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "primaryCellularInterface"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "interfaceName"));
      if (v11)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "server"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "primaryCellularInterface"));
        v14 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "interfaceName"));
        *(_DWORD *)buf = 138412290;
        v56 = v14;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Primary cellular interface changed to %@", buf, 0xCu);

      }
      else
      {
        *(_DWORD *)buf = 138412290;
        v56 = CFSTR("none");
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Primary cellular interface changed to %@", buf, 0xCu);
      }

    }
    Property = *(id *)(a1 + 40);
    if (Property)
      Property = objc_getProperty(Property, v15, 360, 1);
    v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 1));
    v19 = v17;
    if (v17)
      v17 = objc_getProperty(v17, v18, 24, 1);
    v20 = v17;

    v22 = *(id *)(a1 + 40);
    if (v22)
      v22 = objc_getProperty(v22, v21, 384, 1);
    v23 = v22;
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "server"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "primaryCellularInterface"));

    v28 = nwi_state_copy(v26, v27);
    if (v28)
    {
      v30 = v28;
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "interfaceName"));

      if (v31
        && (v32 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "interfaceName"))),
            ifstate = nwi_state_get_ifstate(v30, objc_msgSend(v32, "UTF8String")),
            v32,
            ifstate))
      {
        flags = nwi_ifstate_get_flags(ifstate);
      }
      else
      {
        flags = 0;
      }
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "interfaceName"));
      if (v35)
      {
        v36 = objc_msgSend(v25, "interfaceIndex");
        v37 = objc_msgSend(v23, "interfaceIndex");

        if (v36 == v37)
        {
          v35 = 0;
        }
        else
        {
          v38 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "interfaceName")));
          v35 = (void *)nwi_state_get_ifstate(v30, objc_msgSend(v38, "UTF8String"));

          if (v35)
            v35 = (void *)nwi_ifstate_get_flags(v35);
        }
      }
      nwi_state_release(v30);
      if (!v23)
        goto LABEL_29;
    }
    else
    {
      flags = 0;
      v35 = 0;
      if (!v23)
      {
LABEL_29:
        if (v25)
        {
          v42 = objc_msgSend(v25, "interfaceIndex");
          if (v42 != objc_msgSend(v23, "interfaceIndex"))
          {
            v43 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "queue"));
            v46[0] = _NSConcreteStackBlock;
            v46[1] = 3221225472;
            v46[2] = sub_10008535C;
            v46[3] = &unk_1000BE850;
            v47 = v20;
            v48 = v25;
            v49 = v35;
            dispatch_async(v43, v46);

          }
        }
        v44 = *(void **)(a1 + 40);
        if (v44)
        {
          objc_setProperty_atomic(v44, v29, v25, 384);
          v45 = *(_QWORD *)(a1 + 40);
          if (v45)
          {
            *(_QWORD *)(v45 + 392) = v35;
            v44 = *(void **)(a1 + 40);
          }
          else
          {
            v44 = 0;
          }
        }
        sub_1000853A8((uint64_t *)v44, (uint64_t)v29);

        return;
      }
    }
    v39 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "queue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000852F8;
    block[3] = &unk_1000BE828;
    v51 = v20;
    v40 = v23;
    v41 = *(_QWORD *)(a1 + 40);
    v52 = v40;
    v53 = v41;
    v54 = flags;
    dispatch_async(v39, block);

    goto LABEL_29;
  }
}

void sub_1000852F8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "interfaceName"));
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    v5 = *(_QWORD *)(v4 + 392);
  else
    v5 = 0;
  v6 = (id)v3;
  objc_msgSend(v2, "handleChangeEventForInterface:newFlags:previousFlags:", v3, *(_QWORD *)(a1 + 56), v5);

}

void sub_10008535C(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "interfaceName"));
  objc_msgSend(v2, "handleChangeEventForInterface:newFlags:previousFlags:", v3, *(_QWORD *)(a1 + 48), 0);

}

void sub_1000853A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  id v6;
  id Property;
  const char *v8;
  void *v9;
  const char *v10;
  const char *v11;
  id v12;
  id v13;
  const char *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  SEL v20;
  id v21;
  id v22;
  const char *v23;
  void *v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  const char *v29;
  void *v30;
  id v31;
  const char *v32;
  id v33;
  id v34;
  void *v35;
  const char *v36;
  id v37;
  id v38;
  void *v39;
  SEL v40;
  id v41;
  SEL v42;
  int *v43;
  void *v44;
  int v45;
  uint64_t *v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  void *v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;

  if (!a1)
    return;
  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_msgSend(objc_getProperty(a1, v5, 360, 1), "objectAtIndexedSubscript:", 0);
    Property = (id)objc_claimAutoreleasedReturnValue(v6);
    v9 = Property;
    if (Property)
      Property = objc_getProperty(Property, v8, 40, 1);
    v10 = "NO";
    if (Property)
      v11 = "YES";
    else
      v11 = "NO";
    v12 = objc_msgSend(objc_getProperty(a1, v8, 360, 1), "objectAtIndexedSubscript:", 1);
    v13 = (id)objc_claimAutoreleasedReturnValue(v12);
    v15 = v13;
    if (v13)
      v13 = objc_getProperty(v13, v14, 40, 1);
    if (v13)
      v10 = "YES";
    v16 = objc_msgSend(objc_getProperty(a1, v14, 384, 1), "interfaceName");
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v18 = a1[46];
    v19 = a1[47];
    v45 = 138413570;
    v46 = a1;
    v47 = 2080;
    v48 = v11;
    v49 = 2080;
    v50 = v10;
    v51 = 2112;
    v52 = v17;
    v53 = 2048;
    v54 = v18;
    v55 = 2048;
    v56 = v19;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@ primary tunnel %s, fallback tunnel %s, cellular %@, predicted: %lu, advisory: %lu", (uint8_t *)&v45, 0x3Eu);

  }
  v21 = objc_msgSend(objc_getProperty(a1, v20, 360, 1), "objectAtIndexedSubscript:", 0);
  v22 = (id)objc_claimAutoreleasedReturnValue(v21);
  v24 = v22;
  if (v22)
    v22 = objc_getProperty(v22, v23, 40, 1);
  v25 = objc_msgSend(v22, "interfaceIndex");

  v27 = objc_msgSend(objc_getProperty(a1, v26, 360, 1), "objectAtIndexedSubscript:", 1);
  v28 = (id)objc_claimAutoreleasedReturnValue(v27);
  v30 = v28;
  if (v28)
    v28 = objc_getProperty(v28, v29, 40, 1);
  v31 = objc_msgSend(v28, "interfaceIndex");

  if (!v25)
    goto LABEL_37;
  if (v31)
  {
    v33 = (id)a1[46];
    if (!v33 || (v34 = (id)a1[47]) == 0 || v33 != v25 || v34 != v31)
    {
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
      sub_100052178(v35, (uint64_t)v31, (uint64_t)v25);

      a1[46] = (uint64_t)v25;
LABEL_30:
      v43 = &OBJC_IVAR___NESMIKEv2VPNFallbackSession__advisoryInterfaceIndex;
LABEL_34:
      *(uint64_t *)((char *)a1 + *v43) = (uint64_t)v31;
      return;
    }
    return;
  }
  if (!objc_getProperty(a1, v32, 384, 1))
  {
LABEL_37:
    if (a1[47] && a1[46])
    {
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
      v43 = &OBJC_IVAR___NESMIKEv2VPNFallbackSession__predicatedInterfaceIndex;
      sub_1000525A8(v44, a1[47], a1[46]);

      v31 = 0;
      a1[47] = 0;
      goto LABEL_34;
    }
    return;
  }
  v37 = (id)a1[46];
  if (!v37
    || (v38 = (id)a1[47]) == 0
    || v37 != v25
    || v38 != objc_msgSend(objc_getProperty(a1, v36, 384, 1), "interfaceIndex"))
  {
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
    v41 = objc_msgSend(objc_getProperty(a1, v40, 384, 1), "interfaceIndex");
    sub_100052178(v39, (uint64_t)v41, (uint64_t)v25);

    a1[46] = (uint64_t)v25;
    v31 = objc_msgSend(objc_getProperty(a1, v42, 384, 1), "interfaceIndex");
    goto LABEL_30;
  }
}

void sub_100085770(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  const char *v14;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 == (*(_BYTE *)(v3 + 352) & 1))
      return;
    *(_BYTE *)(v3 + 352) = v4;
  }
  else if (!*(_BYTE *)(a1 + 40))
  {
    return;
  }
  v5 = ne_log_obj(a1, a2);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = "not";
    if (v7 && (*(_BYTE *)(v7 + 352) & 1) != 0)
      v8 = "";
    v11 = 138412546;
    v12 = v7;
    v13 = 2080;
    v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%@ fallback is %s active", (uint8_t *)&v11, 0x16u);
  }

  v10 = *(_BYTE **)(a1 + 32);
  if (v10)
  {
    if ((v10[352] & 1) != 0)
      sub_100085898(v10, v9);
  }
}

void sub_100085898(id self, const char *a2)
{
  id v2;
  void *v3;
  id v5;
  uint64_t v6;
  const char *v7;
  char v8;
  _DWORD *v9;
  id v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  const char *v14;
  id v15;
  _DWORD *v16;
  int v17;
  id v18;
  id Property;
  const char *v20;
  void *v21;
  id v22;
  void *v23;
  unsigned __int8 v24;
  void *v25;
  unsigned __int8 v26;
  xpc_object_t v27;
  pid_t v28;
  SEL v29;
  id v30;
  id v31;
  const char *v32;
  void *v33;
  NSObject *v34;
  id v35;
  id v36;
  _QWORD block[5];
  id v38;

  if (self && (*((_BYTE *)self + 352) & 1) != 0)
  {
    v5 = objc_msgSend(objc_getProperty(self, a2, 360, 1), "objectAtIndexedSubscript:", 0);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v36 = (id)v6;
    if (v6 && *(_DWORD *)(v6 + 8) == 2)
    {
      v8 = 0;
    }
    else
    {
      v2 = objc_getProperty(self, v7, 360, 1);
      v9 = (_DWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectAtIndexedSubscript:", 0));
      v3 = v9;
      if (!v9 || v9[2] != 3)
      {

        return;
      }
      v8 = 1;
    }
    v10 = objc_msgSend(objc_getProperty(self, v7, 360, 1), "objectAtIndexedSubscript:", 1);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    v13 = (void *)v11;
    if (v11 && *(_DWORD *)(v11 + 8) == 1
      || (v15 = objc_msgSend(objc_getProperty(self, v12, 360, 1), "objectAtIndexedSubscript:", 1),
          (v16 = (_DWORD *)objc_claimAutoreleasedReturnValue(v15)) == 0))
    {

      if ((v8 & 1) != 0)
      {

      }
LABEL_18:
      v18 = objc_msgSend(objc_getProperty(self, v14, 360, 1), "objectAtIndexedSubscript:", 1);
      Property = (id)objc_claimAutoreleasedReturnValue(v18);
      v21 = Property;
      if (Property)
        Property = objc_getProperty(Property, v20, 24, 1);
      v22 = Property;

      if (sub_100076E38(self))
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "matchedRule"));
        if (objc_msgSend(v23, "action") == (id)2)
        {
          v24 = sub_100076E38(self);

          if ((v24 & 1) != 0)
          {
LABEL_34:

            return;
          }
        }
        else
        {
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "matchedRule"));
          if (objc_msgSend(v25, "action") == (id)4)
          {
            v26 = sub_100076E38(self);

            if ((v26 & 1) != 0)
              goto LABEL_34;
          }
          else
          {

          }
        }
      }
      else if ((sub_100076E38(self) & 1) != 0)
      {
        goto LABEL_34;
      }
      v27 = xpc_dictionary_create(0, 0, 0);
      v28 = getpid();
      xpc_dictionary_set_int64(v27, "SessionPID", v28);
      v30 = objc_msgSend(objc_getProperty(self, v29, 360, 1), "objectAtIndexedSubscript:", 1);
      v31 = (id)objc_claimAutoreleasedReturnValue(v30);
      v33 = v31;
      if (v31)
        v31 = objc_getProperty(v31, v32, 24, 1);
      v34 = objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "queue"));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100085BB8;
      block[3] = &unk_1000BEB58;
      block[4] = self;
      v38 = v27;
      v35 = v27;
      dispatch_async(v34, block);

      goto LABEL_34;
    }
    v17 = v16[2];

    if ((v8 & 1) != 0)
    {

    }
    if (!v17)
      goto LABEL_18;
  }
}

void sub_100085BB8(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  const char *v5;
  id v6;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 1));
  v6 = v4;
  if (v4)
    v4 = objc_getProperty(v4, v5, 24, 1);
  objc_msgSend(v4, "startWithCommand:isOnDemand:", *(_QWORD *)(a1 + 40), 0);

}

id sub_100085C24(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, uint64_t a8)
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  NESMIKEv2VPNSession *v21;
  id v22;
  const char *v23;
  SEL v24;
  const char *v25;
  __CFString *v26;
  objc_super v28;
  objc_super v29;

  if (!a1)
    return 0;
  v28.receiver = a1;
  v28.super_class = (Class)NEIKEv2FallbackChildSession;
  v14 = a7;
  v15 = a6;
  v16 = a5;
  v17 = a4;
  v18 = a3;
  v19 = a2;
  v20 = objc_msgSendSuper2(&v28, "init");
  v21 = [NESMIKEv2VPNSession alloc];
  if (v21)
  {
    v29.receiver = v21;
    v29.super_class = (Class)NESMIKEv2VPNSession;
    v22 = objc_msgSendSuper2(&v29, "initWithConfiguration:andServer:andProtocol:andPluginType:andSessionType:sessionQueue:messageQueue:tunnelKind:parent:", v18, v17, v16, CFSTR("com.apple.NetworkExtension.IKEv2Provider"), 1, v15, v14, a8, v19);
  }
  else
  {
    v22 = 0;
  }

  if (v20)
  {
    objc_setProperty_atomic(v20, v23, v22, 24);

    *((_QWORD *)v20 + 4) = 1;
    *((_DWORD *)v20 + 2) = 0;
    objc_setProperty_atomic(v20, v24, 0, 40);
    if (a8 == 1)
      v26 = CFSTR("Primary Tunnel");
    else
      v26 = CFSTR("Fallback Tunnel");
    objc_setProperty_atomic(v20, v25, v26, 16);
  }
  else
  {

  }
  return v20;
}

_QWORD *sub_100085DB8(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  id v13;
  SEL v14;
  id v15;
  id v16;
  void *v17;
  NEIKEv2FallbackChildSession *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  void *v26;
  NEIKEv2FallbackChildSession *v27;
  void *v28;
  void *v29;
  id v30;
  SEL v31;
  void *v32;
  void *v33;
  SEL v34;
  SEL v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t ifstate;
  void *v46;
  id v47;
  SEL v48;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  objc_super v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  const char *v59;
  __int16 v60;
  id v61;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    v55.receiver = a1;
    v55.super_class = (Class)NESMIKEv2VPNFallbackSession;
    v10 = objc_msgSendSuper2(&v55, "initWithConfiguration:andServer:", v7, v8);
    a1 = v10;
    if (v10)
    {
      v50 = v8;
      v11 = ne_log_large_obj(v10);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412802;
        v57 = a1;
        v58 = 2080;
        v59 = "-[NESMIKEv2VPNFallbackSession initWithConfiguration:andServer:andProtocol:andSessionType:]";
        v60 = 2112;
        v61 = v7;
        _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%@:%s: Configuration %@", buf, 0x20u);
      }

      NEInitCFTypes();
      v13 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 2);
      objc_setProperty_atomic(a1, v14, v13, 360);

      v15 = objc_msgSend(v9, "copy");
      objc_msgSend(v15, "setTunnelKind:", 1);
      v16 = objc_msgSend(v7, "copy");
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "VPN"));
      objc_msgSend(v17, "setProtocol:", v15);

      v18 = [NEIKEv2FallbackChildSession alloc];
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "messageQueue"));
      v53 = v16;
      v51 = v15;
      v21 = v15;
      v8 = v50;
      v22 = sub_100085C24(v18, a1, v16, v50, v21, v19, v20, 1);

      v52 = v22;
      objc_msgSend(objc_getProperty(a1, v23, 360, 1), "addObject:", v22);
      v54 = v9;
      v24 = objc_msgSend(v9, "copy");
      objc_msgSend(v24, "setTunnelKind:", 2);
      v25 = objc_msgSend(v7, "copy");
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "VPN"));
      objc_msgSend(v26, "setProtocol:", v24);

      v27 = [NEIKEv2FallbackChildSession alloc];
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "messageQueue"));
      v30 = sub_100085C24(v27, a1, v25, v50, v24, v28, v29, 2);

      objc_msgSend(objc_getProperty(a1, v31, 360, 1), "addObject:", v30);
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server"));
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "primaryCellularInterface"));
      objc_setProperty_atomic(a1, v34, v33, 384);

      a1[49] = 0;
      v36 = objc_msgSend(objc_getProperty(a1, v35, 384, 1), "interfaceName");
      v37 = (void *)objc_claimAutoreleasedReturnValue(v36);

      if (v37)
      {
        v40 = nwi_state_copy(v38, v39);
        if (v40)
        {
          v42 = v40;
          v43 = objc_msgSend(objc_getProperty(a1, v41, 384, 1), "interfaceName");
          v44 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v43));
          ifstate = nwi_state_get_ifstate(v42, objc_msgSend(v44, "UTF8String"));

          if (ifstate)
            a1[49] = nwi_ifstate_get_flags(ifstate);
          nwi_state_release(v42);
        }
      }
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "server", v50));
      objc_msgSend(v46, "addObserver:forKeyPath:options:context:", a1, CFSTR("primaryCellularInterface"), 5, 0);

      a1[46] = 0;
      a1[47] = 0;
      a1[50] = 1;
      v47 = objc_alloc_init((Class)NSMutableArray);
      objc_setProperty_atomic(a1, v48, v47, 408);

      v9 = v54;
    }
  }

  return a1;
}

void sub_100086214(void *a1)
{
  NSObject *v2;
  _QWORD block[5];

  if (a1)
  {
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100086284;
    block[3] = &unk_1000BEB80;
    block[4] = a1;
    dispatch_async(v2, block);

  }
}

void sub_100086284(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  const char *v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
  {
    v2 = 0;
LABEL_6:
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "server"));
    sub_1000517BC(v4, v3);

    return;
  }
  --*(_DWORD *)(v1 + 356);
  v2 = *(_DWORD **)(a1 + 32);
  if (!v2 || !v2[89])
    goto LABEL_6;
}

void sub_1000862F0(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  void *v5;
  const char *v6;
  void *v7;
  id v8;
  const char *v9;
  id v10;
  id v11;
  void *v12;
  const char *v13;
  void *v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  const char *v18;
  id v19;
  const char *v20;
  void *v21;
  id v22;
  id v23;
  const char *v24;
  void *v25;
  NSObject *v26;
  id v27;
  _QWORD block[5];
  id v29;
  uint64_t v30;

  v4 = *(id *)(a1 + 32);
  Property = *(id *)(a1 + 40);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v7 = v5;
  if (v5)
    v8 = objc_getProperty(v5, v6, 24, 1);
  else
    v8 = 0;

  if (v4 == v8)
    __assert_rtn("-[NESMIKEv2VPNFallbackSession prepareNetwork:]_block_invoke", "NESMIKEv2VPNFallbackSession.m", 581, "0");
  v11 = *(id *)(a1 + 32);
  v10 = *(id *)(a1 + 40);
  if (v10)
    v10 = objc_getProperty(v10, v9, 360, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndexedSubscript:", 1));
  v14 = v12;
  if (v12)
    v15 = objc_getProperty(v12, v13, 24, 1);
  else
    v15 = 0;

  if (v11 == v15)
  {
    v16 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "server"));
    if (v16)
      v17 = v16[7];
    else
      v17 = 0;

    v19 = *(id *)(a1 + 40);
    if (v19)
      v19 = objc_getProperty(v19, v18, 384, 1);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "interfaceName"));
    v22 = *(id *)(a1 + 40);
    if (v22)
      v22 = objc_getProperty(v22, v20, 360, 1);
    v23 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectAtIndexedSubscript:", 1));
    v25 = v23;
    if (v23)
      v23 = objc_getProperty(v23, v24, 24, 1);
    v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "queue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000864D0;
    block[3] = &unk_1000BE850;
    block[4] = *(_QWORD *)(a1 + 40);
    v29 = v21;
    v30 = v17;
    v27 = v21;
    dispatch_async(v26, block);

  }
}

void sub_1000864D0(_QWORD *a1, const char *a2)
{
  id Property;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  id v11;
  id v12;
  const char *v13;
  uint64_t v14;
  id v15;
  const char *v16;
  id v17;
  id v18;
  const char *v19;
  const char *v20;
  void *v21;
  id v22;
  void *v23;
  const char *v24;
  void *v25;
  id v26;
  id v27;

  v5 = a1 + 4;
  Property = (id)a1[4];
  v4 = v5[1];
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 1));
  v8 = v6;
  if (v6)
    v6 = objc_getProperty(v6, v7, 24, 1);
  objc_msgSend(v6, "setInterfaceName:", v4);

  v10 = a1[6];
  if ((v10 | 2) != 3 || !a1[5])
  {
    v15 = (id)a1[4];
    if (v15)
      v15 = objc_getProperty(v15, v9, 360, 1);
    v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectAtIndexedSubscript:", 1));
    v27 = v12;
    if (v12)
      v12 = objc_getProperty(v12, v16, 24, 1);
    v14 = 0;
    goto LABEL_19;
  }
  if (v10 == 3)
  {
    v17 = (id)a1[4];
    if (v17)
      v17 = objc_getProperty(v17, v9, 360, 1);
    v18 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectAtIndexedSubscript:", 1));
    v27 = v18;
    if (v18)
      v18 = objc_getProperty(v18, v19, 24, 1);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "server"));
    v22 = (id)a1[4];
    if (v22)
      v22 = objc_getProperty(v22, v20, 360, 1);
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectAtIndexedSubscript:", 1));
    v25 = v23;
    if (v23)
      v26 = objc_getProperty(v23, v24, 24, 1);
    else
      v26 = 0;
    objc_msgSend(v21, "satisfyCellularPathForSession:", v26);

    goto LABEL_20;
  }
  if (v10 == 1)
  {
    v11 = (id)a1[4];
    if (v11)
      v11 = objc_getProperty(v11, v9, 360, 1);
    v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", 1));
    v27 = v12;
    if (v12)
      v12 = objc_getProperty(v12, v13, 24, 1);
    v14 = a1[5];
LABEL_19:
    objc_msgSend(v12, "handleNetworkPrepareResult:", v14);
LABEL_20:

  }
}

id sub_100086694(uint64_t a1, const char *a2)
{
  id Property;
  void *v4;
  const char *v5;
  void *v6;
  id v7;
  id v8;
  const char *v9;
  int v10;
  id v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  const char *v19;
  id v20;
  id v21;
  void *v22;
  const char *v23;
  void *v24;
  id v25;
  const char *v26;
  id v27;
  void *v28;
  const char *v29;
  void *v30;
  id v31;
  __CFString *v32;
  __CFString *v33;
  uint64_t v34;
  unsigned int v35;
  id result;
  int v37;
  void *v38;
  __int16 v39;
  __CFString *v40;
  __int16 v41;
  uint64_t v42;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v6 = v4;
  if (v4)
    v7 = objc_getProperty(v4, v5, 24, 1);
  else
    v7 = 0;
  v8 = *(id *)(a1 + 40);

  v10 = *(_DWORD *)(a1 + 48);
  v11 = *(id *)(a1 + 32);
  if (v7 == v8)
  {
    if (v11)
      v11 = objc_getProperty(v11, v9, 360, 1);
    v12 = 0;
  }
  else
  {
    if (v11)
      v11 = objc_getProperty(v11, v9, 360, 1);
    v12 = 1;
  }
  v13 = (_DWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", v12));
  if (v13)
    v13[2] = v10;

  v16 = ne_log_obj(v14, v15);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    v18 = *(void **)(a1 + 32);
    v20 = *(id *)(a1 + 40);
    if (v18)
    {
      v21 = objc_msgSend(objc_getProperty(v18, v19, 360, 1), "objectAtIndexedSubscript:", 0);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v24 = v22;
      if (v22)
        v25 = objc_getProperty(v22, v23, 24, 1);
      else
        v25 = 0;

      if (v25 == v20)
      {
        v32 = CFSTR("Primary Tunnel");
      }
      else
      {
        v27 = objc_msgSend(objc_getProperty(v18, v26, 360, 1), "objectAtIndexedSubscript:", 1);
        v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
        v30 = v28;
        if (v28)
          v31 = objc_getProperty(v28, v29, 24, 1);
        else
          v31 = 0;

        if (v31 == v20)
          v32 = CFSTR("Fallback Tunnel");
        else
          v32 = &stru_1000BF2E8;
      }
    }
    else
    {
      v32 = 0;
    }

    v33 = v32;
    v34 = ne_session_status_to_string(*(unsigned int *)(a1 + 48));
    v37 = 138412802;
    v38 = v18;
    v39 = 2112;
    v40 = v33;
    v41 = 2080;
    v42 = v34;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%@[%@]: VPN Status to Parent: %s", (uint8_t *)&v37, 0x20u);

  }
  v35 = objc_msgSend(*(id *)(a1 + 32), "status");
  objc_msgSend(*(id *)(a1 + 32), "setStatus:", *(unsigned int *)(a1 + 48));
  result = objc_msgSend(*(id *)(a1 + 32), "status");
  if ((_DWORD)result == v35)
    return objc_msgSend(*(id *)(a1 + 32), "notifyChangedExtendedStatus");
  return result;
}

void sub_100086918(uint64_t a1, const char *a2)
{
  id Property;
  void *v4;
  const char *v5;
  void *v6;
  id v7;
  id v8;
  const char *v9;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v6 = v4;
  if (v4)
    v7 = objc_getProperty(v4, v5, 24, 1);
  else
    v7 = 0;
  v8 = *(id *)(a1 + 40);

  if (v7 == v8)
    sub_100085898(*(id *)(a1 + 32), v9);
}

void sub_1000869A8(uint64_t a1, const char *a2)
{
  id Property;
  void *v4;
  const char *v5;
  void *v6;
  id v7;
  id v8;
  const char *v9;
  id v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v6 = v4;
  if (v4)
    v7 = objc_getProperty(v4, v5, 24, 1);
  else
    v7 = 0;
  v8 = *(id *)(a1 + 40);

  v10 = *(id *)(a1 + 32);
  if (v7 == v8)
  {
    if (v10)
      v10 = objc_getProperty(v10, v9, 360, 1);
    v11 = 1;
  }
  else
  {
    if (v10)
      v10 = objc_getProperty(v10, v9, 360, 1);
    v11 = 0;
  }
  v12 = (_DWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndexedSubscript:", v11));
  if (!v12 || (v13 = v12[2], v12, v13 <= 5) && ((1 << v13) & 0x23) != 0)
    objc_msgSend(*(id *)(a1 + 32), "setLastStopReason:", *(unsigned int *)(a1 + 48));
}

void sub_100086AAC(uint64_t a1, const char *a2)
{
  id Property;
  void *v4;
  const char *v5;
  void *v6;
  id v7;
  id v8;
  const char *v9;
  id v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v6 = v4;
  if (v4)
    v7 = objc_getProperty(v4, v5, 24, 1);
  else
    v7 = 0;
  v8 = *(id *)(a1 + 40);

  v10 = *(id *)(a1 + 32);
  if (v7 == v8)
  {
    if (v10)
      v10 = objc_getProperty(v10, v9, 360, 1);
    v11 = 1;
  }
  else
  {
    if (v10)
      v10 = objc_getProperty(v10, v9, 360, 1);
    v11 = 0;
  }
  v12 = (_DWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndexedSubscript:", v11));
  if (!v12 || (v13 = v12[2], v12, v13 <= 5) && ((1 << v13) & 0x23) != 0)
    objc_msgSend(*(id *)(a1 + 32), "setLastDisconnectError:", *(_QWORD *)(a1 + 48));
}

void sub_100086BB0(uint64_t a1)
{
  NEIKEv2FallbackConfigurationOperation *v2;
  const char *v3;
  NEIKEv2FallbackConfigurationOperation *v4;
  id Property;
  void *v6;
  const char *v7;
  void *v8;
  id v9;
  id v10;
  const char *v11;
  id v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  const char *v16;
  id v17;
  const char *v18;
  id v19;
  id v20;
  const char *v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  id v25;
  int v26;
  id v27;

  v2 = objc_alloc_init(NEIKEv2FallbackConfigurationOperation);
  v4 = v2;
  if (v2)
  {
    v2->_requestState = 3;
    v2->_exclusive = *(_BYTE *)(a1 + 48);
  }
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v3, 360, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v8 = v6;
  if (v6)
    v9 = objc_getProperty(v6, v7, 24, 1);
  else
    v9 = 0;
  v10 = *(id *)(a1 + 40);

  v12 = *(id *)(a1 + 32);
  if (v9 == v10)
  {
    if (v12)
      v12 = objc_getProperty(v12, v11, 360, 1);
    v13 = 0;
  }
  else
  {
    if (v12)
      v12 = objc_getProperty(v12, v11, 360, 1);
    v13 = 1;
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", v13));
  if (v4)
    objc_setProperty_atomic(v4, v14, v15, 24);

  v17 = *(id *)(a1 + 32);
  if (v17)
    v17 = objc_getProperty(v17, v16, 408, 1);
  objc_msgSend(v17, "addObject:", v4);
  v19 = *(id *)(a1 + 32);
  if (v19)
    v19 = objc_getProperty(v19, v18, 408, 1);
  v20 = objc_msgSend(v19, "count");
  if (v20 == (id)1)
  {
    sub_10008363C(*(_QWORD **)(a1 + 32), v21);
  }
  else
  {
    v22 = ne_log_obj(v20, v21);
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      v25 = *(id *)(a1 + 32);
      if (v25)
        v25 = objc_getProperty(v25, v24, 408, 1);
      v26 = 134217984;
      v27 = objc_msgSend(v25, "count");
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "queuing request to install, operations count - %lu", (uint8_t *)&v26, 0xCu);
    }

  }
}

void sub_100086D98(uint64_t a1, char a2)
{
  NSObject *v4;
  void *v5;
  _QWORD block[5];
  id v7;
  id v8;
  id v9;
  char v10;

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100086E64;
  block[3] = &unk_1000BE8F0;
  v10 = a2;
  v5 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v7 = v5;
  v8 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  dispatch_async(v4, block);

}

id sub_100086E58(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleStartMessage:", *(_QWORD *)(a1 + 40));
}

void sub_100086E64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  void **v15;
  uint64_t v16;
  id (*v17)(uint64_t);
  void *v18;
  id v19;
  id v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  if (*(_BYTE *)(a1 + 64))
  {
    v3 = kdebug_trace(726990904, 0, 0, 0, 0);
    v5 = ne_log_obj(v3, v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@: Successfully registered", buf, 0xCu);
    }

    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "queue"));
    v15 = _NSConcreteStackBlock;
    v16 = 3221225472;
    v17 = sub_10008702C;
    v18 = &unk_1000BEB58;
    v19 = *(id *)(a1 + 48);
    v20 = *(id *)(a1 + 56);
    dispatch_async(v8, &v15);

  }
  else
  {
    v9 = ne_log_obj(a1, a2);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      v22 = v11;
      v23 = 2112;
      v24 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@: Rejected start command from %@", buf, 0x16u);
    }

    sub_100092BAC(*(void **)(a1 + 40), v13);
    objc_msgSend(*(id *)(a1 + 32), "removeAllClients");
  }
  v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "messageQueue", v15, v16, v17, v18));
  dispatch_resume(v14);

}

id sub_10008702C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleStartMessage:", *(_QWORD *)(a1 + 40));
}

void sub_100087038(uint64_t a1)
{
  NEIKEv2FallbackConfigurationOperation *v2;
  const char *v3;
  NEIKEv2FallbackConfigurationOperation *v4;
  id Property;
  void *v6;
  const char *v7;
  void *v8;
  id v9;
  id v10;
  const char *v11;
  id v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  const char *v16;
  id v17;
  const char *v18;
  id v19;
  id v20;
  const char *v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  id v25;
  int v26;
  id v27;

  v2 = objc_alloc_init(NEIKEv2FallbackConfigurationOperation);
  v4 = v2;
  if (v2)
    v2->_requestState = 2;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v3, 360, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v8 = v6;
  if (v6)
    v9 = objc_getProperty(v6, v7, 24, 1);
  else
    v9 = 0;
  v10 = *(id *)(a1 + 40);

  v12 = *(id *)(a1 + 32);
  if (v9 == v10)
  {
    if (v12)
      v12 = objc_getProperty(v12, v11, 360, 1);
    v13 = 0;
  }
  else
  {
    if (v12)
      v12 = objc_getProperty(v12, v11, 360, 1);
    v13 = 1;
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", v13));
  if (v4)
    objc_setProperty_atomic(v4, v14, v15, 24);

  v17 = *(id *)(a1 + 32);
  if (v17)
    v17 = objc_getProperty(v17, v16, 408, 1);
  objc_msgSend(v17, "addObject:", v4);
  v19 = *(id *)(a1 + 32);
  if (v19)
    v19 = objc_getProperty(v19, v18, 408, 1);
  v20 = objc_msgSend(v19, "count");
  if (v20 == (id)1)
  {
    sub_100083B2C(*(_QWORD **)(a1 + 32), v21);
  }
  else
  {
    v22 = ne_log_obj(v20, v21);
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      v25 = *(id *)(a1 + 32);
      if (v25)
        v25 = objc_getProperty(v25, v24, 408, 1);
      v26 = 134217984;
      v27 = objc_msgSend(v25, "count");
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "queuing request to uninstall, operations count - %lu", (uint8_t *)&v26, 0xCu);
    }

  }
}

void sub_100087218(uint64_t a1)
{
  const char *v2;
  id Property;
  void *v4;
  const char *v5;
  void *v6;
  id v7;
  id v8;
  const char *v9;
  id v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  uint64_t v15;
  id newValue;

  newValue = objc_msgSend(objc_alloc((Class)NWInterface), "initWithInterfaceName:", *(_QWORD *)(a1 + 32));
  Property = *(id *)(a1 + 40);
  if (Property)
    Property = objc_getProperty(Property, v2, 360, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v6 = v4;
  if (v4)
    v7 = objc_getProperty(v4, v5, 24, 1);
  else
    v7 = 0;
  v8 = *(id *)(a1 + 48);

  v10 = *(id *)(a1 + 40);
  if (v7 == v8)
  {
    if (v10)
      v10 = objc_getProperty(v10, v9, 360, 1);
    v11 = 0;
  }
  else
  {
    if (v10)
      v10 = objc_getProperty(v10, v9, 360, 1);
    v11 = 1;
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndexedSubscript:", v11));
  v14 = v12;
  if (v12)
    objc_setProperty_atomic(v12, v13, newValue, 40);

  sub_1000853A8(*(uint64_t **)(a1 + 40), v15);
}

void sub_10008731C(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD v9[5];
  id v10;
  uint8_t buf[4];
  const char *v12;

  v3 = a2;
  v5 = v3;
  if (a1)
  {
    if (v3)
    {
      v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_100087448;
      v9[3] = &unk_1000BEB58;
      v9[4] = a1;
      v10 = v5;
      dispatch_async(v6, v9);

    }
    else
    {
      v7 = ne_log_obj(0, v4);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v12 = "-[NESMIKEv2VPNFallbackSession handleClearConfigurationResult:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "%s called with null session", buf, 0xCu);
      }

    }
  }

}

void sub_100087448(uint64_t a1, const char *a2)
{
  id Property;
  id v4;
  const char *v5;
  void *v6;
  id v7;
  const char *v8;
  void *v9;
  const char *v10;
  id v11;
  void *v12;
  const char *v13;
  void *v14;
  id v15;
  const char *v16;
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  const char *v21;
  void *v22;
  id v23;
  void *v24;
  const char *v25;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 360, 1);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectAtIndexedSubscript:", 0));
  v6 = v4;
  if (v4)
    v4 = objc_getProperty(v4, v5, 24, 1);
  v7 = v4;
  v9 = v7;
  if (v7 == *(id *)(a1 + 40))
  {
    v19 = *(id *)(a1 + 32);
    if (v19)
      v19 = objc_getProperty(v19, v8, 360, 1);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectAtIndexedSubscript:", 0));
    v22 = v20;
    if (v20)
      v23 = objc_getProperty(v20, v21, 40, 1);
    else
      v23 = 0;

    if (v23)
    {
      v17 = *(id *)(a1 + 32);
      if (v17)
        v17 = objc_getProperty(v17, v10, 360, 1);
      v18 = 0;
      goto LABEL_22;
    }
  }
  else
  {

  }
  v11 = *(id *)(a1 + 32);
  if (v11)
    v11 = objc_getProperty(v11, v10, 360, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", 1));
  v14 = v12;
  if (!v12)
    goto LABEL_24;
  v15 = objc_getProperty(v12, v13, 40, 1);

  if (v15)
  {
    v17 = *(id *)(a1 + 32);
    if (v17)
      v17 = objc_getProperty(v17, v16, 360, 1);
    v18 = 1;
LABEL_22:
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectAtIndexedSubscript:", v18));
    v14 = v24;
    if (v24)
      objc_setProperty_atomic(v24, v25, 0, 40);
LABEL_24:

  }
  sub_1000853A8(*(uint64_t **)(a1 + 32), (uint64_t)v16);
}

void sub_100087604(time_t *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  time_t v5;
  SEL v6;
  const char *v7;
  NSObject *Property;
  SEL v9;
  const char *v10;
  time_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  time_t v15;
  void (**v16)(void);
  SEL v17;
  int v18;
  time_t v19;

  if (a1)
  {
    v3 = ne_log_obj(a1, a2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = a1[5];
      if (v5 == -1)
        v5 = 0;
      v18 = 134217984;
      v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Ready to sleep, sleepDate %lld", (uint8_t *)&v18, 0xCu);
    }

    if (objc_getProperty(a1, v6, 56, 1))
    {
      Property = objc_getProperty(a1, v7, 56, 1);
      dispatch_source_cancel(Property);
      objc_setProperty_atomic(a1, v9, 0, 56);
    }
    if (objc_getProperty(a1, v7, 32, 1))
    {
      if (a1[5] == -1)
      {
        v11 = time(a1 + 5);
        v13 = ne_log_obj(v11, v12);
        v14 = objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          v15 = a1[5];
          v18 = 134217984;
          v19 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Enter sleep state after full wake, %ld", (uint8_t *)&v18, 0xCu);
        }

      }
      v16 = (void (**)(void))objc_getProperty(a1, v10, 32, 1);
      v16[2]();
      objc_setProperty_atomic_copy(a1, v17, 0, 32);
    }
  }
}

void sub_10008779C(void *a1, uint64_t a2, int a3, void *a4)
{
  id *v6;
  const char *v7;
  id *v8;
  const char *v9;
  id WeakRetained;
  unsigned int v11;
  io_connect_t v12;
  io_connect_t v13;
  _QWORD newValue[4];
  id v15[2];
  id location;

  v6 = a1;
  v8 = v6;
  if (a3 > -536870145)
  {
    if (a3 == -536870144)
    {
      sub_100087998((uint64_t)v6, 2);
    }
    else if (a3 == -536870112 && v6)
    {
      objc_setProperty_atomic_copy(v6, v7, 0, 32);
    }
  }
  else if (a3 == -536870288)
  {
    if (v6)
      WeakRetained = objc_loadWeakRetained(v6 + 3);
    else
      WeakRetained = 0;
    v11 = objc_msgSend(WeakRetained, "canSleep");

    if (v11)
    {
      if (v8)
        v12 = *((_DWORD *)v8 + 2);
      else
        v12 = 0;
      IOAllowPowerChange(v12, (intptr_t)a4);
    }
    else
    {
      if (v8)
        v13 = *((_DWORD *)v8 + 2);
      else
        v13 = 0;
      IOCancelPowerChange(v13, (intptr_t)a4);
    }
  }
  else if (a3 == -536870272)
  {
    objc_initWeak(&location, v6);
    newValue[0] = _NSConcreteStackBlock;
    newValue[1] = 3221225472;
    newValue[2] = sub_100087954;
    newValue[3] = &unk_1000BE960;
    objc_copyWeak(v15, &location);
    v15[1] = a4;
    if (v8)
      objc_setProperty_atomic_copy(v8, v9, newValue, 32);
    sub_100087998((uint64_t)v8, 1);
    objc_destroyWeak(v15);
    objc_destroyWeak(&location);
  }

}

void sub_100087934(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100087954(uint64_t a1)
{
  io_connect_t *WeakRetained;
  io_connect_t *v3;

  WeakRetained = (io_connect_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    IOAllowPowerChange(WeakRetained[2], *(_QWORD *)(a1 + 40));
    WeakRetained = v3;
  }

}

void sub_100087998(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id WeakRetained;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  const char *v11;
  id Property;
  uint64_t v13;
  void *v14;
  SEL v15;
  time_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  _QWORD v22[5];
  uint8_t buf[4];
  _QWORD v24[2];

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    v7 = WeakRetained;
    if (v4 != a2)
    {
      v8 = ne_log_obj(WeakRetained, v6);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109376;
        LODWORD(v24[0]) = v4;
        WORD2(v24[0]) = 1024;
        *(_DWORD *)((char *)v24 + 6) = a2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Setting power state from %d to %d", buf, 0xEu);
      }

      *(_QWORD *)(a1 + 16) = a2;
      if (a2 == 1)
      {
        if ((objc_msgSend(v7, "handleSleep") & 1) != 0)
        {
          if (!objc_getProperty((id)a1, v10, 56, 1))
          {
            Property = objc_getProperty((id)a1, v11, 48, 1);
            v22[0] = _NSConcreteStackBlock;
            v22[1] = 3221225472;
            v22[2] = sub_100087BBC;
            v22[3] = &unk_1000BEB80;
            v22[4] = a1;
            v13 = NECreateTimerSource(Property, 10, v22);
            v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
            objc_setProperty_atomic((id)a1, v15, v14, 56);

          }
        }
        else
        {
          sub_100087604((time_t *)a1, (uint64_t)v10);
        }
      }
      else
      {
        if (*(_QWORD *)(a1 + 40) != -1)
        {
          v16 = time(0);
          v17 = difftime(v16, *(_QWORD *)(a1 + 40));
          v20 = ne_log_obj(v18, v19);
          v21 = objc_claimAutoreleasedReturnValue(v20);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134217984;
            *(double *)v24 = v17;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "System slept for %f seconds (including dark wake time during sleep)", buf, 0xCu);
          }

          *(_QWORD *)(a1 + 40) = -1;
          objc_msgSend(v7, "handleSleepTime:", v17);
        }
        if (v4 == 1)
          objc_msgSend(v7, "handleWakeup");
      }
    }

  }
}

void sub_100087BBC(uint64_t a1, uint64_t a2)
{
  sub_100087604(*(time_t **)(a1 + 32), a2);
}

id *sub_100087ED0(id *result, const char *a2)
{
  id *v2;
  const char *v3;
  SEL v4;
  id Property;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  SEL v9;
  uint8_t v10[16];

  if (result)
  {
    v2 = result;
    if (objc_getProperty(result, a2, 16, 1))
    {
      objc_msgSend(objc_getProperty(v2, v3, 16, 1), "removeObserver:forKeyPath:", v2, CFSTR("status"));
      objc_setProperty_atomic(v2, v4, 0, 16);
    }
    Property = objc_getProperty(v2, v3, 32, 1);
    if (Property)
    {
      v7 = ne_log_obj(Property, v6);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v10 = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "End SSID monitor transaction", v10, 2u);
      }

      objc_setProperty_atomic(v2, v9, 0, 32);
    }
    return (id *)objc_storeWeak(v2 + 5, 0);
  }
  return result;
}

void sub_100087FB0(void *a1, void *a2, int a3)
{
  const char *v5;
  id v6;
  id Property;
  const char *v8;
  const char *v9;
  id v10;
  const char *v11;
  void *v12;
  unsigned int v13;
  const char *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  char v20;
  uint64_t v21;
  void *i;
  void *v23;
  void *v24;
  unsigned int v25;
  void *v26;
  void *v27;
  _QWORD v28[5];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];

  v6 = a2;
  if (!a1)
    goto LABEL_24;
  Property = objc_getProperty(a1, v5, 408, 1);
  if (a3)
  {
    if (Property != v6
      && (objc_msgSend(objc_getProperty(a1, v8, 408, 1), "isEqualToString:", v6) & 1) == 0)
    {
      objc_setProperty_atomic(a1, v9, v6, 408);
      sub_100088278(a1, 1, 0);
    }
    goto LABEL_24;
  }
  v10 = Property;
  if (v10 == v6)
  {

    goto LABEL_10;
  }
  v12 = v10;
  v13 = objc_msgSend(objc_getProperty(a1, v11, 408, 1), "isEqualToString:", v6);

  if (v13)
  {
LABEL_10:
    objc_setProperty_atomic(a1, v14, 0, 408);
    sub_100088278(a1, 1, 0);
  }
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "pathController"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "pathRules"));

  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (!v18)
  {
LABEL_23:

    goto LABEL_24;
  }
  v19 = v18;
  v20 = 0;
  v21 = *(_QWORD *)v30;
  do
  {
    for (i = 0; i != v19; i = (char *)i + 1)
    {
      if (*(_QWORD *)v30 != v21)
        objc_enumerationMutation(v17);
      v23 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i);
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "temporaryAllowMulticastNetworkName"));
      v25 = objc_msgSend(v24, "isEqualToString:", v6);

      if (v25)
      {
        objc_msgSend(v23, "setTemporaryAllowMulticastNetworkName:", 0);
        v20 = 1;
        if ((objc_msgSend(v23, "multicastPreferenceSet") & 1) == 0)
          objc_msgSend(v23, "setDenyMulticast:", 1);
      }
    }
    v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  }
  while (v19);

  if ((v20 & 1) != 0)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEConfigurationManager sharedManagerForAllUsers](NEConfigurationManager, "sharedManagerForAllUsers"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "configuration"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_100088370;
    v28[3] = &unk_1000BEA00;
    v28[4] = a1;
    objc_msgSend(v17, "saveConfiguration:withCompletionQueue:handler:", v26, v27, v28);

    goto LABEL_23;
  }
LABEL_24:

}

void sub_100088278(void *a1, char a2, char a3)
{
  NSObject *v6;
  _QWORD block[6];
  char v8;
  char v9;
  _QWORD v10[5];
  id v11;

  if (a1)
  {
    v10[0] = 0;
    v10[1] = v10;
    v10[2] = 0x3032000000;
    v10[3] = sub_100088480;
    v10[4] = sub_100088490;
    v11 = (id)os_transaction_create("com.apple.nesessionmanager.pathController.updatePolicies");
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100088498;
    block[3] = &unk_1000BEA28;
    v8 = a3;
    v9 = a2;
    block[4] = a1;
    block[5] = v10;
    dispatch_async(v6, block);

    _Block_object_dispose(v10, 8);
  }
}

void sub_100088358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100088370(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  id v13;

  v3 = a2;
  v5 = ne_log_obj(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v10 = 138412546;
      v11 = v8;
      v12 = 2112;
      v13 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%@ failed to save configuration to clear temporary SSID rules: %@", (uint8_t *)&v10, 0x16u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = 138412290;
    v11 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%@ saved configuration to clear temporary SSID rules", (uint8_t *)&v10, 0xCu);
  }

}

uint64_t sub_100088480(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100088490(uint64_t a1)
{

}

void sub_100088498(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  const char *v7;
  id Property;
  char **v9;
  uint64_t v10;
  const char *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  void *v19;
  unsigned int v20;
  void *v21;
  const char *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  const char *v34;
  _BOOL4 v35;
  _BOOL4 v36;
  void *v37;
  void *v38;
  uint64_t v39;
  id v40;
  BOOL v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  uint64_t v53;
  void *j;
  void *v55;
  void *v56;
  unsigned __int8 v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  id v71;
  const char *v72;
  void *v73;
  id v74;
  const char *v75;
  id v76;
  id v77;
  _BYTE *v78;
  id v79;
  const char *v80;
  _UNKNOWN **v81;
  void *v82;
  id v83;
  void *v84;
  const char *v85;
  char v86;
  void *v87;
  void *v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  void *v96;
  uint64_t v97;
  void *v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  int v103;
  void *v104;
  id obj;
  id obja;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _BYTE v119[128];
  _BYTE v120[128];
  _BYTE v121[128];
  _QWORD v122[2];
  _BYTE buf[24];
  void *v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  int v133;
  BOOL v134;

  v2 = a1;
  if (*(_BYTE *)(a1 + 48))
    sub_1000788C8(*(void **)(a1 + 32));
  if (*(_BYTE *)(v2 + 49))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 32), "configuration"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "pathController"));
    v5 = v2;
    v6 = objc_msgSend(v4, "isEnabled");

    if (v6)
    {
      v122[0] = 0;
      v122[1] = 0;
      v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      Property = *(id *)(v5 + 32);
      v9 = &selRef_sharedConnection;
      v10 = v5;
      if (Property)
        Property = objc_getProperty(Property, v7, 368, 1);
      v100 = v5;
      if ((objc_msgSend(Property, "ignoreRouteRules") & 1) == 0)
      {
        v117 = 0u;
        v118 = 0u;
        v115 = 0u;
        v116 = 0u;
        v12 = *(id *)(v5 + 32);
        if (v12)
          v12 = objc_getProperty(v12, v11, 368, 1);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "pathRules"));
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v115, v121, 16);
        if (v14)
        {
          v15 = v14;
          v16 = *(_QWORD *)v116;
          while (2)
          {
            for (i = 0; i != v15; i = (char *)i + 1)
            {
              if (*(_QWORD *)v116 != v16)
                objc_enumerationMutation(v13);
              v18 = *(void **)(*((_QWORD *)&v115 + 1) + 8 * (_QWORD)i);
              v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "matchSigningIdentifier"));
              v20 = objc_msgSend(v19, "isEqualToString:", CFSTR("PathRuleDefaultIdentifier"));

              if (v20)
              {
                v102 = v18;
                goto LABEL_21;
              }
            }
            v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v115, v121, 16);
            if (v15)
              continue;
            break;
          }
          v102 = 0;
LABEL_21:
          v10 = v100;
          v9 = &selRef_sharedConnection;
        }
        else
        {
          v102 = 0;
        }

        v113 = 0u;
        v114 = 0u;
        v111 = 0u;
        v112 = 0u;
        v23 = *(id *)(v10 + 32);
        if (v23)
          v23 = objc_getProperty(v23, v22, *((int *)v9 + 554), 1);
        obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "pathRules"));
        v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v111, v120, 16);
        if (v24)
        {
          v25 = v24;
          v26 = *(_QWORD *)v112;
          v101 = *(_QWORD *)v112;
          do
          {
            v27 = 0;
            do
            {
              if (*(_QWORD *)v112 != v26)
                objc_enumerationMutation(obj);
              v28 = *(void **)(*((_QWORD *)&v111 + 1) + 8 * (_QWORD)v27);
              if ((objc_msgSend(v28, "denyAll") & 1) == 0)
              {
                v29 = v25;
                v30 = *(void **)(v10 + 32);
                v31 = v28;
                v32 = v102;
                if (v30)
                {
                  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
                  if (objc_msgSend(v31, "cellularBehavior"))
                  {
                    if (objc_msgSend(v31, "cellularBehavior") == (id)1)
                    {
                      v35 = 0;
                    }
                    else
                    {
                      objc_msgSend(v31, "cellularBehavior");
                      v35 = 1;
                    }
                  }
                  else
                  {
                    v35 = objc_msgSend(objc_getProperty(v30, v34, 392, 1), "status") != (id)1;
                  }
                  if (!objc_msgSend(v31, "wifiBehavior") || objc_msgSend(v31, "wifiBehavior") == (id)2)
                  {
                    v36 = 1;
                    if (v35)
                      goto LABEL_40;
LABEL_44:
                    v39 = 2;
LABEL_48:
                    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", v39, 2));
                    objc_msgSend(v33, "addObject:", v37);
LABEL_49:

                    goto LABEL_50;
                  }
                  v36 = objc_msgSend(v31, "wifiBehavior") != (id)1;
                  if (!v35)
                    goto LABEL_44;
LABEL_40:
                  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "configuration"));
                  if (objc_msgSend(v37, "grade") != (id)2)
                  {

                    goto LABEL_47;
                  }
                  v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "matchSigningIdentifier"));
                  if (objc_msgSend(v38, "isEqualToString:", CFSTR("PathRuleDefaultIdentifier")))
                  {

                    goto LABEL_49;
                  }
                  v99 = objc_msgSend(v31, "cellularBehavior");
                  v40 = objc_msgSend(v32, "cellularBehavior");

                  v41 = v99 == v40;
                  v10 = v100;
                  if (!v41)
                  {
LABEL_47:
                    v39 = 1;
                    goto LABEL_48;
                  }
LABEL_50:
                  if (!v36)
                  {
                    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", 2, 3));
                    objc_msgSend(v33, "addObject:", v42);
                    v26 = v101;
                    v25 = v29;
                    goto LABEL_58;
                  }
                  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "configuration"));
                  if (objc_msgSend(v42, "grade") != (id)2)
                  {

                    v26 = v101;
                    v25 = v29;
                    goto LABEL_57;
                  }
                  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "matchSigningIdentifier"));
                  v26 = v101;
                  v25 = v29;
                  if (objc_msgSend(v43, "isEqualToString:", CFSTR("PathRuleDefaultIdentifier")))
                  {

                    goto LABEL_58;
                  }
                  v44 = objc_msgSend(v31, "wifiBehavior");
                  v45 = objc_msgSend(v32, "wifiBehavior");

                  v41 = v44 == v45;
                  v10 = v100;
                  if (!v41)
                  {
LABEL_57:
                    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", 1, 3));
                    objc_msgSend(v33, "addObject:", v42);
LABEL_58:

                  }
                  if (objc_msgSend(v33, "count"))
                    v46 = v33;
                  else
                    v46 = 0;

                }
                else
                {
                  v46 = 0;
                  v25 = v29;
                }

                v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "matchSigningIdentifier"));
                objc_msgSend(v104, "setObject:forKeyedSubscript:", v46, v47);

              }
              v27 = (char *)v27 + 1;
            }
            while (v25 != v27);
            v48 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v111, v120, 16);
            v25 = v48;
          }
          while (v48);
        }

      }
      v109 = 0u;
      v110 = 0u;
      v107 = 0u;
      v108 = 0u;
      v49 = *(id *)(v10 + 32);
      if (v49)
        v49 = objc_getProperty(v49, v11, 368, 1);
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "pathRules"));
      v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v107, v119, 16);
      if (v51)
      {
        v52 = v51;
        v53 = *(_QWORD *)v108;
        while (2)
        {
          for (j = 0; j != v52; j = (char *)j + 1)
          {
            if (*(_QWORD *)v108 != v53)
              objc_enumerationMutation(v50);
            v55 = *(void **)(*((_QWORD *)&v107 + 1) + 8 * (_QWORD)j);
            v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "matchSigningIdentifier"));
            v57 = objc_msgSend(v56, "isEqualToString:", CFSTR("PathRuleDefaultIdentifier"));

            if ((v57 & 1) == 0)
            {
              v58 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "matchSigningIdentifier")));
              v59 = (void *)ne_copy_cached_uuids_for_bundle_identifier(objc_msgSend(v58, "UTF8String"), objc_msgSend(v55, "isIdentifierExternal"));

              if (!v59)
              {
                v62 = ne_log_obj(v60, v61);
                v63 = objc_claimAutoreleasedReturnValue(v62);
                if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
                {
                  v64 = *(_QWORD *)(v100 + 32);
                  v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "matchSigningIdentifier"));
                  *(_DWORD *)buf = 138412546;
                  *(_QWORD *)&buf[4] = v64;
                  *(_WORD *)&buf[12] = 2112;
                  *(_QWORD *)&buf[14] = v65;
                  _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "%@: No UUIDs in the cache for %@, populating the cache from the path rules", buf, 0x16u);

                }
                v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v100 + 32), "configuration"));
                v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "identifier"));
                objc_msgSend(v67, "getUUIDBytes:", v122);

                v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v100 + 32), "uid"));
                NEHelperCachePopulateUUIDsForConfiguration(v122, objc_msgSend(v68, "intValue"));

                goto LABEL_85;
              }

            }
          }
          v52 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v107, v119, 16);
          if (v52)
            continue;
          break;
        }
      }
LABEL_85:

      v70 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v100 + 32), "policySession"));
      v71 = *(id *)(v100 + 32);
      if (v71)
        v71 = objc_getProperty(v71, v69, 368, 1);
      v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "pathRules"));
      v74 = *(id *)(v100 + 32);
      if (v74)
        v74 = objc_getProperty(v74, v72, 496, 1);
      obja = (id)v70;
      v76 = v74;
      v77 = *(id *)(v100 + 32);
      if (v77)
      {
        v77 = objc_getProperty(v77, v75, 408, 1);
        v78 = *(_BYTE **)(v100 + 32);
      }
      else
      {
        v78 = 0;
      }
      v79 = v77;
      v81 = sub_100088E6C(v78, v80);
      v82 = (void *)objc_claimAutoreleasedReturnValue(v81);
      v83 = sub_100089024(*(_BYTE **)(v100 + 32), 0);
      v84 = (void *)objc_claimAutoreleasedReturnValue(v83);
      v86 = sub_10008921C(*(_QWORD *)(v100 + 32), v85);
      v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v100 + 32), "networkAgent"));
      v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "agentUUID"));
      v103 = NEGetConsoleUserUID();
      v89 = v73;
      v90 = v76;
      v91 = v79;
      v92 = v104;
      v93 = v82;
      v94 = v84;
      v95 = v88;
      v96 = obja;
      if (obja && isa_nsarray(v89) && isa_nsdictionary(v92) && *((_DWORD *)obja + 2) == 5)
      {
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = sub_10003E37C;
        v124 = &unk_1000BDD60;
        v125 = obja;
        v126 = v89;
        v127 = v92;
        v133 = v103;
        v128 = v90;
        v129 = v95;
        v130 = v91;
        v131 = v93;
        v134 = (v86 & 0x10) != 0;
        v132 = v94;
        v96 = obja;
        sub_10002C9C8((uint64_t)NESMPolicyMasterSession, buf);

      }
      v2 = v100;
    }
    else
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v5 + 32), "policySession"));
      sub_10002C3A4((uint64_t)v21);

      v2 = v5;
    }
  }
  sub_1000892AC(*(_QWORD *)(v2 + 32), a2);
  v97 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
  v98 = *(void **)(v97 + 40);
  *(_QWORD *)(v97 + 40) = 0;

}

_UNKNOWN **sub_100088E6C(_BYTE *a1, const char *a2)
{
  id v3;
  SEL v4;
  const char *v5;
  _UNKNOWN **v6;
  const char *v7;
  const char *v9;
  id v10;
  id v11;
  void *v12;
  SEL v13;
  NSMutableSet *v14;
  void *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  void *v19;

  if (!a1)
    goto LABEL_6;
  v3 = objc_msgSend(objc_getProperty(a1, a2, 392, 1), "status");
  if (!objc_getProperty(a1, v4, 432, 1))
    goto LABEL_6;
  v6 = 0;
  if ((a1[355] & 1) != 0 && v3 != (id)1)
  {
    if ((sub_10008921C((uint64_t)a1, v5) & 2) == 0)
    {
LABEL_6:
      v6 = 0;
      return v6;
    }
    if ((sub_10008921C((uint64_t)a1, v7) & 8) != 0)
    {
      v6 = &off_1000C1648;
    }
    else
    {
      v10 = objc_getProperty(a1, v9, 472, 1);
      if (objc_msgSend(v10, "count"))
      {
        v11 = sub_100089024(a1, (const char *)1);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        v14 = +[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", objc_getProperty(a1, v13, 456, 1));
        v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        if ((sub_10008921C((uint64_t)a1, v16) & 4) != 0 && objc_msgSend(objc_getProperty(a1, v17, 464, 1), "count"))
          objc_msgSend(v15, "addObjectsFromArray:", objc_getProperty(a1, v18, 464, 1));
        if (v12)
        {
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v12));
          objc_msgSend(v15, "minusSet:", v19);

        }
        objc_msgSend(v15, "intersectSet:", v10);
        v6 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "allObjects"));

      }
      else
      {
        v6 = 0;
      }

    }
  }
  return v6;
}

id sub_100089024(_BYTE *a1, const char *a2)
{
  char v2;
  id v4;
  const char *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  id v14;
  id v15;
  const char *v16;
  const char *v17;
  id v18;
  char v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  if (!a1)
    return 0;
  v2 = (char)a2;
  v4 = objc_msgSend(objc_getProperty(a1, a2, 392, 1), "status");
  if ((v2 & 1) != 0)
  {
LABEL_3:
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v7 = +[NEPathController copyAggregatePathRules](NEPathController, "copyAggregatePathRules");
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v22;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v22 != v10)
            objc_enumerationMutation(v7);
          v12 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
          if ((objc_msgSend(v12, "denyCellularFallback", (_QWORD)v21) & 1) != 0
            || objc_msgSend(v12, "cellularBehavior") == (id)1)
          {
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "matchSigningIdentifier"));
            objc_msgSend(v6, "addObject:", v13);

          }
        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      }
      while (v9);
    }

    if (objc_msgSend(v6, "count"))
      v14 = v6;
    else
      v14 = 0;

    return v14;
  }
  v15 = v4;
  if ((sub_10008921C((uint64_t)a1, v5) & 2) == 0)
    return 0;
  if ((sub_10008921C((uint64_t)a1, v16) & 8) != 0)
    return 0;
  v18 = objc_getProperty(a1, v17, 432, 1);
  if (!v18)
    return 0;
  v19 = a1[355];

  v14 = 0;
  if ((v19 & 1) != 0 && v15 != (id)1)
    goto LABEL_3;
  return v14;
}

uint64_t sub_10008921C(uint64_t result, const char *a2)
{
  void *v2;
  const char *v3;
  void *v4;
  id v5;

  if (result)
  {
    v2 = (void *)result;
    if ((objc_msgSend(objc_getProperty((id)result, a2, 368, 1), "cellularFallbackFlags") & 1) != 0)
    {
      return (uint64_t)objc_msgSend(objc_getProperty(v2, v3, 368, 1), "cellularFallbackFlags");
    }
    else
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "configuration"));
      v5 = objc_msgSend(v4, "grade");

      if (v5 == (id)2)
      {
        result = ne_session_fallback_default();
        if ((result & 1) == 0)
          return 6;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_1000892AC(uint64_t a1, const char *a2)
{
  const char *v3;
  _UNKNOWN **v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *i;
  void *v13;
  SEL v14;
  id v15;
  id v16;
  const char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  unsigned __int8 v23;
  char v24;
  int64_t v25;
  NSObject *v26;
  dispatch_time_t v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD applier[4];
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];

  if (a1)
  {
    if (objc_msgSend(objc_getProperty((id)a1, a2, 480, 1), "count"))
    {
      v4 = sub_100088E6C((_BYTE *)a1, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      if (objc_msgSend(v5, "count"))
      {
        v6 = v5;
        v28 = objc_alloc_init((Class)NSMutableArray);
        v35 = 0u;
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        v7 = v6;
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
        if (v8)
        {
          v9 = v8;
          v10 = 0;
          v11 = *(_QWORD *)v36;
          do
          {
            for (i = 0; i != v9; i = (char *)i + 1)
            {
              v13 = v10;
              if (*(_QWORD *)v36 != v11)
                objc_enumerationMutation(v7);
              v10 = (void *)NEHelperCacheCopyAppUUIDMapping(objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i)), "UTF8String"), 0);

              if (v10 && xpc_get_type(v10) == (xpc_type_t)&_xpc_type_array)
              {
                applier[0] = _NSConcreteStackBlock;
                applier[1] = 3221225472;
                applier[2] = sub_1000898B8;
                applier[3] = &unk_1000BE9D8;
                v34 = v28;
                xpc_array_apply(v10, applier);

              }
            }
            v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
          }
          while (v9);

        }
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        v32 = 0u;
        v15 = objc_getProperty((id)a1, v14, 480, 1);
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
        if (v16)
        {
          v18 = v16;
          v19 = *(_QWORD *)v30;
LABEL_17:
          v20 = 0;
          while (1)
          {
            if (*(_QWORD *)v30 != v19)
              objc_enumerationMutation(v15);
            v21 = objc_msgSend(objc_getProperty((id)a1, v17, 480, 1), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * v20));
            v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
            v23 = objc_msgSend(v28, "containsObject:", v22);

            if ((v23 & 1) != 0)
              break;
            if (v18 == (id)++v20)
            {
              v18 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
              if (v18)
                goto LABEL_17;
              goto LABEL_23;
            }
          }

          if ((*(_BYTE *)(a1 + 357) & 1) != 0)
            return;
          v24 = 1;
          v25 = 500000000;
LABEL_29:
          *(_BYTE *)(a1 + 357) = v24;
          if (*(_DWORD *)(a1 + 360) == -1)
          {
            sub_100089630(a1);
          }
          else
          {
            v26 = objc_getProperty((id)a1, v3, 488, 1);
            v27 = dispatch_time(0, v25);
            dispatch_source_set_timer(v26, v27, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);

          }
          return;
        }
LABEL_23:

      }
      else
      {

      }
    }
    if ((*(_BYTE *)(a1 + 357) & 1) == 0)
      return;
    v24 = 0;
    v25 = 5000000000;
    goto LABEL_29;
  }
}

void sub_100089630(uint64_t a1)
{
  void *v2;
  const char *v3;
  void *v4;
  char v5;
  NSObject *Property;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  char v12;
  uint64_t state;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint64_t state64;
  _BYTE block[24];
  void *v23;
  void *v24;
  char v25;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "server"));
    v4 = v2;
    if (v2)
    {
      v5 = *(_BYTE *)(a1 + 357) & 1;
      Property = objc_getProperty(v2, v3, 88, 1);
      *(_QWORD *)block = _NSConcreteStackBlock;
      *(_QWORD *)&block[8] = 3221225472;
      *(_QWORD *)&block[16] = sub_100053060;
      v23 = &unk_1000BEC58;
      v24 = v4;
      v25 = v5;
      dispatch_async(Property, block);
    }

    if (*(_DWORD *)(a1 + 360) == -1)
    {
      v7 = notify_register_check("com.apple.networkextension.fallback_in_use", (int *)(a1 + 360));
      if ((_DWORD)v7)
      {
        v9 = ne_log_obj(v7, v8);
        v10 = objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)block = 136315138;
          *(_QWORD *)&block[4] = "com.apple.networkextension.fallback_in_use";
          _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "notify_register_check for %s failed", block, 0xCu);
        }

        *(_DWORD *)(a1 + 360) = -1;
      }
    }
    v11 = *(_DWORD *)(a1 + 360);
    if (v11 != -1)
    {
      state64 = 0;
      v12 = *(_BYTE *)(a1 + 357);
      state = notify_get_state(v11, &state64);
      if (!(_DWORD)state)
      {
        v15 = v12 & 1;
        if (state64 == v15 || (state = notify_set_state(*(_DWORD *)(a1 + 360), v15), (_DWORD)state))
        {
          v16 = ne_log_obj(state, v14);
          v17 = objc_claimAutoreleasedReturnValue(v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)block = 134218240;
            *(_QWORD *)&block[4] = state64;
            *(_WORD *)&block[12] = 2048;
            *(_QWORD *)&block[14] = v15;
            _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Won't post notification (old state = %llu, new state = %llu)", block, 0x16u);
          }

        }
        else
        {
          v18 = ne_log_obj(state, v14);
          v19 = objc_claimAutoreleasedReturnValue(v18);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            v20 = "";
            if (!(_DWORD)v15)
              v20 = " not";
            *(_DWORD *)block = 136315138;
            *(_QWORD *)&block[4] = v20;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Posting notification that fallback is%s in use", block, 0xCu);
          }

          notify_post("com.apple.networkextension.fallback_in_use");
        }
      }
    }
  }
}

uint64_t sub_1000898B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  v5 = v4;
  if (v4 && xpc_get_type(v4) == (xpc_type_t)&_xpc_type_uuid)
  {
    v6 = *(void **)(a1 + 32);
    v7 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", xpc_uuid_get_bytes(v5));
    objc_msgSend(v6, "addObject:", v7);

  }
  return 1;
}

id sub_10008BE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = ne_session_status_to_string(*(unsigned int *)(a1 + 40));
    v8 = 138412546;
    v9 = v5;
    v10 = 2080;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Session %@ status changing to %s after update", (uint8_t *)&v8, 0x16u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "setStatus:", *(unsigned int *)(a1 + 40));
}

void sub_10008BF18(uint64_t a1, const char *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  id Property;
  id v8;
  id v9;
  const char *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  const char *v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  uint64_t v35;
  _BYTE v36[128];

  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    v4 = objc_getProperty(v3, a2, 448, 1);
    if (v4 && !*(_QWORD *)(a1 + 40))
      goto LABEL_23;
    v5 = *(void **)(a1 + 32);
    if (v5)
    {
      v6 = objc_getProperty(v5, a2, 448, 1);
      if (v6)
        goto LABEL_6;
    }
  }
  else
  {
    v4 = 0;
  }
  if (*(_QWORD *)(a1 + 40))
    goto LABEL_23;
  v6 = 0;
LABEL_6:
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 448, 1);
  v8 = objc_msgSend(Property, "count");
  v9 = objc_msgSend(*(id *)(a1 + 40), "count");

  if (v8 != v9)
    goto LABEL_24;
  v11 = *(void **)(a1 + 40);
  if (!v11)
    return;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v4 = v11;
  v12 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v30, v36, 16);
  if (!v12)
  {
LABEL_20:

    return;
  }
  v13 = v12;
  v14 = *(_QWORD *)v31;
LABEL_12:
  v15 = 0;
  while (1)
  {
    if (*(_QWORD *)v31 != v14)
      objc_enumerationMutation(v4);
    v16 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * v15);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v16, (_QWORD)v30));
    v19 = *(id *)(a1 + 32);
    if (v19)
      v19 = objc_getProperty(v19, v17, 448, 1);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", v16));
    v21 = objc_msgSend(v18, "unsignedIntegerValue");
    v22 = objc_msgSend(v20, "unsignedIntegerValue");

    if (v21 != v22)
      break;
    if (v13 == (id)++v15)
    {
      v13 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v30, v36, 16);
      if (v13)
        goto LABEL_12;
      goto LABEL_20;
    }
  }
LABEL_23:

LABEL_24:
  if (*(_QWORD *)(a1 + 40))
  {
    v24 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithDictionary:copyItems:", *(_QWORD *)(a1 + 40), 1);
    v25 = *(void **)(a1 + 32);
    if (v25)
      objc_setProperty_atomic(v25, v23, v24, 448);

  }
  else
  {
    v26 = *(void **)(a1 + 32);
    if (v26)
      objc_setProperty_atomic(v26, v10, 0, 448);
  }
  v27 = ne_log_obj(v26, v10);
  v28 = objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    v29 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v35 = v29;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%@: Updating agent on fallback interface change", buf, 0xCu);
  }

  sub_100088278(*(void **)(a1 + 32), 0, 1);
}

void sub_10008C1D4(void *a1, const char *a2)
{
  const char *v3;
  SEL v4;
  id Property;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  SEL v9;
  uint8_t v10[16];

  if (a1)
  {
    if (objc_getProperty(a1, a2, 392, 1))
    {
      objc_msgSend(objc_getProperty(a1, v3, 392, 1), "removeObserver:forKeyPath:", a1, CFSTR("status"));
      objc_setProperty_atomic(a1, v4, 0, 392);
    }
    Property = objc_getProperty(a1, v3, 416, 1);
    if (Property)
    {
      v7 = ne_log_obj(Property, v6);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v10 = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "End roaming monitor transaction", v10, 2u);
      }

      objc_setProperty_atomic(a1, v9, 0, 416);
    }
  }
}

void sub_10008C2B8(uint64_t a1, const char *a2)
{
  SEL v3;
  SEL v4;
  SEL v5;
  const char *v6;
  const char *v7;
  int v8;
  NSObject *Property;
  SEL v10;
  SEL v11;
  const char *v12;
  SEL v13;
  SEL v14;
  SEL v15;
  void *v16;
  void *v17;

  objc_setProperty_atomic((id)a1, a2, 0, 456);
  objc_setProperty_atomic((id)a1, v3, 0, 464);
  objc_setProperty_atomic((id)a1, v4, 0, 472);
  objc_setProperty_atomic((id)a1, v5, 0, 480);
  sub_1000892AC(a1, v6);
  sub_100089630(a1);
  v8 = *(_DWORD *)(a1 + 360);
  if (v8 != -1)
  {
    notify_cancel(v8);
    *(_DWORD *)(a1 + 360) = -1;
  }
  Property = objc_getProperty((id)a1, v7, 488, 1);
  dispatch_source_cancel(Property);
  objc_setProperty_atomic((id)a1, v10, 0, 488);
  if (objc_getProperty((id)a1, v11, 504, 1))
  {
    objc_msgSend((id)a1, "didStopTrackingNOI:", objc_getProperty((id)a1, v12, 512, 1));
    objc_msgSend(objc_getProperty((id)a1, v13, 504, 1), "setDelegate:", 0);
    objc_msgSend(objc_getProperty((id)a1, v14, 504, 1), "destroy");
    objc_setProperty_atomic((id)a1, v15, 0, 504);
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "server"));
  objc_msgSend(v16, "removeObserver:forKeyPath:", a1, CFSTR("primaryCellularInterface"));

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "server"));
  objc_msgSend(v17, "removeObserver:forKeyPath:", a1, CFSTR("primaryPhysicalInterface"));

  *(_BYTE *)(a1 + 358) = 0;
}

uint64_t sub_10008C444(id self, const char *a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  void *default_evaluator;
  void *v10;
  id v11;
  id v12;
  const char *v13;
  void *v14;
  void *v15;
  id v16;
  const char *v17;
  _QWORD v19[5];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];

  v2 = (uint64_t)self;
  if (self)
  {
    v20 = 0;
    v21 = &v20;
    v22 = 0x3032000000;
    v23 = sub_100088480;
    v24 = sub_100088490;
    v25 = 0;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v3 = objc_msgSend(objc_getProperty(self, a2, 368, 1), "pathRules");
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v27;
      while (2)
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v27 != v6)
            objc_enumerationMutation(v4);
          if ((objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)v7), "denyMulticast") & 1) != 0)
          {

            default_evaluator = (void *)nw_path_create_default_evaluator();
            v10 = (void *)nw_path_evaluator_copy_path(default_evaluator);

            v19[0] = _NSConcreteStackBlock;
            v19[1] = 3221225472;
            v19[2] = sub_10008C6A8;
            v19[3] = &unk_1000BE9B0;
            v19[4] = &v20;
            nw_path_enumerate_resolver_configs(v10, v19);

            goto LABEL_12;
          }
          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
        if (v5)
          continue;
        break;
      }
    }

LABEL_12:
    v11 = (id)v21[5];
    v12 = objc_getProperty((id)v2, v8, 496, 1);
    if (v11 == v12)
    {

    }
    else
    {
      v14 = v12;
      v15 = (void *)v21[5];
      v16 = objc_getProperty((id)v2, v13, 496, 1);
      LOBYTE(v15) = objc_msgSend(v15, "isEqual:", v16);

      if ((v15 & 1) == 0)
      {
        objc_setProperty_atomic((id)v2, v17, (id)v21[5], 496);
        v2 = 1;
LABEL_17:
        _Block_object_dispose(&v20, 8);

        return v2;
      }
    }
    v2 = 0;
    goto LABEL_17;
  }
  return v2;
}

void sub_10008C67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008C6A8(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v5[5];

  v3 = a2;
  if (!nw_resolver_config_get_protocol())
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10008C724;
    v5[3] = &unk_1000BE988;
    v5[4] = *(_QWORD *)(a1 + 32);
    nw_resolver_config_enumerate_name_servers(v3, v5);
  }

  return 1;
}

uint64_t sub_10008C724(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  void *evaluator_for_endpoint;
  void *v7;
  int is_direct;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v3, CFSTR("0")));

  v5 = objc_msgSend(v4, "copyCEndpoint");
  evaluator_for_endpoint = (void *)nw_path_create_evaluator_for_endpoint(v5, 0);

  v7 = (void *)nw_path_evaluator_copy_path(evaluator_for_endpoint);
  is_direct = nw_path_is_direct();

  if (is_direct)
  {
    v9 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    if (!v9)
    {
      v10 = objc_alloc_init((Class)NSMutableArray);
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v12 = *(void **)(v11 + 40);
      *(_QWORD *)(v11 + 40) = v10;

      v9 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    }
    objc_msgSend(v9, "addObject:", v4);
  }

  return 1;
}

id sub_10008C818()
{
  return (id)qword_1000CF940;
}

Class sub_10008C824()
{
  Class result;

  if (qword_1000CF950 != -1)
    dispatch_once(&qword_1000CF950, &stru_1000BEA48);
  result = objc_getClass("NWNetworkOfInterestManager");
  qword_1000CF940 = (uint64_t)result;
  off_1000CF5E0 = (uint64_t (*)())sub_10008C818;
  return result;
}

void sub_10008C880(id a1)
{
  qword_1000CF948 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationFeed.framework/SymptomPresentationFeed", 2);
  if (!qword_1000CF948)
    NSLog(&CFSTR("### Failed to Soft Link: /System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationF"
                 "eed.framework/SymptomPresentationFeed").isa);
}

void sub_10008C8B8(uint64_t a1)
{
  sub_100089630(*(_QWORD *)(a1 + 32));
}

uint64_t sub_10008C8C0(id self, const char *a2)
{
  uint64_t v2;
  char v3;
  id v4;
  const char *v5;
  unsigned int v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  const char *v22;
  _BYTE v23[128];

  v2 = (uint64_t)self;
  if (self)
  {
    v3 = (char)a2;
    v4 = objc_msgSend(objc_getProperty(self, a2, 368, 1), "ignoreRouteRules");
    if ((v4 & 1) != 0)
    {
      v2 = 0;
    }
    else
    {
      if ((v3 & 1) != 0)
        v6 = 0;
      else
        v6 = (sub_10008921C(v2, v5) >> 1) & 1;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v7 = objc_msgSend(objc_getProperty((id)v2, v5, 368, 1), "pathRules", 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)v18;
        while (2)
        {
          v12 = 0;
          do
          {
            if (*(_QWORD *)v18 != v11)
              objc_enumerationMutation(v8);
            if (!objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v12), "cellularBehavior"))
            {

              v2 = 1;
              goto LABEL_17;
            }
            v12 = (char *)v12 + 1;
          }
          while (v10 != v12);
          v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
          if (v10)
            continue;
          break;
        }
      }

      v2 = v6 != 0;
    }
LABEL_17:
    v13 = ne_log_obj(v4, v5);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      v16 = "No";
      if ((_DWORD)v2)
        v16 = "Yes";
      *(_DWORD *)buf = 136315138;
      v22 = v16;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Path Controller needs roaming monitor: %s", buf, 0xCu);
    }

  }
  return v2;
}

void sub_10008CA88(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint64_t v17;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pathController"));
  if ((objc_msgSend(v3, "hasNonDefaultRules") & 1) != 0)
  {

  }
  else
  {
    v6 = ne_session_fallback_advisory();

    if ((v6 & 1) == 0)
      return;
  }
  v7 = ne_log_obj(v4, v5);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1 + 32);
    v16 = 138412290;
    v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@: Handling installed apps change, restarting", (uint8_t *)&v16, 0xCu);
  }

  v10 = xpc_dictionary_create(0, 0, 0);
  v11 = xpc_dictionary_create(0, 0, 0);
  v13 = v11;
  if (v11)
  {
    xpc_dictionary_set_BOOL(v11, "stop-current-session", 1);
  }
  else
  {
    v14 = ne_log_obj(0, v12);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v16) = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "xpc_dictionary_create failed", (uint8_t *)&v16, 2u);
    }

  }
  xpc_dictionary_set_value(v10, "SessionOptions", v13);
  objc_msgSend(*(id *)(a1 + 32), "startWithCommand:isOnDemand:", v10, 0);

}

void sub_10008CC30(uint64_t a1, const char *a2)
{
  if (sub_10008C444(*(id *)(a1 + 32), a2))
    sub_100088278(*(void **)(a1 + 32), 1, 0);
}

void sub_10008CC70(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = inputNotification2String(*(unsigned int *)(a1 + 40));
    v10 = 138412546;
    v11 = v5;
    v12 = 2080;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: Handling %s notification, starting", (uint8_t *)&v10, 0x16u);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "pathController"));
  if ((objc_msgSend(v8, "hasNonDefaultRules") & 1) != 0)
  {

  }
  else
  {
    v9 = ne_session_fallback_advisory();

    if ((v9 & 1) == 0)
      return;
  }
  objc_msgSend(*(id *)(a1 + 32), "startWithCommand:isOnDemand:", 0, 0);
}

uint64_t sub_10008CD84(id self, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v8;
  int v9;
  const char *v10;

  v2 = (uint64_t)self;
  if (self)
  {
    v3 = (uint64_t)objc_msgSend(objc_getProperty(self, a2, 368, 1), "ignoreFallback");
    v2 = (v3 & 1) == 0 && (v3 = sub_10008921C(v2, v4), (v3 & 2) != 0);
    v5 = ne_log_obj(v3, v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v8 = "No";
      if ((_DWORD)v2)
        v8 = "Yes";
      v9 = 136315138;
      v10 = v8;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Path Controller needs fallback notifications: %s", (uint8_t *)&v9, 0xCu);
    }

  }
  return v2;
}

void sub_10008CE7C(void *a1, const char *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  void *v14;
  SEL v15;
  id v16;
  id v17;
  const char *v18;
  id v19;
  id v20;
  uint64_t v21;
  void *j;
  void *v23;
  const char *v24;
  id Property;
  unsigned __int8 v26;
  id v27;
  const char *v28;
  char **v29;
  id v30;
  uint64_t v31;
  void *k;
  const char *v33;
  id v34;
  SEL v35;
  void *v36;
  void *v37;
  NESMPathControllerSSIDWatcher *v38;
  id v39;
  id v40;
  NESMPathControllerSSIDWatcher *v41;
  uint64_t v42;
  NSObject *v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  SEL v48;
  SEL v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  id v54;
  void *v55;
  SEL v56;
  SEL v57;
  NESMPathControllerSSIDWatcher *v58;
  uint64_t v59;
  NSObject *v60;
  const char *v61;
  uint64_t v62;
  id v63;
  id v64;
  id obj;
  uint64_t v66;
  id v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint8_t buf[16];
  objc_super v85;
  _BYTE v86[128];
  _BYTE v87[128];
  _BYTE v88[128];
  uint8_t v89[128];
  uint8_t v90[16];

  if (!a1)
    return;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v3 = objc_msgSend(objc_getProperty(a1, a2, 368, 1), "pathRules");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v80, v89, 16);
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    v8 = *(_QWORD *)v81;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v81 != v8)
          objc_enumerationMutation(v4);
        v10 = *(void **)(*((_QWORD *)&v80 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(v10, "multicastPreferenceSet") & 1) == 0)
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "temporaryAllowMulticastNetworkName"));

          if (v11)
          {
            if (!v7)
              v7 = objc_alloc_init((Class)NSMutableArray);
            v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "temporaryAllowMulticastNetworkName"));
            v13 = objc_msgSend(v7, "containsObject:", v12);

            if ((v13 & 1) == 0)
            {
              v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "temporaryAllowMulticastNetworkName"));
              objc_msgSend(v7, "addObject:", v14);

            }
          }
        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v80, v89, 16);
    }
    while (v6);
  }
  else
  {
    v7 = 0;
  }

  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v16 = objc_getProperty(a1, v15, 400, 1);
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v76, v88, 16);
  if (!v17)
  {
    v20 = 0;
    goto LABEL_34;
  }
  v19 = v17;
  v20 = 0;
  v21 = *(_QWORD *)v77;
  do
  {
    for (j = 0; j != v19; j = (char *)j + 1)
    {
      if (*(_QWORD *)v77 != v21)
        objc_enumerationMutation(v16);
      v23 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * (_QWORD)j);
      if (v23)
      {
        if ((objc_msgSend(v7, "containsObject:", objc_getProperty(*(id *)(*((_QWORD *)&v76 + 1) + 8 * (_QWORD)j), v18, 24, 1)) & 1) != 0)
        {
          Property = objc_getProperty(v23, v24, 24, 1);
LABEL_25:
          objc_msgSend(v7, "removeObject:", Property);
          continue;
        }
      }
      else
      {
        v26 = objc_msgSend(v7, "containsObject:", 0);
        Property = 0;
        if ((v26 & 1) != 0)
          goto LABEL_25;
      }
      sub_100087ED0((id *)v23, v24);
      if (!v20)
        v20 = objc_alloc_init((Class)NSMutableArray);
      objc_msgSend(v20, "addObject:", v23);
    }
    v19 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v76, v88, 16);
  }
  while (v19);
LABEL_34:

  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  obj = v20;
  v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v72, v87, 16);
  v29 = &selRef_sharedConnection;
  if (v27)
  {
    v30 = v27;
    v31 = *(_QWORD *)v73;
    do
    {
      for (k = 0; k != v30; k = (char *)k + 1)
      {
        if (*(_QWORD *)v73 != v31)
          objc_enumerationMutation(obj);
        objc_msgSend(objc_getProperty(a1, v28, 400, 1), "removeObject:", *(_QWORD *)(*((_QWORD *)&v72 + 1) + 8 * (_QWORD)k));
      }
      v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v72, v87, 16);
    }
    while (v30);
  }

  if (objc_msgSend(v7, "count"))
  {
    if (!objc_getProperty(a1, v33, 400, 1))
    {
      v34 = objc_alloc_init((Class)NSMutableArray);
      objc_setProperty_atomic(a1, v35, v34, 400);

    }
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v64 = v7;
    v67 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v68, v86, 16);
    if (v67)
    {
      v66 = *(_QWORD *)v69;
      do
      {
        v36 = 0;
        do
        {
          if (*(_QWORD *)v69 != v66)
            objc_enumerationMutation(v64);
          v37 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * (_QWORD)v36);
          v38 = [NESMPathControllerSSIDWatcher alloc];
          v39 = v37;
          v40 = a1;
          if (v38 && v39)
          {
            v85.receiver = v38;
            v85.super_class = (Class)NESMPathControllerSSIDWatcher;
            v41 = (NESMPathControllerSSIDWatcher *)objc_msgSendSuper2(&v85, "init");
            if (v41)
            {
              v38 = v41;
              objc_storeStrong((id *)&v41->_ssid, v37);
              objc_storeWeak((id *)&v38->_parentSession, v40);
              v43 = objc_alloc_init((Class)NWNetworkDescription);
              *(_QWORD *)v90 = v39;
              v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v90, 1));
              v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v44));
              -[NSObject setSsidOptions:](v43, "setSsidOptions:", v45);

              v46 = objc_alloc_init((Class)NWParameters);
              objc_msgSend(v46, "setRequiredInterfaceType:", 1);
              v47 = (void *)objc_claimAutoreleasedReturnValue(+[NWMonitor monitorWithNetworkDescription:endpoint:parameters:](NWMonitor, "monitorWithNetworkDescription:endpoint:parameters:", v43, 0, v46));
              objc_setProperty_atomic(v38, v48, v47, 16);

              if (objc_getProperty(v38, v49, 16, 1))
              {
                if (!objc_getProperty(v38, v50, 32, 1))
                {
                  v52 = ne_log_obj(0, v51);
                  v53 = objc_claimAutoreleasedReturnValue(v52);
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_debug_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "Begin SSID monitor transaction", buf, 2u);
                  }

                  v54 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("com.apple.nesessionmanager.SSIDMonitor"));
                  v55 = (void *)os_transaction_create(objc_msgSend(v54, "UTF8String"));
                  objc_setProperty_atomic(v38, v56, v55, 32);

                  v29 = &selRef_sharedConnection;
                }
                v38->_hasBeenAssociated = 0;
                sub_100087FB0(v40, v39, 1);
                objc_msgSend(objc_getProperty(v38, v57, 16, 1), "addObserver:forKeyPath:options:context:", v38, CFSTR("status"), 5, 0);
                v58 = v38;
              }
              else
              {
                v59 = ne_log_obj(0, v50);
                v60 = objc_claimAutoreleasedReturnValue(v59);
                if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "SSID monitor creation failed", buf, 2u);
                }

                v58 = 0;
              }

            }
            else
            {
              v62 = ne_log_obj(0, v42);
              v43 = objc_claimAutoreleasedReturnValue(v62);
              if (os_log_type_enabled(v43, OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)v90 = 0;
                _os_log_fault_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_FAULT, "[super init] failed", v90, 2u);
              }
              v38 = 0;
              v58 = 0;
            }

          }
          else
          {
            v58 = 0;
          }

          if (v58)
            objc_msgSend(objc_getProperty(v40, v61, *((int *)v29 + 565), 1), "addObject:", v58);

          v36 = (char *)v36 + 1;
        }
        while (v67 != v36);
        v63 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v68, v86, 16);
        v67 = v63;
      }
      while (v63);
    }

  }
}

id sub_10008D5AC(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  SEL v5;
  id v6;
  const char *v7;
  const char *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  if (!*(_BYTE *)(a1 + 355))
    return 0;
  v2 = objc_alloc_init((Class)NSMutableArray);
  v3 = v2;
  if (*(_QWORD *)(a1 + 440))
  {
    v4 = objc_alloc((Class)NSNumber);
    v6 = objc_msgSend(v4, "initWithUnsignedLong:", objc_msgSend(objc_getProperty((id)a1, v5, 440, 1), "interfaceIndex"));
    objc_msgSend(v3, "addObject:", v6);

  }
  else
  {
    objc_msgSend(v2, "addObject:", &off_1000C1810);
  }
  if (objc_getProperty((id)a1, v7, 448, 1))
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v10 = objc_getProperty((id)a1, v9, 448, 1);
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v16;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v16 != v13)
            objc_enumerationMutation(v10);
          objc_msgSend(v3, "addObject:", *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v14), (_QWORD)v15);
          v14 = (char *)v14 + 1;
        }
        while (v12 != v14);
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v12);
    }

  }
  return v3;
}

void sub_10008D8A0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  unsigned int v12;
  const __CFString *v13;
  _QWORD v14[5];
  id v15;
  id v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  const __CFString *v20;
  __int16 v21;
  id v22;

  v5 = a2;
  v6 = a3;
  v8 = v6;
  if (a1)
  {
    v9 = ne_log_obj(v6, v7);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = objc_msgSend(v8, "state");
      if (v12 > 3)
        v13 = CFSTR("Unknown");
      else
        v13 = off_1000BEAE0[v12];
      *(_DWORD *)buf = 138412802;
      v18 = a1;
      v19 = 2112;
      v20 = v13;
      v21 = 2048;
      v22 = objc_msgSend(v5, "slotID");
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%@ cellular data connection became %@ for slot id %ld", buf, 0x20u);
    }

    v11 = *(void **)(a1 + 24);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10008DA20;
    v14[3] = &unk_1000BEAC0;
    v14[4] = a1;
    v15 = v8;
    v16 = v5;
    objc_msgSend(v11, "copyCellInfo:completion:", v16, v14);

  }
}

void sub_10008DA20(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t isKindOfClass;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  NSObject *Property;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  void *v54;
  uint64_t v55;
  NSObject *v56;
  void *i;
  void *v58;
  void *v59;
  id v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  void *v67;
  void *v68;
  id v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  const char *v76;
  void *v77;
  void *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  void *v85;
  id v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  const char *v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  char v105;
  int v106;
  id obj;
  uint64_t v108;
  id v109;
  id v110;
  id v111;
  _QWORD block[5];
  _QWORD v113[6];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint8_t v122[128];
  uint8_t v123[4];
  uint64_t v124;
  __int16 v125;
  void *v126;
  __int16 v127;
  void *v128;
  __int16 v129;
  void *v130;
  uint8_t buf[4];
  uint64_t v132;
  __int16 v133;
  id v134;
  __int16 v135;
  id v136;

  v5 = a2;
  v6 = a3;
  v8 = ne_log_obj(v6, v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v23 = *(_QWORD *)(a1 + 32);
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "legacyInfo"));
    *(_DWORD *)buf = 138412546;
    v132 = v23;
    v133 = 2112;
    v134 = v24;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%@ received cell info %@", buf, 0x16u);

  }
  if (v6)
  {
    v12 = ne_log_obj(v10, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v46 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v132 = v46;
      v133 = 2112;
      v134 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%@ failed to copy cellular info, error: %@", buf, 0x16u);
    }

    goto LABEL_100;
  }
  if (objc_msgSend(*(id *)(a1 + 40), "state") == 2)
  {
    v14 = *(_QWORD *)(a1 + 32);
    if (v14)
    {
      if (v5 && !*(_QWORD *)(v14 + 48))
      {
        v118 = 0u;
        v119 = 0u;
        v120 = 0u;
        v121 = 0u;
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "legacyInfo"));
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v118, buf, 16);
        if (v16)
        {
          v17 = v16;
          v18 = *(_QWORD *)v119;
LABEL_13:
          v19 = 0;
          while (1)
          {
            if (*(_QWORD *)v119 != v18)
              objc_enumerationMutation(v15);
            v20 = *(void **)(*((_QWORD *)&v118 + 1) + 8 * v19);
            v21 = objc_opt_class(NSDictionary);
            if ((objc_opt_isKindOfClass(v20, v21) & 1) != 0)
              break;
            if (v17 == (id)++v19)
            {
              v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v118, buf, 16);
              if (v17)
                goto LABEL_13;
              goto LABEL_19;
            }
          }
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", kCTCellMonitorMCC));
          if (!v22 || (v25 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v22, v25) & 1) == 0))
          {
            v26 = 0;
LABEL_32:

            goto LABEL_33;
          }
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", kCTCellMonitorMNC));
          if (!v26)
            goto LABEL_32;
          v27 = objc_opt_class(NSNumber);
          if ((objc_opt_isKindOfClass(v26, v27) & 1) == 0)
            goto LABEL_32;
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", kCTCellMonitorBandInfo));
          if (v28)
          {
            v29 = v28;
            v30 = objc_opt_class(NSNumber);
            if ((objc_opt_isKindOfClass(v29, v30) & 1) != 0)
            {
              obj = v29;
              v31 = objc_msgSend(v29, "isEqualToNumber:", &off_1000C1828);
              v106 = (int)v31;
              if ((_DWORD)v31)
              {
                isKindOfClass = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", kCTCellMonitorTAC));
                v35 = (void *)isKindOfClass;
                if (!isKindOfClass
                  || (v36 = objc_opt_class(NSNumber),
                      isKindOfClass = objc_opt_isKindOfClass(v35, v36),
                      (isKindOfClass & 1) == 0))
                {
                  v54 = v35;
                  v55 = ne_log_obj(isKindOfClass, v34);
                  v56 = objc_claimAutoreleasedReturnValue(v55);
                  if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v123 = 138412290;
                    v124 = v14;
                    _os_log_error_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "%@ failed to get TAC for CBRS network", v123, 0xCu);
                  }

LABEL_72:
                  v28 = obj;
                  goto LABEL_73;
                }
                v103 = v35;
                v37 = ne_log_obj(isKindOfClass, v34);
                v38 = objc_claimAutoreleasedReturnValue(v37);
                if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)v123 = 138413058;
                  v124 = v14;
                  v125 = 2112;
                  v126 = v22;
                  v127 = 2112;
                  v128 = v26;
                  v129 = 2112;
                  v130 = v103;
                  _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "%@ found CBRS(Band 48) network (MCC:%@ MNC:%@ TAC:%@)", v123, 0x2Au);
                }
              }
              else
              {
                v47 = ne_log_obj(v31, v32);
                v38 = objc_claimAutoreleasedReturnValue(v47);
                if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)v123 = 138412290;
                  v124 = v14;
                  _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "%@ this is not a CBRS network", v123, 0xCu);
                }
                v103 = 0;
              }

              if (objc_opt_class(MCProfileConnection)
                && (v48 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection")), v49 = objc_msgSend(v48, "isSupervised"), v48, v49))
              {
                v52 = ne_log_obj(v50, v51);
                v53 = objc_claimAutoreleasedReturnValue(v52);
                if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)v123 = 138412290;
                  v124 = v14;
                  _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "%@ this is a supervised device", v123, 0xCu);
                }

                v105 = 1;
              }
              else
              {
                v105 = 0;
              }
              v110 = objc_msgSend(v22, "integerValue");
              v109 = objc_msgSend(v26, "integerValue");
              v15 = v103;
              if (v106)
                v104 = (uint64_t)objc_msgSend(v103, "integerValue");
              else
                v104 = -1;
              v117 = 0u;
              v115 = 0u;
              v116 = 0u;
              v114 = 0u;
              obj = *(id *)(v14 + 32);
              v111 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v114, v122, 16);
              if (v111)
              {
                v102 = v26;
                v108 = *(_QWORD *)v115;
                while (2)
                {
                  for (i = 0; i != v111; i = (char *)i + 1)
                  {
                    if (*(_QWORD *)v115 != v108)
                      objc_enumerationMutation(obj);
                    v58 = *(void **)(*((_QWORD *)&v114 + 1) + 8 * (_QWORD)i);
                    v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "mobileCountryCode", v102));
                    v60 = objc_msgSend(v59, "integerValue");

                    v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "mobileNetworkCode"));
                    v62 = objc_msgSend(v61, "integerValue");

                    if (v110 == v60 && v109 == v62)
                    {
                      if ((v105 & 1) != 0
                        || v106
                        && (v66 = objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "trackingAreaCode"))) != 0
                        && (v67 = (void *)v66,
                            v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "trackingAreaCode")),
                            v69 = objc_msgSend(v68, "integerValue"),
                            v68,
                            v67,
                            (id)v104 == v69))
                      {
                        v70 = ne_log_obj(v63, v64);
                        v71 = objc_claimAutoreleasedReturnValue(v70);
                        if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
                        {
                          *(_DWORD *)v123 = 138412290;
                          v124 = v14;
                          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_INFO, "%@ found matching LTE network", v123, 0xCu);
                        }

                        v74 = ne_log_obj(v72, v73);
                        v75 = objc_claimAutoreleasedReturnValue(v74);
                        if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
                        {
                          v84 = *(_QWORD *)(a1 + 32);
                          v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "interfaceName"));
                          v86 = objc_msgSend(*(id *)(a1 + 48), "slotID");
                          *(_DWORD *)buf = 138412802;
                          v132 = v84;
                          v133 = 2112;
                          v134 = v85;
                          v135 = 2048;
                          v136 = v86;
                          _os_log_debug_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "%@ found configured private LTE network match (interface:[%@] Slot ID:[%ld])", buf, 0x20u);

                        }
                        v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "interfaceName"));
                        v78 = *(void **)(a1 + 32);
                        if (v78)
                          objc_setProperty_atomic(v78, v76, v77, 16);

                        v79 = objc_msgSend(*(id *)(a1 + 48), "slotID");
                        v81 = *(_QWORD *)(a1 + 32);
                        if (v81)
                          *(_QWORD *)(v81 + 48) = v79;
                        v82 = ne_log_obj(v79, v80);
                        v83 = objc_claimAutoreleasedReturnValue(v82);
                        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
                        {
                          v87 = *(_QWORD *)(a1 + 32);
                          if (v87)
                            v88 = *(void **)(v87 + 48);
                          else
                            v88 = 0;
                          *(_DWORD *)buf = 138412546;
                          v132 = v87;
                          v133 = 2048;
                          v134 = v88;
                          _os_log_debug_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "%@ Slot ID [%ld] is active", buf, 0x16u);
                        }

                        v40 = 1;
                        goto LABEL_34;
                      }
                    }
                  }
                  v111 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v114, v122, 16);
                  if (v111)
                    continue;
                  break;
                }
                v26 = v102;
                v15 = v103;
              }
              goto LABEL_72;
            }
            v28 = v29;
          }
LABEL_73:

          goto LABEL_32;
        }
LABEL_19:
        v22 = v15;
LABEL_33:

        v40 = 2;
LABEL_34:
        v41 = *(void **)(a1 + 32);
        if (v41 && objc_getProperty(v41, v39, 8, 1))
        {
          Property = *(NSObject **)(a1 + 32);
          if (Property)
          {
            Property = objc_getProperty(Property, v42, 40, 1);
            v44 = *(_QWORD *)(a1 + 32);
          }
          else
          {
            v44 = 0;
          }
          v113[0] = _NSConcreteStackBlock;
          v113[1] = 3221225472;
          v113[2] = sub_10008E41C;
          v113[3] = &unk_1000BEA98;
          v113[4] = v44;
          v113[5] = v40;
          v45 = v113;
LABEL_99:
          dispatch_async(Property, v45);
          goto LABEL_100;
        }
        goto LABEL_100;
      }
    }
    else if (v5)
    {
      goto LABEL_100;
    }
  }
  if (!objc_msgSend(*(id *)(a1 + 40), "state"))
  {
    v89 = *(_QWORD *)(a1 + 32);
    v90 = v89 ? *(id *)(v89 + 48) : 0;
    v91 = objc_msgSend(*(id *)(a1 + 48), "slotID");
    if (v90 == v91)
    {
      v93 = ne_log_obj(v91, v92);
      v94 = objc_claimAutoreleasedReturnValue(v93);
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
      {
        v100 = *(_QWORD *)(a1 + 32);
        if (v100)
          v101 = *(void **)(v100 + 48);
        else
          v101 = 0;
        *(_DWORD *)buf = 138412546;
        v132 = v100;
        v133 = 2048;
        v134 = v101;
        _os_log_debug_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEBUG, "%@ Slot ID [%ld] is inactive", buf, 0x16u);
      }

      v96 = *(_QWORD *)(a1 + 32);
      if (v96)
      {
        *(_QWORD *)(v96 + 48) = 0;
        v97 = *(void **)(a1 + 32);
        if (v97)
        {
          if (objc_getProperty(v97, v95, 8, 1))
          {
            Property = *(NSObject **)(a1 + 32);
            if (Property)
            {
              Property = objc_getProperty(Property, v98, 40, 1);
              v99 = *(_QWORD *)(a1 + 32);
            }
            else
            {
              v99 = 0;
            }
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_10008E450;
            block[3] = &unk_1000BEB80;
            block[4] = v99;
            v45 = block;
            goto LABEL_99;
          }
        }
      }
    }
  }
LABEL_100:

}

id sub_10008E41C(uint64_t a1, const char *a2)
{
  id Property;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 8, 1);
  return objc_msgSend(Property, "didReceiveStatusChangeWithInterface:", *(_QWORD *)(a1 + 40));
}

id sub_10008E450(uint64_t a1, const char *a2)
{
  id Property;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 8, 1);
  return objc_msgSend(Property, "didReceiveStatusChangeWithInterface:", 2);
}

uint64_t sub_10008E478(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10008E488(uint64_t a1)
{

}

void sub_10008E490(uint64_t *a1)
{
  sub_10008D8A0(a1[4], *(void **)(*(_QWORD *)(a1[5] + 8) + 40), *(void **)(*(_QWORD *)(a1[6] + 8) + 40));
}

void sub_100090B9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100090DD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100090EEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100091E34(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  _QWORD block[5];
  id v5;
  int v6;

  if (!*(_BYTE *)(a1 + 52) || sub_100076E38(*(void **)(a1 + 32)))
  {
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100091ED8;
    block[3] = &unk_1000BED20;
    v3 = *(void **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v5 = v3;
    v6 = *(_DWORD *)(a1 + 48);
    dispatch_sync(v2, block);

  }
}

void sub_100091ED8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NESMSessionClient *v4;
  uint64_t v5;
  _QWORD *v6;
  NSString *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  objc_super v15;
  _BYTE buffer[256];

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = [NESMSessionClient alloc];
  if (v4
    && (v5 = *(unsigned int *)(a1 + 48),
        v15.receiver = v4,
        v15.super_class = (Class)NESMSessionClient,
        (v6 = objc_msgSendSuper2(&v15, "init")) != 0))
  {
    v13 = v6;
    if (proc_name(v5, buffer, 0x100u) < 1)
      v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<unknown-name>[%d]"), v5, v12);
    else
      v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s[%d]"), buffer, v5);
    v9 = objc_claimAutoreleasedReturnValue(v7);
    v10 = (void *)v13[1];
    v13[1] = v9;

    v11 = (void *)v13[2];
    v13[2] = 0;

    v8 = v13;
  }
  else
  {
    v8 = 0;
  }
  v14 = v8;
  objc_msgSend(v2, "handleCommand:fromClient:", v3, v8);

}

void sub_100092004(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint32_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  _QWORD v22[5];
  int v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0x1F:
      v3 = ne_log_obj(a1, a2);
      v4 = objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v25 = v5;
        v6 = "%@: configuration is now disabled, stopping";
        goto LABEL_12;
      }
      break;
    case 0x20:
      v7 = ne_log_obj(a1, a2);
      v4 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v25 = v8;
        v6 = "%@: configuration has been removed, stopping";
        goto LABEL_12;
      }
      break;
    case 0x21:
      v9 = ne_log_obj(a1, a2);
      v4 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v25 = v10;
        v6 = "%@ has been superceded, stopping";
        goto LABEL_12;
      }
      break;
    case 0x25:
      v17 = ne_log_obj(a1, a2);
      v4 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v25 = v18;
        v6 = "%@: configuration has changed, stopping";
LABEL_12:
        v15 = v4;
        v16 = 12;
        goto LABEL_13;
      }
      break;
    default:
      v11 = ne_log_obj(a1, a2);
      v4 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_QWORD *)(a1 + 32);
        v13 = ne_session_stop_reason_to_string(*(unsigned int *)(a1 + 40));
        v14 = *(int *)(a1 + 40);
        *(_DWORD *)buf = 138412802;
        v25 = v12;
        v26 = 2080;
        v27 = v13;
        v28 = 2048;
        v29 = v14;
        v6 = "%@: %s (%lld), stopping";
        v15 = v4;
        v16 = 32;
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v6, buf, v16);
      }
      break;
  }

  if (objc_msgSend(*(id *)(a1 + 32), "status") == 1
    || !objc_msgSend(*(id *)(a1 + 32), "status"))
  {
    v19 = sub_10004EDE8((uint64_t)NESMServer);
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    v21 = *(void **)(a1 + 32);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100092294;
    v22[3] = &unk_1000BECF8;
    v22[4] = v21;
    v23 = *(_DWORD *)(a1 + 40);
    sub_100052CA0((uint64_t)v20, v21, v22);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "handleStopMessageWithReason:", *(unsigned int *)(a1 + 40));
  }
}

id sub_100092294(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleStopMessageWithReason:", *(unsigned int *)(a1 + 40));
}

id sub_1000922A4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "uninstall");
}

id sub_1000922AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "installPended");
}

uint64_t sub_1000922B4(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "install");
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1000922F0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  unsigned int v33;
  void *v34;
  void *v35;
  void *v36;
  unsigned int v37;
  void *v38;
  const char *v39;
  id v40;
  NSObject *Property;
  void *v42;
  void *v43;
  unsigned int v44;
  void *v45;
  id v46;
  const char *v47;
  _QWORD *v48;
  NSObject *v49;
  uint64_t result;
  unsigned int v51;
  _QWORD v52[4];
  id v53;
  unsigned int v54;
  void **block;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  _QWORD *v61;
  unsigned int v62;

  if (*(_QWORD *)(a1 + 32))
  {
    if (objc_msgSend(*(id *)(a1 + 40), "type") == 1)
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "VPN"));

      if (v2)
      {
        v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configuration"));
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "VPN"));
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "protocol"));
        v6 = objc_msgSend(v5, "type");
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "VPN"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "protocol"));
        v9 = objc_msgSend(v8, "type");

        if (v6 == v9)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configuration"));
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "VPN"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "protocol"));
          if (objc_msgSend(v12, "type") == (id)5)
          {
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configuration"));
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "VPN"));
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "protocol"));
            v51 = objc_msgSend(v15, "enableFallback");
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "VPN"));
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "protocol"));
            v18 = objc_msgSend(v17, "enableFallback");

            if (v51 != v18)
            {
              v19 = 32;
              v20 = 1;
              v21 = 1;
              goto LABEL_32;
            }
          }
          else
          {

          }
          goto LABEL_28;
        }
      }
    }
    else if (objc_msgSend(*(id *)(a1 + 40), "type") == 2)
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appVPN"));

      if (v22)
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configuration"));
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "appVPN"));
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "protocol"));
        v26 = objc_msgSend(v25, "type");
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appVPN"));
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "protocol"));
        v29 = objc_msgSend(v28, "type");

        if (v26 == v29)
          goto LABEL_28;
      }
    }
    else
    {
      if (objc_msgSend(*(id *)(a1 + 40), "type") == 3)
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "alwaysOnVPN"));
      }
      else if (objc_msgSend(*(id *)(a1 + 40), "type") == 4)
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentFilter"));
      }
      else if (objc_msgSend(*(id *)(a1 + 40), "type") == 5)
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pathController"));
      }
      else if (objc_msgSend(*(id *)(a1 + 40), "type") == 6)
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dnsProxy"));
      }
      else if (objc_msgSend(*(id *)(a1 + 40), "type") == 7)
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dnsSettings"));
      }
      else if (objc_msgSend(*(id *)(a1 + 40), "type") == 8)
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appPush"));
      }
      else
      {
        if (objc_msgSend(*(id *)(a1 + 40), "type") != 9)
          goto LABEL_28;
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "relay"));
      }
      v31 = v30;

      if (v31)
      {
LABEL_28:
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configuration"));
        if ((objc_msgSend(v32, "isEnabled") & 1) != 0)
        {
          v33 = objc_msgSend(*(id *)(a1 + 32), "isEnabled");

          if (!v33)
          {
            v20 = 0;
            v21 = 0;
            v19 = 31;
            goto LABEL_32;
          }
        }
        else
        {

        }
        objc_msgSend(*(id *)(a1 + 40), "handleUpdateConfiguration:", *(_QWORD *)(a1 + 32));
        goto LABEL_43;
      }
    }
  }
  v21 = 0;
  v19 = 32;
  v20 = 1;
LABEL_32:
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "server"));
  objc_msgSend(v34, "deregisterSession:", *(_QWORD *)(a1 + 40));

  objc_msgSend(*(id *)(a1 + 40), "stopIfNecessaryWithReason:", v19);
  v35 = *(void **)(a1 + 40);
  if (!v20)
  {
    objc_msgSend(v35, "handleUpdateConfiguration:", *(_QWORD *)(a1 + 32));
    if (!v21)
      goto LABEL_43;
    goto LABEL_38;
  }
  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "server"));
  v37 = objc_msgSend(*(id *)(a1 + 40), "type");
  v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configuration"));
  v40 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "identifier"));
  if (v36)
  {
    Property = objc_getProperty(v36, v39, 88, 1);
    block = _NSConcreteStackBlock;
    v56 = 3221225472;
    v57 = sub_1000515D8;
    v58 = &unk_1000BED20;
    v59 = v36;
    v60 = v40;
    LODWORD(v61) = v37;
    dispatch_async(Property, &block);

  }
  objc_msgSend(*(id *)(a1 + 40), "handleUpdateConfiguration:", 0);
  sub_10007BC60(*(void **)(a1 + 40));
  sub_10007BD2C(*(void **)(a1 + 40));
  sub_10007BCCC(*(void **)(a1 + 40));
  if ((v21 & 1) != 0)
  {
LABEL_38:
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configuration"));
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "identifier"));

    v44 = objc_msgSend(*(id *)(a1 + 40), "type");
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "server"));
    v52[0] = _NSConcreteStackBlock;
    v52[1] = 3221225472;
    v52[2] = sub_1000928BC;
    v52[3] = &unk_1000BEC80;
    v53 = v43;
    v54 = v44;
    v46 = v43;
    v48 = v52;
    if (v45)
    {
      v49 = objc_getProperty(v45, v47, 88, 1);
      block = _NSConcreteStackBlock;
      v56 = 3221225472;
      v57 = sub_1000517A8;
      v58 = &unk_1000BE0C0;
      v59 = v45;
      v60 = v46;
      v62 = v44;
      v61 = v48;
      dispatch_async(v49, &block);

    }
  }
LABEL_43:
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000928BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;

  if (!a2)
  {
    v3 = ne_log_obj(a1, 0);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(_DWORD *)(a1 + 40);
      v7 = 138412546;
      v8 = v5;
      v9 = 1024;
      v10 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to add a pending session request or failed to load session for %@ (%d)", (uint8_t *)&v7, 0x12u);
    }

  }
}

id *sub_100092978(id *result)
{
  if (*((_BYTE *)result + 40))
    return (id *)objc_msgSend(result[4], "invalidate");
  return result;
}

uint64_t sub_10009298C(uint64_t a1)
{
  uint64_t result;

  result = PLShouldLogRegisteredEvent(145, *(_QWORD *)(a1 + 32));
  if ((_DWORD)result)
    return PLLogRegisteredEvent(145, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);
  return result;
}

void sub_1000929D0(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.networkextension.powerlog", 0);
  v2 = (void *)qword_1000CF958;
  qword_1000CF958 = (uint64_t)v1;

}

void sub_1000929FC(id a1)
{
  unint64_t v1;
  unint64_t v2;
  mach_timebase_info info;

  info = 0;
  if (!mach_timebase_info(&info))
  {
    LODWORD(v1) = info.numer;
    LODWORD(v2) = info.denom;
    *(double *)&qword_1000CF968 = (double)v1 / (double)v2 / 1000.0 / 1000000.0;
  }
}

id sub_100092A54(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleNetworkPrepareResult:", 0);
}

id sub_100092A60(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleNetworkPrepareResult:", *(_QWORD *)(a1 + 40));
}

id sub_100092A6C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleNetworkPrepareResult:", *(_QWORD *)(a1 + 40));
}

void sub_100092A78(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;

  if (objc_msgSend(*(id *)(a1 + 32), "type") != 2)
    sub_10007C090(*(id *)(a1 + 32), 0);
  v2 = objc_msgSend(*(id *)(a1 + 32), "type");
  v3 = *(_QWORD *)(a1 + 32);
  if (v2 == 1)
  {
    v4 = objc_opt_class(NESMVPNSession);
    if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0 && objc_msgSend(*(id *)(a1 + 32), "tunnelKind") == (id)2)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastPrimaryInterface"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "server"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "primaryCellularInterface"));
      goto LABEL_10;
    }
    v8 = *(void **)(a1 + 32);
  }
  else
  {
    v8 = *(void **)(a1 + 32);
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastPrimaryInterface"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "server"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "primaryPhysicalInterface"));
LABEL_10:
  v9 = v7;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "interfaceName"));
  v11 = objc_msgSend(v5, "isEqualToString:", v10);

  if ((v11 & 1) == 0)
  {
    v12 = *(void **)(a1 + 32);
    if (v12)
      sub_1000770A8(v12);
  }
}

void sub_100092BAC(void *a1, const char *a2)
{
  SEL v3;
  _xpc_connection_s *Property;
  xpc_object_t message;

  if (a1)
  {
    if (objc_getProperty(a1, a2, 16, 1))
    {
      message = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_int64(message, "SessionNotificationType", 1);
      Property = (_xpc_connection_s *)objc_getProperty(a1, v3, 16, 1);
      xpc_connection_send_message(Property, message);

    }
  }
}

BOOL sub_100092C34(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v3;
  void *v4;
  _BOOL8 v5;

  if (!a1)
    return 0;
  value = xpc_dictionary_get_value(xdict, "SessionOptions");
  v3 = (void *)objc_claimAutoreleasedReturnValue(value);
  v4 = v3;
  v5 = v3 && xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary && xpc_dictionary_get_BOOL(v4, "is-on-demand");

  return v5;
}

void sub_100092CB4(uint64_t a1, char a2)
{
  NSObject *v4;
  void *v5;
  _QWORD v6[5];
  id v7;
  id v8;
  char v9;

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100092D60;
  v6[3] = &unk_1000BEBA8;
  v9 = a2;
  v5 = *(void **)(a1 + 40);
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v5;
  v8 = *(id *)(a1 + 48);
  dispatch_async(v4, v6);

}

void sub_100092D60(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  if (*(_BYTE *)(a1 + 56))
  {
    v3 = kdebug_trace(726990904, 0, 0, 0, 0);
    v5 = ne_log_obj(v3, v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v14 = 138412290;
      v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@: Successfully registered", (uint8_t *)&v14, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "handleStartMessage:", *(_QWORD *)(a1 + 48));
  }
  else
  {
    v8 = ne_log_obj(a1, a2);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_QWORD *)(a1 + 40);
      v14 = 138412546;
      v15 = v10;
      v16 = 2112;
      v17 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@: Rejected start command from %@", (uint8_t *)&v14, 0x16u);
    }

    sub_100092BAC(*(void **)(a1 + 40), v12);
    objc_msgSend(*(id *)(a1 + 32), "removeAllClients");
  }
  v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "messageQueue"));
  dispatch_resume(v13);

}

id sub_100092EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  id Property;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  id v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t v20[128];
  uint8_t buf[4];
  uint64_t v22;

  v3 = ne_log_obj(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: Removing all clients", buf, 0xCu);
  }

  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, v6, 48, 1);
  v8 = Property;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        sub_100093028(*(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v12));
        v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v14 = *(id *)(a1 + 32);
  if (v14)
    v14 = objc_getProperty(v14, v13, 48, 1);
  return objc_msgSend(v14, "removeAllObjects", (_QWORD)v16);
}

void sub_100093028(uint64_t a1)
{
  _xpc_connection_s *v2;

  if (a1)
  {
    v2 = *(_xpc_connection_s **)(a1 + 16);
    if (v2)
    {
      xpc_connection_cancel(v2);
      v2 = *(_xpc_connection_s **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 16) = 0;

  }
}

void sub_100093060(uint64_t a1)
{
  NESMSessionClient *v2;
  void *v3;
  _xpc_connection_s *v4;
  uint64_t pid;
  const char *context;
  uint64_t v7;
  NSString *description;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  _xpc_connection_s *v17;
  const char *v18;
  id Property;
  id v20;
  _QWORD handler[6];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  NESMSessionClient *v27;
  objc_super v28;
  int buffer;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;

  v22 = 0;
  v23 = &v22;
  v24 = 0x3032000000;
  v25 = sub_100093360;
  v26 = sub_100093370;
  v2 = [NESMSessionClient alloc];
  v3 = *(void **)(a1 + 32);
  v4 = v3;
  if (v2)
  {
    v28.receiver = v2;
    v28.super_class = (Class)NESMSessionClient;
    v2 = (NESMSessionClient *)objc_msgSendSuper2(&v28, "init");
    if (v2)
    {
      pid = xpc_connection_get_pid(v4);
      context = (const char *)xpc_connection_get_context(v4);
      if (proc_name(pid, &buffer, 0x100u) < 1)
        v7 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<unknown-name>[%d]"), pid));
      else
        v7 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s[%d]"), &buffer, pid));
      description = v2->_description;
      v2->_description = (NSString *)v7;

      objc_storeStrong((id *)&v2->_connection, v3);
      v2->_permissions = 0;
      if (context && !strcmp(context, "com.apple.nesessionmanager.flow-divert-token"))
        v2->_permissions = 1;
      v9 = (void *)xpc_connection_copy_entitlement_value(v4, "com.apple.private.network.socket-delegate");
      v10 = v9;
      if (v9 && xpc_get_type(v9) == (xpc_type_t)&_xpc_type_BOOL && xpc_BOOL_get_value(v10))
        v2->_permissions |= 2uLL;

    }
  }

  v27 = v2;
  v13 = ne_log_obj(v11, v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_QWORD *)(a1 + 40);
    v16 = v23[5];
    buffer = 138412546;
    v30 = v15;
    v31 = 2112;
    v32 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%@: Adding a connection for client %@", (uint8_t *)&buffer, 0x16u);
  }

  kdebug_trace(726990864, 0, 0, 0, 0);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100093378;
  handler[3] = &unk_1000BEB30;
  v17 = *(_xpc_connection_s **)(a1 + 32);
  handler[4] = *(_QWORD *)(a1 + 40);
  handler[5] = &v22;
  xpc_connection_set_event_handler(v17, handler);
  Property = *(id *)(a1 + 40);
  if (Property)
    Property = objc_getProperty(Property, v18, 48, 1);
  v20 = Property;
  objc_msgSend(v20, "addObject:", v23[5]);

  xpc_connection_resume(*(xpc_connection_t *)(a1 + 32));
  _Block_object_dispose(&v22, 8);

}

void sub_10009333C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100093360(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100093370(uint64_t a1)
{

}

void sub_100093378(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  _QWORD block[5];
  id v8;
  uint64_t v9;

  v3 = a2;
  kdebug_trace(726990872, 0, 0, 0, 0);
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "messageQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100093434;
  block[3] = &unk_1000BEB08;
  v5 = *(_QWORD *)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, block);

}

void sub_100093434(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  _QWORD block[4];
  id v6;
  uint64_t v7;
  uint64_t v8;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000934C0;
  block[3] = &unk_1000BEB08;
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v7 = v4;
  v8 = *(_QWORD *)(a1 + 48);
  dispatch_sync(v2, block);

}

void sub_1000934C0(uint64_t a1)
{
  void *v2;
  xpc_type_t type;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  id Property;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  v2 = *(void **)(a1 + 32);
  if (!v2)
  {
    v5 = 0;
    goto LABEL_5;
  }
  type = xpc_get_type(v2);
  if (type != (xpc_type_t)&_xpc_type_error)
  {
    v5 = *(_QWORD *)(a1 + 32);
LABEL_5:
    objc_msgSend(*(id *)(a1 + 40), "handleCommand:fromClient:", v5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
    return;
  }
  v6 = ne_log_obj(type, v4);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v14 = 138412546;
    v15 = v8;
    v16 = 2112;
    v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@: Removing a connection for client %@", (uint8_t *)&v14, 0x16u);
  }

  kdebug_trace(726990868, 0, 0, 0, 0);
  sub_100093028(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  Property = *(id *)(a1 + 40);
  if (Property)
    Property = objc_getProperty(Property, v10, 48, 1);
  objc_msgSend(Property, "removeObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = 0;

}

id objc_msgSend_DNSSearchDomainMatch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "DNSSearchDomainMatch");
}

id objc_msgSend_DNSServerAddressMatch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "DNSServerAddressMatch");
}

id objc_msgSend_DNSSettings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "DNSSettings");
}

id objc_msgSend_HTTP2RelayURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "HTTP2RelayURL");
}

id objc_msgSend_HTTP3RelayURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "HTTP3RelayURL");
}

id objc_msgSend_IPv4Settings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "IPv4Settings");
}

id objc_msgSend_IPv6Settings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "IPv6Settings");
}

id objc_msgSend_MTU(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "MTU");
}

id objc_msgSend_SCNCStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SCNCStatus");
}

id objc_msgSend_SSIDMatch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SSIDMatch");
}

id objc_msgSend_URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUIDString");
}

id objc_msgSend_VPN(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "VPN");
}

id objc_msgSend__createDispatchData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_createDispatchData");
}

id objc_msgSend__endpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_endpoint");
}

id objc_msgSend__setEndpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setEndpoint:");
}

id objc_msgSend__xpcConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_xpcConnection");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_accountIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountIdentifier:");
}

id objc_msgSend_action(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "action");
}

id objc_msgSend_active(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "active");
}

id objc_msgSend_activeInterfaceProtocolKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeInterfaceProtocolKey");
}

id objc_msgSend_addClientConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addClientConnection:");
}

id objc_msgSend_addDefaultDropPolicyForPluginUUIDs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addDefaultDropPolicyForPluginUUIDs:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addNetworkAgentToInterfaceNamed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addNetworkAgentToInterfaceNamed:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addPointer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPointer:");
}

id objc_msgSend_addPolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPolicy:");
}

id objc_msgSend_addPolicy_storeLocally_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPolicy:storeLocally:");
}

id objc_msgSend_additionalHTTPHeaderFields(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "additionalHTTPHeaderFields");
}

id objc_msgSend_address(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "address");
}

id objc_msgSend_addressFamily(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addressFamily");
}

id objc_msgSend_addresses(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addresses");
}

id objc_msgSend_advisoryInterfaceArray(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "advisoryInterfaceArray");
}

id objc_msgSend_agentFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "agentFlags");
}

id objc_msgSend_agentPluginClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "agentPluginClass");
}

id objc_msgSend_agentUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "agentUUID");
}

id objc_msgSend_allInterfaces(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allInterfaces");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allValues");
}

id objc_msgSend_allowedCaptiveNetworkPlugins(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowedCaptiveNetworkPlugins");
}

id objc_msgSend_allowsUnsafeSocketAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowsUnsafeSocketAccess");
}

id objc_msgSend_alwaysOnVPN(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "alwaysOnVPN");
}

id objc_msgSend_answerData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "answerData");
}

id objc_msgSend_appPush(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appPush");
}

id objc_msgSend_appRules(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appRules");
}

id objc_msgSend_appVPN(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appVPN");
}

id objc_msgSend_appendPrettyObject_withName_andIndent_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendPrettyObject:withName:andIndent:options:");
}

id objc_msgSend_application(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "application");
}

id objc_msgSend_applicationExceptions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationExceptions");
}

id objc_msgSend_applicationIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationIdentifier");
}

id objc_msgSend_applications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applications");
}

id objc_msgSend_appliesToLoopback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appliesToLoopback");
}

id objc_msgSend_apply(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "apply");
}

id objc_msgSend_applyNWPathOverridesIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applyNWPathOverridesIfNeeded");
}

id objc_msgSend_applyOverrides(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applyOverrides");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayByAddingObject:");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_attachIPCWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "attachIPCWithCompletionHandler:");
}

id objc_msgSend_auditTokenData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "auditTokenData");
}

id objc_msgSend_authenticateWithParameters_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authenticateWithParameters:completionHandler:");
}

id objc_msgSend_authenticationMethod(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authenticationMethod");
}

id objc_msgSend_authenticationPlugin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authenticationPlugin");
}

id objc_msgSend_authenticationPluginBundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authenticationPluginBundleIdentifier");
}

id objc_msgSend_authenticationPluginType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authenticationPluginType");
}

id objc_msgSend_auxiliaryDataKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "auxiliaryDataKey");
}

id objc_msgSend_bestAvailableNetworkDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bestAvailableNetworkDescription");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_builtInPlugInsURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "builtInPlugInsURL");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_bundlePath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundlePath");
}

id objc_msgSend_bundleRecordWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleRecordWithBundleIdentifier:allowPlaceholder:error:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bytes");
}

id objc_msgSend_cPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cPath");
}

id objc_msgSend_cStringUsingEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cStringUsingEncoding:");
}

id objc_msgSend_cachedMachOUUIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedMachOUUIDs");
}

id objc_msgSend_cachedStateHandlers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedStateHandlers");
}

id objc_msgSend_canSleep(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canSleep");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancel");
}

id objc_msgSend_cellularBehavior(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularBehavior");
}

id objc_msgSend_cellularFallbackFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularFallbackFlags");
}

id objc_msgSend_certificateReferences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "certificateReferences");
}

id objc_msgSend_characterSetWithCharactersInString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "characterSetWithCharactersInString:");
}

id objc_msgSend_checkPluginInstalledWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkPluginInstalledWithCompletionHandler:");
}

id objc_msgSend_clear(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clear");
}

id objc_msgSend_clientFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientFlags:");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "code");
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commit");
}

id objc_msgSend_compact(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compact");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_configMethod(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configMethod");
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configuration");
}

id objc_msgSend_configurationIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configurationIdentifier");
}

id objc_msgSend_configurationSignature(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configurationSignature");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connectCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectCount");
}

id objc_msgSend_connectParameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectParameters");
}

id objc_msgSend_connectTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectTime");
}

id objc_msgSend_connectWithParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectWithParameters:");
}

id objc_msgSend_connectedCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectedCount");
}

id objc_msgSend_connectionRules(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectionRules");
}

id objc_msgSend_considerAlternateUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "considerAlternateUpdate");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_contentFilter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentFilter");
}

id objc_msgSend_contentsOfDirectoryAtPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentsOfDirectoryAtPath:error:");
}

id objc_msgSend_controlPolicySession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "controlPolicySession");
}

id objc_msgSend_controlSocket(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "controlSocket");
}

id objc_msgSend_controlUnit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "controlUnit");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copy");
}

id objc_msgSend_copyAggregatePathRules(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyAggregatePathRules");
}

id objc_msgSend_copyAppRuleBySigningIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyAppRuleBySigningIdentifier:");
}

id objc_msgSend_copyAuxiliaryDataForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyAuxiliaryDataForKey:");
}

id objc_msgSend_copyCEndpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCEndpoint");
}

id objc_msgSend_copyCachedMachOUUIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCachedMachOUUIDs");
}

id objc_msgSend_copyCarrierBundleValue_keyHierarchy_bundleType_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCarrierBundleValue:keyHierarchy:bundleType:error:");
}

id objc_msgSend_copyCellInfo_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCellInfo:completion:");
}

id objc_msgSend_copyDNSUUIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyDNSUUIDs");
}

id objc_msgSend_copyDefaultRouteCacheIsIPv6_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyDefaultRouteCacheIsIPv6:");
}

id objc_msgSend_copyExtendedStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyExtendedStatus");
}

id objc_msgSend_copyLegacyDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyLegacyDictionary");
}

id objc_msgSend_copyLegacyIPSecDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyLegacyIPSecDictionary");
}

id objc_msgSend_copyNEHelperUUIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyNEHelperUUIDs");
}

id objc_msgSend_copyPassword(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyPassword");
}

id objc_msgSend_copyPropertiesForNetworkPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyPropertiesForNetworkPath:");
}

id objc_msgSend_copyRouteCacheFromRoutes_isIPv6_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyRouteCacheFromRoutes:isIPv6:");
}

id objc_msgSend_copyStatistics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyStatistics");
}

id objc_msgSend_copyTunnelInterfaceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyTunnelInterfaceName");
}

id objc_msgSend_copyUUIDsForBundleID_uid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyUUIDsForBundleID:uid:");
}

id objc_msgSend_copyUUIDsForExecutable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyUUIDsForExecutable:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_createConnectParametersWithStartMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createConnectParametersWithStartMessage:");
}

id objc_msgSend_createDisconnectErrorWithDomain_code_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDisconnectErrorWithDomain:code:");
}

id objc_msgSend_createResponse(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createResponse");
}

id objc_msgSend_customEntitlement_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "customEntitlement:");
}

id objc_msgSend_dataProviderDesignatedRequirement(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataProviderDesignatedRequirement");
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataTaskWithRequest:completionHandler:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "date");
}

id objc_msgSend_defaultAction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultAction");
}

id objc_msgSend_defaultDropType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultDropType");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultSessionConfiguration");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultWorkspace");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "delegate");
}

id objc_msgSend_delegateInterfaceAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "delegateInterfaceAddress");
}

id objc_msgSend_delegateIsPlatformBinary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "delegateIsPlatformBinary");
}

id objc_msgSend_delegateQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "delegateQueue");
}

id objc_msgSend_denyAll(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "denyAll");
}

id objc_msgSend_denyCellularFallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "denyCellularFallback");
}

id objc_msgSend_denyMulticast(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "denyMulticast");
}

id objc_msgSend_deregisterSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deregisterSession:");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "description");
}

id objc_msgSend_descriptionWithIndent_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "descriptionWithIndent:options:");
}

id objc_msgSend_descriptionWithOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "descriptionWithOptions:");
}

id objc_msgSend_designatedRequirement(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "designatedRequirement");
}

id objc_msgSend_destinationAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "destinationAddress");
}

id objc_msgSend_destinationNetworkPrefixLength(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "destinationNetworkPrefixLength");
}

id objc_msgSend_destinationSubnetMask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "destinationSubnetMask");
}

id objc_msgSend_destroy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "destroy");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didExtensionExit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didExtensionExit:");
}

id objc_msgSend_didStopTrackingNOI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didStopTrackingNOI:");
}

id objc_msgSend_disableDefaultDrop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableDefaultDrop");
}

id objc_msgSend_disableDefaultDropAfterBoot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableDefaultDropAfterBoot");
}

id objc_msgSend_disableOnDemand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableOnDemand");
}

id objc_msgSend_disconnectOnIdle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disconnectOnIdle");
}

id objc_msgSend_disconnectOnIdleTimeout(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disconnectOnIdleTimeout");
}

id objc_msgSend_disconnectOnSleep(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disconnectOnSleep");
}

id objc_msgSend_disconnectOnWake(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disconnectOnWake");
}

id objc_msgSend_disconnectOnWakeTimeout(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disconnectOnWakeTimeout");
}

id objc_msgSend_disconnectWithReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disconnectWithReason:");
}

id objc_msgSend_disconnectedCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disconnectedCount");
}

id objc_msgSend_disposeWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disposeWithCompletionHandler:");
}

id objc_msgSend_divertSocketToControlUnit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "divertSocketToControlUnit:");
}

id objc_msgSend_dnsAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dnsAgent");
}

id objc_msgSend_dnsAgentRegistration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dnsAgentRegistration");
}

id objc_msgSend_dnsOverHTTPSURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dnsOverHTTPSURL");
}

id objc_msgSend_dnsProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dnsProxy");
}

id objc_msgSend_dnsRedirectionDetector(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dnsRedirectionDetector");
}

id objc_msgSend_dnsRedirectionTransaction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dnsRedirectionTransaction");
}

id objc_msgSend_dnsSettings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dnsSettings");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domain");
}

id objc_msgSend_domain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domain:");
}

id objc_msgSend_domainName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domainName");
}

id objc_msgSend_drop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drop");
}

id objc_msgSend_dropServer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dropServer");
}

id objc_msgSend_dropWithFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dropWithFlags:");
}

id objc_msgSend_effectiveApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectiveApplication:");
}

id objc_msgSend_effectivePID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectivePID:");
}

id objc_msgSend_effectivePID_version_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectivePID:version:");
}

id objc_msgSend_enableFallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableFallback");
}

id objc_msgSend_enableManualMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableManualMode");
}

id objc_msgSend_enableRevocationCheck(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableRevocationCheck");
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enabled");
}

id objc_msgSend_endpointWithCEndpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endpointWithCEndpoint:");
}

id objc_msgSend_endpointWithHostname_port_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endpointWithHostname:port:");
}

id objc_msgSend_enforceRoutes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enforceRoutes");
}

id objc_msgSend_enterWithSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enterWithSession:");
}

id objc_msgSend_entitlement(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "entitlement");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_establishIPCPending(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "establishIPCPending");
}

id objc_msgSend_ethernetAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ethernetAddress");
}

id objc_msgSend_exceptionApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exceptionApps");
}

id objc_msgSend_excludeAPNs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "excludeAPNs");
}

id objc_msgSend_excludeCellularServices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "excludeCellularServices");
}

id objc_msgSend_excludeDeviceCommunication(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "excludeDeviceCommunication");
}

id objc_msgSend_excludeLocalNetworks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "excludeLocalNetworks");
}

id objc_msgSend_excludedDomains(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "excludedDomains");
}

id objc_msgSend_excludedNetworkRules(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "excludedNetworkRules");
}

id objc_msgSend_excludedRoutes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "excludedRoutes");
}

id objc_msgSend_extensibleSSOProvider(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extensibleSSOProvider");
}

id objc_msgSend_extensionIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extensionIdentifier");
}

id objc_msgSend_extension_pid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extension_pid");
}

id objc_msgSend_externalIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "externalIdentifier");
}

id objc_msgSend_failedConnectCountWithinInterval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "failedConnectCountWithinInterval");
}

id objc_msgSend_fallbackTraffic(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fallbackTraffic");
}

id objc_msgSend_fileDescriptor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileDescriptor");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_filterBrowsers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filterBrowsers");
}

id objc_msgSend_filterDataProviderBundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filterDataProviderBundleIdentifier");
}

id objc_msgSend_filterPacketProviderBundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filterPacketProviderBundleIdentifier");
}

id objc_msgSend_filterPackets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filterPackets");
}

id objc_msgSend_filterSockets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filterSockets");
}

id objc_msgSend_filterWithControlUnit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filterWithControlUnit:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_finishTasksAndInvalidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finishTasksAndInvalidate");
}

id objc_msgSend_firstFailedConnectTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstFailedConnectTime");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstObject");
}

id objc_msgSend_flowLocalAddress_prefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flowLocalAddress:prefix:");
}

id objc_msgSend_flowRemoteAddress_prefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flowRemoteAddress:prefix:");
}

id objc_msgSend_flowRemoteAddressEmpty(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flowRemoteAddressEmpty");
}

id objc_msgSend_gatewayAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gatewayAddress");
}

id objc_msgSend_generateSignature(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateSignature");
}

id objc_msgSend_getConnectionState_connectionType_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getConnectionState:connectionType:error:");
}

id objc_msgSend_getCurrentDataSubscriptionContextSync_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentDataSubscriptionContextSync:");
}

id objc_msgSend_getFilterClientConnectionWithCompletionHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getFilterClientConnectionWithCompletionHandler:completionHandler:");
}

id objc_msgSend_getIDSNetworkAgentDomain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getIDSNetworkAgentDomain");
}

id objc_msgSend_getNATTKeepAliveOverCellForPreferredDataContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNATTKeepAliveOverCellForPreferredDataContext:");
}

id objc_msgSend_getSubscriptionInfoWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSubscriptionInfoWithError:");
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getUUIDBytes:");
}

id objc_msgSend_getVirtualInterfaceMTU_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getVirtualInterfaceMTU:");
}

id objc_msgSend_gid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gid");
}

id objc_msgSend_grade(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "grade");
}

id objc_msgSend_handle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handle");
}

id objc_msgSend_handleAgentClientConnection_WithMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleAgentClientConnection:WithMessage:");
}

id objc_msgSend_handleCaptiveNetworkPluginsChanged(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleCaptiveNetworkPluginsChanged");
}

id objc_msgSend_handleChangeEventForFallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleChangeEventForFallback:");
}

id objc_msgSend_handleChangeEventForFallbackInterfaces_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleChangeEventForFallbackInterfaces:");
}

id objc_msgSend_handleChangeEventForInterface_newFlags_previousFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleChangeEventForInterface:newFlags:previousFlags:");
}

id objc_msgSend_handleChangeEventForRankedInterfaces(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleChangeEventForRankedInterfaces");
}

id objc_msgSend_handleClearConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleClearConfiguration");
}

id objc_msgSend_handleClearConfigurationResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleClearConfigurationResult:");
}

id objc_msgSend_handleCommand_fromClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleCommand:fromClient:");
}

id objc_msgSend_handleDeviceLock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleDeviceLock");
}

id objc_msgSend_handleDeviceUnlock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleDeviceUnlock");
}

id objc_msgSend_handleDisposeWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleDisposeWithCompletionHandler:");
}

id objc_msgSend_handleEstablishIPC(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleEstablishIPC");
}

id objc_msgSend_handleEstablishIPCMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleEstablishIPCMessage:");
}

id objc_msgSend_handleEstablishIPCReplySent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleEstablishIPCReplySent");
}

id objc_msgSend_handleGetInfoMessage_withType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleGetInfoMessage:withType:");
}

id objc_msgSend_handleGetStatusMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleGetStatusMessage:");
}

id objc_msgSend_handleInitializeState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleInitializeState");
}

id objc_msgSend_handleInstalledAppsChanged(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleInstalledAppsChanged");
}

id objc_msgSend_handleInterfaceAvailable_changed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleInterfaceAvailable:changed:");
}

id objc_msgSend_handleInterfaceUnavailable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleInterfaceUnavailable:");
}

id objc_msgSend_handleNetworkConfigurationChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleNetworkConfigurationChange:");
}

id objc_msgSend_handleNetworkDetectionNotification_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleNetworkDetectionNotification:");
}

id objc_msgSend_handleNetworkPrepareResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleNetworkPrepareResult:");
}

id objc_msgSend_handlePlugin_authenticationCompleteWithResults_status_andError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePlugin:authenticationCompleteWithResults:status:andError:");
}

id objc_msgSend_handlePlugin_didAttachIPCWithEndpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePlugin:didAttachIPCWithEndpoint:");
}

id objc_msgSend_handlePlugin_didStartWithPID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePlugin:didStartWithPID:error:");
}

id objc_msgSend_handlePlugin_statusDidChangeToDisconnectedWithReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePlugin:statusDidChangeToDisconnectedWithReason:");
}

id objc_msgSend_handlePlugin_statusDidChangeToDisconnectingWithReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePlugin:statusDidChangeToDisconnectingWithReason:");
}

id objc_msgSend_handlePlugin_statusDidChangeToIdleWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePlugin:statusDidChangeToIdleWithError:");
}

id objc_msgSend_handlePlugin_statusDidChangeToStoppingWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePlugin:statusDidChangeToStoppingWithError:");
}

id objc_msgSend_handlePluginDidDetachIPC_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePluginDidDetachIPC:");
}

id objc_msgSend_handlePluginDisposeComplete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePluginDisposeComplete:");
}

id objc_msgSend_handlePluginStatusDidChangeToAuthenticating_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePluginStatusDidChangeToAuthenticating:");
}

id objc_msgSend_handlePluginStatusDidChangeToConnected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePluginStatusDidChangeToConnected:");
}

id objc_msgSend_handlePluginStatusDidChangeToContacting_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePluginStatusDidChangeToContacting:");
}

id objc_msgSend_handlePluginStatusDidChangeToNegotiating_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePluginStatusDidChangeToNegotiating:");
}

id objc_msgSend_handlePluginStatusDidChangeToReasserting_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePluginStatusDidChangeToReasserting:");
}

id objc_msgSend_handlePluginStatusDidChangeToRunning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePluginStatusDidChangeToRunning:");
}

id objc_msgSend_handlePluginStatusDidChangeToStarting_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePluginStatusDidChangeToStarting:");
}

id objc_msgSend_handlePluginStatusDidChangeToUpdating_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePluginStatusDidChangeToUpdating:");
}

id objc_msgSend_handleProviderError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleProviderError:");
}

id objc_msgSend_handleProviderError_forMessageID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleProviderError:forMessageID:");
}

id objc_msgSend_handleProviderInstallationStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleProviderInstallationStatus:");
}

id objc_msgSend_handleProviderInstallationStatus_status_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleProviderInstallationStatus:status:");
}

id objc_msgSend_handleProviderStopped(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleProviderStopped");
}

id objc_msgSend_handleProviderStopped_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleProviderStopped:");
}

id objc_msgSend_handleSecuritySessionInfoRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSecuritySessionInfoRequest:");
}

id objc_msgSend_handleSendInfoMessage_withType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSendInfoMessage:withType:");
}

id objc_msgSend_handleSetConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSetConfiguration");
}

id objc_msgSend_handleSetConfigurationResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSetConfigurationResult:");
}

id objc_msgSend_handleSleep(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSleep");
}

id objc_msgSend_handleSleepTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSleepTime:");
}

id objc_msgSend_handleStartMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleStartMessage:");
}

id objc_msgSend_handleStop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleStop");
}

id objc_msgSend_handleStopMessageWithReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleStopMessageWithReason:");
}

id objc_msgSend_handleTimeout(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTimeout");
}

id objc_msgSend_handleUpdateConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleUpdateConfiguration");
}

id objc_msgSend_handleUpdateConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleUpdateConfiguration:");
}

id objc_msgSend_handleUpdateConfiguration_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleUpdateConfiguration:withCompletionHandler:");
}

id objc_msgSend_handleUserLogout(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleUserLogout");
}

id objc_msgSend_handleUserSwitch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleUserSwitch");
}

id objc_msgSend_handleWakeup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleWakeup");
}

id objc_msgSend_hasDefaultRoute(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasDefaultRoute");
}

id objc_msgSend_hasNonDefaultRules(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasNonDefaultRules");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasProviderWithBundleIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasProviderWithBundleIdentifier:");
}

id objc_msgSend_hasRequiredFrameworks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasRequiredFrameworks");
}

id objc_msgSend_hasSignedResult(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasSignedResult");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_highPolicySession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "highPolicySession");
}

id objc_msgSend_hostname(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hostname");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identifier");
}

id objc_msgSend_identityReference(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identityReference");
}

id objc_msgSend_identityReferenceInternal(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identityReferenceInternal");
}

id objc_msgSend_ignoreFallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ignoreFallback");
}

id objc_msgSend_ignoreRouteRules(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ignoreRouteRules");
}

id objc_msgSend_includeAllNetworks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "includeAllNetworks");
}

id objc_msgSend_includedNetworkRules(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "includedNetworkRules");
}

id objc_msgSend_includedRoutes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "includedRoutes");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_initAndShowAlertWithHeader_message_alternateMessage_defaultMessage_noBoldDefault_usePrivacyIcon_extensionItem_callbackQueue_callbackHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initAndShowAlertWithHeader:message:alternateMessage:defaultMessage:noBoldDefault:usePrivacyIcon:extensionItem:callbackQueue:callbackHandler:");
}

id objc_msgSend_initFlowDivertControlSocketWithParams_order_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initFlowDivertControlSocketWithParams:order:");
}

id objc_msgSend_initFlowDivertDataSocket(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initFlowDivertDataSocket");
}

id objc_msgSend_initFromData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initFromData:");
}

id objc_msgSend_initFromLegacyDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initFromLegacyDictionary:");
}

id objc_msgSend_initFromXPCConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initFromXPCConnection:");
}

id objc_msgSend_initFromXPCMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initFromXPCMessage:");
}

id objc_msgSend_initWithAgent_delegateQueue_andDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAgent:delegateQueue:andDelegate:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithBundleType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBundleType:");
}

id objc_msgSend_initWithCString_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCString:encoding:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithConfigUUID_sessionType_name_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConfigUUID:sessionType:name:");
}

id objc_msgSend_initWithConfiguration_andServer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConfiguration:andServer:");
}

id objc_msgSend_initWithConfiguration_andServer_andProtocol_andPluginType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConfiguration:andServer:andProtocol:andPluginType:");
}

id objc_msgSend_initWithConfiguration_andServer_andProtocol_andPluginType_andSessionType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConfiguration:andServer:andProtocol:andPluginType:andSessionType:");
}

id objc_msgSend_initWithConfiguration_andServer_andProtocol_andPluginType_andSessionType_sessionQueue_messageQueue_tunnelKind_parent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConfiguration:andServer:andProtocol:andPluginType:andSessionType:sessionQueue:messageQueue:tunnelKind:parent:");
}

id objc_msgSend_initWithDelegate_configUUID_sessionType_name_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDelegate:configUUID:sessionType:name:");
}

id objc_msgSend_initWithDestinationAddress_subnetMask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDestinationAddress:subnetMask:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDictionary_copyItems_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDictionary:copyItems:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithEndpoint_parameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithEndpoint:parameters:");
}

id objc_msgSend_initWithFileDescriptor_closeOnDealloc_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFileDescriptor:closeOnDealloc:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIdentifier:");
}

id objc_msgSend_initWithInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithInterfaceName:");
}

id objc_msgSend_initWithListenerEndpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithListenerEndpoint:");
}

id objc_msgSend_initWithMachServiceName_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMachServiceName:options:");
}

id objc_msgSend_initWithNetworkAgentClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNetworkAgentClass:");
}

id objc_msgSend_initWithNetworkAgentRegistration_sessionType_configurationIdentifier_agentUUID_name_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNetworkAgentRegistration:sessionType:configurationIdentifier:agentUUID:name:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithOrder_result_conditions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithOrder:result:conditions:");
}

id objc_msgSend_initWithPluginType_pluginClass_pluginEndpoint_pluginProcessIdentity_queue_factory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPluginType:pluginClass:pluginEndpoint:pluginProcessIdentity:queue:factory:");
}

id objc_msgSend_initWithPluginType_pluginVersion_pluginClass_pluginInfo_userID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPluginType:pluginVersion:pluginClass:pluginInfo:userID:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithServers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithServers:");
}

id objc_msgSend_initWithSessionName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSessionName:");
}

id objc_msgSend_initWithString_relativeToURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithString:relativeToURL:");
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithURL:");
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUTF8String:");
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUIDBytes:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUnsignedLong:");
}

id objc_msgSend_initWithVirtualInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithVirtualInterface:");
}

id objc_msgSend_initializePlugins(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializePlugins");
}

id objc_msgSend_install(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "install");
}

id objc_msgSend_installPended(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installPended");
}

id objc_msgSend_installPendedOnQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installPendedOnQueue");
}

id objc_msgSend_installSigningIdentifiersWithFlowDivertControlSocket_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installSigningIdentifiersWithFlowDivertControlSocket:");
}

id objc_msgSend_installWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installWithCompletionHandler:");
}

id objc_msgSend_installedMDMProfileIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installedMDMProfileIdentifier");
}

id objc_msgSend_installedProfileWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installedProfileWithIdentifier:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "integerValue");
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interface");
}

id objc_msgSend_interface_hasIPAddress_currentFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interface:hasIPAddress:currentFlags:");
}

id objc_msgSend_interfaceIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceIndex");
}

id objc_msgSend_interfaceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceName");
}

id objc_msgSend_interfaceProtocolMapping(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceProtocolMapping");
}

id objc_msgSend_interfaceTypeMatch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceTypeMatch");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_intersectSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intersectSet:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidate");
}

id objc_msgSend_ipProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ipProtocol:");
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isActive");
}

id objc_msgSend_isAllowAllCaptiveNetworkPlugins(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAllowAllCaptiveNetworkPlugins");
}

id objc_msgSend_isAllowCaptiveWebSheet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAllowCaptiveWebSheet");
}

id objc_msgSend_isDefaultRoute(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDefaultRoute");
}

id objc_msgSend_isDeregisteredEnterpriseVPNSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDeregisteredEnterpriseVPNSession");
}

id objc_msgSend_isDisconnectOnDemandEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDisconnectOnDemandEnabled");
}

id objc_msgSend_isDropPersistent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDropPersistent");
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEnabled");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isFullyTransparent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFullyTransparent");
}

id objc_msgSend_isIdentifierExternal(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isIdentifierExternal");
}

id objc_msgSend_isInbound(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInbound");
}

id objc_msgSend_isInterfaceIPAvailable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInterfaceIPAvailable:");
}

id objc_msgSend_isKernelActivated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isKernelActivated");
}

id objc_msgSend_isLegacyPluginType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLegacyPluginType:");
}

id objc_msgSend_isLimitedToUDP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLimitedToUDP");
}

id objc_msgSend_isListener(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isListener");
}

id objc_msgSend_isLocal(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLocal");
}

id objc_msgSend_isOnDemand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isOnDemand");
}

id objc_msgSend_isOnDemandEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isOnDemandEnabled");
}

id objc_msgSend_isRegistered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRegistered");
}

id objc_msgSend_isSecondaryConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSecondaryConnection");
}

id objc_msgSend_isSecondaryInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSecondaryInterface");
}

id objc_msgSend_isSupervised(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSupervised");
}

id objc_msgSend_isSystemProxyConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSystemProxyConnection");
}

id objc_msgSend_isUserActivated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isUserActivated");
}

id objc_msgSend_isVoluntary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isVoluntary");
}

id objc_msgSend_iterateFileHandlesWithBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iterateFileHandlesWithBlock:");
}

id objc_msgSend_keyMaterial(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyMaterial");
}

id objc_msgSend_keysSortedByValueUsingComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keysSortedByValueUsingComparator:");
}

id objc_msgSend_lastConnectedDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastConnectedDuration");
}

id objc_msgSend_lastDisconnectError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastDisconnectError");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastPrimaryInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastPrimaryInterface");
}

id objc_msgSend_lastStartMessage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastStartMessage");
}

id objc_msgSend_lastStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastStatus");
}

id objc_msgSend_lastStatusChangeTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastStatusChangeTime");
}

id objc_msgSend_lastStopReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastStopReason");
}

id objc_msgSend_leave(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "leave");
}

id objc_msgSend_legacyInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "legacyInfo");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "length");
}

id objc_msgSend_level(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "level");
}

id objc_msgSend_loadConfigurationAndUserWithID_withCompletionQueue_handler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadConfigurationAndUserWithID:withCompletionQueue:handler:");
}

id objc_msgSend_loadConfigurationWithID_withCompletionQueue_handler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadConfigurationWithID:withCompletionQueue:handler:");
}

id objc_msgSend_loadConfigurations_withFilter_completionQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadConfigurations:withFilter:completionQueue:completionHandler:");
}

id objc_msgSend_localAddress_prefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localAddress:prefix:");
}

id objc_msgSend_localNetworks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localNetworks");
}

id objc_msgSend_localNetworksWithFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localNetworksWithFlags:");
}

id objc_msgSend_lockSessionToCurrentProcess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lockSessionToCurrentProcess");
}

id objc_msgSend_logInternalError_subType_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logInternalError:subType:context:");
}

id objc_msgSend_machOUUIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "machOUUIDs");
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mainQueue");
}

id objc_msgSend_managedPayloads(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managedPayloads");
}

id objc_msgSend_managerInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managerInterface");
}

id objc_msgSend_managerObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managerObject");
}

id objc_msgSend_managerObjectFactory(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managerObjectFactory");
}

id objc_msgSend_matchAccountIdentifiers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchAccountIdentifiers");
}

id objc_msgSend_matchDirection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchDirection");
}

id objc_msgSend_matchDomains(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchDomains");
}

id objc_msgSend_matchDomainsNoSearch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchDomainsNoSearch");
}

id objc_msgSend_matchLocalNetworkEndpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchLocalNetworkEndpoint");
}

id objc_msgSend_matchLocalPrefix(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchLocalPrefix");
}

id objc_msgSend_matchPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchPath");
}

id objc_msgSend_matchPrivateLTENetworks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchPrivateLTENetworks");
}

id objc_msgSend_matchProtocol(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchProtocol");
}

id objc_msgSend_matchRemoteHostOrNetworkEndpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchRemoteHostOrNetworkEndpoint");
}

id objc_msgSend_matchRemotePrefix(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchRemotePrefix");
}

id objc_msgSend_matchSSIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchSSIDs");
}

id objc_msgSend_matchSigningIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchSigningIdentifier");
}

id objc_msgSend_matchedRule(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchedRule");
}

id objc_msgSend_matchesFileHandle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchesFileHandle:");
}

id objc_msgSend_maxConnectTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxConnectTime");
}

id objc_msgSend_messageQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "messageQueue");
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_mobileCountryCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mobileCountryCode");
}

id objc_msgSend_mobileNetworkCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mobileNetworkCode");
}

id objc_msgSend_monitorWithNetworkDescription_endpoint_parameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "monitorWithNetworkDescription:endpoint:parameters:");
}

id objc_msgSend_monitorWithNetworkDescriptionArray_endpoint_parameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "monitorWithNetworkDescriptionArray:endpoint:parameters:");
}

id objc_msgSend_mtu(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mtu");
}

id objc_msgSend_multicastPreferenceSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "multicastPreferenceSet");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "name");
}

id objc_msgSend_natKeepAliveOffloadEnable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "natKeepAliveOffloadEnable");
}

id objc_msgSend_natKeepAliveOffloadInterval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "natKeepAliveOffloadInterval");
}

id objc_msgSend_netAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "netAgentUUID:");
}

id objc_msgSend_networkAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkAgent");
}

id objc_msgSend_networkAgentInterfaces(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkAgentInterfaces");
}

id objc_msgSend_networkAgentRegistration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkAgentRegistration");
}

id objc_msgSend_networkDescriptionArray(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkDescriptionArray");
}

id objc_msgSend_networkPrefixLengths(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkPrefixLengths");
}

id objc_msgSend_networkRule(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkRule");
}

id objc_msgSend_notification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notification");
}

id objc_msgSend_notifyChangedExtendedStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyChangedExtendedStatus");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "now");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_onDemandDomainCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onDemandDomainCache");
}

id objc_msgSend_onDemandMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onDemandMonitor");
}

id objc_msgSend_onDemandPauseLevelInternal(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onDemandPauseLevelInternal");
}

id objc_msgSend_onDemandPauseTimerSource(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onDemandPauseTimerSource");
}

id objc_msgSend_onDemandRules(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onDemandRules");
}

id objc_msgSend_openSensitiveURL_withOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "openSensitiveURL:withOptions:");
}

id objc_msgSend_order(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "order");
}

id objc_msgSend_packetProviderDesignatedRequirement(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "packetProviderDesignatedRequirement");
}

id objc_msgSend_parent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parent");
}

id objc_msgSend_parentType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parentType");
}

id objc_msgSend_pass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pass");
}

id objc_msgSend_passWithFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "passWithFlags:");
}

id objc_msgSend_passwordKeychainItem(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "passwordKeychainItem");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "path");
}

id objc_msgSend_pathController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathController");
}

id objc_msgSend_pathRules(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathRules");
}

id objc_msgSend_pauseOnDemand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pauseOnDemand");
}

id objc_msgSend_payloadInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "payloadInfo");
}

id objc_msgSend_payloadUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "payloadUUID");
}

id objc_msgSend_perApp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "perApp");
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pid");
}

id objc_msgSend_pidVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pidVersion");
}

id objc_msgSend_platformBinary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "platformBinary");
}

id objc_msgSend_plugin_didApplySettings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plugin:didApplySettings:");
}

id objc_msgSend_plugin_didAttachIPCWithEndpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plugin:didAttachIPCWithEndpoint:");
}

id objc_msgSend_plugin_didFinishAuthenticationWithResults_status_andError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plugin:didFinishAuthenticationWithResults:status:andError:");
}

id objc_msgSend_plugin_didInitializeWithUUIDs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plugin:didInitializeWithUUIDs:");
}

id objc_msgSend_plugin_didReceiveIncomingCallWithUserInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plugin:didReceiveIncomingCallWithUserInfo:");
}

id objc_msgSend_plugin_didReceiveProviderError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plugin:didReceiveProviderError:");
}

id objc_msgSend_plugin_didReceiveProviderError_forMessageID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plugin:didReceiveProviderError:forMessageID:");
}

id objc_msgSend_plugin_didReceivePushToTalkMessageWithUserInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plugin:didReceivePushToTalkMessageWithUserInfo:");
}

id objc_msgSend_plugin_didRequestVirtualInterfaceWithParameters_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plugin:didRequestVirtualInterfaceWithParameters:completionHandler:");
}

id objc_msgSend_plugin_didSetConfiguration_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plugin:didSetConfiguration:completionHandler:");
}

id objc_msgSend_plugin_didSetStatus_andDisconnectError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plugin:didSetStatus:andDisconnectError:");
}

id objc_msgSend_plugin_didSetStatus_andError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plugin:didSetStatus:andError:");
}

id objc_msgSend_plugin_didStartWithPID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plugin:didStartWithPID:error:");
}

id objc_msgSend_pluginClassToExtensionPoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginClassToExtensionPoint:");
}

id objc_msgSend_pluginCompletionHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginCompletionHandler");
}

id objc_msgSend_pluginConfigurationEntities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginConfigurationEntities");
}

id objc_msgSend_pluginConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginConnection");
}

id objc_msgSend_pluginDidAcknowledgeSleep_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginDidAcknowledgeSleep:");
}

id objc_msgSend_pluginDidClearConfiguration_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginDidClearConfiguration:completionHandler:");
}

id objc_msgSend_pluginDidDetachIPC_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginDidDetachIPC:");
}

id objc_msgSend_pluginDidDispose_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginDidDispose:");
}

id objc_msgSend_pluginDidRequestAgentClientServer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginDidRequestAgentClientServer:");
}

id objc_msgSend_pluginDidRequestContentFilterSocket_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginDidRequestContentFilterSocket:");
}

id objc_msgSend_pluginDidRequestFlowDivertControlSocket_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginDidRequestFlowDivertControlSocket:");
}

id objc_msgSend_pluginDidRequestPacketFilterChannel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginDidRequestPacketFilterChannel:");
}

id objc_msgSend_pluginPIDArray(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginPIDArray");
}

id objc_msgSend_pluginProxyWithIdentifier_type_pluginClass_extensionPoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginProxyWithIdentifier:type:pluginClass:extensionPoint:");
}

id objc_msgSend_pluginType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pluginType");
}

id objc_msgSend_pointerAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pointerAtIndex:");
}

id objc_msgSend_policySession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policySession");
}

id objc_msgSend_predicateWithBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateWithBlock:");
}

id objc_msgSend_predictedInterfaceArray(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictedInterfaceArray");
}

id objc_msgSend_prepareConfigurationForStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareConfigurationForStart");
}

id objc_msgSend_prepareNetwork(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareNetwork");
}

id objc_msgSend_preserveExistingConnections(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preserveExistingConnections");
}

id objc_msgSend_primaryCellularInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primaryCellularInterface");
}

id objc_msgSend_primaryPhysicalInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primaryPhysicalInterface");
}

id objc_msgSend_primaryTunnelPlugin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primaryTunnelPlugin");
}

id objc_msgSend_primaryWiFiInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primaryWiFiInterface");
}

id objc_msgSend_probeURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "probeURL");
}

id objc_msgSend_profileIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "profileIdentifier");
}

id objc_msgSend_profileUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "profileUUID");
}

id objc_msgSend_prohibitNetworkAgentsWithDomain_type_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prohibitNetworkAgentsWithDomain:type:");
}

id objc_msgSend_protocol(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "protocol");
}

id objc_msgSend_provider(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "provider");
}

id objc_msgSend_providerBundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "providerBundleIdentifier");
}

id objc_msgSend_providerConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "providerConfiguration");
}

id objc_msgSend_providerDesignatedRequirement(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "providerDesignatedRequirement");
}

id objc_msgSend_proxyConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyConfig");
}

id objc_msgSend_proxyEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyEnabled:");
}

id objc_msgSend_proxySettings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxySettings");
}

id objc_msgSend_queries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queries");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queue");
}

id objc_msgSend_queueChangesToTunnelConfiguration_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queueChangesToTunnelConfiguration:completionHandler:");
}

id objc_msgSend_rawPublicKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rawPublicKeys");
}

id objc_msgSend_realApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "realApplication:");
}

id objc_msgSend_reassertedByPlugin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reassertedByPlugin");
}

id objc_msgSend_recordType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recordType");
}

id objc_msgSend_registerNetworkAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerNetworkAgent:");
}

id objc_msgSend_registerServiceUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerServiceUUID:");
}

id objc_msgSend_registerSession_fromClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerSession:fromClient:");
}

id objc_msgSend_registerSession_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerSession:withCompletionHandler:");
}

id objc_msgSend_registeredNetworkAgentInterfaces(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registeredNetworkAgentInterfaces");
}

id objc_msgSend_relay(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "relay");
}

id objc_msgSend_relays(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "relays");
}

id objc_msgSend_remoteAddress_prefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteAddress:prefix:");
}

id objc_msgSend_remoteObjectProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteObjectProxy");
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_remotePluginInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remotePluginInterface");
}

id objc_msgSend_remotePluginObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remotePluginObject");
}

id objc_msgSend_remotePluginObjectWithErrorHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remotePluginObjectWithErrorHandler:");
}

id objc_msgSend_removeAllClients(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllClients");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeAllPolicies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllPolicies");
}

id objc_msgSend_removeFileHandleMatchingPredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeFileHandleMatchingPredicate:");
}

id objc_msgSend_removeNetworkAgentFromInterfaceNamed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeNetworkAgentFromInterfaceNamed:");
}

id objc_msgSend_removeNetworkAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeNetworkAgentUUID:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObserver_forKeyPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObserver:forKeyPath:");
}

id objc_msgSend_removePointerAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removePointerAtIndex:");
}

id objc_msgSend_removePolicyWithID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removePolicyWithID:");
}

id objc_msgSend_replaceObjectAtIndex_withObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replaceObjectAtIndex:withObject:");
}

id objc_msgSend_reportIncomingCall_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportIncomingCall:");
}

id objc_msgSend_reportPushToTalkMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportPushToTalkMessage:");
}

id objc_msgSend_requestInstall(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestInstall");
}

id objc_msgSend_requestInstallForSession_withParentSession_exclusive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestInstallForSession:withParentSession:exclusive:");
}

id objc_msgSend_requestSliceByUUID_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestSliceByUUID:completion:");
}

id objc_msgSend_requestSliceDeactivation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestSliceDeactivation:");
}

id objc_msgSend_requestUninstall(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestUninstall");
}

id objc_msgSend_requestUninstallForSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestUninstallForSession:");
}

id objc_msgSend_requestWithURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestWithURL:");
}

id objc_msgSend_requireNetworkAgentWithDomain_type_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requireNetworkAgentWithDomain:type:");
}

id objc_msgSend_resetPerAppPolicy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetPerAppPolicy");
}

id objc_msgSend_resolvedEndpoints(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resolvedEndpoints");
}

id objc_msgSend_restartPending(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restartPending");
}

id objc_msgSend_restartSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restartSession");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resume");
}

id objc_msgSend_rotateEncryptionKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rotateEncryptionKey");
}

id objc_msgSend_routeRuleWithAction_forInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routeRuleWithAction:forInterfaceName:");
}

id objc_msgSend_routeRuleWithAction_forType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routeRuleWithAction:forType:");
}

id objc_msgSend_routeRules_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routeRules:");
}

id objc_msgSend_router(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "router");
}

id objc_msgSend_rules(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rules");
}

id objc_msgSend_satisfyCellularPathForSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "satisfyCellularPathForSession:");
}

id objc_msgSend_satisfyPathAgentsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "satisfyPathAgentsWithCompletionHandler:");
}

id objc_msgSend_satisfyPathForSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "satisfyPathForSession:");
}

id objc_msgSend_satisfyPathResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "satisfyPathResult:");
}

id objc_msgSend_saveConfiguration_withCompletionQueue_handler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveConfiguration:withCompletionQueue:handler:");
}

id objc_msgSend_scheduleWithFireInterval_leewayInterval_queue_handler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleWithFireInterval:leewayInterval:queue:handler:");
}

id objc_msgSend_schemeUsingPort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "schemeUsingPort:");
}

id objc_msgSend_scopeSocketToInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scopeSocketToInterfaceName:");
}

id objc_msgSend_scopeToDirectInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scopeToDirectInterface");
}

id objc_msgSend_scopedInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scopedInterface:");
}

id objc_msgSend_scopedInterfaceFlags_eflags_xflags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scopedInterfaceFlags:eflags:xflags:");
}

id objc_msgSend_searchDomains(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "searchDomains");
}

id objc_msgSend_sendConfigurationChangeHandledNotification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendConfigurationChangeHandledNotification");
}

id objc_msgSend_sendEstablishIPCReply(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendEstablishIPCReply");
}

id objc_msgSend_sendExtensionFailed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendExtensionFailed");
}

id objc_msgSend_sendNetworkExtensionMessage_forBundleIdentifier_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendNetworkExtensionMessage:forBundleIdentifier:completion:");
}

id objc_msgSend_sendNetworkExtensionPushToTalkMessage_forBundleIdentifier_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendNetworkExtensionPushToTalkMessage:forBundleIdentifier:completion:");
}

id objc_msgSend_sendOutgoingCallMessage_andMessageID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendOutgoingCallMessage:andMessageID:");
}

id objc_msgSend_sendOutgoingCallMessage_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendOutgoingCallMessage:completionHandler:");
}

id objc_msgSend_sendTimerEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendTimerEvent");
}

id objc_msgSend_server(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "server");
}

id objc_msgSend_serverAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serverAddress");
}

id objc_msgSend_servers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "servers");
}

id objc_msgSend_serviceExceptions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceExceptions");
}

id objc_msgSend_sessionContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionContext");
}

id objc_msgSend_sessionType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionType");
}

id objc_msgSend_sessionWithConfiguration_andType_andServer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionWithConfiguration:andType:andServer:");
}

id objc_msgSend_sessionWithConfiguration_delegate_delegateQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionWithConfiguration:delegate:delegateQueue:");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setActiveInterfaceProtocolKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActiveInterfaceProtocolKey:");
}

id objc_msgSend_setAdvisoryInterfaceArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAdvisoryInterfaceArray:");
}

id objc_msgSend_setAgentFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAgentFlags:");
}

id objc_msgSend_setAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAgentUUID:");
}

id objc_msgSend_setAnswerData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAnswerData:");
}

id objc_msgSend_setAnswerTTL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAnswerTTL:");
}

id objc_msgSend_setAppUUIDMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppUUIDMap:");
}

id objc_msgSend_setAssertHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAssertHandler:");
}

id objc_msgSend_setAuthenticationPlugin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAuthenticationPlugin:");
}

id objc_msgSend_setAuxiliaryData_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAuxiliaryData:forKey:");
}

id objc_msgSend_setAuxiliaryDataKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAuxiliaryDataKey:");
}

id objc_msgSend_setBoundInterfaceIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBoundInterfaceIdentifier:");
}

id objc_msgSend_setCachedMachOUUIDs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedMachOUUIDs:");
}

id objc_msgSend_setCachedStateHandlers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedStateHandlers:");
}

id objc_msgSend_setChangedQueue_andHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChangedQueue:andHandler:");
}

id objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClasses:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfiguration:");
}

id objc_msgSend_setConfigurationCompletionHandlerArray(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigurationCompletionHandlerArray");
}

id objc_msgSend_setConfigurationName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigurationName:");
}

id objc_msgSend_setConfigurationSignature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigurationSignature:");
}

id objc_msgSend_setConfigurationUserUUIDs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigurationUserUUIDs:");
}

id objc_msgSend_setConfigurationWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigurationWithCompletionHandler:");
}

id objc_msgSend_setConnectCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConnectCount:");
}

id objc_msgSend_setConnectParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConnectParameters:");
}

id objc_msgSend_setConnectTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConnectTime:");
}

id objc_msgSend_setConnectedCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConnectedCount:");
}

id objc_msgSend_setControlPolicySession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setControlPolicySession:");
}

id objc_msgSend_setControlSocket_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setControlSocket:");
}

id objc_msgSend_setDefaultDropType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDefaultDropType:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDelegateInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegateInterface:");
}

id objc_msgSend_setDelegateInterfaceAddress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegateInterfaceAddress:");
}

id objc_msgSend_setDelegateInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegateInterfaceName:");
}

id objc_msgSend_setDenyMulticast_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDenyMulticast:");
}

id objc_msgSend_setDesignatedRequirement_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDesignatedRequirement:");
}

id objc_msgSend_setDisableInitialContact_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisableInitialContact:");
}

id objc_msgSend_setDisableMOBIKERetryOnWake_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisableMOBIKERetryOnWake:");
}

id objc_msgSend_setDisableOnDemand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisableOnDemand:");
}

id objc_msgSend_setDisconnectedCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisconnectedCount:");
}

id objc_msgSend_setDnsAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDnsAgent:");
}

id objc_msgSend_setDnsAgentRegistration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDnsAgentRegistration:");
}

id objc_msgSend_setDnsRedirectionDetector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDnsRedirectionDetector:");
}

id objc_msgSend_setDnsRedirectionTransaction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDnsRedirectionTransaction:");
}

id objc_msgSend_setDnsSearchDomainOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDnsSearchDomainOptions:");
}

id objc_msgSend_setDnsServerAddressOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDnsServerAddressOptions:");
}

id objc_msgSend_setDomainName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDomainName:");
}

id objc_msgSend_setEndpointInEstablishIPCReply_forPlugin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEndpointInEstablishIPCReply:forPlugin:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setExtension_pid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExtension_pid:");
}

id objc_msgSend_setFailedConnectCountWithinInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFailedConnectCountWithinInterval:");
}

id objc_msgSend_setFileHandle_matchingPredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFileHandle:matchingPredicate:");
}

id objc_msgSend_setFirstFailedConnectTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFirstFailedConnectTime:");
}

id objc_msgSend_setGid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGid:");
}

id objc_msgSend_setHighPolicySession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHighPolicySession:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIdentityReferenceInternal_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdentityReferenceInternal:");
}

id objc_msgSend_setInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterfaceName:");
}

id objc_msgSend_setInterfaceTypeMatch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterfaceTypeMatch:");
}

id objc_msgSend_setInterfaceTypeOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterfaceTypeOptions:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIsDeregisteredAppVPNSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsDeregisteredAppVPNSession:");
}

id objc_msgSend_setIsDeregisteredEnterpriseVPNSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsDeregisteredEnterpriseVPNSession:");
}

id objc_msgSend_setIsDropPersistent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsDropPersistent:");
}

id objc_msgSend_setIsOnDemand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsOnDemand:");
}

id objc_msgSend_setIsSecondaryConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsSecondaryConnection:");
}

id objc_msgSend_setIsSecondaryInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsSecondaryInterface:");
}

id objc_msgSend_setKernelActivated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKernelActivated:");
}

id objc_msgSend_setLastConnectedDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastConnectedDuration:");
}

id objc_msgSend_setLastDisconnectError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastDisconnectError:");
}

id objc_msgSend_setLastPrimaryInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastPrimaryInterface:");
}

id objc_msgSend_setLastStartMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastStartMessage:");
}

id objc_msgSend_setLastStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastStatus:");
}

id objc_msgSend_setLastStatusChangeTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastStatusChangeTime:");
}

id objc_msgSend_setLastStopReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastStopReason:");
}

id objc_msgSend_setMatchDomains_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMatchDomains:");
}

id objc_msgSend_setMatchedRule_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMatchedRule:");
}

id objc_msgSend_setMaxConnectTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxConnectTime:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNatKeepAliveOffloadEnable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNatKeepAliveOffloadEnable:");
}

id objc_msgSend_setNatKeepAliveOffloadInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNatKeepAliveOffloadInterval:");
}

id objc_msgSend_setNegative_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNegative:");
}

id objc_msgSend_setNetworkAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkAgent:");
}

id objc_msgSend_setNetworkAgentInterfaces_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkAgentInterfaces:");
}

id objc_msgSend_setNetworkAgentRegistration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkAgentRegistration:");
}

id objc_msgSend_setNotification_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNotification:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOnDemandDomainCache_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOnDemandDomainCache:");
}

id objc_msgSend_setOnDemandMonitor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOnDemandMonitor:");
}

id objc_msgSend_setOnDemandPauseLevelInternal_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOnDemandPauseLevelInternal:");
}

id objc_msgSend_setOnDemandPauseTimerSource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOnDemandPauseTimerSource:");
}

id objc_msgSend_setPluginCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPluginCompletionHandler:");
}

id objc_msgSend_setPluginConfigurationEntities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPluginConfigurationEntities:");
}

id objc_msgSend_setPluginConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPluginConnection:");
}

id objc_msgSend_setPolicySession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPolicySession:");
}

id objc_msgSend_setPredictedInterfaceArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPredictedInterfaceArray:");
}

id objc_msgSend_setPrimaryCellularInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimaryCellularInterface:");
}

id objc_msgSend_setPrimaryPhysicalInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimaryPhysicalInterface:");
}

id objc_msgSend_setPrimaryTunnelPlugin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimaryTunnelPlugin:");
}

id objc_msgSend_setPrimaryWiFiInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimaryWiFiInterface:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setProbeURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProbeURL:");
}

id objc_msgSend_setProperties_forNetworkPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProperties:forNetworkPath:");
}

id objc_msgSend_setProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProtocol:");
}

id objc_msgSend_setProviderConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProviderConfiguration:");
}

id objc_msgSend_setProxyAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyAgentUUID:");
}

id objc_msgSend_setProxyConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyConfig:");
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQueue:");
}

id objc_msgSend_setReassertedByPlugin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReassertedByPlugin:");
}

id objc_msgSend_setRegisteredNetworkAgent_fileDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRegisteredNetworkAgent:fileDescriptor:");
}

id objc_msgSend_setRegisteredNetworkAgentInterfaces_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRegisteredNetworkAgentInterfaces:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRequiredAddressFamily_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiredAddressFamily:");
}

id objc_msgSend_setRequiredInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiredInterface:");
}

id objc_msgSend_setRequiredInterfaceType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiredInterfaceType:");
}

id objc_msgSend_setRestartPending_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRestartPending:");
}

id objc_msgSend_setRoamingPreference_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRoamingPreference:");
}

id objc_msgSend_setSSIDMatch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSSIDMatch:");
}

id objc_msgSend_setSearchDomains_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSearchDomains:");
}

id objc_msgSend_setServerURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServerURL:");
}

id objc_msgSend_setSettings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSettings:");
}

id objc_msgSend_setSleepOnDisconnect_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSleepOnDisconnect:");
}

id objc_msgSend_setSsidOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSsidOptions:");
}

id objc_msgSend_setStaleOnDemandDNSKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStaleOnDemandDNSKeys:");
}

id objc_msgSend_setStartHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStartHandler:");
}

id objc_msgSend_setStartMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStartMessage:");
}

id objc_msgSend_setStarted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStarted:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStatus:");
}

id objc_msgSend_setStopped_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStopped:");
}

id objc_msgSend_setSystemDNSSettings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSystemDNSSettings:");
}

id objc_msgSend_setTemporaryAllowMulticastNetworkName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTemporaryAllowMulticastNetworkName:");
}

id objc_msgSend_setTunnelKind_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTunnelKind:");
}

id objc_msgSend_setUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUID:");
}

id objc_msgSend_setUnassertHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUnassertHandler:");
}

id objc_msgSend_setUserActivated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserActivated:");
}

id objc_msgSend_setUserEthernetController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserEthernetController:");
}

id objc_msgSend_setVirtualInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVirtualInterface:");
}

id objc_msgSend_setVoluntary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVoluntary:");
}

id objc_msgSend_setWeakAdvisory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWeakAdvisory:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_settings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "settings");
}

id objc_msgSend_setupFromAuxiliaryData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupFromAuxiliaryData");
}

id objc_msgSend_setupWithPluginType_pluginVersion_pluginClass_pluginInfo_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupWithPluginType:pluginVersion:pluginClass:pluginInfo:completionHandler:");
}

id objc_msgSend_sharedCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedCache");
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedConnection");
}

id objc_msgSend_sharedMaintainer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedMaintainer");
}

id objc_msgSend_sharedManagerForAllUsers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedManagerForAllUsers");
}

id objc_msgSend_sharedSecretKeychainItem(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedSecretKeychainItem");
}

id objc_msgSend_shouldBeIdleForStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldBeIdleForStatus:");
}

id objc_msgSend_shouldSendIPCAttachForPlugin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldSendIPCAttachForPlugin:");
}

id objc_msgSend_signingIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signingIdentifier:");
}

id objc_msgSend_skipWithOrder_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "skipWithOrder:");
}

id objc_msgSend_sleepOnDisconnect(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sleepOnDisconnect");
}

id objc_msgSend_sleepWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sleepWithCompletionHandler:");
}

id objc_msgSend_sliceUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sliceUUID");
}

id objc_msgSend_slotID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "slotID");
}

id objc_msgSend_ssid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ssid");
}

id objc_msgSend_staleOnDemandDNSKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "staleOnDemandDNSKeys");
}

id objc_msgSend_startConnectionWithProviderConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startConnectionWithProviderConfig:");
}

id objc_msgSend_startConnectionWithProviderConfig_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startConnectionWithProviderConfig:completionHandler:");
}

id objc_msgSend_startFilter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startFilter");
}

id objc_msgSend_startMessage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startMessage");
}

id objc_msgSend_startOwnerModeWithEventName_handlesReceivedCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startOwnerModeWithEventName:handlesReceivedCallback:");
}

id objc_msgSend_startWithCommand_isOnDemand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startWithCommand:isOnDemand:");
}

id objc_msgSend_startWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startWithCompletionHandler:");
}

id objc_msgSend_startWithConfiguration_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startWithConfiguration:completionHandler:");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "state");
}

id objc_msgSend_stateHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stateHandler");
}

id objc_msgSend_stateWithType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stateWithType:");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "status");
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "statusCode");
}

id objc_msgSend_stopIfNecessaryWithReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopIfNecessaryWithReason:");
}

id objc_msgSend_stopIfNecessaryWithReason_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopIfNecessaryWithReason:withCompletionHandler:");
}

id objc_msgSend_stopWithReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopWithReason:");
}

id objc_msgSend_stopWithReason_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopWithReason:completionHandler:");
}

id objc_msgSend_stopped(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopped");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringValue");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_subnetMasks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subnetMasks");
}

id objc_msgSend_subscriptions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subscriptions");
}

id objc_msgSend_supportsDefaultDrop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsDefaultDrop");
}

id objc_msgSend_syntheticDNSAnswerIPv4Prefix(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "syntheticDNSAnswerIPv4Prefix");
}

id objc_msgSend_syntheticDNSAnswerIPv6Prefix(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "syntheticDNSAnswerIPv6Prefix");
}

id objc_msgSend_temporaryAllowMulticastNetworkName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "temporaryAllowMulticastNetworkName");
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSince1970");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceNow");
}

id objc_msgSend_trackNOIAnyForInterfaceType_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trackNOIAnyForInterfaceType:options:");
}

id objc_msgSend_trackingAreaCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trackingAreaCode");
}

id objc_msgSend_trafficClassStart_end_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trafficClassStart:end:");
}

id objc_msgSend_tunnelIPToInterfaceName_secondaryResultType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tunnelIPToInterfaceName:secondaryResultType:");
}

id objc_msgSend_tunnelKind(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tunnelKind");
}

id objc_msgSend_tunnelOverheadBytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tunnelOverheadBytes");
}

id objc_msgSend_tunnelRemoteAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tunnelRemoteAddress");
}

id objc_msgSend_tunnelType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tunnelType");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "type");
}

id objc_msgSend_uid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uid");
}

id objc_msgSend_uid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uid:");
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_uninstall(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uninstall");
}

id objc_msgSend_uninstallOnQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uninstallOnQueue");
}

id objc_msgSend_unpauseOnDemand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unpauseOnDemand");
}

id objc_msgSend_unregisterNetworkAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterNetworkAgent");
}

id objc_msgSend_unregisterServiceUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterServiceUUID:");
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedCharValue");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntValue");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedLongLongValue");
}

id objc_msgSend_updateAppRulesForUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAppRulesForUID:");
}

id objc_msgSend_updateConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateConfiguration:");
}

id objc_msgSend_updateNetworkAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateNetworkAgent:");
}

id objc_msgSend_useDNSServers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useDNSServers");
}

id objc_msgSend_userEthernetController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userEthernetController");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userInfo");
}

id objc_msgSend_username(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "username");
}

id objc_msgSend_usesModernNetworkAPI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "usesModernNetworkAPI");
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uuid");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_virtualInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "virtualInterface");
}

id objc_msgSend_waitForPerApp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForPerApp");
}

id objc_msgSend_wakeup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wakeup");
}

id objc_msgSend_weakAdvisory(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "weakAdvisory");
}

id objc_msgSend_weakObjectsPointerArray(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "weakObjectsPointerArray");
}

id objc_msgSend_wifiBehavior(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiBehavior");
}
